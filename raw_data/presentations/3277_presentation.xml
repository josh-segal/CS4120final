<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>EASEAndroid: Automatic Policy Analysis and</p>
    <p>Refinement for Security Enhanced Android</p>
    <p>via Large-Scale Semi-Supervised Learning</p>
    <p>Ruowen Wang1,2, William Enck2, Douglas Reeves2, Xinwen Zhang1,</p>
    <p>Peng Ning1,2, Dingbang Xu1, Wu Zhou1, Ahmed M. Azab1</p>
  </div>
  <div class="page">
    <p>Security Enhanced Android</p>
    <p>Multiple vulnerabilities have been prevented since we introduced SELinux</p>
    <p>--Android Official Blog, October 28, 2014</p>
    <p>SEAndroid prevents first exploit against commercial phone</p>
    <p>--http://securityblog.org/2013/04/30/SE-Android-and-the-motochopper-exploit/</p>
  </div>
  <div class="page">
    <p>The Core of SEAndroid: Policy</p>
    <p>Vendors dont know how to write policies --@pof Defeat SEAndroid at Defcon 2013</p>
    <p>AVC??</p>
  </div>
  <div class="page">
    <p>Policy Language</p>
    <p>Security labels &lt;=&gt; Concrete Subjects/Objects</p>
    <p>app_data_file &lt;=&gt; /data/data/.*</p>
    <p>Allow rules grant benign operations</p>
    <p>allow appdomain app_data_file:file</p>
    <p>{read write execute}</p>
    <p>Neverallow rules define privilege escalation</p>
    <p>neverallow untrusted_app init:file</p>
    <p>{read} (Compile-Time)</p>
  </div>
  <div class="page">
    <p>SEAndroid Policy Challenges</p>
    <p>Require Complete Redesign of Policy</p>
    <p>Android is different from traditional Linux</p>
    <p>Require Policy Analysts to Have Both</p>
    <p>Domain Knowledge (Allow Benign Accesses)</p>
    <p>Security Expertise (Prevent Malicious Accesses)</p>
    <p>Require Continuous Refinements</p>
    <p>New Android releases</p>
    <p>New attacks 5</p>
  </div>
  <div class="page">
    <p>How to Refine?</p>
    <p>Analyze Audit Log</p>
    <p>Audit Log  Log access events not matched with allow rules</p>
    <p>Analysts parse the logs to refine policy</p>
    <p>Information in one access event</p>
    <p>Security labels of the denied access</p>
    <p>Syscall Subject Info (e.g. process)</p>
    <p>Syscall Object Info (e.g. file path)</p>
    <p>We model as 6-tuple access pattern  &lt;sbj, sbj_label, perm, tclass, obj, obj_label&gt;</p>
  </div>
  <div class="page">
    <p>Real-World Challenges</p>
    <p>Millions of such audit logs</p>
    <p>Unknown new benign &amp; malicious access</p>
    <p>patterns mixed together</p>
    <p>Continuous efforts due to Android updates and</p>
    <p>emerging new attacks</p>
  </div>
  <div class="page">
    <p>EASEAndroid</p>
    <p>Elastic Analytics of SEAndroid</p>
    <p>Features:</p>
    <p>refinements</p>
    <p>Key insight:</p>
    <p>Model policy refinement as semi-supervised</p>
    <p>learning 8</p>
  </div>
  <div class="page">
    <p>Key Insight</p>
    <p>Audit Logs</p>
    <p>Existing Policy &amp; Known Access Patterns</p>
    <p>Learning Unknown based on Semantic Correlations</p>
    <p>Known &lt;=&gt; Unknown</p>
    <p>(Semi-Supervised Learning)</p>
    <p>+</p>
    <p>: Known Access Pattern : sbj</p>
    <p>: &lt;perm, tclass&gt; : obj</p>
    <p>: benign _</p>
    <p>: malicious</p>
    <p>: New Access Pattern</p>
    <p>Analyze</p>
    <p>Merge</p>
    <p>allow</p>
    <p>neverallow</p>
    <p>+ + _</p>
    <p>_</p>
  </div>
  <div class="page">
    <p>EASEAndroid Architecture</p>
    <p>NN Classifier</p>
    <p>+ +</p>
    <p>+ allow neverallow</p>
    <p>+</p>
    <p>+ + _</p>
    <p>_</p>
    <p>_</p>
    <p>Pattern-to-Rule Distance Measurer</p>
    <p>Audit Logs</p>
    <p>Learning Balancer &amp; Combiner</p>
    <p>Refined Policy Policy</p>
    <p>Refinement Generator</p>
    <p>Feedback &amp; Merge to Learn More Knowledge Iteratively</p>
    <p>_ + +</p>
    <p>_</p>
    <p>+</p>
    <p>_ allow</p>
    <p>neverallow</p>
    <p>...</p>
    <p>+</p>
    <p>: Known Access Pattern : sbj</p>
    <p>: &lt;perm, tclass&gt; : obj</p>
    <p>: benign _</p>
    <p>: malicious</p>
    <p>: New Access Pattern Merge refined policy once confirmed (optional)</p>
    <p>Existing Policy &amp; Known Access Patterns</p>
    <p>allow</p>
    <p>neverallow</p>
    <p>... _+</p>
    <p>+ _</p>
    <p>...</p>
    <p>Co-Occurrence Learner</p>
  </div>
  <div class="page">
    <p>Nearest-Neighbor (NN) Classifier</p>
    <p>Observation</p>
    <p>Known sbjs perform new access patterns</p>
    <p>Android apps/binaries update with new features</p>
    <p>New sbjs perform known access patterns</p>
    <p>Exploit kits share malicious access patterns</p>
    <p>NN Classifier identifies connections between</p>
    <p>Known subjects &lt;=&gt; New access patterns</p>
    <p>New subjects &lt;=&gt; Known access patterns</p>
  </div>
  <div class="page">
    <p>Known &amp; unknown exploit kits share the same /dev/graphics/fb exploit</p>
  </div>
  <div class="page">
    <p>Pattern-to-Rule (P2R)</p>
    <p>Distance Measurer</p>
    <p>Observation</p>
    <p>New access patterns close to existing incomplete</p>
    <p>rules are the missing parts of those rules</p>
    <p>Decision-Tree-based Approach</p>
    <p>Classified as benign if closest to allow</p>
    <p>Classified as malicious if closest to neverallow</p>
    <p>Remain unclassified if far from both sides</p>
  </div>
  <div class="page">
    <p>Decision-Tree-Based P2R</p>
    <p>untrusted_app</p>
    <p>app_data_file</p>
    <p>shell_data_file sdcard_file</p>
    <p>system_file</p>
    <p>imei_efs_file</p>
    <p>file</p>
    <p>dir</p>
    <p>blk_file</p>
    <p>chr_file</p>
    <p>open read</p>
    <p>write</p>
    <p>append</p>
    <p>execute low_sensitive_data</p>
    <p>high_sensitive_data</p>
    <p>common_file</p>
    <p>special_file</p>
    <p>read_like_perm</p>
    <p>write_like_perm</p>
    <p>execute_perm</p>
    <p>&lt;untrusted_app, sdcard_file, dir, read&gt;</p>
  </div>
  <div class="page">
    <p>Co-Occurrence Learner</p>
    <p>Observation</p>
    <p>A functionality or an attack often involve a series</p>
    <p>of access patterns captured together</p>
    <p>Co-Occurrence Learner</p>
    <p>Infer new access patterns based on known</p>
    <p>access patterns if they co-occur together</p>
    <p>...</p>
  </div>
  <div class="page">
    <p>Learning Balancer &amp; Combiner</p>
    <p>Manage thresholds of each learner</p>
    <p>Combine results to expand knowledge base</p>
    <p>Balance precision and coverage</p>
    <p>Automated Mode (high precision)</p>
    <p>Semi-Automated Mode (high coverage)</p>
    <p>+ +</p>
    <p>+ allow neverallow</p>
    <p>+</p>
    <p>+ + _</p>
    <p>_</p>
    <p>_</p>
    <p>Pattern-to-Rule Distance Measurer</p>
    <p>Audit Logs</p>
    <p>Learning Balancer &amp; Combiner</p>
    <p>Refined Policy Policy</p>
    <p>Refinement Generator</p>
    <p>Feedback &amp; Merge to Learn More Knowledge Iteratively</p>
    <p>_ + +</p>
    <p>_</p>
    <p>+</p>
    <p>_ allow</p>
    <p>neverallow</p>
    <p>...</p>
    <p>+</p>
    <p>: Known Access Pattern : sbj</p>
    <p>: &lt;perm, tclass&gt; : obj</p>
    <p>: benign _</p>
    <p>: malicious</p>
    <p>: New Access Pattern Merge refined policy once confirmed (optional)</p>
    <p>Existing Policy &amp; Known Access Patterns</p>
    <p>allow</p>
    <p>neverallow</p>
    <p>... _+</p>
    <p>+ _</p>
    <p>...</p>
    <p>Co-Occurrence Learner</p>
  </div>
  <div class="page">
    <p>Policy Refinement Generator</p>
    <p>Suggest new security labels and rules</p>
    <p>Group sbjs/objs together based on existing</p>
    <p>coarse-grained labels</p>
    <p>Infer fine-grained labels and encode into rules</p>
    <p>NN Classifier</p>
    <p>+ +</p>
    <p>+ allow neverallow</p>
    <p>+</p>
    <p>+ + _</p>
    <p>_</p>
    <p>_</p>
    <p>Pattern-to-Rule Distance Measurer</p>
    <p>Audit Logs</p>
    <p>Learning Balancer &amp; Combiner</p>
    <p>Refined Policy Policy</p>
    <p>Refinement Generator</p>
    <p>Feedback &amp; Merge to Learn More Knowledge Iteratively</p>
    <p>_ + +</p>
    <p>_</p>
    <p>+</p>
    <p>_ allow</p>
    <p>neverallow</p>
    <p>...</p>
    <p>+</p>
    <p>: Known Access Pattern : sbj</p>
    <p>: &lt;perm, tclass&gt; : obj</p>
    <p>: benign _</p>
    <p>: malicious</p>
    <p>: New Access Pattern Merge refined policy once confirmed (optional)</p>
    <p>Existing Policy &amp; Known Access Patterns</p>
    <p>allow</p>
    <p>neverallow</p>
    <p>... _+</p>
    <p>+ _</p>
    <p>...</p>
    <p>Co-Occurrence Learner</p>
  </div>
  <div class="page">
    <p>Implementation</p>
    <p>8-node Hadoop Cluster, 256 GB Memory.</p>
    <p>Distributed SQL on HDFS.</p>
    <p>SLOC: 10K Java + 5K Cloudera Impala</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>RQ1: How is the coverage and precision of</p>
    <p>EASEAndroid? What are the effects of different</p>
    <p>threshold settings?</p>
    <p>RQ2: How is a policy refinement generated? What is</p>
    <p>the difference compared to human-written policy?</p>
    <p>RQ3: What kinds of new malicious patterns are</p>
    <p>discovered by EASEAndroid?</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Audit Log Dataset</p>
    <p>1.3M logs from real-world Samsung devices with Android</p>
    <p>145K unique access events and generalized into 3530</p>
    <p>access patterns</p>
    <p>Initial Knowledge</p>
    <p>An early version policy, 9 confirmed exploit kits</p>
    <p>Ground Truth</p>
    <p>A later version of human-refined policy</p>
    <p>Consult with experienced policy analysts 20</p>
  </div>
  <div class="page">
    <p>Evaluation Coverage &amp; Precision</p>
  </div>
  <div class="page">
    <p>NN Classifier Threshold</p>
    <p>Pattern-toRule Threshold</p>
    <p>CoOccurrence Threshold</p>
    <p>Classified Malicious (TP+FP)</p>
    <p>Classified Benign (TN+FN)</p>
    <p>Remain Unclassified</p>
    <p>= 55% Dist  2 cij &gt; 0.55 77.2% 14.0% 8.8%</p>
    <p>= 65% Dist  1 cij &gt; 0.65 70.0% 11.8% 18.2%</p>
    <p>= 75% Dist  1 cij &gt; 0.75 65.7% 10.9% 23.4%</p>
    <p>= 85% Dist  0 cij &gt; 0.85 63.9% 10.5% 25.7%</p>
    <p>= 95% Dist  0 cij &gt; 0.95 53.1% 9.2% 37.7%</p>
    <p>Evaluation Different Thresholds (Coverage)</p>
  </div>
  <div class="page">
    <p>NN Classifier Threshold</p>
    <p>Pattern-toRule Threshold</p>
    <p>CoOccurrence Threshold</p>
    <p>True Malicious (TP)</p>
    <p>False Malicious (FP)</p>
    <p>True Benign (TN)</p>
    <p>False Benign (FN)</p>
    <p>= 55% Dist  2 cij &gt; 0.55 62.96% 37.04% 58.65% 41.35%</p>
    <p>= 65% Dist  1 cij &gt; 0.65 88.73% 11.27% 71.35% 28.65%</p>
    <p>= 75% Dist  1 cij &gt; 0.75 91.35% 8.65% 88.92% 11.08%</p>
    <p>= 85% Dist  0 cij &gt; 0.85 96.81% 3.19% 90.81% 9.19%</p>
    <p>= 95% Dist  0 cij &gt; 0.95 97.27% 2.73% 100.00% 0.00%</p>
    <p>Evaluation Different Thresholds (Precision)</p>
  </div>
  <div class="page">
    <p>Evaluation Refinement Example</p>
    <p>&lt;surfaceflinger, {open}, file, /data/misc/zoneinfo/*, system_data_file&gt;</p>
    <p>&lt;dhcpcd, {open}, file, /data/misc/zoneinfo/*, system_data_file &gt;</p>
    <p>&lt;pppd, {open}, file, /data/misc/zoneinfo/*, system_data_file &gt;</p>
    <p>&lt;vendor_daemon, {open}, file, /data/misc/zoneinfo/*, system_data_file &gt;</p>
    <p>=&gt;</p>
    <p>/data/misc/zoneinfo/*  u:object_r:zoneinfo_file:s0</p>
    <p>attribute access_zoneinfo_domain;</p>
    <p>typeattribute surfaceflinger access_zoneinfo_domain;</p>
    <p>......(same for other 3 system daemons)</p>
    <p>allow access_zoneinfo_domain zoneinfo_file:file {open</p>
    <p>read};</p>
  </div>
  <div class="page">
    <p>Evaluation Comparison with Human-written Policy</p>
    <p>336 benign access patterns, 51 policy rules</p>
    <p>All rules semantically match human rules</p>
    <p>EASEAndroid: Fine-grained + Evidence  allow access_zoneinfo_domain</p>
    <p>zoneinfo_file:file {open read};</p>
    <p>Human: Coarse-grained + Macro  allow system_domain zoneinfo_data_file:file</p>
    <p>rw_file_perms;</p>
  </div>
  <div class="page">
    <p>Evaluation Malicious Access Patterns by EASEAndroid</p>
    <p>{read,write} files in /dev/graphics, /dev/block, /dev/exynos-mem,</p>
    <p>/dev/mem</p>
    <p>{dac_override,chown,fsetid} capability in /data/data, /data/local,</p>
    <p>/data/misc, /data/system, /sdcard</p>
    <p>{create,write,unlink} files in /system/app, /system/bin,</p>
    <p>/system/xbin, /system/etc</p>
    <p>{read,write} files in /sys/block, /sys/devices, /sys/fs, /sys/kernel</p>
    <p>{read,write} files in /proc/sys, /proc/pid/environ|exe|mem</p>
    <p>{kill,sys_admin,sys_ptrace,sys_chroot,setuid,setgid} capability</p>
    <p>{transition,dyntransition} process</p>
    <p>{connectto} unix sockets of privileged daemons directly</p>
  </div>
  <div class="page">
    <p>Evaluation Attacks against SEAndroid</p>
    <p>Manipulate files under /sys/fs/selinux</p>
    <p>Inject allow rules into policy</p>
    <p>Transition to privileged domain</p>
    <p>Modify struct cred by exploiting kernel</p>
  </div>
  <div class="page">
    <p>Limitations</p>
    <p>Information missed by audit logs</p>
    <p>High-level semantics in Android framework</p>
    <p>Countermeasure against EASEAndroid</p>
    <p>Data poisoning attacks</p>
    <p>Unclassified access patterns</p>
    <p>Human can interact with EASEAndroid by adding</p>
    <p>extra knowledge</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>SEAndroid policy development and refinement is</p>
    <p>challenging</p>
    <p>We propose EASEAndroid, an analytic system to</p>
    <p>refine the policy based on semi-supervised</p>
    <p>learning</p>
    <p>Big Data/Machine Learning is promising for</p>
    <p>security policy development &amp; management</p>
  </div>
  <div class="page">
    <p>Thank you for your time!</p>
    <p>Q &amp; A</p>
  </div>
</Presentation>
