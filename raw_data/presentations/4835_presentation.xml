<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Design Real-Time Java Remote Method Invocation: A Server-Centric Approach</p>
    <p>Design Real-Time Java Remote Method Invocation: A Server-Centric Approach</p>
    <p>Sangig Rho (Samsung Electronics, Korea), Byung Choi (Michigan Tech), Riccardo Bettati (Texas A&amp;M)</p>
    <p>Nov 14, 2005</p>
  </div>
  <div class="page">
    <p>OverviewOverview</p>
    <p>Background  Research Objective  Related Work  Proposed Methodology  Conclusions and Future Work</p>
  </div>
  <div class="page">
    <p>Background 1:Background 1:</p>
    <p>Distributed open real-time systems?  Scheduling parameters (workload, deadline, priority)</p>
    <p>Release parameters (arrival time, arrival pattern)</p>
    <p>Bursty arrival of clients requests</p>
    <p>Implementation vehicle?  Component-based (CORBA, DCOM, .NET, EJB)  Java ?</p>
  </div>
  <div class="page">
    <p>Background 2:Background 2:</p>
    <p>Server declared?  Server defined priority</p>
    <p>Client propagated?  Inherit global priority</p>
    <p>Real-Time guarantee with admission Control!</p>
  </div>
  <div class="page">
    <p>Research Objectives:Research Objectives:</p>
    <p>Providing real-time Java RMI which supports:  Temporal isolation from other components CPU demand</p>
    <p>So, predictable RMI execution time in various conditions</p>
    <p>Solutions?  Server declared real-time property model</p>
  </div>
  <div class="page">
    <p>Related Work 1:Related Work 1:</p>
    <p>Real-time extensions for component-based systems  TAO (The ACE ORB) project [Schmidt: 2000?]</p>
    <p>A CORBA preserving the priority levels of calls across component boundaries</p>
    <p>The Specification for Real-Time CORBA [Schmidt 2000] Management of CPU, network, and memory resources Server declared or client propagated model for fixed</p>
    <p>priority scheduling between client and server</p>
    <p>No isolation due to static priority scheduling</p>
  </div>
  <div class="page">
    <p>Related Work: 2 Related Work: 2</p>
    <p>Java RMI system  Simplicity, security, portability  Middleware for distributed systems</p>
    <p>The Real-Time Specification for Java (RTSJ)  Provide standards for real-time Java APIs except</p>
    <p>real-time RMI [Bollella 2000]  The Distributed Real-Time Specification for Java</p>
    <p>(DRTSJ)  Not released, rather complicated, no isolation in</p>
    <p>timing domain because of using static priority scheduling [Jensen 2001]</p>
  </div>
  <div class="page">
    <p>TimeSys RTSJ Reference Implementation (RI)  Based on J2ME (Java Micro Edition) source  No RMI support  Our implementation base</p>
    <p>jRate [Corsaro 2002]  JTime</p>
    <p>Commercialized product RTSJ-compliant Java for embedded systems No RMI support</p>
    <p>Related Work 3: Related Work 3:</p>
  </div>
  <div class="page">
    <p>Research Objectives RevisitedResearch Objectives Revisited</p>
    <p>Real-time guarantees in form of deadline guarantees to remote method invocations  Bounded maximum response time of remote method</p>
    <p>Hard real-time guarantees  Contingent upon</p>
    <p>The real-time capabilities of the underlying OS and runtime environment</p>
    <p>Well-known number of clients Well-behaved clients Well-known worst case execution of each method of</p>
    <p>components  At best soft real-time guarantees if fails to meet one of above</p>
    <p>conditions  Timing isolation through a guaranteed-rate scheduler</p>
    <p>The worst case response time of jobs in a component does not depend on the processor-time demands of other components</p>
  </div>
  <div class="page">
    <p>Real-time capability for component-based distributed systems</p>
    <p>Real-time scheduling of tasks in Java Virtual Machine  Provide predictable executions of sporadic tasks of software components</p>
    <p>Extension of the Real-Time Specification for Java (RTSJ) Real-Time Java RMI Deadline-driven EDF scheduler Total Bandwidth server mechanism</p>
    <p>A server-centric execution environment in terms of holder of real-time properties Server declared model for real-time properties No need for delivering and inheriting real-time properties between</p>
    <p>client and server for scheduling purposes</p>
    <p>Our Methodology Our Methodology</p>
  </div>
  <div class="page">
    <p>Probabilistic Approach for Characterizing Total Bandwidth Servers</p>
    <p>Probabilistic Approach for Characterizing Total Bandwidth Servers</p>
    <p>How to allocate a utilization for a remote method RMij</p>
    <p>Maximum budget  Given worst case execution time of the remote method RMij</p>
    <p>Period  Unknown</p>
    <p>How to decide the period of Total Bandwidth server TBij  Assumption</p>
    <p>Given distribution function of interarrival times of client requests for RMij  By using minimum interarrival time of client requests</p>
    <p>Hard real-time guarantees  Overallocate system resources</p>
    <p>By using a probabilistic approach  Proof of a G/D/1 queue model for Total Bandwidth server  Lower allocated resources due to a larger period than that of the above  Efficiently utilize system resources  Soft real-time guarantees</p>
  </div>
  <div class="page">
    <p>Experimental Evaluation  Determine overhead of local method  Determine overhead of real-time RMI  Predictable latency of remote method invocation</p>
    <p>Under overloaded condition With CPU-bound tasks, two Java applications for</p>
    <p>file compression</p>
    <p>Experimental EvaluationExperimental Evaluation</p>
  </div>
  <div class="page">
    <p>Latency of Remote Method InvocationLatency of Remote Method Invocation</p>
    <p>Fast Ethernet 100-Mbps Link</p>
    <p>Client Host Dell Dimension 4100 Pentium III</p>
    <p>Server Host Dell Dimension 4100 Pentium III</p>
    <p>Agilent Technologies Network Analyzer</p>
    <p>Fast Ethernet 100-Mbps Link</p>
    <p>Real-Time RMI performance  Measure latency and jitter  Dell 930 MHz with memory of 256</p>
    <p>Megabytes  An Agilent Technologies Network</p>
    <p>Analyzer  Capture all packets  Nanosecond timer resolution  Windows 2000 Pro Embedded with</p>
    <p>two CPUs  Latency of a remote method invocation</p>
    <p>Measure time difference between  Moment of clients sending of the</p>
    <p>first packet of RMI request  Moment of servers sending of the</p>
    <p>last packet of the result  Ethereal</p>
    <p>Network Protocol Analyzer  Refined data display by using</p>
    <p>display filter</p>
  </div>
  <div class="page">
    <p>Local Method Execution Time on TimeSys 3.1-RTLocal Method Execution Time on TimeSys 3.1-RT</p>
  </div>
  <div class="page">
    <p>RMI Latency with Two Running Java Applications for File Compression</p>
    <p>RMI Latency with Two Running Java Applications for File Compression</p>
  </div>
  <div class="page">
    <p>Standard Deviation of RMI LatencyStandard Deviation of RMI Latency</p>
  </div>
  <div class="page">
    <p>Conclusions and Future WorkConclusions and Future Work</p>
    <p>One step toward distributed open real-time systems with Java RMI  Predictable end-to-end latency</p>
    <p>Further investigation on this methodology with the Distributed RealTime Specification for Java (DRTSJ) needed</p>
    <p>Real-time CORBA vs. DRTSJ?</p>
  </div>
  <div class="page">
    <p>Real-Time Infrastructure: Guaranteed-Rate Scheduling</p>
    <p>Real-Time Infrastructure: Guaranteed-Rate Scheduling</p>
    <p>Periodic Task (Period of 3 Time Units, Execution Time of 1 Time Unit)</p>
    <p>Budget of Total Bandwidth Server</p>
    <p>At time 1: Budgetserver = 1.0; Deadlineserver = 1 + (1.0 / 0.25);</p>
    <p>= 5; At time 4: Budgetserver = 2.0; Deadlineserver = 5 + (2.0 / 0.25); = 13;</p>
    <p>At time 12: Budgetserver = 3.0; Deadlineserver = 13 + (3.0 / 0.25); = 25;</p>
    <p>Feasible scheduling for isolation in time domain  Guaranteed-rate scheduling in deadline-driven real-time systems  Total Bandwidth server</p>
    <p>Better responsiveness of budget replenishment</p>
  </div>
  <div class="page">
    <p>Real-Time Infrastructure: Earliest Deadline First Scheduler</p>
    <p>Real-Time Infrastructure: Earliest Deadline First Scheduler</p>
    <p>Updating The Status of RT-Threads</p>
    <p>Processing Newly Admitted</p>
    <p>Real-Time Threads</p>
    <p>Processing Inactive RT-Threads</p>
    <p>Sorting RT-Threads by Deadline</p>
    <p>Assigning Priorities to RT-Threads</p>
    <p>Waking</p>
    <p>Processing Released RT-Threads</p>
    <p>Calculating Next Wake-Up Time</p>
    <p>Waiting</p>
    <p>Expiration of The Timer for Next</p>
    <p>Wake-Up Or</p>
    <p>Notification from a Real-Time</p>
    <p>Thread</p>
    <p>EDF scheduling algorithm  Feasible scheduling for a system</p>
    <p>Independent Preemptive Periodic Sporadic tasks</p>
    <p>If  (instantaneous utilization)  1  No support in the RTSJ RI  Higher priority over RealtimeThreads</p>
  </div>
  <div class="page">
    <p>Real-Time Infrastructure: Adjustment of Priorities of Real-Time Worker</p>
    <p>Threads Based on Admitted Utilization</p>
    <p>Real-Time Infrastructure: Adjustment of Priorities of Real-Time Worker</p>
    <p>Threads Based on Admitted Utilization</p>
    <p>public class AOUnicastServerRef extends UnicastRef {  public void dispatch(Remote obj, StreamRemoteCall call, ObjID id) throws IOException {  if (obj instanceof Migratable) {</p>
    <p>isAO = true; bandwidthMonitor = ((Migratable) obj).getBandwidthMonitor();</p>
    <p>defaultAdmissionControl = AdmissionControl.getDefaultAdmissionControl(); MethodWorkloadInfo methodWorkloadInfo = \ defaultAdmissionControl.findMethodWorkloadInfo(aoID, methodName);</p>
    <p>/* * For BandwidthMonitor */ long relativeDeadlineNanos = bandwidthMonitor.getServerPeriodNanos(); /* * We will wake up EDF Scheduler. * Cost and deadline should be adjusted for SchedulableData. */ RealtimeThread.setTotalBandwidthParameters(costNanos, \ relativeDeadlineNanos);  /* * For BandwidthMonitor */ bandwidthMonitor.acquire(); }  }  }</p>
    <p>Executing at the Adjusted Priority</p>
    <p>Based on the Requested Remote</p>
    <p>Method</p>
    <p>Executing at the Maximum</p>
    <p>Priority Regardless of the Requested</p>
    <p>Remote Method</p>
    <p>Update properties of javax.realtime.ReleaseParameters instance</p>
    <p>Cost (worst case execution time) Relative Deadline</p>
    <p>Reflect updated deadline into scheduling Wake up EDF scheduler Reschedule tasks</p>
  </div>
  <div class="page">
    <p>Feasible scheduling algorithms for isolation in time domain  Guaranteed-rate scheduling in deadline-driven real-time systems</p>
    <p>Better responsiveness of servers budget replenishment in Total Bandwidth server  Total Bandwidth Server</p>
    <p>A Initial state  Budgetserver = 0;  Deadlineserver = 0;  A job queue with no backlogged jobs</p>
    <p>At time t, arrival of a job with workload of ExecutionTimeJob_1  Budgetserver = ExecutionTimeJob_1 ;  Deadlineserver = max(Deadlineserver , t) + (ExecutionTimeJob_1 / Utilizationserver ) ;</p>
    <p>Current jobs completion with backlogged jobs  Budgetserver = ExecutionTimeJob_2 ;  Deadlineserver = Deadlineserver + (ExecutionTimeJob_2 / Utilizationserver ) ;</p>
    <p>Current jobs completion with no backlogged jobs  Do nothing;  Suspend the thread of Total Bandwidth server, a worker thread, by EDF scheduler</p>
    <p>Real-Time Infrastructure: Guaranteed-Rate Scheduling</p>
    <p>Real-Time Infrastructure: Guaranteed-Rate Scheduling</p>
  </div>
  <div class="page">
    <p>A Model for Distributed Component-Based Applications</p>
    <p>A Model for Distributed Component-Based Applications</p>
    <p>A collection of  n clients, C1, C2, , Cn  m components, A1, A2, , Am</p>
    <p>Each component Ai  k remote methods, RMi1, RMi2, , RMik</p>
    <p>Client  Execute outside of our resource control</p>
    <p>Execution environments  A client execution environment</p>
    <p>No further consideration  A component execution environment</p>
    <p>Component execution environment  h hosts, H1, H2, , Hh</p>
    <p>A uniform processing environment  Relative speed  for each host H  Execution of  time units on reference host takes  /  time</p>
    <p>units on a host with relative speed</p>
  </div>
  <div class="page">
    <p>The Task Model The Task Model</p>
    <p>Synchronous invocation of remote methods  Migration of the thread of control between caller and callee</p>
    <p>Model workload as a set of tasks  Each task Ti</p>
    <p>A sequence of jobs, Ji(1), Ji(2), , Ji(k)</p>
    <p>Each job Ji  The execution of each job is triggered by an invocation of a remote method</p>
    <p>by a client  Consists of a set of subjobs, Ji = {Ji1, Ji2,  , Jim}  Workload of each job Ji</p>
    <p>(Workload of each subjob Jij)</p>
    <p>Component A1 Component A2 Component Am</p>
    <p>Task Ti</p>
    <p>Job Ji (1)Ji</p>
    <p>(4) Ji (3) Ji</p>
    <p>(2)</p>
    <p>Ji1 Ji2 Jim</p>
  </div>
  <div class="page">
    <p>Real-Time Infrastructure: Decomposition of RMI Latency</p>
    <p>Real-Time Infrastructure: Decomposition of RMI Latency</p>
  </div>
  <div class="page">
    <p>Admission Control Policy for Components</p>
    <p>Admission Control Policy for Components</p>
    <p>Utilization-based admission feasibility tests  Check required utilization demands of migrating</p>
    <p>components Single resource</p>
    <p>Assign real-time properties to each remote method Worst case execution time Utilization</p>
  </div>
  <div class="page">
    <p>Motivation &amp; Introduction: What is Real-Time?</p>
    <p>Motivation &amp; Introduction: What is Real-Time?</p>
    <p>Being Fast as much as possible?</p>
    <p>Meeting deadlines!  How?</p>
    <p>Hard real-time vs. soft real-time systems</p>
    <p>Applications: job scheduling, packet scheduling, etc..</p>
  </div>
  <div class="page">
    <p>Typical Real-Time SystemsTypical Real-Time Systems</p>
    <p>Admission Control  Schedulability Test</p>
    <p>Client Request  Timing constraints: release time, execution time, deadline</p>
    <p>(Job) Scheduling  EDF, priority?</p>
    <p>Real-Time Tasks:  Periodic, Aperiodic, Sporadic</p>
    <p>Overload?  Out of scope!</p>
  </div>
  <div class="page">
    <p>Background: Component-Based Design</p>
    <p>Background: Component-Based Design</p>
    <p>Component-based technology  Increasing popularity in software systems development  Modularity allows to easily build and test parts of</p>
    <p>large system  Reusability enables realization of new software</p>
    <p>systems as assemblies of existing software components</p>
  </div>
  <div class="page">
    <p>Background: Characteristics of Components</p>
    <p>Background: Characteristics of Components</p>
    <p>Opaqueness  Do not make internal state available to components environment</p>
    <p>Composability  Provide well-defined services either to a client or to other</p>
    <p>components  Isolation</p>
    <p>The behavior of a component does not depend on the state, even in presence of another component</p>
    <p>Isolation requirement  Decoupling of the component implementation from the communication</p>
    <p>infrastructure  Given sufficiently effective communication infrastructure, components</p>
    <p>can be decoupled from their execution platform</p>
  </div>
  <div class="page">
    <p>Models for distributed systems  Control flow of remote method invocation  Point-to-point flow of data through object serialization  Message passing mechanism</p>
    <p>The Distributed Real-Time Specification for Java (DRTSJ)  Extend the RTSJ for real-time RMI  Distributed thread model</p>
    <p>System-wide ID  Transparent propagation of real-time properties over execution environments</p>
    <p>Provide predictability of end-to-end timeliness in distributed real-time systems</p>
    <p>The DRTSJ under development  No consideration for sporadic real-time tasks of real-time Java RMI  Non-server-centric execution environment</p>
    <p>Real-Time Infrastructure: Java for Distributed Real-Time Systems</p>
    <p>Real-Time Infrastructure: Java for Distributed Real-Time Systems</p>
  </div>
  <div class="page">
    <p>Three layers to implement transparent remote method invocations  The stub layer</p>
    <p>A proxy for client side  Stub classes generated by rmic, RMI compiler  Marshall and unmarshall parameters and returned values</p>
    <p>The remote reference layer  Support semantics of reference and invocation (unicast, multicast)  Translate between local and remote object references using remote</p>
    <p>object tables  The transport layer</p>
    <p>Establish connections to remote address spaces by using TCP connection related classes</p>
    <p>Real-Time Infrastructure: Suns Java RMI Implementation</p>
    <p>Real-Time Infrastructure: Suns Java RMI Implementation</p>
  </div>
  <div class="page">
    <p>The association of the RTSJ javax.realtime.RealtimeThread class  sun.rmi.transport.RMIThreadAction class  ao.realtor.scheduler.TotalBandwidthParameters</p>
    <p>class  javax.realtime.AperiodicParameters class  Workload, deadline, overrun handler,</p>
    <p>deadline miss handler  Unknown real-time properties for requested</p>
    <p>up-call  Initially assign highest priority to avoid priority</p>
    <p>inversion</p>
    <p>The Deadline-driven Earliest Deadline First (EDF) scheduling</p>
    <p>Real-Time Infrastructure: A Solution for Creation of</p>
    <p>Real-Time Worker Threads for RMI</p>
    <p>Real-Time Infrastructure: A Solution for Creation of</p>
    <p>Real-Time Worker Threads for RMI</p>
  </div>
  <div class="page">
    <p>Create real-time Java threads  Real-time worker threads for handling client requests  Schedule the worker threads to meet their real-time</p>
    <p>properties</p>
    <p>Propagation of real-time timing constraints between client and server  Guarantee to meet deadline of clients real-time</p>
    <p>applications</p>
    <p>Provide real-time guarantees for sporadic tasks  Aperiodic arrivals of client requests</p>
    <p>Challenges for Real-Time RMIChallenges for Real-Time RMI</p>
  </div>
  <div class="page">
    <p>A server-centric execution environment  A server declared model for real-time properties  Isolation in real-time domain</p>
    <p>Save network bandwidth for delivering and inheriting real-time properties between client and server</p>
    <p>Effective admission negotiation for migrating components by using utilization-based admission control</p>
    <p>Real-Time Infrastructure: A Solution for Propagating Real-Time</p>
    <p>Constraints Between Client and Server</p>
    <p>Real-Time Infrastructure: A Solution for Propagating Real-Time</p>
    <p>Constraints Between Client and Server</p>
  </div>
</Presentation>
