<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Optimized Inverted List Assignment in Distributed Search Engine Architecture</p>
    <p>Jiangong Zhang Torsten Suel</p>
    <p>Web Exploration and Search Technology Lab (WestLab)</p>
    <p>Polytechnic University</p>
    <p>Brooklyn, NY 11201</p>
  </div>
  <div class="page">
    <p>Distributed Search Engines  DSE: Search engines based on highly</p>
    <p>distributed or P2P architecture  DSE is for indexing and search data</p>
    <p>residing in P2P systems  Google: more centralized  The performance of DSE could not</p>
    <p>compete with current centralized search engines</p>
  </div>
  <div class="page">
    <p>Challenge in Distributed SE  Limited bandwidth and longer latency  Each node has limited storage space and</p>
    <p>computational power  Textual collection size in terabytes  Compute top-k in millions of matches  Challenge  efficiency of search engine</p>
    <p>query processing in such environments</p>
  </div>
  <div class="page">
    <p>Text Index Structures</p>
    <p>An inverted index consists of inverted lists  Each inverted list is a sequence of postings  Each posting includes docID, frequency,</p>
    <p>additional position and context information  Inverted lists are sorted and compressed</p>
  </div>
  <div class="page">
    <p>Term-Based Ranking</p>
  </div>
  <div class="page">
    <p>Local Index Organization</p>
  </div>
  <div class="page">
    <p>Global Index Organization</p>
  </div>
  <div class="page">
    <p>Related Work  Our previous work [34, 40]  Index partition schemes [2, 13, 19, 25, 38]  Query processing in P2P search engines with</p>
    <p>local index [14, 21, 32, 37, 36, 24, 5]  P2P query processing with global index [28,</p>
  </div>
  <div class="page">
    <p>Query Processing in DSE</p>
    <p>Query: distributed search engine polytechnic university</p>
  </div>
  <div class="page">
    <p>List Assignment Problem</p>
    <p>Query: distributed search engine polytechnic university</p>
  </div>
  <div class="page">
    <p>List Assignment with replication</p>
    <p>Query: distributed search engine polytechnic university</p>
  </div>
  <div class="page">
    <p>Contributions  Study the problem of assigning/replicating</p>
    <p>inverted lists over a set of nodes to minimize communication costs during query processing</p>
    <p>Propose heuristic algorithms for this problem  Evaluate the performance of the algorithms</p>
    <p>on real web pages and query traces</p>
  </div>
  <div class="page">
    <p>Problem Definition</p>
    <p>NP Complete</p>
    <p>Two realistic approaches</p>
    <p>Greedy approach</p>
    <p>Graph approach</p>
  </div>
  <div class="page">
    <p>Greedy Approach</p>
    <p>List-Driven: round-robin over the lists, put on the node with largest overall reduction of communication cost on the given query trace</p>
    <p>Node-Driven: select the node with the most available space, assign the inverted list that gives the most benefit</p>
    <p>Node-Driven Ratio: similar to Node-Driven, but the benefit is the ratio between the cost reduction and the size of the list</p>
  </div>
  <div class="page">
    <p>Graph Approach</p>
    <p>Each Term is a vertex with weight (size of list)  Each edge is proportional to the benefit of</p>
    <p>having two terms on the same node  minimize the total weight of those edges that</p>
    <p>are completely cut</p>
  </div>
  <div class="page">
    <p>Combination of Two Approaches</p>
    <p>No tool for an overlapping partitioning  Combining graph and greedy approaches  Use METIS* package to do initial graph</p>
    <p>partitioning of a single copy of index *http://glaros.dtc.umn.edu/gkhome/metis/metis/overview</p>
  </div>
  <div class="page">
    <p>Experimental Setup  GOV2 data set used in the TREC Terabyte</p>
    <p>(25.2 million pages)  100K queries used in the TREC Terabyte</p>
    <p>efficiency competition task  Precompute the intersection sizes of all pairs</p>
    <p>of terms that occur in a common query  Query trace is divided into two sets: training</p>
    <p>set and testing set</p>
  </div>
  <div class="page">
    <p>Relative Costs on 16 Nodes</p>
  </div>
  <div class="page">
    <p>Relative Costs on 128 Nodes</p>
  </div>
  <div class="page">
    <p>Imbalance in Lists Assignment</p>
    <p>List-Driven brings significant imbalances  Other approaches perform similar on</p>
    <p>balances of index size  Node-Drive approaches have less difference</p>
    <p>on number of inverted lists on each node</p>
  </div>
  <div class="page">
    <p>List Assignment with replication</p>
    <p>Query: distributed search engine polytechnic university</p>
  </div>
  <div class="page">
    <p>Change of Percentage of Kterm Queries</p>
    <p>Transfer each query into another query  Average number of terms per query decreases  Queries with many terms are very likely to have</p>
    <p>at least one pair on same node</p>
  </div>
  <div class="page">
    <p>Total Cost Per Query in KB</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Extrapolate to a collection of 2.5 billion pages  TREC is not the best data set to evaluate  Careful assignment of inverted lists to nodes</p>
    <p>obtains significant savings</p>
  </div>
  <div class="page">
    <p>Open Questions</p>
    <p>Further improvements are possible  Hybrid organization maybe the best choice</p>
  </div>
  <div class="page">
    <p>Thank You !!!</p>
  </div>
</Presentation>
