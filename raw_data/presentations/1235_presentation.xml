<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>End the Senseless Killing: Improving Memory Management for Mobile</p>
    <p>Operating Systems</p>
    <p>Niel Lebeck, Arvind Krishnamurthy, Henry M. Levy, Irene Zhang</p>
  </div>
  <div class="page">
    <p>Disclaimers</p>
    <p>I currently work at Google (not on Android)</p>
    <p>This work is not connected with Google  Research was done while I was a graduate student at UW</p>
    <p>All data is from our experiments or open-source resources</p>
    <p>All opinions are our own</p>
  </div>
  <div class="page">
    <p>This talk</p>
    <p>Motivation</p>
    <p>Key insight and Marvin</p>
    <p>Marvins mechanisms</p>
    <p>Marvins features</p>
    <p>Implementation and evaluation</p>
  </div>
  <div class="page">
    <p>Todays mobile memory management is bad for users and applications  Each app gets a fixed maximum memory budget</p>
    <p>Mobile OS kills apps when the device runs out of memory  Even if apps are not actively using their memory</p>
    <p>Restarting apps takes time</p>
    <p>Developers must optimize app memory usage App</p>
    <p>Working set</p>
  </div>
  <div class="page">
    <p>Traditional swapping is not a solution</p>
    <p>Not suited to managed languages (e.g., Java)  Garbage collection causes swapping, confuses working set estimation (WSE)</p>
    <p>Page-granularity swapping and WSE do not fit variable-sized objects</p>
    <p>Not suited to latency-sensitive touch devices  On-demand swapping causes stuttering and delays</p>
  </div>
  <div class="page">
    <p>This talk</p>
    <p>Motivation</p>
    <p>Key insight and Marvin</p>
    <p>Marvins mechanisms</p>
    <p>Marvins features</p>
    <p>Implementation and evaluation</p>
  </div>
  <div class="page">
    <p>Key insight</p>
    <p>We can co-design the runtime and OS to improve mobile memory management</p>
    <p>Possible because modern mobile platforms require all apps to use the same runtime</p>
  </div>
  <div class="page">
    <p>Marvin</p>
    <p>Android memory manager co-designed with Androids Java runtime</p>
    <p>Reintroduces swapping to the mobile environment</p>
  </div>
  <div class="page">
    <p>Marvin</p>
    <p>Marvin has three main features:  Ahead-of-time swap</p>
    <p>Object-level working set estimation</p>
    <p>Bookmarking garbage collector [Hertz 05]</p>
  </div>
  <div class="page">
    <p>This talk</p>
    <p>Motivation</p>
    <p>Key insight and Marvin</p>
    <p>Marvins mechanisms  Stubs</p>
    <p>Reclamation table</p>
    <p>Object access interposition</p>
    <p>Marvins features</p>
    <p>Implementation and evaluation</p>
    <p>indirection layer between objects</p>
    <p>allows the runtime and OS to coordinate</p>
    <p>lets the runtime transparently take action</p>
  </div>
  <div class="page">
    <p>Stubs</p>
    <p>We need an indirection layer between objects referencing each other  Catch accesses to swapped-out objects</p>
    <p>Stubs provide that indirection layer  Small pseudo-objects that sit in the Java heap and point to the real object</p>
    <p>Store copies of the real objects references</p>
    <p>obj A obj B</p>
    <p>obj C</p>
    <p>stub</p>
    <p>Java Heap Reclaimable Object Space</p>
  </div>
  <div class="page">
    <p>Reclamation table</p>
    <p>We need a way for the runtime and OS to coordinate  Tell OS which objects can be reclaimed</p>
    <p>Prevent OS from reclaiming an object being used by the runtime</p>
    <p>A shared-memory reclamation table allows that coordination  Stores an objects location and size, and has metadata bits for locking</p>
    <p>obj A obj B</p>
    <p>obj C</p>
    <p>stub</p>
    <p>Java Heap Reclaimable Object Space Reclamation Table</p>
    <p>address size res app lock</p>
    <p>kernel lock</p>
  </div>
  <div class="page">
    <p>Object access interposition</p>
    <p>The runtime needs a way to transparently act when app code accesses objects  Restoring swapped-out objects</p>
    <p>Update working set metadata</p>
    <p>Object access interposition is a set of paired interpreter and compiler modifications implementing those actions  Interpreter directly acts when performing object accesses</p>
    <p>Compiler generates additional ARM64 instructions around object accesses</p>
  </div>
  <div class="page">
    <p>This talk</p>
    <p>Motivation</p>
    <p>Key insight and Marvin</p>
    <p>Marvins mechanisms</p>
    <p>Marvins features  Ahead-of-time swap</p>
    <p>Object-level working set estimation</p>
    <p>Bookmarking garbage collector</p>
    <p>Implementation and evaluation</p>
  </div>
  <div class="page">
    <p>Ahead-of-time swap</p>
    <p>Runtime uses object access interposition to set dirty bit in object header</p>
    <p>Runtime clears dirty bit after saving an object</p>
    <p>Kernel checks dirty bit before reclaiming an object</p>
    <p>foo</p>
    <p>Reclaimable Object Space</p>
    <p>Swap File</p>
    <p>foo</p>
    <p>foo.setX(42);</p>
    <p>Compiled ARM64</p>
    <p>code</p>
    <p>Interpreter</p>
  </div>
  <div class="page">
    <p>Ahead-of-time swap</p>
    <p>Runtime uses object access interposition to set dirty bit in object header</p>
    <p>Runtime clears dirty bit after saving an object</p>
    <p>Kernel checks dirty bit before reclaiming an object</p>
    <p>foo</p>
    <p>Reclaimable Object Space</p>
    <p>Swap File</p>
    <p>foo</p>
  </div>
  <div class="page">
    <p>This talk</p>
    <p>Motivation</p>
    <p>Key insight and Marvin</p>
    <p>Marvins mechanisms</p>
    <p>Marvins features  Ahead-of-time swap</p>
    <p>Object-level working set estimation</p>
    <p>Bookmarking garbage collector</p>
    <p>Implementation and evaluation</p>
  </div>
  <div class="page">
    <p>Object-level working set estimation</p>
    <p>Runtime uses object access interposition to set access bits</p>
    <p>Runtime scans access bits and updates longer-term WSE metadata</p>
    <p>foo</p>
    <p>int x = foo.getX();</p>
    <p>Compiled ARM64</p>
    <p>code</p>
    <p>Garbage collector</p>
    <p>heap-walk</p>
    <p>Read bit Write bit Read shift register Write shift register</p>
    <p>Interpreter</p>
  </div>
  <div class="page">
    <p>This talk</p>
    <p>Motivation</p>
    <p>Key insight and Marvin</p>
    <p>Marvins mechanisms</p>
    <p>Marvins features  Ahead-of-time swap</p>
    <p>Object-level working set estimation</p>
    <p>Bookmarking garbage collector</p>
    <p>Implementation and evaluation</p>
  </div>
  <div class="page">
    <p>Bookmarking garbage collector</p>
    <p>Runtime uses object access interposition to maintain stub references</p>
    <p>GC detects stubs and reads references without touching underlying objects</p>
    <p>foo.setMember(bar)</p>
    <p>foostub(foo)</p>
    <p>Java Heap Reclaimable Object</p>
    <p>Space</p>
    <p>Reclamation Table</p>
    <p>bar</p>
    <p>member = null member = nullmember = 0x7000001a</p>
    <p>member = 0x7000001aCompiled ARM64</p>
    <p>code Interpreter</p>
  </div>
  <div class="page">
    <p>Bookmarking garbage collector</p>
    <p>Runtime uses object access interposition to maintain stub references</p>
    <p>GC detects stubs and reads references without touching underlying objects</p>
    <p>foostub(foo)</p>
    <p>Java Heap Reclaimable Object</p>
    <p>Space</p>
    <p>Reclamation Table</p>
    <p>bar</p>
    <p>member = null member = nullmember = 0x7000001a</p>
    <p>member = 0x7000001a Garbage collector</p>
  </div>
  <div class="page">
    <p>This talk</p>
    <p>Motivation</p>
    <p>Key insight and Marvin</p>
    <p>Marvins mechanisms</p>
    <p>Marvins features  Ahead-of-time swap</p>
    <p>Object-level working set estimation</p>
    <p>Bookmarking garbage collector</p>
    <p>Implementation and evaluation</p>
  </div>
  <div class="page">
    <p>Marvin implementation</p>
    <p>We modified the Android Runtime (ART) to implement Marvin</p>
    <p>Default policy keeps the foreground apps objects in-memory</p>
    <p>For experiments, we trigger reclamation in the runtime</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Experimental setup:  Pixel XL phones</p>
    <p>Android 7.1.1 (or our modified build)</p>
    <p>Questions:  Does Marvin let users run more apps?</p>
    <p>Does ahead-of-time swap work?</p>
    <p>What is Marvins overhead?</p>
  </div>
  <div class="page">
    <p>Does Marvin let users run more apps?</p>
    <p>We periodically started instances of a benchmark app  Initializes a 220MB heap with a mix of 4KB and 1MB arrays</p>
    <p>Deletes and re-allocates 20MB of those arrays every 5 seconds</p>
    <p>We measured the number of active apps: apps that are alive and making progress on their workloads</p>
  </div>
  <div class="page">
    <p>Does Marvin let users run more apps?</p>
    <p>Marvin can run over 2x as many apps as stock Android</p>
    <p>On Android w/ Linux swap, a little allocation makes apps unusable</p>
    <p>Android w/ Linux swap consistently crashed early</p>
  </div>
  <div class="page">
    <p>Does ahead-of-time swap work?</p>
    <p>Marvin reclaims memory much faster than Android w/ Linux swap</p>
    <p>Marvin Android</p>
    <p>8 seconds100ms</p>
  </div>
  <div class="page">
    <p>What is Marvins overhead?</p>
    <p>When objects are memoryresident, execution overheard depends on proportion of object accesses</p>
    <p>Overhead is reasonable (15%) on PCMark benchmark</p>
  </div>
  <div class="page">
    <p>Related work</p>
    <p>Acclaim [Liang 20]</p>
    <p>SmartSwap [Zhu 17]</p>
    <p>A2S [Kim 17] MARS [Guo 15]</p>
    <p>Policies distinguish between foreground and background apps</p>
    <p>Similarities with Marvin</p>
  </div>
  <div class="page">
    <p>Related work</p>
    <p>Acclaim [Liang 20]</p>
    <p>SmartSwap [Zhu 17]</p>
    <p>A2S [Kim 17] MARS [Guo 15]</p>
    <p>Similarities with Marvin</p>
    <p>Addresses incompatibility of garbage collection and kernel-level swap</p>
  </div>
  <div class="page">
    <p>Related work</p>
    <p>Acclaim [Liang 20]</p>
    <p>SmartSwap [Zhu 17]</p>
    <p>A2S [Kim 17] MARS [Guo 15]</p>
    <p>Perform swapping at the kernel level rather than the runtime level</p>
    <p>Differences from Marvin</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Problem: Todays mobile memory management is inadequate</p>
    <p>Insight: We can co-design the runtime and OS to improve memory management</p>
    <p>Solution: Marvin improves mobile memory management with three co-design features  Ahead-of-time swap</p>
    <p>Object-level working set estimation</p>
    <p>Bookmarking garbage collection</p>
  </div>
  <div class="page">
    <p>Thanks!</p>
    <p>Marvin source code is available on GitHub: https://github.com/UWSysLab</p>
    <p>Contact: nl35@cs.washington.edu</p>
  </div>
</Presentation>
