<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Sound and Complete Landmarks for AND/OR Graphs</p>
    <p>Emil Keyder1, Silvia Richter2, and Malte Helmert3</p>
    <p>August 18th, 2010</p>
  </div>
  <div class="page">
    <p>What are landmarks?</p>
    <p>Features common to every solution of a planning task:</p>
    <p>Formulas over fluents satisfied in some state</p>
    <p>Actions that appear in every plan</p>
    <p>Two primary questions</p>
    <p>This work focuses on finding landmarks.</p>
  </div>
  <div class="page">
    <p>What are landmarks?</p>
    <p>Features common to every solution of a planning task:</p>
    <p>Formulas over fluents satisfied in some state</p>
    <p>Actions that appear in every plan</p>
    <p>Two primary questions</p>
    <p>This work focuses on finding landmarks.</p>
  </div>
  <div class="page">
    <p>Contributions</p>
    <p>Declarative characterization of delete-relaxation landmarks in terms of underlying AND/OR graphs</p>
    <p>Computation of complete set of causal landmarks for the delete relaxation</p>
    <p>Parametrized method analogous to the hm heuristics that computes for m &gt; 1:</p>
    <p>Conjunctive landmarks of size m Non-delete-relaxation landmarks</p>
  </div>
  <div class="page">
    <p>Planning tasks</p>
    <p>We use the STRIPS formalism:</p>
    <p>Definition (planning task)</p>
    <p>A planning task is a 4-tuple  = F,A,I,G: F a finite set of fluents</p>
    <p>A a finite set of actions, each with:</p>
    <p>pre(a)  F a set of preconditions add(a)  F a set of add effects del(a)  F a set of delete effects</p>
    <p>cost(a)  R+0 a cost I  F the set of fluents true in the initial state G  F the set of goal fluents</p>
  </div>
  <div class="page">
    <p>Landmarks</p>
    <p>Definition (landmark)</p>
    <p>A landmark is a logical formula  over F such that every valid plan  makes  true in some state during its execution.</p>
    <p>Fact landmark || = 1 Disjunctive landmark A disjunction over F</p>
    <p>Conjunctive landmark A conjunction over F</p>
    <p>Definition (action landmark)</p>
    <p>An action landmark is an action a that appears in every valid plan .</p>
  </div>
  <div class="page">
    <p>Finding landmarks is difficult</p>
    <p>Determining if a fact is a landmark is PSPACE-complete in general, but in P for problems with no deletes</p>
    <p>Approach: Look for landmarks of the delete relaxation +</p>
    <p>Use backchaining (Porteous, Sebastia &amp; Hoffmann, 2001, Hoffmann, Porteous &amp; Sebastia, 2004):</p>
    <p>Extensions: Consider disjunctions and use them to discover additional landmarks (lookback), or use them directly (Richter, Helmert &amp; Westphal, 2008)</p>
  </div>
  <div class="page">
    <p>Backchaining: drawbacks</p>
    <p>Does not compute complete set of + landmarks</p>
    <p>Requires arbitrary limits on size of disjunctions, lookback depth</p>
    <p>For any n, we can construct a problem that requires n levels of lookback:</p>
    <p>s lm</p>
    <p>a1 . . . an</p>
    <p>b1 . . . bn</p>
    <p>g</p>
  </div>
  <div class="page">
    <p>How to find the complete set?</p>
    <p>Checking whether a fact is a landmark in + is in P, therefore so is finding the complete set of landmarks</p>
    <p>The naive approach is not efficient</p>
    <p>Zhu &amp; Givan (2003) propose an efficient forward propagation approach that finds the complete set of causal landmarks</p>
  </div>
  <div class="page">
    <p>Causal + landmarks</p>
    <p>Definition (causal landmark)</p>
    <p>A causal landmark is a formula  over F such that either  is entailed by the goal, or every valid plan  contains an action a whose precondition pre(a) entails .</p>
    <p>Example: p is a non-causal landmark</p>
    <p>s g</p>
    <p>p</p>
  </div>
  <div class="page">
    <p>Forward propagation</p>
    <p>Zhu &amp; Givans algorithm propagates labels representing landmark sets forwards in the relaxed planning graph</p>
    <p>At level i:</p>
    <p>Intuition: Fact p is a landmark for action a if it is a landmark for some q  pre(a). Fact p is a landmark for fact q if it is a landmark for all actions that achieve q.</p>
  </div>
  <div class="page">
    <p>AND/OR graphs</p>
    <p>+ defines an AND/OR graph:</p>
    <p>Definition (AND/OR graph)</p>
    <p>An AND/OR graph VI,VAND,VOR,E is a directed graph with vertices VI VAND VOR and edges E, where VI, VAND and VOR are disjoint sets called initial nodes, AND nodes, and OR nodes, respectively.</p>
    <p>Intuition:</p>
    <p>initial nodes: things known to be true (initial state)</p>
    <p>AND nodes: true iff all predecessors true (actions)</p>
    <p>OR nodes: true iff some predecessor true (fluents)</p>
  </div>
  <div class="page">
    <p>AND/OR landmarks</p>
    <p>Justifications in AND/OR graphs correspond to a plans in +:</p>
    <p>Definition (AND/OR graph justification)</p>
    <p>Given an AND/OR graph G = VI,VAND,VOR,E, a justification for a set of nodes VG is a subgraph J = V J,EJ of G such that:</p>
    <p>VG  V J</p>
    <p>For every AND node v  V J , pred(v)  V J . For every OR node v  V J , u(u  pred(v) u  V J ) J is acyclic.</p>
    <p>Definition (AND/OR landmark)</p>
    <p>Given an AND/OR graph G = VI,VAND,VOR,E, a node n is a landmark for a node set VG if n  V J for all justifications J for VG.</p>
  </div>
  <div class="page">
    <p>Landmark equations for AND/OR graphs</p>
    <p>The fixpoint of the Zhu and Givan algorithm is the solution to the following set of equations for the AND/OR graph defined by +:</p>
    <p>LM(v) = {v} if v  VI LM(v) = {v}</p>
    <p>upred(v)</p>
    <p>LM(u) if v  VOR</p>
    <p>LM(v) = {v}</p>
    <p>upred(v)</p>
    <p>LM(u) if v  VAND</p>
    <p>The landmarks for a set of nodes are given by the union of the landmarks for each of the nodes:</p>
    <p>LM(V ) =  vV</p>
    <p>LM(v)</p>
  </div>
  <div class="page">
    <p>Discussion</p>
    <p>Theorem (LM equations solution)</p>
    <p>The LM() equations have a unique maximal solution with regard to set inclusion.</p>
    <p>Computation: Initialize landmark sets as follows:</p>
    <p>LM(v) = {v} if v  VI LM(v) = VI VAND VOR otherwise</p>
    <p>and apply equations as update rules until fixpoint.</p>
    <p>Second initialization rule ensures that maximal solution is found.</p>
  </div>
  <div class="page">
    <p>Propagation example</p>
    <p>s{s} olm</p>
    <p>{s, olm}</p>
    <p>lm</p>
    <p>oa1</p>
    <p>a1 . . . an</p>
    <p>oag</p>
    <p>{s, olm, lm, oa1, a1, . . . , oag}</p>
    <p>ob1</p>
    <p>b1 . . . bn</p>
    <p>obg</p>
    <p>{s, olm, lm, ob1, b1, . . . , obg}</p>
    <p>g {s, olm, lm, g}</p>
    <p>VOR VAND VI</p>
  </div>
  <div class="page">
    <p>Propagation example</p>
    <p>s{s} olm</p>
    <p>{s, olm}</p>
    <p>lm</p>
    <p>oa1</p>
    <p>a1 . . . an</p>
    <p>oag</p>
    <p>{s, olm, lm, oa1, a1, . . . , oag}</p>
    <p>ob1</p>
    <p>b1 . . . bn</p>
    <p>obg</p>
    <p>{s, olm, lm, ob1, b1, . . . , obg}</p>
    <p>g {s, olm, lm, g}</p>
    <p>VOR VAND VI</p>
  </div>
  <div class="page">
    <p>Propagation example</p>
    <p>s{s} olm</p>
    <p>{s, olm}</p>
    <p>lm</p>
    <p>oa1</p>
    <p>a1 . . . an</p>
    <p>oag</p>
    <p>{s, olm, lm, oa1, a1, . . . , oag}</p>
    <p>ob1</p>
    <p>b1 . . . bn</p>
    <p>obg</p>
    <p>{s, olm, lm, ob1, b1, . . . , obg}</p>
    <p>g {s, olm, lm, g}</p>
    <p>VOR VAND VI</p>
  </div>
  <div class="page">
    <p>Propagation example</p>
    <p>s{s} olm</p>
    <p>{s, olm}</p>
    <p>lm</p>
    <p>oa1</p>
    <p>a1 . . . an</p>
    <p>oag</p>
    <p>{s, olm, lm, oa1, a1, . . . , oag}</p>
    <p>ob1</p>
    <p>b1 . . . bn</p>
    <p>obg</p>
    <p>{s, olm, lm, ob1, b1, . . . , obg}</p>
    <p>g {s, olm, lm, g}</p>
    <p>VOR VAND VI</p>
  </div>
  <div class="page">
    <p>Propagation example</p>
    <p>s{s} olm</p>
    <p>{s, olm}</p>
    <p>lm</p>
    <p>oa1</p>
    <p>a1 . . . an</p>
    <p>oag</p>
    <p>{s, olm, lm, oa1, a1, . . . , oag}</p>
    <p>ob1</p>
    <p>b1 . . . bn</p>
    <p>obg</p>
    <p>{s, olm, lm, ob1, b1, . . . , obg}</p>
    <p>g {s, olm, lm, g}</p>
    <p>VOR VAND VI</p>
  </div>
  <div class="page">
    <p>Landmarks beyond +</p>
    <p>Observation: The equations are applicable to any planning problem with no delete effects</p>
    <p>The m compilation (Haslum, 2009) yields such a planning problem that encodes information about deletes in :</p>
    <p>Fluents of m are subsets of F of size  m m fluents can not be achieved by actions deleting some  fluent in the set</p>
    <p>Landmarks of m are conjunctive landmarks in  that take into account delete information</p>
  </div>
  <div class="page">
    <p>Blocksworld example</p>
    <p>A</p>
    <p>B C</p>
    <p>A</p>
    <p>B</p>
    <p>C</p>
    <p>+ Landmarks:</p>
    <p>clear B gn holding B</p>
  </div>
  <div class="page">
    <p>Blocksworld example</p>
    <p>A</p>
    <p>B C</p>
    <p>A</p>
    <p>B</p>
    <p>C</p>
    <p>(Some) 2 Landmarks:</p>
    <p>(clear B  holding A) gn (clear B  ontable A) gn (holding B  ontable A) gn (on B C  ontable A) gn</p>
    <p>(on B C  holding A)</p>
  </div>
  <div class="page">
    <p>We look at optimal planning</p>
    <p>Planning framework: Admissible landmark cost-partitioning heuristic with LM-A search (Karpas &amp; Domshlak, 2009)</p>
    <p>Questions:</p>
    <p>We compare to Richter, Helmert &amp; Westphal, 2008 (RHW)</p>
  </div>
  <div class="page">
    <p>Do we find more landmarks?</p>
    <p>RHW m = 1 m = 2 m = 2 conj</p>
    <p>elevators-opt 629 (30) 1.12 1.12 3.66 openstacks-opt 2925 (30) 1.03 1.03 11.37 parcprinter 2142 (30) 1.00 1.07 18.37 pegsol 1457 (30) 1.00 1.02 19.33 scanalyzer 673 (26) 1.00 1.26 9.65 sokoban-opt 605 (29) 2.73 4.80 36.95 transport-opt 390 (30) 1.00 1.00 3.44 woodworking-opt 1520 (30) 1.06 1.08 9.91</p>
    <p>Table: Number of landmarks generated in IPC6 domains.</p>
    <p>Yes! Up to 2.73 as many + landmarks, 4.80 as many fact landmarks with m = 2, and 36.95 as many landmarks when conjunctive landmarks are also counted.</p>
  </div>
  <div class="page">
    <p>Are they informative?</p>
    <p>RHW m = 1 m = 2 m = 2 conj</p>
    <p>elevators-opt 483982 (7) 1.00 1.00 1.35 openstacks-opt 649341 (10) 1.00 1.00 1.00 parcprinter 1118898 (12) 1.00 1.29 1.61 pegsol 1734655 (23) 1.00 1.04 1.20 scanalyzer 23029 (11) 1.00 1.00 1.46 sokoban-opt 3502115 (13) 1.02 1.03 1.10 transport-opt 929285 (9) 1.00 1.00 1.00 woodworking-opt 199666 (10) 1.41 1.41 2.35</p>
    <p>Table: Nodes expanded to find a solution in IPC6 domains.</p>
    <p>Yes! With optimal cost-partitioning, up to 2.10 times fewer nodes expanded when using fact landmarks, and up to 22.80 times fewer nodes expanded when using conjunctive landmarks with m = 2.</p>
  </div>
  <div class="page">
    <p>Do they improve overall performance?</p>
    <p>Contrary to expectations, no.</p>
    <p>Coverage with complete + landmarks is slightly better (584 vs. 576 out of 1116)</p>
    <p>Using m landmarks improves coverage in some domains, but decreases coverage in general:</p>
    <p>Computation of m landmarks is costly</p>
    <p>Greater informativeness all but disappears with uniform cost partitioning, optimal cost partitioning is expensive</p>
    <p>More landmarks lead to greater overhead, slower heuristic computation</p>
  </div>
  <div class="page">
    <p>Conclusions &amp; future work</p>
    <p>Declarative characterisation gives us a better understanding of +</p>
    <p>landmarks</p>
    <p>Separates what is computed from how it is computed</p>
    <p>With m, we obtain conjunctive landmarks and non-+ landmarks</p>
    <p>Future work:</p>
    <p>Cost-partitioning schemes intermediate between uniform and optimal</p>
    <p>Make m compilation more efficient</p>
  </div>
  <div class="page">
    <p>The m compilation</p>
    <p>Definition (m problem)</p>
    <p>For a planning problem  = F,A,I,G and a value m  1, m = Fm,Am,Im,Gm is given by</p>
    <p>Fm {f  F | |f|  m} Am</p>
    <p>aA</p>
    <p>cF m1{ac | cadd(a) = cdel(a) = }</p>
    <p>pre(ac) {f  F | f  (pre(a)  c)} add(ac) {f  F | f  (add(a)c)fadd(a) 6= } del(ac)</p>
    <p>cost(ac) cost(a)</p>
    <p>Im {i  I | |i|  m} Gm {g  G | |g|  m}</p>
  </div>
  <div class="page">
    <p>Landmark comparison: + vs. Richter, Helmert &amp; Westphal</p>
    <p>Expanded nodes (optimal cost partitioning): + landmarks (y-axis) vs. RHW landmarks (x-axis)</p>
  </div>
  <div class="page">
    <p>Landmark comparison: + vs. Richter, Helmert &amp; Westphal</p>
    <p>Expanded nodes (uniform cost partitioning): + landmarks (y-axis) vs. RHW landmarks (x-axis)</p>
  </div>
  <div class="page">
    <p>Landmark comparison: 2 vs. Richter, Helmert &amp; Westphal</p>
    <p>Expanded nodes (optimal cost partitioning): 2 landmarks (y-axis) vs. RHW landmarks (x-axis)</p>
  </div>
  <div class="page">
    <p>Landmark comparison: 2 vs. Richter, Helmert &amp; Westphal</p>
    <p>Expanded nodes (uniform cost partitioning): 2 landmarks (y-axis) vs. RHW landmarks (x-axis)</p>
  </div>
</Presentation>
