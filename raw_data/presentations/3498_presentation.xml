<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>GUARDER: A Tunable Secure Allocator</p>
    <p>Sam Silvestro, Hongyu Liu, Tianyi Liu, Zhiqiang Lin*, Tongping Liu</p>
    <p>University of Texas at San Antonio * The Ohio State University</p>
  </div>
  <div class="page">
    <p>The University of Texas at San Antonio, One UTSA Circle, San Antonio, TX 78249 8/28/18 2</p>
    <p>Common Heap Vulnerabilities</p>
    <p>Buffer over-read  Information leakage</p>
    <p>e.g., Heartbleed</p>
    <p>Use-after-free  Buffer overflow  Double / invalid free</p>
    <p>Unexpected results, program crash, hijacked control flow</p>
  </div>
  <div class="page">
    <p>The University of Texas at San Antonio, One UTSA Circle, San Antonio, TX 78249 8/28/18 3</p>
    <p>Heap Vulnerabilities Reported in NIST Database</p>
    <p>Heap Vulnerabilities Occurrences (#)</p>
    <p>Heap Over-reads 125</p>
    <p>Heap Over-writes 673</p>
    <p>Use-after-frees 264</p>
    <p>Invalid-frees 35</p>
    <p>Double-frees 33</p>
    <p>Many vulnerabilities were reported just in the past year!</p>
  </div>
  <div class="page">
    <p>The University of Texas at San Antonio, One UTSA Circle, San Antonio, TX 78249 8/28/18 4</p>
    <p>Defending Heap Vulnerabilities</p>
    <p>Detect bugs with automated tools, e.g. Coverity, ASan  Overhead issue, completeness, false positives</p>
    <p>Rewrite code using a safer language, e.g. Java  Huge amount of effort and performance issue</p>
    <p>Prevent code execution  Cannot handle return-to-libc or ROP attack</p>
    <p>Sanity check on execution flow, e.g. CFI  Secure heap allocator, e.g. randomization</p>
  </div>
  <div class="page">
    <p>The University of Texas at San Antonio, One UTSA Circle, San Antonio, TX 78249 8/28/18 5</p>
    <p>Designed to perform well  Bump pointers + freelists  Not designed for security purposes</p>
    <p>Prepends metadata before actual objects  Provides no randomization</p>
    <p>Result: easy to determine when an object will be allocated  Poor handling of double/invalid frees</p>
    <p>allocated</p>
    <p>header</p>
    <p>free</p>
    <p>header</p>
    <p>malloc_state</p>
    <p>top</p>
    <p>Heap segment</p>
    <p>unused unused</p>
    <p>allocated</p>
    <p>header</p>
    <p>allocated</p>
    <p>header</p>
    <p>free</p>
    <p>header</p>
    <p>malloc_state</p>
    <p>top</p>
    <p>Heap segment</p>
    <p>An example of Linux allocators object metadata placement</p>
    <p>prev size 16</p>
    <p>cur size 32</p>
    <p>allocated space prev size</p>
    <p>free space</p>
    <p>fd bk</p>
    <p>Default Linux Allocator</p>
  </div>
  <div class="page">
    <p>The University of Texas at San Antonio, One UTSA Circle, San Antonio, TX 78249 8/28/18 6</p>
    <p>Existing Secure Allocators: OpenBSD, DieHarder, and FreeGuard</p>
    <p>Each are BIBOP-style secure allocators  Big Bag of Pages  Each bag of pages holds objects of a specific size class  Metadata are separated from the actual heap</p>
    <p>All feature randomization  DieHarder = log n bits of entropy  OpenBSD = 2 ~ 10 bits  FreeGuard = 2 bits</p>
    <p>Some impose high performance overhead  OpenBSD  31%  DieHarder  74%, up to 9.2X</p>
  </div>
  <div class="page">
    <p>The University of Texas at San Antonio, One UTSA Circle, San Antonio, TX 78249 8/28/18 7</p>
    <p>Entropy of Existing Secure Allocators</p>
    <p>E n</p>
    <p>tr op</p>
    <p>y (b</p>
    <p>it s)</p>
    <p>Size Class</p>
    <p>DieHarder OpenBSD FreeGuard</p>
  </div>
  <div class="page">
    <p>The University of Texas at San Antonio, One UTSA Circle, San Antonio, TX 78249 8/28/18 8</p>
    <p>DieHarders Security Issue</p>
    <p>Always selects one object randomly, among all available objects  May take extended period before search is successful  Not reliable  unstable entropy</p>
    <p>Worse: security is bound to its specific design, which is not flexible</p>
  </div>
  <div class="page">
    <p>The University of Texas at San Antonio, One UTSA Circle, San Antonio, TX 78249 8/28/18 9</p>
    <p>Design Purpose</p>
    <p>Reliable Security  Stable allocation entropy across:</p>
    <p>Size classes  Inputs  Execution phases  Applications</p>
    <p>Tunable security  User may specify the bits of entropy  Balances performance budget with security needs</p>
  </div>
  <div class="page">
    <p>The University of Texas at San Antonio, One UTSA Circle, San Antonio, TX 78249 8/28/18 10</p>
    <p>Supplying the Specified Entropy</p>
    <p>We could use a simple array as the object buffer  1 out of 256 objects = 8 bits of entropy</p>
    <p>Challenges with this approach:  How to handle deallocations?</p>
    <p>How to efficiently find space to reinsert freed objects?  How to avoid repopulating array after every allocation?</p>
    <p>&lt; 256 objects  &lt; 8 bits of entropy  How to avoid excessive checking cycles?</p>
    <p>Upon allocations, probability of choosing empty slot</p>
  </div>
  <div class="page">
    <p>The University of Texas at San Antonio, One UTSA Circle, San Antonio, TX 78249 8/28/18 11</p>
    <p>Class:256B</p>
    <p>Thread1</p>
    <p>Class:16B</p>
    <p>Thread1: Class:16B</p>
    <p>Threadm</p>
    <p>Heap</p>
    <p>Alloc Buffer</p>
    <p>Dealloc Buffer</p>
    <p>&quot;</p>
    <p>Filling</p>
    <p>Fi lli</p>
    <p>ng</p>
    <p>Threadm: Class:64B</p>
    <p>Alloc Buffer</p>
    <p>Dealloc Buffer</p>
    <p>&quot;</p>
    <p>Filling</p>
    <p>Class:32B Class:64B</p>
    <p>Fi lli</p>
    <p>ng</p>
    <p>Combining Allocation and Deallocation Buffers</p>
    <p>Provides minimum of E-bits of user-specified entropy  Every thread has pair of allocation and deallocation buffers per size class  Allocation buffer holds 2E+1 objects</p>
    <p>To never fall below half full ensures minimum E bits entropy  Allocation buffer is filled from top of heap if no freed objects are available</p>
  </div>
  <div class="page">
    <p>The University of Texas at San Antonio, One UTSA Circle, San Antonio, TX 78249 8/28/18 12</p>
    <p>Tunable Security  Overprovisioning  Dedicates a portion of heap objects as never use</p>
    <p>Guarders default factor = 1/8  Thus, each object has 1/8 probability of being excluded from future</p>
    <p>use  Helps thwart buffer overflow  During allocation buffer filling step:</p>
    <p>1/8 of objects will be selected randomly for exclusion  Corresponding slot marked empty  Remaining 7/8 of non-empty slots will be pulled into allocation buffer</p>
    <p>In-use</p>
    <p>New</p>
    <p>Available</p>
    <p>Heap Allocation</p>
    <p>Buffer</p>
    <p>Over-prov Skip Filling</p>
  </div>
  <div class="page">
    <p>The University of Texas at San Antonio, One UTSA Circle, San Antonio, TX 78249 8/28/18 13</p>
    <p>Tunable Security  Custom Guard Pages</p>
    <p>Guard pages: cannot be accessed  Helps prevent heap spraying, buffer overflow attacks  Guarders default proportion = 10%  During buffer filling, the given proportion of pages are marked as</p>
    <p>guard pages</p>
    <p>Allocated</p>
    <p>Free</p>
    <p>Bag n</p>
    <p>Static Guard Pages Random Guard Pages</p>
    <p>Guard Page</p>
    <p>Bag n+1</p>
    <p>SEGFAULT</p>
  </div>
  <div class="page">
    <p>The University of Texas at San Antonio, One UTSA Circle, San Antonio, TX 78249 8/28/18 14</p>
    <p>Performance Evaluation  21</p>
    <p>applications evaluated  PARSEC  8 real-world</p>
    <p>&lt; 3% overhead, on average (arithmetic mean)</p>
    <p>All values normalized to performance of default Linux allocator</p>
    <p>blackscholes bodytrack canneal dedup facesim</p>
    <p>ferret fluidanim</p>
    <p>ate freqm</p>
    <p>ine raytrace stream</p>
    <p>cluster sw</p>
    <p>aptions vips</p>
    <p>x264</p>
    <p>A get</p>
    <p>A pache</p>
    <p>Firefox M</p>
    <p>em cached</p>
    <p>M ySQ</p>
    <p>L Pbzip2 Pfscan SQ</p>
    <p>Lite</p>
    <p>AV ER</p>
    <p>A G</p>
    <p>E</p>
    <p>N or</p>
    <p>m al</p>
    <p>iz ed</p>
    <p>R un</p>
    <p>tim e</p>
    <p>Default DieHarder OpenBSD FreeGuard Guarder Dummy 9.2 6.1 4.2 1.42 3.0 1.4 1.7</p>
  </div>
  <div class="page">
    <p>The University of Texas at San Antonio, One UTSA Circle, San Antonio, TX 78249 8/28/18 15</p>
    <p>Performance Evaluation</p>
    <p>Trials DieHarder OpenBSD FreeGuard Guarder</p>
    <p>Allocation Average 1.99 3.79 1 1.77</p>
    <p>Maximum 93 45 1 131</p>
    <p>Deallocation Average 12.40 1 1 1</p>
    <p>Maximum 141 1 1 1</p>
    <p>Two reasons why Guarder performs faster  Avoids use of central lock  Due to the following design</p>
    <p>Data collected with Guarders default tunable parameter of 9 bits of entropy.</p>
  </div>
  <div class="page">
    <p>The University of Texas at San Antonio, One UTSA Circle, San Antonio, TX 78249 8/28/18 16</p>
    <p>Security Feature Comparison</p>
    <p>Guarder provides the most complete feature-set as compared to existing works</p>
    <p>Provides the strongest guarantee with respect to randomization entropy</p>
    <p>indicates the allocator has this feature indicates the implementation has some weakness</p>
    <p>Security Feature Linux DieHarder OpenBSD FreeGuard Guarder</p>
    <p>Fully-segregated metadata</p>
    <p>Randomized allocation</p>
    <p>Guard pages</p>
    <p>Check overflows on free</p>
    <p>Over-provisioned allocation</p>
    <p>Detects double/invalid frees</p>
  </div>
  <div class="page">
    <p>The University of Texas at San Antonio, One UTSA Circle, San Antonio, TX 78249 8/28/18 17</p>
    <p>Entropy of Secure Allocators</p>
    <p>Guarder exhibits reliable entropy  Allows users to specify the entropy (e.g., 9 bits here)</p>
    <p>E n</p>
    <p>tr op</p>
    <p>y (b</p>
    <p>it s)</p>
    <p>Size Class</p>
    <p>DieHarder OpenBSD FreeGuard Guarder</p>
  </div>
  <div class="page">
    <p>The University of Texas at San Antonio, One UTSA Circle, San Antonio, TX 78249 8/28/18 18</p>
    <p>Why Tunable Matters?</p>
    <p>Values normalized to default settings  Higher security indicates higher overhead</p>
    <p>Figure 3: Performance overhead of secure allocators (and TCMalloc), where all values are normalized to the default Linux allocator.</p>
    <p>Trials DieHarder OpenBSD FreeGuard GUARDER</p>
    <p>Allocation Average 1.99 3.79 1 1.77 Maximum 93 45 1 131</p>
    <p>Deallocation Average 12.40 1 1 1 Maximum 141 1 1 1</p>
    <p>Table 3: Number of trials for allocations and deallocations in different allocators.</p>
    <p>Entropy (bits) GPR=10%, OPF=1/8 8 9 10 11 12</p>
    <p>Table 4: Performance sensitivity to each parameter, normalized to the default settings of GUARDER.</p>
    <p>EB = Entropy Bits, GPR = Guard Page Ratio, OPF = Over-Provisioning Factor</p>
    <p>pages, including 2%, 5%, 10%, 20%, and 50%, were similarly evaluated. For the 50% ratio, almost every page (or object with size greater than 4 kilobytes), will be separated by a guard page. Similarly, a larger ratio of installed guard pages typically implies a larger performance overhead, due to invoking more mprotect system calls.</p>
    <p>Over-provisioning factor. Different heap overprovisioning factors, including 1/32, 1/16, 1/8, 1/4, and 1/2, were evaluated. In the extreme case of 1/2, half of the heap will not be utilized. This evaluation shows two results: (1) A larger over-provisioning factor will typically imply larger overhead. (2) The performance impact of over-provisioning is not as large as expected, as over-provisioning will not affect cache utilization when skipped objects are completely removed from future allocations and deallocations. However, it may cause a much larger performance impact on DieHarder, due to its special design.</p>
    <p>We collected the maximum memory consumption for all five allocators. For server applications, such as MySQL and Memcached, memory consumption was collected via the VmHWM field of /proc/pid /status file. For other applications, memory consumption was collected using the maxresident output of the time utility [22].</p>
  </div>
  <div class="page">
    <p>The University of Texas at San Antonio, One UTSA Circle, San Antonio, TX 78249 8/28/18 19</p>
    <p>Comparison of Existing Security Allocators</p>
    <p>Performance</p>
    <p>Se cu</p>
    <p>ri ty</p>
    <p>OpenBSD</p>
    <p>DieHarder(CCS10)</p>
    <p>Linux</p>
    <p>Guarder</p>
    <p>FreeGuard(CCS17)</p>
  </div>
  <div class="page">
    <p>The University of Texas at San Antonio, One UTSA Circle, San Antonio, TX 78249 8/28/18 20</p>
    <p>Conclusion</p>
    <p>GUARDER is a tunable secure heap allocator  Tunable security allows users to choose their security based</p>
    <p>on their performance budget  Reliable security provides a stable entropy level across size</p>
    <p>classes, inputs, execution phases, and applications  The allocation buffer design facilitates other tunable security</p>
    <p>features, heap over-provisioning and random guard pages  Implements greatest feature set compared to other evaluated</p>
    <p>allocators  GUARDER provides reliable, tunable security with &lt; 3%</p>
    <p>performance overhead</p>
  </div>
  <div class="page">
    <p>The University of Texas at San Antonio, One UTSA Circle, San Antonio, TX 78249 8/28/18 21</p>
    <p>blackscholes bodytrack canneal dedup facesim</p>
    <p>ferret fluidanim</p>
    <p>ate freqm</p>
    <p>ine raytrace stream</p>
    <p>cluster sw</p>
    <p>aptions vips</p>
    <p>x264</p>
    <p>A get</p>
    <p>A pache</p>
    <p>Firefox M</p>
    <p>em cached</p>
    <p>M ySQ</p>
    <p>L Pbzip2 Pfscan SQ</p>
    <p>Lite</p>
    <p>AV ER</p>
    <p>A G</p>
    <p>E</p>
    <p>N or</p>
    <p>m al</p>
    <p>iz ed</p>
    <p>R un</p>
    <p>ti m</p>
    <p>e</p>
    <p>Default DieHarder OpenBSD FreeGuard Guarder Dummy 9.2 6.1 4.2 1.42 3.0 1.4 1.7</p>
    <p>Performance</p>
    <p>Se cu</p>
    <p>ri ty</p>
    <p>OpenBSD</p>
    <p>DieHarder</p>
    <p>Linux</p>
    <p>Guarder</p>
    <p>FreeGuard</p>
    <p>E n</p>
    <p>tr op</p>
    <p>y (b</p>
    <p>it s)</p>
    <p>Size Class</p>
    <p>DieHarder OpenBSD FreeGuard Guarder</p>
    <p>Class:256B</p>
    <p>Thread1</p>
    <p>Class:16B</p>
    <p>Thread1: Class:16B</p>
    <p>Threadm</p>
    <p>Heap</p>
    <p>Alloc Buffer</p>
    <p>Dealloc Buffer</p>
    <p>&quot;</p>
    <p>Filling</p>
    <p>F il</p>
    <p>li n g</p>
    <p>Threadm: Class:64B</p>
    <p>Alloc Buffer</p>
    <p>Dealloc Buffer</p>
    <p>&quot;</p>
    <p>Filling</p>
    <p>Class:32B Class:64B</p>
    <p>F il</p>
    <p>li n g</p>
    <p>Guarder can be downloaded at https://github.com/UTSASRG/Guarder</p>
    <p>The work is also supported by Mozilla</p>
  </div>
</Presentation>
