<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>FastScale: Accelerate RAID Scaling by Mi i i i D t Mi tiMinimizing Data Migration</p>
    <p>Weimin Zheng, Guangyan Zhang gyzh@tsinghua.edu.cn Tsinghua University</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Motivation  Minimizing data migrationg g  Optimizing data migration  Evaluation Evaluation  Conclusions</p>
  </div>
  <div class="page">
    <p>Why Scale a RAIDy</p>
    <p>A disk is a simple computer  A RAID vol. can deliver high perf.</p>
    <p>Multi disks serve an App concurrently.  applications often require larger</p>
    <p>capacity and higher performance. As user data increase and computing As user data increase and computing powers enhance</p>
    <p>One solution is to add new disks to a RAID volume  This disk addition is termed RAID scaling.</p>
    <p>To regain a balanced load, some blocks needs to be moved to new disks.</p>
    <p>Data migration need to be performed online</p>
    <p>To supply non-stop services.</p>
  </div>
  <div class="page">
    <p>Limitation of Existing Approachg pp</p>
    <p>Existing approach to RAID scaling preserves the roundbi d f ddi di krobin order after adding disks.</p>
    <p>Pro: the addressing function is simple. Con: all the data need to be moved Con: all the data need to be moved</p>
    <p>Recent work has optimized data migration, among whichRecent work has optimized data migration, among which one typical example is SLAS (ACM TOS 2007):</p>
    <p>Uses I/O aggregation and lazy checkpointing to improve the ffi iefficiency</p>
    <p>Due to migration of all the data, RAID scaling remains costly</p>
    <p>Can we reduce the total number of migrated data blocks?</p>
    <p>Can we reduce the total number of migrated data blocks?</p>
  </div>
  <div class="page">
    <p>Minimizing Data Migrationg g</p>
    <p>FastScale moves only data blocks f ld di k di k hilfrom old disks to new disks, while not migrating data among old disks.</p>
    <p>)(1 nm+</p>
    <p>m1</p>
    <p>It is enough for preserving the uniformity of data distribution</p>
    <p>minimizes data migration for RAID scaling.</p>
    <p>new disksold disks</p>
    <p>RAID scaling.</p>
    <p>We design an elastic addressing function, through which th l ti f bl k b il t d the location of one block can be easily computed</p>
    <p>without any lookup operation.</p>
  </div>
  <div class="page">
    <p>Optimizing Data Migrationp g g</p>
    <p>FastScale also exploits physical properties to optimize li d i ionline data migration.</p>
    <p>First it uses aggregate accesses to improve the efficiency of First, it uses aggregate accesses to improve the efficiency of data migration.</p>
    <p>Second, it records data migration lazily to minimize the number of metadata updates while ensuring data consistency.</p>
  </div>
  <div class="page">
    <p>Results</p>
    <p>Implemented FastScale and SLAS in DiskSim 4.0  Compared with SLAS, Round-robin RAID-0 scaling.</p>
    <p>E l ti d i RAID li Evaluation during RAID scaling:  reduce redistribution time by up to 86.06%  with smaller maximum response time of user I/Os with smaller maximum response time of user I/Os</p>
    <p>Evaluation after 1 or 2 RAID scaling operations: Evaluation after 1 or 2 RAID scaling operations:  is almost identical with the round-robin RAID-0.</p>
  </div>
  <div class="page">
    <p>Coverage of FastScaleg</p>
    <p>In this paper, we only describe our solution for RAID-0, i.e., striping without parity.</p>
    <p>F tS l l k f RAID 10 d RAID 01 FastScale can also work for RAID-10 and RAID-01.  Some large storage systems slice disks into many segments,</p>
    <p>several segments are organized into a RAID.</p>
    <p>Although we do not handle RAID-4 and RAID-5, we g believe that our method provides a good starting point for efficient scaling of RAID-4 and RAID-5 arrays.</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Motivation  Minimizing data migrationg g  Optimizing data migration  Evaluation Evaluation  Conclusions</p>
  </div>
  <div class="page">
    <p>Requirements for RAID Scalingq g</p>
    <p>Requirement 1 (Uniform data distribution):  If there are B blocks stored on m disks, the expected number of</p>
    <p>blocks on each disk is approximately B/m so as to maintain an even load.</p>
    <p>Requirement 2 (Minimal Data Migration):  During the addition of n disks to a RAID with m disks storing B</p>
    <p>blocks, the expected number of blocks to be moved is B*n/(m+n).</p>
    <p>Requirement 3 (Fast data Addressing):  In a m-disk RAID, the location of a block is computed by an</p>
    <p>algorithm with low space and time complexity.</p>
  </div>
  <div class="page">
    <p>Semi-RR: the Most Intuitive Method</p>
    <p>semi-RR is based on Round-robin scaling  Only if the resulting disk is one of new disks, it moves a data</p>
    <p>block.  Otherwise, it does not move a data block.Otherwise, it does not move a data block.</p>
    <p>Good news: Semi-RR can reduce data migrationGood news: Semi RR can reduce data migration significantly.</p>
    <p>Bad news: it does not guarantee uniform distribution of data blocks after multiple scaling operations</p>
  </div>
  <div class="page">
    <p>FastScale: Min Migr. &amp; Uniform Dist.g</p>
    <p>take RAID scaling from 3 disks to 5 as an example.  one RAID scaling process can be divided into two stages</p>
    <p>logically: d t i ti d data migration and,</p>
    <p>data filling.</p>
    <p>ll th d t bl k ithi all the data blocks within a parallelogram will be moved.</p>
    <p>2 data blocks are migrated from each old disk.</p>
    <p>hil it h i l bl k while its physical block number is unchanged.</p>
    <p>An elastic function to</p>
    <p>describe the data layout</p>
  </div>
  <div class="page">
    <p>FastScale: Property Examinationp y</p>
    <p>Does FastScale satisfies the three requirements?  compared with the round-robin and semi-RR algorithms.</p>
    <p>From a 4-disk array, we add one disk repeatedly for 10 times, using the three algorithms respectively.</p>
    <p>Each disk has a capacity of 128 GB, and the block size is 64 KB64 KB.</p>
    <p>In other words, each disk holds 2M blocks.</p>
  </div>
  <div class="page">
    <p>Comparison in Migration Fractionp g</p>
    <p>Using the round-robin i</p>
    <p>R at</p>
    <p>io Round-Robin</p>
    <p>algorithm,  the migration fraction is</p>
    <p>constantly 100%</p>
    <p>M ig</p>
    <p>ra tio</p>
    <p>n R FastScale</p>
    <p>Semi-RR</p>
    <p>co s y 00%</p>
    <p>using semi-RR and FastScale  The migration fractions are</p>
    <p>Times of Disk Additions</p>
    <p>identical.  They are significantly smaller</p>
    <p>Restricted by uniformity they Restricted by uniformity, they are also minimal.</p>
    <p>Compared in migration fraction, Semi-RR and FastScale win!</p>
    <p>Compared in migration fraction, Semi-RR and FastScale win!</p>
    <p>FastScale win!FastScale win!</p>
  </div>
  <div class="page">
    <p>Comp. in Uniformity of Distributionp y  We use the coefficient of variation as a metric to evaluate</p>
    <p>the uniformity of data distribution across all the disks</p>
    <p>For the round robin and</p>
    <p>the uniformity of data distribution across all the disks.  The C.V. expresses the std dev. as a percentage of the average.</p>
    <p>For the round-robin and FastScale algorithms,</p>
    <p>C.V. remain 0 percent as the 8</p>
    <p>at io</p>
    <p>n (%</p>
    <p>)</p>
    <p>Round-Robin FastScale Semi-RR</p>
    <p>p addition times increases.</p>
    <p>the semi-RR algorithm 2</p>
    <p>ef fic</p>
    <p>ie nt</p>
    <p>o f V</p>
    <p>ar ia</p>
    <p>causes excessive oscillation in the C.V.</p>
    <p>Maximum is even 13.06%. 0 1 2 3 4 5 6 7 8 9 10 11</p>
    <p>-2</p>
    <p>Times of Disk Additions</p>
    <p>Compared in uniformity of distribution, Semi-RR f il d F tS l i i !</p>
    <p>Compared in uniformity of distribution, Semi-RR f il d F tS l i i !</p>
    <p>fails and FastScale wins again!fails and FastScale wins again!</p>
  </div>
  <div class="page">
    <p>Comparison in Calculation Overhead p  we run different algorithms to calculate the physical</p>
    <p>addresses for all data blocks on a scaled RAID.addresses for all data blocks on a scaled RAID.  the average addressing time for each block is calculated.  Setup: Intel Dual Core T9400 2.53 GHz, 4 GB Memory,</p>
    <p>Windows 7</p>
    <p>us )</p>
    <p>Round-Robin FastScale Semi-RR The Round-robin algorithm</p>
    <p>has the lowest overhead</p>
    <p>re ss</p>
    <p>in g</p>
    <p>T im</p>
    <p>e (uhas the lowest overhead,</p>
    <p>0.014 s or so.</p>
    <p>FastScale has the largest</p>
    <p>FastScale has the largest overhead.</p>
    <p>the largest time is 0.24 s Times of Disk Additions</p>
    <p>compared to milliseconds of disk I/O time, the l l ti h d i li ibl</p>
    <p>compared to milliseconds of disk I/O time, the l l ti h d i li ibl</p>
    <p>calculation overhead is negligible.calculation overhead is negligible.</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Motivation  Minimizing data migrationg g  Optimizing data migration  Evaluation Evaluation  Conclusions</p>
  </div>
  <div class="page">
    <p>I/O Aggregation</p>
    <p>Aggregate read: M l i l i Multiple successive blocks on a disk are read via a single I/O.</p>
    <p>Aggregate write:  Multiple successive</p>
    <p>blocks on a disk areblocks on a disk are written via a single I/O.</p>
    <p>converts small requests into fewer, larger requests. k t i iti t d lti l bl k</p>
    <p>converts small requests into fewer, larger requests. k t i iti t d lti l bl k</p>
    <p>seek cost is mitigated over multiple blocks.seek cost is mitigated over multiple blocks.</p>
  </div>
  <div class="page">
    <p>Why can Lazy Checkpointing work?  Each metadata update causes one long seek :</p>
    <p>MetaData is usually stored at the beginning of member disks MetaData is usually stored at the beginning of member disks</p>
    <p>after data copying, new replica and original are valid.  block copying does not overwrite any valid datablock copying does not overwrite any valid data</p>
    <p>when the system fails and reboots, the original replica will be used. 0 3 4 mapping metadata7 8 11</p>
    <p>As long as data has not been written since being</p>
    <p>i d th d t i</p>
    <p>D0</p>
    <p>D1</p>
    <p>D2</p>
    <p>copied, the data remain consistent.</p>
    <p>Only some I/Os are wasted</p>
    <p>D2 2 2623201714118 295 32</p>
    <p>D3</p>
    <p>D4 1184</p>
    <p>Only some I/Os are wasted</p>
    <p>not updating MD immediately does not sacrifice data li bilit Th l th t i it t i t d d t</p>
    <p>not updating MD immediately does not sacrifice data li bilit Th l th t i it t i t d d t</p>
    <p>reliability. The only threat is write to migrated data.reliability. The only threat is write to migrated data.</p>
  </div>
  <div class="page">
    <p>Lazy Checkpointing  data blocks are copied to new locations continuously</p>
    <p>while the mapping metadata is not updated onto the disks until</p>
    <p>In the figure,</p>
    <p>while the mapping metadata is not updated onto the disks until a threat to data consistency appears.</p>
    <p>In the figure,  C: migrated and</p>
    <p>checkpointed M i d b M: migrated but not checkpointed;</p>
    <p>U:not migrated</p>
    <p>only when a user write request arrives in the area M, data migration is checkpointed</p>
    <p>lazy checkpointing minimizes the number of t d t it ith t l f d t i t</p>
    <p>lazy checkpointing minimizes the number of t d t it ith t l f d t i t</p>
    <p>data migration is checkpointed.</p>
    <p>metadata writes without loss of data consistency.metadata writes without loss of data consistency.</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Motivation  Minimizing data migrationg g  Optimizing data migration  Evaluation Evaluation  Conclusions</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Questions that we want to answer:  Can FastScale accelerate RAID scaling?  What is the effect on user workloads?</p>
    <p>How about the performance of a scaled RAID? How about the performance of a scaled RAID?</p>
    <p>W d d il d i l i i h SLAS We used detailed simulations to compare with SLAS  The simulator is implemented with DiskSim as a worker module</p>
    <p>ith se eral disk traces collected in real s stems with several disk traces collected in real systems  The traces are TPC-C, Financial trace from SPC, Web search</p>
    <p>engine trace from SPC</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>The simulator is made up of a workload generator and a di kdisk array.</p>
    <p>workload generator initiates an I/O request at the appropriate time.</p>
    <p>The disk array consists of  an array controller and,y ,  Storage components.</p>
    <p>The array controller is logically divided into:</p>
    <p>an I/O processor and, a data mover a data mover.</p>
    <p>The simulator is implemented in SimPy and DiskSim.</p>
    <p>and DiskSim.</p>
  </div>
  <div class="page">
    <p>Scaling under the Financial Workloadg</p>
    <p>Under the Fin workload, we conduct a scaling op:  adding 2 disks to a 4-disk RAID,  each disk has a capacity of 4 GB,</p>
    <p>ith th 32KB t i it i with the 32KB stripe unit size</p>
    <p>The figure plots local max latencies as the time increases 90</p>
    <p>SLAS end</p>
    <p>m s)</p>
    <p>FastScale accelerates RAID scaling significantly</p>
    <p>la te</p>
    <p>nc y</p>
    <p>(m</p>
    <p>SLAS FastScale</p>
    <p>FastScale end, 952 s</p>
    <p>952s vs 6,830s, 86.06% improved</p>
    <p>local max latencies are also smaller</p>
    <p>timeline (s)</p>
    <p>smaller</p>
  </div>
  <div class="page">
    <p>Scaling under the TPC-C Workloadg</p>
    <p>Under the TPC-C workload, we redo the scaling:  adding 2 disks to a 4-disk RAID,</p>
    <p>The figure plots local max latencies as the time increases</p>
    <p>FastScale</p>
    <p>Once again, shows the efficiency in improving redistribution time</p>
    <p>la te</p>
    <p>nc y</p>
    <p>(m s)</p>
    <p>p g  964s vs 6,820s, 85.87% improved</p>
    <p>local max latencies are also</p>
    <p>smaller</p>
    <p>timeline (s)</p>
    <p>Fastscale improves the scaling efficiency of RAID i ifi tl</p>
    <p>Fastscale improves the scaling efficiency of RAID i ifi tl</p>
    <p>significantly. significantly.</p>
  </div>
  <div class="page">
    <p>After One Scaling Operationg p</p>
    <p>We compared the performance of two RAIDs scaled using F S l d SLASFastScale and SLAS:</p>
    <p>4+1: adding 1 disk to a 4-disk RAID</p>
    <p>We replayed the Web workload on two RAIDs We replayed the Web workload on two RAIDs.  The figure plots local avg latencies as the time increases</p>
    <p>m s)</p>
    <p>the performances of the two RAIDs are very close.</p>
    <p>For the round robin RAID the</p>
    <p>av er</p>
    <p>ag e</p>
    <p>la te</p>
    <p>nc y</p>
    <p>(m</p>
    <p>round-robin FastScale</p>
    <p>For the round-robin RAID, the average latency is 11.36 ms.</p>
    <p>For the FastScale RAID, the l t i 11 37</p>
    <p>timeline (s)</p>
    <p>average latency is 11.37 ms.</p>
  </div>
  <div class="page">
    <p>After Two Scaling Operationsg p</p>
    <p>We compared the performance of two RAIDs scaled twice i F S l d SLASusing FastScale and SLAS:</p>
    <p>4+1+1: adding 1 disk to a 4-disk RAID twice</p>
    <p>The figure plots local avg latencies as the time increases The figure plots local avg latencies as the time increases</p>
    <p>It again reveals the approximate equality in the</p>
    <p>e la</p>
    <p>te nc</p>
    <p>y (m</p>
    <p>s)</p>
    <p>approximate equality in the performances.</p>
    <p>For the round-robin RAID, the</p>
    <p>ag e</p>
    <p>round-robin FastScale</p>
    <p>, average latency is 11.21 ms.</p>
    <p>For the FastScale RAID, the average latency is 11.03 ms.</p>
    <p>timeline (s)</p>
    <p>average latency is 11.03 ms.</p>
    <p>the performance of the FastScale RAID-0 is almost id ti l ith th t f th RR RAID 0 the performance of the FastScale RAID-0 is almost id ti l ith th t f th RR RAID 0</p>
    <p>identical with that of the RR RAID-0identical with that of the RR RAID-0</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Motivation  Minimizing data migrationg g  Optimizing data migration  Evaluation Evaluation  Conclusions</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>FastScale accelerates RAID-0 scaling significantly  minimizes data migration without loss of the uniformity of data</p>
    <p>distribution  optimizes data migration with I/O aggregation and lazyoptimizes data migration with I/O aggregation and lazy</p>
    <p>checkpointing</p>
    <p>Compared with a round-robin scaling approach, F S lFastScale can:</p>
    <p>reduce redistribution time by up to 86.06% with smaller maximum response time of user I/Os with smaller maximum response time of user I/Os.</p>
    <p>the performance of the RAID scaled using FastScale is almost identical with that of the round-robin RAID.</p>
  </div>
  <div class="page">
    <p>Thank you!y</p>
    <p>Questions?Questions?</p>
    <p>Guangyan Zhang http://storage.cs.tsinghua.edu.cn/~zgy</p>
  </div>
  <div class="page">
    <p>How is a Block Moved?</p>
    <p>a parallelogram is divided into three parts:  a head triangle, unchanged shape  a body parallelogram,</p>
    <p>t il t i l h d h a tail triangle, unchanged shape</p>
    <p>head head</p>
    <p>The body parallelogram:  If m&gt;=n, not a rectangle,</p>
    <p>head head body</p>
    <p>tail body</p>
    <p>tail</p>
    <p>m m</p>
    <p>n</p>
    <p>change it into a rectangle  Otherwise, change the</p>
    <p>t l i t</p>
    <p>n</p>
    <p>head</p>
    <p>rectangle into a parallelogram.</p>
    <p>head body</p>
    <p>tail n</p>
    <p>m</p>
    <p>body</p>
    <p>tail</p>
    <p>n</p>
    <p>m</p>
    <p>m m</p>
  </div>
  <div class="page">
    <p>Comparison in Local avg Latenciesp g</p>
    <p>Under the Fin workload, we conduct a scaling op:  adding 2 disks to a 4-disk RAID,  each disk has a capacity of 4 GB,  with the 32KB stripe unit size</p>
    <p>with the 32KB stripe unit size</p>
    <p>The figure plots local avg latencies as the time increases</p>
    <p>local avg latencies are close  FastScale 8.01 ms,</p>
    <p>SLAS 7 53 6 7</p>
    <p>SLAS end, 6830 s</p>
    <p>FastScale end, 952 s</p>
    <p>SLAS 7.53 ms</p>
    <p>shorter data redistribution time 2</p>
    <p>la te</p>
    <p>nc y</p>
    <p>(m s)</p>
    <p>SLAS FastScale</p>
    <p>redistribution time 0 1000 2000 3000 4000 5000 6000 7000</p>
    <p>timeline (s)</p>
  </div>
</Presentation>
