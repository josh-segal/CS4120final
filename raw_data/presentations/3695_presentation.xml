<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>USBFuzz: A Framework for Fuzzing USB Drivers by Device Emulation</p>
    <p>Hui Peng1, Mathias Payer2</p>
  </div>
  <div class="page">
    <p>Testing drivers is challenging  Drivers depend on hardware/devices  Hard to generate unexpected device inputs  Many recent attacks/CVEs</p>
    <p>Malicious Device</p>
    <p>HACKED</p>
  </div>
  <div class="page">
    <p>Motivation  Defenses against peripheral attacks are limited</p>
    <p>Rule-based authorization policy (USBGuard) and USB Firewalls (LBM, USBFilter)  Detect only known bugs</p>
    <p>Isolation based approaches (Cinch)  Too expensive, not used in practice</p>
    <p>Fuzzing is a widely used automatic software testing technique  We propose a framework to apply fuzzing to USB drivers</p>
    <p>Fixing bugs is better than defending against their exploitation</p>
  </div>
  <div class="page">
    <p>Threat Model  Device controlled by attacker via:</p>
    <p>Prepared device through physical interfaces, or  Hijacking networked interfaces (e.g., USBRedir, etc)</p>
    <p>Attack vector  Focusing on unexpected data from device side</p>
  </div>
  <div class="page">
    <p>USB Fuzzing: Challenge &amp; Existing Approaches  Challenge</p>
    <p>How to feed random device input to drivers  Existing Approaches</p>
    <p>Dedicated Hardware  Umap + FaceDancer  Hardware cost, not scalable, etc</p>
    <p>Data injection in the IO stack  Syzkaller usb-fuzz, PeriScope  Not portable, some code paths are missed</p>
    <p>Data injection through networked USB interface  vUSBf  Only supports dumb fuzzing</p>
  </div>
  <div class="page">
    <p>USBFuzz: Device Emulation  Using emulated USB device in a virtualized kernel</p>
    <p>Feeding random device inputs to USB drivers  A host memory area exported to the guest system</p>
    <p>Can be used for coverage collection</p>
    <p>Advantages  Cheap, scalable, portable  Supports coverage guided fuzzing</p>
  </div>
  <div class="page">
    <p>USBFuzz Design  Guest system</p>
    <p>Runs target system  Fuzzing device  Communicating device  User Mode Agent</p>
    <p>Fuzzer  Runs in host system  Controls test execution  Collect coverage info</p>
    <p>Fuzzer</p>
    <p>Kernel Virtual Machine (KVM)</p>
    <p>Host Kernel</p>
    <p>Virtualized Hardware</p>
    <p>Fuzzing Device</p>
    <p>Comm. Device</p>
    <p>Target Kernel</p>
    <p>(CPU, Memory etc)</p>
    <p>User Mode Agent</p>
    <p>Guest System</p>
    <p>Fuzzer Generated Input Test Control &amp; Exec Feedback</p>
  </div>
  <div class="page">
    <p>Test Execution  A test starts from attaching the fuzzing device to guest system  Drivers are tested while performing IO ops on the fuzzing device  User Mode Agent detects end of a test by scanning kernel logs</p>
    <p>Fuzzer Guest System (VM) User Mode</p>
    <p>Agent</p>
    <p>Fuzzing Loop</p>
  </div>
  <div class="page">
    <p>Evaluation  Coverage guided fuzzing on Linux kernel</p>
    <p>Adapted KCOV to collect coverage info</p>
    <p>Dumb fuzzing on FreeBSD, Windows and MacOS  Seeded by inputs generated when fuzzing Linux kernel</p>
  </div>
  <div class="page">
    <p>Bugs and CVEs  Bugs</p>
    <p>CVEs  CVE-2018-20169, CVE-2018-19824, CVE-2019-15098, CVE-2019-15099, CVE-2018-19985,</p>
    <p>CVE-2018-20344, CVE-2019-15117, CVE-2019-15118, CVE-2019-15504, CVE-2019-15505</p>
    <p>OS/Kernel Details</p>
    <p>Linux 26 new bugs, 16 of them are memory bugs</p>
    <p>FreeBSD One in a USB bluetooth dongle driver</p>
    <p>Windows 4, resulting Bluescreen on Windows 8 and Windows 10</p>
    <p>MacOS 3, two resulting unplanned restart and one resulting freeze</p>
  </div>
  <div class="page">
    <p>Fuzzing throughput  0.1 ~ 3.0 exec/sec  Most of the execution time is spent on OS-device interaction  Similar throughput observed in syzkaller usb-fuzz</p>
    <p>A sample of execution speed of USBFuzz A sample of execution speed of syzkaller usb-fuzz</p>
  </div>
  <div class="page">
    <p>Case Study (1)</p>
    <p>USB devices are described by Device Descriptors  USB standard defines the first 2 bytes</p>
    <p>The first byte indicates the length  The second byte indicates the type</p>
    <p>Descriptors are read from the device side</p>
    <p>struct usb_descriptor_header { __u8 bLength; __u8 bDescriptorType ; } __attribute__ ((packed));</p>
    <p>struct usb_otg_descriptor { __u8 bLength; __u8 bDescriptorType ; __u8 bmAttributes; } __attribute__ ((packed));</p>
    <p>Data structure representing the first 2 bytes of a descriptor Descriptor for USB On-The-Go</p>
  </div>
  <div class="page">
    <p>Case Study (2)</p>
    <p>Bug detected in case of malicious descriptors  Attackers can masquerade long descriptors using short ones</p>
    <p>int __usb_get_extra_descriptor (char *buffer, unsigned size, unsigned char type, void **ptr) { struct usb_descriptor_header *header; while (size &gt;= sizeof(struct usb_descriptor_header )) { header = (struct usb_descriptor_header *)buffer; if (header-&gt;bLength &lt; 2) { return -1; } if (header-&gt;bDescriptorType == type) { *ptr = header; return 0; } buffer += header-&gt;bLength; size -= header-&gt;bLength; } return -1; }</p>
    <p>check on untrusted data</p>
  </div>
  <div class="page">
    <p>Case Study (3)</p>
    <p>Security Impact  Allowing Out-Of-Bounds Access</p>
    <p>static int usb_enumerate_device_otg(struct usb_device * udev) { // ...... struct usb_otg_descriptor * desc = NULL; err = __usb_get_extra_descriptor( udev-&gt;rawdescriptors[0] , le16_to_cpu( udev-&gt;config[0].desc.wTotalLength ), USB_DT_OTG, (void **) &amp;desc); if (err||!(desc-&gt;bmAttributes &amp; USB_OTG_HNP)) return 0;</p>
    <p>// ...... }</p>
    <p>struct usb_otg_descriptor { __u8 bLength;</p>
    <p>__u8 bDescriptorType ; __u8 bmAttributes; } __attribute__ ((packed));</p>
    <p>OOB Access</p>
  </div>
  <div class="page">
    <p>Demo/Windows - Bluescreen of Death</p>
  </div>
  <div class="page">
    <p>Demo/MacOS - Unplanned Restart</p>
  </div>
  <div class="page">
    <p>Conclusion  Testing drivers is challenging  USBFuzz provides a device emulation based approach fuzz USB drivers  USBFuzz is cheap, portable and flexible  So far USBFuzz has found:</p>
    <p>26 bugs in Linux  one bug in FreeBSD  4 bugs in Windows  3 bugs in MacOS</p>
    <p>https://github.com/HexHive/USBFuzz</p>
  </div>
  <div class="page">
    <p>EOF</p>
  </div>
  <div class="page">
    <p>Data injection in syzkaller usb-fuzz</p>
    <p>USB Driver</p>
    <p>Userspace program</p>
    <p>Host Controller Driver</p>
    <p>Host Controller</p>
    <p>USB Driver</p>
    <p>Userspace program</p>
    <p>Host Controller</p>
    <p>Driver</p>
    <p>Dummy Controller</p>
    <p>fuzzer</p>
  </div>
</Presentation>
