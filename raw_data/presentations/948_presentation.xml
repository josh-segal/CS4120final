<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Secure and Efficient Application Monitoring and Replication</p>
    <p>Stijn Volckaert, Bart Coppens, AlexiosVoulimeneas, Andrei Homescu, Per Larsen, Bjorn De Sutter, Michael Franz</p>
    <p>immunant</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Possible Solutions</p>
    <p>Type-Safe Languages (e.g. Rust)</p>
    <p>Type-Safe Languages (e.g. Rust)</p>
    <p>Mitigations:  Integrity-Based (e.g. CFI)  Randomization-Based (e.g. ASLR)  Integrity-Based (e.g. CFI)  Randomization-Based (e.g. ASLR)</p>
    <p>Mitigations:</p>
    <p>Multi-Variant Execution Environments (MVEEs)</p>
  </div>
  <div class="page">
    <p>Input</p>
    <p>Stack</p>
    <p>Program</p>
    <p>Stack</p>
    <p>Program</p>
  </div>
  <div class="page">
    <p>Memory Corruption Attacks</p>
    <p>Stack</p>
    <p>Program</p>
    <p>buf</p>
    <p>return addressmain + 2execve</p>
  </div>
  <div class="page">
    <p>Stack</p>
    <p>Program</p>
    <p>main + 2</p>
    <p>Stack</p>
    <p>Program</p>
    <p>main + 2</p>
  </div>
  <div class="page">
    <p>Multi-Variant Execution Environments (MVEEs) Program</p>
    <p>Program</p>
    <p>Monitor</p>
    <p>Kernel</p>
    <p>t t</p>
    <p>In a nutshell:</p>
    <p>Run multiple program variants in parallel</p>
    <p>Variant system calls executed in lock-step</p>
    <p>Suspend them at every system call</p>
    <p>Compare system call numbers/arguments</p>
    <p>Master/Slave replication for I/O</p>
    <p>brk brk</p>
    <p>write write</p>
  </div>
  <div class="page">
    <p>Performance Considerations</p>
    <p>Stack</p>
    <p>Program</p>
    <p>Stack</p>
    <p>Program</p>
    <p>Monitor</p>
    <p>Kernel</p>
    <p>Programs can execute at native speed (assuming you have enough idle CPU cores and memory bandwidth)</p>
    <p>BUT system call interception is SLOW!</p>
    <p>brk brk</p>
    <p>t t</p>
    <p>write write</p>
  </div>
  <div class="page">
    <p>Alternative Design Program</p>
    <p>Program</p>
    <p>Kernel</p>
    <p>Monitor Monitor</p>
    <p>write</p>
    <p>write</p>
    <p>Efficient Monitoring:</p>
    <p>Load monitor into variants address spaces</p>
    <p>Replicate results through a shared buffer</p>
    <p>Let master run ahead of slaves</p>
    <p>BUT:</p>
    <p>Malicious syscalls can circumvent monitor</p>
    <p>Shared buffer data can be tampered with</p>
  </div>
  <div class="page">
    <p>ReMon</p>
    <p>Program Program</p>
    <p>Kernel</p>
    <p>Cross-Process Monitor</p>
    <p>Syscall Broker</p>
    <p>opengetpid</p>
    <p>Split-Monitor Design:</p>
    <p>Handle security-sensitive system calls in Cross-Process Monitor (CP-MON)</p>
    <p>Handle non-sensitive system calls in In-Process Monitor (IP-MON)</p>
    <p>Configurable relaxation policies</p>
    <p>In-Process Monitor</p>
    <p>In-Process Monitor</p>
  </div>
  <div class="page">
    <p>Relaxation Policies</p>
    <p>3 different policies:  Syscalls unconditionally handled by IP-MON (e.g. sys_getpid)</p>
    <p>Syscalls conditionally handled by IP-MON (e.g. sys_write for non-socket files)</p>
    <p>Syscalls probabilistically handled by IP-MON (not implemented)</p>
  </div>
  <div class="page">
    <p>Initializing the In-Process Monitor</p>
    <p>Program Program</p>
    <p>Kernel</p>
    <p>CP-MON</p>
    <p>Syscall Broker</p>
    <p>prctl(PR_REGISTER_IPMON, &lt;list of system calls&gt;)</p>
    <p>Registering IP-MON:</p>
    <p>Call sys_prctl with list of non-security-sensitive system calls as argument</p>
    <p>This sys_prctl call will ALWAYS be reported to CP-MON</p>
    <p>If the call succeeds, all of the syscalls in the list will be forwarded to IP-MON from that point onward</p>
    <p>IP-MON</p>
    <p>IP-MON</p>
  </div>
  <div class="page">
    <p>ReMon Components</p>
    <p>System Call Broker:</p>
    <p>Intercept system calls as they enter kernel</p>
    <p>Forward them to appropriate monitor based on active relaxation policy</p>
    <p>Authenticate system calls when resumed by monitor</p>
    <p>Program Program</p>
    <p>Kernel</p>
    <p>CP-MON</p>
    <p>Syscall Broker</p>
    <p>opengetpid</p>
    <p>IP-MON</p>
    <p>IP-MON</p>
  </div>
  <div class="page">
    <p>ReMon Components</p>
    <p>In-Process Monitor:</p>
    <p>Authorized to execute forwarded calls w/o intervention by cross-process monitor</p>
    <p>Replicates system call results through shared buffer</p>
    <p>Program Program</p>
    <p>Kernel</p>
    <p>CP-MON</p>
    <p>Syscall Broker</p>
    <p>getpid</p>
    <p>IP-MON</p>
    <p>IP-MON</p>
  </div>
  <div class="page">
    <p>ReMon Components</p>
    <p>Cross-Process Monitor:</p>
    <p>Standard ptrace-basedmonitor</p>
    <p>Completely isolated from variants</p>
    <p>Program Program</p>
    <p>Kernel</p>
    <p>CP-MON</p>
    <p>Syscall Broker</p>
    <p>open</p>
    <p>IP-MON</p>
    <p>IP-MON</p>
  </div>
  <div class="page">
    <p>In-Process Monitor Security</p>
    <p>No abuse of monitor privileges:</p>
    <p>Monitor cannot execute system calls that did not pass through the broker first</p>
    <p>Broker generates authentication key and loads it into register when forwarding call to monitor</p>
    <p>Key must be intact to finish execution of forwarded call</p>
    <p>Program Program</p>
    <p>Kernel</p>
    <p>CP-MON</p>
    <p>Syscall Broker</p>
    <p>getpid</p>
    <p>IP-MON</p>
    <p>IP-MON</p>
  </div>
  <div class="page">
    <p>In-Process Monitor Security</p>
    <p>No tampering with monitor data:</p>
    <p>Locations of monitor and shared buffer are only known to broker</p>
    <p>Pointers to monitor and buffer are never visible in user space</p>
    <p>Program Program</p>
    <p>Kernel</p>
    <p>CP-MON</p>
    <p>Syscall Broker</p>
    <p>IP-MON</p>
    <p>IP-MON</p>
    <p>getpid</p>
  </div>
  <div class="page">
    <p>In-Process Monitor Security</p>
    <p>Leak Prevention:</p>
    <p>Sensitive values (e.g. pointers, authorization key) only stored in registers and never leaked or spilled</p>
    <p>Monitor has no indirect branches =&gt; control flow cannot be diverted to malicious code</p>
    <p>Program Program</p>
    <p>Kernel</p>
    <p>CP-MON</p>
    <p>Syscall Broker</p>
    <p>IP-MON</p>
    <p>IP-MON</p>
    <p>getpid</p>
  </div>
  <div class="page">
    <p>Performance</p>
    <p>Dual Intel Xeon E5-2660  20Mb Cache each  64Gb ECC DDR3 RAM  Linux 3.13.11  Server Benchmarks:  Local loopback  Gbit Link  2ms  Gbit Link  5ms</p>
    <p>2 variants of the protected program  4 worker threads for multi-threaded benchmark suites (PARSEC/SPLASH-2x)</p>
  </div>
  <div class="page">
    <p>Performance</p>
    <p>Benchmark CP-MON only ReMon SPEC CPU 2006 6.37% 3% PARSEC 2.1 22% 11% SPLASH-2x 29% 10% Server Benchmarks up to 1249% &lt;3.5%</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>Existing Security-Oriented MVEEs:  Secure but SLOW</p>
    <p>Existing Reliability-Oriented MVEEs:  Fast but INSECURE</p>
    <p>ReMon:  FAST and SECURE</p>
    <p>https://github.com/stijn-volckaert/ReMon</p>
  </div>
  <div class="page"/>
</Presentation>
