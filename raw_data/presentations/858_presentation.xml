<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>On Designing a Target-Independent DSL for Safe OS Process Scheduling Components</p>
    <p>Julia Lawall, DIKU, University of Copenhagen</p>
    <p>Anne-Francoise Le Meur, Jacquard Group, LIFL, Lille</p>
    <p>Gilles Muller, OBASCO Group, Ecole des Mines de Nantes</p>
  </div>
  <div class="page">
    <p>Overview</p>
    <p>I Introduction to Domain-Specific Languages (DSLs).</p>
    <p>I Our proposal for DSL design.</p>
    <p>I Instantiation in the Bossa DSL for process scheduling.</p>
    <p>I Conclusions.</p>
  </div>
  <div class="page">
    <p>Domain-Specific Languages (DSLs)</p>
    <p>DSL: A language dedicated to a particular domain.</p>
    <p>I Captures a family of programs. I Provides high-level domain-specific abstractions that</p>
    <p>I Simplify programming. I Enable verifications, optimizations.</p>
    <p>Useful when:</p>
    <p>I Programming within the program family is often needed.</p>
    <p>I Programming within the program family requires highly specialized knowledge.</p>
    <p>Examples: lex, yacc, SQL, languages for graphics, Web programming, etc.</p>
  </div>
  <div class="page">
    <p>Our target domain: process scheduling</p>
    <p>Process scheduling: How an OS selects a process for the CPU.</p>
    <p>I Many scheduling policies (round-robin, rate monotonic, etc.).</p>
    <p>I Policies form a program family.</p>
    <p>I No policy is perfect for all applications.</p>
    <p>Implementing a scheduler requires:</p>
    <p>I Understanding the scheduling policy. I Understanding the target OS.</p>
    <p>I Any error can crash the machine.</p>
    <p>An ideal DSL target . . . I Bossa [Muller, Lawall, et al., EW2002, ASE2003, PEPM2004]</p>
  </div>
  <div class="page">
    <p>Creating a DSL</p>
    <p>A domain expert uses domain expertise to [Consel, Marlet, PLILP98]:</p>
    <p>I Select language abstractions.</p>
    <p>I Develop a language syntax.</p>
    <p>I Implement language support (verifier, compiler, etc.)</p>
    <p>verified DSL program</p>
    <p>executable component</p>
    <p>DSL verifier</p>
    <p>DSL compiler</p>
    <p>DSL programDSL</p>
    <p>//</p>
    <p>//</p>
    <p>Problem: Multiple kinds of expertise may be needed. 5</p>
  </div>
  <div class="page">
    <p>Expertise needed to create a DSL for process scheduling</p>
    <p>Expertise in scheduling policies:</p>
    <p>I Liveness, bounded response time, etc.</p>
    <p>I What kinds of operations are needed to provide these properties?</p>
    <p>Expertise in operating systems:</p>
    <p>I How does existing scheduling code work?</p>
    <p>I What existing scheduling code should be replaced?</p>
    <p>I What invariants must scheduling code maintain?</p>
    <p>Problem: Expertises required at different times.</p>
  </div>
  <div class="page">
    <p>Our proposal</p>
    <p>Divide the role of the domain expert:</p>
    <p>I Scheduling expert: Expert in the program family. I Identifies relevant language constructs.</p>
    <p>I OS expert: Expert in each specific execution environment. I Identifies relevant OS properties.</p>
    <p>Introduce a type system:</p>
    <p>I Developed by the scheduling expert based on an analysis of the range of relevant properties.</p>
    <p>I Used by the OS expert to describe OS properties.</p>
    <p>I Types used in verifying and compiling DSL programs.</p>
  </div>
  <div class="page">
    <p>Our proposal</p>
    <p>Divide the role of the domain expert:</p>
    <p>I Scheduling expert: Expert in the program family. I Identifies relevant language constructs.</p>
    <p>I OS expert: Expert in each specific execution environment. I Identifies relevant OS properties.</p>
    <p>Introduce a type system:</p>
    <p>I Developed by the scheduling expert based on an analysis of the range of relevant properties.</p>
    <p>I Used by the OS expert to describe OS properties.</p>
    <p>I Types used in verifying and compiling DSL programs.</p>
  </div>
  <div class="page">
    <p>Instantiation in the Bossa DSL</p>
    <p>verified policy implementation</p>
    <p>scheduling component</p>
    <p>policy verifier</p>
    <p>policy compiler</p>
    <p>policy programmer</p>
    <p>policy implementation</p>
    <p>DSL</p>
    <p>//</p>
  </div>
  <div class="page">
    <p>Instantiation in the Bossa DSL</p>
    <p>verified types</p>
    <p>policy programmer</p>
    <p>verified policy implementation</p>
    <p>scheduling component</p>
    <p>type verifier</p>
    <p>policy verifier</p>
    <p>policy compiler</p>
    <p>OS expert</p>
    <p>types policy</p>
    <p>implementation</p>
    <p>Type system DSL</p>
    <p>// // //</p>
  </div>
  <div class="page">
    <p>Issues</p>
    <p>I Can relevant properties be expressed in a concise and understandable way?</p>
    <p>I Can type information be used to detect errors?</p>
    <p>I Can type information improve the result of compilation?</p>
  </div>
  <div class="page">
    <p>The Bossa DSL, in more detail</p>
    <p>I The scheduling domain.</p>
    <p>I Contribution of the scheduling expert</p>
    <p>I Contribution of the OS expert</p>
    <p>I Tying things together: the verification process.</p>
  </div>
  <div class="page">
    <p>The scheduling domain</p>
    <p>Goal of process scheduling:</p>
    <p>I Elect a new process.</p>
    <p>I Only ready processes are eligible.</p>
    <p>. . .</p>
    <p>. . .</p>
    <p>CPU Blocked</p>
    <p>Ready // // //</p>
    <p>// //</p>
    <p>A scheduler must:</p>
    <p>I Elect an eligible process.</p>
    <p>I Adjust process states in response to kernel events.</p>
  </div>
  <div class="page">
    <p>Contribution of the scheduling expert</p>
    <p>Language infrastructure (OS independent)</p>
    <p>I Syntax I main elements: process states and event handlers</p>
    <p>I Type system</p>
    <p>I Verifier</p>
    <p>I Compiler</p>
  </div>
  <div class="page">
    <p>Process states</p>
    <p>states = { RUNNING running : process; READY ready : select queue; READY expired : queue; BLOCKED blocked : queue; TERMINATED terminated;</p>
    <p>}</p>
    <p>States: running, ready, etc.</p>
    <p>State classes: Describe state semantics:</p>
    <p>I RUNNING: the state of the running process</p>
    <p>I READY: states containing eligible processes</p>
    <p>I BLOCKED: states containing blocked (ineligible) processes</p>
    <p>I TERMINATED: a dummy state for terminating processes</p>
  </div>
  <div class="page">
    <p>Event handlers</p>
    <p>On unblock.* { if (e.target in blocked) {</p>
    <p>e.target =&gt; ready; if (!empty(running)) {</p>
    <p>running =&gt; ready; }</p>
    <p>} }</p>
    <p>unblock p2</p>
    <p>Scheduler</p>
    <p>running ready blocked</p>
    <p>p1 p2 p3</p>
    <p>''OO OO</p>
    <p>wwooo oo</p>
    <p>''O OOO</p>
    <p>4 4</p>
    <p>Scheduler running ready blocked</p>
    <p>p1 p2 p3</p>
    <p>wwooo oo</p>
    <p>''O OOO</p>
    <p>4 44</p>
  </div>
  <div class="page">
    <p>Contribution of the OS expert (Linux 2.4)</p>
    <p>Events: bossa.schedule, block.*, unblock.preemptive.*, unblock.nonpreeptive.*, . . .</p>
    <p>Interrupt events: unblock.preemptive.*, unblock.nonpreeptive.*, . . .</p>
    <p>Event sequences: block.* u bossa.schedule, . . .</p>
    <p>Type rules: I unblock.preemptive.*:</p>
    <p>I [tgt in BLOCKED] -&gt; [tgt in READY] I [p in RUNNING, tgt in BLOCKED] -&gt;</p>
    <p>[{p, tgt} in READY] I [tgt in RUNNING] -&gt; [ ] I [tgt in READY] -&gt; [ ]</p>
    <p>I 11 events, 60 rules for Linux 2.4.</p>
  </div>
  <div class="page">
    <p>Tying things together</p>
    <p>Verifier and compiler:</p>
    <p>I Implemented by the scheduling expert.</p>
    <p>I Configured with information provided by the OS expert.</p>
    <p>Verifier:</p>
    <p>I Checks that all handlers are present.</p>
    <p>I Checks that handlers implement allowed transitions.</p>
    <p>Compiler:</p>
    <p>I Generates C code.</p>
    <p>I Uses information collected by the verifier.</p>
  </div>
  <div class="page">
    <p>Verification example</p>
    <p>On unblock.preemptive.* { if (e.target in blocked) {</p>
    <p>e.target =&gt; ready; if (!empty(running)) { running =&gt; ready;</p>
    <p>} }</p>
    <p>}</p>
    <p>Verification with respect to: [tgt in BLOCKED] -&gt; ...</p>
    <p>Matches: [p in RUNNING, tgt in BLOCKED]-&gt;</p>
    <p>[{p, tgt} in READY]</p>
    <p>[tgt in BLOCKED] -&gt; [tgt in READY]</p>
    <p>[ ] = running {p,tgt} in ready</p>
    <p>? in blocked</p>
    <p>[ ] = running tgt in ready ? in blocked</p>
    <p>p in running tgt in ready ? in blocked</p>
    <p>? in running tgt in ready ? in blocked</p>
    <p>? in running ? in ready</p>
    <p>tgt in blocked</p>
    <p>ttiiii iiii</p>
    <p>3 33</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>Multiple kinds of expertise required to implement a DSL.</p>
    <p>I May not all be available at the same time.</p>
    <p>For scheduling, we propose:</p>
    <p>I A scheduling expert.</p>
    <p>I An OS expert.</p>
    <p>I A type system to connect them.</p>
    <p>DSL can be constructed so that the contribution of the OS expert can be usefully exploited.</p>
  </div>
  <div class="page">
    <p>Availability</p>
    <p>I Implementation in Linux 2.4, with and without high-resolution timers.</p>
    <p>I Example policies and applications.</p>
    <p>I Teaching lab, based on Knoppix.</p>
    <p>I MPlayer demo.</p>
    <p>http://www.emn.fr/x-info/bossa/</p>
  </div>
</Presentation>
