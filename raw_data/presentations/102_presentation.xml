<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Almost ASAP Semantics : From Timed Models to Timed Implementations</p>
    <p>M. De Wulf, L. Doyen, J.-F. Raskin</p>
    <p>University of Brussels Centre Fdr en Vrification</p>
  </div>
  <div class="page">
    <p>MotivationsMotivations</p>
    <p>Embedded Controllers  ... are difficult to develop (concurrency,</p>
    <p>real-time, continuous environment, ...).  ... are safety critical.</p>
    <p>Use model-based development : Timed Automata and</p>
    <p>Reachability Analysis</p>
  </div>
  <div class="page">
    <p>Model-based developmentModel-based development</p>
    <p>Make a model of the environment: Env</p>
    <p>Make clear the control objective: Bad</p>
    <p>Make a model of the control strategy: ControllerModel</p>
    <p>Verify: Does Env || ControllerModel avoid Bad ?</p>
    <p>Good, but after ?</p>
  </div>
  <div class="page">
    <p>GoalGoal</p>
    <p>Transfer of verified properties from models to code.</p>
    <p>Type of models we consider:  Controllers specified as timed automata</p>
  </div>
  <div class="page">
    <p>ProblemsProblems</p>
    <p>Timed automata are (in general) not implementable (in a formal sense)...</p>
    <p>Why ?  Zenoness : 0, 0.5, 0.75, 0.875, ...</p>
    <p>No minimal bound between two transitions : 0,0.5,1,1.75,2,2.875,3,...</p>
    <p>And more ... (robustness)</p>
  </div>
  <div class="page">
    <p>More ProblemsMore Problems</p>
    <p>One can specify instantaneous response but not implement it.</p>
    <p>Not implementable</p>
  </div>
  <div class="page">
    <p>More ProblemsMore Problems</p>
    <p>Instantaneous synchronisation between environment and controller is not implementable.</p>
    <p>EnvironmentEnvironment</p>
    <p>Classical controller Not implementable</p>
  </div>
  <div class="page">
    <p>More ProblemsMore Problems</p>
    <p>Models use continuous clocks and implementation uses digital clocks with finite precision</p>
    <p>Classical controller Not implementable</p>
    <p>V.S</p>
  </div>
  <div class="page">
    <p>Problems : SummaryProblems : Summary</p>
    <p>My controller stragegy may be correct because :  it is zeno;  it acts faster and faster;  it reacts instantaneously to events and</p>
    <p>timeouts (synchrony hypothesis);  it uses infinitely precise clocks.</p>
  </div>
  <div class="page">
    <p>A possible solution...A possible solution...</p>
    <p>Give an alternative semantics to timed automata : Almost ASAP semantics.  enabled transitions of the controller</p>
    <p>become urgent only after  time units;  events from the environment are received</p>
    <p>by the controller within  time units;  guards are enlarged by .</p>
    <p>where  is a parameter</p>
  </div>
  <div class="page">
    <p>IntuitionIntuition</p>
    <p>One can specify instantaneous response but not implement it.</p>
    <p>Not implementable Solution : allow some delay</p>
  </div>
  <div class="page">
    <p>More IntuitionMore Intuition</p>
    <p>Instantaneous synchronisation between environment and controller is not implementable.</p>
    <p>EnvironmentEnvironment</p>
    <p>Classical controller Not implementable</p>
    <p>Solution : Uncouple event from perception by the controller</p>
  </div>
  <div class="page">
    <p>More IntuitionMore Intuition</p>
    <p>Models use continuous clocks and implementation uses digital clocks with finite precision</p>
    <p>Classical controller Not implementable</p>
    <p>Solution : Slightly relax the constraints</p>
    <p>V.S</p>
  </div>
  <div class="page">
    <p>IntuitionIntuition</p>
    <p>AASAP semantics define a tube of strategies instead of a unique strategy in the ASAP semantics.</p>
    <p>This tube can be refined into an implementation while preserving safety properties</p>
    <p>ASAP semantics Implementation</p>
    <p>AASAP semantics</p>
    <p>f( )</p>
  </div>
  <div class="page">
    <p>VerificationVerification</p>
    <p>The question that we ask when we make verification is no more:</p>
    <p>Does Env || ControllerMod avoid Bad ?</p>
    <p>But: for which values of ,</p>
    <p>does Env || ControllerMod() avoid Bad ?</p>
  </div>
  <div class="page">
    <p>Proof of Proof of implementabilityimplementability ? ?</p>
    <p>We define an implementation semantics based on:</p>
    <p>The timed behaviour of this scheme is determined by two values :  Time length of a loop : L  Time between two clock ticks : P</p>
    <p>Read System Clock Update Sensor Values Check all transitions and fire one if possible</p>
  </div>
  <div class="page">
    <p>Proof of Proof of implementabilityimplementability ? ?</p>
    <p>For any timed controller, its AASAP semantics simulates (in the formal sense) its implementation semantics, provided that :</p>
    <p>&gt;2L+4P</p>
    <p>Theorem:</p>
    <p>In this case, the implementation is guaranteed to preserve verified properties of the model, that is:</p>
    <p>Environment || ControllerMod() avoid Bad implies</p>
    <p>Environment || ControllerImpl(L,P) avoid Bad</p>
  </div>
  <div class="page">
    <p>More Properties of theMore Properties of the AASAP SemanticsAASAP Semantics</p>
    <p>Faster is better !</p>
    <p>For any 1, 2 such that 1&gt;2:</p>
    <p>If Environment || ControllerMod(1) avoid Bad</p>
    <p>then Environment || ControllerMod(2) avoid Bad</p>
  </div>
  <div class="page">
    <p>More Properties of theMore Properties of the AASAP SemanticsAASAP Semantics</p>
    <p>If &gt;0, we get for free a proof that strategies:  are nonzeno  are such that transitions do not need to be</p>
    <p>taken faster and faster</p>
    <p>If only =0 guarantees some reachability property, then the control strategy is not implementable</p>
  </div>
  <div class="page">
    <p>In practice ?In practice ?</p>
    <p>The AASAP semantics can be coded into a parametric timed automata with only one parameter   Q.</p>
    <p>Unfortunately, the reachability problem for that class of timed automata is undecidable... Direct corollary of [CHR02].</p>
    <p>Hytech implements a semi-decision procedure for that problem.</p>
  </div>
  <div class="page">
    <p>In practiceIn practice Timed Controller</p>
    <p>Hytech Model</p>
    <p>Code (for example BrickOS C)</p>
    <p>Desired Properties</p>
    <p>OK ?</p>
    <p>Automatic Generation</p>
    <p>Verification</p>
    <p>Property Preservation</p>
  </div>
  <div class="page">
    <p>ConclusionConclusion</p>
    <p>Almost ASAP semantics is :  implementable  guarantees correct code and not only</p>
    <p>correct idealized model  maybe decidable (ongoing work).</p>
  </div>
</Presentation>
