<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Protecting Users by Confining JavaScript with COWL</p>
    <p>Deian Stefan, Edward Z. Yang, Petr Marchenko, Alejandro Russo, Dave Herman, Brad Karp, David Mazires</p>
  </div>
  <div class="page">
    <p>The Web No longer just a way of publishing static content</p>
  </div>
  <div class="page">
    <p>Core reason: Easy to create complex client-side apps</p>
    <p>Combine code and data from different parties!</p>
    <p>The Web Now app platform; lot of client-side functionality</p>
  </div>
  <div class="page">
    <p>Many apps handle sensitive data</p>
    <p>Political views Location infoFinances</p>
  </div>
  <div class="page">
    <p>What do browsers do to ensure that the weather site cannot access my bank statements?</p>
    <p>Third-party code? Sensitive data?</p>
    <p>chase.com</p>
    <p>weather.com</p>
  </div>
  <div class="page">
    <p>Idea: isolate content from different origins</p>
    <p>Compartmentalize code into contexts (tabs, iframes,)</p>
    <p>Disallow cross-origin reads from contexts &amp; servers</p>
    <p>In the beginning: Same-origin Policy</p>
    <p>chase.com</p>
    <p>chase.com</p>
    <p>weather.com weather.com</p>
  </div>
  <div class="page">
    <p>Idea: isolate content from different origins</p>
    <p>Compartmentalize code into contexts (tabs, iframes,)</p>
    <p>Disallow cross-origin reads from contexts &amp; servers</p>
    <p>In the beginning: Same-origin Policy</p>
    <p>chase.com</p>
    <p>chase.com</p>
    <p>weather.com weather.com</p>
  </div>
  <div class="page">
    <p>Idea: isolate content from different origins</p>
    <p>Compartmentalize code into contexts (tabs, iframes,)</p>
    <p>Disallow cross-origin reads from contexts &amp; servers</p>
    <p>In the beginning: Same-origin Policy</p>
    <p>chase.com</p>
    <p>chase.com</p>
    <p>weather.com weather.com</p>
  </div>
  <div class="page">
    <p>Problems with SOP</p>
    <p>Not strict enough: can disclose data arbitrarily</p>
    <p>Third-party code can leak data</p>
    <p>Code runs with authority of page</p>
    <p>Not flexible enough: cant read cross-origin data</p>
    <p>No secure third-party mashups!</p>
    <p>chase.com evil.biz</p>
    <p>mint.cc</p>
    <p>chase.com</p>
    <p>hsbc.com</p>
  </div>
  <div class="page">
    <p>chase.com evil.biz</p>
    <p>mint.cc</p>
    <p>chase.com</p>
    <p>hsbc.com</p>
    <p>Today: SOP + CSP + CORS</p>
    <p>Content Security Policy:</p>
    <p>Whitelist origins page can communicate with</p>
    <p>Cross-origin Resource Sharing:</p>
    <p>Server whitelists origins allowed to read the data</p>
  </div>
  <div class="page">
    <p>Today: SOP + CSP + CORS</p>
    <p>Discretionary Access Control</p>
    <p>Content Security Policy:</p>
    <p>Whitelist origins page can communicate with</p>
    <p>Cross-origin Resource Sharing:</p>
    <p>Server whitelists origins allowed to read the data</p>
  </div>
  <div class="page">
    <p>DAC is not enough!</p>
    <p>Forces choice between functionality and privacy</p>
    <p>E.g., mint.com-like client-side third-party mashup</p>
    <p>Privacy: bank doesnt give mint.cc access to data</p>
    <p>Functionality: bank cedes user data to mint.cc (or worse: user cedes bank credentials)</p>
    <p>mint.cc chase.com hsbc.com</p>
    <p>? ?</p>
  </div>
  <div class="page">
    <p>Reality: we give up privacy for functionality!</p>
    <p>DAC is not enough!</p>
  </div>
  <div class="page">
    <p>Mutually distrusting services</p>
    <p>docs.google.com</p>
    <p>eff.org</p>
    <p>Libraries with narrow APIs</p>
    <p>chase.com</p>
    <p>sketchy.ru</p>
    <p>Tightly-coupled libraries</p>
    <p>chase.com</p>
    <p>DAC is not enough!</p>
    <p>Third-party mashups</p>
    <p>hsbc.com</p>
    <p>mint.cc</p>
    <p>chase.com</p>
  </div>
  <div class="page">
    <p>Third-party code + sensitive data</p>
    <p>Challenge: allow untrusted code to compute on data</p>
    <p>E.g., chase wants to use password-strength checker library needs to fetch list of common passwords</p>
    <p>- Safe to fetch list before looking at password!</p>
    <p>Need: confinement (MAC)</p>
    <p>Impose restrictions on how code uses data</p>
    <p>chase.com sketchy.ru sketchy.ru</p>
    <p>p4ssw0rd</p>
  </div>
  <div class="page">
    <p>Third-party code + sensitive data</p>
    <p>Challenge: allow untrusted code to compute on data</p>
    <p>E.g., chase wants to use password-strength checker library needs to fetch list of common passwords</p>
    <p>- Safe to fetch list before looking at password!</p>
    <p>Need: confinement (MAC)</p>
    <p>Impose restrictions on how code uses data</p>
    <p>chase.com sketchy.ru sketchy.ru</p>
    <p>p4ssw0rd</p>
  </div>
  <div class="page">
    <p>Third-party code + sensitive data</p>
    <p>Challenge: allow untrusted code to compute on data</p>
    <p>E.g., chase wants to use password-strength checker library needs to fetch list of common passwords</p>
    <p>- Safe to fetch list before looking at password!</p>
    <p>Need: confinement (MAC)</p>
    <p>Impose restrictions on how code uses data</p>
    <p>chase.com sketchy.ru sketchy.ru</p>
    <p>p4ssw0rd</p>
    <p>p4ssw0rd p4ssw0rd</p>
  </div>
  <div class="page">
    <p>Third-party code + sensitive data</p>
    <p>Challenge: allow untrusted code to compute on data</p>
    <p>E.g., chase wants to use password-strength checker library needs to fetch list of common passwords</p>
    <p>- Safe to fetch list before looking at password!</p>
    <p>Need: confinement (MAC)</p>
    <p>Impose restrictions on how code uses data</p>
    <p>chase.com sketchy.ru sketchy.ru</p>
    <p>p4ssw0rd</p>
    <p>p4ssw0rd  weak!</p>
    <p>p4ssw0rd</p>
  </div>
  <div class="page">
    <p>Isnt confinement a solved problem? Confinement for Haskell  Hails</p>
    <p>Confinement for Java  Jif!</p>
    <p>Change JavaScript to enforce IFC with JSFlow</p>
  </div>
  <div class="page">
    <p>Dev</p>
  </div>
  <div class="page">
    <p>Design constraints</p>
    <p>Cant expect developers to learn new language</p>
    <p>Cant touch JavaScript runtime</p>
    <p>Highly optimized JITs</p>
    <p>Add 1 instruction on hot path  no upstream!</p>
    <p>Cant radically change the security model  Ingrained notion of principals: origins</p>
    <p>Keep iframes, pages, etc. as security boundaries</p>
  </div>
  <div class="page">
    <p>The good news</p>
    <p>Web turns out to be a good fit for confinement</p>
    <p>By accident</p>
    <p>if you just look at it right</p>
  </div>
  <div class="page">
    <p>The good news</p>
    <p>Browsers already offer execution contexts</p>
    <p>Isolation enforced across context boundaries</p>
    <p>Can enforce MAC at context granularity</p>
    <p>No need to change language runtime! [BFlow]</p>
    <p>Can easily add new DOM-level APIs</p>
    <p>Attach policies to messages [Hails]</p>
  </div>
  <div class="page">
    <p>Key (old) concepts: expressed in practical way?</p>
    <p>Avoid changing existing communication APIs</p>
    <p>Confinement with Origin Web Labels (COWL)</p>
  </div>
  <div class="page">
    <p>Labels</p>
    <p>Every piece of data is protected by a label</p>
    <p>Label specifies, in terms of origin(s), who cares about the data  E.g., data sensitive to Chase: Label(chase.com)</p>
    <p>E.g., data sensitive to both Chase and HSBC: Label(chase.com).and(hsbc.com)</p>
    <p>chase.com</p>
    <p>chase.com</p>
    <p>p4ssw0rd</p>
    <p>hsbc.com</p>
    <p>hsbc.com</p>
  </div>
  <div class="page">
    <p>Label tracking</p>
    <p>COWL tracks labels at context/server granularity</p>
    <p>Pages, iframes, workers, servers</p>
    <p>Messages can be labeled differently from context</p>
    <p>Both servers &amp; JavaScript can label messages</p>
    <p>The right way to share sensitive data!</p>
    <p>chase.com</p>
    <p>chase.com</p>
    <p>chase.com</p>
    <p>public</p>
    <p>p4ssw0rd</p>
    <p>chase.com</p>
  </div>
  <div class="page">
    <p>Labeled Communication</p>
    <p>Browser-server communication must respect labels!</p>
    <p>chase.com sketchy.ru</p>
    <p>p4ssw0rd chase.com</p>
    <p>sketchy.ru chase.com</p>
  </div>
  <div class="page">
    <p>Labeled Communication</p>
    <p>Communication across browser contexts must respect label</p>
    <p>chase.com</p>
    <p>sketchy.ru</p>
    <p>sketchy.ru</p>
    <p>chase.com sketchy.ru</p>
    <p>public</p>
  </div>
  <div class="page">
    <p>Labeled Communication</p>
    <p>Communication across browser contexts must respect label</p>
    <p>chase.com</p>
    <p>sketchy.ru</p>
    <p>sketchy.ru</p>
    <p>chase.com sketchy.ru</p>
    <p>public</p>
  </div>
  <div class="page">
    <p>Labeled Communication</p>
    <p>Communication across browser contexts must respect label</p>
    <p>chase.com</p>
    <p>sketchy.ru</p>
    <p>sketchy.ru</p>
    <p>chase.com sketchy.ru</p>
    <p>public p4ssw0rd</p>
    <p>chase.com</p>
  </div>
  <div class="page">
    <p>chase.com</p>
    <p>Adjusting labels to read data</p>
    <p>Contexts can adopt more restrictive label</p>
    <p>I.e., add an origin to its label</p>
    <p>Can then read data from that origin</p>
    <p>Give up ability to write to contexts without it</p>
    <p>sketchy.ru</p>
    <p>public</p>
    <p>sketchy.ru sketch.rup4ssw0rd</p>
    <p>public</p>
  </div>
  <div class="page">
    <p>chase.com</p>
    <p>Adjusting labels to read data</p>
    <p>Contexts can adopt more restrictive label</p>
    <p>I.e., add an origin to its label</p>
    <p>Can then read data from that origin</p>
    <p>Give up ability to write to contexts without it</p>
    <p>sketchy.ru</p>
    <p>p4ssw0rd</p>
    <p>chase.compublic</p>
    <p>sketchy.ru sketch.rup4ssw0rd</p>
    <p>public</p>
  </div>
  <div class="page">
    <p>chase.com</p>
    <p>Adjusting labels to read data</p>
    <p>Contexts can adopt more restrictive label</p>
    <p>I.e., add an origin to its label</p>
    <p>Can then read data from that origin</p>
    <p>Give up ability to write to contexts without it</p>
    <p>sketchy.ru</p>
    <p>p4ssw0rd</p>
    <p>chase.compublic</p>
    <p>sketchy.ru sketch.rup4ssw0rd</p>
    <p>public</p>
    <p>p4ssw0rd</p>
    <p>chase.com</p>
  </div>
  <div class="page">
    <p>chase.com</p>
    <p>Adjusting labels to read data</p>
    <p>Contexts can adopt more restrictive label</p>
    <p>I.e., add an origin to its label</p>
    <p>Can then read data from that origin</p>
    <p>Give up ability to write to contexts without it</p>
    <p>sketchy.ru</p>
    <p>chase.com</p>
    <p>p4ssw0rd</p>
    <p>chase.compublic</p>
    <p>sketchy.ru sketch.rup4ssw0rd</p>
    <p>public</p>
    <p>p4ssw0rd</p>
  </div>
  <div class="page">
    <p>chase.com</p>
    <p>Adjusting labels to read data</p>
    <p>Contexts can adopt more restrictive label</p>
    <p>I.e., add an origin to its label</p>
    <p>Can then read data from that origin</p>
    <p>Give up ability to write to contexts without it</p>
    <p>sketchy.ru</p>
    <p>chase.com</p>
    <p>p4ssw0rd</p>
    <p>chase.compublic</p>
    <p>sketchy.ru sketch.rup4ssw0rd</p>
    <p>public</p>
    <p>p4ssw0rd</p>
    <p>weak!</p>
  </div>
  <div class="page">
    <p>Mixed-granularity: label messages</p>
    <p>Summary: COWL design Web was made for confinement</p>
  </div>
  <div class="page">
    <p>What can we do with this?</p>
  </div>
  <div class="page">
    <p>Read-only client-side personal finance service</p>
    <p>Banks can make labeled statements available to Mint  Flexibility+Privacy!</p>
    <p>Example: client-side Mint</p>
    <p>mint.cc chase.com hsbc.com</p>
  </div>
  <div class="page">
    <p>Read-only client-side personal finance service</p>
    <p>Banks can make labeled statements available to Mint  Flexibility+Privacy!</p>
    <p>Example: client-side Mint</p>
    <p>mint.cc chase.com hsbc.com</p>
    <p>chase.com</p>
  </div>
  <div class="page">
    <p>Read-only client-side personal finance service</p>
    <p>Banks can make labeled statements available to Mint  Flexibility+Privacy!</p>
    <p>Example: client-side Mint</p>
    <p>mint.cc chase.com hsbc.com</p>
  </div>
  <div class="page">
    <p>Read-only client-side personal finance service</p>
    <p>Banks can make labeled statements available to Mint  Flexibility+Privacy!</p>
    <p>Example: client-side Mint</p>
    <p>mint.cc chase.com hsbc.com</p>
    <p>hsbc.com</p>
  </div>
  <div class="page">
    <p>Read-only client-side personal finance service</p>
    <p>Banks can make labeled statements available to Mint  Flexibility+Privacy!</p>
    <p>Example: client-side Mint</p>
    <p>mint.cc chase.com hsbc.com</p>
  </div>
  <div class="page">
    <p>Read-only client-side personal finance service</p>
    <p>Banks can make labeled statements available to Mint  Flexibility+Privacy!</p>
    <p>Example: client-side Mint</p>
    <p>mint.cc chase.com hsbc.com</p>
    <p>chase.com</p>
  </div>
  <div class="page">
    <p>Read-only client-side personal finance service</p>
    <p>Banks can make labeled statements available to Mint  Flexibility+Privacy!</p>
    <p>Example: client-side Mint</p>
    <p>mint.cc chase.com hsbc.com</p>
    <p>chase.com hsb.com</p>
  </div>
  <div class="page">
    <p>Read-only client-side personal finance service</p>
    <p>Banks can make labeled statements available to Mint  Flexibility+Privacy!</p>
    <p>Example: client-side Mint</p>
    <p>mint.cc chase.com hsbc.com</p>
    <p>chase.com hsb.com</p>
  </div>
  <div class="page">
    <p>We built it</p>
  </div>
  <div class="page">
    <p>Implementations</p>
    <p>DOM-level API for both Firefox and Chromium</p>
    <p>No changes to JavaScript engines</p>
    <p>Maintain existing communication APIs</p>
    <p>For each page COWL only enabled on first use of API</p>
    <p>Gecko and Blink: roughly 4K lines of C++ each</p>
  </div>
  <div class="page">
    <p>Evaluation: Performance</p>
    <p>Overhead of securing a mashup service?</p>
    <p>Overhead of compartmentalization?</p>
    <p>Will adding COWL slow the existing Web?</p>
  </div>
  <div class="page">
    <p>Evaluation: Performance</p>
    <p>Overhead of securing a mashup service?</p>
    <p>Overhead of compartmentalization?</p>
    <p>Will adding COWL slow the existing Web?</p>
    <p>Worst-case (loopback, trivial app code) end-to-end page load: roughly 16% [16ms] !</p>
    <p>For real apps: relative overhead is small!</p>
  </div>
  <div class="page">
    <p>Mutually distrusting services</p>
    <p>docs.google.com</p>
    <p>eff.org</p>
    <p>Libraries with narrow APIs</p>
    <p>chase.com</p>
    <p>sketchy.ru</p>
    <p>Tightly-coupled libraries</p>
    <p>chase.com</p>
    <p>Evaluation: Applicability</p>
    <p>Third-party mashups</p>
    <p>hsbc.com</p>
    <p>mint.cc</p>
    <p>chase.com</p>
  </div>
  <div class="page">
    <p>Deployability</p>
    <p>High degree of backward compatibility</p>
    <p>Does not affect pages that do not use COWL API</p>
    <p>Reuse existing concepts (origins, contexts)</p>
    <p>Expect it to be friendly to developers</p>
    <p>Implementations possible for major browsers</p>
    <p>Changes dont touch JavaScript engine</p>
  </div>
  <div class="page">
    <p>Limitations &amp; future work</p>
    <p>Covert channels</p>
    <p>Malicious code may still covertly leak data</p>
    <p>COWL enforces MAC in addition to existing DAC</p>
    <p>Compartmentalization</p>
    <p>Cannot just label and run existing apps</p>
    <p>Compartmentalizing applications requires thought</p>
  </div>
  <div class="page">
    <p>Related work</p>
    <p>Coarse-grained confinement: BFlow</p>
    <p>Mainly concerned with untrusted code</p>
    <p>COWL also handles the mutually distrusting case</p>
    <p>Fine-grained confinement: JSFlow</p>
    <p>Better fit for tightly-coupled libraries</p>
    <p>New semantics, 100x slowdown</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Today: give up privacy for flexibility  Modern web apps need to compute on sensitive data</p>
    <p>DAC is crucial, but insufficient!</p>
    <p>COWL: confinement for client-side code  Naturally extends the existing web model</p>
    <p>Achieves both flexibility and privacy without slowdown</p>
  </div>
  <div class="page">
    <p>Thanks! http://cowl.ws</p>
  </div>
</Presentation>
