<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Securing RDMA for High-Performance Datacenter Storage Systems</p>
    <p>Anna Kornfeld Simpson, Adriana Szekeres (Paul G. Allen School of Computer Science &amp; Engineering, University of</p>
    <p>Washington), Jacob Nelson, Irene Zhang (Microsoft Research)</p>
  </div>
  <div class="page">
    <p>Remote Direct Memory Access (RDMA) does CPU-bypass over the datacenter network</p>
    <p>with only a few microseconds of latency</p>
    <p>RDMA over Converged Ethernet (RoCEv2) packet. Source: RoCEv2 spec, Infiniband Trade Association, 2014</p>
    <p>Ethernet Head. IP Head. UDP Head. RDMA Head. &amp; Data</p>
    <p>Queue Pair Info. Remote Memory Addr. and r_key Payload</p>
    <p>Abstracted RDMA portion of RoCEv2 packet.</p>
  </div>
  <div class="page">
    <p>Example RDMA System: Pilaf (2013): Put (SEND)</p>
    <p>Clients</p>
    <p>CPU Memory</p>
    <p>NIC</p>
    <p>Server</p>
  </div>
  <div class="page">
    <p>Pilaf (2013): Unlike Put, Get is CPU-bypassing</p>
  </div>
  <div class="page">
    <p>RDMA not designed for datacenter security needs</p>
    <p>Security weaknesses discovered over past 2 decades (see Section 2 of paper for citations):</p>
    <p>Confidentiality: packet in plaintext</p>
    <p>Integrity: no packet integrity check or authentication</p>
    <p>Availability: denial of service</p>
    <p>Side channels: non-random r_keys and more</p>
  </div>
  <div class="page">
    <p>We analyzed recent distributed storage systems built on RDMA and discovered additional systems design challenges even after security fundamentals are fixed.</p>
    <p>Can RDMA-based storage systems provide security at least as good as pre-RDMA datacenter security best practices?</p>
    <p>We analyzed: Pilaf, FaRM, HERD, DrTM, FaSST, Octopus, Hyperloop, DrTM+H</p>
  </div>
  <div class="page">
    <p>Threat Model = Compromised Storage Client</p>
    <p>VLANs/virtualization does not help! Compromised client only needs to see its own network traffic to spoof RDMA.</p>
    <p>CPU Memory</p>
    <p>NIC</p>
    <p>Server</p>
    <p>Bad()</p>
    <p>Clients</p>
  </div>
  <div class="page">
    <p>Challenge 1: no auditability/logging on reads</p>
    <p>Adversary does CPU-bypassing READ</p>
    <p>Clients</p>
    <p>CPU Memory</p>
    <p>NIC</p>
    <p>Server</p>
    <p>What data was exfiltrated?</p>
  </div>
  <div class="page">
    <p>Challenge 2: Design Implications of Storage Logic Location: RPC and Concurrency</p>
    <p>DrTM (2016) Put</p>
  </div>
  <div class="page">
    <p>Challenge 3: Separating different users data</p>
    <p>Single big remote memory registration -&gt; attacker access to all user data</p>
    <p>Vendor suggested solution (protection domains) a poor performance fit for storage systems with multiple storage clients who all want to access same data</p>
  </div>
  <div class="page">
    <p>Ingredients for more secure CPU-bypass systems</p>
    <p>Security Fundamentals</p>
    <p>High throughput AEAD cryptography for datapath (e.g. DTLS)</p>
    <p>Centralized key management</p>
    <p>Source:</p>
    <p>Zookeeper Project</p>
    <p>System Design Challenges</p>
    <p>Logging strategy that does not rely on client</p>
    <p>Alternatives to unreliable RPC</p>
    <p>Finer-grained permissions on remote data access</p>
  </div>
  <div class="page">
    <p>Lots of big open questions for future research!</p>
    <p>Wishlist for features to help support application security when building systems that use CPU-bypassing RDMA?</p>
    <p>Wishlist for securing non-user-facing datacenter tasks?</p>
    <p>How do we get these better features baked in? Changing the RDMA standard?</p>
    <p>Thank you for watching! Questions?</p>
    <p>Email Anna: aksimpso@cs.washington.edu</p>
  </div>
</Presentation>
