<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>KOOBE: Towards Facilitating Exploit Generation of Kernel Out-Of-Bounds</p>
    <p>Write Vulnerabilities Weiteng Chen, Xiaozhen Zou, Guoren Li, Zhiyun Qian</p>
    <p>University of California, Riverside</p>
  </div>
  <div class="page">
    <p>Introduction  According to syzbot, Googles kernel fuzzing platform, there were</p>
    <p>Bugs/Month [1]</p>
    <p>[1] syzbot: update and open problems at Linux Plumbers 2019. https://linuxplumbersconf.org/event/4/contributions/428/attachments/308/515/syzbot__Plumbers_2019.pdf</p>
  </div>
  <div class="page">
    <p>Introduction  According to syzbot, Googles kernel fuzzing platform, there were</p>
    <p>prioritize those exploitable.</p>
  </div>
  <div class="page">
    <p>Motivating Examples</p>
    <p>CVE-2018-5703</p>
  </div>
  <div class="page">
    <p>Motivating Examples</p>
    <p>CVE-2018-5703</p>
  </div>
  <div class="page">
    <p>Motivating Examples</p>
    <p>CVE-2018-5703</p>
    <p>Control the overflown data</p>
  </div>
  <div class="page">
    <p>Motivating Examples</p>
    <p>CVE-2018-5703</p>
    <p>Control the overflown data</p>
  </div>
  <div class="page">
    <p>Challenge 1: Exploration</p>
    <p>The initial PoC does not manifest the complete capability the corresponding vulnerability has.</p>
  </div>
  <div class="page">
    <p>Challenge 2: Modeling Capability</p>
    <p>void example2(i) vul = (char*)kmalloc(sizeof(TYPE)); //omit other OOB points on the path vul[i/8] |= 1&lt;&lt;(i&amp;0x7);//set 1 bit</p>
    <p>CVE-2017-7184</p>
    <p>void example1(size) vul = kmalloc(size); vul[size] = \0;</p>
    <p>CVE-2016-6187</p>
  </div>
  <div class="page">
    <p>Challenge: Modeling Capability</p>
    <p>void example2(i) vul = (char*)kmalloc(sizeof(TYPE)); //omit other OOB points on the path vul[i/8] |= 1&lt;&lt;(i&amp;0x7);//set 1 bit</p>
    <p>CVE-2017-7184</p>
    <p>void example1(size) vul = kmalloc(size); vul[size] = \0;</p>
    <p>CVE-2016-6187</p>
    <p>different OOB vulnerability instances exhibit a wide range of capabilities, in terms of: 1) how far the write can reach 2) how many bytes can be written 3) and what value can be written.</p>
  </div>
  <div class="page">
    <p>Challenge 3: Exploitability Evaluation Vuln Objects size: s = sizeof(Type1) Offset: o = sizeof(Type1) Length: l = 8 bytes Value: v = 0 ~ 0xffffffffffffffff</p>
    <p>Vulnerable Object</p>
    <p>Target Object</p>
    <p>offset</p>
    <p>Overwritten value</p>
    <p>Size</p>
    <p>The length of this overflow</p>
  </div>
  <div class="page">
    <p>Challenge 3: Exploitability Evaluation Vuln Objects size: s = sizeof(Type1) Offset: o = sizeof(Type1) Length: l = 8 bytes Value: v = 0 ~ 0xffffffffffffffff</p>
    <p>Our target object with a function pointer at the beginning</p>
    <p>IP hijacking 12</p>
    <p>Vulnerable Object</p>
    <p>Target Object</p>
    <p>offset</p>
    <p>Overwritten value</p>
    <p>Size</p>
    <p>The length of this overflow</p>
  </div>
  <div class="page">
    <p>Challenge 3: Exploitability Evaluation Vuln Objects size: s = sizeof(Type1) Offset: o = sizeof(Type1) Length: l = 8 bytes Value: v = 0 ~ 0xffffffffffffffff</p>
    <p>Vulnerable Object</p>
    <p>Target Object</p>
    <p>offset</p>
    <p>Overwritten value</p>
    <p>Size</p>
    <p>The length of this overflow</p>
  </div>
  <div class="page">
    <p>Challenge 3: Exploitability Evaluation Vuln Objects size: s = sizeof(Type1) Offset: o = sizeof(Type1) Length: l = 8 bytes Value: v = 0 ~ 0xffffffffffffffff</p>
    <p>Vulnerable Object</p>
    <p>Target Object</p>
    <p>offset</p>
    <p>Overwritten value</p>
    <p>Size</p>
    <p>The length of this overflow</p>
    <p>hundreds of candidates?</p>
  </div>
  <div class="page">
    <p>Scope and Assumption</p>
    <p>Only generate exploit primitives to achieve IP hijacking  Modern defenses are out of scope  Kernel Address Space Layout Randomization (KASLR)  Supervisor Mode Execution Prevention (SMEP)  Supervisor Mode Access Prevention (SMAP)</p>
    <p>Only encode some well-known heap Feng Shui strategies</p>
  </div>
  <div class="page">
    <p>Overview</p>
    <p>Vulnerability Analysis  Capability Summarization  Exploitability Evaluation  Capability Exploration</p>
    <p>Vulnerability Analysis</p>
    <p>Capability Summarization</p>
    <p>Exploitability Evaluation</p>
    <p>Target Objects</p>
    <p>POC</p>
    <p>Capability Exploration</p>
    <p>No Solution</p>
    <p>New PoC</p>
    <p>Exp Database</p>
    <p>Capability Extraction</p>
    <p>Capability Composition</p>
  </div>
  <div class="page">
    <p>Vulnerability AnalysisPOC</p>
    <p>Capability Extraction Vulnerability</p>
    <p>Points</p>
    <p>Vulnerable Object</p>
    <p>Overview</p>
    <p>Vulnerability Analysis  Capability Summarization  Exploitability Evaluation  Capability Exploration</p>
  </div>
  <div class="page">
    <p>Overview</p>
    <p>Vulnerability Analysis  Capability Summarization  Exploitability Evaluation  Capability Exploration</p>
    <p>Vulnerability Analysis</p>
    <p>Capability SummarizationPOC</p>
    <p>Database</p>
    <p>Capability Extraction</p>
    <p>Capability 1</p>
    <p>Capability N</p>
  </div>
  <div class="page">
    <p>Overview</p>
    <p>Vulnerability Analysis  Capability Summarization  Exploitability Evaluation  Capability Exploration</p>
    <p>Vulnerability Analysis</p>
    <p>Capability Summarization</p>
    <p>Exploitability Evaluation</p>
    <p>Target Objects</p>
    <p>POC Exp Database</p>
    <p>Capability Extraction</p>
    <p>Capability Composition</p>
  </div>
  <div class="page">
    <p>Overview</p>
    <p>Vulnerability Analysis  Capability Summarization  Exploitability Evaluation  Capability Exploration</p>
    <p>Vulnerability Analysis</p>
    <p>Capability Summarization</p>
    <p>Exploitability Evaluation</p>
    <p>Target Objects</p>
    <p>POC</p>
    <p>Capability Exploration</p>
    <p>No Solution</p>
    <p>New PoC</p>
    <p>Exp Database</p>
    <p>Capability Extraction</p>
    <p>Capability Composition</p>
  </div>
  <div class="page">
    <p>Capability Summarization  For each OOB write, we use a 3-tuple (offet, length, overwritten value)</p>
    <p>to present it.  offset, length and overwritten value are all symbolic expression.</p>
    <p>Vulnerable Object</p>
    <p>Target Object</p>
    <p>offset = sizeof(Type1)</p>
    <p>Overwritten value = gsock.option</p>
    <p>length = 8 bytes</p>
  </div>
  <div class="page">
    <p>Capability Summarization  For each OOB write, we use a 3-tuple (offet, length, overwritten value)</p>
    <p>to present it.  offset, length and overwritten value are all symbolic expression.</p>
    <p>For a single path, we consider a set of OOB write summarization.</p>
    <p>Vulnerable Object</p>
    <p>Target Object</p>
    <p>offset = sizeof(Type1)</p>
    <p>Overwritten value = gsock.option</p>
    <p>length = 8 bytes</p>
  </div>
  <div class="page">
    <p>Capability Summarization  Path constraints and the size of the vulnerable object that are</p>
    <p>coupled with OOB writes should be included.</p>
  </div>
  <div class="page">
    <p>Capability Exploration: Capability-Guided Fuzzing</p>
    <p>Existing coverage-guided fuzzers are insensitive to the capability.  We use dynamic</p>
    <p>instrumentation to hook all the vulnerability points to collect information (e.g., offset, length, value) as the feedback.</p>
    <p>Fuzzers Architecture 24</p>
    <p>Virtual Machines</p>
    <p>Kernel</p>
    <p>Coverage infoCapability info</p>
    <p>Dynamic Instrumen</p>
    <p>tation: Check</p>
    <p>every OOB access</p>
    <p>Capability Summarization</p>
    <p>Fuzzer</p>
    <p>New Coverage</p>
    <p>Seed Queues New</p>
    <p>Length</p>
    <p>New Offset</p>
    <p>New Value</p>
    <p>testcases</p>
    <p>Capability info</p>
  </div>
  <div class="page">
    <p>Exploitability Evaluation: Target Objects 1. Function Pointer 2. Data Pointer 3. Non-Pointer:</p>
    <p>{ Type3: {</p>
    <p>type: function pointer, offset: 0, // the offset to the function pointer size: 192, // size of this object payload: 0xdeadbeef, allocate: // How to allocate this object</p>
    <p>sys_create_tgt(), deref: // How to trigger the dereference of the</p>
    <p>function pointer sys_deref();,</p>
    <p>} }</p>
    <p>struct Type3 { int (*ptr)(); ; };</p>
  </div>
  <div class="page">
    <p>Exploitability Evaluation</p>
    <p>struct Type3 { int (*ptr)(); ; };</p>
    <p>Memory Model Vulnerable Object Target Object</p>
    <p>offset = sizeof(Type1)</p>
    <p>Overwritten value = gsock.option</p>
    <p>length = 8 bytes</p>
    <p>object size = sizeof(Type1)</p>
    <p>Type4</p>
    <p>Type3</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>type3.ptr == diverted address??</p>
  </div>
  <div class="page">
    <p>Exploitability Evaluation</p>
    <p>Memory Model Vulnerable Object Target Object</p>
    <p>offset = sizeof(Type1)</p>
    <p>Overwritten value = gsock.option</p>
    <p>length = 8 bytes</p>
    <p>object size = sizeof(Type1)</p>
    <p>Type4</p>
    <p>Type3</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>struct Type4 { uint64_t state; int (*ptr)(); ; };</p>
    <p>type4.ptr == diverted address??</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Dataset and Setup  7 from CVE database  10 from syzbot (a fuzzing platform based on Syzkaller)</p>
  </div>
  <div class="page">
    <p>Evaluation  Dataset and Setup  7 from CVE database  10 from syzbot (a fuzzing platform based on Syzkaller)</p>
    <p>Results CVE-ID Race Condition #public EXP #generated EXP* CVE-2016-6187 No 1 2</p>
    <p>CVE-2016-6516 Yes 0 0</p>
    <p>CVE-2017-7184 No 1 3</p>
    <p>CVE-2017-7308 No 1 2</p>
    <p>CVE-2017-7533 Yes 0 1</p>
    <p>CVE-2017-1000112 No 1 2</p>
    <p>CVE-2018-5703 No 0 1</p>
    <p>Overall 4 11</p>
    <p>*: We count the number of distinct exploits based on the target object we exploit. 29</p>
  </div>
  <div class="page">
    <p>Evaluation Commit Hash #public EXP #generated EXP</p>
    <p>bbeb6e4323dad9b5e0ee9f60c223dd532e2403b1 0 2</p>
    <p>eb73190f4fbeedf762394e92d6a4ec9ace684c88 0 1</p>
    <p>bb29648102335586e9a66289a1d98a0cb392b6e5 0 0</p>
    <p>Overall 1 8</p>
  </div>
  <div class="page">
    <p>Time Cost CVE or Commit Tracing Solving Fuzzing Time to Patch</p>
    <p>CVE-2016-6187 38s 1s NA NA</p>
    <p>CVE-2017-7184 27s 45s 23m 14 days (estimated)</p>
    <p>CVE-2017-7308 48s 4s NA NA</p>
    <p>CVE-2017-7533 160s 164s NA NA</p>
    <p>CVE-2017-1000112 36s 132s NA NA</p>
    <p>CVE-2018-5703 85s 41s 194m 114 days</p>
    <p>bbeb6e4323dad9b5e0ee 48s 26s 23m 11 days</p>
    <p>eb73190f4fbeedf76239 54s 104s NA 38 days</p>
    <p>Note: We only apply fuzzing when necessary, i.e., our system is unable to find a suitable target object given the capability in the original PoC.</p>
  </div>
  <div class="page">
    <p>Discussion</p>
    <p>The principle of separating capability summarization from exploitability evaluation can be applied to other types of kernel vulnerabilities due to:  Large search space: the inherently multi-interaction nature of kernel.  Vulnerabilities sometimes can be converted from one type to another, but all</p>
    <p>of them require to corrupt the kernel data.</p>
  </div>
  <div class="page">
    <p>THANK YOU ANY QUESTION?</p>
    <p>Contact: wchen130@ucr.edu Source Code: https://github.com/seclab-ucr/KOOBE</p>
  </div>
</Presentation>
