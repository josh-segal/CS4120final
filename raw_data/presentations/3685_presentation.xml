<?xml version="1.0" ?>
<Presentation>
  <div class="page"/>
  <div class="page">
    <p>Several interconnected devices  Control units  Sensors  Actuators  Network devices</p>
    <p>Examples  Industrial facilities  Home automation  Vehicles</p>
    <p>Heterogeneous: Typically more sophisticated devices controlling simple low-end embedded systems</p>
  </div>
  <div class="page">
    <p>Examples  Smoke detector in a household  Engines temperature sensor in a car</p>
    <p>Controller (Higher-end device) Sensor</p>
    <p>(Low-end device)</p>
    <p>Examples  Smoke detector in a household  Engines temperature sensor in a car</p>
    <p>Controllers rely on sensed values to make decisions (e.g., send help)</p>
  </div>
  <div class="page">
    <p>Examples  Smoke detector in a household  Engines temperature sensor in a car</p>
    <p>Controller (Higher-end device) Sensor</p>
    <p>(Low-end device)</p>
    <p>All good.</p>
    <p>Examples  Smoke detector in a household  Engines temperature sensor in a car</p>
    <p>Controllers rely on sensed values to make decisions (e.g., send help)</p>
  </div>
  <div class="page">
    <p>Examples  Smoke detector in a household  Engines temperature sensor in a car</p>
    <p>Controller (Higher-end device) Sensor</p>
    <p>(Low-end device)</p>
    <p>Examples  Smoke detector in a household  Engines temperature sensor in a car</p>
    <p>Controllers rely on sensed values to make decisions (e.g., send help)</p>
  </div>
  <div class="page">
    <p>Examples  Smoke detector in a household  Engines temperature sensor in a car</p>
    <p>Controller (Higher-end device) Sensor</p>
    <p>(Low-end device)</p>
    <p>Fire!!!</p>
    <p>Examples  Smoke detector in a household  Engines temperature sensor in a car</p>
    <p>Controllers rely on sensed values to make decisions (e.g., send help)</p>
  </div>
  <div class="page">
    <p>Controller (Higher-end device) Sensor</p>
    <p>(Low-end device) Infected Sensor</p>
    <p>Examples  Smoke detector in a household  Engines temperature sensor in a car</p>
    <p>Problem: compromised software on the low-end sensor device might spoof sensed values</p>
  </div>
  <div class="page">
    <p>Examples  Smoke detector in a household  Engines temperature sensor in a car</p>
    <p>Problem: compromised software on the low-end sensor device might spoof sensed values</p>
    <p>Controller (Higher-end device) Sensor</p>
    <p>(Low-end device) Infected Sensor</p>
  </div>
  <div class="page">
    <p>Examples  Smoke detector in a household  Engines temperature sensor in a car</p>
    <p>Problem: compromised software on the low-end sensor device might spoof sensed values</p>
    <p>Controller (Higher-end device) Sensor</p>
    <p>(Low-end device) Infected Sensor</p>
    <p>All good.</p>
  </div>
  <div class="page">
    <p>Designed for: Low-Cost, Low-Energy, Small-Size.  Memory: Program (~32kB) and Data (~2-16 kB)  Single core CPU (~8-16MHz; 8- or 16-bit)  Simple Communication (I/O) Interfaces (a few kbps)  Examples: TI MSP-430, AVR ATMega32 (Arduino)</p>
  </div>
  <div class="page">
    <p>In the face of potential software compromise of low-end devices:</p>
  </div>
  <div class="page">
    <p>In the face of potential software compromise of low-end devices:  How to trust results/data produced by a simple remote embedded device?</p>
  </div>
  <div class="page">
    <p>In the face of potential software compromise of low-end devices:  How to trust results/data produced by a simple remote embedded device?  Can we bind produced results/data to the execution of expected software?</p>
  </div>
  <div class="page">
    <p>In the face of potential software compromise of low-end devices:  How to trust results/data produced by a simple remote embedded device?  Can we bind produced results/data to the execution of expected software?  Can we do this cost-effectively? Even if all software on a device can be</p>
    <p>modified and/or compromised at any point in time?</p>
  </div>
  <div class="page">
    <p>In the face of potential software compromise of low-end devices:  How to trust results/data produced by a simple remote embedded device?  Can we bind produced results/data to the execution of expected software?  Can we do this cost-effectively? Even if all software on a device can be</p>
    <p>modified and/or compromised at any point in time?</p>
    <p>Controller (Higher-end device) Sensor</p>
    <p>(Low-end device)</p>
    <p>Fire!!!</p>
  </div>
  <div class="page">
    <p>In the face of potential software compromise of low-end devices:  How to trust results/data produced by a simple remote embedded device?  Can we bind produced results/data to the execution of expected software?  Can we do this cost-effectively? Even if all software on a device can be</p>
    <p>modified and/or compromised at any point in time?</p>
    <p>Controller (Higher-end device) Sensor</p>
    <p>(Low-end device)</p>
    <p>Fire!!!</p>
    <p>Or: Can we build sensors that cannot lie? (Even when infected) 16</p>
  </div>
  <div class="page">
    <p>Software on the Microcontroller triggers Sensing Hardware through General Purpose Input-Output (GPIO), according to some communication</p>
    <p>protocol, and waits for the sensed value as a response.</p>
  </div>
  <div class="page">
    <p>Software on the Microcontroller triggers Sensing Hardware through General Purpose Input-Output (GPIO), according to some communication</p>
    <p>protocol, and waits for the sensed value as a response.</p>
    <p>Sensing Hardware:  Digital or Analog circuitry  E.g.: Resistors with variable resistance</p>
    <p>according to temperature, pressure, light, etc.</p>
    <p>GPIO:  Memory addresses connected to</p>
    <p>physical ports in the Microcontroller.</p>
  </div>
  <div class="page">
    <p>Software on the Microcontroller triggers Sensing Hardware through General Purpose Input-Output (GPIO), according to some communication</p>
    <p>protocol, and waits for the sensed value as a response.</p>
    <p>Sensing Hardware:  Digital or Analog circuitry  E.g.: Resistors with variable resistance</p>
    <p>according to temperature, pressure, light, etc.</p>
    <p>GPIO:  Memory addresses connected to</p>
    <p>physical ports in the Microcontroller. Trustworthy Sensing: Prove that a value was indeed obtained from the expected GPIO interface, via execution of the expected software</p>
  </div>
  <div class="page">
    <p>Typically involves some form of Remote Attestation (RA):  A general approach of detecting malware presence on invalid software state</p>
    <p>on devices</p>
    <p>Two-party interaction between:  Verifier: trusted entity</p>
    <p>(e.g., a higher-end controller device in a CPS)  Prover: potentially infected and untrusted remote IoT device</p>
    <p>(e.g., a low-end sensor/actuator)</p>
    <p>Goal: measure current internal state (the contents in memory) of prover</p>
  </div>
  <div class="page">
    <p>Typically involves some form of Remote Attestation (RA):  A general approach of detecting malware presence on invalid software state</p>
    <p>on devices</p>
    <p>Two-party interaction between:  Verifier: trusted entity</p>
    <p>(e.g., a higher-end controller device in a CPS)  Prover: potentially infected and untrusted remote IoT device</p>
    <p>(e.g., a low-end sensor/actuator)</p>
    <p>Goal: measure current internal state (the contents in memory) of prover</p>
    <p>Examples of RA for Low-End Devices: SMART[NDSS12], SANCUS[SEC12], Trustlite[EuroSys14], Tytan[DAC15], Hydra[WiSec17], VRASED[Sec19],</p>
  </div>
  <div class="page">
    <p>(1) Challenge</p>
    <p>(3) Response</p>
    <p>(2) Response = authenticated challenge-based measurement (via some cryptographic integrity-ensuring function)</p>
    <p>(4) Verify response, decide outcome</p>
    <p>Verifier Prover</p>
    <p>Often implemented as a Message Authentication Code (MAC) over provers memory</p>
  </div>
  <div class="page">
    <p>(1) Challenge</p>
    <p>(3) Response</p>
    <p>(2) Response = authenticated challenge-based measurement (via some cryptographic integrity-ensuring function)</p>
    <p>(4) Verify response, decide outcome</p>
    <p>Verifier Prover</p>
    <p>Often implemented as a Message Authentication Code (MAC) over provers memory</p>
    <p>If secure should provide an unforgeable proof that the Provers memory corresponds to a given value at the time of RA computation</p>
  </div>
  <div class="page">
    <p>However RA by itself is not sufficient  Does not prove execution of attested code  Does not bind the outputs to the execution of the code</p>
  </div>
  <div class="page">
    <p>However RA by itself is not sufficient  Does not prove execution of attested code  Does not bind the outputs to the execution of the code</p>
    <p>For example, attempts using a regular RA architecture:  Attest-then-Execute:</p>
    <p>Vulnerable to: Attest  Compromise  Execute</p>
  </div>
  <div class="page">
    <p>However RA by itself is not sufficient  Does not prove execution of attested code  Does not bind the outputs to the execution of the code</p>
    <p>For example, attempts using a regular RA architecture:  Attest-then-Execute:</p>
    <p>Vulnerable to: Attest  Compromise  Execute  Execute-then-Attest:</p>
    <p>Vulnerable to: Compromise  Execute  Heal Attest</p>
  </div>
  <div class="page">
    <p>However RA by itself is not sufficient  Does not prove execution of attested code  Does not bind the outputs to the execution of the code</p>
    <p>For example, attempts using a regular RA architecture:  Attest-then-Execute:</p>
    <p>Vulnerable to: Attest  Compromise  Execute  Execute-then-Attest:</p>
    <p>Vulnerable to: Compromise  Execute  Heal Attest  Attest-then-Execute-then-Attest:</p>
    <p>Vulnerable to: Attest  Compromise  Execute  Heal Attest</p>
  </div>
  <div class="page">
    <p>Takeaway: Even ideal secure RA functionality, by itself, is not sufficient! We need a proof of execution of the expected code tied to any produced output.</p>
    <p>However RA by itself is not sufficient  Does not prove execution of attested code  Does not bind the outputs to the execution of the code</p>
    <p>For example, attempts using a regular RA architecture:  Attest-then-Execute:</p>
    <p>Vulnerable to: Attest  Compromise  Execute  Execute-then-Attest:</p>
    <p>Vulnerable to: Compromise  Execute  Heal Attest  Attest-then-Execute-then-Attest:</p>
    <p>Vulnerable to: Attest  Compromise  Execute  Heal Attest</p>
    <p>Clever Malware hides itself! Not possible to prove that the proper code executed!</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Cryptographic binding between:  Executed code  Outputs produced by this execution  Temporally consistent remote attestation of the</p>
    <p>executed code and respective outputs</p>
    <p>Extension to the RA capability</p>
  </div>
  <div class="page">
    <p>Cryptographic binding between:  Executed code  Outputs produced by this execution  Temporally consistent remote attestation of the</p>
    <p>executed code and respective outputs</p>
    <p>Extension to the RA capability  Reminder! We must be mindful of:</p>
    <p>Low-cost, low-energy, small-size  Possibility of full software compromise</p>
    <p>Implies some hardware support!</p>
    <p>Sensor (Low-end device)</p>
  </div>
  <div class="page">
    <p>APEX: (Formally Verified) Architecture for Proofs of Execution</p>
  </div>
  <div class="page">
    <p>APEX: (Formally Verified) Architecture for Proofs of Execution  Idea:</p>
    <p>With cost in mind The simplest thing we can do is to set one bit  This bit is referred to as EXEC flag</p>
  </div>
  <div class="page">
    <p>APEX: (Formally Verified) Architecture for Proofs of Execution  Idea:</p>
    <p>With cost in mind The simplest thing we can do is to set one bit  This bit is referred to as EXEC flag</p>
    <p>Minimal formally verified hardware controls EXEC value.  EXEC = 1 Attested software executed properly.  EXEC = 0 It did not execute, or execution was tampered with</p>
  </div>
  <div class="page">
    <p>APEX: (Formally Verified) Architecture for Proofs of Execution  Idea:</p>
    <p>With cost in mind The simplest thing we can do is to set one bit  This bit is referred to as EXEC flag</p>
    <p>Minimal formally verified hardware controls EXEC value.  EXEC = 1 Attested software executed properly.  EXEC = 0 It did not execute, or execution was tampered with  EXEC flag is stored in a fixed physical memory address that is covered by</p>
    <p>the RA measurement.</p>
  </div>
  <div class="page">
    <p>APEX: (Formally Verified) Architecture for Proofs of Execution  Idea:</p>
    <p>With cost in mind The simplest thing we can do is to set one bit  This bit is referred to as EXEC flag</p>
    <p>Minimal formally verified hardware controls EXEC value.  EXEC = 1 Attested software executed properly.  EXEC = 0 It did not execute, or execution was tampered with  EXEC flag is stored in a fixed physical memory address that is covered by</p>
    <p>the RA measurement.</p>
    <p>Assuming a secure underlying RA architecture, unforgeability guarantees that the attestation result must reflect the actual</p>
    <p>value of EXEC during the RA computation 36</p>
  </div>
  <div class="page">
    <p>The problem is reduced to properly controlling EXEC value!</p>
  </div>
  <div class="page">
    <p>The problem is reduced to properly controlling EXEC value!  What does proper execution mean?</p>
  </div>
  <div class="page">
    <p>The problem is reduced to properly controlling EXEC value!  What does proper execution mean?</p>
    <p>In this work:</p>
  </div>
  <div class="page">
    <p>Attested Memory</p>
  </div>
  <div class="page">
    <p>Attested Memory</p>
    <p>METADATA:  Set of physical addresses reserved to store</p>
    <p>configuration parameters about the execution METADATA</p>
  </div>
  <div class="page">
    <p>Attested Memory</p>
    <p>METADATA:  Set of physical addresses reserved to store</p>
    <p>configuration parameters about the execution</p>
    <p>METADATA includes:  EXEC flag</p>
    <p>METADATA</p>
  </div>
  <div class="page">
    <p>Attested Memory</p>
    <p>METADATA:  Set of physical addresses reserved to store</p>
    <p>configuration parameters about the execution</p>
    <p>METADATA includes:  EXEC flag  Location for storing the received challenge</p>
    <p>METADATA</p>
  </div>
  <div class="page">
    <p>Attested Memory</p>
    <p>METADATA:  Set of physical addresses reserved to store</p>
    <p>configuration parameters about the execution</p>
    <p>METADATA includes:  EXEC flag  Location for storing the received challenge  Pointers to location reserved for the execution</p>
    <p>output  Output Range (OR)</p>
    <p>METADATA</p>
  </div>
  <div class="page">
    <p>Attested Memory</p>
    <p>METADATA:  Set of physical addresses reserved to store</p>
    <p>configuration parameters about the execution</p>
    <p>METADATA includes:  EXEC flag  Location for storing the received challenge  Pointers to location reserved for the execution</p>
    <p>output  Output Range (OR)</p>
    <p>Pointers to the location of the executable  Executable Range (ER)</p>
    <p>METADATA</p>
  </div>
  <div class="page">
    <p>Attested Memory</p>
    <p>METADATA:  Set of physical addresses reserved to store</p>
    <p>configuration parameters about the execution</p>
    <p>METADATA includes:  EXEC flag  Location for storing the received challenge  Pointers to location reserved for the execution</p>
    <p>output  Output Range (OR)</p>
    <p>Pointers to the location of the executable  Executable Range (ER)</p>
    <p>APEX hardware module controls EXEC value based on the parameters in METADATA and several CPU signals.</p>
    <p>APEX</p>
    <p>CPU CORE</p>
  </div>
  <div class="page">
    <p>Attested Memory</p>
    <p>Before execution:  Execution configuration must be written to</p>
    <p>METADATA before execution  Including the challenge!</p>
  </div>
  <div class="page">
    <p>Attested Memory</p>
    <p>Before execution:  Execution configuration must be written to</p>
    <p>METADATA before execution  Including the challenge!</p>
    <p>METADATA cannot be changed once execution starts!  Any change to METADATA at any point causes EXEC=0  Necessary for PoX security  More on this later</p>
  </div>
  <div class="page">
    <p>Attested Memory</p>
    <p>Before execution:  Execution configuration must be written to</p>
    <p>METADATA before execution  Including the challenge!</p>
    <p>METADATA cannot be changed once execution starts!  Any change to METADATA at any point causes EXEC=0  Necessary for PoX security  More on this later</p>
    <p>Configuration parameters can be written by untrusted software running on the Prover (i.e., the low end device), however:  Must specify ER to be the region actually</p>
    <p>containing the proper executable  Must specify OR sufficiently large to fit the</p>
    <p>expected output  Otherwise PoX will fail</p>
    <p>More on this later... 49</p>
  </div>
  <div class="page">
    <p>Attested Memory</p>
    <p>During execution:  Initially EXEC=0 (default value, e.g., after boot or a reset)</p>
    <p>EXEC=0</p>
  </div>
  <div class="page">
    <p>Attested Memory</p>
    <p>During execution:  Initially EXEC=0 (default value, e.g., after boot or a reset)  The only way to switch from EXEC=0 to EXEC=1 is to start</p>
    <p>execution from scratch  Program counter (PC) must point to the first instruction of ER (as</p>
    <p>determined in METADATA)</p>
    <p>PC0</p>
    <p>EXEC=1</p>
  </div>
  <div class="page">
    <p>Attested Memory</p>
    <p>During execution:  Initially EXEC=0 (default value, e.g., after boot or a reset)  The only way to switch from EXEC=0 to EXEC=1 is to start</p>
    <p>execution from scratch  Program counter (PC) must point to the first instruction of ER (as</p>
    <p>determined in METADATA)</p>
    <p>If any of the following happens before PC reaches the last instruction of ER, APEX sets EXEC=0:</p>
    <p>Interruption: irq, reset, PC  ER, etc - Gives Malware opportunity to skip instructions, change</p>
    <p>intermediate execution data, outputs etc.  DMA activity: Could tamper with intermediate execution results</p>
    <p>in data memory and OR, or change instructions in ER.</p>
    <p>PC0</p>
    <p>irq, DMA, reset</p>
    <p>EXEC=1</p>
  </div>
  <div class="page">
    <p>Attested Memory</p>
    <p>During execution:  Initially EXEC=0 (default value, e.g., after boot or a reset)  The only way to switch from EXEC=0 to EXEC=1 is to start</p>
    <p>execution from scratch  Program counter (PC) must point to the first instruction of ER (as</p>
    <p>determined in METADATA)</p>
    <p>If any of the following happens before PC reaches the last instruction of ER, APEX sets EXEC=0:</p>
    <p>Interruption: irq, reset, PC  ER, etc - Gives Malware opportunity to skip instructions, change</p>
    <p>intermediate execution data, outputs etc.  DMA activity: Could tamper with intermediate execution results</p>
    <p>in data memory and OR, or change instructions in ER.</p>
    <p>PC0</p>
    <p>irq, DMA, reset</p>
    <p>EXEC=0</p>
  </div>
  <div class="page">
    <p>Attested Memory</p>
    <p>During execution:  Initially EXEC=0 (default value, e.g., after boot or a reset)  The only way to switch from EXEC=0 to EXEC=1 is to start</p>
    <p>execution from scratch  Program counter (PC) must point to the first instruction of ER (as</p>
    <p>determined in METADATA)</p>
    <p>If any of the following happens before PC reaches the last instruction of ER, APEX sets EXEC=0:</p>
    <p>Interruption: irq, reset, PC  ER, etc - Gives Malware opportunity to skip instructions, change</p>
    <p>intermediate execution data, outputs etc.  DMA activity: Could tamper with intermediate execution results</p>
    <p>in data memory and OR, or change instructions in ER.</p>
    <p>Key Observations: 1- The only way to leave ERs execution with EXEC=1 is by running ER in its entirety (until its last instruction)! 2- In order to bind the execution to the produced output, ER must write outputs to OR (as configured in METADATA)!</p>
    <p>PC0</p>
    <p>PCe</p>
    <p>EXEC=1</p>
  </div>
  <div class="page">
    <p>Attested Memory  After execution:</p>
    <p>Honest Prover: Calls attestation. Memory is set to produce a valid PoX for execution of ER with output OR</p>
    <p>Recall: RA covers METADATA, ER and OR.</p>
    <p>EXEC=1</p>
  </div>
  <div class="page">
    <p>Attested Memory  After execution:</p>
    <p>Honest Prover: Calls attestation. Memory is set to produce a valid PoX for execution of ER with output OR</p>
    <p>Recall: RA covers METADATA, ER and OR.  Malicious/Infected Prover: Before calling RA it might try to:</p>
    <p>Modify ER:  Spoof the code that produced a given result</p>
    <p>Maybe the execution was done with some other invalid/malicious code to begin with!</p>
    <p>EXEC=1</p>
    <p>MOD</p>
  </div>
  <div class="page">
    <p>Attested Memory  After execution:</p>
    <p>Honest Prover: Calls attestation. Memory is set to produce a valid PoX for execution of ER with output OR</p>
    <p>Recall: RA covers METADATA, ER and OR.  Malicious/Infected Prover: Before calling RA it might try to:</p>
    <p>Modify ER:  Spoof the code that produced a given result</p>
    <p>Maybe the execution was done with some other invalid/malicious code to begin with!</p>
    <p>Modify OR:  Spoof the execution result</p>
    <p>EXEC=1</p>
    <p>MOD</p>
    <p>MOD</p>
  </div>
  <div class="page">
    <p>Attested Memory  After execution:</p>
    <p>Honest Prover: Calls attestation. Memory is set to produce a valid PoX for execution of ER with output OR</p>
    <p>Recall: RA covers METADATA, ER and OR.  Malicious/Infected Prover: Before calling RA it might try to:</p>
    <p>Modify ER:  Spoof the code that produced a given result</p>
    <p>Maybe the execution was done with some other invalid/malicious code to begin with!</p>
    <p>Modify OR:  Spoof the execution result</p>
    <p>Modify METADATA to spoof challenge:  Use this execution proof with future challenges (execution</p>
    <p>replay attack!)</p>
    <p>EXEC=1</p>
    <p>MOD</p>
    <p>MOD</p>
    <p>MOD</p>
  </div>
  <div class="page">
    <p>Attested Memory  After execution:</p>
    <p>Honest Prover: Calls attestation. Memory is set to produce a valid PoX for execution of ER with output OR</p>
    <p>Recall: RA covers METADATA, ER and OR.  Malicious/Infected Prover: Before calling RA it might try to:</p>
    <p>Modify ER:  Spoof the code that produced a given result</p>
    <p>Maybe the execution was done with some other invalid/malicious code to begin with!</p>
    <p>Modify OR:  Spoof the execution result</p>
    <p>Modify METADATA to spoof challenge:  Use this execution proof with future challenges (execution</p>
    <p>replay attack!)  Modify METADATA to change ER/OR addresses:</p>
    <p>Make it look like a valid proof of execution of some other ER, somewhere else in memory.</p>
    <p>Make it look like this execution produced some other result, stored somewhere else in memory.</p>
    <p>EXEC=1</p>
    <p>MOD</p>
    <p>MOD</p>
    <p>MOD</p>
    <p>MOD</p>
    <p>MOD</p>
  </div>
  <div class="page">
    <p>Attested Memory  After execution:</p>
    <p>Honest Prover: Calls attestation. Memory is set to produce a valid PoX for execution of ER with output OR</p>
    <p>Recall: RA covers METADATA, ER and OR.  Malicious/Infected Prover: Before calling RA it might try to:</p>
    <p>Modify ER:  Spoof the code that produced a given result</p>
    <p>Maybe the execution was done with some other invalid/malicious code to begin with!</p>
    <p>Modify OR:  Spoof the execution result</p>
    <p>Modify METADATA to spoof challenge:  Use this execution proof with future challenges (execution</p>
    <p>replay attack!)  Modify METADATA to change ER/OR addresses:</p>
    <p>Make it look like a valid proof of execution of some other ER, somewhere else in memory.</p>
    <p>Make it look like this execution produced some other result, stored somewhere else in memory.</p>
    <p>APEX hardware module monitors for such actions setting EXEC=0 if any of</p>
    <p>them happen!</p>
    <p>EXEC=1</p>
    <p>MOD</p>
    <p>MOD</p>
    <p>MOD</p>
    <p>MOD</p>
    <p>MOD</p>
    <p>EXEC=0 APEX</p>
  </div>
  <div class="page"/>
  <div class="page"/>
  <div class="page"/>
  <div class="page"/>
  <div class="page"/>
  <div class="page">
    <p>Formal Verification: Why bother?  Formal specification:</p>
    <p>Provides unambiguous logical expressions to state APEX sub-properties avoiding misinterpretation of requirements.</p>
    <p>Did we get it right?  Once properties are formally specified, the hardware design can be proved</p>
    <p>to adhere to such properties (computer aided verification via model checking)</p>
    <p>Are these properties enough?  Many properties... we could be missing something!  Can use theorem proving to show that the conjunction of all properties,</p>
    <p>when applied to the low-end device machine model implies an end-to-end notion of secure PoX.</p>
  </div>
  <div class="page">
    <p>Formalized using Linear</p>
    <p>Temporal Logic(LTL)</p>
    <p>Hardware compliance</p>
    <p>verified using NuSMV</p>
    <p>Check APEX paper for details</p>
  </div>
  <div class="page">
    <p>The conjunction of APEX properties are shown to imply the following LTL Statement:</p>
    <p>The notion of Secure PoX is formalized as a Security Game</p>
    <p>APEX is hardware is composed into VRASED formally verified RA architecture [Sec19]</p>
    <p>The composition is shown to imply Secure PoX, as long as</p>
    <p>See APEX paper for formal definitions and proof details. 68</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>APEX was instantiated along with VRASED on OpenMSP430 Verilog Design</p>
    <p>Synthesized on Basys3 FPGA</p>
    <p>Used to implement a fire sensor that cannot lie.</p>
    <p>Publicly Available at:</p>
    <p>https://github.com/sprout-uci/APEX 70</p>
  </div>
  <div class="page">
    <p>On top of VRASED: - 12% more Look-Up Tables - 2% additional registers</p>
    <p>Relatively inexpensive in comparison with related security services for run-time attestation, such as Control Flow Attestation (CFA).</p>
  </div>
  <div class="page"/>
</Presentation>
