<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Amit Vasudevan (CyLab-CMU), Sagar Chaki (SEI-CMU), Petros Maniatis (Google Inc.), Limin Jia, Anupam Datta (ECE/CSD-CMU)</p>
    <p>ber park</p>
    <p>http://uberspark.org</p>
  </div>
  <div class="page">
    <p>/ 24Vasudevan et. al. ber park</p>
    <p>Problem  raise significant security concerns</p>
    <p>Number of bugs goes up with code size</p>
    <p>Number of bugs goes up with frequency of updates</p>
    <p>Number of bugs goes up with logical complexity</p>
    <p>Number of bugs goes up with control-flow complexity</p>
    <p>Both complex VMMs and micro-hypervisors are prone to bugs  E.g., VMware [VMSA-2009-006,Cloudburst], Xen [CVE-2008-3687], SecVisor [Franklin et. Al,2010]</p>
    <p>Verified hypervisor is accompanied by proof of desirable (security) properties</p>
    <p>Extensible Hypervisors</p>
    <p>Motivating. Ex.  Arch.  Impl.  Verif. Results  Perf.  Concl. Introduction</p>
  </div>
  <div class="page">
    <p>/ 24Vasudevan et. al. ber park</p>
    <p>Why arent we already doing this?</p>
    <p>Cost of verification grows with  The size of the code-base</p>
    <p>The number of separate components</p>
    <p>The number of configurations</p>
    <p>The rate of revisions</p>
    <p>Benefit of verification shrinks with  Steep learning curve of developer-unwieldy programming</p>
    <p>Lack of commodity hardware integration</p>
    <p>Magnitude of the runtime overhead</p>
    <p>Commodity Compatibility</p>
    <p>Performance</p>
    <p>Compositionality</p>
    <p>Motivating. Ex.  Arch.  Impl.  Verif. Results  Perf.  Concl. Introduction</p>
  </div>
  <div class="page">
    <p>/ 24Vasudevan et. al. ber park</p>
    <p>Why do this now?  Formal C static analysis tools are very practical [Frama-C]</p>
    <p>Certifiable compilation tools [Compcert] are practical for moderate module sizes</p>
    <p>Its trendy! [seL4, IronClad, IronFleet, FSCQ, mCertiKOS]</p>
    <p>Motivating. Ex.  Arch.  Impl.  Verif. Results  Perf.  Concl. Introduction</p>
  </div>
  <div class="page">
    <p>/ 24Vasudevan et. al. ber park</p>
    <p>An extensible hypervisor</p>
    <p>Guest</p>
    <p>Hardware</p>
    <p>Hypervisor</p>
    <p>MMU Network</p>
    <p>VMX MSRs</p>
    <p>hyperdep sysclog</p>
    <p>aprvexec ropdet</p>
    <p>C + Assembly</p>
    <p>Intro.  Arch.  Impl.  Verif. Results  Perf.  Concl. Motivating Example</p>
  </div>
  <div class="page">
    <p>/ 24Vasudevan et. al. ber park</p>
    <p>Challenge-1: Code size vs. HW de-privileging</p>
    <p>Guest</p>
    <p>Hardware</p>
    <p>Hypervisor</p>
    <p>MMU</p>
    <p>Network</p>
    <p>VMX MSRs</p>
    <p>hyperdep sysclog</p>
    <p>aprvexec ropdet</p>
    <p>Guest</p>
    <p>Hardware</p>
    <p>Hypervisor</p>
    <p>MMU Network</p>
    <p>VMX MSRs</p>
    <p>hyperdep sysclog</p>
    <p>aprvexec ropdet</p>
    <p>Performance</p>
    <p>Intro.  Arch.  Impl.  Verif. Results  Perf.  Concl. Motivating Example</p>
  </div>
  <div class="page">
    <p>/ 24Vasudevan et. al. ber park</p>
    <p>Challenge-2: Continuous Development</p>
    <p>Guest</p>
    <p>Hardware</p>
    <p>Hypervisor</p>
    <p>MSRs</p>
    <p>sysclog hyperdephyperdephyperdephyperdep</p>
    <p>aprvexecaprvexec ropdetropdetropdet</p>
    <p>MMUMMUMMU Network Network</p>
    <p>VMXVMX</p>
    <p>Intro.  Arch.  Impl.  Verif. Results  Perf.  Concl. Motivating Example</p>
  </div>
  <div class="page">
    <p>/ 24Vasudevan et. al. ber park</p>
    <p>Challenge-3: Shared Resources</p>
    <p>Guest</p>
    <p>Hardware</p>
    <p>Hypervisor</p>
    <p>MMU Network</p>
    <p>VMX MSRs</p>
    <p>hyperdep sysclog</p>
    <p>aprvexec ropdet</p>
    <p>Intro.  Arch.  Impl.  Verif. Results  Perf.  Concl. Motivating Example</p>
  </div>
  <div class="page">
    <p>/ 24Vasudevan et. al. ber park</p>
    <p>Challenge-4: Different Configurations</p>
    <p>Guest</p>
    <p>Hardware</p>
    <p>Hypervisor</p>
    <p>MMU Network</p>
    <p>VMX MSRs</p>
    <p>hyperdep sysclog</p>
    <p>aprvexec ropdet</p>
    <p>Guest</p>
    <p>Hardware</p>
    <p>Hypervisor</p>
    <p>MMU Network</p>
    <p>VMX MSRs</p>
    <p>hyperdep sysclog</p>
    <p>aprvexec ropdet</p>
    <p>Guest</p>
    <p>Hardware</p>
    <p>Hypervisor</p>
    <p>MMU Network</p>
    <p>VMX MSRs</p>
    <p>hyperdep sysclog</p>
    <p>aprvexec ropdet</p>
    <p>Intro.  Arch.  Impl.  Verif. Results  Perf.  Concl. Motivating Example</p>
  </div>
  <div class="page">
    <p>/ 24Vasudevan et. al. ber park</p>
    <p>Challenge-5: Verification vs. Programming Paradigm</p>
    <p>Programming Paradigm  C + Assembly is de-facto</p>
    <p>C + Assembly can clobber stuff! [stack, registers, MSRs etc.]</p>
    <p>HW access and ops. with multi-core</p>
    <p>State-of-the-art Verification Tools  Often impose use of developer-unwieldy high-level languages with steep learning curve [Coq, Haskell, Dafny]</p>
    <p>Largely lack support for Assembly</p>
    <p>Mainly target sequential code</p>
    <p>Largely lack support for HW integration</p>
    <p>Guest</p>
    <p>Hardware</p>
    <p>Hypervisor</p>
    <p>MMU Network</p>
    <p>VMX MSRs</p>
    <p>hyperdep sysclog</p>
    <p>aprvexec ropdet</p>
    <p>Intro.  Arch.  Impl.  Verif. Results  Perf.  Concl. Motivating Example</p>
  </div>
  <div class="page">
    <p>/ 24Vasudevan et. al. ber park</p>
    <p>from above  Goals</p>
    <p>Compositionality</p>
    <p>Commodity Compatibility</p>
    <p>Performance</p>
    <p>Verifiable Object Abstraction (uberObject)  Security invariants</p>
    <p>Commodity HW + Software Verification</p>
    <p>ber park</p>
    <p>Blueprint</p>
    <p>Proofs</p>
    <p>+</p>
    <p>System Resources [CPU (Privileged) Instructions, Memory,</p>
    <p>Device Interfaces]</p>
    <p>berObjects [C + Assembly + ACSL]</p>
    <p>SW-VerifHW HW + SW-Verif</p>
    <p>Intro.  Motivating. Ex.  Impl.  Verif. Results  Perf.  Concl. Architecture</p>
  </div>
  <div class="page">
    <p>/ 24Vasudevan et. al. ber park</p>
    <p>The berObject</p>
    <p>Use Manifest +</p>
    <p>Behavior Specifications</p>
    <p>in C-like language</p>
    <p>Contract</p>
    <p>System Resources [CPU (Privileged) Instructions, Memory,</p>
    <p>Device Interfaces]</p>
    <p>Performance</p>
    <p>Intro.  Motivating. Ex.  Impl.  Verif. Results  Perf.  Concl. Architecture</p>
  </div>
  <div class="page">
    <p>/ 24Vasudevan et. al. ber park</p>
    <p>berObject: Sentinel  Sentinel</p>
    <p>Establishes call-ret semantics</p>
    <p>Object to object controlflow enforcer</p>
    <p>berObjects verified not to write on other stack frames</p>
    <p>Enables sound application of sequential source code verification to verify invariants over sequential berobject invocations</p>
    <p>call</p>
    <p>ret</p>
    <p>Shadow Stacks</p>
    <p>ret, ret-async</p>
    <p>call, call-async</p>
    <p>Object Contracts</p>
    <p>Intro.  Motivating. Ex.  Impl.  Verif. Results  Perf.  Concl. Architecture</p>
  </div>
  <div class="page">
    <p>/ 24Vasudevan et. al. ber park</p>
    <p>berBlueprint &amp; Concurrency</p>
    <p>Abstract hypervisor as a nondeterministic sequential program</p>
    <p>prove invariant properties of individual objects and compose them</p>
    <p>Phase1</p>
    <p>Startup Phase2</p>
    <p>Intercept Phase3</p>
    <p>Exception Proofs</p>
    <p>HW initiated concurrent execution</p>
    <p>Concurrent execution</p>
    <p>HW initiated sequential execution</p>
    <p>Sequential execution</p>
    <p>Intro.  Motivating. Ex.  Impl.  Verif. Results  Perf.  Concl. Architecture</p>
  </div>
  <div class="page">
    <p>/ 24Vasudevan et. al. ber park</p>
    <p>berObject: CASM Functions &amp; HW Model  CASM Functions</p>
    <p>C functions composed solely of Assembly</p>
    <p>(Any) Assembly instruction as macro</p>
    <p>HW model specifies semantics</p>
    <p>Custom Frama-C verification plugins  Inline C99 semantics to verify</p>
    <p>Inline Assembly to compile down</p>
    <p>void gp_setup_vhmempgtbl(void){ u32 i, spatype, slabid=XMHF_SLAB_PRIME; u64 flags; ... ... for(i=0; I &lt; (SZ_PDPT*SZ_PDT*SZ_PT); ++i){ spatype=_gp_getspatype(slabid,</p>
    <p>(u32)(i*SZB_4K)); flags=_gp_getptflags(slabid,</p>
    <p>(u32)(i*SZB_4K),spatype); vhpgtbl1t[i] = pae_make_pte((i*SZB_4K),flags);</p>
    <p>} ... casm_writecr3(vhsmpgtbl4t[0]);</p>
    <p>} CASM Function</p>
    <p>void casm_writecr3(u32 value){ ci_movl_mesp_eax(0x4); ci_movl_eax_cr3(); ci_ret();</p>
    <p>}</p>
    <p>CASM Instructions</p>
    <p>Intro.  Motivating. Ex.  Impl.  Verif. Results  Perf.  Concl. Architecture</p>
  </div>
  <div class="page">
    <p>/ 24Vasudevan et. al. ber park</p>
    <p>berObject: Coding and Behavior Specification</p>
    <p>C99 + CASM (principled Assembly)</p>
    <p>ANSI C Specification Language (ACSL)  requires/assigns/ensures</p>
    <p>Hoare triple proven automatically via Frama-C  deductive verification plugins</p>
    <p>ensemble of SMT solvers</p>
    <p>//@ghost u64 gflags[SZ_PDPT*SZ_PDT*SZ_PT]; /*@ ... requires \valid(vhpgtbl1t[0..(SZ_PDPT*SZ_PDT*SZ_PT)-1]); ... assigns vhpgtbl1t[0..(SZ_PDPT*SZ_PDT*SZ_PT)-1]; ... ensures (\forall u32 x; 0 &lt;= x &lt; SZ_PDPT*SZ_PDT*SZ_PT ==&gt;</p>
    <p>((u64)vhpgtbl1t[x] == (((u64)(x*SZB_4K) &amp; 0x7FFFFFFFFFFFF000ULL) | (u64)(gflags[x]))));</p>
    <p>@*/ void gp_setup_vhmempgtbl(void){</p>
    <p>u32 i, spatype, slabid=XMHF_SLAB_PRIME; u64 flags; ... /*@ loop invariant 0 &lt;= i &lt;= (SZ_PDPT*SZ_PDT*SZ_PT); ... @*/ for(i=0; I &lt; (SZ_PDPT*SZ_PDT*SZ_PT); ++i){</p>
    <p>spatype=_gp_getspatype(slabid, (u32)(i*SZB_4K)); flags=_gp_getptflags(slabid, (u32)(i*SZB_4K),spatype); //@ghost gflags[i] = flags; vhpgtbl1t[i] = pae_make_pte((i*SZB_4K),flags); /*@assert vhpgtbl1t[i] == (((u64)(i*SZB_4K)</p>
    <p>&amp; 0x7FFFFFFFFFFFF000ULL) | (u64)(gflags[i])))); @*/ } ... casm_writecr3(vhsmpgtbl4t[0]);</p>
    <p>} CASM function</p>
    <p>Intro.  Motivating. Ex.  Impl.  Verif. Results  Perf.  Concl. Architecture</p>
  </div>
  <div class="page">
    <p>/ 24Vasudevan et. al. ber park</p>
    <p>berObject: Resource Interface Confinement  berAPI berobjects</p>
    <p>Wrap a reference monitor around (shared) resource</p>
    <p>MMU, IOMMU, CRs, MSRs, Devices</p>
    <p>Client object manifests how it will use a (shared) resource  Verified on client via assertions</p>
    <p>During integration  Use manifests combined into one formula</p>
    <p>SMT solvers check composability</p>
    <p>Intro.  Motivating. Ex.  Impl.  Verif. Results  Perf.  Concl. Architecture</p>
  </div>
  <div class="page">
    <p>/ 24Vasudevan et. al. ber park</p>
    <p>C99 + CASM + ACSL behavior specifications and behavior restrictions</p>
    <p>Object invariants including basic memory safety and controlflow integrity and other properties that can be formulated as invariants</p>
    <p>Architecture ensures invariant composition</p>
    <p>Mind-Blow #1: Only need to worry about object behavior now  not implementation</p>
    <p>Mind-Blow #2: A compositionally verifiable C + Assembly system without hardware de-privileging</p>
    <p>berObject: Summary</p>
    <p>Intro.  Motivating. Ex.  Impl.  Verif. Results  Perf.  Concl. Architecture</p>
  </div>
  <div class="page">
    <p>/ 24Vasudevan et. al. ber park</p>
    <p>An ber Micro-Hypervisor (XMHF)  XMHF micro-hypervisor (http://xmhf.org)</p>
    <p>Core hypervisor + single extension (hypapp)</p>
    <p>Ubuntu 12.04 32-bit SMP on Intel VT-x/AMD</p>
    <p>Various hypapps  tracing, attestation, app-level integrity, trusted path etc.</p>
    <p>XMHF  Multiple extensions</p>
    <p>Ubuntu 12.04 32-bit SMP on Intel VT-x</p>
    <p>11 berobjects, 7001 SLoC including prime and sentinel</p>
    <p>Took ~3 person months for refactoring</p>
    <p>Intro.  Motiv. Ex.  Arch.  Verif. Results  Perf.  Concl. Implementation</p>
  </div>
  <div class="page">
    <p>/ 24Vasudevan et. al. ber park</p>
    <p>XMHF Verification Results  Verification Tools TCB</p>
    <p>Frama-C, uberSpark Plugins (1021 SLoC), SMT Solvers (Z3, CVC3, Alt-ergo), HW Model (2079 SLoC)</p>
    <p>Security Invariants in core Hypervisor and Extensions  memory-safety, control-flow integrity, no direct writes to hypervisor memory by guest, DEP, guest syscalls n/w logging etc.</p>
    <p>Verification Metrics  11 berobjects, 5544 SLoC total ACSL annotations</p>
    <p>Annotation to code ratio 0.2:1 to 1.6:1</p>
    <p>berobject verification times from 48s to 23 min; cumulative ~1hr</p>
    <p>Took ~9 person months</p>
    <p>Intro.  Motiv. Ex.  Arch.  Impl.  Perf.  Concl. Verification Results</p>
  </div>
  <div class="page">
    <p>/ 24Vasudevan et. al. ber park</p>
    <p>XMHF: Micro &amp; Application Benchmarks  Sentinel transfer cost</p>
    <p>XMHF vs. vanilla XMHF  Verified hypapps (2% avg. overhead)</p>
    <p>Unverified hypapps (10% avg. overhead)</p>
    <p>I/O and normal Guest performance unaffected!</p>
    <p>VerifiedVerified</p>
    <p>Verified-Unverified / Uverified-Verified</p>
    <p>SEG CR3 TSK HVM</p>
    <p>Intro.  Motivating Ex.  Arch.  Impl.  Verif. Results  Concl. Performance</p>
  </div>
  <div class="page">
    <p>/ 24Vasudevan et. al. ber park</p>
    <p>Can prove behavior one object at a time (trace properties)</p>
    <p>Can compose modules and behaviors cheaply</p>
    <p>Can write system code in basically C and Assembly and behavior specifications in C-like specification language</p>
    <p>Can integrate HW accesses and states into verification</p>
    <p>Can execute with good runtime performance</p>
    <p>So, what do we have here?</p>
    <p>Goals  Compositionality  Commodity Compatibility  Performance</p>
    <p>Intro.  Motivating Ex.  Arch.  Impl.  Verification Results  Perf. Conclusion</p>
  </div>
  <div class="page">
    <p>/ 24Vasudevan et. al. ber park</p>
    <p>So, what dont we have, yet?  Not exactly C99 + Assembly; no cowboy control flow craziness</p>
    <p>God forbid no C++</p>
    <p>Compcert + CASM proofs  Semantic compatibility between Frama-C, Compcert and CASM</p>
    <p>HW Model to Assembly instructions refinement</p>
    <p>Full functional correctness</p>
    <p>Concurrent verification</p>
    <p>Broader applicability  Other hypervisors (Xen, KVM), BIOS, Device firmware, OS Kernel and Drivers, User-space Applications and Browser Extensions</p>
    <p>Intro.  Motivating Ex.  Arch.  Impl.  Verification Results  Perf. Conclusion</p>
  </div>
  <div class="page">
    <p>/ 24Vasudevan et. al. ber park</p>
    <p>Questions?</p>
    <p>http://uberspark.org</p>
    <p>Amit Vasudevan (amitvasudevan@acm.org)</p>
    <p>ber park</p>
    <p>Intro.  Motivating Ex.  Arch.  Impl.  Verification Results  Perf. Conclusion</p>
  </div>
</Presentation>
