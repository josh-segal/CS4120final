<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>cHash: Detection of Redundant Compilations via AST Hashing</p>
    <p>Christian Dietrich, Valentin Rothberg, Ludwig Fracker?, Andreas Ziegler?, Daniel Lohmann</p>
    <p>Leibniz Universitt Hannover ?Friedrich-Alexander-Universitt Erlangen-Nrnberg</p>
  </div>
  <div class="page">
    <p>Compilation and Recompilation</p>
    <p>xk cd</p>
    <p>.c om</p>
    <p>,C C BY</p>
    <p>-N C 2. 5</p>
    <p>Compile Time is not the Problem. The Problem is Recompile Time</p>
    <p>LUH,FAU cHash  Motivation and Introduction 2  17</p>
  </div>
  <div class="page">
    <p>C/C++ Projects and Makefiles</p>
    <p>network.o</p>
    <p>network.h</p>
    <p>network.c</p>
    <p>types.h</p>
    <p>Makefile Fragment for network module</p>
    <p>network.o: network.c network.h types.h</p>
    <p>cc -o network.o -c network.c</p>
    <p>In C projects, modular decomposition is done on file granularity Headers export an interface, #include includes an interface Source files (.c) are module implementations</p>
    <p>Recompilation decided upon timestamp comparison (e.g. make) Dependencies of module are encoded in Makefile Compare all dependent timestamps against last build artifact</p>
    <p>LUH,FAU cHash  Motivation and Introduction 3  17</p>
  </div>
  <div class="page">
    <p>C/C++ Projects and Makefiles</p>
    <p>network.o</p>
    <p>network.h</p>
    <p>network.c</p>
    <p>types.h</p>
    <p>Makefile Fragment for network module</p>
    <p>network.o: network.c network.h types.h</p>
    <p>cc -o network.o -c network.c</p>
    <p>In C projects, modular decomposition is done on file granularity Headers export an interface, #include includes an interface Source files (.c) are module implementations</p>
    <p>Recompilation decided upon timestamp comparison (e.g. make) Dependencies of module are encoded in Makefile Compare all dependent timestamps against last build artifact</p>
    <p>LUH,FAU cHash  Motivation and Introduction 3  17</p>
  </div>
  <div class="page">
    <p>When to detect change and stop compilation?</p>
    <p>-O0</p>
    <p>-O1</p>
    <p>-O2</p>
    <p>-O3</p>
    <p>Average compile time per source file (seconds)</p>
    <p>G C</p>
    <p>C O</p>
    <p>pt im</p>
    <p>iz at</p>
    <p>io n</p>
    <p>Le ve</p>
    <p>l</p>
    <p>C Preprocessor C Parser Optimizer</p>
    <p>make, timestamps</p>
    <p>ccache, textual hash</p>
    <p>chash, semantic hash</p>
    <p>Detect that a compilation will result in the same output</p>
    <p>The later we apply detection mechanism, the more precise it becomes</p>
    <p>In a nutshell: cHash calculates an hash after the parser</p>
    <p>LUH,FAU cHash  Motivation and Introduction 4  17</p>
  </div>
  <div class="page">
    <p>When to detect change and stop compilation?</p>
    <p>-O0</p>
    <p>-O1</p>
    <p>-O2</p>
    <p>-O3</p>
    <p>Average compile time per source file (seconds)</p>
    <p>G C</p>
    <p>C O</p>
    <p>pt im</p>
    <p>iz at</p>
    <p>io n</p>
    <p>Le ve</p>
    <p>l</p>
    <p>C Preprocessor C Parser Optimizer</p>
    <p>make, timestamps</p>
    <p>ccache, textual hash</p>
    <p>chash, semantic hash</p>
    <p>Detect that a compilation will result in the same output</p>
    <p>The later we apply detection mechanism, the more precise it becomes</p>
    <p>In a nutshell: cHash calculates an hash after the parser</p>
    <p>LUH,FAU cHash  Motivation and Introduction 4  17</p>
  </div>
  <div class="page">
    <p>When to detect change and stop compilation?</p>
    <p>-O0</p>
    <p>-O1</p>
    <p>-O2</p>
    <p>-O3</p>
    <p>Average compile time per source file (seconds)</p>
    <p>G C</p>
    <p>C O</p>
    <p>pt im</p>
    <p>iz at</p>
    <p>io n</p>
    <p>Le ve</p>
    <p>l</p>
    <p>C Preprocessor C Parser Optimizer</p>
    <p>make, timestamps</p>
    <p>ccache, textual hash</p>
    <p>chash, semantic hash</p>
    <p>Detect that a compilation will result in the same output</p>
    <p>The later we apply detection mechanism, the more precise it becomes</p>
    <p>In a nutshell: cHash calculates an hash after the parser</p>
    <p>LUH,FAU cHash  Motivation and Introduction 4  17</p>
  </div>
  <div class="page">
    <p>When to detect change and stop compilation?</p>
    <p>-O0</p>
    <p>-O1</p>
    <p>-O2</p>
    <p>-O3</p>
    <p>Average compile time per source file (seconds)</p>
    <p>G C</p>
    <p>C O</p>
    <p>pt im</p>
    <p>iz at</p>
    <p>io n</p>
    <p>Le ve</p>
    <p>l</p>
    <p>C Preprocessor C Parser Optimizer</p>
    <p>make, timestamps</p>
    <p>ccache, textual hash</p>
    <p>chash, semantic hash</p>
    <p>Detect that a compilation will result in the same output</p>
    <p>The later we apply detection mechanism, the more precise it becomes</p>
    <p>In a nutshell: cHash calculates an hash after the parser</p>
    <p>LUH,FAU cHash  Motivation and Introduction 4  17</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Motivation and Introduction</p>
    <p>cHash: Hash the abstract-syntax tree</p>
    <p>Evaluation with incremental (minimal) modifications with commit-sized modifications</p>
    <p>Conclusion</p>
    <p>LUH,FAU cHash  Motivation and Introduction 5  17</p>
  </div>
  <div class="page">
    <p>Parse Tree and Semantic Analysis</p>
    <p>Function inc</p>
    <p>Function Type 18</p>
    <p>int 2</p>
    <p>Pointer 14</p>
    <p>Block 75</p>
    <p>Return 25</p>
    <p>Argument e</p>
    <p>BinaryOp +=</p>
    <p>Literal 1</p>
    <p>FieldRef -&gt;counter</p>
    <p>FieldRef -&gt;counter</p>
    <p>int 2</p>
    <p>Record refcount</p>
    <p>Field counter</p>
    <p>object</p>
    <p>int 2</p>
    <p>Pointer 4</p>
    <p>Record obj</p>
    <p>Record unused Pointer</p>
    <p>Field next</p>
    <p>TypeDeclaration Expression/Statement AST Child</p>
    <p>struct unused { struct unused *next;</p>
    <p>};</p>
    <p>struct obj {};</p>
    <p>struct refcount {</p>
    <p>int counter; struct obj * ptr;</p>
    <p>};</p>
    <p>int inc(struct refcount *e) {</p>
    <p>e-&gt;counter += 1; return e-&gt;counter;</p>
    <p>}</p>
    <p>LUH,FAU cHash  cHash: Hash the abstract-syntax tree 6  17</p>
  </div>
  <div class="page">
    <p>Parse Tree and Semantic Analysis</p>
    <p>Function inc</p>
    <p>Function Type 18</p>
    <p>int 2</p>
    <p>Pointer 14</p>
    <p>Block 75</p>
    <p>Return 25</p>
    <p>Argument e</p>
    <p>BinaryOp +=</p>
    <p>Literal 1</p>
    <p>FieldRef -&gt;counter</p>
    <p>FieldRef -&gt;counter</p>
    <p>int 2</p>
    <p>Record refcount</p>
    <p>Field counter</p>
    <p>object</p>
    <p>int 2</p>
    <p>Pointer 4</p>
    <p>Record obj</p>
    <p>Record unused Pointer</p>
    <p>Field next</p>
    <p>Type</p>
    <p>Declaration</p>
    <p>Expression/Statement AST Child</p>
    <p>Type-of</p>
    <p>Reference-to</p>
    <p>Semantic analysis type checks and interconnects the AST Nodes are annotated with their type AST becomes a directed graph, it can include cycles</p>
    <p>LUH,FAU cHash  cHash: Hash the abstract-syntax tree 6  17</p>
  </div>
  <div class="page">
    <p>AST Hash for each Compilation Unit</p>
    <p>Calculate semantic fingerprint with a depth-first search Hash relevant node properties (node class, operation,) Include hashes of all referenced nodes</p>
    <p>A H(A) := Fields(A) 23  42BH(B) := 23</p>
    <p>CH(C) := 42</p>
    <p>Cycles in the semantically-enriched AST (recursive data structures) Cache and reuse hash values for type definitions and declarations Break cyclic dependencies by using a surrogate hash value H(struct unused* next) := H(&quot;next&quot;)  H(&quot;struct unused*&quot;)</p>
    <p>LUH,FAU cHash  cHash: Hash the abstract-syntax tree 7  17</p>
  </div>
  <div class="page">
    <p>AST Hashing with Depth-First Search</p>
    <p>Function inc</p>
    <p>?</p>
    <p>Function Type 18</p>
    <p>int 2</p>
    <p>Pointer 14</p>
    <p>Block 75</p>
    <p>Return 25</p>
    <p>Argument e</p>
    <p>BinaryOp +=</p>
    <p>Literal 1</p>
    <p>FieldRef -&gt;counter</p>
    <p>FieldRef -&gt;counter</p>
    <p>int 2</p>
    <p>Record refcount</p>
    <p>Field counter</p>
    <p>object</p>
    <p>int 2</p>
    <p>Pointer 4</p>
    <p>Record obj</p>
    <p>Record unused Pointer</p>
    <p>Field next</p>
    <p>Type</p>
    <p>Declaration</p>
    <p>Expression/Statement AST Child</p>
    <p>Type-of</p>
    <p>Reference-to</p>
    <p>LUH,FAU cHash  cHash: Hash the abstract-syntax tree 8  17</p>
  </div>
  <div class="page">
    <p>AST Hashing with Depth-First Search</p>
    <p>Function inc</p>
    <p>?</p>
    <p>Function Type 18</p>
    <p>int 2</p>
    <p>Pointer 14</p>
    <p>Block 75</p>
    <p>Return 25</p>
    <p>Argument e</p>
    <p>BinaryOp +=</p>
    <p>Literal 1</p>
    <p>FieldRef -&gt;counter</p>
    <p>FieldRef -&gt;counter</p>
    <p>int 2</p>
    <p>Record refcount</p>
    <p>Field counter</p>
    <p>object</p>
    <p>int 2</p>
    <p>Pointer 4</p>
    <p>Record obj</p>
    <p>Record unused Pointer</p>
    <p>Field next</p>
    <p>Type</p>
    <p>Declaration</p>
    <p>Expression/Statement AST Child</p>
    <p>Type-of</p>
    <p>Reference-to</p>
    <p>LUH,FAU cHash  cHash: Hash the abstract-syntax tree 8  17</p>
  </div>
  <div class="page">
    <p>AST Hashing with Depth-First Search</p>
    <p>Function inc</p>
    <p>?</p>
    <p>Function Type 18</p>
    <p>int 2</p>
    <p>Pointer 14</p>
    <p>Block 75</p>
    <p>Return 25</p>
    <p>Argument e</p>
    <p>BinaryOp +=</p>
    <p>Literal 1</p>
    <p>FieldRef -&gt;counter</p>
    <p>FieldRef -&gt;counter</p>
    <p>int 2</p>
    <p>Record refcount</p>
    <p>Field counter</p>
    <p>object</p>
    <p>int 2</p>
    <p>Pointer 4</p>
    <p>Record obj</p>
    <p>Record unused Pointer</p>
    <p>Field next</p>
    <p>Type</p>
    <p>Declaration</p>
    <p>Expression/Statement AST Child</p>
    <p>Type-of</p>
    <p>Reference-to</p>
    <p>LUH,FAU cHash  cHash: Hash the abstract-syntax tree 8  17</p>
  </div>
  <div class="page">
    <p>AST Hashing with Depth-First Search</p>
    <p>Function inc</p>
    <p>?</p>
    <p>Function Type 18</p>
    <p>int 2</p>
    <p>Pointer 14</p>
    <p>Block 75</p>
    <p>Return 25</p>
    <p>Argument e</p>
    <p>BinaryOp +=</p>
    <p>Literal 1</p>
    <p>FieldRef -&gt;counter</p>
    <p>FieldRef -&gt;counter</p>
    <p>int 2</p>
    <p>Record refcount</p>
    <p>Field counter</p>
    <p>object</p>
    <p>int 2</p>
    <p>Pointer 4</p>
    <p>Record obj</p>
    <p>Record unused Pointer</p>
    <p>Field next</p>
    <p>Type</p>
    <p>Declaration</p>
    <p>Expression/Statement AST Child</p>
    <p>Type-of</p>
    <p>Reference-to</p>
    <p>LUH,FAU cHash  cHash: Hash the abstract-syntax tree 8  17</p>
  </div>
  <div class="page">
    <p>AST Hashing with Depth-First Search</p>
    <p>Function inc</p>
    <p>?</p>
    <p>Function Type 18</p>
    <p>int 2</p>
    <p>Pointer 14</p>
    <p>Block 75</p>
    <p>Return 25</p>
    <p>Argument e</p>
    <p>BinaryOp +=</p>
    <p>Literal 1</p>
    <p>FieldRef -&gt;counter</p>
    <p>FieldRef -&gt;counter</p>
    <p>int 2</p>
    <p>Record refcount</p>
    <p>Field counter</p>
    <p>object</p>
    <p>int 2</p>
    <p>Pointer 4</p>
    <p>Record obj</p>
    <p>Record unused Pointer</p>
    <p>Field next</p>
    <p>Type</p>
    <p>Declaration</p>
    <p>Expression/Statement AST Child</p>
    <p>Type-of</p>
    <p>Reference-to</p>
    <p>LUH,FAU cHash  cHash: Hash the abstract-syntax tree 8  17</p>
  </div>
  <div class="page">
    <p>AST Hashing with Depth-First Search</p>
    <p>Function inc</p>
    <p>Function Type 18</p>
    <p>int 2</p>
    <p>Pointer 14</p>
    <p>Block 75</p>
    <p>Return 25</p>
    <p>Argument e</p>
    <p>BinaryOp +=</p>
    <p>Literal 1</p>
    <p>FieldRef -&gt;counter</p>
    <p>FieldRef -&gt;counter</p>
    <p>int 2</p>
    <p>Record refcount</p>
    <p>Field counter</p>
    <p>object</p>
    <p>int 2</p>
    <p>Pointer 4</p>
    <p>Record obj</p>
    <p>Record unused Pointer</p>
    <p>Field next</p>
    <p>Type</p>
    <p>Declaration</p>
    <p>Expression/Statement AST Child</p>
    <p>Type-of</p>
    <p>Reference-to</p>
    <p>LUH,FAU cHash  cHash: Hash the abstract-syntax tree 8  17</p>
  </div>
  <div class="page">
    <p>Integrate cHash into the Compiler</p>
    <p>We implemented cHash as a CLang plugin for C (GCC: in progress) 1. Calculate hash over the semantically-enriched AST 2. Read in hash for already existing object file 3. Compare old hash and new hash 4. Abort compilation on equality and update timestamp of object file</p>
    <p>Caching schemes for object files CCache: A fixed size cache directory with the hash as index cHash: Compare hash only with the last compilation result Caching strategy is orthogonal to fingerprint mechanism</p>
    <p>LUH,FAU cHash  cHash: Hash the abstract-syntax tree 9  17</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Motivation and Introduction</p>
    <p>cHash: Hash the abstract-syntax tree</p>
    <p>Evaluation with incremental (minimal) modifications with commit-sized modifications</p>
    <p>Conclusion</p>
    <p>LUH,FAU cHash  cHash: Hash the abstract-syntax tree 10  17</p>
  </div>
  <div class="page">
    <p>Incremental Modifications and Recompilation</p>
    <p>Setting in the Reality</p>
    <p>A developer works continuously on a source base. After a small modification to the source code, she recompiles the project to update the executables.</p>
    <p>Six C open source projects, 18k742k SLOC, 3 build systems Start with a fully built source base, all object files are up-to-date Timestamp-based dependency checking of build system still in place Comparison between: Baseline, CCache, cHash</p>
    <p>For each source/header file: 1. Modify file: (a) update timestamp or (b) useless textual change 2. Start build system to update all build artifacts (with -j48) 3. Get one rebuild duration for each source file</p>
    <p>Best-case scenario for cHash LUH,FAU cHash  Evaluation with Minimal Changes 11  17</p>
  </div>
  <div class="page">
    <p>Incremental Modifications and Recompilation</p>
    <p>Setting in the Reality</p>
    <p>A developer works continuously on a source base. After a small modification to the source code, she recompiles the project to update the executables.</p>
    <p>Six C open source projects, 18k742k SLOC, 3 build systems Start with a fully built source base, all object files are up-to-date Timestamp-based dependency checking of build system still in place Comparison between: Baseline, CCache, cHash</p>
    <p>For each source/header file: 1. Modify file: (a) update timestamp or (b) useless textual change 2. Start build system to update all build artifacts (with -j48) 3. Get one rebuild duration for each source file</p>
    <p>Best-case scenario for cHash LUH,FAU cHash  Evaluation with Minimal Changes 11  17</p>
  </div>
  <div class="page">
    <p>Incremental Modification: Textual Change</p>
    <p>Project Baseline CCache cHash</p>
    <p>LUA 1.10 s 16.4 % 59.6 % mbedTLS 1.33 s 18.9 % 4.3 % musl 0.86 s 17.6 % 4.7 % bash 1.48 s 9.2 % 65.3 % CPython 8.22 s 24.7 % 64.1 % PostgreSQL 3.12 s 8.6 % 41.8 %</p>
    <p>Table: Average rebuild duration after a textual change.</p>
    <p>CCache cannot identify redundant build (hash on preprocessed code)</p>
    <p>cHash ignores purely syntactical changes</p>
    <p>LUH,FAU cHash  Evaluation with Minimal Changes 12  17</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Motivation and Introduction</p>
    <p>cHash: Hash the abstract-syntax tree</p>
    <p>Evaluation with incremental (minimal) modifications with commit-sized modifications</p>
    <p>Conclusion</p>
    <p>LUH,FAU cHash  Evaluation with Minimal Changes 13  17</p>
  </div>
  <div class="page">
    <p>Commit-sized Changes and Recompilation</p>
    <p>Setting in the Reality</p>
    <p>A build server in a continuous integration system builds one uploaded change/commit after the other. Only the increment introduced by the change should lead to recompilations</p>
    <p>Build the last 500 non-merge commits from our six projects</p>
    <p>Prepare the source tree by fully building the parent commit</p>
    <p>Comparison between: CCache, cHash, CCache+cHash</p>
    <p>For each commit file: 1. Apply the commit on the source 2. Start build system to update all build artifacts (with -j48) 3. Record the rebuild duration</p>
    <p>LUH,FAU cHash  Evaluation with Commits 14  17</p>
  </div>
  <div class="page">
    <p>Commit-sized Changes: Results</p>
    <p>Commits Baseline CCache cHash CCache+cHash</p>
    <p>LUA 479 2.14 s -38.8 % -49.3 % -46.7 % mbedTLS 498 2.13 s -20.7 % -7.3 % -21.6 % musl 500 1.25 s -3.8 % 0.7 % -3.2 % bash 108 2.88 s -11 % -22.7 % -16 % CPython 500 8.27 s -46.4 % -51.4 % -53.7 % PostgreSQL 498 5.63 s -11 % -31.6 % -25.3 %</p>
    <p>Table: Rebuild time for the last 500 non-merge changes.</p>
    <p>Some commits were broken, bash had only 128 commits</p>
    <p>Avg. compiler abortions: CCache (61 %), cHash (79.75 %)</p>
    <p>Avg. recompilation speedup: CCache (-23.63 %), cHash (-29.63 %)</p>
    <p>LUH,FAU cHash  Evaluation with Commits 15  17</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Motivation and Introduction</p>
    <p>cHash: Hash the abstract-syntax tree</p>
    <p>Evaluation with incremental (minimal) modifications with commit-sized modifications</p>
    <p>Conclusion</p>
    <p>LUH,FAU cHash  Evaluation with Commits 16  17</p>
  </div>
  <div class="page">
    <p>Summary and Conclusion</p>
    <p>cHash: AST hash is used to detect redundant build operation excludes purely syntactic changes excludes unreferenced types and declarations</p>
    <p>cHash improves recompilation times for developers and build farms Build system agnostic, since compiler extension Combinable with other detection schemes (timestamps, CCache)</p>
    <p>Future work for cHash and AST hashing Integration into mainline compilers (at least the hashing) Partial recompilation (e.g. a single function) More complex languages with more emphasis on headers (C++)</p>
    <p>LUH,FAU cHash  Evaluation with Commits 17  17</p>
  </div>
</Presentation>
