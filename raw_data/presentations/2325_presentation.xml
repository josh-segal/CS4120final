<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Revisiting Network Interface Cards as First-Class Citizens</p>
    <p>Wu-chun Feng (Virginia Tech)</p>
    <p>Pavan Balaji (Argonne National Lab)</p>
    <p>Ajeet Singh (Virginia Tech)</p>
  </div>
  <div class="page">
    <p>Forecast</p>
    <p>Application-network interface is the bottleneck in the network communication today.</p>
    <p>Survey of existing system architectures.  Evaluate their merits and demerits.</p>
    <p>New system architecture proposed  Network Interface card (NIC) treated as First-Class Citizens</p>
    <p>at par with other CPUs.  New architecture potentially solves application-network</p>
    <p>interfacing problem.</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Motivation  Trends  Evolution of System Architectures  Current Status  NIC as First-Class Citizens  Problems and Solutions  Drawbacks  Conclusion</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Problem: Application-to-network interface is still bottleneck</p>
    <p>Network and I/O Host TCP/IP</p>
    <p>NIC</p>
    <p>RDMA reduces the overhead by 40-90%</p>
  </div>
  <div class="page">
    <p>Trends : Ethernet Wire Time Vs Processing Time</p>
    <p>Image Source: Intel Corporation</p>
    <p>Processing Time Ethernet Wire Time</p>
  </div>
  <div class="page">
    <p>Trends</p>
    <p>CPU  Multi-core systems</p>
    <p>Memory Access Time (DRAM)  7% - 9% decreases every year (5-70 ns now)</p>
    <p>Memory Capacity  Increasing four-fold every 3 years.</p>
    <p>Network Link Bandwidth  Already hundreds of Gbps and improving!</p>
    <p>Application-to-Network Latency?</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Motivation  Trends  Evolution of System Architectures  Current Status  NIC as First-Class Citizens  Problems and Solutions  Drawbacks  Conclusion</p>
  </div>
  <div class="page">
    <p>AMD NUMA Architecture</p>
  </div>
  <div class="page">
    <p>Approach 1: NIC on I/O Bus</p>
    <p>CPUCPU</p>
    <p>Disk</p>
    <p>Northbridge (memory controller</p>
    <p>hub)</p>
    <p>Northbridge (memory controller</p>
    <p>hub)</p>
    <p>Southbridge (I/O controller hub) Southbridge</p>
    <p>(I/O controller hub)</p>
    <p>CPUCPU</p>
    <p>Northbridge (memory controller</p>
    <p>hub)</p>
    <p>Northbridge (memory controller</p>
    <p>hub)</p>
    <p>Memory Slots Memory Slots Internal</p>
    <p>BusHigh- speed graphics bus(AGP or PCI Express)</p>
    <p>PCI Bus</p>
    <p>LPC Bus</p>
    <p>Network Interface Card</p>
    <p>Graphics Card Slot</p>
    <p>Flash BIOS ROM</p>
    <p>Flash BIOS ROM</p>
  </div>
  <div class="page">
    <p>Approach 1: Features</p>
    <p>I/O Bus is many order times slower than the Memory Bus (memory latency)</p>
    <p>DMA initiation process is very expensive Software overhead (OS intervention) No direct access to CPU.</p>
    <p>NIC connected to standard I/O Bus Direct Memory Access (DMA) to easy out CPU</p>
  </div>
  <div class="page">
    <p>Approach 2: NIC connected to memory bus (2004)</p>
    <p>CPUCPU</p>
    <p>Disk</p>
    <p>Northbridge (memory controller</p>
    <p>hub)</p>
    <p>Northbridge (memory controller</p>
    <p>hub)</p>
    <p>Southbridge (I/O controller hub) Southbridge</p>
    <p>(I/O controller hub)</p>
    <p>CPUCPU</p>
    <p>Northbridge (memory controller</p>
    <p>hub)</p>
    <p>Northbridge (memory controller</p>
    <p>hub)</p>
    <p>Memory Slots Memory Slots Internal</p>
    <p>BusHigh- speed graphics bus(AGP or PCI Express)</p>
    <p>PCI Bus</p>
    <p>LPC BusNetwork</p>
    <p>Interface Card</p>
    <p>Flash BIOS ROM</p>
    <p>Flash BIOS ROM</p>
    <p>PCI Slots</p>
  </div>
  <div class="page">
    <p>Approach 2: Features</p>
    <p>PCI-Express orders of magnitude faster than PCI NIC closer to main memory (reduced latency)</p>
    <p>Not integrated with memory subsystem No direct access to CPU cache DMA initiation process is very expensive Software overhead (OS intervention)</p>
  </div>
  <div class="page">
    <p>CPUCPU</p>
    <p>Approach 3: Direct Cache Access Capability (Simulated)</p>
    <p>CPUCPU</p>
    <p>Disk</p>
    <p>Northbridge (memory controller</p>
    <p>hub)</p>
    <p>Northbridge (memory controller</p>
    <p>hub)</p>
    <p>Southbridge (I/O controller hub) Southbridge</p>
    <p>(I/O controller hub)</p>
    <p>Northbridge (memory controller</p>
    <p>hub)</p>
    <p>Northbridge (memory controller</p>
    <p>hub)</p>
    <p>Memory SlotsMemory Slots Internal BusHigh- speed</p>
    <p>graphics bus(AGP or PCI Express)</p>
    <p>PCI Bus</p>
    <p>LPC BusNetwork</p>
    <p>Interface Card</p>
    <p>Flash BIOS ROM</p>
    <p>Flash BIOS ROM</p>
    <p>PCI Slots</p>
  </div>
  <div class="page">
    <p>Approach 3: Features</p>
    <p>NIC has access to processor cache (low latency) Reduced memory bandwidth requirement.</p>
    <p>Not integrated with memory subsystem. Software overhead (OS intervention) Increases processor cache requirements.</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Motivation  Trends  Evolution of System Architectures  Current Status  NIC as First-Class Citizens  Problems and Solutions  Drawbacks  Conclusion</p>
  </div>
  <div class="page">
    <p>Where are we now?</p>
    <p>Software  Several high performance RDMA protocols available.</p>
    <p>Hardware  Intels Communication Stream Architecture subsumed by PCI</p>
    <p>Express technology.  Myrinet Cards also provide feature of User Level Network</p>
    <p>Interface.  Qs-Net product of Quadrics is closest to the status of First-Class</p>
    <p>Citizen.</p>
  </div>
  <div class="page">
    <p>Where Do We Go From Here?</p>
    <p>What has been done so far?  Bad NIC architecture</p>
    <p>Giving first-class citizenship to NIC (attaching NIC to memory bus), but treating it as a second-class citizen, i.e., peripheral device.</p>
    <p>Obvious Solution  RDMA  Treat NIC as a first-class citizen. How?</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Motivation  Trends  Evolution of System Architectures  Current Status  NIC as First-Class Citizens  Problems and Solutions  Drawbacks  Conclusion</p>
  </div>
  <div class="page">
    <p>Approach 4: NIC as First-Class Citizen (Proposed)</p>
    <p>CPUCPU</p>
    <p>Disk</p>
    <p>Northbridge (memory controller</p>
    <p>hub)</p>
    <p>Northbridge (memory controller</p>
    <p>hub)</p>
    <p>Southbridge (I/O controller hub) Southbridge</p>
    <p>(I/O controller hub)</p>
    <p>Northbridge (memory controller</p>
    <p>hub)</p>
    <p>Northbridge (memory controller</p>
    <p>hub)</p>
    <p>Memory Slots Memory Slots Internal</p>
    <p>BusHigh- speed graphics bus(AGP or PCI Express)</p>
    <p>LPC Bus</p>
    <p>Graphics Card Slot</p>
    <p>Flash BIOS ROM</p>
    <p>Flash BIOS ROM</p>
    <p>PCI Bus</p>
    <p>PCI Slots</p>
    <p>Network CPU Network CPU</p>
  </div>
  <div class="page">
    <p>First Class Citizens?</p>
    <p>Beyond direct cache access.  Connected on to the faster memory bus (or PCI-e).  NIC integrated with memory sub-system.  Have processing capabilities.  Not a general purpose CPU but task-specific.  Have its own cache like other processors.</p>
    <p>Treat NIC as a co-processor!</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Motivation  Trends  Evolution of System Architectures  Current Status  NIC as First-Class Citizens  Problems and Solutions  Drawbacks  Conclusion</p>
  </div>
  <div class="page">
    <p>NIC Access Memory Access</p>
  </div>
  <div class="page">
    <p>Virtualize NIC &amp; Bypass OS</p>
    <p>Virtualize NIC  High latency to access NIC</p>
    <p>Packets go through OS via Unix sockets.  High DMA initiation overhead.</p>
    <p>+ Easy protection of address spaces + Easy address translation</p>
    <p>Treat it like a main memory and not like a disk!</p>
  </div>
  <div class="page">
    <p>NIC Access Memory Access</p>
  </div>
  <div class="page">
    <p>Cache NIC Registers/Data</p>
    <p>NIC Registers Currently Uncached  CPU accesses to NIC may have side effects (unlike normal cache</p>
    <p>memory)  Behaves more like cache than main memory(passive)  Cache replacement issue</p>
    <p>Advantages + Low memory latency + Exploit temporal locality</p>
    <p>Remove unnecessary memory traffic (e.g. during polling)</p>
    <p>+ Explicit Handshake required</p>
  </div>
  <div class="page">
    <p>NIC Access Memory Access</p>
  </div>
  <div class="page">
    <p>NIC memory as cache  Block transfer</p>
    <p>I/O Transfer  Uncached load/stores to memory-mapped device registers</p>
    <p>transfer very few bytes (1-16 bytes)  High DMA initiation overhead (through CPU)</p>
    <p>Cache Block Transfer + High bandwidth (32-128 bytes) + Memory buses are optimized for cache block transfer + Cache-cache transfer</p>
  </div>
  <div class="page">
    <p>NIC Access Memory Access</p>
  </div>
  <div class="page">
    <p>Proper Notification</p>
    <p>Interrupt  Heavyweight</p>
    <p>Cache corrupted due to context switch  Corrupts the cache(s). Adversely affects cache hit rate.</p>
    <p>Results in added memory-bus traffic.</p>
    <p>Cache Invalidation + Non-intrusive</p>
    <p>NIC invalidates cached NIC register in CPUs cache.  CPU misses on cached but invalidated NIC register &amp; gets valid NIC</p>
    <p>register from NIC.</p>
  </div>
  <div class="page">
    <p>NIC Access Memory Access</p>
  </div>
  <div class="page">
    <p>Buffering Packets</p>
    <p>Use device memory of NIC  Limited buffer space</p>
    <p>Use virtual memory + Plentiful buffer space</p>
  </div>
  <div class="page">
    <p>NIC Access Memory Access</p>
  </div>
  <div class="page">
    <p>[NIC Access Memory Access]</p>
    <p>Out-of-Order Access Possible</p>
    <p>+ Additional scheduling flexibility in a dynamic pipeline.  Certain loads/stores</p>
    <p>May be scheduled earlier than other loads/stores  CPU may not need to stall ...</p>
    <p>+ Speculative access  Due to memory based queues</p>
  </div>
  <div class="page">
    <p>NIC Access Memory Access</p>
  </div>
  <div class="page">
    <p>Memory-Based Queue API</p>
    <p>Memory-Based Queue API vs. User-Level NIC API + Decouples NIC from CPU</p>
    <p>Sending/receiving packets = reading/writing queue memory  Both CPU and NIC can send/receive multiple packets to/from queues</p>
    <p>without blocking</p>
    <p>+ No longer explicit DMA initiation requests + Treat NIC queue accesses as side-effect-free memory accesses. + Enables Out-of-order and speculative access.</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Motivation  Trends  Evolution of System Architectures  Current Status  NIC as First-Class Citizens  Problems and Solutions  Drawbacks  Conclusion</p>
  </div>
  <div class="page">
    <p>Drawbacks</p>
    <p>Proprietary Memory Bus  Non-standard interface, but bridges possible.</p>
    <p>Data Movement  Lose explicit program control.  Proposed solution currently applies only to bus-based cache</p>
    <p>coherence protocols.  High Risk</p>
    <p>Standard interface needs to be developed and adopted.</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Application-network bottleneck is the biggest challenge.  Incremental adjustments in the system architecture are no</p>
    <p>longer sufficient to allow network to realize its full capacity.</p>
    <p>Network interface cards must be treated as First-Class Citizens at par with other CPUs.</p>
  </div>
  <div class="page">
    <p>Questions??</p>
    <p>Contact Information:</p>
    <p>Wu-chun Feng (feng@cs.vt.edu) Pavan Balaji (balaji@mcs.anl.gov.in) Ajeet Singh (ajeets@vt.edu)</p>
  </div>
</Presentation>
