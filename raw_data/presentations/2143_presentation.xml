<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>BlueMountain Enabling Automated, Rich, and Versatile Data</p>
    <p>Management for Android Apps</p>
    <p>Sharath Chandrashekhara, Kyle Marcus, Rakesh G. M. Subramanya, Hrishikesh S. Karve, Karthik Dantu and Steven Y. Ko</p>
    <p>Reliable Mobile Systems Lab http://www.nsr.cse.buffalo.edu</p>
  </div>
  <div class="page">
    <p>Mobile Apps - State of Art</p>
    <p>Use local and cloud storage; rich forms of interaction, backup, sharing etc.</p>
    <p>Large companies use their own cloud; smaller developers use public cloud</p>
    <p>Too many cloud providers, no standard interface</p>
  </div>
  <div class="page">
    <p>Life as a Developer  Several design choices  Consistency models, interface</p>
    <p>and semantics  Tangential and repetitive  Binds an app to a particular</p>
    <p>cloud</p>
    <p>Developers want to reduce development time and provide more flexibility to users</p>
  </div>
  <div class="page">
    <p>Life as a User  Constrained by the developers</p>
    <p>decisions  Privacy concerns when data is</p>
    <p>moved to cloud  Has to contact the developers</p>
    <p>for any customization</p>
    <p>Users want flexibility and control</p>
  </div>
  <div class="page">
    <p>BlueMountain: Backup Scenario</p>
    <p>Android App BlueMountain</p>
    <p>Secure Private Cloud</p>
    <p>Dropbox</p>
  </div>
  <div class="page">
    <p>BlueMountain: P2P Sharing Scenario</p>
    <p>Android App BlueMountain</p>
  </div>
  <div class="page">
    <p>BlueMountain Goals  Reduce development effort: Focus on app logic; treat</p>
    <p>all storage operations as local  Automatically transform apps: Enable richer forms of</p>
    <p>data interaction  Flexibility: Customize without access to source code  Post-development cycle: Works with existing apps; no</p>
    <p>modifications to the Android platform for ease of deployment.</p>
  </div>
  <div class="page">
    <p>BlueMountain</p>
    <p>A system that automatically integrates cloud storage services with Android apps</p>
    <p>Main components  App Transformer: Analyses and rewrites app</p>
    <p>binaries by virtualizing the storage calls and enables richer data interactions</p>
    <p>Runtime: Runs as a regular app; and interacts with the cloud and manages policies</p>
  </div>
  <div class="page">
    <p>BlueMountain Architecture</p>
    <p>Apk</p>
    <p>BlueMountain Transformer</p>
    <p>Decompiler</p>
    <p>Analyzer</p>
    <p>Rewriter</p>
    <p>Smarter Apk (Instrumented)</p>
    <p>I/O</p>
    <p>Local Storage (SD Card)</p>
    <p>Cloud Storage</p>
    <p>Upload / Download</p>
    <p>BlueMountain Runtime</p>
    <p>Cloud API</p>
    <p>Policy Manager</p>
  </div>
  <div class="page">
    <p>Challenges: Storage Virtualization</p>
    <p>Can we virtualize storage calls?</p>
    <p>Android options:  Files  Database  Key/Value</p>
  </div>
  <div class="page">
    <p>Storage Call Virtualization</p>
    <p>Fig3: BlueMountain design</p>
    <p>Need to statically identify all possible storage options and their APIs</p>
    <p>More challenging than search and replace because of polymorphism</p>
    <p>BlueMountain Compiler</p>
    <p>Soot</p>
    <p>NoteTaking Apk</p>
    <p>BlueMountain Manager</p>
    <p>Cloud APIBackup / Restore</p>
    <p>I/O</p>
    <p>I/O</p>
    <p>Upload / Download</p>
    <p>Record Transformer</p>
    <p>Backup Lib</p>
    <p>Smarter NoteTaking Apk</p>
    <p>(Instrumented) Backup Service</p>
    <p>Cache (SD Card)</p>
    <p>DropBox</p>
  </div>
  <div class="page">
    <p>Challenges: Cloud APIs</p>
    <p>Sync API Custom API Realtime API</p>
    <p>Clients</p>
    <p>Storage Backend</p>
    <p>CRUD API CRUD API CRUD API</p>
    <p>Common Interface</p>
  </div>
  <div class="page">
    <p>Translator</p>
    <p>Database calls INSERT INTO table VALUES</p>
    <p>(value1,value2);</p>
    <p>get() put()</p>
    <p>Object Store</p>
    <p>Challenges: Interface</p>
    <p>How to translate?</p>
    <p>POSIX Filesystem calls read() write() lseek()</p>
    <p>SharedPreferences getInt() putInt()</p>
  </div>
  <div class="page">
    <p>Challenges: Semantics</p>
    <p>Handling concurrent updates  Most clouds provide only eventual consistency  Timing differences between local and cloud  Time-bound eventually-consistent model?  Getting additional inputs from the developers?</p>
  </div>
  <div class="page">
    <p>Related Work</p>
    <p>Viewbox, Simba - Fault tolerance and consistency guarantees</p>
    <p>Cimbiosys - Selective sharing of files  Procrastinator - Rewriting the binary  MetaSync - Enhances cloud services  CloudRail - Unified API</p>
  </div>
  <div class="page">
    <p>Conclusion &amp; Future Work</p>
    <p>Initial vision for BlueMountain - storage virtualization and cloud integration</p>
    <p>Developed a prototype to demonstrate these features  Future work</p>
    <p>Full implementation  Resolving interface and semantic mismatches  Analysing and categorizing the apps of Play Store</p>
    <p>and corporate apps which store data on their private cloud</p>
  </div>
  <div class="page">
    <p>BlueMountain Enabling Automated, Rich, and Versatile Data Management for Android Apps</p>
    <p>Sharath Chandrashekhara, Kyle Marcus, Rakesh G. M. Subramanya, Hrishikesh S. Karve, Karthik Dantu and Steven Y. Ko</p>
    <p>{sc296, kmarcus2, rakeshgu, hkarve, kdantu, stevko}@buffalo.edu Reliable Mobile Systems Lab http://www.nsr.cse.buffalo.edu</p>
  </div>
</Presentation>
