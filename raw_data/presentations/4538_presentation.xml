<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Acting on Norm Constrained Plans</p>
    <p>Nir Oren, Wamberto Vasconcelos, Felipe Menguzzi, Michael Luck n.oren@abdn.ac.uk, wvasconcelos@acm.org,</p>
    <p>meneguzz@cs.cmu.edu, michael.luck@kcl.ac.uk</p>
    <p>University of Aberdeen Carnegie Mellon University</p>
    <p>Kings College London</p>
    <p>Nir Oren et al. (Univ. Aberdeen) Acting on Norm Constrained Plans 1 / 21</p>
  </div>
  <div class="page">
    <p>Overview</p>
    <p>How can a BDI-like agent decide which plan to execute within an environment containing norms?</p>
    <p>System Components Constraints Actions and Plans Norms, Permissions and Conflicts</p>
    <p>Putting it all Together Environment Executing Actions From Plans to Norm Constrained Actions</p>
    <p>Nir Oren et al. (Univ. Aberdeen) Acting on Norm Constrained Plans 2 / 21</p>
  </div>
  <div class="page">
    <p>Constraints</p>
    <p>We utilise constraints to describe, and restrict actions. A set of constraints is viewed as a conjunction of individual constraints.</p>
    <p>X &lt; 4, Z  Y M = R + 4 Notation:  is a set of constraints. Standard definitions for unification, satisfaction etc.</p>
    <p>Nir Oren et al. (Univ. Aberdeen) Acting on Norm Constrained Plans 3 / 21</p>
  </div>
  <div class="page">
    <p>Action</p>
    <p>An action (  ) consists of a predicate and a constraint binding values to the variables in the predicate. Abstract actions have unground variables.</p>
    <p>move(A, B, X, Y )  A = X  B = Y</p>
    <p>One action,  can entail another,  iff whenever the constraints of  are satisfied, so are those of .</p>
    <p>Nir Oren et al. (Univ. Aberdeen) Acting on Norm Constrained Plans 4 / 21</p>
  </div>
  <div class="page">
    <p>Plans</p>
    <p>We treat a plan as a AND/OR tree (c.f. simple HTN planning). Leaf nodes represent primitive actions.</p>
    <p>relief(X,Y)</p>
    <p>intel(X,Y) cleanup(X,Y) build(X,Y)</p>
    <p>b_camp(X,Y) b_roads(X,Y)selfClear(X,Y) outsourceClear(X,Y)</p>
    <p>andN(intel (X, Y ), orN(selfClear (X, Y ),outsourceClear (X, Y )), b_camp(X, Y ), b_roads(X, Y ))</p>
    <p>Actions in plans can have constraints.</p>
    <p>Nir Oren et al. (Univ. Aberdeen) Acting on Norm Constrained Plans 5 / 21</p>
  </div>
  <div class="page">
    <p>Obligations</p>
    <p>O, P, F where  =    Like actions, we define entailment between norms, representing a specialisation relationship over norms. What does  = O   mean? Two choices:</p>
    <p>It is obligatory to execute  as constrained by  If executing action , it is obligatory to adhere to constraints</p>
    <p>Nir Oren et al. (Univ. Aberdeen) Acting on Norm Constrained Plans 6 / 21</p>
  </div>
  <div class="page">
    <p>Permissions and Prohibitions</p>
    <p>Permissions are exceptions to obligations and prohibitions. They have no meaning in isolation.</p>
    <p>OselfClear (X, Y ){X &lt; 30, Y = 20} PselfClear (X, Y ){X &lt; 40}</p>
    <p>Allows X to be less than 40 when the obligation is present without violating the obligation. The permission thus mitigates the obligation/prohibition. Prohibitions forbid an action to take place with the values specified in the constraint. A set of norms is in conflict if there is no consistent way to satisfy all its constraints (given the presence of mitigating permissions).</p>
    <p>Nir Oren et al. (Univ. Aberdeen) Acting on Norm Constrained Plans 7 / 21</p>
  </div>
  <div class="page">
    <p>Normative Rules</p>
    <p>Norms are typically situation dependent. A simple normative language identifies when a norm starts or ceases to exist.</p>
    <p>R ::= LHS  RHS LHS ::= | NLHS|NLHS</p>
    <p>NLHS ::= |NLHS  NLHS RHS ::= RHS  RHS||</p>
    <p>The language allows norm modification on action or conditional on the existence of another norm. Based on the work of Garcia-Camino et. al.</p>
    <p>Nir Oren et al. (Univ. Aberdeen) Acting on Norm Constrained Plans 8 / 21</p>
  </div>
  <div class="page">
    <p>Enactment States</p>
    <p>The execution of an action Modifies the physical environment. Can cause new norms to be instantiated, or existing ones to be removed. Might place constraints on future actions (via variable bindings).</p>
    <p>We represent the domain as a transition system between individual enactment states. Each enactment state captures the system at a single time point.</p>
    <p>= (, ) where  = {1, . . .n}</p>
    <p>An enactment state identifies the (hard) constraints that exist, and the norms that are in force.</p>
    <p>Nir Oren et al. (Univ. Aberdeen) Acting on Norm Constrained Plans 9 / 21</p>
  </div>
  <div class="page">
    <p>Transitioning Between States</p>
    <p>Garcia-Camino et. al. defined rules for (unambiguously) transitioning between enactment states. Our focus is different; we want to identify the possible enactment states that can result from the execution of an action.</p>
    <p>intel (X, Y ) 1 intel (5, 6) 2 intel (7, 8) 3 intel (2, 2) results in 1 within the new enactment state. intel (5, 6) results in 1,2 within the new enactment state. intel (A, B)?</p>
    <p>{1},{1,2},{1,3}, constrained appropriately.</p>
    <p>Nir Oren et al. (Univ. Aberdeen) Acting on Norm Constrained Plans 10 / 21</p>
  </div>
  <div class="page">
    <p>Transitioning Between States</p>
    <p>Given an enactment state, an action and a set of normative rules, we identify a set of potentially applicable rules. I.e. rules for which the LHS holds w.r.t the action and enactment state. We check for consistency in the constraints computed from the action executed, existing constraints and each element in the powerset of potentially applicable rules. Small subtlety: we need to include the constraints of the potentially applicable rules that are not applied.</p>
    <p>r1 = intel (X, Y )  X &lt; 5 1 r2 = intel (X, Y )  Y &gt; 2 2</p>
    <p>{X &lt; 5, Y &gt; 2},{1,2}, {X &lt; 5, Y  2},{1}, {X  5, Y &gt; 2},{2}, {X  5, Y  2},{}</p>
    <p>We remove all enactment states obtained due to the application of non-maximally consistent sets of potentially applicable rules.</p>
    <p>Nir Oren et al. (Univ. Aberdeen) Acting on Norm Constrained Plans 11 / 21</p>
  </div>
  <div class="page">
    <p>Transitioning Between States</p>
    <p>We place an ordering constraint on norm modification, adding norms before removing them. For any given path through the tree of enactment states,  is monotonic, tracking all constraints that have been imposed to that point in time. Note: constraints are only added due to the LHS of a rule, not its RHS.</p>
    <p>Nir Oren et al. (Univ. Aberdeen) Acting on Norm Constrained Plans 12 / 21</p>
  </div>
  <div class="page">
    <p>Where are we?</p>
    <p>Given a partially or fully ground action, an enactment state and a current set of norms we can now identify all possible enactment states that can be generated from that state. This enactment state identifies the constraints affecting the agent, and the active norms at that point in time. How can we decide what actions to execute within some enactment state? A few assumptions</p>
    <p>We have a plan library with each plan containing partially constrained actions. Achieving a plan yields utility. Violating a prohibition or an obligation, executing an action or utilising a permission, costs utility. Complying with norms yields utility.</p>
    <p>cost : Act  2Norms  2Norms  R</p>
    <p>Nir Oren et al. (Univ. Aberdeen) Acting on Norm Constrained Plans 13 / 21</p>
  </div>
  <div class="page">
    <p>Plan Selection</p>
    <p>We can select a plan for execution from a set of plans by Computing an enactment state tree for each possible path through the plan. Identifying the tree with the maximal associated utility.</p>
    <p>Rather than do all of this up front, we can perform a best first incremental search in the enactment state space</p>
    <p>Select a subset of norms for compliance. Minimally constrain the action to comply with those norms.</p>
    <p>Nir Oren et al. (Univ. Aberdeen) Acting on Norm Constrained Plans 14 / 21</p>
  </div>
  <div class="page">
    <p>Plan Selection</p>
    <p>It is easy to modify the basic approach to represent a fully norm compliant agent. The algorithm is guaranteed to terminate and is sound and complete. But of exponential complexity. It does however have anytime properties as we always track the best action sequence to date.</p>
    <p>Nir Oren et al. (Univ. Aberdeen) Acting on Norm Constrained Plans 15 / 21</p>
  </div>
  <div class="page">
    <p>Heuristics and Planning Complexity</p>
    <p>Its possible to modify our basic plan selection algorithm to act as an A* search. Its more difficult to find an admissible heuristic.</p>
    <p>Assume no more norm violations will occur That all norms will be complied with Monte-Carlo plan sampling</p>
    <p>Its also possible to prune plans which appear bad when compared to the current best plan.</p>
    <p>Removes completeness guarantee, unless the utility gain function is monotonic.</p>
    <p>Nir Oren et al. (Univ. Aberdeen) Acting on Norm Constrained Plans 16 / 21</p>
  </div>
  <div class="page">
    <p>An Example</p>
    <p>Nir Oren et al. (Univ. Aberdeen) Acting on Norm Constrained Plans 17 / 21</p>
  </div>
  <div class="page">
    <p>An Example</p>
    <p>andN(scanC, moveC, orN(nothing, pickup, explodeC))</p>
    <p>moveC  orN(move(X, Y , A, B)  A = X  B = Y , move(X, Y , A, B)  A = X + 1  B = Y , move(X, Y , A, B)  A = X  1  B = Y , move(X, Y , A, B)  A = X  B = Y + 1, move(X, Y , A, B)  A = X  B = Y  1)</p>
    <p>pickup(C, D), C = A  D = B</p>
    <p>Nir Oren et al. (Univ. Aberdeen) Acting on Norm Constrained Plans 18 / 21</p>
  </div>
  <div class="page">
    <p>An Example</p>
    <p>move(R4XO, R4YO, R4X, R4Y ) &gt; Fexplode(R4A, R4B)(R4A = R4X  R4B = R4Y )</p>
    <p>(R4A = R4X  1  R4B = R4Y ) (R4A = R4X + 1  R4B = R4Y ) (R4A = R4X  R4B = R4Y  1) (R4A = R4X  R4B = R4Y + 1)))</p>
    <p>Nir Oren et al. (Univ. Aberdeen) Acting on Norm Constrained Plans 19 / 21</p>
  </div>
  <div class="page">
    <p>Example</p>
    <p>We evaluated a norm aware agent, fully norm complaint agent and a norm unaware agent (following the basic plan). Results were unsurprising... One difficulty we encountered was representing the sensing action in the plan.</p>
    <p>Nir Oren et al. (Univ. Aberdeen) Acting on Norm Constrained Plans 20 / 21</p>
  </div>
  <div class="page">
    <p>Future Work</p>
    <p>Identify the effects of heuristics on the algorithm. Generalise our representation of obligation. Enrich the language</p>
    <p>Richer constraints multiple actions in a rule</p>
    <p>Integrate sensing/action effects into the model. Integrate uncertainty into the approach (MDPs)?</p>
    <p>Nir Oren et al. (Univ. Aberdeen) Acting on Norm Constrained Plans 21 / 21</p>
  </div>
</Presentation>
