<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>CAB-Fuzz: Practical Concolic Testing Techniques for COTS</p>
    <p>Operating Systems Su Yong Kim, Sangho Lee, Insu Yun, Wen Xu, Byoungyoung Lee, Youngtae Yun, Taesoo Kim</p>
    <p>USENIX Annual Technical Conference</p>
    <p>July 14, 2017</p>
    <p>The Affiliated Institute of ETRI Georgia Institute of Technology Purdue University</p>
  </div>
  <div class="page">
    <p>Why Microsoft cant detect a driver with a bug (NDProxy)? bool flag_table[125] = {false};</p>
    <p>void (*fn_table[36])();</p>
    <p>int dispatch_device_io_control(ulong ctrl_code, ulong *buf) {</p>
    <p>switch (ctrl_code) {</p>
    <p>case 0x8fff23c4:</p>
    <p>case 0x8fff23cc:</p>
    <p>if (buf[0]&gt;246 || buf[1]&gt;124 || buf[2]&gt;36)</p>
    <p>return -1;</p>
    <p>if (flag_table[buf[1]])</p>
    <p>(*fn_table[buf[2]])();</p>
    <p>for (int i=1; i&lt;=buf[0]; ++i) {}</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>Why Microsoft cant detect a driver with a bug (NDProxy)? bool flag_table[125] = {false};</p>
    <p>void (*fn_table[36])();</p>
    <p>int dispatch_device_io_control(ulong ctrl_code, ulong *buf) {</p>
    <p>switch (ctrl_code) {</p>
    <p>case 0x8fff23c4:</p>
    <p>case 0x8fff23cc:</p>
    <p>if (buf[0]&gt;246 || buf[1]&gt;124 || buf[2]&gt;36)</p>
    <p>return -1;</p>
    <p>if (flag_table[buf[1]])</p>
    <p>(*fn_table[buf[2]])();</p>
    <p>for (int i=1; i&lt;=buf[0]; ++i) {}</p>
    <p>}</p>
    <p>buf[2] == 36 -&gt; Out-of-bound execution</p>
    <p>buf[2]&gt;35</p>
  </div>
  <div class="page">
    <p>Why Microsoft cant detect a driver with a bug (NDProxy)? bool flag_table[125] = {false};</p>
    <p>void (*fn_table[36])();</p>
    <p>int dispatch_device_io_control(ulong ctrl_code, ulong *buf) {</p>
    <p>switch (ctrl_code) {</p>
    <p>case 0x8fff23c4:</p>
    <p>case 0x8fff23cc:</p>
    <p>if (buf[0]&gt;246 || buf[1]&gt;124 || buf[2]&gt;36)</p>
    <p>return -1;</p>
    <p>if (flag_table[buf[1]])</p>
    <p>(*fn_table[buf[2]])();</p>
    <p>for (int i=1; i&lt;=buf[0]; ++i) {}</p>
    <p>}</p>
    <p>buf[2] == 36 -&gt; Out-of-bound execution</p>
    <p>buf[2]&gt;35</p>
    <p>Microsofts large-scale fuzzing tools couldnt this bug</p>
  </div>
  <div class="page">
    <p>Challenge 1: Path explosion because of array and loop bool flag_table[125] = {false};</p>
    <p>void (*fn_table[36])();</p>
    <p>int dispatch_device_io_control(ulong ctrl_code, ulong *buf) {</p>
    <p>switch (ctrl_code) {</p>
    <p>case 0x8fff23c4:</p>
    <p>case 0x8fff23cc:</p>
    <p>if (buf[0]&gt;246 || buf[1]&gt;124 || buf[2]&gt;36)</p>
    <p>return -1;</p>
    <p>if (flag_table[buf[1]])</p>
    <p>(*fn_table[buf[2]])();</p>
    <p>for (int i=1; i&lt;=buf[0]; ++i) {}</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>Challenge 1: Path explosion because of array and loop bool flag_table[125] = {false};</p>
    <p>void (*fn_table[36])();</p>
    <p>int dispatch_device_io_control(ulong ctrl_code, ulong *buf) {</p>
    <p>switch (ctrl_code) {</p>
    <p>case 0x8fff23c4:</p>
    <p>case 0x8fff23cc:</p>
    <p>if (buf[0]&gt;246 || buf[1]&gt;124 || buf[2]&gt;36)</p>
    <p>return -1;</p>
    <p>if (flag_table[buf[1]])</p>
    <p>(*fn_table[buf[2]])();</p>
    <p>for (int i=1; i&lt;=buf[0]; ++i) {}</p>
    <p>}</p>
    <p>Symbolic variables</p>
  </div>
  <div class="page">
    <p>Challenge 1: Path explosion because of array and loop bool flag_table[125] = {false};</p>
    <p>void (*fn_table[36])();</p>
    <p>int dispatch_device_io_control(ulong ctrl_code, ulong *buf) {</p>
    <p>switch (ctrl_code) {</p>
    <p>case 0x8fff23c4:</p>
    <p>case 0x8fff23cc:</p>
    <p>if (buf[0]&gt;246 || buf[1]&gt;124 || buf[2]&gt;36)</p>
    <p>return -1;</p>
    <p>if (flag_table[buf[1]])</p>
    <p>(*fn_table[buf[2]])();</p>
    <p>for (int i=1; i&lt;=buf[0]; ++i) {}</p>
    <p>}</p>
    <p>Symbolic variables</p>
    <p>Symbolic memories</p>
  </div>
  <div class="page">
    <p>Challenge 1: Path explosion because of array and loop bool flag_table[125] = {false};</p>
    <p>void (*fn_table[36])();</p>
    <p>int dispatch_device_io_control(ulong ctrl_code, ulong *buf) {</p>
    <p>switch (ctrl_code) {</p>
    <p>case 0x8fff23c4:</p>
    <p>case 0x8fff23cc:</p>
    <p>if (buf[0]&gt;246 || buf[1]&gt;124 || buf[2]&gt;36)</p>
    <p>return -1;</p>
    <p>if (flag_table[buf[1]])</p>
    <p>(*fn_table[buf[2]])();</p>
    <p>for (int i=1; i&lt;=buf[0]; ++i) {}</p>
    <p>}</p>
    <p>Symbolic variables</p>
    <p>Symbolic memories</p>
    <p>Loop controlled by a symbolic variable 3</p>
  </div>
  <div class="page">
    <p>Challenge 1: Path explosion because of array and loop bool flag_table[125] = {false};</p>
    <p>void (*fn_table[36])();</p>
    <p>int dispatch_device_io_control(ulong ctrl_code, ulong *buf) {</p>
    <p>switch (ctrl_code) {</p>
    <p>case 0x8fff23c4:</p>
    <p>case 0x8fff23cc:</p>
    <p>if (buf[0]&gt;246 || buf[1]&gt;124 || buf[2]&gt;36)</p>
    <p>return -1;</p>
    <p>if (flag_table[buf[1]])</p>
    <p>(*fn_table[buf[2]])();</p>
    <p>for (int i=1; i&lt;=buf[0]; ++i) {}</p>
    <p>}</p>
    <p>Symbolic variables More than million paths (124 x 36 x 246) to explore</p>
    <p>because of two arrays and a single loop</p>
    <p>Symbolic memories</p>
    <p>Loop controlled by a symbolic variable 3</p>
  </div>
  <div class="page">
    <p>Challenge 1: Path explosion because of array and loop</p>
    <p>The number of feasible program paths to test exponentially increases according to its size</p>
    <p>COTS OS is complex and huge</p>
    <p>Almost infinite number of paths to test</p>
  </div>
  <div class="page">
    <p>Challenge 2: Difficulty in constructing pre-contexts to test targets bool flag_table[125] = {false}; // default: false</p>
    <p>void (*fn_table[36])();</p>
    <p>int dispatch_device_io_control(ulong ctrl_code, ulong *buf)</p>
    <p>{</p>
    <p>switch (ctrl_code) {</p>
    <p>case 0x8fff23c4:</p>
    <p>for (int i=0; i&lt;125; ++i)</p>
    <p>flag_table[i] = true;</p>
    <p>case 0x8fff23cc:</p>
    <p>if (flag_table[buf[1]])</p>
    <p>(*fn_table[buf[2]])();</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>Challenge 2: Difficulty in constructing pre-contexts to test targets bool flag_table[125] = {false}; // default: false</p>
    <p>void (*fn_table[36])();</p>
    <p>int dispatch_device_io_control(ulong ctrl_code, ulong *buf)</p>
    <p>{</p>
    <p>switch (ctrl_code) {</p>
    <p>case 0x8fff23c4:</p>
    <p>for (int i=0; i&lt;125; ++i)</p>
    <p>flag_table[i] = true;</p>
    <p>case 0x8fff23cc:</p>
    <p>if (flag_table[buf[1]])</p>
    <p>(*fn_table[buf[2]])();</p>
    <p>}</p>
    <p>should be executed to trigger the bug</p>
  </div>
  <div class="page">
    <p>Challenge 2: Difficulty in constructing pre-contexts to test targets bool flag_table[125] = {false}; // default: false</p>
    <p>void (*fn_table[36])();</p>
    <p>int dispatch_device_io_control(ulong ctrl_code, ulong *buf)</p>
    <p>{</p>
    <p>switch (ctrl_code) {</p>
    <p>case 0x8fff23c4:</p>
    <p>for (int i=0; i&lt;125; ++i)</p>
    <p>flag_table[i] = true;</p>
    <p>case 0x8fff23cc:</p>
    <p>if (flag_table[buf[1]])</p>
    <p>(*fn_table[buf[2]])();</p>
    <p>}</p>
    <p>should be executed to trigger the bug</p>
    <p>Difficult to construct pre-contexts to trigger bugs</p>
  </div>
  <div class="page">
    <p>Challenge 2: Difficulty in constructing pre-contexts to test targets</p>
    <p>Many functions and code blocks have precontexts to execute them correctly  Execution order to set up states (open before read), input</p>
    <p>validation (checksum),</p>
    <p>Difficult to construct or guess pre-contexts</p>
  </div>
  <div class="page">
    <p>Challenge 2: Difficulty in constructing pre-contexts to test targets</p>
    <p>Many functions and code blocks have precontexts to execute them correctly  Execution order to set up states (open before read), input</p>
    <p>validation (checksum),</p>
    <p>Difficult to construct or guess pre-contexts</p>
    <p>Research goal: Can we make a concolic testing tool that 1) avoids path explosion and</p>
  </div>
  <div class="page">
    <p>Idea 1: Test paths likely having bugs first</p>
    <p>Prioritize array and loop boundary states</p>
    <p>Detect bugs due to a lack of proper boundary checks</p>
  </div>
  <div class="page">
    <p>Idea 2: Construct pre-contexts using real programs</p>
    <p>Let real programs run until they call target OS APIs  Would have prepared necessary conditions before calling</p>
    <p>the APIs (they will call open syscall before read syscall)</p>
    <p>Hook the API calls and initiate concolic testing</p>
  </div>
  <div class="page">
    <p>Promising results</p>
    <p>Implemented by modifiying S2E and evaluated with Windows 7 and Windows Server 2008</p>
    <p>Found 21 unique crashes in six device drivers  Two local privilege escalation vulnerabilities</p>
    <p>Information disclosure in a crypto driver</p>
  </div>
  <div class="page">
    <p>Overview of CAB-Fuzz</p>
  </div>
  <div class="page">
    <p>Synthetic symbolization with S2E</p>
    <p>ulong ctrl_code = 0; ulong in_buf[IN_BUF_SIZE] = {0};</p>
    <p>NtCreateFile(&amp;device_handle,, &amp;object_attributes,);</p>
    <p>s2e_make_symbolic(&amp;ctrl_code, sizeof(ctrl_code), code);</p>
    <p>s2e_make_symbolic(&amp;in_buf, sizeof(in_buf), buf);</p>
    <p>NtDeviceIoControlFile(</p>
    <p>device_handle, NULL, NULL, NULL,</p>
    <p>&amp;io_status_block,</p>
    <p>ctrl_code, &amp;in_buf, IN_BUF_SIZE,</p>
    <p>&amp;out_buf, OUT_BUF_SIZE);</p>
  </div>
  <div class="page">
    <p>Synthetic symbolization with S2E</p>
    <p>ulong ctrl_code = 0; ulong in_buf[IN_BUF_SIZE] = {0};</p>
    <p>NtCreateFile(&amp;device_handle,, &amp;object_attributes,);</p>
    <p>s2e_make_symbolic(&amp;ctrl_code, sizeof(ctrl_code), code);</p>
    <p>s2e_make_symbolic(&amp;in_buf, sizeof(in_buf), buf);</p>
    <p>NtDeviceIoControlFile(</p>
    <p>device_handle, NULL, NULL, NULL,</p>
    <p>&amp;io_status_block,</p>
    <p>ctrl_code, &amp;in_buf, IN_BUF_SIZE,</p>
    <p>&amp;out_buf, OUT_BUF_SIZE);</p>
    <p>Specify target API</p>
  </div>
  <div class="page">
    <p>Synthetic symbolization with S2E</p>
    <p>ulong ctrl_code = 0; ulong in_buf[IN_BUF_SIZE] = {0};</p>
    <p>NtCreateFile(&amp;device_handle,, &amp;object_attributes,);</p>
    <p>s2e_make_symbolic(&amp;ctrl_code, sizeof(ctrl_code), code);</p>
    <p>s2e_make_symbolic(&amp;in_buf, sizeof(in_buf), buf);</p>
    <p>NtDeviceIoControlFile(</p>
    <p>device_handle, NULL, NULL, NULL,</p>
    <p>&amp;io_status_block,</p>
    <p>ctrl_code, &amp;in_buf, IN_BUF_SIZE,</p>
    <p>&amp;out_buf, OUT_BUF_SIZE);</p>
    <p>Specify target drivers</p>
    <p>Symbolize two arguments</p>
    <p>Specify target API</p>
  </div>
  <div class="page">
    <p>Synthetic symbolization with S2E</p>
    <p>ulong ctrl_code = 0; ulong in_buf[IN_BUF_SIZE] = {0};</p>
    <p>NtCreateFile(&amp;device_handle,, &amp;object_attributes,);</p>
    <p>s2e_make_symbolic(&amp;ctrl_code, sizeof(ctrl_code), code);</p>
    <p>s2e_make_symbolic(&amp;in_buf, sizeof(in_buf), buf);</p>
    <p>NtDeviceIoControlFile(</p>
    <p>device_handle, NULL, NULL, NULL,</p>
    <p>&amp;io_status_block,</p>
    <p>ctrl_code, &amp;in_buf, IN_BUF_SIZE,</p>
    <p>&amp;out_buf, OUT_BUF_SIZE);</p>
    <p>Specify target drivers</p>
    <p>Symbolize two arguments</p>
    <p>Specify target API</p>
    <p>Dont symbolize the size to avoid path explosion</p>
  </div>
  <div class="page">
    <p>Array-boundary prioritization</p>
    <p>Concretize the lowest and highest addresses of symbolic memory first</p>
    <p>Compute the boundary addresses using KLEE solvers getRange function  For symbolic memory triggering a state fork at least twice</p>
  </div>
  <div class="page">
    <p>Loop-boundary prioritization</p>
    <p>Concretize a loop as no loop execution, a single execution, and the maximum executions</p>
    <p>Use a fork-and-kill approach to deal with unclear loop conditions and structures  Let a loop execute until it forks no more states (maximum)</p>
    <p>Kill or pause uninteresting loop states</p>
  </div>
  <div class="page">
    <p>Prioritization reduces # of state forks to detect a bug</p>
    <p>if (buf[0]&gt;246 &amp;&amp;</p>
    <p>buf[1]&gt;124 &amp;&amp;</p>
    <p>buf[2]&gt;36)</p>
    <p>return -1;</p>
    <p>if (flag_table[buf[1])</p>
    <p>(*fn_table[buf[2]])();</p>
    <p>for (int i=1; i&lt;=buf[0];</p>
    <p>++i) {}</p>
  </div>
  <div class="page">
    <p>Prioritization reduces # of state forks to detect a bug</p>
    <p>if (buf[0]&gt;246 &amp;&amp;</p>
    <p>buf[1]&gt;124 &amp;&amp;</p>
    <p>buf[2]&gt;36)</p>
    <p>return -1;</p>
    <p>if (flag_table[buf[1])</p>
    <p>(*fn_table[buf[2]])();</p>
    <p>for (int i=1; i&lt;=buf[0];</p>
    <p>++i) {}</p>
    <p>if (flag_table[buf[1])</p>
    <p>(*fn_table[0])();</p>
    <p>for (int i=1; i&lt;=buf[0];</p>
    <p>++i) {}</p>
    <p>if (flag_table[buf[1])</p>
    <p>(*fn_table[0])();</p>
    <p>for (int i=1; i&lt;=0;</p>
    <p>++i) {}</p>
    <p>if (flag_table[buf[1])</p>
    <p>(*fn_table[0])();</p>
    <p>for (int i=1; i&lt;=1;</p>
    <p>++i) {}</p>
    <p>if (flag_table[buf[1])</p>
    <p>(*fn_table[0])();</p>
    <p>for (int i=1; i&lt;=246;</p>
    <p>++i) {}</p>
  </div>
  <div class="page">
    <p>Prioritization reduces # of state forks to detect a bug</p>
    <p>if (buf[0]&gt;246 &amp;&amp;</p>
    <p>buf[1]&gt;124 &amp;&amp;</p>
    <p>buf[2]&gt;36)</p>
    <p>return -1;</p>
    <p>if (flag_table[buf[1])</p>
    <p>(*fn_table[buf[2]])();</p>
    <p>for (int i=1; i&lt;=buf[0];</p>
    <p>++i) {}</p>
    <p>if (flag_table[buf[1])</p>
    <p>(*fn_table[0])();</p>
    <p>for (int i=1; i&lt;=buf[0];</p>
    <p>++i) {}</p>
    <p>if (flag_table[buf[1])</p>
    <p>(*fn_table[36])();</p>
    <p>for (int i=1; i&lt;=buf[0];</p>
    <p>++i) {}</p>
    <p>if (flag_table[buf[1])</p>
    <p>(*fn_table[0])();</p>
    <p>for (int i=1; i&lt;=0;</p>
    <p>++i) {}</p>
    <p>if (flag_table[buf[1])</p>
    <p>(*fn_table[0])();</p>
    <p>for (int i=1; i&lt;=1;</p>
    <p>++i) {}</p>
    <p>if (flag_table[buf[1])</p>
    <p>(*fn_table[0])();</p>
    <p>for (int i=1; i&lt;=246;</p>
    <p>++i) {}</p>
    <p>Crash! 14</p>
  </div>
  <div class="page">
    <p>On-the-fly symbolization</p>
    <p>Run a real program</p>
  </div>
  <div class="page">
    <p>On-the-fly symbolization</p>
    <p>Run a real program</p>
    <p>Interact with kernel</p>
  </div>
  <div class="page">
    <p>On-the-fly symbolization</p>
    <p>Run a real program</p>
    <p>Interact with kernel</p>
    <p>Call a target function with valid arguments</p>
    <p>Hooking</p>
  </div>
  <div class="page">
    <p>On-the-fly symbolization</p>
    <p>Run a real program</p>
    <p>Interact with kernel</p>
    <p>Call a target function with valid arguments</p>
    <p>Initiate concolic testing</p>
    <p>Hooking</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>How efficiently did CAB-Fuzz detect the known vulnerability (NDProxy)?</p>
    <p>How many new crashes did CAB-Fuzz discover?</p>
    <p>What particular characteristics did the newly discovered crashes exhibit?</p>
  </div>
  <div class="page">
    <p>CAB-Fuzz crashed NDProxy within two seconds</p>
    <p>No priortization Prioritization</p>
    <p>No prioritization Priortization</p>
    <p>~2 hours!</p>
    <p>T im</p>
    <p>e (</p>
    <p>s)</p>
    <p># E</p>
    <p>x p</p>
    <p>lo re</p>
    <p>d S</p>
    <p>ta te</p>
    <p>s 17</p>
  </div>
  <div class="page">
    <p>CAB-Fuzz found 21 new crashes</p>
    <p>Synthetic symbolization  274 device drivers in Windows 7 and Windows Server 2008</p>
    <p>On-the-fly symbolization  16 real programs and 15 drivers the programs used</p>
    <p>Found 21 crashes in six among the drivers</p>
  </div>
  <div class="page">
    <p>CAB-Fuzz found 21 new crashes</p>
    <p>NDIS SrvAdmin NSI ASYNCMAC FileInfo ehdrv</p>
    <p>No prioritization Prioritization On-the-fly</p>
    <p># C</p>
    <p>ra sh</p>
    <p>e s</p>
    <p>Synthetic symbolization</p>
  </div>
  <div class="page">
    <p>CAB-Fuzz found 21 new crashes</p>
    <p>NDIS SrvAdmin NSI ASYNCMAC FileInfo ehdrv</p>
    <p>No prioritization Prioritization On-the-fly</p>
    <p>A lack of memory (path explosion)</p>
    <p># C</p>
    <p>ra sh</p>
    <p>e s</p>
    <p>Synthetic symbolization</p>
  </div>
  <div class="page">
    <p>CAB-Fuzz found 21 new crashes</p>
    <p>NDIS SrvAdmin NSI ASYNCMAC FileInfo ehdrv</p>
    <p>No prioritization Prioritization On-the-fly</p>
    <p>A lack of memory (path explosion)</p>
    <p># C</p>
    <p>ra sh</p>
    <p>e s</p>
    <p>Pre-contexts needed</p>
    <p>Synthetic symbolization</p>
  </div>
  <div class="page">
    <p>CAB-Fuzz found 21 new crashes</p>
    <p>NDIS SrvAdmin NSI ASYNCMAC FileInfo ehdrv</p>
    <p>No prioritization Prioritization On-the-fly</p>
    <p>A lack of memory (path explosion)</p>
    <p># C</p>
    <p>ra sh</p>
    <p>e s</p>
    <p>Pre-contexts needed</p>
    <p>Invalid pre-context needed</p>
    <p>Synthetic symbolization</p>
  </div>
  <div class="page">
    <p>CAB-Fuzz found 21 new crashes</p>
    <p>NDIS SrvAdmin NSI ASYNCMAC FileInfo ehdrv</p>
    <p>No prioritization Prioritization On-the-fly</p>
    <p>A lack of memory (path explosion)</p>
    <p># C</p>
    <p>ra sh</p>
    <p>e s</p>
    <p>Pre-contexts needed</p>
    <p>Invalid pre-context needed</p>
    <p>Synthetic symbolization</p>
    <p>No program for on-the-fly</p>
  </div>
  <div class="page">
    <p>CAB-Fuzz found 21 new crashes</p>
    <p>NDIS SrvAdmin NSI ASYNCMAC FileInfo ehdrv</p>
    <p>No prioritization Prioritization On-the-fly</p>
    <p>A lack of memory (path explosion)</p>
    <p># C</p>
    <p>ra sh</p>
    <p>e s</p>
    <p>Pre-contexts needed</p>
    <p>Invalid pre-context needed</p>
    <p>Synthetic symbolization</p>
    <p>No program for on-the-fly</p>
    <p>Synthetic and on-the-fly symbolizations are complementary to each other</p>
  </div>
  <div class="page">
    <p>What pre-contexts did drivers need?</p>
    <p>Selectively loaded (FileInfo)  Filesystem filter driver by Microsoft</p>
    <p>Loaded only when a certain program started</p>
    <p>Access controlled (ehdrv)  Driver installed by antivirus software ESET Smart Security</p>
    <p>Only accessible by the antivirus software itself</p>
  </div>
  <div class="page">
    <p>Prioritization reduced CPU time and memory usage</p>
    <p>NDIS SrvAdmin NSI</p>
    <p>No prioritization Prioritization</p>
    <p>T im</p>
    <p>e (</p>
    <p>s)</p>
    <p>NDIS SrvAdmin NSI</p>
    <p>No prioritization Prioritization</p>
    <p>M e</p>
    <p>m o</p>
    <p>ry (</p>
    <p>M B</p>
    <p>) 21</p>
  </div>
  <div class="page">
    <p>Limitations</p>
    <p>Reduce code coverage when prioritizing symbolic memory with instruction addresses (e.g., jump table)</p>
    <p>Cannot get boundary states from flexible data structures (e.g., linked list)</p>
  </div>
  <div class="page">
    <p>Limitations</p>
    <p>Have difficulties in regenerating on-the-flydriven crashes  Lack of explicit control of pre-contexts construction</p>
    <p>Need to specify target APIs and programs</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>CAB-Fuzz: A practical concolic testing tool for COTS OS  Check potentially vulnerable paths first</p>
    <p>Analyze COTS OS without debug information and pre-contexts</p>
    <p>Found 21 crashes including three vulnerabilities with CVEs</p>
  </div>
</Presentation>
