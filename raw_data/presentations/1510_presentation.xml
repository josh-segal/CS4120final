<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Chronicle: Capture and Analysis of NFS Workloads at Line Rate</p>
    <p>Ardalan Kangarlou, Sandip Shete, and John Strunk  Advanced Technology Group</p>
    <p>2015 NetApp, Inc. All rights reserved. 1</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Goal: To gather insights from customer workloads via trace capture and real-time analysis.</p>
    <p>2015 NetApp, Inc. All rights reserved. 2</p>
    <p>Evaluating new algorithms Design</p>
    <p>Designing representative benchmarks Test</p>
    <p>Diagnosing problems and misconfigurations Support</p>
    <p>Identifying appropriate storage platforms Sales</p>
  </div>
  <div class="page">
    <p>Use Case 1: Research</p>
    <p>An I/O-by-I/O view of workloads is preferred for research in</p>
    <p>Data caching, prefetching, and tiering techniques</p>
    <p>Data deduplication analysis</p>
    <p>Creation of representative benchmarks for real-world workloads</p>
    <p>Studying data access and growth patterns over time</p>
    <p>2015 NetApp, Inc. All rights reserved.</p>
  </div>
  <div class="page">
    <p>Use Case 2: Sales</p>
    <p>2015 NetApp, Inc. All rights reserved. 4</p>
    <p>Which platform?</p>
    <p>Workload Sizing Questionnaire  I/O rate?  Number of clients?  Random read working set size?  Ratio of random reads vs. random writes?</p>
  </div>
  <div class="page">
    <p>Chronicle Framework</p>
    <p>2015 NetApp, Inc. All rights reserved. 5</p>
    <p>Capture and real-time analysis of NFSv3 workloads</p>
    <p>Rates above 10Gb/s</p>
    <p>Commodity hardware</p>
    <p>NFS clients NFS server</p>
    <p>Chronicle appliance</p>
    <p>Passive network monitoring</p>
    <p>Runs for days to weeks</p>
    <p>Programmer-friendly and extensible API</p>
  </div>
  <div class="page">
    <p>Background  NFS Traffic</p>
    <p>2015 NetApp, Inc. All rights reserved. 6</p>
    <p>IP header</p>
    <p>Physical Link</p>
    <p>Network</p>
    <p>Transport Session</p>
    <p>Presentation</p>
    <p>Application</p>
    <p>RPC</p>
    <p>NFS</p>
    <p>OSI reference model</p>
    <p>Ethernet header</p>
    <p>TCP header Deep Packet Inspection (DPI)</p>
    <p>RPC Protocol Data Unit (PDU)</p>
    <p>T C</p>
    <p>P r</p>
    <p>ea ss</p>
    <p>em bl</p>
    <p>y</p>
    <p>NFS PDU</p>
  </div>
  <div class="page">
    <p>Background  NAS Tracing  [Ellard-FAST03] and [Leung-ATC08]</p>
    <p>NFS and CIFS workload analysis based on pcap traces</p>
    <p>Driverdump [Anderson-FAST09]  The fastest software-only solution operating @ 1.4Gb/s  Network driver stores packets directly in the pcap format</p>
    <p>Main limitations for our use case:  Packet capture through the lossy pcap interface</p>
    <p>High storage bandwidth and capacity requirements  Trace capture @ 10Gb/s for a week requires 750TB of storage!</p>
    <p>pcap traces require offline parsing of data  Stateless parsing: inability to parse fields that span packets</p>
    <p>2015 NetApp, Inc. All rights reserved. 7</p>
  </div>
  <div class="page">
    <p>Our Approach  Efficient Trace Storage</p>
    <p>2015 NetApp, Inc. All rights reserved. 8</p>
    <p>Instead of storing raw packets (i.e., pcap format)  Use DPI to identify fields of interests in packets  Checksum read and write data for data deduplication analysis  Leverage DataSeries [Anderson-OSR09] as the trace format</p>
    <p>Efficient storage of structured, serial data  Inline compression, non-blocking I/O, and delta encoding  Extents for storing RPC-, NFS-, and network-level information as well as</p>
    <p>read/write data checksums</p>
    <p>With above techniques, a single standard disk can handle the storage bandwidth requirements for tracing at line rate!</p>
    <p>record_id operation Simplified RPC extent</p>
    <p>request_ts reply_ts client server transaction_id</p>
  </div>
  <div class="page">
    <p>Background  Packet Processing</p>
    <p>Active area of research in software routing and network security:  Common techniques: partitioning and pipelining work across cores, judicious</p>
    <p>placement and scheduling of threads, minimizing synchronization overhead, batch processing, recycling allocated memory, zero-copy parsing, and bypassing kernel</p>
    <p>Some examples:  RouteBricks [Dobrescu-SOSP09]:</p>
    <p>Packet forwarding @ 10Gb/s, packet routing @ 6.4Gb/s, and IPsec @ 1.4Gb/s  Required tedious manual tuning</p>
    <p>NetSlices [Marian-ANCS12]:  Fixed mapping between packets and cores to support 9.7Gb/s routing throughput</p>
    <p>Click [Kohler-TOCS00, Chen-USENIXATC01]  Kernel-mode (3-4 Mpps per core) and user-mode (490 Kpps)</p>
    <p>netmap [Rizzo-USENIXATC12, Rizzo-INFOCOM12]:  Send/receive packets at line rate (14.88 Mpps @ 10Gb/s); 20ns/pkt vs. 500-1000ns/pkt for sockets  User-space Click on netmap resulted in the same throughput as kernel-mode Click (3.9Mpps)</p>
    <p>2015 NetApp, Inc. All rights reserved. 9</p>
  </div>
  <div class="page">
    <p>Packet Processing Frameworks cont.</p>
    <p>Major limitations for our use case:  A network-centric view of packet processing:</p>
    <p>No DPI, TCP reassembly, and stateful parsing across packets  Fixed, small per-packet processing cost  Maintaining low latency is as important as high throughput</p>
    <p>Manual tuning for specific hardware platforms  Management of shared resources and state (e.g., locks, thread-safe</p>
    <p>queues, etc.)  Kernel implementations are hard to extend with custom libraries</p>
    <p>Main Challenge:</p>
    <p>To extend proven packet processing techniques to the application layer, for a more CPU-intensive use case, and in a programmer-friendly manner!</p>
    <p>2015 NetApp, Inc. All rights reserved. 10</p>
  </div>
  <div class="page">
    <p>Our Approach  Packet Processing</p>
    <p>Libtask: A user-space actor model library  Performance:</p>
    <p>Seamless scalability to many cores  Implicit batching of work to support high throughput</p>
    <p>Flexibility and usability:  A pluggable, pipelined architecture  Portable software by hiding hardware configuration from users  Unburden application programmers of concurrency bugs</p>
    <p>Leverage netmap instead of libpcap for reading packets  Efficient framework for bypassing kernel based on modified network</p>
    <p>drivers  We extended netmap to support jumbo frames</p>
    <p>2015 NetApp, Inc. All rights reserved. 11</p>
  </div>
  <div class="page">
    <p>Background  Actor Model Programming</p>
    <p>2015 NetApp, Inc. All rights reserved. 12</p>
    <p>Actor: A computation agent that processes tasks</p>
    <p>Message: Information to be shared with a target actor about a task or tasks</p>
  </div>
  <div class="page">
    <p>Libtask</p>
    <p>2015 NetApp, Inc. All rights reserved. 13</p>
    <p>A light-weight actor model library written in C++  Three constructs: Scheduler , Process , and Message</p>
    <p>Core</p>
  </div>
  <div class="page">
    <p>Libtask cont.</p>
    <p>2015 NetApp, Inc. All rights reserved. 14</p>
    <p>Load balancing and seamless scalability  Two versions of Libtask: NUMA-aware and NUMA-agnostic</p>
    <p>Core Core Core Core</p>
    <p>NUMA-aware NUMA-agnostic</p>
    <p>CPU 1 CPU 2</p>
  </div>
  <div class="page">
    <p>Chronicle Architecture</p>
    <p>2015 NetApp, Inc. All rights reserved. 15</p>
    <p>Packet Reader</p>
    <p>Network Parser</p>
    <p>Packet Reader</p>
    <p>Network Parser</p>
    <p>Packet Reader</p>
    <p>Network Parser Chronicle Pipeline n</p>
    <p>Chronicle Pipeline 2</p>
    <p>Chronicle Pipeline 1</p>
  </div>
  <div class="page">
    <p>Workload Sizing Questionnaire  I/O rate?  Number of clients?  Random read working set size?  Ratio of random reads vs.</p>
    <p>random writes?</p>
    <p>Chronicle Pipelines</p>
    <p>2015 NetApp, Inc. All rights reserved. 16</p>
    <p>Trace Capture Pipeline</p>
    <p>RPC Parser</p>
    <p>NFS Parser</p>
    <p>Checksum Module</p>
    <p>DataSeries Writer</p>
    <p>Workload Sizer Pipeline</p>
    <p>RPC Parser</p>
    <p>NFS Parser</p>
    <p>Workload Sizer</p>
  </div>
  <div class="page">
    <p>Chronicle Modules  RPC Parser  Reassembly of TCP segments</p>
    <p>Construction of RPC PDUs</p>
    <p>Two modes of operation</p>
    <p>2015 NetApp, Inc. All rights reserved. 17</p>
    <p>Filtering of TCP and RPC traffic</p>
    <p>Detection and parsing of RPC header</p>
    <p>Matching RPC replies with the corresponding calls</p>
    <p>RPC Protocol Data Unit (PDU)</p>
    <p>IP header TCP header</p>
    <p>T C</p>
    <p>P r</p>
    <p>ea ss</p>
    <p>em bl</p>
    <p>y</p>
    <p>NFS PDU</p>
    <p>Ethernet header RPC header RPC header</p>
    <p>Fast mode Slow mode</p>
  </div>
  <div class="page">
    <p>More information on Chronicle</p>
    <p>Please refer to the paper for more information on the following:</p>
    <p>The functions of each module in the pipeline  The messages passed between modules</p>
    <p>Chronicles novel, zero-copy application layer parsing approach</p>
    <p>A comprehensive comparison with other packet processing frameworks</p>
    <p>Insights from Chronicle that helped our customers</p>
    <p>2015 NetApp, Inc. All rights reserved. 18</p>
  </div>
  <div class="page">
    <p>Evaluation Setup</p>
    <p>2015 NetApp, Inc. All rights reserved. 19</p>
    <p>Chronicle server:  Two Intel Xeon E5-2690 2.90GHz CPUs (8 physical cores/16 logical</p>
    <p>cores per CPU)  128GB of 1600MHz DDR3 DRAM memory (64GB per CPU)  Two dual-port Intel 82599EB 10GbE NICs  Ten 3TB SATA disks  3.2.32 Linux kernel</p>
    <p>A NetApp FAS6280 as the NFS server</p>
    <p>$10,000</p>
  </div>
  <div class="page">
    <p>Libtask Evaluation  Message Ring Benchmark</p>
    <p>sa ge</p>
    <p>s/ s</p>
    <p>(x 10 )</p>
    <p>Schedulers</p>
    <p>NUMA-aware Libtask NUMA-agnostic Libtask Erlang (V: R15B01) Go (V: 1.0.2)</p>
    <p>2015 NetApp, Inc. All rights reserved. 20</p>
    <p>1000 Processes pass ~100M Messages in a ring</p>
    <p>100 outstanding Messages at a given time</p>
    <p>Averages of 10 runs</p>
  </div>
  <div class="page">
    <p>Libtask Evaluation  All-to-All Benchmark</p>
    <p>M es</p>
    <p>sa ge</p>
    <p>s/ s</p>
    <p>(x 10 )</p>
    <p>Schedulers</p>
    <p>NUMA-aware Libtask NUMA-agnostic Libtask Erlang (V: R15B01) Go (V: 1.0.2)</p>
    <p>2015 NetApp, Inc. All rights reserved. 21</p>
    <p>100 Processes pass ~100M Messages randomly</p>
    <p>1000 outstanding Messages at a given time</p>
    <p>Averages of 10 runs</p>
  </div>
  <div class="page">
    <p>Chronicle Evaluation  Maximum Sustained Throughput</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (G</p>
    <p>b/ s)</p>
    <p>Cores</p>
    <p>2015 NetApp, Inc. All rights reserved. 22</p>
    <p>&lt; 2.5GB of RAM usage</p>
    <p>One client issuing 64KB sequential R/W ops across two 10Gb links using fio workload generator</p>
    <p>NFS server max: 14Gb/s</p>
    <p>max</p>
    <p>min</p>
    <p>avg</p>
  </div>
  <div class="page">
    <p>Chronicle Evaluation  Maximum Sustained IOPS</p>
    <p>O pe</p>
    <p>ra tio</p>
    <p>ns /s</p>
    <p>(x 10 )</p>
    <p>Cores</p>
    <p>2015 NetApp, Inc. All rights reserved. 23</p>
    <p>One client issuing 1B sequential R/W ops across two 10Gb links using fio workload generator</p>
    <p>&lt; 100MB of RAM usage</p>
    <p>NFS server max: 106KIOPS</p>
    <p>&lt; 0.0001% op loss for 8-32 cores</p>
    <p>max</p>
    <p>min</p>
    <p>avg</p>
  </div>
  <div class="page">
    <p>Chronicle Evaluation  Packet Loss</p>
    <p>2015 NetApp, Inc. All rights reserved. 24</p>
    <p>Controlled experiment to study the impact of packet loss at 10Gb/s</p>
  </div>
  <div class="page">
    <p>Chronicle Evaluation  Trace Storage Efficiency</p>
    <p>7-hour-long trace of a production workload</p>
    <p>40x reduction in trace size over pcap traces (1.8TB 44.6GB)!</p>
    <p>2015 NetApp, Inc. All rights reserved. 25</p>
    <p>Pcap DS Total Network RPC NFS Checksum</p>
    <p>E xt</p>
    <p>en t s</p>
    <p>iz e</p>
    <p>(G B</p>
    <p>)</p>
    <p>p DS Uncompressed DS Compressed</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>Chronicle is an efficient framework for trace capture and realtime analysis of NFS workloads:  Operates at 14Gb/s using general-purpose CPUs, disks, and NICs  Based on actor model programming  Seamless scalability and a pluggable, pipelined  Programmer-friendly API  CPU-intensive operations like stateful parsing, pattern matching, data</p>
    <p>checksumming, and compression  Extensible to support other network storage protocols (e.g., SMB/</p>
    <p>CIFS, iSCSI, RESTful key-value store protocols)</p>
    <p>2015 NetApp, Inc. All rights reserved. 26</p>
  </div>
  <div class="page">
    <p>Questions?</p>
    <p>Thank You!</p>
    <p>Chronicles source code is available under an academic, non-commercial license:</p>
    <p>https://github.com/NTAP/chronicle</p>
    <p>2015 NetApp, Inc. All rights reserved. 27</p>
  </div>
  <div class="page">
    <p>Use Case 3: Data-Driven Management</p>
    <p>2015 NetApp, Inc. All rights reserved. 28</p>
  </div>
  <div class="page">
    <p>Libtask Evaluation  Message Ring Benchmark</p>
    <p>M es</p>
    <p>sa ge</p>
    <p>s/ s</p>
    <p>(x 10 )</p>
    <p>Threads</p>
    <p>NUMA-aware Libtask NUMA-agnostic Libtask NUMA-aware libtask + load NUMA-agnostic libtask + load Erlang (V: R15B01) Go (V: 1.0.2)</p>
    <p>2015 NetApp, Inc. All rights reserved. 29</p>
  </div>
  <div class="page">
    <p>Libtask Evaluation  All-to-All Benchmark</p>
    <p>M es</p>
    <p>sa ge</p>
    <p>s/ s</p>
    <p>(x 10 )</p>
    <p>Threads</p>
    <p>NUMA-aware Libtask NUMA-agnostic Libtask NUMA-aware libtask + load NUMA-agnostic libtask + load Erlang (V: R15B01) Go (V: 1.0.2)</p>
    <p>2015 NetApp, Inc. All rights reserved. 30</p>
  </div>
  <div class="page">
    <p>Chronicle Evaluation  Maximum Sustained Throughput</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (G</p>
    <p>b/ s)</p>
    <p>Cores</p>
    <p>2015 NetApp, Inc. All rights reserved. 31</p>
    <p>N or</p>
    <p>m al</p>
    <p>iz ed</p>
    <p>C P</p>
    <p>U</p>
    <p>us ag</p>
    <p>e (%</p>
    <p>)</p>
    <p>Cores</p>
    <p>. m em</p>
    <p>or y</p>
    <p>us ag</p>
    <p>e (G</p>
    <p>B )</p>
    <p>Cores</p>
    <p>Lo ss</p>
    <p>(% )</p>
    <p>Cores</p>
    <p>NFS calls NFS replies</p>
    <p>NFS server max</p>
  </div>
  <div class="page">
    <p>Chronicle Evaluation  Maximum Sustained IOPS</p>
    <p>ra tio</p>
    <p>ns /s</p>
    <p>(x 10 )</p>
    <p>Cores</p>
    <p>2015 NetApp, Inc. All rights reserved. 32</p>
    <p>N or</p>
    <p>m al</p>
    <p>iz ed</p>
    <p>C P</p>
    <p>U</p>
    <p>us ag</p>
    <p>e (%</p>
    <p>)</p>
    <p>Cores</p>
    <p>m em</p>
    <p>or y</p>
    <p>us ag</p>
    <p>e (G</p>
    <p>B )</p>
    <p>Cores</p>
    <p>Lo ss</p>
    <p>(% )</p>
    <p>Cores</p>
    <p>NFS calls NFS replies</p>
    <p>NFS server max</p>
  </div>
</Presentation>
