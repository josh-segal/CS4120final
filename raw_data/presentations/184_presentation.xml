<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>A.B. Kahng, Ion I. MandoiuA.B. Kahng, Ion I. Mandoiu University of California at San Diego, USA</p>
    <p>A.Z. ZelikovskyA.Z. Zelikovsky Georgia State University, USA</p>
    <p>Supported in part by MARCO GSRC and Cadence Design Systems, Inc.</p>
    <p>Highly Scalable Algorithms for Highly Scalable Algorithms for Rectilinear and Octilinear Rectilinear and Octilinear</p>
    <p>Steiner TreesSteiner Trees</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Single net routing problem  Problem definition</p>
    <p>Previous work</p>
    <p>Motivation for highly scalable heuristics</p>
    <p>The batched greedy algorithm  High-level algorithm</p>
    <p>Efficient generation of triples  Efficient bottleneck-edge computation</p>
    <p>Experimental results and conclusions</p>
    <p>Single net routing problem  Problem definition  Previous work  Motivation for highly scalable heuristics</p>
    <p>The batched greedy algorithm  High-level algorithm  Efficient generation of triples  Efficient bottleneck-edge computation</p>
    <p>Experimental results and conclusions</p>
  </div>
  <div class="page">
    <p>Single Net Routing Problem</p>
    <p>Given: set of terminalsterminals in the plane Find: minimum length interconnectionminimum length interconnection</p>
    <p>Rectilinear (Manhattan) routing Octilinear (X) routing</p>
    <p>Steiner points</p>
    <p>Rectilinear/Octilinear Minimum Steiner Trees (RMST/OMST)</p>
  </div>
  <div class="page">
    <p>Why Minimum Steiner Tree Routing?</p>
    <p>Advantages  Minimum routing area</p>
    <p>Minimum total capacitance</p>
    <p>Reduced power consumption</p>
    <p>Steiner tree routing appropriate for  Non-critical nets  Physically small instances</p>
  </div>
  <div class="page">
    <p>Long history</p>
    <p>Euclidean version [Gauss 1836]</p>
    <p>Rectilinear version [Hanan 1966]</p>
    <p>Octilinear version [Sarrafzadeh&amp;Wong 1992]</p>
    <p>Steiner tree problem in graphs [Hakimi/Levin 1971]</p>
    <p>Fundamental results</p>
    <p>All versions are NP-hardAll versions are NP-hard [Karp 1972, GJ77]</p>
    <p>Minimum Spanning Tree (MST) gives good approximation</p>
    <p>Always within factor 2factor 2 of optimum [3 papers, 1979-1981]</p>
    <p>Within factor 1.5factor 1.5 in rectilinear plane [Hwang 1976]</p>
    <p>Previous Work on Steiner Tree Problem</p>
  </div>
  <div class="page">
    <p>Exact algorithms</p>
    <p>GeoSteinerGeoSteiner [Warme,Winter&amp;Zachariasen]</p>
    <p>Approximation algorithms  Zelikovsky 1993, Berman&amp;Ramaier 1994, Hougardy&amp;Promel 1999,</p>
    <p>Rajagopalan&amp;Vazirani 1999, Robins&amp;Zelikovsky 2000,</p>
    <p>Best-performing RSMT heuristics (within ~0.5% of optimum)</p>
    <p>Iterated 1-Steiner heuristic [Kahng&amp;Robins 1992]</p>
    <p>Edge-based heuristic [Borah,Owens&amp;Irwin 1999]</p>
    <p>Iterated Rajagopalan-Vazirani [Mandoiu,Vazirani&amp;Ganley 2000]</p>
    <p>Not practical for tens of thousands of terminals!</p>
    <p>Previous RSMT/OSMT Algorithms</p>
  </div>
  <div class="page">
    <p>Motivation for Highly Scalable Heuristics</p>
    <p>Most nets are small (&lt;20 terminals)</p>
    <p>But nets with &gt;104 terminals become increasingly common</p>
    <p>Scan-enable nets in large designs using full-scan testScan-enable nets in large designs using full-scan test</p>
    <p>All flip-flops need to receive the scan-enable signal</p>
    <p>Nets with pre-routes and non-zero terminal dimensionsNets with pre-routes and non-zero terminal dimensions</p>
    <p>Each terminal represented by set of electrically equivalent pins</p>
    <p>RSMT/OSMT instances with up to 105 pins</p>
  </div>
  <div class="page">
    <p>Requirements for Highly Scalable RSMT/OSMT Heuristics</p>
    <p>Linear memory</p>
    <p>Sub-quadratic runtime</p>
    <p>Solutions within ~0.5% of optimum</p>
    <p>Previous Steiner tree heuristics do not meet first two</p>
    <p>requirements</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Single net routing problem  Problem definition</p>
    <p>Previous work</p>
    <p>Motivation for highly scalable heuristics</p>
    <p>The batched greedy algorithm  High-level algorithm</p>
    <p>Efficient generation of triples  Efficient bottleneck-edge computation</p>
    <p>Experimental results and conclusions</p>
  </div>
  <div class="page">
    <p>Triple Contraction</p>
    <p>Connect 3 terminals (=triple) using shortest connection</p>
    <p>Remove longest edge on each of the 2 formed cycles</p>
    <p>GAIN =</p>
  </div>
  <div class="page">
    <p>High-level Algorithm</p>
    <p>Greedy Triple-Contraction Algorithm [Zelikovsky 1993]: 1. Compute MST of terminals 2. While there exist triples with positive gain, do:</p>
    <p>Find triple with maximum gain  Contract triple: remove longest edges, replace triple with 2 zero</p>
    <p>cost edges 3. Output MST of terminals and centers of contracted triples</p>
    <p>Expensive to compute max-gain triple in Step 2  Best implementation uses complex dynamic MST datastructures</p>
    <p>We use a batched implementationWe use a batched implementation  Find positive-gain triples  Contract triples in descending order of gain without recomputing gainswithout recomputing gains  A triple is selected if 2 longest edges A triple is selected if 2 longest edges not used by previous triples</p>
  </div>
  <div class="page">
    <p>Efficient Generation of Triples</p>
    <p>O(n3) triples overall</p>
    <p>Use geometry to avoid generating all of them!  [Fossmeier,Kaufmann&amp;Zelikovsky 1997]: sufficient to consider a set of a set of</p>
    <p>O(n) triples withO(n) triples with</p>
    <p>Empty interior ( no other terminal in bounding box)</p>
    <p>Positive gainPositive gain</p>
    <p>We use a practical O(nlogn) divide-and-conquer algorithm to compute a superset of size O(n logn)  Some triples may have negative gain</p>
    <p>Eliminated after gain computation</p>
    <p>Some triples may be non-empty</p>
    <p>Can be removed, but too few to justify the extra testing time</p>
  </div>
  <div class="page">
    <p>Divide-and-conquer for Empty Triples</p>
  </div>
  <div class="page">
    <p>Divide-and-conquer for Empty Triples</p>
  </div>
  <div class="page">
    <p>Divide-and-conquer for Empty Triples</p>
  </div>
  <div class="page">
    <p>Divide-and-conquer for Empty Triples</p>
  </div>
  <div class="page">
    <p>Efficient Bottleneck-edge Computation</p>
    <p>Bottleneck edges needed for computing triple gains</p>
    <p>Given: tree T, vertices u,v Find: most expensive edge on path between u and v</p>
    <p>We give a new data structure  O(logn) time per bottleneck-edge query</p>
    <p>O(n logn) pre-processing (O(n) if edges already sorted)</p>
    <p>Much more practical than methods based on least-common-ancestors</p>
    <p>Gain evaluation in O(logn) time per triple</p>
    <p>O(n logO(n log22n) total time for the batched greedy algorithmn) total time for the batched greedy algorithm</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Single net routing problem  Problem definition</p>
    <p>Previous work</p>
    <p>Motivation for highly scalable heuristics</p>
    <p>The batched greedy algorithm  High-level algorithm</p>
    <p>Efficient generation of triples  Efficient bottleneck-edge computation</p>
    <p>Experimental results and conclusions</p>
  </div>
  <div class="page">
    <p>Experimental Setup</p>
    <p>Testcases  Random nets with 100 to 500,000 terminals</p>
    <p>100 samples for each size</p>
    <p>Nets extracted from recent designs (330 to 34,000 terminals)</p>
    <p>Compared algorithms  Batched greedy O(n logO(n log22n) n)</p>
    <p>MST [Guibas&amp;Stolfi 1983] O(n logn) O(n logn)  Prim-based heuristic [Rohe 2001] O(nlogO(nlog22n) n)</p>
    <p>Edge-based heuristic of [Borah,Owens&amp;Irwin 1999] O(nO(n22) )</p>
    <p>GeoSteiner 4.0, beta version [Nielsen,Winter&amp;Zachariasen 2002]</p>
  </div>
  <div class="page">
    <p>Quality: Random Rectilinear Tests</p>
    <p>#Terminals</p>
    <p>% I m</p>
    <p>p ro</p>
    <p>v . o</p>
    <p>v e r</p>
    <p>M S</p>
    <p>T</p>
    <p>GeoSteiner BatchGreedy Edge-Based Prim-Based</p>
    <p>BatchGreedyBatchGreedy quality slightly better than quality slightly better than Edge-basedEdge-based, 1% better than , 1% better than Prim-basedPrim-based</p>
    <p>Within 0.7% of optimum computed byWithin 0.7% of optimum computed by GeoSteiner GeoSteiner</p>
  </div>
  <div class="page">
    <p>CPU Time: Random Rectilinear Tests</p>
    <p>#Terminals</p>
    <p>C P</p>
    <p>U S</p>
    <p>e c</p>
    <p>o n</p>
    <p>d s</p>
    <p>GeoSteiner BatchGreedy Edge-Based Prim-Based</p>
    <p>BatchGreedy highly scalable, practical runtime up to 10 highly scalable, practical runtime up to 1055 terminals terminals</p>
    <p>Edge-BasedEdge-Based impractical for &gt;10 impractical for &gt;1044 terminals terminals</p>
  </div>
  <div class="page">
    <p>CPU Time: Rectilinear Industry Tests</p>
    <p>#Terminals</p>
    <p>C P</p>
    <p>U s</p>
    <p>e c</p>
    <p>o n</p>
    <p>d s</p>
    <p>GeoSteiner</p>
    <p>BatchGreedy</p>
    <p>Edge-Based</p>
    <p>Prim-Based</p>
    <p>34k terminals: 24 seconds BatchGreedy vs. 86 minutes Edge-based86 minutes Edge-based</p>
  </div>
  <div class="page">
    <p>Quality: Rectilinear Industry Tests</p>
    <p>% I</p>
    <p>m p</p>
    <p>ro v o</p>
    <p>v e r</p>
    <p>M S</p>
    <p>T</p>
    <p>GeoSteiner</p>
    <p>BatchGreedy</p>
    <p>Edge-Based</p>
    <p>Prim-Based</p>
    <p>BatchGreedy up to 1% better than Prim-Based, within 0.5% of GeoSteiner</p>
    <p>Slightly better than Edge-BasedEdge-Based in half of the cases</p>
  </div>
  <div class="page">
    <p>CPU Time: Octilinear Industry Tests</p>
    <p>C P</p>
    <p>U s</p>
    <p>e c</p>
    <p>o n</p>
    <p>d s</p>
    <p>GeoSteiner</p>
    <p>BatchGreedy Edge-Based</p>
    <p>34k terminals: 25 seconds BatchGreedy vs. 17.5 hours Edge-based17.5 hours Edge-based</p>
    <p>Octilinear Prim-Based not available</p>
  </div>
  <div class="page">
    <p>Quality: Octilinear Industry Testcases</p>
    <p>% Im</p>
    <p>p ro</p>
    <p>v o v e r M</p>
    <p>S T</p>
    <p>GeoSteiner</p>
    <p>BatchGreedy</p>
    <p>Edge-Based</p>
    <p>BatchGreedy slightly better than Edge-BasedEdge-Based, within 0.5% of , within 0.5% of GeoSteinerGeoSteiner</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>Presented new rectilinear/octilinear Steiner tree heuristic  Highly-scalable</p>
    <p>O(n) memory, O(nlog2n) runtime, with small hidden constants</p>
    <p>High-quality</p>
    <p>Better quality than O(n2) edge-based heuristic</p>
    <p>Within 0.7% of optimum computed by GeoSteiner</p>
    <p>Ongoing extensions  Via costs</p>
    <p>Preferred directions</p>
    <p>Routing obstacles</p>
  </div>
  <div class="page">
    <p>Further details on our work are available on the groups website, http://vlsicad.ucsd.edu</p>
    <p>Thank You for Your Attention!Thank You for Your Attention!</p>
  </div>
</Presentation>
