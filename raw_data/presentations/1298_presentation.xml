<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>BORG: Block-reORGanization for Self-optimizing</p>
    <p>Storage Systems</p>
    <p>Medha Bhadkamkar Jorge Guerra Luis Useche Sam Burnett Jason Liptak</p>
    <p>Raju Rangaswami Vagelis Hristidis</p>
    <p>Florida International University</p>
    <p>March 9, 2009</p>
  </div>
  <div class="page">
    <p>Problem</p>
    <p>I/O is the bottleneck</p>
    <p>X Legacy filesystems favor sequential access. X Realistic workloads are not necessarily sequential</p>
    <p>Proposed Solution</p>
    <p>X Co-locate data based on workload block access patterns X Improve sequentiality</p>
  </div>
  <div class="page">
    <p>Workload Characteristics that motivate BORG</p>
    <p>Workloads</p>
    <p>X office - browser, OpenOffice applications, gnuplot, etc X developer - emacs, gcc, gdb, etc X Subversion (SVN) server - Sources and document repository X Web server - Department web server</p>
    <p>Workloads Statistics Summary</p>
    <p>Workload File System Total [GB] Total [GB] type size [GB] Reads Writes</p>
    <p>office 8.29 6.49 0.32 developer 45.59 3.82 10.46 SVN server 2.39 0.29 0.62 web server 169.54 21.07 2.24</p>
  </div>
  <div class="page">
    <p>Non-uniform Access Frequency Distribution</p>
    <p>Frequently accessed data is usually a small portion of the entire data.</p>
    <p>Frequently accessed data is spread over entire disk area</p>
    <p>Workload File System Unique [GB] Unique [GB] Top 20% type size [GB] Reads Writes data access</p>
    <p>office 8.29 1.63 0.22 51.40 % developer 45.59 2.57 3.96 60.27 % SVN server 2.39 0.17 0.18 45.79 % web server 169.54 7.32 0.33 59.50 %</p>
  </div>
  <div class="page">
    <p>Non-uniform Access Frequency Distribution</p>
    <p>A c c e ss</p>
    <p>F re</p>
    <p>q u e n c y</p>
    <p>The Opportunity</p>
    <p>Co-locating frequently accessed data can improve I/O performance.</p>
  </div>
  <div class="page">
    <p>Workload Characteristics - Partial Determinism</p>
    <p>Non-sequential accesses repeat in a block access sequence</p>
    <p>Workload Partial type determinism</p>
    <p>office 65.42 % developer 61.56 % SVN server 50.73 % web server 15.55 %</p>
    <p>The Opportunity</p>
    <p>Using partial determinism information can improve sequentiality of accesses.</p>
  </div>
  <div class="page">
    <p>Temporal Locality</p>
    <p>There is a substantial overlap in the working sets across days.</p>
    <p>Day 1 Day 2 Day 3 Day 4 Day 5 Day 6 Day 7</p>
    <p>D a ta</p>
    <p>a cc</p>
    <p>e ss</p>
    <p>o ve</p>
    <p>rl a p w</p>
    <p>ith D</p>
    <p>a y</p>
    <p>% )</p>
    <p>Days of the week</p>
    <p>All accesses Top 20% accesses</p>
    <p>The Opportunity</p>
    <p>Using information of past I/O activity for optimizing layout can improve performance.</p>
  </div>
  <div class="page">
    <p>BORG in a nutshell</p>
    <p>Uses block access patterns to identify hot block sequences in the workload.</p>
    <p>Reorganizes blocks in a separate BORG OPTimized partition (BOPT)</p>
    <p>Assimilates write request in the partition</p>
    <p>Operates in the background</p>
    <p>Can be dynamically inserted or removed when required</p>
    <p>Is independent of filesystems</p>
    <p>Maintains consistency by maintaining a persistent page-level indirection map.</p>
  </div>
  <div class="page">
    <p>System Architecture</p>
    <p>VFS</p>
    <p>Page Cache</p>
    <p>File Systems (EXT3, JFS...)</p>
    <p>BORG Layer</p>
    <p>I/O Scheduler</p>
    <p>Device Driver</p>
    <p>Legend: Existing components New components</p>
    <p>Application</p>
    <p>Kernel</p>
    <p>User</p>
  </div>
  <div class="page">
    <p>System Architecture</p>
    <p>VFS</p>
    <p>Page Cache</p>
    <p>File Systems (EXT3, JFS...)</p>
    <p>BORG Layer</p>
    <p>I/O Scheduler</p>
    <p>Device Driver</p>
    <p>I/O Trace</p>
    <p>Layout Plan</p>
    <p>Legend: Existing components New components</p>
    <p>Kernelspace components</p>
    <p>Profiler I/O</p>
    <p>Reconfigurator</p>
    <p>I/O Indirector</p>
    <p>BOPTspace</p>
    <p>Userspace components Application</p>
    <p>Kernel</p>
    <p>User Analyzer Planner</p>
  </div>
  <div class="page">
    <p>System Architecture</p>
    <p>VFS</p>
    <p>Page Cache</p>
    <p>File Systems (EXT3, JFS...)</p>
    <p>BORG Layer</p>
    <p>I/O Scheduler</p>
    <p>Device Driver</p>
    <p>I/O Trace</p>
    <p>Layout Plan</p>
    <p>Legend: Existing components New components</p>
    <p>Kernelspace components</p>
    <p>Profiler I/O</p>
    <p>Reconfigurator</p>
    <p>I/O Indirector</p>
    <p>BOPTspace</p>
    <p>Userspace components Application</p>
    <p>Kernel</p>
    <p>User Analyzer Planner</p>
  </div>
  <div class="page">
    <p>I/O Profiler</p>
    <p>Each I/O operation logged with:</p>
    <p>X Temporal Attribute: Timestamp X Process-level Attributes: Process ID, name X Block-level attribute: Start LBA, length of I/O, Mode (R/W)</p>
    <p>Sample Trace</p>
    <p>[Timestamp] [PID] [Exec.] [StartLBA] [Size] [Mode]</p>
    <p>... ... ... ... ... ...</p>
  </div>
  <div class="page">
    <p>System Architecture</p>
    <p>VFS</p>
    <p>Page Cache</p>
    <p>File Systems (EXT3, JFS...)</p>
    <p>BORG Layer</p>
    <p>I/O Scheduler</p>
    <p>Device Driver</p>
    <p>Analyzer Planner</p>
    <p>I/O Trace</p>
    <p>Layout Plan</p>
    <p>Legend: Existing components New components</p>
    <p>Kernelspace components</p>
    <p>Profiler I/O</p>
    <p>Reconfigurator</p>
    <p>I/O Indirector</p>
    <p>BOPTspace</p>
    <p>Userspace components Application</p>
    <p>Kernel</p>
    <p>User</p>
  </div>
  <div class="page">
    <p>Analyzer</p>
    <p>Builds a per-process directed, weighted graph</p>
    <p>Vertex is the per request LBA range (Start LBA, length)</p>
    <p>Edge is a temporal dependency between two ranges</p>
    <p>Weights represent frequency of access</p>
    <p>Graphs merged into a single master access graph</p>
    <p>Process graphs Master access graph after merging</p>
    <p>r1:(0, 3)</p>
    <p>s1 :(1, 6)</p>
    <p>r2:(4, 2)</p>
    <p>s2 :(9, 1)</p>
    <p>r3:(8, 2)</p>
    <p>r1:(0, 1) s1:(6, 1)</p>
    <p>r1, s1:(1, 2) r2 , s1 :(4, 2) r3:(8, 1)</p>
    <p>s1:(3, 1) r3, s2:(9, 1)</p>
  </div>
  <div class="page">
    <p>Planner</p>
    <p>Uses master access graph as input</p>
    <p>Chooses the most connected node for initial placement</p>
    <p>Chooses the node most connected to already placed node-set</p>
    <p>Places it depending on its direction of the connecting edge</p>
    <p>A</p>
    <p>ED G</p>
    <p>CB</p>
    <p>J</p>
    <p>F</p>
    <p>H I</p>
    <p>F  H  J  A  G  C  B  E  D</p>
  </div>
  <div class="page">
    <p>System Architecture</p>
    <p>VFS</p>
    <p>Page Cache</p>
    <p>File Systems (EXT3, JFS...)</p>
    <p>BORG Layer</p>
    <p>I/O Scheduler</p>
    <p>Device Driver</p>
    <p>I/O Trace</p>
    <p>Layout Plan</p>
    <p>Legend: Existing components New components</p>
    <p>Kernelspace components</p>
    <p>Profiler I/O</p>
    <p>Reconfigurator</p>
    <p>I/O Indirector</p>
    <p>BOPTspace</p>
    <p>Userspace components Application</p>
    <p>Kernel</p>
    <p>User Analyzer Planner</p>
  </div>
  <div class="page">
    <p>Reconfigurator</p>
    <p>Planner</p>
    <p>BOPT Read Cache BOPT Write Buffer</p>
    <p>BOPT FS</p>
    <p>Reconfigurator</p>
    <p>C</p>
    <p>Source Dest.</p>
    <p>W</p>
    <p>A</p>
    <p>C</p>
    <p>B</p>
    <p>D</p>
    <p>Leaving</p>
    <p>FS Space</p>
    <p>Space BOPT</p>
    <p>D</p>
    <p>C</p>
    <p>FS</p>
    <p>C</p>
    <p>Legend:</p>
  </div>
  <div class="page">
    <p>Reconfigurator</p>
    <p>Planner</p>
    <p>BOPT Read Cache BOPT Write Buffer</p>
    <p>BOPT FS</p>
    <p>BOPT BOPT</p>
    <p>Reconfigurator</p>
    <p>D&quot;</p>
    <p>C</p>
    <p>Source Dest.</p>
    <p>D</p>
    <p>W</p>
    <p>A</p>
    <p>C</p>
    <p>B</p>
    <p>D</p>
    <p>D&quot;</p>
    <p>Leaving</p>
    <p>Relocate FS Space</p>
    <p>Space BOPT</p>
    <p>D</p>
    <p>C</p>
    <p>BOPT</p>
    <p>BOPT</p>
    <p>Legend:</p>
  </div>
  <div class="page">
    <p>Reconfigurator</p>
    <p>Planner</p>
    <p>BOPT Read Cache BOPT Write Buffer</p>
    <p>BOPT FS</p>
    <p>BOPT FS</p>
    <p>BOPT BOPT 5. Reads FS block</p>
    <p>Reconfigurator</p>
    <p>C C</p>
    <p>Source Dest.</p>
    <p>B 4. Reads plan</p>
    <p>D</p>
    <p>W</p>
    <p>A</p>
    <p>C</p>
    <p>B</p>
    <p>B</p>
    <p>D</p>
    <p>D&quot;</p>
    <p>Leaving</p>
    <p>Incoming</p>
    <p>Relocate FS Space</p>
    <p>Space BOPT</p>
    <p>D&quot;</p>
    <p>B</p>
    <p>Legend:</p>
  </div>
  <div class="page">
    <p>System Architecture</p>
    <p>VFS</p>
    <p>Page Cache</p>
    <p>File Systems (EXT3, JFS...)</p>
    <p>BORG Layer</p>
    <p>I/O Scheduler</p>
    <p>Device Driver</p>
    <p>I/O Trace</p>
    <p>Layout Plan</p>
    <p>Legend: Existing components New components</p>
    <p>Kernelspace components</p>
    <p>Profiler I/O</p>
    <p>Reconfigurator</p>
    <p>I/O Indirector</p>
    <p>BOPTspace</p>
    <p>Userspace components Application</p>
    <p>Kernel</p>
    <p>User Analyzer Planner</p>
  </div>
  <div class="page">
    <p>I/O Indirector</p>
    <p>Indirector I/O</p>
    <p>C 1</p>
    <p>B 0B</p>
    <p>C</p>
    <p>borg_map</p>
    <p>FS Block</p>
    <p>BOPT Block Dirty</p>
    <p>BOPT Read Cache BOPT Write Buffer</p>
    <p>Request</p>
    <p>B</p>
    <p>B Read</p>
    <p>A</p>
    <p>C</p>
    <p>B</p>
    <p>B</p>
    <p>D</p>
    <p>D&quot;</p>
    <p>FS Space</p>
    <p>Space BOPT</p>
    <p>Legend:</p>
  </div>
  <div class="page">
    <p>I/O Indirector</p>
    <p>X</p>
    <p>Indirector I/O</p>
    <p>C 1</p>
    <p>B 0B</p>
    <p>C</p>
    <p>borg_map</p>
    <p>FS Block</p>
    <p>BOPT Block Dirty</p>
    <p>BOPT Read Cache BOPT Write Buffer</p>
    <p>Request</p>
    <p>A</p>
    <p>A</p>
    <p>Read</p>
    <p>A</p>
    <p>C</p>
    <p>B</p>
    <p>B</p>
    <p>D</p>
    <p>D&quot;</p>
    <p>FS Space</p>
    <p>Space BOPT</p>
    <p>Legend:</p>
  </div>
  <div class="page">
    <p>I/O Indirector</p>
    <p>W</p>
    <p>A</p>
    <p>C</p>
    <p>B</p>
    <p>B</p>
    <p>D</p>
    <p>D&quot;</p>
    <p>FS Space</p>
    <p>Space BOPT</p>
    <p>Indirector I/O</p>
    <p>W</p>
    <p>C 1</p>
    <p>B 0B</p>
    <p>C</p>
    <p>W</p>
    <p>borg_map</p>
    <p>FS Block</p>
    <p>BOPT Block Dirty</p>
    <p>BOPT Read Cache BOPT Write Buffer</p>
    <p>W</p>
    <p>Request</p>
    <p>W W 1</p>
    <p>Write</p>
    <p>Legend:</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Goals</p>
    <p>How effective is BORG?</p>
    <p>What are the overheads?</p>
    <p>When is it not effective?</p>
    <p>How sensitive is it to different parameters?</p>
    <p>Setup</p>
    <p>Metric - Total disk busy times</p>
    <p>5 hosts with different configurations</p>
    <p>Linux 2.6.22 kernel</p>
    <p>reiserfs and ext3</p>
  </div>
  <div class="page">
    <p>Busy times for Webserver</p>
    <p>Setup</p>
    <p>Over 1.1 million requests to over 255,000 files in one week.</p>
    <p>BOPT size 8 GB, 4 Reconfigurations</p>
    <p>Evaluated BORG with cumulative and partial traces</p>
    <p>N 1</p>
    <p>N 2</p>
    <p>N 3</p>
    <p>N 4</p>
    <p>N 5</p>
    <p>D is</p>
    <p>k B</p>
    <p>u sy</p>
    <p>T im</p>
    <p>e (</p>
    <p>se c)</p>
    <p>Phases</p>
    <p>Vanilla BORG-C BORG-P</p>
    <p>Summary</p>
  </div>
  <div class="page">
    <p>Busy times for Webserver</p>
    <p>Setup</p>
    <p>Over 1.1 million requests to over 255,000 files in one week.</p>
    <p>BOPT size 8 GB, 4 Reconfigurations</p>
    <p>Evaluated BORG with cumulative and partial traces</p>
    <p>R 1</p>
    <p>R 2</p>
    <p>R 3</p>
    <p>R 4</p>
    <p>D is</p>
    <p>k B</p>
    <p>u sy</p>
    <p>T im</p>
    <p>e (</p>
    <p>se c)</p>
    <p>Phases</p>
    <p>Vanilla BORG-C BORG-P</p>
    <p>Summary</p>
    <p>Busy times higher in reconfiguration phases due to copy overheads.</p>
  </div>
  <div class="page">
    <p>BORG Overhead</p>
    <p>Setup</p>
    <p>Over 1.1 million requests to over 255,000 files in one week.</p>
    <p>BOPT size 8 GB, 4 Reconfigurations</p>
    <p>Cumulative and partial traces</p>
    <p>C P C P C P C P</p>
    <p>T im</p>
    <p>e (</p>
    <p>se c)</p>
    <p>Reconfigurations</p>
    <p>Analyzer Planner</p>
    <p>Reconfigurator</p>
    <p>R4R3R2R1</p>
    <p>Summary</p>
    <p>Linear increase in planning and analysis overheads for cumulative traces.</p>
  </div>
  <div class="page">
    <p>Sensitivity Analysis - Reconfiguration Interval</p>
    <p>Setup</p>
    <p>Interval 8 hours - 3 days, 1 GB BOPT, with 50% write buffer</p>
    <p>-20</p>
    <p>R e</p>
    <p>d u</p>
    <p>ct io</p>
    <p>n in</p>
    <p>b u</p>
    <p>sy t</p>
    <p>im e</p>
    <p>( %</p>
    <p>)</p>
    <p>Reconfiguration Interval</p>
    <p>Developer SVN</p>
    <p>Summary</p>
    <p>Smaller intervals lead to better performance for frequently changing workloads.</p>
  </div>
  <div class="page">
    <p>Sensitivity Analysis - BOPT Size</p>
    <p>Setup</p>
    <p>BOPT size 256 MB - 8 GB, with 50% write buffer</p>
    <p>-20</p>
    <p>R e</p>
    <p>d u</p>
    <p>ct io</p>
    <p>n in</p>
    <p>b u</p>
    <p>sy t</p>
    <p>im e</p>
    <p>( %</p>
    <p>)</p>
    <p>Size of BOPT</p>
    <p>Developer SVN</p>
    <p>Summary</p>
    <p>Developer: Performance increases with increase in size</p>
    <p>SVN: Improvement is same due to smaller working set size.</p>
  </div>
  <div class="page">
    <p>Sensitivity Analysis - Write Buffer Size Variation</p>
    <p>Setup</p>
    <p>Write buffer 0 - 100%</p>
    <p>-20</p>
    <p>R e</p>
    <p>d u</p>
    <p>ct io</p>
    <p>n in</p>
    <p>b u</p>
    <p>sy t</p>
    <p>im e</p>
    <p>( %</p>
    <p>)</p>
    <p>Write Buffer Fraction</p>
    <p>Developer SVN</p>
    <p>Summary</p>
    <p>Incorrect size can impact performance</p>
  </div>
  <div class="page">
    <p>BORG Summary and Future Work</p>
    <p>Conclusions</p>
    <p>BORG improves I/O sequentiality and restricts disk head movement</p>
    <p>Disk busy times reduction ranges from 6% to 50% for untuned systems</p>
    <p>Disk busy times can decrease upto 80% with careful tuning</p>
    <p>BORG overheads are within acceptable limits</p>
    <p>Future Work</p>
    <p>Exploring alternate layout strategies</p>
    <p>Automated reconfigurations</p>
    <p>Automated configuration of parameters</p>
  </div>
  <div class="page">
    <p>Thank you!</p>
  </div>
  <div class="page">
    <p>Related Work</p>
    <p>File System Level Approaches - LFS, PLACE, HFS, FS2</p>
    <p>Block Level Approaches - Cylinder Shuffling, Disk Caching Disk, ALIS</p>
  </div>
</Presentation>
