<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Yuyang Du, Hongliang Yu, Yunhong Jiang*</p>
    <p>Yaozu Dong*, Weimin Zheng</p>
    <p>Tsinghua University</p>
    <p>Intel Corporation*</p>
  </div>
  <div class="page">
    <p>Background and motivation  Memory errors in the wild</p>
    <p>Virtualized systems</p>
    <p>Our approach  Memory error characteristics</p>
    <p>Prediction and prevention model</p>
    <p>System level design</p>
    <p>Conclusion and future work</p>
  </div>
  <div class="page">
    <p>Memory in computer</p>
    <p>CPU</p>
    <p>Memory Controller</p>
    <p>Memory modules</p>
  </div>
  <div class="page">
    <p>Memory error causes  Service unavailable, data loss, etc.</p>
    <p>Reboot and replacement</p>
    <p>Memory error in the wild  Make up the largest fraction of system failures</p>
    <p>among all possible reasons (both software and hardware)</p>
    <p>Take up the top place of component replacement</p>
  </div>
  <div class="page">
    <p>Conventional solutions  Fault tolerance</p>
    <p>adding certain form of redundancy (by hardware or software) to the system is necessary</p>
    <p>Error Correction Code (ECC)</p>
    <p>detecting and correcting one bit error</p>
    <p>Difficult to extensively apply or not enough to commodity computers in datacenters</p>
  </div>
  <div class="page">
    <p>Virtual machines and Hypervisor</p>
    <p>Physical machine, OS, and applications</p>
    <p>GFX</p>
    <p>MemoryProcessors</p>
    <p>Keyboard / Mouse</p>
    <p>Graphics</p>
    <p>StorageNetwork</p>
    <p>Physical Host Hardware</p>
    <p>Operating System</p>
    <p>...Application</p>
    <p>IDE</p>
    <p>Device Drivers</p>
    <p>Application Application</p>
    <p>NIC</p>
    <p>VM0</p>
    <p>Guest OS0</p>
    <p>App AppApp ...</p>
    <p>...</p>
    <p>VM1</p>
    <p>Guest OS1</p>
    <p>App AppApp ...</p>
    <p>Virtual Machine Monitor (VMM)</p>
    <p>Physical Host Hardware</p>
    <p>VMs and Hypervisor</p>
  </div>
  <div class="page">
    <p>A cloud business model  The providers and consumers adopt a paying for</p>
    <p>what you use policy</p>
    <p>The provider guarantees some service level agreement, such as system uptime percentage</p>
    <p>The consumers use and pay for the provisioned resources</p>
    <p>Lack the opportunity to protect them self from hardware failure, such as memory errors</p>
    <p>VM based high availability and fault tolerance  VM state replication, and record and replay</p>
  </div>
  <div class="page">
    <p>Vulnerabilities in virtualization  Higher utilization due to server consolidation and</p>
    <p>live migration leads to an increase in memory error rate</p>
    <p>Many proprietary and legacy OSes can not handle memory errors</p>
    <p>The eggs in a basket effect needs hypervisor to be more robust and resilient to system failures</p>
    <p>Memory errors can be used to attack system security</p>
  </div>
  <div class="page">
    <p>Cost-effective  Can be applied to large scale</p>
    <p>Best-effort  Not as complete as fault tolerance</p>
    <p>Alleviate the problem</p>
    <p>Virtualization-aware  Small footprint</p>
    <p>Transparent to OS and applications</p>
  </div>
  <div class="page">
    <p>Background and motivation  Memory errors in the wild</p>
    <p>Virtualized systems</p>
    <p>Our approach  Memory error characteristics</p>
    <p>Prediction and prevention</p>
    <p>System design</p>
    <p>Conclusion and future work</p>
  </div>
  <div class="page">
    <p>This paper proposes memory error prediction and prevention model  Predict using memory error characteristics and log</p>
    <p>events</p>
    <p>Prevent using page/DIMM replacement and live migration</p>
  </div>
  <div class="page">
    <p>Soft error vs. hard error  Soft errors randomly flip memory bits but without</p>
    <p>permanent physical damage (e.g., particles strike on the silicon chip)</p>
    <p>Hard errors repeatedly corrupt bits due to device defect (e.g., device wear-out)</p>
    <p>Correctable vs. uncorrectable  If the errors can be corrected by hardware (i.e.,</p>
    <p>Error Correcting Codes), then software is oblivious to such events and can continue running</p>
    <p>if the errors can not be corrected, system failure is unavoidable.</p>
  </div>
  <div class="page">
    <p>Memory error characteristics  Hard errors occur more often than soft errors,</p>
    <p>which are unfortunately concerned by most previous studies</p>
    <p>Strong correlation between correctable and uncorrectable errors</p>
    <p>High system utilization (CPU and memory) increase memory errors</p>
    <p>[1] X. Li, K. Shen, M. Huang, and L. Chu. A memory soft error measurement</p>
    <p>on production systems. USENIX ATC, 2007.</p>
    <p>[2] B. Schroeder, E. Pinheiro, and W. Weber. Dram errors in the wild: A large</p>
    <p>scale field study. In SIGMETRICS, 2009</p>
  </div>
  <div class="page">
    <p>Physical page frame redirection</p>
    <p>Machine</p>
    <p>Physical</p>
    <p>Memory</p>
    <p>Hypervisor</p>
    <p>Guest</p>
    <p>Pseudo</p>
    <p>Physical</p>
    <p>Memory</p>
    <p>VM1 VM4VM3VM2</p>
  </div>
  <div class="page">
    <p>MMU Virtualization  Direct page table</p>
    <p>Virtual TLB</p>
    <p>Shadow page table</p>
    <p>Hardware assisted translation tables (i.e., Extended page table)</p>
    <p>Guest can have full control over its page tables and events</p>
    <p>VMM controls Extended Page Tables</p>
    <p>Guest Page Tables</p>
    <p>Extended Page Tables</p>
    <p>Guest Physical Address Host Physical</p>
    <p>Address Guest Linear</p>
    <p>Address</p>
    <p>Guest CR3 EPT base pointer</p>
  </div>
  <div class="page">
    <p>Background and motivation  Memory errors in the wild</p>
    <p>Virtualized systems</p>
    <p>Our approach  Memory error characteristics</p>
    <p>Prediction and prevention</p>
    <p>System design</p>
    <p>Conclusion and future work</p>
  </div>
  <div class="page">
    <p>System overview</p>
  </div>
  <div class="page">
    <p>Components  Event Collector</p>
    <p>Error Log</p>
    <p>Utilization Monitor</p>
    <p>Risk Assessor</p>
    <p>Error Prediction</p>
    <p>Hotspot Avoidance</p>
    <p>Operator</p>
    <p>Page replacement</p>
    <p>DIMM replacement</p>
    <p>Live migration</p>
  </div>
  <div class="page">
    <p>Unexpected uncorrectable errors  The memory is probably owned by guest VMs,</p>
    <p>because hypervisor has very small footprint  Destroys the guest VM and restarts it, or invokes guests</p>
    <p>error handler to deal with the error by passing a simulated MCE event to the guest</p>
    <p>If the hypervisor owns the faulty memory, however error handler will probably have no choice but reboot the system</p>
  </div>
  <div class="page">
    <p>Hardware requirement  Intel Machine Check Architecture MCA</p>
    <p>Corrected Machine Check InterruptCMCI</p>
    <p>Machine Check Exception MCE</p>
  </div>
  <div class="page">
    <p>Implementing on Xen  Replacing a physical page for a guest VM requires</p>
    <p>the updating of all the page mappings from guest physical address to host physical address, and vice versa</p>
    <p>The overhead of page replacement is very small, especially when Expanded Page Table (EPT) is used</p>
  </div>
  <div class="page">
    <p>Background and motivation  Memory errors in the wild</p>
    <p>Virtualized systems</p>
    <p>Our approach  Memory error characteristics</p>
    <p>Prediction and prevention</p>
    <p>System design</p>
    <p>Conclusion and future work</p>
  </div>
  <div class="page">
    <p>This paper advocates predicting memory errors and preventing them from affecting system longevity by using memory error characteristics and taking as input the error events and system utilization.</p>
    <p>We focus on virtualized systems, and try to make it cost-effective to be applied to datacenters easily</p>
  </div>
  <div class="page">
    <p>We are still on the way to fulfill our work and collaborate with industry to take quantitative measurements to fine-tune the predictive model and evaluate the effects</p>
  </div>
  <div class="page"/>
  <div class="page"/>
</Presentation>
