<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Gleaner: Mi+ga+ng the Blocked-Waiter Wakeup Problem</p>
    <p>for Virtualized Mul+core Applica+ons</p>
    <p>Xiaoning Ding Phillip B. Gibbons Michael A. Kozuch Jianchen Shan</p>
    <p>New Jersey Institute of Technology Intel Labs PiDsburgh</p>
  </div>
  <div class="page">
    <p>Background  Number of cores in a computer keeps increasing</p>
    <p>Number of virtual computing units (i.e. vCPUs) in</p>
    <p>a virtual machine also keeps increasing</p>
    <p>* Number of cores in the x86 system with highest performance in SPECint Rate benchmark reports. Adapted from John Appleby s blog page HANAlgorithmics - Efficiency by Design with SAP HANA</p>
    <p>media large xlarge 2xlarge 4xlarge 8xlarge # vCPUs 1 2 4 8 16 32</p>
    <p>Amazon EC2 Instance Types</p>
  </div>
  <div class="page">
    <p>Mismatch between vCPU abstrac+on and pCPU behavior</p>
    <p>Can applicaFons effecFvely take advantage of more vCPUs in each VM?</p>
    <p>vCPUs are schedulable execuFon enFFes.  E.g. KVM vCPUs are normal threads scheduled by Linux scheduler.</p>
    <p>State pCPU vCPU</p>
    <p>Busy Can make con+nuous progress in parallel</p>
    <p>May be suspended without no+fica+on</p>
    <p>Idle Available immediately for ready computa+on</p>
    <p>Need to be rescheduled to con+nue computa+on</p>
    <p>Applica+on expecta+on Reality</p>
  </div>
  <div class="page">
    <p>Performance indica+on --- Synchroniza+on</p>
    <p>Lock holder preemp+on</p>
    <p>problem (LHP)</p>
    <p>Blocked-waiter wakeup problem</p>
    <p>(BWW) *</p>
    <p>The vCPU holding a spin-lock is preempted  vCPUs waiFng for the lock spins for a long Fme  LHP reduces scalability and efficiency  Has been well studied. Hardware soluFon in CPU.</p>
    <p>Busy wai+ng</p>
    <p>vCPUs may be suspended</p>
    <p>Blocking</p>
    <p>Idle vCPUs resume execu+on slowly</p>
    <p>*[TR FDUPPITR-2010-002]</p>
  </div>
  <div class="page">
    <p>Blocked-waiter wakeup problem (BWW)  BWW: waking up blocked threads takes long Fme on idle vCPUs  Idle vCPUs must be rescheduled before they run any threads</p>
    <p>VMM suspends vCPUs when they became idle (due to lack of runnable threads).</p>
    <p>How long? --- Depends only the availability of hardware resources and the cost of vCPU switches</p>
    <p>BWW degrades performance of synchronizaFon intensive applicaFons.  ComputaFon is delayed  Increase of execuFon Fme in VMs  Unpredictable/variable delay  Unpredictable performance  Extra overhead of vCPU switches  Reduced overall system performance 5</p>
  </div>
  <div class="page">
    <p>BWW causes serious performance degrada+on even on dedicated hardware</p>
    <p>One vCPU on each physical core. PARSEC benchmarks run in the VM. Slowdowns are relaFve to bare-metal performance.</p>
  </div>
  <div class="page">
    <p>Waking up a thread on an idle CPU</p>
    <p>pthread_mutex_lock() block</p>
    <p>pthread_mutex_unlock()</p>
    <p>wakeup</p>
    <p>VMM handle IPI</p>
    <p>On pCPUs</p>
    <p>AcFvate idle vCPU (B)</p>
    <p>On vCPUs</p>
    <p>wakeup</p>
    <p>Schedule idle vCPU (B)</p>
    <p>CPU B CPU A</p>
    <p>vCPU B vCPU A</p>
    <p>pCPU B pCPU A</p>
    <p>Short &amp; fixed T8s</p>
    <p>Long &amp; variable T&gt;96s</p>
    <p>Switch vCPUs: Major source of overhead and varia+on</p>
    <p>Reduce harmful vCPU switches</p>
    <p>A send B an IPI</p>
    <p>T</p>
  </div>
  <div class="page">
    <p>Reducing vCPU switches---- resource reten+on  Prevent idle vCPU from being suspended</p>
    <p>Idling operaFng, e.g. an idle vCPU spins instead of yielding hardware resources.</p>
    <p>May cause resource under-uFlizaFon  System throughput is reduced when vCPUs are idle for a significant amount of Fme.</p>
    <p>Must balance the cost of spinning and vCPU switch  Set a Fmeout for spinning.  Pay both overhead (spinning + vCPU switches) for long idle periods causing Fmeouts</p>
  </div>
  <div class="page">
    <p>Reducing vCPU switches --- Consolida+on scheduling Consolidate busy periods and coalesce idle periods on vCPUs</p>
    <p>Problem: acFve vCPUs may be overloaded  low performance</p>
    <p>vCPU A</p>
    <p>vCPU B 2 1 2</p>
    <p>vCPU A</p>
    <p>vCPU B</p>
    <p>Suspended to save resources</p>
    <p>Kept ac+ve to avoid vCPU switch</p>
  </div>
  <div class="page">
    <p>Gleaner --- basic idea</p>
    <p>consolida+on scheduling + resource reten+on</p>
    <p>vCPU A</p>
    <p>vCPU B</p>
    <p>vCPU C 3 3 3</p>
    <p>vCPU A</p>
    <p>vCPU B</p>
    <p>Inactive</p>
    <p>vCPU C 3 3 3</p>
    <p>Consolida+on scheduling</p>
    <p>Resource reten+on</p>
    <p>vCPU A</p>
    <p>vCPU B 2 2 1</p>
    <p>vCPU C 3 3 3</p>
    <p>Idling operaFons</p>
    <p>(manage short idle periods) (reduce long idle periods)</p>
  </div>
  <div class="page">
    <p>Workload is too heavy for acFve vCPUs  Workload cannot be evenly distributed among acFve vCPUs  e.g. long computaFon periods</p>
    <p>vCPU A vCPU B vCPU C</p>
    <p>inac+ve 1 2 2</p>
    <p>vCPU A vCPU B vCPU C</p>
    <p>overloaded</p>
    <p>Causes of overloading</p>
    <p>vCPU A vCPU B vCPU C</p>
    <p>inac+ve vCPU A vCPU B vCPU C</p>
    <p>inac+ve 3 1 3 2 2</p>
    <p>overloaded</p>
  </div>
  <div class="page">
    <p>Overloading preven+on  Gleaner gradually consolidates workload threads</p>
    <p>Gleaner only proceeds if  vCPU uFlizaFon would not be too high aler consolidaFon  Workload can be evenly distributed among acFve vCPUs</p>
    <p>Gleaner stops consolidaFon when it observes throughput starts to reduce</p>
    <p>Refer to the paper for details 12</p>
  </div>
  <div class="page">
    <p>Experiment Setup  A prototype implementaFon at user level  Dell PowerEdge server with 16 cores</p>
    <p>Ubuntu Linux 12.04 with kernel updated to 3.9.4</p>
    <p>VMM is KVM in Ubuntu distribuFon.</p>
    <p>Each VM has 16 vCPUs</p>
    <p>Benchmarks:  PARSEC 3.0 suites  MySQL driven by SysBench  MatMul (Matrix MulFplicaFon)</p>
  </div>
  <div class="page">
    <p>Applica+on Performance on a VM with dedicated hardware</p>
    <p>One vCPU on each core (16 vCPUs on 16 pCPUs). Slowdowns are relaFve to bare-metal performance.</p>
  </div>
  <div class="page">
    <p>Applica+on performance on oversubscribed system</p>
    <p>Run a PARSEC benchmark in a VM and matmul in the other VM.  32 vCPUs (16 in each VM) on 16 cores  Performance is relaFve to the stock system (without gleaner)</p>
    <p>Gleaner improves applica+on performance significantly (16x) on oversubscribed systems</p>
  </div>
  <div class="page">
    <p>Gleaner improves overall throughput  Run mulFple idenFcal VMs (16 vCPUs each)  Throughput is relaFve to stock systems without gleaner</p>
  </div>
  <div class="page">
    <p>Conclusion  BWW is caused by waking-up blocked threads being delayed by switching back idle vCPUs</p>
    <p>BWW significantly reduces applicaFon performance in VMs and overall throughput</p>
    <p>Key: reduce harmful vCPU switches due to idling  Gleaner combines two methods --- resource retenFon and consolidaFon scheduling</p>
    <p>Gleaner can improve applicaFon performance by up to 16x and system throughput by 3x.</p>
  </div>
  <div class="page">
    <p>Conclusion  BWW is caused by waking-up blocked threads being delayed by switching back idle vCPUs</p>
    <p>BWW significantly reduces applicaFon performance in VMs and overall throughput</p>
    <p>Key: reduce harmful vCPU switches due to idling  Gleaner combines two methods --- resource retenFon and consolidaFon scheduling</p>
    <p>Gleaner can improve applicaFon performance by up to 16x and system throughput by 3x.</p>
    <p>dingxn@njit.edu hpp://www.njit.edu/~dingxn</p>
  </div>
</Presentation>
