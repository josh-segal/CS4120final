<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Elastic Ephemeral Storage for Serverless Analytics</p>
    <p>Ana Klimovic*, Yawen Wang*, Patrick Stuedi+, Animesh Trivedi+, Jonas Pfefferle+, Christos Kozyrakis*</p>
    <p>*Stanford University, +IBM Research</p>
    <p>OSDI 2018</p>
  </div>
  <div class="page">
    <p>Serverless Computing</p>
    <p>o Serverless computing enables users to launch short-lived tasks with high elasticity and fine-grain resource billing</p>
  </div>
  <div class="page">
    <p>Serverless Computing</p>
    <p>o Serverless computing enables users to launch short-lived tasks with high elasticity and fine-grain resource billing</p>
    <p>o Serverless computing is increasingly used for interactive analytics</p>
    <p>PyWren (SoCC17)</p>
    <p>gg: The Stanford Builder</p>
    <p>ExCamera (NSDI17) serverless</p>
    <p>Amazon Aurora Serverless</p>
  </div>
  <div class="page">
    <p>Serverless Computing</p>
    <p>o Serverless computing enables users to launch short-lived tasks with high elasticity and fine-grain resource billing</p>
    <p>o Serverless computing is increasingly used for interactive analytics  Exploit massive parallelism with large number of serverless tasks</p>
    <p>Result</p>
    <p>User query &amp;</p>
    <p>input data</p>
  </div>
  <div class="page">
    <p>The Challenge: Data Sharing o Analytics jobs involve multiple stages of execution</p>
    <p>o Serverless tasks need an efficient way to communicate intermediate data between different stages of execution</p>
    <p>Result User query</p>
    <p>&amp; input data</p>
    <p>ephemeral data</p>
  </div>
  <div class="page">
    <p>In traditional analytics</p>
    <p>o Ephemeral data is exchanged directly between tasks</p>
    <p>mapper1</p>
    <p>mapper2</p>
    <p>mapper3</p>
    <p>mapper0 reducer0</p>
    <p>reducer1</p>
  </div>
  <div class="page">
    <p>In traditional analytics</p>
    <p>o Ephemeral data is exchanged directly between tasks</p>
    <p>reducer0</p>
    <p>reducer1</p>
    <p>mapper1</p>
    <p>mapper2</p>
    <p>mapper3</p>
    <p>mapper0</p>
  </div>
  <div class="page">
    <p>In serverless analytics</p>
    <p>o Direct communication between serverless tasks is difficult:  Tasks are short-lived and stateless</p>
    <p>reducer0</p>
    <p>reducer1</p>
    <p>mapper1</p>
    <p>mapper2</p>
    <p>mapper3</p>
    <p>mapper0</p>
    <p>?</p>
  </div>
  <div class="page">
    <p>In serverless analytics</p>
    <p>o The natural approach for sharing ephemeral data is through a common data store</p>
    <p>reducer0</p>
    <p>reducer1</p>
    <p>mapper1</p>
    <p>mapper2 mapper3</p>
    <p>mapper0</p>
  </div>
  <div class="page">
    <p>In serverless analytics</p>
    <p>o The natural approach for sharing ephemeral data is through a common data store</p>
    <p>reducer0</p>
    <p>reducer1</p>
    <p>mapper1</p>
    <p>mapper2 mapper3</p>
    <p>mapper0</p>
  </div>
  <div class="page">
    <p>Requirements for Ephemeral Storage</p>
    <p>Understanding Ephemeral Storage for Serverless Analytics. Ana Klimovic, Yawen Wang, Christos Kozyrakis, Patrick Stuedi, Jonas Pfefferle, Animesh Trivedi. ATC18, 2018.</p>
  </div>
  <div class="page">
    <p>Requirements for Ephemeral Storage</p>
    <p>Example of performance-cost tradeoff for a serverless video analytics job with different ephemeral data store configurations</p>
    <p>Finding the Pareto optimal resource allocation is non</p>
    <p>trivialand gets harder with multiple jobs.</p>
  </div>
  <div class="page">
    <p>Requirements for Ephemeral Storage</p>
    <p>Existing cloud storage systems do not meet the elasticity, performance and cost demands of serverless analytics jobs.</p>
  </div>
  <div class="page">
    <p>Pocket</p>
    <p>o An elastic, distributed data store for ephemeral data sharing in serverless analytics</p>
    <p>o Pocket achieves high performance and cost efficiency by:  Leveraging multiple storage technologies  Rightsizing resource allocations for applications  Autoscaling storage resources in the cluster based on usage</p>
    <p>o Pocket achieves similar performance to Redis, an in-memory key value store, while saving ~60% in cost for various serverless analytics jobs</p>
  </div>
  <div class="page">
    <p>Metadata server(s) request routing</p>
    <p>Pocket Design</p>
    <p>Storage server CPU Net</p>
    <p>HDD</p>
    <p>Storage server CPU Net</p>
    <p>Flash</p>
    <p>Storage server CPU Net</p>
    <p>DRAM</p>
    <p>Storage server CPU Net</p>
    <p>DRAM</p>
    <p>Controller app-driven resource allocation &amp; scaling</p>
    <p>Metadata server(s) request routing</p>
  </div>
  <div class="page">
    <p>Metadata server(s) request routing</p>
    <p>Using Pocket Job A</p>
    <p>Job B</p>
    <p>Job C</p>
    <p>i. Register job</p>
    <p>Controller app-driven resource allocation &amp; scaling ii. Allocate &amp; assign</p>
    <p>resources for job</p>
    <p>Metadata server(s) request routing</p>
    <p>Storage server CPU Net</p>
    <p>HDD</p>
    <p>Storage server CPU Net</p>
    <p>Flash</p>
    <p>Storage server CPU Net</p>
    <p>DRAM</p>
    <p>Storage server CPU Net</p>
    <p>DRAM</p>
  </div>
  <div class="page">
    <p>Metadata server(s) request routing</p>
    <p>Using Pocket Job A</p>
    <p>Job B</p>
    <p>Job C</p>
    <p>iii. Deregister job</p>
    <p>PUT x</p>
    <p>GET/PUT API accepts hints about job attributes and</p>
    <p>data lifetime</p>
    <p>Controller app-driven resource allocation &amp; scaling</p>
    <p>Metadata server(s) request routing</p>
    <p>Storage server CPU Net</p>
    <p>HDD</p>
    <p>Storage server CPU Net</p>
    <p>Flash</p>
    <p>Storage server CPU Net</p>
    <p>DRAM</p>
    <p>Storage server CPU Net</p>
    <p>DRAM</p>
  </div>
  <div class="page">
    <p>Assigning Resources to Jobs</p>
    <p>Controller app-driven resource allocation &amp; scaling</p>
    <p>i. Register job</p>
    <p>Optional hints about job:  Latency sensitivity  Maximum # of concurrent tasks  Total ephemeral data capacity  Peak aggregate bandwidth required</p>
    <p>Job A</p>
    <p>Metadata server(s) request routing</p>
    <p>Metadata server(s) request routing</p>
    <p>Storage server CPU Net</p>
    <p>HDD</p>
    <p>Storage server CPU Net</p>
    <p>Flash</p>
    <p>Storage server CPU Net</p>
    <p>DRAM</p>
    <p>Storage server CPU Net</p>
    <p>DRAM</p>
  </div>
  <div class="page">
    <p>Assigning Resources to Jobs</p>
    <p>Controller app-driven resource allocation &amp; scaling ii. Allocate &amp; assign</p>
    <p>resources for job</p>
    <p>Job A</p>
    <p>Job A: Server C  Server D</p>
    <p>Job B: Server A  Server B  Server C</p>
    <p>online bin-packing algorithm</p>
    <p>Job Weight Map</p>
    <p>Metadata server(s) request routing</p>
    <p>Metadata server(s) request routing</p>
    <p>i. Register job</p>
    <p>Storage server A CPU Net</p>
    <p>HDD</p>
    <p>Storage server B CPU Net</p>
    <p>Flash</p>
    <p>Storage server C CPU Net</p>
    <p>DRAM</p>
    <p>Storage server D CPU Net</p>
    <p>DRAM</p>
  </div>
  <div class="page">
    <p>Autoscaling the Pocket Cluster</p>
    <p>o Goal: scale cluster resources dynamically based on resource usage</p>
    <p>o Mechanisms:  Monitor CPU, network bandwidth, and storage capacity utilization  Add/remove storage &amp; metadata nodes to keep utilization within range  Steer data for incoming jobs to active nodes  Drain inactive nodes as jobs terminate</p>
    <p>o Avoid migrating data</p>
  </div>
  <div class="page">
    <p>Implementation</p>
    <p>o Pockets metadata and storage server implementation is based on the Apache Crail distributed storage system [1]</p>
    <p>o We use ReFlex for the Flash storage tier [2]</p>
    <p>o Pocket runs the storage and metadata servers in containers, orchestrated using Kubernetes [3]</p>
    <p>[1] Apache Crail (incubating). http://crail.apache.org/ [2] ReFlex: Remote Flash == Local Flash. Ana Klimovic, Heiner Litz, Christos Kozyrakis. ASPLOS17, 2017. [3] Kubernetes. https://kubernetes.io/</p>
  </div>
  <div class="page">
    <p>Pocket Evaluation</p>
    <p>o We deploy Pocket on Amazon EC2</p>
    <p>o We use AWS Lambda as our serverless platform o Applications: MapReduce sort, video analytics, distributed compilation</p>
    <p>Controller m5.xlarge</p>
    <p>Metadata server m5.xlarge</p>
    <p>DRAM server r4.2xlarge</p>
    <p>NVMe Flash server i3.2xlarge</p>
    <p>SATA/SAS SSD server i2.2xlarge</p>
    <p>HDD server h1.2xlarge</p>
  </div>
  <div class="page">
    <p>Application Performance with Pocket o Compare Pocket to S3 and Redis, which are commonly used today</p>
    <p>S3 does not provide sufficient</p>
    <p>throughput</p>
    <p>MapReduce sort job hints Ephemeral capacity</p>
    <p>Latency sensitive False Aggregate peak throughput</p>
  </div>
  <div class="page">
    <p>Application Performance with Pocket o Compare Pocket to S3 and Redis, which are commonly used today</p>
    <p>Pocket achieves similar performance to Redis but uses NVMe Flash</p>
    <p>MapReduce sort job hints Ephemeral capacity</p>
    <p>Latency sensitive False Aggregate peak throughput</p>
  </div>
  <div class="page">
    <p>Application Storage Cost with Pocket o Pocket leverages job attribute hints for cost-effective resource allocation and</p>
    <p>amortizes VM costs across multiple jobs, offering a pay-what-you-use model</p>
    <p>(with throughput &amp; capacity hints)</p>
    <p>Pocket reduces cost by ~60% compared</p>
    <p>to Redis for all 3 jobs</p>
  </div>
  <div class="page">
    <p>Autoscaling the Pocket Cluster</p>
    <p>Job hints Job1: Sort Job2: Video analytics Job3: Sort</p>
    <p>Latency sensitive False False False</p>
    <p>Ephemeral data capacity 10 GB 6 GB 10 GB</p>
    <p>Aggregate throughput 3 GB/s 2.5 GB/s 3 GB/s</p>
  </div>
  <div class="page">
    <p>Autoscaling the Pocket Cluster The controller elastically</p>
    <p>scales resources to meet the requirements</p>
    <p>of multiple jobs</p>
    <p>Job hints Job1: Sort Job2: Video analytics Job3: Sort</p>
    <p>Latency sensitive False False False</p>
    <p>Ephemeral data capacity 10 GB 6 GB 10 GB</p>
    <p>Aggregate throughput 3 GB/s 2.5 GB/s 3 GB/s</p>
  </div>
  <div class="page">
    <p>Conclusion o Pocket is a distributed ephemeral storage system that:</p>
    <p>Leverages multiple storage technologies  Rightsizes resource allocations for applications  Autoscales storage cluster resources based on usage</p>
    <p>o We designed Pocket for ephemeral data sharing in serverless analytics. More generally, Pocket is an elastic, distributed /tmp.</p>
    <p>www.github.com/stanford-mast/pocket</p>
  </div>
</Presentation>
