<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>SplitJoin: A Scalable, Low-latency Stream Join</p>
    <p>Architecture with Adjustable Ordering Precision</p>
    <p>Mohammadreza Najafi</p>
    <p>Joint work with:</p>
    <p>Mohammad Sadoghi</p>
    <p>Hans-Arno Jacobsen</p>
    <p>Middleware Systems Research Group</p>
    <p>Department of Informatics</p>
    <p>Technical University of Munich</p>
    <p>m.najafi@in.tum.de</p>
    <p>USENIX ATC, June, 2016</p>
    <p>Technische Universitt Mnchen</p>
    <p>http://blog.mikiobraun.de/2011/10/one-does-not-simply-scale-into-realtime-processing.html</p>
  </div>
  <div class="page">
    <p>Technische Universitt Mnchen</p>
    <p>Stream Processing Challenges</p>
    <p>SPLITJOIN, USENIX ATC 20162</p>
    <p>Targeted AdvertisingAlgorithmic Trading</p>
    <p>Intrusion Detection</p>
    <p>Applications</p>
    <p>Stream join is a fundamental operation for relating</p>
    <p>information from different streams</p>
  </div>
  <div class="page">
    <p>Technische Universitt Mnchen</p>
    <p>Stream Join Semantic</p>
    <p>SPLITJOIN, USENIX ATC 20163</p>
    <p>Sliding window concept for unbounded streams</p>
    <p>Window</p>
    <p>Window</p>
    <p>Stream</p>
    <p>Stream</p>
    <p>Condition</p>
  </div>
  <div class="page">
    <p>Technische Universitt Mnchen</p>
    <p>Window</p>
    <p>Window T</p>
    <p>u p</p>
    <p>le</p>
    <p>N e</p>
    <p>w T</p>
    <p>u p</p>
    <p>le</p>
    <p>T u</p>
    <p>p le</p>
    <p>T u</p>
    <p>p le</p>
    <p>T u</p>
    <p>p le</p>
    <p>Condition</p>
    <p>Stream Join Semantic</p>
    <p>SPLITJOIN, USENIX ATC 20164</p>
    <p>Sliding window concept for unbounded streams</p>
  </div>
  <div class="page">
    <p>Technische Universitt Mnchen</p>
    <p>Stream Join Semantic</p>
    <p>SPLITJOIN, USENIX ATC 20165</p>
    <p>Sliding window concept for unbounded streams</p>
    <p>Window</p>
    <p>Window</p>
    <p>Customer Stream</p>
    <p>Product Stream</p>
    <p>Equal Product ID</p>
    <p>Name: Alex, Product ID: 1234</p>
    <p>Product ID: 1234, Price: 24 Euro</p>
    <p>Name: Jan, Product ID: 1678</p>
    <p>Product ID: 234, Price: 756 Euro</p>
    <p>Name: Alex, Product ID: 1234, Price: 24 Euro</p>
  </div>
  <div class="page">
    <p>Technische Universitt Mnchen</p>
    <p>Basic Join Core Architecture</p>
    <p>SPLITJOIN, USENIX ATC 20166</p>
    <p>Processing Unit</p>
    <p>Window Buffer-S</p>
    <p>Window Buffer-R</p>
    <p>R</p>
    <p>S</p>
    <p>Result Large window buffers: expensive processing</p>
  </div>
  <div class="page">
    <p>Technische Universitt Mnchen</p>
    <p>Conventional Parallel Stream Join Architecture</p>
    <p>SPLITJOIN, USENIX ATC 2016</p>
    <p>Window-R /N R</p>
    <p>S</p>
    <p>Join Core 1 Join Core 2 Join Core N</p>
    <p>N</p>
    <p>+</p>
    <p>Pratanu Roy, Jens Teubner, and Rainer Gemulla. Low-latency handshake join. PVLDB14</p>
    <p>Latency (average visiting latency):</p>
    <p>Amount of time that it takes for two consecutive</p>
    <p>tuples (one from each stream) to be compared</p>
  </div>
  <div class="page">
    <p>Technische Universitt Mnchen</p>
    <p>Conventional Parallel Stream Join Architecture</p>
    <p>SPLITJOIN, USENIX ATC 2016</p>
    <p>Window-R /N R</p>
    <p>S</p>
    <p>Join Core 1 Join Core 2 Join Core N</p>
    <p>N</p>
    <p>Incurs inter-core communication overhead among join cores</p>
    <p>+</p>
    <p>Pratanu Roy, Jens Teubner, and Rainer Gemulla. Low-latency handshake join. PVLDB14</p>
  </div>
  <div class="page">
    <p>Technische Universitt Mnchen</p>
    <p>Conventional Parallel Stream Join Architecture</p>
    <p>SPLITJOIN, USENIX ATC 2016</p>
    <p>Window-R /N R</p>
    <p>S</p>
    <p>Join Core 1 Join Core 2 Join Core N</p>
    <p>N</p>
    <p>Incurs inter-core communication overhead among join cores</p>
    <p>+</p>
    <p>R1 R1</p>
    <p>S1 S1</p>
    <p>Requires complex logic to avoid race conditions</p>
    <p>S1 home join core</p>
    <p>Pratanu Roy, Jens Teubner, and Rainer Gemulla. Low-latency handshake join. PVLDB14</p>
  </div>
  <div class="page">
    <p>Technische Universitt Mnchen</p>
    <p>Conventional Parallel Stream Join Architecture</p>
    <p>SPLITJOIN, USENIX ATC 2016</p>
    <p>Window-R /N R</p>
    <p>S</p>
    <p>Join Core 1 Join Core 2 Join Core N</p>
    <p>N</p>
    <p>Incurs high latency due to bi-directional flow and chaining</p>
    <p>Incurs inter-core communication overhead among join cores</p>
    <p>+</p>
    <p>Requires complex logic to avoid race conditions</p>
    <p>Pratanu Roy, Jens Teubner, and Rainer Gemulla. Low-latency handshake join. PVLDB14</p>
  </div>
  <div class="page">
    <p>Technische Universitt Mnchen</p>
    <p>Conventional Parallel Stream Join Architecture</p>
    <p>SPLITJOIN, USENIX ATC 2016</p>
    <p>Window-R /N R</p>
    <p>S</p>
    <p>Join Core 1 Join Core 2 Join Core N</p>
    <p>N</p>
    <p>Incurs high latency due to bi-directional flow and chaining</p>
    <p>Incurs inter-core communication overhead among join cores</p>
    <p>+</p>
    <p>oldest</p>
    <p>Requires explicit expiration messages using a complex coordination unit</p>
    <p>Expiry</p>
    <p>message</p>
    <p>Requires complex logic to avoid race conditions</p>
    <p>Pratanu Roy, Jens Teubner, and Rainer Gemulla. Low-latency handshake join. PVLDB14</p>
    <p>home join core</p>
  </div>
  <div class="page">
    <p>Technische Universitt Mnchen</p>
    <p>Novel (Parallel) Stream Join: SplitJoin</p>
    <p>SPLITJOIN, USENIX ATC 201612</p>
    <p>Tuple-RTuple-S Ti me</p>
    <p>Window-R</p>
    <p>Split</p>
    <p>BufferWindow-S</p>
    <p>Buffer</p>
    <p>JC</p>
    <p>Splitting of the join computation into independent storage and processing steps</p>
    <p>JC stands for</p>
    <p>Join Core</p>
  </div>
  <div class="page">
    <p>Technische Universitt Mnchen</p>
    <p>SplitJoin Independent Storage &amp; Processing Concept</p>
    <p>SPLITJOIN, USENIX ATC 201613</p>
    <p>Tuple-S</p>
    <p>Process Tuple-R, Store Tupl e-S</p>
    <p>Process Tuple-S, Store Tupl e-R</p>
    <p>Split</p>
    <p>JC</p>
    <p>Window-S</p>
    <p>Tuple-R</p>
    <p>left-region</p>
    <p>Window-RTup le-RTuple-R</p>
    <p>right-region</p>
    <p>Ti me Tuple-R</p>
    <p>Splitting of the join computation into independent storage and processing steps</p>
  </div>
  <div class="page">
    <p>Technische Universitt Mnchen</p>
    <p>SplitJoin Parallelization</p>
    <p>SPLITJOIN, USENIX ATC 201614</p>
    <p>Distributor</p>
    <p>Split</p>
    <p>Buffer</p>
    <p>Window-S /2 Buffer</p>
    <p>Window-R /2</p>
    <p>JC</p>
    <p>Split</p>
    <p>Buffer</p>
    <p>Window-S /2 Buffer</p>
    <p>Window-R /2</p>
    <p>JC</p>
    <p>Break each window into smaller sub-windows</p>
    <p>Join cores take turns in storing tuples</p>
  </div>
  <div class="page">
    <p>Technische Universitt Mnchen</p>
    <p>JC JC JC JC</p>
    <p>Coordinator Distributor</p>
    <p>JC JC JC JC</p>
    <p>bi-directional data-flow top-down data-flow</p>
    <p>replicate-forward</p>
    <p>SplitJoin Data-flow</p>
    <p>SPLITJOIN, USENIX ATC 201615</p>
    <p>No inter-core communication</p>
    <p>Significant reduction in latency</p>
    <p>+</p>
    <p>No expiry messages required</p>
    <p>No race conditions</p>
  </div>
  <div class="page">
    <p>Technische Universitt Mnchen</p>
    <p>SplitJoin Abstract Architecture</p>
    <p>SPLITJOIN, USENIX ATC 201616</p>
    <p>//Creating SplitJoin join cores--------------------JoinCore* joincores[THREAD_COUNT]; for(int i=0; i &lt; THREAD_COUNT; i++){ joincores[i] = new JoinCore(i,-1); joincores[i]-&gt;Rand_Init();}</p>
    <p>//Create threads &amp; linking them to the join cores--pthread_t thread_ID[THREAD_COUNT]; for(int i=0; i &lt; THREAD_COUNT; i++){ pthread_create(&amp;thread_ID[i], NULL, &amp; JoinCore :: JoinCore_Engine_helper, joincores[i]);} //-------------------------------------------------</p>
    <p>//Collecting the resulting tuples------------------pthread_t collector_thread_ID; pthread_create(&amp;collector_thread_ID, NULL, Collector, regions); //-------------------------------------------------</p>
    <p>//Feeding the incoming streams to SplitJoin regionspthread_t feeder_thread_ID; pthread_create(&amp;feeder_thread_ID, NULL, Feeder, regions); //-------------------------------------------------</p>
    <p>JC JC JC JC</p>
    <p>Input Data Distribution Network</p>
    <p>Thread</p>
    <p>FIFO</p>
    <p>Thread</p>
    <p>FIFO</p>
    <p>FIFO</p>
    <p>Thread</p>
    <p>FIFO</p>
    <p>FIFO</p>
    <p>Thread</p>
    <p>FIFO</p>
    <p>FIFO</p>
    <p>Thread</p>
    <p>FIFO</p>
    <p>FIFO</p>
    <p>Thread</p>
    <p>FIFO</p>
    <p>Thread</p>
    <p>FIFO</p>
    <p>Thread</p>
    <p>FIFO</p>
    <p>Thread</p>
    <p>FIFO</p>
    <p>Thread</p>
    <p>FIFO</p>
    <p>Result Gathering Network</p>
  </div>
  <div class="page">
    <p>Technische Universitt Mnchen</p>
    <p>Buffer</p>
    <p>Buffer</p>
    <p>JC 2</p>
    <p>Input Data Distribution Network</p>
    <p>Result Gathering Network</p>
    <p>Buffer</p>
    <p>Buffer</p>
    <p>JC 1</p>
    <p>Query Processing Example</p>
    <p>SPLITJOIN, USENIX ATC 201617</p>
    <p>PriceID</p>
    <p>SELECT *</p>
    <p>FROM R, S</p>
    <p>WHERE R.ID == S.ID AND</p>
    <p>R.Price &lt; S.Price</p>
    <p>WITHIN 10 Minutes</p>
    <p>In-order distribution and processing</p>
  </div>
  <div class="page">
    <p>Technische Universitt Mnchen</p>
    <p>Buffer</p>
    <p>Buffer</p>
    <p>JC 2</p>
    <p>Input Data Distribution Network</p>
    <p>Result Gathering Network</p>
    <p>Buffer</p>
    <p>Buffer</p>
    <p>JC 1</p>
    <p>Query Processing Example</p>
    <p>SPLITJOIN, USENIX ATC 201618</p>
    <p>SELECT *</p>
    <p>FROM R, S</p>
    <p>WHERE R.ID == S.ID AND</p>
    <p>R.Price &lt; S.Price</p>
    <p>WITHIN 10 Minutes</p>
    <p>In-order distribution and processing</p>
  </div>
  <div class="page">
    <p>Technische Universitt Mnchen</p>
    <p>Buffer</p>
    <p>Buffer</p>
    <p>JC 2</p>
    <p>Input Data Distribution Network</p>
    <p>Result Gathering Network</p>
    <p>Buffer</p>
    <p>Buffer</p>
    <p>JC 1</p>
    <p>Query Processing Example</p>
    <p>SPLITJOIN, USENIX ATC 201619</p>
    <p>SELECT *</p>
    <p>FROM R, S</p>
    <p>WHERE R.ID == S.ID AND</p>
    <p>R.Price &lt; S.Price</p>
    <p>WITHIN 10 Minutes</p>
    <p>In-order distribution and processing</p>
  </div>
  <div class="page">
    <p>Technische Universitt Mnchen</p>
    <p>Buffer</p>
    <p>Buffer</p>
    <p>JC 2</p>
    <p>Input Data Distribution Network</p>
    <p>Result Gathering Network</p>
    <p>Buffer</p>
    <p>Buffer</p>
    <p>JC 1</p>
    <p>Query Processing Example</p>
    <p>SPLITJOIN, USENIX ATC 201620</p>
    <p>FROM R, S</p>
    <p>WHERE R.ID == S.ID AND</p>
    <p>R.Price &lt; S.Price</p>
    <p>WITHIN 10 Minutes</p>
    <p>In-order distribution and processing</p>
  </div>
  <div class="page">
    <p>Technische Universitt Mnchen</p>
    <p>Buffer</p>
    <p>Buffer</p>
    <p>JC 2</p>
    <p>Input Data Distribution Network</p>
    <p>Result Gathering Network</p>
    <p>Buffer</p>
    <p>Buffer</p>
    <p>JC 1</p>
    <p>Query Processing Example</p>
    <p>SPLITJOIN, USENIX ATC 201621</p>
    <p>Match!</p>
    <p>SELECT *</p>
    <p>FROM R, S</p>
    <p>WHERE R.ID == S.ID AND</p>
    <p>R.Price &lt; S.Price</p>
    <p>WITHIN 10 Minutes</p>
    <p>In-order distribution and processing</p>
  </div>
  <div class="page">
    <p>Technische Universitt Mnchen</p>
    <p>Buffer</p>
    <p>Buffer</p>
    <p>JC 2</p>
    <p>Input Data Distribution Network</p>
    <p>Result Gathering Network</p>
    <p>Buffer</p>
    <p>Buffer</p>
    <p>JC 1</p>
    <p>Query Processing Example</p>
    <p>SPLITJOIN, USENIX ATC 201622</p>
    <p>Match!</p>
    <p>SELECT *</p>
    <p>FROM R, S</p>
    <p>WHERE R.ID == S.ID AND</p>
    <p>R.Price &lt; S.Price</p>
    <p>WITHIN 10 Minutes</p>
    <p>In-order distribution and processing</p>
  </div>
  <div class="page">
    <p>Technische Universitt Mnchen</p>
    <p>S</p>
    <p>S2-R3</p>
    <p>S2-R9</p>
    <p>S1-R4</p>
    <p>S2-R8</p>
    <p>R3-S3</p>
    <p>R1-S4</p>
    <p>R2-S4</p>
    <p>S2-R4</p>
    <p>S3-R8</p>
    <p>R2-S6</p>
    <p>R3-S8</p>
    <p>R0-S2S1-R8</p>
    <p>Punctuated by R Tuples</p>
    <p>R</p>
    <p>S2-R7</p>
    <p>Punctuated By S Tuples</p>
    <p>Buffer</p>
    <p>Window-S /2 Buffer</p>
    <p>Window-R /2</p>
    <p>JC</p>
    <p>Buffer</p>
    <p>Window-S /2 Buffer</p>
    <p>Window-R /2</p>
    <p>JC 1 2</p>
    <p>Merger Merger</p>
    <p>Collector</p>
    <p>Punctuated by R Tuples</p>
    <p>Punctuated By S Tuples</p>
    <p>Buffer</p>
    <p>Window-S /2 Buffer</p>
    <p>Window-R /2</p>
    <p>JC</p>
    <p>Buffer</p>
    <p>Window-S /2 Buffer</p>
    <p>Window-R /2</p>
    <p>JC 1 2</p>
    <p>Merger Merger</p>
    <p>Collector</p>
    <p>Result Gathering Network (Including Ordering Punctuations)</p>
    <p>SPLITJOIN, USENIX ATC 201623</p>
    <p>Scalable result collection</p>
    <p>Adjustable ordering precision and cost</p>
    <p>Join result ordering:</p>
    <p>Necessity depends on applications requirements</p>
    <p>Join result ordering precision:</p>
    <p>Parameterized strictness guarantee for join result</p>
    <p>ordering</p>
    <p>Punctuation mark:</p>
    <p>A marker placed into result stream to separate</p>
    <p>tuples into groups</p>
  </div>
  <div class="page">
    <p>Technische Universitt Mnchen</p>
    <p>S</p>
    <p>S2-R3</p>
    <p>S2-R9</p>
    <p>S1-R4</p>
    <p>S2-R8</p>
    <p>R3-S3</p>
    <p>R1-S4</p>
    <p>R2-S4</p>
    <p>S2-R4</p>
    <p>S3-R8</p>
    <p>R2-S6</p>
    <p>R3-S8</p>
    <p>R0-S2S1-R8</p>
    <p>Punctuated by R Tuples</p>
    <p>R</p>
    <p>S2-R7</p>
    <p>Punctuated By S Tuples</p>
    <p>Buffer</p>
    <p>Window-S /2 Buffer</p>
    <p>Window-R /2</p>
    <p>JC</p>
    <p>Buffer</p>
    <p>Window-S /2 Buffer</p>
    <p>Window-R /2</p>
    <p>JC 1 2</p>
    <p>Merger Merger</p>
    <p>Collector</p>
    <p>Punctuated by R Tuples</p>
    <p>Punctuated By S Tuples</p>
    <p>Buffer</p>
    <p>Window-S /2 Buffer</p>
    <p>Window-R /2</p>
    <p>JC</p>
    <p>Buffer</p>
    <p>Window-S /2 Buffer</p>
    <p>Window-R /2</p>
    <p>JC 1 2</p>
    <p>Merger Merger</p>
    <p>Collector</p>
    <p>Result Gathering Network (Including Ordering Punctuations)</p>
    <p>SPLITJOIN, USENIX ATC 201624</p>
    <p>Scalable result collection</p>
    <p>Adjustable ordering precision and cost</p>
  </div>
  <div class="page">
    <p>Technische Universitt Mnchen</p>
    <p>Comparison (Conventional Solutions vs. SplitJoin)</p>
    <p>Bi-directional data-flow</p>
    <p>Inter-core communication  Complex join core</p>
    <p>Race prevention mechanism is needed</p>
    <p>No simultaneous neighbor to neighbor</p>
    <p>communication  Reduces communication channel utilization</p>
    <p>Global coordinator  Requires an expiry message per tuple</p>
    <p>Reduces communication channel utilization</p>
    <p>Increases the complexity of the system</p>
    <p>Tuples arrival ordering is not</p>
    <p>preserved</p>
    <p>No ordering mechanism</p>
    <p>Need to buffer</p>
    <p>Top-down data-flow</p>
    <p>No inter-core communication  Simple join core</p>
    <p>Higher performance</p>
    <p>No race condition</p>
    <p>Tuples have only one path to each join core</p>
    <p>Full utilization of communication channels</p>
    <p>No global coordination is required  No need for expiry messages</p>
    <p>Tuples arrival order is inherently</p>
    <p>preserved</p>
    <p>Punctuated ordering</p>
    <p>Adjustable precision</p>
    <p>Failure resilience</p>
    <p>SPLITJOIN, USENIX ATC 201625</p>
  </div>
  <div class="page">
    <p>Technische Universitt Mnchen</p>
    <p>Experimental Setup</p>
    <p>A 32-core Dell PowerEdge R820 featuring 4  Intel E5-4650 processors</p>
    <p>Ubuntu 14.04.2 LTS, Docker container</p>
    <p>Two streams R = (x:int, y:float, z:char[20]) and S = (a:int, b:float, c:double,</p>
    <p>d:bool) are joined via a two-dimensional band join, as follows:</p>
    <p>For time-based window, we used gettime()to generate time-stamps</p>
    <p>Using synthetic timing improves the overall performance by about 15%</p>
    <p>SPLITJOIN, USENIX ATC 201626</p>
    <p>WHERE r.x BETWEEN s.a-10 AND s.a+10</p>
    <p>AND r.y BETWEEN s.b-10 AND s.b+10</p>
  </div>
  <div class="page">
    <p>Technische Universitt Mnchen</p>
    <p>Throughput Comparison</p>
    <p>SPLITJOIN, USENIX ATC 201627</p>
    <p>~60%</p>
    <p>Significant performance improvement</p>
  </div>
  <div class="page">
    <p>Technische Universitt Mnchen</p>
    <p>Latency Comparison</p>
    <p>SPLITJOIN, USENIX ATC 201628</p>
    <p>More than 3 times</p>
    <p>reduction</p>
    <p>Substantial latency</p>
    <p>reduction</p>
  </div>
  <div class="page">
    <p>Technische Universitt Mnchen</p>
    <p>SplitJoin Processing Pipeline Latency Measurements</p>
    <p>SPLITJOIN, USENIX ATC 201629</p>
    <p>Streams</p>
    <p>Matches</p>
    <p>Distribution (dis)</p>
    <p>Distribution Network</p>
    <p>Result Gathering Network</p>
    <p>Result gathering</p>
    <p>(gat)</p>
    <p>Execution (exe)</p>
    <p>Processing Latency</p>
    <p>(ete) Jo in</p>
    <p>C o</p>
    <p>re 1</p>
    <p>Jo in</p>
    <p>C o</p>
    <p>re 2</p>
    <p>Jo in</p>
    <p>C o</p>
    <p>re 4</p>
    <p>Jo in</p>
    <p>C o</p>
    <p>re 3</p>
    <p>Jo in</p>
    <p>C o</p>
    <p>re N</p>
    <p>SplitJoin detailed latency reports</p>
  </div>
  <div class="page">
    <p>Technische Universitt Mnchen</p>
    <p>Ordering Precision Overhead</p>
    <p>SPLITJOIN, USENIX ATC 201630</p>
    <p>Ordering precision effect on</p>
    <p>throughput</p>
  </div>
  <div class="page">
    <p>Technische Universitt Mnchen</p>
    <p>Conclusions</p>
    <p>SplitJoin is a scalable stream join architecture that removes inter-core</p>
    <p>communications and dependencies</p>
    <p>A splitting abstraction to process and store incoming data streams concurrently and</p>
    <p>independently</p>
    <p>A top-down data flow for a coordination-free distribution and parallelization of stream</p>
    <p>join processing</p>
    <p>A distribution tree with logarithmic access latency</p>
    <p>SplitJoin breaks the stream join with window size of X into smaller (but</p>
    <p>similar) stream joins with window sizes of X/N</p>
    <p>As a result, other stream join algorithms (e.g., indexed-based stream join) are applicable</p>
    <p>to each individual join core without affecting the architecture of SplitJoin</p>
    <p>SplitJoin is accompanied by an adjustable punctuated ordering mechanism</p>
    <p>SPLITJOIN, USENIX ATC 201631</p>
  </div>
</Presentation>
