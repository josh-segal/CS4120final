<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>A Day Late and a Dollar Short</p>
    <p>The Case for Research on Cloud Billing Systems</p>
    <p>Robert Jellinek Yan Zhai Thomas Ristenpart Michael Swift {jellinek | yanzhai | rist | swift}@cs.wisc.edu</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Motivation: Why study cloud billing?</p>
    <p>Our contributions</p>
    <p>Our study</p>
    <p>Results</p>
    <p>Conclusions and future work</p>
  </div>
  <div class="page">
    <p>Motivation: Cloud Billing</p>
    <p>Many performance, reliability, and cost efficiency studies of the cloud.</p>
    <p>Little attention has been paid to their billing systems.</p>
    <p>Pay-as-you-go pricing model relies upon complex, large-scale billing systems</p>
  </div>
  <div class="page">
    <p>Motivation: Cloud Billing</p>
    <p>Resource accounting is an interesting challenge.</p>
    <p>How to track all compute resource usage in</p>
    <p>real time,</p>
    <p>at fine granularity</p>
    <p>maintaining accuracy,</p>
    <p>and not hurting performance?</p>
  </div>
  <div class="page">
    <p>Study of cloud billing mechanisms.  We were able to:</p>
    <p>Disambiguate billing by reverse engineering</p>
    <p>Uncover bugs:  Race conditions in EC2</p>
    <p>Inconsistencies across billing interfaces in EC2</p>
    <p>Rackspace bug causing overcharges</p>
    <p>Detect systematic undercharging from caching/aggregation</p>
    <p>Characterize performance of billing latency.</p>
  </div>
  <div class="page">
    <p>Study Overview</p>
    <p>Guiding question:</p>
    <p>How accurate, timely, and predictable</p>
    <p>are customer-facing billing interfaces?</p>
    <p>Measured billing for:</p>
    <p>compute time</p>
    <p>storage (IOPS and capacity)</p>
    <p>network usage</p>
    <p>Experimented on AWS, GCE, and Rackspace</p>
    <p>Calculated billing latency of billing interfaces.</p>
  </div>
  <div class="page">
    <p>Methodology</p>
    <p>Instrument providers API calls to record timestamps of all operations.</p>
    <p>Launch an instance and execute one of several workloads</p>
    <p>Fetch instances OS-based resource-usage data</p>
    <p>Terminate instance after workload completion</p>
    <p>Poll for billing updates over all measured resources.</p>
  </div>
  <div class="page">
    <p>Billing Interfaces  EC2:</p>
    <p>Web-based GUI management console</p>
    <p>Programatically accessible CSVs:</p>
    <p>Hourly</p>
    <p>Monthly (to date)</p>
    <p>Cost-allocation (allows user to tag resources and filter costs by tag)</p>
    <p>GCE:</p>
    <p>Web-based GUI interface</p>
    <p>Rackspace:</p>
    <p>Web-based GUI interface</p>
  </div>
  <div class="page">
    <p>Amazon Web Billing Interface</p>
  </div>
  <div class="page">
    <p>Billing Latency</p>
    <p>We define as: the time between when a resource is consumed, and when the corresponding charge for that usage become visible to the customer.</p>
    <p>Important that billing updates are:</p>
    <p>Timely</p>
    <p>Predictable</p>
    <p>Atomic</p>
    <p>But this was not the case</p>
  </div>
  <div class="page">
    <p>EC2 Web/CSV Billing Latency</p>
    <p>Web Console Avg latency: 6:41 hours Std dev: 4:10 hours</p>
    <p>CSV Avg latency: 8:15 hours Std dev: 3 hours</p>
  </div>
  <div class="page">
    <p>GCE/Rackspace Billing Latency</p>
    <p>Lower bounds on GCE billing latency for 13 instances, in DAYS. Error bars indicate upper bounds.</p>
    <p>Rackspace billing latency for 21 instances in HOURS, +/- 10 minutes. All billing updates occurred between 9-10am UTC.</p>
    <p>GCE Rackspace</p>
  </div>
  <div class="page">
    <p>EC2: Why such latency?</p>
    <p>We deliberately staggered the start times of instances. The billing update schedule suggests periodic batch processing.</p>
    <p>EC2: Staggered Launch Times</p>
  </div>
  <div class="page">
    <p>What is Compute Time?</p>
    <p>Major events in an instance lifetime</p>
  </div>
  <div class="page">
    <p>EC2 Compute Time Results</p>
  </div>
  <div class="page">
    <p>Compute Time Anomalies Other anomalies in EC2 compute billing</p>
  </div>
  <div class="page">
    <p>Compute Time</p>
    <p>Race condition causes some instances to not get billed, but yield roughly 2 minutes of free uptime.</p>
    <p>We created a special fast boot kernel that booted and immediately sent heartbeat messages to our control server.</p>
    <p>Terminated instances  seconds after launch.</p>
  </div>
  <div class="page">
    <p>Storage Billing</p>
    <p>Provider charges based on its view of storage ops</p>
    <p>Bugs:</p>
    <p>In Rackspace deleting a volume before detaching from an instance caused it to hang and accrue charges.</p>
    <p>Anomalies:</p>
    <p>I/O charges in EC2 are lower than /proc/diskstats would suggest; caching or aggregation?</p>
    <p>Example:</p>
    <p>Write (4kb); write(4kb); -&gt; 1 storage op</p>
    <p>Write (4kb); seek(1 million); write(4kb) -&gt; 2 storage ops</p>
  </div>
  <div class="page">
    <p>IOPS Aggregation/Caching?</p>
    <p>Ratio of the number of storage ops measured by /proc/diskstats to the number of ops billed by EC2</p>
  </div>
  <div class="page">
    <p>Network Billing</p>
    <p>EC2 underbilled by an average of 5.6% for Internet-outbound traffic.</p>
    <p>Measured traffic using Netfilter/iptables</p>
    <p>Some Rackspace instances were greatly underbilled: 125 MB / 1 GB not billed. Another bug?</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>Current billing systems are:  Not timely</p>
    <p>Often unpredictable</p>
    <p>Not transparent</p>
    <p>Largely inaccessible via APIs</p>
    <p>Customer must rely on provider for ground truth</p>
    <p>Cannot use billing information for real-time deployment decisions.</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>Future research should investigate the tradeoffs between performance, and accurate, timely, transparent resource accounting and billing.</p>
    <p>This will likely necessitate collaboration with industry.</p>
    <p>Providers should expose a billing API to enable programmatic queries of billing information.</p>
  </div>
  <div class="page">
    <p>Thank you!</p>
  </div>
</Presentation>
