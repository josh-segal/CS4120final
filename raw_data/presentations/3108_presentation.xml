<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Ballot permutations in</p>
    <p>Prt  Voter</p>
    <p>Vanessa Teague</p>
    <p>University of Melbourne</p>
    <p>Joint work with Peter Y A Ryan</p>
    <p>Luxembourg University</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>This talk is about how we should construct</p>
    <p>the candidate order in Prt  Voter</p>
    <p>There are lots of alternatives available</p>
    <p>This is one more, arguably the best</p>
    <p>Its only good for selecting one candidate</p>
    <p>Not for STV, IRV, AV etc.</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Intro to Prt  Voter</p>
    <p>Existing ways of generating the candidate</p>
    <p>ordering</p>
    <p>Some issues in some circumstances</p>
    <p>Our solution</p>
    <p>For prime numbers of candidates</p>
    <p>For composites</p>
  </div>
  <div class="page">
    <p>Prt  Voter</p>
    <p>Uses pre-prepared ballot forms that encode the vote in familiar form.</p>
    <p>The candidate list is randomised for each ballot form.</p>
    <p>Information defining the candidate list is encrypted in an onion value printed on each ballot form.</p>
    <p>Red</p>
    <p>Green</p>
    <p>Chequered</p>
    <p>Fuzzy</p>
    <p>Cross</p>
    <p>$rJ9*mn4R&amp;8</p>
  </div>
  <div class="page">
    <p>Voters Ballot Receipt</p>
    <p>$rJ9*mn4R&amp;8</p>
    <p>Qu8&amp;km3?j908</p>
    <p>Various procedures to ensure the onion  Matches the candidate</p>
    <p>list</p>
    <p>Doesnt leak the candidate list (except with the right key)</p>
    <p>Tallying on a bulletin board  With proof of</p>
    <p>correctness</p>
    <p>Signature</p>
    <p>Onion</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Intro to Prt  Voter</p>
    <p>Existing ways of generating the candidate</p>
    <p>ordering</p>
    <p>Some issues in some circumstances</p>
    <p>Our solution</p>
    <p>For prime numbers of candidates</p>
    <p>For composites</p>
  </div>
  <div class="page">
    <p>Existing ways of randomising</p>
    <p>the candidate list 1. Print one ciphertext per candidate</p>
    <p>[PaV05, Scratch &amp; Vote, Xia et al EVT08]</p>
    <p>But might use too much space</p>
    <p>But depends on voter vigilance to verify</p>
    <p>checkmarks arent shifted</p>
    <p>random permutation [PaVwithPaillier08]</p>
    <p>But decryption on the BB may violate privacy 7</p>
  </div>
  <div class="page">
    <p>Full permutations in one</p>
    <p>ciphertext  Could we write a full permutation, but in</p>
    <p>one ciphertext?</p>
    <p>Mix all the ({permutation}, {index}) pairs</p>
    <p>Decrypt the permutation on the BB and derive</p>
    <p>the selected candidate name</p>
    <p>Vulnerable to a pattern-recognition (a.k.a.</p>
    <p>Italian) attack when there are lots of</p>
    <p>candidates, even for first-past-the-post</p>
    <p>Adding a cyclic shift, as in [PaVwithPaillier08],</p>
    <p>doesnt fix it 8</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Intro to Prt  Voter</p>
    <p>Existing ways of generating the candidate</p>
    <p>ordering</p>
    <p>Some issues in some circumstances</p>
    <p>Our solution</p>
    <p>For prime numbers of candidates</p>
    <p>For composites</p>
  </div>
  <div class="page">
    <p>Full permutations in one</p>
    <p>ciphertext (cont)  The coercer visits the voter after he votes but</p>
    <p>before tallying, and demands to know his</p>
    <p>ballot permutation</p>
    <p>The voter could lie, but...</p>
    <p>What was the</p>
    <p>candidate order?</p>
  </div>
  <div class="page">
    <p>Full permutations in one</p>
    <p>ciphertext (cont)  When the permutations are decrypted on</p>
    <p>the BB, the coercer</p>
    <p>Looks for the claimed ballot permutation</p>
    <p>If n! &gt; #voters, theres only likely to be one vote</p>
    <p>consistent with the voters story</p>
    <p>Or 0 if he lied</p>
    <p>Sees which candidate was chosen</p>
    <p>Rewards or punishes the voter</p>
    <p>(If the voter somehow knows another</p>
    <p>tabulated permutation, he can resist coercion) 11</p>
  </div>
  <div class="page">
    <p>Cyclic shifts vs defence in</p>
    <p>depth  Perfectly hiding, but reliant on some voter</p>
    <p>vigilance</p>
    <p>if an attacker can manipulate some</p>
    <p>checkmarks undetected, she can</p>
    <p>systematically skew the outcome.</p>
    <p>e.g. if Green is always two steps after Red,</p>
    <p>attack a precinct where everyone votes Green</p>
    <p>and shift checkmarks 2 steps to benefit Red</p>
    <p>Benaloh's hash chain of receipts would fix this</p>
    <p>except the immediate input attack 12</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Intro to Prt  Voter</p>
    <p>Existing ways of generating the candidate</p>
    <p>ordering</p>
    <p>Some issues in some circumstances</p>
    <p>Our solution</p>
    <p>For prime numbers of candidates</p>
    <p>For composites</p>
  </div>
  <div class="page">
    <p>Florentine squares</p>
    <p>Key property:</p>
    <p>For any two distinct candidates A and B</p>
    <p>and for any shift t, there exists exactly one</p>
    <p>row such that A and B are separated by t.</p>
    <p>So, assuming that the adversary doesn't</p>
    <p>know the row, shifting the X is equally</p>
    <p>likely to produce any other candidate.</p>
  </div>
  <div class="page">
    <p>Using Florentine squares</p>
    <p>Florentine squares are well known and</p>
    <p>easy to construct when n is prime</p>
    <p>(n = #candidates)</p>
    <p>C = k.i mod n</p>
    <p>C = candidate,</p>
    <p>k = row,</p>
    <p>i = column</p>
  </div>
  <div class="page">
    <p>Using Florentine squares</p>
    <p>We still need a cyclic shift s</p>
    <p>Now each ballot has two onions:</p>
    <p>{k} k [1,n-1], the row of the Florentine square</p>
    <p>{s} s Zq*, a cyclic shift.</p>
    <p>The candidate order will be given by the k-th</p>
    <p>row shifted cyclically upwards by:</p>
    <p>k-1 s (mod n)</p>
  </div>
  <div class="page">
    <p>Extracting and tallying the vote</p>
    <p>Thus, for a ballot with k and s, for which</p>
    <p>the voter chooses index i, their candidate</p>
    <p>will be:</p>
    <p>i k + s (mod n)</p>
    <p>Thus we can transform the receipt</p>
    <p>(i, {k}, {s})</p>
    <p>Using the additive homomorphism</p>
    <p>To i{k} {s}= {i k + s}</p>
    <p>Which can be put through mixes. 17</p>
  </div>
  <div class="page">
    <p>Receipt freeness</p>
    <p>The coercer can try the same attack</p>
    <p>But the voter just lies about the cyclic shift</p>
    <p>Pretends that the true ballot permutation was</p>
    <p>whatever he really received, shifted to please</p>
    <p>the coercer 18</p>
    <p>What was the</p>
    <p>candidate order?</p>
  </div>
  <div class="page">
    <p>Non-prime numbers of</p>
    <p>candidates  We could just pad it out with NULL</p>
    <p>candidates, or</p>
    <p>Construct the ballot permutation from Fp,</p>
    <p>where p is the largest prime less than n</p>
    <p>Choose a random row of Fp</p>
    <p>Insert p+1, p+2, ... in random places until</p>
    <p>enough candidates</p>
    <p>Apply a cyclic shift</p>
  </div>
  <div class="page">
    <p>Non-prime numbers of</p>
    <p>candidates (cont)  Now there are 2 + (n-p) ciphertexts on the</p>
    <p>ballot</p>
    <p>(n is the number of candidates, p the nearest</p>
    <p>smaller prime)</p>
    <p>This retains the symmetry property</p>
    <p>so shifting the checkmark produces no</p>
    <p>systematic shift from one candidate to another</p>
  </div>
  <div class="page">
    <p>Non-prime numbers of</p>
    <p>candidates</p>
    <p>Privacy and tabulation</p>
    <p>The tabulation reveals some, but not</p>
    <p>much, info about the candidate selection</p>
    <p>Whether the candidate came from the</p>
    <p>Florentine square part or not,</p>
    <p>but equally likely to be any candidate</p>
    <p>A coercer may try the pattern-based attack</p>
    <p>But again the voter just lies about the cyclic</p>
    <p>shift 21</p>
  </div>
  <div class="page">
    <p>Attack models</p>
    <p>This seems to counter the skewing attack, or at</p>
    <p>least ensure that the attacker can at best</p>
    <p>randomise votes.</p>
    <p>But no good if she tries to manipulate the k and</p>
    <p>s onions</p>
    <p>This seems best countered by applying</p>
    <p>signatures to these and perhaps pre-posting</p>
    <p>them to the WBB.</p>
    <p>Note: we can pre-audit such signatures, in</p>
    <p>contrast to the signatures on the receipts.</p>
  </div>
  <div class="page">
    <p>Further work</p>
    <p>Other voting schemes</p>
    <p>AV, STV, etc</p>
  </div>
</Presentation>
