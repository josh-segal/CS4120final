<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Neighbor-Specific BGP (NS-BGP): More Flexible Routing Policies</p>
    <p>While Improving Global Stability</p>
    <p>Yi Wang, Jennifer Rexford Princeton University</p>
    <p>Michael Schapira Yale University &amp; UC Berkeley</p>
  </div>
  <div class="page">
    <p>A Case For Customized Route Selection  Large ISPs usually have multiple paths to reach</p>
    <p>the same destination  Different paths have different properties  Different neighbors may prefer different routes</p>
    <p>Bank</p>
    <p>VoIP provider</p>
    <p>School</p>
    <p>Most secure Shortest latency</p>
    <p>Lowest cost</p>
  </div>
  <div class="page">
    <p>Such Flexibility Is Infeasible Today</p>
    <p>BGP: The routing protocol (glue) of the Internet  An ISP configures BGP to realize its routing policies</p>
    <p>BGP uses a restrictive, one-route-fits-all model  Every router selects one best route (per destination) for</p>
    <p>all neighbors</p>
  </div>
  <div class="page">
    <p>BGPs Node-based Route Selection</p>
    <p>In conventional BGP, a node (ISP or router) has one ranking function (that reflects its routing policy)</p>
  </div>
  <div class="page">
    <p>A New Model: Neighbor-Specific BGP (NS-BGP)</p>
    <p>Change the way routes are selected  Under NS-BGP, a node (ISP or router) can select</p>
    <p>different routes for different neighbors</p>
    <p>Inherit everything else from conventional BGP  Message format, message dissemination,</p>
  </div>
  <div class="page">
    <p>The Neighbor-based Route Selection Model</p>
    <p>In NS-BGP, a node has one ranking function per neighbor / per edge link</p>
    <p>i</p>
    <p>j is node is ranking function for link (j, i), or equivalently, for neighbor node j.</p>
  </div>
  <div class="page">
    <p>Would the Additional Flexibility Cause Routing Oscillation?</p>
    <p>Conventional BGP can easily oscillate  Even without neighbor-specific route selection</p>
    <p>(3 d) is available</p>
    <p>(2 d) is available</p>
    <p>(3 d) is not available</p>
    <p>(1 d) is available (2 d) is not</p>
    <p>available</p>
    <p>(1 d) is not available</p>
  </div>
  <div class="page">
    <p>Why Is The Internet Generally Stable?</p>
    <p>Its mostly because of $$   Policy configurations based on ISPs bilateral</p>
    <p>business relationships  Customer-Provider</p>
    <p>Customers pay provider for access to the Internet</p>
    <p>Peer-Peer  Peers exchange traffic free of charge</p>
    <p>Most well-known result reflecting this practice: Gao-Rexford stability conditions</p>
  </div>
  <div class="page">
    <p>The Gao-Rexford Stability Conditions</p>
    <p>Preference condition  Prefer customer routes over peer or provider routes</p>
    <p>Node 3 prefers 3 d over 3 1 2 d</p>
  </div>
  <div class="page">
    <p>The Gao-Rexford Stability Conditions</p>
    <p>Export condition  Export only customer routes to peers or providers</p>
    <p>Valid paths: 1 2 d and 6 4 3 d Invalid path: 5 8 d and 6 5 d</p>
  </div>
  <div class="page">
    <p>The Gao-Rexford Stability Conditions</p>
    <p>Topology condition  No cycle of customer-provider relationships</p>
  </div>
  <div class="page">
    <p>How Bad Is It If NS-BGP Violates Gao-Rexford</p>
    <p>NS-BGP may not always converge  Even in very simple cases</p>
    <p>Gao-Rexford limits NS-BGPs benefits  ISPs may want to violate the preference condition</p>
    <p>E.g., a bank may want to pay more to use a secure provider route</p>
    <p>Some important questions need to be answered  Would such violation lead to routing oscillation?</p>
  </div>
  <div class="page">
    <p>Stability Conditions for NS-BGP</p>
    <p>Surprising results: NS-BGP improves stability!  The more flexible NS-BGP requires significantly less</p>
    <p>restrictive conditions to guarantee routing stability</p>
    <p>The preference condition is no longer needed  An ISP can choose any exportable route for each</p>
    <p>neighbor</p>
    <p>That is, an ISP can choose  Any route for a customer  Any customer-learned route for a peer or provider</p>
  </div>
  <div class="page">
    <p>Why Stability is Easier to Obtain in NS-BGP?</p>
    <p>The same system will be stable in NS-BGP  Key: the availability of (3 d) to 1 is independent of the</p>
    <p>presence or absence of (3 2 d)</p>
    <p>(3 d) is available</p>
    <p>(2 d) is available</p>
    <p>(1 d) is available</p>
  </div>
  <div class="page">
    <p>How the Proof Works</p>
    <p>Leverage Iterated Dominance  An underlying structure of a routing instance  Provides constructive proof and convergence guarantee</p>
    <p>d</p>
    <p>customer provider</p>
  </div>
  <div class="page">
    <p>Other Merits of NS-BGP</p>
    <p>Stable under topology changes  E.g., link/node failures and new peering links</p>
    <p>Stable in partial deployment  Individually ISPs can safely deploy NS-BGP incrementally</p>
    <p>More robust with backup routing  Certain routing anomalies (e.g., BGP Wedgies) are less</p>
    <p>likely to happen than in conventional BGP</p>
  </div>
  <div class="page">
    <p>NS-BGP Is Practical!</p>
    <p>Some proposals dont get deployed, due to the lack of  Economic incentives (e.g., IP multicast)  No advantages in partial deployment (e.g., S-BGP)  Not incrementally deployable (e.g., a brand new</p>
    <p>interdomain routing protocol)</p>
    <p>NS-BGP addresses all these issues!  Natural economic motivation  Immediate benefit for an individual ISP that deploys it</p>
    <p>(while maintaining global stability)  Only software updates to routers needed, no coordination</p>
    <p>with neighbors needed</p>
  </div>
  <div class="page">
    <p>Incrementally Deployable</p>
    <p>Neighbor-specific forwarding  Existing IP-in-IP or MPLS tunneling techniques</p>
    <p>?</p>
  </div>
  <div class="page">
    <p>Incrementally Deployable  Route dissemination within an AS</p>
    <p>To ensure an edge router has enough route visibility</p>
    <p>Distributed approach  BGP ADD-PATH  No need to disseminate all paths</p>
  </div>
  <div class="page">
    <p>Different Route Selection Models  Subscription model</p>
    <p>Provider offers a set of ranking functions, customer picks</p>
    <p>Total-control model  Customer decides its own ranking function</p>
    <p>Hybrid model  Customer controls some parameters of its ranking</p>
    <p>function, provider controls the rest</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>NS-BGP: a new route-selection model  Immediate benefits to individual ISPs that deploy it  New understanding of the trade-offs between local</p>
    <p>policy flexibility and global routing stability  Future work: dynamics of NS-BGP (e.g.,</p>
    <p>convergence speed)</p>
  </div>
  <div class="page">
    <p>Backup Slides</p>
  </div>
  <div class="page">
    <p>Neighbor-Specific Forwarding  Tunnels from ingress links to egress links</p>
    <p>IP-in-IP or Multiprotocol Label Switching (MPLS)</p>
    <p>?</p>
  </div>
  <div class="page">
    <p>Route Dissemination Within An AS  To ensure an edge router has enough route</p>
    <p>visibility  Distributed approaches</p>
    <p>A quick n dirty fix: multiple iBGP sessions between routers  A better approach: BGP Add-PATH  No need to disseminate all paths</p>
  </div>
  <div class="page">
    <p>Route Dissemination Within An AS  Centralized approach  RCP / Morpheus</p>
    <p>A small number of logically-centralized servers  With complete visibility  Select BGP routes for routers</p>
  </div>
  <div class="page">
    <p>Flexible Route Assignment  Support for multiple paths already available</p>
    <p>Virtual routing and forwarding (VRF) (Cisco)  Virtual router (Juniper)</p>
    <p>D: (red path): R6 D: (blue path): R7</p>
    <p>R3s forwarding table (FIB) entries</p>
  </div>
  <div class="page">
    <p>How Is A Ranking Function Configured?</p>
    <p>We model policy configuration as a decision problem</p>
    <p>of how to reconcile multiple (potentially conflicting) objectives in choosing the best route</p>
    <p>Whats the simplest method with such property?</p>
  </div>
  <div class="page">
    <p>Use Weighted Sum Instead of Strict Ranking</p>
    <p>Every route has a final score:  The route with highest is selected as best:</p>
    <p>S(r)  wi ai (r) ci C</p>
    <p>r</p>
    <p>r* arg max r R</p>
    <p>( wci aci ci C</p>
    <p>)</p>
    <p>S(r)</p>
  </div>
  <div class="page">
    <p>Multiple Decision Processes for NS-BGP</p>
    <p>Multiple decision processes running in parallel  Each realizes a different policy with a different set</p>
    <p>of weights of policy objectives 29</p>
  </div>
  <div class="page">
    <p>How To Translate A Policy Into Weights?</p>
    <p>Picking a best alternative according to a set of criteria is a well-studied topic in decision theory</p>
    <p>Analytic Hierarchy Process (AHP) uses a weighted sum method (like we used)</p>
  </div>
  <div class="page">
    <p>Use Preference Matrix To Calculate Weights  Humans are best at doing pair-wise comparisons  Administrators use a number between 1 to 9 to</p>
    <p>specify preference in pair-wise comparisons  1 means equally preferred, 9 means extreme preference</p>
    <p>AHP calculates the weights, even if the pair-wise comparisons are inconsistent</p>
    <p>Latency Stability Security Weight</p>
    <p>Latency 1 3 9 0.69</p>
    <p>Stability 1/3 1 3 0.23</p>
    <p>Security 1/9 1/3 1 0.08</p>
  </div>
  <div class="page">
    <p>The AHP Hierarchy of An Example Policy</p>
  </div>
  <div class="page">
    <p>Every BGP route has a set of attributes  Some are controlled by neighbor ASes  Some are controlled locally  Some are controlled by no one</p>
    <p>Fixed step-by-step route-selection algorithm</p>
    <p>Policies are realized through adjusting locally controlled attributes  E.g., local-preference: customer 100, peer</p>
    <p>Local-preference</p>
    <p>AS Path Length</p>
    <p>Origin Type</p>
    <p>MED</p>
    <p>eBGP/iBGP</p>
    <p>IGP Metric</p>
    <p>Router ID</p>
    <p>Why Are Policy Trade-offs Hard in BGP?</p>
  </div>
  <div class="page">
    <p>Limitation 1: Overloading of BGP attributes  Policy objectives are forced to share BGP</p>
    <p>attributes</p>
    <p>Difficult to add new policy objectives</p>
    <p>Business Relationships Traffic EngineeringLocal-preference</p>
    <p>Why Are Policy Trade-offs Hard in BGP?</p>
  </div>
  <div class="page">
    <p>Why Are Policy Trade-offs Hard in BGP?</p>
    <p>Limitation 2: Difficulty in incorporating side information</p>
    <p>Many policy objectives require side information  External information: measurement data, business</p>
    <p>relationships database, registry of prefix ownership,   Internal state: history of (prefix, origin) pairs, statistics</p>
    <p>of route instability,</p>
    <p>Side information is very hard to incorporate today</p>
  </div>
  <div class="page">
    <p>Inside Morpheus Server: Policy Objectives As Independent Modules</p>
    <p>Each module tags routes in separate spaces (solves limitation 1)</p>
    <p>Easy to add side information (solves limitation 2)  Different modules can be implemented independently</p>
    <p>(e.g., by third-parties)  evolvability 36</p>
  </div>
  <div class="page">
    <p>Why Are Policy Trade-offs Hard in BGP?</p>
    <p>Limitation 3: Strictly rank one attribute over another (not possible to make trade-offs between policy objectives)</p>
    <p>E.g., a policy with trade-off between business relationships and stability</p>
    <p>Infeasible today</p>
    <p>If all paths are somewhat unstable, pick the most stable path (of any length); Otherwise, pick the shortest path through a customer.</p>
  </div>
  <div class="page">
    <p>Prototype Implementation</p>
    <p>Implemented as an extension to XORP  Four new classifier modules (as a pipeline)  New decision processes that run in parallel</p>
  </div>
  <div class="page">
    <p>Evaluation  Classifiers work very efficiently</p>
    <p>Morpheus is faster than the standard BGP decision process (w/ multiple alternative routes for a prefix)</p>
    <p>Throughput  our unoptimized prototype can support a large number of decision processes</p>
    <p>Classifiers Biz relationships Stability Latency Security</p>
    <p>Avg. time (us) 5 20 33 103</p>
    <p>Decision processes Morpheus XORP-BGP</p>
    <p>Avg. time (us) 54 279</p>
    <p># of decision process 1 10 20 40</p>
    <p>Throughput (update/sec) 890 841 780 740</p>
  </div>
  <div class="page">
    <p>How a neighbor gets the routes in NS-BGP</p>
    <p>Having the ISP pick the best one and only export that route +: Simple, backwards compatible -: Reveals its policy</p>
    <p>Having the ISP export all available routes, and pick the best one itself +: Doesnt reveal any internal policy -: Has to have the capability of exporting multiple routes</p>
    <p>and tunneling to the egress points</p>
  </div>
  <div class="page">
    <p>Why wasnt BGP designed to be neighbor-specific?</p>
    <p>Different networks have little need to use different paths to reach the same destination</p>
    <p>There was far less path diversity to explore  There was no data plane mechanisms (e.g.,</p>
    <p>tunneling) that support forwarding to multiple next hops for the same destination without causing loops</p>
    <p>Selecting and (perhaps more importantly) disseminating multiple routes per destination would require more computational power from the routers than what's available at the time then BGP was first designed</p>
  </div>
</Presentation>
