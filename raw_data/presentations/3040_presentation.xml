<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Obladi: Oblivious Serializable Transactions in the Cloud</p>
    <p>N ATA C H A C R O O K S</p>
    <p>M AT T H E W B U R K E</p>
    <p>E T H A N C E C C H E T T I</p>
    <p>S I TA R H A R E L</p>
    <p>R A C H I T A G A R WA L</p>
    <p>L O R E N Z O A LV I S I</p>
  </div>
  <div class="page">
    <p>This talk</p>
    <p>Obladi</p>
    <p>a cloud-based transactional key-value store that supports ACID transactions</p>
    <p>but hides from the cloud what, when, and how data is accessed</p>
  </div>
  <div class="page">
    <p>Why Obladi  Cloud Privacy Concerns</p>
    <p>Applications are moving to the cloud</p>
    <p>Applications store sensitive information</p>
    <p>Cloud storage means sharing data with an untrusted party</p>
    <p>Cloud services can be the target of hacking, subpoena</p>
  </div>
  <div class="page">
    <p>Protecting sensitive information Electronic Health Record (EHR) systems</p>
    <p>store/manage patient data</p>
    <p>underpin large hospitalsMedical Record 1</p>
    <p>Medical Record 2</p>
    <p>Molly:</p>
    <p>Desmond:</p>
  </div>
  <div class="page">
    <p>Protecting sensitive information</p>
    <p>Use encryption to hide contents of the data</p>
    <p>Still leaking information about what data is being accessed</p>
    <p>Still leaking information about when data is being accessed</p>
    <p>Medical Record 1</p>
    <p>Medical Record 2</p>
    <p>Molly:</p>
    <p>Desmond:</p>
  </div>
  <div class="page">
    <p>Guaranteeing obliviousness</p>
    <p>Hiding access patterns (obliviousness)</p>
    <p>what data is being accessed</p>
    <p>when data is being accessed</p>
    <p>how data is being accessed</p>
  </div>
  <div class="page">
    <p>How to maintain functionality? Large body of work on analytical queries</p>
    <p>but no way to run ACID transactions obliviously</p>
    <p>This talk:</p>
    <p>How to obliviously and efficiently implement serializable ACID transactions on top of untrusted cloud storage</p>
  </div>
  <div class="page">
    <p>Security Guarantees The adversary should learn no information about</p>
    <p>Begin</p>
    <p>Read(x)</p>
    <p>Read(y)</p>
    <p>Commit</p>
    <p>Begin</p>
    <p>Write(a)</p>
    <p>Write(b)</p>
    <p>Abort</p>
    <p>Write(c)</p>
  </div>
  <div class="page">
    <p>Threat Model</p>
    <p>Trusted Proxy Clients</p>
    <p>Clients</p>
    <p>Trusted communication</p>
    <p>Untrusted Cloud Storage</p>
    <p>Untrusted Communication</p>
    <p>Doctors communicating over hospital LAN Cloud storage (Dynamo,S3, etc.) accessed over WAN</p>
    <p>Obladi adopts the trusted proxy model</p>
  </div>
  <div class="page">
    <p>Failure Model</p>
    <p>But that cloud storage is reliable</p>
    <p>Unreliable Proxy</p>
    <p>Clients</p>
    <p>Clients Reliable Cloud</p>
    <p>Storage</p>
    <p>Obladi assumes clients and proxy can fail</p>
  </div>
  <div class="page">
    <p>Obladis security in a nutshell</p>
    <p>Workload Independence Obladi ensures that the request pattern sent to the untrusted</p>
    <p>cloud is independent of ongoing transactions</p>
  </div>
  <div class="page">
    <p>The paradox of transactions</p>
    <p>Transactions make improving efficiency</p>
    <p>easier</p>
    <p>Transactions make guaranteeing obliviousness</p>
    <p>harder</p>
    <p>ACID must hold at commit time</p>
    <p>only</p>
    <p>Isolation and durability add structure</p>
    <p>to read/write operations</p>
  </div>
  <div class="page">
    <p>Oblivious RAM [Goldreich1996]</p>
    <p>Obladi builds on Oblivious RAM (ORAM)</p>
    <p>ORAM hides access patterns for read and write operations by making requests to untrusted storage</p>
    <p>independent of workload</p>
  </div>
  <div class="page">
    <p>R W RR</p>
    <p>R W R</p>
    <p>ORAM from 1000 feet</p>
    <p>Read (x)</p>
    <p>Write(y)</p>
    <p>Generate physical read/write requests from logical operations</p>
    <p>Send requests to (encrypted) dummy data to hide what is being requested</p>
    <p>R</p>
  </div>
  <div class="page">
    <p>Challenges of Transactional ORAM ORAM guarantees workload independence for read/write operations.</p>
    <p>How can we preserve workload independence but also</p>
    <p>No concurrency control</p>
    <p>Write-back ordering for security vs for durability</p>
    <p>Limited Concurrency</p>
  </div>
  <div class="page">
    <p>Delayed Visibility Obladi centers its design around the notion of</p>
    <p>delayed visibility</p>
    <p>On the one hand, ACID guarantees apply only when transactions commit</p>
    <p>On the other, commit operations can be delayed</p>
  </div>
  <div class="page">
    <p>The secret sauce: epochs</p>
    <p>B</p>
    <p>R (x)</p>
    <p>C</p>
    <p>B</p>
    <p>W(a)</p>
    <p>R(b)</p>
    <p>C</p>
    <p>W(b)</p>
    <p>R(x)</p>
    <p>Epoch 1</p>
    <p>Epoch 2</p>
    <p>B</p>
    <p>Obladi uses delayed visibility to partition transaction into fixed-sized epochs</p>
    <p>Delays commit notifications until the epoch ends</p>
    <p>R(y)</p>
    <p>B</p>
    <p>R(a)</p>
    <p>C</p>
    <p>W(b)</p>
  </div>
  <div class="page">
    <p>The secret sauce: epochs</p>
    <p>ACID guarantees only hold for committed transactions</p>
    <p>Enforce durability and consistency at epoch boundaries only</p>
    <p>Consistency Durability</p>
    <p>B</p>
    <p>R (x)</p>
    <p>C</p>
    <p>B</p>
    <p>W(a)</p>
    <p>R(b)</p>
    <p>C</p>
    <p>W(b)</p>
    <p>R(x)</p>
    <p>Epoch 1</p>
    <p>Epoch 2</p>
    <p>B</p>
    <p>R(y)</p>
    <p>B</p>
    <p>R(a)</p>
    <p>C</p>
    <p>W(b)</p>
  </div>
  <div class="page">
    <p>The secret sauce: epochs</p>
    <p>Within an epoch, Obladi executes transactions at the trusted proxy, buffering writes until</p>
    <p>epoch ends</p>
    <p>Proxy</p>
    <p>Version Cache</p>
    <p>a</p>
    <p>bb</p>
    <p>Epoch 1</p>
    <p>B</p>
    <p>R (x)</p>
    <p>C</p>
    <p>B</p>
    <p>W(a)</p>
    <p>R(b)</p>
    <p>C</p>
    <p>W(b)</p>
    <p>Epoch 1</p>
    <p>R(y)</p>
    <p>B</p>
    <p>R(a)</p>
    <p>C</p>
    <p>W(b)</p>
  </div>
  <div class="page">
    <p>Proxy</p>
    <p>The secret sauce: epochs</p>
    <p>ORAM Better support for read-only transactions</p>
    <p>a</p>
    <p>bb</p>
    <p>Version Cache</p>
    <p>Delayed visibility improves performance B</p>
    <p>R (x)</p>
    <p>C</p>
    <p>B</p>
    <p>W(a)</p>
    <p>R(b)</p>
    <p>C</p>
    <p>W(b)</p>
    <p>Epoch 1</p>
    <p>R(y)</p>
    <p>B</p>
    <p>R(a)</p>
    <p>C</p>
    <p>W(b)</p>
  </div>
  <div class="page">
    <p>The secret sauce: epochs</p>
    <p>Delayed visibility should not increase contention</p>
    <p>Should allow transactions in the same epoch to see each others effects</p>
    <p>Obladi chooses a concurrency control that optimistically exposes uncommitted writes to</p>
    <p>ongoing transactions</p>
    <p>B</p>
    <p>R (x)</p>
    <p>C</p>
    <p>B</p>
    <p>W(a)</p>
    <p>R(b)</p>
    <p>C</p>
    <p>W(b)</p>
    <p>Epoch 1</p>
    <p>R(y)</p>
    <p>B</p>
    <p>R(a)</p>
    <p>W(b)</p>
  </div>
  <div class="page">
    <p>The secret sauce: epochs</p>
    <p>The fixed structure of epochs helps guarantee workload independence.</p>
    <p>ORAM observes the same sequence of reads followed by the buffered writes Writes</p>
    <p>R (x)</p>
    <p>Epoch 1</p>
    <p>R(y) PAD PAD</p>
    <p>R(b) R(a)</p>
  </div>
  <div class="page">
    <p>How to guarantee good performance?</p>
    <p>Data Handler</p>
    <p>Oram Executor</p>
    <p>Untrusted Cloud Storage</p>
    <p>Send batches of requests to ORAM</p>
    <p>But ORAM constructions are largely sequential</p>
    <p>R (x) R(b) R(a)</p>
    <p>PAD W(a) W(b)</p>
    <p>Proxy</p>
  </div>
  <div class="page">
    <p>Parallelising ORAM</p>
    <p>How can we parallelise ORAM?</p>
    <p>For correctness: parallelization should be linearizable For security: parallelization should be workload independent</p>
    <p>Data Handler</p>
    <p>Oram Executor</p>
    <p>Untrusted Cloud StorageR (x) R(b) R(a)</p>
    <p>PAD W(a) W(b)</p>
    <p>Proxy</p>
  </div>
  <div class="page">
    <p>Parallelising ORAM</p>
    <p>R(b)</p>
    <p>Recall: breakdown logical operations into physical read/writes to cloud storage</p>
    <p>R R W W W R</p>
  </div>
  <div class="page">
    <p>Guaranteeing linearizability</p>
    <p>To ensure linearizability Execute operations that do not have data dependencies in parallel</p>
    <p>Data-dependent operations must be executed sequentially</p>
    <p>R(b) R R W W W R</p>
  </div>
  <div class="page">
    <p>Dependencies violate independence</p>
    <p>Wait for data dependencies to be satisfied introduces timing channels Only exist between real objects, not dummies</p>
    <p>Delaying reads for real objects causes delay, dummy objects dont</p>
    <p>R(b) R R W W W R</p>
  </div>
  <div class="page">
    <p>Introduces side-channel</p>
    <p>Must wait for all potential data dependencies Can exist between any pairs of reads and writes</p>
    <p>Never secure to execute reads and writes in parallel</p>
    <p>R(b) R R W W W R</p>
  </div>
  <div class="page">
    <p>Delayed visibility to the rescue</p>
    <p>Delayed visibility allows ORAM to be consistent at epoch boundaries only Writes can be safely delayed to epoch end</p>
    <p>R(b) R R W W W R</p>
  </div>
  <div class="page">
    <p>Delayed visibility to the rescue</p>
    <p>Separate ORAM execution into a read phase and a write phase</p>
    <p>Read Phase: reads all necessary blocks Write Phase: writes all necessary blocks</p>
    <p>R</p>
    <p>R R W W</p>
    <p>R W</p>
    <p>WR R</p>
    <p>R(b)</p>
  </div>
  <div class="page">
    <p>Delayed visibility to the rescue</p>
    <p>Executing each phase in turn obscures data dependencies Still allows high concurrency</p>
    <p>R</p>
    <p>R R W W</p>
    <p>R W</p>
    <p>WR R</p>
    <p>R(b)</p>
  </div>
  <div class="page">
    <p>How to guarantee durability? Must ensure recovery to a consistent state</p>
    <p>No partially executed transactions are included</p>
    <p>Traditionally achieved through redo/undo logging For consistency: pretend partial transactions never happened</p>
    <p>For security: cannot undo what the adversary observed</p>
    <p>May lead to access sequences that violate workload independence</p>
  </div>
  <div class="page">
    <p>More details in the paper</p>
    <p>Durability and recovery logic details</p>
    <p>Additional optimisations for performance</p>
    <p>Discussion of our chosen ORAM construction: RingORAM [Ren15]</p>
    <p>Formal proof of security</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>c5.4xlarge AWS instances. 10 ms latency between proxy and storage 34</p>
    <p>TPC-C</p>
    <p>(10 Warehouses)</p>
    <p>SmallBank</p>
    <p>(1 million records)</p>
    <p>FreeHealth</p>
    <p>(7000 patients, 10 hospitals)</p>
    <p>Applications Obladi</p>
    <p>(Our system)</p>
    <p>NoPriv Baseline</p>
    <p>(Shares concurrency logic with Obladi)</p>
    <p>MySQL 5.7 InnoDB Baseline</p>
    <p>(Server co-located with clients )</p>
    <p>Baselines</p>
  </div>
  <div class="page">
    <p>Performance Results: The Good</p>
    <p>Obladi is slow, but not too slow</p>
    <p>Between 5x and 9x lower throughput for contention</p>
    <p>bottlenecked TPC-C and FreeHealth</p>
  </div>
  <div class="page">
    <p>Performance Results: The Bad</p>
    <p>Batching significantly increases latency</p>
    <p>Up to 70x on TPC-C</p>
    <p>Better on other applications because of smaller write batches</p>
  </div>
  <div class="page">
    <p>Performance Results: The Ugly</p>
    <p>Performance is sensitive to good tuning of epoch size</p>
    <p>If too low, transactions cannot finish If too high, idle time</p>
  </div>
  <div class="page">
    <p>Performance Results: The Ugly</p>
    <p>Performance is sensitive to good tuning of epoch size</p>
    <p>If too low, transactions cannot finish If too high, idle time</p>
    <p>May reveal type of application!</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Obladi, a cloud-based transactional key-value store that obliviously supports ACID transactions using</p>
    <p>delayed visibility</p>
    <p>Any questions?</p>
  </div>
  <div class="page">
    <p>Backup</p>
  </div>
</Presentation>
