<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Department of Computer Science</p>
    <p>An Empirical Study of Memory Sharing in Virtual Machines</p>
    <p>Sean Barker, Timothy Wood, Prashant Shenoy, and Ramesh Sitaraman</p>
    <p>University of Massachusetts Amherst The George Washington University</p>
  </div>
  <div class="page">
    <p>Server A Server B Sean Barker (sbarker@cs.umass.edu)</p>
    <p>Virtualization in Data Centers</p>
    <p>! Data centers use virtualization to improve resource utilization  Flexible mapping of resources to users  More servers and applications  Smaller hardware footprint</p>
    <p>! Maximizing benefits  Efficient resource sharing  Virtual machine placement</p>
    <p>VM 1VM 2 VM 3 VM 4</p>
  </div>
  <div class="page">
    <p>Content Based Page Sharing</p>
    <p>! Eliminate identical pages of memory across multiple VMs</p>
    <p>! Virtual VM pages mapped to physical pages</p>
    <p>! Hypervisor detects duplicates</p>
    <p>! Replaced with copy-on-write references</p>
    <p>HypervisorPhysical RAM</p>
    <p>VM 1 Page Table</p>
    <p>A B CB</p>
    <p>C</p>
    <p>A</p>
    <p>A</p>
    <p>D</p>
    <p>B</p>
    <p>VM 2 Page Table</p>
    <p>A D B</p>
    <p>FREE</p>
    <p>D</p>
    <p>FREE</p>
  </div>
  <div class="page">
    <p>Page Sharing Systems</p>
    <p>! Extensive prior work in exploiting page sharing</p>
    <p>! VMware ESX Server [SIGOPS 02]  Periodic memory scanning to detect duplicates  &gt;30% memory savings</p>
    <p>! Difference Engine [OSDI 08]  Sub-page sharing and patching  &gt;60% memory savings</p>
    <p>! Satori [USENIX 09]  Sharing of short-lived pages  &gt;90% of possible sharing captured</p>
  </div>
  <div class="page">
    <p>Open Questions on Sharing</p>
    <p>! What levels of sharing are possible in typical real-world machines?</p>
    <p>! What are the factors that impact sharing potential?  OS family? Versions? Applications?</p>
    <p>! How will emerging technologies impact sharing?  New OS technologies?  VDI farms? LAMP clusters?</p>
    <p>! Our goal: Provide practical insights into these questions through a careful study of memory data</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>! Background and motivation</p>
    <p>! Data collection and types of sharing</p>
    <p>! Study of real-world sharing potential</p>
    <p>! Study of the factors impacting sharing</p>
    <p>! Conclusions</p>
  </div>
  <div class="page">
    <p>Data Collection</p>
    <p>! Real-world memory traces  ~50 real machines (server/desktop mix)  Uncontrolled user workloads  Memory snapshots every 30 minutes</p>
    <p>! Supplementary traces from controlled VMs  Mac/Win/Linux, mixed versions, 32/64 bit  3 application setups per VM:  No workload (freshly booted)  Server apps (LAMP stack)  Desktop apps (office, browser, media player)</p>
  </div>
  <div class="page">
    <p>Types of Sharing</p>
    <p>! Self-sharing: sharing within individual VMs  E.g., multiple zero pages</p>
    <p>! Inter-VM sharing: sharing across multiple VMs  E.g., shared OS state</p>
    <p>VM 1</p>
    <p>Shared Machine VM 2 VM 3</p>
    <p>Total Inter-VM Sharing: 6 pages</p>
    <p>A B C A B C A B C</p>
    <p>Machine 1 Machine 2 Machine 3</p>
    <p>Total Self-Sharing: 6 pages</p>
    <p>A A A Self-Sharing:</p>
    <p>B B B C C C</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>! Background and motivation</p>
    <p>! Data collection and types of sharing</p>
    <p>! Study of real-world sharing potential</p>
    <p>! Study of the factors impacting sharing</p>
    <p>! Conclusions</p>
  </div>
  <div class="page">
    <p>Self-Sharing in Real-World Traces</p>
    <p>! Significant (~15%) self-sharing potential observed</p>
    <p>A B C D E F G</p>
    <p>S e</p>
    <p>lf -s</p>
    <p>h a</p>
    <p>ri n</p>
    <p>g (</p>
    <p>% o</p>
    <p>f m</p>
    <p>e m</p>
    <p>o ry</p>
    <p>)</p>
    <p>Machine</p>
    <p>average maximum minimum</p>
    <p>! Average sharing of 14%  Excluding zero pages</p>
    <p>! Peak sharing up to 50%</p>
    <p>! Stable baseline sharing of 8%</p>
  </div>
  <div class="page">
    <p>Inter-VM Sharing in Real-World Traces</p>
    <p>! Observed minimal (&lt;2%) inter-VM sharing potential</p>
    <p>! High average sharing of just 2%</p>
    <p>! &lt;0.1% sharing in 15 of 21 pairings</p>
    <p>! In our traces, inter-VM sharing never above 6%</p>
    <p>B/C B/D B/A C/D C/A D/A All Others</p>
    <p>In te</p>
    <p>rV</p>
    <p>M S</p>
    <p>h a</p>
    <p>ri n</p>
    <p>g (</p>
    <p>% o</p>
    <p>f m</p>
    <p>e m</p>
    <p>o ry</p>
    <p>)</p>
    <p>Machine Pair</p>
    <p>average maximum minimum</p>
  </div>
  <div class="page">
    <p>Real-World Trace Observations</p>
    <p>! Typical 15% possible sharing observed  Significant, but less than expected from synthetic workloads</p>
    <p>! Most (85+%) sharing derived from self-sharing  What about collocating many VMs?  All 7 machines...still 80+% from self-sharing</p>
    <p>! Self-sharing doesnt require virtualization!  Could capture it within a VM or nonvirtualized host</p>
    <p>! Self-sharing is significant, but what causes it?</p>
  </div>
  <div class="page">
    <p>Self-Sharing Case Study</p>
    <p>! What causes self-sharing in a Linux desktop?  Looking at nonzero sharing</p>
    <p>! Expanded version of Linux memory tracer  Track page contents and processes</p>
    <p>! Group sharing involvement (% of self-sharing) by content and process</p>
    <p>run the same version on these systems, adding a significant amount of sharing. This behavior is also seen in the various Ubuntu pairings  mixing versions significantly degrades inter-VM sharing in the base system (e.g., 75% self-sharing between Ubuntu 10.04 and 10.10 32-bit), but these cases still show significant application sharing.</p>
    <p>Architecture mixes. Overall, we see similar behavior when changing OS architecture (32-bit to 64-bit or vice versa) as when changing the OS version. However, changing the architecture is still significantly less disruptive than changing the major OS version, which completely eliminates most sharing.</p>
    <p>The one notable case in which we see an architecturespecific behavior is when pairing the two 64-bit Ubuntu versions (ub04-64/ub10-64). In this case, almost all sharing in the base systems is due to inter-VM sharing (80%) rather than self-sharing  this is likely due to the fact that both of these systems displayed minimal selfsharing themselves, as seen previously in Figure 7.</p>
    <p>Application types. In all cases (except CentOS, which did not run a GUI), we see that sharing was substantially higher in the GUI desktop applications than in the server applications. This may be partially due simply to the higher memory footprint of our desktop applications, but is also likely due to the tendency of GUIrelated libraries to increase memory redundancy. We explore this tendency in Section 5.</p>
    <p>As expected, sharing increases modestly as the granularity increases. We also note the significant peaks at 0.5, 1, and 2 hashes per page (the evenly-dividing settings). The greatest ratio of sharable memory to hashes per page (a proxy for processing overhead) is still at the standard 1-page granularity. This is in line with other reported results [21] that have suggested modest but diminishing returns from increasing the sharing granularity. Furthermore, these results confirm that the only reasonable granularities evenly divide the page size, as other granularities significantly reduce possible sharing.</p>
    <p>S h a r a b l e M e m o r y ( M B )</p>
    <p>Hashing Size (as a multiple of page size)</p>
    <p>Figure 10: Self-sharing with variable hashing sizes.</p>
    <p>Our previous results demonstrate the importance of selfsharing, but do not explain where this self-sharing originates. The root of self-sharing  internal redundancy  presumably only exists by accident. However, we have seen that that redundancy is common in all systems studied. To shed light on what causes redundancy, we have conducted a case study on Linux desktop applications.</p>
    <p>The content type of the page  either a specific part of a regular program address space (e.g., stack, heap), or a mapped page of a shared library.</p>
    <p>The process(es) using the page. For a shared library page, there may be any number of processes using the page. For other pages, there will only be one process using the page.</p>
    <p>For example, two pages might give the following (omitting the memory content hash values):</p>
    <p>[libc-2.12.so 000b6000 r-xp]: sshd apache2 [heap]: mysqld</p>
    <p>The first is a specific page of libc, in use by SSH and Apache. The second is a page in the MySQL heap. Using this extended information, we can calculate not only the amount of sharing possible, but which processes or libraries are actually involved in the sharing.</p>
  </div>
  <div class="page">
    <p>Self-Sharing by Process</p>
    <p>! Process self-sharing resulting from user workload</p>
    <p>! &gt;30% sharing processes GUI apps/libraries</p>
    <p>! &lt;20% sharing from other system processes</p>
    <p>! Memory footprint likely dominated by GUI</p>
    <p>xorg firefox oo.org gnome ssh bash</p>
    <p>S h</p>
    <p>a ri</p>
    <p>n g</p>
    <p>I n</p>
    <p>v o</p>
    <p>lv e</p>
    <p>m e</p>
    <p>n t</p>
    <p>(% )</p>
    <p>Process or Group</p>
    <p>GUI processes CLI processes</p>
  </div>
  <div class="page">
    <p>Self-Sharing by Content</p>
    <p>! Duplicate data allocations evident in processes</p>
    <p>! 94% sharing from libraries and heaps</p>
    <p>! Possibly from recreated data structures</p>
    <p>! 2.3 MB sharing from single Xorg heap page (~600 copies)</p>
    <p>libc libcairo</p>
    <p>libgtk</p>
    <p>libxul</p>
    <p>libraries</p>
    <p>heaps</p>
    <p>stacks</p>
    <p>S h</p>
    <p>a ri</p>
    <p>n g</p>
    <p>I n</p>
    <p>v o</p>
    <p>lv e</p>
    <p>m e</p>
    <p>n t</p>
    <p>(% )</p>
    <p>Page Content</p>
    <p>individual libraries category totals</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>! Background and motivation</p>
    <p>! Data collection and types of sharing</p>
    <p>! Study of real-world sharing potential</p>
    <p>! Study of the factors impacting sharing</p>
    <p>! Conclusions</p>
  </div>
  <div class="page">
    <p>Factors Impacting Sharing</p>
    <p>! How do various properties influence sharing?</p>
    <p>! Operating system characteristics  Family (e.g., Linux or Windows)  Version (e.g., Windows XP/7, Ubuntu 10.04/10.10)  Architecture (x86 or x64)</p>
    <p>! Application setup (LAMP and VDI setups)</p>
    <p>! Sharing granularity (number of pages per chunk)</p>
    <p>! New OS technologies (e.g., ASLR)</p>
  </div>
  <div class="page">
    <p>Self-Sharing Across VMs</p>
    <p>! Large self-sharing variations between base OSes</p>
    <p>! ~100 MB differences between OS families, major versions (XP/7)</p>
    <p>! &lt;20 MB differences between minor versions, architectures</p>
    <p>m ac</p>
    <p>w inxp</p>
    <p>w in7-32</p>
    <p>w in7-64</p>
    <p>ub04-32</p>
    <p>ub04-64</p>
    <p>ub10-32</p>
    <p>ub10-64</p>
    <p>co-32</p>
    <p>co-64</p>
    <p>S e</p>
    <p>lf -s</p>
    <p>h a</p>
    <p>ri n</p>
    <p>g (</p>
    <p>M B</p>
    <p>)</p>
    <p>Virtual Machine</p>
  </div>
  <div class="page">
    <p>Sharing Across VMs</p>
    <p>m ac/ub10-64</p>
    <p>w in7-64/ub10-64</p>
    <p>m ac/w</p>
    <p>in7-64</p>
    <p>In te</p>
    <p>rV</p>
    <p>M S</p>
    <p>h a ri</p>
    <p>n g</p>
    <p>( M</p>
    <p>B )</p>
    <p>Virtual Machine Pair</p>
    <p>no-app server</p>
    <p>desktop</p>
  </div>
  <div class="page">
    <p>Sharing Across VMs</p>
    <p>m ac/ub10-64</p>
    <p>w in7-64/ub10-64</p>
    <p>m ac/w</p>
    <p>in7-64</p>
    <p>In te</p>
    <p>rV</p>
    <p>M S</p>
    <p>h a ri</p>
    <p>n g</p>
    <p>( M</p>
    <p>B )</p>
    <p>Virtual Machine Pair</p>
    <p>no-app server</p>
    <p>desktop</p>
    <p>&lt;5 MB across OS families</p>
  </div>
  <div class="page">
    <p>Sharing Across VMs</p>
    <p>m ac/ub10-64</p>
    <p>w in7-64/ub10-64</p>
    <p>m ac/w</p>
    <p>in7-64</p>
    <p>In te</p>
    <p>rV</p>
    <p>M S</p>
    <p>h a ri</p>
    <p>n g</p>
    <p>( M</p>
    <p>B )</p>
    <p>Virtual Machine Pair</p>
    <p>no-app server</p>
    <p>desktop</p>
    <p>&lt;5 MB across OS families</p>
    <p>w in7-32/w</p>
    <p>inxp</p>
    <p>w in7-64/w</p>
    <p>inxp</p>
    <p>In te</p>
    <p>rV</p>
    <p>M S</p>
    <p>h a ri</p>
    <p>n g</p>
    <p>( M</p>
    <p>B )</p>
    <p>Virtual Machine Pair</p>
    <p>no-app server</p>
    <p>desktop</p>
  </div>
  <div class="page">
    <p>Sharing Across VMs</p>
    <p>m ac/ub10-64</p>
    <p>w in7-64/ub10-64</p>
    <p>m ac/w</p>
    <p>in7-64</p>
    <p>In te</p>
    <p>rV</p>
    <p>M S</p>
    <p>h a ri</p>
    <p>n g</p>
    <p>( M</p>
    <p>B )</p>
    <p>Virtual Machine Pair</p>
    <p>no-app server</p>
    <p>desktop</p>
    <p>&lt;5 MB across OS families</p>
    <p>w in7-32/w</p>
    <p>inxp</p>
    <p>w in7-64/w</p>
    <p>inxp</p>
    <p>In te</p>
    <p>rV</p>
    <p>M S</p>
    <p>h a ri</p>
    <p>n g</p>
    <p>( M</p>
    <p>B )</p>
    <p>Virtual Machine Pair</p>
    <p>no-app server</p>
    <p>desktop&lt;5 MB base, 50+ MB app sharing across</p>
    <p>major versions</p>
  </div>
  <div class="page">
    <p>Sharing Across VMs</p>
    <p>m ac/ub10-64</p>
    <p>w in7-64/ub10-64</p>
    <p>m ac/w</p>
    <p>in7-64</p>
    <p>In te</p>
    <p>rV</p>
    <p>M S</p>
    <p>h a ri</p>
    <p>n g</p>
    <p>( M</p>
    <p>B )</p>
    <p>Virtual Machine Pair</p>
    <p>no-app server</p>
    <p>desktop</p>
    <p>&lt;5 MB across OS families</p>
    <p>w in7-32/w</p>
    <p>inxp</p>
    <p>w in7-64/w</p>
    <p>inxp</p>
    <p>In te</p>
    <p>rV</p>
    <p>M S</p>
    <p>h a ri</p>
    <p>n g</p>
    <p>( M</p>
    <p>B )</p>
    <p>Virtual Machine Pair</p>
    <p>no-app server</p>
    <p>desktop&lt;5 MB base, 50+ MB app sharing across</p>
    <p>major versions</p>
    <p>ub04-32/ub10-32</p>
    <p>ub04-64/ub10-64</p>
    <p>In te</p>
    <p>rV</p>
    <p>M S</p>
    <p>h a</p>
    <p>ri n</p>
    <p>g (</p>
    <p>M B</p>
    <p>)</p>
    <p>Virtual Machine Pair</p>
    <p>no-app server</p>
    <p>desktop</p>
  </div>
  <div class="page">
    <p>Sharing Across VMs</p>
    <p>m ac/ub10-64</p>
    <p>w in7-64/ub10-64</p>
    <p>m ac/w</p>
    <p>in7-64</p>
    <p>In te</p>
    <p>rV</p>
    <p>M S</p>
    <p>h a ri</p>
    <p>n g</p>
    <p>( M</p>
    <p>B )</p>
    <p>Virtual Machine Pair</p>
    <p>no-app server</p>
    <p>desktop</p>
    <p>&lt;5 MB across OS families</p>
    <p>w in7-32/w</p>
    <p>inxp</p>
    <p>w in7-64/w</p>
    <p>inxp</p>
    <p>In te</p>
    <p>rV</p>
    <p>M S</p>
    <p>h a ri</p>
    <p>n g</p>
    <p>( M</p>
    <p>B )</p>
    <p>Virtual Machine Pair</p>
    <p>no-app server</p>
    <p>desktop&lt;5 MB base, 50+ MB app sharing across</p>
    <p>major versions</p>
    <p>ub04-32/ub10-32</p>
    <p>ub04-64/ub10-64</p>
    <p>In te</p>
    <p>rV</p>
    <p>M S</p>
    <p>h a</p>
    <p>ri n</p>
    <p>g (</p>
    <p>M B</p>
    <p>)</p>
    <p>Virtual Machine Pair</p>
    <p>no-app server</p>
    <p>desktop</p>
  </div>
  <div class="page">
    <p>Sharing Across VMs</p>
    <p>m ac/ub10-64</p>
    <p>w in7-64/ub10-64</p>
    <p>m ac/w</p>
    <p>in7-64</p>
    <p>In te</p>
    <p>rV</p>
    <p>M S</p>
    <p>h a ri</p>
    <p>n g</p>
    <p>( M</p>
    <p>B )</p>
    <p>Virtual Machine Pair</p>
    <p>no-app server</p>
    <p>desktop</p>
    <p>&lt;5 MB across OS families</p>
    <p>w in7-32/w</p>
    <p>inxp</p>
    <p>w in7-64/w</p>
    <p>inxp</p>
    <p>In te</p>
    <p>rV</p>
    <p>M S</p>
    <p>h a ri</p>
    <p>n g</p>
    <p>( M</p>
    <p>B )</p>
    <p>Virtual Machine Pair</p>
    <p>no-app server</p>
    <p>desktop&lt;5 MB base, 50+ MB app sharing across</p>
    <p>major versions</p>
    <p>ub04-32/ub10-32</p>
    <p>ub04-64/ub10-64</p>
    <p>In te</p>
    <p>rV</p>
    <p>M S</p>
    <p>h a</p>
    <p>ri n</p>
    <p>g (</p>
    <p>M B</p>
    <p>)</p>
    <p>Virtual Machine Pair</p>
    <p>no-app server</p>
    <p>desktop</p>
    <p>w in7-32/w</p>
    <p>in7-64</p>
    <p>ub04-32/ub04-64</p>
    <p>ub10-32/ub10-64</p>
    <p>In te</p>
    <p>rV</p>
    <p>M S</p>
    <p>h a ri</p>
    <p>n g</p>
    <p>( M</p>
    <p>B )</p>
    <p>Virtual Machine Pair</p>
    <p>no-app server</p>
    <p>desktop</p>
  </div>
  <div class="page">
    <p>Sharing Across VMs</p>
    <p>m ac/ub10-64</p>
    <p>w in7-64/ub10-64</p>
    <p>m ac/w</p>
    <p>in7-64</p>
    <p>In te</p>
    <p>rV</p>
    <p>M S</p>
    <p>h a ri</p>
    <p>n g</p>
    <p>( M</p>
    <p>B )</p>
    <p>Virtual Machine Pair</p>
    <p>no-app server</p>
    <p>desktop</p>
    <p>&lt;5 MB across OS families</p>
    <p>w in7-32/w</p>
    <p>inxp</p>
    <p>w in7-64/w</p>
    <p>inxp</p>
    <p>In te</p>
    <p>rV</p>
    <p>M S</p>
    <p>h a ri</p>
    <p>n g</p>
    <p>( M</p>
    <p>B )</p>
    <p>Virtual Machine Pair</p>
    <p>no-app server</p>
    <p>desktop&lt;5 MB base, 50+ MB app sharing across</p>
    <p>major versions</p>
    <p>ub04-32/ub10-32</p>
    <p>ub04-64/ub10-64</p>
    <p>In te</p>
    <p>rV</p>
    <p>M S</p>
    <p>h a</p>
    <p>ri n</p>
    <p>g (</p>
    <p>M B</p>
    <p>)</p>
    <p>Virtual Machine Pair</p>
    <p>no-app server</p>
    <p>desktop</p>
    <p>w in7-32/w</p>
    <p>in7-64</p>
    <p>ub04-32/ub04-64</p>
    <p>ub10-32/ub10-64</p>
    <p>In te</p>
    <p>rV</p>
    <p>M S</p>
    <p>h a ri</p>
    <p>n g</p>
    <p>( M</p>
    <p>B )</p>
    <p>Virtual Machine Pair</p>
    <p>no-app server</p>
    <p>desktop</p>
  </div>
  <div class="page">
    <p>Sharing Across VMs</p>
    <p>m ac/ub10-64</p>
    <p>w in7-64/ub10-64</p>
    <p>m ac/w</p>
    <p>in7-64</p>
    <p>In te</p>
    <p>rV</p>
    <p>M S</p>
    <p>h a ri</p>
    <p>n g</p>
    <p>( M</p>
    <p>B )</p>
    <p>Virtual Machine Pair</p>
    <p>no-app server</p>
    <p>desktop</p>
    <p>&lt;5 MB across OS families</p>
    <p>w in7-32/w</p>
    <p>inxp</p>
    <p>w in7-64/w</p>
    <p>inxp</p>
    <p>In te</p>
    <p>rV</p>
    <p>M S</p>
    <p>h a ri</p>
    <p>n g</p>
    <p>( M</p>
    <p>B )</p>
    <p>Virtual Machine Pair</p>
    <p>no-app server</p>
    <p>desktop&lt;5 MB base, 50+ MB app sharing across</p>
    <p>major versions</p>
    <p>ub04-32/ub10-32</p>
    <p>ub04-64/ub10-64</p>
    <p>In te</p>
    <p>rV</p>
    <p>M S</p>
    <p>h a</p>
    <p>ri n</p>
    <p>g (</p>
    <p>M B</p>
    <p>)</p>
    <p>Virtual Machine Pair</p>
    <p>no-app server</p>
    <p>desktop</p>
    <p>w in7-32/w</p>
    <p>in7-64</p>
    <p>ub04-32/ub04-64</p>
    <p>ub10-32/ub10-64</p>
    <p>In te</p>
    <p>rV</p>
    <p>M S</p>
    <p>h a ri</p>
    <p>n g</p>
    <p>( M</p>
    <p>B )</p>
    <p>Virtual Machine Pair</p>
    <p>no-app server</p>
    <p>desktop</p>
    <p>! Hierarchy: family, applications, version, architecture</p>
  </div>
  <div class="page">
    <p>Sharing Granularity</p>
    <p>! Tradeoff between overhead and sharing potential</p>
    <p>! Share memory chunks of size k (1) pages</p>
    <p>! Only even page divisions provide decent returns</p>
    <p>! Diminishing benefits from smaller chunk sizes 10</p>
    <p>S h</p>
    <p>a ra</p>
    <p>b le</p>
    <p>M e m</p>
    <p>o ry</p>
    <p>( M</p>
    <p>B )</p>
    <p>Hashing Size (as a multiple of page size)</p>
  </div>
  <div class="page">
    <p>Address Space Layout Randomization</p>
    <p>! ASLR scrambles memory to improve system security  libraries, code, stack, heap, ...</p>
    <p>! Does ASLR have a negative impact on memory sharing?</p>
    <p>! Impact of 4 ASLR implementations:  Linux: mainline (2.6.32) and PaX  Windows 7 (SP1)  Mac OS X (Lion)</p>
    <p>! Desktop applications with and without ASLR</p>
    <p>stack</p>
    <p>shared library</p>
    <p>heap</p>
    <p>code</p>
    <p>shared library</p>
    <p>stack</p>
    <p>shared library</p>
    <p>heap code</p>
    <p>shared library</p>
    <p>stack</p>
    <p>shared library</p>
    <p>heap</p>
    <p>code</p>
    <p>shared library</p>
    <p>(a) (b) (c)</p>
    <p>Figure 13: A non-randomized address space (a) and two examples of the address space after randomization (b and c).</p>
    <p>While ASLR adoption has been gradual and the level of support varies among operating systems, most popular OSes have at least rudimentary support and are moving towards more complete instrumentation. Most implementations allow for enabling or disabling randomization, which we exercise in studying its impact. We selected four implementations for study  two in Linux, one in Windows 7, and one in Mac OS X Lion.</p>
    <p>Linux. The Linux kernel first introduced ASLR support in 2005, and modern versions randomize the major components of a process (library locations, stack, heap, code) [8]. The ability to toggle system-wide ASLR is provided via the /proc interface, as well as an intermediate setting in which heap randomization is not used, but all other randomizations are.</p>
    <p>PaX. An alternate implementation of ASLR for Linux is provided by PaX [13], which is a patch for the mainline Linux kernel aimed at improving overall security. A PaX-enabled kernel is used by several hardened distributions of Linux aimed at maximizing security, and can also be deployed in most normal distributions. The ASLR implementation in PaX provides several features not provided by the standard Linux implementation, such as randomization within the kernel itself [7].</p>
    <p>Windows. Microsoft introduced ASLR support in Windows Vista and continued in Windows 7, providing randomization of the stack, heap, DLLs, and so forth [20]. ASLR is enabled on a per-application basis, and is opt-in by default. While most system-provided applications within Windows enable ASLR, third-party application support has been slow [16]. However, Microsoft recently released a utility [5] that provides the ability to forcibly enable or disable ASLR for particular processes. In our tests, we encountered no ill effects from enabling it for applications that do not opt-in by default.</p>
    <p>Mac OS X. Apple first introduced a simplistic form of ASLR in Mac OS X 10.6 (Snow Leopard), and support was expanded in 10.7 (Lion) [9]. Unfortunately, there is presently no straightforward way to disable random</p>
    <p>ization within Lion  the only known method [10] relies on setting a particular POSIX flag during process creation. To leverage this, we write a script that simply sets this flag, then spawns the target application (which runs without randomization).</p>
    <p>For a single OS, our test procedure (using a single VM) is as follows. First, we globally disable ASLR, using one of the tools mentioned in the previous section (note that in the case of Mac OS X, we cannot disable system randomization). We then reboot the VM to reset memory to a reliable state. Then, we populate the VMs memory by opening a predefined list of applications (web browser, text editor, office software, music player, etc.) using a shell script or batch file. After letting the contents of memory settle, we capture this nonrandomized memory snapshot. We then globally enable ASLR, reboot, and then repeat the snapshot procedure again to obtain a randomized snapshot.</p>
    <p>To simulate booting multiple VMs from the same image, we repeat this four times, resulting in a set of four randomized snapshots and a set of four nonrandomized snapshots. Since the only substantive difference between the sets is whether randomization is used, any significant reduction in sharing in the randomized snapshot set should be due to ASLR  furthermore, the use of multiple snapshots averages any other memory differences that occur between reboots.</p>
    <p>The results, as a percentage reduction in sharing, are shown in Figure 14. The total sharing reduction is further broken down into self-sharing and inter-VM sharing  note that these are not additive, since they do not contribute equally to the total sharing. We see a modest, but noticeable reduction in sharing across all implementations. The largest reduction is seen in Windows 7, in which total sharing was reduced by 13% (in line with [18], which reported a 16% reduction in Windows 7). Total sharing in Mac OS X was reduced by only 3%  however, as noted above, randomization was not disabled for the system itself, and hence this result is conservative.</p>
  </div>
  <div class="page">
    <p>Sharing Impact of ASLR</p>
    <p>! ASLR doesnt prevent sharing but does reduce it</p>
    <p>! &gt;10% reduction in three of four cases</p>
    <p>! Better (PaX) sharing in Linux worsens impact</p>
    <p>Linux Linux (PaX) Mac Windows</p>
    <p>S h</p>
    <p>a ri</p>
    <p>n g</p>
    <p>R e d</p>
    <p>u c ti</p>
    <p>o n</p>
    <p>( %</p>
    <p>) ASLR Implementation</p>
  </div>
  <div class="page">
    <p>Sharing Factor Observations</p>
    <p>! Hierarchy with respect to sharing potential  OS family, application setup, OS version, OS architecture</p>
    <p>! Platform homogeneity  Minimal sharing across heterogeneous systems  Significant gains in homogeneous deployments (but still</p>
    <p>modest absolute levels)</p>
    <p>! Finer-grained sharing may be leveraged to improve sharing potential</p>
    <p>! OS improvements like ASLR may reduce sharing</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>! Study into practical issues of page sharing  Examined real-world machines and specific sharing scenarios</p>
    <p>! Observed real-world sharing around 15%  Significant, but less than expected  Largely self-sharing, for which no virtualization needed</p>
    <p>! Studied a variety of factors impacting sharing  Key role of platform homogeneity  Varying impact of modifying OS characteristics and applications  New technologies may change the impact of sharing</p>
    <p>Questions? sbarker@cs.umass.edu</p>
  </div>
</Presentation>
