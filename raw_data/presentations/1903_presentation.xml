<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Parallel Processing Research LaboratoryiWARP Redefined: Scalable</p>
    <p>Connectionless Communication Over High-Speed Ethernet</p>
    <p>M. J. Rashti, R. E. Grant, P. Balaji and A. Afsahi</p>
  </div>
  <div class="page">
    <p>PRESENTATION OUTLINE</p>
    <p>Background</p>
    <p>Motivation for a Datagram-based iWARP</p>
    <p>Datagram-iWARP Design &amp; Implementation</p>
    <p>Experimental Results</p>
    <p>Summary &amp; Future Works</p>
  </div>
  <div class="page">
    <p>iWARP Ethernet Standard</p>
    <p>Internet Wide-Area RDMA Protocol  RDMA-enabled Ethernet  Standardized by RDMA Consortium</p>
    <p>Defined over Reliable Transports  TCP and SCTP</p>
    <p>Benefits over Traditional TCP/IP  Low latency / high throughput  Protocol offload: lower host CPU/bus utilization  Zero-copy: lower latency and host CPU utilization</p>
    <p>Critical for servers  User-level library: bypass OS involvement overhead</p>
    <p>Message-oriented Protocol Stack</p>
  </div>
  <div class="page">
    <p>Queue-pair Communication</p>
    <p>CPU posts WRs to QP  RNIC performs data</p>
    <p>transfer asynchronously and are Zero-copy</p>
    <p>Completion events are put in CQ for polling</p>
    <p>WRs can be:  Send  Receive  RDMA Write  RDMA Read</p>
    <p>Consumer CPU</p>
    <p>Port</p>
    <p>QP send recv</p>
    <p>iWARP and TCP/IP Stack</p>
    <p>data packet</p>
    <p>WR</p>
    <p>CQ</p>
    <p>iWARP RNIC</p>
  </div>
  <div class="page">
    <p>iWARP Stack compared to Host-based TCP/IP</p>
    <p>User Applications</p>
    <p>MPI,SDP, etc.</p>
    <p>Verbs Interface</p>
    <p>Socket Interface</p>
    <p>RDMAP</p>
    <p>DDP</p>
    <p>MPA</p>
    <p>TCP/IP SCTP/IP</p>
    <p>Ethernet Link Layer</p>
    <p>Socket Buffer</p>
    <p>Kernel Processing</p>
    <p>Interrupt Handling</p>
    <p>OS TCP/IP proc.</p>
    <p>NIC Hardware</p>
    <p>Software</p>
    <p>NIC Driver</p>
    <p>RNIC Driver</p>
    <p>NIC Hardware</p>
    <p>Software</p>
  </div>
  <div class="page">
    <p>PRESENTATION OUTLINE</p>
    <p>Background</p>
    <p>Motivation for a Datagram-based iWARP</p>
    <p>Datagram-iWARP Design &amp; Implementation</p>
    <p>Experimental Results</p>
    <p>Summary &amp; Future Works</p>
  </div>
  <div class="page">
    <p>Motivation for Datagram-iWARP (1)</p>
    <p>Widespread use of Ethernet:</p>
    <p>HPC Clusters (~50% of Top500)</p>
    <p>Data Services (media streaming, gaming, etc.)  Extensively use Ethernet for intra- and inter-networking</p>
    <p>UDP-based Services and Applications  Currently cannot utilize iWARP</p>
    <p>Datagrams Traffic Increase: 40% per year  91% of Internet traffic by 2014 (according to Cisco)</p>
  </div>
  <div class="page">
    <p>Motivation for Datagram-iWARP (2)</p>
    <p>Memory-usage Scalability of iWARP  Future systems will be much more memory-tight  Connection memory usage is not scalable</p>
    <p>At NIC / HW layer  Limited NIC cache need to utilize host memory</p>
    <p>At application library (MPI / socket) layer  pre-allocated user- and/or kernel-level buffers</p>
    <p>HW Complexity and Fabrication Cost  UDP is much simpler to offload  More room for offload-engine parallelism for multi-cores  More room for more offloaded functionality  For applications that only need datagrams</p>
  </div>
  <div class="page">
    <p>Motivation for Datagram-iWARP (3)</p>
    <p>Performance Issues of the Current iWARP  TCP/SCTP performance barriers</p>
    <p>Reliability / Flow control  Too much overhead for low-error-rate networks</p>
    <p>Marking (MPA layer) costs: required for TCP</p>
    <p>Hardware-level Multicast and Broadcast  Important for HPC and datacenters  Not supported in TCP  Can be efficiently supported in UDP</p>
  </div>
  <div class="page">
    <p>PRESENTATION OUTLINE</p>
    <p>Background</p>
    <p>Motivation for a Datagram-based iWARP</p>
    <p>Datagram-iWARP Design &amp; Implementation</p>
    <p>Experimental Results</p>
    <p>Summary &amp; Future Works</p>
  </div>
  <div class="page">
    <p>Datagram-iWARP: General Design at Different Layers</p>
    <p>Verbs layer Modify verbs &amp; data structures to comply with datagram semantics.</p>
    <p>Define datagram QPs &amp; WRs</p>
    <p>No streams/connections. No message segmentation. Use UDP sockets. Checksum moved here.</p>
    <p>MPA layer is bypassed for datagrams.</p>
    <p>Use UDP for UD QPs and lightweight reliable UDP for RD QPs.</p>
    <p>RDMAP layer</p>
    <p>DDP layer</p>
    <p>MPA layer</p>
    <p>Transport layer (TCP/IP)</p>
  </div>
  <div class="page">
    <p>Design Considerations (1)</p>
    <p>Addition of New Queue-pair (QP) Types  For reliable and unreliable datagrams  Current iWARP does not have QP types</p>
    <p>QP Operations  QP Create: new input modifiers for datagram mode  QP Modify: need a pre-established datagram socket</p>
    <p>for RTS state</p>
    <p>Work Requests  Need address-handles for individual datagrams</p>
    <p>Completion of WRs  As soon as accepted by LLP</p>
  </div>
  <div class="page">
    <p>Design Considerations (2)</p>
    <p>Completion Events  Need to report the source information</p>
    <p>Datagram Error Management (reliable mode)  No connection to terminate  QP goes into Error state</p>
    <p>Use MSN for notification into an Error Queue  Re-use after resetting QP</p>
    <p>MPA Layer Removed  CRC moved to DDP layer</p>
    <p>MTU-sized Message Segmentation  Not required anymore  Up to 64KB datagrams allowed</p>
  </div>
  <div class="page">
    <p>Software-based Datagram iWARP</p>
    <p>MVAPICH-hybrid with Reliability Settings</p>
    <p>OF Verbs Interface</p>
    <p>Native iWARP Verbs Interface</p>
    <p>RDMAP Layer -RC &amp; UD</p>
    <p>DDP Layer - Untagged</p>
    <p>MPA markers</p>
    <p>TCP UDP</p>
    <p>Tuned Linux Kernel</p>
    <p>Tuned Ethernet Link Layer</p>
    <p>Extended for SW Datagram-iWARP</p>
    <p>Extended for SW Datagram-iWARP</p>
    <p>Developed for SW iWARP</p>
    <p>Adapted to run over SW iWARP</p>
    <p>Tuned for best performance of MPI over SW Datagram iWARP</p>
  </div>
  <div class="page">
    <p>Software Implementation</p>
    <p>Based on the OSC SW-iWARP (TCP-based)  New Native Verbs to Support Datagrams  Implementing Standard OF-verbs</p>
    <p>On top of UDP- and TCP-based native verbs  No new verbs at this layer</p>
    <p>Using IO-Vectors for Low-latency SW-based Datagram Transfer</p>
    <p>Utilizing UDP Offload-engine  Large Receive Offload  UDP checksum (optional)</p>
  </div>
  <div class="page">
    <p>PRESENTATION OUTLINE</p>
    <p>Background</p>
    <p>Motivation for a Datagram-based iWARP</p>
    <p>Datagram-iWARP Design &amp; Implementation</p>
    <p>Experimental Results</p>
    <p>Summary &amp; Future Works</p>
  </div>
  <div class="page">
    <p>Experimental Platform</p>
    <p>Platform Nodes Processor Memory/ Cache</p>
    <p>Network OS/ Software</p>
    <p>C1 4 Two quadcore 2GHz Opteron</p>
    <p>RAM: 8GB L3: 8MB L2: 512K</p>
    <p>NIC: NetEffect 10GE Switch: Fujitsu 10GE</p>
    <p>Fedora 12/ MVAPICH 1.1</p>
    <p>C2 16 Two dualcore 2.8GHz Opteron</p>
    <p>RAM: 4GB L2: 1MB</p>
    <p>NIC: Myricom 10GE Switch: Fulcrum 10GE</p>
    <p>Ubuntu/ MVAPICH 1.1</p>
  </div>
  <div class="page">
    <p>Verbs-level Latency - Small Messages</p>
  </div>
  <div class="page">
    <p>Verbs-level Latency - Medium Messages</p>
  </div>
  <div class="page">
    <p>Verbs-level Latency - Large Messages</p>
  </div>
  <div class="page">
    <p>MPI-level Latency  Small Messages</p>
  </div>
  <div class="page">
    <p>MPI-level Latency  Medium Messages</p>
  </div>
  <div class="page">
    <p>MPI-level Latency - Large Messages</p>
  </div>
  <div class="page">
    <p>MPI Micro-benchmark Bandwidth Results</p>
  </div>
  <div class="page">
    <p>Application Performance Improvement (I)</p>
    <p>Application Communication-time Improvement</p>
    <p>exceeding 40% for Radix</p>
  </div>
  <div class="page">
    <p>Application Performance Improvement (II)</p>
    <p>Application Runtime Improvement exceeding 45% for SMG2000</p>
  </div>
  <div class="page">
    <p>Application Memory-usage Reduction</p>
    <p>Memory usage decrease exceeding 30% for Radix</p>
    <p>High savings for SMG, Radix which have complete connection graphs</p>
    <p>Scalable improvement trend  For both performance and memory usage:</p>
    <p>C2 cluster results are better than C1 cluster</p>
  </div>
  <div class="page">
    <p>PRESENTATION OUTLINE</p>
    <p>Background</p>
    <p>Motivation for a Datagram-based iWARP</p>
    <p>Datagram-iWARP Design &amp; Implementation</p>
    <p>Experimental Results</p>
    <p>Summary &amp; Future Works</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>Proposed extension of iWARP over Datagrams  Over UDP (reliable &amp; unreliable)</p>
    <p>Implemented Untagged Model (send/recv) in Software  OF-verbs over SW Datagram-iWARP  MPI over OF-verbs using Datagram-iWARP</p>
    <p>Results  Significant application memory usage reduction  High application performance increase  The benefits scale up with more #processes</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>Datagram-iWARP Complements the Current iWARP Standard</p>
    <p>Extends Usability Domain of iWARP Standard  Can serve datagram-based applications  For both HPC and datacenter systems</p>
    <p>Improves Performance  Offers Higher Scalability</p>
    <p>Lower memory usage  Lower fabrication cost &amp; power consumption</p>
    <p>If implemented in HW</p>
  </div>
  <div class="page">
    <p>Future Directions</p>
    <p>Tagged (RDMA Read/Write) Model  Define unreliable RDMA operations over UD  Integrate with socket-based applications</p>
    <p>To appear in IPDPS 2011  Integrate with MPI</p>
    <p>To be completed soon</p>
    <p>Port Datagram-iWARP over Reliable UDP  No need for reliability at MPI layer  Much lighter weight than TCP/SCTP</p>
    <p>Standardization of Datagram-iWARP</p>
  </div>
  <div class="page">
    <p>Acknowledgement</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Parallel Processing Research LaboratoryExtra Slides</p>
  </div>
  <div class="page">
    <p>Related Work</p>
    <p>OSC Software iWARP (TCP-based)  Kernel-level  User-level: the base of our work</p>
    <p>IBM Zurich SoftRDMA  SW iWARP stack for OFED package</p>
    <p>Myricom MX over Ethernet  InfiniBand over Ethernet  RDMA over CEE</p>
  </div>
  <div class="page">
    <p>iWARP Protocol Stack</p>
    <p>Verbs: a set of descriptive user-level interfaces  User-level: bypass OS</p>
    <p>RDMAP: supplies communication primitives for verbs layer  Send/Recv, RDMA Write, RDMA Read  QP-based semantics</p>
    <p>DDP: directly transfers data between the user buffer and the RNIC</p>
    <p>without intermediate buffering  MPA: inserts markers to distinguish iWARP</p>
    <p>messages in TCP stream</p>
  </div>
  <div class="page">
    <p>RDMA Technology  Zero copy</p>
    <p>User Buffer User BufferCPU CPU</p>
    <p>NIC NIC</p>
    <p>Kernel BufferKernel Buffer RDMARDMA</p>
    <p>DMADMA</p>
    <p>Data Source Data Sink</p>
  </div>
</Presentation>
