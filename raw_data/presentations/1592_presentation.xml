<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Enabling Confidentiality of Data Delivery in</p>
    <p>an Overlay Broadcasting System</p>
    <p>Ruben Torres, Xin Sun, Aaron Walters, Cristina Nita-Rotaru and Sanjay Rao</p>
  </div>
  <div class="page">
    <p>Introduction</p>
    <p>Overlay multicast, replacement for IP multicast  Real deployments: Tmesh, CoolStreaming, ESM</p>
    <p>Commercial systems: PPLive, TVU</p>
    <p>Multicast group: source (A) and members (B,C,D)</p>
    <p>IP multicast Overlay multicast</p>
    <p>A C</p>
    <p>DB</p>
    <p>A C</p>
    <p>B D</p>
    <p>R1 R2 R1 R2</p>
  </div>
  <div class="page">
    <p>Data Confidentiality in Overlays</p>
    <p>Further usage of overlays requires integrating</p>
    <p>security mechanisms for data confidentiality</p>
    <p>Security mechanisms efficiently provided with</p>
    <p>symmetric encryption</p>
    <p>Group key shared by all members to encrypt data</p>
    <p>Group key management protocols to establish and</p>
    <p>manage the group key.</p>
  </div>
  <div class="page">
    <p>New Opportunities in Overlays</p>
    <p>Group key management extensively studied with</p>
    <p>IP multicast</p>
    <p>New opportunities and challenges for group key</p>
    <p>management with overlay networks</p>
    <p>Richer design space on constructing structures for</p>
    <p>data and keys delivery</p>
    <p>Coupling data and keys delivery in one overlay</p>
    <p>Decoupling data and keys delivery using two overlays</p>
    <p>Opportunities to simplify resilient key delivery</p>
  </div>
  <div class="page">
    <p>Key Contributions of this Paper</p>
    <p>One of the first studies on key dissemination using overlays</p>
    <p>Show overlays can simplify resilient key dissemination</p>
    <p>Per-hop reliability is effective in achieving end to end resiliency</p>
    <p>Show decoupled out-performs coupled approaches</p>
    <p>Decoupled: data and keys delivered in separate overlays</p>
    <p>Good application performance and low overhead</p>
    <p>Distinguished work in evaluation under real Internet</p>
    <p>environments and real workloads</p>
  </div>
  <div class="page">
    <p>System Model and Assumptions</p>
    <p>Single source</p>
    <p>Tree based delivery</p>
    <p>Bandwidth intensive applications</p>
    <p>Access bandwidth limitation  DSL ~ Kbps</p>
    <p>Ethernet ~ Mbps</p>
    <p>Outsider attack</p>
    <p>source</p>
    <p>Group members</p>
    <p>A/V signal</p>
    <p>Data delivery tree</p>
    <p>S</p>
    <p>A D</p>
    <p>B</p>
    <p>E F C</p>
    <p>Ethernet</p>
    <p>DSL DSL</p>
  </div>
  <div class="page">
    <p>Background</p>
    <p>Group key shared by all members to encrypt data</p>
    <p>and restrict access only to authorized users</p>
    <p>Key changes with joins and leaves in the group</p>
    <p>Two approaches to change keys</p>
    <p>Every event (join or leave)</p>
    <p>Batching events, better performance</p>
    <p>This paper employs LKH [Wong00] and batching</p>
    <p>LKH is pioneering work and widely studied</p>
  </div>
  <div class="page">
    <p>Considerations on Keys Delivery</p>
    <p>Key messages are sensitive to loss</p>
    <p>Losing data packets: tolerable</p>
    <p>Losing keys: dramatic impact in application performance</p>
    <p>Key traffic can be bursty</p>
    <p>High key traffic at rekey event could compete with data</p>
    <p>traffic for large groups</p>
    <p>Keys messages needed by subset of members</p>
    <p>Group key management artifact</p>
  </div>
  <div class="page">
    <p>Resilient Key Dissemination Schemes</p>
    <p>Extensively studied with IP Multicast (hard problem)</p>
    <p>Unique opportunity in overlays</p>
    <p>Use per-hop reliable protocols (e.g. TCP)</p>
    <p>Explore effectiveness of per-hop reliability in end to end reliability:</p>
    <p>Real join/leave patterns</p>
    <p>Real workloads</p>
    <p>TCP</p>
    <p>TCP</p>
    <p>TCP</p>
    <p>TCP</p>
    <p>end to end</p>
    <p>Data delivery tree</p>
  </div>
  <div class="page">
    <p>Architectures for Key Dissemination</p>
    <p>Data and keys traffic have different properties</p>
    <p>Explore design space to distribute data and keys:</p>
    <p>Coupled Data Optimized  One overlay optimized for data</p>
    <p>delivery</p>
    <p>Coupled Key Optimized  One overlay optimized for key</p>
    <p>delivery [Zhang05]</p>
    <p>Decoupled  Two overlays, one for data and one for keys</p>
  </div>
  <div class="page">
    <p>Coupled Key Optimized [Zhang05]</p>
    <p>u2 u3</p>
    <p>u1 u4</p>
    <p>s</p>
    <p>Coupled Data Optimized</p>
    <p>+ Simple</p>
    <p>+ Good application performance</p>
    <p>- Can incur high unnecessary overheads</p>
    <p>Coupled Data Optimized</p>
    <p>s</p>
    <p>u3 u4</p>
    <p>u2 u1</p>
    <p>kA</p>
    <p>u1</p>
    <p>u2</p>
    <p>kB</p>
    <p>u3</p>
    <p>u4</p>
    <p>Keys needed by subset of nodes</p>
  </div>
  <div class="page">
    <p>Coupled Key Optimized</p>
    <p>Coupled Key Optimized [Zhang05]</p>
    <p>u1 u3</p>
    <p>u4</p>
    <p>s</p>
    <p>u2</p>
    <p>disconnected</p>
    <p>kA</p>
    <p>kB</p>
    <p>Keys needed by subset of nodes</p>
    <p>u2</p>
    <p>u1</p>
    <p>u3</p>
    <p>u4</p>
    <p>DSL</p>
    <p>DSL</p>
    <p>Ethernet</p>
    <p>Ethernet</p>
    <p>Not feasible in heterogeneous scenarios (Ethernet, DSL)</p>
  </div>
  <div class="page">
    <p>Decoupled</p>
    <p>+ Good application performance</p>
    <p>+ Reduce key dissemination overhead</p>
    <p>- Two structures have to be maintained</p>
    <p>Compare:</p>
    <p>Cost of maintaining two structures in Decoupled</p>
    <p>Benefit of reducing key dissemination overhead</p>
  </div>
  <div class="page">
    <p>Evaluation Methodology</p>
    <p>Evaluation conducted with ESM broadcasting system [Chu04]</p>
    <p>Planetlab experiments</p>
    <p>Streaming video rate of 420Kbps [Chu04]</p>
    <p>Traces from operational deployments to represent group</p>
    <p>dynamics</p>
    <p>Event Degree 0 or 1 Degree 6 Peak Group Size Joins Leaves</p>
    <p>Rally 37% 12% 252 148 149</p>
    <p>Competition 54% 7% 116 110 75</p>
    <p>Portal 65% 35% 107 184 179</p>
    <p>Conference1 33% 67% 42 8 9</p>
    <p>Conference2 62% 38% 62 71 63</p>
  </div>
  <div class="page">
    <p>Evaluation Goals</p>
    <p>Resilient key dissemination:</p>
    <p>Effectiveness of per-hop TCP in end to end reliability</p>
    <p>Real join/leave patterns</p>
    <p>Real workloads</p>
    <p>Comparison of architectures:</p>
    <p>Coupled Data Optimized</p>
    <p>Coupled Key Optimized</p>
    <p>Decoupled</p>
  </div>
  <div class="page">
    <p>Decryptable Ratio Data received that can be decrypted</p>
    <p>Decryptable Ratio = Total data received</p>
    <p>better</p>
    <p>Coupled Data</p>
    <p>Optimized</p>
  </div>
  <div class="page">
    <p>Per-hop TCP</p>
    <p>Tail</p>
    <p>Expected: per-hop reliability improves performance</p>
    <p>Surprising: it is close to perfect</p>
    <p>better</p>
  </div>
  <div class="page">
    <p>Tree-Unicast  Proposed in our paper</p>
    <p>Considers overlay convergence</p>
    <p>tail</p>
  </div>
  <div class="page">
    <p>Coupled Data Optimized in Various Regimes</p>
    <p>Similar results obtained in different scenarios:  Sensitivity to various real traces</p>
    <p>Burst departures</p>
    <p>Ungraceful departures</p>
    <p>Sensitivity to overlay node bandwidth limitation</p>
    <p>Synthetic traces for join-leave dynamics</p>
  </div>
  <div class="page">
    <p>Comparison of Architectures</p>
    <p>Scheme Performance Key dissemination</p>
    <p>overhead</p>
    <p>Overlay maintenance</p>
    <p>overhead</p>
    <p>Coupled Data Optimized</p>
    <p>Good ?</p>
    <p>Data optimized</p>
    <p>?</p>
    <p>One structure</p>
    <p>Coupled Key Optimized [Zhang05]</p>
    <p>Infeasible --- --</p>
    <p>Decoupled Good ? Key optimized</p>
    <p>? Two structures</p>
  </div>
  <div class="page">
    <p>Peak Overheads</p>
    <p>Overall peak overhead reduced  Overhead of maintaining two structures is low</p>
    <p>b e</p>
    <p>tte r</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>One of the first studies on key dissemination using overlays</p>
    <p>Show overlays can simplify resilient key dissemination</p>
    <p>Per-hop reliability is effective in achieving end to end resiliency</p>
    <p>Show decoupled out-performs coupled approaches</p>
    <p>Data and keys delivered in separate overlays</p>
    <p>Good application performance and low overhead</p>
    <p>Distinguished work in evaluation under real Internet</p>
    <p>environments and real workloads</p>
  </div>
  <div class="page">
    <p>Thanks! Questions?</p>
    <p>rtorresg@purdue.edu</p>
  </div>
  <div class="page">
    <p>Backup Slides</p>
  </div>
  <div class="page">
    <p>Applicable to Mesh or Multi-tree</p>
    <p>Overhead</p>
    <p>Independent of using multi-tree, mesh or tree</p>
    <p>Could create a structure specialized for key</p>
    <p>distribution on top of the mesh</p>
    <p>Performance</p>
    <p>Better since mesh and multi-trees are more</p>
    <p>redundant structures</p>
  </div>
  <div class="page">
    <p>Rekey period 60 seconds</p>
    <p>Batching scheme more useful if changes in</p>
    <p>the group are small.</p>
    <p>If rekey period is too small, higher avg.</p>
    <p>overhead</p>
    <p>If too long, large portion of group changes,</p>
    <p>which can degrade batching scheme</p>
  </div>
  <div class="page">
    <p>Purdue University - Spring 2006</p>
    <p>Why 60 seconds? - Computation Overhead</p>
    <p>Marking performs better for small rekey intervals.  For larger rekey intervals, the number of encryptions increase</p>
    <p>by group dynamics</p>
  </div>
  <div class="page">
    <p>Purdue University - Spring 2006</p>
    <p>Why 60 seconds? - Peak Overheads</p>
    <p>On average, overhead is low, but there are peaks  These overheads are not sustained. They only occur at the</p>
    <p>rekey event, which take less than one second</p>
  </div>
  <div class="page">
    <p>Why Per-hop Reliability so Effective?  Performed wide number of experiments changing degree,</p>
    <p>leave model, join/leave pattern</p>
    <p>Much of these workloads don't seem to expose problems.</p>
    <p>Factors that mitigate this:</p>
    <p>A failure very close to the rekey event (60 seconds rekey</p>
    <p>period). The odds of this happening are small.</p>
    <p>The node that leaves must have children</p>
    <p>There is still a tail where certain nodes show some</p>
    <p>impact.</p>
    <p>we think simple heuristic could improve scheme further</p>
  </div>
  <div class="page">
    <p>Churn</p>
    <p>Trace Stay Time  Median (minutes)</p>
    <p>Conference1 11</p>
    <p>Conference2 2</p>
    <p>Portal 3</p>
    <p>-We also used several synthetic traces to experiment with higher churns</p>
    <p>-Tree-Unicast performed well under such scenarios</p>
  </div>
  <div class="page">
    <p>Scaling</p>
    <p>There are two aspects with scaling</p>
    <p>Application performance won't be affected</p>
    <p>For overhead, the benefits of decoupled</p>
    <p>might become more significant.</p>
    <p>That said, enabling confidentiality itself</p>
    <p>can cause higher overhead.</p>
  </div>
  <div class="page">
    <p>Tree-Unicast - details</p>
    <p>Join account for larger fraction of the cases and</p>
    <p>it is easy to handle.</p>
    <p>For leaves, a similar heuristic can be done.</p>
    <p>More involved solution (node leaving could have</p>
    <p>children)</p>
  </div>
  <div class="page">
    <p>Is DR good but raw data degrades when nodes die?</p>
    <p>Impact in transient performance</p>
    <p>overall average performance remains good</p>
    <p>Time a node takes to reconnect is short (5secs)</p>
    <p>It could show up if:</p>
    <p>Departure happen just before rekey period,</p>
    <p>Node cannot reconnect before the next rekey event</p>
    <p>Node have children</p>
    <p>A few of this events occurred and account for the tail.</p>
    <p>Further improvements with simple heuristics (caching)</p>
  </div>
  <div class="page">
    <p>[ ]</p>
    <p>[0]</p>
    <p>[00] [01] [02]</p>
    <p>Node 001 leaves</p>
    <p>msg1 = { {group_key}0, {0}00, {0}01, {0}02, {00}000, {00}002 } | forward_level = 1</p>
    <p>[ ]</p>
    <p>Msg6 = { {group_key}0, {0}00, {00}002} | forward_level = 3</p>
    <p>Multicast Tree</p>
    <p>msg2 = { {group_key}1} | forward_level = 1</p>
    <p>msg3 = { {group_key}2} | forward_level = 1</p>
    <p>Msg4 = { {group_key}0,{0}01} | forward_level = 2</p>
    <p>Msg5 = { {group_key}0,{0}02} | forward_level = 2</p>
    <p>msg1</p>
    <p>msg4 msg5</p>
    <p>msg6</p>
    <p>msg2 msg3</p>
  </div>
</Presentation>
