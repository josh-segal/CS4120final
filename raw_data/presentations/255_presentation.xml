<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Efficient System-Enforced Deterministic Parallelism</p>
    <p>Amittai Aviram, Shu-Chun Weng, Sen Hu, Bryan Ford</p>
    <p>Decentralized/Distributed Systems Group, Yale University</p>
    <p>http://dedis.cs.yale.edu/</p>
  </div>
  <div class="page">
    <p>Pervasive Parallelism</p>
    <p>CPU</p>
    <p>RAM</p>
    <p>I/O</p>
    <p>Uniprocessor</p>
    <p>CPU</p>
    <p>RAM I/O</p>
    <p>CPU</p>
    <p>Multiprocessor</p>
    <p>Core Core Core Core</p>
    <p>Core Core Core Core</p>
    <p>Core Core Core Core</p>
    <p>Core Core Core Core</p>
    <p>RAM RAM</p>
    <p>RAM</p>
    <p>I/O</p>
    <p>RAM</p>
    <p>I/O</p>
    <p>Multicore</p>
    <p>RAM RAM</p>
    <p>RAM</p>
    <p>I/O</p>
    <p>RAM</p>
    <p>I/O</p>
    <p>Many-core</p>
    <p>Industry shifting from faster to wider CPUs</p>
  </div>
  <div class="page">
    <p>Today's Grand Software Challenge</p>
    <p>Parallelism makes programming harder.</p>
    <p>Why? Parallelism introduces:  Nondeterminism (in general)</p>
    <p>Execution behavior subtly depends on timing</p>
    <p>Data Races (in particular)  Unsynchronized concurrent state changes</p>
    <p>Heisenbugs: sporadic, difficult to reproduce</p>
  </div>
  <div class="page">
    <p>Races are Everywhere</p>
    <p>x = 2x = 1</p>
    <p>Write/Write</p>
    <p>y = xx = 2</p>
    <p>Read/Write</p>
    <p>Memory Access</p>
    <p>File Access</p>
    <p>Synchronization</p>
    <p>System APIs</p>
    <p>rename()open()</p>
    <p>lock; x *= 2; unlock;</p>
    <p>lock; x++; unlock;</p>
    <p>malloc()  ptr</p>
    <p>malloc()  ptr</p>
    <p>open()  fd</p>
    <p>open()  fd</p>
  </div>
  <div class="page">
    <p>Living With Races</p>
    <p>Don't write buggy programs.</p>
    <p>Logging/replay tools (BugNet, IGOR, )  Reproduce bugs that manifest while logging</p>
    <p>Race detectors (RacerX, Chess, )  Analyze/instrument program to help find races</p>
    <p>Deterministic schedulers (DMP, Grace, CoreDet)  Synthesize a repeatable execution schedule</p>
    <p>All: help manage races but don't eliminate them</p>
  </div>
  <div class="page">
    <p>Must We Live With Races?</p>
    <p>Ideal: a parallel programming model in which races don't arise in the first place.</p>
    <p>Already possible with restrictive languages  Pure functional languages (Haskell)  Deterministic value/message passing (SHIM)  Separation-enforcing type systems (DPJ)</p>
    <p>What about race-freedom for any language?</p>
  </div>
  <div class="page">
    <p>Introducing Determinator</p>
    <p>New OS offering race-free parallel programming  Compatible with arbitrary (existing) languages</p>
    <p>C, C++, Java, assembly,</p>
    <p>Avoids races at multiple abstraction levels  Shared memory, file system, synch, ...</p>
    <p>Takes clean-slate approach for simplicity  Ideas could be retrofitted into existing Oses</p>
    <p>Current focus: compute-bound applications  Early prototype, many limitations</p>
  </div>
  <div class="page">
    <p>Talk Outline</p>
    <p>Introduction: Parallelism and Data Races  Determinator's Programming Model  Prototype Kernel/Runtime Implementation  Performance Evaluation</p>
  </div>
  <div class="page">
    <p>Determinator's Programming Model</p>
    <p>Check-out/Check-in Model for Shared State</p>
    <p>fork, copy shared stateparent thread/</p>
    <p>process</p>
    <p>parent thread/</p>
    <p>process child</p>
    <p>thread/ process</p>
    <p>parent's working state</p>
    <p>child's working state</p>
    <p>join, merge shared state</p>
  </div>
  <div class="page">
    <p>Seen This Before?</p>
    <p>Precedents for check-in/check-out model:  DOALL in early parallel Fortran computers</p>
    <p>Burroughs FMP 1980, Myrias 1988</p>
    <p>Language-specific, limited to DO loops</p>
    <p>Version control systems (cvs, svn, git, )  Manual check-in/check-out procedures</p>
    <p>For files only, not shared memory state</p>
    <p>Determinator applies this model pervasively and automatically to all shared state</p>
  </div>
  <div class="page">
    <p>t[0] t[1]</p>
    <p>Example 1: Gaming/Simulation, Conventional Threads</p>
    <p>struct actorstate actor[NACTORS];</p>
    <p>void update_actor(int i) { ...examine state of other actors... ...update state of actor[i] in-place...</p>
    <p>}</p>
    <p>int main() { ...initialize state of all actors... for (int time = 0; ; time++) {</p>
    <p>thread t[NACTORS]; for (i = 0; i &lt; NACTORS; i++)</p>
    <p>t[i] = thread_fork(update_actor, i); for (i = 0; i &lt; NACTORS; i++)</p>
    <p>thread_join(t[i]); }</p>
    <p>}</p>
    <p>actors [0] [1]</p>
    <p>main thread</p>
    <p>read read</p>
    <p>update update</p>
    <p>synchronize, next time step...</p>
  </div>
  <div class="page">
    <p>t[0] t[1]</p>
    <p>actors [0] [1]</p>
    <p>main thread</p>
    <p>Example 1: Gaming/Simulation, Conventional Threads</p>
    <p>struct actorstate actor[NACTORS];</p>
    <p>void update_actor(int i) { ...examine state of other actors... ...update state of actor[i] in-place...</p>
    <p>}</p>
    <p>int main() { ...initialize state of all actors... for (int time = 0; ; time++) {</p>
    <p>thread t[NACTORS]; for (i = 0; i &lt; NACTORS; i++)</p>
    <p>t[i] = thread_fork(update_actor, i); for (i = 0; i &lt; NACTORS; i++)</p>
    <p>thread_join(t[i]); }</p>
    <p>}</p>
    <p>update</p>
    <p>oops! corruption/crash</p>
    <p>due to race</p>
    <p>read</p>
    <p>(partial) update</p>
    <p>read</p>
  </div>
  <div class="page">
    <p>actors</p>
    <p>[0] [1]</p>
    <p>main thread</p>
    <p>Example 1: Gaming/Simulation, Determinator Threads</p>
    <p>struct actorstate actor[NACTORS];</p>
    <p>void update_actor(int i) { ...examine state of other actors... ...update state of actor[i] in-place...</p>
    <p>}</p>
    <p>int main() { ...initialize state of all actors... for (int time = 0; ; time++) {</p>
    <p>thread t[NACTORS]; for (i = 0; i &lt; NACTORS; i++)</p>
    <p>t[i] = thread_fork(update_actor, i); for (i = 0; i &lt; NACTORS; i++)</p>
    <p>thread_join(t[i]); }</p>
    <p>}</p>
    <p>t[0] t[1] fork fork</p>
    <p>copy copy</p>
    <p>update update</p>
    <p>merge diffs</p>
    <p>merge diffs</p>
    <p>join join</p>
  </div>
  <div class="page">
    <p>Example 2: Parallel Make/Scripts, Conventional Unix Processes</p>
    <p># Makefile for file 'result'</p>
    <p>result: foo.out bar.out combine $^ &gt;$@</p>
    <p>%.out: %.in stage1 &lt;$^ &gt;tmpfile stage2 &lt;tmpfile &gt;$@ rm tmpfile</p>
    <p>read Makefile, compute dependencies fork worker shell</p>
    <p>$ make</p>
    <p>stage1 &lt;foo.in &gt;tmpfile stage2 &lt;tmpfile &gt;foo.out rm tmpfile</p>
    <p>stage1 &lt;bar.in &gt;tmpfile stage2 &lt;tmpfile &gt;bar.out rm tmpfile</p>
    <p>combine foo.out bar.out &gt;result</p>
  </div>
  <div class="page">
    <p>Example 2: Parallel Make/Scripts, Conventional Unix Processes</p>
    <p># Makefile for file 'result'</p>
    <p>result: foo.out bar.out combine $^ &gt;$@</p>
    <p>%.out: %.in stage1 &lt;$^ &gt;tmpfile stage2 &lt;tmpfile &gt;$@ rm tmpfile</p>
    <p>read Makefile, compute dependencies fork worker processes</p>
    <p>$ make -j (parallel make)</p>
    <p>stage1 &lt;foo.in &gt;tmpfile</p>
    <p>stage2 &lt;tmpfile &gt;foo.out</p>
    <p>rm tmpfile</p>
    <p>stage1 &lt;bar.in &gt;tmpfile</p>
    <p>stage2 &lt;tmpfile &gt;bar.out</p>
    <p>rm tmpfile tmpfile</p>
    <p>corrupt!</p>
    <p>read foo.out, bar.out write result</p>
  </div>
  <div class="page">
    <p>Example 2: Parallel Make/Scripts, Determinator Processes</p>
    <p># Makefile for file 'result'</p>
    <p>result: foo.out bar.out combine $^ &gt;$@</p>
    <p>%.out: %.in stage1 &lt;$^ &gt;tmpfile stage2 &lt;tmpfile &gt;$@ rm tmpfile</p>
    <p>$ make -j</p>
    <p>read Makefile, compute dependencies fork worker processes</p>
    <p>copy file system</p>
    <p>copy file system</p>
    <p>stage1 &lt;foo.in &gt;tmpfile</p>
    <p>stage2 &lt;tmpfile &gt;foo.out</p>
    <p>rm tmpfile</p>
    <p>stage1 &lt;bar.in &gt;tmpfile</p>
    <p>stage2 &lt;tmpfile &gt;bar.out</p>
    <p>rm tmpfile</p>
    <p>read foo.out, bar.out write result</p>
    <p>merge file systems</p>
    <p>merge file systems</p>
  </div>
  <div class="page">
    <p>What Happens to Data Races?</p>
    <p>Read/Write races: go away entirely  writes propagate only via synchronization  reads always see last write by same thread,</p>
    <p>else value at last synchronization point</p>
    <p>w(x)</p>
    <p>r(x)</p>
    <p>w(x)</p>
  </div>
  <div class="page">
    <p>What Happens to Data Races?</p>
    <p>Write/Write races:  go away if threads undo their changes</p>
    <p>tmpfile in make -j example</p>
    <p>otherwise become deterministic conflicts  always detected at join/merge point</p>
    <p>runtime exception, just like divide-by-zero</p>
    <p>w(x) w(x)</p>
    <p>trap!</p>
  </div>
  <div class="page">
    <p>Example 2: Parallel Make/Scripts, Determinator Processes</p>
    <p># Makefile for file 'result'</p>
    <p>result: foo.out bar.out combine $^ &gt;$@</p>
    <p>%.out: %.in stage1 &lt;$^ &gt;tmpfile stage2 &lt;tmpfile &gt;$@ rm tmpfile</p>
    <p>$ make -j</p>
    <p>read Makefile, compute dependencies fork worker processes</p>
    <p>copy file system</p>
    <p>copy file system</p>
    <p>stage1 &lt;foo.in &gt;tmpfile</p>
    <p>stage2 &lt;tmpfile &gt;foo.out</p>
    <p>stage1 &lt;bar.in &gt;tmpfile</p>
    <p>stage2 &lt;tmpfile &gt;bar.out</p>
    <p>merge file systems</p>
    <p>tmpfile: conflict detected!</p>
  </div>
  <div class="page">
    <p>Repeatability</p>
    <p>Ability to replay past executions gives us:  Bug reproducibility  Time-travel debugging (reverse execution)  [Byzantine] fault tolerance  Computation accountability (PeerReview)  Intrusion analysis/response (ReVirt, IntroVirt)</p>
    <p>Sometimes need system-enforced determinism  replay arbitrary malicious code exactly</p>
  </div>
  <div class="page">
    <p>Talk Outline</p>
    <p>Introduction: Parallelism and Data Races  Determinator's Programming Model  Prototype Kernel/Runtime Implementation  Performance Evaluation</p>
  </div>
  <div class="page">
    <p>Determinator Microkernel</p>
    <p>Determinator OS Architecture</p>
    <p>Device I/O</p>
    <p>Child Space Child Space</p>
    <p>Grandchild Space Grandchild Space</p>
    <p>Parent/Child Interaction</p>
    <p>Parent/Child Interaction</p>
    <p>Root SpaceRegisters (1 thread)</p>
    <p>Address Space</p>
    <p>Snapshot</p>
    <p>Hardware</p>
  </div>
  <div class="page">
    <p>Microkernel API</p>
    <p>Three system calls:  PUT: copy data into child, snapshot, start child  GET: copy data or modifications out of child  RET: return control to parent</p>
    <p>(and a few options to each  see paper)</p>
    <p>No kernel support for processes, threads, files, pipes, sockets, messages, shared memory, ...</p>
  </div>
  <div class="page">
    <p>User-level Runtime</p>
    <p>Emulates familiar programming abstractions  C library  Unix-style process management  Unix-style file system API  Shared memory multithreading  Pthreads via deterministic scheduling</p>
    <p>it's a library  all facilities are optional</p>
  </div>
  <div class="page">
    <p>Code Data Code Data</p>
    <p>Child2 Space</p>
    <p>Code Data</p>
    <p>Child1 Space</p>
    <p>Code Data</p>
    <p>Threads, Determinator Style</p>
    <p>Parent Space Multithreaded</p>
    <p>Process</p>
    <p>Code Data</p>
    <p>Parent: 1. thread_fork(Child1): PUT 2. thread_fork(Child2): PUT 3. thread_join(Child1): GET 4. thread_join(Child2): GET</p>
    <p>Child 1: read/write memory thread_exit(): RET</p>
    <p>Child 2: read/write memory thread_exit(): RET</p>
    <p>writes writes</p>
  </div>
  <div class="page">
    <p>Virtual Memory Optimizations</p>
    <p>Copy/snapshot quickly via copy-on-write (COW)  Mark all pages read-only  Duplicate mappings rather than pages  Copy pages only on write attempt</p>
    <p>Variable-granularity virtual diff &amp; merge  If only parent or child has modified a page,</p>
    <p>reuse modified page: no byte-level work  If both parent and child modified a page,</p>
    <p>perform byte-granularity diff &amp; merge</p>
  </div>
  <div class="page">
    <p>Threads, Classic Style</p>
    <p>Optional deterministic scheduling  Backward compatible with pthreads API  Similar to DMP/CoreDet approach</p>
    <p>Quantize execution by counting instructions</p>
    <p>Disadvantages:  Same old parallel programming model</p>
    <p>Races, schedule-dependent bugs still possible</p>
    <p>Quantization incurs runtime overhead</p>
  </div>
  <div class="page">
    <p>Emulating a Shared File System</p>
    <p>Each process has a complete file system replica in its address space  a distributed FS</p>
    <p>w/ weak consistency  fork() makes virtual copy  wait() merges changes</p>
    <p>made by child processes  merges at file rather than byte granularity</p>
    <p>No persistence yet; just for intermediate results</p>
    <p>Determinator Kernel</p>
    <p>File System</p>
    <p>Root Process</p>
    <p>File System</p>
    <p>Child Process</p>
    <p>File System</p>
    <p>Child Process</p>
    <p>File System Synchronization</p>
  </div>
  <div class="page">
    <p>File System Conflicts</p>
    <p>Hard conflicts:  concurrent file creation, random writes, etc.  mark conflicting file  accesses yield errors</p>
    <p>Soft conflicts:  concurrent appends to file or output device  merge appends together in deterministic order</p>
  </div>
  <div class="page">
    <p>Distributed Computing</p>
    <p>Determinator Kernel</p>
    <p>Child (0,1)Child (0,0)</p>
    <p>Determinator Kernel</p>
    <p>Child (1,1)Child (1,0)</p>
    <p>Cross-Node Space Migration(home)</p>
    <p>Cluster Node 0 Cluster Node 1</p>
  </div>
  <div class="page">
    <p>Other Features (See Paper)</p>
    <p>System enforcement of determinism  important for malware/intrusion analysis</p>
    <p>might help with timing channels [CCSW 10]</p>
    <p>Distributed computing via process migration  forms simple distributed FS, DSM system</p>
    <p>Deterministic scheduling (optional)  backward compatibility with pthreads API</p>
    <p>races still exist but become reproducible</p>
  </div>
  <div class="page">
    <p>Talk Outline</p>
    <p>Introduction: Parallelism and Data Races  Determinator's Programming Model  Prototype Kernel/Runtime Implementation  Performance Evaluation</p>
  </div>
  <div class="page">
    <p>Evaluation Goals</p>
    <p>Question: Can such a programming model be:  efficient  scalable</p>
    <p>...enough for everyday use in real apps?</p>
    <p>Answer: it depends on the app (of course).</p>
  </div>
  <div class="page">
    <p>Single-Node Speedup over 1 CPU</p>
  </div>
  <div class="page">
    <p>Single-Node Performance: Determinator versus Linux</p>
    <p>Coarse-grained Fine-grained</p>
  </div>
  <div class="page">
    <p>Drilldown: Varying Granularity (Parallel Matrix Multiply)</p>
  </div>
  <div class="page">
    <p>Drilldown: Varying Granularity (Parallel Quicksort)</p>
    <p>break-even point</p>
  </div>
  <div class="page">
    <p>Future Work</p>
    <p>Current early prototype has many limitations left to be addressed in future work:  Generalize hierarchical fork/join model  Persistent, deterministic file system  Richer device I/O and networking (TCP/IP)  Clocks/timers, interactive applications  Backward-compatibility with existing OS</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Determinator provides a race free, deterministic parallel programming model</p>
    <p>Avoids races via check-out, check-in model</p>
    <p>Supports arbitrary, existing languages</p>
    <p>Supports thread- and process-level parallelism</p>
    <p>Efficiency through OS-level VM optimizations  Minimal overhead for coarse-grained apps</p>
    <p>Further information: http://dedis.cs.yale.edu</p>
  </div>
  <div class="page">
    <p>Acknowledgments</p>
    <p>Thank you: Zhong Shao, Rammakrishna Gummadi, Frans Kaashoek, Nickolai Zeldovich, Sam King, the OSDI reviewers</p>
    <p>Funding: ONR grant N00014-09-10757 NSF grant CNS-1017206</p>
    <p>Further information: http://dedis.cs.yale.edu</p>
  </div>
</Presentation>
