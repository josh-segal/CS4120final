<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>AMNESIA: Analysis and Monitoring for Neutralizing SQL</p>
    <p>Injection Attacks</p>
    <p>William Halfond</p>
    <p>Alessandro Orso</p>
    <p>Georgia Institute of Technology</p>
    <p>This work was supported in part by NSF awards CCR-0306372,</p>
    <p>CCR-0205422, and CCR-0209322 to Georgia Tech, and by the DHS</p>
  </div>
  <div class="page">
    <p>AMNESIA: Analysis and Monitoring for Neutralizing SQL</p>
    <p>Injection Attacks</p>
    <p>William Halfond</p>
    <p>Alessandro Orso</p>
    <p>Georgia Institute of Technology</p>
    <p>This work was supported in part by NSF awards CCR-0306372,</p>
    <p>CCR-0205422, and CCR-0209322 to Georgia Tech, and by the DHS</p>
    <p>David Aucsmith (CTO of Security and Business Unit, Microsoft) defined SQLIA as one of the most serious threats to web apps</p>
    <p>Open Web Application Security Project (OWASP) lists SQLIA in its top ten most critical web application security vulnerabilities</p>
    <p>Successful attacks on Guess Inc., Travelocity, FTD.com, Tower Records, RIAA,</p>
  </div>
  <div class="page">
    <p>William Halfond  ASE 2005  November 10th, 2005</p>
    <p>Vulnerable Application</p>
    <p>String queryString = &quot;SELECT info FROM userTable WHERE &quot;;</p>
    <p>if ((! login.equals(&quot;&quot;)) &amp;&amp; (! password.equals(&quot;&quot;))) {</p>
    <p>queryString += &quot;login='&quot; + login + &quot;' AND pass='&quot; + password + &quot;'&quot;;</p>
    <p>} else {</p>
    <p>queryString+=&quot;login='guest'&quot;;</p>
    <p>}</p>
    <p>ResultSet tempSet = stmt.execute(queryString);</p>
  </div>
  <div class="page">
    <p>William Halfond  ASE 2005  November 10th, 2005</p>
    <p>Attack Scenario</p>
    <p>String queryString = &quot;SELECT info FROM userTable WHERE &quot;;</p>
    <p>if ((! login.equals(&quot;&quot;)) &amp;&amp; (! password.equals(&quot;&quot;))) {</p>
    <p>queryString += &quot;login='&quot; + login + &quot;' AND pass='&quot; + password + &quot;'&quot;;</p>
    <p>} else {</p>
    <p>queryString+=&quot;login='guest'&quot;;</p>
    <p>}</p>
    <p>ResultSet tempSet = stmt.execute(queryString);</p>
    <p>Normal Usage User submits login doe and password xyz</p>
    <p>SELECT info FROM users WHERE login=doe AND pass=xyz</p>
  </div>
  <div class="page">
    <p>William Halfond  ASE 2005  November 10th, 2005</p>
    <p>Attack Scenario</p>
    <p>String queryString = &quot;SELECT info FROM userTable WHERE &quot;;</p>
    <p>if ((! login.equals(&quot;&quot;)) &amp;&amp; (! password.equals(&quot;&quot;))) {</p>
    <p>queryString += &quot;login='&quot; + login + &quot;' AND pass='&quot; + password + &quot;'&quot;;</p>
    <p>} else {</p>
    <p>queryString+=&quot;login='guest'&quot;;</p>
    <p>}</p>
    <p>ResultSet tempSet = stmt.execute(queryString);</p>
    <p>Malicious Usage Attacker submits admin or 1=1 --  and password of</p>
    <p>SELECT info FROM users WHERE login=admin or 1=1 --  AND pass=</p>
  </div>
  <div class="page">
    <p>William Halfond  ASE 2005  November 10th, 2005</p>
    <p>Background Information</p>
    <p>Input filtering</p>
    <p>Stored procedures</p>
    <p>Defensive coding</p>
    <p>Why the obvious solutions dont work.</p>
  </div>
  <div class="page">
    <p>William Halfond  ASE 2005  November 10th, 2005</p>
    <p>Presentation Outline</p>
    <p>Background Information</p>
    <p>The AMNESIA Technique</p>
    <p>Empirical Evaluation</p>
    <p>Related Work</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>William Halfond  ASE 2005  November 10th, 2005</p>
    <p>Our Solution: AMNESIA</p>
    <p>Basic Insights 1. Code contains enough information to</p>
    <p>accurately model all legitimate queries. 2. A SQL Injection Attack will violate the</p>
    <p>predicted model.</p>
    <p>Solution: Static analysis =&gt; build query models Runtime analysis =&gt; enforce models</p>
  </div>
  <div class="page">
    <p>William Halfond  ASE 2005  November 10th, 2005</p>
    <p>Overview of the Technique</p>
  </div>
  <div class="page">
    <p>William Halfond  ASE 2005  November 10th, 2005</p>
    <p>Scan application code to identify hotspots.</p>
    <p>String queryString = &quot;SELECT info FROM userTable WHERE &quot;; if ((! login.equals(&quot;&quot;)) &amp;&amp; (! password.equals(&quot;&quot;))) { queryString += &quot;login='&quot; + login + &quot;' AND pass='&quot; + password + &quot;'&quot;; } else { queryString+=&quot;login='guest'&quot;; } ResultSet tempSet = stmt.execute(queryString);</p>
    <p>Hotspot</p>
  </div>
  <div class="page">
    <p>William Halfond  ASE 2005  November 10th, 2005</p>
    <p>SELECT info FROM userTable WHERE</p>
    <p>login</p>
    <p>=  guest</p>
    <p>login</p>
    <p>=    AND pass =</p>
  </div>
  <div class="page">
    <p>William Halfond  ASE 2005  November 10th, 2005</p>
    <p>Wrap each hotspot with call to monitor.</p>
    <p>String queryString = &quot;SELECT info FROM userTable WHERE &quot;; if ((! login.equals(&quot;&quot;)) &amp;&amp; (! password.equals(&quot;&quot;))) { queryString += &quot;login='&quot; + login + &quot;' AND pass='&quot; + password + &quot;'&quot;; } else { queryString+=&quot;login='guest'&quot;; } if (monitor.accepts (hotspotID, queryString) { ResultSet tempSet = stmt.execute(queryString); }</p>
    <p>Hotspot</p>
    <p>Call to Monitor</p>
  </div>
  <div class="page">
    <p>William Halfond  ASE 2005  November 10th, 2005</p>
    <p>Normal Usage:</p>
    <p>SELECT info FROM userTable WHERE login =  doe AND pass =  xyz</p>
    <p>Check queries against SQL query model.</p>
    <p>SELECT info FROM userTable WHERE</p>
    <p>login</p>
    <p>=  guest</p>
    <p>login</p>
    <p>=    AND pass =</p>
  </div>
  <div class="page">
    <p>William Halfond  ASE 2005  November 10th, 2005</p>
    <p>Check queries against SQL query model.</p>
    <p>SELECT info FROM userTable WHERE</p>
    <p>login</p>
    <p>=  guest</p>
    <p>login</p>
    <p>=    AND pass =</p>
    <p>Malicious Usage:</p>
    <p>SELECT info FROM userTable WHERE login =   AND pass =  OR 1 = 1 -- admin</p>
  </div>
  <div class="page">
    <p>William Halfond  ASE 2005  November 10th, 2005</p>
    <p>AMNESIA Implementation</p>
  </div>
  <div class="page">
    <p>William Halfond  ASE 2005  November 10th, 2005</p>
    <p>Limitations and Assumptions</p>
    <p>Assumption  Queries created by manipulating strings</p>
    <p>Limitations  False positives</p>
    <p>When string analysis is not precise enough</p>
    <p>False negatives  When query model includes spurious queries</p>
    <p>and an attack matches it</p>
  </div>
  <div class="page">
    <p>William Halfond  ASE 2005  November 10th, 2005</p>
    <p>Evaluation: Research Questions</p>
    <p>RQ1: What percentage of attacks can our technique detect and prevent that would otherwise go undetected and reach the database?</p>
    <p>RQ2: How much overhead does our technique impose on web applications at runtime?</p>
    <p>RQ3: What percentage of legitimate accesses does our technique prevent from reaching the database?</p>
  </div>
  <div class="page">
    <p>William Halfond  ASE 2005  November 10th, 2005</p>
    <p>Experiment Setup</p>
    <p>Average Automata size</p>
    <p>HotspotsLOCSubject</p>
    <p>Applications are a mix of commercial (5) and student projects (2)</p>
    <p>Attacks and legitimate inputs developed independently</p>
    <p>Attack inputs represent broad range of exploits</p>
  </div>
  <div class="page">
    <p>William Halfond  ASE 2005  November 10th, 2005</p>
    <p>DetectedSuccessfulUnsuccessfulSubject</p>
    <p>Results: RQ1</p>
    <p>No false negatives</p>
    <p>Unsuccessful attacks = filtered by application</p>
  </div>
  <div class="page">
    <p>William Halfond  ASE 2005  November 10th, 2005</p>
    <p>Results: RQ2 &amp; RQ3</p>
    <p>Runtime Overhead  Less than 1ms.</p>
    <p>Insignificant compared to cost of network/database access</p>
    <p>No false positives  No legitimate input was flagged as SQLIA</p>
  </div>
  <div class="page">
    <p>William Halfond  ASE 2005  November 10th, 2005</p>
    <p>Related Work</p>
    <p>Require learning new API[2,8]</p>
    <p>Customized runtime environments and high overhead[6,9,12,10,11]</p>
    <p>Address only a subset of SQLIA[3,14]</p>
    <p>Limited by machine learning[4,13]</p>
    <p>Overly conservative static analysis[5,7]</p>
  </div>
  <div class="page">
    <p>William Halfond  ASE 2005  November 10th, 2005</p>
    <p>Conclusion</p>
    <p>SQL Injection Attacks (SQLIAs) are a serious threat to DB-based Web Applications</p>
    <p>This technique detects and prevents SQLIAs by combining static analysis and runtime monitoring  Fully automated  No human effort required</p>
    <p>Empirical evaluation  Commercial applications and real attacks  No false positives generated  Precise  No false negatives</p>
  </div>
  <div class="page">
    <p>William Halfond  ASE 2005  November 10th, 2005</p>
    <p>References [1] [Christensen03] A. S. Christensen, A. Moller, and M. I. Schwartzbach. Precise analysis of string expressions. In</p>
    <p>Proceedings of the 10th International Static Analysis Symposium, volume 2694 of LNCS, pages 1--18. Springer-Verlag, June 2003.</p>
    <p>[2] [Cook05] W.R. Cook and S. Rai. Safe Query Objects: Statically Typed Objects as Remotely Executable Queries. ICSE 2005</p>
    <p>[3] [Gould04] C. Gould, Z. Su, and P. Devanbu. Static checking of dynamically generated queries in database applications. In Proceedings of the 26th International Conference on Software Engineering (ICSE 04), pages 645--654, 2004.</p>
    <p>[4] [Huang03] Y. W. Huang, S. K. Huang, T. P. Lin, and C. H. Tsai. Web application security assessment by fault injection and behavior monitoring. In Proceedings of the 11th International World Wide Web Conference (WWW 03), May 2003.</p>
    <p>[5] [Huang04] Y. W. Huang, F. Yu, C. Hang, C. H. Tsai, D. T. Lee, and S. Y. Kuo. Securing web application code by static analysis and runtime protection. In Proceedings of the 12th International World Wide Web Conference (WWW 04), May 2004.</p>
    <p>[6] [Kc03] G. S. Kc, A. D. Keromytis, and V.Prevelakis. Countering code-injection attacks with instruction-set randomization. In Proceedings of the ACM Conference on Computer and Communications Security, pages 272--280, October 2003.</p>
    <p>[7] [Livshits05] [8] [McClure05] Russell McClure and Ingolf Krger. SQL DOM: Compile Time Checking of Dynamic SQL Statements. ICSE</p>
    <p>Generation of Exploit Attacks on Commodity Software. In Network and Distributed Systems Security Symposium. Feb 2005.</p>
    <p>[10] [Nguyen-Tuong05] Anh Nguyen-Tuong, Salvatore Guarnieri, Doug Greene, Jeff Shirley, David Evans. Automatically Hardening Web Applications Using Precise Tainting Information. In Twentieth IFIP International Information Security Conference, May 2005.</p>
    <p>[11] [Pietraszek05] T. Pietraszek1 and C.V. Berghe. Defending Against Injection Attacks through Context-Sensitive String Evaluation. RAID 2005</p>
    <p>[12] [Scott02] D. Scott and R. Sharp. Abstracting application-level web security. In Proceedings of the 11th International Conference on the World Wide Web, pages 396--407, 2002.</p>
    <p>[13] [Valeur05] F. Valeur, D. Mutz, and G. Vigna, Learning-Based Approach to the Detection of SQL Attacks, Proceedings of the Conference on Detection of Intrusions and Malware &amp; Vulnerability Assessment (DIMVA)</p>
    <p>[14] [Wassermann04] G. Wassermann and Z. Su. An analysis framework for security in web applications. In Proceedings of the FSE Workshop on Specification and Verification of Component-Based Systems, pages 70--78, October 2004.</p>
  </div>
</Presentation>
