<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Mohamed Hefeeda 1</p>
    <p>School of Computing ScienceSchool of Computing Science Simon Fraser University, CanadaSimon Fraser University, Canada</p>
    <p>Efficient k-Coverage Algorithms for Wireless Sensor Networks</p>
    <p>Mohamed Hefeeda</p>
    <p>(joint work with Majid Bagheri)</p>
    <p>INFOCOM Minisymposium 07</p>
  </div>
  <div class="page">
    <p>Mohamed Hefeeda 2</p>
    <p>MotivationsMotivations</p>
    <p>Wireless sensor networks have been proposed for many real-life monitoring applications - Habitat monitoring, early forest fire detection,</p>
    <p>k-coverage is a measure of quality of monitoring - k-coverage  every point is monitored by k+ sensors</p>
    <p>- Improves reliability and accuracy</p>
    <p>k-coverage is essential for some applications - E.g., intruder classification, object tracking</p>
  </div>
  <div class="page">
    <p>Mohamed Hefeeda 3</p>
    <p>Given n already deployed sensors in a target area, and a desired coverage degree k  1, select a minimal subset of sensors to k-cover all sensor locations</p>
    <p>Assumptions - Sensing range of each sensor is a disk with radius r</p>
    <p>- Sensor deployment can follow any distribution</p>
    <p>- Nodes do not know their locations</p>
    <p>- Point coverage approximates area coverage (dense sensor network)</p>
    <p>Our Our kk-Coverage Problem-Coverage Problem</p>
  </div>
  <div class="page">
    <p>Mohamed Hefeeda 4</p>
    <p>k-coverage problem is NP-hard [Yang 06]</p>
    <p>Proof: reduction to minimum dominating set problem - Model network as graph</p>
    <p>- An edge between any two nodes if they are within the sensing range of each other</p>
    <p>- Finding the minimum number of sensors to 1-cover yields a minimum dominating set</p>
    <p>Our Our kk-Coverage Problem (contd)-Coverage Problem (contd)</p>
  </div>
  <div class="page">
    <p>Mohamed Hefeeda 5</p>
    <p>Our Contributions:Our Contributions: k k-Coverage Algorithms-Coverage Algorithms</p>
    <p>We propose two approximation algorithms - Randomized k-coverage algorithm (RKC)</p>
    <p>Simple and efficient</p>
    <p>- Distributed RKC (DRKC)</p>
    <p>Basic idea: - Model k-coverage as a hitting set problem</p>
    <p>- Design an approximation algorithm for hitting set  Prove its correctness, verify using simulations</p>
    <p>- Decentralize it</p>
  </div>
  <div class="page">
    <p>Mohamed Hefeeda 6</p>
    <p>Set Systems and Hitting SetSet Systems and Hitting Set</p>
    <p>Set system (X,R) is composed of - set X, and</p>
    <p>- collection R of subsets of X</p>
    <p>H is a hitting set if it has a nonempty intersection with every element of R:</p>
    <p>sHRs</p>
    <p>XH</p>
    <p>,</p>
  </div>
  <div class="page">
    <p>Mohamed Hefeeda 7</p>
    <p>Set System for Set System for kk-Coverage-Coverage</p>
    <p>X: set of all sensor locations</p>
    <p>For each point p in X, draw circle of radius r (sensing range) centred at p</p>
    <p>All points in X which fall inside that circle constitute one set s in R</p>
    <p>The hitting set must have at least one point in each circle</p>
    <p>Thus all points are covered by the hitting set</p>
  </div>
  <div class="page">
    <p>Mohamed Hefeeda 8</p>
    <p>Example: 1-CoverageExample: 1-Coverage</p>
    <p>r</p>
  </div>
  <div class="page">
    <p>Mohamed Hefeeda 9</p>
    <p>Example: Example: kk-Coverage (-Coverage (k = 3k = 3))</p>
    <p>Elements of the hitting set are centers of k-flowers</p>
  </div>
  <div class="page">
    <p>Mohamed Hefeeda 10</p>
    <p>Centralized Algorithm (RKC)Centralized Algorithm (RKC)</p>
    <p>Build an approximate hitting set 1. Assign weights to all points, initially 1 2. Select a random set of points, referred to as -net</p>
    <p>Selection biased on weights</p>
    <p>number of iterations is below a threshold (~log |X|)</p>
  </div>
  <div class="page">
    <p>Mohamed Hefeeda 11</p>
    <p>-nets-nets</p>
    <p>N is an -net for set system (X,R) if it has nonempty intersection with every element T of R such as |T|   |X|</p>
    <p>Thus, -net is required to hit only large elements of R - (hitting set must hit every element of R)</p>
    <p>Idea: - Find -nets of increasing sizes (decreasing ) till one</p>
    <p>of them hits all points</p>
  </div>
  <div class="page">
    <p>Mohamed Hefeeda 12</p>
    <p>-net Construction-net Construction</p>
    <p>-nets can be computed efficiently for set systems with finite VC-dimension [Bronnimann 95] - We prove that our set system has VC-dimension = 3</p>
    <p>Randomly selecting</p>
    <p>max {4/ log 2/a, 8d/ log 8d/}</p>
    <p>points of X constitutes an -net with probability 1-a for 0&lt;a&lt;1 where d is the VC-dimension</p>
  </div>
  <div class="page">
    <p>Mohamed Hefeeda 13</p>
    <p>Details of RKCDetails of RKC</p>
  </div>
  <div class="page">
    <p>Mohamed Hefeeda 14</p>
    <p>Correctness and Complexity of RKCCorrectness and Complexity of RKC</p>
    <p>Theorem 1: RKC</p>
    <p>- ensures that very point is k-covered,</p>
    <p>- terminates in O(n2 log2 n) steps, and</p>
    <p>- returns a solution of size at most O(P log P), where P is the minimum number of sensors required for k-coverage</p>
  </div>
  <div class="page">
    <p>Mohamed Hefeeda 15</p>
    <p>Distributed Algorithm: DRKCDistributed Algorithm: DRKC</p>
    <p>RKC maintains only two global variables: - size of -net</p>
    <p>- aggregate weight of all nodes</p>
    <p>Idea of DRKC: Emulate RKC by keeping local estimates of global variables - Nodes construct -net in distributed manner</p>
    <p>- Nodes double their weights with a probability</p>
    <p>- Each node verifies its own coverage</p>
  </div>
  <div class="page">
    <p>Mohamed Hefeeda 16</p>
    <p>DRKC Message ComplexityDRKC Message Complexity</p>
    <p>Theorem 2:</p>
    <p>The average number of messages sent by a node in DRKC is O(1), and the maximum number is O(log n)</p>
  </div>
  <div class="page">
    <p>Mohamed Hefeeda 17</p>
    <p>Performance EvaluationPerformance Evaluation</p>
    <p>Simulation with thousands of nodes</p>
    <p>Verify correctness (k-coverage is achieved)</p>
    <p>Show efficiency (output size compared optimal )</p>
    <p>Compare with other algorithms - LPA (centralized linear programming) and PKA</p>
    <p>(distributed based on pruning) in [Yang 06]</p>
    <p>- CKC (centralized greedy) and DPA (distributed based on pruning) in [Zhou 04]</p>
  </div>
  <div class="page">
    <p>Mohamed Hefeeda 18</p>
    <p>Correctness of RKCCorrectness of RKC</p>
    <p>RKC achieves the requested coverage degree</p>
    <p>Requested k = 1 Requested k = 8</p>
  </div>
  <div class="page">
    <p>Mohamed Hefeeda 19</p>
    <p>Efficiency of RKCEfficiency of RKC</p>
    <p>Compare against necessary and sufficient conditions for k-coverage in [Kumar 04]</p>
  </div>
  <div class="page">
    <p>Mohamed Hefeeda 20</p>
    <p>Correctness of DRKCCorrectness of DRKC</p>
    <p>DRKC achieves the requested coverage degree</p>
    <p>Requested k = 1 Requested k = 8</p>
  </div>
  <div class="page">
    <p>Mohamed Hefeeda 21</p>
    <p>Efficiency of DRKCEfficiency of DRKC</p>
    <p>DRKC performs closely to RKC, especially in dense networks</p>
  </div>
  <div class="page">
    <p>Mohamed Hefeeda 22</p>
    <p>Comparison: DRKC, PKA, DPAComparison: DRKC, PKA, DPA</p>
    <p>DRKC consumes less energy and prolongs network lifetime</p>
  </div>
  <div class="page">
    <p>Mohamed Hefeeda 23</p>
    <p>ConclusionsConclusions</p>
    <p>Presented a centralized k-coverage algorithm - Simple, and efficient (log-factor approximation) - Proved its correctness and complexity</p>
    <p>Presented a fully-distributed version - low message complexity, prolongs network lifetime</p>
    <p>Simulations verify that our algorithms are - Correct and efficient - Outperform other k-coverage algorithms</p>
  </div>
  <div class="page">
    <p>Mohamed Hefeeda 24</p>
    <p>Thank You!Thank You!</p>
    <p>Questions??</p>
    <p>Details are available in the extended version of the paper at:</p>
    <p>http://www.cs.sfu.ca/~mhefeeda</p>
  </div>
</Presentation>
