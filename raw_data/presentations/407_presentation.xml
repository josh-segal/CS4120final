<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>2011 Hewlett-Packard Development Company, L.P.</p>
    <p>Automating Network Monitoring on Experimental Network Testbeds</p>
    <p>Michael Golightly, Jack Brassil</p>
  </div>
  <div class="page">
    <p>Problem  Experimenters can benefit from additional experiment</p>
    <p>wide network monitoring  debugging aid for large-scale experiments  Malicious flow detection  Aids experiment traffic engineering</p>
    <p>Many monitoring tools require tool-specific expertise (often not found in the students toolkit)</p>
    <p>Deploying tools in large-scale experiments manual and tedious  Difficult to manage if experiment topologies vary or are</p>
    <p>dynamically modified  Difficult to configure/provision before running experiment</p>
  </div>
  <div class="page">
    <p>Our Solution Approach</p>
    <p>Au t o m a t ed , experiment-wide network monitoring tool deployment</p>
    <p>Develop an ex t en s ib le deployment framework that can be used for a broad class of monitoring tools</p>
    <p>Give user f lex ib le co n t r o l  monitoring resource consumption (cost)  Coverage  Data collection granularity  Impact on running experiment</p>
    <p>Similar in spirit to Emulabs trace, Orbits Measurement Framework &amp; Library (OML), etc.</p>
  </div>
  <div class="page">
    <p>NetFlowize</p>
    <p>A tool to deploy NetFlow probes and collectors on Emulab/DETER experiments  NetFlow widely used throughout both network systems and</p>
    <p>security communities  Most typically used testbed-wide by provider/operator rather</p>
    <p>than experiment-wide, e.g., PlanetFlow  Uses unmodified, open-source NetFlow components  Can be extended to collect data from infrastructure switches</p>
    <p>and routers (more later)</p>
    <p>Users only specify one of two deployment modes  Resource lightweight or heavyweight</p>
  </div>
  <div class="page">
    <p>Brief NetFlow Backgrounder</p>
    <p>Flow  unidirectional sequence of packets that are logically associated  headers match a specific n-tuple, e.g.</p>
    <p>&lt;src IP, dst IP, src port, dst Port, protocol&gt;  Creation and expiration policy  what conditions</p>
    <p>start and stop a flow TCP SYN, TCP FIN, timeouts</p>
    <p>NetFlow counters  packets, bytes, time</p>
  </div>
  <div class="page">
    <p>Passive Probe Collection</p>
    <p>Workstation A Workstation B</p>
    <p>Flow probe connected</p>
    <p>to switch port in traffic mirror mode</p>
  </div>
  <div class="page">
    <p>% telnet 10.0.0.2</p>
    <p>login:</p>
    <p>Active Flows Flow Source IP Destination IP prot srcPort dstPort</p>
    <p>% ping 10.0.0.2</p>
    <p>ICMP echo reply</p>
    <p>Simple Flow Report</p>
  </div>
  <div class="page">
    <p>Monitoring Overhead</p>
    <p>client &lt;-&gt; monitor &lt;-&gt; server  monitor acting as bridge between client and server  client flooding 28 byte UDP packets to server  Emulab PC850 machines</p>
    <p>850MHz Intel Pentium III processor.  512MB PC133 ECC SDRAM.  Intel EtherExpress Pro 10/100Mbps NIC (10 Mbs)</p>
    <p>CPU overhead of building flow records</p>
  </div>
  <div class="page">
    <p>Fprobe CPU usage (PC850, 10 Mbs)</p>
  </div>
  <div class="page">
    <p>Working with Flows</p>
    <p>Building flow records from packets  Probes</p>
    <p>Software: fprobe  Hardware: switches &amp; routers</p>
    <p>Collecting and aggregating flow records  Collectors (Unix end hosts)</p>
    <p>flow-tools, SiLK, ...</p>
    <p>Analyzing flow records  flow-tools, SiLK, ntop, ...  Traffic mix, DDoS attacks, port scans, ...</p>
  </div>
  <div class="page">
    <p>NetFlow v5 Packet Example</p>
    <p>NetFlow</p>
    <p>v5 header</p>
    <p>v5 record</p>
    <p>IP/UDP packet</p>
    <p>v5 record</p>
    <p>UDP packets</p>
    <p>24 byte header</p>
    <p>48 byte flow record</p>
    <p>1-30 records in 1500 byte frame</p>
  </div>
  <div class="page">
    <p>NetFlow v5 Packet Header</p>
    <p>s t r uc t f t pdu_ v 5 {</p>
    <p>/ * 2 4 by t e he a de r * /</p>
    <p>u_ i nt 1 6 v e r s i on; / * 5 * /</p>
    <p>u_ i nt 1 6 c ount ; / * T he numbe r of r e c or ds i n t he P DU * /</p>
    <p>u_ i nt 3 2 s y s UpT i me ; / * Cur r e nt t i me i n mi l l i s e c s s i nc e r out e r boot e d * /</p>
    <p>u_ i nt 3 2 uni x _ s e c s ; / * Cur r e nt s e c onds s i nc e 0 0 0 0 UT C 1 9 7 0 * /</p>
    <p>u_ i nt 3 2 uni x _ ns e c s ; / * Re s i dua l na nos e c onds s i nc e 0 0 0 0 UT C 1 9 7 0 * /</p>
    <p>u_ i nt 3 2 f l ow_ s e que nc e ; / * S e q c ount e r of t ot a l f l ows s e e n * /</p>
    <p>u_ i nt 8 e ngi ne _ t y pe ; / * T y pe of f l ow s wi t c hi ng e ngi ne ( RP , VI P , e t c . ) * /</p>
    <p>u_ i nt 8 e ngi ne _ i d; / * S l ot numbe r of t he f l ow s wi t c hi ng e ngi ne * /</p>
    <p>u_ i nt 1 6 r e s e r v e d;</p>
  </div>
  <div class="page">
    <p>NetFlow v5 Record: Key Fields / * 4 8 by t e pa y l oa d * /</p>
    <p>s t r uc t f t r e c _ v 5 {</p>
    <p>u_ i nt 3 2 s r c a ddr ; / * S our c e I P Addr e s s * /</p>
    <p>u_ i nt 3 2 ds t a ddr ; / * De s t i na t i on I P Addr e s s * /</p>
    <p>u_ i nt 3 2 ne x t hop; / * Ne x t hop r out e r ' s I P Addr e s s * /</p>
    <p>u_ i nt 3 2 dPk t s ; / * Pa c k e t s s e nt i n Dur a t i on * /</p>
    <p>u_ i nt 3 2 dOc t e t s ; / * Oc t e t s s e nt i n Dur a t i on. * /</p>
    <p>u_ i nt 1 6 s r c por t ; / * T CP / UDP s our c e por t numbe r or e qui v a l e nt * /</p>
    <p>u_ i nt 1 6 ds t por t ; / * T CP / UDP de s t i na t i on por t numbe r or e qui v * /</p>
    <p>u_ i nt 8 t c p_ f l a gs ; / * Cumul a t i v e OR of t c p f l a gs * /</p>
    <p>u_ i nt 8 pr ot ; / * I P pr ot oc ol , e . g. , 6 =T CP , 1 7 =UDP , . . . * /</p>
    <p>u_ i nt 8 t os ; / * I P T y pe - of - S e r v i c e * /</p>
    <p>u_ i nt 1 6 dr ops ;</p>
    <p>} r e c or ds [ F T _ P DU_ V5 _ MAXF L OWS ] ;</p>
    <p>} ;</p>
  </div>
  <div class="page">
    <p>Experiment View by Protocol #</p>
    <p># pr ot oc ol f l ows oc t e t s pa c k e t s dur a t i on</p>
    <p>#</p>
    <p>t c p 9 3 . 8 7 7 9 7 . 1 4 3 9 3 . 3 2 6 9 1 . 5 8 9</p>
    <p>udp 4 . 2 5 7 2 . 4 6 6 5 . 9 3 2 8 . 2 8 6</p>
    <p>i c mp 1 . 3 3 7 0 . 3 6 8 0 . 5 7 6 0 . 1 1 7</p>
    <p>gr e 0 . 0 1 0 0 . 0 0 2 0 . 0 0 6 0 . 0 0 5</p>
    <p>pi m 0 . 0 1 2 0 . 0 0 2 0 . 0 0 4 0 . 0 0 1</p>
    <p>i pv 6 0 . 0 0 4 0 . 0 0 0 0 . 0 0 1 0 . 0 0 0</p>
    <p>i gmp 0 . 0 0 0 0 . 0 0 0 0 . 0 0 0 0 . 0 0 0</p>
    <p>os pf 0 . 0 0 1 0 . 0 0 0 0 . 0 0 0 0 . 0 0 0</p>
    <p>r s v p 0 . 0 0 0 0 . 0 0 0 0 . 0 0 0 0 . 0 0 0</p>
  </div>
  <div class="page">
    <p>Summary View of Experiment Run Total Flows : 24236730</p>
    <p>Total Octets : 71266806610</p>
    <p>Total Packets : 109298006</p>
    <p>Total Time (1/1000 secs) (flows): 289031186084</p>
    <p>Duration of data (realtime) : 86400</p>
    <p>Duration of data (1/1000 secs) : 88352112</p>
    <p>Average flow time (1/1000 secs) : 11925.0000</p>
    <p>Average packet size (octets) : 652.0000</p>
    <p>Average flow size (octets) : 2940.0000</p>
    <p>Average packets per flow : 4.0000</p>
    <p>Average flows / second (flow) : 274.3201</p>
    <p>Average flows / second (real) : 280.5177</p>
    <p>Average Kbits / second (flow) : 6452.9880</p>
    <p>Average Kbits / second (real) : 6598.7781</p>
  </div>
  <div class="page">
    <p>Netflowize tool</p>
    <p>Automatically determines where to place Netflow probes and collectors</p>
    <p>Leverages underlying physical network topology  Relies on persistent resource assignment across</p>
    <p>experiment swaps  Configurable</p>
    <p>Lightweight: Use existing experimental infrastructure  Heavyweight: Deploys monitoring infrastructure</p>
    <p>overlay using additional experimental resources</p>
  </div>
  <div class="page">
    <p>Analyze ns topology description  Modify toplogy description to add overlay nodes, links,</p>
    <p>and NetFlow software probes and collectors  Swap experiment out and back in</p>
    <p>Do this and watch bad things happen</p>
    <p>Nave Approach to Overlay Creation</p>
  </div>
  <div class="page">
    <p>set ns [new Simulator]</p>
    <p>source tb_compat.tcl</p>
    <p># Create nodes</p>
    <p>set client [$ns node]</p>
    <p>set server [$ns node]</p>
    <p>set monitor [$ns node]</p>
    <p># Create lan</p>
    <p>set lan0 [$ns make-lan &quot;$client $server $monitor&quot; 10Mb 10ms]</p>
    <p>$ns run</p>
    <p>Example: 3 node experiment</p>
    <p>Logical view of topology</p>
  </div>
  <div class="page">
    <p>Physical Experiment Topology</p>
    <p>delay_mapping @ tbdelay0</p>
    <p>lan0 client client fxp1 fxp4</p>
    <p>lan0 monitor monitor fxp2 fxp3</p>
    <p>delay_mapping @ tbdelay2</p>
    <p>lan0 server server</p>
    <p>ltp_map</p>
    <p>L client monitor lan0</p>
    <p>L client server lan0L monitor client lan0</p>
    <p>L monitor server lan0</p>
    <p>L server client lan0L server monitor lan0</p>
  </div>
  <div class="page">
    <p>NS Topology Description: Example 1</p>
    <p>$ns duplexlink [ $ns node ] [ $ns node ]\\ 10Mb 0 ms DropTail</p>
    <p>Perfectly valid topology (just bad form)  Emulab will fill in unspecified details</p>
    <p>Create 2 nodes running the default operating system  assign the nodes names (e.g., tbnode-n1, tbnode-n2)  name the connecting link (e.g., tblink-l3)</p>
    <p>Difficult to parse and modify topology</p>
  </div>
  <div class="page">
    <p>NS Topology Description: Example 2</p>
    <p># create nodes for { set i 0 } { $i &lt; 2 } { incr i } {</p>
    <p>set node ( $i ) [ $ns node ] tbsetnodeos $node ( $i ) FBSD410STD</p>
    <p>} # create link set link0 [ $ns duplexlink $node ( 0 ) $node ( 1 )\\</p>
    <p>A more common form, still difficult to parse</p>
  </div>
  <div class="page">
    <p>Solution: Post-instantiation experiment modification</p>
    <p>Get exported physical topology details via XML-RPC  Might be necessary to ssh into nodes for attached link</p>
    <p>details  Construct physical topology graph</p>
    <p>Much easier to parse and modify topology using the minimum number of resources</p>
  </div>
  <div class="page">
    <p>Overlay Construction Lightweight mode:</p>
    <p>Probe Placement</p>
    <p>set cover type algorithm to identify minimum number of probes to deploy</p>
    <p>Collector Placement</p>
    <p>pick a node at random (easy)  use control network for record distribution (ideally</p>
    <p>dedicated measurement network)</p>
  </div>
  <div class="page">
    <p>Overlay Construction Heavyweight mode:</p>
    <p>Probe Placement</p>
    <p>replace each link with LAN + node for probe  attach new dedicated node to lossless LAN</p>
    <p>use existing nodes for lossy LANs</p>
    <p>Collector Placement</p>
    <p>create a new dedicated node  use control network for record distribution</p>
  </div>
  <div class="page">
    <p>Tricks  Lightweight mode favors putting probes on shaper</p>
    <p>(delay) nodes to minimize impact on experimental nodes</p>
    <p>Heavyweight mode takes advantage of Emulabs trace to deploy nodes</p>
    <p>Modifications tagged so they can be automatically stripped from experiment</p>
  </div>
  <div class="page">
    <p>Current Status</p>
    <p>~700 lines of python  Grab tool at</p>
    <p>http://66.92.233.103/netflowize-0.3.tar.bz2</p>
  </div>
  <div class="page">
    <p>Future Work  Instrumented experiment should be checked for duplicates, unnecessary hardware resources, incomplete coverage</p>
    <p>Inadequate handling of infeasible requests</p>
    <p>More control knobs?</p>
    <p>Virtual node handling?</p>
    <p>Integrate more efficient probe</p>
    <p>Extensions beyond NetFlow</p>
    <p>Integration into existing workbenches</p>
    <p>Multi-tenant cloud monitoring?</p>
  </div>
</Presentation>
