<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Upgrading Distributed Systems is not rsync</p>
    <p>Sameer Ajmani</p>
    <p>Barbara Liskov</p>
    <p>Liuba Shrira</p>
    <p>MIT Lab for Computer Science</p>
  </div>
  <div class="page">
    <p>Large, Long-Lived Distributed Systems Need Automatic Upgrades</p>
    <p>e.g., CDNs, peer-to-peer nets, sensor nets</p>
    <p>Software must change over time</p>
    <p>No direct operator access</p>
    <p>Upgrades must propagate automatically</p>
    <p>Upgrades must avoid disrupting service</p>
  </div>
  <div class="page">
    <p>A System Upgrade</p>
    <p>Each node runs at a particular version  New version information propagates to nodes  A node upgrades by shutting down, installing new code,</p>
    <p>transforming its persistent state, and restarting  These systems are robust, so they tolerate node restarts</p>
    <p>Version 1 Version 2</p>
  </div>
  <div class="page">
    <p>Upgrades Can Disrupt Service</p>
    <p>A node cannot service requests while upgrading  May need to delay a node upgrade</p>
    <p>To avoid causing too many simultaneous failures  To test an upgrade on a few nodes</p>
    <p>Implies mixed mode operation</p>
    <p>Version 1 Version 2</p>
  </div>
  <div class="page">
    <p>Mixed Mode Operation</p>
    <p>Version 1Version 2</p>
  </div>
  <div class="page">
    <p>Simulation Enables Interoperation</p>
    <p>Version 2</p>
    <p>Version 1 Node</p>
    <p>Nodes label outgoing calls with their version</p>
    <p>Nodes dispatch incoming calls to simulation objects  Installing a simulation object is much faster than upgrading</p>
    <p>Both upgraded and non-upgraded nodes use simulation</p>
    <p>Imperfect simulation may degrade service</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>Upgrades require scheduling and simulation</p>
    <p>Other issues (covered in the paper)  Transforms for persistent state</p>
    <p>Correctness of transforms and simulation</p>
    <p>An upgrade infrastructure that supports upgrade propagation, scheduling, code installation, transforms, and simulation</p>
  </div>
</Presentation>
