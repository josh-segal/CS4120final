<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Ghada Dessouky, Tommaso Frassetto, Ahmad-Reza Sadeghi Systems Security Lab, Technische Universitt Darmstadt, Germany</p>
    <p>HybCache: Hybrid Side-Channel-Resilient Caches for Trusted Execution Environments</p>
  </div>
  <div class="page">
    <p>Architecture Microarchitecture</p>
    <p>ISA</p>
    <p>caches</p>
    <p>MMU TLBs</p>
    <p>pipeline depth</p>
    <p>registers main memory</p>
    <p>Software</p>
    <p>The myth of the hardware-based trust anchor</p>
    <p>Architecture is Only the Tip of the Iceberg</p>
  </div>
  <div class="page">
    <p>Architecture Microarchitecture</p>
    <p>ISA</p>
    <p>caches</p>
    <p>MMU TLBs</p>
    <p>branch prediction</p>
    <p>pipeline depth</p>
    <p>DRAM</p>
    <p>interconnections</p>
    <p>registers main memory</p>
    <p>execution units</p>
    <p>out-of-order execution</p>
    <p>Software</p>
    <p>Architecture is Only the Tip of the Iceberg</p>
    <p>Hardware Implementation</p>
  </div>
  <div class="page">
    <p>The Performance  Security Trade-Off</p>
    <p>shared caches</p>
    <p>branch prediction</p>
    <p>units</p>
    <p>transient execution</p>
    <p>store-to-load/ load-to-load forwarding</p>
    <p>shared buffers contention</p>
    <p>speculative execution</p>
  </div>
  <div class="page">
    <p>HybCache: The Big Picture  On-demand &amp; configurable cache-based side-channel resilience  tunable</p>
    <p>performance/security trade-off knob</p>
    <p>Hybrid set-associative cache:  Non-critical workload: behaves typically and utilizes full cache capacity  Security-critical workload: utilizes only a cache subset fully-associatively with random</p>
    <p>eviction</p>
    <p>H yb</p>
    <p>C ac</p>
    <p>he</p>
    <p>Security-critical workload</p>
    <p>Orthogonal subcache</p>
    <p>Security-critical workload</p>
    <p>Non-critical workload</p>
    <p>incur performance costs for side-channel resilience only when the additional security</p>
    <p>guarantees are required</p>
  </div>
  <div class="page">
    <p>How are Shared Caches Accessed?</p>
    <p>S sets</p>
    <p>W w</p>
    <p>ay s</p>
    <p>log2S bits  set indexAddress log2B bits  block offsetremaining bits  tag</p>
    <p>tag match found</p>
    <p>access the required byte block from the cache line using block offset bits</p>
    <p>B-byte cache line</p>
  </div>
  <div class="page">
    <p>How are Shared Caches Exploited? Because of the inherent principles of caches operation and their performance advantage</p>
    <p>CPU (+cache) speed &gt; DRAM access latency</p>
    <p>- Cache miss: request data from DRAM upon first access  much slower - Cache hit: No DRAM access required for subsequent accesses  much faster</p>
    <p>inherent timing channel</p>
  </div>
  <div class="page">
    <p>Our Insights &amp; Requirements for HybCache</p>
    <p>Strong side-channel resilience guarantees between security-critical and non-critical execution</p>
    <p>Side-channel resilience and dynamic utilization among mutually distrusting critical workloads</p>
    <p>Selective/configurable cache side-channel-resilience Usability and backwards compatibility</p>
    <p>Majority of the execution workload is not security-critical Security-critical code is already isolated, e.g., in a TEE Root causes for conflict/contention &amp; access-based cache attacks are set-associative eviction &amp; shared cache lines</p>
    <p>Only approach to complete non-interference is strict cache partitioning  impractical</p>
    <p>Insights</p>
    <p>Requirements</p>
  </div>
  <div class="page">
    <p>System Assumptions  Security-critical code (requiring side-channel-resilient cache</p>
    <p>utilization) is in an isolated component or domain (I-Domains), e.g., a process or a TEE (enclave).</p>
    <p>Mutually distrusting code is allocated to different I-Domains.</p>
    <p>Isolated execution (in I-Domains) is the minority of the execution workload. Rest of the workload is non-isolated (NI-Domain).</p>
    <p>The attacker is not in the same I-Domain as the victim.</p>
  </div>
  <div class="page">
    <p>High-Level Architecture Core 0</p>
    <p>L1 Instr CacheL1 Data Cache</p>
    <p>L2 Unified Cache</p>
    <p>Core N L1 Instr CacheL1 Data Cache</p>
    <p>L2 Unified Cache</p>
    <p>L3 Shared Cache</p>
  </div>
  <div class="page">
    <p>High-Level Architecture Core 0</p>
    <p>L1 Instr CacheL1 Data Cache</p>
    <p>L2 Unified Cache</p>
    <p>Core N L1 Instr CacheL1 Data Cache</p>
    <p>L2 Unified Cache</p>
    <p>L3 Shared Cache</p>
    <p>Orthogonal subcache of fully-associative cache ways</p>
    <p>non-isolated cache access request from NI-Domain</p>
    <p>full cache capacity including subcache ways</p>
  </div>
  <div class="page">
    <p>High-Level Architecture Core 0</p>
    <p>L1 Instr CacheL1 Data Cache</p>
    <p>L2 Unified Cache</p>
    <p>Core N L1 Instr CacheL1 Data Cache</p>
    <p>L2 Unified Cache</p>
    <p>L3 Shared Cache</p>
    <p>Orthogonal subcache of fully-associative cache ways</p>
    <p>isolated cache access request (from any IDomain):</p>
    <p>restricted to only use subcache ways</p>
  </div>
  <div class="page">
    <p>yes</p>
    <p>Controller Flow isolated or</p>
    <p>nonisolated mode?</p>
    <p>incoming cache request</p>
    <p>Query cache setassociatively using set index and tag bits to locate the way</p>
    <p>way with matching</p>
    <p>tag found?</p>
    <p>Evict and replace (via LRU/pseudoLRU policy) cache line (including these occupying subcache ways)</p>
    <p>Query the subcache ways fully-associatively using extended tag bits</p>
    <p>way with matching</p>
    <p>tag found?</p>
    <p>non-isolated (ID=0) isolated (ID!=0)</p>
    <p>yes</p>
    <p>no</p>
    <p>noyes</p>
    <p>no</p>
    <p>cache miss</p>
    <p>cache miss</p>
    <p>cache miss</p>
    <p>cache miss</p>
    <p>nocache hit</p>
    <p>cache hit</p>
    <p>cache miss for nonisolated request</p>
    <p>cache miss for isolated</p>
    <p>request</p>
    <p>yesline ID nonisolated (0) if the way is in subcache?</p>
    <p>Randomly evict and replace any of the cache lines occupying the subcache ways (irrespective of their line-IDID)</p>
    <p>way occupied</p>
    <p>with line of matching ID?</p>
  </div>
  <div class="page">
    <p>Tag-Store Extensions</p>
    <p>Tag Store Cache Line Store</p>
    <p>line-IDID</p>
    <p>set 0</p>
    <p>set 1</p>
    <p>cache ways</p>
    <p>su bc</p>
    <p>ac he</p>
    <p>w ay</p>
    <p>s extended tag bits</p>
    <p>line-IDID extended tag bits</p>
    <p>subcache ways</p>
    <p>subcache ways</p>
    <p>request isolation domain ID (req-IDID)</p>
    <p>memory address (32/39/46-bit)</p>
    <p>tag (26/33/40-bit) offset Incoming cache access request</p>
  </div>
  <div class="page">
    <p>Tag-Store Extensions</p>
    <p>Tag Store Cache Line Store</p>
    <p>line-IDID</p>
    <p>set 0</p>
    <p>set 1</p>
    <p>cache ways</p>
    <p>su bc</p>
    <p>ac he</p>
    <p>w ay</p>
    <p>s extended tag bits</p>
    <p>line-IDID extended tag bits</p>
    <p>subcache ways</p>
    <p>subcache ways</p>
    <p>request isolation domain ID (req-IDID)</p>
    <p>memory address (32/39/46-bit)</p>
    <p>tag (26/33/40-bit) offset Incoming cache access request</p>
    <p>Hardware design decisions/trade-off:</p>
    <p>- Size of subcache - Maximum number of concurrent isolation</p>
    <p>domains that can be supported</p>
  </div>
  <div class="page">
    <p>Security Analysis</p>
    <p>Shared cache lines are disallowed between different domains by design: cannot flush/hit on cache lines of another domain</p>
    <p>Disabling the set-associative eviction of the subcache and random replacement  no reproducible and consistent mapping of a given memory access to a cache entry</p>
    <p>Direct access to cache lines of</p>
    <p>another I-Domain not possible</p>
    <p>Pre-computing and constructing an eviction set not</p>
    <p>possible</p>
    <p>Cache hits not observable by another domain  Attacker can still infer size of victims working</p>
    <p>set by observing its own line evictions  cache occupancy channel remains by design</p>
    <p>Observing cache hits and misses of</p>
    <p>another I-Domain</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
  </div>
  <div class="page">
    <p>Performance: Two Processes</p>
    <p>Core</p>
    <p>Process A Process B</p>
    <p>L1 Cache  64 KB 8-way associative</p>
    <p>L2 Cache  256 KB 8-way associative</p>
    <p>L3 Cache  4 MB 16-way associative</p>
    <p>Mix SPEC Benchmark</p>
    <p>pov+mcf povray, mcf</p>
    <p>lib+sje libquantum, sjeng</p>
    <p>gob+mcf gobmk, mcf</p>
    <p>ast+pov astar, povray</p>
    <p>h26+gob h264ref, gobmk</p>
    <p>bzi+sje bzip2, sjeng</p>
    <p>h26+per h264ref, perlbench</p>
    <p>cal+gob calculix, gobmk</p>
  </div>
  <div class="page">
    <p>Performance Overhead of Isolated Processes</p>
  </div>
  <div class="page">
    <p>Overhead of Non-Isolated Processes</p>
  </div>
  <div class="page">
    <p>Performance: Four Processes</p>
    <p>Core 0</p>
    <p>Process A Process B</p>
    <p>L1 Cache  64 KB 8-way associative</p>
    <p>L2 Cache  256 KB 8-way associative</p>
    <p>L3 Cache  4 MB 16-way associative</p>
    <p>Core 1</p>
    <p>Process C Process D</p>
    <p>L1 Cache  64 KB 8-way associative</p>
    <p>L2 Cache  256 KB 8-way associative</p>
  </div>
  <div class="page">
    <p>Performance Overhead of Isolated Processes</p>
  </div>
  <div class="page">
    <p>Deployment and Future Work  Generic concept of soft partitioning:</p>
    <p>which structures and caches to apply it to and the subcache size is a hardware design decision/trade-off</p>
    <p>CAM tag-store lookups are expensive (power consumption and timing/routing)</p>
    <p>emerging memory technologies such as DRAM-based and STT-MRAM caches to alleviate the overheads</p>
    <p>Ongoing work: improved design to achieve the same full-associativity (+ stronger isolation) without expensive lookups</p>
  </div>
  <div class="page">
    <p>Thank you!</p>
    <p>Ghada Dessouky ghada.dessouky@trust.tu-darmstadt.de</p>
  </div>
</Presentation>
