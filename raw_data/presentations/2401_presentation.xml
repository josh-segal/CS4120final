<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Scaling Security for Big, Parallel File Systems</p>
    <p>Andrew Leung and Ethan Miller University of California, Santa Cruz</p>
    <p>{aleung, elm}@cs.ucsc.edu FAST 2007 Work-in-Progress</p>
  </div>
  <div class="page">
    <p>Motivation  Large systems hard to secure</p>
    <p>Upwards of hundreds of thousands of nodes  Peta- to exabytes of data, gigabyte size files  Files striped across thousands of devices</p>
    <p>HPC workloads are demanding  Highly Parallel  Bursty, flash crowds, short inter-arrival times  Large, long lasting I/O</p>
    <p>How do we scale security for such a file system?  Maat - security for big, parallel file systems</p>
  </div>
  <div class="page">
    <p>Extended Capabilities</p>
    <p>Reduces capability generation  Authorize I/O for any number of users and files  Secured w/ asymmetric cryptography  Enforces confinement w/ Merkle hash trees</p>
    <p>open()open()open()</p>
    <p>Extended Capability</p>
    <p>Cap Cap Cap</p>
    <p>Users root hash Files root hash</p>
    <p>Mode T_start, T_end</p>
    <p>Signature</p>
    <p>Authorize I/O for multiple users &amp; !les</p>
    <p>Verify Sign</p>
    <p>Cache Cap</p>
    <p>Perform I/O</p>
    <p>MDS</p>
    <p>OSD</p>
    <p>Client</p>
  </div>
  <div class="page">
    <p>Automatic Revocation</p>
    <p>Revocation is scalable  Capabilities have short lifetimes  expiration = revocation  Shift problem from revocation to renewal</p>
    <p>MDS</p>
    <p>Client</p>
    <p>OSD</p>
    <p>T1 C1C2 C3</p>
    <p>T2 C2 C1 C3 !&quot;#&quot;$%&amp;%'%()*(+#%,(*&quot;'*-.</p>
    <p>C4</p>
    <p>C4</p>
    <p>/(0(1&quot;&amp; /(23()'</p>
    <p>!45*!6 7+'(0)%809:;5</p>
    <p>C1 C4 C6</p>
    <p>C5 CnC1 T2, T3</p>
  </div>
  <div class="page">
    <p>Scalable, Secure Delegation</p>
    <p>Secure group computation  Open a file on behalf of many  Delegate key pair rather than capability alone  POSIX I/O extension: openg() and openfh()</p>
    <p>Comp Prv Key</p>
    <p>Comp Pub Key</p>
    <p>openg()</p>
    <p>Comp Pub Key</p>
    <p>Client creates Pub/Prv compute keys</p>
    <p>Client</p>
    <p>MDS</p>
    <p>OSD</p>
    <p>File Handle</p>
    <p>Path, Mode Capability T_s, T_e Signature</p>
    <p>Cap names comp pub key</p>
    <p>File Handle, Prv Key</p>
    <p>I/O I/O I/O</p>
  </div>
  <div class="page">
    <p>Status  Initial design discussion in an earlier paper</p>
    <p>Being implemented in Ceph petascale, parallel file system</p>
    <p>Future work:  Scalable on-disk security  Explore untrusted remote storage</p>
    <p>Questions?</p>
  </div>
</Presentation>
