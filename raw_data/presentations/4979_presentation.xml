<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>High Performance User-Level Sockets over</p>
    <p>Gigabit Ethernet</p>
    <p>Pavan Balaji Ohio State University</p>
    <p>balaji@cis.ohio-state.edu</p>
    <p>Piyush Shivam Ohio State University</p>
    <p>shivam@cis.ohio-state.edu</p>
    <p>D.K. Panda Ohio State University</p>
    <p>panda@cis.ohio-state.edu</p>
    <p>Pete Wyckoff Ohio Supercomputer Center</p>
    <p>pw@osc.edu</p>
  </div>
  <div class="page">
    <p>Presentation Overview</p>
    <p>Background and Motivation</p>
    <p>Design Challenges</p>
    <p>Performance Enhancement Techniques</p>
    <p>Performance Results</p>
    <p>Conclusions</p>
  </div>
  <div class="page">
    <p>Background and Motivation</p>
    <p>Sockets Frequently used API Traditional Kernel-Based Implementation</p>
    <p>Unable to exploit High Performance Networks Earlier Solutions</p>
    <p>Interrupt Coalescing  Checksum Offload  Insufficient</p>
    <p>It gets worse with 10 Gigabit Networks Can we do better</p>
    <p>User-level support</p>
  </div>
  <div class="page">
    <p>Kernel Based Implementation of Sockets</p>
    <p>NIC</p>
    <p>IP</p>
    <p>TCP</p>
    <p>Sockets</p>
    <p>Application or Library</p>
    <p>Hardware</p>
    <p>Kernel</p>
    <p>User Space  Pros</p>
    <p>High Compatibility</p>
    <p>Cons</p>
    <p>Kernel Context Switches</p>
    <p>Multiple Copies</p>
    <p>CPU Resources</p>
  </div>
  <div class="page">
    <p>Alternative Implementations of Sockets (GigaNet cLAN)</p>
    <p>VI aware NIC</p>
    <p>IP</p>
    <p>TCP</p>
    <p>Sockets</p>
    <p>Application or Library</p>
    <p>Hardware</p>
    <p>Kernel</p>
    <p>User Space  Pros</p>
    <p>High Compatibility</p>
    <p>Cons</p>
    <p>Kernel Context Switches</p>
    <p>Multiple Copies</p>
    <p>CPU Resources</p>
    <p>IP-to-VI layer</p>
  </div>
  <div class="page">
    <p>Sockets over User-Level Protocols</p>
    <p>Sockets is a generalized protocol  Sockets over VIA</p>
    <p>Developed by Intel Corporation [shah98] and ET Research Institute [sovia01]</p>
    <p>GigaNet cLAN platform</p>
    <p>Most networks in the world are Ethernet  Gigabit Ethernet</p>
    <p>Backward compatible  Gigabit Network over the existing installation base  MVIA: Version of VIA on Gigabit Ethernet</p>
    <p>Kernel Based  A need for a High Performance Sockets layer over</p>
    <p>Gigabit Ethernet</p>
  </div>
  <div class="page">
    <p>User-Level Protocol over Gigabit Ethernet</p>
    <p>Ethernet Message Passing (EMP) Protocol  Zero-Copy OS-Bypass NIC-driven User-Level</p>
    <p>protocol over Gigabit Ethernet  Developed over the Dual-processor Alteon NICs  Complete Offload of message passing functionality to</p>
    <p>the NIC</p>
    <p>Piyush Shivam, Pete Wyckoff, D.K. Panda, EMP: Zero-Copy OS-bypass NIC-driven Gigabit Ethernet Message Passing, Supercomputing, November 01</p>
    <p>Piyush Shivam, Pete Wyckoff, D.K. Panda, Can User-Level Protocols take advantage of Multi-CPU NICs?, IPDPS, April 02</p>
  </div>
  <div class="page">
    <p>EMP: Latency</p>
    <p>A base latency of 28s compared to an ~120 s of TCP for 4-byte messages</p>
  </div>
  <div class="page">
    <p>EMP: Bandwidth</p>
    <p>Saturated the Gigabit Ethernet network with a peak bandwidth of 964Mbps</p>
  </div>
  <div class="page">
    <p>Proposed Solution</p>
    <p>Gigabit Ethernet NIC</p>
    <p>Sockets over EMP</p>
    <p>Application or Library</p>
    <p>Hardware</p>
    <p>Kernel</p>
    <p>User Space</p>
    <p>Kernel Context Switches</p>
    <p>Multiple Copies</p>
    <p>CPU Resources</p>
    <p>High Performance</p>
    <p>OS Agent</p>
    <p>EMP Library</p>
  </div>
  <div class="page">
    <p>Presentation Overview</p>
    <p>Background and Motivation</p>
    <p>Design Challenges</p>
    <p>Performance Enhancement Techniques</p>
    <p>Performance Results</p>
    <p>Conclusions</p>
  </div>
  <div class="page">
    <p>Design Challenges</p>
    <p>Functionality Mismatches</p>
    <p>Connection Management</p>
    <p>Message Passing</p>
    <p>Resource Management</p>
    <p>UNIX Sockets</p>
  </div>
  <div class="page">
    <p>Functionality Mismatches and Connection Management</p>
    <p>Functionality Mismatches</p>
    <p>No API for buffer advertising in TCP</p>
    <p>Connection Management</p>
    <p>Data Message Exchange</p>
    <p>Descriptors required for connection</p>
    <p>management</p>
  </div>
  <div class="page">
    <p>Message Passing</p>
    <p>Message Passing Data Streaming</p>
    <p>Parts of the same message can be read potentially to different buffers</p>
    <p>Unexpected Message Arrivals Separate Communication Thread</p>
    <p>Keeps track of used descriptors and re-posts  Polling Threads have high Synchronization cost  Sleeping Threads involve OS scheduling granularity</p>
    <p>Rendezvous Approach Eager with Flow Control</p>
  </div>
  <div class="page">
    <p>Rendezvous Approach</p>
    <p>Sender Receiver</p>
    <p>S Q</p>
    <p>R Q</p>
    <p>S Q</p>
    <p>R Q</p>
    <p>send()</p>
    <p>receive()</p>
    <p>Request</p>
    <p>ACK</p>
    <p>Data</p>
  </div>
  <div class="page">
    <p>Eager with Flow Control</p>
    <p>Sender Receiver</p>
    <p>S Q</p>
    <p>R Q</p>
    <p>S Q</p>
    <p>R Q</p>
    <p>send()</p>
    <p>Data</p>
    <p>ACK</p>
    <p>Data</p>
    <p>receive()</p>
  </div>
  <div class="page">
    <p>Resource Management and UNIX Sockets</p>
    <p>Resource Management Clean up unused descriptors (connection</p>
    <p>management) Free registered memory</p>
    <p>UNIX Sockets Function Overriding Application Changes File Descriptor Tracking</p>
  </div>
  <div class="page">
    <p>Presentation Overview</p>
    <p>Background and Motivation</p>
    <p>Design Challenges</p>
    <p>Performance Enhancement Techniques</p>
    <p>Performance Results</p>
    <p>Conclusions</p>
  </div>
  <div class="page">
    <p>Performance Enhancement Techniques</p>
    <p>Credit Based Flow Control</p>
    <p>Disabling Data Streaming</p>
    <p>Delayed Acknowledgments</p>
    <p>EMP Unexpected Queue</p>
  </div>
  <div class="page">
    <p>Credit Based Flow Control</p>
    <p>Sender Receiver</p>
    <p>S Q</p>
    <p>R Q</p>
    <p>S Q</p>
    <p>R Q</p>
    <p>Credits Left: 4Credits Left: 3Credits Left: 2Credits Left: 1Credits Left: 0Credits Left: 4</p>
    <p>Multiple Outstanding Credits</p>
  </div>
  <div class="page">
    <p>Non-Data Streaming and Delayed Acknowledgments</p>
    <p>Disabling Data Streaming  Intermediate copy required for Data Streaming  Place data directly into user buffer</p>
    <p>Delayed Acknowledgments  Increase in Bandwidth</p>
    <p>Lesser Network Traffic  NIC has lesser work to do</p>
    <p>Decrease in Latency  Lesser descriptors posted  Lesser Tag Matching at the NIC</p>
    <p>550ns per descriptor</p>
  </div>
  <div class="page">
    <p>EMP Unexpected Queue</p>
    <p>EMP Unexpected Queue EMP features unexpected message queue</p>
    <p>Advantages: Last to be checked Disadvantage: Data Copy</p>
    <p>Acknowledgments in the Unexpected Queue</p>
    <p>No copy, since acknowledgments carry no data Acknowledgments pushed out of the critical</p>
    <p>path</p>
  </div>
  <div class="page">
    <p>Presentation Overview</p>
    <p>Background and Motivation</p>
    <p>Design Challenges</p>
    <p>Performance Enhancement Techniques</p>
    <p>Performance Results</p>
    <p>Conclusions</p>
  </div>
  <div class="page">
    <p>Performance Results</p>
    <p>Micro-benchmarks Latency (ping-pong) Bandwidth</p>
    <p>FTP Application  Web Server</p>
    <p>HTTP/1.0 Specifications HTTP/1.1 Specifications</p>
  </div>
  <div class="page">
    <p>Experimental Test-bed</p>
    <p>Four Pentium III 700Mhz Quads</p>
    <p>1GB Main Memory</p>
    <p>Alteon NICs</p>
    <p>Packet Engine Switch</p>
    <p>Linux version 2.4.18</p>
  </div>
  <div class="page">
    <p>Micro-benchmarks: Latency</p>
    <p>Up to 4 times improvement compared to TCP</p>
    <p>Overhead of 0.5us compared to EMP</p>
  </div>
  <div class="page">
    <p>Micro-benchmarks: Bandwidth</p>
    <p>An improvement of 53% compared to enhanced TCP</p>
  </div>
  <div class="page">
    <p>FTP Application</p>
    <p>Up to 2 times improvement compared to TCP</p>
  </div>
  <div class="page">
    <p>Web Server (HTTP/1.0)</p>
    <p>Up to 6 times improvement compared to TCP</p>
  </div>
  <div class="page">
    <p>Web Server (HTTP/1.1)</p>
    <p>Up to 3 times improvement compared to TCP</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>Developed a High Performance User-Level Sockets implementation over Gigabit Ethernet</p>
    <p>Latency close to base EMP (28 s)  28.5 s for Non-Data Streaming  37 s for Data Streaming sockets  4 times improvement in latency compared to TCP</p>
    <p>Peak Bandwidth of 840Mbps  550Mbps obtained by TCP with increased Registered space</p>
    <p>for the kernel (up to 2MB)  Default case is 340Mbps with 32KB  Improvement of 53%</p>
  </div>
  <div class="page">
    <p>Conclusions (contd.)</p>
    <p>FTP Application shows an improvement of nearly 2 times</p>
    <p>Web Server shows tremendous performance improvement  HTTP/1.0 shows an improvement of up to 6 times  HTTP/1.1 shows an improvement of up to 3 times</p>
  </div>
  <div class="page">
    <p>Future Work  Dynamic Credit Allocation</p>
    <p>NIC: The trusted component</p>
    <p>Integrated QoS  Currently on Myrinet Clusters</p>
    <p>Commercial applications in the Data Center environment</p>
    <p>Extend the idea to next generation interconnects  InfiniBand  10 Gigabit Ethernet</p>
  </div>
  <div class="page">
    <p>For more information, please visit the</p>
    <p>http://nowlab.cis.ohio-state.edu</p>
    <p>Network Based Computing Laboratory,</p>
    <p>The Ohio State University</p>
    <p>Thank You</p>
    <p>NBC Home Page</p>
  </div>
</Presentation>
