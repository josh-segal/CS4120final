<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Lessons Learned in Game Development for Crowdsourced</p>
    <p>Software Formal Verification</p>
    <p>Presented by Drew Dean</p>
    <p>Contact Author: Sean Guarino</p>
    <p>http://www.verigames.com</p>
    <p>This research was developed with funding from the Defense Advanced Research Projects Agency (DARPA). The views, opinions, and/or findings contained in this article are those of the authors and should not be interpreted as representing the official views or policies of the Department of Defense or the U.S. Government.</p>
  </div>
  <div class="page">
    <p>Authors Dr. Drew Dean, Dr. John Murray SRI International</p>
    <p>Mr. Sean Guarino, Mr. Leonard Eusebi Human Effectiveness, Charles River Analytics Inc.</p>
    <p>Mr. Andrew Keplinger Left Brain Games</p>
    <p>Dr. Tim Pavlik Center for Game Science, University of Washington</p>
    <p>Dr. Ronald Watro Raytheon BBN</p>
    <p>Mr. Aaron Cammarata voidAlpha</p>
    <p>Ms. Kelly McLaughlin XPD Analytics</p>
    <p>Dr. John Cheng, Mr. Thomas Maddern Veracient LLC</p>
    <p>Distribution Statement A: Approved for Public Release, Distribution Unlimited</p>
  </div>
  <div class="page">
    <p>Overview</p>
    <p>Problem Overview  Case Studies  CircuitBot/Dynamakr  Flow Jam/Paradox  Ghost Map/Ghost Map: Hyperspace  Stormbound/Monster Proof  Xylem/Binary Fission</p>
    <p>Conclusions and Lessons Learned</p>
    <p>Distribution Statement A: Approved for Public Release, Distribution Unlimited</p>
  </div>
  <div class="page">
    <p>Problem Overview</p>
    <p>Typical software has 1-5 bugs per thousand lines of code</p>
    <p>Formal verification can reduce this to 0.1  0.5 bugs per thousand lines of code</p>
    <p>However, formal verification is too expensive and time consuming  Typically 2x  100x cost increase  Optimists will point to the times costs have</p>
    <p>decreased</p>
    <p>Distribution Statement A: Approved for Public Release, Distribution Unlimited</p>
  </div>
  <div class="page">
    <p>Making Formal Verification Affordable</p>
    <p>How do we typically decrease costs?  Automation</p>
    <p>Alas, Rices Theorem limits automation  All non-trivial properties of programs are</p>
    <p>undecidable in general</p>
    <p>Much empirical support in practice  See Kathleen Fishers talk on Thursday for</p>
    <p>progress in automation</p>
  </div>
  <div class="page">
    <p>Making Formal Verification Affordable</p>
    <p>Can we replace the expensive, highly trained computer scientists with the crowd?  Only if we make the tools far more</p>
    <p>approachable</p>
    <p>Convert logic puzzles into games  Market</p>
  </div>
  <div class="page">
    <p>Case Study: CircuitBot/Dynamaker Developing Points-to Graph</p>
    <p>Some types of automated verification require a points-to graph (i.e., graph of which pointers may hold which addresses at runtime)</p>
    <p>Determining reasonable approximations of the points-to graphs requires a high degree of graph intelligence (human or, perhaps, machine).</p>
    <p>Our auto-solver can run without human intervention. It is a research question whether it will compete with human experts in performance.</p>
    <p>(Mech Turk image exposes data structure without game elements)</p>
    <p>Team Authors: Andrew Keplinger &amp; Greg Izzo, Left Brain Games Matthew Barry, Kestrel Technology J. Nelson Rushton, Texas Tech University</p>
    <p>Distribution Statement A: Approved for Public Release, Distribution Unlimited</p>
  </div>
  <div class="page">
    <p>CircuitBot and Lessons Learned</p>
    <p>CircuitBot was developed to provide a framework for building the points-to graph</p>
    <p>Core game is designed to apply rules combined with existing information to produce relevant data</p>
    <p>Overarching exploration and strategy game provides motivation to replay core game</p>
    <p>Combination was effective at motivating certain types of players</p>
    <p>Rule development refinement could produce improved results</p>
    <p>Players could address much larger sets of rules if trivial content was filtered Distribution Statement A: Approved for</p>
    <p>Public Release, Distribution Unlimited</p>
  </div>
  <div class="page">
    <p>Dynamakr</p>
    <p>Play multiple game instances simultaneously, illustrating how game results influence each other</p>
    <p>Find related games dynamically and determine play priorities for efficiency</p>
    <p>Auto-solver analyzers are embedded in the game, working alongside the player</p>
    <p>Distribution Statement A: Approved for Public Release, Distribution Unlimited</p>
  </div>
  <div class="page">
    <p>Case Study: Flow Jam/Paradox Overview</p>
    <p>Input is a set of constraints over possible annotations  Game level generated from constraints (links) and</p>
    <p>possible annotations (widgets) from code  Widgets and links can be wide or narrow, links are the</p>
    <p>width of the widget they flow from  Constraints include:</p>
    <p>Jams on links  Bonuses on widgets</p>
    <p>Player assigns values to annotations to satisfy as many constraints as possible</p>
    <p>Output is desired annotation values</p>
    <p>Team Authors: Tim Pavlik, Craig Conner, Jonathan Burke, Matthew Burns, &amp; Michael Ernst, University of Washington Werner Dietl, University of Waterloo Seth Cooper, Northeastern University Distribution Statement A: Approved for</p>
    <p>Public Release, Distribution Unlimited</p>
  </div>
  <div class="page">
    <p>Flow Jam: Lessons Learned</p>
    <p>For larger levels, toggling widgets individually was tedious</p>
    <p>Level layouts were difficult to understand</p>
    <p>Did not leverage human spatial reasoning</p>
    <p>Distribution Statement A: Approved for Public Release, Distribution Unlimited</p>
  </div>
  <div class="page">
    <p>Paradox: Refined User Support</p>
    <p>Simplified graphical representation and improved graph layouts</p>
    <p>Allowed players to use auto-solve toolset for more rapid play</p>
    <p>Provided spatial painting mechanics to drive application of auto-solver</p>
    <p>Distribution Statement A: Approved for Public Release, Distribution Unlimited</p>
  </div>
  <div class="page">
    <p>Case Study: Ghost Map</p>
    <p>Model checker finds counterexample traces  Violations of security property, encoded as FSA</p>
    <p>User selects region on trace to send to SMT  Success means region unsatisfiable</p>
    <p>Trace unrealizable; ergo false positive  Modified graph sent back to model checker</p>
    <p>Either done, or new trace</p>
    <p>Team Authors: Ronald Watro, Kerry Moffit, John Ostwald, Dan Wyschogrod, Andrei Lapets &amp; Linsey Kennard, Raytheon BBN Eric Church, BreakAway Games</p>
    <p>SMT solver</p>
    <p>C code, FSA files</p>
    <p>Model Checker</p>
    <p>Region Selection</p>
    <p>Levels (CFGs), Tasks (traces) Victory!</p>
    <p>Distribution Statement A: Approved for Public Release, Distribution Unlimited</p>
  </div>
  <div class="page">
    <p>Proof by Games  Ghost Map</p>
    <p>Player  AI on verge of consciousness</p>
    <p>CFG  Map of players own mind</p>
    <p>FSA  Mind Lock preventing</p>
    <p>consciousness  Player Goal</p>
    <p>Modify own mind to thwart Lock  Challenges</p>
    <p>Mind Locks difficult for players to understand  FSAs do not sufficiently guide player actions</p>
    <p>Distribution Statement A: Approved for Public Release, Distribution Unlimited</p>
  </div>
  <div class="page">
    <p>Proof by Games  Ghost Map: Hyperspace</p>
    <p>New Approach  Do not show FSA  Instead show program variables  Add pure entertainment element</p>
    <p>to enhance engagement  Player</p>
    <p>Space mercenary  CFG</p>
    <p>Map of Hyperspace  Program Variables</p>
    <p>Energy Signatures  Variable Dependencies</p>
    <p>Energy Chains  Player Goal</p>
    <p>Seal Hyperspace Rifts to prevent alien invasion  Challenges</p>
    <p>Balance pure entertainment action game with the real math game  Program enough information about variable usage  but not too much</p>
    <p>Distribution Statement A: Approved for Public Release, Distribution Unlimited</p>
  </div>
  <div class="page">
    <p>Case Study: StormBound and Monster Proof Verification Approach</p>
    <p>Verifying memory safety (e.g. no buffer overruns) of C programs</p>
    <p>Through gameplay, players create assertions about code at particular program points</p>
    <p>Game-generated assertions assembled into a proof  StormBound: Players view multiple snapshots of</p>
    <p>program variables at single program point and look for common patterns, e.g. i &lt; sizeof(ary)</p>
    <p>Monster Proof: Players build proofs directly using well-defined rules, trying to prove a precondition that must be true if a function is memory safe</p>
    <p>Team Authors: Aaron Cammarata, VoidAlpha Aaron Tomb, Galois Inc.</p>
    <p>Distribution Statement A: Approved for Public Release, Distribution Unlimited</p>
  </div>
  <div class="page">
    <p>Comparing StormBound and Monster Proof</p>
    <p>StormBound Monster Proof</p>
    <p>Story-driven engagement  Levels solved by pattern matching  Magepunk universe, blend of brass/steam</p>
    <p>and glowing magical runes  Goal of hiding the math: allow players to</p>
    <p>make assertions without any math or numbers in-game</p>
    <p>Targeted a broader, casual audience  Used Unity Webplayer, embedded in a</p>
    <p>MeteorJS web page</p>
    <p>Resource-gathering and collection  Levels solved by reasoning  Cute cartoon monsters, emphasis on tongue</p>
    <p>in-cheek humor  Goal of showing the math: give players</p>
    <p>tons of context, and focus on efficiency and comprehension</p>
    <p>Targets a focused puzzle-game audience  Used Famo.us for HTML/CSS Sprites, and</p>
    <p>MeteorJS for web page / server</p>
    <p>Distribution Statement A: Approved for Public Release, Distribution Unlimited</p>
  </div>
  <div class="page">
    <p>Lessons Learned  Challenging to give players a sense of progress and completion</p>
    <p>Solutions to levels are unknown a priori  StormBound: players supplied (and rewarded for) as many level</p>
    <p>solutions as they liked without clear completion point  Monster Proof: clear when a solution is correct, with optional</p>
    <p>opportunity to improve on it  Players need sufficient context to ensure solutions useful for</p>
    <p>verification  StormBound: players could (and mostly did) inadvertently create true</p>
    <p>but useless assertions that relate variables with no semantic relationship</p>
    <p>Monster Proof: reduced complexity of levels as much as possible, then gave players all needed context needed to reason about the level</p>
    <p>Exposing the underlying problem helps motivate players (citizen scientist message)  StormBound: we hid the math, but players asked to see it  Monster Proof: messaging clear about how game play impacts</p>
    <p>verification</p>
    <p>Distribution Statement A: Approved for Public Release, Distribution Unlimited</p>
  </div>
  <div class="page">
    <p>Case Study: Xylem/Binary Fission Overview</p>
    <p>Xylem presents problem as logical induction puzzle game  Players are botanists exploring a strange island  They observe and compare growth patterns of plants  Provide candidate invariants for the CSFV verification task</p>
    <p>in the process  Binary Fission focuses on sorting colored atoms into</p>
    <p>two groups  Select from set of filters to perform sorting  Refine and merge invariant searches that have been</p>
    <p>performed by other games/automated systems</p>
    <p>Team Authors: John Murray, SRI International Heather Logas &amp; Jim Whitehead, University of California, Santa Cruz</p>
    <p>Distribution Statement A: Approved for Public Release, Distribution Unlimited</p>
  </div>
  <div class="page">
    <p>Xylem: Lessons Learned</p>
    <p>Original goal focused on appealing to casual game audience by integrating puzzle-solving with evolving game narrative</p>
    <p>Casual gamers were not interested in mathematical gameplay</p>
    <p>Xylem complexity and lack of clarity led to limited players in casual gaming community</p>
    <p>Distribution Statement A: Approved for Public Release, Distribution Unlimited</p>
  </div>
  <div class="page">
    <p>Binary Fission: Adapted to Support Citizen Science</p>
    <p>Binary Fission embraced citizen science approach by designing problems focused on a more mathematically inclined crowd</p>
    <p>Binary Fission also incorporated more cooperative game play, to foster community interaction in support of citizen science objectives</p>
    <p>Distribution Statement A: Approved for Public Release, Distribution Unlimited</p>
  </div>
  <div class="page">
    <p>Conclusions/Lessons Learned</p>
    <p>Know the player population  Initial focus on engaging crowds with limited mathematical</p>
    <p>background  but these are not the high contributors  Problem better served by citizen scientists with mathematical</p>
    <p>expertise  later games were designed to this objective  Manage the complexity of the game design</p>
    <p>Use a progression of tools that teaches key concepts for contribution</p>
    <p>Entertain players as new concepts are taught  Manage tradeoff between engagement and problem resolution</p>
    <p>Consider separating problem-solving process from fun and entertainment  incorporate engaging elements in downtime</p>
    <p>Maximize the use of human intuition and insight  Use automation where possible</p>
    <p>Minimize busy work performed by the citizen scientists  Manage insertion of automation to ensure game players</p>
    <p>understand mechanics and impacts</p>
    <p>Distribution Statement A: Approved for Public Release, Distribution Unlimited</p>
  </div>
  <div class="page">
    <p>Contact Points and Website</p>
    <p>Drew Dean Program Director, SRI International</p>
    <p>Sean Guarino Principal Scientist, Charles River Analytics</p>
    <p>CSFV games can be found at http://www.verigames.com</p>
    <p>Distribution Statement A: Approved for Public Release, Distribution Unlimited</p>
  </div>
  <div class="page">
    <p>(x0  x1) x0</p>
    <p>Paradox Backup: Constraints</p>
    <p>Flow Jam</p>
    <p>x0 = 1</p>
    <p>Paradox</p>
    <p>x0&lt;=x1 x0&lt;=0</p>
    <p>x1 = 0&quot;0</p>
    <p>&quot;</p>
    <p>x0 = 1</p>
    <p>x1 = 0</p>
    <p>Distribution Statement A: Approved for Public Release, Distribution Unlimited</p>
  </div>
  <div class="page">
    <p>Paradox Backup: Game Elements</p>
    <p>Flow Jam Paradox</p>
    <p>Edges (constraints)</p>
    <p>Variable Nodes (annotations)</p>
    <p>Variable Nodes (annotations)</p>
    <p>Clause Nodes (constraints)</p>
    <p>Distribution Statement A: Approved for Public Release, Distribution Unlimited</p>
  </div>
</Presentation>
