<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>The University of Texas at Austin</p>
    <p>UNDERSTANDING TRANSACTIONAL MEMORY</p>
    <p>PERFORMANCE</p>
    <p>Donald E. Porter and Emmett Witchel</p>
  </div>
  <div class="page">
    <p>Multicore is here 2</p>
    <p>Only concurrent applications will perform better on new hardware</p>
    <p>Intel Single-chip Cloud Computer 48 cores</p>
    <p>Tilera Tile GX 100 cores</p>
    <p>This laptop 2 Intel cores</p>
  </div>
  <div class="page">
    <p>Concurrent programming is hard</p>
    <p>Locks are the state of the art  Correctness problems: deadlock, priority inversion,</p>
    <p>etc.  Scaling performance requires more complexity</p>
    <p>Transactional memory makes correctness easy  Trade correctness problems for performance</p>
    <p>problems  Key challenge: performance tuning transactions</p>
    <p>This work:  Develops a TM performance model and tool  Systems integration challenges for TM</p>
  </div>
  <div class="page">
    <p>Simple microbenchmark 4</p>
    <p>Intuition:  Transactions execute optimistically  TM should scale at low contention threshold  Locks always execute serially</p>
    <p>lock(); if(rand() &lt; threshold)</p>
    <p>shared_var = new_value; unlock();</p>
    <p>xbegin(); if(rand() &lt; threshold)</p>
    <p>shared_var = new_value; xend();</p>
  </div>
  <div class="page">
    <p>Ideal TM performance 5</p>
    <p>Locks 32 CPUs</p>
    <p>Probability of Conflict (%)</p>
    <p>E x e c u ti</p>
    <p>o n T</p>
    <p>im e (</p>
    <p>s )</p>
    <p>Performance win at low contention</p>
    <p>Higher contention degrades gracefully</p>
    <p>xbegin(); if(rand() &lt; threshold)</p>
    <p>shared_var = new_value; xend();</p>
    <p>Lower is better Ideal, not real data</p>
  </div>
  <div class="page">
    <p>Actual performance under contention 6</p>
    <p>Locks 32 CPUs</p>
    <p>Probability of Conflict (%)</p>
    <p>E x e c u ti</p>
    <p>o n T</p>
    <p>im e (</p>
    <p>s )</p>
    <p>Comparable performance at modest contention</p>
    <p>40% worse at 100% contention</p>
    <p>xbegin(); if(rand() &lt; threshold)</p>
    <p>shared_var = new_value; xend();</p>
    <p>Lower is better Actual data</p>
  </div>
  <div class="page">
    <p>First attempt at microbenchmark 7</p>
    <p>Locks 32 CPUs</p>
    <p>Probability of Conflict (%)</p>
    <p>E x e c u ti</p>
    <p>o n T</p>
    <p>im e (</p>
    <p>s )</p>
    <p>xbegin(); if(rand() &lt; threshold)</p>
    <p>shared_var = new_value; xend();</p>
    <p>Lower is better Approximate data</p>
  </div>
  <div class="page">
    <p>Subtle sources of contention 8</p>
    <p>if(a &lt; threshold)</p>
    <p>shared_var = new_value;</p>
    <p>eax = shared_var;</p>
    <p>if(edx &lt; threshold)</p>
    <p>eax = new_value;</p>
    <p>shared_var = eax;</p>
    <p>Microbenchmark codeMicrobenchmark code</p>
    <p>gcc optimized code gcc optimized code</p>
    <p>Compiler optimization to avoid branches  Optimization causes 100% restart rate  Cant identify problem with source inspection +</p>
    <p>reason</p>
  </div>
  <div class="page">
    <p>Developers need TM tuning tools</p>
    <p>Transactional memory can perform pathologically  Contention  Poor integration with system components  HTM best effort not good enough</p>
    <p>Causes can be subtle and counterintuitive  Syncchar: Model that predicts TM performance</p>
    <p>Predicts poor performance remove contention  Predicts good performance + poor performance system issue</p>
  </div>
  <div class="page">
    <p>This talk 10</p>
    <p>Motivating example  Syncchar performance model  Experiences with transactional memory</p>
    <p>Performance tuning case study  System integration challenges</p>
  </div>
  <div class="page">
    <p>The Syncchar model 11</p>
    <p>Approximate transaction performance model  Intuition: scalability limited by serialized length</p>
    <p>of critical regions  Introduce two key metrics for critical regions:</p>
    <p>Data Independence: Likelihood executions do not conflict</p>
    <p>Conflict Density: How many threads must execute serially to resolve a conflict</p>
    <p>Model inputs: samples critical region executions  Memory accesses and execution times</p>
  </div>
  <div class="page">
    <p>Data independence (In) 12</p>
    <p>Expected number of non-conflicting, concurrent executions of a critical region. Formally:</p>
    <p>In = n - |Cn| n =thread count</p>
    <p>Cn = set of conflicting critical region executions  Linear speedup when all critical regions are</p>
    <p>data independent (In = n )  Example: thread-private data structures</p>
    <p>Serialized execution when (In = 0 )  Example: concurrent updates to a shared variable</p>
  </div>
  <div class="page">
    <p>Example: 13</p>
    <p>Write a</p>
    <p>Read a</p>
    <p>Write a</p>
    <p>Read a Write a</p>
    <p>Write a</p>
    <p>Tim e</p>
    <p>Same data independence (0)  Different serialization</p>
    <p>Thread 1</p>
    <p>Thread 2</p>
    <p>Thread 3</p>
  </div>
  <div class="page">
    <p>Intuition: Low density High density</p>
    <p>How many threads must be serialized to eliminate a conflict?</p>
    <p>Similar to dependence density introduced by von Praun et al. [PPoPP 07]</p>
    <p>Conflict density (Dn) 14</p>
    <p>Write a</p>
    <p>Read a</p>
    <p>Write a</p>
    <p>Read a Write a</p>
    <p>Write a</p>
    <p>Tim e</p>
    <p>Thread 1</p>
    <p>Thread 2</p>
    <p>Thread 3</p>
  </div>
  <div class="page">
    <p>Syncchar metrics in STAMP 15</p>
    <p>P ro</p>
    <p>je c te</p>
    <p>d S</p>
    <p>p e e d</p>
    <p>u p</p>
    <p>o v e r</p>
    <p>L o c k in</p>
    <p>g</p>
    <p>intrud er</p>
    <p>kmea ns</p>
    <p>bayes ssca2</p>
    <p>Higher is better</p>
  </div>
  <div class="page">
    <p>Predicting execution time 16</p>
    <p>Speedup limited by conflict density  Amdahls law: Transaction speedup limited</p>
    <p>to time executing transactions concurrently</p>
    <p>cs_cycles = time executing a critical region other = remaining execution time</p>
    <p>Dn = Conflict density</p>
    <p>other D</p>
    <p>n cyclescsTimeExecution</p>
    <p>n</p>
    <p>)1,max( __</p>
  </div>
  <div class="page">
    <p>Syncchar tool 17</p>
    <p>Implemented as Simics machine simulator module</p>
    <p>Samples lock-based application behavior  Predicts TM performance  Features:</p>
    <p>Identifies contention hot spot addresses  Sorts by time spent in critical region  Identifies potential asymmetric conflicts</p>
    <p>between transactions and non-transactional threads</p>
  </div>
  <div class="page">
    <p>Syncchar validation: microbenchmark 18</p>
    <p>Locks 8 CPUs</p>
    <p>Probability of Conflict (%)</p>
    <p>E x e c u ti</p>
    <p>o n T</p>
    <p>im e (</p>
    <p>s )</p>
    <p>Tracks trends, does not model pathologies</p>
    <p>Balances accuracy with generality</p>
    <p>Lower is better</p>
  </div>
  <div class="page">
    <p>Syncchar validation: STAMP 19</p>
    <p>ssca2 32CPU</p>
    <p>ssca2 16CPU</p>
    <p>ssca2 8CPU</p>
    <p>intruder 32CPU</p>
    <p>intruder 16CPU</p>
    <p>intruder 8CPU</p>
    <p>Measured</p>
    <p>Execution Time (s)</p>
    <p>Coarse predictions track scaling trend  Mean error 25%</p>
    <p>Additional benchmarks in paper</p>
  </div>
  <div class="page">
    <p>Syncchar summary 20</p>
    <p>Model: data independence and conflict density  Both contribute to transactional speedup</p>
    <p>Syncchar tool predicts scaling trends  Predicts poor performance remove</p>
    <p>contention  Predicts good performance + poor</p>
    <p>performance system issue</p>
    <p>Distinguishing high contention from system issues is key step in performance tuning</p>
  </div>
  <div class="page">
    <p>This talk 21</p>
    <p>Motivating example  Syncchar performance model  Experiences with transactional memory</p>
    <p>Performance tuning case study  System integration challenges</p>
  </div>
  <div class="page">
    <p>TxLinux case study 22</p>
    <p>TxLinux  modifies Linux synchronization primitives to use hardware transactions [SOSP 2007]</p>
    <p>aborts spins</p>
    <p>% K</p>
    <p>e rn</p>
    <p>e l</p>
    <p>T im</p>
    <p>e S</p>
    <p>p e</p>
    <p>n t</p>
    <p>S y</p>
    <p>n c</p>
    <p>h ro</p>
    <p>n iz</p>
    <p>in g</p>
  </div>
  <div class="page">
    <p>Bonnie++ pathology 23</p>
    <p>Simple execution profiling indicated ext3 file system journaling code was the culprit</p>
    <p>Code inspection yielded no clear culprit  What information missing?</p>
    <p>What variable causing the contention  What other code is contending with the</p>
    <p>transaction  Syncchar tool showed:</p>
    <p>Contended variable  High probability (88-92%) of asymmetric conflict</p>
  </div>
  <div class="page">
    <p>Bonnie++ pathology, explained</p>
    <p>False asymmetric conflicts for unrelated bits  Tuned by moving state lock to dedicated</p>
    <p>cache line</p>
    <p>lock(buffer-&gt;state); ... xbegin(); ... assert(locked(buffer-&gt;state)); ... xend(); ... unlock(buffer-&gt;state);</p>
    <p>lock(buffer-&gt;state); ... xbegin(); ... assert(locked(buffer-&gt;state)); ... xend(); ... unlock(buffer-&gt;state);</p>
    <p>struct bufferhead {  bit state; bit dirty; bit free;  };</p>
    <p>struct bufferhead {  bit state; bit dirty; bit free;  };</p>
    <p>Tx RW</p>
  </div>
  <div class="page">
    <p>Tuned performance  16 CPUs</p>
    <p>bonnie++ MAB pmake radix -0.2</p>
    <p>E x e c u</p>
    <p>ti o n</p>
    <p>T im</p>
    <p>e (</p>
    <p>s )</p>
    <p>&gt;10 s</p>
    <p>Tuned performance strictly dominates TxLinux</p>
    <p>Lower is better</p>
  </div>
  <div class="page">
    <p>This talk 26</p>
    <p>Motivating example  Syncchar performance model  Experiences with transactional memory</p>
    <p>Performance tuning case study  System integration challenges</p>
    <p>Compiler (motivation)  Architecture  Operating system</p>
  </div>
  <div class="page">
    <p>HTM designs must handle TLB misses 27</p>
    <p>Some best effort HTM designs cannot handle TLB misses  Sun Rock</p>
    <p>What percent of STAMP txns would abort for TLB misses?  2% for kmeans  50-100%</p>
    <p>How many times will these transactions restart?  3 (ssca2)  908 (bayes)</p>
    <p>Practical HTM designs must handle TLB misses</p>
  </div>
  <div class="page">
    <p>Input size 28</p>
    <p>Simulation studies need scaled inputs  Simulating 1 second takes hours to weeks</p>
    <p>STAMP comes with parameters for real and simulated environments</p>
  </div>
  <div class="page">
    <p>Input size 29</p>
    <p>Sim</p>
    <p>S p</p>
    <p>e e d</p>
    <p>u p</p>
    <p>genome ssca2 yada</p>
    <p>Simulator inputs too small to amortize costs of scheduling threads</p>
  </div>
  <div class="page">
    <p>System calls  memory allocation</p>
    <p>xbegin(); malloc(); xend();</p>
    <p>xbegin(); malloc(); xend();</p>
    <p>Thread 1</p>
    <p>Common case behavior: Rollback of transaction rolls back heap bookkeeping</p>
    <p>Heap</p>
    <p>Pages: 2</p>
    <p>Allocated Free</p>
    <p>Legend</p>
  </div>
  <div class="page">
    <p>System calls  memory allocation</p>
    <p>xbegin(); malloc(); xend();</p>
    <p>xbegin(); malloc(); xend();</p>
    <p>Thread 1</p>
    <p>Heap</p>
    <p>Uncommon case behavior: Allocator adds pages to heap Rolls back bookkeeping, leaking pages</p>
    <p>Pages: 2Pages: 3</p>
    <p>Pathological memory leaks in STAMP genome and labyrinth benchmark</p>
    <p>Pathological memory leaks in STAMP genome and labyrinth benchmark</p>
    <p>Allocated Free</p>
    <p>Legend</p>
  </div>
  <div class="page">
    <p>System integration issues 32</p>
    <p>Developers need tools to identify these subtle issues  Indicated by poor performance despite</p>
    <p>good predictions from Syncchar  Pain for early adopters, important for</p>
    <p>designers  System call support evolving in OS</p>
    <p>community  xCalls [Volos et al.  Eurosys 2009]</p>
    <p>Userspace compensation built on transactional pause</p>
    <p>TxOS [Porter et al.  SOSP 2009]  Kernel support for transactional system calls</p>
  </div>
  <div class="page">
    <p>Related work 33</p>
    <p>TM performance models  von Praun et al. [PPoPP 07]  Dependence</p>
    <p>density  Heindl and Pokam [Computer Networks 2009]</p>
    <p>analytic model of STM performance  HTM conflict behavior</p>
    <p>Bobba et al. [ISCA 2007]  Ramadan et al. [MICRO 2008]  Pant and Byrd [ICS 2009]  Shriraman and Dwarkadas [ICS 2009]</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Developers need tools for tuning TM performance</p>
    <p>Syncchar provides practical techniques  Identified system integration challenges</p>
    <p>for TM</p>
    <p>Code available at: http://syncchar.code.csres.utexas.edu</p>
    <p>porterde@cs.utexas.edu</p>
  </div>
  <div class="page">
    <p>Backup slides 35</p>
  </div>
</Presentation>
