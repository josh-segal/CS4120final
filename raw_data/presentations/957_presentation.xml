<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Testing Error Handling Code in Device Drivers Using Characteristic Fault Injection</p>
    <p>Jia-Ju Bai, Yu-Ping Wang, Jie Yin, Shi-Min Hu</p>
    <p>Department of Computer Science and Technology</p>
    <p>Tsinghua University</p>
    <p>Beijing, China</p>
  </div>
  <div class="page">
    <p>DRIVER INTRODUCTION</p>
    <p>Role</p>
    <p>Manage hardware devices</p>
    <p>Support high-level programs</p>
    <p>Run in kernel mode</p>
    <p>Applications</p>
    <p>Operating System</p>
    <p>Hardware devices</p>
    <p>Network control</p>
    <p>Process management</p>
    <p>Device drivers</p>
  </div>
  <div class="page">
    <p>DRIVER ERROR HANDLING</p>
    <p>Occasional errors</p>
    <p>Kernel exceptions (-ENOMEM, -EFAULT, )</p>
    <p>Hardware malfunctions (-EIO, -EBUSY, )</p>
    <p>Challenges for error handling</p>
    <p>Complex program logic and context</p>
    <p>Many different kinds of errors</p>
    <p>Infrequent to trigger</p>
    <p>Error handling code in drivers is necessary but hard to correctly implement</p>
  </div>
  <div class="page">
    <p>MOTIVATION</p>
    <p>Error handling code is incorrect in some drivers</p>
    <p>Memory is allocated</p>
    <p>Error handling is triggered</p>
    <p>Memory is NOT freed!</p>
  </div>
  <div class="page">
    <p>MOTIVATION</p>
    <p>Patch study</p>
    <p>Source: Patchwork (http://patchwork.ozlabs.org/)</p>
    <p>July 2015</p>
    <p>Findings</p>
    <p>40% of accepted patches are related to error handling code</p>
    <p>Many error handling patches are used to fix common bugs</p>
    <p>Error handling code in current drivers is not reliable enough</p>
  </div>
  <div class="page">
    <p>GOAL</p>
    <p>Testing error handling code in device drivers</p>
    <p>Bug-detection capability</p>
    <p>Error-handling-code coverage</p>
    <p>Automation and efficiency</p>
    <p>Scalability and generality</p>
  </div>
  <div class="page">
    <p>BASIC TECHNIQUE</p>
    <p>Software fault injection (SFI)</p>
    <p>Good coverage for error handling code</p>
    <p>Exact runtime information for bug detection</p>
    <p>Support most drivers</p>
    <p>Typical SFI System</p>
    <p>Target Driver</p>
    <p>Fault Injector</p>
    <p>Fault Library</p>
    <p>Workload Generator</p>
    <p>Workload Library</p>
    <p>Runtime Monitor</p>
    <p>Controller</p>
    <p>Data Analyzer</p>
  </div>
  <div class="page">
    <p>PREVIOUS SFI APPROACHES</p>
    <p>Some famous approaches</p>
    <p>Linux Fault Injection Capabilities Infrastructure</p>
    <p>ADFI (ISSTA 15), KEDR (ICST 11), LFI (DSN 09),</p>
    <p>Limitations</p>
    <p>Low fault representativeness</p>
    <p>Numerous redundant test cases</p>
    <p>Several kinds of faults</p>
    <p>Much manual effort</p>
    <p>Our solution is to introduce driver characteristics into SFI</p>
  </div>
  <div class="page">
    <p>CHARACTERISTIC 1</p>
    <p>Function return value trigger</p>
    <p>The error handling code is often triggered by a bad function return value</p>
    <p>Driver study</p>
    <p>75% of goto statements are in if branches of bad function return values</p>
  </div>
  <div class="page">
    <p>CHARACTERISTIC 2</p>
    <p>Few branches</p>
    <p>There are few if branches in error handling code</p>
    <p>Driver study</p>
    <p>78% of error handling code is out of the if branches</p>
    <p>Reason: fail-stop model</p>
  </div>
  <div class="page">
    <p>CHARACTERISTIC 3</p>
    <p>Check decision</p>
    <p>To check whether an occasional error occurs, an if check is often used in the source code</p>
    <p>The checked data can be function return values (C1) or common variables</p>
  </div>
  <div class="page">
    <p>CHARACTERISTIC USAGE</p>
    <p>Function return value trigger (C1)</p>
    <p>Injecting faults into function return values can cover most error handling code</p>
    <p>Few branches (C2)</p>
    <p>Injecting single fault in each test case can cover most error handling code</p>
    <p>Check decision (C3)</p>
    <p>The function whose return value is checked in the code should be fault-injected</p>
  </div>
  <div class="page">
    <p>EH-TEST</p>
    <p>Architecture</p>
    <p>Fault extractor</p>
    <p>Fault injector</p>
    <p>Probe inserter</p>
    <p>Runtime monitor</p>
    <p>Pair checkers</p>
    <p>Two phases</p>
    <p>Test case generation</p>
    <p>Runtime testing</p>
    <p>EH-Test Fault</p>
    <p>Extractor</p>
    <p>Target Functions</p>
    <p>OS source code</p>
    <p>+ + Target Driver</p>
    <p>Other Drivers</p>
    <p>Interface Functions</p>
    <p>Fault Injector</p>
    <p>Test Cases</p>
    <p>Probe Inserter</p>
    <p>Runtime Monitor</p>
    <p>Pair Checkers</p>
    <p>Bug Reports</p>
  </div>
  <div class="page">
    <p>PHASE 1: TEST CASE GENERATION</p>
    <p>Task 1: Extracting target functions</p>
    <p>Input: OS + driver source code</p>
    <p>Output: target functions</p>
    <p>Method: pattern-based extraction strategy</p>
    <p>EH-Test Fault</p>
    <p>Extractor</p>
    <p>Target Functions</p>
    <p>OS source code</p>
    <p>+ + Target Driver</p>
    <p>Other Drivers</p>
    <p>Interface Functions</p>
    <p>Fault Injector</p>
    <p>Test Cases</p>
    <p>Probe Inserter</p>
    <p>Runtime Monitor</p>
    <p>Pair Checkers</p>
    <p>Bug Reports</p>
  </div>
  <div class="page">
    <p>PATTERN-BASED EXTRACTION</p>
    <p>Based on C1 and C3</p>
    <p>Three code patterns</p>
    <p>Automated and accurate extraction</p>
    <p>Pattern 1:</p>
    <p>Pattern 2:</p>
    <p>Pattern 3:</p>
    <p>Simple extraction: (candidate functions)</p>
    <p>Collect traces:</p>
  </div>
  <div class="page">
    <p>PHASE 1: TEST CASE GENERATION</p>
    <p>Task 2: Injecting faults into target functions</p>
    <p>Input: driver code + target functions</p>
    <p>Output: processed driver LLVM bytecode</p>
    <p>Method: single fault injection, code instrumentation</p>
    <p>EH-Test Fault</p>
    <p>Extractor</p>
    <p>Target Functions</p>
    <p>OS source code</p>
    <p>+ + Target Driver</p>
    <p>Other Drivers</p>
    <p>Interface Functions</p>
    <p>Fault Injector</p>
    <p>Test Cases</p>
    <p>Probe Inserter</p>
    <p>Runtime Monitor</p>
    <p>Pair Checkers</p>
    <p>Bug Reports</p>
  </div>
  <div class="page">
    <p>PHASE 1: TEST CASE GENERATION</p>
    <p>Task 3: Inserting probes for runtime monitoring</p>
    <p>Input: processed driver LLVM bytecode</p>
    <p>Output: driver test cases (loadable drivers)</p>
    <p>Method: code instrumentation</p>
    <p>EH-Test Fault</p>
    <p>Extractor</p>
    <p>Target Functions</p>
    <p>OS source code</p>
    <p>+ + Target Driver</p>
    <p>Other Drivers</p>
    <p>Interface Functions</p>
    <p>Fault Injector</p>
    <p>Test Cases</p>
    <p>Probe Inserter</p>
    <p>Runtime Monitor</p>
    <p>Pair Checkers</p>
    <p>Bug Reports</p>
  </div>
  <div class="page">
    <p>PHASE 2: RUNTIME TESTING</p>
    <p>Runtime monitoring</p>
    <p>Record runtime information</p>
    <p>Maintain a resource-usage list</p>
    <p>Measuring code coverage</p>
    <p>EH-Test Fault</p>
    <p>Extractor</p>
    <p>Target Functions</p>
    <p>OS source code</p>
    <p>+ + Target Driver</p>
    <p>Other Drivers</p>
    <p>Interface Functions</p>
    <p>Fault Injector</p>
    <p>Test Cases</p>
    <p>Probe Inserter</p>
    <p>Runtime Monitor</p>
    <p>Pair Checkers</p>
    <p>Bug Reports</p>
  </div>
  <div class="page">
    <p>PHASE 2: RUNTIME TESTING</p>
    <p>Bug reporting</p>
    <p>Driver crashes</p>
    <p>Driver hangs</p>
    <p>Resource-release omissions</p>
    <p>EH-Test Fault</p>
    <p>Extractor</p>
    <p>Target Functions</p>
    <p>OS source code</p>
    <p>+ + Target Driver</p>
    <p>Other Drivers</p>
    <p>Interface Functions</p>
    <p>Fault Injector</p>
    <p>Test Cases</p>
    <p>Probe Inserter</p>
    <p>Runtime Monitor</p>
    <p>Pair Checkers</p>
    <p>Bug Reports</p>
  </div>
  <div class="page">
    <p>EVALUATION</p>
    <p>15 common Linux drivers (3.1.1 and 3.17.2)</p>
    <p>4 wireless drivers</p>
    <p>3 USB drivers</p>
    <p>8 Ethernet drivers</p>
  </div>
  <div class="page">
    <p>EVALUATION</p>
    <p>Target function extraction</p>
    <p>76% of candidate functions are filtered out</p>
    <p>10% false positive rate</p>
    <p>86% of target functions are called in initialization</p>
  </div>
  <div class="page">
    <p>EVALUATION</p>
    <p>Bug detection</p>
    <p>32 real bugs in 3.1.1, 50 real bugs in 3.17.2</p>
    <p>9 bugs in 3.1.1 have been fixed in 3.17.2</p>
    <p>17 patches are sent, and 15 of them are applied</p>
    <p>Many resource-release omissions</p>
  </div>
  <div class="page">
    <p>EVALUATION</p>
    <p>Code coverage</p>
    <p>Improve 8.8% in driver initialization</p>
    <p>Not all error handling code can be covered</p>
  </div>
  <div class="page">
    <p>ADFI VS EH-TEST</p>
    <p>ADFI *ISSTA 15+</p>
    <p>SFI testing for drivers</p>
    <p>Injecting faults into target function return values</p>
    <p>Detect crashes, hangs and memory leaks</p>
    <p>Differences</p>
    <p>Target functions are manually selected</p>
    <p>Injecting multiple faults into each test case</p>
    <p>Bug detection</p>
    <p>Find the same number of bugs in e100 and r8169</p>
    <p>10 bugs in ehci_hcd found by EH-Test are omitted</p>
  </div>
  <div class="page">
    <p>LIMITATIONS</p>
    <p>Some error handling code is uncovered</p>
    <p>Single fault injection</p>
    <p>Only injecting faults into function return values</p>
    <p>Only default configuration is covered</p>
  </div>
  <div class="page">
    <p>CONCLUSION</p>
    <p>Driver code study and 3 useful characteristics</p>
    <p>Automated and accurate method: pattern-based extraction strategy</p>
    <p>Efficient SFI approach: EH-Test</p>
    <p>50 real bugs in 15 Linux drivers</p>
    <p>Future work: cover more error handling code and configurations</p>
  </div>
  <div class="page">
    <p>Thanks!</p>
    <p>Q &amp; A</p>
  </div>
</Presentation>
