<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Attacking the Linux PRNG on Android David Kaplan, Sagi Kedmi, Roee Hay &amp; Avi Dayan IBM Security Systems</p>
  </div>
  <div class="page">
    <p>MOTIVATION</p>
  </div>
  <div class="page">
    <p>motivation_keystore_buffer_overflow</p>
    <p>We discovered CVE-2014-3100, a stack-based Buffer Overflow in keystore  Service responsible of securely storing crypto related data</p>
    <p>We had privately reported to Google and they provided a patch available in KITKAT.</p>
    <p>Exploit must overcome various defense mechanisms, including Stack Canaries.</p>
    <p>/* KeyStore is a secured storage for key-value pairs. In this implementation, * each file stores one key-value pair. Keys are encoded in file names, and * values are encrypted with checksums. The encryption key is protected by a * user-defined password. To keep things simple, buffers are always larger than * the maximum space we needed, so boundary checks on buffers are omitted. */</p>
  </div>
  <div class="page">
    <p>motivation_keystore_buffer_overflow</p>
    <p>LR</p>
    <p>Saved Registers Canary</p>
    <p>(32 bits)</p>
    <p>Buffer</p>
    <p>Stack layout</p>
    <p>Linux PRNG</p>
    <p>AUXV(AT_RANDOM)</p>
    <p>__stack_chk_guard</p>
    <p>Stack Guard initialization</p>
    <p>Attacks on the Stack-Smashing Protection:</p>
    <p>Naive Online Bruteforce of the Canary Value  Impractical: 2^32 attempts on average.</p>
  </div>
  <div class="page">
    <p>motivation_keystore_buffer_overflow</p>
    <p>LR</p>
    <p>Saved Registers Canary</p>
    <p>(32 bits)</p>
    <p>Buffer</p>
    <p>Stack layout</p>
    <p>Linux PRNG</p>
    <p>AUXV(AT_RANDOM)</p>
    <p>__stack_chk_guard</p>
    <p>Stack Guard initialization</p>
    <p>Attacks on the Stack-Smashing Protection:</p>
    <p>Naive Online Bruteforce of the Canary Value  Impractical: 2^32 attempts on average.</p>
    <p>Online Learning of the Canary Value  By another info leak issue  Re-forking server:</p>
    <p>Very efficient: 514 attempts until success on average</p>
  </div>
  <div class="page">
    <p>motivation_keystore_buffer_overflow</p>
    <p>LR</p>
    <p>Saved Registers Canary</p>
    <p>(32 bits)</p>
    <p>Buffer</p>
    <p>Stack layout</p>
    <p>Linux PRNG</p>
    <p>AUXV(AT_RANDOM)</p>
    <p>Stack Guard initialization</p>
    <p>__stack_chk_guard</p>
    <p>Attacks on the Stack-Smashing Protection:</p>
    <p>Naive Online Bruteforce of the Canary Value  Impractical: 2^32 attempts on average.</p>
    <p>Online Learning of the Canary Value  By another info leak issue  Re-forking server:</p>
    <p>Very efficient: 514 attempts until success on average</p>
    <p>Overwrite __stack_chk_guard  By overwriting some pointer</p>
  </div>
  <div class="page">
    <p>motivation_keystore_buffer_overflow</p>
    <p>LR</p>
    <p>Saved Registers Canary</p>
    <p>(32 bits)</p>
    <p>Buffer</p>
    <p>Attacks on the Stack-Smashing Protection:</p>
    <p>Naive Online Bruteforce of the Canary Value  Impractical: 2^32 attempts on average.</p>
    <p>Online Learning of the Canary Value  By another info leak issue  Re-forking server:  Very efficient: 514 attempts until success on</p>
    <p>average  Overwrite __stack_chk_guard  By overwriting some pointer</p>
    <p>Our attack: Offline reconstruction of the PRNGs internal state</p>
    <p>Stack layout</p>
    <p>Linux PRNG</p>
    <p>AUXV(AT_RANDOM)</p>
    <p>Stack Guard initialization</p>
    <p>__stack_chk_guard __stack_chk_guard __stack_chk_guard</p>
  </div>
  <div class="page">
    <p>LINUX PRNG</p>
  </div>
  <div class="page">
    <p>INPUT POOL NON-BLOCKING-POOL</p>
    <p>ktime_t ktime_t</p>
    <p>EXTRACTION (PULL)</p>
    <p>INTERRUPT</p>
    <p>DISK</p>
    <p>INPUT</p>
    <p>T I M E R</p>
    <p>time</p>
    <p>if KEC &gt;= 192 bits</p>
    <p>*KEC = Kernel Entropy Count</p>
    <p>entropy_sources</p>
    <p>seconds nanoseconds</p>
  </div>
  <div class="page">
    <p>OUR WORK</p>
  </div>
  <div class="page">
    <p>Prior art on weakness in early boot *</p>
    <p>Present practical run-time attack</p>
    <p>Formalize attack</p>
    <p>Demonstrate PoC against current mobile platforms</p>
    <p>contribution</p>
    <p>* Heninger et al. 2012, Becherer et al. 2009, Ding et al. 2014</p>
  </div>
  <div class="page">
    <p>Given a LEAK of a value extracted from the non-blocking pool and</p>
    <p>LOW ENTROPY AT BOOT, the STATE of the PRNG can be</p>
    <p>determined prior to time of leak until external entropy is indeterminate</p>
    <p>attack</p>
  </div>
  <div class="page">
    <p>SIMULATE</p>
    <p>attack_flow</p>
  </div>
  <div class="page">
    <p>SIMULATE</p>
    <p>attack_flow CANDIDATE POOL SEEDS</p>
    <p>non-blockinginput</p>
  </div>
  <div class="page">
    <p>SIMULATE</p>
    <p>attack_flow CANDIDATE POOL SEEDS</p>
    <p>non-blockinginput</p>
    <p>CANDIDATE EXTERNAL ENTROPY</p>
  </div>
  <div class="page">
    <p>SIMULATE</p>
    <p>attack_flow CANDIDATE POOL SEEDS</p>
    <p>non-blockinginput</p>
    <p>CANDIDATE EXTERNAL ENTROPY</p>
    <p>COMPAREONLINE LEAK</p>
  </div>
  <div class="page">
    <p>attack_flow</p>
    <p>SIMULATE</p>
    <p>CANDIDATE POOL SEEDS</p>
    <p>non-blockinginput</p>
    <p>CANDIDATE EXTERNAL ENTROPY</p>
    <p>COMPAREONLINE LEAK</p>
    <p>SEEDS + ENTROPY PATH</p>
  </div>
  <div class="page">
    <p>EXPERIMENT</p>
  </div>
  <div class="page">
    <p>H(snb)=23.5bits</p>
    <p>s4_non-blocking_seed SIMULATE</p>
    <p>CANDIDATE POOL SEEDS</p>
    <p>COMPARELEAK</p>
    <p>SEEDS + ENTROPY PATH</p>
  </div>
  <div class="page">
    <p>ANDROID ZYGOTE (app_process) Apps fork()ed from Zygote process</p>
    <p>Same AUX VECTOR</p>
    <p>AT_RANDOM  16 bytes extracted from PRNG</p>
    <p>LEAK: Malicious app extracts AT_RANDOM from mem space</p>
    <p>prng_value_leak</p>
    <p>Linux PRNG</p>
    <p>AUXV(AT_RANDOM)</p>
    <p>__stack_chk_guard</p>
    <p>app_process</p>
    <p>__stack_chk_guard</p>
    <p>APP-1</p>
    <p>__stack_chk_guard</p>
    <p>APP-2</p>
    <p>__stack_chk_guard</p>
    <p>MALWARE</p>
    <p>__stack_chk_guard</p>
    <p>fork() fork()fork()</p>
    <p>SIMULATE</p>
    <p>CANDIDATE POOL SEEDS</p>
    <p>COMPARELEAK</p>
    <p>SEEDS + ENTROPY PATH</p>
  </div>
  <div class="page">
    <p>Issue 1: order of extraction non-deterministic due to concurrent execution</p>
    <p>simulate_prng</p>
    <p>Process A</p>
    <p>Process B</p>
    <p>Process C</p>
    <p>Process D</p>
    <p>POOL STATE</p>
    <p>Which process is Zygote?</p>
    <p>Solution: linear search in set of extracted blocks</p>
    <p>SIMULATE</p>
    <p>CANDIDATE POOL SEEDS</p>
    <p>COMPARELEAK</p>
    <p>SEEDS + ENTROPY PATH</p>
  </div>
  <div class="page">
    <p>simulate_prng</p>
    <p>POOL STATE</p>
    <p>Most likely path in 20% of cases</p>
    <p>~uniform distribution otherwise</p>
    <p>Yellow Path</p>
    <p>- Process A: extract from pool</p>
    <p>- Process A: mix into pool</p>
    <p>- Process B: extract from pool</p>
    <p>- Process B: mix into pool</p>
    <p>Green Path</p>
    <p>- Process A: extract from pool</p>
    <p>- Process B: extract from pool</p>
    <p>- Process A: mix into pool</p>
    <p>- Process B: mix into pool</p>
    <p>POOL</p>
    <p>extract</p>
    <p>mix</p>
    <p>Issue 2: pool state corruption due to concurrent execution</p>
    <p>SIMULATE</p>
    <p>CANDIDATE POOL SEEDS</p>
    <p>COMPARELEAK</p>
    <p>SEEDS + ENTROPY PATH</p>
  </div>
  <div class="page">
    <p>DEMO</p>
    <p>s4_demo SIMULATE</p>
    <p>CANDIDATE POOL SEEDS</p>
    <p>COMPARELEAK</p>
    <p>SEEDS + ENTROPY PATH</p>
  </div>
  <div class="page">
    <p>Demonstrated practical attack against S4  derandomization KeyStore canary</p>
    <p>Another remote leak can be found in the paper</p>
    <p>Affects majority of devices in the field</p>
    <p>Mitigations in newer kernels + devices</p>
    <p>wrap_up</p>
  </div>
  <div class="page">
    <p>? Thank you</p>
  </div>
</Presentation>
