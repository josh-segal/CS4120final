<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>ZigZag - Automatically Hardening Web Applications Against Client-side Validation Vulnerabilities</p>
    <p>Michael Weissbacher, William Robertson, Engin Kirda, Christopher Kruegel, Giovanni Vigna</p>
  </div>
  <div class="page">
    <p>XMLHTTPRequest (XHR) and postMessage</p>
  </div>
  <div class="page">
    <p>XMLHTTPRequest (XHR) and postMessage</p>
  </div>
  <div class="page">
    <p>XMLHTTPRequest (XHR) and postMessage</p>
  </div>
  <div class="page">
    <p>XMLHTTPRequest (XHR) and postMessage</p>
  </div>
  <div class="page">
    <p>Client-Side Validation Vulnerabilities</p>
    <p>Bugs in client-side code of web application (JavaScript)</p>
    <p>Unsafe usage of untrusted data  Validation</p>
    <p>missing  broken</p>
  </div>
  <div class="page">
    <p>Attacks  Origin mis-attribution  Command injection  Cookie leakage</p>
    <p>Defense / Detection  Server-side detection not possible  Client-side</p>
    <p>Client-Side Validation Vulnerabilities</p>
  </div>
  <div class="page">
    <p>Example of CSV Vulnerability</p>
    <p>function listener(event){</p>
    <p>if (event.origin.indexOf(&quot;domain-a.ru&quot;) != -1){</p>
    <p>eval(event.data);</p>
    <p>}</p>
    <p>}</p>
    <p>if (window.addEventListener){</p>
    <p>window.addEventListener(&quot;message&quot;, listener,false);</p>
    <p>} else {</p>
    <p>window.attachEvent(&quot;onmessage&quot;, listener);</p>
    <p>} 8</p>
  </div>
  <div class="page">
    <p>Example of CSV Vulnerability</p>
    <p>function listener(event){</p>
    <p>if (event.origin.indexOf(&quot;domain-a.ru&quot;) != -1){</p>
    <p>eval(event.data);</p>
    <p>}</p>
    <p>}</p>
    <p>Developer must verify origin correctly</p>
    <p>Counterexample: &quot;domain-a.ru.attacker.com&quot;</p>
  </div>
  <div class="page">
    <p>Example Attack</p>
  </div>
  <div class="page">
    <p>Example Attack</p>
  </div>
  <div class="page">
    <p>Example Attack</p>
  </div>
  <div class="page">
    <p>Goal: Secure JavaScript Apps</p>
    <p>Hardening benign-but-buggy applications  Fully automatic: no developer interaction  Detection / defense in browser alone</p>
    <p>No browser modifications or extensions  Handle unknown vulnerabilities</p>
  </div>
  <div class="page">
    <p>Related Work</p>
    <p>CSV has been shown to be prevalent [1,2]  84 out of top 10,000 websites vulnerable [1]  Bug finding systems</p>
    <p>FLAX [2], Kudzu [3]  Defense system</p>
    <p>Changes to sites [1], standards [1]</p>
    <p>[1] The Postman Always Rings Twice: Attacking and Defending postMessage in HTML5 Websites. Son et al., 2013</p>
    <p>[2] FLAX: Systematic Discovery of Client-side Validation Vulnerabilities in Rich Web Applications. Saxena et al., 2010</p>
    <p>[3] A Symbolic Execution Framework for JavaScript. Saxena et al., 2010</p>
  </div>
  <div class="page">
    <p>Anomaly detection system preventing CSV attacks</p>
    <p>Instrumentation of client-side JavaScript  Generates model of benign behavior  Two phases</p>
    <p>Learning of benign behavior  Prevent attacks</p>
    <p>ZigZag Overview</p>
  </div>
  <div class="page">
    <p>Learning Phase</p>
  </div>
  <div class="page">
    <p>Learning Phase</p>
  </div>
  <div class="page">
    <p>Learning Phase</p>
  </div>
  <div class="page">
    <p>Learning Phase</p>
  </div>
  <div class="page">
    <p>Learning Phase</p>
  </div>
  <div class="page">
    <p>Learning Phase</p>
  </div>
  <div class="page">
    <p>Learning Phase</p>
  </div>
  <div class="page">
    <p>Background: Program Invariants</p>
    <p>Assertions over variables at program points  x == y  x + 5 == y  x &lt; y</p>
    <p>Dynamic detection  Statistical likelihood  DAIKON [1]</p>
    <p>[1] The Daikon System for Dynamic Detection of Likely Invariants. Ernst et al.</p>
  </div>
  <div class="page">
    <p>Supported Invariants</p>
    <p>Data Types Invariants</p>
    <p>All Types</p>
    <p>Numbers Equality, inequality, oneOf</p>
    <p>String Length, equality, oneOf, isPrintable, isJSON, isEmail, isURL, isNumber</p>
    <p>Boolean Equality</p>
    <p>Objects All of the above for object properties</p>
    <p>Functions Calling function, return value</p>
  </div>
  <div class="page">
    <p>Generated Invariants</p>
    <p>Function is only invoked from the global scope</p>
    <p>typeof(v0) === 'object'</p>
    <p>&amp;&amp; v0.origin === 'http://domain-a.ru'</p>
    <p>v0.data === &quot;$('#right_buttons').hide();&quot; || v0.data === 'calculator()'</p>
  </div>
  <div class="page">
    <p>Enforcement Phase</p>
  </div>
  <div class="page">
    <p>Enforcement Phase</p>
  </div>
  <div class="page">
    <p>Enforcement Phase</p>
  </div>
  <div class="page">
    <p>Enforcement Phase</p>
  </div>
  <div class="page">
    <p>Enforcement Phase</p>
  </div>
  <div class="page">
    <p>Enforcement Phase</p>
  </div>
  <div class="page">
    <p>Enforcement Phase</p>
  </div>
  <div class="page">
    <p>Enforcement Details Original function x(a, b) {</p>
    <p>c = a + b;</p>
    <p>return c;</p>
    <p>}</p>
    <p>Instrumented function x(a, b) {</p>
    <p>var callcounter = __calltrace(functionid, codeid, sessionid);</p>
    <p>c = a + b;</p>
    <p>return __exittrace(functionid, callcounter, subexitid, codeid, sessionid, c);</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>Enforcement Details __calltrace = function(functionid, codeid, sessionid) {</p>
    <p>var v0 = arguments.callee.caller.caller.arguments[0];</p>
    <p>var v1 = ...</p>
    <p>if ( functionid === 0 ) {</p>
    <p>__assert(typeof(v0) === 'object' &amp;&amp; v0.origin === 'http://domain-a.ru' );</p>
    <p>__assert(v0.data === &quot;$('#right_buttons').hide();&quot; ||</p>
    <p>v0.data === 'calculator()' );</p>
    <p>...</p>
    <p>} else if ( functionid === 1 ) {</p>
    <p>...</p>
    <p>}</p>
    <p>...</p>
    <p>return __incCallCounter();</p>
    <p>} 34</p>
  </div>
  <div class="page">
    <p>Deployment Options</p>
    <p>Transparent proxy  Deploy at gateway  Some latency</p>
    <p>On-site rewriting  One-time instrumentation  Protects all users</p>
    <p>Invariant sharing  Proxy setup</p>
  </div>
  <div class="page">
    <p>Challenges</p>
    <p>In-Browser web app runtime performance  Instrumentation of functions that are not security</p>
    <p>relevant</p>
    <p>Server-side code templates  New code can be generated for individual page visits</p>
  </div>
  <div class="page">
    <p>Targeted Instrumentation</p>
    <p>What functions are relevant to be instrumented?</p>
    <p>Lightweight static analysis to refine instrumentation  document, window, ...  XHR, eval, postMessage,   Output: list of functions to be instrumented</p>
    <p>Benefits: increased performance at runtime</p>
  </div>
  <div class="page">
    <p>Server-side JavaScript Templates</p>
    <p>Parameterize code with:  Configuration  Username  Timestamps, etc.</p>
    <p>Programs differ, but AST is similar</p>
    <p>Singleton training sets: Anomaly detection not possible</p>
  </div>
  <div class="page">
    <p>Server-side JavaScript Templates</p>
    <p>Parameterize code with:  Configuration  User Name  Timestamps, etc.</p>
    <p>Programs differ, but AST is similar</p>
    <p>Singleton training sets: Anomaly detection not possible</p>
    <p>Q: How to generate invariants over classes of programs?</p>
  </div>
  <div class="page">
    <p>Server-side JavaScript Templates // Server-side JavaScript template</p>
    <p>var state = {</p>
    <p>user: {{username}},</p>
    <p>session: {{sessionid}}</p>
    <p>};</p>
    <p>// Client-side JavaScript code after template instantiation</p>
    <p>var state = {</p>
    <p>session: 2,</p>
    <p>user: &quot;UserZ&quot;,</p>
    <p>};</p>
    <p>var state = {</p>
    <p>user: &quot;UserY&quot;,</p>
    <p>session: 1</p>
    <p>};</p>
    <p>var state = {</p>
    <p>user: &quot;UserX&quot;,</p>
    <p>session: 0</p>
    <p>};</p>
  </div>
  <div class="page">
    <p>Server-side JavaScript Templates // Server-side JavaScript template</p>
    <p>var state = {</p>
    <p>user: {{username}},</p>
    <p>session: {{sessionid}}</p>
    <p>};</p>
    <p>// Client-side JavaScript code after template instantiation</p>
    <p>var state = {</p>
    <p>session: 2,</p>
    <p>user: &quot;UserZ&quot;</p>
    <p>};</p>
    <p>var state = {</p>
    <p>user: &quot;UserY&quot;,</p>
    <p>session: 1</p>
    <p>};</p>
    <p>var state = {</p>
    <p>user: &quot;UserX&quot;,</p>
    <p>session: 0</p>
    <p>};</p>
  </div>
  <div class="page">
    <p>Program Generalization</p>
    <p>When is code similar?  Values of primitives differ  Object properties differ</p>
    <p>AST can differ due to:  Object properties omitted  Order of properties</p>
    <p>Goal:  Structural comparison  Fast instrumentation</p>
  </div>
  <div class="page">
    <p>Structural Comparison</p>
    <p>Uninstrumented program - extract abstract syntax tree</p>
  </div>
  <div class="page">
    <p>Structural Comparison</p>
    <p>Detect program points for generalization</p>
  </div>
  <div class="page">
    <p>Structural Comparison</p>
    <p>Generalize: add placeholders</p>
  </div>
  <div class="page">
    <p>Structural Comparison</p>
    <p>Generalize: add placeholders</p>
    <p>Extract canonical string representation of AST for matching</p>
  </div>
  <div class="page">
    <p>Program Generalization</p>
    <p>Generalize program by:  Removing primitive values  Remove primitive object properties  Order object properties</p>
    <p>Instrument generalized version</p>
  </div>
  <div class="page">
    <p>Program Generalization (ctd.)</p>
    <p>When new program is detected as specialized version:  Differences from the template are detected  Generated patch-set is applied to instrumented version</p>
    <p>Result:  Anomaly detection extended from same to similar</p>
    <p>programs  Performance close to cached instrumentation</p>
  </div>
  <div class="page">
    <p>Evaluation: Security Benefits</p>
    <p>Four real-world vulnerable sites  Synthetic webmail application</p>
    <p>Attacks caught  Functionality retained</p>
  </div>
  <div class="page">
    <p>Evaluation: Performance</p>
    <p>Alexa Top 20  Median overhead: 2.01s (112%)  No false positives</p>
    <p>Microbenchmark: 0.66ms overhead</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Contributions</p>
    <p>In-browser anomaly detection system for hardening against previously unknown CSV vulnerabilities</p>
    <p>Invariant patching: extending invariant detection to server-side templates</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>CSV attack prevention through invariants  Real-world obstacles</p>
    <p>Server-side template  Function whitelisting</p>
    <p>ZigZag  Effective defense  Enforcement in browser only  Moderate performance overhead</p>
  </div>
  <div class="page">
    <p>Thank you for your attention</p>
    <p>@mweissbacher</p>
  </div>
</Presentation>
