<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Managing Large Graphs on Multi-Cores With Graph Awareness</p>
    <p>Vijayan, Ming, Xuetian, Frank, Lidong, Maya Microsoft Research</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Tremendous increase in graph data and applications  New class of graph applications that require real-time</p>
    <p>responses  Even batch-processed workloads have strict time-constraints</p>
    <p>Multi-core revolution  Default standards on most machines  Large-scale multi-cores with terabytes of main memory  Run workloads that are traditionally run on distributed</p>
    <p>systems</p>
    <p>Existing graph-processing systems lack support for both</p>
  </div>
  <div class="page">
    <p>A High-level Description of Grace</p>
    <p>Grace is an in-memory graph management and processing system</p>
    <p>Implements several optimizations  Graph-specific  Multi-core-specific</p>
    <p>Supports snapshots and transactional updates on graphs</p>
    <p>Evaluation shows that optimizations help Grace run several times faster than other alternatives</p>
    <p>Overview</p>
    <p>Details of optimizations</p>
    <p>Details on transactions</p>
    <p>Subset of results</p>
    <p>Outline</p>
  </div>
  <div class="page">
    <p>Keeps an entire graph in memory in smaller parts.</p>
    <p>Exposes C-style API for writing graph workloads, iterative workloads, and updates.</p>
    <p>Design driven by two trends - Graph-specific locality - Partitionable and</p>
    <p>parallelizable workloads</p>
    <p>v = GetVertex(Id) for (i=0; i&lt;v.degree;i++) neigh=v.GetNeighbor(i)</p>
    <p>Grace API</p>
    <p>Core 0 Core 1</p>
    <p>A</p>
    <p>B</p>
    <p>D</p>
    <p>C E</p>
    <p>Iterative Programs (e.g., PageRank)</p>
    <p>RPC Net</p>
    <p>Graph and Multi-core Optimizations</p>
    <p>An Overview of Grace</p>
  </div>
  <div class="page">
    <p>CC</p>
    <p>Data Structures</p>
    <p>A B D C Edge Pointer ArrayA 0</p>
    <p>B 1 C 2</p>
    <p>Vertex Index 1 1 1 0</p>
    <p>Vertex Allocation Map</p>
    <p>A B C</p>
    <p>B C B CEdges of A Edges of B Edges of C</p>
    <p>Vertex Log</p>
    <p>Edge Log</p>
    <p>Data Structures in a Partition</p>
  </div>
  <div class="page">
    <p>Graph-Aware Partitioning &amp; Placement</p>
    <p>Partitioning and placement  are they useful on a single machine?  Yes, to take advantage of multi-cores and memory hierarchies</p>
    <p>Solve them using graph partitioning algorithms  Divide a graph into sub-graphs, minimizing edge-cuts</p>
    <p>Grace provides an extensible library  Graph-aware: heuristic-based, spectral partitioning, Metis  Graph-agnostic: hash partitioning</p>
    <p>Achieve better layout by recursive graph partitioning  Recursively run graph partition until a sub-graph can fit in a cache line  Recompose all the sub-graphs to get the vertex layout</p>
  </div>
  <div class="page">
    <p>Platform for Parallel Iterative Computations</p>
    <p>Iterative computation platform implements bulk synchronous parallel model.</p>
    <p>Barrier</p>
    <p>Parallel computations</p>
    <p>Propagate updates</p>
    <p>It er</p>
    <p>ati on</p>
    <p>er ati</p>
    <p>on 2</p>
  </div>
  <div class="page">
    <p>Load Balancing and Updates Batching</p>
    <p>Solution1: Load balancing is implemented by sharing a portion of vertices</p>
    <p>Barrier</p>
    <p>B</p>
    <p>C</p>
    <p>DA</p>
    <p>Part0 Core0</p>
    <p>Part1 Core1</p>
    <p>Part2 Core2</p>
    <p>Cache line</p>
    <p>Problem1: overloaded partitions can affect performance</p>
    <p>Problem2: Updates in arbitrary order can increase cache misses</p>
    <p>Solution2: Updates batching is implemented by - grouping updates by their destination part - Issuing updates in a round-robin fashion</p>
  </div>
  <div class="page">
    <p>Grace supports structural changes to a graph</p>
    <p>BeginTransaction() AddVertex(X) AddEdge(X, Y) EndTransaction()</p>
    <p>Transactions use snapshot isolation - Instantaneous snapshots using CoW techniques - CoW can affect careful memory layout!</p>
    <p>Transactions on Graphs</p>
  </div>
  <div class="page">
    <p>Graphs: - Web (v:88M, e:275M), sparse - Orkut (v:3M, e:223M), dense</p>
    <p>Workloads: - N-hop-neighbor queries, BFS, DFS, PageRank, Weakly</p>
    <p>Connected Components, Shortest Path</p>
    <p>Architecture: - Intel Xeon-12 cores, 2 chips with 6 cores each - AMD Opteron-48 cores, 4 chips with 12 cores each</p>
    <p>Questions: - How well partitioning and placement work? - How useful are load balancing and updates batching? - How does Grace compare to other systems?</p>
    <p>Evaluation</p>
  </div>
  <div class="page">
    <p>Partitioning and Placement Performance On Intel</p>
    <p>Hash Heuristic Metis Hash + Placement Heuristic + Placement Metis + Placement</p>
    <p>Observation: For smaller number of partitions, partition algorithm didnt make a big difference</p>
    <p>Reason: All the partitions fit within cores of single chip minimizing communication cost</p>
    <p>Pa ge</p>
    <p>R an</p>
    <p>k Sp</p>
    <p>ee du</p>
    <p>p</p>
    <p>Orkut graph partitions Web graph partitions</p>
    <p>Observation: Placing neighboring vertices close together improves performance significantly</p>
    <p>Reason: L1, L2, and L3 cache and Data-TLB misses are reduced</p>
    <p>Observation: Careful vertex arrangement works better when graph partitioning is used for sparse graphs</p>
    <p>Reason: graph partitioning puts neighbors under same part helping better placement</p>
  </div>
  <div class="page">
    <p>Load Balancing and Updates Batching On Intel</p>
    <p>Load Balancing Load Balancing + Update Batching</p>
    <p>Pa ge</p>
    <p>R an</p>
    <p>k Sp</p>
    <p>ee du</p>
    <p>p</p>
    <p>Orkut graph partitions</p>
    <p>Web graph partitions</p>
    <p>Observation: Load balancing and updates batching didnt improve performance for web graph</p>
    <p>Reason: Sparse graphs can be partitioned better and there are fewer updates to send</p>
    <p>Observation: Batching updates gives better performance improvement for Orkut graph</p>
    <p>Reason: Updates batching reduces remote cache accesses 12</p>
    <p>R eti</p>
    <p>re d</p>
    <p>Lo ad</p>
    <p>Sibling Core Remote Chip 0</p>
    <p>Load Balancing + Updates Batching</p>
  </div>
  <div class="page">
    <p>Comparing Grace, BDB, and Neo4j</p>
    <p>BDB Neo4j GraceR</p>
    <p>un ni</p>
    <p>ng T</p>
    <p>im e</p>
    <p>(s )</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Grace explores graph-specific and multi-core specific optimizations</p>
    <p>What worked and what didnt (in our setup; your mileage might differ)</p>
    <p>Careful vertex placement in memory gave good improvements</p>
    <p>Partitioning and updates batching worked in most cases, but not always</p>
    <p>Load balancing wasnt as useful</p>
  </div>
</Presentation>
