<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Unearthing the TrustedCore A Critical Review on Huaweis Trusted Execution Environment</p>
    <p>August 11, 2020</p>
    <p>Marcel Busch, Johannes Westphal, Tilo Mller</p>
    <p>Friedrich-Alexander-University Erlangen-Nrnberg, Germany</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>TEEs are the backbone of many security-critical services on Android devices.</p>
    <p>What to expect?</p>
    <p>Share (general) insights from analysis of proprietary TEE, TrustedCore Elaborate on inner workings of selected components Show design and implementation flaws</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Background</p>
    <p>TrustedCore Architecture</p>
    <p>Secure Loader</p>
    <p>The Android Keystore System</p>
    <p>Memory Corruptions &amp; Exploitation</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Background</p>
  </div>
  <div class="page">
    <p>Trusted Execution Environments (TEEs)</p>
    <p>Isolated execution context providing Integrity and Confidentiality</p>
    <p>TEE-enabling technologies AMD Platform Security Processor Intel Software Guard Extensions ARM TrustZone</p>
  </div>
  <div class="page">
    <p>ARM TrustZone on ARMv8-A Systems</p>
    <p>Trusted OSRich OS</p>
    <p>Secure WorldNormal World</p>
    <p>Trusted Applications</p>
    <p>Secure Monitor</p>
    <p>Hypervisor</p>
    <p>EL0</p>
    <p>EL1</p>
    <p>EL3</p>
    <p>EL2</p>
    <p>Client Applications</p>
  </div>
  <div class="page">
    <p>TEEs in the Field (on Android)</p>
    <p>Qualcomm Secure Execution Environment 2016 [4, 3] Pixel devices Nexus devices</p>
    <p>Kinibi by Trustonic 2017 [5], 2018 [7, 8], 2019 [2] Samsung Exynos devices up to Samsung Galaxy S9</p>
    <p>TEEGris by Samsung 2019 [1] Samsung Exynos devices from Samsung Galaxy S10</p>
    <p>TrustedCore by Huawei 2015 [9], 2016 [10] Up to Emotion UI 8 (e.g., Huawei P9, P10, P20)</p>
    <p>iTrustee by Huawei N/A From Emotion UI 9 (e.g., Huawei P30 and P40)</p>
  </div>
  <div class="page">
    <p>Applications</p>
    <p>PIN/pattern/password authentication Biometric authentication</p>
    <p>Fingerprint FaceID</p>
    <p>Digital rights management Mobile payment Full-disk encryption</p>
  </div>
  <div class="page">
    <p>TrustedCore Architecture</p>
  </div>
  <div class="page">
    <p>Overview</p>
    <p>System Service</p>
    <p>libteec HAL lib</p>
    <p>System Service</p>
    <p>libteec HAL lib</p>
    <p>AppApp Trusted</p>
    <p>Application (TA)</p>
    <p>Trusted Application</p>
    <p>(TA)</p>
    <p>App</p>
    <p>TrustedCore Kernel Module</p>
    <p>swi-Handler</p>
    <p>Trusted Application</p>
    <p>(TA)</p>
    <p>Normal World Secure World</p>
    <p>N-EL1 N-EL0 S-EL0</p>
    <p>S-EL1</p>
    <p>SMC-Handler</p>
    <p>S-EL3</p>
    <p>teecd</p>
    <p>globaltask</p>
    <p>HiSilicon Android Linux Kernel Custom ARM Trusted Firmware</p>
    <p>TrustedCore Kernel</p>
    <p>TrustedCore Userspace</p>
    <p>Android Userspace</p>
    <p>Interrupt Handler</p>
    <p>System Service</p>
    <p>libteec HAL lib</p>
  </div>
  <div class="page">
    <p>TrustedCore  Normal World</p>
    <p>N-EL0 Apps System Services teecd</p>
    <p>N-EL1 Linux Kernel Module</p>
    <p>System Service</p>
    <p>libteec HAL lib</p>
    <p>System Service</p>
    <p>libteec HAL lib</p>
    <p>AppApp Trusted</p>
    <p>Application (TA)</p>
    <p>Trusted Application</p>
    <p>(TA)</p>
    <p>App</p>
    <p>TrustedCore Kernel Module</p>
    <p>swi-Handler</p>
    <p>Trusted Application</p>
    <p>(TA)</p>
    <p>Normal World Secure World</p>
    <p>N-EL1 N-EL0 S-EL0</p>
    <p>S-EL1</p>
    <p>SMC-Handler</p>
    <p>S-EL3</p>
    <p>teecd</p>
    <p>globaltask</p>
    <p>HiSilicon Android Linux Kernel Custom ARM Trusted Firmware</p>
    <p>TrustedCore Kernel</p>
    <p>TrustedCore Userspace</p>
    <p>Android Userspace</p>
    <p>Interrupt Handler</p>
    <p>System Service</p>
    <p>libteec HAL lib</p>
  </div>
  <div class="page">
    <p>TrustedCore  Secure World</p>
    <p>S-EL0 Trusted Applications globaltask</p>
    <p>S-EL1 TrustedCore Kernel</p>
    <p>S-EL3 Custom ARM TrustedFirmware</p>
    <p>System Service</p>
    <p>libteec HAL lib</p>
    <p>System Service</p>
    <p>libteec HAL lib</p>
    <p>AppApp Trusted</p>
    <p>Application (TA)</p>
    <p>Trusted Application</p>
    <p>(TA)</p>
    <p>App</p>
    <p>TrustedCore Kernel Module</p>
    <p>swi-Handler</p>
    <p>Trusted Application</p>
    <p>(TA)</p>
    <p>Normal World Secure World</p>
    <p>N-EL1 N-EL0 S-EL0</p>
    <p>S-EL1</p>
    <p>SMC-Handler</p>
    <p>S-EL3</p>
    <p>teecd</p>
    <p>globaltask</p>
    <p>HiSilicon Android Linux Kernel Custom ARM Trusted Firmware</p>
    <p>TrustedCore Kernel</p>
    <p>TrustedCore Userspace</p>
    <p>Android Userspace</p>
    <p>Interrupt Handler</p>
    <p>System Service</p>
    <p>libteec HAL lib</p>
  </div>
  <div class="page">
    <p>Secure Loader</p>
  </div>
  <div class="page">
    <p>Loading Encrypted Trusted Applications</p>
    <p>root@HWVNS-H:/ # ls /system/bin/*.sec /system/bin/6c8cf255-ca98-439e-a98e-ade64022ecb6.sec /system/bin/79b77788-9789-4a7a-a2be-b60155eef5f4.sec /system/bin/868ccafb-794b-46c6-b5c4-9f1462de4e02.sec /system/bin/883890ba-3ef8-4f0b-9c02-f5874acbf2ff.sec /system/bin/9b17660b-8968-4eed-917e-dd32379bd548.sec /system/bin/b4b71581-add2-e89f-d536-f35436dc7973.sec /system/bin/fd1bbfb2-9a62-4b27-8fdb-a503529076af.sec /system/bin/fpc_1021_ta.sec /system/bin/fpc_1021_ta_venus.sec /system/bin/fpc_1022_ta.sec /system/bin/syna_109A0_ta.sec</p>
  </div>
  <div class="page">
    <p>Loading Encrypted Trusted Applications (cont.)</p>
    <p>privkeyy</p>
    <p>pubkeyx</p>
    <p>Huawei</p>
    <p>pubkeyy</p>
    <p>privkeyx</p>
    <p>globaltask</p>
    <p>manifestenc</p>
    <p>Encrypted TA</p>
    <p>ELF signature</p>
    <p>ELFenc</p>
    <p>AES keysign ELF</p>
    <p>encrypt manifest</p>
    <p>decrypt manifest</p>
    <p>verify ELF signature</p>
    <p>decrypt ELF data</p>
    <p>System Service</p>
    <p>libteec HAL lib</p>
    <p>System Service</p>
    <p>libteec HAL lib</p>
    <p>AppApp Trusted</p>
    <p>Application (TA)</p>
    <p>Trusted Application</p>
    <p>(TA)</p>
    <p>App</p>
    <p>TrustedCore Kernel Module</p>
    <p>swi-Handler</p>
    <p>Trusted Application</p>
    <p>(TA)</p>
    <p>Normal World Secure World</p>
    <p>N-EL1 N-EL0 S-EL0</p>
    <p>S-EL1</p>
    <p>SMC-Handler</p>
    <p>S-EL3</p>
    <p>teecd</p>
    <p>globaltask</p>
    <p>HiSilicon Android Linux Kernel Custom ARM Trusted Firmware</p>
    <p>TrustedCore Kernel</p>
    <p>TrustedCore Userspace</p>
    <p>Android Userspace</p>
    <p>Interrupt Handler</p>
    <p>System Service</p>
    <p>libteec HAL lib</p>
  </div>
  <div class="page">
    <p>Protection of Crypto Keys</p>
    <p>wb_aes:</p>
    <p>pubkeyenc</p>
    <p>privkeyenc</p>
    <p>.text</p>
    <p>.data</p>
    <p>...</p>
    <p>...</p>
    <p>...</p>
    <p>...</p>
    <p>globaltask char globaltask[] = { ... }; // globaltask binary int main(){</p>
    <p>char *pubkey_dec[0x1000] = { 0 }; char *privkey_dec[0x1000] = { 0 }; char* (*wb_aes) (char*, char*, unsigned int);</p>
    <p>mprotect(globaltask, sizeof(globaltask), PROT_READ|PROT_WRITE|PROT_EXEC);</p>
    <p>pubkey_enc = globaltask + &lt;pubkeyenc_off&gt;; privkey_enc = globaltask + &lt;privkeyenc_off&gt;; wb_aes = globaltask + &lt;wb_aes_off&gt;;</p>
    <p>wb_aes(pubkey_enc, pubkey_dec, &lt;pubkey_sz&gt;); hexdump(&quot;privkey:&quot;, pubkey_dec, &lt;pubkey_sz&gt;);</p>
    <p>wb_aes(privkey_enc, privkey_dec, &lt;privkey_sz&gt;); hexdump(&quot;privkey:&quot;, pubkey_dec, &lt;privkey_sz&gt;);</p>
    <p>return 0; }</p>
  </div>
  <div class="page">
    <p>Scope &amp; Consequences</p>
    <p>Analysis of 133 firmware images distributed from July 2015 until April 2018 119 images using white-box crypto scheme Decryption of confidential TAs on models from 2016 (P9 Lite) until 2018 (P20 Lite) TCB size 16 times bigger than reported by Cerdeira et al. [6]</p>
  </div>
  <div class="page">
    <p>The Android Keystore System</p>
  </div>
  <div class="page">
    <p>Export-Protected Crypto Keys</p>
    <p>App keystored keymaster TA gen_key(alias, ...) gen key</p>
    <p>kbenc store alias : keyblobenc</p>
    <p>enc(alias, data)</p>
    <p>gen key</p>
    <p>encKEK(kb)</p>
    <p>enc(kbenc, data)</p>
    <p>decKEK(kbenc)</p>
    <p>enckb(data) dataencdataenc</p>
    <p>kb - keyblob KEK - Key Encryption Key 14</p>
  </div>
  <div class="page">
    <p>The Key Encryption Key (KEK)</p>
    <p>blob contains encrypted key and hidden params</p>
    <p>secret is a constant keyblob is protected by hmac</p>
    <p>secret is a constant</p>
    <p>struct keyblob { uint8_t hmac[32]; uint8_t iv[16]; uint8_t magic[4]; uint32_t unknown;</p>
    <p>uint32_t keymaterial_offset; uint32_t keymaterial_size; uint32_t key_params1_count_offset; uint32_t key_params2_count_offset; uint32_t key_params1_data_offset; uint32_t key_params1_data_size; uint32_t hidden_params_count_offset; uint32_t hidden_params_data_offset; uint32_t hidden_params_data_size; uint32_t keyblob_size; uint8_t blob[]; // C99 FAM</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>Scope &amp; Consequences</p>
  </div>
  <div class="page">
    <p>Memory Corruptions &amp; Exploitation</p>
  </div>
  <div class="page">
    <p>Memory Corruption in keymaster TA</p>
    <p>Stack-based buffer overflow in RSA key pair export routine</p>
  </div>
  <div class="page">
    <p>Exploit Mitigations</p>
    <p>Stack Canaries ASLR</p>
    <p>Stack canaries Constant values</p>
    <p>ASLR Low entropy Reloaded to same address after crash</p>
  </div>
  <div class="page">
    <p>Escalating to S-EL1/S-EL3</p>
    <p>~174 system calls available from S-EL0 e.g., mapping of physical memory pages to TA virtual address space Flawed/ineffective range check for S-EL1 and S-EL3</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Lessons Learned  Hardware-Protected Crypto Keys</p>
    <p>ARM TrustZone == TEE construction kit</p>
    <p>Confidentiality and integrity depend on hardware and software choices</p>
    <p>Severity of software-based protection designs</p>
    <p>Leakage of KEK disables device-binding for an entire generation of phones</p>
    <p>PIN/pattern/password can be brute-forced off-device</p>
  </div>
  <div class="page">
    <p>Lessons Learned  Attack Surface</p>
    <p>Trusted Computing Base is huge Trusted Computing Base attack surface is wide TAs are written in C/C++ and prone to memory corruption bugs Risk of exploitation not effectively mitigated</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>Reviewed Huaweis TrustedCore Examined and broke secure loader Examined and broke Android keystore system Found and exploited previously unknown memory corruption bug Escalated privileges to S-EL1/S-EL3 Shared lessons learned</p>
  </div>
  <div class="page">
    <p>Questions?</p>
    <p>eMail: marcel.busch@fau.de Twitter: @0ddc0de</p>
  </div>
  <div class="page">
    <p>References (1)</p>
    <p>T. Alexander.</p>
    <p>Reverse-engineering samsung exynos 9820 bootloader and tz.</p>
    <p>https://allsoftwaresucks.blogspot.com/2019/05/reverse-engineering-samsungexynos-9820.html, 2019.</p>
    <p>Accessed: 2019-08-30.</p>
    <p>A. Alexandre, G. Joffrey, and P. Maxime.</p>
    <p>A deep dive into samsungs trustzone (part 1).</p>
    <p>https://blog.quarkslab.com/a-deep-dive-into-samsungs-trustzone-part-1.html, 2019.</p>
    <p>Accessed: 2020-03-15.</p>
  </div>
  <div class="page">
    <p>References (2)</p>
    <p>G. Beniamini.</p>
    <p>Extracting qualcomms keymaster keys - breaking android full disk encryption.</p>
    <p>https://bits-please.blogspot.com/2016/06/extracting-qualcomms-keymasterkeys.html, 2016.</p>
    <p>Accessed: 2019-12-28.</p>
    <p>G. Beniamini.</p>
    <p>Qsee privilege escalation vulnerability and exploit (cve-2015-6639).</p>
    <p>https://bits-please.blogspot.com/2016/05/qsee-privilege-escalationvulnerability.html, 2016.</p>
    <p>Accessed: 2019-08-28.</p>
  </div>
  <div class="page">
    <p>References (3)</p>
    <p>G. Beniamini.</p>
    <p>Trust issues: Exploiting trustzone tees.</p>
    <p>https://googleprojectzero.blogspot.com/2017/07/trust-issues-exploitingtrustzone-tees.html, 2017.</p>
    <p>Accessed: 2019-08-28.</p>
    <p>D. Cerdeira, N. Santos, P. Fonseca, and S. Pinto.</p>
    <p>Sok: Understanding the prevailing security vulnerabilities in trustzone-assisted tee systems.</p>
    <p>In Proceedings of the IEEE Symposium on Security and Privacy (S&amp;P), San Francisco, CA, USA, pages 1820, 2020.</p>
  </div>
  <div class="page">
    <p>References (4)</p>
    <p>D. Komaromy.</p>
    <p>Unbox your phone - part i.</p>
    <p>https://medium.com/taszksec/unbox-your-phone-part-i-331bbf44c30c, 2018.</p>
    <p>Accessed: 2019-08-28.</p>
    <p>B. Lapid and A. Wool.</p>
    <p>Navigating the samsung trustzone and cache-attacks on the keymaster trustlet.</p>
    <p>In J. Lpez, J. Zhou, and M. Soriano, editors, Computer Security - 23rd European Symposium on Research in Computer Security, ESORICS 2018, Barcelona, Spain, September 3-7, 2018, Proceedings, Part I, volume 11098 of Lecture Notes in Computer Science, pages 175196. Springer, 2018.</p>
  </div>
  <div class="page">
    <p>References (5)</p>
    <p>D. Shen.</p>
    <p>Attacking your Trusted Core.</p>
    <p>https://www.blackhat.com/docs/us-15/materials/us-15-Shen-Attacking-YourTrusted-Core-Exploiting-Trustzone-On-Android.pdf, 2015.</p>
    <p>Accessed: 2019-11-28.</p>
    <p>N. Stephens.</p>
    <p>Behind the pwn of a trustzone.</p>
    <p>https://www.slideshare.net/GeekPwnKeen/nick-stephenshow-does-someoneunlock-your-phone-with-nose, 2017.</p>
    <p>Accessed: 2019-08-28.</p>
  </div>
</Presentation>
