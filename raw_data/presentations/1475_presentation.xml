<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Building(Workload(Independent(</p>
    <p>Storage(with(VT7trees(</p>
    <p>Pradeep Shetty, Richard Spillane, Ravikant Malpani, Binesh Andrews, Justin Seyster, and Erez Zadok</p>
    <p>Stony Brook University</p>
    <p>http://www.fsl.cs.stonybrook.edu/</p>
  </div>
  <div class="page">
    <p>File(Systems(Should((</p>
    <p>! Keeps(the(data(persistent(</p>
    <p>! Provides(crash(recovery(</p>
    <p>! Performs(efficiently( &quot; (SequenDal(reads(and(writes(</p>
    <p># Large(files:(video(files,(photos( &quot; (Random(reads(and(writes(</p>
    <p># Small(files(or(tuples:(file(metadata,(mp3(tags( ! Provides(low(overhead(applicaDon(level( transacDons(</p>
  </div>
  <div class="page">
    <p>Existing File Systems</p>
    <p>Data Structure SeqRead SeqWrite RandRead RandWrite</p>
    <p>(Extents + Block tree)</p>
    <p>LFS</p>
    <p>COW-Btree</p>
    <p>LSM-tree</p>
  </div>
  <div class="page">
    <p>Our(SoluDon(</p>
    <p>! Developed(a(single(data(structure( &quot; VT7trees(7(A(novel(extension(to(LSM7trees(</p>
    <p>&quot; Performs(comparable(or(superior(to(other(file( systems(on(all(the(four(workloads(</p>
    <p>&quot; Lends(itself(to(an(efficient(transacDonal( architecture(</p>
    <p>&quot; Flexible:( # Span(conDnuum(from(LSM7trees(to(LFSs(</p>
    <p>(</p>
  </div>
  <div class="page">
    <p>TradiDonal(LSM(Tree(</p>
    <p>RAM Storage : Log structured Copy</p>
    <p>SSTable00(</p>
    <p>MemTable(</p>
    <p>SI(</p>
    <p>BF(</p>
    <p>SI( BF(</p>
    <p>SI( BF( SI( BF(</p>
    <p>SI( BF(SSTable0k(</p>
    <p>SSTable10(</p>
    <p>SSTable1k(</p>
    <p>.</p>
    <p>= Secondary Index</p>
    <p>= Bloom Filter</p>
    <p>(</p>
    <p>(</p>
    <p>BF(Cache( (</p>
    <p>(</p>
    <p>(</p>
    <p>(</p>
    <p>(</p>
    <p>(</p>
    <p>(</p>
    <p>SI(Cache( (</p>
    <p>(</p>
    <p>(</p>
    <p>(</p>
    <p>(</p>
    <p>R</p>
    <p>R R</p>
    <p>kR kR</p>
    <p>SI( BF( BF(SI(</p>
    <p>Legend:</p>
    <p>. .</p>
    <p>Minor Compaction</p>
    <p>Each%SSTable%is% sequen0ally%wri4en%5%% no%seeks%or%write% amplifica0on%</p>
    <p>For%sequen0al%write%each% tuple%is%copied%logkN%</p>
    <p>File%Systems.%</p>
  </div>
  <div class="page">
    <p>VT7trees(and(SDtching(</p>
    <p>SSTable1( SSTable2( Fill(</p>
    <p>RAM : showing secondary indices</p>
    <p>Disk : Log-structured</p>
    <p>Copy(Merge(</p>
    <p>FragmentaDon!!((Z1,(Z2(and(Z3(are(only(67%(uDlized!(</p>
    <p>SI1( SI2(</p>
    <p>Z1 Z2 Z3</p>
    <p>SSTable3(</p>
    <p>SDtching(threshold(=(N(conDguous(non7overlapping(blocks(</p>
    <p>Copy(</p>
    <p>SI3(</p>
  </div>
  <div class="page">
    <p>Z1( Z2( Z3(</p>
    <p>RAM : showing secondary indices</p>
    <p>Disk : Log-structured</p>
    <p>SDtching(threshold(=(1( Con0guous%span%is(a(sequence(of(conDguous(blocks(</p>
    <p>&gt;=(sDtching(threshold(in(length( Score%=(total(length(of(conDguous(spans(/(number(of(conDguous(spans((Score(:(2( Score(:(1( Score(:(2(</p>
    <p>Selected for reclamation.</p>
    <p>Copy(</p>
    <p>DefragmentaDon(</p>
    <p>Relocate(</p>
    <p>Free(zone(</p>
  </div>
  <div class="page">
    <p>KVFS(Architecture(</p>
    <p>User Process</p>
    <p>User</p>
    <p>Kernel</p>
    <p>KVDB</p>
    <p>KVFS Layer</p>
    <p>VFS Socket Layer</p>
    <p>FUSE Ext4</p>
    <p>LibFUSE 1 2</p>
  </div>
  <div class="page">
    <p>Schema(for(File(System((</p>
    <p>! nmap:(( &quot; (Name(space(entries,(similar(to(dentries(</p>
    <p>((((({parent7inode#,(path7component},(inode#((</p>
    <p>! imap:((meta7data)( &quot; (Inode(ahributes(</p>
    <p>(((((inode#,(inode(ahributes(</p>
    <p>! dmap:((data)( &quot; (Files(data(blocks(</p>
    <p>((((({inode#,(offset},(data7block( (</p>
    <p>(</p>
    <p>((</p>
  </div>
  <div class="page">
    <p>KVDB(Architecture(</p>
    <p>fs-schema</p>
    <p>RAM</p>
    <p>Disk</p>
    <p>RAM</p>
    <p>Disk</p>
    <p>RAM</p>
    <p>Disk</p>
    <p>VT-tree VT-tree VT-tree nm</p>
    <p>ap</p>
    <p>im ap</p>
    <p>dm ap</p>
  </div>
  <div class="page">
    <p>RAM</p>
    <p>VT-tree</p>
    <p>RAM</p>
    <p>Disk</p>
    <p>VT-tree</p>
    <p>RAM</p>
    <p>Disk</p>
    <p>VT-tree</p>
    <p>RAM</p>
    <p>Disk</p>
    <p>VT-tree</p>
    <p>Snapshots(</p>
    <p>main-line fs-schema</p>
    <p>RAM</p>
    <p>Disk</p>
    <p>VT-tree</p>
    <p>nm ap</p>
    <p>im ap</p>
    <p>Disk</p>
    <p>dm ap</p>
    <p>main-line fs-schema</p>
    <p>nm ap</p>
    <p>im ap</p>
    <p>RAM</p>
    <p>Disk</p>
    <p>VT-tree</p>
    <p>dm ap</p>
    <p>Snapshot fs-schema Lookup for dmap</p>
    <p>Lookup for dmap</p>
    <p>Success</p>
    <p>Read-only</p>
    <p>Found(</p>
    <p>Not(there(</p>
  </div>
  <div class="page">
    <p>TransacDons(</p>
    <p>! VT7tree(is(inherently(transacDonal( ! Snapshot(based,(larger7than7RAM((</p>
    <p>&quot; (Each(transacDon(gets(its(own(private(snapshot( backed(by(VT7trees(</p>
    <p>! Avoids(double(writes,(only(redo(images( ! txn7begin,(txn7commit,(txn7abort(( ! ACID(with(two(modes(of(isolaDon(</p>
    <p>&quot; (Snapshot(isolaDon( &quot; (Serializability((</p>
    <p># Strongest( (</p>
    <p>( 02/13/2013 12 Building Workload Independent Storage with VT-trees - FAST'13</p>
  </div>
  <div class="page">
    <p>main-line</p>
    <p>Serializability(</p>
    <p>TXN (private)</p>
    <p>SS i</p>
    <p>(Read-only)</p>
    <p>txn-begin</p>
    <p>TXN (private)</p>
    <p>txn-begin</p>
    <p>User Process</p>
    <p>User Process</p>
    <p>SS i+1</p>
    <p>(Read-only)</p>
    <p>Process</p>
    <p>Take a snapshot</p>
    <p>Writes</p>
    <p>Writes</p>
    <p>Writes</p>
    <p>Read</p>
  </div>
  <div class="page">
    <p>TransacDon(Commit(</p>
    <p>fs-schema</p>
    <p>RAM</p>
    <p>Disk</p>
    <p>VT-tree</p>
    <p>dm ap</p>
    <p>RAM</p>
    <p>Disk</p>
    <p>VT-tree</p>
    <p>im ap</p>
    <p>RAM</p>
    <p>Disk</p>
    <p>VT-tree</p>
    <p>nm ap</p>
    <p>main-line</p>
    <p>fs-schema</p>
    <p>RAM</p>
    <p>Disk</p>
    <p>VT-tree</p>
    <p>dm ap</p>
    <p>RAM</p>
    <p>Disk</p>
    <p>VT-tree</p>
    <p>im ap</p>
    <p>RAM</p>
    <p>Disk</p>
    <p>VT-tree</p>
    <p>nm ap</p>
    <p>TXN(id=t+4)</p>
    <p>Journal</p>
  </div>
  <div class="page">
    <p>Experimental(Setup(</p>
    <p>! Two(Intel(Xeon(X5650(( &quot; (4(cores,(2.66GHz,(12MB(L2(</p>
    <p>! Booted(with(3GB(RAM(</p>
    <p>! 160GB(SATAII(Intel(X257M(SSD,(250GB( 7.2KRPM(SATA(disk(</p>
    <p>! Measured(throughput(of(the(SSD( &quot; (Random(read(7(15,000(ops/s(</p>
    <p>&quot; (Random(write(7(3,500(ops/s((</p>
    <p>&quot; (SequenDal(read(7(245MB/s((</p>
    <p>&quot; (SequenDal(write(7(107MB/s( 02/13/2013 15 Building Workload Independent Storage with VT-trees - FAST'13</p>
  </div>
  <div class="page">
    <p>SDtching(7(Experimental(Setup(</p>
    <p>! 8MB(Memtable(</p>
    <p>! SSTables(start(off(at(8MB(large(</p>
    <p>! Working(sets(at(least(3.3x(RAM(</p>
    <p>! No(transacDons,(just(the(data(structures(</p>
  </div>
  <div class="page">
    <p>SDtching(7(Random(Append(</p>
    <p>! We(randomly(append(to(2,040(files(</p>
    <p>! Each(append(is(4KB(</p>
    <p>! ConfiguraDons( &quot; no7compact(just(appends(8MB(memtables(</p>
    <p>&quot; f=0(always(sDtches(</p>
    <p>&quot; f=3,(f=15(sDtch(progressively(more(</p>
    <p>&quot; f=16383(is(equivalent(to(full(compacDon(</p>
    <p>! We(expect(to(trade(off(scans(for(inserDons(</p>
  </div>
  <div class="page">
    <p>E vi</p>
    <p>ct io</p>
    <p>ns (8</p>
    <p>M B</p>
    <p>e vi</p>
    <p>ct io</p>
    <p>ns )</p>
    <p>B lo</p>
    <p>ck In</p>
    <p>s (p</p>
    <p>ag es</p>
    <p>)</p>
    <p>Time (sec)</p>
    <p>Insertion throughput of 4K tuples</p>
    <p>Random(Append(</p>
    <p>+(No(compacDon(</p>
    <p>+(f(=(0(</p>
    <p>+(f(=(3(</p>
    <p>+(f(=(15(</p>
    <p>+(f(=(16,383(</p>
    <p>(</p>
    <p>No(compacDon(</p>
  </div>
  <div class="page">
    <p>E vi</p>
    <p>ct io</p>
    <p>ns (8</p>
    <p>M B</p>
    <p>e vi</p>
    <p>ct io</p>
    <p>ns )</p>
    <p>B lo</p>
    <p>ck In</p>
    <p>s (p</p>
    <p>ag es</p>
    <p>)</p>
    <p>Time (sec)</p>
    <p>Insertion throughput of 4K tuples</p>
    <p>Random(Append(</p>
    <p>Full(compacDon( +(No(compacDon(</p>
    <p>+(f(=(0(</p>
    <p>+(f(=(3(</p>
    <p>+(f(=(15(</p>
    <p>+(f(=(16,383(</p>
    <p>(</p>
  </div>
  <div class="page">
    <p>E vi</p>
    <p>ct io</p>
    <p>ns (8</p>
    <p>M B</p>
    <p>e vi</p>
    <p>ct io</p>
    <p>ns )</p>
    <p>B lo</p>
    <p>ck In</p>
    <p>s (p</p>
    <p>ag es</p>
    <p>)</p>
    <p>Time (sec)</p>
    <p>Insertion throughput of 4K tuples</p>
    <p>Random(Append(</p>
    <p>+(No(compacDon(</p>
    <p>+(f(=(0(</p>
    <p>+(f(=(3(</p>
    <p>+(f(=(15(</p>
    <p>+(f(=(16,383(</p>
    <p>(</p>
  </div>
  <div class="page">
    <p>E vi</p>
    <p>ct io</p>
    <p>ns (8</p>
    <p>M B</p>
    <p>e vi</p>
    <p>ct io</p>
    <p>ns )</p>
    <p>B lo</p>
    <p>ck In</p>
    <p>s (p</p>
    <p>ag es</p>
    <p>)</p>
    <p>Time (sec)</p>
    <p>Insertion throughput of 4K tuples</p>
    <p>Random(Append(</p>
    <p>+(No(compacDon(</p>
    <p>+(f(=(0(</p>
    <p>+(f(=(3(</p>
    <p>+(f(=(15(</p>
    <p>+(f(=(16,383(</p>
    <p>(</p>
  </div>
  <div class="page">
    <p>InserDon/Scan(Trade7Off(</p>
    <p>Th ro ug hp</p>
    <p>ut %(M</p>
    <p>B/ s) %</p>
    <p>S0tching%Threshold%</p>
    <p>Inser0on%Vs.%Scan% InserDon(Throuhput(by(f(</p>
    <p>Scan(Throughput(by(f(</p>
    <p>ut %(M</p>
    <p>B/ s) %</p>
    <p>S0tching%Threshold%</p>
    <p>Inser0on%Vs.%Point%Query%</p>
    <p>InserDon(Throuhput(by(f(</p>
    <p>Point(Query(Throughput(by(f(</p>
  </div>
  <div class="page">
    <p>Micro(Benchmark(on(KVFS(</p>
    <p>SeqRead SeqWrite RandRead RandomWrite</p>
    <p>P er</p>
    <p>fo rm</p>
    <p>an ce</p>
    <p>(O ps</p>
    <p>/S ec</p>
    <p>)</p>
    <p>Ext4</p>
    <p>FUSE-Ext4</p>
    <p>KVFS</p>
    <p>File size: 30GB, I/O size: 4KB</p>
  </div>
  <div class="page">
    <p>Other(Experiments(</p>
    <p>! KVDB(vs.(LevelDB( &quot; KVDB(23%(faster(for(small(and(6x(for(large(tuples(</p>
    <p>! File(system(macro(benchmark( &quot; Fileserver((22%(faster),(Webserver((7%(slow)(</p>
    <p>! TransacDonal(Performance( &quot; 10%(overhead((strong(isolaDon),(4%(faster((Non7 overlapping(parallel(txns)(</p>
    <p>! EvaluaDng(defragmentaDon(</p>
  </div>
  <div class="page">
    <p>Conclusions(</p>
    <p>! VT7trees(performs(well(for(all(the(four( workloads(</p>
    <p>! KVFS(performs(comparable(or(superior(to( Ext4(for(most(of(the(workloads(</p>
    <p>&quot; (Suitable(for(desktops(and(servers(</p>
    <p>! TransacDons(in(KVFS(are(highly(concurrent( and(has(minimal(overhead(</p>
    <p>! DefragmentaDon(works(as(a(complimentary( to(SDtching(</p>
  </div>
  <div class="page">
    <p>Pradeep J. Shetty Stony Brook University</p>
    <p>http://www.fsl.cs.sunysb.edu/</p>
    <p>Q&amp;A( pradeepjshetty@gmail.com</p>
  </div>
  <div class="page">
    <p>Related(Work(</p>
    <p>! Write7opDmized(databases(( &quot; (GTSSL,(Anvil,(BDBJE((</p>
    <p>! Log7structured(file(systems( &quot; (LFS,(ZFS,(WAFL(</p>
    <p>! TransacDonal(file(systems( &quot; (Amino,(Valor,(TxOS,(TxF,(QuickSilver(</p>
    <p>! Indexing(Systems( &quot; TokuFS,(Spyglass(</p>
  </div>
  <div class="page">
    <p>Future(Work(</p>
    <p>! Online(defragmenDng,(try(other(techniques( as(well(</p>
    <p>! Modify(and(evaluate(applicaDons(like(iTunes.(</p>
    <p>! Support(in7line(deduplicaDon(in(KVFS((</p>
  </div>
</Presentation>
