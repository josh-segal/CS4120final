<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>The Tail at Scale: How to Predict It?</p>
    <p>Minh Nguyen, Zhongwei Li, Feng Duan, Hao Che, Yu Lei, Hong Jiang Department of Computer Science and Engineering</p>
    <p>The University of Texas at Arlington</p>
  </div>
  <div class="page">
    <p>Motivation  Todays online-data-intensive (OLDI) applications</p>
    <p>must meet stringent request tail Service Level Objectives (SLOs) to retain customers</p>
    <p>A request tail SLO is generally expressed in the form of the pth-percentile request response time of xp milliseconds, e.g., p=99 and xp = 300 milliseconds</p>
  </div>
  <div class="page">
    <p>Motivation (Contd)</p>
    <p>OLDI applications are generally scale-out by design, i.e., each request involves task partitioning and merging and the slowest task determines the request response time</p>
    <p>A task subsystem may involve multiple replicated servers for fault tolerance, load balancing, and task tail-cutting by redundant task issuing</p>
    <p>A task-partition-merge system with task mapping to parallel subsystems</p>
    <p>A task subsystem with one dispatcher and three replicated servers</p>
  </div>
  <div class="page">
    <p>Motivation (Contd)</p>
    <p>Question: How to schedule tasks effectively at individual subsystems so that the request tail SLO will be met?</p>
    <p>Challenge: There is a missing link between request tail SLO and task performance budgets, in terms of, e.g., mean and variance of task response time</p>
    <p>Due to the lack of such a link, the approach taken today to meet tail SLOs is by resource overprovisioning</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Motivation Our design goal Prediction model Testing results Conclusions</p>
  </div>
  <div class="page">
    <p>Our Goal  Establish a link between request-level tail SLO and task</p>
    <p>response time budgets, independent of the underlying subsystems to be used</p>
    <p>The budgets are related to the low order statistics of the task response time, e.g., mean and variance, which can be measured easily, so that the budgets can be tested quickly</p>
    <p>Achieving this goal will allow tail-SLO-aware request scheduling problem to be degenerated into a simple budget testing problem at the task level. Possible use cases are:</p>
    <p>Offline Resource planning  Online distributed task scheduling</p>
  </div>
  <div class="page">
    <p>Prediction model</p>
    <p>Main Idea: 1. Treat each task subsystem as a black box 2. Seek the possibility of constructing the task-response-time</p>
    <p>distribution function F(x) as a function of E[X] and V[X] only Then the extreme value theorem says that the request-responsetime distribution function F(N)(x) = &quot;(x) =&gt; a tail SLO can then be readily expressed as a function of E[X] and V[X]</p>
  </div>
  <div class="page">
    <p>Prediction model</p>
    <p>It turns out this goal can be achieved in a high load region, say 90% or higher, where the resource provisioning is desirable</p>
    <p>It is based on the central limit theorem of queuing systems:</p>
    <p>The response time distribution F(x) will converge to an exponential distribution as the load increases, which is a function of E(X) only</p>
  </div>
  <div class="page">
    <p>Prediction model (contd)  We postulate that in the high load region of practical interest, the</p>
    <p>task response time distribution can be adequately approximated as a generalized exponential distribution.  Distribution function</p>
    <p>Mean and variance</p>
  </div>
  <div class="page">
    <p>Prediction model (contd)</p>
    <p>The pth-percentile request response time of xp,</p>
    <p>A link between any given tail SLO in terms of xp and p, and task budgets E[X] and V[X] is established.</p>
  </div>
  <div class="page">
    <p>Subsystem tail latency prediction  The accuracy of the prediction model is tested against different</p>
    <p>types of subsystems  Pure model-based subsystem  Hybrid measurement-and-model-based subsystem  Pure measurement-based subsystem</p>
    <p>A Solr cluster of three Amazon EC2 m3.medium instances, each responsible for the same sample shard of the Wikipedia index.</p>
    <p>The service time distributions used in the experiments  Empirical distribution measured from a Google search test leaf node</p>
    <p>(CV= 1.12)  A heavy-tailed truncated Pareto distribution (CV = 1.20)  A heavy-tailed Weibull distribution (CV = 1.50)  All the distributions have the same mean service time as the empirical one</p>
    <p>( = 4.22 ms)</p>
  </div>
  <div class="page">
    <p>Subsystem tail latency prediction (contd)</p>
    <p>The prediction errors for the pure measurement-based subsystem</p>
    <p>The models with the generalized exponential distribution outperform those with the exponential distribution.</p>
    <p>For all the cases studied, the prediction errors are within 10% at the load of 90%.</p>
  </div>
  <div class="page">
    <p>System tail latency prediction</p>
    <p>For all the cases studied, the prediction errors are within 10% at the load of 90%.</p>
  </div>
  <div class="page">
    <p>Facilitating resource provisioning A Use Case: Given size of parallel database D to be searched and monetary budget C, whether the system to be deployed in a cloud may sustain R requests per second, while meeting the pth-percentile request response time of L ms.  Build a replicated server cluster subsystem with m VMs by replicating a portion of</p>
    <p>the total database, i.e., D/N, to all the VM replicas;</p>
    <p>Measure the mean and variance of the task response time running a given task scheduling policy, at desired task rate  = R;</p>
    <p>Find the parameters of the generalized exponential distribution using the measured mean and variance task;</p>
    <p>Estimate the 99th-percentile request response time xp ;</p>
    <p>Finally, xp is compared against L and the total cost for running N VM clusters with m each is compared against the associated budget C to see if both the tail SLO and monetary budget are met. If both are met, a feasible tail-constrained resource provisioning is found. Otherwise, the performance targets and/or budget are revised and then rerun the procedure.</p>
  </div>
  <div class="page">
    <p>Conclusions  This paper proposed a simple model to predict the tail SLOs for</p>
    <p>OLDI applications, which requires only the mean and variance of task response time.</p>
    <p>The prediction model yields accurate prediction at the server loads of 90% or higher, which could be used to facilitate tailconstrained resource provisioning for OLDI applications.</p>
  </div>
  <div class="page">
    <p>Thanks!</p>
  </div>
</Presentation>
