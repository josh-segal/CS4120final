<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Simulation of Scale-Free Networks</p>
    <p>Gabriele DAngelo &lt;gda@cs.unibo.it&gt;</p>
    <p>htt // ib it/ d l /http://www.cs.unibo.it/gdangelo/</p>
    <p>joint work with: Stefano Ferretti</p>
    <p>Department of Computer Science University of Bologna</p>
    <p>SIMUTOOLS 2009, Rome (Italy)</p>
  </div>
  <div class="page">
    <p>Presentation outline</p>
    <p>Scale Free networksScale-Free networks</p>
    <p>Simulation of scale-free networks</p>
    <p>Gossiping protocols</p>
    <p>fixed probability of disseminationfixed probability of dissemination</p>
    <p>fixed fanout</p>
    <p>probabilistic broadcast</p>
    <p>Scale-free network simulator: PaScaS / ARTS / GAIA</p>
    <p>Experimental evaluation</p>
    <p>sequential vs. parallel vs. adaptive parallel execution</p>
    <p>Conclusions and future work</p>
  </div>
  <div class="page">
    <p>Scale-Free networks: definition</p>
    <p>A graph can be used to represent a A graph can be used to represent a</p>
    <p>network and its connectivity</p>
    <p>Degree of a node = number of neighbor</p>
    <p>nodes attached to them</p>
    <p>A scale-free network is a network whose</p>
    <p>degree distribution follows a power law</p>
    <p>If pk is the probability that a node has a degree equal to k then:</p>
    <p>pk ~ k-, for some constant value</p>
    <p>( ll 2 &lt; &lt; 3)</p>
    <p>(usually: 2 &lt;  &lt; 3)</p>
  </div>
  <div class="page">
    <p>Scale-Free networks: meaning and examples</p>
    <p>This means:</p>
    <p>a few highly connected nodes called hubsa few highly connected nodes, called hubs</p>
    <p>a very large number of poorly connected nodes</p>
    <p>Quite good to model several types of real networks: Quite good to model several types of real networks:</p>
    <p>computer networks (e.g. Web, Internet (?))</p>
    <p>evolving networks in biology</p>
    <p>transmission of diseases</p>
    <p>citation graphs</p>
    <p>i l t k t</p>
    <p>social networks, etc.</p>
  </div>
  <div class="page">
    <p>Simulation of scale-free networks</p>
    <p>R l t k ll d f h b f dReal networks are usually composed of a huge number of nodes</p>
    <p>Under the simulation point of view:</p>
    <p>large amount of memory used to represent the massively</p>
    <p>populated models</p>
    <p>huge amount of communication when simulating real-world huge amount of communication when simulating real world</p>
    <p>protocols on top of such models</p>
    <p>nodes in real-world networks are very heterogeneous (i.e. hubs</p>
    <p>leaf nodes different hardware and software characteristics)leaf nodes, different hardware and software characteristics)</p>
    <p>Lack of powerful tools to simulate such complex networks</p>
  </div>
  <div class="page">
    <p>Gossiping protocols: fixed probability</p>
    <p>Gossiping protocols have been implemented on top of the simulated Gossiping protocols have been implemented on top of the simulated</p>
    <p>scale-free networks, to build realistic case-studies</p>
    <p>Gossip #1: Fixed Probability Algorithm</p>
    <p>function INITIALIZATION()</p>
    <p>v  CHOOSE_PROBABILITY()</p>
    <p>For each message, the node</p>
    <p>randomly selects those edges function GOSSIP(msg)</p>
    <p>through which the message</p>
    <p>must be propagated</p>
    <p>for all nj in j do</p>
    <p>if RANDOM() &lt; v then</p>
    <p>(v = threshold value) SEND(msg, nj)</p>
    <p>end if</p>
    <p>end for</p>
  </div>
  <div class="page">
    <p>Gossiping protocols: fixed fanout</p>
    <p>Algorithm</p>
    <p>Gossip #2: Fixed Fanout</p>
    <p>Algorithm</p>
    <p>function INITIALIZATION()</p>
    <p>f t O ()</p>
    <p>Each message is sent to a fixed</p>
    <p>fanout  RETRIEVE_FANOUT()</p>
    <p>function GOSSIP(msg)g</p>
    <p>number of nodes (fanout), the</p>
    <p>receivers are selected at</p>
    <p>function GOSSIP(msg)</p>
    <p>if fanout  |j| then</p>
    <p>toSend  receivers are selected at</p>
    <p>random among the neighbors</p>
    <p>toSend  j</p>
    <p>else</p>
    <p>SELECT NODES()SELECT_NODES()</p>
    <p>end if</p>
    <p>for all n in toSend dofor all nj in toSend do</p>
    <p>SEND(msg, nj)</p>
    <p>d f</p>
    <p>end for</p>
  </div>
  <div class="page">
    <p>Gossiping protocols: probabilistic broadcast</p>
    <p>Algorithm</p>
    <p>Gossip #3: Probabilistic Broadcast</p>
    <p>Algorithm</p>
    <p>function INITIALIZATION()</p>
    <p>O O C S ()</p>
    <p>If the message is locally generated</p>
    <p>pb  PROBABILITY_BROADCAST()</p>
    <p>g y g</p>
    <p>then it is always broadcasted to all</p>
    <p>neighbors otherwise it is randomly</p>
    <p>function GOSSIP(msg)</p>
    <p>if (RANDOM() &lt; pb or neighbors, otherwise it is randomly</p>
    <p>decided if it has to be broadcasted or</p>
    <p>igno ed</p>
    <p>FIRST_TRANSMISSION()) then</p>
    <p>for all nj in j do</p>
    <p>ignored SEND(msg, nj)</p>
    <p>end for</p>
    <p>end if</p>
  </div>
  <div class="page">
    <p>PaScaS: the scale-free network simulator</p>
    <p>Parallel and distributed Scale-free network Simulator (PaScaS)Parallel and distributed Scale-free network Simulator (PaScaS)</p>
    <p>Implements the building of the scale-free networks (based on the</p>
    <p>preferential attachment algorithm), the gossiping protocols</p>
    <p>and some data analysis utilities</p>
    <p>Based on the Advanced RTI System (ARTS), a middleware</p>
    <p>used to implement sequential/parallel/distributed simulations that</p>
    <p>follows an event-based approach</p>
    <p>It can exploit the adaptive simulation features provided by the It can exploit the adaptive simulation features provided by the</p>
    <p>Generic Adaptive Interaction Architecture (GAIA)</p>
    <p>PaScaS will be freely available as part of ARTS 2.0, planned for</p>
    <p>release in the next weeks: http://pads.cs.unibo.it</p>
  </div>
  <div class="page">
    <p>Experimental evaluation: model parameters</p>
    <p>Model parameters and simulation scenarioModel parameters and simulation scenario</p>
    <p>Parameter Value</p>
    <p>number of nodes 3000, 6000, 9000, 12000</p>
    <p>exponential distribution message generation</p>
    <p>exponential distribution mean = 50 time-steps</p>
    <p>cache size (local to each node) 10 slots( )</p>
    <p>message Time To Live (TTL) 6 (fixed prob. and fanout) 4 (conditional broadcast)</p>
    <p>probability of dissemination (v) 0.5 (i.e. 50%)</p>
    <p>fanout value 5</p>
    <p>probability of broadcast (pb) 0.5 (i.e. 50%)</p>
    <p>simulated time 1000 time-steps (after building)</p>
  </div>
  <div class="page">
    <p>Experimental evaluation: execution architecture</p>
    <p>Hardware:Hardware:</p>
    <p>Dual processor unit, each processor equipped with a</p>
    <p>single-core Intel Xeon Gallatin CPU 2.80 GHz Hyper</p>
    <p>Threading, 2 GB RAM</p>
    <p>Software:Software:</p>
    <p>Debian GNU/Linux, Kernel 2.6.16.19</p>
    <p>PaScaS 0.9, ARTS 1.9.3</p>
    <p>Note: in case of monolithic (sequential) simulation, PaScaS uses only</p>
    <p>a single processor (also in presence of multiprocessors or multi-cores)</p>
    <p>a single processor (also in presence of multiprocessors or multi cores)</p>
  </div>
  <div class="page">
    <p>Experimental evaluation: sequential execution</p>
    <p>A single process is responsible to manage the whole simulation. The fixed</p>
    <p>probability has computational requirements higher than other gossip protocols</p>
  </div>
  <div class="page">
    <p>Experimental evaluation: parallel execution</p>
    <p>The simulation is obtained through the coordinated execution of a set The simulation is obtained through the coordinated execution of a set</p>
    <p>of components (Logical Processes, LPs)</p>
    <p>Each LP manages the evolution of a part of the model and it is</p>
    <p>usually run by a different CPU</p>
    <p>Each node in the scale-free net is modeled as a Simulated Entity</p>
    <p>(SE), therefore each LP manages a set of SEs</p>
    <p>SEs are randomly allocated in the LPs</p>
    <p>It is worth noting that the performance of a Parallel And Distributed</p>
    <p>Simulation (PADS) is a trade-off between: a) load parallelization; b)( ) ) p ; )</p>
    <p>communication overhead in the parallel/distributed architecture</p>
    <p>(also including synchronization)</p>
    <p>(also including synchronization)</p>
  </div>
  <div class="page">
    <p>Experimental evaluation: parallel execution (fixed probability)</p>
  </div>
  <div class="page">
    <p>Experimental evaluation: parallel execution (fixed fanout)</p>
  </div>
  <div class="page">
    <p>Experimental evaluation: parallel execution (cond. broadcast)</p>
  </div>
  <div class="page">
    <p>Experimental evaluation: monolithic vs. parallel execution</p>
    <p>Performance gap (%) between LP=1 (monolithic) and LP=4</p>
    <p>Nodes Gossip #1 Gossip #2 Gossip #3</p>
    <p>green = parallel faster than monolithic</p>
    <p>The parallel execution gives very unsatisfactory results</p>
    <p>The communication overhead introduced by the parallel execution The communication overhead introduced by the parallel execution</p>
    <p>does not balance the gain given by the load parallelization</p>
  </div>
  <div class="page">
    <p>Experimental evaluation: adaptive parallel execution The goal of this approach is to reduce the communication overheadThe goal of this approach is to reduce the communication overhead</p>
    <p>Observation: in PADS the LP-to-LP (that is CPU-to-CPU)</p>
    <p>communication represents and overheadp</p>
    <p>GAIA framework introduces an adaptive mechanism that:</p>
    <p>step by step analyzes the communication pattern of each p y p y o o p</p>
    <p>Simulated Entity (SE)</p>
    <p>using a migration-based approach, clusters the highly interacting g g pp , g y g</p>
    <p>SEs in the same LP</p>
    <p>introduces a cost (i.e. migration) but in many cases reduces the</p>
    <p>communication overhead</p>
    <p>The mechanism dynamically reacts to the model behavior</p>
    <p>It is based on heuristics that controls the migrations and aims to</p>
    <p>good load balancing in the execution architecture</p>
  </div>
  <div class="page">
    <p>Experimental evaluation: adaptive parallel execution</p>
  </div>
  <div class="page">
    <p>Experimental evaluation: adaptive parallel execution</p>
  </div>
  <div class="page">
    <p>Experimental evaluation: adaptive parallel execution</p>
  </div>
  <div class="page">
    <p>Parallel execution vs. adaptive parallel execution</p>
    <p>Performance gap (%) between LP=1 and LP=4 GAIA ON</p>
    <p>Nodes Gossip #1 Gossip #2 Gossip #3</p>
    <p>green = parallel faster than monolithic</p>
    <p>The results obtained by adaptive parallel execution are quite good</p>
    <p>The best performances are obtained for gossip #1 and gossip #3, The best performances are obtained for gossip #1 and gossip #3,</p>
    <p>because both protocols are communication-bounded</p>
  </div>
  <div class="page">
    <p>Conclusions and future work</p>
    <p>PaScaS is a novel freely available scale-free network simulator</p>
    <p>Parallel approach gives unsatisfactory results in the simulation of</p>
    <p>such complex networks</p>
    <p>An approach based on dynamic and adaptive clustering of the</p>
    <p>simulated entities can give valuable results</p>
    <p>F t k b ildi l ith f l f t Future work: more building algorithms for scale-free nets, more</p>
    <p>detailed heuristics for the clustering, support for multi-core</p>
    <p>processors, detailed evaluation of the performances of the gossip</p>
    <p>protocols in very heterogeneous networks</p>
    <p>p y g</p>
  </div>
  <div class="page">
    <p>For more information</p>
    <p>PaScaS / ARTS software: http://pads.cs.unibo.it</p>
    <p>Adaptive parallel/distributed simulation:</p>
    <p>G. D'Angelo, M. Bracuto. Distributed Simulation of Large Scale and</p>
    <p>Detailed Models. To appear, International Journal of Simulation and</p>
    <p>Process Modelling (IJSPM), Special issue on &quot;Parallel and Distributed</p>
    <p>Simulation, InderScience, 2009.</p>
    <p>(email to: gda@cs.unibo.it for the draft)</p>
  </div>
  <div class="page">
    <p>Simulation of Scale-Free Networks</p>
    <p>Gabriele DAngelo &lt;gda@cs.unibo.it&gt;</p>
    <p>htt // ib it/ d l /http://www.cs.unibo.it/gdangelo/</p>
    <p>joint work with: Stefano Ferretti</p>
    <p>Department of Computer Science University of Bologna</p>
    <p>SIMUTOOLS 2009, Rome (Italy)</p>
  </div>
</Presentation>
