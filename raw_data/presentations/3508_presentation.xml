<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>BurnBox</p>
    <p>Nirvan Tyagi</p>
    <p>Self-Revocable Encryption in a World of Compelled Access</p>
    <p>Usenix Security 2018</p>
    <p>Muhammad Haris Mughees</p>
    <p>Thomas Ristenpart Ian Miers</p>
  </div>
  <div class="page">
    <p>Compelled Access Setting</p>
    <p>file 1</p>
    <p>file 2</p>
    <p>file 3</p>
  </div>
  <div class="page">
    <p>Compelled Access Setting</p>
    <p>file 1</p>
    <p>file 2</p>
    <p>file 3</p>
  </div>
  <div class="page">
    <p>Compelled Access Setting</p>
    <p>file 1</p>
    <p>file 2</p>
    <p>file 3</p>
    <p>e.g., border crossing, airport security, police checkpoints</p>
  </div>
  <div class="page">
    <p>Compelled Access Setting</p>
    <p>file 1</p>
    <p>file 2</p>
    <p>file 3</p>
    <p>e.g., border crossing, airport security, police checkpoints</p>
    <p>e.g., journalists, dissidents, activists 5</p>
  </div>
  <div class="page">
    <p>Compelled Access Setting</p>
    <p>file 1</p>
    <p>file 2</p>
    <p>file 3</p>
    <p>e.g., border crossing, airport security, police checkpoints</p>
    <p>e.g., journalists, dissidents, activists 6</p>
    <p>&gt; 50% increase</p>
  </div>
  <div class="page">
    <p>Contributions</p>
    <p>BurnBox: Cloud storage secure in compelled access setting  Allow users to honestly comply with authorities while preserving</p>
    <p>confidentiality</p>
    <p>Secure deletion: permanently delete files</p>
    <p>Temporary revocation: self-revoke access to files temporarily</p>
    <p>Formal compelled access security notions and analysis</p>
    <p>Proof-of-concept prototype 7</p>
  </div>
  <div class="page">
    <p>Deniable/Steganographic file systems hide files by deceiving authority</p>
    <p>file 1</p>
    <p>file 2</p>
    <p>file 3</p>
    <p>Real Duress</p>
    <p>[CDNO96, ANS98,</p>
    <p>ADW97, Truecrypt]</p>
  </div>
  <div class="page">
    <p>file 1</p>
    <p>file 2</p>
    <p>file 3</p>
    <p>Deniable/Steganographic file systems hide files by deceiving authority</p>
    <p>[CDNO96, ANS98,</p>
    <p>ADW97, Truecrypt]</p>
  </div>
  <div class="page">
    <p>fake 1</p>
    <p>fake 2</p>
    <p>fake 3</p>
    <p>file 1</p>
    <p>file 2</p>
    <p>file 3</p>
    <p>Deniable/Steganographic file systems hide files by deceiving authority</p>
    <p>[CDNO96, ANS98,</p>
    <p>ADW97, Truecrypt]</p>
  </div>
  <div class="page">
    <p>file 1</p>
    <p>file 2</p>
    <p>file 3</p>
    <p>Limitation: High usability burden where deception is inherent to security  Maintenance of realistic-looking fake content  Ability to convincingly lie about duress key</p>
    <p>Deniable/Steganographic file systems hide files by deceiving authority</p>
    <p>fake 1</p>
    <p>fake 2</p>
    <p>fake 3</p>
    <p>[CDNO96, ANS98,</p>
    <p>ADW97, Truecrypt]</p>
  </div>
  <div class="page">
    <p>file 1</p>
    <p>file 2</p>
    <p>file 3</p>
    <p>Deniable/Steganographic file systems hide files by deceiving authority</p>
    <p>fake 1</p>
    <p>fake 2</p>
    <p>fake 3</p>
    <p>Limitation: High usability burden where deception is inherent to security  Maintenance of realistic-looking fake content  Ability to convincingly lie about duress key Is this really</p>
    <p>your key?</p>
    <p>[CDNO96, ANS98,</p>
    <p>ADW97, Truecrypt]</p>
  </div>
  <div class="page">
    <p>file 1</p>
    <p>file 2</p>
    <p>file 3</p>
    <p>Deniable/Steganographic file systems hide files by deceiving authority</p>
    <p>fake 1</p>
    <p>fake 2</p>
    <p>fake 3</p>
    <p>Limitation: High usability burden where deception is inherent to security  Maintenance of realistic-looking fake content  Ability to convincingly lie about duress key Is this really</p>
    <p>your key?</p>
    <p>[CDNO96, ANS98,</p>
    <p>ADW97, Truecrypt]</p>
  </div>
  <div class="page">
    <p>A Different Approach 1. Allow users to honestly comply at compelled access</p>
    <p>checkpoints</p>
  </div>
  <div class="page">
    <p>A Different Approach 1. Allow users to honestly comply at compelled access</p>
    <p>checkpoints</p>
    <p>Strawman: burner device or full wipe of device</p>
  </div>
  <div class="page">
    <p>A Different Approach 1. Allow users to honestly comply at compelled access</p>
    <p>checkpoints</p>
    <p>Strawman: burner device or full wipe of device</p>
    <p>BurnBox: selective temporary self-revocation of sensitive files</p>
  </div>
  <div class="page">
    <p>A Different Approach 1. Allow users to honestly comply at compelled access</p>
    <p>checkpoints</p>
    <p>Strawman: burner device or full wipe of device</p>
    <p>BurnBox: selective temporary self-revocation of sensitive files</p>
    <p>BurnBox: secure against passive cloud adversaries</p>
  </div>
  <div class="page">
    <p>Threat Model Untrusted Cloud Storage  Write-only store  Passive attacker</p>
    <p>file 1</p>
    <p>file 2</p>
    <p>file 3</p>
  </div>
  <div class="page">
    <p>Threat Model Untrusted Cloud Storage  Write-only store  Passive attacker</p>
    <p>file 1</p>
    <p>file 2</p>
    <p>file 3</p>
  </div>
  <div class="page">
    <p>Threat Model Untrusted Cloud Storage  Write-only store  Passive attacker</p>
    <p>file 1</p>
    <p>file 2</p>
    <p>file 3</p>
  </div>
  <div class="page">
    <p>Threat Model Untrusted Cloud Storage  Write-only store  Passive attacker</p>
    <p>Compelling Agent  Access to local device  User passwords  Cloud history</p>
    <p>file 1</p>
    <p>file 2</p>
    <p>file 3</p>
  </div>
  <div class="page">
    <p>Threat Model Untrusted Cloud Storage  Write-only store  Passive attacker</p>
    <p>Compelling Agent  Access to local device  User passwords  Cloud history</p>
    <p>Offline Restoration Cache  Inaccessible to</p>
    <p>compelling agent  Inaccessible to user</p>
    <p>during checkpoint</p>
    <p>file 1</p>
    <p>file 2</p>
    <p>file 3</p>
  </div>
  <div class="page">
    <p>BurnBox Overview</p>
    <p>file 1</p>
    <p>file 2</p>
    <p>file 3</p>
  </div>
  <div class="page">
    <p>Offline Restoration Cache</p>
    <p>Local Device</p>
    <p>file 1</p>
    <p>file 2</p>
    <p>file 3</p>
    <p>BurnBox Overview</p>
  </div>
  <div class="page">
    <p>file 1</p>
    <p>file 2</p>
    <p>file 3</p>
    <p>Untrusted Cloud Storage f0c531</p>
    <p>BurnBox Overview</p>
  </div>
  <div class="page">
    <p>file 1</p>
    <p>file 2</p>
    <p>file 3</p>
    <p>Before Compelled Access</p>
    <p>User selectively deletes and revokes sensitive files</p>
    <p>f0c531</p>
    <p>BurnBox Overview</p>
  </div>
  <div class="page">
    <p>file 1</p>
    <p>revoke</p>
    <p>delete</p>
    <p>Before Compelled Access</p>
    <p>User selectively deletes and revokes sensitive files</p>
    <p>f0c531</p>
    <p>BurnBox Overview</p>
  </div>
  <div class="page">
    <p>file 1</p>
    <p>During Compelled Access</p>
    <p>Deleted files and revoked files are inaccessible and are cryptographically indistinguishable</p>
    <p>Before Compelled Access</p>
    <p>User selectively deletes and revokes sensitive files</p>
    <p>file 1</p>
    <p>revoke</p>
    <p>delete</p>
    <p>f0c531</p>
    <p>BurnBox Overview</p>
  </div>
  <div class="page">
    <p>file 1</p>
    <p>revoke</p>
    <p>delete</p>
    <p>After Compelled Access</p>
    <p>User restores access to revoked files with access to restoration key</p>
    <p>During Compelled Access</p>
    <p>Deleted files and revoked files are inaccessible and are cryptographically indistinguishable</p>
    <p>Before Compelled Access</p>
    <p>User selectively deletes and revokes sensitive files</p>
    <p>f0c531</p>
    <p>BurnBox Overview</p>
  </div>
  <div class="page">
    <p>file 1</p>
    <p>file 2</p>
    <p>During Compelled Access</p>
    <p>Deleted files and revoked files are inaccessible and are cryptographically indistinguishable</p>
    <p>Before Compelled Access</p>
    <p>User selectively deletes and revokes sensitive files</p>
    <p>After Compelled Access</p>
    <p>User restores access to revoked files with access to restoration key</p>
    <p>f0c531</p>
    <p>BurnBox Overview</p>
  </div>
  <div class="page">
    <p>cc64c3</p>
    <p>Conventional client-side encryption</p>
    <p>f0c531</p>
    <p>f1.txt f2.txt f3.txt</p>
    <p>f0c531</p>
    <p>file 1</p>
    <p>file 2</p>
    <p>file 3</p>
    <p>filename encryption</p>
    <p>key encrypted</p>
    <p>file</p>
    <p>Device State</p>
  </div>
  <div class="page">
    <p>cc64c3</p>
    <p>Compelled access reveals local keys</p>
    <p>f0c531</p>
    <p>f1.txt f2.txt f3.txt</p>
    <p>f0c531</p>
    <p>file 1</p>
    <p>file 2</p>
    <p>file 3</p>
    <p>filename encryption</p>
    <p>key encrypted</p>
    <p>file</p>
    <p>Device State</p>
  </div>
  <div class="page">
    <p>cc64c3</p>
    <p>Delete rows of sensitive files</p>
    <p>f0c531</p>
    <p>f1.txt</p>
    <p>f3.txt 33</p>
    <p>f0c531</p>
    <p>file 1</p>
    <p>file 2</p>
    <p>file 3</p>
    <p>filename encryption</p>
    <p>key encrypted</p>
    <p>file</p>
    <p>Device State</p>
  </div>
  <div class="page">
    <p>cc64c3</p>
    <p>Delete rows of sensitive files</p>
    <p>f0c531</p>
    <p>f1.txt</p>
    <p>f3.txt 34</p>
    <p>f0c531</p>
    <p>file 1</p>
    <p>file 2</p>
    <p>file 3</p>
    <p>filename encryption</p>
    <p>key encrypted</p>
    <p>file</p>
    <p>Device State</p>
    <p>Problem 1: How to support revocation? Problem 2: Secure deletion of persistent state is hard.</p>
    <p>Forensic analysis</p>
  </div>
  <div class="page">
    <p>cc64c3</p>
    <p>f0c531</p>
    <p>f1.txt</p>
    <p>f3.txt 35</p>
    <p>f0c531</p>
    <p>file 1</p>
    <p>file 2</p>
    <p>file 3</p>
    <p>filename encryption</p>
    <p>key encrypted</p>
    <p>file</p>
    <p>Device State</p>
    <p>Revocation: use public-key encryption</p>
    <p>restoration ciphertext</p>
    <p>E(pk,cc64c3)</p>
    <p>E(pk,39731a)</p>
    <p>E(pk,1be052)</p>
  </div>
  <div class="page">
    <p>cc64c3</p>
    <p>f0c531</p>
    <p>f1.txt</p>
    <p>f3.txt 36</p>
    <p>f0c531</p>
    <p>file 1</p>
    <p>file 2</p>
    <p>file 3</p>
    <p>filename encryption</p>
    <p>key encrypted</p>
    <p>file</p>
    <p>Device State</p>
    <p>Revocation: use public-key encryption</p>
    <p>restoration ciphertext</p>
    <p>E(pk,39731a)</p>
    <p>RevokeE(pk,cc64c3)</p>
    <p>E(pk,1be052)</p>
  </div>
  <div class="page">
    <p>cc64c3</p>
    <p>f0c531</p>
    <p>f1.txt</p>
    <p>f3.txt 37</p>
    <p>f0c531</p>
    <p>file 1</p>
    <p>file 2</p>
    <p>file 3</p>
    <p>filename encryption</p>
    <p>key encrypted</p>
    <p>file</p>
    <p>Device State</p>
    <p>Revocation: use public-key encryption</p>
    <p>restoration ciphertext</p>
    <p>Revoke</p>
    <p>DeleteE(pk,39731a) E(pk,cc64c3)</p>
    <p>E(pk,000000)</p>
  </div>
  <div class="page">
    <p>cc64c3</p>
    <p>f0c531</p>
    <p>f1.txt</p>
    <p>f3.txt 38</p>
    <p>f0c531</p>
    <p>file 1</p>
    <p>file 2</p>
    <p>file 3</p>
    <p>filename encryption</p>
    <p>key encrypted</p>
    <p>file</p>
    <p>Device State</p>
    <p>Revocation: use public-key encryption</p>
    <p>restoration ciphertext</p>
    <p>Revoke</p>
    <p>Delete</p>
    <p>Problem 1: How to support revocation? Problem 2: Secure deletion of persistent state is hard.</p>
    <p>E(pk,39731a)</p>
    <p>E(pk,cc64c3)</p>
    <p>E(pk,000000)</p>
  </div>
  <div class="page">
    <p>Erasable Index</p>
    <p>cc64c3...f1.txt</p>
    <p>f2.txt 5707dd...</p>
    <p>f3.txt 1be052...</p>
    <p>f4.txt ca46b6...</p>
    <p>File keys stored in append-only table</p>
  </div>
  <div class="page">
    <p>Erasable Index</p>
    <p>cc64c3...f1.txt</p>
    <p>f2.txt 5707dd...</p>
    <p>f3.txt 1be052...</p>
    <p>f4.txt ca46b6...</p>
    <p>File keys stored in append-only table  Secure deletion of row keys with trusted hardware [RRBC13]</p>
    <p>Trusted hardware assumed to manage small effaceable storage  E.g., TPM, iOS/Android keystore APIs</p>
    <p>effaceable storage</p>
    <p>key tree</p>
  </div>
  <div class="page">
    <p>Erasable Index</p>
    <p>cc64c3...f1.txt</p>
    <p>f2.txt 5707dd...</p>
    <p>f3.txt 1be052...</p>
    <p>f4.txt ca46b6...</p>
    <p>File keys stored in append-only table  Secure deletion of row keys with trusted hardware [RRBC13]</p>
    <p>Trusted hardware assumed to manage small effaceable storage  E.g., TPM, iOS/Android keystore APIs</p>
    <p>effaceable storage</p>
    <p>key tree</p>
  </div>
  <div class="page">
    <p>Erasable Index</p>
    <p>cc64c3...f1.txt</p>
    <p>f2.txt 5707dd...</p>
    <p>f3.txt 1be052...</p>
    <p>f4.txt ca46b6...</p>
    <p>File keys stored in append-only table  Secure deletion of row keys with trusted hardware [RRBC13]</p>
    <p>Trusted hardware assumed to manage small effaceable storage  E.g., TPM, iOS/Android keystore APIs</p>
    <p>effaceable storage</p>
    <p>key tree</p>
  </div>
  <div class="page">
    <p>Erasable Index</p>
    <p>cc64c3...f1.txt</p>
    <p>f2.txt 5707dd...</p>
    <p>f3.txt 1be052...</p>
    <p>f4.txt ca46b6...</p>
    <p>File keys stored in append-only table  Secure deletion of row keys with trusted hardware [RRBC13]</p>
    <p>Trusted hardware assumed to manage small effaceable storage  E.g., TPM, iOS/Android keystore APIs</p>
    <p>effaceable storage</p>
    <p>key tree</p>
  </div>
  <div class="page">
    <p>Erasable Index</p>
    <p>cc64c3...f1.txt</p>
    <p>f2.txt 5707dd...</p>
    <p>f3.txt 1be052...</p>
    <p>f4.txt ca46b6...</p>
    <p>File keys stored in append-only table  Secure deletion of row keys with trusted hardware [RRBC13]</p>
    <p>Trusted hardware assumed to manage small effaceable storage  E.g., TPM, iOS/Android keystore APIs</p>
    <p>effaceable storage</p>
    <p>key tree</p>
  </div>
  <div class="page">
    <p>Erasable Index</p>
    <p>cc64c3...f1.txt</p>
    <p>f2.txt 5707dd...</p>
    <p>f3.txt 1be052...</p>
    <p>f4.txt ca46b6...</p>
    <p>File keys stored in append-only table  Secure deletion of row keys with trusted hardware [RRBC13]</p>
    <p>Trusted hardware assumed to manage small effaceable storage  E.g., TPM, iOS/Android keystore APIs</p>
    <p>effaceable storage</p>
    <p>key tree</p>
  </div>
  <div class="page">
    <p>Efficiency and other approaches?</p>
    <p>Related asymptotically better approaches not secure against threat model</p>
    <p>Puncturable pseudorandom functions [GMM86]  History-independent data structures [NT01]</p>
    <p>Erasable index uses:</p>
    <p>Storage on the order of number of files  Linear time search by filename</p>
    <p>In practice, this is actually fine</p>
  </div>
  <div class="page">
    <p>Security Analysis</p>
    <p>Provide formal security models</p>
    <p>Limit leakage to well-specified access pattern history</p>
    <p>Pseudonymous operation history</p>
    <p>Adversary observing:</p>
    <p>Cloud communication history</p>
    <p>Encrypted cloud contents</p>
    <p>Erasable index on local device</p>
    <p>Pseudonymous operation history E.g., Add file A at 1:00 Access file A at 4:30</p>
    <p>Open question: Inference attacks on file accesses?</p>
    <p>[CGPR15,NKW15]</p>
  </div>
  <div class="page">
    <p>Prototype  Implemented as file system in userspace (FUSE)</p>
    <p>Available at github.com/mhmughees/burnbox</p>
    <p>About as efficient as standard client-side</p>
    <p>encryption</p>
    <p>Untrusted App</p>
    <p>Container</p>
    <p>OS Kernel</p>
    <p>Persistent Storage</p>
    <p>File System</p>
    <p>BurnBox (FUSE)</p>
    <p>Trusted App</p>
    <p>Userspace</p>
    <p>(e.g. HDD, SSD)</p>
  </div>
  <div class="page">
    <p>Prototype  Implemented as file system in userspace (FUSE)</p>
    <p>Available at github.com/mhmughees/burnbox</p>
    <p>About as efficient as standard client-side</p>
    <p>encryption</p>
    <p>Untrusted App</p>
    <p>Container</p>
    <p>OS Kernel</p>
    <p>Persistent Storage</p>
    <p>File System</p>
    <p>Trusted App</p>
    <p>Userspace</p>
    <p>(e.g. HDD, SSD)</p>
    <p>BurnBox (FUSE)</p>
  </div>
  <div class="page">
    <p>Prototype  Implemented as file system in userspace (FUSE)</p>
    <p>Available at github.com/mhmughees/burnbox</p>
    <p>About as efficient as standard client-side</p>
    <p>encryption</p>
    <p>Untrusted App</p>
    <p>Container</p>
    <p>OS Kernel</p>
    <p>Persistent Storage</p>
    <p>File System</p>
    <p>BurnBox (FUSE)</p>
    <p>Trusted App</p>
    <p>Userspace</p>
    <p>(e.g. HDD, SSD)</p>
  </div>
  <div class="page">
    <p>Prototype  Implemented as file system in userspace (FUSE)</p>
    <p>Available at github.com/mhmughees/burnbox</p>
    <p>About as efficient as standard client-side</p>
    <p>encryption</p>
    <p>Untrusted App</p>
    <p>Container</p>
    <p>OS Kernel</p>
    <p>Persistent Storage</p>
    <p>File System</p>
    <p>BurnBox (FUSE)</p>
    <p>Trusted App</p>
    <p>Userspace</p>
    <p>(e.g. HDD, SSD)</p>
    <p>Best effort to address application and OS leakage</p>
    <p>[CHKGKS08,DLJKSXSW12]</p>
    <p>Memory-locked pages</p>
    <p>Containers for untrusted applications</p>
    <p>Guidelines for off-the-shelf OS configurations</p>
  </div>
  <div class="page">
    <p>Contributions  BurnBox: Cloud storage secure in compelled access setting</p>
    <p>Allow users to honestly comply with authorities while preserving</p>
    <p>confidentiality</p>
    <p>Secure deletion: permanently delete files</p>
    <p>Temporary revocation: self-revoke access to files temporarily</p>
    <p>Formal compelled access security notions and analysis</p>
    <p>Proof-of-concept prototype  github.com/mhmughees/burnbox</p>
  </div>
</Presentation>
