<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Look Whos Talking</p>
    <p>Discovering Dependencies between Virtual Machines Using CPU Utilization</p>
    <p>Renuka Apte, Liting Hu, Karsten Schwan, Arpan Ghosh</p>
    <p>Georgia Institute of Technology</p>
    <p>Talk by Renuka Apte *</p>
    <p>*Currently at NVIDIA corporation</p>
  </div>
  <div class="page">
    <p>State of Virtualization Adoption</p>
    <p>* Source: Symantec State of the Data Center Survey 2010</p>
  </div>
  <div class="page">
    <p>Challenges to Virtualization Adoption</p>
    <p>Manageability is top challenge in adopting virtualization</p>
    <p>SNW Virtualization Summit 09 Troubleshooting in the Dark: 27 % identified a lack of visibility</p>
    <p>and tools as the largest troubleshooting challenge in virtual environments</p>
    <p>- Survey of Interop 2009 participants 36% said they lacked the appropriate tools to monitor their virtual servers and desks, citing this as the greatest problem with</p>
    <p>virtualization</p>
    <p>- Survey of Interop 2010 participants</p>
    <p>53.9% indicated VM sprawl and flexible deployment capabilities leading to unmonitored/invisible machines as a security concern related to virtualization</p>
    <p>- PRISM Microsystems State of Virtualization Security Survey</p>
  </div>
  <div class="page">
    <p>The Butterfly Effect In The Virtualized Cloud</p>
    <p>Small variations in a complex, dynamic system...larger and more complex variations over the long term</p>
    <p>Problem compounded by:</p>
    <p>multi-tier application infrastructure</p>
    <p>VM/application inter-dependencies</p>
    <p>distributed architectures</p>
    <p>Dynamic creation and migration of VMs (VM Sprawl)</p>
    <p>Lack of visibility into VMs workload</p>
    <p>VM migration, aggressive DRS and automated DR can trigger unforeseen consequences if done without realizing the big picture</p>
  </div>
  <div class="page">
    <p>Typical Virtual Cloud</p>
    <p>....</p>
    <p>Rack 1</p>
    <p>Physical Server 1</p>
    <p>Virtualization Layer</p>
    <p>Map Reduce Master</p>
    <p>Web Server 1</p>
    <p>Web Server 2</p>
    <p>Physical Server 2</p>
    <p>Virtualization Layer</p>
    <p>Map Reduce Slave</p>
    <p>Map Reduce Slave</p>
    <p>Rack n</p>
    <p>Physical Server 4</p>
    <p>Virtualization Layer</p>
    <p>Application logic</p>
    <p>Server 1 Database Server 1</p>
    <p>Database Server 2</p>
    <p>Physical Server 3</p>
    <p>Virtualization Layer</p>
    <p>Map Reduce Slave</p>
    <p>Application logic</p>
    <p>Server 2</p>
  </div>
  <div class="page">
    <p>Dependencies Between VMs</p>
    <p>VM ensembles spread across multiple machines</p>
    <p>Dependence relationships: uses relations in which two VMs communicate because one VM offers a service used by another</p>
  </div>
  <div class="page">
    <p>Knowledge of VM Interdependencies Helps</p>
    <p>Better VM placement and migration decisions</p>
    <p>Better resource allocation</p>
    <p>Better disaster recovery automation</p>
    <p>Better troubleshooting  Identify cause of failures</p>
    <p>Identifying anomalies in the system</p>
  </div>
  <div class="page">
    <p>How Does LWT Achieve This?</p>
    <p>together</p>
  </div>
  <div class="page">
    <p>Intuition  In a multi-tier application, VMs have request-response interactions</p>
    <p>The servers workload is determined by the clients workload  Heavier the workload of the client, the more requests it makes</p>
    <p>Prominent spike in the servers CPU usage at the same time when there is a spike in the clients CPU usage</p>
  </div>
  <div class="page">
    <p>Monitoring</p>
    <p>CPU utilization sampled per VM using xentop</p>
    <p>Sampling Period - Too small : increases computation Too large : Might miss relevant spikes - Optimal period chosen as 1 sec</p>
    <p>Sample size  Increases with increasing # of VMs</p>
    <p>300 seconds: Dependency calculation can occur every ~ 5 minutes</p>
    <p>Perturbation  Dynamically change resources (CPU cycles) available to VM</p>
    <p>Performance hit is reflected in dependent VMs, adds more time dependent spikes</p>
  </div>
  <div class="page">
    <p>Modeling  Auto Regressive modeling summarizes time series CPU usage of each</p>
    <p>VM</p>
    <p>Captures how one spike is influenced by previous CPU spikes</p>
    <p>AR model is a weighted sum of p previous values of time series dataset</p>
    <p>Xt is the CPU utilization value at time t</p>
    <p>are model parameters</p>
    <p>p is order of the model</p>
    <p>is white noise</p>
  </div>
  <div class="page">
    <p>Similarity In Dependent AR Models</p>
    <p>Coefficients of the AR models of 2 interdependent VMs</p>
  </div>
  <div class="page">
    <p>Selecting Order Of AR Model</p>
    <p>p will increase as system becomes more complex</p>
    <p>Very large p results in over-fitting</p>
    <p>40-50 yields best accuracy for current setup</p>
  </div>
  <div class="page">
    <p>Clustering  VMs clustered based on Euclidean distance between their AR</p>
    <p>models</p>
    <p>Similar spikes at time t imply similar coefficient of Xt in AR model</p>
    <p>These AR models will be closer and form cluster</p>
    <p>K-means divides data into K clusters  Iteratively selects K centroids for data</p>
    <p>K is provided manually</p>
  </div>
  <div class="page">
    <p>Visualization of AR models in Space</p>
  </div>
  <div class="page">
    <p>Experimental Setup  31 VMs spread over 5 physical servers</p>
    <p>Xen 3.1.2 virtual machine monitor</p>
    <p>512 MB RAM/ VM</p>
    <p>Applications/ Workloads  RUBiS : eBay like benchmark</p>
    <p>Selling, browsing, bidding implemented as 3 tier application</p>
    <p>An instance uses 4VMs  Apache, Tomcat, MySQL and RUBiS client</p>
    <p>Hadoop MapReduce Framework</p>
    <p>An instance uses 3 VMs  1 master and 3 slave nodes</p>
    <p>Iperf : Network testing tool</p>
    <p>An instance uses 2 VMs  sender and receiver</p>
  </div>
  <div class="page">
    <p>Results  Dependencies identified with overall accuracy of 97.15%</p>
    <p>91.67% true positives</p>
    <p>99.08% true negatives</p>
    <p>The All workload consists of 3 Hadoop, 4 RUBiS and 2 Iperf instances. Total of 31 VMs</p>
    <p>Workloads True Positives True</p>
    <p>Negatives False</p>
    <p>Positives False</p>
    <p>Negatives</p>
    <p>RUBiS No Perturb 12 54 0 0</p>
    <p>Perturb 12 54 0 0</p>
    <p>Hadoop No Perturb 6 21 6 3</p>
    <p>Perturb 9 27 0 0</p>
    <p>All No Perturb 22 315 12 2</p>
    <p>Perturb 22 324 3 2</p>
  </div>
  <div class="page">
    <p>Why it works ?</p>
    <p>RUBiS  Identified dependencies with 100% accuracy</p>
    <p>Lot of request-response interaction between the VMs</p>
    <p>Follows typical n-tier application model used in DCs today</p>
    <p>Hadoop  Results more non-intuitive</p>
    <p>1 master, all slaves</p>
    <p>Mappers and reducers communicate intermediate results via files</p>
    <p>Communicate to find location of input/output</p>
  </div>
  <div class="page">
    <p>Hadoop CPU usage of Dependent VMs</p>
  </div>
  <div class="page">
    <p>Perturbation</p>
    <p>Changed CPU cycles (credits) available to some VMs while sampling</p>
    <p>Affected performance of dependent VMs</p>
    <p>Added spikes to CPU utilization of dependent VMs</p>
    <p>RUBiS identified 100% without perturbation</p>
    <p>Significant accuracy increase for Hadoop</p>
  </div>
  <div class="page">
    <p>Scalability &amp; Time Complexity</p>
    <p>Time complexity depends on  # of VMs (N)</p>
    <p>Order of AR model (p)</p>
    <p>Sample size</p>
    <p>Finding AR models is linear in N  Calculated at each host and sent to central machine for clustering</p>
    <p>K-means complexity is  (N)  Clustered a fictional dataset of 1200 VMs and p = 100 in 1.5 mins</p>
    <p>LWT Can easily scale for a cloud DC</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>LWT identifies inter-VM dependencies by considering only CPU usage</p>
    <p>LWT is non-intrusive, real-time, scalable and application agnostic</p>
    <p>Monitor Model Cluster</p>
    <p>97.15% average overall accuracy</p>
  </div>
  <div class="page">
    <p>Future Work</p>
    <p>Deploy on large scale DC</p>
    <p>Add more metrics to identify dependencies accurately</p>
    <p>Applications where many VMs depend on 1 VM for service</p>
    <p>Automate calculation of sample size, AR model order, K</p>
    <p>Handle conditions where the initial assumption breaks</p>
  </div>
  <div class="page">
    <p>Questions?</p>
  </div>
  <div class="page">
    <p>How K-means Works?</p>
    <p>K = 2. K centroids selected in each iteration</p>
    <p>Source: Pattern Recognition and Machine Learning by Christopher M. Bishop</p>
  </div>
  <div class="page">
    <p>Recent Virtualized DC issues</p>
    <p>About 165,000 Web sites knocked offline by NaviSite outage  Virtual migration of servers without considering dependencies</p>
    <p>Interdependent server brought up in wrong order</p>
    <p>Amazon EC2 hit by botnet  Instance compromised by Zeus botnet controller</p>
  </div>
  <div class="page">
    <p>Selection of Sampling Period</p>
    <p>Correlation matrix for sampling period = 3 sec, VMs above cutoff = 0.9 are dependent</p>
    <p>Optimal period of 1 sec determined using such matrices</p>
  </div>
  <div class="page">
    <p>Googles App Engine Datastore Failure  Repository for determining entity location became overloaded causing</p>
    <p>read/write requests to time out</p>
    <p>App Engine waits 30 seconds to complete a Datastore request causing waiting requests to pile up</p>
    <p>Requests start to fail, regardless of whether or not they used the Datastore</p>
    <p>Primary and secondary Datastore out of sync</p>
    <p>Unapplied writes also affected the billing state of a approximately 0.3% of App Engine applications</p>
  </div>
  <div class="page">
    <p>Properties of a Dependence Discovery System</p>
    <p>Near real-time  DC applications and infrastructure are very dynamic</p>
    <p>Non intrusive  Minimal modifications to applications, OS &amp; hypervisor</p>
    <p>Lightweight  Should not rob CPU/memory from VMs</p>
    <p>Application &amp; Guest OS independent  Requires no knowledge of what the VM is running</p>
    <p>Scalable</p>
    <p>Automated  Minimal or no pre-config by admin</p>
  </div>
</Presentation>
