<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Zero-delay Lightweight Defenses against Website Fingerprinting</p>
    <p>Jiajun GONG, Tao Wang</p>
  </div>
  <div class="page">
    <p>Website Fingerprinting</p>
    <p>WebsiteTor network</p>
  </div>
  <div class="page">
    <p>Website Fingerprinting (WF)</p>
    <p>outgoing incoming Time/volume information</p>
    <p>Information leakage</p>
    <p>fingerprint</p>
    <p>Network traffic</p>
    <p>WF attackers: ISP, someone under the same network</p>
  </div>
  <div class="page">
    <p>Website Fingerprinting</p>
    <p>kNN [Wang et al., 2014]  CUMUL [Panchenko et al., 2016]  kFP [Jamie Hayes and George Danezis, 2016]  DF [Sirinam et al., 2018]</p>
    <p>&gt; 90% recall Thre</p>
    <p>at t o pr</p>
    <p>ivac y!</p>
  </div>
  <div class="page">
    <p>Defense</p>
    <p>WTF-PAD [Juarez et al. 2016]</p>
    <p>Abnormal time gap</p>
    <p>Insert a dummy packet</p>
    <p>Tamaraw [Cai et al. 2014]</p>
    <p>delay real packets Insert dummy packets</p>
    <p>Broken by DF!</p>
    <p>Too expensive</p>
  </div>
  <div class="page">
    <p>Evaluation of a defense</p>
    <p>Privacy  Overhead:</p>
    <p>data overhead = # dummy packets</p>
    <p># real packets cost more bandwidth</p>
    <p>time overhead = tnew  told</p>
    <p>told</p>
    <p>causing delay</p>
    <p>Browsing experience</p>
  </div>
  <div class="page">
    <p>Defense Question: Better defense?</p>
    <p>We proposed two zero-delay lightweight defenses:</p>
    <p>FRONT and GLUE</p>
  </div>
  <div class="page">
    <p>FRONT  General Idea</p>
    <p>Original traffic</p>
    <p>Client dummy</p>
    <p>Server dummy</p>
    <p>Obfuscated traffic</p>
    <p>Timeline 8</p>
  </div>
  <div class="page">
    <p>FRONT</p>
    <p>Trace Front</p>
    <p>Pr(0 &lt; t  w) = 40 %</p>
    <p>Intuition 1: Obfuscating feature-rich trace fronts</p>
    <p>Why Rayleigh distribution?</p>
    <p>Client dummy</p>
    <p>Server dummy</p>
    <p>How to schedule these dummy packets?</p>
    <p>sample</p>
    <p>Rayleigh Distribution</p>
  </div>
  <div class="page">
    <p>FRONT</p>
    <p>Sample</p>
    <p>timestamps</p>
    <p>n</p>
    <p>f(t; w) = t w2</p>
    <p>et 2/2w2(t &gt; 0)</p>
    <p>Random Variable</p>
    <p>Random Variable</p>
  </div>
  <div class="page">
    <p>FRONT  Set parameters:  Sample a number of dummy packets</p>
    <p>Decide the shape of distribution</p>
    <p>Sample n timestamps</p>
    <p>N, Wmin, Wmax</p>
    <p>n  Uniform(1,N)</p>
    <p>w  Uniform(Wmin, Wmax)</p>
    <p>Intuition 2: Trace-to-trace randomness</p>
  </div>
  <div class="page">
    <p>Experiment Setup Dataset: 100 x 100 + 10000</p>
    <p>Monitored non-monitored</p>
    <p>Attackers goal:</p>
    <p>To identify whether the client is visiting a monitored page</p>
    <p>and which monitored webpage?</p>
  </div>
  <div class="page">
    <p>Experiment Result  Compared with WTF-PAD:</p>
    <p>~ 33% data overhead, 0% time overhead</p>
    <p>F1 s</p>
    <p>co re</p>
    <p>kNN CUMUL kFP DF</p>
    <p>Undefended WTF-PAD FRONT</p>
    <p>Attack</p>
    <p>F1 = 2  recall  precision recall + precision</p>
  </div>
  <div class="page">
    <p>Experiment Result  Compared with Tamaraw:</p>
    <p>F1 s</p>
    <p>co re</p>
    <p>kNN CUMUL kFP DF</p>
    <p>Tamaraw FRONT</p>
    <p>Attack 14</p>
    <p>ov er</p>
    <p>he ad</p>
    <p>(% )</p>
    <p>Data overhead Time overhead</p>
    <p>~ 5 times</p>
  </div>
  <div class="page">
    <p>GLUE</p>
    <p>Intuition:</p>
    <p>difficulty of solving split problem [Juarez et al. 2014, Wang et al. 2016]</p>
    <p>Load 1</p>
    <p>Load 2</p>
    <p>timeline</p>
    <p>Load 1</p>
    <p>Load 2</p>
    <p>timeline</p>
  </div>
  <div class="page">
    <p>GLUE</p>
    <p>Load 1 Trace 2 Trace 3</p>
    <p>Timeline</p>
    <p>Glue trace1 Glue trace 2 Tail</p>
    <p>dmax</p>
    <p>Load 1Trace 1</p>
    <p>Add FRONT noise Split SplitSplit</p>
  </div>
  <div class="page">
    <p>GLUE</p>
    <p>Load 1 Trace 2 Trace 3</p>
    <p>Timeline</p>
    <p>Glue trace1 Glue trace 2 Tail</p>
    <p>dmax</p>
    <p>Trace 1</p>
    <p>Cover the first loading with FRONT  Glue all the visits with glue traces</p>
    <p>fake loading, obtained by storing the history of some webpages</p>
    <p>loaded before</p>
    <p>Maximum duration of a glue trace: dmax  Uniform(tmin, tmax)</p>
    <p>trace</p>
  </div>
  <div class="page">
    <p>Evaluation Scenario 1: knowing</p>
    <p>Randomly generated 618 ~ 4500 -traces ( =2~16)  Undefended dataset:</p>
    <p>GLUE dataset: 4% ~ 54% recall and 4% ~ 20% precision</p>
  </div>
  <div class="page">
    <p>Evaluation Scenario 1: without knowing (more realistic)</p>
    <p>Undefended dataset: 45% ~ 75% recall and 41% ~ 77% precision</p>
    <p>GLUE dataset: 3% ~ 46% recall and 1% ~ 16% precision</p>
  </div>
  <div class="page">
    <p>Overhead of GLUE  Time overhead 0%.  Suppose:</p>
    <p>mean dwell time , mean duration of tail dG dL</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>Proposed two lightweight zero-delay defenses:  FRONT injects dummy packets in a traditional way</p>
    <p>Obfuscating the trace fronts</p>
    <p>Trace-to-trace randomness</p>
    <p>GLUE explores a new direction for designing a defense Forces the attacker to solve the split problem</p>
  </div>
  <div class="page">
    <p>Thanks for listening!</p>
    <p>Source code https://github.com/websitefingerprinting/WebsiteFingerprinting/</p>
    <p>Contact info: jgongac@cse.ust.hk</p>
  </div>
</Presentation>
