<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Towards Discovering and Understanding</p>
    <p>Task Hijacking in Android</p>
    <p>CHUANGANG REN, YULONG ZHANG, HUI XUE,</p>
    <p>TAO WEI, PENG LIU</p>
    <p>PENN STATE UNIVERSITY, FIREEYE INC.</p>
  </div>
  <div class="page">
    <p>Android Multi-tasking</p>
    <p>In PC world, multitasking means multiple processes are running at the same period of</p>
    <p>time.</p>
    <p>In Android, multitasking is a different concept:</p>
    <p>A task is a collection of activities that users interact</p>
    <p>with when performing a certain job</p>
    <p>- Android developer documentation</p>
  </div>
  <div class="page">
    <p>Android Multi-tasking</p>
    <p>Task 1</p>
    <p>A</p>
    <p>B</p>
    <p>C</p>
    <p>Back</p>
    <p>Stack</p>
    <p>A</p>
    <p>B</p>
    <p>Task 2</p>
    <p>A</p>
    <p>B</p>
    <p>C</p>
    <p>Task 3</p>
    <p>Foreground</p>
    <p>Activity Manager Service</p>
  </div>
  <div class="page">
    <p>Home</p>
    <p>Launcher Task Gmail Task</p>
    <p>Msg Inbox</p>
    <p>Foreground</p>
    <p>Home</p>
    <p>Launcher Task Gmail Task</p>
    <p>Inbox</p>
    <p>Foreground</p>
    <p>Home</p>
    <p>Launcher Task</p>
    <p>Foreground Task</p>
    <p>State</p>
    <p>User</p>
    <p>Screen</p>
    <p>Lifecycle of Android Task</p>
  </div>
  <div class="page">
    <p>Task switching</p>
    <p>UI navigation</p>
    <p>Task customization</p>
    <p>Android Multi-tasking</p>
  </div>
  <div class="page">
    <p>Security Concerns</p>
    <p>However, the security implication of Android</p>
    <p>multitasking remains under-investigated</p>
    <p>Android allows activities from different apps to</p>
    <p>reside in the same task (or back stack)</p>
    <p>Android offers developers great flexibility to</p>
    <p>customize task behaviors</p>
    <p>We find that Android multitasking is plagued by</p>
    <p>a serious security risk  task hijacking</p>
  </div>
  <div class="page">
    <p>Example - User Spoofing</p>
    <p>x</p>
    <p>Paypal</p>
    <p>Account</p>
    <p>Password Fake</p>
    <p>Paypal</p>
  </div>
  <div class="page">
    <p>User Spoofing Attack</p>
    <p>Home</p>
    <p>Launcher Paypal</p>
    <p>P1</p>
    <p>Foreground</p>
    <p>S2</p>
    <p>Home</p>
    <p>Launcher</p>
    <p>Foreground</p>
    <p>S1</p>
    <p>Home</p>
    <p>Launcher Paypal</p>
    <p>P1</p>
    <p>Foreground</p>
    <p>Malware</p>
    <p>S2</p>
    <p>M1</p>
    <p>M2 Home</p>
    <p>Launcher Malware</p>
    <p>M1</p>
    <p>Foreground</p>
    <p>S1 M2</p>
    <p>Normal Case</p>
    <p>Attack Case</p>
  </div>
  <div class="page">
    <p>How does mal-activity migrate?</p>
    <p>The malware tricks the system to relocate the</p>
    <p>malicious activity (M2) to the Paypal task by</p>
    <p>manipulating the following task control knobs:</p>
    <p>Task affinity</p>
    <p>allowTaskReparenting</p>
  </div>
  <div class="page">
    <p>Task Affinity</p>
    <p>An activity attribute defined in each &lt;activity&gt; tag in</p>
    <p>AndroidManifest.xml</p>
    <p>Task affinity specifies which task that the activity desires</p>
    <p>to join. By default, all activities in an app have the same</p>
    <p>affinity  the app package name</p>
    <p>&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; package=&quot;com.example.app &gt;</p>
    <p>&lt;application&gt; &lt;activity android:name=&quot;.ActivityA /&gt; &lt;activity android:name=&quot;.ActivityB android:taskAffinity=&quot;com.example.app:taskB /&gt;</p>
    <p>&lt;/application&gt; &lt;/manifest&gt;</p>
  </div>
  <div class="page">
    <p>Task Affinity</p>
    <p>Developer can re-define the task affinity in order to</p>
    <p>achieve desirable task behavior</p>
    <p>Group activities into different tasks</p>
    <p>Place activities defined in different apps within the same task</p>
    <p>If &lt;allowTaskReparenting = true&gt; for activity A, and when</p>
    <p>a task with the same affinity as A is brought to the front, the</p>
    <p>system would move the relocatable activity A from its</p>
    <p>original hosting task to this new foreground task</p>
  </div>
  <div class="page">
    <p>User Spoofing Attack</p>
    <p>Home</p>
    <p>Launcher Malware</p>
    <p>M1</p>
    <p>Foreground</p>
    <p>S1</p>
    <p>M2</p>
    <p>Home</p>
    <p>Launcher Paypal</p>
    <p>P1</p>
    <p>Foreground</p>
    <p>Malware</p>
    <p>S2</p>
    <p>M1</p>
    <p>M2</p>
    <p>Malware abuses the following task control knobs:</p>
    <p>Foreground</p>
    <p>com.paypal.android</p>
    <p>true</p>
  </div>
  <div class="page">
    <p>Research Questions</p>
    <p>Question 1: How many types of task hijacking?</p>
    <p>Question 2: How to craft the individual attacks?</p>
    <p>Question 3: How to assess the vulnerability?</p>
    <p>Question 4: How to defend task hijacking?</p>
  </div>
  <div class="page">
    <p>Task Control Knobs</p>
    <p>We find that there are a rich set of task control</p>
    <p>knobs that can be abused by a task hijacking</p>
    <p>attack</p>
    <p>Task control knobs in 4 categories:</p>
    <p>Intent Flag Activity Attribute Call-back</p>
    <p>Function Framework API</p>
    <p>NEW_TASK</p>
    <p>SINGLE_TOP</p>
    <p>REORDER_TO_FRONT</p>
    <p>NO_HISTORY</p>
    <p>CLEAR_TASK</p>
    <p>NEW_DOCUMENT</p>
    <p>MULTIPLE_TASKS</p>
    <p>launchMode</p>
    <p>taskAffinity</p>
    <p>allowTaskReparenting</p>
    <p>documentLaunchMode</p>
    <p>FinishOnTaskLaunch</p>
    <p>onBackPressed() TaskStackBuilder class</p>
    <p>startActivity()</p>
    <p>startActivities()</p>
  </div>
  <div class="page">
    <p>Methodology</p>
    <p>We formalize the task dynamic as a state transition</p>
    <p>model</p>
    <p>Hijacked task state: at least one task in the system contains both malicious</p>
    <p>and benign activities</p>
    <p>Hijack state transition (HST): state transition that leads the system to a hijacked task state</p>
    <p>We simulate an Android system with three apps</p>
    <p>Two benign apps (A, B), one malware (M)</p>
    <p>Connect task states and generate task state transition graph</p>
    <p>Flag the hijacked task states and HST in the graph</p>
  </div>
  <div class="page">
    <p>Question 1: Types of Task Hijacking</p>
    <p>Task State Transition Graph Task States</p>
    <p>Two types of Hijacking State Transitions (HST):</p>
    <p>Malware activity moves to benign app task</p>
    <p>Benign activity is placed into malware task</p>
  </div>
  <div class="page">
    <p>Task State Transition Graph Task States</p>
    <p>Observations:</p>
    <p>There are many possible hijacking state transitions (HSTs)</p>
    <p>Once exploited, the HSTs could result in practical and serious</p>
    <p>real-world attacks</p>
    <p>Question 1: Types of Task Hijacking</p>
  </div>
  <div class="page">
    <p>Question 2  Enabled attacks</p>
    <p>Attack Category</p>
    <p>Consequence Attack Name</p>
    <p>Vulnerable Systems &amp; Apps</p>
    <p>User</p>
    <p>Spoofing Sensitive information</p>
    <p>stolen</p>
    <p>Spoofing attack all ; all</p>
    <p>Phishing attack</p>
    <p>( I  III ) all ; some apps</p>
    <p>Denial-of</p>
    <p>service</p>
    <p>App function</p>
    <p>disabled; Restriction</p>
    <p>of user access</p>
    <p>Ransomware &gt;Android 5.0 ; all</p>
    <p>User</p>
    <p>Monitoring User privacy</p>
    <p>infringement Spyware &gt;Android 5.0 ; all</p>
    <p>We implemented 6 proof-of-concept attacks in 3 categories:</p>
    <p>Task hijacking attacks affect all latest Android versions and</p>
    <p>apps, including the most privileged apps!</p>
  </div>
  <div class="page">
    <p>Question 3: Vulnerability Assessment</p>
    <p>We would like to first understand the use of security</p>
    <p>sensitive task control knobs in real implementation</p>
    <p>We analyze 6.8 million apps from Google Play and</p>
    <p>other 12 popular third-party app markets</p>
  </div>
  <div class="page">
    <p>Case Study  Task Affinity</p>
    <p>1.6% (109K apps) of all apps set the task affinity without</p>
    <p>containing their own package name</p>
    <p>These apps may interfere with the multitasking behaviors of</p>
    <p>other apps</p>
    <p>Unintentional: careless app developers who are unaware of</p>
    <p>the security implications.</p>
    <p>Intentional: task affinity intentionally set to popular apps</p>
    <p>package name in order to implement legitimate add-on</p>
    <p>feature for these popular apps.</p>
    <p>We have not found evidence that malware has already</p>
    <p>abused these task control knobs</p>
  </div>
  <div class="page">
    <p>Question 4: Defense Suggestions</p>
    <p>Detection in app review process</p>
    <p>App review guideline may contradict with existing app features</p>
    <p>Challenging to detect stealthy dynamic behaviors of an advanced malware</p>
    <p>More secure multi-tasking mechanism</p>
    <p>Introduce additional security features for multitasking control</p>
    <p>For example, task affinity should comply with certain name space</p>
    <p>specification</p>
    <p>Introduce additional Boolean attribute to control if the app allow other apps</p>
    <p>to specify the same task affinity</p>
  </div>
  <div class="page">
    <p>Proof-of-concept Attack Demo</p>
    <p>Phishing attack</p>
    <p>A malware can steal user Citi Bank account name</p>
    <p>and password by hijacking citi bank task with a</p>
    <p>spoofing Citibank login interface</p>
    <p>Denial of service</p>
    <p>A malware can disable app uninstallation in a system</p>
    <p>The similar attack approach could be used to create</p>
    <p>a ransomware</p>
  </div>
  <div class="page">
    <p>Thank you!</p>
  </div>
</Presentation>
