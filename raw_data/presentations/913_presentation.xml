<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Shoal: smart allocation and replication of memory for</p>
    <p>parallel programs</p>
    <p>Stefan Kaestle, Reto Achermann, Timothy Roscoe, Tim Harris$</p>
    <p>ETH Zurich $Oracle Labs Cambridge, UK</p>
  </div>
  <div class="page">
    <p>Problem</p>
    <p>Congestion on interconnect  Load imbalance of memory</p>
    <p>controllers</p>
    <p>Performance of parallel application depends on memory allocation</p>
    <p>Suboptimal allocation  bad performance</p>
    <p>memory controllers</p>
    <p>Interconnect</p>
  </div>
  <div class="page">
    <p>Shoal</p>
    <p>Memory abstraction: Arrays  Statically derive access patterns from code  Choose array implementation at runtime</p>
    <p>Reduces runtime:  4x over nave memory allocation</p>
  </div>
  <div class="page">
    <p>Example: PageRank</p>
    <p>ru n</p>
    <p>ti m</p>
    <p>e [</p>
    <p>s]</p>
    <p>cores</p>
    <p>perfect speedup</p>
  </div>
  <div class="page">
    <p>Example: PageRank</p>
    <p>ru n</p>
    <p>ti m</p>
    <p>e [</p>
    <p>s]</p>
    <p>cores</p>
    <p>perfect scalability single-node</p>
  </div>
  <div class="page">
    <p>Problem: implicit allocation</p>
    <p>void *data = malloc(SIZE); memset(data, 0, SIZE);</p>
    <p>Implicit Linux policy on where to allocate memory  First touch  all memory on same NUMA node</p>
  </div>
  <div class="page">
    <p>What we would like to do?</p>
    <p>Partitioning  Split working space, put on different nodes</p>
    <p>Replication  Copy array  Updates: consistency</p>
    <p>Reduce load-imbalance  Localizes access  reduces interconnect traffic</p>
    <p>DMA  2M/1G pages</p>
  </div>
  <div class="page">
    <p>What we have today:</p>
    <p>Explicit placement of memory  libnuma</p>
    <p>Advise Kernel about use of memory region  madvise</p>
  </div>
  <div class="page">
    <p>SHOAL</p>
  </div>
  <div class="page">
    <p>Exploiting DSLs</p>
    <p>High-level API  Efficient parallelization  widely used</p>
    <p>Machine learning  Signal processing  Graph processing</p>
    <p>Idea: derive access patterns</p>
  </div>
  <div class="page">
    <p>Green Marl: graph storage</p>
    <p>nodes 0 1 3 5</p>
  </div>
  <div class="page">
    <p>Overview: Green Marl</p>
    <p>high-level program (e.g. Pagerank)</p>
    <p>compiler (CC)</p>
    <p>program</p>
    <p>high-level compiler</p>
    <p>low-level code (e.g. C++)</p>
  </div>
  <div class="page">
    <p>Modifications to Green Marl</p>
    <p>low-level code (e.g. C++) compiler (e.g. gcc)</p>
    <p>program</p>
    <p>library</p>
    <p>high-level program (e.g. Green Marl)</p>
    <p>high-level compiler analysis</p>
    <p>memory abstraction</p>
  </div>
  <div class="page">
    <p>low-level code (e.g. C++) compiler (e.g. gcc)</p>
    <p>program</p>
    <p>library</p>
    <p>high-level program (e.g. Pagerank)</p>
    <p>high-level compiler analysis</p>
    <p>memory abstraction</p>
  </div>
  <div class="page">
    <p>Array abstraction</p>
    <p>get() and set()  copy_from(arr) and init_with(const)  array_malloc(size, access_patterns)</p>
  </div>
  <div class="page">
    <p>Shoals access patterns</p>
    <p>Read-only  Sequential  Random  Indexed</p>
    <p>indexed: for (i=0; i&lt;SIZE; i++) { foo(arr[i]); }  sequential + local</p>
  </div>
  <div class="page">
    <p>low-level code (e.g. C++) compiler (e.g. gcc)</p>
    <p>program</p>
    <p>library</p>
    <p>high-level program (e.g. Pagerank)</p>
    <p>high-level compiler analysis</p>
    <p>memory abstraction</p>
    <p>Use Shoal memory abstraction</p>
    <p>Extract memory access patterns</p>
  </div>
  <div class="page">
    <p>Derivation of access patterns</p>
    <p>Foreach (t: G.Nodes) { Double val = k * Sum(nb: t.InNbrs){ nb.rank / nb.OutDegree()} ; diff += | val - t.pg_rank |; t.pg_rank &lt;= val @ t; }</p>
  </div>
  <div class="page">
    <p>Derivation of access patterns</p>
    <p>Foreach (t: G.Nodes) { Double val = k * Sum(nb: t.InNbrs){ nb.rank / nb.OutDegree()} ; diff += | val - t.pg_rank |; t.pg_rank &lt;= val @ t; }</p>
  </div>
  <div class="page">
    <p>Green Marl: graph storage</p>
    <p>nodes 0 1 3 5</p>
  </div>
  <div class="page">
    <p>Green Marl: graph storage</p>
    <p>nodes 0 1 3 5</p>
  </div>
  <div class="page">
    <p>Deriving access patterns</p>
    <p>Sum(nb: t.InNbrs) { //  };</p>
    <p>Operation: InNbrs - neighbors of node t: s = r_nodes[t] e = r_nodes[t+1]-1 nb = [r_edges[x] for x in (s..e-1)]</p>
  </div>
  <div class="page">
    <p>Deriving access patterns</p>
    <p>Sum(nb: t.InNbrs) { //  };</p>
    <p>Operation: InNbrs - neighbors of node t: s = r_nodes[t] e = r_nodes[t+1]-1 nb = [r_edges[x] for x in (s..e-1)]</p>
    <p>indexed  read-only</p>
    <p>sequential  read-only</p>
  </div>
  <div class="page">
    <p>Deriving access patterns</p>
    <p>Sum(nb: t.InNbrs) { nb.rank / nb.OutDegree() };</p>
    <p>Operation: rank - rank of neigbor nb: rnk_tmp = rank[nb]  random</p>
    <p>read-only</p>
    <p>nodes 0 1 3 5</p>
  </div>
  <div class="page">
    <p>Deriving access patterns</p>
    <p>Sum(nb: t.InNbrs) { nb.rank / nb.OutDegree() };</p>
    <p>Operation: OutDegree() - of neighbor w: nodes[nb+1]  nodes[nb]  random</p>
    <p>read-only</p>
    <p>nodes 0 1 3 5 0 1</p>
  </div>
  <div class="page">
    <p>low-level code (e.g. C++) compiler (e.g. gcc)</p>
    <p>program</p>
    <p>library</p>
    <p>high-level program (e.g. Pagerank)</p>
    <p>high-level compiler analysis</p>
    <p>memory abstraction</p>
  </div>
  <div class="page">
    <p>Runtime: Choice of arrays</p>
    <p>start</p>
    <p>indexed?</p>
    <p>partitioned</p>
    <p>y</p>
    <p>n</p>
    <p>n</p>
    <p>fits all nodes?</p>
    <p>replicated</p>
    <p>y</p>
    <p>read-only?</p>
    <p>distributed</p>
    <p>y</p>
    <p>n</p>
    <p>H/W characteristics</p>
  </div>
  <div class="page">
    <p>Runtime: Choice of arrays</p>
    <p>start</p>
    <p>indexed?</p>
    <p>partitioned</p>
    <p>y</p>
    <p>n</p>
    <p>n</p>
    <p>fits all nodes?</p>
    <p>replicated</p>
    <p>y</p>
    <p>read-only?</p>
    <p>distributed</p>
    <p>y</p>
    <p>n</p>
    <p>H/W characteristics</p>
    <p>#nodes #CPUs</p>
    <p>Size RAM / node DMA</p>
    <p>Huge/large page</p>
  </div>
  <div class="page">
    <p>Shoal workflow</p>
    <p>hardware characteristics</p>
    <p>access patterns</p>
    <p>low-level code (e.g. C++) compiler (e.g. gcc)</p>
    <p>program</p>
    <p>library</p>
    <p>high-level program (e.g. Pagerank)</p>
    <p>high-level compiler analysis</p>
    <p>memory abstraction</p>
  </div>
  <div class="page">
    <p>Alternative approaches</p>
    <p>Search-based auto-tuning  HW page migration  Carrefour: Online analysis of access patterns</p>
    <p>Simon Fraser University, ASPLOS 2013  Performance counters to monitor accesses  Dynamically migrate and replicate pages</p>
  </div>
  <div class="page">
    <p>EVALUATION</p>
  </div>
  <div class="page">
    <p>Single node allocation</p>
    <p>ru n</p>
    <p>ti m</p>
    <p>e [</p>
    <p>s]</p>
    <p>cores</p>
    <p>single-node</p>
  </div>
  <div class="page">
    <p>Distribute memory</p>
    <p>#pragma parallel omp for for (int i=0; i&lt;SIZE; i++) data[i] = 0;</p>
    <p>Default Green Marl behavior 33</p>
    <p>ru n</p>
    <p>ti m</p>
    <p>e [</p>
    <p>s]</p>
    <p>cores</p>
    <p>single-node distributed</p>
    <p>Problem: this is OS / HW specific</p>
  </div>
  <div class="page">
    <p>Carrefour: reactive tuning</p>
    <p>ru n</p>
    <p>ti m</p>
    <p>e [</p>
    <p>s]</p>
    <p>cores</p>
    <p>single-node distributed Carrefour</p>
  </div>
  <div class="page">
    <p>Shoal</p>
    <p>Knowledge of access patterns  Replication  Distribution  Large pages (2M)</p>
    <p>ru n</p>
    <p>ti m</p>
    <p>e [</p>
    <p>s]</p>
    <p>cores</p>
    <p>single-node distributed Carrefour Shoal</p>
  </div>
  <div class="page">
    <p>Performance breakdown</p>
    <p>ru n</p>
    <p>ti m</p>
    <p>e [</p>
    <p>s]</p>
    <p>single-node partitioning</p>
    <p>partitioning + replication partitioning + replication + 2M pages</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Memory abstraction, arrays  Compiler analysis  derive access patterns  Runtime library  selects implementation  Works well with domain specific languages  Also: support for manual annotation</p>
    <p>Too complex, too dynamic  Online</p>
    <p>Public release next week</p>
  </div>
</Presentation>
