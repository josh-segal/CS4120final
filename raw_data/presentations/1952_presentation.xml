<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>A Cloud-native Architecture for Replicated Data Services</p>
    <p>Hemant Saxena, Jeffery Pound University of Waterloo, SAP Labs Waterloo</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Problem overview</p>
    <p>Solution overview</p>
    <p>Kafka</p>
    <p>Cassandra</p>
    <p>Evaluation</p>
  </div>
  <div class="page">
    <p>Problem overview</p>
    <p>Cloud has become de facto standard for deploying applications</p>
    <p>However, applications designed for on-premise infrastructure find it challenging to leverage the Cloud storage efficiently, because:</p>
    <p>Data replication for on-premise provides fault-tolerance (FT) and high availability (HA)</p>
    <p>Whereas, Cloud storage already uses replication to provides FT and HA</p>
    <p>Making applications replication redundant resulting into additional storage cost</p>
  </div>
  <div class="page">
    <p>Typical replicated application on-premise</p>
    <p>- -</p>
    <p>replica-set</p>
    <p>client</p>
    <p>Replicated application</p>
  </div>
  <div class="page">
    <p>Typical replicated application on Cloud</p>
    <p>replica-set - -</p>
    <p>client</p>
    <p>- Application-level replication (replica-set)</p>
    <p>- Storage-level replication</p>
    <p>- Resulting into redundant replicas</p>
    <p>- Introducing additional storage cost</p>
    <p>Replicated application</p>
    <p>Storage service</p>
  </div>
  <div class="page">
    <p>Problem overview</p>
    <p>We ask the following research question...</p>
    <p>How can we easily allow applications designed for on-premise infrastructure to</p>
    <p>efficiently leverage the Cloud storage?</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Problem overview</p>
    <p>Solution overview</p>
    <p>Kafka</p>
    <p>Cassandra</p>
    <p>Evaluation</p>
  </div>
  <div class="page">
    <p>Nave solution</p>
    <p>- Have one replica (i.e. no application-level replication)</p>
    <p>- Solves the problem of redundant replication</p>
    <p>- But, it is prone to node failure. Hence not highly available.</p>
    <p>replica-set</p>
  </div>
  <div class="page">
    <p>Contributions of this work</p>
    <p>We show how a well-known main-delta architecture can be used to leverage cloud storage efficiently  i.e. ensure no redundant replication</p>
    <p>while maintaining the fault-tolerance and availability guarantees of the applications</p>
    <p>We show that incorporating main-delta architecture in existing on-premise applications is easy  by controlling how buffers are managed and flushed to storage</p>
    <p>and it is compatible with the whole spectrum of replication strategies</p>
  </div>
  <div class="page">
    <p>Quick recap of main-delta architecture</p>
    <p>Originally designed for efficiently handling mixed read/update workloads</p>
    <p>Two parts  Static, read-only, read optimized</p>
    <p>main  Small, write-optimized delta  Deltas are merged with the main</p>
    <p>at regular intervals</p>
  </div>
  <div class="page">
    <p>Solution overview</p>
    <p>- Replicated local deltas, maintained by application</p>
    <p>- But single shared main on Cloud storage (which is fault-tolerant)</p>
    <p>replica-set</p>
    <p>M</p>
    <p>M M</p>
  </div>
  <div class="page">
    <p>- Replicated local deltas, maintained by application</p>
    <p>- But single shared main on Cloud storage (which is fault-tolerant)</p>
    <p>Solution overview replica-set</p>
    <p>How to merge the</p>
    <p>deltas?</p>
    <p>M</p>
    <p>M M</p>
  </div>
  <div class="page">
    <p>Merging Deltas to Main</p>
    <p>Details are in how the delta is merged to the main such that</p>
    <p>No data is lost from any deltas</p>
    <p>And applications have same guarantees as on-premise deployment</p>
    <p>Delta-merge strategy depends on the replication strategy</p>
    <p>Single primary node means single delta to merge</p>
    <p>Multiple primary nodes means multiple deltas to merge</p>
  </div>
  <div class="page">
    <p>Classification of replication strategies</p>
    <p>Request-handler</p>
    <p>replica-set</p>
    <p>Write to primary, read from any:</p>
    <p>Write to any, read from any (e.g. quorum):</p>
    <p>Write to primary, read from primary:</p>
    <p>Request-handlerRequest-handler</p>
    <p>replica-set replica-set</p>
  </div>
  <div class="page">
    <p>Case-study 1: Delta merge for single primary</p>
    <p>Idea: In-memory buffers as deltas, on-disk data as main.</p>
    <p>Only the primary will merge its delta to main. Other replicas will discard their deltas when they are full.</p>
    <p>In case of primary node failure, new primary node takes the responsibility of merging deltas.</p>
    <p>replica-set</p>
    <p>M</p>
    <p>M M</p>
  </div>
  <div class="page">
    <p>Case-study 2: Delta merge for quorum system</p>
    <p>The memtable and sstables can be easily leveraged as delta and main.</p>
    <p>Deciding which node merges the delta is tricky:</p>
    <p>Each node can have different set of updates</p>
    <p>replica-set</p>
    <p>M</p>
    <p>M M</p>
  </div>
  <div class="page">
    <p>Case-study 2: Delta merge for quorum system</p>
    <p>Nodes flush their deltas to cloud storage</p>
    <p>Background compaction job combines the deltas and merges it to the main</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Problem overview</p>
    <p>Solution overview</p>
    <p>Kafka</p>
    <p>Cassandra</p>
    <p>Evaluation</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Want to show that our cloud-native design can save storage cost while keeping the performance same</p>
    <p>Tested performance of our prototype on Kafka and Cassandra</p>
    <p>Used real Cloud infrastructure - Amazon Web Services (AWS)</p>
    <p>Tested different types of storage types - EBS and EFS</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Implementations:  md-kafka: main-delta architecture</p>
    <p>based Kafka implementation  kafka: vanilla Kafka</p>
    <p>3x storage cost savings  Replication factor 3x  Savings by design</p>
    <p>Similar write throughput for block base storage (EBS)</p>
    <p>Almost 2x throughput improvement for EFS storage, due to batching</p>
  </div>
  <div class="page">
    <p>Evaluation  Implementations:</p>
    <p>md-cassandra-efs: main-delta based Cassandra using EFS storage</p>
    <p>cassandra-ebs: vanilla Cassandra using EBS</p>
    <p>cassandra-efs: vanilla Cassandra using EFS</p>
    <p>Close to 2.8x storage cost saving  With replication factor of 3x</p>
    <p>Almost similar throughput for all 3 types of workloads</p>
  </div>
  <div class="page">
    <p>Existing on-premise applications (with replication) when deployed on cloud ends up with redundant replication</p>
    <p>We proposed a main-delta based cloud-native architecture to solve this problem</p>
    <p>Allowing for storage cost savings up to factor of k (applications replication factor)</p>
    <p>We show our approach is general enough to work with the complete spectrum of replication strategies</p>
    <p>Simplest strategy: single primary (Kafka case study)  Complex strategy: quorum based systems(Cassandra case study)</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Thank you!</p>
    <p>Contact for any follow-up questions:</p>
    <p>Hemant Saxena</p>
    <p>email: hemant.saxena@uwaterloo.ca</p>
  </div>
</Presentation>
