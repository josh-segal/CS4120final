<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Unicorefuzz: On the Viability of Emulation for Kernelspace Fuzzing</p>
    <p>Dominik Maier Benedikt Radtke Bastian Harren</p>
    <p>Security in Telecommunications Technische Universitt Berlin</p>
  </div>
  <div class="page">
    <p>Simplifies emulation-based fuzzing of kernel parsers  Coverage guided, blackbox  Based on</p>
    <p>AFL-Unicorn  avatar</p>
    <p>Finds bugs  On any GDB target  Open sourced</p>
    <p>Unicorefuzz</p>
    <p>Page 2</p>
    <p>avatar afl+</p>
    <p>+</p>
    <p>afl-unico rn</p>
    <p>uDdbg</p>
  </div>
  <div class="page">
    <p>AFL has been around for quite some time</p>
    <p>*Aleph One. Smashing the Stack for Fun and Profit. Phrack 7, 1996</p>
    <p>We still find buffer overflows like its 1996*</p>
  </div>
  <div class="page">
    <p>Fuzzing is Hard</p>
    <p>Legacy code is not written to be tested</p>
    <p>Depending on globals, proper initializations, state, ...</p>
    <p>How do we get input to the right place?</p>
    <p>Setting up a fuzz harness is challenging</p>
    <p>Page 4</p>
  </div>
  <div class="page">
    <p>Hardware interactions</p>
    <p>Restarting Kernels for each test case needs more effort</p>
    <p>Did it just crash?</p>
    <p>How do we get input in that thing?</p>
    <p>Setting up a kernel fuzz harness is even worse</p>
    <p>Fuzzing Kernels is Hard</p>
    <p>Page 5</p>
  </div>
  <div class="page">
    <p>Trinity</p>
    <p>DIFUZE</p>
    <p>TriforceAFL</p>
    <p>Syzkaller</p>
    <p>kAFL</p>
    <p>...</p>
    <p>People Are Fuzzing Kernels</p>
    <p>Page 6</p>
  </div>
  <div class="page">
    <p>Example: Triforce AFL</p>
    <p>Page 7</p>
    <p>AFLs QEMU Mode  Ported for Kernel Emulation  Runs until special hypercall  Starts Forkserver at that point But: - QEMU forks before the forkserver starts may be strange - VM is heavy, has interrupts, non-deterministic - Has to be a VM...</p>
  </div>
  <div class="page">
    <p>Trinity -&gt; No Coverage</p>
    <p>DIFUZE -&gt; No Coverage</p>
    <p>TriforceAFL -&gt; Shaky with forks in QEMU, etc.</p>
    <p>Syzkaller -&gt; No* coverage for blackbox OS fuzzing</p>
    <p>kAFL -&gt; Awesome but x86(_64) only</p>
    <p>Whatever Brandon Falk is doing -&gt; Crazy ;)</p>
    <p>People are not Fuzzing Our Way</p>
    <p>Page 8 * Apart f rom Windows fuzzing with kAFLs instrumentation</p>
  </div>
  <div class="page">
    <p>Idea: Rip out Parsers Fuzz them somewhere else</p>
  </div>
  <div class="page">
    <p>Why Parsers</p>
    <p>Page 10</p>
    <p>They tend to break  Often read f rom</p>
    <p>well-defined buffers  little to no additional</p>
    <p>hardware interaction  Have you seen bug-f ree</p>
    <p>ASN1 parsers?  They tend to break</p>
  </div>
  <div class="page">
    <p>Copy&amp;Paste Parsers to Userland?</p>
    <p>Page 11</p>
    <p>Ideal solution! Problem: Code depends heavily on</p>
    <p>State and proper initializations  All those kernel functions  Source Code availability</p>
    <p>Lots of work even with source</p>
  </div>
  <div class="page">
    <p>Idea: Rip out Parsers Fuzz them in an Emulator</p>
  </div>
  <div class="page">
    <p>AFL-Unicorn</p>
    <p>Page 13</p>
    <p>Unicorn: CPU Emulator, Fork of QEMU Multi-architectures: Arm, Arm64 (Armv8), M68K, Mips, Sparc, &amp; X86 (include X86_64).</p>
    <p>AFL-Unicorn: Adds Instrumentation to Basic Blocks Much like AFL QEMU</p>
  </div>
  <div class="page">
    <p>Unicorefuzz Architecture</p>
    <p>Page 14</p>
  </div>
  <div class="page">
    <p>Probe Wrapper</p>
    <p>Page 15</p>
    <p>Sets breakpoint on target  Dumps all registers once bp triggers  Waits for memory requests f rom harness  Fetches memory via Avatar2/GDB on demand  Memory exchange via file system</p>
    <p>-&gt; Can eventually be turned off</p>
  </div>
  <div class="page">
    <p>Unicorefuzz Harness</p>
    <p>Page 16</p>
    <p>Fork on first insn  Child: between each code block</p>
    <p>Request memory f rom Probe Wrapper if not mapped  Set bit for hash(f rom-&gt;to) in shared map  Cache the translated block in parent  Execute the translated block</p>
    <p>Fork again, with hot caches</p>
  </div>
  <div class="page">
    <p>AFL/Unicorefuzz Interactions</p>
    <p>Page 17</p>
  </div>
  <div class="page">
    <p>Unicorefuzz: Workflow</p>
  </div>
  <div class="page">
    <p>Workflow</p>
    <p>Page 19</p>
    <p>Step 0: Download &amp; make Step 1: Find a parser (ghidra/ida/r2/) Step 2: Edit config.py Step 3: Trigger parser Step 4: Fuzz Step 5: Triage</p>
    <p>+Profit?</p>
  </div>
  <div class="page">
    <p>Step 0: Download &amp; Install</p>
    <p>Page 20</p>
    <p>git clone https://github.com/fgsect/unicorefuzz.git</p>
    <p>cd unicorefuzz</p>
    <p>./setupaflpp.sh</p>
    <p>./setupdebug.sh #optional if you want to use uDdbg</p>
    <p>./setaflops.sh # optional</p>
    <p>[Get some target. To fuzz a QEMU VM, have a look at./startvm.sh]</p>
  </div>
  <div class="page">
    <p>Step 1: Find a Parser</p>
    <p>Page 21</p>
    <p>Analyze the target ... /ghidra/ida/r2/ Find a function that: - takes input - returns something - actually gets called</p>
    <p>+ find calling convention</p>
  </div>
  <div class="page">
    <p>Step 2: Edit config.py</p>
    <p>Page 22</p>
    <p>For each target, the config.py needs to be altered. Settings include: - MODULE + BREAKOFFSET -&gt; if fuzzing Linux .ko object - BREAKADDR -&gt; Breakpoint for anything else - LENGTH &amp; EXITS -&gt; Where to exit - implement init_func(uc, rip) -&gt; if you need uc hooks - Implement place_input(uc, input)</p>
    <p>Function that drops AFL input at memory location</p>
  </div>
  <div class="page">
    <p>place_input() for Open vSwitch</p>
    <p>Page 23</p>
    <p>def place_input(uc, input): &quot;&quot;&quot; Places the input in memory and alters the input. Example for sk_buff in openvswitch &quot;&quot;&quot; ... if len(input) &gt; 1500: import os os._exit(0) # too big! # read input to the correct position at param rdx here: rdx = uc.reg_read(UC_X86_REG_RDX) util.map_page_blocking(uc, rdx) # ensure sk_buf is mapped bufferPtr = struct.unpack(&quot;&lt;Q&quot;,uc.mem_read(rdx + 0xd8, 8))[0] util.map_page_blocking(uc, bufferPtr) # ensure the buffer is mapped uc.mem_write(bufferPtr, input) # insert afl input uc.mem_write(rdx + 0xc4, b&quot;\xdc\x05&quot;) # fix tail</p>
  </div>
  <div class="page">
    <p>Fuzzing OpenVSwitch int ovs_flow_key_extract(struct sk_buff *skb, struct sw_flow_key *key)</p>
    <p>Drop input at Packet Data</p>
    <p>Fuzzing the whole skb would break all pointers  false positives...</p>
    <p>Page 24</p>
  </div>
  <div class="page">
    <p>Step 3: Trigger Parser</p>
    <p>Page 25</p>
    <p>. /probe_wrapper.py</p>
    <p>Make target exec to break point</p>
    <p>All right, lets fuzz!</p>
  </div>
  <div class="page">
    <p>Step 4: Fuzz</p>
    <p>Page 26</p>
    <p>Add seeds to . /afl_inputs</p>
    <p>Run . /startafl.sh [workerid]</p>
    <p>Enjoy AFL</p>
  </div>
  <div class="page">
    <p>Step 5: Triage</p>
    <p>Page 27</p>
    <p>Got a bug? Nice. Rerun the bug:  On the target (hopefully)  Using . /harness.py -t &lt;input&gt; for tracing  Using . /harness.py -d &lt;input&gt; for some uDdb debugging</p>
    <p>Trace Debug</p>
  </div>
  <div class="page">
    <p>DEMO</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Page 30</p>
    <p>There is a ASN1 parser in the CIFS Filesystem driver  So we start fuzzing at entrypoint  ASN1 parser broken, as is tradition  Input f rom remote, but needs local interaction  In CIFS debug mode only (needs root to enable)  Not severe, but proves viability of Unicorefuzz</p>
    <p>Speed</p>
  </div>
  <div class="page">
    <p>Speed</p>
    <p>Single Core Speed Comparison for example.ko on a Laptop:</p>
    <p>TL;DR Not that great (yet). But simply throw more hardware at the problem.</p>
    <p>Page 31</p>
  </div>
  <div class="page">
    <p>Comparison Chart</p>
    <p>Page 32</p>
  </div>
  <div class="page">
    <p>State-dependent bugs wont be found  Code paths need to be triggered, first  No interrupts/timers, no race conditions, ...  Speed could be better  Unicorn...  Lots of manual analysis</p>
    <p>Caveats</p>
    <p>Page 33</p>
  </div>
  <div class="page">
    <p>Unicorn...</p>
    <p>POP QUIZ: Where is gs_base stored in memory?</p>
    <p>Page 34</p>
  </div>
  <div class="page">
    <p>On x86_64 gs_base an actual register. Same for fs_base. - Unicorn cannot write base registers (gs, fs) directly!</p>
    <p>Workaround: map scratch address, emulate wrmsr - cmpxchg16b instruction on Unicorn somewhat broken - Probably more.</p>
    <p>ARM insns have issues, too Hence no Unicorefuzz for ARM yet. :(</p>
    <p>Unicorn...</p>
    <p>Page 35</p>
  </div>
  <div class="page">
    <p>Fuzz allthethings  All GDB/Avatar2 targets should work</p>
    <p>Support for loadable kernel objects  Debugger for test cases  No ugly interrupts - Unicorn doesnt have any  Hooks can be set if fuzzer gets stuck  Can fuzz deeply hidden functions</p>
    <p>Nice things</p>
    <p>Page 36</p>
  </div>
  <div class="page">
    <p>Future Work</p>
    <p>Embedded fuzzing  Fix ARM target  Add MIPS target</p>
    <p>Emulation performance: block chaining(?)  Automate seed collection on BP hits  Automate Triaging  Unified (Proper) Evaluation Criteria for Kernel Fuzzers</p>
    <p>Page 37</p>
  </div>
  <div class="page">
    <p>Coverage guided fuzzing is all the rage  Fuzz anything you can attach GDB at  No bug in Open vSwitch (yet)  DoS in CIFS ASN1 parser  Speed could be better or worse  Finds bugs  Open-sourced Unicorefuzz</p>
    <p>https://github.com/fgsect/unicorefuzz</p>
    <p>Conclusion</p>
    <p>Page 38</p>
  </div>
  <div class="page">
    <p>Coverage guided fuzzing finds bugs early</p>
    <p>Lets find some kernel space overflows</p>
  </div>
  <div class="page">
    <p>while (questions());</p>
    <p>char buf[16]; strncpy(buf, &quot;&quot; &quot;Thank you for your attention.&quot; &quot;\n&quot;, sizeof(buf)); printf(&quot;%s&quot;, buf);</p>
  </div>
</Presentation>
