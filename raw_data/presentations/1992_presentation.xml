<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Devices as Services Fatih Bakir1, Rich Wolski1, Chandra Krintz1, Gowri Sankar Ramachandran2</p>
  </div>
  <div class="page">
    <p>Devices as Services  More and more focus on Edge</p>
    <p>Low latency  Better scaling</p>
    <p>End devices are increasingly powerful  More memory, faster processors, more hardware</p>
    <p>Can perform tasks other than telemetry  Actuation  Computation, inference</p>
    <p>Our approach:  Treat end devices as nanoservices  Composition of nanoservices = applications</p>
  </div>
  <div class="page">
    <p>Nanoservices  Services on microcontrollers</p>
    <p>Difficult to program  Need a common paradigm across the board  Heterogeneity  Low power devices on internet: security</p>
    <p>Overview:  End to end FaaS (ie. Serverless)  Composition of services  Security</p>
  </div>
  <div class="page">
    <p>Programming  A single FaaS platform</p>
    <p>Run the same program on devices, edge and cloud</p>
    <p>Cspot  Low level, event driven programming  Coupled with append only storage abstraction  Custom OS on embedded  Open source: https://github.com/Mayhem-lab/cspot</p>
    <p>How to compose these services?</p>
  </div>
  <div class="page">
    <p>Edgeistry  Orchestration for nanoservices  Decentralized &amp; highly distributed</p>
    <p>Service discovery  Identity management  Reverse proxying for devices</p>
    <p>Anonymity  Speed matching  Caching</p>
  </div>
  <div class="page">
    <p>Overall Architecture</p>
  </div>
  <div class="page">
    <p>Security  Conventional solutions dont work well on devices</p>
    <p>Asymmetric crypto computationally intensive  TLS needs large buffers (&gt;16K) for packets</p>
    <p>A lightweight security primitive is needed  Our approach: Capabilities using HMACs</p>
    <p>Very efficient, runs on 8 bit microcontrollers with 2K RAM  Allows for distributed sharing, without the device  Full policy delegation to clients  Composable</p>
    <p>Privacy and authentication are orthogonal!  How would end to end numbers look like?</p>
  </div>
  <div class="page">
    <p>Results &amp; Evaluation  End to end latency comparison vs Amazon Web Services (AWS)</p>
    <p>AWS: Device -&gt; Cloud (Handle with lambda, store in dynamodb, RSA2048)  Our: Device -&gt; Edge -&gt; Cloud (Handle with cspot, store with cspot, capabilities)</p>
    <p>AWS: 5,578 milliseconds  Our: 608 milliseconds</p>
    <p>An order of magnitude faster</p>
    <p>Micro benchmarks (on ESP8266 WiFi SoC)</p>
  </div>
  <div class="page">
    <p>Microbenchmarks for capabilities Algorithm Sign Time Verify Time</p>
    <p>PKCS1 (2048 Bits) 3280 ms 187 ms</p>
    <p>ECDSA (256 Bits) 214 ms 4340 ms</p>
    <p>HMAC-SHA256 (128 bit key) 0.37 ms 0.37 ms</p>
    <p>Our Work 0.58 ms 0.9 ms</p>
    <p>Operation Time</p>
    <p>RSA Handshake (2048 Bit) 3.95 Seconds</p>
  </div>
  <div class="page">
    <p>Conclusion  Can build FaaS end to end  Portable to many architectures  Ability for efficient authentication on the device is key  Devices as services is a viable approach for IoT</p>
  </div>
  <div class="page">
    <p>Discussion 1. Open questions:</p>
    <p>a. How to incorporate privacy efficiently? b. How does discovery get done? c. How to commission new devices?</p>
  </div>
</Presentation>
