<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Venus: Verification for Untrusted Cloud Storage</p>
    <p>Christian Cachin Idit Keidar, Asaf Cidon, Yan Michalevsky, Dani Shaket</p>
    <p>IBM Research Zurch Technion, Israel</p>
    <p>Alex Shraer</p>
  </div>
  <div class="page">
    <p>The benefits of cloud computing</p>
    <p>The cloud enables clients to:  Obtain resources on demand  Pay only for what they actually use  Benefit from economies of scale</p>
    <p>Cloud storage  Outsource the storage  Replace or combine with in-house storage</p>
    <p>Cloud provider</p>
    <p>Clients</p>
  </div>
  <div class="page">
    <p>But can we trust the cloud?  Software bugs, hardware malfunction, network partition,</p>
    <p>misconfiguration, hacker attack, provider outsources to save money, ....</p>
    <p>More in [Cachin, Keidar, Shraer, SIGACT News 09]</p>
    <p>Amazon S3, 2008, silent data corruption:</p>
    <p>Weve isolated this issue to a single load balancer  under load, it was corrupting single bytes in the byte stream...</p>
    <p>Early on the Wes t-coast morning of</p>
    <p>Friday, January 3 1st (2009), Ma.gno</p>
    <p>lia</p>
    <p>experienced every web services wor</p>
    <p>st nightmare: data corruption and los</p>
    <p>s. For</p>
    <p>Ma.gnolia, this me ans that the servic</p>
    <p>e is offline and me mbers bookmarks</p>
    <p>are</p>
    <p>unavailable, both t hrough the websit</p>
    <p>e itself and the AP I. As I evaluate re</p>
    <p>covery</p>
    <p>options, I cant pro vide a certain time</p>
    <p>line or prognosis a s to to when or to</p>
    <p>what</p>
    <p>degree Ma.gnolia or your bookmarks</p>
    <p>will return; only th at this process wil</p>
    <p>l take</p>
    <p>days, not hours.</p>
  </div>
  <div class="page">
    <p>Our Goal</p>
    <p>Guarantee integrity and consistency to users of remote storage</p>
    <p>even when the storage is faulty and detect failures</p>
  </div>
  <div class="page">
    <p>Consistency  Semantics guaranteed when accessing shared data</p>
    <p>Some applications require strong consistency  Credit/medical records, meta-data for a distributed file system  Updates should be immediately visible to readers</p>
    <p>enforce a credit limit, change patients treatment, revoke user access</p>
    <p>For others, weaker semantics might be good enough  Collaborative document editing</p>
    <p>wiki, Google docs, MS Sharepoint, version control</p>
    <p>Clear semantics are necessary for programmers/users5</p>
  </div>
  <div class="page">
    <p>Impossible to guarantee atomicity (linearizability)  Unless clients communicate directly before ending each operation</p>
    <p>Also impossible: sequential-consistency [Cachin, Shelat, Shraer, PODC 07]</p>
    <p>What can be guaranteed ??</p>
    <p>Can we guarantee strong consistency?</p>
    <p>X X write (X, 7)</p>
    <p>read (X)</p>
    <p>X =</p>
    <p>ACK</p>
  </div>
  <div class="page">
    <p>Fork linearizability</p>
    <p>Faulty server may present different views to clients  Fork their views of the history  Each branch looks linearizable</p>
    <p>Views are forked ever after (no &quot;Joins&quot;)  can be detected using client-to-client messages</p>
    <p>Different flavors and implementations  [Mazires &amp; Shasha PODC 02] [Li et al., OSDI04] [Li &amp; Mazires, NSDI 2007]</p>
    <p>[Oprea &amp; Reiter, DISC 2006] [Cachin, Shelat, Shraer, PODC 07]</p>
    <p>read(X)  write(X, 7)</p>
    <p>start (X= )</p>
    <p>read(X)  7 read(X)</p>
  </div>
  <div class="page">
    <p>Usual flow of forking algorithms</p>
    <p>read(X)</p>
    <p>write(X, 7) C1C1</p>
    <p>C2 read(X)  7</p>
    <p>C2 is forked from C1 A Join  not allowed with fork</p>
    <p>linearizability</p>
    <p>My context is: start (I am the first operation)</p>
    <p>My context is: start (I am the first operation)</p>
    <p>Something is wrong!</p>
    <p>REPLY: operation context (op1, op2,  were scheduled before you)</p>
    <p>[For read operation also: value, signed context of corresponding write]</p>
    <p>COMMIT op (signed context)</p>
    <p>SUBMIT read/write operation</p>
    <p>Client Server</p>
    <p>Joins, and how to prevent them</p>
  </div>
  <div class="page">
    <p>Problems with forking</p>
    <p>models</p>
  </div>
  <div class="page">
    <p>Venus Design Principles</p>
    <p>consistency/integrity violation  post-attack method  checks if server behaved correctly (application specific)  doesnt require trusted hardware / synchrony</p>
  </div>
  <div class="page">
    <p>Eventual Consistency  First used in Bayou (SOSP 95)</p>
    <p>Today in commercial systems, e.g., Amazons Dynamo (SOSP 07)</p>
    <p>Client operations complete optimistically</p>
    <p>Client notified when its operation is known to be consistent  But may invoke other operations without waiting for these notifications</p>
    <p>Resembles Futures, Promises, etc.  Future&lt;T&gt;: result of an asynchronous computation  Concept exists since late 70s  java.util.concurrent.Future in Java, Parallel Extensions library for C#,</p>
    <p>Sub::Future in Perl, pythonfutures for Python, etc.</p>
  </div>
  <div class="page">
    <p>Commodity Storage Service</p>
    <p>Verifier</p>
    <p>core set</p>
    <p>Venus Architecture</p>
    <p>client-side library</p>
    <p>May be hosted and</p>
    <p>distributed</p>
    <p>May crash, or</p>
    <p>temporarily disconnect</p>
    <p>May disconnect, but majority dont crash</p>
    <p>Using e.g., email</p>
    <p>When joining or suspecting</p>
    <p>failure</p>
    <p>Verifier</p>
  </div>
  <div class="page">
    <p>Venus Semantics</p>
    <p>When storage is correct, operations are wait-free</p>
    <p>An operation is Yellow when it completes  Guarantee: integrity and weak (causal) consistency</p>
    <p>It later becomes Green  Implies that all preceding ops of this client are also Green  Guarantee: all clients observe Green operations in the same order</p>
    <p>(two conflicting operations cannot both become Green)</p>
    <p>Every Yellow operation eventually becomes Green,</p>
    <p>or failure is detected</p>
  </div>
  <div class="page">
    <p>Venus Basics  Clients read/write data directly from storage</p>
    <p>Separately store meta-data on verifier  Optimistically parallelized with storing the data  Meta-data: pointer to storage, hash, and context info</p>
    <p>Operation becomes yellow when it completes  If integrity/causality violated, operation doesnt complete,</p>
    <p>failure notification is issued</p>
    <p>Operation becomes green when enough</p>
    <p>context info is collected  Periodically retrieve context info from verifier  If no new info for long enough, contact a core client directly</p>
    <p>Did core set clients</p>
    <p>observe my op as I did ?</p>
  </div>
  <div class="page">
    <p>Venus Implementation &amp; Evaluation</p>
    <p>Amazon S3 used as the storage service</p>
    <p>Location of verifier:  same LAN as clients @ Technion  over WAN connection, on a public computer @ MIT</p>
    <p>Clients join with id = email address  Clients (rarely) send automated emails to each other (SMTP &amp; IMAP)  Supports offline clients, clients behind firewalls, etc.</p>
    <p>GnuPG was used for authentication</p>
    <p>Tested using micro-benchmarks &amp; simulated attacks 15</p>
  </div>
  <div class="page">
    <p>Venus Compared to raw S3</p>
  </div>
  <div class="page">
    <p>Conclusions  Venus offers simple yellow/green semantics</p>
    <p>Augments storage read/write interface with green&amp;failure notifications  Eventual consistency + Fail-Awareness</p>
    <p>Provides consistency &amp; integrity, even when storage is faulty</p>
    <p>No additional trusted components</p>
    <p>Normal flow unaffected: client ops complete independently</p>
    <p>Works with unmodified cloud storage, evaluated with S3</p>
  </div>
  <div class="page">
    <p>Questions?</p>
  </div>
</Presentation>
