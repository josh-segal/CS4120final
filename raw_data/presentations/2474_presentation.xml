<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Crom: Faster Web Browsing Using Specula9ve Execu9on</p>
    <p>James Mickens Jeremy Elson Jon Howell Jacob R. Lorch</p>
  </div>
  <div class="page">
    <p>Surfing the Web</p>
  </div>
  <div class="page">
    <p>Prefetching: Web 1.0  Sta9c objects connected by declara9ve links  Find prefetchable objects by traversing graph</p>
    <p>&lt;TABLE WIDTH='100%&gt; &lt;TR&gt; &lt;TD VALIGN='TOP' HEIGHT=60&gt; &lt;A HREF='/misc/winNews.htm'&gt; Windows news &lt;/A&gt; &lt;/TD&gt;</p>
  </div>
  <div class="page">
    <p>The Brave New World: Web 2.0</p>
    <p>imgTile.ondblclick = func9on(){ map.centerTile = imgTile; map.zoomLevel++; map.fetchAndDisplayNeighbors(imgTile, map.zoomLevel); }</p>
  </div>
  <div class="page">
    <p>New Challenges to Prefetching</p>
    <p>Fetches triggered by impera9ve event handlers  Cant just preexecute handlers to warm cache</p>
    <p>Prefetcher must understand JavaScript  Hide side effects of specula9on un9l commit 9me</p>
    <p>imgTile.ondblclick = func9on(){ map.centerTile = imgTile; map.zoomLevel++; map.fetchAndDisplayNeighbors(imgTile, map.zoomLevel); }</p>
  </div>
  <div class="page">
    <p>New Challenges to Prefetching  Fetches oken driven by usergenerated inputs  Binary: clicking a download bulon  Unconstrained: typing into a search form</p>
    <p>Infeasible to speculate on all possible user inputs!  Only speculate on constrained set of reasonable inputs</p>
  </div>
  <div class="page">
    <p>Prior Solu9ons: Custom Code  Advantage: Exploit appspecific knowledge for . . .  Tight code  High performance</p>
    <p>Disadvantages:  Oken difficult to write  Tightly integrated with applica9on code base (cant be shared with other apps)</p>
  </div>
  <div class="page">
    <p>Our Solu9on: Crom</p>
    <p>A generic specula9on engine for JavaScript  Implemented as regular JavaScript library  Requires no modifica9on to browsers</p>
    <p>Applica9ons define their specula0ve intents  Which event handlers should be specula9ve?  At what point should specula9ons occur?  Given an applica9on state, how does Crom generate specula9ve user inputs that are reasonable?</p>
  </div>
  <div class="page">
    <p>Crom Handles The Rest   Clones browser state  Executes rewrilen event handlers</p>
    <p>Commits shadow state if appropriate (fetch latency masked!)</p>
    <p>Crom provides other goodness:  AJAX cache  Specula9ve upload API  Specula9ve r+w ops on serverside</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Specula9ve Execu9on  Cloning the browser state  Rewri9ng event handlers  Commisng specula9ve contexts  Op9miza9ons</p>
    <p>Evalua9on  Related Work  Conclusions</p>
  </div>
  <div class="page">
    <p>Adding Specula9ve Execu9on</p>
    <p>&lt;div id=textDiv&gt; Click here to increment counter! &lt;/div&gt; &lt;script&gt; var globalVar = 42; var f1 = func9on(){globalVar++;}; var f2 = func9on(){globalVar++; f1();}; var t = document.getElementById(textDiv); t.onclick = f2; &lt;/script&gt;</p>
    <p>&lt;/script&gt;</p>
    <p>Crom.makeSpecula9ve(t, onclick); Crom.speculate();</p>
  </div>
  <div class="page">
    <p>Cloning the Browser State</p>
    <p>Applica9on heap  All JavaScript objects reachable from the roots of the global namespace</p>
    <p>Apps access global namespace through global window variable (e.g., window.X)</p>
    <p>DOM tree  JavaScript data structure represen9ng page HTML  Each HTML tag has corresponding DOM object  App changes page visuals by modifying DOM tree</p>
  </div>
  <div class="page">
    <p>Cloning the Applica9on Heap</p>
    <p>Walk object graph and deepcopy everything</p>
    <p>Objects, primi9ves copied in obvious way . . .  Func9ons  clonedF = eval(f.toString())  Deep copy any object proper9es</p>
    <p>var specWindow = {}; //Our shadow global namespace for(var globalProp in window)</p>
    <p>specWindow[globalProp] = Crom.deepCopy(window[globalProp]);</p>
  </div>
  <div class="page">
    <p>Cloning the DOM Tree</p>
    <p>&lt;div&gt; &lt;div&gt;</p>
    <p>&lt;p&gt; &lt;p&gt;</p>
    <p>&lt;body&gt;</p>
    <p>Style alributes</p>
    <p>Event handlers</p>
    <p>App proper9es</p>
    <p>Style alributes</p>
    <p>Event handlers</p>
    <p>App proper9es</p>
    <p>&lt;div&gt; &lt;div&gt;</p>
    <p>&lt;p&gt; &lt;p&gt;</p>
    <p>&lt;body&gt;</p>
    <p>Style alributes</p>
    <p>Style alributes</p>
    <p>App proper9es</p>
    <p>App proper9es</p>
    <p>Event handlers</p>
    <p>Event handlers</p>
  </div>
  <div class="page">
    <p>Pusng It All Together</p>
    <p>Congratula9ons!</p>
    <p>//Create a new DOM tree var specFrame = document.createElement(IFRAME); specFrame.document.body = Crom.cloneDOM();</p>
    <p>//Create a new global JavaScript namespace var specWindow = {}; for(var globalProp in window) specWindow[globalProp] = Crom.deepCopy(window[globalProp]); specWindow.window = specWindow; specWindow.document = specFrame.document;</p>
  </div>
  <div class="page">
    <p>global_scope = {globalVar: 42, f1: func9on(){}, f2: func9on(){}}</p>
    <p>JavaScript is lexically scoped  Ac9va9on records are objects (varNamevarValue)  Resolve refs by following chain of scope objects</p>
    <p>f2_scope = {};</p>
    <p>var globalVar = 42;</p>
    <p>var f1 = func9on(){globalVar++;}</p>
    <p>var f2 = func9on(){globalVar++; f1();}</p>
    <p>Toplevel code</p>
    <p>Call f2() Get value of globalVar</p>
    <p>Look for globalVar FAIL</p>
    <p>Look for globalVar SUCCEED</p>
    <p>Rewri9ng Event Handlers</p>
  </div>
  <div class="page">
    <p>Rewri9ng Event Handlers  with(obj) inserts obj to front of scope chain</p>
    <p>global_scope = {globalVar: 42, f1: func9on(){}, f2: func9on(){}}</p>
    <p>f2_scope = {};</p>
    <p>Crom.rewrite = func9on(f, specWindow){</p>
    <p>var newSrc = func9on f(){ +</p>
    <p>with(specWindow){ +</p>
    <p>f.toString() + }}; return eval(newSrc);</p>
    <p>};</p>
    <p>var globalVar = 42;</p>
    <p>var f1 = func9on(){globalVar++;}</p>
    <p>var f2 = func9on(){globalVar++; f1();} var f2 = Crom.rewrite(f2);</p>
    <p>Call f2() Access globalVar</p>
    <p>specWindow = {globalVar: 42, f1: func9on(){}, f2: func9on(){}}</p>
    <p>Look for globalVar SUCCEED</p>
    <p>Prevents specula9on from modifying non spec global state!</p>
  </div>
  <div class="page">
    <p>Rewri9ng Event Handlers  Various details (see the paper)  Lazily rewri9ng inner func9on calls  Addi9on/dele9on of global variables  Rewri9ng closures  Local variables that shadow global ones</p>
    <p>var f2 = func9on(){</p>
    <p>globalVar++;</p>
    <p>f1();</p>
    <p>};</p>
    <p>specWindow = Crom.newContext();</p>
    <p>var f2 = func9on(){</p>
    <p>with(specWindow){</p>
    <p>var f1 = Crom.rewrite(f1, specWindow); globalVar++;</p>
    <p>f1();</p>
    <p>}</p>
    <p>};</p>
  </div>
  <div class="page">
    <p>Adding Specula9ve Execu9on</p>
    <p>&lt;div id=textDiv&gt; Click here to increment counter! &lt;/div&gt; &lt;script&gt; var globalVar = 42; var f1 = func9on(){globalVar++;} var f2 = func9on(){globalVar++; f1();} var t = document.getElementById(textDiv); t.onclick = f2;</p>
    <p>&lt;/script&gt;</p>
    <p>Crom.makeSpecula9ve(t, onclick); Crom.speculate();</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Specula9ve Execu9on  Cloning the browser state  Rewri9ng event handlers  Commisng specula9ve contexts  Op9miza9ons</p>
    <p>Evalua9on  Related Work  Conclusions</p>
  </div>
  <div class="page">
    <p>Commisng Specula9ve Contexts  Suppose you know which one to commit . . .</p>
    <p>. . . but how do you know?</p>
    <p>//Commit the specula9ve DOM tree document.body = specWindow.document.body;</p>
    <p>//Commit the applica9on heap by commisng global heap roots for(var propName in specWindow) window[propName] = specWindow[propName];</p>
    <p>//Cleanup globals deleted by commisng specula9on for(var propName in window){ if(!(propName in specWindow)) delete window[propName]; }</p>
  </div>
  <div class="page">
    <p>Startstate Equivalence</p>
    <p>When is it safe to commit a specula9ve context?  Its start state must have been equivalent to applica9ons current state</p>
    <p>The specula9ve input that mutated it must be equivalent to the current (real) input</p>
    <p>Applica9on defines equivalence func9on  Hash func9on over global namespace (real or specula9ve)  Specula9ve context can only commit if its hash matches that of current (real) namespace</p>
    <p>Applica9on defines mutator func9on  Tells Crom how to change a new specula9ve context before running specula9ve event handler</p>
  </div>
  <div class="page">
    <p>Mutator: func9on(specNamespace, specInput){ specNamespace.searchText = specInput; } State hash: func9on(globalNamespace){ return globalNamespace.searchText; } Crom.makeSpecula9ve(searchText, onchange, mutator, stateHash, [[housing], [tulips]]);</p>
  </div>
  <div class="page">
    <p>S Shousing</p>
    <p>Stulips Crom clones</p>
    <p>Crom mutates</p>
    <p>Shousing</p>
    <p>S</p>
    <p>S</p>
    <p>Stulips Crom speculates, warms cache</p>
    <p>S Shousing User types housing</p>
    <p>Crom finds shadow state w/matching hash, commits it</p>
    <p>Shousing</p>
  </div>
  <div class="page">
    <p>Startstate Equivalence</p>
    <p>What if app doesnt specify SSE data?  Crom throws away all specula9ons whenever any event handler executes, respeculates on everything</p>
    <p>Guarantees correctness for commits . . .  . . . but may lead to wasteful respecula9on</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Specula9ve Execu9on  Cloning the browser state  Rewri9ng event handlers  Commisng specula9ve contexts  Op9miza9ons</p>
    <p>Evalua9on  Related Work  Conclusions</p>
  </div>
  <div class="page">
    <p>Dont need to copy en9re heap forest!  Only clone trees touched by specula9on</p>
    <p>Lazily clone them at rewrite 9me</p>
    <p>X</p>
    <p>Z Y</p>
    <p>Y</p>
    <p>Z</p>
    <p>X</p>
    <p>Z</p>
    <p>X</p>
    <p>Z</p>
    <p>Y</p>
    <p>Z</p>
    <p>Y</p>
    <p>Stale!</p>
  </div>
  <div class="page">
    <p>X</p>
    <p>Z</p>
    <p>Y</p>
    <p>Y:1 X:0</p>
    <p>Z:2 Z:2</p>
    <p>Y:1</p>
    <p>Tracking Parent References</p>
    <p>X:0 Y:1</p>
    <p>Z:2 Y:1</p>
    <p>Z:2</p>
    <p>X:0</p>
    <p>Z:2</p>
    <p>Y:1</p>
    <p>Z:2</p>
    <p>X:0</p>
  </div>
  <div class="page">
    <p>Three Specula9on Modes  Full copy: clone en0re heap for each specula9on  Always safe  May be slow  Nonamor9zable costs</p>
    <p>Checked lazy mode: lazy copying+parent tracking  Always safe  Parent mapping costs amor9zable across specula9ons  May be slow</p>
    <p>Unchecked lazy mode  Fast  Oken safe in prac9ce, but strictly speaking . . .  . . . unsafe without checked mode refactoring</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Specula9ve Execu9on  Cloning the browser state  Rewri9ng event handlers  Commisng specula9ve contexts  Op9miza9ons</p>
    <p>Evalua9on  Related Work  Conclusions</p>
  </div>
  <div class="page">
    <p>Evalua9on Applica9on</p>
    <p>DHTMLGoodies Tab Manager  Speculate on crea9ng new tab (AJAX www.cnn.com)  Embed manager code within ESPN front page</p>
    <p>Can we hide Croms overhead in user think 9me?</p>
  </div>
  <div class="page">
    <p>Specula9on Costs (Unchecked Lazy Mode)</p>
    <p>Copy DOM</p>
    <p>tree</p>
    <p>Copy EH a</p>
    <p>nd U O</p>
    <p>Rewr ite m</p>
    <p>utato r</p>
    <p>Rewr ite h</p>
    <p>andle r (lex</p>
    <p>ical a nalys</p>
    <p>is + e val())</p>
    <p>Rewr ite h</p>
    <p>andle r (clo</p>
    <p>ning obje</p>
    <p>cts)</p>
    <p>Com mit s</p>
    <p>pecu la9ve</p>
    <p>cont ext</p>
    <p>Ex ec u &amp; o n &amp; m e (m</p>
    <p>s)</p>
    <p>24 ms 77ms</p>
  </div>
  <div class="page">
    <p>Specula9on Costs (Checked Lazy Mode)</p>
    <p>Precommit overhead: 182 ms Commit overhead: 5 ms</p>
  </div>
  <div class="page">
    <p>Specula9on Costs: Autocompletor</p>
    <p>Copy DOM</p>
    <p>tree</p>
    <p>Copy EH a</p>
    <p>nd U O</p>
    <p>Rewr ite m</p>
    <p>utato r</p>
    <p>Rewr ite h</p>
    <p>andle r (lex</p>
    <p>ical a nalys</p>
    <p>is + e val())</p>
    <p>Rewr ite h</p>
    <p>andle r (clo</p>
    <p>ning obje</p>
    <p>cts)</p>
    <p>Com mit s</p>
    <p>pecu la9ve</p>
    <p>cont ext</p>
    <p>Ex ec u &amp; o n &amp; m e (m</p>
    <p>s)</p>
    <p>114 ms 67ms</p>
  </div>
  <div class="page">
    <p>Specula9on Costs: Autocompletor</p>
    <p>Prespecula9on overhead: 493 ms Commit overhead: 7 ms</p>
  </div>
  <div class="page">
    <p>Se co n d s to F in al R ep</p>
    <p>ai n t</p>
    <p>Ar&amp;ficially Induced Fetch Latency (ms)</p>
    <p>No specula9on</p>
    <p>Crom specula9on</p>
    <p>Userperceived Latency Reduc9on</p>
  </div>
  <div class="page">
    <p>Copying the Full Heap</p>
    <p>&amp; re A p p H ea p ( m s)</p>
  </div>
  <div class="page">
    <p>Copying the Full DOM Tree</p>
    <p>Fu ll D O M T re e C o p y (m</p>
    <p>s) Copying event handlers</p>
    <p>and userdefined objects</p>
    <p>Copying DOM tree (done by na9ve code)</p>
  </div>
  <div class="page">
    <p>Building the Parent Map</p>
    <p>Pa re n t m ap</p>
    <p>p in g &amp; m e (m</p>
    <p>s) Applica9on heap</p>
    <p>DOM tree</p>
  </div>
  <div class="page">
    <p>Commisng the En9re DOM Tree</p>
    <p>C o m m iF</p>
    <p>n g en</p>
    <p>&amp; re D O M t re e (m</p>
    <p>s)</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Specula9ve Execu9on  Cloning the browser state  Rewri9ng event handlers  Commisng specula9ve contexts  Op9miza9ons</p>
    <p>Evalua9on  Related Work  Conclusions</p>
  </div>
  <div class="page">
    <p>The Shoulders of Giants</p>
    <p>Specula9on is a wellknown op9miza9on  File systems: Chang et al, Speculator  Sta9c web data: Fasterfox, HTML 5 prefetch alribute</p>
    <p>Croms contribu9ons  Exploit language introspec0on to have apps selfmodify</p>
    <p>Explicitly reason about user inputs  Handle dynamicallynamed content</p>
  </div>
  <div class="page">
    <p>Conclusions  Prefetching nontrivial in RIA  Must reason about JavaScript to get fetch targets!</p>
    <p>Current specula9ve solu9ons use custom code</p>
    <p>Crom: generic JS specula9on engine  Applica9ons express specula9ve intents</p>
    <p>Crom automates lowlevel tasks  Can reduce userperceived latency by order of magnitude</p>
  </div>
</Presentation>
