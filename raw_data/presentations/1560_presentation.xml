<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>vNFS: Maximizing NFS Performance with Compounds and Vectorized I/O</p>
    <p>Ming Chen, Dean Hildebrand, Henry Nelson,</p>
    <p>Jasmit Saluja, Ashok Sankar Harihara Subramony, and Erez Zadok</p>
    <p>Stony Brook University, IBM Research  Almaden, Ward Melville High School</p>
    <p>https://github.com/sbu-fsl/txn-compound</p>
    <p>2017 Stony Brook University vNFS talk (FAST17) 2March 2, 2017</p>
    <p>Network File System (NFS) l An IETF standardized storage protocol l Provides transparent remote file access l Needs to overcome the high network latency</p>
    <p>vNFS talk (FAST17) 3March 2, 2017</p>
    <p>NFSv4 Compound Procedures Client Server</p>
    <p>vNFS talk (FAST17) 4March 2, 2017</p>
    <p>NFSv4 Compound Procedures Client Server</p>
    <p>vNFS talk (FAST17) 5March 2, 2017</p>
    <p>NFSv4 Compound Procedures Client Server</p>
    <p>vNFS talk (FAST17) 6March 2, 2017</p>
    <p>NFSv4 Compound Procedures Client Server</p>
  </div>
  <div class="page">
    <p>vNFS talk (FAST17) 7March 2, 2017</p>
    <p>NFSv4 Compound Procedures Client Server</p>
    <p>Bandwidth Wasted</p>
    <p>vNFS talk (FAST17) 8March 2, 2017</p>
    <p>NFSv4 Compound Procedures</p>
    <p>Compound Reply:</p>
    <p>Compound Request:</p>
    <p>READ ~/.bashrc; READ ~/.bash_profile; READ ~/.bash_login</p>
    <p>~/.bashrc content; ~/.bash_profile content; ~/.bash_login content</p>
    <p>Client Server</p>
    <p>Bandwidth Utilized</p>
    <p>vNFS talk (FAST17) 9March 2, 2017</p>
    <p>Compounds Are Underused! l Limited by the synchronous POSIX file-system API</p>
    <p>u Example: reading /home/Bob/.bashrc</p>
    <p>vNFS talk (FAST17) 10March 2, 2017</p>
    <p>Compounds Are Underused! l Limited by the synchronous POSIX file-system API</p>
    <p>u Example: reading /home/Bob/.bashrc Client Server</p>
    <p>round trips</p>
    <p>vNFS talk (FAST17) 11March 2, 2017</p>
    <p>Compounds Are Underused! l Limited by the synchronous POSIX file-system API</p>
    <p>u Example: reading /home/Bob/.bashrc Client Server</p>
    <p>stat(2):</p>
    <p>(1) PUTROOTFH; LOOKUP home; GETFH; GETATTR.</p>
    <p>(2) PUTFH fh1; LOOKUP Bob; GETFH; GETATTR.</p>
    <p>FH (fh1) and attributes of /home.</p>
    <p>FH (fh2) and attributes of /home/Bob.</p>
    <p>round trips</p>
    <p>vNFS talk (FAST17) 12March 2, 2017</p>
    <p>Compounds Are Underused! l Limited by the synchronous POSIX file-system API</p>
    <p>u Example: reading /home/Bob/.bashrc Client Server</p>
    <p>stat(2):</p>
    <p>open(2):</p>
    <p>(1) PUTROOTFH; LOOKUP home; GETFH; GETATTR.</p>
    <p>(2) PUTFH fh1; LOOKUP Bob; GETFH; GETATTR.</p>
    <p>(3) PUTFH fh2; OPEN .bashrc; GETFH; GETATTR.</p>
    <p>FH (fh1) and attributes of /home.</p>
    <p>FH (fh2) and attributes of /home/Bob.</p>
    <p>FH (fh3) and attributes of ~/.bashrc.</p>
    <p>round trips</p>
  </div>
  <div class="page">
    <p>vNFS talk (FAST17) 13March 2, 2017</p>
    <p>Compounds Are Underused! l Limited by the synchronous POSIX file-system API</p>
    <p>u Example: reading /home/Bob/.bashrc Client Server</p>
    <p>stat(2):</p>
    <p>open(2):</p>
    <p>read(2):</p>
    <p>(1) PUTROOTFH; LOOKUP home; GETFH; GETATTR.</p>
    <p>(2) PUTFH fh1; LOOKUP Bob; GETFH; GETATTR.</p>
    <p>(3) PUTFH fh2; OPEN .bashrc; GETFH; GETATTR.</p>
    <p>(4) PUTFH fh3; READ 0 4096;</p>
    <p>FH (fh1) and attributes of /home.</p>
    <p>FH (fh2) and attributes of /home/Bob.</p>
    <p>FH (fh3) and attributes of ~/.bashrc.</p>
    <p>~/.bashrc file content.</p>
    <p>round trips</p>
    <p>vNFS talk (FAST17) 14March 2, 2017</p>
    <p>Compounds Are Underused! l Limited by the synchronous POSIX file-system API</p>
    <p>u Example: reading /home/Bob/.bashrc Client Server</p>
    <p>stat(2):</p>
    <p>open(2):</p>
    <p>read(2):</p>
    <p>close(2):</p>
    <p>(1) PUTROOTFH; LOOKUP home; GETFH; GETATTR.</p>
    <p>(2) PUTFH fh1; LOOKUP Bob; GETFH; GETATTR.</p>
    <p>(3) PUTFH fh2; OPEN .bashrc; GETFH; GETATTR.</p>
    <p>(4) PUTFH fh3; READ 0 4096;</p>
    <p>(5) PUTFH fh3; CLOSE; GETATTR.</p>
    <p>FH (fh1) and attributes of /home.</p>
    <p>FH (fh2) and attributes of /home/Bob.</p>
    <p>FH (fh3) and attributes of ~/.bashrc.</p>
    <p>~/.bashrc file content.</p>
    <p>Attributes of ~/.bashrc.</p>
    <p>round trips</p>
    <p>vNFS talk (FAST17) 15March 2, 2017</p>
    <p>Compounds Are Underused! l Limited by the synchronous POSIX file-system API</p>
    <p>u Example: reading /home/Bob/.bashrc Client Server</p>
    <p>stat(2):</p>
    <p>open(2):</p>
    <p>read(2):</p>
    <p>close(2):</p>
    <p>(1) PUTROOTFH; LOOKUP home; GETFH; GETATTR.</p>
    <p>(2) PUTFH fh1; LOOKUP Bob; GETFH; GETATTR.</p>
    <p>(3) PUTFH fh2; OPEN .bashrc; GETFH; GETATTR.</p>
    <p>(4) PUTFH fh3; READ 0 4096;</p>
    <p>(5) PUTFH fh3; CLOSE; GETATTR.</p>
    <p>FH (fh1) and attributes of /home.</p>
    <p>FH (fh2) and attributes of /home/Bob.</p>
    <p>FH (fh3) and attributes of ~/.bashrc.</p>
    <p>~/.bashrc file content.</p>
    <p>Attributes of ~/.bashrc.</p>
    <p>round trips</p>
    <p>vNFS talk (FAST17) 16March 2, 2017</p>
    <p>Need a Batching File-System API l Target: open, read, and close multiple files in one RPC</p>
    <p>Client Server</p>
    <p>(1) PUTROOTFH; LOOKUP home; GETFH; GETATTR.</p>
    <p>round trips</p>
    <p>vNFS talk (FAST17) 17March 2, 2017</p>
    <p>Need a Batching File-System API l Target: open, read, and close multiple files in one RPC</p>
    <p>Client Server</p>
    <p>(1) PUTROOTFH; LOOKUP home; GETFH; GETATTR.Vectorized High-level</p>
    <p>File-system API</p>
    <p>round trips</p>
    <p>vNFS talk (FAST17) 18March 2, 2017</p>
    <p>Need a Batching File-System API l Target: open, read, and close multiple files in one RPC</p>
    <p>Client Server</p>
    <p>Vectorized High-level</p>
    <p>File-system API</p>
    <p>PUTROOTFH; LOOKUP home; LOOKUP Bob; GETFH; GETATTR; SAVEFH; OPEN .bashrc; READ 0 4096; CLOSE; GETFH; GETATTR; RESTOREFH; OPEN .bash_profile; READ 0 4096; CLOSE; GETFH; GETATTR; RESTOREFH; OPEN .bash_login; READ 0 4096; CLOSE; GETFH; GETATTR.</p>
    <p>File handles, attributes, and file contents of .bashrc, .bash_profile, and .bash_login.</p>
    <p>round trips</p>
  </div>
  <div class="page">
    <p>vNFS talk (FAST17) 19March 2, 2017</p>
    <p>Need a Batching File-System API l Target: open, read, and close multiple files in one RPC</p>
    <p>Client Server</p>
    <p>Vectorized High-level</p>
    <p>File-system API</p>
    <p>PUTROOTFH; LOOKUP home; LOOKUP Bob; GETFH; GETATTR; SAVEFH; OPEN .bashrc; READ 0 4096; CLOSE; GETFH; GETATTR; RESTOREFH; OPEN .bash_profile; READ 0 4096; CLOSE; GETFH; GETATTR; RESTOREFH; OPEN .bash_login; READ 0 4096; CLOSE; GETFH; GETATTR.</p>
    <p>File handles, attributes, and file contents of .bashrc, .bash_profile, and .bash_login.</p>
    <p>round trips</p>
    <p>vNFS talk (FAST17) 20March 2, 2017</p>
    <p>vread/vwrite</p>
    <p>l Read/write many files u Unlike readv/writev(2): many (non-contiguous) offsets</p>
    <p>of many files u Append to file when write offset is UINT64_MAX</p>
    <p>l Automatic file opening/closing u Pass states using current filehandle and current stateid</p>
    <p>struct vio { struct vfile vfile; // [IN]: a file identified by path or descriptor uint64_t offset; // [IN]: offset of read/write, UINT64_MAX means append uint64_t length; // [IN]: bytes to read/write; [OUT]: bytes read/written const char *data; // [IN]: data to write; [OUT]: buffer for read uint32_t flags; // [IN] flags: is_creation, is_write_stable</p>
    <p>}; // [OUT] flags: is_eof, is_write_stable struct vres vread(struct vio *ios, int n); struct vres vwrite(struct vio *ios, int n);</p>
    <p>vNFS talk (FAST17) 21March 2, 2017</p>
    <p>vread/vwrite</p>
    <p>l Read/write many files u Unlike readv/writev(2): many (non-contiguous) offsets</p>
    <p>of many files u Append to file when write offset is UINT64_MAX</p>
    <p>l Automatic file opening/closing u Pass states using current filehandle and current stateid</p>
    <p>struct vio { struct vfile vfile; // [IN]: a file identified by path or descriptor uint64_t offset; // [IN]: offset of read/write, UINT64_MAX means append uint64_t length; // [IN]: bytes to read/write; [OUT]: bytes read/written const char *data; // [IN]: data to write; [OUT]: buffer for read uint32_t flags; // [IN] flags: is_creation, is_write_stable</p>
    <p>}; // [OUT] flags: is_eof, is_write_stable struct vres vread(struct vio *ios, int n); struct vres vwrite(struct vio *ios, int n);</p>
    <p>vNFS talk (FAST17) 22March 2, 2017</p>
    <p>vread/vwrite</p>
    <p>l Read/write many files u Unlike readv/writev(2): many (non-contiguous) offsets</p>
    <p>of many files u Append to file when write offset is UINT64_MAX</p>
    <p>l Automatic file opening/closing u Pass states using current filehandle and current stateid</p>
    <p>struct vio { struct vfile vfile; // [IN]: a file identified by path or descriptor uint64_t offset; // [IN]: offset of read/write, UINT64_MAX means append uint64_t length; // [IN]: bytes to read/write; [OUT]: bytes read/written const char *data; // [IN]: data to write; [OUT]: buffer for read uint32_t flags; // [IN] flags: is_creation, is_write_stable</p>
    <p>}; // [OUT] flags: is_eof, is_write_stable struct vres vread(struct vio *ios, int n); struct vres vwrite(struct vio *ios, int n);</p>
    <p>vNFS talk (FAST17) 23March 2, 2017</p>
    <p>vread/vwrite</p>
    <p>l Read/write many files u Unlike readv/writev(2): many (non-contiguous) offsets</p>
    <p>of many files u Append to file when write offset is UINT64_MAX</p>
    <p>l Automatic file opening/closing u Pass states using current filehandle and current stateid</p>
    <p>struct vio { struct vfile vfile; // [IN]: a file identified by path or descriptor uint64_t offset; // [IN]: offset of read/write, UINT64_MAX means append uint64_t length; // [IN]: bytes to read/write; [OUT]: bytes read/written const char *data; // [IN]: data to write; [OUT]: buffer for read uint32_t flags; // [IN] flags: is_creation, is_write_stable</p>
    <p>}; // [OUT] flags: is_eof, is_write_stable struct vres vread(struct vio *ios, int n); struct vres vwrite(struct vio *ios, int n);</p>
    <p>vNFS talk (FAST17) 24March 2, 2017</p>
    <p>vgetattrs/vsetattrs</p>
    <p>l vgetattrs: get attributes of files l vsetattrs: set attributes of files</p>
    <p>u Useful for copying attributes of files, e.g., tar and rsync u Combines chmod, chown, utimes, truncate u Linux kernel uses inode_operations-&gt;setattr u NFSv4 uses the SETATTR operation</p>
  </div>
  <div class="page">
    <p>vNFS talk (FAST17) 25March 2, 2017</p>
    <p>vgetattrs/vsetattrs</p>
    <p>l vgetattrs: get attributes of files l vsetattrs: set attributes of files</p>
    <p>u Useful for copying attributes of files, e.g., tar and rsync u Combines chmod, chown, utimes, truncate u Linux kernel uses inode_operations-&gt;setattr u NFSv4 uses the SETATTR operation</p>
    <p>vNFS talk (FAST17) 26March 2, 2017</p>
    <p>vgetattrs/vsetattrs</p>
    <p>l vgetattrs: get attributes of files l vsetattrs: set attributes of files</p>
    <p>u Useful for copying attributes of files, e.g., tar and rsync u Combines chmod, chown, utimes, truncate u Linux kernel uses inode_operations-&gt;setattr u NFSv4 uses the SETATTR operation</p>
    <p>vNFS talk (FAST17) 27March 2, 2017</p>
    <p>l Copy many files partly or entirely u Create destination files if necessary</p>
    <p>l vcopy</p>
    <p>l vsscopy (Server Side Copy in NFSv4.2)</p>
    <p>vcopy/vsscopy</p>
    <p>READ src1; READ src2</p>
    <p>data read from src1 and src2</p>
    <p>WRITE dst1; WRITE dst2</p>
    <p>#bytes written to dst1 and dst2</p>
    <p>COPY src1 to dst1; COPY src2 to dst2</p>
    <p>#bytes copied from src1 to dst1, src2 to dst2</p>
    <p>vNFS talk (FAST17) 28March 2, 2017</p>
    <p>l Copy many files partly or entirely u Create destination files if necessary</p>
    <p>l vcopy</p>
    <p>l vsscopy (Server Side Copy in NFSv4.2)</p>
    <p>vcopy/vsscopy</p>
    <p>READ src1; READ src2</p>
    <p>data read from src1 and src2</p>
    <p>WRITE dst1; WRITE dst2</p>
    <p>#bytes written to dst1 and dst2</p>
    <p>COPY src1 to dst1; COPY src2 to dst2</p>
    <p>#bytes copied from src1 to dst1, src2 to dst2</p>
    <p>vNFS talk (FAST17) 29March 2, 2017</p>
    <p>l Copy many files partly or entirely u Create destination files if necessary</p>
    <p>l vcopy</p>
    <p>l vsscopy (Server Side Copy in NFSv4.2)</p>
    <p>vcopy/vsscopy</p>
    <p>READ src1; READ src2</p>
    <p>data read from src1 and src2</p>
    <p>WRITE dst1; WRITE dst2</p>
    <p>#bytes written to dst1 and dst2</p>
    <p>COPY src1 to dst1; COPY src2 to dst2</p>
    <p>#bytes copied from src1 to dst1, src2 to dst2</p>
    <p>vNFS talk (FAST17) 30March 2, 2017</p>
    <p>l Copy many files partly or entirely u Create destination files if necessary</p>
    <p>l vcopy</p>
    <p>l vsscopy (Server Side Copy in NFSv4.2)</p>
    <p>vcopy/vsscopy</p>
    <p>READ src1; READ src2</p>
    <p>data read from src1 and src2</p>
    <p>WRITE dst1; WRITE dst2</p>
    <p>#bytes written to dst1 and dst2</p>
    <p>COPY src1 to dst1; COPY src2 to dst2</p>
    <p>#bytes copied from src1 to dst1, src2 to dst2</p>
  </div>
  <div class="page">
    <p>vNFS talk (FAST17) 31March 2, 2017</p>
    <p>l Copy many files partly or entirely u Create destination files if necessary</p>
    <p>l vcopy</p>
    <p>l vsscopy (Server Side Copy in NFSv4.2)</p>
    <p>vcopy/vsscopy</p>
    <p>READ src1; READ src2</p>
    <p>data read from src1 and src2</p>
    <p>WRITE dst1; WRITE dst2</p>
    <p>#bytes written to dst1 and dst2</p>
    <p>COPY src1 to dst1; COPY src2 to dst2</p>
    <p>#bytes copied from src1 to dst1, src2 to dst2</p>
    <p>vNFS talk (FAST17) 32March 2, 2017</p>
    <p>Other Operations l vopen/vclose</p>
    <p>u Large files u Maintain close-to-open consistency</p>
    <p>l vsymlink/vreadlink/vhardlink u Example: create a symlink tree: cp -sr</p>
    <p>l vmkdir/vlistdir u Example: create /a, /a/b, and /a/b/c uvlistdir: list multiple directories (recursively)</p>
    <p>l vremove l vrename</p>
    <p>vNFS talk (FAST17) 33March 2, 2017</p>
    <p>Other Operations l vopen/vclose</p>
    <p>u Large files u Maintain close-to-open consistency</p>
    <p>l vsymlink/vreadlink/vhardlink u Example: create a symlink tree: cp -sr</p>
    <p>l vmkdir/vlistdir u Example: create /a, /a/b, and /a/b/c uvlistdir: list multiple directories (recursively)</p>
    <p>l vremove l vrename</p>
    <p>vNFS talk (FAST17) 34March 2, 2017</p>
    <p>Other Operations l vopen/vclose</p>
    <p>u Large files u Maintain close-to-open consistency</p>
    <p>l vsymlink/vreadlink/vhardlink u Example: create a symlink tree: cp -sr</p>
    <p>l vmkdir/vlistdir u Example: create /a, /a/b, and /a/b/c uvlistdir: list multiple directories (recursively)</p>
    <p>l vremove l vrename</p>
    <p>vNFS talk (FAST17) 35March 2, 2017</p>
    <p>Other Operations l vopen/vclose</p>
    <p>u Large files u Maintain close-to-open consistency</p>
    <p>l vsymlink/vreadlink/vhardlink u Example: create a symlink tree: cp -sr</p>
    <p>l vmkdir/vlistdir u Example: create /a, /a/b, and /a/b/c uvlistdir: list multiple directories (recursively)</p>
    <p>l vremove l vrename</p>
    <p>vNFS talk (FAST17) 36March 2, 2017</p>
    <p>Other Operations l vopen/vclose</p>
    <p>u Large files u Maintain close-to-open consistency</p>
    <p>l vsymlink/vreadlink/vhardlink u Example: create a symlink tree: cp -sr</p>
    <p>l vmkdir/vlistdir u Example: create /a, /a/b, and /a/b/c uvlistdir: list multiple directories (recursively)</p>
    <p>l vremove l vrename</p>
  </div>
  <div class="page">
    <p>vNFS talk (FAST17) 37March 2, 2017</p>
    <p>Architecture</p>
    <p>Applications NFS Server</p>
    <p>NFS Client</p>
    <p>Networking (TCP/IP)</p>
    <p>vNFS ClientvNFS Lib</p>
    <p>NetworkVFS</p>
    <p>User Kernel</p>
    <p>vNFS talk (FAST17) 38March 2, 2017</p>
    <p>Architecture</p>
    <p>Applications NFS Server</p>
    <p>NFS Client</p>
    <p>Networking (TCP/IP)</p>
    <p>vNFS ClientvNFS Lib</p>
    <p>NetworkVFS</p>
    <p>User Kernel</p>
    <p>vNFS talk (FAST17) 39March 2, 2017</p>
    <p>Architecture</p>
    <p>Applications NFS Server</p>
    <p>NFS Client</p>
    <p>Networking (TCP/IP)</p>
    <p>vNFS ClientvNFS Lib</p>
    <p>NetworkVFS</p>
    <p>non-NFSv4 files POSIX APIUser</p>
    <p>Kernel</p>
    <p>vNFS talk (FAST17) 40March 2, 2017</p>
    <p>Architecture</p>
    <p>Applications NFS Server</p>
    <p>NFS Client</p>
    <p>Networking (TCP/IP)</p>
    <p>vNFS ClientvNFS Lib</p>
    <p>NetworkVFS</p>
    <p>non-NFSv4 files POSIX API</p>
    <p>NFSv4 files vNFS API</p>
    <p>User Kernel</p>
    <p>vNFS talk (FAST17) 41March 2, 2017</p>
    <p>Architecture</p>
    <p>Applications NFS Server</p>
    <p>NFS Client</p>
    <p>Networking (TCP/IP)</p>
    <p>vNFS ClientvNFS Lib</p>
    <p>NetworkVFS</p>
    <p>non-NFSv4 files POSIX API</p>
    <p>NFSv4 files vNFS API</p>
    <p>socket User Kernel</p>
    <p>vNFS talk (FAST17) 42March 2, 2017</p>
    <p>Implementation l NFS-Ganesha</p>
    <p>u An open-source user-space NFS server u File-System Abstraction Layer (FSAL) that is similar to VFS</p>
    <p>l Client side u vNFS client based on NFS-Ganesha Proxy FSAL (NFSv4.1) u vNFS library u No client-side cache yet</p>
    <p>l Server side u NFS-Ganesha VFS FSAL u Server Side Copy &amp; atomic file appending</p>
    <p>l Code u C/C++: added 10,632 to NFS-Ganesha; deleted 1,407 u https://github.com/sbu-fsl/txn-compound</p>
  </div>
  <div class="page">
    <p>vNFS talk (FAST17) 43March 2, 2017</p>
    <p>Implementation l NFS-Ganesha</p>
    <p>u An open-source user-space NFS server u File-System Abstraction Layer (FSAL) that is similar to VFS</p>
    <p>l Client side u vNFS client based on NFS-Ganesha Proxy FSAL (NFSv4.1) u vNFS library u No client-side cache yet</p>
    <p>l Server side u NFS-Ganesha VFS FSAL u Server Side Copy &amp; atomic file appending</p>
    <p>l Code u C/C++: added 10,632 to NFS-Ganesha; deleted 1,407 u https://github.com/sbu-fsl/txn-compound</p>
    <p>vNFS talk (FAST17) 44March 2, 2017</p>
    <p>Implementation l NFS-Ganesha</p>
    <p>u An open-source user-space NFS server u File-System Abstraction Layer (FSAL) that is similar to VFS</p>
    <p>l Client side u vNFS client based on NFS-Ganesha Proxy FSAL (NFSv4.1) u vNFS library u No client-side cache yet</p>
    <p>l Server side u NFS-Ganesha VFS FSAL u Server Side Copy &amp; atomic file appending</p>
    <p>l Code u C/C++: added 10,632 to NFS-Ganesha; deleted 1,407 u https://github.com/sbu-fsl/txn-compound</p>
    <p>vNFS talk (FAST17) 45March 2, 2017</p>
    <p>Implementation l NFS-Ganesha</p>
    <p>u An open-source user-space NFS server u File-System Abstraction Layer (FSAL) that is similar to VFS</p>
    <p>l Client side u vNFS client based on NFS-Ganesha Proxy FSAL (NFSv4.1) u vNFS library u No client-side cache yet</p>
    <p>l Server side u NFS-Ganesha VFS FSAL u Server Side Copy &amp; atomic file appending</p>
    <p>l Code u C/C++: added 10,632 to NFS-Ganesha; deleted 1,407 u https://github.com/sbu-fsl/txn-compound</p>
    <p>vNFS talk (FAST17) 46March 2, 2017</p>
    <p>Evaluation l Experimental setup</p>
    <p>u Two six-core machines with 64GB RAM and a 10GbE NIC u Running CentOS 7 with 3.14 kernel u Intel S3700 200GB SSD u Network latency of 0.2ms u Use netem to emulate different networks u Baseline: Linux in-kernel NFSv4.1 client</p>
    <p>l Benchmarks &amp; application porting u Micro-benchmarks u GNU Coreutils (cp, ls, rm) u Tar/Untar u Filebench u HTTP/2 server (nghttp2)</p>
    <p>vNFS talk (FAST17) 47March 2, 2017</p>
    <p>Evaluation l Experimental setup</p>
    <p>u Two six-core machines with 64GB RAM and a 10GbE NIC u Running CentOS 7 with 3.14 kernel u Intel S3700 200GB SSD u Network latency of 0.2ms u Use netem to emulate different networks u Baseline: Linux in-kernel NFSv4.1 client</p>
    <p>l Benchmarks &amp; application porting u Micro-benchmarks u GNU Coreutils (cp, ls, rm) u Tar/Untar u Filebench u HTTP/2 server (nghttp2)</p>
    <p>vNFS talk (FAST17) 48March 2, 2017</p>
    <p>Evaluation l Experimental setup</p>
    <p>u Two six-core machines with 64GB RAM and a 10GbE NIC u Running CentOS 7 with 3.14 kernel u Intel S3700 200GB SSD u Network latency of 0.2ms u Use netem to emulate different networks u Baseline: Linux in-kernel NFSv4.1 client</p>
    <p>l Benchmarks &amp; application porting u Micro-benchmarks u GNU Coreutils (cp, ls, rm) u Tar/Untar u Filebench u HTTP/2 server (nghttp2)</p>
  </div>
  <div class="page">
    <p>vNFS talk (FAST17) 49March 2, 2017</p>
    <p>GNU Coreutils (cp) l Copy the Linux source tree (cp -r)</p>
    <p>vNFS talk (FAST17) 50March 2, 2017</p>
    <p>GNU Coreutils (cp) l Copy the Linux source tree (cp -r)</p>
    <p>vNFS talk (FAST17) 51March 2, 2017</p>
    <p>GNU Coreutils (cp) l Copy the Linux source tree (cp -r)</p>
    <p>vNFS talk (FAST17) 52March 2, 2017</p>
    <p>GNU Coreutils (cp) l Copy the Linux source tree (cp -r)</p>
    <p>vNFS talk (FAST17) 53March 2, 2017</p>
    <p>GNU Coreutils (cp) l Copy the Linux source tree (cp -r)</p>
    <p>vNFS talk (FAST17) 54March 2, 2017</p>
    <p>GNU Coreutils (cp) l Copy the Linux source tree (cp -r)</p>
  </div>
  <div class="page">
    <p>vNFS talk (FAST17) 55March 2, 2017</p>
    <p>GNU Coreutils (cp) l Copy the Linux source tree (cp -r)</p>
    <p>vNFS talk (FAST17) 56March 2, 2017</p>
    <p>GNU Coreutils (ls, cp, rm)</p>
    <p>vNFS talk (FAST17) 57March 2, 2017</p>
    <p>GNU Coreutils (ls, cp, rm)</p>
    <p>vNFS talk (FAST17) 58March 2, 2017</p>
    <p>GNU Coreutils (ls, cp, rm)</p>
    <p>vNFS talk (FAST17) 59March 2, 2017</p>
    <p>GNU Coreutils (ls, cp, rm)</p>
    <p>vNFS talk (FAST17) 60March 2, 2017</p>
    <p>GNU Coreutils (ls, cp, rm)</p>
  </div>
  <div class="page">
    <p>vNFS talk (FAST17) 61March 2, 2017</p>
    <p>GNU Coreutils (ls, cp, rm)</p>
    <p>cp: ++170 and --16 in C ls: ++392 and --203 in C rm: ++21 and --1 in C</p>
    <p>vNFS talk (FAST17) 62March 2, 2017</p>
    <p>Compounding Degree</p>
    <p>Network Latency: 0.2ms</p>
    <p>vNFS talk (FAST17) 63March 2, 2017</p>
    <p>Compounding Degree</p>
    <p>Network Latency: 0.2ms</p>
    <p>vNFS talk (FAST17) 64March 2, 2017</p>
    <p>Compounding Degree</p>
    <p>Comparable or Slightly better Network Latency: 0.2ms</p>
    <p>vNFS talk (FAST17) 65March 2, 2017</p>
    <p>Compounding Degree</p>
    <p>Comparable or Slightly better Network Latency: 0.2ms</p>
    <p>vNFS talk (FAST17) 66March 2, 2017</p>
    <p>Compounding Degree</p>
    <p>Comparable or Slightly better</p>
    <p>Much better</p>
    <p>Network Latency: 0.2ms</p>
  </div>
  <div class="page">
    <p>vNFS talk (FAST17) 67March 2, 2017</p>
    <p>Compounding Degree</p>
    <p>Comparable or Slightly better</p>
    <p>Much better</p>
    <p>Network Latency: 0.2ms</p>
    <p>vNFS talk (FAST17) 68March 2, 2017</p>
    <p>Filebench Workloads</p>
    <p>vNFS talk (FAST17) 69March 2, 2017</p>
    <p>Filebench Workloads</p>
    <p>vNFS talk (FAST17) 70March 2, 2017</p>
    <p>Filebench Workloads</p>
    <p>vNFS talk (FAST17) 71March 2, 2017</p>
    <p>Filebench Workloads</p>
    <p>vNFS talk (FAST17) 72March 2, 2017</p>
    <p>Filebench Workloads</p>
    <p>Filebench: ++759 and --37 in C</p>
  </div>
  <div class="page">
    <p>vNFS talk (FAST17) 73March 2, 2017</p>
    <p>HTTP/2 Server</p>
    <p>HTTP/2 Server (NFS Client)</p>
    <p>Web Client</p>
    <p>READ 1.jpg; READ 2.jpg</p>
    <p>data of 1.jpg; 2.jpg</p>
    <p>NFS Server</p>
    <p>HTTP/2 PUSH</p>
    <p>HTTP/2 GET</p>
    <p>The HTTP/2 server reads and pushes a typical Web page that contains 96 objects (html, jpg, js, css) totaling round 2MB.</p>
    <p>vNFS talk (FAST17) 74March 2, 2017</p>
    <p>HTTP/2 Server</p>
    <p>HTTP/2 Server (NFS Client)</p>
    <p>Web Client</p>
    <p>READ 1.jpg; READ 2.jpg</p>
    <p>data of 1.jpg; 2.jpg</p>
    <p>NFS Server</p>
    <p>HTTP/2 PUSH</p>
    <p>HTTP/2 GET</p>
    <p>The HTTP/2 server reads and pushes a typical Web page that contains 96 objects (html, jpg, js, css) totaling round 2MB.</p>
    <p>vNFS talk (FAST17) 75March 2, 2017</p>
    <p>HTTP/2 Server</p>
    <p>nghttp2: ++543 and --108 in C++</p>
    <p>HTTP/2 Server (NFS Client)</p>
    <p>Web Client</p>
    <p>READ 1.jpg; READ 2.jpg</p>
    <p>data of 1.jpg; 2.jpg</p>
    <p>NFS Server</p>
    <p>HTTP/2 PUSH</p>
    <p>HTTP/2 GET</p>
    <p>The HTTP/2 server reads and pushes a typical Web page that contains 96 objects (html, jpg, js, css) totaling round 2MB.</p>
    <p>vNFS talk (FAST17) 76March 2, 2017</p>
    <p>Conclusions l A set of vectorized file-system API to take</p>
    <p>advantage of NFSv4 compound procedures without changing NFS protocols or servers</p>
    <p>l Implemented vNFS in user-space l Porting applications was generally easy l Improved performance by up to 200 l vNFS made NFS more usable in high-latency</p>
    <p>networks</p>
    <p>vNFS talk (FAST17) 77March 2, 2017</p>
    <p>Conclusions l A set of vectorized file-system API to take</p>
    <p>advantage of NFSv4 compound procedures without changing NFS protocols or servers</p>
    <p>l Implemented vNFS in user-space l Porting applications was generally easy l Improved performance by up to 200 l vNFS made NFS more usable in high-latency</p>
    <p>networks</p>
    <p>vNFS talk (FAST17) 78March 2, 2017</p>
    <p>Conclusions l A set of vectorized file-system API to take</p>
    <p>advantage of NFSv4 compound procedures without changing NFS protocols or servers</p>
    <p>l Implemented vNFS in user-space l Porting applications was generally easy l Improved performance by up to 200 l vNFS made NFS more usable in high-latency</p>
    <p>networks</p>
  </div>
  <div class="page">
    <p>vNFS talk (FAST17) 79March 2, 2017</p>
    <p>Conclusions l A set of vectorized file-system API to take</p>
    <p>advantage of NFSv4 compound procedures without changing NFS protocols or servers</p>
    <p>l Implemented vNFS in user-space l Porting applications was generally easy l Improved performance by up to 200 l vNFS made NFS more usable in high-latency</p>
    <p>networks</p>
    <p>vNFS talk (FAST17) 80March 2, 2017</p>
    <p>Conclusions l A set of vectorized file-system API to take</p>
    <p>advantage of NFSv4 compound procedures without changing NFS protocols or servers</p>
    <p>l Implemented vNFS in user-space l Porting applications was generally easy l Improved performance by up to 200 l vNFS made NFS more usable in high-latency</p>
    <p>networks</p>
    <p>vNFS talk (FAST17) 81March 2, 2017</p>
    <p>Conclusions l A set of vectorized file-system API to take</p>
    <p>advantage of NFSv4 compound procedures without changing NFS protocols or servers</p>
    <p>l Implemented vNFS in user-space l Porting applications was generally easy l Improved performance by up to 200 l vNFS made NFS more usable in high-latency</p>
    <p>networks</p>
    <p>vNFS talk (FAST17) 82March 2, 2017</p>
    <p>Limitations and Future Work l Client-side caching (appending) l Transactional compounds l Parallel processing of operations</p>
    <p>vNFS talk (FAST17) 83March 2, 2017</p>
    <p>Limitations and Future Work l Client-side caching (appending) l Transactional compounds l Parallel processing of operations</p>
    <p>vNFS talk (FAST17) 84March 2, 2017</p>
    <p>Limitations and Future Work l Client-side caching (appending) l Transactional compounds l Parallel processing of operations</p>
  </div>
  <div class="page">
    <p>vNFS talk (FAST17) 85March 2, 2017</p>
    <p>Limitations and Future Work l Client-side caching (appending) l Transactional compounds l Parallel processing of operations</p>
    <p>vNFS talk (FAST17) 86March 2, 2017</p>
    <p>vNFS: Maximizing NFS Performance with Compounds and Vectorized I/O</p>
    <p>https://github.com/sbu-fsl/txn-compound</p>
    <p>Q&amp;A Ming Chen, Dean Hildebrand, Henry Nelson,</p>
    <p>Jasmit Saluja, Ashok Sankar Harihara Subramony, and Erez Zadok</p>
    <p>2017 Stony Brook University</p>
  </div>
</Presentation>
