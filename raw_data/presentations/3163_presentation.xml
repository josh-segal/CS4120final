<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>On the Practical Exploitability of Dual EC in TLS Implementations</p>
    <p>Stephen Checkoway,1 Matthew Fredrikson,2 Ruben Niederhagen,3 Adam Everspaugh,2 Matthew Green,1 Tanja Lange,3</p>
    <p>Thomas Ristenpart,2 Daniel J. Bernstein,3,4 Jake Maskiewicz,5 and Hovav Shacham5</p>
    <p>! 1JHU, 2U. Wisconsin, 3TU/e, 4UIC, 5UCSD</p>
  </div>
  <div class="page">
    <p>Dual EC DRBG (briefly)</p>
    <p>Pseudo random number generator (PRNG)</p>
    <p>ANSI/ISO/NIST standard designed by the NSA</p>
    <p>Shumow &amp; Ferguson demonstrate potential backdoor in 2007</p>
    <p>Snowden reveals BULLRUN in 2013</p>
    <p>NSA paid RSA $10M to make Dual EC default PRNG</p>
  </div>
  <div class="page">
    <p>Our work</p>
    <p>YES: Difficulty of exploiting Dual EC backdoor in TLS implementations (assuming a backdoor)</p>
    <p>NO: Probability of a backdoor in Dual EC</p>
    <p>NO: Recovering the backdoors secret key</p>
  </div>
  <div class="page">
    <p>Pseudo random number generator (PRNG)</p>
    <p>s0</p>
  </div>
  <div class="page">
    <p>Pseudo random number generator (PRNG)</p>
    <p>s0 s1</p>
    <p>r1</p>
    <p>f(s0)</p>
    <p>g(s0)</p>
  </div>
  <div class="page">
    <p>Pseudo random number generator (PRNG)</p>
    <p>s0 s1 s2</p>
    <p>r1 r2</p>
    <p>f(s0)</p>
    <p>g(s0)</p>
    <p>f(s1)</p>
    <p>g(s1)</p>
  </div>
  <div class="page">
    <p>Pseudo random number generator (PRNG)</p>
    <p>s0 s1 s2</p>
    <p>r1 r2 r3</p>
    <p>s3</p>
    <p>f(s0)</p>
    <p>g(s0)</p>
    <p>f(s1) f(s2)</p>
    <p>g(s1) g(s2)</p>
  </div>
  <div class="page">
    <p>Pseudo random number generator (PRNG)</p>
    <p>s0 s1 s2</p>
    <p>r1 r2 r3</p>
    <p>s3</p>
    <p>f(s0)</p>
    <p>g(s0)</p>
    <p>f(s1) f(s2)</p>
    <p>g(s1) g(s2)</p>
  </div>
  <div class="page">
    <p>Pseudo random number generator (PRNG)</p>
    <p>s0 s1 s2</p>
    <p>r1 r2 r3</p>
    <p>s3</p>
    <p>f(s0)</p>
    <p>g(s0)</p>
    <p>f(s1) f(s2)</p>
    <p>g(s1) g(s2)</p>
  </div>
  <div class="page">
    <p>Elliptic curve primer</p>
    <p>Points on an elliptic curve are pairs (x, y)</p>
    <p>x and y are 32-byte integers</p>
    <p>Points can be added together to get another point</p>
    <p>Scalar multiplication: Given integer n and point P, nP = P + P +  + P is easy to compute</p>
    <p>Given points P and nP, n is hard to compute</p>
  </div>
  <div class="page">
    <p>Dual EC operation (simplified)</p>
    <p>s0</p>
    <p>output</p>
    <p>32-byte states</p>
  </div>
  <div class="page">
    <p>Dual EC operation (simplified)</p>
    <p>s0 s1 x(s0P)</p>
    <p>output</p>
    <p>32-byte states  P,Q : EC points  x() : x-coordinate</p>
  </div>
  <div class="page">
    <p>Dual EC operation (simplified)</p>
    <p>s0 s1 x(s0P)</p>
    <p>r1</p>
    <p>x(s1Q)</p>
    <p>output</p>
    <p>32-byte states  P,Q : EC points  x() : x-coordinate</p>
  </div>
  <div class="page">
    <p>Dual EC operation (simplified)</p>
    <p>s0 s1 x(s0P)</p>
    <p>r1</p>
    <p>x(s1Q)</p>
    <p>output</p>
    <p>32-byte states  P,Q : EC points  x() : x-coordinate  least sig. 30 bytes</p>
    <p>of ri form output</p>
  </div>
  <div class="page">
    <p>Dual EC operation (simplified)</p>
    <p>s0 s1 x(s0P)</p>
    <p>r1</p>
    <p>x(s1Q)</p>
    <p>s2 x(s1P)</p>
    <p>output</p>
    <p>32-byte states  P,Q : EC points  x() : x-coordinate  least sig. 30 bytes</p>
    <p>of ri form output</p>
  </div>
  <div class="page">
    <p>Dual EC operation (simplified)</p>
    <p>s0 s1 x(s0P)</p>
    <p>r1</p>
    <p>x(s1Q)</p>
    <p>s2 x(s1P)</p>
    <p>r2</p>
    <p>x(s2Q)</p>
    <p>output</p>
    <p>32-byte states  P,Q : EC points  x() : x-coordinate  least sig. 30 bytes</p>
    <p>of ri form output</p>
  </div>
  <div class="page">
    <p>Dual EC operation (simplified)</p>
    <p>s0 s1 x(s0P)</p>
    <p>r1</p>
    <p>x(s1Q)</p>
    <p>s2 x(s1P)</p>
    <p>r2</p>
    <p>x(s2Q)</p>
    <p>output</p>
    <p>32-byte states  P,Q : EC points  x() : x-coordinate  least sig. 30 bytes</p>
    <p>of ri form output</p>
  </div>
  <div class="page">
    <p>Dual EC operation (simplified)</p>
    <p>s0 s1 x(s0P)</p>
    <p>r1</p>
    <p>x(s1Q)</p>
    <p>s2 x(s1P)</p>
    <p>r2</p>
    <p>x(s2Q)</p>
    <p>x(s2P)</p>
    <p>output</p>
    <p>32-byte states  P,Q : EC points  x() : x-coordinate  least sig. 30 bytes</p>
    <p>of ri form output</p>
  </div>
  <div class="page">
    <p>ShumowFerguson attack</p>
    <p>s s x</p>
    <p>r</p>
    <p>x</p>
    <p>s x</p>
    <p>r</p>
    <p>x</p>
    <p>x</p>
    <p>output</p>
    <p>Assumes known integer d s.t. P = dQ</p>
  </div>
  <div class="page">
    <p>ShumowFerguson attack</p>
    <p>s s x</p>
    <p>r1</p>
    <p>x</p>
    <p>s x</p>
    <p>r</p>
    <p>x</p>
    <p>x</p>
    <p>output</p>
    <p>Assumes known integer d s.t. P = dQ</p>
  </div>
  <div class="page">
    <p>ShumowFerguson attack</p>
    <p>s s x</p>
    <p>r1</p>
    <p>x</p>
    <p>s x</p>
    <p>r</p>
    <p>x</p>
    <p>x</p>
    <p>output</p>
    <p>Guess 2 MSB of r1  Let R s.t. x(R) = r1</p>
    <p>Assumes known integer d s.t. P = dQ</p>
  </div>
  <div class="page">
    <p>ShumowFerguson attack</p>
    <p>s s x</p>
    <p>r1</p>
    <p>x</p>
    <p>s2 x</p>
    <p>r</p>
    <p>x</p>
    <p>x</p>
    <p>output</p>
    <p>Guess 2 MSB of r1  Let R s.t. x(R) = r1  Compute s2 = x(s1P) = x(s1dQ) = x(ds1Q) = x(dR)</p>
    <p>Assumes known integer d s.t. P = dQ</p>
    <p>x(dR)</p>
  </div>
  <div class="page">
    <p>ShumowFerguson attack</p>
    <p>s s x</p>
    <p>r1</p>
    <p>x</p>
    <p>s2 x</p>
    <p>r2</p>
    <p>x(s2Q)</p>
    <p>x</p>
    <p>output</p>
    <p>Guess 2 MSB of r1  Let R s.t. x(R) = r1  Compute s2 = x(s1P) = x(s1dQ) = x(ds1Q) = x(dR)  Compute r2 and compare with output</p>
    <p>compare</p>
    <p>Assumes known integer d s.t. P = dQ</p>
    <p>x(dR)</p>
  </div>
  <div class="page">
    <p>ShumowFerguson attack</p>
    <p>s s x</p>
    <p>r1</p>
    <p>x</p>
    <p>s2 x</p>
    <p>r2</p>
    <p>x(s2Q)</p>
    <p>x(s2P)</p>
    <p>output</p>
    <p>Guess 2 MSB of r1  Let R s.t. x(R) = r1  Compute s2 = x(s1P) = x(s1dQ) = x(ds1Q) = x(dR)  Compute r2 and compare with output</p>
    <p>compare</p>
    <p>Assumes known integer d s.t. P = dQ</p>
    <p>x(dR)</p>
  </div>
  <div class="page">
    <p>SF attack prerequisites</p>
    <p>Attacker sees 1. Most of r1 (e.g.,  28 bytes) 2. Some public function of enough of r2</p>
    <p>r1 r2</p>
    <p>output</p>
  </div>
  <div class="page">
    <p>TLS</p>
    <p>client random</p>
    <p>server random, session id, xP</p>
    <p>{client,server} random: 28 random bytes  session id: 32 bytes (can be random)  x, y: ECDHE secret keys  xP, yP: ECDHE public keys  Recovering x or y enables decryption</p>
    <p>yP</p>
  </div>
  <div class="page">
    <p>Common TLS libraries</p>
    <p>RSA BSAFE Share for Java</p>
    <p>RSA BSAFE Share for C/C++</p>
    <p>Microsoft Secure Channel (SChannel)</p>
    <p>OpenSSL-FIPS (OpenSSL-Fixed)</p>
  </div>
  <div class="page">
    <p>RSA BSAFE Share for Java</p>
    <p>server_rand  dual_ec(28) x  dual_ec(32) ecdhe_pk  xP</p>
    <p>!</p>
    <p>No caching  No additional input</p>
    <p>r1 r2</p>
    <p>s_rand</p>
    <p>r3</p>
    <p>x</p>
    <p>ecdhe_pk xP</p>
  </div>
  <div class="page">
    <p>RSA BSAFE Share for Java</p>
    <p>server_rand  dual_ec(28) x  dual_ec(32) ecdhe_pk  xP</p>
    <p>!</p>
    <p>No caching  No additional input</p>
    <p>r r</p>
    <p>s_rand</p>
    <p>r</p>
    <p>x</p>
    <p>ecdhe_pk xP</p>
  </div>
  <div class="page">
    <p>RSA BSAFE Share for Java</p>
    <p>server_rand  dual_ec(28) x  dual_ec(32) ecdhe_pk  xP</p>
    <p>!</p>
    <p>No caching  No additional input</p>
    <p>r1 r</p>
    <p>s_rand</p>
    <p>r</p>
    <p>x</p>
    <p>ecdhe_pk xP</p>
  </div>
  <div class="page">
    <p>RSA BSAFE Share for Java</p>
    <p>server_rand  dual_ec(28) x  dual_ec(32) ecdhe_pk  xP</p>
    <p>!</p>
    <p>No caching  No additional input</p>
    <p>r1 r2</p>
    <p>s_rand</p>
    <p>r3</p>
    <p>x</p>
    <p>ecdhe_pk xP</p>
  </div>
  <div class="page">
    <p>RSA BSAFE Share for Java</p>
    <p>server_rand  dual_ec(28) x  dual_ec(32) ecdhe_pk  xP nonce  dual_ec(32) sig  ecdsa(key, nonce, params)</p>
    <p>Recovering nonce allows computing the long-term signing key</p>
    <p>r1 r2</p>
    <p>s_rand</p>
    <p>r3</p>
    <p>x</p>
    <p>ecdhe_pk xP</p>
    <p>r4 r5</p>
    <p>nonce</p>
    <p>sig ecdsa</p>
  </div>
  <div class="page">
    <p>Attack validation</p>
  </div>
  <div class="page">
    <p>Attack validation</p>
    <p>Generate new point Q</p>
  </div>
  <div class="page">
    <p>Attack validation</p>
    <p>Generate new point Q</p>
    <p>Replace Q with Q (incl. tables of multiples of Q)</p>
  </div>
  <div class="page">
    <p>Attack validation</p>
    <p>Generate new point Q</p>
    <p>Replace Q with Q (incl. tables of multiples of Q)</p>
    <p>R.E. BSAFE Java, BSAFE C/C++, SChannel</p>
  </div>
  <div class="page">
    <p>Attack validation</p>
    <p>Generate new point Q</p>
    <p>Replace Q with Q (incl. tables of multiples of Q)</p>
    <p>R.E. BSAFE Java, BSAFE C/C++, SChannel</p>
    <p>Capture network traces with tcpdump</p>
  </div>
  <div class="page">
    <p>Attack validation</p>
    <p>Generate new point Q</p>
    <p>Replace Q with Q (incl. tables of multiples of Q)</p>
    <p>R.E. BSAFE Java, BSAFE C/C++, SChannel</p>
    <p>Capture network traces with tcpdump</p>
    <p>Recover TLS master secret and decrypt</p>
  </div>
  <div class="page">
    <p>Implementation choices</p>
    <p>TLS choices: - Order and size of server random, session id, and</p>
    <p>(EC)DHE private key generation - Session id random or not</p>
    <p>Dual EC choices: - Caching unused generated bytes - Additional input hashed into PRNG state - Dual EC 2006 or Dual EC 2007</p>
  </div>
  <div class="page">
    <p>Generation order Size Caching Additional input Version</p>
    <p>RSA Java server random ecdhe sk ecdsa nonce</p>
    <p>No No 2007</p>
    <p>RSA C/C++ s. rand || session id dhe sk dsa nonce</p>
    <p>Yes No 2007</p>
    <p>Microsoft SChannel</p>
    <p>session id ecdhe sk other server random ecdsa nonce</p>
    <p>No No 2006*</p>
    <p>OpenSSLfixed</p>
    <p>session id server random ecdhe sk ecdsa nonce</p>
    <p>No Yes: sec || s || ctr || pid 2007</p>
    <p>* Due to a bug</p>
  </div>
  <div class="page">
    <p>Attack summary</p>
    <p>Default PRNG</p>
    <p>Bytes per session</p>
    <p>Additional input entropy (bits)</p>
    <p>Time* (min)</p>
    <p>RSA Java  28  63.96</p>
    <p>RSA C/C++  3160  0.04</p>
    <p>Microsoft SChannel I 28  62.97</p>
    <p>Microsoft SChannel II 30  182.64</p>
    <p>OpenSSL-fixed I 32 20 0.02</p>
    <p>OpenSSL-fixed III 32 35 + k 2</p>
    <p>* 4 node cluster</p>
  </div>
  <div class="page">
    <p>All the pieces matter</p>
    <p>Exploitability of a PRNG depends on - PRNG design - Protocol design - Implementation choices</p>
  </div>
  <div class="page">
    <p>All the pieces matter</p>
    <p>Exploitability of a PRNG depends on - PRNG design - Protocol design - Implementation choices</p>
    <p>It helps to have a hand in all three - NSA designed Dual EC - NSA wrote TLS extensions which facilitate attack - NSA paid RSA $10M to make Dual EC the default</p>
  </div>
  <div class="page">
    <p>Demo</p>
    <p>I also think that the mathematics behind the papers on breaking [Dual EC] are not very realistic.</p>
    <p>Richard Dickie George Former Technical Director of the NSA Information Assurance Directorate</p>
  </div>
  <div class="page">
    <p>Thank you!</p>
    <p>http://dualec.org</p>
  </div>
</Presentation>
