<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Passive realtime datacenter fault detection and localization</p>
    <p>Arjun Roy, James Hongyi Zeng*, Jasmeet Bagga*, and Alex C. Snoeren University of California, San Diego Facebook*</p>
  </div>
  <div class="page">
    <p>It would be nice if we could figure out which link was causing these retransmits.</p>
    <p>- Ranjeeth Dasineni, Facebook (paraphrased)</p>
  </div>
  <div class="page">
    <p>Contemporary datacenter network</p>
    <p>However: faults may be partial/intermittent. 3</p>
  </div>
  <div class="page">
    <p>Partial faults: A few examples</p>
    <p>Netpilot (Sigcomm 2011): Frame check error, unequal ECMP hashing, etc. Wu, Xin, et al. &quot;Netpilot: automating datacenter network failure mitigation.&quot; ACM SIGCOMM Computer Communication Review 42.4 (2012): 419-430.</p>
    <p>Everflow (Sigcomm 2015): TCAM bit errors, silent packet drops. Zhu, Yibo, et al. &quot;Packet-Level Telemetry in Large Datacenter Networks. SIGCOMM, 2015.</p>
    <p>Pingmesh (Sigcomm 2015): fiber FCSerrors, switching ASIC defects, switch fabric flaw, switch software bug, NIC configuration issue, network congestions, etc. We have seen all these types of issues in our production networks.</p>
    <p>Guo, Chuanxiong, et al. &quot;Pingmesh: A Large-Scale System for Data Center Network Latency Measurement and Analysis. SIGCOMM, 2015.</p>
  </div>
  <div class="page">
    <p>Vast body of prior work (just a small sample)  Application instrumentation: various production systems</p>
    <p>Active probing: Pingmesh (SIGCOMM15), NetNorad (Facebook), ATPG (CoNEXT 12), Everflow (SIGCOMM15)</p>
    <p>Machine learning: NetPoirot (SIGCOMM16)</p>
    <p>Graph algorithms: Gestalt (Usenix ATC 14), SCORE (NSDI 05)</p>
    <p>Path tracing: Everflow (SIGCOMM15), NetNorad (Facebook), NetSight (NSDI 14), Tiny Packet Programs (SIGCOMM14)</p>
    <p>Network instrumentation: FlowRadar (NSDI 16) , Planck (SIGCOMM14), NetPilot (SIGCOMM11)</p>
  </div>
  <div class="page">
    <p>We exploit: highly regular load balanced traffic</p>
    <p>Source rack traffic magnitude</p>
    <p>Destination rack traffic magnitude</p>
    <p>Arjun Roy, Hongyi Zeng, Jasmeet Bagga, George Porter, and Alex C. Snoeren. Inside the Social Network's (Datacenter) Network. ACM SIGCOMM '15, London, England.</p>
  </div>
  <div class="page">
    <p>Load balanced traffic simplifies fault handling</p>
    <p>Evenly loaded paths means per path performance is similar if no errors.  Network faults lead to outlier paths.  If flow network path known, can correlate flow performance with path.</p>
    <p>Approach allows us to find and localize faults:  In an application agnostic manner  Incurring no additional probing overhead  More rapidly than prior published works</p>
  </div>
  <div class="page">
    <p>Facebook datacenter topology</p>
    <p>Alexey Andreyev. Introducing data center fabric, the next-generation Facebook data center network. https://code.facebook.com/posts/360346274145943/introducing-data-center-fabric-thenext-generation-facebook-data-center-network/</p>
  </div>
  <div class="page">
    <p>Finding path information at Facebook</p>
    <p>ToR ToRCore Core</p>
    <p>Core</p>
    <p>Core Core</p>
    <p>Core</p>
    <p>Core Core</p>
    <p>Core</p>
    <p>Core Core</p>
    <p>Core</p>
    <p>Source host</p>
    <p>Destination host</p>
    <p>Agg</p>
    <p>Agg</p>
    <p>Agg</p>
    <p>Agg Agg</p>
    <p>Agg</p>
    <p>Agg</p>
    <p>Agg 9</p>
  </div>
  <div class="page">
    <p>Finding path information at Facebook</p>
    <p>ToR ToRCore Core</p>
    <p>Core</p>
    <p>Core Core</p>
    <p>Core</p>
    <p>Core Core</p>
    <p>Core</p>
    <p>Core Core</p>
    <p>Core</p>
    <p>Source host</p>
    <p>Destination host</p>
    <p>Agg</p>
    <p>Agg</p>
    <p>Agg</p>
    <p>Agg Agg</p>
    <p>Agg</p>
    <p>Agg</p>
    <p>Agg 10</p>
  </div>
  <div class="page">
    <p>Finding path information at Facebook</p>
    <p>ToR ToRCore Core</p>
    <p>Core</p>
    <p>Core Core</p>
    <p>Core</p>
    <p>Core Core</p>
    <p>Core</p>
    <p>Core Core</p>
    <p>Core</p>
    <p>Source host</p>
    <p>Destination host</p>
    <p>Agg</p>
    <p>Agg</p>
    <p>Agg</p>
    <p>Agg Agg</p>
    <p>Agg</p>
    <p>Agg</p>
    <p>Agg 11</p>
  </div>
  <div class="page">
    <p>Finding path information at Facebook</p>
    <p>ToR ToRCore Core</p>
    <p>Core</p>
    <p>Core Core</p>
    <p>Core</p>
    <p>Core Core</p>
    <p>Core</p>
    <p>Core Core</p>
    <p>Core</p>
    <p>Source host</p>
    <p>Destination host</p>
    <p>Agg</p>
    <p>Agg</p>
    <p>Agg</p>
    <p>Agg Agg</p>
    <p>Agg</p>
    <p>Agg</p>
    <p>Agg 12</p>
  </div>
  <div class="page">
    <p>Finding path information at Facebook</p>
    <p>ToR ToRCore Core</p>
    <p>Core</p>
    <p>Core Core</p>
    <p>Core</p>
    <p>Core Core</p>
    <p>Core</p>
    <p>Core Core</p>
    <p>Core</p>
    <p>Source host</p>
    <p>Destination host</p>
    <p>Agg</p>
    <p>Agg</p>
    <p>Agg</p>
    <p>Agg Agg</p>
    <p>Agg</p>
    <p>Agg</p>
    <p>Agg 13</p>
  </div>
  <div class="page">
    <p>Finding path information at Facebook</p>
    <p>ToR ToRCore Core</p>
    <p>Core</p>
    <p>Core Core</p>
    <p>Core</p>
    <p>Core Core</p>
    <p>Core</p>
    <p>Core Core</p>
    <p>Core</p>
    <p>Source host</p>
    <p>Destination host</p>
    <p>Agg</p>
    <p>Agg</p>
    <p>Agg</p>
    <p>Agg Agg</p>
    <p>Agg</p>
    <p>Agg</p>
    <p>Agg 14</p>
  </div>
  <div class="page">
    <p>Finding path information at Facebook</p>
    <p>Core</p>
    <p>Core</p>
    <p>Core</p>
    <p>Agg</p>
    <p>Agg</p>
    <p>AggToR ToR</p>
    <p>Agg</p>
    <p>Agg</p>
    <p>Core</p>
    <p>Core</p>
    <p>Source host</p>
    <p>Destination host</p>
    <p>Agg</p>
    <p>Agg</p>
    <p>Agg</p>
  </div>
  <div class="page">
    <p>Finding path information at Facebook</p>
    <p>Core</p>
    <p>Core</p>
    <p>Core</p>
    <p>Agg</p>
    <p>Agg</p>
    <p>AggToR ToR</p>
    <p>Agg</p>
    <p>Agg</p>
    <p>Core</p>
    <p>Core</p>
    <p>Source host</p>
    <p>Destination host</p>
    <p>Agg</p>
    <p>Agg</p>
    <p>Agg</p>
  </div>
  <div class="page">
    <p>Finding path information at Facebook</p>
    <p>Core</p>
    <p>Core</p>
    <p>Core</p>
    <p>Agg</p>
    <p>Agg</p>
    <p>AggToR ToR</p>
    <p>Agg</p>
    <p>Agg</p>
    <p>Core</p>
    <p>Core</p>
    <p>Source host</p>
    <p>Destination host</p>
    <p>Agg</p>
    <p>Agg</p>
    <p>Solution: aggregation switch marks packets based on core downlink traversed.</p>
    <p>Agg</p>
  </div>
  <div class="page">
    <p>How do we use path information?</p>
    <p>In principle: can compare flow performance by path. 1. Combinatorial disaster: O(10,000) paths from single host to remote racks. 2. No localization: doesnt tell us which link/switch is at fault.</p>
    <p>But: for this traffic pattern, ECMP routing gives us even bytes/link.</p>
    <p>Solution: Just compare links!</p>
    <p>Create Equivalence Sets: sets of links handling similar load</p>
    <p>and exhibiting similar performance, in the absence of faults</p>
    <p>Equivalence sets: 1. Reduces number of comparisons needed.</p>
  </div>
  <div class="page">
    <p>Equivalence sets in Facebook topology Core Core Core</p>
    <p>Core Core Core</p>
    <p>Core Core Core</p>
    <p>Source host</p>
    <p>Agg</p>
    <p>Agg</p>
    <p>Agg</p>
    <p>ToR Core Core CoreAgg</p>
    <p>Equivalence set: 4 uplinks from each ToR</p>
    <p>to pod Agg layer</p>
    <p>each has close to identical performance distribution</p>
    <p>in absence of errors 19</p>
  </div>
  <div class="page">
    <p>Core Core Core</p>
    <p>Core Core Core</p>
    <p>Core Core Core</p>
    <p>Source host</p>
    <p>Agg</p>
    <p>Agg</p>
    <p>Agg</p>
    <p>ToR Core Core CoreAgg</p>
    <p>each has close to identical performance distribution</p>
    <p>in absence of errors</p>
    <p>Equivalence set: N uplinks from pod Agg layer to core layer</p>
    <p>Equivalence sets in Facebook topology</p>
  </div>
  <div class="page">
    <p>Outlier analysis with application agnostic metrics</p>
    <p>Hosts already track metrics for congestion control or performance monitoring:</p>
    <p>TCP Congestion window: Affected by packet loss. TCP Retransmits: Affected by packet loss. Smoothed Round trip time: Affected by latency spikes. System call latency: Affected by packet loss.</p>
    <p>Caveat: Can be difficult to determine if an affect is due to a faulty link, overloaded hosts, application variance, etc.</p>
    <p>With equivalence set based grouping, we can compare distributions by link.</p>
    <p>Only link faults cause variance between links.</p>
  </div>
  <div class="page">
    <p>Demonstrating equivalence sets from Agg to ToR</p>
    <p>(1) ToR marks packet DSCP</p>
    <p>per inbound link</p>
    <p>(2) Host aggregates TCP metrics by link (3b) Host drops 0.5% of packets traversing link</p>
    <p>(3a) We simulate error on this link:</p>
    <p>Host ToR Agg 2</p>
    <p>Agg 3</p>
    <p>Agg 4</p>
    <p>Agg 1</p>
  </div>
  <div class="page">
    <p>TCP Congestion window in Agg to ToR equivalence set</p>
    <p>Cache server 23</p>
  </div>
  <div class="page">
    <p>Congestion window signal is application agnostic</p>
    <p>Cache server Web server 24</p>
  </div>
  <div class="page">
    <p>We use: TCP retransmits in our work</p>
    <p>Cache server Web server 25</p>
  </div>
  <div class="page">
    <p>Detecting faults in production</p>
    <p>Monitored traffic through pod aggregation switch. 1. No faults injected. 2. Collected TCP metric data on 30 web server hosts. 3. Equivalence set: four linecards connecting to core layer</p>
    <p>(each linecard has equal share of uplinks).</p>
    <p>On January 25th, a single linecard had a software fault. 1. Linecard controller software hung. 2. BGP routes timed out, production traffic through linecard routed away. 3. A few minutes later, NetNORAD flagged unresponsive linecard.</p>
  </div>
  <div class="page">
    <p>Fault visible to our approach in 30 seconds</p>
  </div>
  <div class="page">
    <p>Classifying faulty links</p>
    <p>Does this link have more retransmits per flow than the other links?</p>
    <p>Do two distributions have the same mean, or is one greater?</p>
    <p>Classifier: compare each link to other links with one sample Students T-Test.</p>
  </div>
  <div class="page">
    <p>Online fault monitoring with T-Test alone</p>
    <p>In principle: can setup a system that uses end host T-Test result to tell us which network links are faulty.</p>
    <p>However: by itself this is susceptible to False Positives.</p>
    <p>Cant afford false positives in network with O(10,000) links!</p>
  </div>
  <div class="page">
    <p>Accounting for false positives</p>
    <p>However, two characteristics aid us: 1. Per-host false positives evenly distributed per link over time. 2. Datacenter has a plethora of hosts for which this is true.</p>
    <p>Thus, were not trying to see if a given link is marked faulty by hosts.</p>
    <p>Instead, we once again perform outlier analysis. 1. Are all the links being marked faulty by hosts at similar rates? 2. Are hosts flagging a particular subset of links as faulty at higher rates?</p>
    <p>Chi-squared test: determines if any links are outliers.</p>
    <p>P-Value  1: Yes, all the links being marked faulty by hosts at similar rates.</p>
    <p>P-Value  0: No, a subset has a comparatively high percentage of hosts claiming fault.</p>
  </div>
  <div class="page">
    <p>Evaluation in the datacenter</p>
    <p>Small detection surface; did not detect any organic partial faults.</p>
    <p>Approach: inject simulated faults to evaluate approach.</p>
    <p>Induced a variety of fault scenarios to challenge our system.</p>
  </div>
  <div class="page">
    <p>Evaluation in the datacenter: fault scenarios</p>
    <p>Miniscule faults: faults can have very low drop rates.</p>
    <p>Concurrent faults: multiple faults can occur simultaneously.</p>
    <p>Masked faults: larger fault can mask effect of miniscule fault.</p>
    <p>Correlated faults: hardware fault can impact multiple nearby links, confounding outlier analysis.</p>
  </div>
  <div class="page">
    <p>Evaluation in the datacenter: fault scenarios</p>
    <p>Miniscule faults: faults can have very low drop rates.</p>
    <p>Concurrent faults: multiple faults can occur simultaneously.</p>
    <p>Masked faults: larger fault can mask effect of miniscule fault.</p>
    <p>Correlated faults: hardware fault can impact multiple nearby links, confounding outlier analysis.</p>
  </div>
  <div class="page">
    <p>Core Core Core</p>
    <p>Core Core Core</p>
    <p>Core Core Core</p>
    <p>Host Host Host</p>
    <p>Host Host Host</p>
    <p>Host Host Host</p>
    <p>Agg</p>
    <p>Agg</p>
    <p>Agg</p>
    <p>ToR</p>
    <p>ToR</p>
    <p>ToR</p>
    <p>Finding miniscule faults: experiment setup</p>
    <p>Core 1</p>
    <p>Core 2</p>
    <p>Core N</p>
    <p>Agg</p>
    <p>Core 3</p>
  </div>
  <div class="page">
    <p>Core Core Core</p>
    <p>Core Core Core</p>
    <p>Core Core Core</p>
    <p>Host Host Host</p>
    <p>Host Host Host</p>
    <p>Host Host Host</p>
    <p>Agg</p>
    <p>Agg</p>
    <p>Agg</p>
    <p>ToR</p>
    <p>ToR</p>
    <p>ToR</p>
    <p>Finding miniscule faults: experiment setup</p>
    <p>Core 1</p>
    <p>Core 2</p>
    <p>Core N</p>
    <p>Agg</p>
    <p>Core 3</p>
  </div>
  <div class="page">
    <p>Core Core Core</p>
    <p>Core Core Core</p>
    <p>Core Core Core</p>
    <p>Host Host Host</p>
    <p>Host Host Host</p>
    <p>Host Host Host</p>
    <p>Agg</p>
    <p>Agg</p>
    <p>Agg</p>
    <p>ToR</p>
    <p>ToR</p>
    <p>ToR</p>
    <p>Finding miniscule faults: experiment setup</p>
    <p>Core 1</p>
    <p>Core 2</p>
    <p>Core N</p>
    <p>Agg</p>
    <p>Core 3 Equivalence set: N uplinks from pod Agg layer to core layer</p>
  </div>
  <div class="page">
    <p>Core Core Core</p>
    <p>Core Core Core</p>
    <p>Core Core Core</p>
    <p>Host Host Host</p>
    <p>Host Host Host</p>
    <p>Host Host Host</p>
    <p>Agg</p>
    <p>Agg</p>
    <p>Agg</p>
    <p>ToR</p>
    <p>ToR</p>
    <p>ToR</p>
    <p>Finding miniscule faults: experiment setup</p>
    <p>Core 1</p>
    <p>Core 2</p>
    <p>Core N</p>
    <p>Agg</p>
    <p>Core 3 Partial fault</p>
    <p>induced on single Core to Agg downlink.</p>
  </div>
  <div class="page">
    <p>Fault detection rate vs drop rate</p>
  </div>
  <div class="page">
    <p>Miniscule faults: choosing between detection speed and sensitivity</p>
  </div>
  <div class="page">
    <p>Miniscule faults: choosing between detection speed and sensitivity</p>
  </div>
  <div class="page">
    <p>Miniscule faults: choosing between detection speed and sensitivity</p>
  </div>
  <div class="page">
    <p>Miniscule faults: choosing between detection speed and sensitivity</p>
  </div>
  <div class="page">
    <p>Miniscule faults: choosing between detection speed and sensitivity</p>
  </div>
  <div class="page">
    <p>Miniscule faults: choosing between detection speed and sensitivity</p>
  </div>
  <div class="page">
    <p>It would be nice if we could figure out which link was causing these retransmits.</p>
    <p>Ranjeeth Dasineni, Facebook (paraphrased)</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Interpreting the T-Test</p>
    <p>Positive T-statistic means larger than average.  Negative T-statistic means smaller than average.</p>
    <p>Close to 0 means this link could be an outlier.  Close to 1 means we are not concerned.</p>
  </div>
  <div class="page">
    <p>Interpreting the T-Test</p>
    <p>P-value 0, t-stat &gt; 0</p>
    <p>P-value 1, t-stat  0</p>
  </div>
</Presentation>
