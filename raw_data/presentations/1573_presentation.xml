<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>FAST 2017, Santa Clara</p>
    <p>Chronix: Long Term Storage and Retrieval Technology for Anomaly Detection in Operational Data</p>
    <p>Florian Lautenschlager, Michael Philippsen, Andreas Kumlehn, and Josef Adersberger</p>
    <p>Florian.Lautenschlager@qaware.de</p>
    <p>flolaut</p>
  </div>
  <div class="page">
    <p>Detecting Anomalies in Running Software matters</p>
    <p>Various kinds of anomalies:</p>
    <p>Resource consumption: anomalous memory consumption, high CPU usage,</p>
    <p>Sporadic failure: blocking state, deadlock, dirty read,</p>
    <p>Security: port scanning activity, short frequent login attempts,</p>
    <p>Economic or reputation loss.</p>
    <p>Detection is a complex task:</p>
    <p>Multiple components: Database, Service Discovery, Configuration Service,</p>
    <p>Different technologies: Go, Java, Java-Script, Python,</p>
    <p>Various transport protocols: HTTP, Protocol Buffers, Thrift, JSON,</p>
  </div>
  <div class="page">
    <p>Anomaly Detection Tool Chain for Operational Data</p>
    <p>Types of operational data:</p>
    <p>Metrics: scalar values, e.g., rates, runtimes, total hits, counters,</p>
    <p>Events: single occurrences, e.g., a users login, product order,</p>
    <p>Traces: sequences within a software system, e.g., the called methods,</p>
    <p>Operational Data</p>
    <p>Application</p>
    <p>Collection Framework</p>
    <p>Analysis Framework</p>
    <p>Time Series Database</p>
  </div>
  <div class="page">
    <p>Anomaly Detection Tool Chain for Operational Data</p>
    <p>Collection Framework</p>
    <p>Analysis Framework</p>
    <p>Time Series Database</p>
    <p>Timestamp V1 V2</p>
    <p>Collects operational data from a running</p>
    <p>application</p>
    <p>Asks the database for data and analyzes the</p>
    <p>data</p>
    <p>Stores the time series data</p>
  </div>
  <div class="page">
    <p>Anomaly Detection Tool Chain for Operational Data</p>
    <p>General-Purpose TSDB</p>
    <p>Brake shoe  Resource hog</p>
    <p>Productivity obstacle</p>
    <p>Domain specific sensors and adaptors</p>
    <p>Domain specific analysis algorithms and tools</p>
    <p>Collection Framework</p>
    <p>Analysis Framework</p>
    <p>Time Series Database</p>
    <p>Chronix: Domain specific TSDB</p>
    <p>Domain specific sensors and adaptors</p>
    <p>Domain specific analysis algorithms and tools</p>
  </div>
  <div class="page">
    <p>State of the art: General-purpose TSDBs in Anomaly Detection</p>
    <p>G ra</p>
    <p>p h</p>
    <p>it e</p>
    <p>In fl</p>
    <p>u x</p>
    <p>D B</p>
    <p>O p</p>
    <p>e n</p>
    <p>T S</p>
    <p>D B</p>
    <p>K a</p>
    <p>ir o</p>
    <p>s D</p>
    <p>B</p>
    <p>P ro</p>
    <p>m e</p>
    <p>t h</p>
    <p>e u</p>
    <p>s</p>
    <p>Generic data model</p>
    <p>Analysis support</p>
    <p>Lossless long term storage</p>
    <p>C h</p>
    <p>ro n</p>
    <p>ix</p>
    <p>High memory footprint = Performance hog High storage demands = Performance hog Loss of historical data = Brake shoe</p>
    <p>No support for analyses = Productivity obstacle = Brake shoe</p>
    <p>No support for data types = Productivity obstacle</p>
  </div>
  <div class="page">
    <p>Option to pre-compute an extra representation of the data</p>
    <p>Optional timestamp compression for almost-periodic time series</p>
    <p>Records that meet the needs of the domain</p>
    <p>Compression technique that suits the domains data</p>
    <p>Underlying multi-dimensional storage</p>
    <p>Domain specific query language with server-side evaluation</p>
    <p>Domain specific commissioning of configuration parameters</p>
    <p>Collection Framework Analysis</p>
    <p>FrameworkChronix</p>
  </div>
  <div class="page">
    <p>Running Example: Almost-periodic time series with operational data</p>
    <p>Timestamp Value Metric Process Host</p>
  </div>
  <div class="page">
    <p>Option to pre-compute data to speed up analyses</p>
    <p>Chronix is lossless: it keeps all details because the analyses are ad-hoc and may need them.</p>
    <p>Chronix offers a programming interface for adding extra domain specific columns. Examples: Fourier transformation, Symbolic Aggregate approXimation (SAX), etc.</p>
    <p>Added columns speed up anomaly detection queries.</p>
    <p>Timestamp Value Metric Process Host SAX</p>
  </div>
  <div class="page">
    <p>Optional timestamp compaction</p>
    <p>It suffices to be able to reconstruct approximate timestamps for almost-periodic time series.</p>
    <p>Date-Delta-Compaction</p>
    <p>Chronix is functionally lossless as it keeps all relevant details.</p>
    <p>The tolerable degree of inaccuracy is a</p>
    <p>Timestamp Value Metric Process Host SAX</p>
    <p>- 218.49 ingester\time SmartHub QAMUC C</p>
    <p>- 218.52 ingester\time SmartHub QAMUC D</p>
    <p>Configuration Parameter of 7</p>
    <p>Space saved</p>
  </div>
  <div class="page">
    <p>Date-Delta-Compaction</p>
    <p>Timestamp</p>
    <p>Timestamp</p>
    <p>Timestamp</p>
    <p>Timestamp</p>
    <p>Calculate deltas</p>
    <p>Compute diffs</p>
    <p>between them</p>
    <p>Drop diffs below</p>
    <p>threshold</p>
    <p>If accumulated drift &gt; threshold</p>
    <p>store delta. (Upper bound on inaccuracy)</p>
    <p>Timestamp</p>
    <p>space saved</p>
    <p>space saved</p>
  </div>
  <div class="page">
    <p>Domain specific data characteristics</p>
    <p>Timestamp Value Metric Process Host SAX</p>
    <p>- 218.49 ingester\time SmartHub QAMUC C</p>
    <p>- 218.52 ingester\time SmartHub QAMUC D</p>
    <p>Many anomaly detection tasks</p>
    <p>need blocks of data rather than lines.</p>
    <p>Repetitive values.</p>
    <p>Repetitive values.</p>
    <p>Columns with repetitive</p>
    <p>values.</p>
    <p>Some compression techniques work</p>
    <p>better than others.</p>
  </div>
  <div class="page">
    <p>Records that meet the needs of the domain</p>
    <p>Therefore:</p>
    <p>Record := Attributes + Start + End + Type + Data Chunk</p>
    <p>Chronix offers a programming interface to implement time series specific records.</p>
    <p>Chronix exploits repetitiveness and bundles lines into data chunks.</p>
    <p>The chunk size is a</p>
    <p>Timestamp Value Metric Process Host SAX</p>
    <p>- 218.49 ingester\time SmartHub QAMUC C</p>
    <p>- 218.52 ingester\time SmartHub QAMUC D</p>
    <p>Configuration Parameter of 7</p>
    <p>Record metric: ingester\time</p>
    <p>process: SmartHub host: QAMUC</p>
    <p>start: 25.10.2016 00:00:01.546 end:</p>
    <p>type: metric data: Timestamp Value SAX</p>
    <p>- 218.49 C</p>
    <p>- 218.52 D</p>
    <p>chunk &amp; convert</p>
    <p>BLOB</p>
  </div>
  <div class="page">
    <p>Compression technique that suits the domains data</p>
    <p>Chronix exploits that domain data often has small increments, recurring patterns, etc.</p>
    <p>Chronix uses a lossless compression technique that minimizes (record sizes + index sizes).</p>
    <p>The choice of compression technique is a</p>
    <p>Record metric: ingester\time</p>
    <p>process: SmartHub host: QAMUC start: 25.10.2016 00:00:01.546</p>
    <p>end:  type: metric data: 00105e0 e6b0 343b 9c74 080</p>
    <p>Configuration Parameter of 7</p>
    <p>Record metric: ingester\time</p>
    <p>process: SmartHub host: QAMUC start: 25.10.2016 00:00:01.546</p>
    <p>end:  type: metric data: Timestamp Value SAX</p>
    <p>- 218.49 C</p>
    <p>- 218.52 D Compressed BLOB</p>
    <p>serialize &amp; compress</p>
  </div>
  <div class="page">
    <p>Underlying multi-dimensional storage</p>
    <p>By using a multi-dimensional storage</p>
    <p>Chronix supports explorative analyses.</p>
    <p>Attributes are visible to the storage and indexed.</p>
    <p>Users can use any combination to find a record.</p>
    <p>Chronix supports correlating analyses.</p>
    <p>Every type of data can be stored.</p>
    <p>Queries can use and combine types.</p>
    <p>q=host:QAMUC AND metric:ingester*</p>
    <p>AND type:[metric OR trace]</p>
    <p>AND end:NOW-7MONTH</p>
    <p>Record metric: ingester\time</p>
    <p>process: SmartHub host: QAMUC</p>
    <p>start: 25.10.2016 00:00:01.546 end:  type: metric data: 00105e0 e6b0 343b 9c74 080</p>
    <p>Record metric: ingester\methods</p>
    <p>process: SmartHub host: QAMUC</p>
    <p>start: 25.10.2016 00:00:01.546 end:  type: trace data: d65fa01 7ab2 433c 7c8e f123</p>
  </div>
  <div class="page">
    <p>Domain specific query language with server-side evaluation</p>
    <p>Chronix offers not just basic functions but also high-level built-in domain specific analysis functions.</p>
    <p>Chronix evaluates functions server-side for speed.</p>
    <p>Chronix offers a plug-in interface to add functions.</p>
    <p>b a</p>
    <p>si c</p>
    <p>fu n</p>
    <p>ct io</p>
    <p>n s</p>
    <p>a ls</p>
    <p>o n</p>
    <p>e e</p>
    <p>d e</p>
    <p>d</p>
    <p>fo r</p>
    <p>a n</p>
    <p>o m</p>
    <p>a ly</p>
    <p>d</p>
    <p>e te</p>
    <p>ct io</p>
    <p>n</p>
  </div>
  <div class="page">
    <p>Domain specific query language with server-side evaluation</p>
    <p>Chronix achieves more programming comfort &amp; fast results.</p>
    <p>Chronix</p>
    <p>Query 1:</p>
    <p>q=metric:ingester\time</p>
    <p>&amp; cf=outlier</p>
    <p>General-Purpose Time Series Database</p>
    <p>query 1</p>
    <p>Query 1:</p>
    <p>select q(0.25,time),q(0.75,time) from ingester</p>
    <p>Calculate threshold</p>
    <p>Query 2:</p>
    <p>select time from ingester where time &gt;= threshold</p>
    <p>high-level function</p>
    <p>query 1</p>
    <p>read</p>
    <p>result process</p>
    <p>read</p>
    <p>result process</p>
    <p>read</p>
    <p>process result</p>
    <p>query 2extra code 1x query</p>
    <p>extra codeextra code</p>
  </div>
  <div class="page">
    <p>Operational data of 5 industry projects</p>
    <p>Description Interval</p>
    <p>(sec)</p>
    <p>Pairs (mio)</p>
    <p>Time series</p>
    <p>P1 Application for searching car maintenance and repair instructions. (8 app sever, 20 search server)</p>
    <p>P2 Retail application for orders, billing, and customer relations. (1 database, 2 app server)</p>
    <p>P3 Sales application of a car manufacturer. (1 database, 2 app servers)</p>
    <p>P4 Service application for modern cars (music streaming)</p>
    <p>P5 Manage the compatibility of software components in a car.</p>
    <p>Total 4,275.1 38,740</p>
    <p>used for the Evaluation</p>
  </div>
  <div class="page">
    <p>Best threshold for the Date-Delta-Compaction</p>
    <p>DDC = 200</p>
  </div>
  <div class="page">
    <p>Operational data of 3 (of 5) industry projects</p>
    <p>Description Interval</p>
    <p>(sec)</p>
    <p>Pairs (mio)</p>
    <p>Time series r q</p>
    <p>P1 Application for searching car maintenance and repair</p>
    <p>instructions. (8 app sever, 20 search server)</p>
    <p>P2 Retail application for orders, billing, and customer relations. (1 database, 2 app server)</p>
    <p>P3 Sales application of a car manufacturer. (1 database, 2 app servers)</p>
    <p>P4</p>
    <p>P5</p>
    <p>Total 4,275.1 38,740</p>
    <p>Query Mix r = range (days) q= # of queries</p>
  </div>
  <div class="page">
    <p>Best compression technique &amp; Best chunk size for query mix</p>
    <p>C= 128 KB, t= gzip</p>
  </div>
  <div class="page">
    <p>Operational data of 2 of (5) industry projects Evaluation</p>
    <p>Description Interval</p>
    <p>(sec)</p>
    <p>Pairs (mio)</p>
    <p>Time series r q b h</p>
    <p>P1</p>
    <p>P2</p>
    <p>P3</p>
    <p>P4 Service application for modern cars (music streaming)</p>
    <p>P5 Manage the compatibility of software components in a car.</p>
    <p>Total 4,275.1 38,740</p>
    <p>Query Mix r = range (days) q= # of queries b= # of basis queries h= # of highlevel queries</p>
  </div>
  <div class="page">
    <p>TSDBs under test Comparisons</p>
    <p>Quantitative comparison</p>
    <p>General-Purpose TSDB</p>
    <p>Productivity obstacles  Brake shoe</p>
    <p>Resource hog</p>
    <p>Time Series Database</p>
    <p>Chronix: Domain specific TSDB</p>
    <p>InfluxDB OpenTSDB KairosDB</p>
    <p>Chronix</p>
    <p>a) Memory footprint b) Storage demand c) Data retrieval times d) Query mix runtimes</p>
  </div>
  <div class="page">
    <p>a) Memory footprint</p>
    <p>Memory footprint of the databases (in MB)</p>
    <p>Chronix has a 34%  69% smaller memory footprint.</p>
    <p>InfluxDB OpenTSDB KairosDB Chronix</p>
    <p>Initially after startup (processes up and running) 33 2,726 8,763 446</p>
    <p>Maximal memory usage during import 10,336 10,111 18,905 7,002</p>
    <p>Maximal memory usage during query 8,269 9,712 11,230 4,792</p>
  </div>
  <div class="page">
    <p>b) Storage demand</p>
    <p>Chronix saves 20%  68% of the storage space.</p>
    <p>Storage demand (in GB)</p>
    <p>Raw data InfluxDB OpenTSDB KairosDB Chronix</p>
    <p>Project 4 1.2 0.2 0.2 0.3 0.1</p>
    <p>Project 5 107.0 10.7 16.9 26.5 8.6</p>
    <p>total 108.2 10.9 17.1 26.8 8.7</p>
  </div>
  <div class="page">
    <p>Data retrieval times for 20  58 queries (in s)</p>
    <p>c) Data retrieval times</p>
    <p>r q InfluxDB OpenTSDB KairosDB Chronix</p>
    <p>total 343.8 138.3 248.4 27.1</p>
    <p>Chronix saves 80%  92% on data retrieval times.</p>
  </div>
  <div class="page">
    <p>d) Query mix runtimes</p>
    <p>Runtimes of 20  75 b- and h-queries (in s)</p>
    <p>q InfluxDB OpenTSDB KairosDB Chronix</p>
    <p>B a</p>
    <p>s ic</p>
    <p>( b</p>
    <p>)</p>
    <p>H ig</p>
    <p>h -l</p>
    <p>e v</p>
    <p>e l</p>
    <p>(h ) 12 outlier 30.7 29.1 117.6 18.9</p>
    <p>Chronix saves 73%  97% of the runtime of analyzing queries.</p>
    <p>more important</p>
  </div>
  <div class="page">
    <p>Chronix unleashes Anomaly Detection tasks</p>
    <p>Chronix has a 34%  69% smaller memory footprint.</p>
    <p>Chronix saves 20%  68% of the storage space.</p>
    <p>Chronix saves 80%  92% on data retrieval time.</p>
    <p>Chronix saves 73%  97% of the runtime of analyzing queries. 26</p>
    <p>www.chronix.io open source</p>
  </div>
</Presentation>
