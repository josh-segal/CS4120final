<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Provenance and History/Archiving</p>
    <p>H.V. Jagadish</p>
    <p>University of Michigan</p>
  </div>
  <div class="page">
    <p>Dynamic Systems</p>
    <p>System state changes over time  Databases are subject to updates  A user can customize her provenance request with regard to the updates</p>
  </div>
  <div class="page">
    <p>Four Three Papers</p>
    <p>[M] Zhang + Jagadish (Mich)  Dynamic Data Systems</p>
    <p>[O] Gawlick + Radhakrishnan (Oracle)  Fine Grain Using Temporal</p>
    <p>[E] Halpin + Cheney (Edinb/www)  Dynamic SPARQL Updates Named Graphs</p>
    <p>[P] Zhou et al (Penn)  Time Aware Distributed</p>
  </div>
  <div class="page">
    <p>Edinburgh paper [E]</p>
    <p>RDF graphs change over time.  Assume copy-paste paradigm for change.  Use SPARQL to query for provenance that</p>
    <p>is change-aware.</p>
  </div>
  <div class="page">
    <p>Oracle Paper [O]</p>
    <p>Oracle provides the temporal data and version management capability required to support dynamic provenance.</p>
  </div>
  <div class="page">
    <p>PROVENANCE IN DYNAMIC SYSTEMS</p>
    <p>Jing Zhang H.V. Jagadish</p>
    <p>EECS Department University of Michigan, Ann Arbor</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction  Lost Source Provenance  Negative Provenance  Non-Answer Provenance  Conclusion</p>
  </div>
  <div class="page">
    <p>Lost source provenance</p>
    <p>Removing data from database causes (part of) the provenance missing from database.</p>
    <p>Retrieval of the lost provenance when the user asks for it.</p>
  </div>
  <div class="page">
    <p>Lost Source Provenance  Data Structures</p>
    <p>Information on previous database states  Provenance log: recording the manipulations including queries and modifications</p>
    <p>Shadow table: archiving the removed tuples from the regular tables</p>
    <p>Extra attributes to the regular tables: referring to the manipulation that introduced the tuples into the database</p>
  </div>
  <div class="page">
    <p>Lost Source Provenance - Data Structure Example</p>
  </div>
  <div class="page">
    <p>Lost Source Provenance Extended Tracing Queries</p>
    <p>When retrieving provenance, the tracing query uses a view that is created on the regular tables and the shadow tables and that represents the state of the regular tables at the time of the execution of the original query</p>
    <p>Where Bi are attribute names, S is the regular table, Ssh is the shadow table, s and s are tuples, id is the entry ID in provenance log</p>
  </div>
  <div class="page">
    <p>Comparison With Temporal Database Based Approach</p>
    <p>Temporal database  Support the query over database at any previous time</p>
    <p>point  Potential performance issues</p>
    <p>Existing database applications on regular databases  The complicated timestamping mechanism potentially</p>
    <p>hinders the database performance  The time concept is not really needed to retrieve the lost</p>
    <p>provenance, since the relative ordering of queries and updates is the one that matters</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction  Lost Source Provenance  Negative Provenance  Non-Answer Provenance  Conclusion</p>
  </div>
  <div class="page">
    <p>Negative provenance</p>
    <p>Adding new data to database turns answer to non-answer</p>
    <p>Validation of previous answer and retrieval of negative provenance in the new data as the explanation of invalidated previous answer</p>
  </div>
  <div class="page">
    <p>Negative Provenance - Validation Of Previously Derived Tuples</p>
    <p>Modifications to databases have potential effect on previously derived tuples</p>
    <p>View maintenance is one way to determine the effects  Not sufficient for explanation of invalidated previous result tuples</p>
    <p>Not efficient for updating the complete result set when only a small fraction of result tuples are in question</p>
  </div>
  <div class="page">
    <p>Explanation for Invalidation of Previously Derived Tuples</p>
    <p>Regular provenance: its presence is required to derive a given result tuple</p>
    <p>Negative provenance: its absence is required to derive a given result tuple  Intuitively, when certain tuples are added to the database, a given derived tuple (answer) will become invalid (non-answer)</p>
    <p>E.g., suppose a table T(A,B) and a query SELECT max(A), B FROM T GROUP BY B. If (1, 2) is in the result, the insertion of (2,2) will invalidate it.</p>
  </div>
  <div class="page">
    <p>Negative Provenance Definition</p>
    <p>Comparison  Regular provenance is within the database and consists</p>
    <p>of finite number of tuples  Negative provenance is outside the database and may</p>
    <p>consist of infinite number of tuples</p>
    <p>Suppose t !Q({T 1 ,....,Tn }). Then, {T1</p>
    <p>',...,Tn ' } is a negative derivation</p>
    <p>of t according to Q if they satisfy the following requirements: 1. Ti</p>
    <p>' is of the same schema as Ti 2. t &quot;Q({T</p>
    <p>' such that {T 1 #T</p>
    <p>'',...,Tn #Tn ' }</p>
    <p>satisfies the above two requirements. The union of all the negative derivations is called the negative provenance.</p>
  </div>
  <div class="page">
    <p>Negative Provenance Representation</p>
    <p>Due to the fact that negative provenance is both outside the database and can be of infinite tuples, the representation of it through listing all the tuples is not practical</p>
    <p>However, negative provenance can be detected within the delta tables that are inserted or removed from the original database</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction  Lost Source Provenance  Negative Provenance  Non-Answer Provenance  Conclusion</p>
  </div>
  <div class="page">
    <p>Non-answer provenance</p>
    <p>Expected answer does not show up in the result  Changes to source database to produce the</p>
    <p>expected answer  Operations in the derivation that caused the</p>
    <p>lack of answers  Construction of the changes and the</p>
    <p>detection of the causing operations</p>
  </div>
  <div class="page">
    <p>Non-Answer Provenance</p>
    <p>An expected answer does not show up in the result</p>
    <p>The reason lies either in the source data or in the operations in the derivation</p>
    <p>Proper changes to the source data can lead to the answer being produced as expected[1]</p>
    <p>Find out the responsible operations in the derivations that caused the lack of expected answer[2]</p>
    <p>[1] On the provenance of non-answers to queries over extracted data. J. Huang, T. Chen, A. Doan, and J. F. Naughton. VLDB 08 [2] Why not? A. Chapman and H. V. Jagadish. SIGMOD 09</p>
  </div>
  <div class="page">
    <p>Conclusion  Most database systems are subject to updates and thus</p>
    <p>provenance is subject to removal, modifications, etc.  Users have their customized requests for provenance,</p>
    <p>which can usually be expressed some kind of filtering conditions on the complete provenance</p>
    <p>Related provenance problems include  Finding the lost source provenance  Detecting the negative provenance and explaining the answer</p>
    <p>turning non-answer  Computing customized provenance without involving the</p>
    <p>unrequested part  Explaining the non-answer</p>
  </div>
  <div class="page">
    <p>Fine Grain Provenance</p>
    <p>Data changes. Have to deal with change. Only a rare database that has no updates.</p>
    <p>Probably dont have the same issue with workflow provenance (process or data set or large grain provenance).</p>
    <p>Session should not be called Provenance +History/Archiving</p>
    <p>History is fundamental to provenance.</p>
  </div>
  <div class="page">
    <p>Provenance QType</p>
    <p>Where  Data item derived from is updated.</p>
    <p>How  Log of actions that affect a specific datum.</p>
    <p>Why  When</p>
    <p>Time/event when X became true</p>
  </div>
  <div class="page">
    <p>Versioning Solves Most Things</p>
    <p>Treat each version (of both source and derived data) as an independent object.</p>
    <p>Maintain provenance of each version of derived, keeping track of version for each source datum referenced.</p>
    <p>Margo Seltzer said this too.  Dont really need temporal DB for this.</p>
    <p>Unless it is Oracle</p>
  </div>
  <div class="page">
    <p>Causality Needs Notion of Time</p>
    <p>Basic fine grain provenance is enough for determining causality as defined by Suciu. (But not influence, and other new functions).</p>
    <p>Large number of variables can kill patient.  Cause of death is the specific variable</p>
    <p>whose value changed  others are considered exogenous.</p>
    <p>Need history to do this!!</p>
  </div>
</Presentation>
