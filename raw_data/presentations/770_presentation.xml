<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Hedera: Dynamic Flow Scheduling for Data Center Networks</p>
    <p>Mohammad Al-Fares Sivasankar Radhakrishnan Barath Raghavan* Nelson Huang Amin Vahdat</p>
    <p>UC San Diego * Williams College</p>
    <p>- USENIX NSDI 2010</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Current data center networks support tens of thousands of machines</p>
    <p>Limited port-densities at the core routers  Horizontal expansion = increasingly relying on multipathing</p>
    <p>!&quot;#$%&amp;'($)* #$%&amp;'($)*</p>
    <p>+++ +++ +++</p>
    <p>+++</p>
    <p>+++</p>
    <p>+++</p>
    <p>+++</p>
    <p>+++ +++ +++</p>
    <p>+++</p>
    <p>+++</p>
    <p>!&quot;&quot;#$&quot;%&amp;'()</p>
    <p>*+&quot;$</p>
    <p>,(#$</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>MapReduce / Hadoop -style workloads have substantial BW requirements</p>
    <p>Shuffle phase stresses network interconnect</p>
    <p>Oversubscription / Bad forwarding  Jobs often bottlenecked by network</p>
    <p>Map</p>
    <p>Reduce</p>
    <p>Map Map</p>
    <p>Reduce Reduce</p>
    <p>Input Dataset</p>
    <p>Output Dataset</p>
    <p>MapReduce Workflow</p>
  </div>
  <div class="page">
    <p>Contributions</p>
    <p>Integration + working implementation of: 1. Centralized Data Center routing control</p>
    <p>Enables more efficient utilization of network infrastructure</p>
    <p>Upto 96% of optimal bisection bandwidth, &gt; 2X better than standard techniques</p>
  </div>
  <div class="page">
    <p>Background</p>
    <p>Current industry standard: Equal-Cost Multi-Path (ECMP)  Given a packet to a subnet with multiple paths,</p>
    <p>forward packet based on a hash of packets headers</p>
    <p>Originally developed as a wide-area / backbone TE tool  Implemented in: Cisco / Juniper / HP ... etc.</p>
    <p>Local Collision</p>
    <p>Downstream Collision</p>
    <p>Core 0 Core 1 Core 2 Core 3</p>
    <p>Agg 0</p>
    <p>Flow A Flow B Flow C Flow D</p>
    <p>Agg 1 Agg 2</p>
  </div>
  <div class="page">
    <p>Background</p>
    <p>ECMP drawback: Static + Oblivious to link-utilization!  Causes long-term local/downstream flow collisions  On 27K-host fat-tree and a randomized matrix,</p>
    <p>ECMP wastes average of 61% of bisection bandwidth!</p>
    <p>Local Collision</p>
    <p>Downstream Collision</p>
    <p>Core 0 Core 1 Core 2 Core 3</p>
    <p>Agg 0</p>
    <p>Flow A Flow B Flow C Flow D</p>
    <p>Agg 1 Agg 2</p>
  </div>
  <div class="page">
    <p>Problem Statement</p>
    <p>Problem:</p>
    <p>Given a dynamic traffic matrix of flow demands, how do you find paths that maximize network bisection bandwidth?</p>
    <p>Constraint:</p>
    <p>Commodity Ethernet switches + No end-host mods</p>
  </div>
  <div class="page">
    <p>Problem Statement</p>
    <p>Single path forwarding (no flow splitting)  Expressed as Binary Integer Programming (BIP)  Combinatorial, NP-complete</p>
    <p>Exact solvers CPLEX/GLPK impractical for realistic networks</p>
    <p>k</p>
    <p>i=1</p>
    <p>fi(u, v)  c(u, v)  wV</p>
    <p>fi(u, w) = 0 (u = si,ti)</p>
    <p>v, u : fi(u, v) =  fi(v, u)</p>
    <p>wV</p>
    <p>fi(si, w) = di</p>
    <p>wV</p>
    <p>fi(w,ti) = di</p>
    <p>MULTI-COMMODITY FLOW problem:</p>
  </div>
  <div class="page">
    <p>Problem Statement</p>
    <p>Polynomial-time algorithms known for 3-stage Clos Networks (based on bipartite edge-coloring)</p>
    <p>None for 5-stage Clos (3-tier fat-trees)  Need to target arbitrary/general DC topologies!</p>
    <p>k</p>
    <p>i=1</p>
    <p>fi(u, v)  c(u, v)  wV</p>
    <p>fi(u, w) = 0 (u = si,ti)</p>
    <p>v, u : fi(u, v) =  fi(v, u)</p>
    <p>wV</p>
    <p>fi(si, w) = di</p>
    <p>wV</p>
    <p>fi(w,ti) = di</p>
  </div>
  <div class="page">
    <p>Architecture</p>
    <p>Hedera : Dynamic Flow Scheduling  Optimize achievable bisection bandwidth by</p>
    <p>assigning flows non-conflicting paths</p>
    <p>Uses flow demand estimation + placement heuristics to find good flow-to-core mappings</p>
  </div>
  <div class="page">
    <p>Architecture</p>
    <p>Scheduler operates a tight control-loop: 1. Detect large flows</p>
  </div>
  <div class="page">
    <p>Elephant Detection</p>
  </div>
  <div class="page">
    <p>Elephant Detection</p>
    <p>Scheduler continually polls edge switches for flow byte-counts</p>
    <p>Flows exceeding B/s threshold are large  &gt; %10 of hosts link capacity in our</p>
    <p>implementation (i.e. &gt; 100Mbps)</p>
    <p>What if only small flows ?  Default ECMP load-balancing efficient</p>
  </div>
  <div class="page">
    <p>Elephant Detection</p>
    <p>Hedera complements ECMP!  Default forwarding uses ECMP  Hedera schedules large flows that cause</p>
    <p>bisection bandwidth problems</p>
  </div>
  <div class="page">
    <p>Demand Estimation</p>
  </div>
  <div class="page">
    <p>Demand Estimation</p>
    <p>Empirical measurement of flow rates are not suitable / sufficient for flow scheduling</p>
    <p>Current TCP flow-rates may be constrained to inefficient forwarding</p>
    <p>Need to find the flows overall fair bandwidth allocation, to better inform placement algorithms</p>
    <p>Motivation:</p>
  </div>
  <div class="page">
    <p>Demand Estimation</p>
    <p>TCPs AIMD + Fair Queueing try to achieve max-min fairness in steady state</p>
    <p>When routing is a degree of freedom, establishing max-min fair demands is hard</p>
    <p>Ideal case: find max-min fair bandwidth allocation as if constrained by host-NIC</p>
  </div>
  <div class="page">
    <p>Demand Estimation</p>
    <p>Given traffic matrix of large flows, modify each flows size at Src + Dst iteratively:</p>
    <p>Guaranteed to converge in O(|F|) time</p>
  </div>
  <div class="page">
    <p>Demand Estimation A</p>
    <p>B</p>
    <p>C</p>
    <p>X</p>
    <p>Y</p>
    <p>Flow Estimate Conv. ?</p>
    <p>A  X</p>
    <p>A  Y</p>
    <p>B  Y</p>
    <p>C  Y</p>
    <p>Sender Available</p>
    <p>Unconv. BW Flows Share</p>
    <p>A 1 2 1/2</p>
    <p>B 1 1 1</p>
    <p>C 1 1 1</p>
    <p>Senders</p>
  </div>
  <div class="page">
    <p>Demand Estimation</p>
    <p>Recv RL? Non-SL Flows</p>
    <p>Share</p>
    <p>X No -</p>
    <p>Y Yes 3 1/3</p>
    <p>Receivers</p>
    <p>A</p>
    <p>B</p>
    <p>C</p>
    <p>X</p>
    <p>Y</p>
    <p>Flow Estimate Conv. ?</p>
    <p>A  X 1/2</p>
    <p>A  Y 1/2</p>
    <p>B  Y 1</p>
    <p>C  Y 1</p>
  </div>
  <div class="page">
    <p>Demand Estimation A</p>
    <p>B</p>
    <p>C</p>
    <p>X</p>
    <p>Y</p>
    <p>Flow Estimate Conv. ?</p>
    <p>A  X 1/2</p>
    <p>A  Y 1/3 Yes</p>
    <p>B  Y 1/3 Yes</p>
    <p>C  Y 1/3 Yes</p>
    <p>Sender Available</p>
    <p>Unconv. BW Flows Share</p>
    <p>A 2/3 1 2/3</p>
    <p>B 0 0 0</p>
    <p>C 0 0 0</p>
    <p>Senders</p>
  </div>
  <div class="page">
    <p>Demand Estimation A</p>
    <p>B</p>
    <p>C</p>
    <p>X</p>
    <p>Y</p>
    <p>Flow Estimate Conv. ?</p>
    <p>A  X 2/3 Yes</p>
    <p>A  Y 1/3 Yes</p>
    <p>B  Y 1/3 Yes</p>
    <p>C  Y 1/3 Yes</p>
    <p>Recv RL? Non-SL Flows</p>
    <p>Share</p>
    <p>X No -</p>
    <p>Y No -</p>
    <p>Receivers</p>
  </div>
  <div class="page">
    <p>Placement Heuristics</p>
  </div>
  <div class="page">
    <p>Global First-Fit ?</p>
    <p>Flow A Flow B Flow C</p>
    <p>? ?</p>
    <p>New flow detected, linearly search all possible paths from S D  Place flow on first path whose component links can fit that flow</p>
    <p>Scheduler</p>
  </div>
  <div class="page">
    <p>Global First-Fit Flow A Flow B Flow C</p>
    <p>Flows placed upon detection, are not moved  Once flow ends, entries + reservations time out</p>
    <p>Scheduler</p>
  </div>
  <div class="page">
    <p>Simulated Annealing</p>
    <p>Probabilistic search for good flow-to-core mappings  Goal: Maximize achievable bisection bandwidth</p>
    <p>Current flow-to-core mapping generates neighbor state</p>
    <p>Calculate total exceeded bandwidth capacity  Accept move to neighbor state if bisection BW gain</p>
    <p>Few thousand iterations for each scheduling round  Avoid local-minima; non-zero prob. to worse state</p>
  </div>
  <div class="page">
    <p>Simulated Annealing</p>
    <p>Implemented several optimizations that reduce the search-space significantly:</p>
    <p>Assign a single core switch to each destination host</p>
    <p>Incremental calculation of exceeded capacity  .. among others</p>
  </div>
  <div class="page">
    <p>Simulated Annealing 0 1 2 3</p>
    <p>Flow A Flow B Flow C</p>
    <p>Example run: 3 flows, 3 iterations</p>
    <p>Core 2 1 0</p>
    <p>? ? ? 2 0 2</p>
    <p>? 2 0 3</p>
    <p>Scheduler</p>
  </div>
  <div class="page">
    <p>Simulated Annealing 0 1 3</p>
    <p>Flow A Flow B Flow C</p>
    <p>Final state is published to the switches and used as the initial state for next round</p>
    <p>Core ? ? ? ? 2 0 3</p>
    <p>Scheduler</p>
  </div>
  <div class="page">
    <p>Fault-Tolerance</p>
  </div>
  <div class="page">
    <p>Fault-Tolerance 0 1 3</p>
    <p>Flow A Flow B Flow C</p>
    <p>Link / Switch failure: Use PortLands fault notification protocol  Hedera routes around failed components</p>
    <p>Scheduler</p>
  </div>
  <div class="page">
    <p>Fault-Tolerance 0 1 3</p>
    <p>Flow A Flow B Flow C</p>
    <p>Scheduler failure:  Soft-state, not required for correctness (connectivity)  Switches fall back to ECMP</p>
    <p>Scheduler</p>
  </div>
  <div class="page">
    <p>Implementation</p>
  </div>
  <div class="page">
    <p>Implementation  16-host testbed</p>
    <p>k=4 fat-tree data-plane  20 machines; 4-port</p>
    <p>NetFGPAs / OpenFlow</p>
    <p>Parallel 48-port non-blocking Quanta switch</p>
    <p>1 Scheduler machine  Dynamic traffic monitoring  OpenFlow routing control</p>
  </div>
  <div class="page">
    <p>Evaluation - Testbed</p>
    <p>Sta g1(</p>
    <p>Sta g2(</p>
    <p>Sta g1(</p>
    <p>Sta g2(</p>
    <p>Str ide</p>
    <p>(2)</p>
    <p>Str ide</p>
    <p>(4)</p>
    <p>Str ide</p>
    <p>(8)</p>
    <p>B is</p>
    <p>ec ti o n</p>
    <p>B an</p>
    <p>dw id</p>
    <p>th (</p>
    <p>G bp</p>
    <p>s)</p>
    <p>Communication Pattern</p>
    <p>ECMP Global First-Fit Simulated Annealing Non-blocking</p>
  </div>
  <div class="page">
    <p>Evaluation - Testbed</p>
    <p>Ran d0</p>
    <p>Ran d1</p>
    <p>Ran dB</p>
    <p>ij0</p>
    <p>Ran dB</p>
    <p>ij1 Ran</p>
    <p>dX 2</p>
    <p>Ran dX</p>
    <p>tsp ot</p>
    <p>B is</p>
    <p>ec ti o n</p>
    <p>B an</p>
    <p>dw id</p>
    <p>th (</p>
    <p>G bp</p>
    <p>s)</p>
    <p>Communication Pattern</p>
    <p>ECMP Global First-Fit Simulated Annealing Non-blocking</p>
  </div>
  <div class="page">
    <p>Data Shuffle ECMP GFF SA Control</p>
    <p>Total Shuffle Time (s) 438.4 335.5 336.0 306.4</p>
    <p>Avg. Comple5on Time (s) 358.1 258.7 262.0 226.6</p>
    <p>Avg. Bisec5on BW (Gbps) 2.81 3.89 3.84 4.44</p>
    <p>Avg. host goodput (MB/s) 20.9 29.0 28.6 33.1</p>
    <p>16-hosts: 120 GB all-to-all in-memory shuffle  Hedera achieves 39% better bisection BW</p>
    <p>over ECMP, 88% of ideal non-blocking switch</p>
  </div>
  <div class="page">
    <p>Evaluation - Simulator</p>
    <p>For larger topologies:  Models TCPs AIMD behavior when</p>
    <p>constrained by the topology</p>
    <p>Stochastic flow arrival times / Bytes  Calibrated its performance against testbed</p>
    <p>What about ns2 / OMNeT++ ?  Packet-level simulators impractical at these</p>
    <p>network scales</p>
  </div>
  <div class="page">
    <p>Simulator - 8,192 hosts (k=32)</p>
    <p>Sta g(.5</p>
    <p>,0)</p>
    <p>Sta g(.2</p>
    <p>,.3)</p>
    <p>Str ide</p>
    <p>(1)</p>
    <p>Str ide</p>
    <p>(16 )</p>
    <p>Str ide</p>
    <p>(25 6)</p>
    <p>Ran dB</p>
    <p>ij Ran</p>
    <p>d</p>
    <p>B is</p>
    <p>ec ti o n</p>
    <p>B an</p>
    <p>dw id</p>
    <p>th (</p>
    <p>G bp</p>
    <p>s)</p>
    <p>Communication Pattern</p>
    <p>ECMP Global First-Fit Simulated Annealing Non-blocking</p>
  </div>
  <div class="page">
    <p>Reactiveness  Demand Estimation:</p>
    <p>27K hosts, 250K flows, converges &lt; 200ms  Simulated Annealing:</p>
    <p>Asymptotically dependent on # of flows + # iter:  50K flows and 10K iter: 11ms</p>
    <p>Most of final bisection BW: first few hundred iter  Scheduler control loop:</p>
    <p>Polling + Estimation + SA = 145ms for 27K hosts</p>
  </div>
  <div class="page">
    <p>Limitations</p>
    <p>Dynamic workloads, large flow turnover faster than control loop</p>
    <p>Scheduler will be continually chasing the traffic matrix</p>
    <p>Need to include penalty term for unnecessary SA flow re-assignments</p>
    <p>Flow Size</p>
    <p>M at</p>
    <p>ri x</p>
    <p>St ab</p>
    <p>ili ty</p>
    <p>St ab</p>
    <p>le U</p>
    <p>ns ta</p>
    <p>bl e</p>
    <p>ECMP Hedera</p>
  </div>
  <div class="page">
    <p>Future Work</p>
    <p>Improve utility function of Simulated Annealing  SA movement penalties (TCP)  Add flow priorities (QoS)  Incorporate other metrics: e.g. Power</p>
    <p>Release combined system: PortLand + Hedera (6/1)  Perfect, non-centralized, per-packet Valiant Load</p>
    <p>Balancing</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>Simulated Annealing delivers significant bisection BW gains over standard ECMP</p>
    <p>Hedera complements ECMP  RPC-like traffic is fine with ECMP</p>
    <p>If youre running MapReduce/Hadoop jobs on your network, you stand to benefit greatly from Hedera; tiny investment!</p>
  </div>
  <div class="page">
    <p>Questions?</p>
    <p>http://cseweb.ucsd.edu/~malfares/</p>
  </div>
  <div class="page">
    <p>Traffic Overhead</p>
    <p>27K host network:  Polling: 72B / flow * 5 flows/host * 27K</p>
    <p>hosts / 0.1 sec = &lt; 100MB/s for DC</p>
    <p>Could also use data-plane</p>
  </div>
</Presentation>
