<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>North by Northwest: Infrastructure Agnostic and Datastore Agnostic</p>
    <p>Live Migration of Private Cloud Platforms</p>
    <p>Navraj Chohan, Anand Gupta, Chris Bunch, Sujay Sundaram,</p>
    <p>Chandra Krintz</p>
    <p>UC Santa Barbara</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Private PaaS  AppScale  Design  Implementation  Evaluation  Conclusion</p>
  </div>
  <div class="page">
    <p>Private PaaS  On site cloud technology  Elastic  Distributed  Fault tolerance &amp; high availability</p>
    <p>Enables programmer productivity  Abstract away lower level details (IaaS/OS)  Focus on application development</p>
    <p>Offerings  AppScale, CloudFoundry, OpenShift</p>
  </div>
  <div class="page">
    <p>AppScale  Google App Engine (GAE) private PaaS  Released open source in 2009  Infrastructure agnostic  Packaged as a VM Image (Ubuntu 10.04)  Xen, KVM, EC2, Eucalyptus, OpenStack, etc.</p>
    <p>Datastore agnostic  Cassandra, Hypertable, HBase, etc.</p>
  </div>
  <div class="page">
    <p>AppScale  Datastore abstraction layer  Transaction support within entity groups  Programmatically assign during runtime  Multi-row ACID semantics</p>
    <p>Lock management via ZooKeeper  Limited query support (GQL)  No JOINs or queries that can do inserts</p>
  </div>
  <div class="page">
    <p>Live Migration Motivation  Goal: Update the PaaS system  PaaS, IaaS, HW layers change over time  Software updates  New features  OS updates and patches  Hardware updates (HDD-&gt;SSD)</p>
    <p>Datastore updates and migrations  NoSQL stores  Performance and features  No porting tools  Eliminates DB lock-in</p>
  </div>
  <div class="page">
    <p>Design  Minimal-to-no downtime  Minimal overhead  Real system  Simple and effective  Rolling upgrades</p>
    <p>Backward compatibility for applications  Must support transactions  No data loss</p>
  </div>
  <div class="page">
    <p>AppScale Migration</p>
  </div>
  <div class="page">
    <p>Implementation</p>
  </div>
  <div class="page">
    <p>Migration Synchronization  N1 initializes N2  Uploads existing applications</p>
    <p>Synchronize ZK data between N1 and N2 deployments</p>
    <p>Memcache Warm-up  Minimizes load on DB  Do a copy-on-write and copy-on-read for each key</p>
  </div>
  <div class="page">
    <p>Migration Synchronization  Start with copy-on-write (COW) to N2  Initialize a snapshot of the datastore  Transfer and load the snapshot  Only copy over non-existing keys  ZooKeeper locks are required for transactional operations</p>
    <p>Go into data proxy mode  Full handoff via DNS</p>
  </div>
  <div class="page">
    <p>Results</p>
  </div>
  <div class="page">
    <p>Memcache Warming  5KB entities  COW  .17ms of overhead</p>
    <p>COR  .85ms of overhead  Writes are 10.3 times longer</p>
    <p>&lt;1% of overhead for a request</p>
  </div>
  <div class="page">
    <p>ZooKeeper Sync Evaluation T im</p>
    <p>e (</p>
    <p>m s)</p>
    <p>Number of ZooKeeper Locks</p>
  </div>
  <div class="page">
    <p>Datastore Sync Evaluation</p>
  </div>
  <div class="page">
    <p>Data loading and Handover  Entity loading from snapshot  2.45-3.18ms for 100B-100KB entries</p>
    <p>Amazon Route 53 DNS Service  Dynamically updated via REST API</p>
    <p>Timed with Apache Benchmark tool  Average switch over time of 46.4 seconds</p>
  </div>
  <div class="page">
    <p>Related Work  Private PaaS offerings  Red Hats OpenShift  VMWares CloudFoundry</p>
    <p>GAE Compatible  TyphoonAE</p>
    <p>Migration  VM Migration  Albatross by Das et al.</p>
  </div>
  <div class="page">
    <p>Thank You  Check out AppScale at:</p>
    <p>appscale.cs.ucsb.edu</p>
  </div>
  <div class="page"/>
</Presentation>
