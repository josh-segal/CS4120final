<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>JSZap: Compressing JavaScript Code</p>
    <p>Martin Burtscher, UT Austin</p>
    <p>Ben Livshits &amp; Ben Zorn, Microsoft Research</p>
    <p>Gaurav Sinha, IIT Kanpur</p>
  </div>
  <div class="page">
    <p>A Web 2.0 Application Dissected</p>
    <p>downloaded 2,855 Functions</p>
    <p>Talks to 14 backend services</p>
    <p>(traffic, images, directions, ads, )</p>
  </div>
  <div class="page">
    <p>Lots of JavaScript being Transmitted</p>
    <p>www.live.com</p>
    <p>spreadsheets.google</p>
    <p>maps.live</p>
    <p>chi.lexigame</p>
    <p>hotmail</p>
    <p>gmail</p>
    <p>dropthings</p>
    <p>maps.google</p>
    <p>pageflakes</p>
    <p>bunny hunt</p>
    <p>Fraction of download that is JavaScript</p>
    <p>Up to 85% of a Web 2.0</p>
    <p>app is JavaScript code!</p>
  </div>
  <div class="page">
    <p>AJAX: Tension Headaches</p>
    <p>Execution cant start without</p>
    <p>the code</p>
    <p>Move code to client for</p>
    <p>responsiveness</p>
  </div>
  <div class="page">
    <p>JavaScript on the Wire</p>
    <p>JavaScript crunch</p>
    <p>gzip -d parser AST</p>
    <p>JSZap</p>
    <p>gzip</p>
  </div>
  <div class="page">
    <p>JSZap Approach</p>
    <p>Represent JavaScript as AST instead of source</p>
    <p>Serialize the compressed AST</p>
    <p>Decompress directly into AST on client</p>
    <p>Use gzip as 2nd-level (de-)compressor</p>
  </div>
  <div class="page">
    <p>Benefits of AST-based Compression</p>
    <p>Compression: less to transmit</p>
    <p>ASTs are blasted directly into the browser</p>
    <p>Reduced Latency</p>
    <p>Reduces mobile charges</p>
    <p>Reduces operator network costs: better for servers</p>
    <p>Reduced Network Bandwidth</p>
    <p>Ensures well-formedness of code</p>
    <p>Can use to check language subsets easily (AdSafe)</p>
    <p>Caching incremental updates</p>
    <p>Unblocking HTML parser</p>
    <p>Correctness, Security, and other Benefits</p>
  </div>
  <div class="page">
    <p>JSZap Compression</p>
    <p>JavaScript JSZap gzip</p>
  </div>
  <div class="page">
    <p>JSZap Compression</p>
    <p>JavaScript identifiers gzip</p>
    <p>literals</p>
    <p>productions 1</p>
  </div>
  <div class="page">
    <p>GZIP is a formidable</p>
    <p>opponent</p>
  </div>
  <div class="page">
    <p>JSZap vs. GZIP</p>
    <p>JSZapgzip</p>
    <p>S iz</p>
    <p>e i</p>
    <p>n K</p>
    <p>B</p>
    <p>Literals Identifiers Productions</p>
  </div>
  <div class="page">
    <p>Talk Outline</p>
    <p>identifiers</p>
    <p>literals</p>
    <p>productions 1</p>
    <p>evaluation on real code</p>
  </div>
  <div class="page">
    <p>Background: ASTs</p>
    <p>a * b + c 1) E  E + T 2) E  T</p>
    <p>+</p>
    <p>*</p>
    <p>a b</p>
    <p>c 5</p>
    <p>Expression Grammar Tree</p>
  </div>
  <div class="page">
    <p>A Simple Javascript Example var y = 2;</p>
    <p>function foo () {</p>
    <p>var x = &quot;jscrunch&quot;;</p>
    <p>var z = 3;</p>
    <p>z = y + y;</p>
    <p>}</p>
    <p>x = &quot;jszap&quot;;</p>
    <p>Identifier Stream</p>
    <p>y foo x z z y y x</p>
    <p>Literal Stream</p>
    <p>&quot;jscrunch&quot; 2 3 &quot;jszap&quot; 14</p>
    <p>Production Stream</p>
  </div>
  <div class="page">
    <p>Benchmarking JSZap</p>
    <p>Benchmark name Source lines</p>
    <p>Source bytes</p>
    <p>gmonkey 922 17,382</p>
    <p>getDOMHash 1,136 25,467</p>
    <p>bing1 3,758 77,891</p>
    <p>bingmap1 3,473 80,066</p>
    <p>livemsg1 5,307 93,982</p>
    <p>bingmap2 9,726 113,393</p>
    <p>facebook1 5,886 141,469</p>
    <p>livemsg2 7,139 156,282</p>
    <p>officelive1 22,016 668,051</p>
    <p>JavaScript files up to 22K LOC</p>
    <p>Variety of app types</p>
    <p>Both handgenerated, and machine-generated</p>
    <p>gzipped everything</p>
  </div>
  <div class="page">
    <p>Components of JavaScript Source</p>
    <p>g m</p>
    <p>o n</p>
    <p>k e</p>
    <p>y</p>
    <p>g e</p>
    <p>tD O</p>
    <p>M H</p>
    <p>a sh</p>
    <p>b in</p>
    <p>g 1</p>
    <p>b in</p>
    <p>g m</p>
    <p>a p</p>
    <p>li v</p>
    <p>e m</p>
    <p>sg 1</p>
    <p>b in</p>
    <p>g m</p>
    <p>a p</p>
    <p>fa ce</p>
    <p>b o</p>
    <p>o k</p>
    <p>li v e</p>
    <p>m sg</p>
    <p>o ff</p>
    <p>ic e</p>
    <p>li v</p>
    <p>e 1</p>
    <p>productions identifiers literals</p>
    <p>None of the categories can be ignored</p>
    <p>Identifiers become more prominent with code growth</p>
  </div>
  <div class="page">
    <p>Compressing the Production Stream</p>
    <p>Frequency-based production renaming</p>
    <p>Differential encoding: 26 and 57 =&gt; 2 and 3</p>
    <p>Chain rule: eliminate predictable productions</p>
    <p>Tree-based prediction-by-partial-match</p>
  </div>
  <div class="page">
    <p>PPMC</p>
    <p>Consider compressing</p>
    <p>if (P) then X else X</p>
    <p>Should be very compressible  if (P) then ...abc... else ...abc...</p>
    <p>P</p>
    <p>X X</p>
    <p>Tree context used to build a predictor</p>
    <p>Provides the next likely child node given context C and child position p</p>
    <p>Arithmetic coding: more likely=shorter IDs</p>
    <p>See paper for details</p>
  </div>
  <div class="page">
    <p>Production Compression with PPMC</p>
    <p>m o</p>
    <p>n k</p>
    <p>e y</p>
    <p>g e</p>
    <p>tD O</p>
    <p>M H</p>
    <p>a sh</p>
    <p>b in</p>
    <p>g 1</p>
    <p>b in</p>
    <p>g m</p>
    <p>a p</p>
    <p>li v</p>
    <p>e m</p>
    <p>sg 1</p>
    <p>b in</p>
    <p>g m</p>
    <p>a p</p>
    <p>fa ce</p>
    <p>b o</p>
    <p>o k</p>
    <p>li v</p>
    <p>e m</p>
    <p>sg 2</p>
    <p>o ff</p>
    <p>ic e</p>
    <p>li v</p>
    <p>e 1</p>
    <p>P ro</p>
    <p>d u</p>
    <p>ct io</p>
    <p>n C</p>
    <p>o m</p>
    <p>p re</p>
    <p>ss io</p>
    <p>n (</p>
    <p>g zi</p>
    <p>p =</p>
  </div>
  <div class="page">
    <p>Compressing the Identifier Stream</p>
    <p>Symbol tables instead of identifier stream:</p>
    <p>Compress redundancy: offset into table</p>
    <p>Global or local symbol tables</p>
    <p>Use variable-length encoding</p>
    <p>Other techniques:</p>
    <p>Sort symbols by frequency</p>
    <p>Rename local variables</p>
  </div>
  <div class="page">
    <p>Variable-length Encoding for Identifiers</p>
    <p>is global?</p>
    <p>is renamed local</p>
    <p>fits in 1 byte?</p>
  </div>
  <div class="page">
    <p>Variable-Length Identifier Encoding</p>
    <p>g m</p>
    <p>o n</p>
    <p>k e</p>
    <p>y</p>
    <p>g e</p>
    <p>tD O</p>
    <p>M H</p>
    <p>a sh</p>
    <p>b in</p>
    <p>g 1</p>
    <p>b in</p>
    <p>g m</p>
    <p>a p</p>
    <p>li v</p>
    <p>e m</p>
    <p>sg 1</p>
    <p>b in</p>
    <p>g m</p>
    <p>a p</p>
    <p>fa ce</p>
    <p>b o</p>
    <p>o k</p>
    <p>li v</p>
    <p>e m</p>
    <p>sg 2</p>
    <p>o ff</p>
    <p>ic e</p>
    <p>li v</p>
    <p>e 1</p>
    <p>parent</p>
    <p>local 2byte</p>
    <p>local 1byte</p>
    <p>local builtin</p>
    <p>global 2byte</p>
    <p>global 1byte</p>
  </div>
  <div class="page">
    <p>Symbol Tables: Effectiveness</p>
    <p>m o</p>
    <p>n k</p>
    <p>e y</p>
    <p>g e</p>
    <p>tD O</p>
    <p>M H</p>
    <p>a sh</p>
    <p>b in</p>
    <p>g 1</p>
    <p>b in</p>
    <p>g m</p>
    <p>a p</p>
    <p>li v</p>
    <p>e m</p>
    <p>sg 1</p>
    <p>b in</p>
    <p>g m</p>
    <p>a p</p>
    <p>fa ce</p>
    <p>b o</p>
    <p>o k</p>
    <p>li v</p>
    <p>e m</p>
    <p>sg 2</p>
    <p>o ff</p>
    <p>ic e</p>
    <p>li v</p>
    <p>e 1</p>
    <p>Id e</p>
    <p>n ti</p>
    <p>fi e</p>
    <p>rs (</p>
    <p>N o</p>
    <p>S T</p>
    <p>= 1</p>
    <p>)</p>
    <p>Global ST VarEnc</p>
  </div>
  <div class="page">
    <p>Compressing Literals</p>
    <p>Symbol tables</p>
    <p>Grouping literals by type</p>
    <p>Pre-fixes and post-fixes</p>
    <p>These techniques result in 5-10% savings compared to gzip</p>
  </div>
  <div class="page">
    <p>Average JSZap Compression: 10%</p>
    <p>m o</p>
    <p>n k</p>
    <p>e y</p>
    <p>g e</p>
    <p>tD O</p>
    <p>M H</p>
    <p>a sh</p>
    <p>b in</p>
    <p>g 1</p>
    <p>b in</p>
    <p>g m</p>
    <p>a p</p>
    <p>li v</p>
    <p>e m</p>
    <p>sg 1</p>
    <p>b in</p>
    <p>g m</p>
    <p>a p</p>
    <p>fa ce</p>
    <p>b o</p>
    <p>o k</p>
    <p>li v</p>
    <p>e m</p>
    <p>sg 2</p>
    <p>o ff</p>
    <p>ic e</p>
    <p>li v</p>
    <p>e 1J</p>
    <p>S Z</p>
    <p>a p</p>
    <p>C o</p>
    <p>m p</p>
    <p>re ss</p>
    <p>io n</p>
    <p>( g</p>
    <p>zi p</p>
    <p>= 1</p>
    <p>)</p>
    <p>Productions, 26%</p>
    <p>Identifiers, 57%</p>
    <p>Literals, 17%</p>
  </div>
  <div class="page">
    <p>Summary and Conclusions</p>
    <p>JSZap: AST-based compression for JavaScript</p>
    <p>Propose a range of techniques for compressing  Productions  Identifiers  Literals</p>
    <p>Preliminary results are encouraging: 10% savings over gzip</p>
    <p>Future focus</p>
    <p>Latency measurements  Browser integration</p>
  </div>
  <div class="page">
    <p>Wellformedness</p>
    <p>Security (AdSafe)</p>
    <p>AST representation</p>
    <p>Unblocking HTML parser</p>
    <p>Caching and incremental</p>
    <p>updates</p>
    <p>Compression with JSZap</p>
    <p>?</p>
    <p>Questions?</p>
  </div>
</Presentation>
