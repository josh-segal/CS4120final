<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>May, 2003 HotOS-IX 1</p>
    <p>TCP offload is a dumb idea whose time has come</p>
    <p>Jeffrey Mogul JeffMogul@acm.org</p>
    <p>Large Scale Systems Group HP Labs, Palo Alto</p>
  </div>
  <div class="page">
    <p>May, 2003 HotOS-IX 2</p>
    <p>One-slide summary</p>
    <p>What is TCP Offload?  Moving IP and TCP processing to the Network</p>
    <p>Interface (NIC) Why is it a dumb idea?  Fundamental performance issues  Practical deployment issues  Poor justification (wrong applications) Why has its time come?  So we can offload higher-level protocols</p>
  </div>
  <div class="page">
    <p>May, 2003 HotOS-IX 3</p>
    <p>TCP Offload Engines (TOEs)</p>
    <p>TCP IP</p>
    <p>NIC driver</p>
    <p>Sockets</p>
    <p>Ethernet</p>
    <p>Application</p>
    <p>Network IC</p>
    <p>Kernel</p>
    <p>User mode</p>
    <p>TCP</p>
    <p>Sockets</p>
    <p>Ethernet</p>
    <p>Application</p>
    <p>Network IC</p>
    <p>Kernel</p>
    <p>User mode</p>
    <p>IP</p>
    <p>NIC driver becomes</p>
    <p>TOE</p>
  </div>
  <div class="page">
    <p>May, 2003 HotOS-IX 4</p>
    <p>Typical justifications for TCP offload</p>
    <p>Reduction of host CPU cycles for protocol header processing, checksumming</p>
    <p>Fewer CPU interrupts  Fewer bytes copied over the memory bus  Potential to offload expensive features such</p>
    <p>as encryption</p>
  </div>
  <div class="page">
    <p>May, 2003 HotOS-IX 5</p>
    <p>Why TCP offload is dumb: Performance (part 1: technology issues)  TCP/IP headers dont take many CPU cycles</p>
    <p>Cf. Jacobsons Header prediction code  Moores Law works against smart NICs</p>
    <p>Complexity increases time-to-market  CPUs keep getting faster &amp; benefit from large volumes</p>
    <p>TOEs impose complex interfaces  Protocol between TOE &amp; CPU can be worse than TCP  Could require passing more context info</p>
  </div>
  <div class="page">
    <p>May, 2003 HotOS-IX 6</p>
    <p>Why TCP offload is dumb: Performance (part 2: management)  Suboptimal buffer management</p>
    <p>Very hard to avoid buffer copy (esp. on receive)  But buffer copies are the real performance issue</p>
    <p>Connection management overhead  For short connections, overwhelms any savings</p>
    <p>Ditto for event management overhead  Resource management</p>
    <p>Virtual resources (e.g., ports) must be managed  Coordination with host OS adds overhead</p>
  </div>
  <div class="page">
    <p>May, 2003 HotOS-IX 7</p>
    <p>Why TCP offload is dumb: Performance (part 3: alternatives)  Much simpler NIC extensions can be effective  For example:</p>
    <p>TCP checksum offload (can avoid CPU data-touching)  Afterburner (Dalton et al. 1995) for single-copy TCP</p>
    <p>Sometimes the OS implementation just sucks</p>
  </div>
  <div class="page">
    <p>May, 2003 HotOS-IX 8</p>
    <p>Why TCP offload is dumb: Deployment issues (part 1: using TOEs)  Scaling is harder for TOEs than for host CPUs</p>
    <p>Large systems have large buffer pools, routing tables  TOEs reduce allocation flexibility</p>
    <p>Programmable NICs: more vulnerable to hackers?  Programmability is always a potential hole  But: many modern NICs are already programmable</p>
    <p>More system management interfaces to deal with  Or, seams showing between integrated interfaces  TOEs may lack state visibility available in host OS</p>
  </div>
  <div class="page">
    <p>May, 2003 HotOS-IX 9</p>
    <p>Why TCP offload is dumb: Deployment issues (part 2: maintenance)  TOEs likely to have more bugs than simple NICs</p>
    <p>IP/TCP implementations often need fixes/upgrades  Doubles the number of code bases to manage</p>
    <p>More code bases means QA is harder, slower  Problem isolation becomes harder</p>
    <p>Finger-pointing between OS and TOE vendors  Exposes customers to risk of TOE vendor failure</p>
    <p>Lack of support worse for TOEs than for simple NICs</p>
  </div>
  <div class="page">
    <p>May, 2003 HotOS-IX 10</p>
    <p>Why TCP offload is dumb: Mismatched applications  Traditional applications for TCP:</p>
    <p>WAN applications (email, FTP, Web, IM, USENET)  Short connections, and many of them at once  IP/TCP packet processing costs do not dominate</p>
    <p>Problem areas for TCP offload:  High network delay (obviates low-delay NIC tricks)  Lots of connections, lots of connection management  Low ratio of packet processing costs to other costs</p>
    <p>So: traditional TCP apps dont need offload</p>
  </div>
  <div class="page">
    <p>May, 2003 HotOS-IX 11</p>
    <p>Insights</p>
    <p>Sweet spot for TCP offload might be apps with:  Very high bandwidth  Relatively low end-to-end latency network paths  Long connection durations  Relatively few connections</p>
    <p>Typical examples of these might be:  Storage-server access  Graphics  Cluster interconnect</p>
  </div>
  <div class="page">
    <p>May, 2003 HotOS-IX 12</p>
    <p>Network-I/O convergence?</p>
    <p>Promising aspects:  Replace special-purpose hw w/ cheap commodity parts</p>
    <p>1Gbit or 10Gbit Ethernet  Only one fabric to provision, connect, and manage</p>
    <p>More scalable and interoperable  Challenges:</p>
    <p>Data copy costs dominate (busses are too slow)  Zero-copy and single-copy seem too hard to adopt</p>
  </div>
  <div class="page">
    <p>May, 2003 HotOS-IX 13</p>
    <p>Whats so hard about zero-copy TCP?</p>
    <p>On receive: headers interspersed with data  Page-remapping tricks often fail to help</p>
    <p>On transmit: buffer ownership issues  Application cant touch buffer before its ACKed</p>
    <p>Some techniques force new APIs on applications  Changing commercial OS stacks is a nightmare  Lots of people have tried to make this work</p>
    <p>Has anyone really succeeded?</p>
  </div>
  <div class="page">
    <p>May, 2003 HotOS-IX 14</p>
    <p>Side-stepping the problems: RDMA</p>
    <p>Remote Direct Memory Access  New protocol layer between transport and apps</p>
    <p>App @ host X registers buffer regions w/ local RDMA  Region IDs are sent (somehow) to App @ host Y  App @ Y reads/writes data buffers in Xs memory  RDMA layer knows what is data, what is header</p>
    <p>Intended for hardware implementation (RNIC)  Allowing zero-copy for many (not all) applications</p>
  </div>
  <div class="page">
    <p>May, 2003 HotOS-IX 15</p>
    <p>Aha!: RDMA requires transport offload</p>
    <p>Must offload transport in order to offload RDMA  Transport could be (e.g.) TCP+MPA shim, or SCTP</p>
    <p>RDMA well matched to storage access  Fits easily below NFSv4, DAFS, iSCSI</p>
    <p>The right characteristics for transport offload  Data-center networks, long connections</p>
    <p>Simplifies many problems w/generic TCP offload  Explicit protocol-visible separation of data &amp; headers</p>
  </div>
  <div class="page">
    <p>May, 2003 HotOS-IX 16</p>
    <p>RDMA NICs (RNICs)</p>
    <p>TCP IP</p>
    <p>NIC driver</p>
    <p>NFS or iSCSI</p>
    <p>Ethernet</p>
    <p>Application</p>
    <p>Network IC</p>
    <p>Kernel</p>
    <p>User mode</p>
    <p>TCP</p>
    <p>File I/O API</p>
    <p>Ethernet</p>
    <p>Application</p>
    <p>Network IC</p>
    <p>Kernel</p>
    <p>User mode</p>
    <p>IP</p>
    <p>NFS or iSCSI becomes</p>
    <p>RNIC</p>
    <p>File I/O API</p>
    <p>RDMA</p>
    <p>RNIC driver</p>
  </div>
  <div class="page">
    <p>May, 2003 HotOS-IX 17</p>
    <p>Why should we believe that this will fly?</p>
    <p>NIC vendors want to ship RNICs in volume  They need to raise the price point over current NICs  RDMA allows generic solution (vs. iSCSI NICs)  InfiniBand isnt a high-volume market (yet?)</p>
    <p>System, OS, and storage vendors want it  Cheaper hardware, simpler data centers  Willing to deal with a new protocol layer</p>
    <p>Upper-Level Protocols (ULPs) ready &amp; waiting(?)  NFSv4, DAFS, iSCSI extensions for RDMA (iSER)</p>
  </div>
  <div class="page">
    <p>May, 2003 HotOS-IX 18</p>
    <p>What could go wrong?</p>
    <p>Many problems of TOEs still apply  E.g., multiple code bases, resource allocation</p>
    <p>So far, the benefits have been elusive  cf. Sarkar et al. 2003, Shivam &amp; Chase 2003  May need well-integrated NIC + 10 Gbit LANs</p>
    <p>Extension to user-level networking is tricky  New API; transmit buffer-pinning still a problem</p>
    <p>Standardization not quite done  SCTP vs. TCP; MPA concerns; security questions</p>
  </div>
  <div class="page">
    <p>May, 2003 HotOS-IX 19</p>
    <p>Summary</p>
    <p>Generic TCP offload seems like a bad idea  solution in search of a problem  Cure is usually worse than the disease</p>
    <p>RDMA offload justifies transport offload  OK, jury is still out on that</p>
    <p>New networking model might change OS APIs  Are read() and write() really the only way to go?</p>
    <p>RDMA requires OS thinking in new places</p>
  </div>
  <div class="page">
    <p>May, 2003 HotOS-IX 20</p>
    <p>Odds and ends</p>
    <p>SCTP: an alternative to TCP  Doesnt require MPA shim to get message boundaries  Not ready to ship in silicon, yet</p>
    <p>RDMA or DDP (Direct Data Placement)?  DDP: remote-write only; should be simpler  Are remote reads &amp; other RDMA verbs necessary?</p>
    <p>Security: not a simple issue  Implementations of a secure protocol may have bugs  Consequences of exploited bug: free access to memory</p>
  </div>
</Presentation>
