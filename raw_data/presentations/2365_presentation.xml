<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Rump File Systems Kernel Code Reborn</p>
    <p>Antti Kantee pooka@cs.hut.fi</p>
    <p>Helsinki University of Technology</p>
    <p>USENIX Annual Technical Conference, San Diego, USA</p>
    <p>June 2009</p>
  </div>
  <div class="page">
    <p>Introduction</p>
    <p>kernel / userspace dichotomy  interfaces dictate environment</p>
    <p>make kernel file systems run in userspace in a complete and maintainable way  full stack, no code forks or #ifdef</p>
    <p>file system is a protocol translator  read(off,size,n) =&gt; blocks 001,476,711,999</p>
  </div>
  <div class="page">
    <p>Implementation status</p>
    <p>NetBSD kernel file system code runs unmodified in a userspace process</p>
    <p>total of 13 kernel file systems  cd9660, efs, ext2fs, fat, ffs, hfs+, lfs, nfs, ntfs,</p>
    <p>puffs, sysvbfs, tmpfs, udf  disk, memory, network, other</p>
    <p>implementation shipped as source and binary with NetBSD 5.0 and later</p>
  </div>
  <div class="page">
    <p>Terminology</p>
    <p>rump: runnable userspace meta program 1) userspace program using kernel code 2) framework which enables above</p>
    <p>rump kernel: part of rump with kernel code</p>
    <p>host (OS): system running the rump(1)</p>
  </div>
  <div class="page">
    <p>Talk outline</p>
    <p>motivation use cases implementation evaluation</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>original motivation: kernel development  additional benefits:</p>
    <p>security  code reuse in userspace tools  kernel code reuse on other systems</p>
  </div>
  <div class="page">
    <p>Contrasts</p>
    <p>against another interface</p>
  </div>
  <div class="page">
    <p>Talk outline</p>
    <p>motivation use cases implementation evaluation</p>
  </div>
  <div class="page">
    <p>Two modes mounted server (transparent, privileges)</p>
    <p>application library (explicit, unpriviledged)</p>
    <p>application</p>
    <p>rump</p>
    <p>kernel fs</p>
    <p>application</p>
    <p>rump</p>
    <p>kernel fs</p>
    <p>userspace file server</p>
    <p>userspace file system</p>
    <p>syscall</p>
    <p>process 1 process 2 process 1</p>
    <p>user</p>
    <p>kernel</p>
  </div>
  <div class="page">
    <p>Security</p>
    <p>common scenario: you get a USB stick from a 3rd party</p>
    <p>plug stick into your system and attempt to either read or write files</p>
    <p>suitably corrupt file system: crash  or worse</p>
    <p>mount as rump file system: isolate damage to a process</p>
  </div>
  <div class="page">
    <p>Security</p>
    <p>common scenario: you get a USB stick from a 3rd party</p>
    <p>plug stick into your system and attempt to either read or write files</p>
    <p>suitably corrupt file system: crash  or worse</p>
    <p>mount as rump file system: isolate damage to a process</p>
    <p>kernel</p>
    <p>file server, kernel fs</p>
    <p>X</p>
  </div>
  <div class="page">
    <p>Development &amp; Debugging</p>
    <p>kernel hacking is ... convoluted  kernel hackers already know this</p>
    <p>rump allows more details from non-expert user submitting bug report  very important in an open source context  users are rarely willing or in a situation to</p>
    <p>setup a kernel development environment</p>
  </div>
  <div class="page">
    <p>Tools: fs-utils</p>
    <p>mtools, ntfsprogs, ltools, etc.  self-contained apps to access fs in userspace  different syntax  file system driver reimplementation</p>
    <p>fs-utils (Ysmal 2008)  standard POSIX utilities, rump fs driver  examples: fsu_ls /dev/sd0e -ltr  fsu_mkdir fs.img -p /my/hier</p>
  </div>
  <div class="page">
    <p>Tools: makefs</p>
    <p>problem: create an installation image  crossbuild =&gt; cannot use in-kernel fs &amp; mount</p>
    <p>solution: makefs (Mewburn 2001)  application which creates a file system image</p>
    <p>from a directory tree  modified copy of the FFS driver, &gt;100h effort</p>
    <p>rump makefs uses fs-utils  more supported file systems, much less effort</p>
  </div>
  <div class="page">
    <p>Talk outline</p>
    <p>motivation use cases implementation evaluation</p>
  </div>
  <div class="page">
    <p>Kernel Code</p>
    <p>almost all kernel code can run anywhere  set of interfaces code depends on</p>
    <p>determines default environment  malloc() vs. kmem_alloc()</p>
    <p>dependees have own set of dependencies  need to find dependency closure starting</p>
    <p>from file system code</p>
  </div>
  <div class="page">
    <p>Implementation Strategy</p>
    <p>use as much kernel code directly as is practical</p>
    <p>use high-level services provided by host  threading, synchronization, sockets, etc.</p>
    <p>alter system structure: regroup source modules to minimize dependency hazards  but avoid getting yelled at</p>
  </div>
  <div class="page">
    <p>Finding Closure</p>
    <p>file system</p>
    <p>vfs routines</p>
    <p>memory allocator atomic ops</p>
    <p>thread support</p>
    <p>virtual memory</p>
    <p>locking</p>
    <p>name cache</p>
    <p>disk driver</p>
    <p>scheduling</p>
    <p>buffer cache</p>
    <p>string manipulation</p>
    <p>host service</p>
    <p>reimplemented</p>
    <p>pseudo file systems</p>
  </div>
  <div class="page">
    <p>Talk outline</p>
    <p>motivation use cases implementation evaluation</p>
  </div>
  <div class="page">
    <p>Maintenance</p>
    <p>entire kernel</p>
    <p>rump</p>
    <p>only rump</p>
    <p>rump breakage 0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000</p>
    <p>commits</p>
    <p>implementation duplicates interfaces and relies on module boundaries</p>
    <p>how often does it break?</p>
    <p>repository analysis Aug 2007  Dec 2008</p>
  </div>
  <div class="page">
    <p>Portability C is portable userspace programs are portable  NetBSD and Linux fs, mix&amp;match  there are details to take into account</p>
    <p>data types need to match</p>
    <p>rump fs, NetBSD x+1, 64bit time_t</p>
    <p>userland, OS ... y,</p>
    <p>foo(time_t *)</p>
  </div>
  <div class="page">
    <p>Performance</p>
    <p>current approach: enhance performance only inside rump  do not modify the host system to provide non</p>
    <p>standard interfaces  for ultraperformance, use in-kernel mount  common rump performance for FFS is 5% of kernel mount performance  depends on backend</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>possible to run kernel fs code of a general purpose OS in userspace  alter system structure</p>
    <p>benefits  avoid reimplementations  security  and kernel development</p>
    <p>implement it on $YourOS ;-)</p>
  </div>
  <div class="page">
    <p>Try it out!</p>
    <p>go to http://www.NetBSD.org/  download 5.0 or -current &amp; install</p>
    <p>or use LiveCD  man rump  submit bug reports</p>
  </div>
  <div class="page">
    <p>Try it out!</p>
    <p>go to http://www.NetBSD.org/  download 5.0 or -current &amp; install</p>
    <p>or use LiveCD  man rump  submit bug reports</p>
    <p>Questions?</p>
  </div>
</Presentation>
