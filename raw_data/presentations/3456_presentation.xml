<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>HeapHopper Bringing Bounded Model Checking to Heap Implementation</p>
    <p>Security Moritz Eckert* , Antonio Bianchi*, Ruoyu Wang*,</p>
    <p>Yan Shoshitaishvili, Christopher Kruegel*, and Giovanni Vigna*</p>
    <p>*University of California, Santa Barbara Arizona State University The University of Iowa</p>
  </div>
  <div class="page">
    <p>Poison NULL Byte Attack  Complex attacking-technique discovered by Chris</p>
    <p>Evans</p>
    <p>Only needs an overflow of a single NULL byte</p>
    <p>Leverages that to a full overlapping chunk</p>
    <p>Attacker gains full control over chunk and</p>
    <p>metadata</p>
    <p>A patch was introduced by Chris Evans himself:</p>
    <p>Did we finally nail off-by-one NULL byte overwrites</p>
    <p>in the glibc heap? Only time will tell!</p>
  </div>
  <div class="page">
    <p>Poison NULL Byte Attack  The answer is No.</p>
    <p>After the usual long proposal phase the</p>
    <p>patch was considered being good and</p>
    <p>finally merged</p>
    <p>Within days someone found a bypass</p>
  </div>
  <div class="page">
    <p>Motivation  Manually managing dynamic memory is hard  Bugs are common</p>
    <p>Metadata corruption is a valuable target for attackers</p>
    <p>Checks are introduced in a nonsystematic way</p>
  </div>
  <div class="page">
    <p>HeapHopper</p>
  </div>
  <div class="page">
    <p>Heap Interaction Models</p>
  </div>
  <div class="page">
    <p>Heap Interaction Models</p>
  </div>
  <div class="page">
    <p>Model</p>
    <p>Heap-state</p>
    <p>Mapped memory Allocated chunks Freed chunks ...</p>
    <p>New Heap-state</p>
    <p>Mapped memory Allocated chunks Freed chunks ...</p>
    <p>Transactions</p>
    <p>Malloc Free Overflow ...</p>
  </div>
  <div class="page">
    <p>Model Transactions</p>
    <p>Malloc Free Overflow ...</p>
  </div>
  <div class="page">
    <p>Transactions  Currently supported transactions</p>
    <p>Usages</p>
    <p>Malloc</p>
    <p>Free</p>
    <p>Miss-Usages</p>
    <p>Overflow</p>
    <p>Use-After-Free (UAF)</p>
    <p>Double Free</p>
    <p>Fake Free</p>
  </div>
  <div class="page">
    <p>Malloc (M)</p>
    <p>Symbolic value: 20 or 200 or 2000</p>
    <p>Size parameter</p>
    <p>malloc</p>
    <p>Re tu</p>
    <p>rn s</p>
    <p>if size &lt; 100: ...</p>
    <p>if size &lt; 500: ...</p>
    <p>Constrains</p>
    <p>Allocated chunk with symbolic attributes</p>
    <p>Addr: x Size: yMetadata</p>
    <p>Heap state</p>
    <p>M odifies</p>
  </div>
  <div class="page">
    <p>Use-After-Free (UAF)</p>
    <p>UAF</p>
    <p>Freed chunk</p>
    <p>Addr: x Size: yMetadata</p>
    <p>Symbolic data</p>
    <p>Addr: x Size: ySymbolic</p>
    <p>Data</p>
    <p>Potential metadata overwritten with symbolic bytes</p>
    <p>Heap state</p>
    <p>Modifies</p>
  </div>
  <div class="page">
    <p>Interaction Models  All permutations of Transactions bounded by a</p>
    <p>maximum depth</p>
    <p>Filtered with a set of rules  Consider semantics</p>
    <p>Existence of at least one malicious transactions</p>
    <p>Transform to source code  Placeholders for the symbolic memory</p>
    <p>Compiled to binaries</p>
    <p>Transactions</p>
    <p>Permutation</p>
    <p>Source Code</p>
    <p>Binary</p>
  </div>
  <div class="page">
    <p>Model Checking</p>
  </div>
  <div class="page">
    <p>Model Checking</p>
  </div>
  <div class="page">
    <p>Symbolic Execution</p>
    <p>Executing the library code</p>
    <p>Emulating system calls such as mmap, brk</p>
    <p>Using Depth First Search</p>
    <p>angr</p>
  </div>
  <div class="page">
    <p>Identifying Security Violations  Checking for one of the following states</p>
    <p>Overlapping Allocation (OA)</p>
    <p>Non-Heap Allocation (NHA)</p>
    <p>Arbitrary Write (AW) / Arbitrary Write Constraint (AWC)</p>
    <p>Memory write issued in allocator code with a symbolic address as the destination</p>
    <p>Representing a attacker controlled write</p>
  </div>
  <div class="page">
    <p>PoC Generation</p>
  </div>
  <div class="page">
    <p>PoC Generation</p>
  </div>
  <div class="page">
    <p>PoC Generation int main(void) { // Allocation ctrl_data_0.global_var = malloc( 0x80); ctrl_data_0.global_var[0] = &amp;write_target; ctrl_data_0.global_var[1] = &amp;write_target; ctrl_data_0.global_var[2] = 0x0; ctrl_data_0.global_var[3] = 0x0;</p>
    <p>...</p>
    <p>// VULN: Overflow offset = mem2chunk_offset; (ctrl_data_1.global_var-offset)[0] = 0x90; (ctrl_data_1.global_var-offset+0x8)[0] = 0x90; write_target[0] = 0x0; write_target[1] = 0x0; write_target[2] = ctrl_data_0.global_var + 8; write_target[3] = ctrl_data_0.global_var + 0; free(ctrl_data_1.global_var); }</p>
    <p>Symbolic allocation sizes</p>
    <p>Symbolic memory content</p>
    <p>Symbolic overflow data</p>
  </div>
  <div class="page">
    <p>HeapHopper</p>
  </div>
  <div class="page">
    <p>Limitations</p>
    <p>Bounded by depth when creating permutations</p>
    <p>Bounded by memory</p>
    <p>Bounded by time</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
  </div>
  <div class="page">
    <p>Allocator Comparison</p>
    <p>Overflow (O), Free (F), Use-After-Free (UAF), Double Free (DF), Fake Free (FF)</p>
    <p>Allocator OA NHA AWC AW</p>
    <p>dlmalloc 2.7.2 (M,F,O): M-M-M-F-O-M (M,F,UAF): M-M-M-F-UAF-M-M</p>
    <p>(M,FF): FF-M (M,F,O): M-M-O-F-M (M,F,UAF): M-M-F-UAF-M-M</p>
    <p>(M,F,FF): M-FF-F (M,F,O): M-M-O-F (M,F,UAF): M-M-F-UAF-M</p>
    <p>dlmalloc 2.8.6 (M,F,O): M-M-M-F-O-M (M,F,UAF): M-M-M-F-UAF-M-M</p>
    <p>(M,F,O): M-M-M-F-O-O-F</p>
    <p>musl 1.1.9 (M,F,O): M-M-M-F-O-M (M,F,UAF): M-M-M-F-UAF-M-M</p>
    <p>(M,FF): FF-M (M,F,UAF): M-M-F-UAF-M-M</p>
    <p>(M,F,FF): M-FF-F (M,F,UAF): M-M-F-UAF-M (M,F,FF): M-M-F-FF-M-M</p>
    <p>ptmalloc 2.23 (M,F,O): M-M-M-F-O-M (M,F,UAF): M-M-M-F-UAF-M-M</p>
    <p>(M,FF): FF-M (M,F,O): M-M-M-O-F-M (M,F,UAF): M-M-F-UAF-M-M</p>
    <p>(M-F-FF): M-FF-F (M,F,O): M-M-O-F</p>
    <p>(M,F,UAF): M-M-F-UAF-M</p>
    <p>ptmalloc 2.26 (M,F,O): MM-O-F-M (M,F,UAF): M-M-M-F-UAF-M-M</p>
    <p>(M,FF): FF-M (M,F,UAF): M-M-F-UAF-M-M</p>
    <p>(M,F,UAF): M-M-F-UAF-M (M-F-FF): M-FF-F</p>
  </div>
  <div class="page">
    <p>Allocator Comparison</p>
    <p>Overflow (O), Free (F), Use-After-Free (UAF), Double Free (DF), Fake Free (FF)</p>
    <p>Allocator OA NHA AWC AW</p>
    <p>dlmalloc 2.7.2 (M,F,O): M-M-M-F-O-M (M,F,UAF): M-M-M-F-UAF-M-M</p>
    <p>(M,FF): FF-M (M,F,O): M-M-O-F-M (M,F,UAF): M-M-F-UAF-M-M</p>
    <p>(M,F,FF): M-FF-F (M,F,O): M-M-O-F (M,F,UAF): M-M-F-UAF-M</p>
    <p>dlmalloc 2.8.6 (M,F,O): M-M-M-F-O-M (M,F,UAF): M-M-M-F-UAF-M-M</p>
    <p>(M,F,O): M-M-M-F-O-O-F</p>
    <p>musl 1.1.9 (M,F,O): M-M-M-F-O-M (M,F,UAF): M-M-M-F-UAF-M-M</p>
    <p>(M,FF): FF-M (M,F,UAF): M-M-F-UAF-M-M</p>
    <p>(M,F,FF): M-FF-F (M,F,UAF): M-M-F-UAF-M (M,F,FF): M-M-F-FF-M-M</p>
    <p>ptmalloc 2.23 (M,F,O): M-M-M-F-O-M (M,F,UAF): M-M-M-F-UAF-M-M</p>
    <p>(M,FF): FF-M (M,F,O): M-M-M-O-F-M (M,F,UAF): M-M-F-UAF-M-M</p>
    <p>(M-F-FF): M-FF-F (M,F,O): M-M-O-F</p>
    <p>(M,F,UAF): M-M-F-UAF-M</p>
    <p>ptmalloc 2.26 (M,F,O): MM-O-F-M (M,F,UAF): M-M-M-F-UAF-M-M</p>
    <p>(M,FF): FF-M (M,F,UAF): M-M-F-UAF-M-M</p>
    <p>(M,F,UAF): M-M-F-UAF-M (M-F-FF): M-FF-F</p>
  </div>
  <div class="page">
    <p>Poison NULL Byte Attack</p>
    <p>Challenging because of high depth</p>
    <p>Verified that HeapHopper finds attack</p>
    <p>Verified that HeapHopper finds patch bypass</p>
    <p>Developed a new patch and verified that HeapHopper does not find a bypass</p>
    <p>We are trying to upstream this patch</p>
  </div>
  <div class="page">
    <p>Questions?</p>
    <p>https://github.com/angr/heaphopper</p>
  </div>
</Presentation>
