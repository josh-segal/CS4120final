<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>The Case For System Testing with Swift Hierarchical VM Fork</p>
    <p>Junji Zhi, Sahil Suneja and Eyal de Lara Department of Computer Science</p>
    <p>University of Toronto</p>
  </div>
  <div class="page">
    <p>Introduction</p>
    <p>Testing large systems is often difficult</p>
    <p>System configuration takes effort</p>
    <p>Executing tests consumes resources and time</p>
  </div>
  <div class="page">
    <p>System Testing</p>
    <p>Test #1 Specification</p>
    <p>== ?</p>
    <p>Step #1</p>
    <p>Step #2</p>
    <p>Step #3</p>
  </div>
  <div class="page">
    <p>System Testing</p>
    <p>Test #2 Specification</p>
    <p>== ?</p>
    <p>Step #1</p>
    <p>Step #2</p>
    <p>Step #3</p>
    <p>Clean up</p>
  </div>
  <div class="page">
    <p>Multiple test cases</p>
    <p>Test #1 Test #2 Test #3 Test #4</p>
    <p>.Sequential, One machine</p>
    <p>.Simple parallel, multiple VMs</p>
    <p>VM #1 VM #2 VM #3 VM #4</p>
  </div>
  <div class="page">
    <p>Observations</p>
    <p>Many commonalities or overlapping steps exist among tests</p>
    <p>Test cases share the same code base.</p>
    <p>Common Steps are executed in each VM!</p>
    <p>Simple parallel, multiple VMs</p>
  </div>
  <div class="page">
    <p>VM Fork</p>
    <p>Hypervisor (local)</p>
    <p>VM #1 VM #2 (Running)</p>
    <p>Hypervisor (Remote)</p>
    <p>VM #3</p>
    <p>VM #2 (Clone)</p>
    <p>VM #2 (Clone)</p>
    <p>Fork</p>
    <p>Fork</p>
  </div>
  <div class="page">
    <p>Test Execution with VM Fork</p>
    <p>Reuse common steps  Share memory and disk state</p>
    <p>Hypervisor</p>
  </div>
  <div class="page">
    <p>Case Study: Testing MySQL</p>
    <p>MySQL v5.5 large_tests suite</p>
    <p>TC# Step 1 Step 2 Step 3</p>
    <p>*Construct: construct a new table and populate rows</p>
  </div>
  <div class="page">
    <p>MySQL Testing with VM Fork</p>
    <p>Config</p>
    <p>Time Fork Fork</p>
    <p>Tester VM</p>
    <p>TC#1 done</p>
    <p>TC#2 done</p>
    <p>TC#3 done</p>
    <p>TC#4 done</p>
    <p>MySQL</p>
  </div>
  <div class="page">
    <p>Experiment Setup</p>
    <p>All experiments on server x86 12GB RAM  64-bit Ubuntu 12.04 (Kernel v3.2.0)  Mysql v5.5  KVM v3.8  QEMU v1.0</p>
    <p>No current hierarchical fork implementation  Emulated VM fork with QEMU snapshot  Issues: slow</p>
  </div>
  <div class="page">
    <p>Results: Execution Time</p>
    <p>Seq.</p>
    <p>TC#1 TC#2 TC#3 TC#4</p>
    <p>TC#1</p>
    <p>TC#2</p>
    <p>TC#3</p>
    <p>TC#4</p>
    <p>TC#1</p>
    <p>TC#2</p>
    <p>TC#3</p>
    <p>TC#4</p>
    <p>boot from snapshot</p>
    <p>Sequential &amp;&amp; Simple Parallel Total CPU cycles: 971s</p>
    <p>With Emulated VM Fork Total CPU cycles: 690s</p>
  </div>
  <div class="page">
    <p>Results: Space Usage</p>
    <p>1 Snapshot &lt; 5% Base VM  70% space saving</p>
    <p>VM#1 VM#2 VM#3 VM#4 Base VM S1 S2 S3 S4</p>
    <p>S =&gt; Snapshot</p>
    <p>Simple Parallel Emulated VM Fork 13</p>
  </div>
  <div class="page">
    <p>Challenges</p>
    <p>Fast hierarchical VM fork implementation  When to fork  Where to fork  Transparency</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>Leverage hierarchical VM fork to optimize system testing</p>
    <p>Advantages  Reuse common steps among TCs  Saving memory and disk space</p>
    <p>30% reduction in VM runtime  70+% Space Savings</p>
  </div>
  <div class="page">
    <p>Thank you! &amp;</p>
    <p>Questions?</p>
  </div>
  <div class="page">
    <p>Software Testing on the Cloud</p>
    <p>Cloud creates new opportunities</p>
    <p>Each VM encapsulates an entire test environment</p>
    <p>VM can run in parallel, isolated from each other</p>
  </div>
  <div class="page">
    <p>Case Study: Testing MySQL</p>
    <p>Structured automated test scripts</p>
  </div>
  <div class="page">
    <p>Testing on the cloud</p>
    <p>Incki et al. A Survey of Software Testing in the Cloud, ICSSRC12</p>
  </div>
</Presentation>
