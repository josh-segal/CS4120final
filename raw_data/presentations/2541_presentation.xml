<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Chatty Tenants and the Cloud Network Sharing Problem</p>
    <p>Hitesh Ballani, Keon Jang, Thomas Karagiannis</p>
    <p>Changhoon Kim, Dinan Gunawardena, Greg OShea</p>
    <p>MSR Cambridge, Windows Azure</p>
  </div>
  <div class="page">
    <p>This talk is about . . .</p>
    <p>How to share the network in multi-tenant datacenters?</p>
    <p>Multi-tenant datacenters  Public cloud datacenters  Windows Azure, Amazon EC2, Rackspace,</p>
    <p>Tenants: users renting virtual machines</p>
    <p>Private cloud datacenters</p>
  </div>
  <div class="page">
    <p>A use-case of cloud datacenters</p>
    <p>Cloud Provider</p>
    <p>Physical HostPhysical Host</p>
    <p>Storage Services</p>
    <p>Map reduce</p>
    <p>Intra-tenant traffic</p>
    <p>Network is shared!</p>
    <p>Inter-tenant traffic</p>
  </div>
  <div class="page">
    <p>Requirements for network sharing</p>
    <p>Tenants want predictable performance / cost</p>
    <p>Not all flows are equal: some tenants pay more</p>
    <p>Req 1. Minimum bandwidth guarantee</p>
    <p>Req 2. Proportionality</p>
    <p>Utilize spare resources as much as possible  Req 3. High utilization</p>
    <p>[ FairCloud]</p>
  </div>
  <div class="page">
    <p>Existing solutions for network sharing</p>
    <p>Today Seawall FairCloud</p>
    <p>(PS-L)</p>
    <p>Min-guarantee</p>
    <p>Oktopus FairCloud</p>
    <p>(PS-P)</p>
    <p>High utilization</p>
    <p>Proportionality</p>
    <p>With Inter-tenant traffic</p>
    <p>Harder</p>
    <p>Problematic</p>
    <p>Prior work focuses on intra tenant traffic</p>
  </div>
  <div class="page">
    <p>Chatty tenants in the cloud</p>
    <p>File Storage Web</p>
    <p>FrontendSQL DB</p>
    <p>Cache Firewall Wan</p>
    <p>Optimizer</p>
    <p>Third Party Services in Marketplace</p>
    <p>Provider Services A tenants own</p>
    <p>Typical cloud applications have many dependency</p>
  </div>
  <div class="page">
    <p>Prevalence of inter-tenant traffic</p>
    <p>Inter-tenant traffic accounts for 10-35% of traffic!</p>
    <p>Measurement from 8 datacenters of a public cloud service provider</p>
    <p>In te</p>
    <p>rte</p>
    <p>n a n</p>
    <p>t tr</p>
    <p>a ff</p>
    <p>ic (</p>
    <p>% )</p>
    <p>Datacenter</p>
  </div>
  <div class="page">
    <p>Min bandwidth guarantee is harder</p>
    <p>Inter-tenant traffic leads to richer communication pattern and makes minimum bandwidth guarantee harder!</p>
    <p>Intra-tenant traffic</p>
    <p>Inter-tenant traffic</p>
    <p>On what links bandwidth guarantee is required?</p>
    <p>Physical HostPhysical Host</p>
  </div>
  <div class="page">
    <p>How to define proportionality?</p>
    <p>P and Q are paying same amount</p>
    <p>p r1</p>
    <p>q</p>
    <p>r2</p>
    <p>r4</p>
    <p>r3</p>
    <p>Allocation P (Mbps) Q (Mbps)</p>
    <p>Per flow 250 750</p>
    <p>Seawall 250 750</p>
    <p>FairCloud 333 666</p>
    <p>Q: Whose payment should dictate the flow bandwidth?</p>
  </div>
  <div class="page">
    <p>Hadrian Overview</p>
    <p>What semantics should we provide to tenants?  Virtual network abstraction</p>
    <p>How to allocate bandwidth?  Hose-compliant bandwidth allocation</p>
    <p>How to place virtual machines?  Greedy heuristic that guarantees min bandwidth</p>
    <p>This talk</p>
  </div>
  <div class="page">
    <p>Hadrian Overview</p>
    <p>What semantics should we provide to tenants?  Virtual network abstraction</p>
    <p>How to allocate bandwidth?  Hose-compliant bandwidth allocation</p>
    <p>How to place virtual machines?  Greedy heuristic that guarantees min bandwidth</p>
  </div>
  <div class="page">
    <p>State of the art: Hose-model</p>
    <p>VM 1</p>
    <p>VM 2</p>
    <p>VM p</p>
    <p>Virtual Switch</p>
    <p>Tenant P VMs</p>
    <p>Tenant Request: &lt;N, B&gt;</p>
    <p>BP</p>
    <p>Each VM is guaranteed to send/receive at minimum of B bps</p>
    <p>Minimum bandwidth guarantee  High-utilization</p>
    <p>BPBP</p>
    <p>B bps</p>
  </div>
  <div class="page">
    <p>State of the art: Hose-model</p>
    <p>VM 1</p>
    <p>VM 2</p>
    <p>VM p</p>
    <p>VM</p>
    <p>q</p>
    <p>VM 1</p>
    <p>VM 2</p>
    <p>VM r</p>
    <p>BQ BR</p>
    <p>Virtual Switch Virtual Switch</p>
    <p>Tenant P VMs Tenant Q VMs Tenant R VMs</p>
    <p>BP</p>
    <p>Virtual Switch</p>
    <p>Tenant Request: &lt;N, B&gt; Each VM is guaranteed to send/receive at minimum of B bps</p>
    <p>BPBP BQ BQ BRBR</p>
  </div>
  <div class="page">
    <p>Multi-hose model</p>
    <p>VM 1</p>
    <p>VM 2</p>
    <p>VM p</p>
    <p>VM</p>
    <p>q</p>
    <p>VM 1</p>
    <p>VM 2</p>
    <p>VM r</p>
    <p>BQ BR</p>
    <p>Switch Switch Switch</p>
    <p>Tenant P VMs Tenant Q VMs Tenant R VMs</p>
    <p>BP</p>
    <p>Multi Hose Switch</p>
    <p>Tenant Request: &lt;N, B&gt;</p>
    <p>VMs in different tenants communicates with each other at a rate of min(Bp, Bq)</p>
    <p>Allows Inter-tenant communication 14</p>
    <p>BPBP BQ BQ BRBRAssumes same inter- and intra- tenant bandwidth</p>
  </div>
  <div class="page">
    <p>Hierarchical hose model</p>
    <p>Virtual Inter-tenant Switch</p>
    <p>VM 1</p>
    <p>VM 2</p>
    <p>VM p</p>
    <p>VM</p>
    <p>q</p>
    <p>VM 1</p>
    <p>VM 2</p>
    <p>VM r</p>
    <p>BQ BR</p>
    <p>Virtual Switch Virtual Switch Virtual Switch</p>
    <p>Tenant P VMs Tenant Q VMs Tenant R VMs</p>
    <p>BP</p>
    <p>Tenant Request: &lt;N, B, Binter&gt;</p>
    <p>BQ interBP</p>
    <p>inter BR inter</p>
    <p>Separate inter-tenant bandwidth requirement 15</p>
    <p>BPBP BQ BQ BRBR</p>
    <p>Assumes all-to-all communication</p>
  </div>
  <div class="page">
    <p>Communication dependency</p>
    <p>Tenant Request: &lt;N, B, Binter, list of dependent tenants&gt;</p>
    <p>Q:How about service tenants (e.g., storage )?</p>
    <p>Reduces possible communication patterns</p>
    <p>Helps place dependent tenants closer</p>
    <p>Tenant Request: &lt;N, B, Binter, *&gt;</p>
    <p>Most tenants communicate with only few other tenants</p>
  </div>
  <div class="page">
    <p>Hadrian Overview</p>
    <p>What semantics should we provide to tenants?  Virtual network abstraction</p>
    <p>How to allocate bandwidth?  Hose-compliant bandwidth allocation</p>
    <p>How to place virtual machines?  Greedy heuristic that guarantees min bandwidth</p>
  </div>
  <div class="page">
    <p>Hose-compliant bandwidth allocation</p>
    <p>VM p 100Mbps</p>
    <p>VM q 200Mbps</p>
    <p>Whose payment should dictate the bandwidth of the flow?</p>
    <p>Our approach : take minimum from two sides</p>
    <p>Min</p>
  </div>
  <div class="page">
    <p>Hose-compliant bandwidth allocation</p>
    <p>= (</p>
    <p>,</p>
    <p>)</p>
    <p>Weighted fair-share at the bottleneck</p>
    <p>Np flows Nq flows</p>
    <p>VM p Bp</p>
    <p>VM q Bq</p>
    <p>?</p>
  </div>
  <div class="page">
    <p>Upper bound proportionality</p>
    <p>VM p 100Mbps</p>
    <p>Max aggregate weight</p>
    <p>for ps flow = 100</p>
    <p>Upper bound of total weight of VMs flows is proportional to the VMs payment</p>
    <p>Min (20, ?) x 5  100</p>
  </div>
  <div class="page">
    <p>Minimum bandwidth guarantee</p>
    <p>Total weight for all flows of a given VM is bounded</p>
    <p>Placement algorithm enforces</p>
    <p>on any link in the network</p>
    <p>Min bandwidth guarantee</p>
    <p>The verification can be formulated as max flow network problem</p>
    <p>p r1</p>
    <p>q</p>
    <p>r2</p>
    <p>rk</p>
    <p>N flows</p>
    <p>Total weight  1000</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Synthetic cloud workload benchmark</p>
    <p>Tenants submit requests for VMs and execute jobs</p>
    <p>A job has</p>
    <p>CPU Processing, Inter-tenant traffic, Intra-tenant traffic</p>
    <p>Inter-tenant traffic ratio: 10 - 40%</p>
    <p>Fraction of tenant w/ inter-tenant : 20%</p>
    <p>Environments</p>
    <p>Testbed: 16 end hosts</p>
    <p>Large scale simulation: 16,000 end hosts</p>
  </div>
  <div class="page">
    <p>Evaluation criteria</p>
    <p>Network sharing requirements</p>
    <p>Minimum bandwidth guarantee</p>
    <p>Upper-bound proportionality</p>
    <p>High-utilization</p>
    <p>Benefits of Hadrian  Metric: acceptance ratio</p>
    <p>Comparison with</p>
    <p>Baseline: per flow sharing</p>
    <p>Existing approaches: Oktopus , FairCloud</p>
  </div>
  <div class="page">
    <p>Job completion time</p>
    <p>Utilize spare resources</p>
    <p>Always finishes in time</p>
    <p>Relative job completion time against estimate</p>
    <p>Estimate = amount of data / bandwidth requirement Minimum bandwidth guarantee  High utilization</p>
  </div>
  <div class="page">
    <p>Bandwidth allocation</p>
    <p>T h</p>
    <p>ro u</p>
    <p>g h</p>
    <p>p u</p>
    <p>t fo</p>
    <p>r V</p>
    <p>M p</p>
    <p>( M</p>
    <p>b p</p>
    <p>s)</p>
    <p>Number of flows for VM q</p>
    <p>Per flow</p>
    <p>FairCloud(PS-L)</p>
    <p>Hose Compliantp r1</p>
    <p>q</p>
    <p>r2</p>
    <p>rk</p>
    <p>N flows</p>
    <p>Upper bound proportionality 25</p>
  </div>
  <div class="page">
    <p>Baseline Hadrian</p>
    <p>Simulation</p>
    <p>Testbed</p>
    <p>Request acceptance ratio  testbed</p>
    <p>A c c e p ta</p>
    <p>n c e R</p>
    <p>a ti</p>
    <p>o (</p>
    <p>% )</p>
    <p>Similar benefits in large scale simulations Testbed and Simulation shows consistent result</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>We show that Inter-tenant traffic is prevalent</p>
    <p>10~35% from a major public cloud provider</p>
    <p>We propose Hadrian</p>
    <p>Virtual network abstraction: inter-tenant, dependency</p>
    <p>Bandwidth allocation strategy: upper-bound proportionality</p>
    <p>Placement algorithm: greedy dependency aware packing</p>
    <p>Our evaluation show that</p>
    <p>Hadrian meets three network sharing requirements</p>
    <p>Hadrian delivers predictability and higher efficiency</p>
  </div>
  <div class="page">
    <p>Thank you</p>
  </div>
</Presentation>
