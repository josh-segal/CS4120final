<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>DECAF: Detec+ng and Characterizing Ad Fraud in Mobile Apps</p>
    <p>Bin Liu</p>
    <p>Suman Nath, Ramesh Govindan, Jie Liu</p>
    <p>NSDI 2014</p>
  </div>
  <div class="page">
    <p>The Mobile Ad Ecosystem App Developer</p>
    <p>Phone/Tablet App</p>
    <p>Ad Network</p>
    <p>Ad Plugin</p>
    <p>Introduc)on DECAF Evalua+on Characteriza+on Conclusion</p>
    <p>See/Click Ads</p>
    <p>App User</p>
    <p>Ad Plugin Paid by User Clicks</p>
    <p>Paid by Impressions</p>
  </div>
  <div class="page">
    <p>Mobile Ad Fraud 3</p>
    <p>Introduc)on DECAF Evalua+on Characteriza+on Conclusion</p>
    <p>App developers have incen+ve to commit fraud by infla+ng clicks and impressions</p>
  </div>
  <div class="page">
    <p>Introduc)on DECAF Evalua+on Characteriza+on Conclusion</p>
    <p>Ad Fraud: a Big Business</p>
    <p>Very large mobile marketplaces</p>
  </div>
  <div class="page">
    <p>We explore a sub-class of ad fraud, called placement ad fraud</p>
    <p>Developers manipulate visual layouts to trigger invisible impressions or uninten+onal clicks</p>
    <p>Placement Ad Fraud</p>
    <p>Introduc)on DECAF Evalua+on Characteriza+on Conclusion</p>
    <p>A developer must not edit, resize, modify, filter, obscure, hide, make transparent, or reorder any adver)sing</p>
    <p>MicrosoB Adver)sing Prohibits Placement Ad Fraud</p>
  </div>
  <div class="page">
    <p>Placement Ad Fraud Examples</p>
    <p>Intrusive ads</p>
    <p>Introduc)on DECAF Evalua+on Characteriza+on Conclusion</p>
  </div>
  <div class="page">
    <p>Placement Ad Fraud Examples</p>
    <p>Many ads</p>
    <p>Introduc)on DECAF Evalua+on Characteriza+on Conclusion</p>
  </div>
  <div class="page">
    <p>Placement Ad Fraud Examples</p>
    <p>Hidden ads</p>
    <p>Introduc)on DECAF Evalua+on Characteriza+on Conclusion</p>
  </div>
  <div class="page">
    <p>Current Approach</p>
    <p>Introduc)on DECAF Evalua+on Characteriza+on Conclusion</p>
    <p>Manual inspec+on, which is labor-intensive and error-prone</p>
    <p>Several tens of minutes to manually scan one app</p>
    <p>Cannot detect some placement ad fraud, like hidden ads</p>
  </div>
  <div class="page">
    <p>To design an automated system for detec+ng placement fraud</p>
    <p>Goal</p>
    <p>Introduc)on DECAF Evalua+on Characteriza+on Conclusion</p>
  </div>
  <div class="page">
    <p>Challenges</p>
    <p>Introduc)on DECAF Evalua+on Characteriza+on Conclusion</p>
    <p>Challenge 1: Scaling to thousands of visually complex apps</p>
    <p>Tradeoff between a more complete search (accuracy) and processing more apps in a given +me (scalability)</p>
    <p>Tens to a hundred clickable elements in each page</p>
    <p>Poten)ally infinite number of pages Ads can appear on any</p>
    <p>app page. Apps can have many pages.</p>
  </div>
  <div class="page">
    <p>Challenges</p>
    <p>Introduc)on DECAF Evalua+on Characteriza+on Conclusion</p>
    <p>Challenge 2: accurately and quickly iden+fy fraud</p>
    <p>Sliding Screen Problem (in a Panoramic Page)</p>
  </div>
  <div class="page">
    <p>Challenges</p>
    <p>Introduc)on DECAF Evalua+on Characteriza+on Conclusion</p>
    <p>Challenge 2: accurately and quickly iden+fy fraud</p>
    <p>Hidden Ads (Z-index not Available)</p>
  </div>
  <div class="page">
    <p>Our Approach  Dynamic Analysis</p>
    <p>Dealing with Visual Complexity</p>
    <p>Develop automated scalable naviga+on of app pages through dynamic execu+on</p>
    <p>Use UI-automa+on based dynamic analysis to detect placement fraud</p>
    <p>Introduc)on DECAF Evalua+on Characteriza+on Conclusion</p>
    <p>Accurate Fraud Detec+on</p>
    <p>Design several efficient fraud detectors, one for each fraud type</p>
  </div>
  <div class="page">
    <p>Contribu+ons</p>
    <p>Introduc)on DECAF Evalua+on Characteriza+on Conclusion</p>
    <p>Design and implementa+on of the DECAF system to detect placement fraud</p>
    <p>Characteriza+on of placement fraud by analyzing 50,000 Windows Phone apps and 1,150 tablet apps using DECAF</p>
    <p>Deployment of DECAF in the ad fraud team at Microsoh, which has helped detect many instances of fraud</p>
  </div>
  <div class="page">
    <p>DECAF Overview</p>
    <p>Introduc+on DECAF Evalua+on Characteriza+on Conclusion</p>
    <p>DECAF</p>
    <p>Movie ShowTime</p>
    <p>Automated UI Naviga+on (Monkey)</p>
    <p>Fraud Checkers</p>
    <p>Many Ads Hidden Ads</p>
  </div>
  <div class="page">
    <p>Automated UI Naviga+on</p>
    <p>Introduc+on DECAF Evalua+on Characteriza+on Conclusion</p>
    <p>An App Page</p>
    <p>UI Extrac+on</p>
    <p>Page</p>
    <p>Text Image List</p>
    <p>Buion Buion UI Structure</p>
    <p>Buion Click Mul+page Swipe</p>
    <p>Scroll List</p>
    <p>Ac+on Dic+onary Click Con+nue Buion</p>
    <p>UI Ac+on</p>
    <p>The set of previously visited pages Next App Page</p>
    <p>Decide UI Ac+on</p>
    <p>Monkey</p>
    <p>UI Extrac)on Channel</p>
    <p>UI Ac)on Channel</p>
  </div>
  <div class="page">
    <p>Problem: Reducing the Search Space</p>
    <p>Introduc+on DECAF Evalua+on Characteriza+on Conclusion</p>
    <p>UI page space can be prac+cally infinite</p>
    <p>One Reddit App Page</p>
    <p>The post list is updated every several minutes</p>
    <p>Avoid clicking UI elements on previously visited pages?</p>
  </div>
  <div class="page">
    <p>Introduc+on DECAF Evalua+on Characteriza+on Conclusion</p>
    <p>Reducing the Search Space</p>
    <p>Key observa+on</p>
    <p>For placement fraud, it is sufficient to visit structurally dissimilar pages</p>
    <p>Two pages can be structurally similar even if their content differs</p>
  </div>
  <div class="page">
    <p>Introduc+on DECAF Evalua+on Characteriza+on Conclusion</p>
    <p>Structurally Similar Pages</p>
    <p>An Image A Text Box A Clickable Menu List An Ad Structurally Similar</p>
    <p>Pages!</p>
  </div>
  <div class="page">
    <p>Determining Structural Similarity Two pages are structurally similar if they have</p>
    <p>similar UI hierarchies</p>
    <p>Page 1</p>
    <p>Text Image List</p>
    <p>Buion Buion</p>
    <p>Introduc+on DECAF Evalua+on Characteriza+on Conclusion</p>
    <p>Structurally Similar</p>
    <p>Page 2</p>
    <p>Text Image List</p>
    <p>Buion Buion Buion</p>
  </div>
  <div class="page">
    <p>Determining Structural Similarity</p>
    <p>Introduc+on DECAF Evalua+on Characteriza+on Conclusion</p>
    <p>Two pages are structurally similar if they have similar UI hierarchies</p>
    <p>Page 1</p>
    <p>Text Image List</p>
    <p>Buion Buion</p>
    <p>Structurally Dissimilar</p>
    <p>Page 3</p>
    <p>Buion Buion List</p>
    <p>Image List</p>
    <p>Text Buion Image Buion</p>
    <p>Buion Buion Image List</p>
  </div>
  <div class="page">
    <p>Defining Structural Similarity</p>
    <p>Introduc+on DECAF Evalua+on Characteriza+on Conclusion</p>
    <p>Use cosine similarity metric</p>
    <p>Users specify a similarity threshold</p>
    <p>Feature vector defined on UI elements</p>
    <p>Encodes type of UI element and posi+on in hierarchy</p>
    <p>Page</p>
    <p>Text Image List</p>
    <p>Buion Buion</p>
    <p>Level 1</p>
    <p>Level 2</p>
    <p>Text Image List Level 1 1*Text@Level_1, 1*Image@Level_1, 1*List@Level_1, 2*Bu&lt;on@Level_2</p>
    <p>Buion Buion Level 2</p>
  </div>
  <div class="page">
    <p>Problem: Avoid previously visited states</p>
    <p>Introduc+on DECAF Evalua+on Characteriza+on Conclusion</p>
    <p>Monkey can waste +me by visi+ng previously visited pages</p>
    <p>Page 1 Buion 1 Buion 2</p>
    <p>Page 2 Text Image</p>
    <p>Not necessary to click BuNon 2. However, to</p>
    <p>detect this</p>
    <p>The Monkey needs to anyway go back to page 1 again and click bu&lt;on 2</p>
    <p>Extra )me (up to several minutes) for backtracking</p>
    <p>is needed</p>
  </div>
  <div class="page">
    <p>Introduc+on DECAF Evalua+on Characteriza+on Conclusion</p>
    <p>Avoiding Previously Visited States</p>
    <p>To avoid backtracking costs, can we predict if two buNons on a page lead to</p>
    <p>structurally similar pages?</p>
  </div>
  <div class="page">
    <p>Avoiding Revisi+ng Similar Pages</p>
    <p>Introduc+on DECAF Evalua+on Characteriza+on Conclusion</p>
    <p>Our method is to use machine learning classifiers</p>
    <p>Two buions that have a similar neighborhoods in UI hierarchy likely to lead to structurally similar pages</p>
  </div>
  <div class="page">
    <p>DECAF Overview</p>
    <p>Introduc+on DECAF Evalua+on Characteriza+on Conclusion</p>
    <p>DECAF</p>
    <p>Movie ShowTime</p>
    <p>Automated UI Naviga+on (A Monkey)</p>
    <p>Fraud Checkers</p>
    <p>Many Ads Hidden Ads</p>
  </div>
  <div class="page">
    <p>Fraud Checkers 28</p>
    <p>Input to checkers: structural data of ad and non-ad elements</p>
    <p>Introduc+on DECAF Evalua+on Characteriza+on Conclusion</p>
    <p>Fraud Type Checker Summary</p>
    <p>Invisible/Hidden Ads Whether visual elements are</p>
    <p>overlapped with ads</p>
    <p>Smaller Ads Compare the actual display size of the</p>
    <p>ad with the minimal valid size</p>
    <p>Intrusive Ads Compare the distance between an ad</p>
    <p>and clickable non-ad elements</p>
    <p>Many Ads Whether the number of viewable ads is more than the maximum allowed</p>
  </div>
  <div class="page">
    <p>Efficient Many-Ads Checkers Many ads in one display screen</p>
    <p>Challenge: the sliding screen problem</p>
    <p>No Ad</p>
    <p>Introduc+on DECAF Evalua+on Characteriza+on Conclusion</p>
  </div>
  <div class="page">
    <p>Efficient Many-Ads Checkers Many ads in one display screen</p>
    <p>Challenge: the sliding screen problem</p>
    <p>Two Ads</p>
    <p>Introduc+on DECAF Evalua+on Characteriza+on Conclusion</p>
  </div>
  <div class="page">
    <p>Efficient Many-Ad Checker Many ads in one display screen</p>
    <p>Ad</p>
    <p>Ad</p>
    <p>Ad</p>
    <p>Sliding Screen</p>
    <p>Ad</p>
    <p>Ad</p>
    <p>Ad</p>
    <p>We have designed an efficient algorithm to detect many-ad fraud</p>
    <p>Ad</p>
    <p>Ad</p>
    <p>Ad</p>
    <p>Sliding Screen Ad</p>
    <p>Ad</p>
    <p>Ad</p>
    <p>Challenge: the sliding screen problem</p>
    <p>Introduc+on DECAF Evalua+on Characteriza+on Conclusion</p>
  </div>
  <div class="page">
    <p>Other Op+miza+ons</p>
    <p>Introduc+on DECAF Evalua+on Characteriza+on Conclusion</p>
    <p>State Importance Assessment to further reduce the number of app pages that the Monkey needs to explore</p>
    <p>Rendering Order Inference and Proxy-Assisted Screen Analysis to efficiently detect hidden ads</p>
  </div>
  <div class="page">
    <p>Evalua+on and Characteriza+on 33</p>
    <p>Structural Page Coverage</p>
    <p>Manually find ground truth number of page structure</p>
    <p>Limited to 100 top free apps from the tablet app store</p>
    <p>Basic Setup</p>
    <p>Run DECAF on each app for 20 minutes</p>
    <p>Collect informa+on from structurally different pages</p>
    <p>Introduc+on DECAF Evalua)on Characteriza+on Conclusion</p>
  </div>
  <div class="page">
    <p>Evalua+on and Characteriza+on 34</p>
    <p>Characteriza+on of Placement Ad Fraud</p>
    <p>Run DECAF on 50,000 phone apps and 1,150 tablet apps</p>
    <p>Characterize fraud by fraud type, ra+ng and publisher</p>
    <p>Basic Setup</p>
    <p>Run DECAF on each app for 20 minutes</p>
    <p>Collect informa+on from structurally different pages</p>
    <p>Introduc+on DECAF Evalua)on Characteriza+on Conclusion</p>
  </div>
  <div class="page">
    <p>Structural Page Coverage 35</p>
    <p>Introduc+on DECAF Evalua)on Characteriza+on Conclusion</p>
    <p>Some scenarios require app-specific text input that Monkey cannot handle</p>
    <p>Some apps simply have a very large set of structural pages</p>
    <p>monkey A Basic Monkey A Classifier- Enhanced Monkey</p>
  </div>
  <div class="page">
    <p>Introduc+on DECAF Evalua+on Characteriza)on Conclusion</p>
    <p>Characterizing Fraud by Types</p>
    <p>Fraud Type Phone Apps (1000+) Tablet Apps (50+)</p>
    <p>Too Many Ads 11% 4%</p>
    <p>Smaller Ads 33% 48% Hidden Ads 47% 32% Intrusive Ads 9% 16%</p>
  </div>
  <div class="page">
    <p>Characterizing Fraud by Types</p>
    <p>Hidden Ads viola+ons are more prevalent on the phone, which has a smaller screen for displaying content</p>
    <p>Fraud Type Phone Apps (1000+) Tablet Apps (50+)</p>
    <p>Too Many Ads 11% 4%</p>
    <p>Smaller Ads 33% 48% Hidden Ads 47% 32% Intrusive Ads 9% 16%</p>
    <p>Introduc+on DECAF Evalua+on Characteriza)on Conclusion</p>
  </div>
  <div class="page">
    <p>Characterizing Fraud by Types</p>
    <p>Intrusive Ads viola+ons are more prevalent on the tablet, which has richer controls to be used to trigger accidental clicks</p>
    <p>Fraud Type Phone Apps (1000+) Tablet Apps (50+)</p>
    <p>Too Many Ads 11% 4%</p>
    <p>Smaller Ads 33% 48% Hidden Ads 47% 32% Intrusive Ads 9% 16%</p>
    <p>Introduc+on DECAF Evalua+on Characteriza)on Conclusion</p>
  </div>
  <div class="page">
    <p>Introduc+on DECAF Evalua+on Characteriza)on Conclusion</p>
    <p>Characterizing Fraud by Ra+ng</p>
    <p>Ra+ng values are rounded to a number from 1-5</p>
    <p>Fraud level does not seem to depend on ra+ng</p>
    <p>Ra+ng 1 Ra+ng 2 Ra+ng 3 Ra+ng 4 Ra+ng 5</p>
    <p>Fraud (phone) NoFraud (Phone)</p>
    <p>Ra+ng 1 Ra+ng 2 Ra+ng 3 Ra+ng 4 Ra+ng 5</p>
    <p>Fraud (Tablet) NoFraud (Tablet)</p>
  </div>
  <div class="page">
    <p>Introduc+on DECAF Evalua+on Characteriza)on Conclusion</p>
    <p>Fraudulent App Count per Publisher</p>
    <p>Each app is developed by a publisher</p>
    <p>The distribu+on of the number of fraud across publishers who commit fraud exhibits a heavy tail</p>
    <p>A small number of publishers are responsible for most of the fraud</p>
  </div>
  <div class="page">
    <p>Introduc+on DECAF Evalua+on Characteriza+on Conclusion</p>
    <p>Conclusion</p>
    <p>Mobile ad fraud is a 1 billion dollar business, and ad networks need effec)ve tools to detect fraud</p>
  </div>
  <div class="page">
    <p>Introduc+on DECAF Evalua+on Characteriza+on Conclusion</p>
    <p>DECAF: a system for detec+ng placement ad fraud in mobile apps</p>
    <p>Efficiently explore structurally different pages of mobile apps</p>
    <p>Accurately detect placement ad fraud in a fast and scalable way</p>
    <p>Case study of 51,150 apps reveals interes+ng variability in the prevalence of fraud by type, ra+ng, publisher and etc.</p>
    <p>Conclusion</p>
  </div>
</Presentation>
