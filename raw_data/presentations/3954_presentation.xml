<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>HydraFS: a High-Throughput File System for the HYDRAstor Content-Addressable Storage System</p>
    <p>Cristian Ungureanu, Benjamin Atkin, Akshat Aranya, Salil Gokhale, Steve Rago, Grzegorz Calkowski, Cezary Dubnicki, Aniruddha Bohra</p>
    <p>Feb 26, 2010</p>
  </div>
  <div class="page">
    <p>Content-addressable API</p>
    <p>HYDRAstor: De-duplicated Scalable Storage</p>
    <p>Scale-out storage</p>
    <p>With global de-duplication</p>
    <p>Using Content-Defined Chunking</p>
    <p>Resilient to multiple failures</p>
    <p>Easy to manage (self-healing,)</p>
    <p>High throughput for streaming access</p>
    <p>Std. interfaces (NFS/CIFS, VTL,)</p>
    <p>FAST09</p>
    <p>HYDRAstor: a Scalable Secondary Storage</p>
    <p>Scalable</p>
    <p>Easy to manage</p>
    <p>Resilient</p>
    <p>High throughput</p>
    <p>Content-addressable Block Store</p>
    <p>Standard protocols</p>
    <p>Chunking</p>
    <p>High throughput Access Layer</p>
    <p>FAST10</p>
    <p>HydraFS: a High Throughput Filesystem</p>
    <p>Bimodal CDC for Backup Streams</p>
  </div>
  <div class="page">
    <p>HYDRAstor Usage Example</p>
    <p>B1</p>
    <p>Variable-size blocks</p>
    <p>Block Store</p>
    <p>File System</p>
    <p>Block Store (CAS) API</p>
  </div>
  <div class="page">
    <p>HYDRAstor Usage Example</p>
    <p>CA1</p>
    <p>B1</p>
    <p>Variable-size blocks</p>
    <p>Content-addressable</p>
    <p>Address decided by the store</p>
    <p>Block Store (CAS) API</p>
    <p>Block Store</p>
    <p>File System</p>
  </div>
  <div class="page">
    <p>HYDRAstor Usage Example</p>
    <p>CA1</p>
    <p>B2</p>
    <p>B1</p>
    <p>Block Store</p>
    <p>File System</p>
    <p>Variable-size blocks</p>
    <p>Content-addressable</p>
    <p>Address decided by the store</p>
    <p>Block Store (CAS) API</p>
  </div>
  <div class="page">
    <p>HYDRAstor Usage Example</p>
    <p>CA2CA1</p>
    <p>B2B1</p>
    <p>Block Store</p>
    <p>File System</p>
    <p>Variable-size blocks</p>
    <p>Content-addressable</p>
    <p>Address decided by the store</p>
    <p>Block Store (CAS) API</p>
  </div>
  <div class="page">
    <p>HYDRAstor Usage Example</p>
    <p>CA2CA1</p>
    <p>B2B1</p>
    <p>Block Store</p>
    <p>File System</p>
    <p>Variable-size blocks</p>
    <p>Content-addressable</p>
    <p>Address decided by the store</p>
    <p>Block Store (CAS) API</p>
    <p>B3</p>
  </div>
  <div class="page">
    <p>HYDRAstor Usage Example</p>
    <p>CA2CA1</p>
    <p>B2B1</p>
    <p>Block Store</p>
    <p>File System</p>
    <p>Variable-size blocks</p>
    <p>Content-addressable</p>
    <p>Address decided by the store</p>
    <p>Duplicates eliminated by store</p>
    <p>Block Store (CAS) API</p>
    <p>B3</p>
    <p>CA1</p>
  </div>
  <div class="page">
    <p>HYDRAstor Usage Example</p>
    <p>CA2</p>
    <p>CA1</p>
    <p>B2B1</p>
    <p>Block Store</p>
    <p>File System</p>
    <p>B3</p>
    <p>CA1</p>
    <p>Variable-size blocks</p>
    <p>Content-addressable</p>
    <p>Address decided by the store</p>
    <p>Duplicates eliminated by store</p>
    <p>Block Store (CAS) API</p>
  </div>
  <div class="page">
    <p>HYDRAstor Usage Example</p>
    <p>CA2CA1</p>
    <p>B2B1</p>
    <p>Block Store</p>
    <p>File System</p>
    <p>B3</p>
    <p>CA1</p>
    <p>Variable-size blocks</p>
    <p>Content-addressable</p>
    <p>Address decided by the store</p>
    <p>Duplicates eliminated by store</p>
    <p>Block Store (CAS) API</p>
  </div>
  <div class="page">
    <p>HYDRAstor Usage Example</p>
    <p>CA2CA1</p>
    <p>B2B1</p>
    <p>Block Store</p>
    <p>File System</p>
    <p>CA1</p>
    <p>Variable-size blocks</p>
    <p>Content-addressable</p>
    <p>Address decided by the store</p>
    <p>Duplicates eliminated by store</p>
    <p>Block Store (CAS) API</p>
  </div>
  <div class="page">
    <p>HYDRAstor Usage Example</p>
    <p>B2B1</p>
    <p>Block Store</p>
    <p>File System</p>
    <p>B4 CA2CA1 CA1</p>
    <p>Variable-size blocks</p>
    <p>Content-addressable</p>
    <p>Address decided by the store</p>
    <p>Duplicates eliminated by store</p>
    <p>Configurable block resilience</p>
    <p>Block Store (CAS) API</p>
  </div>
  <div class="page">
    <p>HYDRAstor Usage Example</p>
    <p>CA3</p>
    <p>Block Store</p>
    <p>File System</p>
    <p>B4 CA2CA1 CA1</p>
    <p>B2B1</p>
    <p>Variable-size blocks</p>
    <p>Content-addressable</p>
    <p>Address decided by the store</p>
    <p>Duplicates eliminated by store</p>
    <p>Configurable block resilience</p>
    <p>Block Store (CAS) API</p>
  </div>
  <div class="page">
    <p>HYDRAstor Usage Example</p>
    <p>CA3</p>
    <p>Block Store</p>
    <p>File System</p>
    <p>B4 CA2CA1 CA1</p>
    <p>B2B1</p>
    <p>Variable-size blocks</p>
    <p>Content-addressable</p>
    <p>Address decided by the store</p>
    <p>Duplicates eliminated by store</p>
    <p>Configurable block resilience</p>
    <p>Block Store (CAS) API</p>
  </div>
  <div class="page">
    <p>HYDRAstor Usage Example</p>
    <p>CA3Root1</p>
    <p>Block Store</p>
    <p>File System</p>
    <p>B4 CA2CA1 CA1</p>
    <p>B2B1</p>
    <p>Variable-size blocks</p>
    <p>Content-addressable</p>
    <p>Address decided by the store</p>
    <p>Duplicates eliminated by store</p>
    <p>Configurable block resilience</p>
    <p>Garbage collection</p>
    <p>Block Store (CAS) API</p>
  </div>
  <div class="page">
    <p>HYDRAstor Usage Example</p>
    <p>CA3Root1</p>
    <p>Block Store</p>
    <p>File System</p>
    <p>B4 CA2CA1 CA1</p>
    <p>B2B1</p>
    <p>Variable-size blocks</p>
    <p>Content-addressable</p>
    <p>Address decided by the store</p>
    <p>Duplicates eliminated by store</p>
    <p>Configurable block resilience</p>
    <p>Garbage collection</p>
    <p>Block Store (CAS) API</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>HYDRAstor content-addressable API</p>
    <p>Challenges posed to the filesystem</p>
    <p>Filesystem architecture</p>
    <p>Techniques used to overcome the challenges</p>
    <p>Conclusions and future work</p>
  </div>
  <div class="page">
    <p>Challenges</p>
    <p>Content-addressable blocks</p>
    <p>A change in a blocks contents also changes the blocks address</p>
    <p>All metadata has to change, recursively up to the filesystem root</p>
    <p>Parent can only be written after the children writes are successful</p>
    <p>Variable-sized chunking (splitting file data into blocks)</p>
    <p>Block boundaries change when content is changed</p>
    <p>Overwrites cause read-rechunk-rewrite</p>
    <p>High-latency block store operations</p>
    <p>Why? Hashing, compression, erasure coding, fragment distribution</p>
    <p>Exacerbates the above two challenges</p>
  </div>
  <div class="page">
    <p>Persistent Layout</p>
    <p>File inode</p>
    <p>Inode B-tree</p>
    <p>Directory inode</p>
    <p>Inode map</p>
    <p>(segmented array)</p>
    <p>File contents Directory contents</p>
    <p>Inode map B-tree</p>
    <p>Filesystem superblock (root block)</p>
    <p>Inode map root</p>
    <p>Directory</p>
    <p>B-tree</p>
  </div>
  <div class="page">
    <p>HydraFS Architecture</p>
    <p>Block Store</p>
    <p>Data</p>
    <p>File Server Commit Server Control messages</p>
    <p>User</p>
    <p>operations</p>
    <p>Filesystem</p>
    <p>Update log TS=1; op1, op2,...TS=2; TS=3;</p>
    <p>File System</p>
    <p>Root</p>
    <p>Metadata</p>
    <p>TS=1 TS=20</p>
  </div>
  <div class="page">
    <p>File Server</p>
    <p>Write buffer</p>
    <p>Accumulates written data; flushed on sync</p>
    <p>Helps re-order NFS packets arriving out-of-order</p>
    <p>Write Buffer</p>
    <p>(dirty data)</p>
  </div>
  <div class="page">
    <p>File Server</p>
    <p>Write buffer</p>
    <p>Accumulates written data; flushed on sync</p>
    <p>Helps re-order NFS packets arriving out-of-order</p>
    <p>Chunker</p>
    <p>Decides block boundaries (based on data content)</p>
    <p>Write Buffer</p>
    <p>(dirty data)</p>
    <p>Chunker</p>
  </div>
  <div class="page">
    <p>File Server</p>
    <p>Metadata Modification Records</p>
    <p>File offset_range  CA</p>
    <p>Directory additions/removals</p>
    <p>Inode map de/allocations</p>
    <p>(dirty metadata)</p>
    <p>Write Buffer</p>
    <p>(dirty data)</p>
    <p>Chunker</p>
    <p>Write buffer</p>
    <p>Accumulates written data; flushed on sync</p>
    <p>Helps re-order NFS packets arriving out-of-order</p>
    <p>Chunker</p>
    <p>Decides block boundaries (based on data content)</p>
    <p>Metadata modification records (file, directory, inode map)</p>
    <p>Dirty metadata annotated with time-stamp (for cleaning)</p>
    <p>Written out to log</p>
    <p>Large amount of dirty metadata!   Requires efficient cleaning</p>
    <p>Resource management issues</p>
  </div>
  <div class="page">
    <p>File Server</p>
    <p>Block CacheMetadata Modification Records</p>
    <p>File offset_range  CA</p>
    <p>Directory additions/removals</p>
    <p>Inode map de/allocations</p>
    <p>CA  block data</p>
    <p>(clean data &amp;</p>
    <p>metadata)(dirty metadata)</p>
    <p>Write Buffer</p>
    <p>(dirty data)</p>
    <p>Chunker</p>
    <p>Write buffer</p>
    <p>Accumulates written data; flushed on sync</p>
    <p>Helps re-order NFS packets arriving out-of-order</p>
    <p>Chunker</p>
    <p>Decides block boundaries (based on data content)</p>
    <p>Metadata modification records (file, directory, inode map)</p>
    <p>Dirty metadata annotated with time-stamp (for cleaning)</p>
    <p>Written out to log</p>
    <p>Block cache</p>
    <p>Clean data and metadata (not de-serialized)</p>
  </div>
  <div class="page">
    <p>Write Processing</p>
    <p>Block CacheMetadata Modification RecordsWrite Buffer</p>
    <p>Chunker</p>
    <p>Block Store</p>
  </div>
  <div class="page">
    <p>Write Processing</p>
    <p>Write Buffer</p>
    <p>Chunker</p>
    <p>Block Store</p>
    <p>[0,8 KB)</p>
    <p>Metadata Modification Records Block Cache</p>
  </div>
  <div class="page">
    <p>Write Processing</p>
    <p>Write Buffer</p>
    <p>Chunker</p>
    <p>Block Store</p>
    <p>[0, 8 KB)</p>
    <p>Metadata Modification Records Block Cache</p>
  </div>
  <div class="page">
    <p>Write Processing</p>
    <p>Write Buffer</p>
    <p>Chunker</p>
    <p>Block Store</p>
    <p>[0, 8 KB)</p>
    <p>[8 KB,16 KB)</p>
    <p>Metadata Modification Records Block Cache</p>
  </div>
  <div class="page">
    <p>Write Processing</p>
    <p>Write Buffer</p>
    <p>Chunker</p>
    <p>Block Store</p>
    <p>[0, 8 KB)</p>
    <p>[8 KB,16 KB)</p>
    <p>Metadata Modification Records Block Cache</p>
  </div>
  <div class="page">
    <p>Write Processing</p>
    <p>Write Buffer</p>
    <p>Chunker</p>
    <p>Block Store</p>
    <p>[12 KB, 16 KB)</p>
    <p>Metadata Modification Records Block Cache</p>
  </div>
  <div class="page">
    <p>Write Processing</p>
    <p>Write Buffer</p>
    <p>Chunker</p>
    <p>Block Store 12 KB of data</p>
    <p>Data blocks</p>
    <p>[12 KB, 16 KB)</p>
    <p>CA1</p>
    <p>Metadata Modification Records Block Cache</p>
  </div>
  <div class="page">
    <p>Write Processing</p>
    <p>Write Buffer</p>
    <p>Chunker</p>
    <p>Block Store 12 KB of data</p>
    <p>TS , [0, 12KB)  CA1</p>
    <p>Data blocks</p>
    <p>[12 KB, 16 KB)</p>
    <p>CA1</p>
    <p>Metadata Modification Records Block Cache</p>
  </div>
  <div class="page">
    <p>Write Processing</p>
    <p>Write Buffer</p>
    <p>Chunker</p>
    <p>Block Store 12 KB of data</p>
    <p>TS , [0, 12KB)  CA1</p>
    <p>Data blocks</p>
    <p>[12 KB, 16 KB)</p>
    <p>[16 KB,24 KB)</p>
    <p>Metadata Modification Records Block Cache</p>
  </div>
  <div class="page">
    <p>Write Processing</p>
    <p>Write Buffer</p>
    <p>Chunker</p>
    <p>Block Store 12 KB of data</p>
    <p>TS , [0, 12KB)  CA1</p>
    <p>Data blocks</p>
    <p>[12 KB, 16 KB)</p>
    <p>[16 KB,24 KB)</p>
    <p>Metadata Modification Records Block Cache</p>
  </div>
  <div class="page">
    <p>Write Processing</p>
    <p>Write Buffer</p>
    <p>Chunker</p>
    <p>Block Store</p>
    <p>[22 KB, 24 KB)</p>
    <p>Data blocks</p>
    <p>TS , [0, 12KB)  CA1</p>
    <p>TS , [12KB, 22KB)  CA2</p>
    <p>Metadata Modification Records Block Cache</p>
  </div>
  <div class="page">
    <p>Write Processing</p>
    <p>Write Buffer</p>
    <p>Chunker</p>
    <p>Block Store</p>
    <p>[22 KB, 24 KB)</p>
    <p>TS , [0, 12KB)  CA1</p>
    <p>TS , [12KB, 22KB)  CA2</p>
    <p>TS ; [0, 12KB)  CA1 ; [12KB, 22KB)  CA2 ;</p>
    <p>Log block</p>
    <p>Data blocks</p>
    <p>Metadata Modification Records Block Cache</p>
  </div>
  <div class="page">
    <p>Commit Server</p>
    <p>File inode</p>
    <p>Inode map B-tree</p>
    <p>TSFilesystem superblock</p>
    <p>Commit server does not read data</p>
  </div>
  <div class="page">
    <p>Commit Server</p>
    <p>File inode</p>
    <p>Inode map B-tree</p>
    <p>TSFilesystem superblock</p>
    <p>TS ; inode=2,[24KB, 32KB)=CA1 TS ; inode=9,[24KB, 32KB)=CA2 Log records</p>
  </div>
  <div class="page">
    <p>Commit Server</p>
    <p>TS TS</p>
    <p>Amortize updates over many log records</p>
    <p>Recovery time == the time to re-apply log</p>
  </div>
  <div class="page">
    <p>Metadata Cleaning</p>
    <p>CA101</p>
    <p>File Modification Records</p>
    <p>inode #1; root= CA101 ; min=791; max=791</p>
    <p>inode #2; root= CA122 ; min=801; max=803</p>
    <p>inode #3; root= CA303 ; min=805; max=806</p>
    <p>CA122</p>
  </div>
  <div class="page">
    <p>Metadata Cleaning</p>
    <p>CA101</p>
    <p>File Modification Records</p>
    <p>inode #1; root= CA101 ; min=791; max=791</p>
    <p>inode #2; root= CA122 ; min=801; max=803</p>
    <p>inode #3; root= CA303 ; min=805; max=806</p>
    <p>CA122</p>
    <p>update( TimeStamp=802)</p>
  </div>
  <div class="page">
    <p>Metadata Cleaning</p>
    <p>Block Cache</p>
    <p>CA101</p>
    <p>File Modification Records</p>
    <p>inode #1; root= CA101 ; min=791; max=791</p>
    <p>inode #2; root= CA122 ; min=801; max=803</p>
    <p>inode #3; root= CA303 ; min=805; max=806</p>
    <p>CA122</p>
    <p>Read new, evict old superblock</p>
    <p>update( TimeStamp=802)</p>
  </div>
  <div class="page">
    <p>Metadata Cleaning</p>
    <p>Block Cache</p>
    <p>CA101</p>
    <p>File Modification Records</p>
    <p>inode #1; root= CA101 ; min=791; max=791</p>
    <p>inode #2; root= CA122 ; min=801; max=803</p>
    <p>inode #3; root= CA303 ; min=805; max=806</p>
    <p>CA122</p>
    <p>Process dirty inodes one by one update( TimeStamp=802)</p>
  </div>
  <div class="page">
    <p>Metadata Cleaning</p>
    <p>Block Cache</p>
    <p>CA101</p>
    <p>File Modification Records</p>
    <p>inode #1; root= CA101 ; min=791; max=791</p>
    <p>inode #2; root= CA122 ; min=801; max=803</p>
    <p>inode #3; root= CA303 ; min=805; max=806</p>
    <p>CA122</p>
    <p>Case 1: 802  max  evict entire inode update( TimeStamp=802)</p>
  </div>
  <div class="page">
    <p>Metadata Cleaning</p>
    <p>Block Cache</p>
    <p>CA101</p>
    <p>File Modification Records</p>
    <p>inode #2; root= CA122 ; min=801; max=803</p>
    <p>inode #3; root= CA303 ; min=805; max=806</p>
    <p>CA122</p>
    <p>Case 2: 802  min and 802 &lt; max</p>
    <p>drop root CA</p>
    <p>drop records with time_stamp  802</p>
    <p>update( TimeStamp=802)</p>
  </div>
  <div class="page">
    <p>Metadata Cleaning</p>
    <p>Block Cache</p>
    <p>CA101</p>
    <p>File Modification Records</p>
    <p>inode #2; root= ? ; min=801; max=803</p>
    <p>inode #3; root= CA303 ; min=805; max=806</p>
    <p>CA122</p>
    <p>Case 3: 802 &lt; min</p>
    <p>skip record processing (all are newer)</p>
    <p>inode root remains unchanged update( TimeStamp=802)</p>
  </div>
  <div class="page">
    <p>Metadata Cleaning</p>
    <p>Block Cache</p>
    <p>CA101</p>
    <p>File Modification Records</p>
    <p>inode #2; root= ? ; min=801; max=803</p>
    <p>inode #3; root= CA303 ; min=805; max=806</p>
    <p>Locks only one inode at a time (no tree locking)</p>
    <p>No I/O done with the lock held</p>
  </div>
  <div class="page">
    <p>Read Processing</p>
    <p>Block Cache</p>
    <p>CA101</p>
    <p>File Modification Records</p>
    <p>inode #2; root= ? ; min=801; max=803</p>
    <p>inode #3; root= CA303 ; min=805; max=806</p>
    <p>read( inode=2, off=0, len=8KB)</p>
  </div>
  <div class="page">
    <p>Block Cache</p>
    <p>CA101</p>
    <p>File Modification Records</p>
    <p>inode #2; root= ? ; min=801; max=803</p>
    <p>inode #3; root= CA303 ; min=805; max=806</p>
    <p>Read Processing</p>
    <p>read( inode=2, off=0, len=8KB)</p>
  </div>
  <div class="page">
    <p>Block Cache</p>
    <p>CA101</p>
    <p>File Modification Records</p>
    <p>inode #2; root=CA412 ; min=801; max=803</p>
    <p>inode #3; root= CA303 ; min=805; max=806</p>
    <p>CA122</p>
    <p>CA412</p>
    <p>Read Processing</p>
    <p>read( inode=2, off=0, len=8KB)</p>
  </div>
  <div class="page">
    <p>Block Cache</p>
    <p>CA101</p>
    <p>File Modification Records</p>
    <p>inode #2; root=CA412 ; min=801; max=803</p>
    <p>inode #3; root= CA303 ; min=805; max=806</p>
    <p>CA122</p>
    <p>CA412</p>
    <p>Read Processing</p>
    <p>read( inode=2, off=0, len=8KB)</p>
  </div>
  <div class="page">
    <p>Read Performance</p>
    <p>Just pre-fetch?</p>
    <p>Problems</p>
    <p>High latency  high read-ahead</p>
    <p>Poor cache locality for metadata</p>
    <p>Solutions</p>
    <p>Separate data and meta-data pre-fetch</p>
    <p>Weighted-LRU Policy for Block Cache</p>
    <p>Block Cache</p>
  </div>
  <div class="page">
    <p>Data and Metadata Pre-fetch</p>
    <p>Problem: time to pre-fetch a data block varies</p>
    <p>with its position in the B-tree</p>
    <p>Compare: B1  B2 with B4  B5</p>
    <p>B1: B15  B11  B9  B1</p>
    <p>B2: B15  B11  B9  B2</p>
    <p>B4: B15  B11  B10  B4</p>
    <p>B5: B15  B14  B12  B5</p>
    <p>Solution</p>
    <p>Pre-fetch metadata more aggressively than data</p>
    <p>B2</p>
    <p>B10B9</p>
    <p>B3</p>
    <p>B11</p>
    <p>B1 B4 B6</p>
    <p>B13B12</p>
    <p>B7</p>
    <p>B14</p>
    <p>B5 B8</p>
    <p>B15</p>
    <p>Same file offset distance</p>
    <p>Likely cache miss</p>
  </div>
  <div class="page">
    <p>Weighted LRU Policy for Block Cache</p>
    <p>Problem: different access pattern for data and metadata blocks</p>
    <p>Data blocks being read</p>
    <p>Clean pages, pinned until read completes</p>
    <p>Looked-up once, then unlikely to be needed again (for streaming workloads)</p>
    <p>Data blocks pre-fetched</p>
    <p>Clean pages, not pinned</p>
    <p>Should avoid evicting before they are read</p>
    <p>Metadata blocks</p>
    <p>Looked-up more than once, but with large duration between accesses</p>
    <p>Solution: cache eviction policy that favors metadata blocks</p>
    <p>Insert  Assign weight based on block type</p>
    <p>Lookup  Reset to initial weight, and make MRU in that bucket</p>
    <p>Reclaim  Evict blocks with zero weight;</p>
    <p>Decrease everybody elses weight with 1</p>
  </div>
  <div class="page">
    <p>Weighted LRU</p>
    <p>Different block weights  initial metadata block weight:</p>
    <p>initial data block weight:</p>
    <p>Reclamation  evict 0-weight blocks</p>
    <p>reduce all weights by 1</p>
    <p>B2</p>
    <p>B10B9</p>
    <p>B3</p>
    <p>B11</p>
    <p>B1 B4 B6</p>
    <p>B13B12</p>
    <p>B7</p>
    <p>B14</p>
    <p>B8</p>
    <p>B15</p>
    <p>B15B9</p>
    <p>B4</p>
    <p>B3 B11</p>
    <p>B10</p>
    <p>B14</p>
    <p>B12</p>
  </div>
  <div class="page">
    <p>Weighted LRU</p>
    <p>Different block weights  initial metadata block weight:</p>
    <p>initial data block weight:</p>
    <p>Reclamation  evict 0-weight blocks</p>
    <p>reduce all weights by 1</p>
    <p>B15B9</p>
    <p>B4</p>
    <p>B3</p>
    <p>B2</p>
    <p>B10B9</p>
    <p>B3</p>
    <p>B11</p>
    <p>B1 B4 B6</p>
    <p>B13B12</p>
    <p>B7</p>
    <p>B14</p>
    <p>B8</p>
    <p>B15</p>
    <p>B11</p>
    <p>B10</p>
    <p>B14</p>
    <p>B12</p>
  </div>
  <div class="page">
    <p>Weighted LRU</p>
    <p>Different block weights  initial metadata block weight:</p>
    <p>initial data block weight:</p>
    <p>Reclamation  evict 0-weight blocks</p>
    <p>reduce all weights by 1</p>
    <p>B15B9</p>
    <p>B4</p>
    <p>B3</p>
    <p>B2</p>
    <p>B10B9</p>
    <p>B3</p>
    <p>B11</p>
    <p>B1 B4 B6</p>
    <p>B13B12</p>
    <p>B7</p>
    <p>B14</p>
    <p>B8</p>
    <p>B15</p>
    <p>B11</p>
    <p>B10</p>
    <p>B14</p>
    <p>B12</p>
  </div>
  <div class="page">
    <p>Weighted LRU</p>
    <p>Different block weights  initial metadata block weight:</p>
    <p>initial data block weight:</p>
    <p>Reclamation  evict 0-weight blocks</p>
    <p>reduce all weights by 1</p>
    <p>B15B9</p>
    <p>B3</p>
    <p>B4</p>
    <p>B2</p>
    <p>B10B9</p>
    <p>B3</p>
    <p>B11</p>
    <p>B1 B4 B6</p>
    <p>B13B12</p>
    <p>B7</p>
    <p>B14</p>
    <p>B8</p>
    <p>B15</p>
    <p>B11</p>
    <p>B10</p>
    <p>B14</p>
    <p>B12B6</p>
  </div>
  <div class="page">
    <p>Weighted LRU</p>
    <p>Different block weights  initial metadata block weight:</p>
    <p>initial data block weight:</p>
    <p>Reclamation  evict 0-weight blocks</p>
    <p>reduce all weights by 1</p>
    <p>B4</p>
    <p>B2</p>
    <p>B10B9</p>
    <p>B3</p>
    <p>B11</p>
    <p>B1 B4 B6</p>
    <p>B13B12</p>
    <p>B7</p>
    <p>B14</p>
    <p>B8</p>
    <p>B15</p>
    <p>B15B9</p>
    <p>B3</p>
    <p>B11</p>
    <p>B10 B14</p>
    <p>B12B6</p>
    <p>Reclamation !</p>
  </div>
  <div class="page">
    <p>Weighted LRU</p>
    <p>Different block weights  initial metadata block weight:</p>
    <p>initial data block weight:</p>
    <p>Reclamation  evict 0-weight blocks</p>
    <p>reduce all weights by 1</p>
    <p>B15B9</p>
    <p>B2</p>
    <p>B10B9</p>
    <p>B3</p>
    <p>B11</p>
    <p>B1 B4 B6</p>
    <p>B13B12</p>
    <p>B7</p>
    <p>B14</p>
    <p>B8</p>
    <p>B15</p>
    <p>B11</p>
    <p>B10</p>
    <p>B14</p>
    <p>B12</p>
    <p>B3</p>
    <p>B6 B13B7</p>
    <p>B8</p>
  </div>
  <div class="page">
    <p>Effectiveness of Read Path Optimizations</p>
    <p>Main techniques</p>
    <p>Pre-fetch metadata more aggressively than data</p>
    <p>Weighted-LRU to evict data more aggressively than metadata</p>
    <p>Experiment</p>
    <p>Read a large file</p>
    <p>Accesses Misses Throughput</p>
    <p>(MB/s)Data Metadata</p>
    <p>Base 486,966 1577 1011 134.3</p>
    <p>Optimized 211,632 438 945 183.2</p>
  </div>
  <div class="page">
    <p>Resource Management</p>
    <p>Auxiliary objects</p>
    <p>Pages for data and blocks</p>
    <p>Inodes</p>
    <p>Metadata modification records</p>
    <p>Log blocks</p>
    <p>Pre-allocated, managed</p>
    <p>Fixed-size pools of fixed-size objects</p>
    <p>pages are 4 KB</p>
    <p>inodes are 8 KB</p>
    <p>log blocks are up to 128 KB</p>
    <p>etc.</p>
    <p>Unmanaged heap</p>
    <p>Objects number is bound by that of</p>
    <p>some managed objects</p>
  </div>
  <div class="page">
    <p>Resource Management</p>
    <p>Resource</p>
    <p>Event actions</p>
    <p>Reserved: 0 Allocated: 0 Total: 10</p>
    <p>Admission condition: Requested + Reserved + Allocated  Total</p>
  </div>
  <div class="page">
    <p>Resource Management</p>
    <p>Resource</p>
    <p>Event actions</p>
    <p>Reserved: 0 Allocated: 0 Total: 10</p>
    <p>Event 1 created events requirements</p>
    <p>determined by event type</p>
  </div>
  <div class="page">
    <p>Resource Management</p>
    <p>Resource</p>
    <p>Event actions</p>
    <p>Reserved: 4 Allocated: 0 Total: 10</p>
    <p>Event 1 created</p>
    <p>Event 1 admitted</p>
  </div>
  <div class="page">
    <p>Resource Management</p>
    <p>Resource</p>
    <p>Event actions</p>
    <p>Reserved: 4 Allocated: 4 Total: 10</p>
    <p>Event 1 created</p>
    <p>Event 1 admitted</p>
    <p>Event 1 allocates 4</p>
  </div>
  <div class="page">
    <p>Resource Management</p>
    <p>Resource</p>
    <p>Event actions</p>
    <p>Reserved: 0 Allocated: 4 Total: 10</p>
    <p>Event 1 created</p>
    <p>Event 1 admitted</p>
    <p>Event 1 allocates 4</p>
    <p>Event 1 completes</p>
    <p>events</p>
    <p>reservations</p>
    <p>are released may leave behind</p>
    <p>allocated resources</p>
  </div>
  <div class="page">
    <p>Resource Management</p>
    <p>Resource</p>
    <p>Event actions</p>
    <p>Reserved: 0 Allocated: 4 Total: 10</p>
    <p>Event 1 created</p>
    <p>Event 1 admitted</p>
    <p>Event 1 allocates 4</p>
    <p>Event 1 completes</p>
    <p>Event 2 created</p>
  </div>
  <div class="page">
    <p>Resource Management</p>
    <p>Resource</p>
    <p>Event actions</p>
    <p>Reserved: 3 Allocated: 4 Total: 10</p>
    <p>Event 1 created</p>
    <p>Event 1 admitted</p>
    <p>Event 1 allocates 4</p>
    <p>Event 1 completes</p>
    <p>Event 2 created</p>
    <p>Event 2 admitted</p>
  </div>
  <div class="page">
    <p>Resource Management</p>
    <p>Resource</p>
    <p>Event actions</p>
    <p>Reserved: 3 Allocated: 6 Total: 10</p>
    <p>Event 1 created</p>
    <p>Event 1 admitted</p>
    <p>Event 1 allocates 4</p>
    <p>Event 1 completes</p>
    <p>Event 2 created</p>
    <p>Event 2 admitted</p>
    <p>Event 2 allocates 2</p>
  </div>
  <div class="page">
    <p>Resource Management</p>
    <p>Resource</p>
    <p>Event actions</p>
    <p>Reserved: 3 Allocated: 6 Total: 10</p>
    <p>Event 2 allocates 2</p>
    <p>Event 3 created</p>
    <p>Event is blocked</p>
  </div>
  <div class="page">
    <p>Resource Management</p>
    <p>Resource</p>
    <p>Event actions</p>
    <p>Reserved: 3 Allocated: 6 Total: 10</p>
    <p>Event 2 allocates 2</p>
    <p>Event 3 created</p>
    <p>Event 4 created</p>
    <p>Blocked behind event 3</p>
    <p>FIFO admission</p>
  </div>
  <div class="page">
    <p>Resource Management</p>
    <p>Resource</p>
    <p>Event actions</p>
    <p>Reserved: 3 Allocated: 4 Total: 10</p>
    <p>Event 2 allocates 2</p>
    <p>Event 3 created</p>
    <p>Event 4 created</p>
    <p>Event 2 frees 2</p>
    <p>On free, admission</p>
    <p>condition re-evaluated</p>
  </div>
  <div class="page">
    <p>Resource Management</p>
    <p>Resource</p>
    <p>Event actions</p>
    <p>Reserved: 6 Allocated: 4 Total: 10</p>
    <p>Event 2 allocates 2</p>
    <p>Event 3 created</p>
    <p>Event 4 created</p>
    <p>Event 2 frees 2</p>
    <p>Event 3 admitted</p>
  </div>
  <div class="page">
    <p>Resource Management</p>
    <p>Resource</p>
    <p>Event actions</p>
    <p>Reserved: 3 Allocated: 4 Total: 10</p>
    <p>Event 2 allocates 2</p>
    <p>Event 3 created</p>
    <p>Event 4 created</p>
    <p>Event 2 frees 2</p>
    <p>Event 3 admitted</p>
    <p>Event 2 completes</p>
    <p>On un-reserve, admission</p>
    <p>condition re-evaluated</p>
  </div>
  <div class="page">
    <p>Resource Management - Reclamation</p>
    <p>Reclamation processing</p>
    <p>First, free pages from clean cached blocks</p>
    <p>If not sufficient, initiate flush of dirty inodes</p>
    <p>Flush is an internal event with pre-reserved resources</p>
    <p>Reclamation initiated when</p>
    <p>An event is blocked</p>
    <p>A threshold is reached</p>
    <p>Threshold limit depends on resource type</p>
    <p>Metadata modification records can only be cleaned through</p>
    <p>metadata update  start earlier</p>
    <p>Others (pages, log blocks) can be cleaned quicker  start later</p>
  </div>
  <div class="page">
    <p>Resource Management</p>
    <p>Limits the amount of memory used (avoid swapping)</p>
    <p>Avoids handling allocation failures in the middle of event</p>
    <p>processing</p>
    <p>Avoids event starvation through FIFO processing</p>
    <p>Simple but effective (allows high utilization of resources)</p>
    <p>P a</p>
    <p>g e</p>
    <p>m e</p>
    <p>m o</p>
    <p>ry (</p>
    <p>M B</p>
    <p>)</p>
    <p>Time</p>
    <p>Memory reserved and allocated during sequential write</p>
    <p>Total</p>
    <p>Allocated</p>
    <p>Reserved</p>
  </div>
  <div class="page">
    <p>Experiments</p>
    <p>Requests can be rejected (system busy)</p>
    <p>Clients notified to resume submission</p>
    <p>Submit requests until busy, resumes as soon as notified</p>
    <p>Maximum concurrency; No parent-child structures</p>
    <p>Upper limit of performance</p>
    <p>Tool</p>
    <p>Flow control</p>
    <p>API</p>
    <p>T h</p>
    <p>ro u</p>
    <p>g h</p>
    <p>p u</p>
    <p>t (M</p>
    <p>B /s</p>
    <p>)</p>
    <p>Duplicate ratio (%)</p>
    <p>Hydra block store</p>
    <p>HydraFS</p>
    <p>read write</p>
  </div>
  <div class="page">
    <p>Conclusions and Future Work</p>
    <p>Conclusions</p>
    <p>Building a filesystem for a content-addressable storage system with</p>
    <p>content-defined chunking poses interesting challenges</p>
    <p>A small number of techniques was sufficient to overcome them while</p>
    <p>keeping the system relatively simple and achieving high throughput</p>
    <p>Future work</p>
    <p>Distribute the filesystem</p>
    <p>Use SSD to improve performance for metadata intensive workloads</p>
  </div>
  <div class="page">
    <p>Thank you!</p>
    <p>We are hiring! http://www.nec-labs.com/jobs/</p>
  </div>
</Presentation>
