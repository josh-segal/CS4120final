<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>KCAL: Kernel-support Cost-effective Audit Logging for Causality Tracking</p>
    <p>Shiqing Ma, Juan Zhai, Yonghwi Kwon, Kyu Hyung Lee, Xiangyu Zhang, Gabriela Ciocarlie, Ashish Gehani, Vinod Yegneswaran, Dongyan Xu, Somesh Jha</p>
  </div>
  <div class="page">
    <p>Background: Forensics Analysis with Audit Log</p>
    <p>TaskmanFD</p>
  </div>
  <div class="page">
    <p>Linux Audit Framework</p>
    <p>Integrated with many other tools, e.g., Orchids, Prelude siem  Kernel component is shipped with mainline kernel</p>
    <p>Most Popular Audit Framework on Linux</p>
    <p>Linux kernel component + user-space tools (e.g., Auditd, go-audit)  Logging all system calls, monitoring file accesses etc.</p>
    <p>The Linux Audit Framework</p>
    <p>Problems: 1) Slow. 2) Large log files.</p>
  </div>
  <div class="page">
    <p>RT Overhead: 40% for some programs</p>
  </div>
  <div class="page">
    <p>Space Overhead: 2 to 40 GB/day</p>
    <p>LO G</p>
    <p>S IZ</p>
    <p>E (G</p>
    <p>B)</p>
    <p>TIME (DAY)</p>
    <p>Max Avg(Server) Avg(Client) Min</p>
  </div>
  <div class="page">
    <p>auditd</p>
    <p>Kernel Netlink</p>
    <p>Syscall</p>
    <p>User</p>
    <p>Exit</p>
    <p>Task</p>
    <p>Exclude</p>
    <p>Application</p>
    <p>Disk I/O for logging: 50% of the total</p>
    <p>overhead due to large #events</p>
    <p>Netlinke events transmission: 45% of the total overhead caused by queueing etc.</p>
    <p>Kernel event filtering: 5% of the total overhead</p>
    <p>Large log file size: 2 to 40 GB/day</p>
    <p>Linux Audit System Overhead (Comparing with Linux with Audit disabled)</p>
    <p>Overhead caused by the Audit system (generating / transmitting /</p>
    <p>logging events), measured by application</p>
    <p>benchmarks.</p>
  </div>
  <div class="page">
    <p>Problem: # Logged events is large</p>
    <p># logged ev ents  larg</p>
    <p>e log files</p>
    <p># logged events  filter/transfer/writing</p>
    <p>Question: is reducing the # log events possible?</p>
    <p>Large files are hard to</p>
    <p>investigate.</p>
    <p>High RT overhead</p>
    <p>makes system not useable.</p>
  </div>
  <div class="page">
    <p>Log Redundancy</p>
    <p>Audit log is redundant for forensics analysis</p>
    <p>Redundant events: event that represent the same dependency relationships (from the forensics point of view)</p>
  </div>
  <div class="page">
    <p>KCAL: Do not generate redundant events.</p>
    <p>Kernel Shared</p>
    <p>Memory Log File</p>
    <p>Modified KAudit</p>
    <p>auditd</p>
    <p>File Events Cache</p>
    <p>Process Dependence</p>
    <p>Cache</p>
    <p>Unit Dep Cache</p>
    <p>Application</p>
    <p>Performs online log reduction</p>
    <p>Modified data structure to help log reduction</p>
    <p>Replace Netlink with shared memory</p>
    <p>Execution-unit applications</p>
  </div>
  <div class="page">
    <p>Data Channel: Shared Memory</p>
    <p>TI M</p>
    <p>E (C</p>
    <p>PU C</p>
    <p>YC LE</p>
    <p>S)</p>
    <p>Size per messsage</p>
    <p>Netlink Message Queue Shared Memory</p>
  </div>
  <div class="page">
    <p>Dependence Analysis: Execution-unit Based</p>
    <p>Dependence analysis is hard in forensics analysis  Dependence explosion</p>
    <p>Execution-unit  Part of a process execution</p>
    <p>More details, see  BEEP (NDSS13)  MPI (USENIX Security17, Distinguished</p>
    <p>Paper Award)</p>
    <p>File</p>
    <p>Firefox</p>
    <p>File</p>
  </div>
  <div class="page">
    <p>Log Reduction: In-unit Redundancy</p>
    <p>The same operation(s) on the same object within the same unit</p>
    <p>Case: Vim loading a file</p>
    <p>Application logic or limited buffer size</p>
    <p>while(content=read(fd) &gt; 0) {</p>
    <p>insert_content(root, content)</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>Log Reduction: Cross-unit Redundancy</p>
    <p>Different units are doing the same thing</p>
    <p>Case: repeated operations  Vim save file</p>
    <p>Tracking to one of them is sufficient to build the graph</p>
  </div>
  <div class="page">
    <p>Log Reduction: Temporary Files</p>
    <p>Temporary file  Created/operated/deleted by the same</p>
    <p>process</p>
    <p>Case: web resources  If not stored explicitly, most will be</p>
    <p>deleted later</p>
    <p>Files that are too large for memory</p>
  </div>
  <div class="page">
    <p>KCAL: Log Redundancy Detection Components</p>
    <p>Kernel Shared</p>
    <p>Memory</p>
    <p>Modified KAudit</p>
    <p>File Events Cache</p>
    <p>Process Dependence</p>
    <p>Cache</p>
    <p>Unit Dep Cache</p>
    <p>In-unit redundancy</p>
    <p>detection</p>
    <p>Cross-unit redundancy</p>
    <p>detection</p>
    <p>Temporary file redundancy detection</p>
    <p>Application</p>
    <p>Idea: Dependency relationships are cached.</p>
    <p>Redundancy detection logic</p>
  </div>
  <div class="page">
    <p>KCAL-RT Overhead: &lt;16%</p>
  </div>
  <div class="page">
    <p>KCAL-Space Overhead: &lt;4GB/day</p>
    <p>LO G</p>
    <p>S IZ</p>
    <p>E (G</p>
    <p>B)</p>
    <p>TIME (DAY)</p>
    <p>Max Avg(Server) Avg(Client) Min</p>
  </div>
  <div class="page">
    <p>KCAL: Redundancy Analysis In-Unit</p>
    <p>Redundency Cross-Unit</p>
    <p>Redundancy Temporary</p>
    <p>Files KCAL</p>
    <p>Events Machine 1 69% 7% 16% 8%</p>
    <p>Machine 2 71% 10% 9% 10%</p>
    <p>Machine 3 56% 10% 21% 13%</p>
    <p>Machine 4 21% 46% 24% 9%</p>
    <p>Machine 5 29% 43% 13% 14%</p>
    <p>Avg. 51% 21% 16% 11%</p>
    <p>More evaluation results in paper !</p>
  </div>
  <div class="page">
    <p>Discussion</p>
    <p>KCAL is for forensics analysis only  Linux Audit framework is a general audit framework</p>
    <p>KCAL requires instrumented applications to support execution-unit based log reduction  Leveraging other online log reduction algorithms is also possible</p>
    <p>KCAL modifies the kernel source code  Porting from 3.19 to 3.2 requires an addition 8 line patch</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>KCAL: Kernel-support Cost-effective Audit Logging for Causality Tracking  Based on the Linux Audit Framework  For forensics analysis  Low runtime, space overhead  Reduce redundant events before generating them</p>
    <p>Reduces overhead caused by transferring, writing, storing redundant events</p>
  </div>
  <div class="page"/>
</Presentation>
