<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Alan Shieh Cornell University</p>
    <p>Srikanth Kandula Albert Greenberg Changhoon Kim Microsoft Research</p>
    <p>Seawall: Performance Isolation for Cloud Datacenter Networks</p>
  </div>
  <div class="page">
    <p>Cloud datacenters: Benefits and obstacles</p>
    <p>Moving to the cloud has manageability, costs &amp; elasticity benefits  Selfish tenants can monopolize resources  Compromised &amp; malicious tenants can degrade system performance  Problems already occur</p>
    <p>Spammers on AWS Bitbucket DoS attack</p>
    <p>Runaway client overloads storage</p>
  </div>
  <div class="page">
    <p>Goals</p>
    <p>Existing mechanisms are insufficient for cloud</p>
    <p>Isolate tenants to avoid collateral damage  Control each tenants share of network  Utilize all network capacity  Constraints</p>
    <p>Cannot trust tenant code  Minimize network reconfiguration during VM churn  Minimize end host and network cost</p>
  </div>
  <div class="page">
    <p>In-network queuing and rate limiting Existing mechanisms are insufficient</p>
    <p>HV</p>
    <p>Guest HV</p>
    <p>Guest Not scalable. Can underutilize links.</p>
  </div>
  <div class="page">
    <p>Existing mechanisms are insufficient  In-network queuing and rate limiting</p>
    <p>Network-to-source congestion control (Ethernet QCN)</p>
    <p>HV</p>
    <p>Guest HV</p>
    <p>Guest</p>
    <p>Throttle send rate</p>
    <p>Detect congestion</p>
    <p>HV</p>
    <p>Guest HV</p>
    <p>Guest Not scalable. Can underutilize links.</p>
    <p>Requires new hardware. Inflexible policy.</p>
  </div>
  <div class="page">
    <p>In-network queuing and rate limiting</p>
    <p>Network-to-source congestion control (Ethernet QCN)</p>
    <p>End-to-end congestion control (TCP)</p>
    <p>HV</p>
    <p>Guest HV</p>
    <p>Guest</p>
    <p>HV</p>
    <p>Guest HV</p>
    <p>Guest</p>
    <p>HV</p>
    <p>Guest</p>
    <p>HV</p>
    <p>Guest</p>
    <p>Throttle send rate</p>
    <p>Existing mechanisms are insufficient</p>
    <p>Detect congestion</p>
    <p>Not scalable. Can underutilize links.</p>
    <p>Requires new hardware. Inflexible policy.</p>
    <p>Poor control over allocation. Guests can change TCP stack.</p>
  </div>
  <div class="page">
    <p>Seawall = Congestion controlled, hypervisor-to-hypervisor tunnels</p>
    <p>Benefits  Scales to # of tenants, flows, and churn  Dont need to trust tenant  Works on commodity hardware  Utilizes network links efficiently  Achieves good performance</p>
    <p>(1 Gb/s line rate &amp; low CPU overhead)</p>
    <p>HV</p>
    <p>Guest</p>
    <p>HV</p>
    <p>Guest</p>
  </div>
  <div class="page">
    <p>Components of Seawall</p>
    <p>Hypervisor kernel</p>
    <p>Guest Guest Root</p>
    <p>Seawall rate controller allocates network resources for each output flow  Goal: achieve utilization and division</p>
    <p>Seawall ports enforce decisions of rate controller  Lie on forwarding path  One per VM source/destination pair</p>
    <p>SW-port</p>
    <p>SW-port</p>
    <p>SW-rate controller</p>
  </div>
  <div class="page">
    <p>SW-port</p>
    <p>Seawall port  Rate limit transmit traffic  Rewrite and monitor traffic to support congestion control  Exchanges congestion feedback and rate info with controller</p>
    <p>Congestion detector</p>
    <p>Guest Inspect packets</p>
    <p>Tx Rate limiter</p>
    <p>Rewrite packets</p>
    <p>New rate</p>
    <p>SW-rate controller</p>
    <p>Congestion info</p>
  </div>
  <div class="page">
    <p>Rate controller: Operation and control loop</p>
    <p>Algorithm divides network proportional to weights &amp; is max/min fair  Efficiency: AIMD with faster increase  Traffic-agnostic allocation:</p>
    <p>Per-link share is same regardless of # of flows &amp; destinations</p>
    <p>Source</p>
    <p>Reduce rate SW-rate controller</p>
    <p>SW-port</p>
    <p>Dest SW-rate controller</p>
    <p>SW-port</p>
    <p>Congestion info</p>
    <p>X</p>
    <p>Rate controller adjusts rate limit based on presence and absence of loss Got 1,2,4 Congestion feedback</p>
  </div>
  <div class="page">
    <p>VM 1 VM 2 VM 3 (weight = 2)</p>
    <p>VM 2 flow 1</p>
    <p>VM 2 flow 2 VM 2 flow 3 VM 3: ~50%</p>
    <p>VM 2: ~25%</p>
    <p>VM 1: ~25%</p>
  </div>
  <div class="page">
    <p>Improving SW-port performance  How to add congestion control header to packets?  Nave approach: Use encapsulation, but poses problems</p>
    <p>More code in SW-Port  Breaks hardware optimizations that depend on header format</p>
    <p>Packet ACLs: Filter on TCP 5-tuple  Segmentation offload: Parse TCP header to split packets  Load balancing: Hash on TCP 5-tuple to spray packets (e.g. RSS)</p>
    <p>Encapsulation</p>
  </div>
  <div class="page">
    <p>Bit stealing solution: Use spare bits from existing headers  Constraints on header modifications</p>
    <p>Network can route &amp; process packet  Receiver can reconstruct for guest</p>
    <p>Other protocols: might need paravirtualization.</p>
    <p>IP IP-ID</p>
    <p>TCP Timestamp option</p>
    <p># p</p>
    <p>ac ke</p>
    <p>ts</p>
    <p>Se q</p>
    <p>#</p>
    <p>Constant</p>
    <p>Unused</p>
  </div>
  <div class="page">
    <p>Bit stealing solution: Performance improvement</p>
    <p>Encapsulation Bit stealing</p>
    <p>Throughput: 280 Mb/s =&gt; 843 Mb/s</p>
  </div>
  <div class="page">
    <p>Supporting future networks  Hypervisor vSwitch scales to 1 Gbps, but may be bottleneck for</p>
    <p>Hypervisor &amp; multi-core optimizations  Bypass hypervisor with direct I/O (e.g. SR-IOV)  Virtualization-aware physical switch (e.g. NIV, VEPA)</p>
    <p>While efficient, currently direct I/O loses policy control  Future SR-IOV NICs support classifiers, filters, rate limiters</p>
  </div>
  <div class="page">
    <p>SW-port Congestion detector</p>
    <p>Guest</p>
    <p>Tx Rate limiter</p>
    <p>Inspect packets</p>
    <p>Rewrite packets</p>
    <p>SW-rate controller</p>
    <p>Guest</p>
    <p>I/ O</p>
    <p>v ia</p>
    <p>H V</p>
    <p>SW-port Congestion detector DRR</p>
    <p>Tx counter</p>
    <p>Rx counter</p>
    <p>D ir</p>
    <p>ec t</p>
    <p>I/ O</p>
  </div>
  <div class="page">
    <p>Summary  Without performance isolation, no protection in cloud against</p>
    <p>selfish, compromised &amp; malicious tenants  Hypervisor rate limiters + end-to-end rate controller provide</p>
    <p>isolation, control, and efficiency  Prototype achieves performance and security on commodity</p>
    <p>hardware</p>
  </div>
  <div class="page">
    <p>Preserving performance isolation after hypervisor compromise</p>
    <p>Compromised hypervisor at source can flood network  Solution:</p>
    <p>Use network filtering to isolate sources that violate congestion control  Destinations act as detector</p>
    <p>BAD</p>
    <p>SW enforcer</p>
    <p>X</p>
    <p>Isolate</p>
    <p>is bad</p>
  </div>
  <div class="page">
    <p>Pitfall: If destination is compromised, danger of DoS from false accusations</p>
    <p>Refinement: Apply least privilege (i.e. fine-grained filtering)</p>
    <p>SW enforcer</p>
    <p>X</p>
    <p>Isolate</p>
    <p>is bad</p>
    <p>BAD</p>
    <p>Drop</p>
    <p>Preserving performance isolation after hypervisor compromise</p>
  </div>
</Presentation>
