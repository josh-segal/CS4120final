<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Formalising the Swedish Constructicon in Grammatical Framework</p>
    <p>Normunds Grztis1,3, Dana Dannlls2, Benjamin Lyngfelt2, Aarne Ranta1</p>
    <p>ACL/IJCNLP Workshop on Grammar Engineering Across Frameworks Beijing, China, July 30, 2015</p>
  </div>
  <div class="page">
    <p>Constructicon  A collection of conventionalized (learned) pairings of form and meaning</p>
    <p>(or function), typically based on principles of Construction Grammar, CxG (e.g. Fillmore et al. 1988, Goldberg 1995)</p>
    <p>Semantics is associated directly with the surface form  vs. Lexical units in a dictionary: pairings of word and meaning (frame)</p>
    <p>Including fixed multi-word units</p>
    <p>Each construction (cx) contains at least one variable element  Often at least one fixed element as well  Thus, somewhere in-between the syntax and the lexicon</p>
    <p>An example from Berkeley Constructicon: make ones way  Structure: {Motion verb [Verb] [PossNP]}  Frame: MOTION</p>
    <p>[ThemeThey] {hacked their way} [Sourceout] [Goalinto the open].  [ThemeWe] {sang our way} [Pathacross Europe].</p>
  </div>
  <div class="page">
    <p>Constructicons  Berkeley Constructicon (BCxn) for English</p>
    <p>A pilot project (around 70 cx), linked to Berkeley FrameNet</p>
    <p>Swedish Constructicon (SweCcn)  An ongoing project (nearly 400 cx so far), partially linked to FrameNet</p>
    <p>ToDo: links to BCxn</p>
    <p>Brazilian Portuguese Constructicon  An ongoing project</p>
    <p>...</p>
    <p>A multilingual (interlingual) constructicon would allow for noncompositional translation in a compositional way  Constructions with a referential meaning may be linked via FrameNet frames,</p>
    <p>while those with a more abstract grammatical function may be related in terms of their grammatical properties [Bckstrm L., Lyngfelt B., Skldberg E. (2014) Towards interlingual constructicography]</p>
  </div>
  <div class="page">
    <p>http://spraakbanken.gu.se/eng/sweccn</p>
  </div>
  <div class="page">
    <p>SweCcn  Partially schematic multi-word units/expressions</p>
    <p>Particularly addresses constructions of relevance for second-language learning, but also covers argument structure constructions</p>
    <p>Descriptions are manually derived from corpus examples</p>
    <p>Construction elements (CE):  Internal CEs are a part of the cx  External CEs are a part of</p>
    <p>the valency of the cx  Described in more detail by</p>
    <p>attribute-value matrices specifying their syntactic and semantic features</p>
    <p>A central part of cx descriptions is the free text definitions  eat himself full vs. feel himself tired</p>
    <p>(ta sig mtt vs. knna sig trtt)</p>
  </div>
  <div class="page">
    <p>SweCcn  GF  Task: convert the semi-formal SweCcn into a computational CxG</p>
    <p>Test Grammatical Framework (GF) as a framework for implementing CxG</p>
    <p>Why GF?  There is no formal distinction between lexical and syntactic functions in GF</p>
    <p>fits the nature of constructicons  The potential support for multilinguality  Based on GF Resource Grammar Library (RGL) / an extension to RGL  An extension to a FrameNet-based grammar and lexicon in GF</p>
    <p>Goals:  From the linguistic point of view</p>
    <p>Improve insights into the interaction between the lexicon and the grammar  Allow for testing the linguistic descriptions of constructions</p>
    <p>From the language technology point of view:  Facilitate the language processing in both mono- and multilingual settings</p>
    <p>e.g. Information Extraction, Machine Translation</p>
  </div>
  <div class="page">
    <p>Conversion steps  Preprocessing:</p>
    <p>Automatic normalization and consistency checking  Automatic rewriting of the original structures in case of optional CEs and</p>
    <p>alternative types of CEs, so that each combination has a separate GF function  Does not apply to alternative LUs (either free variants or should be split into</p>
    <p>alternative constructions, or the CE should be made more general)</p>
    <p>Automatic conversion of SweCcn categories to RGL categories  May result in more rewriting</p>
    <p>Automatic generation of the abstract syntax  Automatic generation of the concrete syntax</p>
    <p>By systematically applying the high-level RGL constructors  And limited low-level means</p>
    <p>Manual verification and completion (ToDo)  Requires a good knowledge and linguistic intuition of the language</p>
  </div>
  <div class="page">
    <p>Preprocessing examples  behva NP1 till NP2|VP</p>
    <p>behvaV NP1 tillPrep NP2 | behvaV NP tillPrep VP</p>
    <p>snacka|prata|tala NPindef  (~synonyms of to talk) snackaV|prataV|talaV aSg_Det CN | snackaV|prataV|talaV aPl_Det CN | snackaV|prataV|talaV CN</p>
    <p>V av Pnrefl (NP)  V avPrep reflPron NP | V avPrep reflPron</p>
    <p>N|Adj+stda  (compounds) N + stdaV | A + stdaV</p>
  </div>
  <div class="page">
    <p>Abstract syntax  Each construction is represented by one or more functions</p>
    <p>depending on how many alternative structures are produced in the preprocessing steps</p>
    <p>Each function takes one or more arguments that correspond to the variable CEs of the respective alternative construction</p>
    <p>behva_ngot_till_ngot_VP1 : NP -&gt; NP -&gt; VP behva_ngot_till_ngot_VP2 : NP -&gt; VP -&gt; VP</p>
    <p>snacka_NP1: CN -&gt; VP snacka_NP2: CN -&gt; VP snacka_NP3: CN -&gt; VP</p>
    <p>verba_av_sig_transitiv1: V -&gt; NP -&gt; VP verba_av_sig_transitiv2: V -&gt; VP</p>
    <p>x_stda1: N -&gt; VP x_stda2: A -&gt; VP</p>
  </div>
  <div class="page">
    <p>Concrete syntax</p>
    <p>Construction Elements Patterns</p>
    <p>behva_ngot_till_ngot_VP_1 behva_V NP_1 till_Prep NP_2 {V} NP {Prep} NP</p>
    <p>behva_ngot_till_ngot_VP_2 behva_V NP_1 till_Prep VP {V} NP {Prep} VP</p>
    <p>Code template</p>
    <p>Many constructions can be implemented by systematically applying the high-level RGL constructors  A parsing problem: which constructors in which order?</p>
    <p>A simple GF grammar</p>
    <p>Final code (by automatic post-processing)</p>
    <p>lin behva_ngot_till_ngot_VP_1 np_1 np_2 = mkVP (mkVP (mkV2 (mkV &quot;behver&quot;)) np_1) (SyntaxSwe.mkAdv (mkPrep &quot;till&quot;) np_2) ;</p>
  </div>
  <div class="page">
    <p>GF RGL API</p>
  </div>
  <div class="page">
    <p>Code-generating grammar</p>
    <p>A simplified fragment of the abstract syntax</p>
    <p>A simplified fragment of the concrete syntax</p>
    <p>parse -cat=VP &quot;{V} {Prep} NP&quot;</p>
    <p>mkVP__V2_NP (mkV2__V (partV _mkV___V (toStr__Prep _mkPrep_))) _NP_</p>
    <p>mkVP__V2_NP (mkV2__V_Prep _mkV___V _mkPrep_) _NP_</p>
    <p>mkVP__VP_Adv (mkVP__V _mkV___V) (mkAdv _mkPrep_ _NP_)</p>
  </div>
  <div class="page">
    <p>Running examples  parse &quot;jag behver ngot till ngot&quot;</p>
    <p>PredVP (UsePron i_Pron) (behva_ngot_till_ngot_1 (DetNP someSg_Det) (DetNP someSg_Det))</p>
    <p>PredVP (UsePron i_Pron) (behva_ngot_till_ngot_1 (DetNP someSg_Det) something_NP)</p>
    <p>PredVP (UsePron i_Pron) (behva_ngot_till_ngot_1 something_NP (DetNP someSg_Det))</p>
    <p>PredVP (UsePron i_Pron) (behva_ngot_till_ngot_1 something_NP something_NP)</p>
    <p>parse &quot;han ter sig mtt&quot;  PredVP (UsePron he_Pron)</p>
    <p>(reflexiv_resultativ aeta_vb_1_1_V (PositA maett_av_1_1_A))  PredVP (UsePron he_Pron)</p>
    <p>(AdvVP (SI_refl aeta_vb_1_1_V) (PositAdvAdj maett_av_1_1_A))  PredVP (UsePron he_Pron)</p>
    <p>(AdvVP (reciprok_refl aeta_vb_1_1_V) (PositAdvAdj maett_av_1_1_A))  PredVP (UsePron he_Pron)</p>
    <p>(AdvVP (trans_refl aeta_vb_1_1_V) (PositAdvAdj maett_av_1_1_A))  PredVP (UsePron he_Pron)</p>
    <p>(V_refl_rrelse aeta_vb_1_1_V (PositAdvAdj maett_av_1_1_A))</p>
  </div>
  <div class="page">
    <p>Results  In the current experiment, we have considered only the 96 VP</p>
    <p>constructions which resulted in 127 functions  Dominating in SweCcn; have the most complex internal structure</p>
    <p>Given the 127 functions, we have automatically generated the implementation for 98 functions (77%) achieving a 7090% accuracy  There is clear space for improvement</p>
    <p>Manual completion postponed because of the active development of SweCcn (changes  synchronization)</p>
    <p>https://github.com/GrammaticalFramework/gf-contrib (SweCcn)</p>
    <p>A methodology on how to systematically formalise the semi-formal representation of SweCcn in GF, showing that a GF construction grammar can be, to a large extent, acquired automatically</p>
    <p>Consequence: feedback to SweCcn developers on how to improve the annotation consistency and adequacy of the original construction resource</p>
  </div>
</Presentation>
