<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Cloaking Malware with the Trusted Platform Module</p>
    <p>Alan Dunn, Owen Hofmann, Brent Waters, Emmett Witchel</p>
    <p>University of Texas at Austin USENIX Security August 12, 2011</p>
  </div>
  <div class="page">
    <p>Trusted Computing</p>
    <p>Goal: Secure environment for computation  Trust rooted in hardware  Most familiar: Trusted Platform Module (TPM)</p>
    <p>Standard by Trusted Computing Group (TCG)  IC in x86 machines connected to southbridge  Widely deployed (&gt; 350 million TPMs)</p>
  </div>
  <div class="page">
    <p>Uses of Trusted Computing</p>
    <p>Typical: TPM provides hardware root of trust  Store cryptographic hash of executed software  Perform cryptography, store secret keys  Provide hardware-protected execution environment</p>
    <p>Ours: TPM provides hardware cloak for malware  Only run unmodified malware  Store malware secret keys  No monitoring/debuggers/virtualization</p>
  </div>
  <div class="page">
    <p>Conficker B Explanation get_updates()</p>
    <p>gen_domains() date = get_date_from_web() calculate domains</p>
    <p>for domain in domains: content = fetch_content(domains) if (check_sig(content)) apply_update(content)</p>
    <p>! Contact websites</p>
    <p>www.google.com</p>
    <p>aijuer.com lkpexhjz.org</p>
    <p>8/13/118/12/11</p>
    <p>Goal for malware writers: Secure and</p>
    <p>hidden malware subcomputation</p>
    <p>Secure date mechanism</p>
    <p>Conficker B Analysis</p>
    <p>TPM can help malware writers achieve this goal: Execute computation securely in non-analyzable</p>
    <p>environment</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Protocol Overview  Protocol  Implementation  Defenses</p>
  </div>
  <div class="page">
    <p>Late launch environment</p>
    <p>Infected Platform Malware Distribution Platform (MDP)</p>
    <p>Put platform in known nonanalyzable state  Restrict payload decryption to non-analyzable state</p>
    <p>Protocol Overview</p>
    <p>Infection Payload Loader</p>
    <p>main()</p>
    <p>sensitive_calc()</p>
    <p>normal_calc()</p>
    <p>sensitive_calc()</p>
  </div>
  <div class="page">
    <p>Put platform in non-analyzable state</p>
    <p>Suspend all system software, jump into known software state</p>
    <p>Late launch performs jump, records program jumped to via hash</p>
    <p>Infected Platform</p>
    <p>Late launch environment</p>
    <p>Infection Payload Loader</p>
  </div>
  <div class="page">
    <p>Restricting payload decryption</p>
    <p>TPM controls private key use for keypairs it generates  Binding key constrained to use in non-analyzable state  Certificates show Endorsement Key (EK) belongs to legitimate</p>
    <p>TPM  Remote attestation proves binding key generated by same</p>
    <p>party as EK, so payload only decryptable in late launch</p>
    <p>Infected Platform Malware Distribution Platform (MDP)Binding key</p>
    <p>Malicious payload</p>
  </div>
  <div class="page">
    <p>Late Launch</p>
    <p>SENTER instruction transfers control to binary, sets TPM register based upon cryptographic hash of binary  Allows binary to execute securely: stop other cores,</p>
    <p>turn off interrupts  For malware:</p>
    <p>Transfer control to Infection Payload Loader (IPL)  IPL hash satisfies key use constraint  IPL decrypts, transfers control to malicious payload</p>
  </div>
  <div class="page">
    <p>Validating the Binding Key</p>
    <p>Endorsement Key (EK)  unique identifying key, certified by TPM manufacturer</p>
    <p>Sign(EK, M1)</p>
    <p>Sign(EK, M2)</p>
    <p>Correlate transactionsA</p>
    <p>P1</p>
    <p>P2</p>
    <p>Sign binding key with EK? Forbidden!</p>
    <p>EK identifying, compromises anonymity</p>
  </div>
  <div class="page">
    <p>TPM Identity (EK) with Indirection (AIK)</p>
    <p>Attestation Identity Keys (AIKs) fix anonymity  Privacy CA vouches that AIK represents EK</p>
    <p>Sign(AIK1, M1)</p>
    <p>Sign(AIK2, M2)</p>
    <p>A</p>
    <p>P1</p>
    <p>P2</p>
    <p>C</p>
    <p>Establish EK legitimacy, AIKs proxy</p>
    <p>for EK C vouches for legitimacy of</p>
    <p>AIKs</p>
    <p>C is a Privacy CA</p>
    <p>Problem: Privacy CAs dont exist</p>
    <p>Solution: Malware Distribution Platform acts as Privacy CA</p>
  </div>
  <div class="page">
    <p>Can malware generate an AIK?</p>
    <p>Owner AuthData required for AIK generation</p>
    <p>Owner AuthData not needed on platform, used rarely</p>
    <p>Capture from keylogging or from memory (Windows: cached for days)</p>
  </div>
  <div class="page">
    <p>Remote attestation details Infected Platform Malware Distribution Platform</p>
    <p>(MDP)</p>
    <p>Phase 1: cred  AIK represents EK</p>
  </div>
  <div class="page">
    <p>Remote attestation details (contd)</p>
    <p>Phase 2: Prove binding key is from TPM that controls EK</p>
    <p>Infected Platform Malware Distribution Platform (MDP)</p>
    <p>Malicious payload5) Late launch, decrypt and run payload</p>
  </div>
  <div class="page">
    <p>Implementation</p>
    <p>Protocol until late launch (w/TrouSerS)  Late launch (via Flicker v0.2) on Intel platforms</p>
    <p>Infection Payload Loader (IPL): decrypt, execute payload  IPL run appears as 3 second system freeze on Infected</p>
    <p>Platform due to TPM key operations in late launch  Three malicious payloads</p>
    <p>Conficker B-like example  Secure time via Ubuntu package manifests</p>
    <p>DDoS timebomb  Secret text search</p>
  </div>
  <div class="page">
    <p>Defense: Whitelisting late launch binaries</p>
    <p>Hypervisor-level whitelisting  Trap on SENTER, check late launch binary</p>
    <p>List of hashes of whitelisted binaries  Digitally sign binaries, whitelist signing keys</p>
    <p>Problems  Requires hypervisor: tough for home users  Late launch binary updates  Signatures: Revocation, trust management</p>
    <p>(certificate chains)</p>
  </div>
  <div class="page">
    <p>Defense: Manufacturer Cooperation</p>
    <p>Manufacturer breaks TPM guarantees for analyst  Fake Endorsement Key (EK)</p>
    <p>Manufacturer produces certificate for EK that is not TPM controlled</p>
    <p>Problem: EK leak can compromise TPM security properties  Fake Attestation Identity Key (AIK)</p>
    <p>Manufacturer uses EK to complete AIK activation for AIK that is not TPM controlled</p>
    <p>Problem: AIK requests need manufacturer response online</p>
  </div>
  <div class="page">
    <p>Defense: Physical Compromises</p>
    <p>TPM compromise has been demonstrated  Simple: Grounding LPC bus allowed faking of TPM</p>
    <p>code measurement  Exotic: Etching away casing, probing around</p>
    <p>tamper-resistant wiring allowed EK recovery  Industry incentives to fix  Further discussion in paper (e.g. cold boot)</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>TPM can cloak malware sub-computations, hiding them from analysts</p>
    <p>Concrete implementation of TPM-based malware cloaking  Remote attestation  Late launch</p>
    <p>Strengthening TPM guarantees makes attack more resilient</p>
  </div>
</Presentation>
