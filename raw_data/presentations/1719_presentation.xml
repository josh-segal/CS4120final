<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Improving Meek With Adversarial Techniques</p>
    <p>Steven Sheffey, Ferrol Aderholdt</p>
  </div>
  <div class="page">
    <p>Domain Fronting</p>
  </div>
  <div class="page">
    <p>Domain Fronting</p>
  </div>
  <div class="page">
    <p>Domain Fronting  Makes a DNS request to an allowed host  Indicates an allowed host in the SNI fields</p>
    <p>of the HTTPS traffic  Sends traffic to a forbidden host by</p>
    <p>modifying the Host header  All basic metadata fields indicate traffic to</p>
    <p>an allowed host</p>
  </div>
  <div class="page">
    <p>Meek</p>
    <p>Meek uses domain fronting to tunnel Tor traffic</p>
  </div>
  <div class="page">
    <p>Related Work  Machine learning attacks using packet sizes, inter-arrival times, ACK</p>
    <p>frequency can differentiate Meek from regular HTTPS traffic  Wang et al. in Seeing through Network-Protocol Obfuscation used a decision tree and</p>
    <p>achieved a FPR as low as 0.0002  Yao et al. in Meek-based tor traffic identification with hidden markov model. used a Markov</p>
    <p>model and achieved an accuracy of 99.98%  Nasr et al. in Strong flow correlation attacks on tor using deep learning were able to</p>
    <p>deanonymize Meek traffic with a FPR of 0.0005</p>
    <p>Verma et al in Network Traffic Obfuscation: An Adversarial Machine Learning Approach proposes shaping traffic to mimic generic protocol types(BULK, DATABASE, MAIL , SERVICES, P2P, WWW)</p>
  </div>
  <div class="page">
    <p>Proposed Approach  Take features from Meek and HTTPs traffic commonly used to identify Meek</p>
    <p>traffic, and form a statistical signature  Use a GAN to transform this signature in a way that makes Meek traffic less</p>
    <p>identifiable</p>
    <p>Future goal:</p>
    <p>Use this modified distribution to inform packet shaping strategy</p>
  </div>
  <div class="page">
    <p>Data Collection  Navigate to Alexa top 10K in Firefox with both regular HTTPS and Meek</p>
    <p>(meek-azure)  Contained in Docker to isolate collection process and allow parallelization  Collecting samples of Meek traffic requires restarting the Meek process.</p>
    <p>Parallelization escapes this bottleneck.  Collected a total of 60k PCAPs</p>
    <p>Dataset H - generated from residential internet  Dataset U - generated from MTSU internet  Dataset A - generated from AWS</p>
  </div>
  <div class="page">
    <p>Data Collection Limitations  Collection environments undiverse</p>
    <p>2 locations in Tennessee, and one in a Virginia datacenter</p>
    <p>Generic  Meek vs HTTPS for all traffic, and not for just traffic on the domain fronted CDN</p>
  </div>
  <div class="page">
    <p>Feature Extraction  For each PCAP:</p>
    <p>Aggregate packets into flows and discard all non-HTTPS packets  Form histograms with logarithmic bins of:</p>
    <p>Packet sizes  Interarrival times (to and from the client)</p>
  </div>
  <div class="page">
    <p>Payload Length Distribution</p>
  </div>
  <div class="page">
    <p>Differences in Observations</p>
  </div>
  <div class="page">
    <p>Inter-arrival Time Distribution (from client)</p>
  </div>
  <div class="page">
    <p>Inter-arrival Time Distribution (to client)</p>
  </div>
  <div class="page">
    <p>Adversarial Neural Networks  Generator</p>
    <p>produces inputs from noise  can also modify inputs (transformer)</p>
    <p>Discriminator  classifies inputs</p>
    <p>Both are trained simultaneously until an equilibrium is reached  Well-suited to traffic obfuscation</p>
  </div>
  <div class="page">
    <p>StarGAN</p>
  </div>
  <div class="page">
    <p>GAN Training  Train the discriminator to classify</p>
    <p>real signatures as (real, their class)</p>
    <p>Train the discriminator to identify transformed signatures as fake</p>
    <p>Train the transformer to transform a signature in a way that tricks the classifier into classifying it as a specific class, while also minimizing perturbation</p>
    <p>Train the transformer to transform transformed signatures so that they are classified by the discriminator as their original class</p>
  </div>
  <div class="page">
    <p>GAN Objectives  Neural network training aims to minimize loss  Binary cross-entropy - Used to minimize differences in classification</p>
    <p>Is the signature Meek or HTTPS  Is the signature real or fake?</p>
    <p>Gradient penalty - Used in GANs to stabilize the training process  Mean Absolute error - Used to minimize differences in signatures</p>
    <p>Does the transformer properly transform traffic back to its original class?  Does the transformer minimize modification?</p>
    <p>Dloss = DLosssrc + Dlosscls + DLoss'src + 10DLossgp  TLoss = TLosscls + TLosssrc + 10TLosspert + 10Tlossrec</p>
  </div>
  <div class="page">
    <p>Classifiers  Decision tree</p>
    <p>same model as Wang et al.</p>
    <p>Naive Neural Network  same architecture as the discriminator</p>
    <p>Informed Neural Network  same architecture as the discriminator  Trained on both untransformed and transformed samples</p>
  </div>
  <div class="page">
    <p>Training process  Performed on each dataset  30% GAN training set</p>
    <p>Trains a discriminator to classify traffic signatures as Normal/Meek and Real/Fake and a transformer capable of transforming traffic signatures given a target class</p>
    <p>20% Classifier training set  Trains a classifier to classify signatures as Normal/Meek</p>
    <p>50% Classifier testing set  Tests the classifiers ability to identify traffic signatures and transformed signatures</p>
    <p>6-fold cross validation over all permutations of these splits</p>
  </div>
  <div class="page">
    <p>Results</p>
  </div>
  <div class="page">
    <p>Payload Length Distribution</p>
  </div>
  <div class="page">
    <p>Inter-arrival Time Distribution (from client)</p>
  </div>
  <div class="page">
    <p>Inter-arrival Time Distribution (to client)</p>
  </div>
  <div class="page">
    <p>Future work  Implementation.</p>
    <p>Right now, the transformed distribution represents a theoretical change in packet shaping, but implementing this distribution is a more difficult problem.</p>
    <p>Increase data diversity.  Models generated based on normal traffic for a region may not be useful for other regions. A</p>
    <p>streamlined approach that trains a model based on a users regular browsing traffic could be useful.</p>
    <p>The default meek bridge uses ajax.aspnetcdn.com, a website that typically serves single JS files. Mimicking the traffic patterns of generic HTTPS may not match traffic patterns to this specific host.</p>
  </div>
  <div class="page">
    <p>Availability  https://github.com/starfys/packet_captor_sakura  srs6p@mtmail.mtsu.edu</p>
  </div>
</Presentation>
