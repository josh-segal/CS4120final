<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Preventing SQL Injection Attacks Using AMNESIA</p>
    <p>William G.J. Halfond and Alessandro Orso</p>
    <p>Georgia Institute of Technology</p>
    <p>This work was partially supported by DHS contract FA8750-05-2-0214 and NSF awards CCR-0205422 and CCR-0209322 to Georgia Tech.</p>
  </div>
  <div class="page">
    <p>SQL Injection Attacks</p>
    <p>David Aucsmith (CTO of Security and Business Unit, Microsoft) defined SQLIA as one of the most serious threats to web apps</p>
    <p>Open Web Application Security Project (OWASP) lists SQLIA in its top ten most critical web application security vulnerabilities</p>
    <p>Successful attacks on Guess Inc., Travelocity, FTD.com, Tower Records, RIAA</p>
  </div>
  <div class="page">
    <p>Presentation Outline</p>
    <p>Motivation</p>
    <p>Background Info.</p>
    <p>AMNESIA</p>
    <p>Demonstration</p>
    <p>Evaluation Overview</p>
    <p>Summary</p>
  </div>
  <div class="page">
    <p>SQLIA Vulnerability</p>
    <p>String queryString = &quot;SELECT info FROM userTable WHERE &quot;;</p>
    <p>if ((! login.equals(&quot;&quot;)) &amp;&amp; (! pin.equals(&quot;&quot;))) {</p>
    <p>queryString += &quot;login='&quot; + login + &quot;' AND pin=&quot; + pin ;</p>
    <p>} else {</p>
    <p>queryString+=&quot;login='guest'&quot;;</p>
    <p>}</p>
    <p>ResultSet tempSet = stmt.execute(queryString);</p>
  </div>
  <div class="page">
    <p>Attack Scenario</p>
    <p>String queryString = &quot;SELECT info FROM userTable WHERE &quot;;</p>
    <p>if ((! login.equals(&quot;&quot;)) &amp;&amp; (! pin.equals(&quot;&quot;))) {</p>
    <p>queryString += &quot;login='&quot; + login + &quot;' AND pin=&quot; + pin ;</p>
    <p>} else {</p>
    <p>queryString+=&quot;login='guest'&quot;;</p>
    <p>}</p>
    <p>ResultSet tempSet = stmt.execute(queryString);</p>
    <p>Normal Usage User submits login doe and pin 123</p>
    <p>SELECT info FROM users WHERE login= `doe AND pin= 123</p>
  </div>
  <div class="page">
    <p>Attack Scenario</p>
    <p>String queryString = &quot;SELECT info FROM userTable WHERE &quot;;</p>
    <p>if ((! login.equals(&quot;&quot;)) &amp;&amp; (! pin.equals(&quot;&quot;))) {</p>
    <p>queryString += &quot;login='&quot; + login + &quot;' AND pin=&quot; + pin ;</p>
    <p>} else {</p>
    <p>queryString+=&quot;login='guest'&quot;;</p>
    <p>}</p>
    <p>ResultSet tempSet = stmt.execute(queryString);</p>
    <p>Malicious Usage Attacker submits user --  and pin of 0</p>
    <p>SELECT info FROM users WHERE login=user --  AND pin=0</p>
  </div>
  <div class="page">
    <p>Many types of SQLIA[issse06]</p>
    <p>Types  Piggy-backed</p>
    <p>Queries</p>
    <p>Tautologies</p>
    <p>Alternate Encodings</p>
    <p>Inference</p>
    <p>Illegal/Logically Incorrect Queries</p>
    <p>Union Query</p>
    <p>Stored Procedures</p>
    <p>Sources  User input</p>
    <p>Cookies</p>
    <p>Server variables</p>
    <p>Second-order</p>
  </div>
  <div class="page">
    <p>AMNESIA[ase05]</p>
    <p>Basic Insights 1. Code contains enough information to</p>
    <p>accurately model all legitimate queries. 2. A SQL Injection Attack will violate the</p>
    <p>predicted model.</p>
    <p>Solution: Static analysis =&gt; build query models Runtime analysis =&gt; enforce models</p>
  </div>
  <div class="page">
    <p>Overview of AMNESIA</p>
  </div>
  <div class="page">
    <p>Scan application code to identify hotspots.</p>
    <p>String queryString = &quot;SELECT info FROM userTable WHERE &quot;; if ((! login.equals(&quot;&quot;)) &amp;&amp; (! pin.equals(&quot;&quot;))) { queryString += &quot;login='&quot; + login + &quot;' AND pin= + pin; } else { queryString+=&quot;login='guest'&quot;; } ResultSet tempSet = stmt.execute(queryString);</p>
    <p>Hotspot</p>
  </div>
  <div class="page">
    <p>SELECT info FROM userTable WHERE</p>
    <p>login</p>
    <p>=  guest</p>
    <p>login</p>
    <p>=    AND pin =</p>
  </div>
  <div class="page">
    <p>Wrap each hotspot with call to monitor.</p>
    <p>String queryString = &quot;SELECT info FROM userTable WHERE &quot;; if ((! login.equals(&quot;&quot;)) &amp;&amp; (! pin.equals(&quot;&quot;))) { queryString += &quot;login='&quot; + login + &quot;' AND pin=&quot; + pin ; } else { queryString+=&quot;login='guest'&quot;; }</p>
    <p>if (monitor.accepts (hotspotID, queryString) { ResultSet tempSet = stmt.execute(queryString); }</p>
    <p>Hotspot</p>
    <p>Call to Monitor</p>
  </div>
  <div class="page">
    <p>SELECT info FROM userTable WHERE</p>
    <p>login</p>
    <p>=  guest</p>
    <p>login</p>
    <p>=    AND pin =</p>
    <p>SELECT info FROM userTable WHERE login =  doe AND pin = 123</p>
    <p>Check queries against SQL query model.</p>
    <p>Normal Usage:</p>
  </div>
  <div class="page">
    <p>SELECT info FROM userTable WHERE</p>
    <p>login</p>
    <p>=  guest</p>
    <p>login</p>
    <p>=    AND pin =</p>
    <p>Malicious Usage:</p>
    <p>Check queries against SQL query model.</p>
    <p>SELECT info FROM userTable WHERE login =   AND pin = 0-- user</p>
  </div>
  <div class="page">
    <p>AMNESIA Implementation</p>
  </div>
  <div class="page">
    <p>AMNESIA Demonstration</p>
    <p>Attacking a commercial application:  Evade login protection</p>
    <p>Change contents of the database  Special sale price</p>
    <p>Blocking attacks with AMNESIA</p>
    <p>Examine SQL query models</p>
  </div>
  <div class="page">
    <p>Evaluation: Research Questions</p>
    <p>RQ1: What percentage of attacks can our technique detect and prevent that would otherwise go undetected and reach the database?</p>
    <p>RQ2: How much overhead does our technique impose on web applications at runtime?</p>
    <p>RQ3: What percentage of legitimate accesses does our technique prevent from reaching the database?</p>
  </div>
  <div class="page">
    <p>Evaluation: Experiment Setup</p>
    <p>Average Automata size</p>
    <p>HotspotsLOCSubject</p>
    <p>Applications are a mix of commercial (5) and student projects (2)</p>
    <p>Attacks and legitimate inputs developed independently</p>
    <p>Attack inputs represent broad range of exploits</p>
  </div>
  <div class="page">
    <p>DetectedSuccessfulUnsuccessfulSubject</p>
    <p>Evaluation Results: RQ1</p>
    <p>No false negatives</p>
    <p>Unsuccessful attacks = filtered by application</p>
  </div>
  <div class="page">
    <p>Evaluation Results: RQ2 &amp; RQ3</p>
    <p>Runtime Overhead  Less than 1ms.</p>
    <p>Insignificant compared to cost of network/database access</p>
    <p>No false positives  No legitimate input was flagged as SQLIA</p>
  </div>
  <div class="page">
    <p>Conclusions &amp; Future Work</p>
    <p>AMNESIA detects and prevents SQLIAs by using static analysis and runtime monitoring  Builds models of expected legitimate queries  At runtime, ensure all generated queries match</p>
    <p>model</p>
    <p>In our evaluation  No false positives  No false negatives</p>
    <p>Future work =&gt; address limitations  Imprecision in static analysis  External trusted input</p>
  </div>
</Presentation>
