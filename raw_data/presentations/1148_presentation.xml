<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>IFL, Lawrence KS, 3 Oct 2011 1</p>
    <p>Property-Based Testing a catalog of classroom examples</p>
    <p>Rex Page University of Oklahoma</p>
    <p>supported by CCF program of NSF</p>
  </div>
  <div class="page">
    <p>IFL, Lawrence KS, 3 Oct 2011 2</p>
    <p>Knowing What It Does Dialogue  Socrates: How do you know what your software does?  Engineer: I test it.  Socrates: How do you test it?  Engineer: I think of things that might happen and test them.  Socrates: How many tests?  Engineer: About four. Maybe five. Two or three, anyway.  Socrates: That about covers it?  Engineer: Yeah, I check it out pretty well.  Socrates: How about testing all the cases?  Engineer: Well, maybe for really complicated programs.  Socrates: How many tests then?  Engineer: A lot  hundreds for sure.</p>
  </div>
  <div class="page">
    <p>IFL, Lawrence KS, 3 Oct 2011 3</p>
    <p>What to Do? A program is a formula in a formal system  It has a precise meaning  Reasoning about its meaning is an application of logic</p>
    <p>Functional programs are especially attractive  Ordinary, algebraic reasoning based on equations  Classical logic</p>
    <p>Not exotic variants like temporal logic, modal logic,</p>
  </div>
  <div class="page">
    <p>IFL, Lawrence KS, 3 Oct 2011 4</p>
    <p>Programs = Axiomatic Equations A program is a formula in a formal system  Its meaning can be specified precisely  So, reasoning about its meaning is an application of logic</p>
    <p>Functional programs are especially attractive  Ordinary, algebraic reasoning based on equations  Classical logic</p>
    <p>Not exotic variants like temporal logic, modal logic,</p>
    <p>Functional program = set of equations {axioms} (first (cons x xs)) = x {first} (rest (cons x xs)) = xs {rest} (cons x0 (x1 x2  xn)) = (x0 x1 x2  xn) {cons} (append nil ys) = ys {app0} (append (cons x xs) ys) = (cons x (append xs ys)) {app1}</p>
    <p>Criteria for defining operations  Consistent, Comprehensive, Computational {the 3 C's}</p>
  </div>
  <div class="page">
    <p>IFL, Lawrence KS, 3 Oct 2011 5</p>
    <p>What about Tests? Functional program = set of equations {axioms}</p>
    <p>(first (cons x xs)) = x {first} (rest (cons x xs)) = xs {rest} (cons x0 (x1 x2  xn)) = (x0 x1 x2  xn) {cons} (append nil ys) = ys {app0} (append (cons x xs) ys) = (cons x (append xs ys)) {app1}</p>
    <p>Test = Boolean formula expressing expectation  Derivable (the programmer hopes) from the program {axioms} (append xs (append ys zs)) = (append (append xs ys) zs) {assoc}</p>
  </div>
  <div class="page">
    <p>IFL, Lawrence KS, 3 Oct 2011 6</p>
    <p>Programs vs Tests Functional program = set of equations {axioms}</p>
    <p>(append nil ys) = ys {app0} (append (cons x xs) ys) = (cons x (append xs ys)) {app1}</p>
    <p>Test = Boolean formula expressing expectation  Derivable (the programmer hopes) from the program {axioms} (append xs (append ys zs)) = (append (append xs ys) zs) {assoc}</p>
    <p>Program = Equations = Tests  Programs and tests are based on the same idea (equations)  Program</p>
    <p>(append nil ys) = ys ; app0 (append (cons x xs) ys) = (cons x (append xs ys)) ; app1</p>
    <p>Test (append xs (append ys zs)) = (append (append xs ys) zs) ; assoc</p>
  </div>
  <div class="page">
    <p>IFL, Lawrence KS, 3 Oct 2011 7</p>
    <p>Program = Tests Functional program = set of equations {axioms}</p>
    <p>(append nil ys) = ys {app0} (append (cons x xs) ys) = (cons x (append xs ys)) {app1}</p>
    <p>Test = Boolean formula expressing expectation  Derivable (the programmer hopes) from the program {axioms} (append xs (append ys zs)) = (append (append xs ys) zs) {assoc}</p>
    <p>Program: axiomatic equations (defun append (xs ys) (if (consp xs)</p>
    <p>(cons (first xs) (append (rest xs) ys)) ; app1 ys) ; app0</p>
    <p>Tests: derivable equations (defproperty append-associative (xs :value (random-list-of (random-symbol)) ys :value (random-list-of (random-symbol)) zs :value (random-list-of (random-symbol)))</p>
    <p>(equal (append xs (append ys zs)) ; assoc (append (append xs ys) zs)))</p>
    <p>ACL2 function definition</p>
    <p>Dracula automated testing</p>
  </div>
  <div class="page">
    <p>IFL, Lawrence KS, 3 Oct 2011 8</p>
    <p>Hughes Property Categories Comparing results from two ways of doing something  (one-way x) = (other-way x)  It's nice if one way is &quot;obviously correct&quot;  Even if it's not, checking it from two angles helps</p>
    <p>Checking that one function inverts another  (decode (encode x)) = x  Uncommon to make consistent errors both ways</p>
  </div>
  <div class="page">
    <p>IFL, Lawrence KS, 3 Oct 2011 9</p>
    <p>Hughes Property Categories Comparing results from two ways of doing something  (one-way x) = (other-way x)  It's nice if one way is &quot;obviously correct&quot;  Even if it's not, checking it from two angles helps</p>
    <p>Checking that one function inverts another  (decode (encode x)) = x  Uncommon to make consistent errors both ways</p>
    <p>Useful properties often fall into one of these types  An observation from experience of John Hughes  Categories help programmers conjure up good tests</p>
    <p>commuting diagram</p>
    <p>round trip</p>
  </div>
  <div class="page">
    <p>IFL, Lawrence KS, 3 Oct 2011 10</p>
    <p>Hughes Property Categories Comparing results from two ways of doing something  (one-way x) = (other-way x)  It's nice if one way is &quot;obviously correct&quot;  Even if it's not, checking it from two angles helps</p>
    <p>Checking that one function inverts another  (decode (encode x)) = x  Uncommon to make consistent errors both ways</p>
    <p>Useful properties often fall into one of these types  An observation from experience of John Hughes  Categories help programmers conjure up good tests</p>
    <p>Same categories in classroom examples?  Software properties from a decade of courses at OU</p>
    <p>commuting diagram</p>
    <p>round trip</p>
  </div>
  <div class="page">
    <p>IFL, Lawrence KS, 3 Oct 2011 11</p>
    <p>Informal specifications of some list operators (append (x1 x2  xm) (y1 y2  yn)) = (x1 x2  xm y1 y2  yn) (prefix n (x1 x2  xn xn+1 xn+2  ) = (x1 x2  xn) (suffix n (x1 x2  xn xn+1 xn+2  ) = (xn+1 xn+2  )</p>
    <p>Informal Specs and Properties</p>
    <p>Some other equations we expect the operators satisfy (append xs (append ys zs)) = (append (append xs ys) zs) ; assoc</p>
    <p>(prefix (len xs) (append xs ys)) = xs ; app-pfx</p>
    <p>(suffix (len xs) (append xs ys)) = ys ; app-sfx</p>
    <p>Some equations the operators satisfy in well-chosen cases</p>
    <p>(append nil ys) = ys ; app0 (append (cons x xs) ys) = (cons x (append xs ys)) ; app1 (prefix 0 xs) = nil ; pfx0a (prefix n nil) = nil ; pfx0b (prefix (+ n 1) (cons x xs))= (cons x (prefix n xs)) ; pfx1 (suffix 0 xs) = nil ; sfx0 (suffix (+ n 1) (cons x xs))= (suffix n xs)) ; sfx1</p>
    <p>Derived Properties</p>
    <p>Axiomatic Properties Consistent, Comprehensive, Computational</p>
  </div>
  <div class="page">
    <p>IFL, Lawrence KS, 3 Oct 2011 12</p>
    <p>ACL2 Syntax for Those Equations</p>
    <p>Derived properties for testing or verification (defthm app-assoc (equal (append xs (append ys zs))</p>
    <p>(append (append xs ys) zs))) (defthm app-pfx (implies (true-listp xs)</p>
    <p>(equal (prefix (len xs) (append xs ys)) xs))) (defthm app-sfx (equal (suffix (len xs) (append xs ys)) ys))</p>
    <p>Axiomatic properties (defun append (xs ys) (if (consp xs)</p>
    <p>(cons (first xs) (append (rest xs) ys)) ; app1 ys)) ; app0</p>
    <p>(defun prefix (n xs) (if (and (posp n) (consp xs))</p>
    <p>(cons (first xs) (prefix (- n 1) (rest xs))) ; pfx1 nil)) ; pfx0</p>
    <p>(defun suffix (n xs) (if (posp n)</p>
    <p>(suffix (- n 1) (rest xs)) ; sfx1 xs)) ; sfx0</p>
  </div>
  <div class="page">
    <p>IFL, Lawrence KS, 3 Oct 2011 13</p>
    <p>Theorem = Property without :value, &quot;implies&quot; for &quot;:where&quot;</p>
    <p>Derived properties for testing or verification (defthm app-pfx (implies (true-listp xs)</p>
    <p>(equal (prefix (len xs) (append xs ys)) xs))) (defproperty app-pfx-as-property (xs :value (random-list-of (random-symbol))</p>
    <p>:where (true-listp xs)) (equal (prefix (len xs) (append xs ys)) xs))</p>
    <p>Axiomatic properties (defun append (xs ys) (if (consp xs)</p>
    <p>(cons (first xs) (append (rest xs) ys)) ; app1 ys)) ; app0</p>
    <p>(defun prefix (n xs) (if (and (posp n) (consp xs))</p>
    <p>(cons (first xs) (prefix (- n 1) (rest xs))) ; pfx1 nil)) ; pfx0</p>
    <p>(defun suffix (n xs) (if (posp n)</p>
    <p>(suffix (- n 1) (rest xs)) ; sfx1 xs)) ; sfx0</p>
  </div>
  <div class="page">
    <p>IFL, Lawrence KS, 3 Oct 2011 14</p>
    <p>More Properties  Additional derived properties of append, prefix, suffix</p>
    <p>(defthm app-preserves-len (equal (len (append xs ys))</p>
    <p>(+ (len xs) (len ys)))) (defthm app-conserves-elements (iff (member-equal a (append xs ys))</p>
    <p>(or (member-equal a xs) (member-equal a ys)))) (defthm pfx-len (implies (natp n) (&lt;= (len (prefix n xs)) n)))</p>
    <p>(defthm sfx-len (implies (natp n) (&lt;= (len (suffix n xs))</p>
    <p>(max 0 (- (len xs) n)))))</p>
    <p>Derived properties for testing or verification (defthm app-assoc (equal (append xs (append ys zs))</p>
    <p>(append (append xs ys) zs))) (defthm app-pfx (implies (true-listp xs)</p>
    <p>(equal (prefix (len xs) (append xs ys)) xs))) (defthm app-sfx (equal (suffix (len xs) (append xs ys)) ys))</p>
  </div>
  <div class="page">
    <p>IFL, Lawrence KS, 3 Oct 2011 15</p>
    <p>Double reverse: (reverse (reverse xs)) = xs  Division check: y(div x y) + (mod x y) = x  Multiplex, demultiplex: (mux (dmx xs)) = xs, (dmx (mux xs ys)) = (xs ys)  Concatenate prefix/suffix: (append (prefix n xs) (suffix n xs)) = xs  Linear encryption: (decrypt (encrypt msg)) = msg  Convert number to numeral and back: (numb (bits x)) = x</p>
    <p>Append preserves length and conserves elements  Law of added exponents: xm xn = xm+n  Russian peasant exponentiation: xn = xx x = xn/2 xn mod 2  Scalar times vector: sxk = kth element of s[x1, x2,  xn]  Nested recursion vs tail recursion (eg, list-reversal, Fibonacci)  Arithmetic on numerals</p>
    <p>(numb(add (bits x) (bits y))) = x + y (numb(mul (bits x) (bits y))) = x  y (low-order-bit (bits(2x))) = 0 (numb(insert-high-order-bits n (bits x))) = x  2n</p>
    <p>Typical Classroom Examples  Commuting diagram properties</p>
    <p>Round-trip properties</p>
    <p>Property Counts from SE lectures</p>
  </div>
  <div class="page">
    <p>IFL, Lawrence KS, 3 Oct 2011 16</p>
    <p>Linear Encryption add adjacent codes, mod code-space size</p>
    <p>(defun encrypt-pair (m x x-nxt) (mod (+ x x-nxt) m))</p>
    <p>(defun decrypt-pair (m x-encrypted y-decrypted) (mod (- x-encrypted y-decrypted) m))</p>
    <p>(defun encrypt (m xs) (if (consp (cdr xs))</p>
    <p>(cons (encrypt-pair m (car xs) (cadr xs)) (encrypt m (cdr xs)))</p>
    <p>(list (encrypt-pair m (car xs) (1- m))))) (defun decrypt (m ys) (if (consp (cdr ys))</p>
    <p>(let* ((decrypted-cdr (decrypt m (cdr ys)))) (cons (decrypt-pair m (car ys) (car decrypted-cdr))</p>
    <p>decrypted-cdr)) (list (decrypt-pair m (car ys) (1- m)))))</p>
    <p>(defproperty decrypt-inverts-encrypt (m :value (+ (random-natural) 2) n :value (random-natural) xs :value (random-list-of (random-between 0 (- m 1)) :size (+ n 1))</p>
    <p>:where (and (natp m) (&gt; m 1) (consp xs) (true-listp xs) (code-listp m xs)))</p>
    <p>(equal (decrypt m (encrypt m xs)) xs))</p>
    <p>Derived round-trip property: decrypt encrypted message</p>
  </div>
  <div class="page">
    <p>IFL, Lawrence KS, 3 Oct 2011 17</p>
    <p>Definition admitted to ACL2 logic only after proving termination  Functions must terminate for all inputs</p>
    <p>Accommodations for ACL2  ACL2 logic requires all functions to be total</p>
    <p>An implication for programming (defun encrypt (m xs) (if (consp (cdr xs))</p>
    <p>(cons (encrypt-pair m (car xs) (cadr xs)) (encrypt m (cdr xs)))</p>
    <p>(list (encrypt-pair m (car xs) (1- m)))))</p>
    <p>Conventional definition of encrypt use (if (null (cdr xs)) )  The Boolean (null xs) can fail to trigger termination for some inputs</p>
    <p>For example, if xs is an atom other than nil  Using (consp xs), or (atom xs) or (endp xs), avoids this problem  Programmer expects all inputs to be true lists (nil-terminated),</p>
    <p>but ACL2 requires totality, so the definition must cover all cases  Other tricks (among many)</p>
    <p>Count down on naturals and use zp or posp for termination test  Suggests induction scheme that works (counting up is trickier)</p>
    <p>Lemma needed when rest is not used for list-shortening recursions</p>
  </div>
  <div class="page">
    <p>IFL, Lawrence KS, 3 Oct 2011 18</p>
    <p>Binary Numerals (defun numb (x) ; number denoted by binary numeral x (if (consp x)</p>
    <p>(if (= (first x) 1) (+ 1 (* 2 (numb (rest x)))) (* 2 (numb (rest x))))</p>
    <p>nil ; bits0 (cons (mod n 2) ; bits1</p>
    <p>(bits (floor n 2))))</p>
    <p>Derived round-trip property: number to numeral and back (defproperty numb-inverts-bits (n :value (random-natural)) (= (numb (bits n)) n))</p>
  </div>
  <div class="page">
    <p>IFL, Lawrence KS, 3 Oct 2011 19</p>
    <p>Arithmetic on Binary Numerals (defun add-1 (x) (if (consp x)</p>
    <p>(if (= (first x) 1) (cons 0 (add-1 (rest x))) ; add11 (cons 1 (rest x))) ; add10</p>
    <p>(list 1))) (defun add-c (c x) (if (= c 1)</p>
    <p>(add-1 x) ; addc1 x)) ; addc0</p>
    <p>(defun add (c0 x y) (if (and (consp x) (consp y))</p>
    <p>(let* ((x0 (first x)) (y0 (first y)) (a (full-adder c0 x0 y0)) (s0 (first a)) (c1 (second a)))</p>
    <p>(cons s0 (add c1 (rest x) (rest y)))) ; addxy (if (consp x)</p>
    <p>(add-c c0 x) ; addx0 (add-c c0 y)))) ; add0y</p>
    <p>(defthm add-ok (= (numb (add c x y))</p>
    <p>(+ (numb (list c)) (numb x) (numb y))))</p>
    <p>Derived property: add numerals or add numbers</p>
  </div>
  <div class="page">
    <p>IFL, Lawrence KS, 3 Oct 2011 20</p>
    <p>Multiplication, Too</p>
    <p>(defthm mul-ok (= (numb (mul x y))</p>
    <p>(* (numb x) (numb y))))</p>
    <p>(defun my1 (x y) ; x,y: binary numerals, y non-empty (if (consp x)</p>
    <p>(let* ((m (my1 (rest x) y))) (if (= (first x) 1)</p>
    <p>(cons (first y) (add 0 (rest y) m)) ; mul1xy (cons 0 m))) ; mul0xy</p>
    <p>nil)) ; mul0y</p>
    <p>(defun mul (x y) (if (consp y)</p>
    <p>(my1 x y) ; mulxy nil)) ; mulx0</p>
    <p>Derived property: multiply numerals or multiply numbers</p>
  </div>
  <div class="page">
    <p>IFL, Lawrence KS, 3 Oct 2011 21</p>
    <p>Normal representation of binary numeral would be list of 0s and 1s  But, theorems would be implications with list of 0s and 1s hypothesis</p>
    <p>Another Accommodation for Proofs  Avoid hypotheses in theorems when possible</p>
    <p>(defun numb (x) ; number denoted by binary numeral x (if (consp x)</p>
    <p>(if (= (first x) 1) (+ 1 (* 2 (numb (rest x)))) (* 2 (numb (rest x))))</p>
    <p>Avoiding the list of 0s and 1s hypothesis  Use 1 for 1-bit and anything else for 0 bit  Use consp (or atom or endp) to avoid requiring true lists  Most of the time, inputs will be lists of 0s and 1s, but mechanized logic</p>
    <p>is not constrained to those particular representations of numerals</p>
    <p>Test for 1 or not 1</p>
    <p>Note (Marco): 1. consp 2. 1, not 1 instead of 0, 1 3. Use dblchk until bugs seem to be fixed 4. Reading the acl2 report panel</p>
  </div>
  <div class="page">
    <p>Nested Recursion vs Tail Recursion f0 = 0 f1 = 1 fn+2 = fn+1 + fn</p>
    <p>algebraic equations</p>
    <p>transcribed to ACL2 syntax infeasible computation</p>
    <p>(defun Fibonacci (n) (if (zp n)</p>
    <p>(Fibonacci (- n 2))))))</p>
    <p>tail-recursive version O(n) computation</p>
    <p>(defun fib-tail (n a b) (if (zp n)</p>
    <p>a (fib-tail (- n 1) b (+ a b))))</p>
    <p>(defun Fibonacci-fast (n) (fib-tail n 0 1))</p>
    <p>(defthm Fibonacci=Fibonacci-fast (implies (natp n)</p>
    <p>(= (Fibonacci n) (Fibonacci-fast n))))</p>
    <p>derived property</p>
    <p>(defthm fib-tail-Fibonacci-recurrence-0 (= (fib-tail 0 a b) a))</p>
    <p>(defthm fib-tail-Fibonacci-recurrence-1 (= (fib-tail 1 a b) b))</p>
    <p>(defthm fib-tail-Fibonacci-recurrence (implies (and (natp n) (&gt;= n 2))</p>
    <p>(= (fib-tail n a b) (+ (fib-tail (- n 1) a b)</p>
    <p>(fib-tail (- n 2) a b)))))</p>
    <p>lemmas for mechanized proof</p>
  </div>
  <div class="page">
    <p>IFL, Lawrence KS, 3 Oct 2011 23</p>
    <p>ACL2 Sometimes Needs Hints</p>
    <p>(defproperty suffix-reduces-length (xs :value (random-list-of (random-symbol)) n :value (random-natural)</p>
    <p>:where (and (consp xs) (posp n))) (&lt; (len (suffix n xs)) (len xs)) :hints ((&quot;Goal&quot; :induct (len xs))))</p>
    <p>Derived property: suffix reduces length</p>
    <p>(defun suffix (n xs) (if (posp n)</p>
    <p>(suffix (- n 1) (rest xs)) ; sfx1 xs)) ; sfx0</p>
    <p>Axiomatic properties of suffix function</p>
    <p>suggests induction strategy</p>
    <p>(defthm suffix-reduces-length (implies (and (consp xs) (posp n))</p>
    <p>(&lt; (len (suffix n xs)) (len xs)) :hints ((&quot;Goal&quot; :induct (len xs))))</p>
    <p>Theorem that Dracula sends to ACL2 logic</p>
  </div>
  <div class="page">
    <p>IFL, Lawrence KS, 3 Oct 2011 24</p>
    <p>Future Work Have: hundreds of defined properties  Ten years, three courses  Lectures  Homework projects  Exams</p>
    <p>Goal: web accessible archive  Notes and Dracula definitions for all properties  Lemmas and hints for ACL2 mechanized proof</p>
    <p>Target date: May 2012</p>
  </div>
  <div class="page">
    <p>IFL, Lawrence KS, 3 Oct 2011 25</p>
    <p>The End</p>
  </div>
</Presentation>
