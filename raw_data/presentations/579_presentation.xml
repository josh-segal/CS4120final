<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>PeerMon: A Peer-to-Peer Network</p>
    <p>Monitoring System</p>
    <p>Tia Newhall, Janis Libeks, Ross Greenwood, Jeff Knerr</p>
    <p>Computer Science Department</p>
    <p>Swarthmore College</p>
    <p>Swarthmore, PA USA</p>
    <p>newhall@cs.swarthmore.edu</p>
  </div>
  <div class="page">
    <p>Target: General Purpose NWs</p>
    <p>Usually single LAN systems</p>
    <p>Each machines resources controlled by local OS</p>
    <p>NFS, but little other system-wide resource sharing</p>
    <p>No central scheduler of NW-wide resources</p>
    <p>Users tend to statically pick node(s) to use</p>
    <p>(ex) write MPI hostfile once, use every time</p>
    <p>Users may not have a choice</p>
    <p>(ex) ssh cs.swarthmore.edu: target is chosen from static set</p>
    <p>Often large imbalances in NW-wide resource usage</p>
  </div>
  <div class="page">
    <p>Imbalances Cause Poor Performance</p>
    <p>Swapping on some while lots of free RAM on others</p>
    <p>Large variations in CPU loads</p>
    <p>Variations in contention for NIC, disk, other devices</p>
    <p>Parallel applications (ex. MPI)  Usually performance determined by slowest node</p>
    <p>Picking one overloaded node can result in big performance hit</p>
    <p>Sequential applications  Low response rate for interactive jobs</p>
    <p>Longer execution times for batch jobs</p>
  </div>
  <div class="page">
    <p>Want to do better load balancing</p>
    <p>Tool to easily and quickly discover good nodes</p>
    <p>low CPU load, enough free RAM, fewest number of</p>
    <p>processes, total # CPUs,</p>
    <p>use to make better job/process placement</p>
    <p>get better load balancing</p>
    <p>avoid problems with load imballances</p>
    <p>But has to fit with constraints of target system</p>
    <p>Still General Purpose system where each OS</p>
    <p>manages it local nodes resources</p>
    <p>Not implementing a global resource scheduler</p>
  </div>
  <div class="page">
    <p>PeerMon</p>
    <p>P2P Resource Monitoring System</p>
    <p>Scalable, fault tolerant, low overhead system</p>
    <p>No central authority, so no single bottleneck</p>
    <p>nor single point of failure</p>
    <p>Each node runs equal peer that provides system-wide</p>
    <p>resource usage data to local users on its node</p>
    <p>Fast local access to system-wide resource usage data</p>
    <p>Layered Architecture:</p>
    <p>PeerMon does the system-wide data collection part</p>
    <p>Higher-level services use PeerMon data to do load</p>
    <p>balancing, job placement,</p>
  </div>
  <div class="page">
    <p>PeerMon Architecture</p>
    <p>Every node runs equal peer that</p>
    <p>collects system-wide resource</p>
    <p>usage data</p>
    <p>Sender and Listener Threads:</p>
    <p>communicate over P2P NW</p>
    <p>Client Interface Thread:</p>
    <p>exports PeerMon data to</p>
    <p>higher-level services that use</p>
    <p>it (communicate with local</p>
    <p>peermon daemon only!)</p>
  </div>
  <div class="page">
    <p>Listener and Sender Threads</p>
    <p>Listener Thread:</p>
    <p>receives resource usage data from other peers</p>
    <p>updates its system-wide resource usage data (stored in hashMap)</p>
    <p>Sender Thread:</p>
    <p>periodically wakes up &amp; sends its data about whole system to 3 peers</p>
    <p>Both use UDP/IP</p>
    <p>Fast, dont need reliable delivery</p>
    <p>Single UDP socket vs. one per connection w/TCP</p>
  </div>
  <div class="page">
    <p>Resource Usage Data</p>
    <p>Each PeerMon peer:</p>
    <p>Collects info about its own node</p>
    <p>Sends its full hashMap data to 3 peers</p>
    <p>Cycle through different heuristics to choose 3 to ensure full conectivity &amp; that new nodes get quickly integrated</p>
    <p>Receives info about other nodes from some of its peers</p>
    <p>Constraints on PeerMon Peers Data:</p>
    <p>Doesnt need to be consistent across peers</p>
    <p>With good messaging heuristics it is close to consistent</p>
    <p>If higher-level service requires an absolute authority, then it can choose 1 PeerMon node to be that authority</p>
    <p>No different from centralized SNMP systems</p>
  </div>
  <div class="page">
    <p>Why send to 3 peers?</p>
    <p>Results for a 500 node system</p>
    <p>NW Bandwidth Ave. Data Age</p>
    <p>Sending to 3 peers is good trade-off in Data Age</p>
    <p>vs. NW overheads</p>
  </div>
  <div class="page">
    <p>Client Thread</p>
    <p>Local PeerMon daemon provides</p>
    <p>all system-wide data to local users</p>
    <p>currently TCP interface</p>
    <p>If a higher-level service requires</p>
    <p>an absolute authority, then it can</p>
    <p>interact with exactly one PeerMon</p>
    <p>daemon or implement distributed</p>
    <p>consensus w/more than one</p>
    <p>For services that dont need</p>
    <p>absolute agreement, interact with</p>
    <p>local PeerMon daemon</p>
    <p>=&gt; purely distributed interaction</p>
  </div>
  <div class="page">
    <p>System start-up New peermon process gets 3 peer IPs config file</p>
    <p>Sender thread sends data to 3 peers to connect to P2P NW</p>
    <p>If at least 1 of 3 eventually runs peermon, new node will</p>
    <p>enter PeerMon P2P NW</p>
  </div>
  <div class="page">
    <p>Fault Tolerance and Recovery</p>
    <p>When a node fails or becomes unreachable,</p>
    <p>its data ages out of the system</p>
    <p>Users of PeerMon data at other nodes will not</p>
    <p>choose failed node as one of the good nodes</p>
    <p>Recovery:</p>
    <p>No different from start-up</p>
    <p>No global state that needs to be reconstructed, new</p>
    <p>peerMon deamon will enter P2P NW and begin</p>
    <p>receiving system-wide resource usage data</p>
  </div>
  <div class="page">
    <p>Example Uses of PeerMon</p>
    <p>SmarterSSH:</p>
    <p>Uses PeerMon data to pick best ssh target</p>
    <p>autoMPIgen</p>
    <p>Generates MPI hostfile, choosing best nodes based</p>
    <p>on PeerMon data</p>
    <p>Dynamic DNS mapping</p>
    <p>Dynamically binds name to one of current set of</p>
    <p>best nodes</p>
    <p>Uses RR in BIND 9 to rotate through set of top N</p>
    <p>machines periodically updated by PeerMon</p>
  </div>
  <div class="page">
    <p>SmarterSSH and autoMPIgen</p>
    <p>Simple Python Programs, use PeerMon client</p>
    <p>TCP interface</p>
    <p>Can order best nodes based on CPU load,</p>
    <p>amount free RAM, or combination of both</p>
    <p>Uses a delta value in ordering nodes so small</p>
    <p>diffs in load are not significant to ordering</p>
    <p>smarterSSH randomizes the order of equally</p>
    <p>good nodes so subsequent quick invocations</p>
    <p>distribute ssh load over set of best nodes</p>
  </div>
  <div class="page">
    <p>Example smarterSSH commands</p>
  </div>
  <div class="page">
    <p>How much does PeerMon help?  Three benchmark programs:</p>
    <p>(ran on 8 of 50 nodes)</p>
    <p>Experiments comparing:</p>
    <p>Runs on randomly selected node(s): no PeerMon</p>
    <p>Nodes chosen using PeerMon data with:</p>
    <p>Ordered by CPU only</p>
    <p>Ordered by available RAM only</p>
    <p>Ordered using both CPU load and available RAM</p>
  </div>
  <div class="page">
    <p>Speed-up of PeerMon vs Random</p>
    <p>+ Using PeerMon significantly improves performance</p>
    <p>random only does better when PeerMon ordering</p>
    <p>criterion is bad match for application</p>
    <p>+ Combination of CPU&amp;RAM best ordering criterion</p>
    <p>Node</p>
    <p>Ranking</p>
    <p>Sequential</p>
    <p>(RAM</p>
    <p>Intensive)</p>
    <p>OpenMP</p>
    <p>(CPU</p>
    <p>Intensive)</p>
    <p>(Both)</p>
    <p>CPU only 0.87 1.63 1.27</p>
    <p>RAM only 4.62 2.19 1.78</p>
    <p>CPU &amp; RAM 4.62 2.29 1.83</p>
  </div>
  <div class="page">
    <p>Scalability of PeerMon  Tested PeerMon NWs of 2-2,200 nodes</p>
    <p>Collected traces of MRTG data for CPU, RAM,</p>
    <p>NW bandwidth</p>
    <p>Results:</p>
    <p>Per node CPU and RAM Usage remains constant</p>
    <p>Per node NW bandwidth grows slightly with size of</p>
    <p>P2P NW, but still very small</p>
    <p>Up to .16 Mbit/s for 2,200 node system</p>
    <p>Each node sends information about every node in</p>
    <p>NW, so as PeerMon NW grows, so does amt data</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>PeerMon: P2P, low overhead, scalable, fault</p>
    <p>tolerant resource monitoring system for</p>
    <p>general purpose LANs</p>
    <p>It provides system-wide resource usage data</p>
    <p>and an interface to export data to higher-level</p>
    <p>tools and services</p>
    <p>Our example tools that use PeerMon data</p>
    <p>provide some load balancing in general</p>
    <p>purpose NW systems and result in significant</p>
    <p>improvements in performance</p>
  </div>
  <div class="page">
    <p>Future Work  Release beta version under GPL</p>
    <p>we hope before end of summer</p>
    <p>www.cs.swarthmore.edu/~newhall/peermon</p>
    <p>Further investigate security &amp; scalability issues</p>
    <p>PeerMon that spans multiple LANs?</p>
    <p>Implement easier to use client interface</p>
    <p>Add extensibility interface to change set of</p>
    <p>system resource monitored and how</p>
    <p>Implement more tools that use PeerMon</p>
  </div>
</Presentation>
