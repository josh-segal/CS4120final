<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Michael J. Neely, University of Southern California http://www-bcf.usc.edu/~mjneely/</p>
    <p>CISS, Princeton University, March 2012</p>
    <p>Wireless Peer-to-Peer Scheduling in Mobile Networks</p>
    <p>Base Station</p>
  </div>
  <div class="page">
    <p>Base Station</p>
    <p>Want to increase the throughput in wireless systems.  Current system designs cannot support future mobile traffic.  Ideas:</p>
    <p>Throughput can be significantly increased by allowing</p>
    <p>device-to-device communication.  Exploit file popularity and caching capabilities.</p>
    <p>Without Device-toDevice Transmission (Example Timeslot).</p>
  </div>
  <div class="page">
    <p>Base Station</p>
    <p>Want to increase the throughput in wireless systems.  Current system designs cannot support future mobile traffic.  Ideas:</p>
    <p>Throughput can be significantly increased by allowing</p>
    <p>device-to-device communication.  Exploit file popularity and caching capabilities.</p>
    <p>With Device-toDevice Transmission (Example Timeslot).</p>
  </div>
  <div class="page">
    <p>User 1 Modes:  Automatic File Search  Browse a Neighbor  Browse a Social Group</p>
    <p>User 1 Public Directory:  Music Videos</p>
    <p>Lady GaGa  YouTube Clips  Movies</p>
    <p>Bob the Builder  Thomas the Train</p>
    <p>User 2 Modes:  Automatic File Search  Browse a Neighbor  Browse a Social Group</p>
    <p>User 2 Public Directory:  Music Videos</p>
    <p>Glee Clips  Taylor Swif</p>
    <p>YouTube Clips  Clippers Highlights</p>
    <p>CISS Talks</p>
    <p>Neighbors are likely to have Popular Files.  Browsing capabilities induce popularity.</p>
    <p>Example GUI at User Devices</p>
  </div>
  <div class="page">
    <p>Peer-to-Peer Systems</p>
    <p>Much prior work on internet peer-to-peer.  Much prior work on incentives (tokens, tit-for-tat, etc.)  [Neely, Golubchik Infocom 2011] considers utility optimization</p>
    <p>for general wireless peer-to-peer models, but:  Requires coordination.  Can have large delays in mobile network.</p>
    <p>Current paper:  Design for mobile setting with simplified coordination.  Reduce Delays by opportunistically grabbing packets from current neighbors.  To do this: We will treat a simplified model where each user only wants 1 infinitely long file.  Prove optimality for the simplified model.  Design a heuristic modification for more general systems.</p>
  </div>
  <div class="page">
    <p>Simple Model: Network Structure</p>
    <p>User devices (example: Handsets)  Want data.  Typically mobile.  Have fewer files cached.</p>
    <p>Access point devices (example: Basestations, Femto Nodes)  Dont want data  Typically non-mobile  Typically have access to many more files.</p>
    <p>N Devices:</p>
    <p>{Devices} = {Users} U {Access Points}</p>
  </div>
  <div class="page">
    <p>Simple Model: Transmission Options</p>
    <p>1-Hop Networking (no relaying).  Access points can transmit to users.  Users can transmit to other users.  Time-Varying Channels, timeslots t in {0, 1, 2, }.  (t) = topology state on slot t.  Slot t decision: Choose (nk(t)) in R((t)).</p>
    <p>N Devices:</p>
    <p>{Devices} = {Users} U {Access Points}</p>
    <p>Transmission matrix Set of Options for slot t.</p>
    <p>Example sub-cell structure: Decisions are distributed.</p>
  </div>
  <div class="page">
    <p>Simple Model: File Requests and Availability</p>
    <p>N Devices:</p>
    <p>{Devices} = {Users} U {Access Points}</p>
    <p>Each user wants 1 file consisting of infinite # of packets.</p>
    <p>Fk = {Devices that have the file that user k wants}.  Users grab packets of their desired file over time.</p>
    <p>xk(t) = a ak(t) = Total user k downloads on slot t.</p>
    <p>yk(t) = b kb(t) = Total user k uploads on slot t.</p>
  </div>
  <div class="page">
    <p>Stochastic Network Optimization Problem</p>
    <p>xk = Time average rate of user k downloads.</p>
    <p>yk = Time average rate of user k uploads.</p>
    <p>Maximize: k k( xk )</p>
    <p>Subject to:</p>
    <p>(1) x  + y for all users k</p>
    <p>(2) (nk(t)) in R((t))</p>
    <p>for all t in {0, 1, 2, }</p>
    <p>Concave utility functions</p>
    <p>Tit-for-Tat constraints to incentivize participation</p>
  </div>
  <div class="page">
    <p>Solution (Lyapunov Optimization)</p>
    <p>x  + y  Virtual queues Hk(t) for tit-for-tat constraints:</p>
    <p>Hk(t+1) = max[Hk(t) + kxk(t)  k  yk(t), 0]</p>
    <p>Hk(t)Hk(t)kxk(t) k + yk(t)</p>
    <p>Hk(t) is a reputation queue: Hk(t) low good reputation Hk(t) high bad reputation</p>
  </div>
  <div class="page">
    <p>Dynamic Algorithm  Maintain a request queue Qk(t) and reputation</p>
    <p>queue Hk(t).</p>
    <p>User k request decision on slot t:</p>
    <p>Maximize: Vk(k(t))  Qk(t)k(t) Subject to: 0  k(t)  max</p>
    <p>Transmission Decisions on slot t:</p>
    <p>Maximize:  nk(t)Wnk(t) Subject to: (nk(t)) in R((t))</p>
    <p>Update Queues: Q(t+1) = max[Qk(t) + k(t)  xk(t), 0] Hk(t+1) = max[Hk(t) + kxk(t)  k  yk(t), 0]</p>
  </div>
  <div class="page">
    <p>What are the weights Wnk(t)?</p>
    <p>Transmit decision: Maximize  nk(t)Wnk(t)</p>
    <p>For users n and k:</p>
    <p>Wnk(t) = Qk(t) + Hn(t)  kHk(t)</p>
    <p>Differential Reputation</p>
    <p>Like backpressure with reputations!</p>
    <p>The optimization naturally gives a token mechanism: If your reputation is bad, you need to improve it to get more downloads!</p>
  </div>
  <div class="page">
    <p>Performance Theorem</p>
    <p>For all sample paths of time-variation (possibly non-ergodic topology states w(t)), the queues Qk(t), Hk(t) are deterministically bounded by O(V).</p>
    <p>All tit-for-tat constraints are satisfied.</p>
    <p>If w(t) is ergodic, then:</p>
    <p>Achieved utility  Optimal utility  O(1/V)</p>
  </div>
  <div class="page">
    <p>Simulation Scenario</p>
    <p>Base Station</p>
    <p>1 Base Station, 50 mobile users.  Base station transmission is orthogonal from P2P.  P2P transmissions distributed over sub-cells.  1 P2P transmission per sub-cell.  Files randomly selected at time 0: p = Pr[other user has file] = Availability probability</p>
  </div>
  <div class="page">
    <p>New files chosen at beginning of each phase. Held fixed over 3 phases.  Phase 1: Availiability prob = 5%  Phase 2: Availability prob = 10%  Phase 3: Availability prob = 7% (Even with p = 5%, the P2P traffic is more than twice the BS traffic!)</p>
  </div>
  <div class="page">
    <p>New files chosen at beginning of each phase. Held fixed over 3 phases.  Phase 1: Availiability prob = 5%  Phase 2: Availability prob = 10%  Phase 3: Availability prob = 7% (This and previous use V=10, a=0.5. Then Q(t)  12 packets for all t.)</p>
  </div>
  <div class="page">
    <p>The above shows throughput versus V.  Different tit-for-tat parameters  are shown: Larger  means more incentives to participate, but optimality is then more constrained.</p>
  </div>
  <div class="page">
    <p>The corresponding queue size for the same experiment as previous slide.  Our analytical bound ensures Queue size  V+2 for all time.  At V=10 (which gives near optimality from previous figure) we get a queue bound of 12.</p>
  </div>
  <div class="page">
    <p>Lyapunov optimization approach to wireless P2P scheduling.</p>
    <p>Backpressure on Reputations.</p>
    <p>P2P leads to significant gains in throughput.</p>
    <p>Our algorithm, derived for the simple infinite file size assumption, also works well on finite file sizes and non-ergodic events.</p>
    <p>Conclusions</p>
    <p>Base Station</p>
  </div>
</Presentation>
