<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>SF-TAP: Scalable and Flexible Traffic Analysis Platform Running on Commodity</p>
    <p>Hardware Yuuki Takano, Ryosuke Miura, Shingo Yasuda</p>
    <p>Kunio Akashi, Tomoya Inoue</p>
    <p>in USENIX LISA 2015</p>
    <p>NICT, JAIST (Japan)</p>
  </div>
  <div class="page">
    <p>Table of Contents 1. Motivation</p>
  </div>
  <div class="page">
    <p>Motivation (1)  Programmable application level traffic analyzer</p>
    <p>We want</p>
    <p>to write traffic analyzers in any languages such as Python, Ruby, C++, for many purposes (IDS/ IPS, forensic, machine learning).</p>
    <p>**not** to write codes handling TCP stream reconstruction (quite complex).</p>
    <p>modularity for many application protocols.</p>
  </div>
  <div class="page">
    <p>Motivation (2)</p>
    <p>High speed application level traffic analyzer</p>
    <p>We want</p>
    <p>to handle high bandwidth traffic.</p>
    <p>to handle high connections per second.</p>
    <p>horizontal and CPU core scalable analyzer.</p>
  </div>
  <div class="page">
    <p>Motivation (3)</p>
    <p>Running on Commodity Hardware</p>
    <p>We want</p>
    <p>open source software.</p>
    <p>not to use expensive appliances.</p>
  </div>
  <div class="page">
    <p>Related Work</p>
    <p>BPF [USENIX ATC 1993]</p>
    <p>netmap [USENIX ATC 2012]DPDK</p>
    <p>pcap</p>
    <p>GASPP [USENIX ATC 2014]</p>
    <p>SCAP [IMC 2012]</p>
    <p>libnids libprotoident</p>
    <p>nDPI</p>
    <p>l7-filter</p>
    <p>(low level traffic capture)</p>
    <p>(flow oriented analyzer) (application traffic detector)</p>
    <p>SF-TAP + modularity and scalability</p>
  </div>
  <div class="page">
    <p>High-level Architecture of SF-TAP</p>
    <p>CPU CPU CPU CPU</p>
    <p>Flow Abstractor</p>
    <p>CPU CPU CPU CPU</p>
    <p>Flow Abstractor</p>
    <p>CPU CPU CPU CPU</p>
    <p>Flow Abstractor</p>
    <p>CPU CPU CPU CPU</p>
    <p>Flow Abstractor</p>
    <p>Cell Incubator</p>
    <p>The Internet</p>
    <p>SF-TAP Cell SF-TAP Cell SF-TAP Cell SF-TAP Cell</p>
    <p>Intra Network</p>
    <p>Core ScalingCore Scaling Core Scaling Core Scaling</p>
    <p>Horizontal Scaling</p>
    <p>Analyzer Analyzer Analyzer Analyzer Analyzer Analyzer Analyzer Analyzer Analyzer Analyzer Analyzer Analyzer Analyzer Analyzer Analyzer Analyzer</p>
  </div>
  <div class="page">
    <p>Design Principle (1)  Flow Abstraction</p>
    <p>abstract flows by application level protocols</p>
    <p>provide flow abstraction interfaces like /dev, /proc or BPF</p>
    <p>for multiple programming languages</p>
    <p>Modular Architecture</p>
    <p>separate analyzing and capturing logic</p>
    <p>easily replace analyzing logic</p>
  </div>
  <div class="page">
    <p>Design Principle (2)  Horizontal Scalable</p>
    <p>analyzing logic tends to require many computer resources</p>
    <p>volume effect should solve the problem</p>
    <p>CPU Core Scalable</p>
    <p>both analyzing and capturing logic should be core scalable for efficiency</p>
  </div>
  <div class="page">
    <p>Design of SF-TAP (1)</p>
    <p>NW I/F</p>
    <p>HTTP I/F</p>
    <p>TLS I/F Flow Abstractor</p>
    <p>Flow Classifier TLS Analyzer</p>
    <p>HTTP Analyzer</p>
    <p>HTTP Proxy</p>
    <p>TCP and UDP Handler</p>
    <p>filter and classifier rule</p>
    <p>L7 Loopback I/F</p>
    <p>DB Forensic IDS/IPS etc...</p>
    <p>Application Protocol Analyzer</p>
    <p>etc...TCP Default I/F</p>
    <p>UDP Default I/F</p>
    <p>Analyzer PlaneAbstractor Plane</p>
    <p>Capturer Plane</p>
    <p>SF-TAP Cell Incubator</p>
    <p>Flow Identifier</p>
    <p>Flow Separator</p>
    <p>Separator Plane</p>
    <p>separated traffic</p>
    <p>SF-TAP Cell</p>
    <p>L3/L7 Sniffer</p>
    <p>SSL Proxy etc...</p>
    <p>other SF-TAP cells</p>
    <p>IP Packet Defragmenter</p>
    <p>L2 Bridge</p>
    <p>mirroring trafficPacket Forwarder</p>
    <p>IP Fragment Handler</p>
    <p>defined 4 planes Analyzer Plane</p>
    <p>application level analyzers Forensic, IDS/IPS, etc</p>
    <p>Abstractor Plane flow abstraction</p>
    <p>Separator Plane flow separation</p>
    <p>Capturer Plane traffic capturing</p>
    <p>(ordinary tech.)</p>
    <p>(users of SF-TAP implements here)</p>
    <p>(we implemented)</p>
    <p>(we implemented)</p>
  </div>
  <div class="page">
    <p>Design of SF-TAP (2) SF-TAP Cell Incubator</p>
    <p>SF-TAP Cell Incubator Flow</p>
    <p>Separator</p>
    <p>separated traffic other SF-TAP cells</p>
    <p>L2 Bridge</p>
    <p>Packet Forwarder</p>
    <p>IP Fragment Handler</p>
    <p>Packet Forwarder layer 2 bridge</p>
    <p>layer 2 frame capture</p>
    <p>IP Fragment Handler</p>
    <p>handle fragmented packets</p>
    <p>Flow Separator separate flows to multiple Ifs</p>
  </div>
  <div class="page">
    <p>Design of SF-TAP (3) SF-TAP Flow Abstractor</p>
    <p>NW I/F</p>
    <p>HTTP I/F</p>
    <p>TLS I/F Flow Abstractor</p>
    <p>Flow Classifier</p>
    <p>TCP and UDP Handler</p>
    <p>filter and classifier rule</p>
    <p>L7 Loopback I/F</p>
    <p>TCP Default I/F</p>
    <p>UDP Default I/F Flow Identifier</p>
    <p>IP Packet Defragmenter</p>
    <p>TCP and UDP Handler</p>
    <p>Flow Identifier</p>
    <p>IP Packet Defragmenter</p>
    <p>reconstruct TCP flows</p>
    <p>identify flows by IP and port</p>
    <p>nothing to do for UDP</p>
    <p>defragment IP packets if needed</p>
  </div>
  <div class="page">
    <p>Design of SF-TAP (4) SF-TAP Flow Abstractor</p>
    <p>NW I/F</p>
    <p>HTTP I/F</p>
    <p>TLS I/F Flow Abstractor</p>
    <p>Flow Classifier</p>
    <p>TCP and UDP Handler</p>
    <p>filter and classifier rule</p>
    <p>L7 Loopback I/F</p>
    <p>TCP Default I/F</p>
    <p>UDP Default I/F Flow Identifier</p>
    <p>IP Packet Defragmenter</p>
    <p>Flow Classifier classify flows by regular expressions</p>
    <p>output to abstraction IFs</p>
  </div>
  <div class="page">
    <p>Implementation  SF-TAP cell incubator</p>
    <p>C++11</p>
    <p>it uses netmap, available on FreeBSD</p>
    <p>SF-TAP flow abstractor</p>
    <p>C++11</p>
    <p>it uses pcap or netmap</p>
    <p>available on Linux, *BSD, and MacOS</p>
    <p>Source Code</p>
    <p>https://github.com/SF-TAP</p>
    <p>License</p>
    <p>3-clauses BSD</p>
    <p>(updated from the paper)</p>
  </div>
  <div class="page">
    <p>Performance Evaluation (1)</p>
    <p>(a) HTTP Analyzer x 1 (b) HTTP Analyzer x 2 (c) HTTP Analyzer x 4</p>
    <p>generate 50 clients / sec, 1000 clients maximum, 2500 requests / sec on average</p>
    <p>Figure 7: CPU Load of HTTP Analyzer and Flow Abstractor</p>
    <p>Figure 8: Total Memory Usage of HTTP Analyzer</p>
    <p>Figure 9: Packet Drop against CPS</p>
    <p>traffic when the number of flows is small. Figure 12 shows physical memory usage of the flow</p>
    <p>abstractor when generating 10K TCP CPS. The amount of memory usage of the flow abstractor primarily depends on the number of TCP sessions. More specifically, the amount of memory usage increases proportionally with the number of TCP sessions.</p>
    <p>In the experiments involving the cell incubator, we used a PC with DDR3 16 GB Memory and an Intel Xeon E5</p>
    <p>We conducted our experiments using three patterns: (1) the cell incubator worked in the mirroring mode using port mirroring on the L2 switch; in other words, it captured packets at  and forwarded packets to ; (2) the cell incubator worked in the inline mode but did not forward packets to 1 GbE NICs, instead only  to ; and (3) the cell incubator worked in the inline mode, capturing packets at  and forwarding to both  and .</p>
    <p>Table 14 shows the performance of the cell incubator. For pattern (1), i.e., the mirroring mode, the cell incubator could manage packets up to 12.49 Mpps. For pattern (2), i.e., the cell incubator working as an L2 bridge, it could forward packets up to 11.60 Mpps. For pattern (3), i.e., forwarding packets to  and , the cell incubator could forward packets to  and  up to 11.44 Mpps. The performance of the inline mode was poorer than that of the mirroring mode because packets were forwarded to two NICs when using the inline mode. However, the inline mode is more suitable for specific purposes such as IDS/IPS because the same packets are dropped at  and . In other words, all transmitted packets can be captured when using the inline mode.</p>
    <p>Table 15 shows the CPU load averages of the cell incubator when in the inline mode and forwarding 64-byte frames. At 5.95 and 10.42 Mpps, packets were not dropped when forwarding. At approximately 10.42 Mpps, the upper limit of dropless forwarding was reached. This indicates that several CPUs were used for forwarding, but the 15th CPUs resources were especially consumed.</p>
    <p>packet drop against connections per second</p>
    <p>(pcap)</p>
  </div>
  <div class="page">
    <p>Performance Evaluation (1)</p>
    <p>forwarding performance of SF-TAP cell incubator</p>
    <p>M p p s</p>
    <p>fragment size (bytes)</p>
    <p>ideal (1) -&gt; (2) -&gt; (3) -&gt; (3) -&gt;</p>
    <p>Figure 14: Forwarding Performance of Cell Incubator (10 Gbps)</p>
    <p>C P</p>
    <p>U U</p>
    <p>sa g e [</p>
    <p>% ]</p>
    <p>CPU No.</p>
    <p>Figure 15: CPU Load Average of Cell Incubator (64-byte frames)</p>
    <p>mechanism such as a slab allocator. The replacement of malloc by a slab allocator therefore constitutes an aspect of our future work.</p>
    <p>(3) The flow abstractor adopts regular expressions for application protocol detection. We profiled the flow abstractor, but at present, this is not critical. Nonetheless, it potentially requires high computational resources. Thus, high-performance regular expressions should be studied in the future. Some studies have taken advantage of GPGPUs for high-performance regular expressions [5, 37, 41]. The implementation of regular expressions using GPGPUs is therefore another aspect of our future work.</p>
    <p>Pervasive monitoring [9] is an important issue on the Internet. Countermeasures against pervasive monitoring include using cryptographic protocols such as SSL/TLS instead of traditional protocols such as HTTP and FTP, which are insecure. However, cryptographic protocols invalidate IDS/IPS, and consequently, other security</p>
    <p>risks are incurred. Host-based IDS/IPS is a solution to the problem, but</p>
    <p>it is not suitable for mobile devices, which are widely used in todays society, because of the lack of machine power. Therefore, new approaches such as IDS/IPS cooperating with an SSL/TLS proxy should be studied to support the future of the Internet. The L7 loopback interface of the flow abstractor may also help future IDS/IPS implementations to be more robust against cryptographic protocols.</p>
    <p>SCAP [25] and GASPP [36] were proposed for flow-level and high-bandwidth network traffic analyses. SCAP is implemented within a Linux kernel, taking advantage of the zero-copy mechanism and allocating threads for NICs RX and TX queues to achieve high throughput. In addition, SCAP adopts a mechanism called subzero-copy packet transfer using analyzers that can selectively analyze required network traffic. GASPP is a GPGPU-based flow-level analysis engine that uses netmap [30]; thus, GASPP achieves high-throughput data transfers between the NIC and CPU memory.</p>
    <p>DPDK [8], netmap [30], and PF RING [27] were proposed for high-bandwidth packet-capture implementations. In traditional methods, many data transfers and software interrupts occur among the NIC, kernel, and user, thus making it difficult to capture 10 Gbps network traffic using traditional methods. Our proposed method achieved wire-speed traffic capture by effectively reducing the frequency of memory copies and software interrupts.</p>
    <p>L7 filter [13], nDPI [20], libprotoident [16], and PEAFLOW [7] have been proposed for application-level network traffic classification implementations. These methods use AhoCorasick or regular expressions to detect application protocols. PEAFLOW uses a parallel programming language called FastFlow to achieve highperformance classification.</p>
    <p>IDS applications such as Snort [33], Bro [4], and Suricata [34] reconstruct TCP flows and application-level analysis. BinPAC [24] is a DSL used by Bro for protocol parsing; however, Snort and Bro are single threaded and cannot manage high-bandwidth network traffic. On the other hand, Suricata is multithreaded and manages high-bandwidth network traffic.</p>
    <p>Schneider et al. [31] proposed a horizontally scalable</p>
    <p>USENIX Association 29th Large Installation System Administration Conference (LISA15) 33</p>
    <p>(a) 1K CPS (b) 5K CPS (c) 10K CPS</p>
    <p>generate 1K, 5K and 10K CPS, 10M connections maximum</p>
    <p>Figure 10: CPU Loads of Flow Abstractor versus CPS</p>
    <p>Figure 11: CPU Load of Flow Abstractor versus Traffic Volume</p>
    <p>Figure 16 shows the CPU loads of the 15th CPU. At 5.95 Mpps, the load average was approximately 50%, but at 10.42 Mpps, the loads were close to 100%. Moreover, at 14.88 Mpps, CPU resources were completely consumed. This limitation in forwarding performance was probably caused by the bias, which in turn was due to the flow director [10] of Intels NIC and its driver. The flow director cannot currently be controlled by user programs on FreeBSD; thus, it causes bias depending on network flows. Note that the fairness regarding RSS queues is simply an implementation issue and is benchmarked for future work.</p>
    <p>Finally, the memory utilization of the cell incubator depends on the memory allocation strategy of netmap. The current implementation of the cell incubator requires approximately 700 MB of memory to conduct the experiments.</p>
    <p>In this section, we discuss performance improvements and pervasive monitoring.</p>
    <p>Figure 12: Physical Memory Usage of Flow Abstractor (10K CPS)</p>
    <p>cell incubator</p>
    <p>Figure 13: Experimental Network of Cell Incubator</p>
    <p>(1) The UNIX domain socket can be replaced by another mechanism such as a memory-mapped file or crossmemory attach [6]; however, these mechanisms are not suitable for our approach, which abstracts flows as files. Thus, new mechanisms for high-performance message passing, such as the zero-copy UNIX domain socket or zero-copy pipe, should be studied.</p>
    <p>(2) The flow abstractor currently uses the malloc function for memory allocation, which has some overhead. Here, malloc can be replaced by another lightweight</p>
    <p>to  to  to  and</p>
  </div>
  <div class="page">
    <p>Other Features</p>
    <p>L7 Loopback interface for encapsulated flows</p>
    <p>Load balancing mechanism for application protocol analysers</p>
    <p>Separating and mirroring modes of SF-TAP cell incubator</p>
    <p>See more detains in our paper</p>
  </div>
  <div class="page">
    <p>Conclusion  We proposed SF-TAP for application level traffic analysis.</p>
    <p>SF-TAP has following features.</p>
    <p>flow abstraction</p>
    <p>running on commodity hardware</p>
    <p>modularity  scalability</p>
    <p>We showed SF-TAP has achieved high performance in our experiments.</p>
  </div>
</Presentation>
