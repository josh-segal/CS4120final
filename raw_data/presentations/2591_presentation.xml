<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Building web applica/ons on top of encrypted data</p>
    <p>xd5d1db5abce2356d51db5aab23d5321535abbce23352abc4352314987x435acb734352a12cad5d1db5abce2356d51db5345323acb2312aaab23!</p>
    <p>Raluca Ada Popa, Emily Stark, Jonas Helfer, Steven Valdez, Nickolai Zeldovich, M. Frans Kaashoek, and Hari Balakrishnan</p>
    <p>Mylar</p>
    <p>MIT CSAIL and Meteor Inc.</p>
  </div>
  <div class="page">
    <p>Problem</p>
    <p>Confiden3al data leaks from web servers</p>
    <p>web server users</p>
    <p>Secret Secret Secret</p>
  </div>
  <div class="page">
    <p>AMackers get full server access</p>
    <p>accessed private data according to</p>
    <p>hackers cloud employees</p>
    <p>government</p>
    <p>web server users</p>
    <p>Secret Secret</p>
    <p>=</p>
  </div>
  <div class="page">
    <p>A web framework that protects confiden/ality against fully compromised servers</p>
    <p>Mylar</p>
  </div>
  <div class="page">
    <p>Servers store data encrypted</p>
    <p>web server</p>
    <p>Secret</p>
    <p>browser</p>
    <p>Secret</p>
    <p>Plaintext data exists only in browsers</p>
    <p>Secret Secret</p>
    <p>Secret</p>
  </div>
  <div class="page">
    <p>Related work</p>
    <p>File systems: CFS, NCrypSs, SiRiUS, Plutus</p>
    <p>Encrypted databases: CryptDB, Monomi</p>
    <p>Browser encryp/on: Christodorescu08, Cryptocat</p>
    <p>Far from sufficient for real web apps</p>
  </div>
  <div class="page">
    <p>Challenges</p>
    <p>Enabling func/onality with encryp/on:  data sharing  computa/on</p>
    <p>Ac/ve adversaries (e.g., corrupt webpage)</p>
  </div>
  <div class="page">
    <p>Mylar</p>
    <p>Enabling func/onality with encryp/on:  data sharing  computa/on</p>
    <p>Ac/ve adversaries (e.g., corrupt webpage)</p>
    <p>webpage code verifica/on principal graph &amp; cer/fica/on</p>
    <p>client-side web framework new encryp/on scheme: mul/-key search</p>
  </div>
  <div class="page">
    <p>Example: Chat applica/on Alice Bob Eve</p>
    <p>Server cannot see messages</p>
    <p>Format messages, generate html page</p>
    <p>Users share chat rooms securely</p>
    <p>Search</p>
    <p>TODO:</p>
    <p>WORK PARTY</p>
  </div>
  <div class="page">
    <p>How to organize a web applica/on framework for encryp/on?</p>
  </div>
  <div class="page">
    <p>Start: common web framework</p>
    <p>web server user browser</p>
    <p>webpage</p>
    <p>e.g., Django, Ruby on Rails</p>
    <p>current user</p>
    <p>code</p>
    <p>Secret</p>
  </div>
  <div class="page">
    <p>Add encryp/on</p>
    <p>web server</p>
    <p>webpage</p>
    <p>Secret</p>
    <p>code</p>
    <p>servers computa/on is restricted by encryp/on  easy to tamper with webpage</p>
    <p>JS</p>
    <p>user browser</p>
    <p>Secret</p>
    <p>current user</p>
    <p>Secret</p>
    <p>Secret</p>
  </div>
  <div class="page">
    <p>Client-side web framework</p>
    <p>web server user browser</p>
    <p>current user code</p>
    <p>web- page</p>
    <p>Secret</p>
    <p>Generate webpage at client, compute in browser</p>
    <p>e.g., AJAX programming, Meteor</p>
    <p>data</p>
    <p>sta/c code</p>
    <p>Data and code separate</p>
    <p>Secret</p>
  </div>
  <div class="page">
    <p>Mylar</p>
    <p>web- page</p>
    <p>Secret Secret</p>
    <p>web server user browser</p>
    <p>cer/fy code</p>
    <p>current user</p>
    <p>encrypted data</p>
    <p>sta/c code</p>
    <p>Cer/fy code (trusted developer)</p>
    <p>Intercept and encrypt/decrypt data</p>
    <p>data</p>
  </div>
  <div class="page">
    <p>Chat applica/on</p>
    <p>Server cannot see messages</p>
    <p>Format messages, generate html page</p>
    <p>Users share chat rooms securely</p>
    <p>Search</p>
  </div>
  <div class="page">
    <p>Data sharing Developer specifies access control via the principal graph</p>
    <p>Alice</p>
    <p>Bob</p>
    <p>Eve</p>
    <p>PARTY</p>
    <p>WORK</p>
    <p>SSN is 32..</p>
    <p>7pm on Saturday at my place</p>
    <p>function create_chat(chattitle): chat_princ = princ_create(chattitle, princ_current()); function invite_user(username): chat_princ.add_access( princ_lookup(username));</p>
    <p>function send_message(msg): Messages.insert({message: msg, chat: cur_chat.id, chatprinc: chat_princ});</p>
    <p>In Alices browser:</p>
    <p>message chat chatprinc</p>
    <p>SSN is 32.. WORK WORK princ</p>
    <p>Server database:</p>
    <p>Messages.encrypted( {&quot;message: chatprinc});</p>
  </div>
  <div class="page">
    <p>Enforce access with key chains</p>
    <p>SSN is 32..</p>
    <p>7pm on Saturday</p>
    <p>at my place</p>
    <p>Server stores:</p>
    <p>WORK</p>
    <p>PARTY PARTY</p>
    <p>WORK</p>
    <p>SSN is 32..</p>
    <p>at my place 7pm on Saturday</p>
    <p>Alice</p>
    <p>Bob</p>
    <p>Eve</p>
  </div>
  <div class="page">
    <p>Get access to shared data</p>
    <p>SSN is 32..</p>
    <p>SSN is 32..</p>
    <p>Server stores: Bob</p>
    <p>SSN is 32..</p>
    <p>WORK</p>
    <p>PARTY</p>
    <p>7pm on Saturday</p>
    <p>at my place</p>
    <p>Eve</p>
  </div>
  <div class="page">
    <p>Bob</p>
    <p>Problem: aMacker gives incorrect key</p>
    <p>Encrypt message for WORK</p>
    <p>Want key SSN is 32..</p>
    <p>Server stores:</p>
    <p>WORK</p>
    <p>PARTY</p>
    <p>Receive key</p>
    <p>Eve</p>
    <p>Has access to !!!</p>
    <p>7pm on Saturday</p>
    <p>at my place</p>
  </div>
  <div class="page">
    <p>Solu/on: Cer/fica/on graph IDP or</p>
    <p>sta3c princs</p>
    <p>Alice</p>
    <p>Bob</p>
    <p>Eve</p>
    <p>SSN is 32..</p>
    <p>at my place 7pm on Saturday</p>
    <p>signAlice(WORK, ) signIDP( Alice, )</p>
    <p>IDP: invoked once per user account crea/on</p>
    <p>PARTY</p>
    <p>WORK</p>
    <p>How does Bobs browser know 1. that it needs to check a signature from Alice? 2. Alices PK?</p>
  </div>
  <div class="page">
    <p>Choosing the cer/fica/on path 1. Principals have human meaningful names</p>
    <p>No other change to user experience!</p>
    <p>with Mylar without Mylar</p>
  </div>
  <div class="page">
    <p>Chat applica/on</p>
    <p>Server cannot see messages</p>
    <p>Format messages, generate html page</p>
    <p>Users share chat rooms securely</p>
    <p>Search</p>
  </div>
  <div class="page">
    <p>Challenge: mul/-key</p>
    <p>SSN is 32..</p>
    <p>7pm on Saturday</p>
    <p>at my place</p>
    <p>Server:</p>
    <p>Bob WORK</p>
    <p>PARTY</p>
  </div>
  <div class="page">
    <p>Strawman: use single-key search scheme</p>
    <p>SSN is 32..</p>
    <p>7pm on Saturday</p>
    <p>at my place</p>
    <p>Server:</p>
    <p>WORK</p>
    <p>PARTY place place place</p>
    <p>place</p>
    <p>Match!</p>
    <p>Slow: pay overhead for each key</p>
    <p>[Kamara et al.12]</p>
    <p>Bob</p>
    <p>place</p>
  </div>
  <div class="page">
    <p>New cryptosystem: mul/-key search</p>
    <p>Server adjusts encryp/on from one key to another</p>
    <p>API:  Setup  Keygen  Encrypt  Token  Delta  Adjust  Match</p>
    <p>Based on ellip/c curves</p>
  </div>
  <div class="page">
    <p>Delta</p>
    <p>In Bobs browser:</p>
    <p>WORK:</p>
    <p>PARTY:</p>
    <p>Delta( , )</p>
    <p>Delta( , )</p>
  </div>
  <div class="page">
    <p>Adjust</p>
    <p>SSN is 32..</p>
    <p>7pm on Saturday</p>
    <p>at my place</p>
    <p>Server:</p>
    <p>Bob WORK</p>
    <p>PARTY</p>
    <p>place</p>
    <p>place place</p>
    <p>place</p>
    <p>Adjust</p>
    <p>Adjust place</p>
    <p>Match!</p>
  </div>
  <div class="page">
    <p>Chat applica/on</p>
    <p>Server cannot see messages</p>
    <p>Format messages, generate html page</p>
    <p>Users share chat rooms securely</p>
    <p>Search</p>
  </div>
  <div class="page">
    <p>Confiden/ality guarantees</p>
    <p>Protects user As data confiden/ality against  full server compromise  compromise of any user machine, except for users with legi/mate access to user As data</p>
    <p>Does not protect against side channels or access paMerns, and does not hide metadata</p>
    <p>assuming  developers client-side code does not leak data</p>
  </div>
  <div class="page">
    <p>Implementa/on</p>
    <p>On top of Meteor, but design is not limited to Meteor</p>
    <p>9000 LoC: Javascript and C++</p>
  </div>
  <div class="page">
    <p>Evalua/on</p>
    <p>How much developer effort does por/ng apps</p>
    <p>require?</p>
    <p>What is the performance overhead?</p>
  </div>
  <div class="page">
    <p>Applica/ons Applica3ons Fields secured LoC added LoC total Existed</p>
    <p>before</p>
    <p>kChat chat messages 45 793 Yes</p>
    <p>endometriosis medical fields 28 3659 Yes</p>
    <p>class submit grades, homework, feedback</p>
    <p>photo sharing photos, thumbnails, .. 32 610 No forum post body, /tle, .. 39 912 No</p>
    <p>calendar event body, /tle,  30 798 No</p>
    <p>36 LoC</p>
  </div>
  <div class="page">
    <p>Experimental setup</p>
    <p>web server client</p>
    <p>Intel Xeon 2.8 GHz, 4 GB of RAM</p>
    <p>eight 10-core Intel Xeon E7-8870, 2.4 GHz, 256 GB of RAM</p>
  </div>
  <div class="page">
    <p>transmit</p>
    <p>join room</p>
    <p>search invite</p>
    <p>T im</p>
    <p>e (m</p>
    <p>se c)</p>
    <p>kChat kChat+Mylar</p>
    <p>Figure 9: End-to-end latency of four operations in kChat. Transmit includes the time from when one user sends a message to when another user receives it.</p>
    <p>End-to-end latency. Figure 9 shows the end-to-end latency Mylar introduces for four main operations in kChat: transmitting a message, joining a room, searching for a word in all rooms, and inviting a user to a room. For message transmission, we measured the time from the sender clicking send until the message renders in the recipients browser. This is the most frequent operation in kChat, and Mylar adds only 50 msec of latency to it. This difference is mostly due to searchable encryption, which takes 43 msec. The highest overhead is for inviting a user, due to principal operations: looking up and verifying a user principal (218 msec) and wrapping the key (167 msec). Overall, we believe the resulting latency is acceptable for many applications, and subjectively the application still feels responsive.</p>
    <p>We also measured the latency of initially loading a page. The original kChat application loads in 291 msec. The Mylar version of kChat, without the code verification extension, loads in 356 msec, owing to Mylars additional code. Enabling the code verification extension increases the load time to 1109 msec, owing to slow signature verification in the Javascript-based extension. Using native code for signature verification, as we did for bilinear pairings, would reduce this overhead. Note that users experience the page load latency only when first navigating to the application; subsequent clicks are handled by the application without reloading the page.</p>
    <p>We also measured the end-to-end latency of the most common operations in the endometriosis application (completing a medical survey and reading such a survey), and the submit application (a student uploading an assignment, and a staff member reading such a submission); the results are shown in Figure 11. For the submit application, we used real data from 122 students who used this application during the fall of 2013 in MITs 6.858 class. Submits latency is higher than that of other applications because the amount of data (student submissions) is larger, so encryption with search takes longer.</p>
    <p>Figure 10: Server throughput for kChat.</p>
    <p>For comparison, we also show the latency of submit when search is turned off. The search encryption can happen asynchronously so the user does not have to wait for it.</p>
    <p>Throughput. To measure Mylars impact on server throughput, we used kChat, and we set up many pairs of browsersa sender and a receiverwhere the sender continuously sends new messages. Receivers count the total number of messages received during a fixed interval. Figure 10 shows the results, as a function of the total number of clients (each pair of browsers counts as 2 clients). Mylar decreases the maximum server throughput by 17%. Since the server does not perform any cryptographic operations, Mylars overhead is due to the increase in message size caused by encryption, and the encrypted search index that is added to every message to make it searchable.</p>
    <p>Figure 11 also shows the server throughput of the endometriosis and class submit application when clients perform representative operations.</p>
    <p>Search. To evaluate the importance of Mylars multikey search, we compare it to two alternative approaches for secure search. The first alternative is single-key serverside search, in which the client generates a token for every key by directly computing the adjusted token from our multi-key search. This alternative is similar to prior work on encrypted keyword search. In this case, the client looks up the principal for every room, computes a token for each, and the server uses one token per room. The second alternative is to perform the search entirely at the client, by downloading all messages. In this case, the client still needs to look up the principal for each room so that it can decrypt the data.</p>
    <p>Figure 12 shows the time taken to search for a word in kChat for a fixed number of total messages spread over a varying number of rooms, using multi-key search and the two alternatives described above. We can see that multi-key search is much faster than either of the two alternatives, even with a small number of rooms. The performance of the two alternatives is dominated by</p>
    <p>kChat performance Latency:</p>
    <p>Throughput: 17% reduc/on</p>
  </div>
  <div class="page">
    <p>Mylar</p>
    <p>A web plaSorm that protects confiden/ality against full server compromise  Secures real applica/ons with few LoC  Modest overhead</p>
    <p>hMp://css.csail.mit.edu/mylar/</p>
    <p>Demo!</p>
    <p>webpage code verifica/on principal graph &amp; cer/fica/on new encryp/on scheme: mul/-key search</p>
  </div>
</Presentation>
