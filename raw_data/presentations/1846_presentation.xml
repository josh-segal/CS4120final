<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Enabling Scalable Social Group Analytics via Hypergraph Analysis Systems</p>
    <p>Benjamin Heintz, Abhishek Chandra University of Minnesota</p>
  </div>
  <div class="page">
    <p>Big Social Data  Rapid growth in social data  Likes  Tweets  Publications</p>
    <p>Transform into knowledge  Importance / centrality / influence  Community detection  Information flow</p>
    <p>Heintz &amp; Chandra | HotCloud '15 2</p>
  </div>
  <div class="page">
    <p>State of the Art: Graph Systems  Pairwise interactions  Writing a paper  Attending an event  Appearing on a TV show</p>
    <p>Wave of systems work  Pregel  GraphLab  GraphX</p>
    <p>Heintz &amp; Chandra | HotCloud '15 3</p>
    <p>Vertex- or edge-centric programming models</p>
  </div>
  <div class="page">
    <p>What about Groups?  Interactions: more than just pairs  Papers  Photos  Events</p>
    <p>How to model groups?</p>
    <p>Heintz &amp; Chandra | HotCloud '15 4</p>
    <p>Groups are the basis for many social interactions.</p>
    <p>Graphs poorly model groups.</p>
  </div>
  <div class="page">
    <p>Hypergraphs Model Groups</p>
    <p>Heintz &amp; Chandra | HotCloud '15 5</p>
    <p>v1 v2</p>
    <p>v3 hyperedge vertex</p>
    <p>H = (V, E)</p>
  </div>
  <div class="page">
    <p>Hypergraphs Model Groups</p>
    <p>Heintz &amp; Chandra | HotCloud '15 6</p>
    <p>v1 v2</p>
    <p>v3</p>
    <p>v1 v2</p>
    <p>v3 hyperedge vertex</p>
    <p>H = (V, E)</p>
  </div>
  <div class="page">
    <p>Hypergraphs Model Groups</p>
    <p>Heintz &amp; Chandra | HotCloud '15 7</p>
    <p>v1 v2</p>
    <p>v3</p>
    <p>v1 v2</p>
    <p>v3</p>
    <p>v1 v2</p>
    <p>v3 hyperedge vertex</p>
    <p>H = (V, E)</p>
  </div>
  <div class="page">
    <p>Hypergraphs Model Groups</p>
    <p>Heintz &amp; Chandra | HotCloud '15 8</p>
    <p>v1 v2</p>
    <p>v3</p>
    <p>v1 v2</p>
    <p>v3</p>
    <p>v1 v2</p>
    <p>v3 hyperedge vertex</p>
    <p>H = (V, E)</p>
    <p>To better model group interactions, we need hypergraph</p>
    <p>analysis systems.</p>
  </div>
  <div class="page">
    <p>Alternative Approaches</p>
    <p>Heintz &amp; Chandra | HotCloud '15 9</p>
    <p>Approach Pros Cons</p>
    <p>Affiliation network</p>
    <p>Models groups explicitly</p>
    <p>Tedious to implement; wrong level of abstraction</p>
    <p>No need for hypergraphsystems</p>
    <p>Tedious;large size; not always applicable</p>
    <p>Hypergraphs Level of abstraction matches the domain</p>
    <p>Requires hypergraph systems!</p>
  </div>
  <div class="page">
    <p>Roadmap  Motivation  Interface  Implementation  Evaluation  Discussion</p>
    <p>Heintz &amp; Chandra | HotCloud '15 10</p>
  </div>
  <div class="page">
    <p>Example: PageRank  Rank vertices by importance</p>
    <p>Heintz &amp; Chandra | HotCloud '15 11</p>
    <p>v1 v2</p>
    <p>v3</p>
  </div>
  <div class="page">
    <p>Example: PageRank  Rank vertices by importance</p>
    <p>Heintz &amp; Chandra | HotCloud '15 12</p>
    <p>v1 v2</p>
    <p>v3</p>
  </div>
  <div class="page">
    <p>Example: PageRank  Rank vertices by importance  Extension: rank hyperedges too</p>
    <p>Heintz &amp; Chandra | HotCloud '15 13</p>
    <p>v1 v2</p>
    <p>v3</p>
    <p>v1 v2</p>
    <p>v3</p>
  </div>
  <div class="page">
    <p>Example: PageRank  Rank vertices by importance  Extension: rank hyperedges too</p>
    <p>Heintz &amp; Chandra | HotCloud '15 14</p>
    <p>v1 v2</p>
    <p>v3</p>
    <p>v1 v2</p>
    <p>v3</p>
  </div>
  <div class="page">
    <p>Example: PageRank  Rank vertices by importance  Extension: rank hyperedges too  Extension: arbitrary hyperedge behavior</p>
    <p>Heintz &amp; Chandra | HotCloud '15 15</p>
    <p>v1 v2</p>
    <p>v3</p>
    <p>v1 v2</p>
    <p>v3</p>
  </div>
  <div class="page">
    <p>Example: PageRank  Rank vertices by importance  Extension: rank hyperedges too  Extension: arbitrary hyperedge behavior</p>
    <p>Heintz &amp; Chandra | HotCloud '15 16</p>
    <p>v1 v2</p>
    <p>v3</p>
    <p>v1 v2</p>
    <p>v3</p>
    <p>In a hypergraph system, hyperedges are first-class objects.</p>
  </div>
  <div class="page">
    <p>Iterative Computation</p>
    <p>Heintz &amp; Chandra | HotCloud '15 17</p>
    <p>v1 v2 v3</p>
    <p>Graph Hypergraph</p>
    <p>v1 v2 v3</p>
    <p>v1 v2 v3</p>
  </div>
  <div class="page">
    <p>Iterative Computation</p>
    <p>Heintz &amp; Chandra | HotCloud '15 18</p>
    <p>Graph Hypergraph</p>
    <p>v1 v2 v3</p>
    <p>e3e1 e2</p>
    <p>v1 v2 v3</p>
  </div>
  <div class="page">
    <p>A Hypergraph API</p>
    <p>Heintz &amp; Chandra | HotCloud '15 19</p>
    <p>trait HyperGraph[HVD, HED] { def compute[ToE, ToV](</p>
    <p>maxIters: Int, initialMsg: ToV, hvProgram: Program[HVD, ToV, ToE], heProgram: Program[HED, ToE, ToV]) : HyperGraph[HVD, HED]</p>
    <p>}</p>
    <p>object HyperGraph { trait Program[A, InMsg, OutMsg] {</p>
    <p>def messageCombiner: MessageCombiner[OutMsg] def procedure: Procedure[A, InMsg, OutMsg]</p>
    <p>}</p>
    <p>type MessageCombiner[Msg] = (Msg, Msg) =&gt; Msg</p>
    <p>type Procedure[A, InMsg, OutMsg] = (Int, NodeId, A, InMsg, Context[A, OutMsg]) =&gt; Unit</p>
    <p>trait Context[A, OutMsg] { def become(attr: A): Unit def send(msgF: NodeId =&gt; OutMsg,</p>
    <p>to: Recipients): Unit }</p>
    <p>}</p>
    <p>Listing 1: Key abstractions from our hypergraph API (expressed in Scala).</p>
    <p>tices using only 19 lines of code. Further computing hyperedge ranks requires only a single line of additional code. An even richer version which also computes the entropy of each hyperedge requires fewer than 25 lines of code.</p>
    <p>Note that a user might be able to implement the same algorithms without using the hypergraph abstraction explicitly or using our API. For instance, for the simplest PageRank variant, where we compute only vertex ranks, it is possible to define a transformation function from the input hypergraph to a weighted graph such that an existing graph PageRank algorithm yields identical results. We refer to this weighted graph as the one-mode projection of the original hypergraph. Such a transformation, however, is highly non-trivial requiring significant developer time and effort, and the resulting graph consumes significantly more space than a hypergraph representation (see Section 5). Further, this approach does not apply to the richer algorithm variants, as they require modeling hyperedges as first-class entities. An alternative approach could be to use an affiliation network model explicitly capturing group affiliations of users [8]. However, such an approach is also tedious and error-prone, and many existing graph processing abstractions (such as GraphXs Pregel implementation) cannot be applied without modification. Yet another disadvantage of such approaches is that, by disguising hypergraphs as graphs, they preclude any hypergraph-aware optimization at the underlying system level.</p>
    <p>Next, we explore two key issues involved in the implementation of our hypergraph computing API: how to represent the hypergraph at the system level, and how to partition this hypergraph for distributed computation.</p>
    <p>While these alternative representations are all equally valid, each has its strengths and weaknesses. One key advantage of the bipartite graph representation is its portability: it can be implemented on any graph computing system. For example, the underlying dataflow for our compute method is a natural extension of the dataflow in the existing GraphX Pregel implementation. However, a straightforward transformation that does not distinguish between the two distinct types of entities hyperedges and hyperverticescan result in suboptimal performance. Hyperedges and hypervertices may have significantly different characteristics including attribute sizes, degree/cardinality distribution, and behavior of their respective Programs, resulting in poor I/O performance and load imbalance. As a result, the underlying system must use mechanisms and optimizations that are aware of these differences.</p>
    <p>A multigraph representation, on the other hand, represents hypervertices and hyperedges using distinct underlying entities (viz., vertices and edges respectively), and as a result avoids these potential performance pitfalls. One limitation, however, is that only a few existing graph computing platforms (such as GraphX) provide a multigraph abstraction. Additionally, mapping our hypergraph API into this representation would require a completely different dataflow than is provided directly by existing systems. Compared to the bipartite representation, this representation might also be more storage-intensive, especially if the hypergraph contains many large hyperedges. This problem could be addressed through intel</p>
    <p>Iterative computation</p>
    <p>Vertex and hyperedge programs</p>
    <p>Messages to neighbors</p>
  </div>
  <div class="page">
    <p>Roadmap  Motivation  Interface  Implementation  Evaluation  Discussion</p>
    <p>Heintz &amp; Chandra | HotCloud '15 20</p>
  </div>
  <div class="page">
    <p>Implementation  Challenges Representation Partitioning</p>
    <p>Initial approach Build upon existing graph systems</p>
    <p>Heintz &amp; Chandra | HotCloud '15 21</p>
  </div>
  <div class="page">
    <p>Hypergraph Representations</p>
    <p>Heintz &amp; Chandra | HotCloud '15 22</p>
    <p>Representation Pros Cons</p>
    <p>Bipartite Graph</p>
    <p>Portable to any graph system</p>
    <p>Obscures hyperedge/ vertex differences</p>
    <p>Multigraph Exploits hyperedge/ vertex differences</p>
    <p>Size overhead</p>
    <p>v1</p>
    <p>v2</p>
    <p>v3</p>
    <p>e1</p>
    <p>e2</p>
    <p>e3</p>
    <p>v1</p>
    <p>v2</p>
    <p>v3</p>
    <p>e1</p>
    <p>e2</p>
    <p>e3 e3</p>
    <p>e3</p>
  </div>
  <div class="page">
    <p>Hypergraph Partitioning  Partition the underlying graph Cut vertices, cut edges, both</p>
    <p>Or use hypergraph-aware partitioning Differentiate hyperedges and vertices</p>
    <p>Heintz &amp; Chandra | HotCloud '15 23</p>
  </div>
  <div class="page">
    <p>Roadmap  Motivation  Interface  Implementation  Evaluation  Discussion</p>
    <p>Heintz &amp; Chandra | HotCloud '15 24</p>
  </div>
  <div class="page">
    <p>Datasets</p>
    <p>Heintz &amp; Chandra | HotCloud '15 25</p>
    <p>Dataset Vertices Hyperedges Bipartite Edges</p>
    <p>DBLP 952,115 authors</p>
    <p>Friendster 7,944,949 users</p>
  </div>
  <div class="page">
    <p>Datasets</p>
    <p>Heintz &amp; Chandra | HotCloud '15 26</p>
    <p>Dataset Vertices Hyperedges Bipartite Edges</p>
    <p>DBLP 952,115 authors</p>
    <p>Friendster 7,944,949 users</p>
    <p>Real-world hypergraphs exhibit diverse characteristics.</p>
  </div>
  <div class="page">
    <p>Prototype  Proof-of-concept prototype  Implemented on Apache Spark GraphX 1.2.1  Run on shared 6-node cluster (2x6-core, 24GB RAM each)  Using bipartite graph representation</p>
    <p>Heintz &amp; Chandra | HotCloud '15 27</p>
  </div>
  <div class="page">
    <p>Experimental Results (1/2)</p>
    <p>Heintz &amp; Chandra | HotCloud '15 28</p>
    <p>Number of Bipartite Edges (millions)</p>
    <p>Friendster</p>
    <p>PR PR-Entropy</p>
    <p>n Ti m e (s )</p>
    <p>Number of Bipartite Edges (millions)</p>
    <p>DBLP</p>
    <p>PR PR-Entropy</p>
  </div>
  <div class="page">
    <p>Experimental Results (1/2)</p>
    <p>Heintz &amp; Chandra | HotCloud '15 29</p>
    <p>Number of Bipartite Edges (millions)</p>
    <p>Friendster</p>
    <p>PR PR-Entropy</p>
    <p>n Ti m e (s )</p>
    <p>Number of Bipartite Edges (millions)</p>
    <p>DBLP</p>
    <p>PR PR-Entropy</p>
    <p>Scalability is a critical challenge.</p>
  </div>
  <div class="page">
    <p>Experimental Results (2/2)</p>
    <p>Heintz &amp; Chandra | HotCloud '15 30</p>
    <p>PR PR-Entropy</p>
    <p>Ex ec ut io n Ti m e (s )</p>
    <p>Partitioning: DBLP</p>
    <p>Cut Vertices Cut Hyperedges Cut Both</p>
  </div>
  <div class="page">
    <p>Experimental Results (2/2)</p>
    <p>Heintz &amp; Chandra | HotCloud '15 31</p>
    <p>PR PR-Entropy</p>
    <p>Ex ec ut io n Ti m e (s )</p>
    <p>Partitioning: DBLP</p>
    <p>Cut Vertices Cut Hyperedges Cut Both</p>
    <p>Performance significantly affected by dataset + algorithm + partitioning</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Heintz &amp; Chandra | HotCloud '15 32</p>
    <p>Social data  knowledge  State of the art: graphs  Need to model groups  Hypergraphs are the right abstraction  System challenges</p>
  </div>
  <div class="page">
    <p>Roadmap  Motivation  Interface  Implementation  Evaluation  Discussion</p>
    <p>Heintz &amp; Chandra | HotCloud '15 33</p>
  </div>
  <div class="page">
    <p>Discussion</p>
    <p>Heintz &amp; Chandra | HotCloud '15 34</p>
    <p>Programming Model &amp; API Synchronous vs. asynchronous Directed, temporal,</p>
    <p>Implementation Build on graph systems or from scratch? Representations, partitioning techniques</p>
  </div>
  <div class="page">
    <p>Thank you!</p>
    <p>Heintz &amp; Chandra | HotCloud '15 35</p>
    <p>dcsg.cs.umn.edu</p>
  </div>
</Presentation>
