<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Modular Composition of Coordination Services</p>
    <p>Kfir Lev-Ari1, Edward Bortnikov2, Idit Keidar1,2, and Alexander Shraer3</p>
  </div>
  <div class="page">
    <p>Coordination Services</p>
    <p>Used for configuration &amp; metadata storage, global locks, leader election, service discovery, and more</p>
    <p>Who uses coordination services?</p>
  </div>
  <div class="page">
    <p>Updates order: 1. X = 0 (initially) Updates order: 1. X = 0 (initially) 2. X = 5</p>
    <p>Coordination Services Structure</p>
    <p>X=0</p>
    <p>X=0</p>
    <p>X=0</p>
    <p>Client 1</p>
    <p>set(X,5)</p>
    <p>X=5</p>
    <p>X=5</p>
    <p>Client 2</p>
    <p>get(X)  0</p>
  </div>
  <div class="page">
    <p>Coordination Services Semantics</p>
    <p>reads from the past</p>
    <p>Initially X = 0</p>
    <p>Client 1:</p>
    <p>Client 2:</p>
    <p>set(X,5)</p>
    <p>get(X)0</p>
  </div>
  <div class="page">
    <p>Challenge: Coordination Service over WAN</p>
    <p>?</p>
    <p>Client</p>
  </div>
  <div class="page">
    <p>Coordination Services over WAN</p>
    <p>Updates Reads Correctness Example</p>
    <p>Distributed Service Very slow Fast Yes ACMS, Zeus, Megastore</p>
    <p>DC2 Clients</p>
    <p>DC2</p>
    <p>DC3</p>
    <p>DC3 Clients</p>
    <p>DC1 Clients</p>
    <p>DC1</p>
  </div>
  <div class="page">
    <p>Coordination Services over WAN</p>
    <p>Updates Reads Correctness Example</p>
    <p>Distributed Service Very slow Fast Yes ACMS, Zeus, Megastore</p>
    <p>Co-located Service + Learners Slow Fast Yes ZooKeeper, Consul</p>
    <p>DC1</p>
    <p>DC1 ClientsDC2 Clients</p>
    <p>DC2 Learner</p>
  </div>
  <div class="page">
    <p>Coordination Services over WAN</p>
    <p>Updates Reads Correctness Example</p>
    <p>Distributed Service Very slow Fast Yes ACMS, Zeus, Megastore</p>
    <p>Co-located Service + Learners Slow Fast Yes ZooKeeper, Consul</p>
    <p>Multiple Co-located services + Learners Fast Fast No Global service discovery</p>
    <p>DC1</p>
    <p>DC1 ClientsDC2 Clients</p>
    <p>DC2</p>
    <p>Learner 1 Learner 2</p>
  </div>
  <div class="page">
    <p>Multiple Services Deployment - Correctness</p>
    <p>Clients see different order of updates: Client 1: x=0 x=5 y=0 y=3 Client 2: y=0 y=3 x=0 x=5 9</p>
    <p>Client 1: Initially X, Y = 0</p>
    <p>set(X,5)</p>
    <p>get(X)0</p>
    <p>get(Y)0</p>
    <p>set(Y,3)Client 2:</p>
  </div>
  <div class="page">
    <p>Updates Reads Correctness Example</p>
    <p>Distributed Service Very slow Fast Yes ACMS, Zeus, Megastore</p>
    <p>Co-located Service + Learners Slow Fast Yes ZooKeeper, Consul</p>
    <p>Multiple Co-located services + Learners Fast Fast No Global service discovery</p>
    <p>Modular Composition Fast Fast Yes Our implementation: ZooNet</p>
    <p>Our Solution: Modular Composition</p>
    <p>DC1</p>
    <p>DC1 Clients</p>
    <p>DC2</p>
    <p>Learner 1 Learner 2</p>
    <p>Composition DC2 Clients</p>
    <p>Composition</p>
  </div>
  <div class="page">
    <p>Clients see same order of updates : y=0  y=3  x=0  x=5</p>
    <p>Modular Composition - Algorithm</p>
    <p>Client 1 Initially X, Y = 0</p>
    <p>set(X,5)</p>
    <p>get(X)0</p>
    <p>get(Y)3</p>
    <p>set(Y,3)Client 2 sync(X)</p>
    <p>Linearizable operation (sync) upon switching service instance</p>
    <p>sync(Y)</p>
  </div>
  <div class="page">
    <p>get(/DC2/a/b) get(/DC1/c/d)</p>
    <p>ZooNet - Modular Composition of ZooKeepers</p>
    <p>Client Client</p>
    <p>ZooNet</p>
    <p>get(/a/b) get(/a/b) [sync] get(/c/d)</p>
    <p>DC2</p>
    <p>Learner 1</p>
    <p>ClientClient</p>
    <p>DC1</p>
  </div>
  <div class="page">
    <p>ZooNet - Cost of Consistency</p>
    <p>Vary locality:  Spatial: % local access  Temporal: # consecutive accesses to same DC</p>
    <p>vs.Client ClientZooNet</p>
    <p>DC2</p>
    <p>Learner 1</p>
    <p>DC1</p>
  </div>
  <div class="page">
    <p>ZooNet Evaluation - Cost of Consistency</p>
    <p>%reads</p>
    <p>Slow All Atomic</p>
    <p>Fastest (inconsist)</p>
    <p>ZooNet</p>
  </div>
  <div class="page">
    <p>ZooNet Evaluation - Cost of Consistency No temporal locality, varying spatial locality:</p>
    <p>DC2 1K</p>
    <p>req/sec</p>
    <p>DC2 1K</p>
    <p>req/sec</p>
    <p>%local of DC2 clients</p>
    <p>(inconsist) ZooNet Slow</p>
    <p>All Atomic</p>
  </div>
  <div class="page">
    <p>ZooNet Evaluation - Cost of Consistency With temporal locality, varying spatial locality:</p>
    <p>DC2 1K</p>
    <p>req/sec</p>
    <p>DC2 1K</p>
    <p>req/sec</p>
    <p>%local of DC2 clients</p>
    <p>(inconsist) ZooNet Slow</p>
    <p>All Atomic</p>
  </div>
  <div class="page">
    <p>ZooNet vs. ZooKeeper Evaluation</p>
    <p>DC2 DC1</p>
    <p>ZooNet ZooKeeper DC2 DC1</p>
    <p>vs.</p>
  </div>
  <div class="page">
    <p>ZooNet vs. ZooKeeper Evaluation With temporal locality, varying spatial locality of DC2 clients:</p>
    <p>DC2 Throughput</p>
    <p>Speedup ZooNet/ZooKeeper</p>
    <p>%local of DC2 clients 18</p>
  </div>
  <div class="page">
    <p>Zookeeper - Server Side Improvement  We improved ZooKeeper:</p>
    <p>Performance - reads blocked for no reason  Starvation in read-intensive workloads</p>
    <p>In a nutshell:  2 clients connecting to same server blocked each other  Not required by semantics  We isolated clients</p>
    <p>Committed into ZooKeeper trunk 19See Jira ZooKeeper-2024 for more experiments and details</p>
  </div>
  <div class="page">
    <p>ZooKeeper Improvment: Evaluation Single ZK of 5 servers, 900 clients:</p>
  </div>
  <div class="page">
    <p>Performance Simplicity Correctness</p>
    <p>Small change in the client side</p>
    <p>Backward compatible</p>
    <p>Higher locality  Lower cost</p>
    <p>Conclusion</p>
    <p>you!Thank 21</p>
    <p>+Improving ZooKeeper up to x10</p>
  </div>
</Presentation>
