<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Concurrency Attacks</p>
    <p>Junfeng Yang, Ang Cui, Sal Stolfo, Simha Sethumadhavan</p>
    <p>Columbia University</p>
  </div>
  <div class="page">
    <p>Concurrent programs: critical</p>
  </div>
  <div class="page">
    <p>Concurrent programs: buggy</p>
    <p>Concurrency Attacks</p>
  </div>
  <div class="page">
    <p>Questions about concurrency attacks</p>
    <p>Are they real?  Dont occur in the wild  Need not worry</p>
    <p>What factors affect exploitability?  Use them to guide defenses</p>
    <p>e.g., prioritize error detection</p>
    <p>How do they affect existing defenses?  Need to fix broken defenses</p>
  </div>
  <div class="page">
    <p>Are they real?</p>
    <p>Initially inspected concurrency errors in existing benchmarks [BugBench, RadBench]  Difficult to exploit</p>
    <p>Turned to CVE and bug databases of popular software (e.g., Linux kernel, libc)</p>
    <p>Found 46 exploitable concurrency errors</p>
    <p>http://systems.cs.columbia.edu/archive/pub/201 2/06/concurrency-attacks</p>
  </div>
  <div class="page">
    <p>Example in Moonlight [CVE-2011-0990]</p>
    <p>Bool FastCopy(MonoArray *src, MonoArray *dest, int len) { for(i=0;i&lt;len;++i) if(!safe_cast(src[i], dest[i])) return FALSE; for(i=0;i&lt;len;++i) memcpy(dest[i], src[i], ); }</p>
    <p>dest[0] = obj with new type</p>
    <p>thread 1 thread 2</p>
  </div>
  <div class="page">
    <p>Example in Internet Explorer [MSIE R6025]</p>
    <p>Attacker constructs malicious page</p>
    <p>IE opens multiple windows of malicious page</p>
    <p>Javascript in page repeatedly calls appendChild provided by MSIE</p>
    <p>appendChild Race  corrupt function pointer</p>
    <p>Malicious page calls createComments beforehand to spray heap with malicious code</p>
  </div>
  <div class="page">
    <p>Example in iOS [CVE-2010-1754] physical proximity attack</p>
  </div>
  <div class="page">
    <p>Questions about concurrency attacks</p>
    <p>Are they real?  Dont occur in the wild  Need not worry</p>
    <p>What factors affect exploitability?  Use them to guide defense</p>
    <p>How do they affect existing defenses?  Need to fix broken defenses</p>
  </div>
  <div class="page">
    <p>They are pervasive</p>
    <p>23 vulnerable programs</p>
    <p>Span all major OS: Windows, MacOS, Linux</p>
    <p>Kernel, system lib, user-space programs</p>
    <p>Defense cannot target only one specific system or component</p>
  </div>
  <div class="page">
    <p>More than just file system time-ofcheck-to-time-of-use (TOCTOU) attacks</p>
    <p>Total 46 bugs</p>
    <p>TOCTOU defenses dont work for general concurrency attacks</p>
  </div>
  <div class="page">
    <p>Vulnerable window size heavily affects exploitability</p>
  </div>
  <div class="page">
    <p>Exploiting memory races</p>
    <p>Method 1: programmatically retry  E.g., the MS IE bug  May detect using anomaly detection techniques</p>
    <p>Method 2: enlarge vulnerable window  E.g., the Moonlight bug  Prioritize detection based on window size</p>
  </div>
  <div class="page">
    <p>Questions about concurrency attacks</p>
    <p>Are they real?  Dont occur in the wild  Need not worry</p>
    <p>What factors affect exploitability?  Use them to guide defense</p>
    <p>How do they affect existing defenses?  Need to fix broken defenses</p>
  </div>
  <div class="page">
    <p>Example: SQL injection defense</p>
    <p>$s = user input tag[$s] = $sql = select  where id = $s; tag[$sql] = tag[$s] if tag[$sql] == abort() execute_sql ($sql)</p>
    <p># X; drop table users</p>
  </div>
  <div class="page">
    <p>Example: SQL injection defense</p>
    <p>$s = alice tag[$s] = $sql = select  where id = $s; tag[$sql] = tag[$s] if tag[$sql] == abort(); execute_sql ($sql);</p>
    <p>Metadata tracking</p>
    <p>Software check</p>
  </div>
  <div class="page">
    <p>Metadata tracking: unsafe</p>
    <p>$s = user input; tag[$s] = # $s holds user input but tag{$s] is $sql = select  where id = $s; tag[$sql] = tag[$s] if tag[$sql] == abort(); execute_sql ($sql);</p>
    <p>$s = alice tag[s] =</p>
    <p>thread 1 thread 2</p>
  </div>
  <div class="page">
    <p>Implications on defenses</p>
    <p>Metadata tracking: weakened  Software checks: weakened  Anomaly detection: weakened</p>
    <p>Hardware checks: not affected  Randomization: equally (in)effective</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Concurrency attacks are real  Pervasive  More than just file system TOCTOU</p>
    <p>Physical proximity, memory  Vulnerable window size  exploitability</p>
    <p>To exploit memory races, programmatically retry or enlarge window</p>
    <p>Common defense techniques are weakened</p>
  </div>
</Presentation>
