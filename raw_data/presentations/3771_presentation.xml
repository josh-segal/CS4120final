<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Dynamic Resource Allocation for Database Servers Running on Virtual Storage</p>
    <p>Gokul Soundararajan, Daniel Lupei, Saeed Ghanbari, Adrian Daniel Popescu, Jin Chen, Cristiana Amza</p>
    <p>University of Toronto</p>
  </div>
  <div class="page">
    <p>Multi-tier Resource Allocation</p>
    <p>Consolidated Environment</p>
    <p>Web Server</p>
    <p>Application Server</p>
    <p>Database Server</p>
    <p>Composed of several tiers</p>
    <p>Application-BApplication-A</p>
    <p>Share resources in each tier</p>
    <p>Can lead to interference</p>
  </div>
  <div class="page">
    <p>Storage</p>
    <p>Database</p>
    <p>Our Focus: Storage Hierarchy</p>
    <p>Application-A Application-B</p>
    <p>Buffer Pool</p>
    <p>Storage Cache</p>
    <p>Disk Bandwidth</p>
    <p>Want to use all resources efficiently</p>
    <p>Disk is a bottleneck for Database Apps</p>
    <p>Network</p>
  </div>
  <div class="page">
    <p>State of the Art</p>
    <p>Previous work studied resources in isolation - Memory Partitioning: MRC [ASPLOS04]</p>
    <p>- Disk Bandwidth: Facade [FAST03], Argon [FAST07], etc.</p>
    <p>- ... and many more</p>
    <p>Want to use the storage hierarchy efficiently  However, performance depends on all layers</p>
    <p>- Interdependency between resources</p>
    <p>- E.g., Increasing buffer pool reduces number of storage accesses</p>
  </div>
  <div class="page">
    <p>Motivating Scenario</p>
    <p>Small Large</p>
    <p>Buffer Pool</p>
    <p>Storage Cache</p>
    <p>Disk Bandwidth</p>
    <p>Cache Friendly 1 Outstanding I/O</p>
    <p>Cache Un-Friendly 10 Outstanding I/O</p>
    <p>Using Oracle ORION I/O tool</p>
  </div>
  <div class="page">
    <p>Motivating Scenario</p>
    <p>Shared Cache Disk Cache &amp; Disk</p>
    <p>Small Large 6</p>
    <p>N o</p>
    <p>rm al</p>
    <p>iz ed</p>
    <p>L at</p>
    <p>en cy</p>
    <p>Benefits cachefriendly workload</p>
    <p>Avoids disk interference</p>
    <p>Has best performance</p>
  </div>
  <div class="page">
    <p>Contributions</p>
    <p>Build performance models dynamically - Account for interdependencies between resources</p>
    <p>- Lightweight but still accurate</p>
    <p>Multi-level Resource Allocator - Uses performance models to guide resource allocation</p>
    <p>- Corrects model errors through runtime sampling</p>
    <p>- Uses global utility (SLOs) to partition resources</p>
    <p>- Minimize sum of application latencies</p>
  </div>
  <div class="page">
    <p>Approach</p>
    <p>Build performance models - One per application</p>
    <p>- Derive function to predict application latency given configuration</p>
    <p>Find resource partitioning setting - Minimize sum of application latencies</p>
    <p>- Find best setting using hill climbing</p>
    <p>Lavg = f (!c, !s, !d)</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Online Performance Models - What are they?</p>
    <p>- Why are they hard to build?</p>
    <p>Multi-level Resource Allocator  Prototype Implementation  Experimental Results  Conclusions</p>
  </div>
  <div class="page">
    <p>One-Level Cache Model</p>
    <p>Rd(A)</p>
    <p>Cache size</p>
    <p>A vg</p>
    <p>. L at</p>
    <p>en cy</p>
    <p>Allocate in 32MB chunks</p>
    <p>m=CacheSize/ChunkSize =1GB/32MB=32 choices</p>
    <p>Choose 512MB</p>
    <p>... ...</p>
  </div>
  <div class="page">
    <p>MRC Cache Model</p>
    <p>Rd(A)</p>
    <p>Cache size</p>
    <p>M is</p>
    <p>sR</p>
    <p>at io</p>
    <p>Computes miss-ratio</p>
    <p>given an I/O trace</p>
    <p>Multiply by I/O latency gets Avg. Latency</p>
  </div>
  <div class="page">
    <p>Two-Level Cache Model</p>
    <p>Performance affected by - DB Buffer Pool Size (m choices)</p>
    <p>- Storage Cache (n choices)</p>
    <p>Performance model - Needs to consider all parameters (m*n choices)</p>
    <p>- 1GB caches allocated in 32MB chunks</p>
    <p>- m = 1GB/32MB = 32 settings</p>
    <p>- m*n = 1024 distinct settings</p>
    <p>Changes the I/O trace at</p>
    <p>storage</p>
  </div>
  <div class="page">
    <p>Two-Level Cache Model</p>
    <p>Latency Surface</p>
    <p>Buffer Pool Size (MB)</p>
    <p>Storage Cache Size (MB)</p>
    <p>Buffer Pool Size</p>
    <p>St or</p>
    <p>ag e</p>
    <p>Ca ch</p>
    <p>e S ize</p>
    <p>A vg</p>
    <p>. L</p>
    <p>a te</p>
    <p>n c</p>
    <p>y</p>
    <p>High Latency</p>
    <p>Low Latency</p>
  </div>
  <div class="page">
    <p>Overall Performance Model</p>
    <p>Application</p>
    <p>!c</p>
    <p>!s</p>
    <p>!d</p>
    <p>Buffer Pool</p>
    <p>Storage Cache</p>
    <p>Disk Bandwidth</p>
    <p>Needs 32x32x10=10240</p>
    <p>samples</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Online Performance Models  Multi-level Resource Allocator</p>
    <p>- Building performance models</p>
    <p>- Allocating resources using models</p>
    <p>Prototype Implementation  Experimental Results  Conclusions</p>
  </div>
  <div class="page">
    <p>Key Observations</p>
    <p>Known cache replacement policies - Most cache replacement algorithms are LRU</p>
    <p>- Only as effective as the largest cache (cache inclusiveness)</p>
    <p>Disk is a closed loop system - Rate of responses is same as rate of requests</p>
    <p>- Performance proportional to the disk bandwidth fraction</p>
  </div>
  <div class="page">
    <p>Cache Inclusiveness</p>
    <p>LRU</p>
    <p>LRU</p>
    <p>I/Os: 0I/Os: 1</p>
  </div>
  <div class="page">
    <p>Cache Inclusiveness</p>
    <p>LRU</p>
    <p>LRU</p>
    <p>I/Os: 6</p>
    <p>Storage cache includes data in the buffer pool</p>
  </div>
  <div class="page">
    <p>Cache Inclusiveness</p>
    <p>LRU</p>
    <p>LRU</p>
    <p>I/Os: 6</p>
    <p>includes data in the storage cache</p>
  </div>
  <div class="page">
    <p>Approximate Single Cache Model (LRU)</p>
    <p>I/Os: 6</p>
    <p>Same Number of I/Os</p>
    <p>LRU</p>
    <p>LRU34</p>
    <p>Mc(max[!c, !s])</p>
  </div>
  <div class="page">
    <p>Cache Model (DEMOTE)</p>
    <p>Maintain cache exclusiveness - E.g., using DEMOTEs [USENIX02]</p>
    <p>- Every block brought into buffer pool is not cached below</p>
    <p>- Only evictions from buffer pool cached in storage cache</p>
    <p>Approximate performance using single cache - Mc(!c + !s)</p>
  </div>
  <div class="page">
    <p>Find Best Partitioning Setting</p>
    <p>Find Best Resource Allocation Setting</p>
    <p>Buffer Pool Size</p>
    <p>St or</p>
    <p>ag e</p>
    <p>Ca ch</p>
    <p>e S ize</p>
    <p>L a</p>
    <p>te n</p>
    <p>c y</p>
    <p>App-1</p>
    <p>App-2</p>
    <p>Buffer Pool Size</p>
    <p>St or</p>
    <p>ag e</p>
    <p>Ca ch</p>
    <p>e S ize</p>
    <p>L a</p>
    <p>te n</p>
    <p>c y Minimize sum of</p>
    <p>application latencies</p>
  </div>
  <div class="page">
    <p>Observation: Closed loop system - Rate of responses same as rate of requests</p>
    <p>- Use interactive response time law</p>
    <p>Performance proportional to disk bandwidth fraction - Measure base disk latency:</p>
    <p>- Predict latency for smaller bandwidth fractions</p>
    <p>Disk Model</p>
    <p>Ld(!d) = Ld(1)</p>
    <p>!d</p>
    <p>Ld(1)</p>
  </div>
  <div class="page">
    <p>Putting it All Together</p>
    <p>Application</p>
    <p>Mc(!c)Ms(!c, !s)N</p>
    <p>Storage Cache</p>
    <p>Buffer Pool</p>
    <p>Approximate Single-Level</p>
    <p>Cache Can now be</p>
    <p>solved using MRC</p>
    <p>= Mc(max[!c, !s])N</p>
  </div>
  <div class="page">
    <p>Putting it all Together</p>
    <p>Application</p>
    <p>Hc(!c)Lc</p>
    <p>Mc(!c)Hs(!c, !s)Lnet</p>
    <p>Mc(!c)Ms(!c, !s)Ld(!d)</p>
  </div>
  <div class="page">
    <p>Inaccuracies in the Model</p>
    <p>Cache Model - Approximations to LRU, i.e., CLOCK</p>
    <p>- Large fraction of writes in the workload</p>
    <p>Disk Model - Using Quanta-based scheduler [Wachs et. al, FAST07]</p>
    <p>- Interference due to disk seeks at small quanta</p>
    <p>Inaccuracies localized in known regions - E.g., Small disk quanta</p>
  </div>
  <div class="page">
    <p>Iterative Refinement</p>
    <p>Build model - Use trace collected at the database buffer pool</p>
    <p>Refine the model - Use cross-validation to measure quality</p>
    <p>- Selectively sample where error is high</p>
    <p>- Interpolate computed and measured samples</p>
    <p>- Using regression (SVM)</p>
  </div>
  <div class="page">
    <p>Virtual Storage Prototype</p>
    <p>StorageMySQL</p>
    <p>Linux</p>
    <p>NBD</p>
    <p>CLIENT</p>
    <p>Block Layer</p>
    <p>SCSI</p>
    <p>Buffer Pool</p>
    <p>Disk</p>
    <p>SERVER</p>
    <p>NBD</p>
    <p>Linux</p>
    <p>Block Layer</p>
    <p>SCSI</p>
    <p>Disk</p>
    <p>N e</p>
    <p>tw o</p>
    <p>rk</p>
    <p>DiskDisk</p>
    <p>Cache Quanta</p>
  </div>
  <div class="page">
    <p>Experimental Setup</p>
    <p>Benchmarks - UNIFORM (microbenchmark), TPC-W and TPC-C</p>
    <p>LAMP Architecture - Linux, Apache 1.3, MySQL/InnoDB 5.0, and PHP 5.0</p>
    <p>Cache Configuration - MySQL buffer pool = 1GB</p>
    <p>- Storage cache = 1GB</p>
    <p>- Using InnoDB cache replacement in MySQL, CLOCK in storage cache</p>
  </div>
  <div class="page">
    <p>Our Algorithms</p>
    <p>GLOBAL - Gather trace at the buffer pool</p>
    <p>- Measure base disk latency</p>
    <p>- Compute performance using performance model</p>
    <p>GLOBAL+ - Run GLOBAL</p>
    <p>- Evaluate model accuracy</p>
    <p>- Refine model using runtime samples</p>
  </div>
  <div class="page">
    <p>Algorithms for Comparison</p>
    <p>MRC - Partition cache (independently) using miss-ratio curves</p>
    <p>DISK - Partition caches equally, determine best disk quanta</p>
    <p>MRC+DISK - Run MRC then DISK</p>
    <p>IDEAL* - Build model with SVM using 16*16*5=1280 sampled configurations</p>
  </div>
  <div class="page">
    <p>Roadmap of Results</p>
    <p>Multi-level cache allocator - Using LRU and DEMOTE cache replacement policies</p>
    <p>Multi-level cache and disk  Accuracy of computed models</p>
  </div>
  <div class="page">
    <p>Miss-Ratio Curves</p>
    <p>M is</p>
    <p>s R</p>
    <p>at io</p>
    <p>(% )</p>
    <p>Buffer Pool Size (MB)</p>
    <p>TPC-W TPC-C</p>
    <p>UNIFORM</p>
  </div>
  <div class="page">
    <p>Multi-Level Caching (LRU)</p>
    <p>Optimal</p>
    <p>HeatMap Lighter: Better Darker: WorseOptimal</p>
    <p>Storage Cache Size (A)</p>
    <p>B u</p>
    <p>ff e</p>
    <p>r P</p>
    <p>o o</p>
    <p>l S iz</p>
    <p>e (A</p>
    <p>)</p>
  </div>
  <div class="page">
    <p>Multi-Level Caching (DEMOTE)</p>
    <p>Optimal</p>
    <p>Storage Cache Size (A)</p>
    <p>B u</p>
    <p>ff e</p>
    <p>r P</p>
    <p>o o</p>
    <p>l S iz</p>
    <p>e (A</p>
    <p>)</p>
  </div>
  <div class="page">
    <p>Roadmap of Results</p>
    <p>Multi-level cache allocator  Multi-level cache and disk</p>
    <p>- Using two identical applications</p>
    <p>- Using different applications</p>
    <p>Accuracy of computed models</p>
  </div>
  <div class="page">
    <p>UNIFORM/UNIFORM</p>
    <p>GLOBAL GLOBAL+ MRC DISK MRC+DISK IDEAL*</p>
    <p>UNIFORM UNIFORM</p>
    <p>A ve</p>
    <p>ra g</p>
    <p>e L</p>
    <p>a te</p>
    <p>n c</p>
    <p>y (m</p>
    <p>s )</p>
    <p>Allocate caches to 50/50</p>
    <p>Matches GLOBAL</p>
  </div>
  <div class="page">
    <p>TPC-W/UNIFORM</p>
    <p>GLOBAL GLOBAL+ MRC DISK MRC+DISK IDEAL*</p>
    <p>TPC-W UNIFORM</p>
    <p>A ve</p>
    <p>ra g</p>
    <p>e L</p>
    <p>a te</p>
    <p>n c</p>
    <p>y (m</p>
    <p>s )</p>
    <p>Allocate caches to 50/50</p>
    <p>Not enough buffer pool to</p>
    <p>UNIFORM Compensate for MRC settings</p>
  </div>
  <div class="page">
    <p>TPC-W/TPC-C</p>
    <p>GLOBAL GLOBAL+ MRC DISK MRC+DISK IDEAL*</p>
    <p>TPC-W TPC-C</p>
    <p>A ve</p>
    <p>ra g</p>
    <p>e L</p>
    <p>a te</p>
    <p>n c</p>
    <p>y (m</p>
    <p>s )</p>
    <p>Corrects model at runtime</p>
    <p>Corrects imbalance in</p>
    <p>MRC</p>
    <p>TPC-C allocated more in both</p>
  </div>
  <div class="page">
    <p>Roadmap of Results</p>
    <p>Multi-level cache allocator  Multi-level cache and disk  Accuracy of computed models</p>
    <p>- Cache model</p>
    <p>- Disk model</p>
  </div>
  <div class="page">
    <p>Cache Model Accuracy (TPC-W)</p>
    <p>St or</p>
    <p>ag e</p>
    <p>C ac</p>
    <p>he S</p>
    <p>iz e</p>
    <p>(M B</p>
    <p>)</p>
    <p>Buffer Pool Size (MB)</p>
    <p>E rr</p>
    <p>or (%</p>
    <p>)</p>
    <p>Localized in the middle</p>
  </div>
  <div class="page">
    <p>Disk Model Accuracy (TPC-W)</p>
    <p>L at</p>
    <p>en cy</p>
    <p>(m s)</p>
    <p>Disk Quota</p>
    <p>Measured Computed</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>Problem - Need to consider resources on multiple tiers</p>
    <p>- Independent cache/disk allocators are not sufficient</p>
    <p>Dynamic allocation of cache hierarchy and disk - Build performance models dynamically</p>
    <p>- Iteratively refine (if necessary)</p>
    <p>- Use models for global resource partitioning</p>
    <p>Performance up to 2.9 better than single resource allocators</p>
  </div>
  <div class="page">
    <p>Thank you.</p>
  </div>
</Presentation>
