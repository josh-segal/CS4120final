<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Do we need a crystal ball for task migration?</p>
    <p>Brandon {Myers,Holt}</p>
    <p>University of Washington bdmyers@cs.washington.edu</p>
  </div>
  <div class="page">
    <p>Large data sets</p>
    <p>Data</p>
  </div>
  <div class="page">
    <p>Spread data</p>
    <p>Data.1 Data.2 Data.3 Data.4 Data.0 Data.1 Data.2 Data.3</p>
  </div>
  <div class="page">
    <p>Spread data</p>
    <p>Data.1 Data.2 Data.3 Data.4 Data.0 Data.1 Data.2 Data.3</p>
  </div>
  <div class="page">
    <p>Resources: compute, bandwidth</p>
    <p>Data.1 Data.2 Data.3 Data.4 Data.0 Data.1 Data.2 Data.3</p>
  </div>
  <div class="page">
    <p>Task migration  move a running task to another node</p>
    <p>purpose: o increase utilization or manage resources</p>
    <p>o move task near tasks that share data</p>
    <p>o move task closer to data it will access</p>
    <p>costs: o moving local data required for the task to proceed</p>
    <p>o cpu time to stop and resume a task</p>
  </div>
  <div class="page">
    <p>Prior work  task migration for:</p>
    <p>o efficient use of resources</p>
    <p>o load balancing</p>
    <p>thread placement on cache coherent</p>
    <p>systems using sharing information1</p>
    <p>prediction for migration on NoC2</p>
  </div>
  <div class="page">
    <p>Non-uniform cost to access shared data</p>
    <p>Shared</p>
    <p>Local</p>
    <p>PGAS</p>
  </div>
  <div class="page">
    <p>Exploit locality</p>
    <p>Shared PGAS</p>
    <p>Local</p>
    <p>node0 node1 node2 node3</p>
  </div>
  <div class="page">
    <p>load (&lt;node1&gt;)</p>
    <p>node 0</p>
    <p>node 1</p>
    <p>node 2</p>
    <p>time</p>
    <p>REMOTE</p>
  </div>
  <div class="page">
    <p>load (&lt;node1&gt;) load (&lt;node1&gt;)</p>
    <p>node 0</p>
    <p>node 1</p>
    <p>node 2</p>
    <p>time</p>
    <p>REMOTE</p>
    <p>LOCAL</p>
    <p>REMOTE</p>
  </div>
  <div class="page">
    <p>load (&lt;node2&gt;) load (&lt;node1&gt;) load (&lt;node1&gt;) load (&lt;node1&gt;)</p>
    <p>node 0</p>
    <p>node 1</p>
    <p>node 2</p>
    <p>time</p>
    <p>REMOTE REMOTE REMOTE REMOTE</p>
    <p>REMOTE</p>
    <p>REMOTE LOCAL LOCAL</p>
  </div>
  <div class="page">
    <p>load (&lt;node2&gt;) load (&lt;node1&gt;) load (&lt;node1&gt;) load (&lt;node1&gt;)</p>
    <p>node 0</p>
    <p>node 1</p>
    <p>node 2</p>
    <p>time</p>
    <p>REMOTE REMOTE REMOTE REMOTE</p>
    <p>REMOTE</p>
    <p>REMOTE LOCAL LOCAL</p>
  </div>
  <div class="page">
    <p>consider task migration as a prediction problem</p>
    <p>can we predict when it will be more efficient</p>
    <p>to move the data to the task,</p>
    <p>or move the task to the data?</p>
    <p>Question</p>
  </div>
  <div class="page">
    <p>Outline  Motivation</p>
    <p>System model and cost metric</p>
    <p>Online migration predictors</p>
    <p>Evaluation</p>
  </div>
  <div class="page">
    <p>System model  assumption: network is limiting resource</p>
    <p>simplification: flat network topology o only distinguish between local and remote shared memory</p>
    <p>cost metric: bytes transferred over the network o others are possible; this is enough to capture network usage</p>
    <p>o no timing required</p>
  </div>
  <div class="page">
    <p>Optimal task migration  What is the best possible cost for a given</p>
    <p>execution?</p>
    <p>Find the schedule of migrations that</p>
    <p>minimizes bytes transferred</p>
    <p>Model excludes timing =&gt; schedules can be</p>
    <p>calculated independently for each task</p>
  </div>
  <div class="page">
    <p>load (&lt;node2&gt;) load (&lt;node1&gt;) load (&lt;node1&gt;) load (&lt;node1&gt;)</p>
    <p>node 0</p>
    <p>node 1</p>
    <p>node 2</p>
    <p>time</p>
    <p>REMOTE REMOTE REMOTE REMOTE</p>
    <p>REMOTE</p>
    <p>REMOTE LOCAL LOCAL</p>
    <p>Optimal schedule</p>
  </div>
  <div class="page">
    <p>Outline  Motivation</p>
    <p>System model and cost metric</p>
    <p>Online migration policies</p>
    <p>Evaluation</p>
  </div>
  <div class="page">
    <p>Online policies  predict whether a migration will give benefit</p>
    <p>look at past access patterns</p>
    <p>similar to prefetch prediction in computer</p>
    <p>architecture</p>
  </div>
  <div class="page">
    <p>Migration predictors</p>
    <p>predictor</p>
    <p>history of past memory accesses</p>
    <p>current node</p>
    <p>estimate of task size</p>
    <p>{stay,migrate}</p>
    <p>target node</p>
  </div>
  <div class="page">
    <p>Stream Predictor policy  influenced by stream buffer* prefetch prediction</p>
    <p>migrate task when it has seen enough references</p>
    <p>to the same node in the immediate past</p>
    <p>PC</p>
    <p>Node:</p>
    <p>time</p>
    <p>*N. P. Jouppi. Improving direct-mapped cache performance by the addition of a small fully-associative cache and prefetch buffers. 17th ISCA '90, pages 364{373, New York, NY, USA, 1990. ACM.</p>
  </div>
  <div class="page">
    <p>Stream Predictor policy  disadvantages of Stream:</p>
    <p>o do extra remote accesses before recognizing pattern</p>
    <p>o must do this every time</p>
    <p>PC</p>
    <p>time</p>
    <p>Node:</p>
  </div>
  <div class="page">
    <p>Hindsight Migrate policy  insight:</p>
    <p>o same code may always have the same access pattern</p>
    <p>solution: o remember PCs that would have been good to migrate at</p>
  </div>
  <div class="page">
    <p>Hindsight: motivation</p>
    <p>PC 2 4 5  5 6.a 6.b 2 4 5  5 6.a 6.b</p>
    <p>Node 0 3 3 3 3 1 1 0 7 7 7 7 4 4</p>
  </div>
  <div class="page">
    <p>Hindsight Migrate policy</p>
    <p>PC 0 1 2 3 4 5 6 7 8 9 4 5 6 7 8 9 4 5</p>
    <p>Node 0 2 0 0 1 1 1 3 1 1 2 2 2 8 2 2 3 3</p>
    <p>PC</p>
    <p>Migration set</p>
    <p>ask: would migrating at the first memory access in the window have been worth it? if so, then add the PC to a migration set so the task can migrate next time</p>
  </div>
  <div class="page">
    <p>Hindsight Migrate policy</p>
    <p>PC 0 1 2 3 4 5 6 7 8 9 4 5 6 7 8 9 4 5</p>
    <p>Node 0 2 0 0 1 1 1 3 1 1 2 2 2 8 2 2 3 3</p>
    <p>PC</p>
    <p>Migration set</p>
  </div>
  <div class="page">
    <p>Migration set</p>
    <p>Hindsight Migrate policy</p>
    <p>PC 0 1 2 3 4 5 6 7 8 9 4 5 6 7 8 9 4 5</p>
    <p>Node 0 2 0 0 1 1 1 3 1 1 2 2 2 8 2 2 3 3</p>
    <p>PC</p>
  </div>
  <div class="page">
    <p>Migration set</p>
    <p>Hindsight Migrate policy</p>
    <p>PC 0 1 2 3 4 5 6 7 8 9 4 5 6 7 8 9 4 5</p>
    <p>Node 0 2 0 0 1 1 1 3 1 1 2 2 2 8 2 2 3 3</p>
    <p>PC</p>
  </div>
  <div class="page">
    <p>Migration set</p>
    <p>Hindsight Migrate policy</p>
    <p>PC 0 1 2 3 4 5 6 7 8 9 4 5 6 7 8 9 4 5</p>
    <p>Node 0 2 0 0 1 1 1 3 1 1 2 2 2 8 2 2 3 3</p>
    <p>PC</p>
    <p>migrate? yes</p>
  </div>
  <div class="page">
    <p>Outline  Motivation</p>
    <p>Simplified system model and cost metric</p>
    <p>Online migration policies</p>
    <p>Evaluation</p>
  </div>
  <div class="page">
    <p>Evaluation  potential for task migration over no migration?</p>
    <p>how much of this can predictors achieve?</p>
    <p>procedure: o collect shared memory trace from program execution</p>
    <p>o simulate it in our model and measure total cost</p>
    <p>o run simulations with fixed task sizes</p>
    <p>benchmarks o NPB IntSort</p>
    <p>o PARSEC FluidAnimate</p>
    <p>o SSCA#2 Betweenness centrality</p>
  </div>
  <div class="page">
    <p>Simulation 1. annotate application code to choose a</p>
    <p>distribution for each shared memory</p>
    <p>allocation</p>
    <p>execution</p>
    <p>migrate</p>
    <p>ii. add the cost of the chosen action</p>
  </div>
  <div class="page">
    <p>IntSort</p>
  </div>
  <div class="page">
    <p>FluidAnimate</p>
  </div>
  <div class="page">
    <p>Betweenness Centrality</p>
  </div>
  <div class="page">
    <p>Results summary  simple online predictors achieved up to 60% of</p>
    <p>optimal reduction in bytes transferred</p>
    <p>higher ratio of random access =&gt; lower potential for</p>
    <p>task migration to reduce network usage</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>In this work: o task migration for reducing network usage, considered as a</p>
    <p>prediction problem</p>
    <p>Take-away: o migration predictors can make profitable choices based</p>
    <p>on past memory accesses</p>
    <p>o moving tasks to the data has the potential to improve</p>
    <p>performance of parallel applications if there is locality to</p>
    <p>exploit</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>A better cost metric  message cost =</p>
    <p>()</p>
    <p>image: http://gasnet.cs.berkeley.edu/performance/</p>
  </div>
  <div class="page">
    <p>Recoup rate</p>
  </div>
  <div class="page">
    <p>Annotations edgeData = (graphSDG *) malloc(sizeof(graphSDG));</p>
    <p>track_memory(edgeData-&gt;startVertex, M, sizeof(VERT_T), BLOCK);</p>
    <p>track_memory(edgeData-&gt;endVertex, M, sizeof(VERT_T), BLOCK);</p>
    <p>track_memory(edgeData-&gt;weight, M, sizeof(WEIGHT_T), BLOCK);</p>
    <p>BC = (double *) tm_malloc(N , sizeof(double), BLOCK);</p>
    <p>elapsed_time = betweennessCentrality(G, BC);</p>
    <p>tm_free(BC);</p>
  </div>
  <div class="page">
    <p>Instrumentation  Use Pin to instrument the tracking functions and</p>
    <p>memory accesses</p>
    <p>On tracking functions o Update mapping of (address range) -&gt; (allocation id)</p>
    <p>On each memory access o the callback looks up the access</p>
    <p>o If it is in a tracked region, save information about the access to trace file</p>
  </div>
</Presentation>
