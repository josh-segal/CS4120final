<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Extracting Relations from XML Documents</p>
    <p>C. T. Howard Ho</p>
    <p>Joerg GerhardtEugene Agichtein*Vanja Josifovski</p>
    <p>IBM Almaden and Columbia University*</p>
  </div>
  <div class="page">
    <p>Extraction for Data Integration: Motivating Example</p>
    <p>Products</p>
    <p>books</p>
    <p>ite m</p>
    <p>booktitl e</p>
    <p>autho r</p>
    <p>publish er</p>
    <p>ISB N</p>
    <p>Native Schema</p>
    <p>Publications</p>
    <p>book</p>
    <p>title author publisher</p>
    <p>ISBN</p>
    <p>External Schema</p>
    <p>price</p>
    <p>ISBN Title Author Publishe r</p>
    <p>Price</p>
    <p>price</p>
    <p>musicvideo</p>
  </div>
  <div class="page">
    <p>Why Extract Data from XML?</p>
    <p>XML query processing is still in development. Still not as fast as RDBMS</p>
    <p>Relational query processing is still standard for many business applications</p>
    <p>By extracting into one relational schema, avoid overhead of XML runtime data integration</p>
    <p>Extracted relations can be best exploited for relatively static data (e.g., product catalogs)</p>
  </div>
  <div class="page">
    <p>Related Work</p>
    <p>XTRACT (induces DTDs)  Lore/DataGuides  HTML Wrappers (LixTo, RoadRunner,</p>
    <p>WHISK, STALKER,  )  Plain Text Information Extraction</p>
    <p>(Proteus, Snowball, Rapier)  Supervised/Assisted XML Schema</p>
    <p>Mapping (e.g., Clio)</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Motivation  Problem statement  XMLMiner approach  Training XMLMiner  Extraction from new documents  Some observation from the prototype  Summary</p>
  </div>
  <div class="page">
    <p>Problem Statement</p>
    <p>Given a target flat relation R, extract information for the tuples in R from XML (or HTML) documents, with potentially significant variations in schema.</p>
    <p>Problems with current integration/extraction approaches:  Hard-coding the rules/queries</p>
    <p>requires significant effort; The resulting rules can be brittle.</p>
    <p>XML Schema or DTD is not always provided</p>
  </div>
  <div class="page">
    <p>XMLMiner Approach</p>
    <p>Learn signatures from example XML documents  Represent document structure while maintaining</p>
    <p>flexibility (to allow schema variations)  Assume that a tuple in the target relation</p>
    <p>corresponds to a subtree rooted at an instance node. (The subtree may contain more detailed info of the tuple than needed.)</p>
    <p>Represent input document nodes as vectors, and then find the closest (i.e., most similar) instance node vector</p>
    <p>Use labels and data values to map children of the instance node to target tuple attributes</p>
  </div>
  <div class="page">
    <p>XMLMiner Architecture: Training and Extraction</p>
    <p>Canonic al Tree</p>
    <p>Canonic al Tree</p>
  </div>
  <div class="page">
    <p>High Level Description</p>
    <p>Training:  Each XML document is merged/split to a schema</p>
    <p>like tree, called canonical tree  User identifies the attributes nodes (under instance</p>
    <p>node), corresponding to the target tuple attributes  System derives the instance node in the tree  Build a model for the structure of the tuple and</p>
    <p>each attribute</p>
    <p>Extracting:  Apply the model to find the most likely instance</p>
    <p>node and attribute nodes in the new XML documents</p>
  </div>
  <div class="page">
    <p>Training Stage I: Create Canonical Tree for each Example</p>
    <p>Document</p>
  </div>
  <div class="page">
    <p>Canonical Form Conversion Example: Merging Similar Nodes</p>
    <p>Merge all siblings with the same label (e.g., Item  Item*)</p>
    <p>Intuition: Siblings with the same label represent similar entities.</p>
    <p>Original Document Structure</p>
    <p>Merged Document</p>
  </div>
  <div class="page">
    <p>Example: Split Heterogeneous Nodes  Canonical Form</p>
    <p>Node\Tag Book Author Title Year CD Artist Length Name Item1 1 1 1 0 0 0 0 0 Item2 1 1 0 1 0 0 0 0 Item3 0 0 0 0 1 1 1 0 Item4 0 0 0 0 1 1 0 1</p>
    <p>Canonical Tree:</p>
  </div>
  <div class="page">
    <p>Training Stage I Result: Canonical Tree</p>
    <p>Original Documen t:</p>
    <p>Canonical Form:</p>
  </div>
  <div class="page">
    <p>Training Stage II: Generate Instance Node Signatures Features used to create</p>
    <p>signatures for an instance node I (item) in the canonical tree:  A: Ancestors of I  S: Siblings of I  C: Descendants of I  I: Self: Tag of I</p>
    <p>Siblings and Ancestors position of I in the document</p>
    <p>The Descendants :  internal structure of I</p>
  </div>
  <div class="page">
    <p>Training Stage (cont.): Example Instance Node Signature</p>
    <p>Signature (A,S,C,I) for Item :</p>
    <p>[ A: { Products, Books}, S: { Category_Desc}, C: { Title, Author, Publisher, New, Used, ISBN, Price, Num_Copies } I: {Item}</p>
    <p>]</p>
  </div>
  <div class="page">
    <p>Signature Similarity</p>
    <p>Vector Space model, TF*IDF weights for terms</p>
    <p>Incorporates structure (similarity-byregion)</p>
    <p>SX: [ A: { Products:1, }, S: { Music:0.33, Video:0.33}, C: { Title:0.33, Author:0.33, Publisher:0.33, New:0.2, Used:0.2, ISBN:0.6, Price:0.2, Copies:0.5 },</p>
    <p>I: {Item} ]</p>
    <p>SY: [ A: { Products:1, Books:0.5},</p>
    <p>S: { CDs:0.5}, C: { Title:0.33, Author:0.33, Publisher:0.33, ISBN:0.6, Price:0.2, Copies:0.5 },</p>
    <p>I: {Book} ]Similarity(SX, SY) = SX.A * SY.A + SX.S * SY.S + +SX.C * SY.C + SX.I * SY.I</p>
  </div>
  <div class="page">
    <p>Training Stage III: Attribute Signatures</p>
    <p>Structural + Data signature S(D, A, S, C, I)  1: Data signature D for the values of R.X</p>
    <p>(e.g., can be a histogram of values for X)  Structure signature for attribute X: (A; S; C; I ):</p>
    <p>Similar to instance signature  Original instance node</p>
    <p>document root,  A  ancestors</p>
    <p>(Item, Publisher, New)  I  self (ISBN)  S  siblings</p>
    <p>(Price, NumCopies)  C  null.</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Motivation  Problem statement  XMLMiner approach  Training XMLMiner  Extraction from new documents  XMLMiner prototype  Summary</p>
  </div>
  <div class="page">
    <p>Extraction Stage</p>
  </div>
  <div class="page">
    <p>Extraction I: Represent test documents in canonical form</p>
    <p>Publications</p>
    <p>bookbook</p>
    <p>title authorpublisher</p>
    <p>price</p>
    <p>edito r</p>
    <p>Test Document Canonical Form</p>
    <p>ISBN</p>
    <p>book*</p>
    <p>title authorpublisher</p>
    <p>price</p>
    <p>edito r</p>
    <p>ISBN</p>
    <p>Publications</p>
    <p>Intuition:</p>
    <p>Robustness (allows optional nodes)</p>
    <p>Efficiency: Canonical form has fewer nodes that original tree</p>
  </div>
  <div class="page">
    <p>Extraction II: Find Instance Node in Canonical Tree</p>
    <p>For each node K in CT</p>
    <p>Compute Signature of K SK</p>
    <p>Compute score for K as Similarity( SK , SI )</p>
    <p>SI is the signature of instance node I from training</p>
    <p>The node with highest score is the instance node in CT</p>
    <p>book*</p>
    <p>title authorpublisher</p>
    <p>price</p>
    <p>edito r</p>
    <p>ISBN</p>
    <p>Publications</p>
  </div>
  <div class="page">
    <p>Extraction III: Map children of instance node to attributes</p>
    <p>For each node J of subtree at K</p>
    <p>For each attribute X of R</p>
    <p>ASJ  Attribute Signature of J</p>
    <p>ASX  Attribute Signature of X</p>
    <p>Compute score for J as Similarity( ASJ , ASX )</p>
    <p>Pick mapping such that Product of the scores over attributes of R is maximized.</p>
    <p>book*</p>
    <p>title authorpublisher</p>
    <p>price</p>
    <p>edito r</p>
    <p>ISBN</p>
  </div>
  <div class="page">
    <p>Extraction IV: Generate XPath queries for the new documents</p>
    <p>Apply XPath queries to the new XML documents</p>
    <p>Simple XPath queries can be handled by Xerces parser or more advanced streaming parser</p>
  </div>
  <div class="page">
    <p>XMLMiner Prototype</p>
    <p>Successfully finds best instance node (Book) in test document</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>Partially supervised, low effort XML relational extraction</p>
    <p>Flexible vector space representation that preserves some original structure</p>
    <p>Can potentially be more robust than current state-of-the-art systems that rely on rules</p>
  </div>
</Presentation>
