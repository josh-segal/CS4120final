<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>ZooKeeper</p>
    <p>Wait-free coordination for Internet-scale systems</p>
    <p>Patrick Hunt and Mahadev (Yahoo! Grid) Flavio Junqueira and Benjamin Reed (Yahoo! Research)</p>
  </div>
  <div class="page">
    <p>Internet-scale Challenges</p>
    <p>Lots of servers, users, data</p>
    <p>FLP, CAP</p>
    <p>Mere mortal programmers</p>
  </div>
  <div class="page">
    <p>Classic Distributed System</p>
    <p>Master</p>
    <p>Slave SlaveSlaveSlaveSlaveSlave</p>
  </div>
  <div class="page">
    <p>Fault Tolerant Distributed System</p>
    <p>Master</p>
    <p>Slave SlaveSlaveSlaveSlaveSlave</p>
    <p>Coordination Service</p>
    <p>Master</p>
  </div>
  <div class="page">
    <p>Fault Tolerant Distributed System</p>
    <p>Master</p>
    <p>Slave SlaveSlaveSlaveSlaveSlave</p>
    <p>Coordination Service</p>
    <p>Master</p>
  </div>
  <div class="page">
    <p>Fully Distributed System</p>
    <p>Worker WorkerWorkerWorkerWorkerWorker</p>
    <p>Coordination Service</p>
  </div>
  <div class="page">
    <p>What is coordination?</p>
    <p>Group membership</p>
    <p>Leader election</p>
    <p>Dynamic Configuration</p>
    <p>Status monitoring</p>
    <p>Queuing</p>
    <p>Barriers</p>
    <p>Critical sections</p>
  </div>
  <div class="page">
    <p>Goals</p>
    <p>Been done in the past</p>
    <p>ISIS, distributed locks (Chubby, VMS)</p>
    <p>High Performance</p>
    <p>Multiple outstanding ops</p>
    <p>Read dominant</p>
    <p>General (Coordination Kernel)</p>
    <p>Reliable</p>
    <p>Easy to use</p>
  </div>
  <div class="page">
    <p>wait-free</p>
    <p>Pros</p>
    <p>Slow processes cannot slow down fast ones</p>
    <p>No deadlocks</p>
    <p>No blocking in the implementations</p>
    <p>Cons</p>
    <p>Some coordination primitives are blocking</p>
    <p>Need to be able to efficiently wait for conditions</p>
  </div>
  <div class="page">
    <p>Serializable vs Linearizability</p>
    <p>Linearizable writes</p>
    <p>Serializable read (may be stale)</p>
    <p>Client FIFO ordering</p>
  </div>
  <div class="page">
    <p>Change Events</p>
    <p>Clients request change notifications</p>
    <p>Service does timely notifications</p>
    <p>Do not block write requests</p>
    <p>Clients get notification of a change before they see the result of a change</p>
  </div>
  <div class="page">
    <p>Solution</p>
    <p>Order + wait-free + change events = coordination</p>
  </div>
  <div class="page">
    <p>ZooKeeper API</p>
    <p>String create(path, data, acl, flags)</p>
    <p>void delete(path, expectedVersion)</p>
    <p>Stat setData(path, data, expectedVersion)</p>
    <p>(data, Stat) getData(path, watch)</p>
    <p>Stat exists(path, watch)</p>
    <p>String[] getChildren(path, watch)</p>
    <p>void sync()</p>
    <p>Stat setACL(path, acl, expectedVersion)</p>
    <p>(acl, Stat) getACL(path)</p>
  </div>
  <div class="page">
    <p>Data Model</p>
    <p>Hierarchal namespace (like a file system)</p>
    <p>Each znode has data and children</p>
    <p>data is read and written in its entirety</p>
    <p>/</p>
    <p>services</p>
    <p>users</p>
    <p>apps</p>
    <p>locks</p>
    <p>workers</p>
    <p>YaView</p>
    <p>s-1</p>
    <p>worker2</p>
    <p>worker1</p>
  </div>
  <div class="page">
    <p>Create Flags</p>
    <p>Ephemeral: znode deleted when creator fails or explicitly deleted</p>
    <p>Sequence: append a monotonically increasing counter</p>
    <p>/</p>
    <p>services</p>
    <p>users</p>
    <p>apps</p>
    <p>locks</p>
    <p>workers</p>
    <p>YaView</p>
    <p>s-1</p>
    <p>worker2</p>
    <p>worker1</p>
    <p>Ephemerals created by Session X</p>
    <p>Sequence appended on create</p>
  </div>
  <div class="page">
    <p>Configuration</p>
    <p>Workers get configuration</p>
    <p>getData(.../config/settings, true)</p>
    <p>Administrators change the configuration</p>
    <p>setData(.../config/settings, newConf, -1)</p>
    <p>Workers notified of change and get the new settings</p>
    <p>getData(.../config/settings, true)</p>
    <p>config</p>
    <p>settings</p>
  </div>
  <div class="page">
    <p>Group Membership</p>
    <p>Register serverName in group</p>
    <p>create(.../workers/workerName, hostInfo, EPHEMERAL)</p>
    <p>List group members</p>
    <p>listChildren(.../workers, true)</p>
    <p>workers</p>
    <p>worker2</p>
    <p>worker1</p>
  </div>
  <div class="page">
    <p>Leader Election</p>
    <p>getData(.../workers/leader, true)</p>
    <p>if successful follow the leader described in the data and exit</p>
    <p>create(.../workers/leader, hostname, EPHEMERAL)</p>
    <p>if successful lead and exit</p>
    <p>goto step 1</p>
    <p>workers</p>
    <p>worker2</p>
    <p>worker1</p>
    <p>If a watch is triggered for .../workers/leader, followers will restart the leader election process</p>
    <p>leader</p>
  </div>
  <div class="page">
    <p>Locks</p>
    <p>id = create(.../locks/x-, SEQUENCE|EPHEMERAL)</p>
    <p>getChildren(.../locks/, false)</p>
    <p>if id is the 1 st child, exit</p>
    <p>exists(name of last child before id, true)</p>
    <p>if does not exist, goto 2)</p>
    <p>wait for event</p>
    <p>goto 2)</p>
    <p>locks</p>
    <p>x-19</p>
    <p>x-11</p>
    <p>x-20</p>
    <p>Each znode watches one other. No herd effect.</p>
  </div>
  <div class="page">
    <p>Shared Locks</p>
    <p>id = create(.../locks/s-, SEQUENCE|EPHEMERAL)</p>
    <p>getChildren(.../locks/, false)</p>
    <p>if no children that start with xbefore id, exit</p>
    <p>exists(name of the last x- before id, true)</p>
    <p>if does not exist, goto 2)</p>
    <p>wait for event</p>
    <p>goto 2)</p>
    <p>locks</p>
    <p>x-19</p>
    <p>s-11</p>
    <p>x-20</p>
    <p>x-19x-19</p>
    <p>s-21</p>
    <p>x-22</p>
    <p>s-20</p>
  </div>
  <div class="page">
    <p>ZooKeeper Servers</p>
    <p>ZooKeeper Service</p>
    <p>ServerServer ServerServerServerServer</p>
    <p>All servers have a copy of the state in memory</p>
    <p>A leader is elected at startup</p>
    <p>Followers service clients, all updates go through leader</p>
    <p>Update responses are sent when a majority of servers have persisted the change</p>
    <p>We need 2f+1 machines to tolerate f failures</p>
  </div>
  <div class="page">
    <p>ZooKeeper Servers</p>
    <p>ZooKeeper Service</p>
    <p>ServerServer ServerServerServerServer</p>
    <p>Client ClientClientClientClientClient ClientClient</p>
    <p>Leader</p>
  </div>
  <div class="page">
    <p>Current Performance</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>Easy to use</p>
    <p>High Performance</p>
    <p>General</p>
    <p>Reliable</p>
    <p>Release 3.3 on Apache</p>
    <p>See http://hadoop.apache.org/zookeeper</p>
    <p>Committers from Yahoo! and Cloudera</p>
  </div>
</Presentation>
