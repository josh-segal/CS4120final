<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>PASTE: A Network Programming Interface for Non-Volatile Main Memory Michio Honda (NEC Laboratories Europe)</p>
    <p>Giuseppe Lettieri (Universit di Pisa) Lars Eggert and Douglas Santry (NetApp)</p>
    <p>USENIX NSDI 2018</p>
  </div>
  <div class="page">
    <p>Review: Memory Hierarchy</p>
    <p>Slow, block-oriented persistence CPU</p>
    <p>Caches</p>
    <p>HDD / SSD Block access w/ system calls</p>
    <p>Byte access w/ load/store</p>
    <p>Main Memory</p>
  </div>
  <div class="page">
    <p>Review: Memory Hierarchy</p>
    <p>Fast, byte-addressable persistence</p>
    <p>CPU Caches</p>
    <p>Block access w/ system calls</p>
    <p>Byte access w/ load/store</p>
    <p>-1000s ns Main Memory</p>
    <p>HDD / SSD</p>
  </div>
  <div class="page">
    <p>Networking is faster than disks/SSDs</p>
    <p>Client Server SSD</p>
    <p>Syscall, PCIe bus, physical media</p>
    <p>Cables, NICs, TCP/IP, socket API</p>
  </div>
  <div class="page">
    <p>Networking is slower than NVMM</p>
    <p>Client Server NVMM</p>
    <p>Memcpy, memory bus, physical media</p>
    <p>Cables, NICs, TCP/IP, socket API</p>
  </div>
  <div class="page">
    <p>Networking is slower than NVMM</p>
    <p>Client Server NVMM</p>
    <p>Memcpy, memory bus, physical media</p>
    <p>Cables, NICs, TCP/IP, socket API</p>
    <p>Client</p>
    <p>Client</p>
    <p>nevts = epoll_wait(fds) for (i =0; i &lt; nevts; i++) { read(fds[i], buf); ... memcpy(nvmm, buf); ... write(fds[i], reply) }</p>
  </div>
  <div class="page">
    <p>Innovations at both stacks</p>
    <p>MegaPipe [OSDI12] Seastar mTCP [NSDI14] IX [OSDI14] Stackmap [ATC16]</p>
    <p>NVTree [FAST15] NVWal [ASPLOS16]</p>
    <p>NOVA [FAST16] Decibel [NSDI17]</p>
    <p>LSNVMM [ATC17]</p>
    <p>Network stack Storage stack</p>
  </div>
  <div class="page">
    <p>Stacks are isolated</p>
    <p>MegaPipe [OSDI12] Seastar mTCP [NSDI14] IX [OSDI14] Stackmap [ATC16]</p>
    <p>NVTree [FAST15] NVWal [ASPLOS16]</p>
    <p>NOVA [FAST16] Decibel [NSDI17]</p>
    <p>LSNVMM [ATC17]</p>
    <p>Network stack Storage stackCosts of moving data</p>
  </div>
  <div class="page">
    <p>Bridging the gap</p>
    <p>MegaPipe [OSDI12] Seastar mTCP [NSDI14] IX [OSDI14] Stackmap [ATC16]</p>
    <p>NVTree [FAST15] NVWal [ASPLOS16]</p>
    <p>NOVA [FAST16] Decibel [NSDI17]</p>
    <p>LSNVMM [ATC17]</p>
    <p>Network stack Storage stack</p>
    <p>PASTE</p>
  </div>
  <div class="page">
    <p>PASTE Design Goals  Durable zero copy</p>
    <p>DMA to NVMM  Selective persistence</p>
    <p>Exploit modern NICs DMA to L3 cache  Persistent data structures</p>
    <p>Indexed, named packet buffers backed fy a file  Generality and safety</p>
    <p>TCP/IP in the kernel and netmap API  Best practices from modern network stacks</p>
    <p>Run-to-completion, blocking, busy-polling, batching etc</p>
  </div>
  <div class="page">
    <p>PASTE in Action</p>
    <p>Pring [7]</p>
    <p>App thread</p>
    <p>slot [0]</p>
    <p>NIC</p>
    <p>TCP/IP</p>
    <p>File system /mnt/pm</p>
    <p>lenoffpbuf</p>
    <p>Plog /mnt/pm/plog</p>
    <p>Z er</p>
    <p>o co</p>
    <p>py</p>
    <p>user kernel</p>
    <p>cur Ppool (shared memory) /mnt/pm/pp</p>
    <p>Pbufs</p>
  </div>
  <div class="page">
    <p>PASTE in Action</p>
    <p>Pring [7]</p>
    <p>App thread</p>
    <p>slot [0]</p>
    <p>NIC</p>
    <p>TCP/IP</p>
    <p>File system /mnt/pm</p>
    <p>lenoffpbuf</p>
    <p>Plog /mnt/pm/plog</p>
    <p>Z er</p>
    <p>o co</p>
    <p>py</p>
    <p>user kernel</p>
    <p>cur Ppool (shared memory) /mnt/pm/pp</p>
    <p>Pbufs</p>
  </div>
  <div class="page">
    <p>PASTE in Action</p>
    <p>poll() system call</p>
    <p>Pring [7]</p>
    <p>App thread</p>
    <p>slot [0]</p>
    <p>NIC</p>
    <p>TCP/IP</p>
    <p>File system /mnt/pm</p>
    <p>lenoffpbuf</p>
    <p>Plog /mnt/pm/plog</p>
    <p>Z er</p>
    <p>o co</p>
    <p>py</p>
    <p>user kernel</p>
    <p>cur Ppool (shared memory) /mnt/pm/pp</p>
    <p>Pbufs</p>
  </div>
  <div class="page">
    <p>PASTE in Action</p>
    <p>poll() system call  Got 6 in-order TCP</p>
    <p>segments</p>
    <p>Pring [7]</p>
    <p>App thread</p>
    <p>slot [0]</p>
    <p>NIC</p>
    <p>TCP/IP</p>
    <p>File system /mnt/pm</p>
    <p>lenoffpbuf</p>
    <p>Plog /mnt/pm/plog</p>
    <p>Z er</p>
    <p>o co</p>
    <p>py</p>
    <p>user kernel</p>
    <p>cur Ppool (shared memory) /mnt/pm/pp</p>
    <p>Pbufs</p>
  </div>
  <div class="page">
    <p>PASTE in Action</p>
    <p>poll() system call  They are set to Pring</p>
    <p>slots</p>
    <p>Pring [7]</p>
    <p>App thread</p>
    <p>slot [0]</p>
    <p>NIC</p>
    <p>TCP/IP</p>
    <p>File system /mnt/pm</p>
    <p>lenoffpbuf</p>
    <p>Plog /mnt/pm/plog</p>
    <p>Z er</p>
    <p>o co</p>
    <p>py</p>
    <p>user kernel</p>
    <p>cur Ppool (shared memory) /mnt/pm/pp</p>
    <p>tail</p>
    <p>Pbufs</p>
  </div>
  <div class="page">
    <p>PASTE in Action</p>
    <p>Return from poll()</p>
    <p>Pring [7]</p>
    <p>App thread</p>
    <p>slot [0]</p>
    <p>NIC</p>
    <p>TCP/IP</p>
    <p>File system /mnt/pm</p>
    <p>lenoffpbuf</p>
    <p>Plog /mnt/pm/plog</p>
    <p>Z er</p>
    <p>o co</p>
    <p>py</p>
    <p>user kernel</p>
    <p>cur Ppool (shared memory) /mnt/pm/pp</p>
    <p>tail</p>
    <p>Pbufs</p>
  </div>
  <div class="page">
    <p>PASTE in Action</p>
    <p>Pring [7]</p>
    <p>App thread</p>
    <p>slot [0]</p>
    <p>NIC</p>
    <p>TCP/IP</p>
    <p>File system /mnt/pm</p>
    <p>lenoffpbuf</p>
    <p>Plog /mnt/pm/plog</p>
    <p>user kernel</p>
    <p>cur Ppool (shared memory) /mnt/pm/pp</p>
    <p>tail</p>
    <p>Z er</p>
    <p>o co</p>
    <p>py</p>
    <p>Pbufs</p>
  </div>
  <div class="page">
    <p>PASTE in Action</p>
    <p>flush Pbuf data from CPU cache to DIMM  clflush(opt) instruction</p>
    <p>Pring [7]</p>
    <p>App thread</p>
    <p>slot [0]</p>
    <p>NIC</p>
    <p>TCP/IP</p>
    <p>File system /mnt/pm</p>
    <p>lenoffpbuf</p>
    <p>Plog /mnt/pm/plog</p>
    <p>user kernel</p>
    <p>cur Ppool (shared memory) /mnt/pm/pp</p>
    <p>tail</p>
    <p>Z er</p>
    <p>o co</p>
    <p>py</p>
    <p>Pbufs</p>
  </div>
  <div class="page">
    <p>PASTE in Action</p>
    <p>Pbuf is persistent data representation  Base address is static</p>
    <p>i.e., file (/mnt/pm/pp)  Buffers can be</p>
    <p>recovered after reboot 0</p>
    <p>Pring [7]</p>
    <p>App thread</p>
    <p>slot [0]</p>
    <p>NIC</p>
    <p>TCP/IP</p>
    <p>File system /mnt/pm</p>
    <p>lenoffpbuf</p>
    <p>Plog /mnt/pm/plog</p>
    <p>user kernel</p>
    <p>cur Ppool (shared memory) /mnt/pm/pp</p>
    <p>tail</p>
    <p>Z er</p>
    <p>o co</p>
    <p>py</p>
    <p>Pbufs</p>
  </div>
  <div class="page">
    <p>PASTE in Action</p>
    <p>Prevent the kernel from recycling the buffer</p>
    <p>Pring [7]</p>
    <p>App thread</p>
    <p>slot [0]</p>
    <p>NIC</p>
    <p>TCP/IP</p>
    <p>File system /mnt/pm</p>
    <p>lenoffpbuf</p>
    <p>Plog /mnt/pm/plog</p>
    <p>user kernel</p>
    <p>cur Ppool (shared memory) /mnt/pm/pp</p>
    <p>tail</p>
    <p>Z er</p>
    <p>o co</p>
    <p>py</p>
    <p>Pbufs</p>
  </div>
  <div class="page">
    <p>PASTE in Action</p>
    <p>Same for Pbuf 2 and 6</p>
    <p>Pring [7]</p>
    <p>App thread</p>
    <p>slot [0]</p>
    <p>NIC</p>
    <p>TCP/IP</p>
    <p>File system /mnt/pm</p>
    <p>lenoffpbuf</p>
    <p>Plog /mnt/pm/plog</p>
    <p>user kernel</p>
    <p>cur Ppool (shared memory) /mnt/pm/pp</p>
    <p>tail</p>
    <p>Z er</p>
    <p>o co</p>
    <p>py</p>
    <p>Pbufs</p>
  </div>
  <div class="page">
    <p>PASTE in Action</p>
    <p>Advance cur  Return buffers in slot</p>
    <p>App thread</p>
    <p>NIC</p>
    <p>TCP/IP</p>
    <p>File system /mnt/pm</p>
    <p>lenoffpbuf</p>
    <p>Plog /mnt/pm/plog</p>
    <p>user kernel</p>
    <p>Ppool (shared memory) /mnt/pm/pp</p>
    <p>[0] [4] [8]</p>
    <p>Z er</p>
    <p>o co</p>
    <p>py 2 6</p>
    <p>Pring [7]slot [0]</p>
    <p>Pbufs</p>
  </div>
  <div class="page">
    <p>PASTE in Action</p>
    <p>App thread</p>
    <p>NIC</p>
    <p>TCP/IP</p>
    <p>File system /mnt/pm</p>
    <p>lenoffpbuf</p>
    <p>Plog /mnt/pm/plog</p>
    <p>user kernel</p>
    <p>Ppool (shared memory) /mnt/pm/pp</p>
    <p>[0] [4] [8]</p>
    <p>Z er</p>
    <p>o co</p>
    <p>py 2 6</p>
    <p>Pring [7]slot [0]</p>
    <p>Pbufs</p>
    <p>Write-Ahead Logs</p>
  </div>
  <div class="page">
    <p>PASTE in Action</p>
    <p>We can organize various data structures in Plog</p>
    <p>App thread</p>
    <p>NIC</p>
    <p>TCP/IP</p>
    <p>File system /mnt/pm</p>
    <p>Ppool (shared memory) /mnt/pm/pp</p>
    <p>[0] [4] [8]</p>
    <p>Z er</p>
    <p>o co</p>
    <p>py</p>
    <p>Pring [7]slot [0]</p>
    <p>Pbufs</p>
    <p>(1, 96, 120) (2, 96, 987) (6, 96, 512)</p>
    <p>Plog /mnt/pm/plog</p>
    <p>user kernel</p>
    <p>B+tree</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
  </div>
  <div class="page">
    <p>How does PASTE outperform existing systems?</p>
    <p>WAL B+tree (all writes)</p>
    <p>What if we use more complex data structures?</p>
  </div>
  <div class="page">
    <p>How does PASTE outperform existing systems?</p>
    <p>WAL B+tree (all writes)</p>
  </div>
  <div class="page">
    <p>Is PASTE applicable to existing applications?</p>
    <p>Redis</p>
    <p>YCSB (read mostly) YCSB (update heavy)</p>
  </div>
  <div class="page">
    <p>Is PASTE useful for systems other than DB/file storage?  Packet logging prior to forwarding</p>
    <p>Fault-tolerant middlebox [Sigcomm15]  Traffic recording</p>
    <p>Extend mSwitch [SOSR15]  Scalable NFV backend switch</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>PASTE is a network programming interface that:  Enables durable zero copy to NVMM  Helps apps organize persistent data structures on NVMM  Lets apps use TCP/IP and be protected  Offers high-performance network stack even w/o NVMM</p>
    <p>https://github.com/luigirizzo/netmap/tree/paste micchie@sfc.wide.ad.jp or @michioh</p>
  </div>
  <div class="page">
    <p>Multicore Scalability</p>
    <p>WAL throughput</p>
  </div>
  <div class="page">
    <p>Further Opportunity with Co-designed Stacks</p>
    <p>What if we use higher access latency NVMM?  e.g., 3D-Xpoint</p>
    <p>Overlap flushes and processing with clflushopt and mfence before system call (triggers packet I/O)  See the paper for results</p>
    <p>Systemcall timeclflushopt mfence Systemcall Receive new requests</p>
    <p>Send responsesWait for</p>
    <p>flushes done</p>
    <p>Examine request clflushopt</p>
    <p>Examine request</p>
  </div>
  <div class="page">
    <p>Experiment Setup</p>
    <p>Intel Xeon E5-2640v4 (2.4 Ghz)  HPE 8GB NVDIMM (NVDIMM-N)  Intel X540 10 GbE NIC  Comparison</p>
    <p>Linux and Stackmap [ATC15] (current state-of-the art)  Fair to use the same kernel TCP/IP implementation</p>
  </div>
</Presentation>
