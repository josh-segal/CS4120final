<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Sangwook Kim1, Hwanju Kim2, Sang-Hoon Kim3, Joonwon Lee1,</p>
    <p>and Jinkyu Jeong1</p>
    <p>Sungkyunkwan University1</p>
    <p>University of Cambridge2</p>
    <p>Korea Advanced Institute of Science and Technology (KAIST)3</p>
    <p>Request-Oriented Durable Write Caching for Application Performance</p>
  </div>
  <div class="page">
    <p>Non-volatile Write Cache</p>
    <p>Volatile DRAM cache is ineffective for write  Writes are dominant I/Os [FAST09, FAST10, FAST14]</p>
    <p>Non-volatile write cache (NVWC) provides  Fast response for write w/o loss of durability</p>
    <p>NVWC candidates</p>
    <p>Performance GB/$</p>
    <p>NV-DRAM PCM MRAM Flash</p>
    <p>[Bhadkamkar et al., FAST09] BORG: Block-reORGanization for self-optimizing storage systems [Koller et al., FAST10] I/O deduplication: Utilizing content similarity to improve I/O performance [Harter et al., FAST14] Analysis of HDFS under HBase: a Facebook messages case study</p>
  </div>
  <div class="page">
    <p>Non-volatile Write Cache</p>
    <p>Simple caching policy</p>
    <p>Backing Storage</p>
    <p>Operating System</p>
    <p>P1 P2</p>
    <p>Write</p>
    <p>P3</p>
    <p>Write Write</p>
    <p>Application</p>
    <p>NVWC Blindly caching all writes</p>
    <p>Lazily writing back to storage</p>
  </div>
  <div class="page">
    <p>Non-volatile Write Cache</p>
    <p>Simple caching policy</p>
    <p>Backing Storage</p>
    <p>Operating System</p>
    <p>P1 P2</p>
    <p>Write</p>
    <p>P3</p>
    <p>Write Write</p>
    <p>Application</p>
    <p>NVWC Blindly caching all writes</p>
    <p>Lazily writing back to storage</p>
    <p>No consideration for application performance</p>
  </div>
  <div class="page">
    <p>Impact on Application Performance</p>
    <p>Illustrative experiment</p>
    <p>TPC-C workload</p>
    <p>PostgreSQL database</p>
    <p>2 NVWC devices</p>
    <p>32MB NV-DRAM (emulated via ramdisk)</p>
    <p>4GB flash SSD</p>
  </div>
  <div class="page">
    <p>Impact on Application Performance</p>
    <p>Experimental result</p>
    <p>* System perf.</p>
    <p>- ~ 2.1X improved</p>
  </div>
  <div class="page">
    <p>Impact on Application Performance</p>
    <p>Experimental result</p>
    <p>Marginal gain</p>
    <p>Performance drop by 50%!</p>
    <p>* System perf.</p>
    <p>- ~ 2.1X improved</p>
    <p>* Application perf.</p>
    <p>- ~ 50% degraded</p>
  </div>
  <div class="page">
    <p>Whats the Problem?</p>
    <p>Criticality-agnostic contention</p>
  </div>
  <div class="page">
    <p>Criticality-Agnostic Contention</p>
    <p>Different write criticality</p>
    <p>Backing Storage</p>
    <p>Operating System</p>
    <p>P1</p>
    <p>Client</p>
    <p>P2</p>
    <p>Request Response Application</p>
    <p>Application performance</p>
    <p>NVWC</p>
    <p>P3</p>
  </div>
  <div class="page">
    <p>Criticality-Agnostic Contention</p>
    <p>Different write criticality</p>
    <p>Backing Storage</p>
    <p>Operating System</p>
    <p>P1</p>
    <p>Client</p>
    <p>P2</p>
    <p>Request Response Application</p>
    <p>NVWC</p>
    <p>P3 Background</p>
    <p>process/thread</p>
  </div>
  <div class="page">
    <p>Criticality-Agnostic Contention</p>
    <p>Different write criticality</p>
    <p>Backing Storage</p>
    <p>Operating System</p>
    <p>P1</p>
    <p>Client</p>
    <p>P2</p>
    <p>Request Response Application</p>
    <p>NVWC</p>
    <p>Critical Non-critical</p>
    <p>P3</p>
  </div>
  <div class="page">
    <p>Criticality-Agnostic Contention</p>
    <p>Different write criticality</p>
    <p>Backing Storage</p>
    <p>Operating System</p>
    <p>P1</p>
    <p>Client</p>
    <p>P2</p>
    <p>Request Response Application</p>
    <p>NVWC</p>
    <p>Critical Non-critical</p>
    <p>P3</p>
    <p>* Contentions</p>
    <p>- Capacity contention</p>
    <p>- Bandwidth contention</p>
  </div>
  <div class="page">
    <p>Criticality-Agnostic Contention</p>
    <p>Backing Storage</p>
    <p>Operating System</p>
    <p>P1</p>
    <p>Client</p>
    <p>P2</p>
    <p>Request Response Application</p>
    <p>Bounded writeback throughput</p>
    <p>Critical Non-critical</p>
    <p>P3</p>
    <p>Frequent write stalls</p>
    <p>Capacity contention</p>
  </div>
  <div class="page">
    <p>Criticality-Agnostic Contention</p>
    <p>Backing Storage</p>
    <p>P1</p>
    <p>Client</p>
    <p>P2</p>
    <p>Request Response Application</p>
    <p>Sufficient free blocks</p>
    <p>Critical Non-critical</p>
    <p>P3</p>
    <p>Excessive queueing delay</p>
    <p>C Head NC NC NC NC NC WB WB WB WB</p>
    <p>Bandwidth contention</p>
  </div>
  <div class="page">
    <p>Request-oriented caching policy</p>
    <p>Our Approach</p>
    <p>Backing Storage</p>
    <p>Operating System</p>
    <p>P1 P2</p>
    <p>Application</p>
    <p>NVWC</p>
    <p>Critical Non-critical</p>
    <p>P3</p>
    <p>Caching critical writes only</p>
    <p>* Definitions</p>
    <p>- Critical process (CP): a</p>
    <p>process handling request</p>
    <p>- Critical write: a write</p>
    <p>awaited by a critical proc.</p>
    <p>Client</p>
    <p>CP NCP NCP</p>
  </div>
  <div class="page">
    <p>Challenge</p>
    <p>How to accurately detect critical writes</p>
    <p>Types of critical write  Sync. writes from critical processes</p>
    <p>Dependency-induced critical writes</p>
    <p>Process dependency-induced</p>
    <p>I/O dependency-induced</p>
  </div>
  <div class="page">
    <p>Process dependency</p>
    <p>B3 B4 B5</p>
    <p>Dependency Problem</p>
    <p>NCP</p>
    <p>CP</p>
    <p>Lock</p>
    <p>Wake</p>
    <p>Wait for B1</p>
    <p>Process Dep.</p>
    <p>B1</p>
  </div>
  <div class="page">
    <p>B1 B2</p>
    <p>Dependency Problem</p>
    <p>I/O dependency</p>
    <p>NCP</p>
    <p>CP</p>
    <p>Sync Complete</p>
    <p>I/O Dep.</p>
    <p>Wait for B2</p>
    <p>B3 B4 B5</p>
    <p>* Example scenarios: - CP fsync() to a block under writeback issued by NCP - CP tries to overwrite fs journal buffer under writeback</p>
  </div>
  <div class="page">
    <p>Critical Write Detection</p>
    <p>Critical process identification  Application-guided identification</p>
  </div>
  <div class="page">
    <p>Critical Process Identification</p>
    <p>Application-guided identification</p>
    <p>NCP NCP CP CP</p>
    <p>Operating System</p>
    <p>NVWC</p>
    <p>API</p>
    <p>Backing Storage</p>
    <p>Client 1 Client 2</p>
    <p>Application</p>
    <p>NCP</p>
  </div>
  <div class="page">
    <p>Critical Write Detection</p>
    <p>Critical process identification  Application-guided identification</p>
    <p>Dependency resolution  Criticality inheritance protocols</p>
    <p>Process criticality inheritance</p>
    <p>I/O criticality inheritance</p>
    <p>Blocking object tracking</p>
  </div>
  <div class="page">
    <p>Critical Write Detection</p>
    <p>Critical process identification  Application-guided identification</p>
    <p>Dependency resolution  Criticality inheritance protocols</p>
    <p>Process criticality inheritance</p>
    <p>I/O criticality inheritance</p>
    <p>Blocking object tracking</p>
  </div>
  <div class="page">
    <p>B1 B1</p>
    <p>Criticality Inheritance Protocols</p>
    <p>Process criticality inheritance</p>
    <p>Lock Wake</p>
    <p>Inherit</p>
    <p>B2 B3 B4</p>
    <p>NCP</p>
    <p>CP</p>
  </div>
  <div class="page">
    <p>B2</p>
    <p>Criticality Inheritance Protocols</p>
    <p>I/O criticality inheritance</p>
    <p>Sync</p>
    <p>Complete Reissue</p>
    <p>Discard B3 B4 B5</p>
    <p>B1 B2</p>
    <p>Key issue: caching the dependent write outstanding to disk w/o side effects</p>
    <p>NCP</p>
    <p>CP</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Implementation on Linux 3.13 w/ FlashCache 3.1</p>
    <p>Application studies  PostgreSQL database</p>
    <p>Redis key-value store</p>
    <p>Client 1</p>
    <p>Back end1</p>
    <p>Back end2</p>
    <p>Client 2</p>
    <p>Log writer</p>
    <p>Writer Check pointer</p>
    <p>Back end1</p>
    <p>Back end2</p>
    <p>Client 1,2,3,</p>
    <p>Master Log</p>
    <p>rewriter Snap</p>
    <p>shotter Master</p>
  </div>
  <div class="page">
    <p>Experimental setup</p>
    <p>Evaluation</p>
    <p>PostgreSQL / Redis</p>
    <p>FlashCache</p>
    <p>Server Machine</p>
    <p>TPC-C / YCSB</p>
    <p>Client Machine</p>
  </div>
  <div class="page">
    <p>Experimental setup</p>
    <p>Evaluation</p>
    <p>PostgreSQL / Redis</p>
    <p>* Caching policies - ALL (default)</p>
    <p>FlashCache</p>
    <p>Server Machine</p>
    <p>No discretion</p>
    <p>TPC-C / YCSB</p>
    <p>Client Machine</p>
  </div>
  <div class="page">
    <p>Experimental setup</p>
    <p>Evaluation</p>
    <p>PostgreSQL / Redis</p>
    <p>* Caching policies - ALL (default) - SYNC</p>
    <p>FlashCache</p>
    <p>Server Machine</p>
    <p>Sync. writes</p>
    <p>TPC-C / YCSB</p>
    <p>Client Machine</p>
  </div>
  <div class="page">
    <p>Experimental setup</p>
    <p>Evaluation</p>
    <p>PostgreSQL / Redis</p>
    <p>* Caching policies - ALL (default) - SYNC - CP</p>
    <p>FlashCache</p>
    <p>Server Machine</p>
    <p>CP sync. writes</p>
    <p>TPC-C / YCSB</p>
    <p>Client Machine</p>
  </div>
  <div class="page">
    <p>Experimental setup</p>
    <p>Evaluation</p>
    <p>PostgreSQL / Redis</p>
    <p>* Caching policies - ALL (default) - SYNC - CP - CP+PI</p>
    <p>FlashCache</p>
    <p>Server Machine</p>
    <p>+ Process criticality</p>
    <p>inheritance</p>
    <p>TPC-C / YCSB</p>
    <p>Client Machine</p>
  </div>
  <div class="page">
    <p>Experimental setup</p>
    <p>Evaluation</p>
    <p>PostgreSQL / Redis</p>
    <p>* Caching policies - ALL (default) - SYNC - CP - CP+PI - CP+PI+IOI FlashCache</p>
    <p>Server Machine</p>
    <p>+ I/O criticality</p>
    <p>inheritance</p>
    <p>TPC-C / YCSB</p>
    <p>Client Machine</p>
  </div>
  <div class="page">
    <p>Experimental setup</p>
    <p>Evaluation</p>
    <p>PostgreSQL / Redis</p>
    <p>* Caching policies - ALL (default) - SYNC - CP - CP+PI - CP+PI+IOI - WAL (PostgreSQL)</p>
    <p>FlashCache</p>
    <p>TPC-C / YCSB</p>
    <p>Client Machine Server Machine</p>
    <p>Trx log writes</p>
  </div>
  <div class="page">
    <p>PostgreSQL Performance</p>
    <p>TPC-C workload w/ ramdisk</p>
    <p>Sufficient Scarce</p>
    <p>Our scheme resolves capacity contention &amp; runtime dependencies</p>
  </div>
  <div class="page">
    <p>PostgreSQL Performance</p>
    <p>TPC-C workload w/ SSD</p>
    <p>Sufficient Sufficient</p>
    <p>Our scheme resolves bandwidth contention &amp; runtime dependencies</p>
  </div>
  <div class="page">
    <p>Redis Performance</p>
    <p>Update-heavy workload w/ 16GB SSD</p>
    <p>(50ms vs. 649ms)</p>
    <p>Our scheme improves request throughput &amp; request latency</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>Key observation  Each write has different performance-criticality</p>
    <p>Request-oriented caching policy  Solely utilizes NVWC for application performance</p>
    <p>Improves performance while reducing cached writes</p>
    <p>Future work  System-level critical process identification</p>
    <p>Application to user-interactive environments</p>
  </div>
  <div class="page">
    <p>Thank You!</p>
    <p>Questions and comments</p>
    <p>Contact</p>
    <p>sw.kim@skku.edu</p>
  </div>
</Presentation>
