<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Defending against malicious peripherals with Cinch</p>
    <p>Sebastian Angel1,2</p>
    <p>Riad S. Wahby3, Max Howald2,4, Joshua B. Leners5, Michael Spilo2, Zhen Sun2, Andrew J. Blumberg1, and Michael Walfish2</p>
  </div>
  <div class="page">
    <p>Peripherals firmware can be modified with BadUSB [Nohl and Lell, Black Hat 2014]</p>
    <p>USB architecture from 30,000 feet</p>
    <p>Your machine</p>
    <p>Drivers</p>
    <p>Host Controller H ub</p>
    <p>Government agencies intercept and modify shipments [Glenn Greenwald, The Guardian 2014]</p>
  </div>
  <div class="page">
    <p>Peripherals can exploit driver vulnerabilities</p>
    <p>Your machine</p>
    <p>Drivers</p>
    <p>Host Controller</p>
    <p>$@$#$#%$%</p>
    <p>H ub</p>
  </div>
  <div class="page">
    <p>Peripherals can leverage DMA to attack OSes</p>
    <p>Your machine</p>
    <p>Drivers</p>
    <p>Host Controller</p>
    <p>write evil to &lt;kernel address&gt;</p>
    <p>Inception[Maartmann-Moe 2014], Funderbolt[Black Hat 2013] H ub</p>
  </div>
  <div class="page">
    <p>Users Really Do Plug in USB Drives They Find [Tischer et al., S&amp;P 2016]</p>
    <p>Peripherals can lie about their identity</p>
    <p>Your machine</p>
    <p>Drivers</p>
    <p>Host Controller</p>
    <p>Hi, what are you?</p>
    <p>H ub</p>
    <p>Im a keyboard J</p>
  </div>
  <div class="page">
    <p>Hubs broadcast messages downstream</p>
    <p>Compromised hubs can eavesdrop and modify all traffic</p>
    <p>Your machine</p>
    <p>Drivers</p>
    <p>Host Controller</p>
    <p>File_for_SSD.txt</p>
    <p>H ub</p>
    <p>File_for_SSD.txt</p>
  </div>
  <div class="page">
    <p>Okay, so what can we do?</p>
    <p>Dont use a computer</p>
    <p>Close all the ports</p>
  </div>
  <div class="page">
    <p>Our machine interacts with untrusted devices every day on the Internet!</p>
    <p>As part of this interaction, our machine routinely:</p>
    <p>Determines to whom it is talking</p>
    <p>Prevents eavesdropping and data tampering</p>
    <p>Defends against malicious traffic</p>
  </div>
  <div class="page">
    <p>How do we apply the arsenal of network security tools to peripheral buses?</p>
    <p>And how can this be done with minor or no modifications to OSes and existing devices</p>
    <p>while keeping the bus at arms length? Your machine</p>
    <p>Drivers</p>
    <p>Host Controller</p>
    <p>Insert network security logic somewhere here</p>
  </div>
  <div class="page">
    <p>Cinch brings network defenses to USB</p>
    <p>Cinch is effective (but not perfect!) against the threats described</p>
    <p>Cinch is portable and backwards-compatible  Works transparently across OSes  Requires no driver or USB protocol modifications</p>
    <p>Cinch separates the bus from your machine, creating an enforcement point</p>
    <p>Your machine</p>
    <p>Drivers</p>
    <p>H os t</p>
    <p>Co nt ro lle r</p>
    <p>peripherals</p>
    <p>H ub</p>
    <p>En fo rc er</p>
  </div>
  <div class="page">
    <p>In the rest of this talk we answer</p>
    <p>How do we build Cinch?</p>
    <p>What defenses can be built on Cinch?</p>
    <p>How well do defenses work and what is their cost?</p>
  </div>
  <div class="page">
    <p>In the rest of this talk we answer</p>
    <p>How do we build Cinch?</p>
    <p>What defenses can be built on Cinch?</p>
    <p>How well do defenses work and what is their cost?</p>
  </div>
  <div class="page">
    <p>Your machine</p>
    <p>Drivers H ub</p>
    <p>H os t Co</p>
    <p>nt ro lle r</p>
    <p>Your machine</p>
    <p>Host Controller</p>
    <p>Drivers</p>
    <p>H ub What we have today</p>
    <p>What we want</p>
  </div>
  <div class="page">
    <p>Devices can be attached to another machine Your machine</p>
    <p>Drivers</p>
    <p>sacrificial machine</p>
    <p>Host Controller</p>
    <p>Drivers</p>
    <p>But this requires an additional machine</p>
    <p>Pragmatic choice: leverage virtualization technology to instantiate the (sacrificial) machine on the same hardware</p>
    <p>H ub</p>
    <p>network</p>
  </div>
  <div class="page">
    <p>An IOMMU can be used to restrict where in memory a device may write</p>
    <p>VM</p>
    <p>Hypervisor</p>
    <p>Virtual Card</p>
    <p>VM</p>
    <p>Hypervisor</p>
    <p>IOMMU Data</p>
    <p>Data Data</p>
    <p>Device can only write to configured addresses</p>
    <p>Restrict I/O to VMs address space</p>
    <p>Evil</p>
  </div>
  <div class="page">
    <p>Your machine</p>
    <p>Host Controller</p>
    <p>Drivers</p>
    <p>H ub What we have today</p>
    <p>Your machine (VM)</p>
    <p>Drivers</p>
    <p>sacrificial machine (VM)</p>
    <p>Host Controller</p>
    <p>Drivers</p>
    <p>H ub</p>
    <p>network</p>
    <p>Hypervisor</p>
    <p>Under Cinch</p>
    <p>Hypervisor configures IOMMU to map bus to sacrificial machine</p>
    <p>Devices are attached to a sacrificial VM</p>
  </div>
  <div class="page">
    <p>Your machine (VM)</p>
    <p>Drivers</p>
    <p>sacrificial machine (VM)</p>
    <p>Host Controller</p>
    <p>Drivers</p>
    <p>H ub</p>
    <p>Interposing on VM-VM communication</p>
    <p>Enforcers design is inspired by the Click modular router [Kohler et al., ACM TOCS 2000]</p>
    <p>En fo rc er</p>
    <p>Module 3 Module 2 Module 1</p>
  </div>
  <div class="page">
    <p>In the rest of this talk we answer</p>
    <p>How do we build Cinch?</p>
    <p>What defenses can be built on Cinch?</p>
    <p>How well do defenses work and what is their cost?</p>
  </div>
  <div class="page">
    <p>Defense 1: Enforcing allowed device behavior</p>
    <p>USB specifications Constraints on:  Packet formats  Individual fields  Packet sequences</p>
    <p>Restricted field values  Sizes within allowed range  Proper encoding (e.g. UTF-16)</p>
  </div>
  <div class="page">
    <p>Defense 1: Enforcing allowed device behavior</p>
    <p>USB specifications Constraints on:  Packet formats  Individual fields  Packet sequences</p>
    <p>States based on history  Transitions based on incoming packets</p>
    <p>Allow / Drop packet</p>
  </div>
  <div class="page">
    <p>Defense 2: Filtering known exploits</p>
    <p>Download / populate database with known malicious signatures</p>
    <p>Inspect incoming traffic for matches</p>
    <p>Allow / Drop packet</p>
  </div>
  <div class="page">
    <p>Benefits of signature-based defenses</p>
    <p>Quick response to an attack  Deriving a signature is usually faster than understanding the exploit and finding the root cause</p>
    <p>Useful for closed-source OSes  No need to wait for OS vendor patch vulnerability</p>
  </div>
  <div class="page">
    <p>Limitations of signature-based defenses</p>
    <p>Cannot prevent zero-day attacks</p>
    <p>Tension between protection and compatibility  Exact signatures are not very effective  Very general signatures (e.g. wildcard / regex) can prevent benign traffic</p>
    <p>Signatures do not fix the underlying problem</p>
  </div>
  <div class="page">
    <p>Defense 3: authentication and encryption</p>
  </div>
  <div class="page">
    <p>Defense 3: authentication and encryption</p>
    <p>Your machine (VM)</p>
    <p>Drivers</p>
    <p>En fo rc er</p>
    <p>sacrificial machine (VM)</p>
    <p>Host Controller</p>
    <p>Drivers</p>
    <p>H ub</p>
    <p>Unauthenticated cleartext communication</p>
  </div>
  <div class="page">
    <p>Defense 3: authentication and encryption</p>
    <p>Authenticated and encrypted communicationCleartext</p>
    <p>Install TLS endpoint at device and enforcer</p>
    <p>Your machine (VM)</p>
    <p>Drivers</p>
    <p>En fo rc er</p>
    <p>sacrificial machine (VM)</p>
    <p>Host Controller</p>
    <p>Drivers</p>
    <p>H ub</p>
  </div>
  <div class="page">
    <p>Defense 3: authentication and encryption</p>
    <p>CleartextAuthenticated and encrypted communicationCleartext</p>
    <p>Existing devices can be retrofitted with an adapter</p>
    <p>Your machine (VM)</p>
    <p>Drivers</p>
    <p>En fo rc er</p>
    <p>sacrificial machine (VM)</p>
    <p>Host Controller</p>
    <p>Drivers</p>
    <p>H ub</p>
  </div>
  <div class="page">
    <p>Summary of defenses</p>
    <p>Compliance with the USB specification  Prevents certain types of driver bugs from being exploited</p>
    <p>Signature matching  Prevents known exploits and can be used as a quick response</p>
    <p>Authentication and encryption  Prevent masquerading and eavesdropping on the bus</p>
    <p>Other: Log and replay, remote auditing, exporting functionality via higherlayer protocols (e.g., access flash drives via NFS)</p>
  </div>
  <div class="page">
    <p>In the rest of this talk we answer</p>
    <p>How do we build Cinch?</p>
    <p>What defenses can be built on Cinch?</p>
    <p>How well do defenses work and what is their cost?</p>
  </div>
  <div class="page">
    <p>Implementation details</p>
    <p>Hypervisor is Linux running QEMU/KVM</p>
    <p>Enforcer is a Linux user-level process and it is written in Rust</p>
    <p>USB transfers are encapsulated/decapsulatedin TCP/IP</p>
    <p>We build the TLS adapter on a Beaglebone Black (arm-based computer)</p>
    <p>We implement exploits using a facedancer21</p>
  </div>
  <div class="page">
    <p>How well do defenses work?</p>
  </div>
  <div class="page">
    <p>We evaluate Cinchs effectiveness in 3 ways</p>
    <p>We implement exploits for existing USB driver vulnerabilities</p>
    <p>We carry out a 3-phase penetration testing exercise</p>
    <p>We use a fuzzing tool to test 10,000 invalid devices  Summary: Cinchs enforcer prevents all 10,000  Subtlety: None of the tests affected a machine without Cinch either</p>
  </div>
  <div class="page">
    <p>We implement exploits for existing USB driver vulnerabilities  Linux CVEs reported from Jan to June 2016. They affect Linux 4.5.1  5 exploits that work on Windows 8.1</p>
    <p>[Boteanu and Fowler, Black Hat Europe 2015]</p>
    <p>Our findings:  16 out of 18 exploits were prevented immediately</p>
    <p>2 exploits succeeded, but can be prevented with a signature</p>
  </div>
  <div class="page">
    <p>We carry out a 3-phase penetration testing exercise  Phase 1: Red team has vague knowledge of Cinch  Phase 2: Red team has access to a pre-configured Cinch binary  Phase 3: Red team has Cinchs source code</p>
    <p>Our findings:</p>
    <p>Increased knowledge of Cinchs functionality resulted in more intricate exploits</p>
    <p>Cinch is not able to prevent polymorphic attacks</p>
  </div>
  <div class="page">
    <p>What is the cost of these defenses?</p>
  </div>
  <div class="page">
    <p>Performance evaluation highlights</p>
    <p>Baseline: connecting devices directly to your machine</p>
    <p>Experiment 1: transferring 1 GB file to a USB 3.0 SSD</p>
    <p>Throughput reduction: 38% (due to memory copies)  Memory overhead: 200 MB (due to sacrificial VM)  CPU overhead: 8X (due to virtualization and enforcer)</p>
    <p>Experiment 2: ping from a remote machine using USB Ethernet adapter</p>
    <p>Round-trip time increase: ~2 ms</p>
  </div>
  <div class="page">
    <p>Cinch brings network defenses to USB</p>
    <p>Weak against polymorphic attacks on vulnerable drivers</p>
    <p>Requires identifying trusted manufacturers</p>
    <p>Requires device support (or an adapter) for TLS</p>
    <p>Requires hardware support for virtualizing IO (IOMMU)</p>
    <p>but it also inherits their limitations</p>
  </div>
  <div class="page">
    <p>Related work  Alternate OS designs</p>
    <p>Separation kernels [Rushby, SOSP 81] [Muen, 2013] [seL4, S&amp;P 2013] [Qubes]  Deprivileging drivers [Microkernel, CACM 70, SOSP 95], [Exokernel, SOSP 95]</p>
    <p>Driver isolation and reliability  Correct driver synthesis [Termite, SOSP09]  Driver behavior monitoring [Nexus, OSDI 08], [SUD, ATC10]  Driver isolation [Nooks, SOSP 03]</p>
    <p>USB-specific approaches  Hotplug and device containment frameworks [GoodUSB, ACSAC 15] [USBFILTER, next talk!]  Bus encryption [UScramBle, EUROSEC 16] [USBSec, SERE 12]</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>Cinch provides a backward-compatible and portable way of enhancing peripheral buses with tools from network security</p>
    <p>Cinchs enforcer is modular and defenses are natural and easy to implement</p>
    <p>Cinch is not perfect, but eliminates some attack classes and increases the barrier for others</p>
  </div>
</Presentation>
