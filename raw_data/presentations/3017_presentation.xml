<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>EbbRT: A Framework for Building Per</p>
    <p>Application Library Operating Systems</p>
    <p>Dan Schatzberg, James Cadden, Han Dong, Orran Krieger, Jonathan Appavoo Boston University</p>
  </div>
  <div class="page">
    <p>Lower Effort</p>
    <p>Lower Performance</p>
    <p>Higher Effort</p>
    <p>Existing General Purpose Systems</p>
    <p>Custom Special Purpose Systems</p>
    <p>Higher Performance</p>
  </div>
  <div class="page">
    <p>Lower Effort</p>
    <p>Lower Performance</p>
    <p>Higher Effort</p>
    <p>Higher Performance</p>
    <p>Existing General Purpose Systems</p>
    <p>Custom Special Purpose Systems</p>
    <p>Ideal</p>
  </div>
  <div class="page">
    <p>Cloud Computing allows users to rent entire virtual machines</p>
    <p>to run their own OS and applications</p>
    <p>Hypervisor</p>
    <p>Hardware</p>
    <p>Hypervisor</p>
    <p>Hardware</p>
    <p>http://cdn.slashgear.com/wp-content/uploads/2012/10/google-datacentertech-13.jpg</p>
  </div>
  <div class="page">
    <p>Cloud Computing allows users to rent entire virtual machines</p>
    <p>to run their own OS and applications</p>
    <p>Hypervisor</p>
    <p>Hardware</p>
    <p>Hypervisor</p>
    <p>Hardware</p>
    <p>http://cdn.slashgear.com/wp-content/uploads/2012/10/google-datacentertech-13.jpg</p>
    <p>The OS no longer needs to provide protection and isolation</p>
  </div>
  <div class="page">
    <p>Elastic Building Block Runtime (EbbRT)</p>
    <p>A framework for constructing perapplication Library Operating Systems in order to achieve high performance</p>
    <p>with low effort.</p>
  </div>
  <div class="page">
    <p>Construct customized environments for individual applications with reusable</p>
    <p>components.</p>
    <p>App</p>
    <p>Hypervisor</p>
    <p>Hardware</p>
  </div>
  <div class="page">
    <p>Build bootable (by grub, kexec, qemu, etc.) ELF images using a modified GCC 5.3 toolchain</p>
    <p>Most code written in C++14 (~15kloc)  Library of core system components  Includes libc, libstdc++, boost libraries, and</p>
    <p>more</p>
    <p>Implementation Details</p>
  </div>
  <div class="page">
    <p>Elastic Building Block Runtime (EbbRT) Architecture</p>
  </div>
  <div class="page">
    <p>Elastic Building Block Runtime (EbbRT) Architecture</p>
    <p>Allow applications to be written more directly to hardware interfaces for high performance</p>
    <p>Offload functionality to general purpose operating systems for compatibility</p>
    <p>Encapsulate system and application functionality in order to promote customization and reuse</p>
  </div>
  <div class="page">
    <p>Elastic Building Block Runtime (EbbRT) Architecture</p>
    <p>Allow applications to be written more directly to hardware interfaces for high performance</p>
    <p>Offload functionality to general purpose operating systems for compatibility</p>
    <p>Encapsulate system and application functionality in order to promote customization and reuse</p>
  </div>
  <div class="page">
    <p>Elastic Building Block Runtime (EbbRT) Architecture</p>
    <p>Allow applications to be written more directly to hardware interfaces for high performance</p>
    <p>Offload functionality to general purpose operating systems for compatibility</p>
    <p>Encapsulate system and application functionality in order to promote customization and reuse</p>
  </div>
  <div class="page">
    <p>Linux Memcached</p>
    <p>Device Driver</p>
    <p>Interrupt Network</p>
    <p>Stack Device Driver</p>
    <p>Network Stack</p>
    <p>Request Data</p>
    <p>Memcached</p>
    <p>Request Data</p>
    <p>sk_buff</p>
  </div>
  <div class="page">
    <p>Linux Memcached</p>
    <p>Device Driver</p>
    <p>Interrupt Network</p>
    <p>Stack Device Driver</p>
    <p>Network Stack</p>
    <p>Request Data</p>
    <p>Memcached</p>
    <p>Schedule thread Context Switch</p>
    <p>Request Data</p>
    <p>sk_buff</p>
  </div>
  <div class="page">
    <p>Linux Memcached</p>
    <p>Device Driver</p>
    <p>Interrupt Network</p>
    <p>Stack Device Driver</p>
    <p>Network Stack</p>
    <p>Request Data</p>
    <p>Memcached</p>
    <p>Schedule thread Context Switch</p>
    <p>Request Data</p>
    <p>sk_buff</p>
    <p>Copy packet to userspace</p>
  </div>
  <div class="page">
    <p>Linux Memcached</p>
    <p>Device Driver</p>
    <p>Interrupt Network</p>
    <p>Stack Device Driver</p>
    <p>Network Stack</p>
    <p>Request Data</p>
    <p>Memcached</p>
    <p>Schedule thread Context Switch</p>
    <p>Request Data</p>
    <p>sk_buff</p>
    <p>Copy packet to userspace</p>
    <p>Interrupts Enabled</p>
  </div>
  <div class="page">
    <p>Linux Memcached</p>
    <p>Device Driver</p>
    <p>Interrupt Network</p>
    <p>Stack Device Driver</p>
    <p>Network Stack</p>
    <p>Request Data</p>
    <p>Memcached</p>
    <p>Schedule thread Context Switch</p>
    <p>Request Data</p>
    <p>sk_buff</p>
    <p>Copy packet to userspace</p>
    <p>Interrupts Enabled</p>
    <p>General purpose operating systems introduce inefficiencies for individual applications</p>
  </div>
  <div class="page">
    <p>EbbRT applications execute at highest privilege level</p>
    <p>Identity mapped memory with large pages</p>
    <p>Execution as non-preemptive events generated by hardware or software</p>
  </div>
  <div class="page">
    <p>EbbRT Memcached</p>
    <p>Device Driver</p>
    <p>Interrupt Network</p>
    <p>Stack</p>
    <p>IOBuf</p>
    <p>Request Data</p>
    <p>Memcached</p>
    <p>Function CallFunction Call</p>
    <p>Interrupts Disabled</p>
    <p>No paging  No complex scheduling</p>
    <p>Zero Copy</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Server running on 6 threads</p>
    <p>Mutilate request generator w/ 7 clients</p>
    <p>Facebook ETC workload</p>
    <p>Using TCP</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>EbbRT Memcached is able to attain &gt;2x throughput at SLA</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Other Benefits See paper for details</p>
    <p>Blocking semantics  Read-Copy-Update (RCU)  Core-local data structures</p>
  </div>
  <div class="page">
    <p>Elastic Building Block Runtime (EbbRT) Architecture</p>
  </div>
  <div class="page">
    <p>NIC Driver</p>
    <p>Network Processing</p>
    <p>Interrupt</p>
    <p>Reuse event-driven network stack to provide networking to Node.js</p>
  </div>
  <div class="page">
    <p>Disk Driver</p>
    <p>Filesystem</p>
  </div>
  <div class="page">
    <p>Disk Driver</p>
    <p>Filesystem Avoid duplicating functionality for</p>
    <p>compatibility</p>
  </div>
  <div class="page">
    <p>Filesystem libEbbRT</p>
    <p>Offload functionality for rapid development</p>
  </div>
  <div class="page">
    <p>Elastic Building Blocks System-wide distributed objects</p>
    <p>Representative</p>
    <p>Filesystem Ebb</p>
  </div>
  <div class="page">
    <p>Elastic Building Blocks System-wide distributed objects</p>
    <p>Representative</p>
  </div>
  <div class="page">
    <p>V8 Javascript Benchmark Suite Sp</p>
    <p>ee du</p>
    <p>p</p>
  </div>
  <div class="page">
    <p>V8 Javascript Benchmark Suite</p>
    <p>Higher score is better3000 new lines of code and two weeks</p>
    <p>Sp ee</p>
    <p>du p</p>
  </div>
  <div class="page">
    <p>Other Benefits See paper for details</p>
    <p>Distributing EbbRT as a toolchain</p>
    <p>Providing language and library compatibility</p>
    <p>Language-level primitives (Lambdas, Futures, IOBufs)</p>
  </div>
  <div class="page">
    <p>Elastic Building Block Runtime (EbbRT)</p>
    <p>Low-level execution environment enables applications to get much closer to the hardware</p>
    <p>Heterogeneous distributed system allows for functionality offload for incremental development</p>
    <p>Distributed object model encapsulates functionality, enabling customization and reuse</p>
  </div>
  <div class="page">
    <p>Questions?</p>
    <p>https://github.com/sesa/ebbrt</p>
    <p>Dan Schatzberg, James Cadden, Han Dong, Orran Krieger, Jonathan Appavoo</p>
    <p>dschatz@bu.edu jmcadden@bu.edu okrieg@bu.edu jappavoo@bu.eduhandong@bu.edu</p>
  </div>
</Presentation>
