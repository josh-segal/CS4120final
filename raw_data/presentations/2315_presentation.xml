<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>2014 VMware Inc. All rights reserved.</p>
    <p>CloudPowerCap: Integrating Power Budget and Resource Management across a Virtualized Server Cluster</p>
    <p>Yong Fu, Anne Holler, Chenyang Lu Yong &amp; Chenyang are from WUSTL Anne is from VMware</p>
  </div>
  <div class="page">
    <p>Background: Introduction of Server Power Caps  Problem</p>
    <p>Datacenter server racks on ave 40% underutilized due to power issues  Empty slots: Rack slots are left empty  Dark Power: Power allocated to servers in rack cannot be fully utilized</p>
    <p>Underutilization incurs substantial ongoing costs  Private: amortized capital for provisioned power/cooling 18% -&gt; 7%  Hosting: often charge for provisioned not used power -&gt; 40%</p>
    <p>Root cause  Server labeled max power draw &gt;&gt; peak power draw achievable</p>
    <p>Solution  Vendors [e.g., HP, Dell, IBM] are shipping support for server power caps</p>
    <p>Hardware/firmware guarantees peak power draw &lt;= power cap setting  Operator sets server power caps so sum in rack &lt;= rack power budget</p>
  </div>
  <div class="page">
    <p>CloudPowerCap: Manage Server Power Caps  Server power caps present new management opportunity</p>
    <p>Avoid admin maintaining each servers share of rack power budget  Support safe rack power budget reallocation btw hosts at runtime</p>
    <p>Power cap setting: BMC operation, host responds in &lt; 1 ms !</p>
    <p>CloudPowerCap idea:  Automate allocating rack power budget to servers in the rack</p>
    <p>Dynamically reset host power caps as needed by host workloads  Challenge: How to determine workloads needs?</p>
  </div>
  <div class="page">
    <p>CloudPowerCap: Determining Workload Needs  We observe that many datacenters</p>
    <p>Use their racks of hosts to run workloads in virtual machines [VMs]  Run cloud resource management [CRM] which determines workload needs</p>
    <p>Respect for constraints  to handle VM operating requirements &amp; user business rules</p>
    <p>Admission-controlled resource reservations  to support service-level agreements [SLAs]</p>
    <p>Computation of and scheduling for resource entitlements  to achieve fair-share scheduling</p>
    <p>Entitlement load-balancing  to maintain headroom for bursts in resource demands</p>
    <p>VM consolidation &amp; power-off excess hosts; power-on when needed  to improve power proportionality</p>
    <p>CloudPowerCap approach to determine VM workload needs:  Interoperate with CRM system, leverage its model of workload needs</p>
  </div>
  <div class="page">
    <p>CloudPowerCap: Manage Server Power Caps to meet VM workload needs  Previous server power cap management work</p>
    <p>Didnt include interoperation w/CRM, which lessens its usability  Could impact respect for constraints, SLAs, fairness  Could reduce burst performance and power proportionality</p>
    <p>!  CloudPowerCap+CRM -&gt; novel capabilities for power-capped hosts:</p>
    <p>Improved constraint satisfaction via powercap allocation  Reduced entitlement balancing overhead via powercap ent balancing  Enhanced power availability for bursts via powercap redistribution !</p>
    <p>Note: CloudPowerCap not designed to reduce power consumption  Designed to redistribute rack power budget btw hosts to support CRM  In some cases, this results in power savings</p>
  </div>
  <div class="page">
    <p>Server Power Caps impact effective CPU capacity  Server power consumption roughly proportional to CPU utilization</p>
    <p>! ! !</p>
    <p>Worst-case; P-states (DVFS) &amp; C-states reduce power consumption  Idle power includes non-CPU elements (e.g., memory, network, disk)  Peak power is that consumed at 100% CPU utilization at peak P-state  Utilization is computed relative to full CPU capacity at peak P-state !</p>
    <p>Setting a host power cap limits worst-case attainable CPU capacity ! ! ! !</p>
    <p>Host resource scheduler may get more capacity for given host power cap</p>
    <p>UPPPP idlepeakidleconsumed )( +=</p>
    <p>)/)(( peakcappedidlepeakidlecap CCPPPP += )/()( idlepeakidlecappeakcapped PPPPCC =</p>
  </div>
  <div class="page">
    <p>Rack Power Budget Resource Trade-offs  Trade-offs possible in allocating a racks power budget to its hosts</p>
    <p>Consider host comprising 12 CPUs, each 2.9 GHz, as follows: ! ! !</p>
    <p>Rack w/8 KW power budget can support different maximum capacities  CloudPowerCap manages racks w/host power cap below peak</p>
    <p>Power Cap(W)</p>
    <p>Num Hosts</p>
    <p>CPU Total (GHz)</p>
    <p>CPU Ratio Memory Total (GB)</p>
    <p>Memory Ratio</p>
    <p>CPU Memory Nameplate Peak Idle 34.8 GHz 96 GB 400 W 320 W 160 W</p>
  </div>
  <div class="page">
    <p>CloudPowerCap Powercap Distribution Examples  Powercap Allocation</p>
    <p>Provide resources to allow CRM to satisfy VM-VM affinity constraint</p>
    <p>VM 1</p>
    <p>VM 2</p>
    <p>cc</p>
    <p>VM 3</p>
    <p>cc</p>
    <p>VM 3</p>
    <p>VM 2</p>
    <p>VM 1</p>
    <p>! cc</p>
    <p>Host A Host BHost A Host B</p>
  </div>
  <div class="page">
    <p>Background: Powercap Distribution Examples  Powercap Entitlement Balancing</p>
    <p>Enable entitlement balancing to enhance response to demand bursts (below)  Reduce entitlement balancing overhead by avoiding some migrations</p>
    <p>VM 1</p>
    <p>VM 2</p>
    <p>cc</p>
    <p>VM 3</p>
    <p>cc Host A Host BHost A Host B</p>
    <p>VM 1</p>
    <p>VM 2</p>
    <p>cc</p>
    <p>VM 3</p>
    <p>! cc</p>
  </div>
  <div class="page">
    <p>Background: Powercap Distribution Examples  Powercap Redistribution</p>
    <p>Provide burst headroom after host power-off during low demand period</p>
    <p>VM 1</p>
    <p>Host A Host BHost A Host B</p>
    <p>VM 1</p>
    <p>VM 2</p>
    <p>cc</p>
    <p>Stand-by</p>
    <p>VM 2</p>
    <p>CC ! !</p>
    <p>CC ! ! !</p>
  </div>
  <div class="page">
    <p>CloudPowerCap Design and Implementation  Design: Interacts with each CRM phase to support its goals</p>
    <p>Operates on host/VM model used by CRM to determine actions  Modifies hosts CPU capacity when changing hosts power-cap  Issues actions in appropriate order wrt other CRM actions</p>
    <p>Implemented w/VMware Distributed Resource Scheduler (DRS)  CloudPowerCap could be implemented similarly wrt other CRMs</p>
  </div>
  <div class="page">
    <p>CloudPowerCap Implementation  DRS [VMware Technical Journal 2012]</p>
    <p>Runs every 5 min or on request (e.g., choose VM power-on host)  Operates on snapshot representing hosts &amp; VMs under mgmt  Recommends actions w/expected impact simulated on snapshot !</p>
    <p>For CloudPowerCap interoperation with DRS  Set snapshot host CPU capacity to reflect host power cap value  Added new action type to change a hosts power cap value</p>
    <p>Changes snapshot host CPU capacity accordingly  Changed DRS to treat CPU capacity as elastic up to peak</p>
    <p>Subject to available power budget  Introduced CloudPowerCap phases to support DRS phases</p>
  </div>
  <div class="page">
    <p>Experiments  Run on DRS simulator</p>
    <p>Characteristics  High fidelity; used to develop &amp; test all DRS algorithm features  Allows flexibility &amp; precision in expressing scenarios; repeatable</p>
    <p>Simulates behavior of cluster of specified hosts and VMs  Hosts: core count; CPU GHz / core; memory size; idle, peak power  VMs: vCPUs &amp; memory size, time series CPU &amp; memory workloads</p>
    <p>Models:  Operation of hosts &amp; VMs, including host hypervisor scheduler  Execution of DRS recommendations, updating the cluster state  vMotion overhead, incl. memory access patterns, I/O bandwidth  CPU &amp; memory given to VMs over time, reported as payload</p>
  </div>
  <div class="page">
    <p>Experiments  CloudPowerCap compared with two static strategies from rack budget table slide</p>
    <p>StaticHigh: Each host power cap statically set to its peak of 320W  Maximizes the amount of CPU capacity available for given rack power budget  Doesnt enable using power for more memory &amp; I/O capacity w/lower CPU</p>
    <p>Static: Each host power cap statically set to 250W  Allows more servers to be placed in the rack  Allows more memory and I/O capacity w/lower CPU capacity</p>
    <p>!  CloudPowerCap compared with these static strategies in three scenarios</p>
    <p>Headroom balancing  Supporting DRS headroom balancing while avoiding vMotion overhead</p>
    <p>Flexible resource capacity  Enabling trade-off between powering CPU and memory capacity at runtime</p>
    <p>Standby host power redistribution  Redistributing powered-off host power, running hosts can better handle bursts</p>
  </div>
  <div class="page">
    <p>Experiment: Headroom Rebalancing</p>
  </div>
  <div class="page">
    <p>Experiment: Headroom Rebalancing</p>
  </div>
  <div class="page">
    <p>Experiment: Flexible Resource Capacity</p>
  </div>
  <div class="page">
    <p>Experiment: Flexible Resource Capacity</p>
  </div>
  <div class="page">
    <p>Experiment: Standby Host Power Reallocation</p>
  </div>
  <div class="page">
    <p>Conclusions  CloudPowerCap</p>
    <p>Can manage rack power budget &gt;= sum of the hosts peak power  Effectively by interoperating w/Cloud Resource Management system</p>
    <p>Reinforces and enhances the operation of the CRM system  Supports flexible trade-off between CPU, memory, I/O</p>
  </div>
  <div class="page">
    <p>Questions?</p>
  </div>
  <div class="page">
    <p>Implementation: Interoperation w/DRS phases  Constraint Violation Correction: Powercap Allocation</p>
    <p>Determine min powercap setting needed on each host for reservations  Allocate remaining rack power budget as needed to enable vio correction  If correction actions, redivvy rack power budget to rebalance headroom</p>
  </div>
  <div class="page">
    <p>Implementation: Interoperation w/DRS phases  Entitlement Balancing: Powercap Entitlement Balancing</p>
    <p>While NE imbalance &gt; imbalance threshold, use progressive filling  Lower powercap of host w/lowest NE, Raise for host w/highest NE  Stop powercap entitlement balancing when power cap hits peak</p>
    <p>Address any remaining NE imbalance w/DRS load balancing phase</p>
  </div>
  <div class="page">
    <p>Implementation: Interoperation w/DRS phases  Power Management: Powercap Redistribution</p>
    <p>If low demand leads DRS to recommend VM consolidation and host power-off  CloudPowerCap redistributes powered-off hosts power to those remaining on</p>
    <p>For better burst handling  If high demand leads DRS to recommend host power-on and VM distribution</p>
    <p>CloudPowerCap generates prerequisite host powercap recommendations  May involve redistribution of power budget from powered-on hosts</p>
  </div>
</Presentation>
