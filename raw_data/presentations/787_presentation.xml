<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Scalable and Lightweight CTF Infrastructures Using Application</p>
    <p>Containers Arvind S Raj, Bithin Alangot, Seshagiri Prabhu and</p>
    <p>Krishnashree Achuthan</p>
    <p>Amrita Center for Cybersecurity Systems and Networks Amrita Vishwa Vidyapeetham, Kerala, India</p>
    <p>Workshop Arvind, Bithin, Seshagiri, Krishnashree  Scalable and Lightweight CTF Infrastructures Using Application Containers 1/38</p>
  </div>
  <div class="page">
    <p>Introduction</p>
    <p>CTFs - an effective means to teach secure coding and computer security.</p>
    <p>Two popular formats: Jeopardy and Attack-defence.</p>
    <p>Jeopardy: Self-paced, offence only, non-interactive and more popular.</p>
    <p>Attack-defence: Real-time, offence and defence, interactive but less popular.</p>
    <p>Arvind, Bithin, Seshagiri, Krishnashree  Scalable and Lightweight CTF Infrastructures Using Application Containers 2/38</p>
  </div>
  <div class="page">
    <p>CTF event counts</p>
    <p>Arvind, Bithin, Seshagiri, Krishnashree  Scalable and Lightweight CTF Infrastructures Using Application Containers 3/38</p>
  </div>
  <div class="page">
    <p>Participation trends</p>
    <p>Arvind, Bithin, Seshagiri, Krishnashree  Scalable and Lightweight CTF Infrastructures Using Application Containers 4/38</p>
  </div>
  <div class="page">
    <p>Format challenges</p>
    <p>Both organizers and participants face challenges.</p>
    <p>Organizers: Complex infrastructure engineering and high resource requirements.</p>
    <p>Participants: Complex gameplay, infrastructure setup and IT policies.</p>
    <p>Arvind, Bithin, Seshagiri, Krishnashree  Scalable and Lightweight CTF Infrastructures Using Application Containers 5/38</p>
  </div>
  <div class="page">
    <p>Problem</p>
    <p>Can we build less resource intensive and easily scalable contest</p>
    <p>infrastructures? Arvind, Bithin, Seshagiri, Krishnashree  Scalable and Lightweight CTF Infrastructures Using Application Containers 6/38</p>
  </div>
  <div class="page">
    <p>Solution</p>
    <p>Replace virtual machines with application containers.</p>
    <p>Significant reduction in resource usage and engineering required.</p>
    <p>Eliminates several difficult to setup components.</p>
    <p>Improves gameplay experience for participants.</p>
    <p>Arvind, Bithin, Seshagiri, Krishnashree  Scalable and Lightweight CTF Infrastructures Using Application Containers 7/38</p>
  </div>
  <div class="page">
    <p>Outline of presentation</p>
    <p>Arvind, Bithin, Seshagiri, Krishnashree  Scalable and Lightweight CTF Infrastructures Using Application Containers 8/38</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Arvind, Bithin, Seshagiri, Krishnashree  Scalable and Lightweight CTF Infrastructures Using Application Containers 9/38</p>
  </div>
  <div class="page">
    <p>Challenges</p>
    <p>Gameplay affects participants: requires doing too many tasks.</p>
    <p>Distracts them from primary objective.</p>
    <p>Infrastructure affects organizers and participants.</p>
    <p>Arvind, Bithin, Seshagiri, Krishnashree  Scalable and Lightweight CTF Infrastructures Using Application Containers 10/38</p>
  </div>
  <div class="page">
    <p>Distributed infrastructure</p>
    <p>Arvind, Bithin, Seshagiri, Krishnashree  Scalable and Lightweight CTF Infrastructures Using Application Containers 11/38</p>
  </div>
  <div class="page">
    <p>Challenges</p>
    <p>Organizers</p>
    <p>Infrastructure needs lot of resources, engineering and monitoring.</p>
    <p>eg: rwthCTF 2012s VPN server: 16GB RAM, 8 core i7 processor and 8 OpenVPN daemon processes.</p>
    <p>Participants</p>
    <p>Difficult to obtain hardware such as computers and network switches/routers.</p>
    <p>University IT policies prevent connecting to UDP based VPNs.</p>
    <p>Arvind, Bithin, Seshagiri, Krishnashree  Scalable and Lightweight CTF Infrastructures Using Application Containers 12/38</p>
  </div>
  <div class="page">
    <p>Centralized infrastructure</p>
    <p>Arvind, Bithin, Seshagiri, Krishnashree  Scalable and Lightweight CTF Infrastructures Using Application Containers 13/38</p>
  </div>
  <div class="page">
    <p>Challenges</p>
    <p>Organizers</p>
    <p>Exponential increase in computing resources required.</p>
    <p>Setting up exploit sandboxes, installing libraries and executing exploits.</p>
    <p>Participants</p>
    <p>Network latency when accessing services.</p>
    <p>Recreating services locally for analysis and testing is not straightforward.</p>
    <p>Locked in to a standard exploit environment.</p>
    <p>Arvind, Bithin, Seshagiri, Krishnashree  Scalable and Lightweight CTF Infrastructures Using Application Containers 14/38</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Arvind, Bithin, Seshagiri, Krishnashree  Scalable and Lightweight CTF Infrastructures Using Application Containers 15/38</p>
  </div>
  <div class="page">
    <p>Docker vs Virtual machines</p>
    <p>Figure : Virtual Machines</p>
    <p>Figure : Docker containers</p>
    <p>Images courtesy www.docker.com</p>
    <p>Arvind, Bithin, Seshagiri, Krishnashree  Scalable and Lightweight CTF Infrastructures Using Application Containers 16/38</p>
  </div>
  <div class="page">
    <p>Why Docker?</p>
    <p>Built-in container image reuse and extend capabilities.</p>
    <p>Remote API and programming language bindings aid in automation.</p>
    <p>Easy to share and distribute container images.</p>
    <p>Third party tools for container and image management.</p>
    <p>Arvind, Bithin, Seshagiri, Krishnashree  Scalable and Lightweight CTF Infrastructures Using Application Containers 17/38</p>
  </div>
  <div class="page">
    <p>Distribution and PORTUS</p>
    <p>Docker Incs Distribution: Tool to manage container images - similar to a Git server.</p>
    <p>SUSEs PORTUS: Role-based access control of Distributions images.</p>
    <p>Allows creating namespaces for teams and assigning different access levels to them.</p>
    <p>Alternatives: GitLab, Dockerhub, Amazon EC2 container service, Google Container Registry and more.</p>
    <p>Arvind, Bithin, Seshagiri, Krishnashree  Scalable and Lightweight CTF Infrastructures Using Application Containers 18/38</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Arvind, Bithin, Seshagiri, Krishnashree  Scalable and Lightweight CTF Infrastructures Using Application Containers 19/38</p>
  </div>
  <div class="page">
    <p>Components</p>
    <p>Container registry: Git server like service for container images.</p>
    <p>Container hosts: Servers which run all the containers.</p>
    <p>Service related containers: Docker containers which either run a service or an exploit for a service.</p>
    <p>Flag volume: Docker volumes for persistent storage of flags.</p>
    <p>Modified versions of components of the iCTF centralized framework.</p>
    <p>Arvind, Bithin, Seshagiri, Krishnashree  Scalable and Lightweight CTF Infrastructures Using Application Containers 20/38</p>
  </div>
  <div class="page">
    <p>System design</p>
    <p>Arvind, Bithin, Seshagiri, Krishnashree  Scalable and Lightweight CTF Infrastructures Using Application Containers 21/38</p>
  </div>
  <div class="page">
    <p>Gameplay</p>
    <p>Organizers</p>
    <p>Configure a CTF contest as desired.</p>
    <p>Build the service container images.</p>
    <p>Configure the container registry and upload service container images to it.</p>
    <p>Setup the game database and configure all game scripts.</p>
    <p>Optionally distribute encrypted copies of service container images to all teams.</p>
    <p>Arvind, Bithin, Seshagiri, Krishnashree  Scalable and Lightweight CTF Infrastructures Using Application Containers 22/38</p>
  </div>
  <div class="page">
    <p>Gameplay (cont.)</p>
    <p>Participants</p>
    <p>Import the service container images from registry or organizer distributed copies.</p>
    <p>Analyze services for vulnerabilities, fix them and commit and upload changes to container registry.</p>
    <p>Create exploit containers for discovered vulnerabilities in accordance with the requirements, test them locally and upload them.</p>
    <p>Arvind, Bithin, Seshagiri, Krishnashree  Scalable and Lightweight CTF Infrastructures Using Application Containers 23/38</p>
  </div>
  <div class="page">
    <p>Game round overview</p>
    <p>A game consists of several rounds with following phases</p>
    <p>Synchronize: All updated container images are synchronized with their live containers or images.</p>
    <p>Store flags: Flags are stored in all services of all teams and services status is updated.</p>
    <p>Run exploits: All exploit containers are run against all services of all teams except exploit author.</p>
    <p>Retrieve flags: Flags stored earlier are retrieved, service status is updated and points are deducted if not retrieved successfully.</p>
    <p>Arvind, Bithin, Seshagiri, Krishnashree  Scalable and Lightweight CTF Infrastructures Using Application Containers 24/38</p>
  </div>
  <div class="page">
    <p>Benefits for organizers</p>
    <p>Lightweight game infrastructure.</p>
    <p>No need for engineering and monitoring VPN network.</p>
    <p>No need for configuring exploit environments.</p>
    <p>Tools like Docker swarm and Docker cloud further ease managing infrastructure.</p>
    <p>Arvind, Bithin, Seshagiri, Krishnashree  Scalable and Lightweight CTF Infrastructures Using Application Containers 25/38</p>
  </div>
  <div class="page">
    <p>Benefits for participants</p>
    <p>No additional hardware, dealing with IT policies or setting up VPN.</p>
    <p>No dealing with network latency: setup services locally.</p>
    <p>Infrastructure maintains service backups, simplifying gameplay.</p>
    <p>Fully customizable exploit environments.</p>
    <p>Arvind, Bithin, Seshagiri, Krishnashree  Scalable and Lightweight CTF Infrastructures Using Application Containers 26/38</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Arvind, Bithin, Seshagiri, Krishnashree  Scalable and Lightweight CTF Infrastructures Using Application Containers 27/38</p>
  </div>
  <div class="page">
    <p>Experiments performed</p>
    <p>Two kinds of experiments 3 services, 5 to 40 teams. 30 teams, 1 to 8 services.</p>
    <p>Measure CPU utilization and memory usage for a 10 minute game round.</p>
    <p>Worst case: All teams write exploits for all services.</p>
    <p>Compare with estimated usage in VM based infrastructure.</p>
    <p>Arvind, Bithin, Seshagiri, Krishnashree  Scalable and Lightweight CTF Infrastructures Using Application Containers 28/38</p>
  </div>
  <div class="page">
    <p>Estimating VM resource usage</p>
    <p>Simulating requires high amounts of resources.</p>
    <p>Estimate based on requirements for InCTFs attack-defence round.</p>
    <p>Arvind, Bithin, Seshagiri, Krishnashree  Scalable and Lightweight CTF Infrastructures Using Application Containers 29/38</p>
  </div>
  <div class="page">
    <p>Observations</p>
    <p>Container server: 16GB RAM and 8 core Intel Core i5 2600 processor.</p>
    <p>Highest memory usage: 3.4GB and 4.4GB. Exploits included.</p>
    <p>Estimated usage for VMs: 40GB and 60GB. Exploits not included.</p>
    <p>Highest CPU usage observed 13% and 20%.</p>
    <p>Can easily handle loads comparable to most attack-defence CTFs today.</p>
    <p>Arvind, Bithin, Seshagiri, Krishnashree  Scalable and Lightweight CTF Infrastructures Using Application Containers 30/38</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Arvind, Bithin, Seshagiri, Krishnashree  Scalable and Lightweight CTF Infrastructures Using Application Containers 31/38</p>
  </div>
  <div class="page">
    <p>Future work</p>
    <p>Develop techniques and identify tuning parameters to prevent overloading of Docker daemon with several simultaneous requests.</p>
    <p>Provide teams access to network traffic captures for reverse engineering exploits.</p>
    <p>Identify parameters to determine utility of CTF game infrastructures.</p>
    <p>Perform usability study of container-based infrastructure.</p>
    <p>Arvind, Bithin, Seshagiri, Krishnashree  Scalable and Lightweight CTF Infrastructures Using Application Containers 32/38</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Arvind, Bithin, Seshagiri, Krishnashree  Scalable and Lightweight CTF Infrastructures Using Application Containers 33/38</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Existing attack-defence CTF game infrastructures are complex to setup and require several computing resources.</p>
    <p>Using application containers instead of virtual machines reduces resource requirement and engineering effort needed.</p>
    <p>Additional tools can improve gameplay experience for participants and further simplify infrastructure management.</p>
    <p>https://github.com/inctf/inctf-framework.</p>
    <p>Arvind, Bithin, Seshagiri, Krishnashree  Scalable and Lightweight CTF Infrastructures Using Application Containers 34/38</p>
  </div>
  <div class="page">
    <p>Observations</p>
    <p>Figure : Average memory usage: 3 services, multiple teams</p>
    <p>Arvind, Bithin, Seshagiri, Krishnashree  Scalable and Lightweight CTF Infrastructures Using Application Containers 35/38</p>
  </div>
  <div class="page">
    <p>Observations(cont.)</p>
    <p>Figure : Average memory usage: 30 teams, multiple services</p>
    <p>Arvind, Bithin, Seshagiri, Krishnashree  Scalable and Lightweight CTF Infrastructures Using Application Containers 36/38</p>
  </div>
  <div class="page">
    <p>Observations</p>
    <p>Figure : Average CPU usage: 3 services, multiple teams</p>
    <p>Arvind, Bithin, Seshagiri, Krishnashree  Scalable and Lightweight CTF Infrastructures Using Application Containers 37/38</p>
  </div>
  <div class="page">
    <p>Observations(cont.)</p>
    <p>Figure : Average CPU usage: 30 teams, multiple services</p>
    <p>Arvind, Bithin, Seshagiri, Krishnashree  Scalable and Lightweight CTF Infrastructures Using Application Containers 38/38</p>
  </div>
</Presentation>
