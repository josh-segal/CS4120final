<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>A Study of Linux File System Evolution</p>
    <p>Lanyue Lu Andrea C. Arpaci-Dusseau Remzi H. Arpaci-Dusseau</p>
    <p>Shan Lu</p>
    <p>University of Wisconsin - Madison</p>
  </div>
  <div class="page">
    <p>Local File Systems Are Important</p>
  </div>
  <div class="page">
    <p>Local File Systems Are Important</p>
    <p>Windows Mac Linux</p>
  </div>
  <div class="page">
    <p>Local File Systems Are Important</p>
    <p>Windows Mac Linux</p>
  </div>
  <div class="page">
    <p>Local File Systems Are Important</p>
    <p>Google GFS</p>
    <p>Hadoop DFS</p>
    <p>Windows Mac Linux</p>
  </div>
  <div class="page">
    <p>Local File Systems Are Important</p>
    <p>Google GFS</p>
    <p>Hadoop DFS</p>
    <p>Windows Mac Linux</p>
  </div>
  <div class="page">
    <p>Local File Systems Are Important</p>
    <p>Google GFS</p>
    <p>Hadoop DFS</p>
    <p>Android iPhone</p>
    <p>Windows Mac Linux</p>
  </div>
  <div class="page">
    <p>Local File Systems Are Important</p>
    <p>Google GFS</p>
    <p>Hadoop DFS</p>
    <p>Android iPhone</p>
    <p>Windows Mac Linux</p>
  </div>
  <div class="page">
    <p>Why Study Is Useful ?</p>
  </div>
  <div class="page">
    <p>Why Study Is Useful ?</p>
    <p>Study drives system designs  previous work focuses on measurements  little emphasis on system evolution</p>
  </div>
  <div class="page">
    <p>Why Study Is Useful ?</p>
    <p>Study drives system designs  previous work focuses on measurements  little emphasis on system evolution</p>
    <p>Answer important questions  complexity of file systems  dominant bug types  performance optimizations  reliability enhancements  similarities across file systems</p>
  </div>
  <div class="page">
    <p>Who Is This Study Useful To ?</p>
  </div>
  <div class="page">
    <p>Who Is This Study Useful To ?</p>
    <p>File system developers  avoid same mistakes  improve existing design and implementation</p>
  </div>
  <div class="page">
    <p>Who Is This Study Useful To ?</p>
    <p>File system developers  avoid same mistakes  improve existing design and implementation</p>
    <p>System researchers  identify problems that plague existing systems  match research to reality</p>
  </div>
  <div class="page">
    <p>Who Is This Study Useful To ?</p>
    <p>File system developers  avoid same mistakes  improve existing design and implementation</p>
    <p>System researchers  identify problems that plague existing systems  match research to reality</p>
    <p>Tool builders  large-scale statistical bug patterns  effective bug-finding tools  realistic fault injection</p>
  </div>
  <div class="page">
    <p>How We Studied ?</p>
  </div>
  <div class="page">
    <p>How We Studied ?</p>
    <p>File systems are evolving  code base is not static  new features, bug-fixings  performance and reliability improvement</p>
  </div>
  <div class="page">
    <p>How We Studied ?</p>
    <p>File systems are evolving  code base is not static  new features, bug-fixings  performance and reliability improvement</p>
    <p>Patches describe evolution  how one version transforms to the next  every patch is available  system archeology</p>
  </div>
  <div class="page">
    <p>How We Studied ?</p>
    <p>File systems are evolving  code base is not static  new features, bug-fixings  performance and reliability improvement</p>
    <p>Patches describe evolution  how one version transforms to the next  every patch is available  system archeology</p>
    <p>Study with other rich information  source code, design documents  forum, mailing lists</p>
  </div>
  <div class="page">
    <p>What We Did ?</p>
  </div>
  <div class="page">
    <p>Manual patch inspection  XFS, Ext4, Btrfs, Ext3, Reiserfs, JFS  Linux 2.6 series  5079 patches, multiple passes</p>
    <p>What We Did ?</p>
  </div>
  <div class="page">
    <p>Manual patch inspection  XFS, Ext4, Btrfs, Ext3, Reiserfs, JFS  Linux 2.6 series  5079 patches, multiple passes</p>
    <p>Quantitatively analyze in various aspects  patch types, bug patterns and consequence  performance and reliability techniques</p>
    <p>What We Did ?</p>
  </div>
  <div class="page">
    <p>Manual patch inspection  XFS, Ext4, Btrfs, Ext3, Reiserfs, JFS  Linux 2.6 series  5079 patches, multiple passes</p>
    <p>Quantitatively analyze in various aspects  patch types, bug patterns and consequence  performance and reliability techniques</p>
    <p>Provide an annotated dataset  rich data for further analysis</p>
    <p>What We Did ?</p>
  </div>
  <div class="page">
    <p>Major Results Preview</p>
  </div>
  <div class="page">
    <p>Bugs are prevalent</p>
    <p>Major Results Preview</p>
  </div>
  <div class="page">
    <p>Bugs are prevalent</p>
    <p>Semantic bugs dominate</p>
    <p>Major Results Preview</p>
  </div>
  <div class="page">
    <p>Bugs are prevalent</p>
    <p>Semantic bugs dominate</p>
    <p>Bugs are constant</p>
    <p>Major Results Preview</p>
  </div>
  <div class="page">
    <p>Bugs are prevalent</p>
    <p>Semantic bugs dominate</p>
    <p>Bugs are constant</p>
    <p>Corruption and crash are most common</p>
    <p>Major Results Preview</p>
  </div>
  <div class="page">
    <p>Bugs are prevalent</p>
    <p>Semantic bugs dominate</p>
    <p>Bugs are constant</p>
    <p>Corruption and crash are most common</p>
    <p>Metadata management has high bug density</p>
    <p>Major Results Preview</p>
  </div>
  <div class="page">
    <p>Bugs are prevalent</p>
    <p>Semantic bugs dominate</p>
    <p>Bugs are constant</p>
    <p>Corruption and crash are most common</p>
    <p>Metadata management has high bug density</p>
    <p>Failure paths are error-prone</p>
    <p>Major Results Preview</p>
  </div>
  <div class="page">
    <p>Bugs are prevalent</p>
    <p>Semantic bugs dominate</p>
    <p>Bugs are constant</p>
    <p>Corruption and crash are most common</p>
    <p>Metadata management has high bug density</p>
    <p>Failure paths are error-prone</p>
    <p>Various performance techniques are used</p>
    <p>Major Results Preview</p>
  </div>
  <div class="page">
    <p>Introduction</p>
    <p>Methodology</p>
    <p>Study Results</p>
    <p>Outline</p>
  </div>
  <div class="page">
    <p>Methodology</p>
  </div>
  <div class="page">
    <p>Methodology</p>
    <p>Ext4 Btrfs Ext3 JFSReiserXFSDiverse:</p>
  </div>
  <div class="page">
    <p>Methodology</p>
    <p>Ext4 Btrfs Ext3 JFSReiserXFS</p>
    <p>Linux 2.6.0 to 2.6.39</p>
    <p>Dec. 2003 May. 2011</p>
    <p>Diverse:</p>
    <p>Complete:</p>
  </div>
  <div class="page">
    <p>Methodology</p>
    <p>Ext4 Btrfs Ext3 JFSReiserXFS</p>
    <p>Linux 2.6.0 to 2.6.39</p>
    <p>Dec. 2003 May. 2011</p>
    <p>Patch</p>
    <p>Header</p>
    <p>Description</p>
    <p>Code</p>
    <p>Diverse:</p>
    <p>Complete:</p>
    <p>Comprehensive:</p>
  </div>
  <div class="page">
    <p>Patch Header1</p>
    <p>[PATCH] fix possible NULL pointer in ext3/super.c.</p>
  </div>
  <div class="page">
    <p>Patch Description2</p>
    <p>In fs/ext3/super.c::ext3_get_journal() at line 1675, `journal' can be NULL, but it is not handled right (detect by Coverity's checker).</p>
  </div>
  <div class="page">
    <p>Related Code3</p>
    <p>--- /fs/ext3/super.c +++ /fs/ext3/super.c @@ -1675,6 +1675,7 @@ journal_t *ext3_get_journal() 1 if (!journal) { 2 printk(KERN_ERR &quot;EXT3: Could not load&quot;); 3 iput(journal_inode);</p>
  </div>
  <div class="page">
    <p>Related Code3</p>
    <p>--- /fs/ext3/super.c +++ /fs/ext3/super.c @@ -1675,6 +1675,7 @@ journal_t *ext3_get_journal() 1 if (!journal) { 2 printk(KERN_ERR &quot;EXT3: Could not load&quot;); 3 iput(journal_inode);</p>
  </div>
  <div class="page">
    <p>Related Code3</p>
    <p>--- /fs/ext3/super.c +++ /fs/ext3/super.c @@ -1675,6 +1675,7 @@ journal_t *ext3_get_journal() 1 if (!journal) { 2 printk(KERN_ERR &quot;EXT3: Could not load&quot;); 3 iput(journal_inode);</p>
    <p>return NULL;</p>
  </div>
  <div class="page">
    <p>Classifications</p>
  </div>
  <div class="page">
    <p>Classifications</p>
    <p>Patch overview  type: bug  size: 1</p>
  </div>
  <div class="page">
    <p>Classifications</p>
    <p>Patch overview  type: bug  size: 1</p>
    <p>Bug analysis  pattern: memory (nullptr)  consequence: crash  data structure: super  tool: Coverity</p>
  </div>
  <div class="page">
    <p>Classifications</p>
    <p>Patch overview  type: bug  size: 1</p>
    <p>Bug analysis  pattern: memory (nullptr)  consequence: crash  data structure: super  tool: Coverity</p>
    <p>Performance and reliability  pattern  location</p>
  </div>
  <div class="page">
    <p>Limitations</p>
  </div>
  <div class="page">
    <p>Limitations</p>
    <p>Only six popular file systems  many other file systems</p>
  </div>
  <div class="page">
    <p>Limitations</p>
    <p>Only six popular file systems  many other file systems</p>
    <p>Only Linux 2.6 major versions  omit earlier versions</p>
  </div>
  <div class="page">
    <p>Limitations</p>
    <p>Only six popular file systems  many other file systems</p>
    <p>Only Linux 2.6 major versions  omit earlier versions</p>
    <p>Only reported bugs  existing, but unknown bugs</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction</p>
    <p>Methodology</p>
    <p>Study Results</p>
  </div>
  <div class="page">
    <p>Questions to Answer</p>
    <p>What do patches do ?</p>
    <p>What do bugs look like ?</p>
    <p>Do bugs diminish over time ?</p>
    <p>What consequences do bugs have ?</p>
    <p>Where does complexity of file systems lie ?</p>
    <p>Do bugs occur on normal paths ?</p>
    <p>What performance techniques are used ?</p>
  </div>
  <div class="page">
    <p>Q1: What do patches do ?</p>
  </div>
  <div class="page">
    <p>Patch Overview</p>
  </div>
  <div class="page">
    <p>Type Description</p>
    <p>Bug Fix existing bugs</p>
    <p>Performance Propose efficient design or implementation</p>
    <p>Reliability Improve robustness</p>
    <p>Feature Add new functionality</p>
    <p>Maintenance Maintain the code and documentation</p>
    <p>Patch Overview</p>
  </div>
  <div class="page">
    <p>Patch Overview</p>
    <p>XFS Ext4 Btrfs Ext3 Reiser JFS All</p>
  </div>
  <div class="page">
    <p>Patch Overview</p>
    <p>XFS Ext4 Btrfs Ext3 Reiser JFS All</p>
  </div>
  <div class="page">
    <p>Patch Overview</p>
    <p>XFS Ext4 Btrfs Ext3 Reiser JFS All</p>
  </div>
  <div class="page">
    <p>Patch Overview</p>
    <p>XFS Ext4 Btrfs Ext3 Reiser JFS All</p>
  </div>
  <div class="page">
    <p>Patch Overview</p>
    <p>XFS Ext4 Btrfs Ext3 Reiser JFS All</p>
  </div>
  <div class="page">
    <p>Patch Overview</p>
    <p>XFS Ext4 Btrfs Ext3 Reiser JFS All</p>
    <p>Bug</p>
  </div>
  <div class="page">
    <p>Patch Overview</p>
    <p>XFS Ext4 Btrfs Ext3 Reiser JFS All</p>
    <p>Bug</p>
    <p>Performance</p>
  </div>
  <div class="page">
    <p>Patch Overview</p>
    <p>XFS Ext4 Btrfs Ext3 Reiser JFS All</p>
    <p>Bug</p>
    <p>Performance</p>
    <p>Reliability</p>
  </div>
  <div class="page">
    <p>Patch Overview</p>
    <p>XFS Ext4 Btrfs Ext3 Reiser JFS All</p>
    <p>Bug</p>
    <p>Performance</p>
    <p>Reliability</p>
    <p>Feature</p>
  </div>
  <div class="page">
    <p>XFS Ext4 Btrfs Ext3 Reiser JFS All</p>
    <p>Bug</p>
    <p>Performance</p>
    <p>Reliability</p>
    <p>Feature</p>
    <p>Maintenance</p>
    <p>Patch Overview</p>
  </div>
  <div class="page"/>
  <div class="page"/>
  <div class="page"/>
  <div class="page"/>
  <div class="page">
    <p>Q2: What do bugs look like ?</p>
  </div>
  <div class="page">
    <p>Bug Pattern</p>
  </div>
  <div class="page">
    <p>Type Description</p>
    <p>Semantic Incorrect design or implementation (e.g. incorrect state update, wrong design)</p>
    <p>Concurrency Incorrect concurrent behavior (e.g. miss unlock, deadlock)</p>
    <p>Memory Incorrect handling of memory objects (e.g. resource leak, null dereference)</p>
    <p>Error Code Missing or wrong error code handling (e.g. return wrong error code)</p>
    <p>Bug Pattern</p>
  </div>
  <div class="page">
    <p>ext3/ialloc.c, 2.6.4 find_group_other(...){ ... ...</p>
    <p>... ... }</p>
    <p>Semantic Bug Example</p>
    <p>group = parent_group + 1; for (i = 2; i &lt; ngroups; i++) { }</p>
  </div>
  <div class="page">
    <p>ext3/ialloc.c, 2.6.4 find_group_other(...){ ... ...</p>
    <p>... ... }</p>
    <p>Semantic Bug Example</p>
    <p>group = parent_group; for (i = 0; i &lt; ngroups; i++) { }</p>
  </div>
  <div class="page">
    <p>Bug Pattern</p>
    <p>XFS Ext4 Btrfs Ext3 Reiser JFS All</p>
    <p>Semantic</p>
  </div>
  <div class="page">
    <p>Bug Pattern</p>
    <p>XFS Ext4 Btrfs Ext3 Reiser JFS All</p>
    <p>Semantic</p>
  </div>
  <div class="page">
    <p>Bug Pattern</p>
    <p>XFS Ext4 Btrfs Ext3 Reiser JFS All</p>
    <p>Semantic</p>
  </div>
  <div class="page">
    <p>ext4/extents.c, 2.6.30</p>
    <p>ext4_ext_put_in_cache(...){ ... ...</p>
    <p>}</p>
    <p>Concurrency Bug Example</p>
  </div>
  <div class="page">
    <p>ext4/extents.c, 2.6.30</p>
    <p>ext4_ext_put_in_cache(...){ ... ...</p>
    <p>}</p>
    <p>Concurrency Bug Example</p>
    <p>spin_lock(i_br_lock);</p>
    <p>spin_unlock(i_br_lock);</p>
  </div>
  <div class="page">
    <p>Bug Pattern</p>
    <p>XFS Ext4 Btrfs Ext3 Reiser JFS All</p>
    <p>Semantic</p>
    <p>Concurrency</p>
  </div>
  <div class="page">
    <p>btrfs/inode, 2.6.30</p>
    <p>btrfs_new_inode(...){</p>
    <p>}</p>
    <p>Memory Bug Example</p>
  </div>
  <div class="page">
    <p>btrfs/inode, 2.6.30</p>
    <p>btrfs_new_inode(...){</p>
    <p>}</p>
    <p>Memory Bug Example</p>
  </div>
  <div class="page">
    <p>btrfs/inode, 2.6.30</p>
    <p>btrfs_new_inode(...){</p>
    <p>}</p>
    <p>Memory Bug Example</p>
  </div>
  <div class="page">
    <p>btrfs/inode, 2.6.30</p>
    <p>btrfs_new_inode(...){</p>
    <p>}</p>
    <p>Memory Bug Example</p>
    <p>iput(inode);</p>
  </div>
  <div class="page">
    <p>Bug Pattern</p>
    <p>XFS Ext4 Btrfs Ext3 Reiser JFS All</p>
    <p>Semantic</p>
    <p>Concurrency</p>
    <p>Memory</p>
  </div>
  <div class="page">
    <p>reiserfs/xattr_acl.c, 2.6.16</p>
    <p>reiserfs_get_acl(...) {</p>
    <p>... ... 1 acl = posix_acl_from_disk(...);</p>
    <p>}</p>
    <p>Error Code Example</p>
  </div>
  <div class="page">
    <p>reiserfs/xattr_acl.c, 2.6.16</p>
    <p>reiserfs_get_acl(...) {</p>
    <p>... ... 1 acl = posix_acl_from_disk(...);</p>
    <p>}</p>
    <p>Error Code Example</p>
    <p>if (!IS_ERR(acl)) *p_acl = posix_acl_dup(acl);</p>
  </div>
  <div class="page">
    <p>XFS Ext4 Btrfs Ext3 Reiser JFS All</p>
    <p>Semantic</p>
    <p>Concurrency</p>
    <p>Memory</p>
    <p>Error Code</p>
    <p>Bug Pattern</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Q3: Do bugs diminish over time ?</p>
  </div>
  <div class="page">
    <p>Ext3 Bug Trend</p>
    <p>Linux Versions</p>
    <p>N u</p>
    <p>m b</p>
    <p>e r</p>
    <p>o f</p>
    <p>B u</p>
    <p>g s</p>
  </div>
  <div class="page">
    <p>Ext3 Bug Trend</p>
    <p>Linux Versions</p>
    <p>N u</p>
    <p>m b</p>
    <p>e r</p>
    <p>o f</p>
    <p>B u</p>
    <p>g s 2.6.10: block reservation 2.6.11: xttra in inode</p>
  </div>
  <div class="page">
    <p>Ext3 Bug Trend</p>
    <p>Linux Versions</p>
    <p>N u</p>
    <p>m b</p>
    <p>e r</p>
    <p>o f</p>
    <p>B u</p>
    <p>g s</p>
  </div>
  <div class="page">
    <p>Ext3 Bug Trend</p>
    <p>Linux Versions</p>
    <p>N u</p>
    <p>m b</p>
    <p>e r</p>
    <p>o f</p>
    <p>B u</p>
    <p>g s</p>
  </div>
  <div class="page">
    <p>Ext4</p>
    <p>N u m</p>
    <p>b e r</p>
    <p>o f</p>
    <p>B u g s</p>
    <p>Linux Version</p>
    <p>Bug Trend</p>
  </div>
  <div class="page">
    <p>Ext4</p>
    <p>N u m</p>
    <p>b e r</p>
    <p>o f</p>
    <p>B u g s</p>
    <p>Linux Version</p>
    <p>Bug Trend</p>
  </div>
  <div class="page">
    <p>Ext4</p>
    <p>N u m</p>
    <p>b e r</p>
    <p>o f</p>
    <p>B u g s</p>
    <p>Linux Version</p>
    <p>Bug Trend</p>
  </div>
  <div class="page">
    <p>Ext4</p>
    <p>N u m</p>
    <p>b e r</p>
    <p>o f</p>
    <p>B u g s</p>
    <p>Linux Version</p>
    <p>Bug Trend</p>
  </div>
  <div class="page">
    <p>Ext4</p>
    <p>N u m</p>
    <p>b e r</p>
    <p>o f</p>
    <p>B u g s</p>
    <p>Linux Version</p>
    <p>Semantic Concurrency Memory Error Code</p>
  </div>
  <div class="page">
    <p>Ext4</p>
    <p>N u m</p>
    <p>b e r</p>
    <p>o f</p>
    <p>B u g s</p>
    <p>Linux Version</p>
    <p>Semantic Concurrency Memory Error Code</p>
  </div>
  <div class="page">
    <p>Bug-fixing is a Constant in a file systems lifetime</p>
  </div>
  <div class="page">
    <p>Q4: What consequences do file-system bugs have ?</p>
  </div>
  <div class="page">
    <p>Bug Consequence</p>
  </div>
  <div class="page">
    <p>Type Description</p>
    <p>Corruption On-disk or in-memory data is corrupted</p>
    <p>Crash File system becomes unusable</p>
    <p>Error Unexpected operation failure or error code</p>
    <p>Deadlock Wait for resources in circular chain</p>
    <p>Hang File system makes no progress</p>
    <p>Leak Resources are not freed properly</p>
    <p>Wrong Diverts from expectation (exclude above)</p>
    <p>Bug Consequence</p>
  </div>
  <div class="page">
    <p>Bug Consequence</p>
    <p>XFS Ext4 Btrfs Ext3 Reiser JFS All</p>
    <p>Corruption</p>
  </div>
  <div class="page">
    <p>Bug Consequence</p>
    <p>XFS Ext4 Btrfs Ext3 Reiser JFS All</p>
    <p>Corruption</p>
    <p>Crash</p>
  </div>
  <div class="page">
    <p>Bug Consequence</p>
    <p>XFS Ext4 Btrfs Ext3 Reiser JFS All</p>
    <p>Corruption</p>
    <p>Crash</p>
    <p>Error</p>
  </div>
  <div class="page">
    <p>Bug Consequence</p>
    <p>XFS Ext4 Btrfs Ext3 Reiser JFS All</p>
    <p>Corruption</p>
    <p>Crash</p>
    <p>Error</p>
    <p>Deadlock</p>
  </div>
  <div class="page">
    <p>Bug Consequence</p>
    <p>XFS Ext4 Btrfs Ext3 Reiser JFS All</p>
    <p>Corruption</p>
    <p>Crash</p>
    <p>Error</p>
    <p>Deadlock</p>
    <p>Hang</p>
  </div>
  <div class="page">
    <p>Bug Consequence</p>
    <p>XFS Ext4 Btrfs Ext3 Reiser JFS All</p>
    <p>Corruption</p>
    <p>Crash</p>
    <p>Error</p>
    <p>Deadlock</p>
    <p>Hang</p>
    <p>Leak</p>
  </div>
  <div class="page">
    <p>Bug Consequence</p>
    <p>XFS Ext4 Btrfs Ext3 Reiser JFS All</p>
    <p>Corruption</p>
    <p>Crash</p>
    <p>Error</p>
    <p>Deadlock</p>
    <p>Hang</p>
    <p>Leak</p>
    <p>Wrong</p>
  </div>
  <div class="page">
    <p>Corruption and Crash are most common</p>
  </div>
  <div class="page">
    <p>Q5: Does each logical component have an</p>
    <p>equal degree of complexity ?</p>
  </div>
  <div class="page">
    <p>Components</p>
  </div>
  <div class="page">
    <p>Type Description</p>
    <p>balloc Data block allocation and deallocation dir Directory management</p>
    <p>extent Contiguous physical blocks mapping file File read and write operations</p>
    <p>inode Inode-related metadata management transaction Journaling or other transactional support</p>
    <p>super Superblock-related metadata management tree Generic tree structure procedures other Other supporting components (e.g., xattr)</p>
    <p>Components</p>
  </div>
  <div class="page">
    <p>Correlation</p>
    <p>P e rc</p>
    <p>e n ta</p>
    <p>g e o</p>
    <p>f B</p>
    <p>u g s</p>
    <p>Percentage of Code</p>
  </div>
  <div class="page">
    <p>P e rc</p>
    <p>e n ta</p>
    <p>g e o</p>
    <p>f B</p>
    <p>u g s</p>
    <p>Percentage of Code</p>
    <p>file inode super</p>
    <p>Correlation</p>
  </div>
  <div class="page">
    <p>P e rc</p>
    <p>e n ta</p>
    <p>g e o</p>
    <p>f B</p>
    <p>u g s</p>
    <p>Percentage of Code</p>
    <p>file inode super trans</p>
    <p>Correlation</p>
  </div>
  <div class="page">
    <p>P e rc</p>
    <p>e n ta</p>
    <p>g e o</p>
    <p>f B</p>
    <p>u g s</p>
    <p>Percentage of Code</p>
    <p>file inode super trans tree</p>
    <p>Correlation</p>
  </div>
  <div class="page">
    <p>P e rc</p>
    <p>e n ta</p>
    <p>g e o</p>
    <p>f B</p>
    <p>u g s</p>
    <p>Percentage of Code</p>
    <p>file balloc</p>
    <p>inode dir</p>
    <p>super extent</p>
    <p>trans other</p>
    <p>tree</p>
    <p>Correlation</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Metadata management has high bug density</p>
  </div>
  <div class="page">
    <p>Metadata management has high bug density</p>
    <p>Tree related code is not particularly error-prone</p>
  </div>
  <div class="page">
    <p>Q6: Do bugs occur at normal paths or</p>
    <p>failure paths ?</p>
  </div>
  <div class="page">
    <p>Failure Path</p>
  </div>
  <div class="page">
    <p>Failure Path</p>
    <p>A wide range of failures  resource allocation failure  I/O operation failure  silent data corruption  incorrect system states</p>
  </div>
  <div class="page">
    <p>Failure Path</p>
    <p>A wide range of failures  resource allocation failure  I/O operation failure  silent data corruption  incorrect system states</p>
    <p>Unique code style  goto statement  error code propagation</p>
  </div>
  <div class="page">
    <p>ext4/resize.c, 2.6.25 ext4_group_extend(  ) { ... ... 1 if (count != ext4_blocks_count(es)){ 2 ext4_warning(&quot;multiple resizers</p>
    <p>run on filesystem !&quot;);</p>
    <p>A Semantic Bug on Failure Path</p>
  </div>
  <div class="page">
    <p>ext4/resize.c, 2.6.25 ext4_group_extend(  ) { ... ... 1 if (count != ext4_blocks_count(es)){ 2 ext4_warning(&quot;multiple resizers</p>
    <p>run on filesystem !&quot;);</p>
    <p>A Semantic Bug on Failure Path</p>
  </div>
  <div class="page">
    <p>ext4/resize.c, 2.6.25 ext4_group_extend(  ) { ... ... 1 if (count != ext4_blocks_count(es)){ 2 ext4_warning(&quot;multiple resizers</p>
    <p>run on filesystem !&quot;);</p>
    <p>A Semantic Bug on Failure Path</p>
    <p>ext4_journal_stop(handle);</p>
  </div>
  <div class="page">
    <p>ext4/inode.c, 2.6.22 ext4_read_inode(struct inode * inode) {</p>
    <p>... ... 1 if (inode_is_bad) {</p>
    <p>A Memory Bug on Failure Path</p>
  </div>
  <div class="page">
    <p>ext4/inode.c, 2.6.22 ext4_read_inode(struct inode * inode) {</p>
    <p>... ... 1 if (inode_is_bad) {</p>
    <p>A Memory Bug on Failure Path</p>
  </div>
  <div class="page">
    <p>ext4/inode.c, 2.6.22 ext4_read_inode(struct inode * inode) {</p>
    <p>... ... 1 if (inode_is_bad) {</p>
    <p>A Memory Bug on Failure Path</p>
    <p>brelse(bh);</p>
  </div>
  <div class="page">
    <p>Bugs on Failure Paths</p>
    <p>XFS Ext4 Btrfs Ext3 Reiser JFS All</p>
    <p>Pe rc</p>
    <p>en ta</p>
    <p>ge o</p>
    <p>f to</p>
    <p>ta l b</p>
    <p>ug s</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Q7: What performance techniques are used by file systems ?</p>
  </div>
  <div class="page">
    <p>Performance</p>
  </div>
  <div class="page">
    <p>Type Description</p>
    <p>Synchronization Improve synchronization efficiency</p>
    <p>Access Optimization</p>
    <p>Apply smarter access strategies</p>
    <p>Scheduling Improve I/O operations scheduling</p>
    <p>Scalability Scale on-disk and in-memory structures</p>
    <p>Locality Overcome sub-optimal block allocation</p>
    <p>Other Other performance improvement (e.g., reducing function stack usage)</p>
    <p>Performance</p>
  </div>
  <div class="page">
    <p>ext4/extents.c, 2.6.31 ext4_fiemap(...){</p>
    <p>Synchronization Example</p>
  </div>
  <div class="page">
    <p>ext4/extents.c, 2.6.31 ext4_fiemap(...){</p>
    <p>Synchronization Example</p>
  </div>
  <div class="page">
    <p>ext4/extents.c, 2.6.31 ext4_fiemap(...){</p>
    <p>Synchronization Example</p>
    <p>down_read(&amp;EXT4_I(inode)-&gt;sem);</p>
    <p>up_read(&amp;EXT4_I(inode)-&gt;sem);</p>
  </div>
  <div class="page">
    <p>Performance</p>
    <p>XFS Ext4 Btrfs Ext3 Reiser JFS All</p>
    <p>Sync</p>
  </div>
  <div class="page">
    <p>btrfs/free-space-cache.c, 2.6.39 btrfs_find_space_cluster(  )</p>
    <p>/* start to search for blocks */</p>
    <p>Access Optimization Example</p>
  </div>
  <div class="page">
    <p>btrfs/free-space-cache.c, 2.6.39 btrfs_find_space_cluster(  )</p>
    <p>/* start to search for blocks */</p>
    <p>Access Optimization Example</p>
    <p>if (free_space &lt; min_bytes) { spin_unlock(&amp;tree_lock); return -ENOSPC; }</p>
  </div>
  <div class="page">
    <p>Performance</p>
    <p>XFS Ext4 Btrfs Ext3 Reiser JFS All</p>
    <p>Sync</p>
    <p>Access Opt</p>
  </div>
  <div class="page">
    <p>Performance</p>
    <p>XFS Ext4 Btrfs Ext3 Reiser JFS All</p>
    <p>Sync</p>
    <p>Access Opt</p>
    <p>Scheduling</p>
  </div>
  <div class="page">
    <p>Performance</p>
    <p>XFS Ext4 Btrfs Ext3 Reiser JFS All</p>
    <p>Sync</p>
    <p>Access Opt</p>
    <p>Scheduling</p>
    <p>Scalability</p>
  </div>
  <div class="page">
    <p>Performance</p>
    <p>XFS Ext4 Btrfs Ext3 Reiser JFS All</p>
    <p>Sync</p>
    <p>Access Opt</p>
    <p>Scheduling</p>
    <p>Scalability</p>
    <p>Locality</p>
  </div>
  <div class="page">
    <p>Performance</p>
    <p>XFS Ext4 Btrfs Ext3 Reiser JFS All</p>
    <p>Sync</p>
    <p>Access Opt</p>
    <p>Scheduling</p>
    <p>Scalability</p>
    <p>Locality</p>
    <p>Other</p>
  </div>
  <div class="page">
    <p>A wide variety of same performance techniques exist in all file systems</p>
  </div>
  <div class="page">
    <p>Results Summary</p>
  </div>
  <div class="page">
    <p>Bugs are prevalent</p>
    <p>Semantic bugs dominate</p>
    <p>Bugs are constant</p>
    <p>Corruption and crash are common</p>
    <p>Metadata management is complex</p>
    <p>Failure paths are error-prone</p>
    <p>Diverse performance techniques</p>
    <p>Results Summary</p>
  </div>
  <div class="page">
    <p>Lessons Learned</p>
  </div>
  <div class="page">
    <p>Lessons Learned</p>
    <p>A large-scale study is feasible and valuable  time consuming, but still manageable  similar study for other OS components  new research opportunities</p>
  </div>
  <div class="page">
    <p>Lessons Learned</p>
    <p>A large-scale study is feasible and valuable  time consuming, but still manageable  similar study for other OS components  new research opportunities</p>
    <p>Research should match reality  new tools for semantic bugs  more attention for failure paths</p>
  </div>
  <div class="page">
    <p>Lessons Learned</p>
    <p>A large-scale study is feasible and valuable  time consuming, but still manageable  similar study for other OS components  new research opportunities</p>
    <p>Research should match reality  new tools for semantic bugs  more attention for failure paths</p>
    <p>History repeats itself  similar mistakes  similar performance and reliability techniques  learn from history for a better future</p>
  </div>
  <div class="page">
    <p>Resources</p>
  </div>
  <div class="page">
    <p>Resources</p>
    <p>More information in paper  detailed bug patterns  reliability patches  common patches across file systems</p>
  </div>
  <div class="page">
    <p>Resources</p>
    <p>More information in paper  detailed bug patterns  reliability patches  common patches across file systems</p>
    <p>Even more information in dataset  fix-on-fix  detailed bug consequences  tools used</p>
  </div>
  <div class="page">
    <p>Resources</p>
    <p>More information in paper  detailed bug patterns  reliability patches  common patches across file systems</p>
    <p>Even more information in dataset  fix-on-fix  detailed bug consequences  tools used</p>
    <p>Our dataset is released  http://research.cs.wisc.edu/wind/Traces/fs-patch/</p>
  </div>
</Presentation>
