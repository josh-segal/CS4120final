<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>DROWN - Breaking TLS using SSLv2</p>
    <p>Nimrod Aviram, Sebastian Schinzel, Juraj Somorovsky, Nadia Heninger, Maik Dankel, Jens Steube, Luke Valenta, David</p>
    <p>Adrian, J. Alex Halderman, Viktor Dukhovni, Emilia Ksper, Shaanan Cohney, Susanne Engels, Christof Paar, Yuval Shavitt</p>
  </div>
  <div class="page">
    <p>A history of obsolete crypto  SSLv2 published in 1995, immediately broken</p>
    <p>Devastating MitM attacks  Common wisdom: SSLv2 is better than plaintext</p>
    <p>Before DROWN: OK to keep SSLv2 enabled, esp. for email.</p>
  </div>
  <div class="page">
    <p>Our results: SSLv2 breaks TLS</p>
  </div>
  <div class="page">
    <p>DROWN - Overview  Attacker decrypts intercepted TLS traffic</p>
    <p>Cross-protocol attack</p>
    <p>Attack TLS server using SSLv2 server</p>
    <p>Attack HTTPS server using email server - SSLv2 much more prevalent on email ports</p>
    <p>22% of trusted HTTPS hosts vulnerable with cross-protocol use</p>
  </div>
  <div class="page">
    <p>TLS RSA Handshake</p>
  </div>
  <div class="page">
    <p>PKCS #1 v1.5</p>
    <p>Textbook RSA: ke mod N  Problem: No randomization</p>
    <p>In real-life:  PKCS #1 v1.5: pad k to length of N with random padding</p>
  </div>
  <div class="page">
    <p>Bleichenbachers Attack  If padding is incorrect after</p>
    <p>decryption, then  Send an error message  Attacker can deduce if</p>
    <p>padding was correct.  Conclusion: The server has</p>
    <p>to behave as if the padding was valid!</p>
  </div>
  <div class="page">
    <p>Bleichenbachers Attack  If padding is incorrect after</p>
    <p>decryption, then The server has to behave as if the padding was valid!</p>
    <p>Solution: Server generates a random replacement plaintext, continues as usual.</p>
  </div>
  <div class="page">
    <p>Differences between SSLv2 and TLS</p>
    <p>Server authenticates first (sends first message encrypted with symmetric key)</p>
    <p>Short secrets for export grade crypto:</p>
    <p>SSLv2: 40 bit key.  TLS: 48 byte (384 bit) key.</p>
  </div>
  <div class="page">
    <p>An important observation  Attacker connects twice</p>
    <p>with same RSA ciphertext.</p>
    <p>Ciphertext valid:  2 server replies</p>
    <p>encrypted with same key.</p>
  </div>
  <div class="page">
    <p>An important observation  Attacker connects twice</p>
    <p>with same RSA ciphertext.</p>
    <p>Ciphertext not valid:  2 server replies</p>
    <p>encrypted with different keys.</p>
  </div>
  <div class="page">
    <p>The SSLv2 RSA Decryption Oracle  Attacker breaks 40 bit key</p>
    <p>for both messages.  Ciphertext valid:</p>
    <p>Both keys will be the unpadded RSA plaintext -&gt; keys will be identical.</p>
  </div>
  <div class="page">
    <p>The SSLv2 RSA Decryption Oracle  Attacker breaks 40 bit key</p>
    <p>for both messages.  If ciphertext is invalid:</p>
    <p>Both keys will be randomly generated -&gt; keys will be different.</p>
    <p>Reminder: If attacker can distinguish between valid/invalid RSA message, attacker can decrypt TLS!</p>
  </div>
  <div class="page">
    <p>DROWN: Attack Outline</p>
    <p>Attacker records ~1,000 modern TLS connections.</p>
    <p>Attacker morphs TLS RSA ciphertext to SSLv2 ciphertext</p>
    <p>Uses SSLv2 Bleichenbacher oracle to decrypt.</p>
    <p>Client never makes an SSLv2 connection.</p>
  </div>
  <div class="page">
    <p>Offline work  Attacker executes ~10K queries, breaks 40-bit key for each</p>
    <p>Bleichenbacher query.  250 keys tested overall.</p>
    <p>Feasible on modern hardware:  Naive CPU implementation: $21K of CPU, 114 days.</p>
    <p>Highly optimized GPU implementation:  $18K of GPUs, 18 hours, or $440 on AWS, 8 hours.</p>
    <p>Special DROWN: Implementation vulnerability in OpenSSL  22% of trusted HTTPS servers are vulnerable  Negligible computation, see paper</p>
  </div>
  <div class="page">
    <p>Key reuse</p>
    <p>Attack HTTPS server using email server</p>
    <p>Widespread key reuse:</p>
    <p>No protocol version in certificates</p>
    <p>Certificates cost money (EV)</p>
  </div>
  <div class="page">
    <p>Impact of Key Reuse</p>
  </div>
  <div class="page">
    <p>Takeaways  Export crypto weakens modern protocols</p>
    <p>Export RSA (FREAK), DH (Logjam), symmetric crypto (DROWN)</p>
    <p>More weakened crypto seems ill-advised.  Should remove obsolete crypto.</p>
    <p>Long history of attacks: POODLE, Fake CA, RC4, FREAK, Logjam, Lucky 13, Sloth, ...</p>
    <p>Is DROWN the last?  Mac-then-Encrypt, SHA-1, ...?</p>
  </div>
  <div class="page">
    <p>Thank you! drownattack.com</p>
    <p>Nimrod Aviram, Sebastian Schinzel, Juraj Somorovsky, Nadia Heninger, Maik Dankel, Jens Steube, Luke Valenta, David</p>
    <p>Adrian, J. Alex Halderman, Viktor Dukhovni, Emilia Ksper, Shaanan Cohney, Susanne Engels, Christof Paar, Yuval Shavitt</p>
  </div>
  <div class="page">
    <p>Special DROWN  Implementation vulnerability in OpenSSL</p>
    <p>because of added complexity from export ciphers.  Present in 22% of trusted HTTPS.  No symmetric key brute-forcing, negligible computation.</p>
    <p>Runs in a minute on a laptop.  Allows MitM attack against DH TLS:</p>
    <p>Downgrade the key exchange to RSA, use special DROWN to decrypt RSA ciphertext online.</p>
  </div>
  <div class="page">
    <p>QUIC  Experimental TLS-like protocol by Google.  0-RTT  Server signs a static config block, containing DH parameters,</p>
    <p>supported ciphersuites etc.  If the client knows nothing, it prompts for the config block.  Otherwise, it calculates shared keys and starts talking.  Server indicates QUIC support, client will henceforth connect</p>
    <p>with QUIC  Can indicate support over plaintext.</p>
  </div>
  <div class="page">
    <p>QUIC MitM Attack  Static signatures -&gt; Forge a signature once, use it forever.  Discovery over plaintext -&gt; Server doesnt even support QUIC,</p>
    <p>attacker fakes support over plaintext.  Google plans to fix both these issues.  Attack cost with general DROWN: ~$10M.  Attack cost with special DROWN: 225 SSLv2 connections, no</p>
    <p>large computation.</p>
  </div>
</Presentation>
