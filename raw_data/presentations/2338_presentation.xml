<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Erasure Coding &amp; Read/Write Separation in Flash Storage</p>
    <p>Dimitris Skourtis, Dimitris Achlioptas, Noah Watkins, Carlos Maltzahn, Scott Brandt</p>
    <p>! University of California, Santa Cruz</p>
    <p>INFLOW14</p>
  </div>
  <div class="page">
    <p>Outline  Background</p>
    <p>Performance (un)predictability in SSDs</p>
    <p>Making SSD storage predictable with Rails</p>
    <p>Erasure Coding and Rails</p>
    <p>Coding performance</p>
    <p>Throughput and scaling</p>
    <p>Evaluation</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>SSD Performance Unpredictability</p>
  </div>
  <div class="page">
    <p>Reads are perfect</p>
  </div>
  <div class="page">
    <p>Writes are unpredictable</p>
  </div>
  <div class="page">
    <p>Physical read/write separation with Rails</p>
  </div>
  <div class="page">
    <p>Basic 2 drive design</p>
    <p>SSD 1 Read mode</p>
    <p>Writes from previous period</p>
    <p>WritesReads</p>
    <p>Cache</p>
    <p>SSD 2 Write mode</p>
    <p>Writes of current period</p>
    <p>Drives stay in sync (periodically)</p>
  </div>
  <div class="page">
    <p>Design properties  Consistency</p>
    <p>Heterogeneity</p>
    <p>Power failure</p>
    <p>Twice the cost?</p>
    <p>SSD 1 Read mode</p>
    <p>Writes from previous period</p>
    <p>WritesReads</p>
    <p>Cache</p>
    <p>SSD 2 Write mode</p>
    <p>Writes of current period</p>
    <p>Cache + SSD 1 = Cache + SSD 2</p>
  </div>
  <div class="page">
    <p>Design generalization</p>
    <p>W W WW</p>
    <p>Readers</p>
    <p>W WWW</p>
    <p>R R R</p>
    <p>Frame i</p>
    <p>Frame i+1</p>
    <p>R</p>
    <p>Readers</p>
    <p>R R R R</p>
    <p>Large storage arrays and distributed storage already employ redundancy (replication or erasure coding)</p>
  </div>
  <div class="page">
    <p>An object is spread among nodes depending on the redundancy</p>
    <p>Reading nodes accumulate writes in RAM</p>
    <p>Controller</p>
    <p>Readers window</p>
    <p>DriveDriveDrive Drive</p>
    <p>O(1) O(2) O(3) O(4) O(5) O(6)</p>
    <p>Drive Drive</p>
    <p>Object O (write)</p>
    <p>Flash</p>
    <p>RAM</p>
    <p>Node 1  Node 6</p>
  </div>
  <div class="page">
    <p>Flushing writes</p>
    <p>Readers window</p>
    <p>Dk (6)</p>
    <p>Time frame k = i + 1</p>
    <p>Time frame i</p>
    <p>DriveDriveDriveDrive DriveDrive</p>
    <p>Di...k (5)Di-1k</p>
    <p>(1) Di...k (2) Di-2k</p>
    <p>(3) Di-1k (4)</p>
    <p>DriveDriveDrive Drive</p>
    <p>Di-4i (1) Di-3i</p>
    <p>(2) Di-2...i (3) Di-1i</p>
    <p>(4) Di (5) Di</p>
    <p>(6)</p>
    <p>Drive Drive Flash</p>
    <p>RAM</p>
    <p>Flash</p>
    <p>RAM</p>
    <p>Write nodes flush data to drives</p>
    <p>Di-4,i-3,i-2(1) flushed during</p>
    <p>frame i</p>
  </div>
  <div class="page">
    <p>Rails &amp; Erasure Coding</p>
  </div>
  <div class="page">
    <p>Rails &amp; erasure coding  Avoid storage space overhead of replication</p>
    <p>Perform reads through reconstruction (decoding)</p>
    <p>Utilizes current set of drives dedicated to reading</p>
    <p>Pay in computational cost</p>
    <p>Scale by constructing redundancy groups</p>
    <p>Computational cost scalable</p>
    <p>Maintain read/write separation</p>
  </div>
  <div class="page">
    <p>Erasure coding  Write object of size 100MB</p>
    <p>Obfuscate (encode) to 120MB</p>
    <p>Split into 12 chunks of 10MB each</p>
    <p>Distribute across 12 drives</p>
    <p>Any 10 drives/chunks may be used to read the original object</p>
  </div>
  <div class="page">
    <p>Decoding throughput</p>
    <p>k</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (M</p>
    <p>B /s</p>
    <p>) Decoding throughput [k = m, k chunks unavailable]</p>
  </div>
  <div class="page">
    <p>Throughput in #threads</p>
    <p>#Threads</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (M</p>
    <p>B /s</p>
    <p>) Decoding throughput [ k = m, k chunks unavailable ]</p>
    <p>k = 2 k = 4 k = 6 k = 8 k = 10 k = 20</p>
  </div>
  <div class="page">
    <p>Read throughput</p>
    <p>k</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (M</p>
    <p>B /s</p>
    <p>) Read throughput without/with decoding [k=m, k drives unavailable]</p>
    <p>Without decoding With decoding</p>
  </div>
  <div class="page">
    <p>Redundancy groups with R/W separation</p>
    <p>r</p>
    <p>b</p>
    <p>g b</p>
    <p>r g</p>
    <p>g</p>
    <p>Group 1</p>
    <p>Group 2</p>
    <p>Group 3</p>
    <p>Group 4</p>
    <p>Hypergraph with four overlapping hyperedges (redundancy groups), each containing three vertices (drives)</p>
  </div>
  <div class="page">
    <p>Generating redundancy groups for R/W separation</p>
    <p>W R</p>
    <p>R</p>
    <p>R</p>
    <p>W</p>
    <p>W</p>
    <p>Physical drives</p>
    <p>Pi = drives of color Ci</p>
  </div>
  <div class="page">
    <p>Write throughput bound</p>
  </div>
  <div class="page">
    <p>Performance of eRails (erasure coding, 6 drives)</p>
    <p>Time (seconds)</p>
    <p>IO P</p>
    <p>S</p>
    <p>IOPS (128KB, k = m = 3)</p>
    <p>Random read Random write</p>
    <p>Time (seconds)</p>
    <p>IO P</p>
    <p>S</p>
    <p>IOPS (128KB, k = m = 3)</p>
    <p>Random read Random write</p>
    <p>Reads complete</p>
    <p>Without eRails With eRails 21</p>
  </div>
  <div class="page">
    <p>Time (seconds)</p>
    <p>IO P</p>
    <p>S</p>
    <p>IOPS (128KB, k = m = 5)</p>
    <p>Random read Random write</p>
    <p>Time (seconds)</p>
    <p>IO P</p>
    <p>S</p>
    <p>IOPS (128KB, k = m = 5)</p>
    <p>Random read Random write</p>
    <p>Reads complete</p>
    <p>Performance of eRails (erasure coding,10 drives)</p>
    <p>Without eRails With eRails 22</p>
  </div>
  <div class="page">
    <p>Summary  Erasure coding</p>
    <p>Space-efficient redundancy method for Rails</p>
    <p>Computational cost</p>
    <p>Increase to the array size</p>
    <p>After certain #drives (e.g., more than 10) throughput decreases</p>
    <p>Achieve scaling</p>
    <p>Generate overlapping redundancy groups</p>
    <p>Leads to proportional increase of computational cost</p>
  </div>
</Presentation>
