<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>2009 IBM Corporation</p>
    <p>Enterprise Information Extraction</p>
    <p>SIGMOD 2010 Tutorial</p>
    <p>Frederick Reiss, Yunyao Li, Laura Chiticariu, and Sriram Raghavan</p>
    <p>IBM Almaden Research Center</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation2</p>
    <p>Who we are</p>
    <p>Researchers from the Search and Analytics group</p>
    <p>at IBM Almaden Research Center</p>
    <p>Frederick Reiss</p>
    <p>Yunyao Li</p>
    <p>Laura Chiticariu</p>
    <p>Sriram Raghavan (virtual)</p>
    <p>Working on information extraction since 2006-08</p>
    <p>SystemT project</p>
    <p>Code shipping with 8 IBM products</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation3</p>
    <p>Road Map</p>
    <p>What is Information Extraction? (Fred Reiss)</p>
    <p>Declarative Information Extraction (Fred Reiss)</p>
    <p>What the Declarative Approach Enables</p>
    <p>Scalable Infrastructure (Yunyao Li)</p>
    <p>Development Support (Laura Chiticariu)</p>
    <p>Conclusion / Q&amp;A (Fred Reiss)</p>
    <p>Yo u a re he re</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation4</p>
    <p>Obligatory What is Information Extraction? Slide</p>
    <p>Distill structured data from unstructured and semi-structured text</p>
    <p>Exploit the extracted data in your applications</p>
    <p>For years, Microsoft</p>
    <p>Corporation CEO Bill Gates</p>
    <p>was against open source. But</p>
    <p>today he appears to have</p>
    <p>changed his mind. &quot;We can be</p>
    <p>open source. We love the</p>
    <p>concept of shared source,&quot;</p>
    <p>said Bill Veghte, a Microsoft</p>
    <p>VP. &quot;That's a super-important</p>
    <p>shift for us in terms of code</p>
    <p>access.</p>
    <p>Richard Stallman, founder of</p>
    <p>the Free Software Foundation,</p>
    <p>countered saying</p>
    <p>Name Title Organization</p>
    <p>Bill Gates CEO Microsoft</p>
    <p>Bill Veghte VP Microsoft</p>
    <p>Richard Stallman Founder Free Soft..</p>
    <p>(from Cohens IE tutorial, 2003)</p>
    <p>AnnotationsAnnotations</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation5</p>
    <p>SIGMOD 2006 Tutorial [Doan06] in One Slide</p>
    <p>Information extraction has been an area of study in Natural</p>
    <p>Language Processing and AI for years</p>
    <p>Core ideas from database research not a part of existing</p>
    <p>work in this area</p>
    <p>Declarative languages</p>
    <p>Well-defined semantics</p>
    <p>Cost-based optimization</p>
    <p>The challenge: Can we build a System R for information</p>
    <p>extraction?</p>
    <p>Survey of early-stage projects attacking this problem</p>
    <p>Bibliography at the end of</p>
    <p>the slide deck.</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation6</p>
    <p>Whats new?</p>
    <p>New enterprise-focused applications</p>
    <p>driving new requirements</p>
    <p>leading to declarative approaches</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation7</p>
    <p>Enterprise Applications of Information Extraction</p>
    <p>Previous tutorial showed research prototypes</p>
    <p>Avatar: Semantic search on personal emails</p>
    <p>DBLife: Use IE to build a knowledge base about database researchers</p>
    <p>AliBaba: IE over medical research papers</p>
    <p>Since then, IE has gone mainstream</p>
    <p>Enterprise Semantic Search</p>
    <p>Enterprise Data as a Service</p>
    <p>Business Intelligence</p>
    <p>Data-driven Enterprise Mashups</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation8</p>
    <p>Enterprise Semantic Search</p>
    <p>Use information extraction to improve accuracy and</p>
    <p>presentation of search results</p>
    <p>Gumshoe (IBM)</p>
    <p>[Zhu07,Li06]</p>
    <p>Extract acronyms</p>
    <p>and their meanings</p>
    <p>Extract geographical</p>
    <p>information</p>
    <p>Identify pages</p>
    <p>in different parts</p>
    <p>of the intranet</p>
    <p>that are about</p>
    <p>the same topic</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation9</p>
    <p>Enterprise Data as a Service</p>
    <p>Extract and clean useful information hidden in publicly available documents</p>
    <p>Rent the extracted information over the Internet</p>
    <p>DBLife [1]</p>
    <p>Midas (IBM)</p>
    <p>(Demo today!)</p>
    <p>...&lt;issuer&gt; &lt;issuerCik&gt;0000070858&lt;/issuerCik&gt; &lt;issuerName&gt;BANK OF AMERICA CORP /DE/&lt;/issuerName&gt; &lt;issuerTradingSymbol&gt;BAC&lt;/issuerTradingSymbol&gt;</p>
    <p>&lt;/issuer&gt; &lt;reportingOwner&gt; &lt;reportingOwnerId&gt; &lt;rptOwnerCik&gt;0001090355&lt;/rptOwnerCik&gt; &lt;rptOwnerName&gt;THAIN JOHN A&lt;/rptOwnerName&gt; &lt;/reportingOwnerId&gt; &lt;reportingOwnerAddress&gt; &lt;rptOwnerStreet1&gt;C/O GOLDMAN SACHS GROUP&lt;/rptOwnerStreet1&gt; &lt;rptOwnerStreet2&gt;85 BROAD STREET&lt;/rptOwnerStreet2&gt; &lt;rptOwnerCity&gt;NEW YORK&lt;/rptOwnerCity&gt; ... &lt;/reportingOwnerAddress&gt; &lt;reportingOwnerRelationship&gt; &lt;isOfficer&gt;1&lt;/isOfficer&gt; &lt;officerTitle&gt;Pres Glbl Bkg Sec &amp;amp; Wlth Mgmt&lt;/officerTitle&gt; &lt;/reportingOwnerRelationship&gt; &lt;/reportingOwner&gt; ...</p>
    <p>...&lt;issuer&gt; &lt;issuerCik&gt;0000070858&lt;/issuerCik&gt; &lt;issuerName&gt;BANK OF AMERICA CORP /DE/&lt;/issuerName&gt; &lt;issuerTradingSymbol&gt;BAC&lt;/issuerTradingSymbol&gt;</p>
    <p>&lt;/issuer&gt; &lt;reportingOwner&gt; &lt;reportingOwnerId&gt; &lt;rptOwnerCik&gt;0001090355&lt;/rptOwnerCik&gt; &lt;rptOwnerName&gt;THAIN JOHN A&lt;/rptOwnerName&gt; &lt;/reportingOwnerId&gt; &lt;reportingOwnerAddress&gt; &lt;rptOwnerStreet1&gt;C/O GOLDMAN SACHS GROUP&lt;/rptOwnerStreet1&gt; &lt;rptOwnerStreet2&gt;85 BROAD STREET&lt;/rptOwnerStreet2&gt; &lt;rptOwnerCity&gt;NEW YORK&lt;/rptOwnerCity&gt; ... &lt;/reportingOwnerAddress&gt; &lt;reportingOwnerRelationship&gt; &lt;isOfficer&gt;1&lt;/isOfficer&gt; &lt;officerTitle&gt;Pres Glbl Bkg Sec &amp;amp; Wlth Mgmt&lt;/officerTitle&gt; &lt;/reportingOwnerRelationship&gt; &lt;/reportingOwner&gt; ...</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation10</p>
    <p>Business Intelligence</p>
    <p>Information</p>
    <p>Extraction</p>
    <p>Data</p>
    <p>Warehouse</p>
    <p>Traditional</p>
    <p>BI Tools</p>
    <p>New</p>
    <p>BI Tools</p>
    <p>P u b li c D a ta</p>
    <p>E n te rp ri s e D a ta</p>
    <p>Social networks</p>
    <p>Blogs</p>
    <p>Government data</p>
    <p>Emails</p>
    <p>Call center records</p>
    <p>Legacy data</p>
    <p>Important applications</p>
    <p>Marketing: Customer sentiment, brand management</p>
    <p>Legal: Electronic legal discovery, identifying product pipeline problems</p>
    <p>Strategy: Important economic events, monitoring competitors</p>
    <p>Important applications</p>
    <p>Marketing: Customer sentiment, brand management</p>
    <p>Legal: Electronic legal discovery, identifying product pipeline problems</p>
    <p>Strategy: Important economic events, monitoring competitors</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation11</p>
    <p>Business Intelligence</p>
    <p>Information</p>
    <p>Extraction</p>
    <p>Data</p>
    <p>Warehouse</p>
    <p>Traditional</p>
    <p>BI Tools</p>
    <p>New</p>
    <p>BI Tools</p>
    <p>P u b li c D a ta</p>
    <p>E n te rp ri s e D a ta</p>
    <p>Social networks</p>
    <p>Blogs</p>
    <p>Government data</p>
    <p>Emails</p>
    <p>Call center records</p>
    <p>Legacy data</p>
    <p>Important applications</p>
    <p>Marketing: Customer sentiment, brand management</p>
    <p>Legal: Electronic legal discovery, identifying product pipeline problems</p>
    <p>Strategy: Important economic events, monitoring competitors</p>
    <p>Important applications</p>
    <p>Marketing: Customer sentiment, brand management</p>
    <p>Legal: Electronic legal discovery, identifying product pipeline problems</p>
    <p>Strategy: Important economic events, monitoring competitors</p>
    <p>IBM eDiscovery Analyzer</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation12</p>
    <p>Data-Driven Mashups</p>
    <p>Extract structured</p>
    <p>information from</p>
    <p>unstructured feeds</p>
    <p>Join extracted information</p>
    <p>with other structured</p>
    <p>enterprise data</p>
    <p>IBM Lotus Notes</p>
    <p>Live Text</p>
    <p>IBM InfoSphere MashupHub</p>
    <p>[Simmen09]</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation13</p>
    <p>Enterprise Information Extraction</p>
    <p>IE has become increasingly important to emerging enterprise applications</p>
    <p>Set of requirements driven by enterprise apps that use information extraction</p>
    <p>Scalability</p>
    <p>Large data volumes, often orders of magnitude larger than classical NLP corpora</p>
    <p>Accuracy</p>
    <p>Garbage-in garbage-out: Usefulness of application is often tied to quality of extraction</p>
    <p>Usability</p>
    <p>Building an accurate IE system is labor-intensive</p>
    <p>Professional programmers are much more expensive than grad students!</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation14</p>
    <p>A Canonical IE System</p>
    <p>Feature</p>
    <p>Selection</p>
    <p>Entity</p>
    <p>Identification</p>
    <p>Entity</p>
    <p>Resolution</p>
    <p>Text Features Entities and</p>
    <p>Relationships</p>
    <p>Structured</p>
    <p>Information</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation15</p>
    <p>A Canonical IE System</p>
    <p>Boundaries between these stages are not clear-cut</p>
    <p>This diagram shows a simplified logical data flow</p>
    <p>Traditionally, physical data flow the same as logical</p>
    <p>But the systems well talk about take a very different</p>
    <p>approach to the actual order of execution</p>
    <p>Feature</p>
    <p>Selection</p>
    <p>Entity</p>
    <p>Identification</p>
    <p>Entity</p>
    <p>Resolution</p>
    <p>Text Features Entities and</p>
    <p>Relationships</p>
    <p>Structured</p>
    <p>Information</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation16</p>
    <p>Feature Selection</p>
    <p>Identify features</p>
    <p>Very simple, atomic entities</p>
    <p>Inputs for other stages</p>
    <p>Examples of features</p>
    <p>Dictionary match</p>
    <p>Regular expression match</p>
    <p>Part of speech</p>
    <p>Typical components used</p>
    <p>Off-the-shelf morphology package</p>
    <p>Many simple rules</p>
    <p>Very time-consuming and underappreciated</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation17</p>
    <p>Entity Identification</p>
    <p>Use basic features to build more complex features</p>
    <p>Example:</p>
    <p>Use other features to determine which of the complex</p>
    <p>features are instances of entities and relationships</p>
    <p>Most information extraction research focuses on this stage</p>
    <p>Variety of different techniques</p>
    <p>was done by Mr. Jack Gurbingal at the</p>
    <p>Dictionary match:</p>
    <p>Common first name</p>
    <p>Regular expr match:</p>
    <p>Capitalized word</p>
    <p>Complex feature:</p>
    <p>Potential person name+ =</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation18</p>
    <p>Entity Resolution</p>
    <p>Perform complex analyses over entities and</p>
    <p>relationships</p>
    <p>Examples</p>
    <p>Identify entities that refer to the same person or thing</p>
    <p>Join extracted information with external structured data</p>
    <p>Not the main focus of this tutorial</p>
    <p>But interacts with other parts of information extraction</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation19</p>
    <p>Obligatory Person-Phone Example</p>
    <p>Call John Merker at 555-1212.</p>
    <p>John also has a cell #: 555-1234</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation20</p>
    <p>Person-Phone Example: Input</p>
    <p>Call John Merker at 555-1212.</p>
    <p>John also has a cell #: 555-1234</p>
    <p>Feature</p>
    <p>Selection</p>
    <p>Entity</p>
    <p>Identification</p>
    <p>Entity</p>
    <p>Resolution</p>
    <p>Text Features Entities,</p>
    <p>Rels.</p>
    <p>Structured</p>
    <p>Information</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation21</p>
    <p>Person-Phone Example: Features</p>
    <p>Call John Merker at 555-1212.</p>
    <p>John also has a cell #: 555-1234</p>
    <p>Feature</p>
    <p>Selection</p>
    <p>Entity</p>
    <p>Identification</p>
    <p>Entity</p>
    <p>Resolution</p>
    <p>Text Features Entities,</p>
    <p>Rels.</p>
    <p>Structured</p>
    <p>Information</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation22</p>
    <p>.</p>
    <p>Entity</p>
    <p>Identification</p>
    <p>Person-Phone Example: Entities and Relationships</p>
    <p>Call John Merker at 555-1212.</p>
    <p>John also has a cell #: 555-1234</p>
    <p>Person</p>
    <p>Feature</p>
    <p>Selection</p>
    <p>Entity</p>
    <p>Identification</p>
    <p>Entity</p>
    <p>Resolution</p>
    <p>Text Features Entities,</p>
    <p>Rels.</p>
    <p>Structured</p>
    <p>Information</p>
    <p>Phone</p>
    <p>PhonePerson NumType</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation23</p>
    <p>Person-Phone Example: Entities and Relationships</p>
    <p>Call John Merker at 555-1212.</p>
    <p>John also has a cell #: 555-1234</p>
    <p>Person</p>
    <p>Feature</p>
    <p>Selection</p>
    <p>Entity</p>
    <p>Identification</p>
    <p>Entity</p>
    <p>Resolution</p>
    <p>Text Features Entities,</p>
    <p>Rels.</p>
    <p>Structured</p>
    <p>Information</p>
    <p>Phone</p>
    <p>PhonePerson NumType</p>
    <p>Same</p>
    <p>Person</p>
    <p>Same</p>
    <p>Person</p>
    <p>Join with</p>
    <p>office phone</p>
    <p>directory</p>
    <p>Join with</p>
    <p>office phone</p>
    <p>directory</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation24</p>
    <p>Road Map</p>
    <p>What is Information Extraction?</p>
    <p>Declarative Information Extraction</p>
    <p>What the Declarative Approach Enables</p>
    <p>Scalable Infrastructure (Yunyao Li)</p>
    <p>Development Support (Laura Chiticariu)</p>
    <p>Conclusion / Q&amp;A (Fred Reiss)</p>
    <p>Yo u a re he re</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation25</p>
    <p>Declarative Information Extraction</p>
    <p>Overview of traditional approaches to information</p>
    <p>extraction</p>
    <p>Practical issues with applying traditional</p>
    <p>approaches</p>
    <p>How recent work has used declarative approaches</p>
    <p>to address these issues</p>
    <p>Different types of declarative approaches</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation26</p>
    <p>Traditional Approaches to Information Extraction</p>
    <p>Two dominant types:</p>
    <p>Rule-Based</p>
    <p>Machine Learning-Based</p>
    <p>Distinction is based on how Entity Identification is</p>
    <p>performed</p>
    <p>Feature</p>
    <p>Selection</p>
    <p>Entity</p>
    <p>Identification</p>
    <p>Entity</p>
    <p>Resolution</p>
    <p>Text Features Entities and</p>
    <p>Relationships</p>
    <p>Structured</p>
    <p>Information</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation27</p>
    <p>Anatomy of a Rule-Based System</p>
    <p>Feature</p>
    <p>Selection</p>
    <p>Entity</p>
    <p>Identification</p>
    <p>Entity</p>
    <p>Resolution</p>
    <p>Text Features Entities,</p>
    <p>Rels.</p>
    <p>Structured</p>
    <p>Information</p>
    <p>Example</p>
    <p>Documents</p>
    <p>Feature</p>
    <p>Selection</p>
    <p>Rules</p>
    <p>Entity</p>
    <p>Identification</p>
    <p>Rules</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation28</p>
    <p>Anatomy of a Machine Learning-Based System</p>
    <p>Example</p>
    <p>Documents</p>
    <p>Feature</p>
    <p>Selection</p>
    <p>Rules</p>
    <p>Feature</p>
    <p>Selection</p>
    <p>Labeled</p>
    <p>Documents Features</p>
    <p>and</p>
    <p>Labels</p>
    <p>Training</p>
    <p>Model</p>
    <p>Feature</p>
    <p>Selection</p>
    <p>Entity</p>
    <p>Identification</p>
    <p>Entity</p>
    <p>Resolution</p>
    <p>Text Features Entities,</p>
    <p>Rels.</p>
    <p>Structured</p>
    <p>Information</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation29</p>
    <p>A Brief History of IE in the NLP Community</p>
    <p>1978-1997: MUC (Message Understanding Conference)  DARPA competition 1987 to 1997</p>
    <p>FRUMP [DeJong82]</p>
    <p>FASTUS [Appelt93],</p>
    <p>TextPro, PROTEUS</p>
    <p>1998: Common Pattern Specification Language (CPSL) standard [Appelt98]</p>
    <p>Standard for subsequent rulebased systems</p>
    <p>1999-2010: Commercial products, GATE</p>
    <p>At first: Simple techniques like Naive Bayes</p>
    <p>1990s: Learning Rules</p>
    <p>AUTOSLOG [Riloff93]</p>
    <p>CRYSTAL [Soderland98]</p>
    <p>SRV [Freitag98]</p>
    <p>2000s: More specialized models</p>
    <p>Hidden Markov Models [Leek97]</p>
    <p>Maximum Entropy Markov Models [McCallum00]</p>
    <p>Conditional Random Fields [Lafferty01]</p>
    <p>Automatic feature expansion</p>
    <p>Rule-Based Machine Learning</p>
    <p>For further reading:</p>
    <p>Sunita Sarawagis Survey [Sarawagi08], Claire Cardies Survey [Cardie97]</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation30</p>
    <p>Tying the System Together: Traditional IE Frameworks</p>
    <p>Traditional approach:</p>
    <p>Workflow system</p>
    <p>Sequence of discrete steps</p>
    <p>Data only flows forward</p>
    <p>GATE1 and UIMA2 are the most</p>
    <p>popular frameworks</p>
    <p>Type systems and standard</p>
    <p>data formats</p>
    <p>Web services and Hadoop also</p>
    <p>in common use</p>
    <p>No standard data format</p>
    <p>Workflow for the ANNIE system [Cunningham09]</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation31</p>
    <p>Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Proin</p>
    <p>enina i facilisis, &lt;Person&gt; at &lt;Digits&gt;-&lt;Digits&gt; arcu tincidunt</p>
    <p>orci. Pellentesque justo tellus , scelerisque quis, facilisis nunc</p>
    <p>volutpat enim, quis viverra lacus nulla sit amet lectus. Nulla</p>
    <p>Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Proin elementum neque at justo. Aliquam erat volutpat. Curabitur a massa. Vivamus</p>
    <p>luctus, risus in sagittis facilisis arcu augue velit, &lt;FirstName&gt; &lt;CapsWord&gt; at &lt;Digits&gt;-&lt;Digits&gt;. hendrerit faucibus pede mi ipsum.</p>
    <p>Curabitur cursus tincidunt orci. Pellentesque justo tellus , scelerisque quis, facilisis quis, interdum non, ante. Suspendisse feugiat, erat in</p>
    <p>feugiat tincidunt, est nunc volutpat enim, quis viverra lacus nulla sit amet lectus. Nulla odio lorem, feugiat et, volutpat dapibus, ultrices sit</p>
    <p>amet, sem. Vestibulum quis dui vitae massa euismod faucibus. Pellentesque id neque id tellus hendrerit tincidunt. Etiam augue. Class aptent</p>
    <p>Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Proin elementum neque at justo. Aliquam erat volutpat. Curabitur a massa. Vivamus</p>
    <p>luctus, risus in e sagittis facilisis, arcu augue rutrum velit, sed &lt;PersonPhone&gt;, hendrerit faucibus pede mi sed ipsum. Curabitur cursus</p>
    <p>tincidunt orci. Pellentesque justo tellus , scelerisque quis, facilisis quis, interdum non, ante. Suspendisse feugiat, erat in feugiat tincidunt, est</p>
    <p>nunc volutpat enim, quis viverra lacus nulla sit amet lectus. Nulla odio lorem, feugiat et, volutpat dapibus, ultrices sit amet, sem. Vestibulum</p>
    <p>quis dui vitae massa euismod faucibus. Pellentesque id neque id tellus hendrerit tincidunt. Etiam augue. Class aptent taciti</p>
    <p>Sequential Execution in CPSL Rules</p>
    <p>Person Token[~ at] Phone  PersonPhonePerson Token[~ at] Phone  PersonPhone</p>
    <p>FirstName CapsWord  PersonFirstName CapsWord  Person</p>
    <p>Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Proin elementum neque at justo. Aliquam erat volutpat. Curabitur a massa. Vivamus</p>
    <p>luctus, risus in sagittis facilisis arcu auguet rum velit, sed &lt;Person&gt; at &lt;Phone&gt; hendrerit faucibus pede mi ipsum. Curabitur cursus</p>
    <p>tincidunt orci. Pellentesque justo tellus , scelerisque quis, facilisis quis, interdum non, ante. Suspendisse feugiat, erat in feugiat tincidunt, est</p>
    <p>Level 0 (Feature Selection)</p>
    <p>Level 2</p>
    <p>Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Proin,</p>
    <p>in &lt;FirstName&gt; &lt;CapsWord&gt; at &lt;Phone&gt; amet lt arcu</p>
    <p>tincidunt orci. Pellentesque justo tellus , scelerisque quis,</p>
    <p>facilisis nunc volutpat enim, quis viverra lacus nulla sit lectus.</p>
    <p>Digits Token[~ -] Digits  PhoneDigits Token[~ -] Digits  Phone</p>
    <p>Level 1</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation32</p>
    <p>Problems with Traditional IE Approaches</p>
    <p>Complex, fixed pipelines and rule sets</p>
    <p>Semantics tied to order of execution</p>
    <p>Scalability</p>
    <p>Accuracy</p>
    <p>Usability</p>
    <p>Data only flows forward, leading to</p>
    <p>wasted work in early stages.</p>
    <p>Lots of custom procedural code.</p>
    <p>Hard to understand why the system</p>
    <p>produces a particular result.</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation33</p>
    <p>Declarative to the Rescue!</p>
    <p>Define the logical constraints between rules/components</p>
    <p>System determines order of execution</p>
    <p>Optimizer avoids wasted work</p>
    <p>More expressive rule languages;</p>
    <p>Combine different tools easily</p>
    <p>Describe what to extract,</p>
    <p>instead of how to extract it</p>
    <p>Scalability</p>
    <p>Accuracy</p>
    <p>Usability</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation34</p>
    <p>What do we mean by declarative?</p>
    <p>Common vision:</p>
    <p>Separate semantics from order of execution</p>
    <p>Build the system around a language like SQL or Datalog</p>
    <p>Different systems have different interpretations</p>
    <p>Three main categories</p>
    <p>High-Level Declarative</p>
    <p>Most common approach</p>
    <p>Completely Declarative</p>
    <p>Mixed Declarative</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation35</p>
    <p>High-Level Declarative</p>
    <p>Replace the overall IE framework with a declarative language</p>
    <p>Each individual extraction component is still a black box</p>
    <p>Example 1: SQoUT[Jain08]</p>
    <p>Catalog of</p>
    <p>Extraction</p>
    <p>Modules</p>
    <p>SQL query</p>
    <p>Optimizer</p>
    <p>Query plan combines</p>
    <p>extraction modules</p>
    <p>with scan and index</p>
    <p>access to data.</p>
    <p>Query plan combines</p>
    <p>extraction modules</p>
    <p>with scan and index</p>
    <p>access to data.</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation36</p>
    <p>High-Level Declarative</p>
    <p>Replace the overall IE framework with a declarative language</p>
    <p>Each individual extraction component is still a black box</p>
    <p>Example 1: SQoUT[Jain08]</p>
    <p>Example 2: PSOX[Bohannon08]</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation37</p>
    <p>High-Level Declarative</p>
    <p>Replace the overall IE framework with a declarative language</p>
    <p>Each individual extraction component is still a black box</p>
    <p>Example 1: SQoUT[Jain08]</p>
    <p>Example 2: PSOX[Bohannon08]</p>
    <p>Advantages:</p>
    <p>Allows use of many existing black box packages</p>
    <p>High-level performance optimizations possible</p>
    <p>Clear semantics for using different packages for the same task</p>
    <p>Drawbacks:</p>
    <p>Doesnt address issues that occur within a given black box</p>
    <p>Limited opportunities for optimization, unless black boxes can provide hints</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation38</p>
    <p>Completely Declarative</p>
    <p>One declarative language covers all stages of extraction</p>
    <p>Example 1: AQL language in SystemT [Chiticariu10]</p>
    <p>Feature</p>
    <p>Selection</p>
    <p>Entity</p>
    <p>Identification</p>
    <p>Entity</p>
    <p>Resolution</p>
    <p>Text Features Entities,</p>
    <p>Rels.</p>
    <p>Structured</p>
    <p>Information</p>
    <p>-- Find all matches</p>
    <p>-- of a dictionary</p>
    <p>create view Name as</p>
    <p>extract dictionary</p>
    <p>CommonFirstName</p>
    <p>on D.text as name</p>
    <p>from Document D;</p>
    <p>-- Match people with their</p>
    <p>-- phone numbers</p>
    <p>create view PersonPhone as</p>
    <p>select P.name as person,</p>
    <p>N.num as phone</p>
    <p>from Person P, PhoneNum N</p>
    <p>where</p>
    <p>-- Find pairs of references</p>
    <p>-- to the same person</p>
    <p>create view SamePerson as</p>
    <p>select P1.name as name1,</p>
    <p>P2.name as name2</p>
    <p>from Person P1, Person P2</p>
    <p>where</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation39</p>
    <p>Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Proin</p>
    <p>enina i facilisis, &lt;Person&gt; at &lt;Digits&gt;-&lt;Digits&gt; arcu tincidunt</p>
    <p>orci. Pellentesque justo tellus , scelerisque quis, facilisis nunc</p>
    <p>volutpat enim, quis viverra lacus nulla sit amet lectus. Nulla</p>
    <p>Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Proin elementum neque at justo. Aliquam erat volutpat. Curabitur a massa. Vivamus</p>
    <p>luctus, risus in sagittis facilisis arcu augue velit, &lt;FirstName&gt; &lt;CapsWord&gt; at &lt;Digits&gt;-&lt;Digits&gt;. hendrerit faucibus pede mi ipsum.</p>
    <p>Curabitur cursus tincidunt orci. Pellentesque justo tellus , scelerisque quis, facilisis quis, interdum non, ante. Suspendisse feugiat, erat in</p>
    <p>feugiat tincidunt, est nunc volutpat enim, quis viverra lacus nulla sit amet lectus. Nulla odio lorem, feugiat et, volutpat dapibus, ultrices sit</p>
    <p>amet, sem. Vestibulum quis dui vitae massa euismod faucibus. Pellentesque id neque id tellus hendrerit tincidunt. Etiam augue. Class aptent</p>
    <p>Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Proin elementum neque at justo. Aliquam erat volutpat. Curabitur a massa. Vivamus</p>
    <p>luctus, risus in e sagittis facilisis, arcu augue rutrum velit, sed &lt;PersonPhone&gt;, hendrerit faucibus pede mi sed ipsum. Curabitur cursus</p>
    <p>tincidunt orci. Pellentesque justo tellus , scelerisque quis, facilisis quis, interdum non, ante. Suspendisse feugiat, erat in feugiat tincidunt, est</p>
    <p>nunc volutpat enim, quis viverra lacus nulla sit amet lectus. Nulla odio lorem, feugiat et, volutpat dapibus, ultrices sit amet, sem. Vestibulum</p>
    <p>quis dui vitae massa euismod faucibus. Pellentesque id neque id tellus hendrerit tincidunt. Etiam augue. Class aptent taciti</p>
    <p>Sequential Execution in CPSL Rules</p>
    <p>Person Token[~ at] Phone  PersonPhonePerson Token[~ at] Phone  PersonPhone</p>
    <p>FirstName CapsWord  PersonFirstName CapsWord  Person</p>
    <p>Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Proin elementum neque at justo. Aliquam erat volutpat. Curabitur a massa. Vivamus</p>
    <p>luctus, risus in sagittis facilisis arcu auguet rum velit, sed &lt;Person&gt; at &lt;Phone&gt; hendrerit faucibus pede mi ipsum. Curabitur cursus</p>
    <p>tincidunt orci. Pellentesque justo tellus , scelerisque quis, facilisis quis, interdum non, ante. Suspendisse feugiat, erat in feugiat tincidunt, est</p>
    <p>Level 0 (Feature Selection)</p>
    <p>Level 2</p>
    <p>Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Proin,</p>
    <p>in &lt;FirstName&gt; &lt;CapsWord&gt; at &lt;Phone&gt; amet lt arcu</p>
    <p>tincidunt orci. Pellentesque justo tellus , scelerisque quis,</p>
    <p>facilisis nunc volutpat enim, quis viverra lacus nulla sit lectus.</p>
    <p>Digits Token[~ -] Digits  PhoneDigits Token[~ -] Digits  Phone</p>
    <p>Level 1</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation40</p>
    <p>Declarative Semantics Example: Identifying Musician-Instrument Relationships</p>
    <p>(pipe | guitar | hammond organ |)  Instrument</p>
    <p>(Person Annotator)  Person</p>
    <p>Person 0-5 tokens Instrument  PersonPlaysInstrument</p>
    <p>John Person</p>
    <p>plays Token</p>
    <p>the Token</p>
    <p>Pipe Person</p>
    <p>guitar Instrument</p>
    <p>John Pipe Person</p>
    <p>plays Token</p>
    <p>the Token</p>
    <p>guitar Instrument</p>
    <p>John Person</p>
    <p>plays Token</p>
    <p>the Token</p>
    <p>Pipe Instrument</p>
    <p>guitar Instrument</p>
    <p>Person</p>
    <p>Person</p>
    <p>Instrument</p>
    <p>Person Instrument</p>
    <p>John Pipe plays the guitar</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation41</p>
    <p>Completely Declarative</p>
    <p>One declarative language covers all stages of extraction</p>
    <p>Example 1: AQL language in SystemT [Chiticariu10]</p>
    <p>Example 2: Conditional Random Fields in SQL [Wang10]</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation42</p>
    <p>Completely Declarative</p>
    <p>One declarative language covers all stages of extraction</p>
    <p>Example 1: AQL language in SystemT [Chiticariu10]</p>
    <p>Example 2: Conditional Random Fields in SQL [Wang10]</p>
    <p>Advantages:</p>
    <p>Unified language  clear semantics from top to bottom</p>
    <p>Optimizer has full control over low-level operations</p>
    <p>Can incorporate existing packages using user-defined</p>
    <p>functions</p>
    <p>Drawbacks:</p>
    <p>Code inside UDFs doesnt benefit from declarativeness</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation43</p>
    <p>Mixed Declarative</p>
    <p>Language provides declarativeness at the level of some, but</p>
    <p>not all, of the extraction operations, both at the individual</p>
    <p>and pipeline level</p>
    <p>Example: Xlog (CIMPLE) [Shen07]</p>
    <p>This Datalog predicate</p>
    <p>represents a large, opaque</p>
    <p>block of extraction code.</p>
    <p>This predicate is defined</p>
    <p>in Datalog, using low-level</p>
    <p>operations.</p>
    <p>Extraction program for talk extracts, from [1]</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation44</p>
    <p>Mixed Declarative</p>
    <p>Language provides declarativeness at the level of some, but</p>
    <p>not all, of the extraction operations, both at the individual</p>
    <p>and pipeline level</p>
    <p>Example: Xlog (CIMPLE) [Shen08]</p>
    <p>Advantages:</p>
    <p>Ability to reuse existing black box packages</p>
    <p>Optimizer gets some flexibility to reorder low-level operations</p>
    <p>Drawbacks:</p>
    <p>Challenging to build an optimizer that does both high-level</p>
    <p>and low-level optimizations</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation45</p>
    <p>Declarative to the Rescue!</p>
    <p>Different notions of declarativeness in</p>
    <p>different systems</p>
    <p>All kinds address the major issues in</p>
    <p>enterprise IE, but in different ways</p>
    <p>Optimizer avoids wasted work</p>
    <p>More expressive rule languages;</p>
    <p>Combine different tools easily</p>
    <p>Describe what to extract,</p>
    <p>instead of how to extract it</p>
    <p>Scalability</p>
    <p>Accuracy</p>
    <p>Usability</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation46</p>
    <p>Road Map</p>
    <p>What is Information Extraction? (Fred Reiss)</p>
    <p>Declarative Information Extraction (Fred Reiss)</p>
    <p>What the Declarative Approach Enables</p>
    <p>Scalable Infrastructure (Yunyao Li)</p>
    <p>Development Support (Laura Chiticariu)</p>
    <p>Conclusion/QuestionsY ou ar e h ere</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation</p>
    <p>Scalable Infrastructure</p>
    <p>Yunyao Li</p>
    <p>IBM Almaden Research Center</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation48</p>
    <p>Declarative to the Rescue!</p>
    <p>Define the logical constraints between rules/components</p>
    <p>System determines order of execution</p>
    <p>Optimizer avoids wasted work</p>
    <p>More expressive rule languages;</p>
    <p>Combine different tools easily</p>
    <p>Describe what to extract,</p>
    <p>instead of how to extract it</p>
    <p>Scalability</p>
    <p>Accuracy</p>
    <p>Usability</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation49</p>
    <p>Conventional vs. Declarative IE Infrastructure</p>
    <p>Conventional:</p>
    <p>Operational semantics</p>
    <p>and implementation are</p>
    <p>hard-coded and</p>
    <p>interconnected</p>
    <p>Declarative:</p>
    <p>Separate semantics from</p>
    <p>implementation.</p>
    <p>Database-style design:</p>
    <p>Optimizer + Runtime</p>
    <p>OptimizerOptimizer</p>
    <p>PlanPlan</p>
    <p>Runtime</p>
    <p>Environment</p>
    <p>Runtime</p>
    <p>Environment</p>
    <p>Declarative</p>
    <p>Language</p>
    <p>Declarative</p>
    <p>Language</p>
    <p>Extraction</p>
    <p>Pipeline</p>
    <p>Extraction</p>
    <p>Pipeline Runtime</p>
    <p>Environment</p>
    <p>Runtime</p>
    <p>Environment</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation50</p>
    <p>Why Declarative IE for Scalability</p>
    <p>An informal experimental</p>
    <p>study [Reiss08]</p>
    <p>Collection of 4.5 million</p>
    <p>web logs</p>
    <p>Band Review Annotator:</p>
    <p>identify informal reviews of</p>
    <p>concerts</p>
    <p>CPSL-based</p>
    <p>implementation Declarative</p>
    <p>implementation</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation51</p>
    <p>Different Aspects of Design for Scalability</p>
    <p>Optimization</p>
    <p>Granularity</p>
    <p>High-level: annotator composition</p>
    <p>Low-level: basic extraction operators</p>
    <p>Strategy:</p>
    <p>Rewrite-based</p>
    <p>Cost-based</p>
    <p>Runtime Model</p>
    <p>Document-Centric vs. Collection-Centric</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation52</p>
    <p>Optimization Granularity for Declarative IE</p>
    <p>Basic Extraction Operator</p>
    <p>Each operator represents an atomic extraction operation</p>
    <p>E.g. dictionary matching, regular expression, join,</p>
    <p>System is fully aware of how each extraction operator works</p>
    <p>Optimizing each basic extraction operator</p>
    <p>Annotator Composition</p>
    <p>Each annotator extracts one or more entities or relationships</p>
    <p>E.g. Person annotator</p>
    <p>Black box assumption on how an annotator works</p>
    <p>Optimizing composition of extraction pipeline</p>
    <p>High-level declarative Mixed declarative Completely declarative</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation53</p>
    <p>Optimization Strategies for Declarative IE</p>
    <p>Rewrite-based</p>
    <p>Applying rewrite rules to</p>
    <p>transform the declarative</p>
    <p>form of the annotators to a</p>
    <p>equivalent form that is more</p>
    <p>efficient</p>
    <p>Cost-Based</p>
    <p>Enumerating all possible</p>
    <p>physical execution plans,</p>
    <p>estimate their cost, and</p>
    <p>choose the one with the</p>
    <p>minimum expected cost</p>
    <p>Systems may mix these two approaches</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation54</p>
    <p>Document-Centric</p>
    <p>Runtime Model for Declarative IE</p>
    <p>Input</p>
    <p>Document</p>
    <p>Stream</p>
    <p>Annotated</p>
    <p>Document</p>
    <p>Stream</p>
    <p>Collection-Centric</p>
    <p>Runtime</p>
    <p>Environment</p>
    <p>Runtime</p>
    <p>Environment</p>
    <p>Document</p>
    <p>Collection</p>
    <p>Document</p>
    <p>Collection</p>
    <p>Runtime</p>
    <p>Environment</p>
    <p>Runtime</p>
    <p>Environment</p>
    <p>Annotations</p>
    <p>Annotations Annotations</p>
    <p>Auxiliary</p>
    <p>index</p>
    <p>Auxiliary</p>
    <p>index</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation55</p>
    <p>Systems</p>
    <p>CIMPLE</p>
    <p>RAD</p>
    <p>SQout</p>
    <p>SystemT</p>
    <p>BayesStore</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation56</p>
    <p>Cimple</p>
    <p>Rewrite-based optimization</p>
    <p>Inverted-index based simple pattern matching</p>
    <p>Shared document scan</p>
    <p>Simple patterns</p>
    <p>Parse trees</p>
    <p>P1= (Jeff|Jeffery)\s\s*Ullman</p>
    <p>P2=(Jeff|Jeffery)\s\s*Naughton</p>
    <p>P3=Laura\s\s*Haas</p>
    <p>P4=Peter\s\s*Haas</p>
    <p>AND</p>
    <p>AND</p>
    <p>OR</p>
    <p>Jeff\s Jeffery\s \s*</p>
    <p>* Ullman</p>
    <p>AND</p>
    <p>AND</p>
    <p>OR</p>
    <p>Jeff\s Jeffery\s \s*</p>
    <p>*</p>
    <p>Naughton</p>
    <p>(p1) (p2)</p>
    <p>AND</p>
    <p>AND</p>
    <p>\s*</p>
    <p>*</p>
    <p>(p3)</p>
    <p>Laura\s</p>
    <p>AND</p>
    <p>AND</p>
    <p>\s*</p>
    <p>*</p>
    <p>(p4)</p>
    <p>Peter\s</p>
    <p>Ullman</p>
    <p>Haas</p>
    <p>Peter\s</p>
    <p>Laura\s</p>
    <p>Naughton P2</p>
    <p>P1</p>
    <p>P3</p>
    <p>P4</p>
    <p>P3, P4</p>
    <p>Inverted Index</p>
    <p>Haas Haas</p>
    <p>[Shen07]</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation57</p>
    <p>Cimple</p>
    <p>Pushing down text properties</p>
    <p>Eg: To find an all-capitalized line</p>
    <p>Scoping</p>
    <p>Imposing location conditions on where to extract spans</p>
    <p>Eg: Check for names only within two lines of the occurrence of titles</p>
    <p>Incorporating cost-model to decide how to apply the rewrite.</p>
    <p>[Shen07]</p>
    <p>[Shen07]</p>
    <p>lines(d,x,n)</p>
    <p>allcaps(x)</p>
    <p>Plan a</p>
    <p>lines(d,x,n)</p>
    <p>allcaps(x)</p>
    <p>containCaps(d)</p>
    <p>Plan b</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation58</p>
    <p>Cimple</p>
    <p>Collection-centric runtime model</p>
    <p>Document collection (or snapshots of document collection)</p>
    <p>Previous extraction results</p>
    <p>Reusing previous extraction results</p>
    <p>Similar to maintaining materialized views</p>
    <p>[Chen08][Chen09]</p>
    <p>Cyclex: IE program viewed as</p>
    <p>one big blackbox</p>
    <p>Delex: IE program viewed as a</p>
    <p>workflow of blackboxes</p>
    <p>[Chen08]</p>
    <p>[Chen09]</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation59</p>
    <p>RAD [Khaitan09]</p>
    <p>Query language: a declarative subset of CPSL specification</p>
    <p>Regular expressions over features and existing annotations</p>
    <p>Generating derived entities over the index using</p>
    <p>series of join operators</p>
    <p>(E.g. Person, Organization)</p>
    <p>Document</p>
    <p>Inverted index</p>
    <p>+ Annotations</p>
    <p>Document</p>
    <p>Inverted index</p>
    <p>+ Annotations</p>
    <p>Document</p>
    <p>Collection</p>
    <p>Document</p>
    <p>Collection</p>
    <p>Document</p>
    <p>Inverted index</p>
    <p>Document</p>
    <p>Inverted index</p>
    <p>S e n te n c e</p>
    <p>c h u n k in g</p>
    <p>to k e n iz a ti o n</p>
    <p>Offline process</p>
    <p>Generating indexed features</p>
    <p>Dictionary lookup (Eg. First name)</p>
    <p>Part of speech lookup (Eg. Noun, verb)</p>
    <p>Regular expression on tokens (E.g. CapsWord, Alphanum)</p>
    <p>Query</p>
    <p>OptimizerOptimizer</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation60</p>
    <p>RAD</p>
    <p>Cost-based Optimization based on Posting-list</p>
    <p>Statistics</p>
    <p>E.g. ANYWORD@ANYWORD.com for Email</p>
    <p>@ANYWORD</p>
    <p>ANYWORDR1</p>
    <p>R2</p>
    <p>R3</p>
    <p>. c o m</p>
    <p>Plan a</p>
    <p>@</p>
    <p>ANYWORD</p>
    <p>ANYWORD</p>
    <p>R1</p>
    <p>R2 R3 .</p>
    <p>c o m</p>
    <p>R4</p>
    <p>Plan b</p>
    <p>Zig-zag Join</p>
    <p>over the</p>
    <p>inverted index</p>
    <p>Another zig-zag</p>
    <p>join over the</p>
    <p>inverted index</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation61</p>
    <p>RAD</p>
    <p>Rewrite-based Optimization</p>
    <p>Share sub-expression evaluation</p>
    <p>Evaluate the same sub-expression only once</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation62</p>
    <p>Declarative to the Rescue!</p>
    <p>Define the logical constraints between rules/components</p>
    <p>System determines order of execution</p>
    <p>Optimizer avoids wasted work</p>
    <p>More expressive rule languages;</p>
    <p>Combine different tools easily</p>
    <p>Describe what to extract,</p>
    <p>instead of how to extract it</p>
    <p>Scalability</p>
    <p>Accuracy</p>
    <p>Usability</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation63</p>
    <p>Conventional vs. Declarative IE Infrastructure</p>
    <p>Conventional:</p>
    <p>Operational semantics</p>
    <p>and implementation are</p>
    <p>hard-coded and</p>
    <p>interconnected</p>
    <p>Declarative:</p>
    <p>Separate semantics from</p>
    <p>implementation.</p>
    <p>Database-style design:</p>
    <p>Optimizer + Runtime</p>
    <p>OptimizerOptimizer</p>
    <p>PlanPlan</p>
    <p>Runtime</p>
    <p>Environment</p>
    <p>Runtime</p>
    <p>Environment</p>
    <p>Declarative</p>
    <p>Language</p>
    <p>Declarative</p>
    <p>Language</p>
    <p>Extraction</p>
    <p>Pipeline</p>
    <p>Extraction</p>
    <p>Pipeline Runtime</p>
    <p>Environment</p>
    <p>Runtime</p>
    <p>Environment</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation64</p>
    <p>Different Aspects of Design for Scalability</p>
    <p>Optimization</p>
    <p>Granularity</p>
    <p>High-level: annotator composition</p>
    <p>Low-level: basic extraction operators</p>
    <p>Strategy:</p>
    <p>Rewrite-based</p>
    <p>Cost-based</p>
    <p>Runtime Model</p>
    <p>Document-Centric vs. Collection-Centric</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation65</p>
    <p>Systems</p>
    <p>CIMPLE</p>
    <p>RAD</p>
    <p>SQout</p>
    <p>SystemT</p>
    <p>BayesStore</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation66</p>
    <p>SQoUT [Ipeirotis07][Jain07,08,09]</p>
    <p>Focus on composition of extraction systems</p>
    <p>SQL Query</p>
    <p>Retrieval</p>
    <p>Strategy</p>
    <p>Retrieval</p>
    <p>Strategy</p>
    <p>Retrieval</p>
    <p>Strategy</p>
    <p>Retrieval</p>
    <p>Strategy</p>
    <p>Extraction</p>
    <p>System Em</p>
    <p>Extraction</p>
    <p>System Em</p>
    <p>Extraction</p>
    <p>System E0</p>
    <p>Extraction</p>
    <p>System E0</p>
    <p>Document</p>
    <p>Collection</p>
    <p>Document</p>
    <p>Collection</p>
    <p>Extraction results</p>
    <p>Query</p>
    <p>results</p>
    <p>Data</p>
    <p>Cleaning</p>
    <p>Data</p>
    <p>Cleaning</p>
    <p>Extracted View</p>
    <p>Entities/relations</p>
    <p>to extract</p>
    <p>Extraction</p>
    <p>System Repository</p>
    <p>Extraction</p>
    <p>System Repository</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation67</p>
    <p>SQoUT</p>
    <p>Cost-based Query Optimization</p>
    <p>New Plan Enumeration Strategies</p>
    <p>Document retrieval strategies</p>
    <p>Eg: filtered scan</p>
    <p>Running the annotator only over potentially relevant docs</p>
    <p>Join execution</p>
    <p>Independent join, outer/inner join, zig-zag join:</p>
    <p>Extraction results of one relation can determine the docs retrieved for</p>
    <p>another relation.</p>
    <p>Efficiency vs. Quality Cost Model</p>
    <p>Goodness Quality Efficiency Weight</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation68</p>
    <p>SystemT [Reiss08] [Krishnamurthy08] [Chiticariu10]</p>
    <p>Pre</p>
    <p>processor</p>
    <p>Pre</p>
    <p>processor Blocks</p>
    <p>Rules</p>
    <p>Divide rules into</p>
    <p>compilation blocks.</p>
    <p>Rewrite-based</p>
    <p>optimization within each</p>
    <p>block</p>
    <p>PlannerPlanner</p>
    <p>Plan</p>
    <p>Enumerator</p>
    <p>Cost Model</p>
    <p>Block</p>
    <p>Plans</p>
    <p>System R Style Cost</p>
    <p>based optimization</p>
    <p>within each block.</p>
    <p>Post</p>
    <p>processor</p>
    <p>Post</p>
    <p>processor</p>
    <p>Final</p>
    <p>Plan</p>
    <p>Merge block plans into a</p>
    <p>single operator graph.</p>
    <p>Rewrite-based</p>
    <p>optimization across</p>
    <p>blocks.</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation69</p>
    <p>Example: Restricted Span Evaluation (RSE)</p>
    <p>Leverage the sequential nature of text</p>
    <p>Join predicates on character or token distance</p>
    <p>Only evaluate the inner on the relevant portions of the document</p>
    <p>Limited applicability</p>
    <p>Need to guarantee exact same results</p>
    <p>John Smith at 555-1212</p>
    <p>John Smith555-1212</p>
    <p>John Smith at 555-1212</p>
    <p>DictionaryRegex</p>
    <p>RSEJoin</p>
    <p>Only look for dictionary</p>
    <p>matches in the vicinity of a</p>
    <p>phone number.</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation70</p>
    <p>Example: Shared Dictionary Matching (SDM)</p>
    <p>Rewrite-based optimization</p>
    <p>Applied to the algebraic plan during postprocessing</p>
    <p>Evaluate multiple dictionaries in a single pass</p>
    <p>DictD1 D2</p>
    <p>subplan</p>
    <p>D1</p>
    <p>D2</p>
    <p>subplan</p>
    <p>Dict SDMDict</p>
    <p>SDM</p>
    <p>Dictionary</p>
    <p>Operator</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation71</p>
    <p>SystemT</p>
    <p>Document-centric Runtime</p>
    <p>Model:</p>
    <p>One document at a time</p>
    <p>Entities extracted are</p>
    <p>associated with their</p>
    <p>source document</p>
    <p>Runtime</p>
    <p>Environment</p>
    <p>Runtime</p>
    <p>Environment</p>
    <p>Input</p>
    <p>Document</p>
    <p>Stream</p>
    <p>Annotated</p>
    <p>Document</p>
    <p>Stream</p>
    <p>Why one document at a time?</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation72</p>
    <p>Hadoop Cluster</p>
    <p>Jaql Function WrapperJaql Function Wrapper</p>
    <p>SystemT</p>
    <p>Runtime</p>
    <p>Input</p>
    <p>Adapter</p>
    <p>Output</p>
    <p>Adapter</p>
    <p>Jaql Function WrapperJaql Function Wrapper</p>
    <p>SystemT</p>
    <p>Runtime</p>
    <p>Input</p>
    <p>Adapter</p>
    <p>Output</p>
    <p>Adapter</p>
    <p>Jaql Function WrapperJaql Function Wrapper</p>
    <p>SystemT</p>
    <p>Runtime Input</p>
    <p>Adapter</p>
    <p>Output</p>
    <p>Adapter</p>
    <p>Jaql Function WrapperJaql Function Wrapper</p>
    <p>SystemT</p>
    <p>Runtime Input</p>
    <p>Adapter</p>
    <p>Output</p>
    <p>Adapter</p>
    <p>Jaql Function WrapperJaql Function Wrapper</p>
    <p>SystemT</p>
    <p>Runtime Input</p>
    <p>Adapter</p>
    <p>Output</p>
    <p>Adapter</p>
    <p>Jaql Function WrapperJaql Function Wrapper</p>
    <p>SystemT</p>
    <p>Runtime Input</p>
    <p>Adapter</p>
    <p>Output</p>
    <p>Adapter</p>
    <p>Lotus Notes</p>
    <p>Client</p>
    <p>Lotus Notes</p>
    <p>Client</p>
    <p>Scaling SystemT: From Laptop to Cluster</p>
    <p>Cognos Toro AnalyticsIn Lotus Notes Live Text In Cognos Toro Text Analytics</p>
    <p>SystemT</p>
    <p>Runtime</p>
    <p>Email</p>
    <p>Message Display</p>
    <p>Annotated Email</p>
    <p>Documents</p>
    <p>Jaql Runtime</p>
    <p>Hadoop Map-Reduce</p>
    <p>Jaql Function WrapperJaql Function Wrapper</p>
    <p>SystemT</p>
    <p>Runtime Input</p>
    <p>Adapter</p>
    <p>Output</p>
    <p>Adapter</p>
    <p>Jaql Function WrapperJaql Function Wrapper</p>
    <p>SystemT</p>
    <p>Runtime Input</p>
    <p>Adapter</p>
    <p>Output</p>
    <p>Adapter</p>
    <p>Jaql Function Wrapper Jaql Function Wrapper</p>
    <p>SystemT</p>
    <p>Runtime Input</p>
    <p>Adapter Output</p>
    <p>Adapter</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation73</p>
    <p>BayesStore [Wang10]</p>
    <p>Probabilistic declarative IE</p>
    <p>In-database machine learning for efficiency and scalability</p>
    <p>Text Data and Conditional Random Fields (CRF) Model</p>
    <p>document</p>
    <p>Token</p>
    <p>table</p>
    <p>CRF</p>
    <p>model</p>
    <p>Factor</p>
    <p>table</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation74</p>
    <p>BayesStore</p>
    <p>Viterbi Inference SQL Implementation</p>
    <p>Implementing dynamic programming algorithm using recursive</p>
    <p>queries</p>
    <p>Rewrite-based</p>
    <p>optimization.</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation75</p>
    <p>Summary</p>
    <p>[A table here shows design choices of the</p>
    <p>systems]</p>
    <p>SystemT</p>
    <p>SQoUT</p>
    <p>Basic</p>
    <p>operator</p>
    <p>Optimization</p>
    <p>Granularity</p>
    <p>Annotator</p>
    <p>composition Document level</p>
    <p>Runtime ModelOptimization Strategy</p>
    <p>Systems</p>
    <p>BayesStore</p>
    <p>RAD</p>
    <p>Cimple</p>
    <p>Collection LevelCost-basedRewrite-based</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation76</p>
    <p>Road Map</p>
    <p>What is Information Extraction? (Fred Reiss)</p>
    <p>Declarative Information Extraction (Fred Reiss)</p>
    <p>What the Declarative Approach Enables</p>
    <p>Scalable Infrastructure (Yunyao Li)</p>
    <p>Development Support (Laura Chiticariu) You are here</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation</p>
    <p>Development Support (Tooling)</p>
    <p>Laura Chiticariu</p>
    <p>IBM Almaden Research Center</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation78</p>
    <p>Declarative to the Rescue!</p>
    <p>Define the logical constraints between rules/components</p>
    <p>System determines order of execution</p>
    <p>Optimizer avoids wasted work</p>
    <p>More expressive rule languages;</p>
    <p>Combine different tools easily</p>
    <p>Describe what to extract,</p>
    <p>instead of how to extract it</p>
    <p>Scalability</p>
    <p>Accuracy</p>
    <p>Usability</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation79</p>
    <p>A Canonical IE System</p>
    <p>Feature</p>
    <p>Selection</p>
    <p>Entity</p>
    <p>Identification</p>
    <p>Entity</p>
    <p>Resolution</p>
    <p>Text Features Entities and</p>
    <p>Relationships</p>
    <p>Structured</p>
    <p>Information</p>
    <p>Developing IE systems is an extremely</p>
    <p>time-consuming, error prone process</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation80</p>
    <p>Development</p>
    <p>The Life Cycle of an IE System</p>
    <p>Analyze</p>
    <p>Develop 1. Features</p>
    <p>Test</p>
    <p>Developer</p>
    <p>Usage / Maintenance</p>
    <p>Use User</p>
    <p>TestRefine</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation81</p>
    <p>--------------------------------------create view ValidLastNameAll as select N.lastname as lastname from LastNameAll N -- do not allow partially all capitalized words where Not(MatchesRegex(/(\p{Lu}\p{M}*)+.*([\p{Ll}\p{Lo}]\p{M}*).*/, N.lastname)) and Not(MatchesRegex(/.*([\p{Ll}\p{Lo}]\p{M}*).*(\p{Lu}\p{M}*)+/, N.lastname));</p>
    <p>create view LastName as select C.lastname as lastname --from Consolidate(ValidLastNameAll.lastname) C; from ValidLastNameAll C consolidate on C.lastname;</p>
    <p>-- Find dictionary matches for all first names -- Mostly US first names create view StrictFirstName1 as select D.match as firstname from Dictionary('strictFirst.dict', Doc.text) D -where MatchesRegex(/\p{Upper}\p{Lower}[\p{Alpha}]{ 0,20}/, D.match); -- changed to enable unicode match where MatchesRegex(/\p{Lu}\p{M}*.{1,20}/, D.match);</p>
    <p>-- German first names create view StrictFirstName2 as select D.match as firstname from Dictionary('strictFirst_german.dict', Doc.text) D -where MatchesRegex(/\p{Upper}\p{Lower}[\p{Alpha}]{ 0,20}/, D.match); --where MatchesRegex(/\p{Upper}.{1,20}/, D.match); -- changed to enable unicode match where MatchesRegex(/\p{Lu}\p{M}*.{1,20}/, D.match);</p>
    <p>-- nick names for US first names create view StrictFirstName3 as select D.match as firstname from Dictionary('strictNickName.dict', Doc.text) D -where MatchesRegex(/\p{Upper}\p{Lower}[\p{Alpha}]{ 0,20}/, D.match); --where MatchesRegex(/\p{Upper}.{1,20}/, D.match); -- changed to enable unicode match where MatchesRegex(/\p{Lu}\p{M}*.{1,20}/, D.match);</p>
    <p>-- german first name from blue page create view StrictFirstName4 as select D.match as firstname from Dictionary('strictFirst_german_bluePages.dict', Doc.text) D -where MatchesRegex(/\p{Upper}\p{Lower}[\p{Alpha}]{ 0,20}/, D.match); --where MatchesRegex(/\p{Upper}.{1,20}/, D.match); -- changed to enable unicode match where MatchesRegex(/\p{Lu}\p{M}*.{1,20}/, D.match);</p>
    <p>-- Italy first name from blue pages create view StrictFirstName5 as select D.match as firstname from Dictionary('names/strictFirst_italy.dict', Doc.text) D where MatchesRegex(/\p{Lu}\p{M}*.{1,20}/, D.match);</p>
    <p>-- France first name from blue pages create view StrictFirstName6 as select D.match as firstname from Dictionary('names/strictFirst_france.dict', Doc.text) D where MatchesRegex(/\p{Lu}\p{M}*.{1,20}/, D.match);</p>
    <p>-- Spain first name from blue pages create view StrictFirstName7 as select D.match as firstname from Dictionary('names/strictFirst_spain.dict', Doc.text) D where MatchesRegex(/\p{Lu}\p{M}*.{1,20}/, D.match);</p>
    <p>-- Indian first name from blue pages -- TODO: still need to clean up the remaining entries create view StrictFirstName8 as select D.match as firstname from Dictionary('names/strictFirst_india.partial.dict', Doc.text) D where MatchesRegex(/\p{Lu}\p{M}*.{1,20}/, D.match);</p>
    <p>-- Israel first name from blue pages create view StrictFirstName9 as select D.match as firstname from Dictionary('names/strictFirst_israel.dict', Doc.text) D where MatchesRegex(/\p{Lu}\p{M}*.{1,20}/, D.match);</p>
    <p>-- union all the dictionary matches for first names create view StrictFirstName as (select S.firstname as firstname from</p>
    <p>StrictFirstName1 S) union all (select S.firstname as firstname from</p>
    <p>StrictFirstName2 S) union all (select S.firstname as firstname from</p>
    <p>StrictFirstName3 S) union all (select S.firstname as firstname from</p>
    <p>StrictFirstName4 S) union all (select S.firstname as firstname from</p>
    <p>StrictFirstName5 S) union all (select S.firstname as firstname from</p>
    <p>StrictFirstName6 S) union all (select S.firstname as firstname from</p>
    <p>StrictFirstName7 S) union all (select S.firstname as firstname from</p>
    <p>StrictFirstName8 S) union all (select S.firstname as firstname from</p>
    <p>StrictFirstName9 S);</p>
    <p>-- Relaxed versions of first name create view RelaxedFirstName1 as select CombineSpans(S.firstname, CP.name) as firstname from StrictFirstName S,</p>
    <p>StrictCapsPerson CP where FollowsTok(S.firstname, CP.name, 1, 1) and MatchesRegex(/\-/, SpanBetween(S.firstname, CP.name));</p>
    <p>create view RelaxedFirstName2 as select CombineSpans(CP.name, S.firstname) as firstname from StrictFirstName S,</p>
    <p>StrictCapsPerson CP where FollowsTok(CP.name, S.firstname, 1, 1) and MatchesRegex(/\-/, SpanBetween(CP.name, S.firstname));</p>
    <p>-- all the first names create view FirstNameAll as (select N.firstname as firstname from</p>
    <p>StrictFirstName N) union all (select N.firstname as firstname from</p>
    <p>RelaxedFirstName1 N) union all (select N.firstname as firstname from</p>
    <p>RelaxedFirstName2 N);</p>
    <p>create view ValidFirstNameAll as select N.firstname as firstname from FirstNameAll N where Not(MatchesRegex(/(\p{Lu}\p{M}*)+.*([\p{Ll}\p{Lo}]\p{M}*).*/, N.firstname)) and Not(MatchesRegex(/.*([\p{Ll}\p{Lo}]\p{M}*).*(\p{Lu}\p{M}*)+/, N.firstname));</p>
    <p>create view FirstName as select C.firstname as firstname --from Consolidate(ValidFirstNameAll.firstname) C; from ValidFirstNameAll C consolidate on C.firstname;</p>
    <p>-- Combine all dictionary matches for both last names and first names create view NameDict as select D.match as name from Dictionary('name.dict', Doc.text) D -where MatchesRegex(/\p{Upper}\p{Lower}[\p{Alpha}]{ 0,20}/, D.match); --where MatchesRegex(/\p{Upper}.{1,20}/, D.match); -- changed to enable unicode match where MatchesRegex(/\p{Lu}\p{M}*.{1,20}/, D.match);</p>
    <p>create view NameDict1 as select D.match as name from Dictionary('names/name_italy.dict', Doc.text) D where MatchesRegex(/\p{Lu}\p{M}*.{1,20}/, D.match);</p>
    <p>create view NameDict2 as select D.match as name from Dictionary('names/name_france.dict', Doc.text) D where MatchesRegex(/\p{Lu}\p{M}*.{1,20}/, D.match);</p>
    <p>create view NameDict3 as select D.match as name from Dictionary('names/name_spain.dict', Doc.text) D where MatchesRegex(/\p{Lu}\p{M}*.{1,20}/, D.match);</p>
    <p>create view NameDict4 as select D.match as name</p>
    <p>from FirstName FN, InitialWord IW, CapsPerson CP</p>
    <p>where FollowsTok(FN.firstname, IW.word, 0, 0) and FollowsTok(IW.word, CP.name, 0, 0);</p>
    <p>/** * Translation for Rule 3r2 * * This relaxed version of rule '3' will find person names like Thomas B.M. David * But it only insists that the second word is in the person dictionary */ /* &lt;rule annotation=Person id=3r2&gt; &lt;internal&gt; &lt;token attribute={etc}&gt;CAPSPERSON&lt;/token&gt; &lt;token attribute={etc}&gt;INITIALWORD&lt;/token&gt; &lt;token attribute={etc}PERSON:ST:LNAME{etc}&gt;CAPSPERSO N&lt;/token&gt; &lt;/internal&gt; &lt;/rule&gt;*/</p>
    <p>create view Person3r2 as select CombineSpans(CP.name, LN.lastname) as person from LastName LN,</p>
    <p>InitialWord IW, CapsPerson CP</p>
    <p>where FollowsTok(CP.name, IW.word, 0, 0) and FollowsTok(IW.word, LN.lastname, 0, 0);</p>
    <p>/** * Translation for Rule 4 * * This rule will find person names like David Thomas */ /* &lt;rule annotation=Person id=4&gt; &lt;internal&gt; &lt;token attribute={etc}PERSON:ST:FNAME{etc}&gt;CAPSPERSO N&lt;/token&gt; &lt;token attribute={etc}PERSON:ST:LNAME{etc}&gt;CAPSPERSO N&lt;/token&gt; &lt;/internal&gt; &lt;/rule&gt; */ create view Person4WithNewLine as select CombineSpans(FN.firstname, LN.lastname) as person from FirstName FN,</p>
    <p>LastName LN where FollowsTok(FN.firstname, LN.lastname, 0, 0);</p>
    <p>-- Yunyao: 05/20/2008 revised to Person4WrongCandidates due to performance reason -- NOTE: current optimizer execute Equals first thus make Person4Wrong very expensive --create view Person4Wrong as --select CombineSpans(FN.firstname, LN.lastname) as person --from FirstName FN, -- LastName LN --where FollowsTok(FN.firstname, LN.lastname, 0, 0) -- and ContainsRegex(/[\n\r]/, SpanBetween(FN.firstname, LN.lastname)) -- and Equals(GetText(FN.firstname), GetText(LN.lastname));</p>
    <p>create view Person4WrongCandidates as select FN.firstname as firstname, LN.lastname as lastname from FirstName FN,</p>
    <p>LastName LN where FollowsTok(FN.firstname, LN.lastname, 0, 0) and ContainsRegex(/[\n\r]/,</p>
    <p>SpanBetween(FN.firstname, LN.lastname));</p>
    <p>create view Person4 as (select P.person as person from</p>
    <p>Person4WithNewLine P) minus (select CombineSpans(P.firstname, P.lastname) as</p>
    <p>person from Person4WrongCandidates P where Equals(GetText(P.firstname),</p>
    <p>GetText(P.lastname))); /** * Translation for Rule4a * This rule will find person names like Thomas, David */ /* &lt;rule annotation=Person id=4a&gt; &lt;internal&gt; &lt;token attribute={etc}PERSON:ST:LNAME{etc}&gt;CAPSPERSO N&lt;/token&gt; &lt;token attribute={etc}&gt;\,&lt;/token&gt; &lt;token attribute={etc}PERSON:ST:FNAME{etc}&gt;CAPSPERSO N&lt;/token&gt; &lt;/internal&gt; &lt;/rule&gt; */ create view Person4a as select CombineSpans(LN.lastname, FN.firstname) as person from FirstName FN,</p>
    <p>LastName LN where FollowsTok(LN.lastname, FN.firstname, 1, 1) and ContainsRegex(/,/,SpanBetween(LN.lastname, FN.firstname));</p>
    <p>-- relaxed version of Rule4a -- Yunyao: split the following rules into two to improve performance -- TODO: Test case for optimizer -- create view Person4ar1 as -- select CombineSpans(CP.name, FN.firstname) as person --from FirstName FN, -- CapsPerson CP --where FollowsTok(CP.name, FN.firstname, 1, 1) --and ContainsRegex(/,/,SpanBetween(CP.name, FN.firstname)) --and Not(MatchesRegex(/(.|\n|\r)*(\.|\?|!|'|\sat|\sin)( )*/, LeftContext(CP.name, 10))) --and Not(MatchesRegex(/(?i)(.+fully)/, CP.name)) --and GreaterThan(GetBegin(CP.name), 10);</p>
    <p>create view Person4ar1temp as select FN.firstname as firstname, CP.name as name from FirstName FN,</p>
    <p>CapsPerson CP where FollowsTok(CP.name, FN.firstname, 1, 1) and ContainsRegex(/,/,SpanBetween(CP.name, FN.firstname));</p>
    <p>create view Person4ar1 as select CombineSpans(P.name, P.firstname) as person from Person4ar1temp P where Not(MatchesRegex(/(.|\n|\r)*(\.|\?|!|'|\sat|\sin)( )*/, LeftContext(P.name, 10))) --' and Not(MatchesRegex(/(?i)(.+fully)/, P.name)) and GreaterThan(GetBegin(P.name), 10);</p>
    <p>create view Person4ar2 as select CombineSpans(LN.lastname, CP.name) as person from CapsPerson CP,</p>
    <p>LastName LN where FollowsTok(LN.lastname, CP.name, 0, 1) and ContainsRegex(/,/,SpanBetween(LN.lastname, CP.name));</p>
    <p>/** * Translation for Rule2 * * This rule will handles names of persons like B.M. Thomas David, where Thomas occurs in some person dictionary */ /* &lt;rule annotation=Person id=2&gt; &lt;internal&gt; &lt;token attribute={etc}&gt;INITIALWORD&lt;/token&gt; &lt;token attribute={etc}PERSON{etc}&gt;CAPSPERSON&lt;/token&gt; &lt;token attribute={etc}&gt;CAPSPERSON&lt;/token&gt; &lt;/internal&gt; &lt;/rule&gt; */</p>
    <p>create view Person2 as select CombineSpans(IW.word, CP.name) as person from InitialWord IW,</p>
    <p>PersonDict P, CapsPerson CP</p>
    <p>where FollowsTok(IW.word, P.name, 0, 0) and FollowsTok(P.name, CP.name, 0, 0);</p>
    <p>/** * Translation for Rule 2a * * The rule handles names of persons like B.M. Thomas David, where David occurs in some person dictionary */ /* &lt;rule annotation=Person id=2a&gt; &lt;internal&gt; &lt;token attribute={etc}&gt;INITIALWORD&lt;/token&gt; &lt;token attribute={etc}&gt;CAPSPERSON&lt;/token&gt; &lt;token attribute={etc}&gt;NEWLINE&lt;/token&gt;? &lt;token attribute={etc}PERSON{etc}&gt;CAPSPERSON&lt;/token&gt; &lt;/internal&gt; &lt;/rule&gt; */</p>
    <p>create view Person2a as select CombineSpans(IW.word, P.name) as person from InitialWord IW,</p>
    <p>CapsPerson CP, PersonDict P</p>
    <p>where FollowsTok(IW.word, CP.name, 0, 0) and FollowsTok(CP.name, P.name, 0, 0);</p>
    <p>/* &lt;rule annotation=Person id=4r1&gt; &lt;internal&gt; &lt;token attribute={etc}PERSON:ST:FNAME{etc}&gt;CAPSPERSO N&lt;/token&gt; &lt;token attribute={etc}&gt;NEWLINE&lt;/token&gt;? &lt;token attribute={etc}&gt;CAPSPERSON&lt;/token&gt; &lt;/internal&gt; &lt;/rule&gt; */ create view Person4r1 as select CombineSpans(FN.firstname, CP.name) as person from FirstName FN,</p>
    <p>CapsPerson CP where FollowsTok(FN.firstname, CP.name, 0, 0);</p>
    <p>/** * Translation for Rule 4r2 * * This relaxed version of rule '4' will find person names Thomas, David * But it only insists that the SECOND word is in some person dictionary */ /* &lt;rule annotation=Person id=4r2&gt; &lt;token attribute={etc}&gt;ANYWORD&lt;/token&gt; &lt;internal&gt; &lt;token attribute={etc}&gt;CAPSPERSON&lt;/token&gt; &lt;token attribute={etc}&gt;NEWLINE&lt;/token&gt;? &lt;token attribute={etc}PERSON:ST:LNAME{etc}&gt;CAPSPERSO N&lt;/token&gt; &lt;/internal&gt; &lt;/rule&gt; */ create view Person4r2 as select CombineSpans(CP.name, LN.lastname) as person from CapsPerson CP,</p>
    <p>LastName LN where FollowsTok(CP.name, LN.lastname, 0, 0);</p>
    <p>/** * Translation for Rule 5 * * This rule will find other single token person first names */ /* &lt;rule annotation=Person id=5&gt; &lt;internal&gt; &lt;token attribute={etc}&gt;INITIALWORD&lt;/token&gt;? &lt;token attribute={etc}PERSON:ST:FNAME{etc}&gt;CAPSPERSO N&lt;/token&gt; &lt;/internal&gt; &lt;/rule&gt; */ create view Person5 as select CombineSpans(IW.word, FN.firstname) as person from InitialWord IW,</p>
    <p>FirstName FN where FollowsTok(IW.word, FN.firstname, 0, 0);</p>
    <p>/** * Translation for Rule 6 * * This rule will find other single token person last names */ /* &lt;rule annotation=Person id=6&gt; &lt;internal&gt; &lt;token attribute={etc}&gt;INITIALWORD&lt;/token&gt;? &lt;token attribute={etc}PERSON:ST:LNAME{etc}&gt;CAPSPERSO N&lt;/token&gt; &lt;/internal&gt; &lt;/rule&gt; */</p>
    <p>create view Person6 as select CombineSpans(IW.word, LN.lastname) as person from InitialWord IW,</p>
    <p>LastName LN where FollowsTok(IW.word, LN.lastname, 0, 0);</p>
    <p>-============================================= ============= -- End of rules --- Create final list of names based on all the matches extracted --============================================= =============</p>
    <p>/** * Union all matches found by strong rules, except the ones directly come * from dictionary matches */ create view PersonStrongWithNewLine as (select P.person as person from Person1 P)</p>
    <p>--union all -- (select P.person as person from Person1a_more P) union all (select P.person as person from Person3 P)</p>
    <p>union all (select P.person as person from Person4 P)</p>
    <p>union all (select P.person as person from Person3P1 P);</p>
    <p>create view PersonStrongSingleTokenOnly as (select P.person as person from Person5 P)</p>
    <p>union all (select P.person as person from Person6 P)</p>
    <p>union all (select P.firstname as person from FirstName P)</p>
    <p>union all (select P.lastname as person from LastName P)</p>
    <p>union all (select P.person as person from Person1a P);</p>
    <p>-- Yunyao: added 05/09/2008 to expand person names with suffix create view PersonStrongSingleTokenOnlyExpanded1 as select CombineSpans(P.person,S.suffix) as person from PersonStrongSingleTokenOnly P, PersonSuffix S</p>
    <p>where FollowsTok(P.person, S.suffix, 0, 0);</p>
    <p>-- Yunyao: added 04/14/2009 to expand single token person name with a single initial -- extend single token person with a single initial create view PersonStrongSingleTokenOnlyExpanded2 as select CombineSpans(R.person, RightContext(R.person,2)) as person from PersonStrongSingleTokenOnly R where MatchesRegex(/ +[\p{Upper}]\b\s*/, RightContext(R.person,3));</p>
    <p>create view PersonStrongSingleToken as (select P.person as person from</p>
    <p>PersonStrongSingleTokenOnly P) union all (select P.person as person from</p>
    <p>PersonStrongSingleTokenOnlyExpanded1 P) union all (select P.person as person from</p>
    <p>PersonStrongSingleTokenOnlyExpanded2 P);</p>
    <p>/** * Union all matches found by weak rules */ create view PersonWeak1WithNewLine as (select P.person as person from Person3r1 P)</p>
    <p>union all (select P.person as person from Person3r2 P)</p>
    <p>union all (select P.person as person from Person4r1 P)</p>
    <p>union all (select P.person as person from Person4r2 P)</p>
    <p>union all (select P.person as person from Person2 P)</p>
    <p>union all (select P.person as person from Person2a P)</p>
    <p>union all (select P.person as person from Person3P2 P)</p>
    <p>union all (select P.person as person from Person3P3 P);</p>
    <p>-- weak rules that identify (LastName, FirstName) create view PersonWeak2WithNewLine as (select P.person as person from Person4a P)</p>
    <p>union all (select P.person as person from Person4ar1 P)</p>
    <p>union all (select P.person as person from Person4ar2 P);</p>
    <p>--include 'core/GenericNE/PersonFilterNewLineSingle.aql'; --include 'core/GenericNE/Person-Filter.aql';</p>
    <p>create view PersonBase as (select P.person as person from</p>
    <p>PersonStrongWithNewLine P) union all (select P.person as person from</p>
    <p>PersonWeak1WithNewLine P) union all (select P.person as person from</p>
    <p>PersonWeak2WithNewLine P);</p>
    <p>output view PersonBase;</p>
    <p>from Dictionary('names/name_israel.dict', Doc.text) D where MatchesRegex(/\p{Lu}\p{M}*.{1,20}/, D.match);</p>
    <p>create view NamesAll as (select P.name as name from NameDict P) union all (select P.name as name from NameDict1 P) union all (select P.name as name from NameDict2 P) union all (select P.name as name from NameDict3 P) union all (select P.name as name from NameDict4 P) union all (select P.firstname as name from FirstName P) union all</p>
    <p>create view PersonDict as select C.name as name --from Consolidate(NamesAll.name) C; from NamesAll C consolidate on C.name;</p>
    <p>--========================================================== -- Actual Rules --==========================================================</p>
    <p>-- For 3-part Person names create view Person3P1 as select CombineSpans(F.firstname, L.lastname) as person from StrictFirstName F,</p>
    <p>StrictCapsPersonR S, StrictLastName L</p>
    <p>where FollowsTok(F.firstname, S.name, 0, 0) --and FollowsTok(S.name, L.lastname, 0, 0) and FollowsTok(F.firstname, L.lastname, 1, 1) and Not(Equals(GetText(F.firstname), GetText(L.lastname))) and Not(Equals(GetText(F.firstname), GetText(S.name))) and Not(Equals(GetText(S.name), GetText(L.lastname))) and Not(ContainsRegex(/[\n\r\t]/, SpanBetween(F.firstname, L.lastname)));</p>
    <p>create view Person3P2 as select CombineSpans(P.name, L.lastname) as person from PersonDict P,</p>
    <p>StrictCapsPersonR S, StrictLastName L</p>
    <p>where FollowsTok(P.name, S.name, 0, 0) --and FollowsTok(S.name, L.lastname, 0, 0) and FollowsTok(P.name, L.lastname, 1, 1) and Not(Equals(GetText(P.name), GetText(L.lastname))) and Not(Equals(GetText(P.name), GetText(S.name))) and Not(Equals(GetText(S.name), GetText(L.lastname))) and Not(ContainsRegex(/[\n\r\t]/, SpanBetween(P.name, L.lastname)));</p>
    <p>create view Person3P3 as select CombineSpans(F.firstname, P.name) as person from PersonDict P,</p>
    <p>StrictCapsPersonR S, StrictFirstName F</p>
    <p>where FollowsTok(F.firstname, S.name, 0, 0) --and FollowsTok(S.name, P.name, 0, 0) and FollowsTok(F.firstname, P.name, 1, 1) and Not(Equals(GetText(P.name), GetText(F.firstname))) and Not(Equals(GetText(P.name), GetText(S.name))) and Not(Equals(GetText(S.name), GetText(F.firstname))) and Not(ContainsRegex(/[\n\r\t]/, SpanBetween(F.firstname, P.name)));</p>
    <p>/** * Translation for Rule 1 * Handles names of persons like Mr. Vladimir E. Putin */ /* &lt;rule annotation=Person id=1&gt; &lt;token attribute={etc}INITIAL{etc}&gt;CANYWORD&lt;/token&gt; &lt;internal&gt; &lt;token attribute={etc}&gt;CAPSPERSON&lt;/token&gt; &lt;token attribute={etc}&gt;INITIALWORD&lt;/token&gt; &lt;token attribute={etc}&gt;CAPSPERSON&lt;/token&gt; &lt;/internal&gt; &lt;/rule&gt; */</p>
    <p>create view Person1 as select CombineSpans(CP1.name, CP2.name) as person from Initial I,</p>
    <p>CapsPerson CP1, InitialWord IW, CapsPerson CP2</p>
    <p>where FollowsTok(I.initial, CP1.name, 0, 0) and FollowsTok(CP1.name, IW.word, 0, 0) and FollowsTok(IW.word, CP2.name, 0, 0); --and Not(ContainsRegex(/[\n\r]/, SpanBetween(I.initial, CP2.name)));</p>
    <p>/** * Translation for Rule 1a * Handles names of persons like Mr. Vladimir Putin */ /* &lt;rule annotation=Person id=1a&gt; &lt;token attribute={etc}INITIAL{etc}&gt;CANYWORD&lt;/token&gt; &lt;internal&gt; &lt;token attribute={etc}&gt;CAPSPERSON&lt;/token&gt;{1,3} &lt;/internal&gt; &lt;/rule&gt;*/</p>
    <p>-- Split into two rules so that single token annotations are serperated from others -- Single token annotations create view Person1a1 as select CP1.name as person from Initial I,</p>
    <p>CapsPerson CP1 where FollowsTok(I.initial, CP1.name, 0, 0) --- start changing this block --- disallow allow newline and Not(ContainsRegex(/[\n\t]/,SpanBetween(I.initial,CP1.name))) --- end changing this block ;</p>
    <p>-- Yunyao: added 05/09/2008 to match patterns such as &quot;Mr. B. B. Buy&quot; /* create view Person1a2 as select CombineSpans(name.block, CP1.name) as person from Initial I,</p>
    <p>BlockTok(0, 1, 2, InitialWord.word) name, CapsPerson CP1</p>
    <p>where FollowsTok(I.initial, name.block, 0, 0) and FollowsTok(name.block, CP1.name, 0, 0) and Not(ContainsRegex(/[\n\t]/,CombineSpans(I.initial, CP1.name)));</p>
    <p>*/</p>
    <p>create view Person1a as -- ( select P.person as person from Person1a1 P</p>
    <p>-- ) -- union all -- (select P.person as person from Person1a2 P) ;</p>
    <p>/* create view Person1a_more as select name.block as person from Initial I,</p>
    <p>BlockTok(0, 2, 3, CapsPerson.name) name where FollowsTok(I.initial, name.block, 0, 0) and Not(ContainsRegex(/[\n\t]/,name.block))</p>
    <p>--- start changing this block -- disallow newline and Not(ContainsRegex(/[\n\t]/,SpanBetween(I.initial,name.block)))</p>
    <p>--- end changing this block ;</p>
    <p>*/</p>
    <p>/** * Translation for Rule 3 * Find person names like Thomas B.M. David */ /* &lt;rule annotation=Person id=3&gt; &lt;internal&gt; &lt;token attribute={etc}PERSON{etc}&gt;CAPSPERSON&lt;/token&gt; &lt;token attribute={etc}&gt;INITIALWORD&lt;/token&gt; &lt;token attribute={etc}PERSON{etc}&gt;CAPSPERSON&lt;/token&gt; &lt;/internal&gt; &lt;/rule&gt;*/</p>
    <p>create view Person3 as select CombineSpans(P1.name, P2.name) as person from PersonDict P1,</p>
    <p>--InitialWord IW, WeakInitialWord IW, PersonDict P2</p>
    <p>where FollowsTok(P1.name, IW.word, 0, 0) and FollowsTok(IW.word, P2.name, 0, 0) and Not(Equals(GetText(P1.name), GetText(P2.name)));</p>
    <p>/** * Translation for Rule 3r1 * * This relaxed version of rule '3' will find person names like Thomas B.M. David * But it only insists that the first word is in the person dictionary */ /* &lt;rule annotation=Person id=3r1&gt; &lt;internal&gt; &lt;token attribute={etc}PERSON:ST:FNAME{etc}&gt;CAPSPERSON&lt;/token&gt; &lt;token attribute={etc}&gt;INITIALWORD&lt;/token&gt; &lt;token attribute={etc}&gt;CAPSPERSON&lt;/token&gt; &lt;/internal&gt; &lt;/rule&gt; */</p>
    <p>create view Person3r1 as</p>
    <p>create view Initial as</p>
    <p>--'Junior' (Yunyao: comments out to avoid mismatches such as Junior National [team player], -- If we can have large negative dictionary to eliminate such mismatches, -- then this may be recovered --'Name:' ((Yunyao: comments out to avoid mismatches such as 'Name: Last Name') -- for German names -- TODO: need further test ,'herr', 'Fraeulein', 'Doktor', 'Herr Doktor', 'Frau Doktor', 'Herr Professor', 'Frau professor', 'Baron', 'graf'</p>
    <p>);</p>
    <p>-- Find dictionary matches for all title initials</p>
    <p>select D.match as initial --'Name:' ((Yunyao: comments out to avoid mismatches such as 'Name: Last Name') -- for German names -- TODO: need further test ,'herr', 'Fraeulein', 'Doktor', 'Herr Doktor', 'Frau Doktor', 'Herr Professor', 'Frau professor', 'Baron', 'graf'</p>
    <p>);</p>
    <p>-- Find dictionary matches for all title initials</p>
    <p>from Dictionary('InitialDict', Doc.text) D;</p>
    <p>-- Yunyao: added 05/09/2008 to capture person name suffix create dictionary PersonSuffixDict as ( ',jr.', ',jr', 'III', 'IV', 'V', 'VI'</p>
    <p>);</p>
    <p>create view PersonSuffix as select D.match as suffix from Dictionary('PersonSuffixDict', Doc.text) D;</p>
    <p>-- Find capitalized words that look like person names and not in the non-name dictionary create view CapsPersonCandidate as select R.match as name --from Regex(/\b\p{Upper}\p{Lower}[\p{Alpha}]{1,20}\b/, Doc.text) R --from Regex(/\b\p{Upper}\p{Lower}[\p{Alpha}]{0,10}(['-][\p{Upper}])?[\p{Alpha}]{1,10}\b/, Doc.text) R -- change to enable unicode match --from Regex(/\b\p{Lu}\p{M}*[\p{Ll}\p{Lo}]\p{M}*[\p{L}\p{M}*]{0,10}(['-][\p{Lu}\p{M}*])?[\p{L}\p{M}*]{1,10}\b/, Doc.text) R --from Regex(/\b\p{Lu}\p{M}*[\p{Ll}\p{Lo}]\p{M}*[\p{L}\p{M}*]{0,10}(['-][\p{Lu}\p{M}*])?(\p{L}\p{M}*){1,10}\b/, Doc.text) R -- Allow fully capitalized words --from Regex(/\b\p{Lu}\p{M}*(\p{L}\p{M}*){0,10}(['-][\p{Lu}\p{M}*])?(\p{L}\p{M}*){1,10}\b/, Doc.text) R from RegexTok(/\p{Lu}\p{M}*(\p{L}\p{M}*){0,10}(['-][\p{Lu}\p{M}*])?(\p{L}\p{M}*){1,10}/, 4, Doc.text) R --' where Not(ContainsDicts(</p>
    <p>'FilterPersonDict', 'filterPerson_position.dict', 'filterPerson_german.dict', 'InitialDict', 'StrongPhoneVariantDictionary', 'stateList.dict', 'organization_suffix.dict', 'industryType_suffix.dict', 'streetSuffix_forPerson.dict', 'wkday.dict', 'nationality.dict', 'stateListAbbrev.dict', 'stateAbbrv.ChicagoAPStyle.dict', R.match));</p>
    <p>create view CapsPerson as select C.name as name from CapsPersonCandidate C where Not(MatchesRegex(/(\p{Lu}\p{M}*)+-.*([\p{Ll}\p{Lo}]\p{M}*).*/, C.name)) and Not(MatchesRegex(/.*([\p{Ll}\p{Lo}]\p{M}*).*-(\p{Lu}\p{M}*)+/, C.name));</p>
    <p>-- Find strict capitalized words with two letter or more (relaxed version of StrictCapsPerson)</p>
    <p>--============================================================ --TODO: need to think through how to deal with hypened name -- one way to do so is to run Regex(pattern, CP.name) and enforce CP.name does not contain ' -- need more testing before confirming the change</p>
    <p>create view CapsPersonNoP as select CP.name as name from CapsPerson CP where Not(ContainsRegex(/'/, CP.name)); --'</p>
    <p>create view StrictCapsPersonR as select R.match as name --from Regex(/\b\p{Lu}\p{M}*(\p{L}\p{M}*){1,20}\b/, CapsPersonNoP.name) R; from RegexTok(/\p{Lu}\p{M}*(\p{L}\p{M}*){1,20}/, 1, CapsPersonNoP.name) R;</p>
    <p>--============================================================</p>
    <p>-- Find strict capitalized words --create view StrictCapsPerson as create view StrictCapsPerson as select R.name as name from StrictCapsPersonR R where MatchesRegex(/\b\p{Lu}\p{M}*[\p{Ll}\p{Lo}]\p{M}*(\p{L}\p{M}*){1,20}\b/, R.name);</p>
    <p>-- Find dictionary matches for all last names create view StrictLastName1 as select D.match as lastname from Dictionary('strictLast.dict', Doc.text) D --where MatchesRegex(/\p{Upper}\p{Lower}[\p{Alpha}]{0,20}/, D.match); -- changed to enable unicode match where MatchesRegex(/((\p{L}\p{M}*)+\s+)?\p{Lu}\p{M}*.{1,20}/, D.match);</p>
    <p>create view StrictLastName2 as select D.match as lastname from Dictionary('strictLast_german.dict', Doc.text) D --where MatchesRegex(/\p{Upper}\p{Lower}[\p{Alpha}]{0,20}/, D.match); --where MatchesRegex(/\p{Upper}.{1,20}/, D.match); -- changed to enable unicode match where MatchesRegex(/((\p{L}\p{M}*)+\s+)?\p{Lu}\p{M}*.{1,20}/, D.match);</p>
    <p>create view StrictLastName3 as select D.match as lastname from Dictionary('strictLast_german_bluePages.dict', Doc.text) D --where MatchesRegex(/\p{Upper}\p{Lower}[\p{Alpha}]{0,20}/, D.match); --where MatchesRegex(/\p{Upper}.{1,20}/, D.match); -- changed to enable unicode match where MatchesRegex(/((\p{L}\p{M}*)+\s+)?\p{Lu}\p{M}*.{1,20}/, D.match);</p>
    <p>create view StrictLastName4 as select D.match as lastname from Dictionary('uniqMostCommonSurname.dict', Doc.text) D --where MatchesRegex(/\p{Upper}\p{Lower}[\p{Alpha}]{0,20}/, D.match); --where MatchesRegex(/\p{Upper}.{1,20}/, D.match); -- changed to enable unicode match where MatchesRegex(/((\p{L}\p{M}*)+\s+)?\p{Lu}\p{M}*.{1,20}/, D.match);</p>
    <p>create view StrictLastName5 as select D.match as lastname from Dictionary('names/strictLast_italy.dict', Doc.text) D where MatchesRegex(/((\p{L}\p{M}*)+\s+)?\p{Lu}\p{M}*.{1,20}/, D.match);</p>
    <p>create view StrictLastName6 as select D.match as lastname from Dictionary('names/strictLast_france.dict', Doc.text) D where MatchesRegex(/((\p{L}\p{M}*)+\s+)?\p{Lu}\p{M}*.{1,20}/, D.match);</p>
    <p>create view StrictLastName7 as select D.match as lastname from Dictionary('names/strictLast_spain.dict', Doc.text) D where MatchesRegex(/((\p{L}\p{M}*)+\s+)?\p{Lu}\p{M}*.{1,20}/, D.match);</p>
    <p>create view StrictLastName8 as select D.match as lastname from Dictionary('names/strictLast_india.partial.dict', Doc.text) D where MatchesRegex(/((\p{L}\p{M}*)+\s+)?\p{Lu}\p{M}*.{1,20}/, D.match);</p>
    <p>create view StrictLastName9 as select D.match as lastname from Dictionary('names/strictLast_israel.dict', Doc.text) D where MatchesRegex(/((\p{L}\p{M}*)+\s+)?\p{Lu}\p{M}*.{1,20}/, D.match);</p>
    <p>create view StrictLastName as (select S.lastname as lastname from StrictLastName1 S) union all (select S.lastname as lastname from StrictLastName2 S) union all (select S.lastname as lastname from StrictLastName3 S) union all (select S.lastname as lastname from StrictLastName4 S) union all (select S.lastname as lastname from StrictLastName5 S) union all (select S.lastname as lastname from StrictLastName6 S) union all (select S.lastname as lastname from StrictLastName7 S) union all (select S.lastname as lastname from StrictLastName8 S) union all (select S.lastname as lastname from StrictLastName9 S);</p>
    <p>-- Relaxed version of last name create view RelaxedLastName1 as select CombineSpans(SL.lastname, CP.name) as lastname from StrictLastName SL,</p>
    <p>StrictCapsPerson CP where FollowsTok(SL.lastname, CP.name, 1, 1) and MatchesRegex(/\-/, SpanBetween(SL.lastname, CP.name));</p>
    <p>create view RelaxedLastName2 as select CombineSpans(CP.name, SL.lastname) as lastname from StrictLastName SL,</p>
    <p>StrictCapsPerson CP where FollowsTok(CP.name, SL.lastname, 1, 1) and MatchesRegex(/\-/, SpanBetween(CP.name, SL.lastname));</p>
    <p>-- all the last names create view LastNameAll as (select N.lastname as lastname from StrictLastName N) union all (select N.lastname as lastname from RelaxedLastName1 N) union all (select N.lastname as lastname from RelaxedLastName2 N);</p>
    <p>create view ValidLastNameAll as select N.lastname as lastname</p>
    <p>---------------------------------------- Document Preprocessing --------------------------------------create view Doc as select D.text as text from DocScan D;</p>
    <p>----------------------------------------- Basic Named Entity Annotators ---------------------------------------</p>
    <p>-- Find initial words create view InitialWord1 as select R.match as word --from Regex(/\b([\p{Upper}]\.\s*){1,5}\b/, Doc.text) R from RegexTok(/([\p{Upper}]\.\s*){1,5}/, 10, Doc.text)</p>
    <p>R -- added on 04/18/2008 where Not(MatchesRegex(/M\.D\./, R.match));</p>
    <p>-- Yunyao: added on 11/21/2008 to capture names with prefix (we use it as initial -- to avoid adding too many commplex rules) create view InitialWord2 as select D.match as word from Dictionary('specialNamePrefix.dict', Doc.text)</p>
    <p>D;</p>
    <p>create view InitialWord as (select I.word as word from InitialWord1 I) union all (select I.word as word from InitialWord2 I);</p>
    <p>-- Find weak initial words create view WeakInitialWord as select R.match as word --from Regex(/\b([\p{Upper}]\.?\s*){1,5}\b/, Doc.text)</p>
    <p>R; from RegexTok(/([\p{Upper}]\.?\s*){1,5}/, 10, Doc.text)</p>
    <p>R -- added on 05/12/2008 -- Do not allow weak initial word to be a word longer</p>
    <p>than three characters where Not(ContainsRegex(/[\p{Upper}]{3}/,</p>
    <p>R.match)) -- added on 04/14/2009 -- Do not allow weak initial words to match the</p>
    <p>timezon and Not(ContainsDict('timeZone.dict', R.match));</p>
    <p>------------------------------------------------ Strong Phone Numbers ----------------------------------------------create dictionary StrongPhoneVariantDictionary as ( 'phone', 'cell', 'contact', 'direct', 'office', -- Yunyao: Added new strong clues for phone</p>
    <p>numbers 'tel', 'dial', 'Telefon', 'mobile', 'Ph', 'Phone Number', 'Direct Line', 'Telephone No', 'TTY', 'Toll Free', 'Toll-free', -- German 'Fon', 'Telefon Geschaeftsstelle', 'Telefon Geschftsstelle', 'Telefon Zweigstelle', 'Telefon Hauptsitz', 'Telefon (Geschaeftsstelle)', 'Telefon (Geschftsstelle)', 'Telefon (Zweigstelle)', 'Telefon (Hauptsitz)', 'Telefonnummer', 'Telefon Geschaeftssitz', 'Telefon Geschftssitz', 'Telefon (Geschaeftssitz)', 'Telefon (Geschftssitz)', 'Telefon Persnlich', 'Telefon persoenlich', 'Telefon (Persnlich)', 'Telefon (persoenlich)', 'Handy', 'Handy-Nummer', 'Telefon arbeit', 'Telefon (arbeit)'</p>
    <p>);</p>
    <p>--include 'core/GenericNE/Person.aql';</p>
    <p>create dictionary FilterPersonDict as ( 'Travel', 'Fellow', 'Sir', 'IBMer', 'Researcher',</p>
    <p>'All','Tell', 'Friends', 'Friend', 'Colleague', 'Colleagues',</p>
    <p>'Managers','If', 'Customer', 'Users', 'User', 'Valued', 'Executive',</p>
    <p>'Chairs', 'New', 'Owner', 'Conference', 'Please', 'Outlook',</p>
    <p>'Lotus', 'Notes', 'This', 'That', 'There', 'Here', 'Subscribers', 'What',</p>
    <p>'When', 'Where', 'Which', 'With', 'While', 'Thanks', 'Thanksgiving','Senator',</p>
    <p>'Platinum', 'Perspective', 'Manager', 'Ambassador', 'Professor', 'Dear',</p>
    <p>'Contact', 'Cheers', 'Athelet', 'And', 'Act', 'But', 'Hello', 'Call', 'From', 'Center',</p>
    <p>'The', 'Take', 'Junior', 'Both', 'Communities', 'Greetings', 'Hope',</p>
    <p>'Restaurants', 'Properties', 'Let', 'Corp', 'Memorial', 'You', 'Your', 'Our', 'My',</p>
    <p>'His','Her', 'Their','Popcorn', 'Name', 'July', 'June','Join', 'Business', 'Administrative', 'South', 'Members',</p>
    <p>'Address', 'Please', 'List', 'Public', 'Inc', 'Parkway', 'Brother', 'Buy', 'Then',</p>
    <p>'Services', 'Statements', 'President', 'Governor', 'Commissioner',</p>
    <p>'Commitment', 'Commits', 'Hey', 'Director', 'End', 'Exit', 'Experiences', 'Finance',</p>
    <p>'Elementary', 'Wednesday', 'Nov', 'Infrastructure', 'Inside', 'Convention', 'Judge', 'Lady', 'Friday', 'Project', 'Projected', 'Recalls', 'Regards', 'Recently', 'Administration',</p>
    <p>'Independence', 'Denied', 'Unfortunately', 'Under', 'Uncle', 'Utility', 'Unlike',</p>
    <p>'Was', 'Were', 'Secretary', 'Speaker', 'Chairman', 'Consider', 'Consultant',</p>
    <p>'County', 'Court', 'Defensive', 'Northwestern', 'Place', 'Hi', 'Futures', 'Athlete',</p>
    <p>'Invitational', 'System', 'International', 'Main', 'Online', 'Ideally' -- more entries ,'If','Our', 'About', 'Analyst', 'On', 'Of', 'By', 'HR', 'Mkt',</p>
    <p>'Pre', 'Post', 'Condominium', 'Ice', 'Surname', 'Lastname',</p>
    <p>'firstname', 'Name', 'familyname', -- Italian greeting 'Ciao', -- Spanish greeting 'Hola', -- French greeting 'Bonjour', -- new entries 'Pro','Bono','Enterprises','Group','Said','Says','Assis</p>
    <p>tant','Vice','Warden','Contribution', 'Research', 'Development', 'Product', 'Sales',</p>
    <p>'Support', 'Manager', 'Telephone', 'Phone', 'Contact', 'Information', 'Electronics','Managed','West','East','North','South', 'Teaches','Ministry', 'Church', 'Association',</p>
    <p>'Laboratories', 'Living', 'Community', 'Visiting', 'Officer', 'After', 'Pls', 'FYI', 'Only', 'Additionally',</p>
    <p>'Adding', 'Acquire', 'Addition', 'America', -- short phrases that are likely to be at the start of a</p>
    <p>sentence 'Yes', 'No', 'Ja', 'Nein','Kein', 'Keine', 'Gegenstimme', -- TODO: to be double checked 'Another', 'Anyway','Associate', 'At', 'Athletes', 'It',</p>
    <p>'Enron', 'EnronXGate', 'Have', 'However', 'Company', 'Companies', 'IBM','Annual', -- common verbs appear with person names in</p>
    <p>financial reports -- ideally we want to have a general comprehensive</p>
    <p>verb list to use as a filter dictionary 'Joins', 'Downgrades', 'Upgrades', 'Reports', 'Sees', 'Warns', 'Announces', 'Reviews' -- Laura 06/02/2009: new filter dict for title for SEC</p>
    <p>domain in filterPerson_title.dict );</p>
    <p>create dictionary GreetingsDict as ( 'Hey', 'Hi', 'Hello', 'Dear', -- German greetings 'Liebe', 'Lieber', 'Herr', 'Frau', 'Hallo', -- Italian 'Ciao', -- Spanish 'Hola', -- French 'Bonjour'</p>
    <p>);</p>
    <p>create dictionary InitialDict as ( 'rev.', 'col.', 'reverend', 'prof.', 'professor.', 'lady', 'miss.', 'mrs.', 'mrs', 'mr.', 'pt.', 'ms.', 'messrs.', 'dr.', 'master.', 'marquis', 'monsieur', 'ds', 'di' --'Dear' (Yunyao: comments out to avoid</p>
    <p>mismatches such as Dear Member), --'Junior' (Yunyao: comments out to avoid</p>
    <p>mismatches such as Junior National [team player], -- If we can have large negative dictionary to</p>
    <p>eliminate such mismatches, -- then this may be recovered</p>
    <p>Example 1: Explaining Extraction Results --------------------------------------</p>
    <p>-- Document Preprocessing --------------------------------------create view Doc as select D.text as text from DocScan D;</p>
    <p>----------------------------------------- Basic Named Entity Annotators ---------------------------------------</p>
    <p>-- Find initial words create view InitialWord1 as select R.match as word --from Regex(/\b([\p{Upper}]\.\s*){1,5}\b/, Doc.text) R from RegexTok(/([\p{Upper}]\.\s*){1,5}/, 10, Doc.text)</p>
    <p>R -- added on 04/18/2008 where Not(MatchesRegex(/M\.D\./, R.match));</p>
    <p>-- Yunyao: added on 11/21/2008 to capture names with prefix (we use it as initial -- to avoid adding too many commplex rules) create view InitialWord2 as select D.match as word from Dictionary('specialNamePrefix.dict', Doc.text)</p>
    <p>D;</p>
    <p>create view InitialWord as (select I.word as word from InitialWord1 I) union all (select I.word as word from InitialWord2 I);</p>
    <p>-- Find weak initial words create view WeakInitialWord as select R.match as word --from Regex(/\b([\p{Upper}]\.?\s*){1,5}\b/, Doc.text)</p>
    <p>R; from RegexTok(/([\p{Upper}]\.?\s*){1,5}/, 10, Doc.text)</p>
    <p>R -- added on 05/12/2008 -- Do not allow weak initial word to be a word longer</p>
    <p>than three characters where Not(ContainsRegex(/[\p{Upper}]{3}/,</p>
    <p>R.match)) -- added on 04/14/2009 -- Do not allow weak initial words to match the</p>
    <p>timezon and Not(ContainsDict('timeZone.dict', R.match));</p>
    <p>------------------------------------------------ Strong Phone Numbers ----------------------------------------------create dictionary StrongPhoneVariantDictionary as ( 'phone', 'cell', 'contact', 'direct', 'office', -- Yunyao: Added new strong clues for phone</p>
    <p>numbers 'tel', 'dial', 'Telefon', 'mobile', 'Ph', 'Phone Number', 'Direct Line', 'Telephone No', 'TTY', 'Toll Free', 'Toll-free', -- German 'Fon', 'Telefon Geschaeftsstelle', 'Telefon Geschftsstelle', 'Telefon Zweigstelle', 'Telefon Hauptsitz', 'Telefon (Geschaeftsstelle)', 'Telefon (Geschftsstelle)', 'Telefon (Zweigstelle)', 'Telefon (Hauptsitz)', 'Telefonnummer', 'Telefon Geschaeftssitz', 'Telefon Geschftssitz', 'Telefon (Geschaeftssitz)', 'Telefon (Geschftssitz)', 'Telefon Persnlich', 'Telefon persoenlich', 'Telefon (Persnlich)', 'Telefon (persoenlich)', 'Handy', 'Handy-Nummer', 'Telefon arbeit', 'Telefon (arbeit)'</p>
    <p>);</p>
    <p>--include 'core/GenericNE/Person.aql';</p>
    <p>create dictionary FilterPersonDict as ( 'Travel', 'Fellow', 'Sir', 'IBMer', 'Researcher',</p>
    <p>'All','Tell', 'Friends', 'Friend', 'Colleague', 'Colleagues',</p>
    <p>'Managers','If', 'Customer', 'Users', 'User', 'Valued', 'Executive',</p>
    <p>'Chairs', 'New', 'Owner', 'Conference', 'Please', 'Outlook',</p>
    <p>'Lotus', 'Notes', 'This', 'That', 'There', 'Here', 'Subscribers', 'What',</p>
    <p>'When', 'Where', 'Which', 'With', 'While', 'Thanks', 'Thanksgiving','Senator',</p>
    <p>'Platinum', 'Perspective', 'Manager', 'Ambassador', 'Professor', 'Dear',</p>
    <p>'Contact', 'Cheers', 'Athelet', 'And', 'Act', 'But', 'Hello', 'Call', 'From', 'Center',</p>
    <p>'The', 'Take', 'Junior', 'Both', 'Communities', 'Greetings', 'Hope',</p>
    <p>'Restaurants', 'Properties', 'Let', 'Corp', 'Memorial', 'You', 'Your', 'Our', 'My',</p>
    <p>'His','Her', 'Their','Popcorn', 'Name', 'July', 'June','Join', 'Business', 'Administrative', 'South', 'Members',</p>
    <p>'Address', 'Please', 'List', 'Public', 'Inc', 'Parkway', 'Brother', 'Buy', 'Then',</p>
    <p>'Services', 'Statements', 'President', 'Governor', 'Commissioner',</p>
    <p>'Commitment', 'Commits', 'Hey', 'Director', 'End', 'Exit', 'Experiences', 'Finance',</p>
    <p>'Elementary', 'Wednesday', 'Nov', 'Infrastructure', 'Inside', 'Convention', 'Judge', 'Lady', 'Friday', 'Project', 'Projected', 'Recalls', 'Regards', 'Recently', 'Administration',</p>
    <p>'Independence', 'Denied', 'Unfortunately', 'Under', 'Uncle', 'Utility', 'Unlike',</p>
    <p>'Was', 'Were', 'Secretary', 'Speaker', 'Chairman', 'Consider', 'Consultant',</p>
    <p>'County', 'Court', 'Defensive', 'Northwestern', 'Place', 'Hi', 'Futures', 'Athlete',</p>
    <p>'Invitational', 'System', 'International', 'Main', 'Online', 'Ideally' -- more entries ,'If','Our', 'About', 'Analyst', 'On', 'Of', 'By', 'HR', 'Mkt',</p>
    <p>'Pre', 'Post', 'Condominium', 'Ice', 'Surname', 'Lastname',</p>
    <p>'firstname', 'Name', 'familyname', -- Italian greeting 'Ciao', -- Spanish greeting 'Hola', -- French greeting 'Bonjour', -- new entries 'Pro','Bono','Enterprises','Group','Said','Says','Assis</p>
    <p>tant','Vice','Warden','Contribution', 'Research', 'Development', 'Product', 'Sales',</p>
    <p>'Support', 'Manager', 'Telephone', 'Phone', 'Contact', 'Information', 'Electronics','Managed','West','East','North','South', 'Teaches','Ministry', 'Church', 'Association',</p>
    <p>'Laboratories', 'Living', 'Community', 'Visiting', 'Officer', 'After', 'Pls', 'FYI', 'Only', 'Additionally',</p>
    <p>'Adding', 'Acquire', 'Addition', 'America', -- short phrases that are likely to be at the start of a</p>
    <p>sentence 'Yes', 'No', 'Ja', 'Nein','Kein', 'Keine', 'Gegenstimme', -- TODO: to be double checked 'Another', 'Anyway','Associate', 'At', 'Athletes', 'It',</p>
    <p>'Enron', 'EnronXGate', 'Have', 'However', 'Company', 'Companies', 'IBM','Annual', -- common verbs appear with person names in</p>
    <p>financial reports -- ideally we want to have a general comprehensive</p>
    <p>verb list to use as a filter dictionary 'Joins', 'Downgrades', 'Upgrades', 'Reports', 'Sees', 'Warns', 'Announces', 'Reviews' -- Laura 06/02/2009: new filter dict for title for SEC</p>
    <p>domain in filterPerson_title.dict );</p>
    <p>create dictionary GreetingsDict as ( 'Hey', 'Hi', 'Hello', 'Dear', -- German greetings 'Liebe', 'Lieber', 'Herr', 'Frau', 'Hallo', -- Italian 'Ciao', -- Spanish 'Hola', -- French 'Bonjour'</p>
    <p>);</p>
    <p>create dictionary InitialDict as ( 'rev.', 'col.', 'reverend', 'prof.', 'professor.', 'lady', 'miss.', 'mrs.', 'mrs', 'mr.', 'pt.', 'ms.', 'messrs.', 'dr.', 'master.', 'marquis', 'monsieur', 'ds', 'di' --'Dear' (Yunyao: comments out to avoid</p>
    <p>mismatches such as Dear Member),</p>
    <p>SystemTs Person extractor</p>
    <p>~250 AQL rules</p>
    <p>SystemTs Person extractor</p>
    <p>~250 AQL rules</p>
    <p>Global financial services firm Morgan Stanley announced  Global financial services firm Morgan Stanley announced</p>
    <p>Person</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation82</p>
    <p>&lt;annotations&gt;</p>
    <p>&lt;text&gt;</p>
    <p>&lt;Person&gt;</p>
    <p>&lt;start&gt;52&lt;/start&gt;</p>
    <p>&lt;end&gt;68&lt;/end&gt;</p>
    <p>&lt;annotation&gt;Peter Blackburn</p>
    <p>&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;PER&lt;/typeinfo&gt;</p>
    <p>&lt;/Person&gt;</p>
    <p>&lt;Person&gt;</p>
    <p>&lt;start&gt;351&lt;/start&gt;</p>
    <p>&lt;end&gt;367&lt;/end&gt;</p>
    <p>&lt;annotation&gt;Werner Zwingmann&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;PER&lt;/typeinfo&gt;</p>
    <p>&lt;/Person&gt;</p>
    <p>&lt;Person&gt;</p>
    <p>&lt;start&gt;617&lt;/start&gt;</p>
    <p>&lt;end&gt;637&lt;/end&gt;</p>
    <p>&lt;annotation&gt;Nikolaus van der Pas&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;PER&lt;/typeinfo&gt;</p>
    <p>&lt;/Person&gt;</p>
    <p>&lt;Person&gt;</p>
    <p>&lt;start&gt;849&lt;/start&gt;</p>
    <p>&lt;end&gt;863&lt;/end&gt;</p>
    <p>&lt;annotation&gt;Franz Fischler&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;PER&lt;/typeinfo&gt;</p>
    <p>&lt;/Person&gt;</p>
    <p>&lt;Person&gt;</p>
    <p>&lt;start&gt;1021&lt;/start&gt;</p>
    <p>&lt;end&gt;1029&lt;/end&gt;</p>
    <p>&lt;annotation&gt;Fischler&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;PER&lt;/typeinfo&gt;</p>
    <p>&lt;/Person&gt;</p>
    <p>&lt;Person&gt;</p>
    <p>&lt;start&gt;1215&lt;/start&gt;</p>
    <p>&lt;end&gt;1223&lt;/end&gt;</p>
    <p>&lt;annotation&gt;Fischler&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;PER&lt;/typeinfo&gt;</p>
    <p>&lt;/Person&gt;</p>
    <p>&lt;Person&gt;</p>
    <p>&lt;start&gt;1450&lt;/start&gt;</p>
    <p>&lt;end&gt;1467&lt;/end&gt;</p>
    <p>&lt;annotation&gt;Loyola de Palacio&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;PER&lt;/typeinfo&gt;</p>
    <p>&lt;/Person&gt;</p>
    <p>&lt;Person&gt;</p>
    <p>&lt;start&gt;1488&lt;/start&gt;</p>
    <p>&lt;end&gt;1496&lt;/end&gt;</p>
    <p>&lt;annotation&gt;Fischler&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;PER&lt;/typeinfo&gt;</p>
    <p>&lt;/Person&gt;</p>
    <p>&lt;Person&gt;</p>
    <p>&lt;start&gt;1634&lt;/start&gt;</p>
    <p>&lt;end&gt;1642&lt;/end&gt;</p>
    <p>&lt;annotation&gt;Fischler&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;PER&lt;/typeinfo&gt;</p>
    <p>&lt;/Person&gt;</p>
    <p>&lt;Person&gt;</p>
    <p>&lt;start&gt;2388&lt;/start&gt;</p>
    <p>&lt;end&gt;2404&lt;/end&gt;</p>
    <p>&lt;annotation&gt;John Lloyd Jones&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;PER&lt;/typeinfo&gt;</p>
    <p>&lt;/Person&gt;</p>
    <p>&lt;Organization&gt;</p>
    <p>&lt;start&gt;2&lt;/start&gt;</p>
    <p>&lt;end&gt;4&lt;/end&gt;</p>
    <p>&lt;annotation&gt;EU&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;ORG&lt;/typeinfo&gt;</p>
    <p>&lt;/Organization&gt;</p>
    <p>&lt;Organization&gt;</p>
    <p>&lt;start&gt;94&lt;/start&gt;</p>
    <p>&lt;end&gt;113&lt;/end&gt;</p>
    <p>&lt;annotation&gt;European Commission&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;ORG&lt;/typeinfo&gt;</p>
    <p>&lt;/Organization&gt;</p>
    <p>&lt;Organization&gt;</p>
    <p>&lt;start&gt;312&lt;/start&gt;</p>
    <p>&lt;end&gt;326&lt;/end&gt;</p>
    <p>&lt;annotation&gt;European Union&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;ORG&lt;/typeinfo&gt;</p>
    <p>&lt;/Organization&gt;</p>
    <p>&lt;Organization&gt;</p>
    <p>&lt;start&gt;587&lt;/start&gt;</p>
    <p>&lt;end&gt;597&lt;/end&gt;</p>
    <p>&lt;annotation&gt;Commission&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;ORG&lt;/typeinfo&gt;</p>
    <p>&lt;/Organization&gt;</p>
    <p>&lt;Organization&gt;</p>
    <p>&lt;start&gt;777&lt;/start&gt;</p>
    <p>&lt;end&gt;791&lt;/end&gt;</p>
    <p>&lt;annotation&gt;European Union&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;ORG&lt;/typeinfo&gt;</p>
    <p>&lt;/Organization&gt;</p>
    <p>&lt;Organization&gt;</p>
    <p>&lt;start&gt;828&lt;/start&gt;</p>
    <p>&lt;end&gt;830&lt;/end&gt;</p>
    <p>&lt;annotation&gt;EU&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;ORG&lt;/typeinfo&gt;</p>
    <p>&lt;/Organization&gt;</p>
    <p>&lt;Organization&gt;</p>
    <p>&lt;start&gt;1264&lt;/start&gt;</p>
    <p>&lt;end&gt;1266&lt;/end&gt;</p>
    <p>&lt;annotation&gt;EU&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;ORG&lt;/typeinfo&gt;</p>
    <p>&lt;/Organization&gt;</p>
    <p>&lt;Organization&gt;</p>
    <p>&lt;start&gt;1503&lt;/start&gt;</p>
    <p>&lt;end&gt;1505&lt;/end&gt;</p>
    <p>&lt;annotation&gt;EU&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;ORG&lt;/typeinfo&gt;</p>
    <p>&lt;/Organization&gt;</p>
    <p>&lt;Organization&gt;</p>
    <p>&lt;start&gt;1662&lt;/start&gt;</p>
    <p>&lt;end&gt;1664&lt;/end&gt;</p>
    <p>&lt;annotation&gt;EU&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;ORG&lt;/typeinfo&gt;</p>
    <p>&lt;/Organization&gt;</p>
    <p>&lt;Organization&gt;</p>
    <p>&lt;start&gt;2340&lt;/start&gt;</p>
    <p>&lt;end&gt;2370&lt;/end&gt;</p>
    <p>&lt;annotation&gt;Welsh National Farmers ' Union&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;ORG&lt;/typeinfo&gt;</p>
    <p>&lt;/Organization&gt;</p>
    <p>&lt;Organization&gt;</p>
    <p>&lt;start&gt;2373&lt;/start&gt;</p>
    <p>&lt;end&gt;2376&lt;/end&gt;</p>
    <p>&lt;annotation&gt;NFU&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;ORG&lt;/typeinfo&gt;</p>
    <p>&lt;/Organization&gt;</p>
    <p>&lt;Organization&gt;</p>
    <p>&lt;start&gt;2413&lt;/start&gt;</p>
    <p>&lt;end&gt;2422&lt;/end&gt;</p>
    <p>&lt;annotation&gt;BBC radio&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;ORG&lt;/typeinfo&gt;</p>
    <p>&lt;/Organization&gt;</p>
    <p>&lt;Location&gt;</p>
    <p>&lt;start&gt;69&lt;/start&gt;</p>
    <p>&lt;end&gt;77&lt;/end&gt;</p>
    <p>&lt;annotation&gt;BRUSSELS&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;LOC&lt;/typeinfo&gt;</p>
    <p>&lt;/Location&gt;</p>
    <p>&lt;Location&gt;</p>
    <p>&lt;start&gt;279&lt;/start&gt;</p>
    <p>&lt;end&gt;286&lt;/end&gt;</p>
    <p>&lt;annotation&gt;Germany&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;LOC&lt;/typeinfo&gt;</p>
    <p>&lt;/Location&gt;</p>
    <p>&lt;Location&gt;</p>
    <p>&lt;start&gt;443&lt;/start&gt;</p>
    <p>&lt;end&gt;450&lt;/end&gt;</p>
    <p>&lt;annotation&gt;Britain&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;LOC&lt;/typeinfo&gt;</p>
    <p>&lt;/Location&gt;</p>
    <p>&lt;Location&gt;</p>
    <p>&lt;start&gt;1075&lt;/start&gt;</p>
    <p>&lt;end&gt;1082&lt;/end&gt;</p>
    <p>&lt;annotation&gt;Britain&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;LOC&lt;/typeinfo&gt;</p>
    <p>&lt;/Location&gt;</p>
    <p>&lt;Location&gt;</p>
    <p>&lt;start&gt;1087&lt;/start&gt;</p>
    <p>&lt;end&gt;1093&lt;/end&gt;</p>
    <p>&lt;annotation&gt;France&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;LOC&lt;/typeinfo&gt;</p>
    <p>&lt;/Location&gt;</p>
    <p>&lt;Location&gt;</p>
    <p>&lt;start&gt;1608&lt;/start&gt;</p>
    <p>&lt;end&gt;1614&lt;/end&gt;</p>
    <p>&lt;annotation&gt;France&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;LOC&lt;/typeinfo&gt;</p>
    <p>&lt;/Location&gt;</p>
    <p>&lt;Location&gt;</p>
    <p>&lt;start&gt;1619&lt;/start&gt;</p>
    <p>&lt;end&gt;1626&lt;/end&gt;</p>
    <p>&lt;annotation&gt;Britain&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;LOC&lt;/typeinfo&gt;</p>
    <p>&lt;/Location&gt;</p>
    <p>&lt;Location&gt;</p>
    <p>&lt;start&gt;2227&lt;/start&gt;</p>
    <p>&lt;end&gt;2233&lt;/end&gt;</p>
    <p>&lt;annotation&gt;Europe&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;LOC&lt;/typeinfo&gt;</p>
    <p>&lt;/Location&gt;</p>
    <p>&lt;Location&gt;</p>
    <p>&lt;start&gt;2320&lt;/start&gt;</p>
    <p>&lt;end&gt;2327&lt;/end&gt;</p>
    <p>&lt;annotation&gt;Germany&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;LOC&lt;/typeinfo&gt;</p>
    <p>&lt;/Location&gt;</p>
    <p>&lt;Location&gt;</p>
    <p>&lt;start&gt;2426&lt;/start&gt;</p>
    <p>&lt;end&gt;2430&lt;/end&gt;</p>
    <p>&lt;annotation&gt;Bonn&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;LOC&lt;/typeinfo&gt;</p>
    <p>&lt;/Location&gt;</p>
    <p>&lt;Location&gt;</p>
    <p>&lt;start&gt;2641&lt;/start&gt;</p>
    <p>&lt;end&gt;2648&lt;/end&gt;</p>
    <p>&lt;annotation&gt;Germany&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;LOC&lt;/typeinfo&gt;</p>
    <p>&lt;/Location&gt;</p>
    <p>&lt;Location&gt;</p>
    <p>&lt;start&gt;2676&lt;/start&gt;</p>
    <p>&lt;end&gt;2683&lt;/end&gt;</p>
    <p>&lt;annotation&gt;Britain&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;LOC&lt;/typeinfo&gt;</p>
    <p>&lt;/Location&gt;</p>
    <p>&lt;/text&gt;</p>
    <p>&lt;/annotations&gt;</p>
    <p>&lt;annotations&gt;</p>
    <p>&lt;text&gt;</p>
    <p>&lt;Person&gt;</p>
    <p>&lt;start&gt;7&lt;/start&gt;</p>
    <p>&lt;end&gt;14&lt;/end&gt;</p>
    <p>&lt;annotation&gt;Hendrix&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;PER&lt;/typeinfo&gt;</p>
    <p>&lt;/Person&gt;</p>
    <p>&lt;Person&gt;</p>
    <p>&lt;start&gt;137&lt;/start&gt;</p>
    <p>&lt;end&gt;149&lt;/end&gt;</p>
    <p>&lt;annotation&gt;Jimi Hendrix&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;PER&lt;/typeinfo&gt;</p>
    <p>&lt;/Person&gt;</p>
    <p>&lt;Person&gt;</p>
    <p>&lt;start&gt;362&lt;/start&gt;</p>
    <p>&lt;end&gt;369&lt;/end&gt;</p>
    <p>&lt;annotation&gt;Hendrix&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;PER&lt;/typeinfo&gt;</p>
    <p>&lt;/Person&gt;</p>
    <p>&lt;Person&gt;</p>
    <p>&lt;start&gt;655&lt;/start&gt;</p>
    <p>&lt;end&gt;662&lt;/end&gt;</p>
    <p>&lt;annotation&gt;Hendrix&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;PER&lt;/typeinfo&gt;</p>
    <p>&lt;/Person&gt;</p>
    <p>&lt;Person&gt;</p>
    <p>&lt;start&gt;684&lt;/start&gt;</p>
    <p>&lt;end&gt;700&lt;/end&gt;</p>
    <p>&lt;annotation&gt;Kathy Etchingham&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;PER&lt;/typeinfo&gt;</p>
    <p>&lt;/Person&gt;</p>
    <p>&lt;Person&gt;</p>
    <p>&lt;start&gt;812&lt;/start&gt;</p>
    <p>&lt;end&gt;819&lt;/end&gt;</p>
    <p>&lt;annotation&gt;Hendrix&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;PER&lt;/typeinfo&gt;</p>
    <p>&lt;/Person&gt;</p>
    <p>&lt;Location&gt;</p>
    <p>&lt;start&gt;55&lt;/start&gt;</p>
    <p>&lt;end&gt;61&lt;/end&gt;</p>
    <p>&lt;annotation&gt;LONDON&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;LOC&lt;/typeinfo&gt;</p>
    <p>&lt;/Location&gt;</p>
    <p>&lt;Location&gt;</p>
    <p>&lt;start&gt;118&lt;/start&gt;</p>
    <p>&lt;end&gt;122&lt;/end&gt;</p>
    <p>&lt;annotation&gt;U.S.&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;LOC&lt;/typeinfo&gt;</p>
    <p>&lt;/Location&gt;</p>
    <p>&lt;Location&gt;</p>
    <p>&lt;start&gt;264&lt;/start&gt;</p>
    <p>&lt;end&gt;271&lt;/end&gt;</p>
    <p>&lt;annotation&gt;Florida&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;LOC&lt;/typeinfo&gt;</p>
    <p>&lt;/Location&gt;</p>
    <p>&lt;Location&gt;</p>
    <p>&lt;start&gt;391&lt;/start&gt;</p>
    <p>&lt;end&gt;397&lt;/end&gt;</p>
    <p>&lt;annotation&gt;London&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;LOC&lt;/typeinfo&gt;</p>
    <p>&lt;/Location&gt;</p>
    <p>&lt;Location&gt;</p>
    <p>&lt;start&gt;491&lt;/start&gt;</p>
    <p>&lt;end&gt;501&lt;/end&gt;</p>
    <p>&lt;annotation&gt;Nottingham&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;LOC&lt;/typeinfo&gt;</p>
    <p>&lt;/Location&gt;</p>
    <p>&lt;/text&gt;</p>
    <p>&lt;/annotations&gt;</p>
    <p>&lt;annotations&gt;</p>
    <p>&lt;text&gt;</p>
    <p>&lt;Person&gt;</p>
    <p>&lt;start&gt;7&lt;/start&gt;</p>
    <p>&lt;end&gt;14&lt;/end&gt;</p>
    <p>&lt;annotation&gt;Hendrix&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;PER&lt;/typeinfo&gt;</p>
    <p>&lt;/Person&gt;</p>
    <p>&lt;Person&gt;</p>
    <p>&lt;start&gt;137&lt;/start&gt;</p>
    <p>&lt;end&gt;149&lt;/end&gt;</p>
    <p>&lt;annotation&gt;Jimi Hendrix&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;PER&lt;/typeinfo&gt;</p>
    <p>&lt;/Person&gt;</p>
    <p>&lt;Person&gt;</p>
    <p>&lt;start&gt;362&lt;/start&gt;</p>
    <p>&lt;end&gt;369&lt;/end&gt;</p>
    <p>&lt;annotation&gt;Hendrix&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;PER&lt;/typeinfo&gt;</p>
    <p>&lt;/Person&gt;</p>
    <p>&lt;Person&gt;</p>
    <p>&lt;start&gt;655&lt;/start&gt;</p>
    <p>&lt;end&gt;662&lt;/end&gt;</p>
    <p>&lt;annotation&gt;Hendrix&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;PER&lt;/typeinfo&gt;</p>
    <p>&lt;/Person&gt;</p>
    <p>&lt;Person&gt;</p>
    <p>&lt;start&gt;684&lt;/start&gt;</p>
    <p>&lt;end&gt;700&lt;/end&gt;</p>
    <p>&lt;annotation&gt;Kathy Etchingham&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;PER&lt;/typeinfo&gt;</p>
    <p>&lt;/Person&gt;</p>
    <p>&lt;annotations&gt;</p>
    <p>&lt;text&gt;</p>
    <p>&lt;Person&gt;</p>
    <p>&lt;start&gt;477&lt;/start&gt;</p>
    <p>&lt;end&gt;497&lt;/end&gt;</p>
    <p>&lt;annotation&gt;Tadeusz Awdankiewicz&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;PER&lt;/typeinfo&gt;</p>
    <p>&lt;/Person&gt;</p>
    <p>&lt;Person&gt;</p>
    <p>&lt;start&gt;621&lt;/start&gt;</p>
    <p>&lt;end&gt;633&lt;/end&gt;</p>
    <p>&lt;annotation&gt;Awdankiewicz&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;PER&lt;/typeinfo&gt;</p>
    <p>&lt;/Person&gt;</p>
    <p>&lt;Organization&gt;</p>
    <p>&lt;start&gt;505&lt;/start&gt;</p>
    <p>&lt;end&gt;512&lt;/end&gt;</p>
    <p>&lt;annotation&gt;Reuters&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;ORG&lt;/typeinfo&gt;</p>
    <p>&lt;/Organization&gt;</p>
    <p>&lt;Location&gt;</p>
    <p>&lt;start&gt;44&lt;/start&gt;</p>
    <p>&lt;end&gt;49&lt;/end&gt;</p>
    <p>&lt;annotation&gt;Libya&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;LOC&lt;/typeinfo&gt;</p>
    <p>&lt;/Location&gt;</p>
    <p>&lt;Location&gt;</p>
    <p>&lt;start&gt;53&lt;/start&gt;</p>
    <p>&lt;end&gt;58&lt;/end&gt;</p>
    <p>&lt;annotation&gt;TUNIS&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;LOC&lt;/typeinfo&gt;</p>
    <p>&lt;/Location&gt;</p>
    <p>&lt;Location&gt;</p>
    <p>&lt;start&gt;147&lt;/start&gt;</p>
    <p>&lt;end&gt;152&lt;/end&gt;</p>
    <p>&lt;annotation&gt;Libya&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;LOC&lt;/typeinfo&gt;</p>
    <p>&lt;/Location&gt;</p>
    <p>&lt;Location&gt;</p>
    <p>&lt;start&gt;356&lt;/start&gt;</p>
    <p>&lt;end&gt;361&lt;/end&gt;</p>
    <p>&lt;annotation&gt;Libya&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;LOC&lt;/typeinfo&gt;</p>
    <p>&lt;/Location&gt;</p>
    <p>&lt;Location&gt;</p>
    <p>&lt;start&gt;467&lt;/start&gt;</p>
    <p>&lt;end&gt;474&lt;/end&gt;</p>
    <p>&lt;annotation&gt;Tripoli&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;LOC&lt;/typeinfo&gt;</p>
    <p>&lt;/Location&gt;</p>
    <p>&lt;Location&gt;</p>
    <p>&lt;start&gt;529&lt;/start&gt;</p>
    <p>&lt;end&gt;535&lt;/end&gt;</p>
    <p>&lt;annotation&gt;Poland&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;LOC&lt;/typeinfo&gt;</p>
    <p>&lt;/Location&gt;</p>
    <p>&lt;Location&gt;</p>
    <p>&lt;start&gt;594&lt;/start&gt;</p>
    <p>&lt;end&gt;599&lt;/end&gt;</p>
    <p>&lt;annotation&gt;Libya&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;LOC&lt;/typeinfo&gt;</p>
    <p>&lt;/Location&gt;</p>
    <p>&lt;Location&gt;</p>
    <p>&lt;start&gt;823&lt;/start&gt;</p>
    <p>&lt;end&gt;828&lt;/end&gt;</p>
    <p>&lt;annotation&gt;Libya&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;LOC&lt;/typeinfo&gt;</p>
    <p>&lt;/Location&gt;</p>
    <p>&lt;/text&gt;</p>
    <p>&lt;/annotations&gt;</p>
    <p>typeinfo&gt;LOC&lt;/typeinfo&gt;</p>
    <p>&lt;/Location&gt;</p>
    <p>&lt;Location&gt;</p>
    <p>&lt;start&gt;279&lt;/start&gt;</p>
    <p>&lt;end&gt;286&lt;/end&gt;</p>
    <p>&lt;annotation&gt;Germany&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;LOC&lt;/typeinfo&gt;</p>
    <p>&lt;/Location&gt;</p>
    <p>&lt;Location&gt;</p>
    <p>&lt;start&gt;443&lt;/start&gt;</p>
    <p>&lt;end&gt;450&lt;/end&gt;</p>
    <p>&lt;annotation&gt;Britain&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;LOC&lt;/typeinfo&gt;</p>
    <p>&lt;/Location&gt;</p>
    <p>&lt;Location&gt;</p>
    <p>&lt;start&gt;1075&lt;/start&gt;</p>
    <p>&lt;end&gt;1082&lt;/end&gt;</p>
    <p>&lt;annotation&gt;Britain&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;LOC&lt;/typeinfo&gt;</p>
    <p>&lt;/Location&gt;</p>
    <p>&lt;Location&gt;</p>
    <p>&lt;start&gt;1087&lt;/start&gt;</p>
    <p>&lt;end&gt;1093&lt;/end&gt;</p>
    <p>&lt;annotation&gt;France&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;LOC&lt;/typeinfo&gt;</p>
    <p>&lt;/Location&gt;</p>
    <p>&lt;Location&gt;</p>
    <p>&lt;start&gt;1608&lt;/start&gt;</p>
    <p>&lt;end&gt;1614&lt;/end&gt;</p>
    <p>&lt;annotation&gt;France&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;LOC&lt;/typeinfo&gt;</p>
    <p>&lt;/Location&gt;</p>
    <p>&lt;Location&gt;</p>
    <p>&lt;start&gt;1619&lt;/start&gt;</p>
    <p>&lt;end&gt;1626&lt;/end&gt;</p>
    <p>&lt;annotation&gt;Britain&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;LOC&lt;/typeinfo&gt;</p>
    <p>&lt;typeinfo&gt;ORG&lt;/typeinfo&gt;</p>
    <p>&lt;/Organization&gt;</p>
    <p>&lt;Location&gt;</p>
    <p>&lt;start&gt;44&lt;/start&gt;</p>
    <p>&lt;end&gt;49&lt;/end&gt;</p>
    <p>&lt;annotation&gt;Libya&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;LOC&lt;/typeinfo&gt;</p>
    <p>&lt;/Location&gt;</p>
    <p>&lt;Location&gt;</p>
    <p>&lt;start&gt;53&lt;/start&gt;</p>
    <p>&lt;end&gt;58&lt;/end&gt;</p>
    <p>&lt;annotation&gt;TUNIS&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;LOC&lt;/typeinfo&gt;</p>
    <p>&lt;/Location&gt;</p>
    <p>&lt;Location&gt;</p>
    <p>&lt;start&gt;147&lt;/start&gt;</p>
    <p>&lt;end&gt;152&lt;/end&gt;</p>
    <p>&lt;annotation&gt;Libya&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;LOC&lt;/typeinfo&gt;</p>
    <p>&lt;/Location&gt;</p>
    <p>&lt;Location&gt;</p>
    <p>&lt;start&gt;356&lt;/start&gt;</p>
    <p>&lt;end&gt;361&lt;/end&gt;</p>
    <p>&lt;annotation&gt;Libya&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;LOC&lt;/typeinfo&gt;</p>
    <p>&lt;/Location&gt;</p>
    <p>&lt;Location&gt;</p>
    <p>&lt;start&gt;467&lt;/start&gt;</p>
    <p>&lt;end&gt;474&lt;/end&gt;</p>
    <p>&lt;annotation&gt;Tripoli&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;LOC&lt;/typeinfo&gt;</p>
    <p>&lt;/Location&gt;</p>
    <p>Organization&gt;</p>
    <p>&lt;start&gt;2340&lt;/start&gt;</p>
    <p>&lt;end&gt;2370&lt;/end&gt;</p>
    <p>&lt;annotation&gt;Welsh National Farmers ' Union&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;ORG&lt;/typeinfo&gt;</p>
    <p>&lt;/Organization&gt;</p>
    <p>&lt;Organization&gt;</p>
    <p>&lt;start&gt;2373&lt;/start&gt;</p>
    <p>&lt;end&gt;2376&lt;/end&gt;</p>
    <p>&lt;annotation&gt;NFU&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;ORG&lt;/typeinfo&gt;</p>
    <p>&lt;/Organization&gt;</p>
    <p>&lt;Organization&gt;</p>
    <p>&lt;start&gt;2413&lt;/start&gt;</p>
    <p>&lt;end&gt;2422&lt;/end&gt;</p>
    <p>&lt;annotation&gt;BBC radio&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;ORG&lt;/typeinfo&gt;</p>
    <p>&lt;/Organization&gt;</p>
    <p>&lt;Location&gt;</p>
    <p>&lt;start&gt;69&lt;/start&gt;</p>
    <p>&lt;end&gt;77&lt;/end&gt;</p>
    <p>&lt;annotation&gt;BRUSSELS&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;LOC&lt;/typeinfo&gt;</p>
    <p>&lt;/Location&gt;</p>
    <p>&lt;Location&gt;</p>
    <p>&lt;start&gt;279&lt;/start&gt;</p>
    <p>&lt;end&gt;286&lt;/end&gt;</p>
    <p>&lt;annotation&gt;Germany&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;LOC&lt;/typeinfo&gt;</p>
    <p>&lt;/Location&gt;</p>
    <p>&lt;Location&gt;</p>
    <p>&lt;start&gt;443&lt;/start&gt;</p>
    <p>&lt;end&gt;450&lt;/end&gt;</p>
    <p>&lt;annotation&gt;Britain&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;LOC&lt;/typeinfo&gt;</p>
    <p>&lt;/Location&gt;</p>
    <p>&lt;Location&gt;</p>
    <p>&lt;start&gt;1075&lt;/start&gt;</p>
    <p>&lt;end&gt;1082&lt;/end&gt;</p>
    <p>&lt;annotation&gt;Britain&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;LOC&lt;/typeinfo&gt;</p>
    <p>&lt;/Location&gt;</p>
    <p>&lt;Location&gt;</p>
    <p>&lt;start&gt;1087&lt;/start&gt;</p>
    <p>&lt;end&gt;1093&lt;/end&gt;</p>
    <p>&lt;annotation&gt;France&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;LOC&lt;/typeinfo&gt;</p>
    <p>&lt;/Location&gt;</p>
    <p>&lt;Location&gt;</p>
    <p>&lt;start&gt;1608&lt;/start&gt;</p>
    <p>&lt;end&gt;1614&lt;/end&gt;</p>
    <p>&lt;annotation&gt;France&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;LOC&lt;/typeinfo&gt;</p>
    <p>&lt;/Location&gt;</p>
    <p>&lt;Location&gt;</p>
    <p>&lt;start&gt;1619&lt;/start&gt;</p>
    <p>&lt;end&gt;1626&lt;/end&gt;</p>
    <p>&lt;annotation&gt;Britain&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;LOC&lt;/typeinfo&gt;</p>
    <p>&lt;/Location&gt;</p>
    <p>&lt;Location&gt;</p>
    <p>&lt;start&gt;2227&lt;/start&gt;</p>
    <p>&lt;end&gt;2233&lt;/end&gt;</p>
    <p>&lt;annotation&gt;Europe&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;LOC&lt;/typeinfo&gt;&lt;end&gt;1626&lt;/end&gt;</p>
    <p>&lt;annotation&gt;Britain&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;LOC&lt;/typeinfo&gt;</p>
    <p>&lt;Person&gt;</p>
    <p>&lt;start&gt;621&lt;/start&gt;</p>
    <p>&lt;end&gt;633&lt;/end&gt;</p>
    <p>&lt;annotation&gt;Awdankiewicz&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;PER&lt;/typeinfo&gt;</p>
    <p>&lt;/Person&gt;</p>
    <p>&lt;Organization&gt;</p>
    <p>&lt;start&gt;505&lt;/start&gt;</p>
    <p>&lt;end&gt;512&lt;/end&gt;</p>
    <p>&lt;annotation&gt;Reuters&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;ORG&lt;/typeinfo&gt;</p>
    <p>&lt;/Organization&gt;</p>
    <p>&lt;Location&gt;</p>
    <p>&lt;start&gt;44&lt;/start&gt;</p>
    <p>&lt;end&gt;49&lt;/end&gt;</p>
    <p>&lt;annotation&gt;Libya&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;LOC&lt;/typeinfo&gt;</p>
    <p>&lt;/Location&gt;</p>
    <p>&lt;Location&gt;</p>
    <p>&lt;start&gt;53&lt;/start&gt;</p>
    <p>&lt;end&gt;58&lt;/end&gt;</p>
    <p>&lt;annotation&gt;TUNIS&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;LOC&lt;/typeinfo&gt;</p>
    <p>&lt;/Location&gt;</p>
    <p>&lt;Location&gt;</p>
    <p>&lt;start&gt;147&lt;/start&gt;</p>
    <p>&lt;end&gt;152&lt;/end&gt;</p>
    <p>&lt;annotation&gt;Libya&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;LOC&lt;/typeinfo&gt;</p>
    <p>&lt;/Location&gt;</p>
    <p>&lt;Location&gt;</p>
    <p>&lt;start&gt;356&lt;/start&gt;</p>
    <p>&lt;end&gt;361&lt;/end&gt;</p>
    <p>&lt;annotation&gt;Libya&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;LOC&lt;/typeinfo&gt;</p>
    <p>&lt;/Location&gt;</p>
    <p>&lt;Location&gt;</p>
    <p>&lt;start&gt;467&lt;/start&gt;</p>
    <p>&lt;end&gt;474&lt;/end&gt;</p>
    <p>&lt;annotation&gt;Tripoli&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;LOC&lt;/typeinfo&gt;</p>
    <p>&lt;/Location&gt;</p>
    <p>&lt;Location&gt;</p>
    <p>&lt;start&gt;529&lt;/start&gt;</p>
    <p>&lt;end&gt;535&lt;/end&gt;</p>
    <p>&lt;annotation&gt;Poland&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;LOC&lt;/typeinfo&gt;</p>
    <p>&lt;/Location&gt;</p>
    <p>&lt;Location&gt;</p>
    <p>&lt;start&gt;594&lt;/start&gt;</p>
    <p>&lt;end&gt;599&lt;/end&gt;</p>
    <p>&lt;annotation&gt;Libya&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;LOC&lt;/typeinfo&gt;</p>
    <p>&lt;/Location&gt;</p>
    <p>&lt;Location&gt;</p>
    <p>&lt;start&gt;823&lt;/start&gt;</p>
    <p>&lt;end&gt;828&lt;/end&gt;</p>
    <p>&lt;annotation&gt;Libya&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;LOC&lt;/typeinfo&gt;</p>
    <p>&lt;/Location&gt;</p>
    <p>&lt;/text&gt;</p>
    <p>&lt;/annotations&gt;</p>
    <p>typeinfo&gt;LOC&lt;/typeinfo&gt;</p>
    <p>&lt;/Location&gt;</p>
    <p>&lt;Location&gt;</p>
    <p>&lt;start&gt;279&lt;/start&gt;</p>
    <p>&lt;end&gt;286&lt;/end&gt;</p>
    <p>&lt;annotation&gt;Germany&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;LOC&lt;/typeinfo&gt;</p>
    <p>&lt;/Location&gt;</p>
    <p>&lt;Location&gt;</p>
    <p>&lt;start&gt;443&lt;/start&gt;</p>
    <p>&lt;end&gt;450&lt;/end&gt;</p>
    <p>&lt;annotation&gt;Britain&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;LOC&lt;/typeinfo&gt;</p>
    <p>&lt;/Location&gt;</p>
    <p>&lt;Location&gt;</p>
    <p>&lt;start&gt;1075&lt;/start&gt;</p>
    <p>&lt;end&gt;1082&lt;/end&gt;</p>
    <p>&lt;annotation&gt;Britain&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;LOC&lt;/typeinfo&gt;</p>
    <p>&lt;/Location&gt;</p>
    <p>&lt;Location&gt;</p>
    <p>&lt;start&gt;1087&lt;/start&gt;</p>
    <p>&lt;end&gt;1093&lt;/end&gt;</p>
    <p>&lt;annotation&gt;France&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;LOC&lt;/typeinfo&gt;</p>
    <p>&lt;/Location&gt;</p>
    <p>&lt;Location&gt;</p>
    <p>&lt;start&gt;1608&lt;/start&gt;</p>
    <p>&lt;end&gt;1614&lt;/end&gt;</p>
    <p>&lt;annotation&gt;France&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;LOC&lt;/typeinfo&gt;</p>
    <p>&lt;/Location&gt;</p>
    <p>&lt;Location&gt;</p>
    <p>&lt;start&gt;1619&lt;/start&gt;</p>
    <p>&lt;end&gt;1626&lt;/end&gt;</p>
    <p>&lt;annotation&gt;Britain&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;LOC&lt;/typeinfo&gt;</p>
    <p>&lt;/Person&gt;</p>
    <p>&lt;Person&gt;</p>
    <p>&lt;start&gt;1021&lt;/start&gt;</p>
    <p>&lt;end&gt;1029&lt;/end&gt;</p>
    <p>&lt;annotation&gt;Fischler&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;PER&lt;/typeinfo&gt;</p>
    <p>&lt;/Person&gt;</p>
    <p>&lt;Person&gt;</p>
    <p>&lt;start&gt;1215&lt;/start&gt;</p>
    <p>&lt;end&gt;1223&lt;/end&gt;</p>
    <p>&lt;annotation&gt;Fischler&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;PER&lt;/typeinfo&gt;</p>
    <p>&lt;/Person&gt;</p>
    <p>&lt;Person&gt;</p>
    <p>&lt;start&gt;1450&lt;/start&gt;</p>
    <p>&lt;end&gt;1467&lt;/end&gt;</p>
    <p>&lt;annotation&gt;Loyola de Palacio&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;PER&lt;/typeinfo&gt;</p>
    <p>&lt;/Person&gt;</p>
    <p>&lt;Person&gt;</p>
    <p>&lt;start&gt;1488&lt;/start&gt;</p>
    <p>&lt;end&gt;1496&lt;/end&gt;</p>
    <p>&lt;annotation&gt;Fischler&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;PER&lt;/typeinfo&gt;</p>
    <p>&lt;/Person&gt;</p>
    <p>&lt;Person&gt;</p>
    <p>&lt;start&gt;1634&lt;/start&gt;</p>
    <p>&lt;end&gt;1642&lt;/end&gt;</p>
    <p>&lt;annotation&gt;Fischler&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;PER&lt;/typeinfo&gt;</p>
    <p>&lt;/Person&gt;</p>
    <p>&lt;Person&gt;</p>
    <p>&lt;start&gt;2388&lt;/start&gt;</p>
    <p>&lt;end&gt;2404&lt;/end&gt;</p>
    <p>&lt;annotation&gt;John Lloyd Jones&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;PER&lt;/typeinfo&gt;</p>
    <p>&lt;/Person&gt;</p>
    <p>&lt;Organization&gt;</p>
    <p>&lt;start&gt;2&lt;/start&gt;</p>
    <p>&lt;end&gt;4&lt;/end&gt;</p>
    <p>&lt;annotation&gt;EU&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;ORG&lt;/typeinfo&gt;</p>
    <p>&lt;/Organization&gt;</p>
    <p>&lt;Organization&gt;</p>
    <p>&lt;start&gt;94&lt;/start&gt;</p>
    <p>&lt;end&gt;113&lt;/end&gt;</p>
    <p>&lt;annotation&gt;European Commission&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;ORG&lt;/typeinfo&gt;</p>
    <p>&lt;/Organization&gt;</p>
    <p>&lt;Organization&gt;</p>
    <p>&lt;start&gt;312&lt;/start&gt;</p>
    <p>&lt;end&gt;326&lt;/end&gt;</p>
    <p>&lt;annotation&gt;European Union&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;ORG&lt;/typeinfo&gt;&lt;/Location&gt;</p>
    <p>&lt;Location&gt;</p>
    <p>&lt;start&gt;279&lt;/start&gt;</p>
    <p>&lt;end&gt;286&lt;/end&gt;</p>
    <p>&lt;annotation&gt;Germany&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;LOC&lt;/typeinfo&gt;</p>
    <p>&lt;/Location&gt;</p>
    <p>&lt;Location&gt;</p>
    <p>&lt;start&gt;443&lt;/start&gt;</p>
    <p>&lt;end&gt;450&lt;/end&gt;</p>
    <p>&lt;annotation&gt;Britain&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;LOC&lt;/typeinfo&gt;</p>
    <p>&lt;/Location&gt;</p>
    <p>&lt;Location&gt;</p>
    <p>&lt;start&gt;1075&lt;/start&gt;</p>
    <p>&lt;end&gt;1082&lt;/end&gt;</p>
    <p>&lt;annotation&gt;Britain&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;LOC&lt;/typeinfo&gt;</p>
    <p>&lt;/Location&gt;</p>
    <p>&lt;Location&gt;</p>
    <p>&lt;start&gt;1087&lt;/start&gt;</p>
    <p>&lt;end&gt;1093&lt;/end&gt;</p>
    <p>&lt;annotation&gt;France&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;LOC&lt;/typeinfo&gt;</p>
    <p>&lt;/Location&gt;</p>
    <p>&lt;Location&gt;</p>
    <p>&lt;start&gt;1608&lt;/start&gt;</p>
    <p>&lt;end&gt;1614&lt;/end&gt;</p>
    <p>&lt;annotation&gt;France&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;LOC&lt;/typeinfo&gt;</p>
    <p>&lt;/Location&gt;</p>
    <p>&lt;Location&gt;</p>
    <p>&lt;start&gt;1619&lt;/start&gt;</p>
    <p>&lt;end&gt;1626&lt;/end&gt;</p>
    <p>&lt;annotation&gt;Britain&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;LOC&lt;/typeinfo&gt;</p>
    <p>&lt;/Location&gt;</p>
    <p>&lt;Location&gt;</p>
    <p>&lt;start&gt;2227&lt;/start&gt;</p>
    <p>&lt;end&gt;2233&lt;/end&gt;</p>
    <p>&lt;annotation&gt;Europe&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;LOC&lt;/typeinfo&gt;&lt;end&gt;1626&lt;/end&gt;</p>
    <p>&lt;annotation&gt;Britain&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;LOC&lt;/typeinfo&gt;</p>
    <p>&lt;typeinfo&gt;ORG&lt;/typeinfo&gt;</p>
    <p>&lt;/Organization&gt;</p>
    <p>&lt;Location&gt;</p>
    <p>&lt;start&gt;44&lt;/start&gt;</p>
    <p>&lt;end&gt;49&lt;/end&gt;</p>
    <p>&lt;annotation&gt;Libya&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;LOC&lt;/typeinfo&gt;</p>
    <p>&lt;/Location&gt;</p>
    <p>&lt;Location&gt;</p>
    <p>&lt;start&gt;53&lt;/start&gt;</p>
    <p>&lt;end&gt;58&lt;/end&gt;</p>
    <p>&lt;annotation&gt;TUNIS&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;LOC&lt;/typeinfo&gt;</p>
    <p>&lt;/Location&gt;</p>
    <p>Organization&gt;</p>
    <p>&lt;start&gt;2340&lt;/start&gt;</p>
    <p>&lt;end&gt;2370&lt;/end&gt;</p>
    <p>&lt;annotation&gt;Welsh National Farmers ' Union&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;ORG&lt;/typeinfo&gt;</p>
    <p>&lt;/Organization&gt;</p>
    <p>&lt;Organization&gt;</p>
    <p>&lt;start&gt;2373&lt;/start&gt;</p>
    <p>&lt;end&gt;2376&lt;/end&gt;</p>
    <p>&lt;annotation&gt;NFU&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;ORG&lt;/typeinfo&gt;</p>
    <p>&lt;/Organization&gt;</p>
    <p>&lt;Organization&gt;</p>
    <p>&lt;start&gt;2413&lt;/start&gt;</p>
    <p>&lt;end&gt;2422&lt;/end&gt;</p>
    <p>&lt;annotation&gt;BBC radio&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;ORG&lt;/typeinfo&gt;</p>
    <p>&lt;/Organization&gt;</p>
    <p>&lt;Location&gt;</p>
    <p>&lt;start&gt;69&lt;/start&gt;</p>
    <p>&lt;end&gt;77&lt;/end&gt;</p>
    <p>&lt;annotation&gt;BRUSSELS&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;LOC&lt;/typeinfo&gt;</p>
    <p>&lt;/Location&gt;</p>
    <p>&lt;Location&gt;</p>
    <p>&lt;start&gt;279&lt;/start&gt;</p>
    <p>&lt;end&gt;286&lt;/end&gt;</p>
    <p>&lt;annotation&gt;Germany&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;LOC&lt;/typeinfo&gt;</p>
    <p>&lt;/Location&gt;</p>
    <p>&lt;Location&gt;</p>
    <p>&lt;start&gt;443&lt;/start&gt;</p>
    <p>&lt;end&gt;450&lt;/end&gt;</p>
    <p>&lt;annotation&gt;Britain&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;LOC&lt;/typeinfo&gt;</p>
    <p>&lt;/Location&gt;</p>
    <p>&lt;Location&gt;</p>
    <p>&lt;start&gt;1075&lt;/start&gt;</p>
    <p>&lt;end&gt;1082&lt;/end&gt;</p>
    <p>&lt;annotation&gt;Britain&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;LOC&lt;/typeinfo&gt;</p>
    <p>&lt;/Location&gt;</p>
    <p>&lt;Location&gt;</p>
    <p>&lt;start&gt;1087&lt;/start&gt;</p>
    <p>&lt;end&gt;1093&lt;/end&gt;</p>
    <p>&lt;annotation&gt;France&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;LOC&lt;/typeinfo&gt;</p>
    <p>&lt;/Location&gt;</p>
    <p>&lt;Location&gt;</p>
    <p>&lt;start&gt;1608&lt;/start&gt;</p>
    <p>&lt;end&gt;1614&lt;/end&gt;</p>
    <p>&lt;annotation&gt;France&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;LOC&lt;/typeinfo&gt;</p>
    <p>&lt;/Location&gt;</p>
    <p>&lt;Location&gt;</p>
    <p>&lt;start&gt;1619&lt;/start&gt;</p>
    <p>&lt;end&gt;1626&lt;/end&gt;</p>
    <p>&lt;annotation&gt;Britain&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;LOC&lt;/typeinfo&gt;</p>
    <p>&lt;/Location&gt;</p>
    <p>&lt;Location&gt;</p>
    <p>&lt;start&gt;2227&lt;/start&gt;</p>
    <p>&lt;end&gt;2233&lt;/end&gt;</p>
    <p>&lt;annotation&gt;Europe&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;LOC&lt;/typeinfo&gt;</p>
    <p>&lt;/Location&gt;</p>
    <p>&lt;Location&gt;</p>
    <p>&lt;start&gt;2320&lt;/start&gt;</p>
    <p>&lt;end&gt;2327&lt;/end&gt;</p>
    <p>&lt;annotation&gt;Germany&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;LOC&lt;/typeinfo&gt;</p>
    <p>&lt;/Location&gt;</p>
    <p>&lt;/Location&gt;</p>
    <p>&lt;Location&gt;</p>
    <p>&lt;start&gt;1608&lt;/start&gt;</p>
    <p>&lt;end&gt;1614&lt;/end&gt;</p>
    <p>&lt;annotation&gt;France&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;LOC&lt;/typeinfo&gt;</p>
    <p>&lt;/Location&gt;</p>
    <p>&lt;Location&gt;</p>
    <p>&lt;start&gt;1619&lt;/start&gt;</p>
    <p>&lt;end&gt;1626&lt;/end&gt;</p>
    <p>&lt;annotation&gt;Britain&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;LOC&lt;/typeinfo&gt;</p>
    <p>&lt;/Location&gt;</p>
    <p>&lt;Location&gt;</p>
    <p>&lt;start&gt;2227&lt;/start&gt;</p>
    <p>&lt;end&gt;2233&lt;/end&gt;</p>
    <p>&lt;annotation&gt;Europe&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;LOC&lt;/typeinfo&gt;&lt;end&gt;1626&lt;/end&gt;</p>
    <p>&lt;annotation&gt;Britain&lt;/annotation&gt;</p>
    <p>&lt;typeinfo&gt;LOC&lt;/typeinfo&gt;</p>
    <p>Example 2: Correcting Extraction Results</p>
    <p>CoNLL 2003 Named Entity Recognition Competition</p>
    <p>Training Data ~ 150 of 20,000 labels</p>
    <p>CoNLL 2003 Named Entity Recognition Competition</p>
    <p>Training Data ~ 150 of 20,000 labels</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation83</p>
    <p>Development Support in Conventional IE Systems</p>
    <p>Grammar-based Systems</p>
    <p>GATEs CPSL debugger, AnnotationDiff/Benchmark Tools</p>
    <p>[Cunningham02]</p>
    <p>Machine Learning Systems</p>
    <p>Active learning of training examples [Thompson99]</p>
    <p>Interfaces to verify/correct extraction results [Kristjansson04]</p>
    <p>Lack of transparency makes it difficult</p>
    <p>for humans to understand/debug/refine the system</p>
    <p>[Das Sarma et al. SIGMOD 2010. I4E: Interactive Investigation of Iterative IE]</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation84</p>
    <p>Different Aspects of Tooling for Declarative IE</p>
    <p>Type: Answers vs. Non-answers</p>
    <p>Granularity: Coarse-grained vs. Fine-grained</p>
    <p>Scope:</p>
    <p>Feedback on input  forward propagation</p>
    <p>Feedback on output backward propagation</p>
    <p>Enable building/maintaining</p>
    <p>Enable collaboration</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation85</p>
    <p>Provenance in DB and Scientific Communities</p>
    <p>Explains output data in terms of the input data, the intermediate data, and the transformation</p>
    <p>Transformation = query, ETL, workflow</p>
    <p>Recent surveys: [Davidson08] [Cheney09]</p>
    <p>Approaches for computing provenance:</p>
    <p>Eager</p>
    <p>Transformation is changed to carry over</p>
    <p>additional information</p>
    <p>Provenance readily available in output</p>
    <p>Lazy</p>
    <p>No changes to the transformation</p>
    <p>Requires knowledge of Qs semantics,</p>
    <p>or re-executing Q</p>
    <p>Q</p>
    <p>Q</p>
    <p>Q</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation86</p>
    <p>Types of Provenance for Declarative IE</p>
    <p>Provenance of answers</p>
    <p>Why is this in the result?</p>
    <p>Useful to explain wrong</p>
    <p>results</p>
    <p>Helps in removing false</p>
    <p>positives</p>
    <p>Benefits from previous work</p>
    <p>on provenance</p>
    <p>Provenance of non-answers</p>
    <p>Why is this not in the result?</p>
    <p>Useful to explain missing</p>
    <p>results</p>
    <p>Helps in removing false</p>
    <p>negatives</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation87</p>
    <p>Granularity of Provenance for Declarative IE</p>
    <p>Fine grained</p>
    <p>Enables understanding</p>
    <p>the entire IE system down</p>
    <p>to basic operator level</p>
    <p>Can use both eager or</p>
    <p>lazy computation</p>
    <p>Coarse grained</p>
    <p>Enables understanding of</p>
    <p>the IE system at a higher</p>
    <p>level</p>
    <p>Individual components</p>
    <p>remain black boxes</p>
    <p>More amenable to lazy</p>
    <p>computation</p>
    <p>High-level declarative Mixed declarative Completely declarative</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation88</p>
    <p>Scope of User Feedback for Declarative IE</p>
    <p>Feedback on intermediate results of IE program propagates forward</p>
    <p>Goal is to repair specific problems with the intermediate data</p>
    <p>Feedback on the output of IE</p>
    <p>program propagates</p>
    <p>backwards</p>
    <p>Goal is to refine the program</p>
    <p>I P</p>
    <p>O</p>
    <p>P O</p>
    <p>I P</p>
    <p>O</p>
    <p>P OI</p>
    <p>Feedback Feedback</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation89</p>
    <p>Goals of User Interfaces for Declarative IE</p>
    <p>Build &amp; Maintain IE Systems</p>
    <p>GUI builders</p>
    <p>Wiki interfaces</p>
    <p>How to do it collaboratively ?</p>
    <p>Share &amp; Reuse</p>
    <p>Reconcile feedback</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation90</p>
    <p>Tooling in Various Declarative IE Systems</p>
    <p>SystemT</p>
    <p>CIMPLE</p>
    <p>PSOX</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation91</p>
    <p>SystemT: Provenance of Answers</p>
    <p>create view Person as</p>
    <p>Call John now (555-1212). Hes busy after 11:30 AM.</p>
    <p>create view Phone as</p>
    <p>extract regex /(\d+\W)+\d+/</p>
    <p>Simple PersonPhone extractor</p>
    <p>Person</p>
    <p>Fine-grained provenance</p>
    <p>Example:</p>
    <p>create view PersonPhone as</p>
    <p>select P.name, Ph.number</p>
    <p>from Person P, Phone Ph</p>
    <p>where Follows(P.name, Ph.number, 0, 40);</p>
    <p>numbername</p>
    <p>PersonPhone</p>
    <p>Phone Phone</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation92</p>
    <p>Eager approach: Rewrite AQL to maintain one-step derivation of each tuple</p>
    <p>Extends work on how-provenance for relational queries [Green07] [Glavic09]</p>
    <p>Core subset of AQL: SPJUD, Regex, Dictionary, Consolidate</p>
    <p>SystemT: Provenance of Answers</p>
    <p>create view PersonPhone as</p>
    <p>select GenerateID() as ID,</p>
    <p>P.name, P.number,</p>
    <p>P.id as nameProv, Ph.id as numberProv</p>
    <p>AND as how</p>
    <p>from Person P, Phone Ph</p>
    <p>where Follows(P.name, Ph.number, 0, 40);</p>
    <p>Call John now (555-1212). Hes busy after 11:30 AM. Person</p>
    <p>numbername</p>
    <p>PersonPhone</p>
    <p>ID: 1 ID: 2 ID: 3</p>
    <p>Rewritten PersonPhone How-Provenance</p>
    <p>Phone Phone</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation93</p>
    <p>SystemT: Provenance of Answers</p>
    <p>Person Dictionary</p>
    <p>FirstNames.dict</p>
    <p>Phone Regex</p>
    <p>(\d+\W)+\d+</p>
    <p>Doc</p>
    <p>PersonPhone Join</p>
    <p>Follows(name,phone,0,40)</p>
    <p>John 11:30</p>
    <p>Can we automate this ?</p>
    <p>Provenance of wrong result John11:30</p>
    <p>John11:30</p>
    <p>TestRefine</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation94</p>
    <p>SystemT: Automatic Rule Refinement using Provenance [Liu10]</p>
    <p>Input: User feedback = labels on the</p>
    <p>output of AQL program P</p>
    <p>Goal: Automatically refine P to</p>
    <p>remove false positives</p>
    <p>Idea: cut any provenance link</p>
    <p>wrong tuple disappears</p>
    <p>Person Dictionary</p>
    <p>FirstNames.dict</p>
    <p>Doc</p>
    <p>PersonPhone Join</p>
    <p>Follows(name,phone,0,40)</p>
    <p>John</p>
    <p>John11:30</p>
    <p>Provenance of wrong result John11:30</p>
    <p>Phone Regex</p>
    <p>(\d+\W)+\d+</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation95</p>
    <p>SystemT: Automatic Rule Refinement using Provenance [Liu10]</p>
    <p>Input: User feedback = labels on the</p>
    <p>output of AQL program P</p>
    <p>Goal: Automatically refine P to</p>
    <p>remove false positives</p>
    <p>What operator to modify?</p>
    <p>Leverages provenance</p>
    <p>HLC 3</p>
    <p>Remove 11:30 from</p>
    <p>output of Phone</p>
    <p>HLC 2</p>
    <p>Remove John from</p>
    <p>output of Person</p>
    <p>Person Dictionary</p>
    <p>FirstNames.dict</p>
    <p>Doc</p>
    <p>PersonPhone Join</p>
    <p>Follows(name,phone,0,40)</p>
    <p>John</p>
    <p>John11:30 HLC 1: Remove</p>
    <p>John11:30 from</p>
    <p>output of PersonPhone</p>
    <p>Provenance of wrong result John11:30</p>
    <p>Phone Regex</p>
    <p>(\d+\W)+\d+</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation96</p>
    <p>SystemT: Automatic Rule Refinement using Provenance [Liu10]</p>
    <p>Person Dictionary</p>
    <p>FirstNames.dict</p>
    <p>Doc</p>
    <p>PersonPhone Join</p>
    <p>Follows(name,phone,0,40)</p>
    <p>John</p>
    <p>LLC 2</p>
    <p>Remove John from</p>
    <p>FirstNames.dict</p>
    <p>LLC 3</p>
    <p>Change regex to</p>
    <p>(\d{3}\W)+\d+</p>
    <p>Input: User feedback = labels on the</p>
    <p>output of AQL program P</p>
    <p>Goal: Automatically refine P to</p>
    <p>remove false positives</p>
    <p>What operator to modify?</p>
    <p>How to modify it?</p>
    <p>Leverage provenance</p>
    <p>LLC 1</p>
    <p>Change join predicate to</p>
    <p>Follows(name,phone,0,30)</p>
    <p>Provenance of wrong result John11:30</p>
    <p>John11:30</p>
    <p>Phone Regex</p>
    <p>(\d+\W)+\d+</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation97</p>
    <p>A Simple Phone Pattern</p>
    <p>Blocks of digits separated by non-word character:</p>
    <p>R0 = (\d+\W)+\d+</p>
    <p>Identifies valid phone numbers (e.g. 555-1212, 800-865-1125)</p>
    <p>Produces invalid matches (e.g. 11:30, 10/19/2002, 1.25 )</p>
    <p>Misses valid phone numbers (e.g. (800) 865-CARE)</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation98</p>
    <p>Conventional Regex Writing Process for IE</p>
    <p>Regex0</p>
    <p>Sample</p>
    <p>Documents</p>
    <p>Match 1</p>
    <p>Match 2</p>
    <p>Good Enough?</p>
    <p>No</p>
    <p>Yes Regexfinal</p>
    <p>(\d+\W)+\d+(\d{3}\W)+\d+</p>
    <p>Regex1</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation99</p>
    <p>Learning Regexfinal automatically [Li08]</p>
    <p>Regex0</p>
    <p>Sample</p>
    <p>Documents</p>
    <p>Match 1</p>
    <p>Match 2</p>
    <p>NegMatch 1</p>
    <p>NegMatch m0 PosMatch 1</p>
    <p>PosMatch n0</p>
    <p>Labeled matches for R 0</p>
    <p>Regex LLC</p>
    <p>Module Regexfinal</p>
    <p>HLC</p>
    <p>Enumerator</p>
    <p>AQL rules</p>
    <p>w/ R0</p>
    <p>John555-1212</p>
    <p>John11:30</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation100</p>
    <p>Intuition [Li08]</p>
    <p>R0 ([A-Z][a-zA-Z]{1,10}\s){1,5}\s*(\w{0,2}\d[\.]?){1,4}</p>
    <p>([A-Z][a-zA-Z]{1,10}\s){1,5}\s*(\ [a-zA-Z] {0,2}\d[\.]?){1,4}</p>
    <p>([A-Z][a-zA-Z]{1,10}\s){1,2}\s*(\w{0,2}\d[\.]?){1,4}</p>
    <p>([A-Z][a-zA-Z]{1,10}\s){1,5}\s* (?!(201||330))(\w{0,2}\d[\.]?){1,4}</p>
    <p>([A-Z] [a-z] {1,10}\s){1,5}\s*(\\w{0,2}\d[\.]?){1,4}</p>
    <p>([A-Z][a-zA-Z]{1,10}\s){2,4}\s*(\w{0,2}\d[\.]?){1,4}</p>
    <p>Goodness measure</p>
    <p>F1</p>
    <p>F7</p>
    <p>F8</p>
    <p>F34</p>
    <p>F48</p>
    <p>((?!(Copyright|Page|Physics|Question|    |Article|Issue)</p>
    <p>[A-Z][a-zA-Z]{1,10}\s){1,5}\s*(\w{0,2}\d[\.]?){1,4} F35</p>
    <p>R</p>
    <p>([A-Z] [a-z] {1,10}\s){1,5}\s*( [a-zA-z] {0,2}\d[\.]?){1,4}</p>
    <p>([A-Z] [a-z] {1,10}\s) {1,2} \s*(\\w{0,2}\d[\.]?){1,4}</p>
    <p>(((?!(Copyright|Page|Physics|Question|    |Article|Issue)</p>
    <p>[A-Z] [a-z] {1,10}\s){1,5}\s*(\\w{0,2}\d[\.]?){1,4}</p>
    <p>([A-Z] [a-z] {1,10}\s){1,5} \s*( \d {0,2}\d[\.]?){1,4}</p>
    <p>([A-Z] [a-z] {1,10}\s){1,5} \s*(\\w{0,2}\d[\.]?){1,3}</p>
    <p>([A-Z] [a-z] {1,10}\s){1,5}\s* (?!(201||330))(\w{0,2}\d[\.]?){1,4}</p>
    <p>..</p>
    <p>Generate candidate regular expressions by modifying current regular expression</p>
    <p>Select the best candidate R</p>
    <p>If R is better than current regular expression, repeat the process</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation101</p>
    <p>SystemT: Named-Entity Recognition (NER) Interface</p>
    <p>Interface for exposing complex</p>
    <p>NER annotators</p>
    <p>Common NER operations</p>
    <p>exposed in a compact language</p>
    <p>Simplifies maintenance</p>
    <p>Enabled by declarativity</p>
    <p>Seamless translation to AQL,</p>
    <p>since semantics are separate</p>
    <p>from implementation</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation102</p>
    <p>SystemT: Tagger UI [Kandogan06] [Kandogan07]</p>
    <p>Simple language for combining existing complex annotators</p>
    <p>Dictionary, regex, sequence, union</p>
    <p>Similar in spirit to SQL Query Builders</p>
    <p>Focus on collaboration within a community of users</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation103</p>
    <p>Tooling in Various Declarative IE Systems</p>
    <p>SystemT</p>
    <p>CIMPLE</p>
    <p>PSOX</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation104</p>
    <p>Cimple: Provenance for Non-answers [Huang08]</p>
    <p>To explain missing answers</p>
    <p>Updates to extracted</p>
    <p>relations that would cause</p>
    <p>the missing answer to</p>
    <p>appear in the result</p>
    <p>Focus on SPJ queries</p>
    <p>yesPACMU</p>
    <p>noMAMIT</p>
    <p>yesCAStanford</p>
    <p>OpeningStateSchool</p>
    <p>RankSchool</p>
    <p>Example from [Huang08]</p>
    <p>TopJobs (s,r):</p>
    <p>Openings(s,CA,yes), Rankings(s,r), r&lt;4</p>
    <p>Openings Rankings</p>
    <p>RankSchool</p>
    <p>TopJobs</p>
    <p>Why is Berkeley</p>
    <p>*not* in the result ?</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation105</p>
    <p>Cimple: Provenance for Non-answers [Huang08]</p>
    <p>To explain missing answers</p>
    <p>Updates to extracted</p>
    <p>relations that would cause</p>
    <p>the missing answer to</p>
    <p>appear in the result</p>
    <p>Focus on SPJ queries</p>
    <p>Lazy approach</p>
    <p>yesCABerkeley</p>
    <p>yesPACMU</p>
    <p>noMAMIT</p>
    <p>yesCAStanford</p>
    <p>OpeningStateSchool</p>
    <p>RankSchool</p>
    <p>TopJobs (s,r):</p>
    <p>Openings(s,CA,yes), Rankings(s,r), r&lt;4</p>
    <p>Openings Rankings</p>
    <p>RankSchool</p>
    <p>TopJobs</p>
    <p>Berkley is a</p>
    <p>potential answer</p>
    <p>Example from [Huang08]</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation106</p>
    <p>Example from [Shen08]</p>
    <p>Cimple: Best-Effort IE [Shen08]</p>
    <p>Scope: feedback on output data  refine IE program</p>
    <p>Based on Alog = skeletal xlog + predicate description rules</p>
    <p>Example:</p>
    <p>R 1 : houses(x,price,area,hs) : housePages(x), extractHouses(x,price,area,hs)</p>
    <p>R 3 : Q(x,p,a,h) : houses(x,price,area,hs), schools(school), p&gt;500000, a&gt;4500, approxMatch(hs,school)</p>
    <p>R 2 : schools(school): schoolPages(y), extractSchools(y,school)</p>
    <p>Extraction predicates</p>
    <p>partially specified</p>
    <p>approximate program</p>
    <p>Next effort assistant:</p>
    <p>Is price Bold? Is-bold(price)</p>
    <p>Is area numerical? Is-numeric(area)</p>
    <p>What is the maximum value of price? Max-val(price, 750000)</p>
    <p>Ordering strategy:</p>
    <p>Sequential or simulation</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation107</p>
    <p>Cimple: Incorporate User-Feedback in IE Programs [Chai09]</p>
    <p>Scope: feedback on intermediate data  refine IE results</p>
    <p>Feedback = data corrections</p>
    <p>Based on hlog = xlog + declarative user feedback rules</p>
    <p>Example:</p>
    <p>R 1 : webPages(p) : dataSources(url, date), crawl(url, page)</p>
    <p>R 3 : abstracts(abstract, p) : webPages(p), extractAbstract(p, abstract)</p>
    <p>R 2 : titles(title, p): webPages(p), extractTitle(p, title)</p>
    <p>R 4 : talks(title, abstract) : titles(title, p), abstracts(abstract, p), immBefore(title,abstract)</p>
    <p>R 5 : dataSourcesForUserFeedback(url) #spreadsheet-UI</p>
    <p>: dataSources(url, date), date &gt;= 01/01/2009</p>
    <p>xlog</p>
    <p>feedback</p>
    <p>rules</p>
    <p>dataSource tuples with</p>
    <p>date after 1/1/09 can be</p>
    <p>edited through a</p>
    <p>spreadsheet interface</p>
    <p>Example from [Chai09]</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation108</p>
    <p>Cimple: Incorporate User-Feedback in IE Programs [Chai09]</p>
    <p>Scope: feedback on intermediate data  refine IE results</p>
    <p>Feedback = data corrections</p>
    <p>Based on hlog = xlog + declarative user feedback rules</p>
    <p>Challenges:</p>
    <p>How to incorporate user feedback?  Leverage provenance to resolve conflicting updates</p>
    <p>Provenance is eagerly computed</p>
    <p>How to efficiently execute an hlog program?  Leverage provenance to incrementally propagate user edits upward</p>
    <p>in the pipeline</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation109</p>
    <p>Cimple: Building Community Wikipedias [DeRose08]</p>
    <p>Madwiki = Cimple + Wiki interface</p>
    <p>Structured</p>
    <p>DB</p>
    <p>Text</p>
    <p>DB</p>
    <p>Data</p>
    <p>Sources</p>
    <p>View 1</p>
    <p>View 2</p>
    <p>View 3 Wiki 3</p>
    <p>Wiki 2</p>
    <p>Wiki 1</p>
    <p>View 3 Wiki 3</p>
    <p>IE</p>
    <p>program</p>
    <p>Text 3</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation110</p>
    <p>Tooling in Various Declarative IE Systems</p>
    <p>SystemT</p>
    <p>CIMPLE</p>
    <p>PSOX</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation111</p>
    <p>PSOX: Tracing Provenance [Bohannon08]</p>
    <p>Coarse grained, eager approach</p>
    <p>Record operator, time and environment of each execution</p>
    <p>Record the entities and relationships that lead to each result</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation112</p>
    <p>PSOX: Incorporating Social Feedback [Bohannon08]</p>
    <p>User modeled as operator</p>
    <p>Feedback = confidence for relationships inferred by the system</p>
    <p>Flexible scoring model for combining confidence scores</p>
    <p>Score changes propagate forward (leveraging provenance)</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation113</p>
    <p>Provenance-Based Debugger (PROBER) [Das Sarma10]</p>
    <p>Focus on IE pipelines with monotonic black box operators</p>
    <p>1-1, 1-m, m-1, arbitrary</p>
    <p>Coarse grained provenance (operator level)</p>
    <p>MISet: Minimum set of input records sufficient for deriving an output record</p>
    <p>Lazy approach: repeatedly re-execute the operator</p>
    <p>Trade-offs between provenance completeness and efficiency</p>
    <p>Any MISet (P-any): efficient for arbitrary operators</p>
    <p>All MiSets (P-all): efficient for 1-1, 1-m operators</p>
    <p>Composition of operators:</p>
    <p>P-*(Op1  Op2) can be always computed from P-all(Op1) and P-all(Op2)  Can be done efficiently for certain combinations of operators</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation114</p>
    <p>Summary</p>
    <p>PROBER</p>
    <p>Backward</p>
    <p>propagation</p>
    <p>Maintain</p>
    <p>User Interfaces</p>
    <p>Forward</p>
    <p>propagation</p>
    <p>Collaborate</p>
    <p>Confidence</p>
    <p>scores</p>
    <p>Q&amp;A</p>
    <p>Data edits</p>
    <p>Output</p>
    <p>labels</p>
    <p>Type of</p>
    <p>Feedback</p>
    <p>Automatic refinement</p>
    <p>Fine</p>
    <p>Provenance</p>
    <p>Granularity</p>
    <p>Coarse</p>
    <p>Provenance</p>
    <p>Type Systems</p>
    <p>PSOX</p>
    <p>Cimple</p>
    <p>SystemT</p>
    <p>Non</p>
    <p>answers Answers</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation115</p>
    <p>Road Map</p>
    <p>What is Information Extraction? (Fred Reiss)</p>
    <p>Declarative Information Extraction (Fred Reiss)</p>
    <p>What the Declarative Approach Enables</p>
    <p>Scalable Infrastructure (Yunyao Li)</p>
    <p>Development Support (Laura Chiticariu)</p>
    <p>Conclusion/Questions</p>
    <p>Yo u a re he re</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation116</p>
    <p>Open Challenges</p>
    <p>Scalability</p>
    <p>Accuracy</p>
    <p>Usability</p>
    <p>Better cost and selectivity models</p>
    <p>for IE</p>
    <p>Using provenance of non-answers</p>
    <p>for automatic extractor refinement</p>
    <p>More declarative approaches to</p>
    <p>machine learning</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation117</p>
    <p>Thank you!</p>
    <p>Our web page:</p>
    <p>http://www.almaden.ibm.com/cs/projects/systemt/</p>
    <p>Our software:</p>
    <p>http://www.alphaworks.ibm.com/tech/systemt</p>
    <p>Updated release coming soon!</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation118</p>
    <p>References</p>
    <p>[Appelt93] D. Appelt, J. Hobbs, J. Bear, D. Israel, M. Tyson. FASTUS: A Finite-State Processor for Information Extraction. IJCAI 1993, VOL 13; NUMBER 2, pages 1172.</p>
    <p>[Appelt98] D. Appelt and B. Onyshkevych, The Common Pattern Specification Language. ACL 1998, pages 23-30.</p>
    <p>[Bohannon08] P. Bohannon, S. Merugu, C. Yu, V. Agarwal, P. DeRose, A. Iyer, A. Jain, V. K. M. Muralidharan, R. Ramakrishnan, W. Shen. 2008. Purple SOX Extraction Management System, SIGMOD Record. 37(4): 21-27</p>
    <p>[Cardie97] C. Cardie, Empirical Methods in Information Extraction. AI Magazine 18:4, 1997. http://www.cs.cornell.edu/home/cardie/</p>
    <p>[Chai09] X. Chai, B. Vuong, A. Doan, J. Naughton. Efficiently Incorporating User Feedback into Information Extraction and Integration Programs. SIGMOD 2009, pages 87-100.</p>
    <p>[Chen08] F. Chen, A. Doan, J. Yang, R. Ramakrishnan. Efficient Information Extraction over Evolving Text Data. ICDE 2008, pages 943-952.</p>
    <p>[Chen09] F. Chen, B. J. Gao, A. Doan, J. Yang, R. Ramakrishnan. Optimizing Complex Extraction Programs Over Evolving Text Data. SIGMOD 2009, 321-334.</p>
    <p>[Cheney 09] J. Cheney, L. Chiticariu, W. Tan. Provenance in Databases: Why, How, and Where. Foundations and Trends in Databases 1(4): 379-474 (2009)</p>
    <p>[Chiticariu10] L. Chiticariu, R. Krishnamurthy, Y. Li, S. Raghavan, F. Reiss, S. Vaithyanathan . &quot;SystemT: An Algebraic Approach to Declarative Information Extraction. To appear, ACL 2010.</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation119</p>
    <p>References (continued)</p>
    <p>[Cohen03] W. Cohen, Information Extraction and Integration: an Overview. KDD (Tutorial) 2003</p>
    <p>[Cunningham02] H. Cunningham, D. Maynard, K. Bontcheva, V. Tablan. GATE: A Framework and Graphical Development Environment for Robust NLP Tools and Applications. ACL 2002, pages 168-175.</p>
    <p>[Cunningham09] H. Cunningham et. Al. ANNIE: A Nearly-New Information Extraction System. In Developing Language Processing Components with GATE Version 5 (a User Guide); September 4, 2009. http://gate.ac.uk/sale/tao/split.html</p>
    <p>[DasSarma10] A. Das Sarma, A. Jain, P. Bohannon. Sarma et al. PROBER: Ad-Hoc Debugging of Extraction and Integration Pipelines. CoRR abs 1004.1614, 2010.</p>
    <p>[Davidson08] S. Davidson, J. Freire. Provenance and Scientific Workflows: Challenges and Opportunities (Tutorial). SIGMOD 2008, pages 1345-1350.</p>
    <p>[DeJong82] G. DeJong, An overview of the FRUMP system in Lehnert, W.G. and Ringle, M.H. (eds.) Strategies for natural language processing (Hillsdale: Erlbaum, 1982), pages149-176.</p>
    <p>[DeRose08] P. DeRose, X. Chai, B. J. Gao, W. Shen, A. Doan, P. Bohannon, X. Zhu: Building Community Wikipedias: A Machine-Human Partnership Approach. ICDE 2008, pages 646-655.</p>
    <p>[Doan06] A. Doan, R. Ramakrishnan, S. Vaithyanathan, Managing Information Extraction (Tutorial), SIGMOD 2006, pages 799-800.</p>
    <p>[Freitag98] D. Freitag. Toward General-Purpose Learning for Information Extraction. COLING-ACL 1998, pages 404 - 408.</p>
    <p>[Green07] T. J. Green, G. Karvounarakis, V. Tannen. Provenance Semirings. PODS 2007, pages 31-40.</p>
    <p>[Glavic09] B. Glavic, G. Alonso, Perm: Processing provenance and data on the same data model through query rewriting, ICDE 2009, pages 174-185.</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation120</p>
    <p>References (continued)</p>
    <p>[Huang08] J. Huang, T. Chen, A. Doan, J. Naughton. On the Provenance of Non-answers to Queries over Extracted Data. PVLDB 1(1) 2008, pages 736-747.</p>
    <p>[Ipeirotis07] P. G. Ipeiros, E. Agichtein, P. Jain, L. Gravano. Towards a Query Optimizer for Text-Centric Tasks. ACM Transactions on Database Systems (TODS), 32 (4), article 21, November 2007</p>
    <p>[Jain08] A. Jain, AnHai Doan, and Luis Gravano, Optimizing SQL Queries over Text Databases. ICDE 2008, pages 636-645.</p>
    <p>[Jain09] A. Jain, P. Ipeirotis, L. Gravano. Building Query Optimizers for Information Extraction: The SQoUT Project. SIGMOD Record. 37(4): 28-34</p>
    <p>[Jain09b] A. Jain, P. Ipeirotis, A. Doan, L. Gravano: Join Optimization of Information Extraction Output: Quality Matters! ICDE 2009, pages 186-197.</p>
    <p>[Khaitan09] S. Khaitan, G. Ramakrishnan, S. Joshi, A. Chalamalla. RAD: A Scalable Framework for Annotator Development. ICDE 2008, pages 1624-1627.</p>
    <p>[Kandogan06] E. Kandogan, R. Krishnamurthy, S. Raghavan, S. Vaithyanathan, H. Zhu: Avatar semantic search: a database approach to information retrieval. SIGMOD 2006 (Demo), pages 790-792.</p>
    <p>[Kandogan07] E. Kandogan et al. Avatar: Beyond Keywords  Collaborative Information Extraction and Search. ACM CHI Workshop on Exploratory Search and HCI 2007 (Poster).</p>
    <p>[Krishnamurthy07] R. Krishnamurthy, S. Raghavan, S. Vaithyanathan, H. Zhu. Using Structured Queries for Keyword Information Retrieval. IBM Research Report RJ 10413. 2007</p>
    <p>[Krishnamurthy08] R. Krishnamurthy, Y. Li, S. Raghavan, F. Reiss, S. Vaithyanathan, H. Zhu. SystemT: a system for declarative information extraction. SIGMOD Record 37(4): 7-13</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation121</p>
    <p>References (continued)</p>
    <p>[Kristjansson04] T. Kristjansson, A. Culotta, P. Viola, A. McCallum. Interactive Information Extraction with Constrained Conditional Random Fields. AAAI 2004, pages 412-418.</p>
    <p>[Lafferty01] J. Lafferty, A. McCallum, and F. Pereira, Conditional Random Fields: Probabilistic Models for Segmenting and Labeling Sequence Data. ICML 2001, pages 282  289.</p>
    <p>[Leek97] T. Leek, Information extraction using hidden Markov models. Masters thesis. UC San Diego.</p>
    <p>[Li06] Y. Li, R. Krishnamurthy, S. Vaithyanathan, H.V. Jagadish. Getting Work Done on the Web: Supporting Transactional Queries. SIGIR, 2006, pages 557 - 564.</p>
    <p>[Li08] Y. Li, R. Krishnamurthy, S. Raghavan, S. Vaithyanathan, H.V. Jagadish. Regular Expression Learning for Information Extraction. EMNLP 2008, pages 21-30.</p>
    <p>[Liu10] B. Liu, L. Chiticariu, V. Chu, H.V. Jagadish, F. Reiss. Automatic Rule Refinement for Information Extraction. to appear, VLDB 2010.</p>
    <p>[McCallum00] A. McCallum, D. Freitag, and F. Pereira, Maximum Entropy Markov Models for Information Extraction and Segmentation. ICML 2000, pages 591  598.</p>
    <p>[Reiss08] F. Reiss, S. Raghavan, R. Krishnamurthy, H. Zhu, S. Vaithyanathan. An Algebraic Approach to Rule-Based Information Extraction. ICDE 2008, pages 933-942.</p>
    <p>[Riloff93] E. Riloff, Automatically Constructing a Dictionary for Information Extraction Tasks. AAAI 1993, pages 811-816.</p>
    <p>[Sang03] E. Sang, F. De Meulder. Introduction to the CoNLL-2003 shared task: Language-independent named entity recognition, HLT-NAACL 2003 - Volume 4, pages 142 - 147.</p>
  </div>
  <div class="page">
    <p>2009 IBM Corporation122</p>
    <p>References (continued)</p>
    <p>[Sarawagi08] S. Sarawagi, Information Extraction. Foundations and Trends in Databases 1(3): 261-377, 2008.</p>
    <p>[Shen07] W. Shen, A.Doan, J. F. Naughton, R. Ramakrishnan. Declarative Information Extraction Using Datalog with Embedded Extraction Predicates. VLDB 2007, pages 1033-1044.</p>
    <p>[Shen08] W. Shen, P. DeRose, R. McCann, A. Doan, R. Ramakrishnan. Toward Best-effort Information Extraction. SIGMOD 2008, pages 1031-1042.</p>
    <p>[Simmen09] D. E. Simmen, F. Reiss, Y. Li, S. Thalamati. Enabling Enterprise Mashups over Unstructured Text Feeds with InfoSphere MashupHub and SystemT. SIGMOD 2008 (Demo), pages 1123-1126.</p>
    <p>[Soderland98] S. Soderland, D. Fisher, J. Aseltine, W. Lehnert. CRYSTAL: Inducing a Conceptual Dictionary. IJCAI 1995 , pages 1314-1319.</p>
    <p>[Thompson99] C. A. Thompson, M. E. Califf, R. J. Mooney. Active Learning for Natural Language Parsing and Information Extraction. ICML 1999, pages 406  414.</p>
    <p>[Wang10] D. Z. Wang, E. Michelakis, M.J. Franklin, M. Garofalakis, J. M. Hellerstein. Probabilistic Declarative Information Extraction. ICDE 2010, pages 173-176.</p>
    <p>[Zhu07] H. Zhu, A. Loeser, S. Raghavan, S. Vaithyanathan. Navigating the Intranet with High Precision. WWW 2007, 491  500.</p>
  </div>
</Presentation>
