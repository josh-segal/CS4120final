<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Systematically Exploring the Behavior of Control Programs</p>
    <p>Jason Croft, Ratul Mahajan,</p>
    <p>Matthew Caesar, Madan Musuvathi</p>
  </div>
  <div class="page">
    <p>Control Programs are Everywhere</p>
  </div>
  <div class="page">
    <p>Control Programs are Everywhere</p>
  </div>
  <div class="page">
    <p>Control Programs are Everywhere</p>
    <p>motionPorch.Detected:</p>
    <p>if (Now  timeLastMotion &lt; 1s</p>
    <p>&amp;&amp; lightLevel &lt; 20)</p>
    <p>porchLight.Set(On)</p>
    <p>timeLastMotion = Now</p>
    <p>@6:00:00 AM:</p>
    <p>porchLight.Set(Off)</p>
    <p>@6:00:00 PM:</p>
    <p>porchLight.Set(On)</p>
    <p>packetIn:</p>
    <p>entry = new Entry(inPkt.src,</p>
    <p>inPkt.dst)</p>
    <p>if (!cache.Contains(entry))</p>
    <p>cache.Insert(entry, Now)</p>
    <p>cleanupTimer:</p>
    <p>foreach entry in cache:</p>
    <p>if (Now - cache[entry] &lt; 5s)</p>
    <p>cache.Remove(entry)</p>
    <p>Triggers</p>
    <p>Actions</p>
  </div>
  <div class="page">
    <p>Unintended Behavior is a Concern</p>
    <p>Security and monetary risks</p>
    <p>Unlocked doors, improperly activated thermostats, network/service outages</p>
    <p>We dont want this happening at 8AM in the summer</p>
  </div>
  <div class="page">
    <p>Possible Solution: Model Check Code</p>
    <p>motionPorch.Detected:</p>
    <p>porchLight.Set(On)</p>
    <p>timer.Start(1 min)</p>
    <p>porchLight.On:</p>
    <p>timer.Start(1 min)</p>
    <p>timer.Fired:</p>
    <p>porchLight.Set(Off)</p>
    <p>[porchLight, Timer]</p>
    <p>[Off, Off]</p>
    <p>[On, On]</p>
    <p>[Off, On]</p>
    <p>LightOn Motion</p>
    <p>LightOn Motion</p>
    <p>LightOn Motion</p>
    <p>LightOff</p>
    <p>Timer</p>
    <p>Timer</p>
  </div>
  <div class="page">
    <p>Untimed Model Checking Isnt Enough</p>
    <p>Problem: anything can happen at any time</p>
    <p>Event domain can be large</p>
    <p>Time domain is continuous</p>
    <p>How to reason about behavior under all possible events at all possible times?</p>
    <p>How to check time-bounded properties?</p>
    <p>Solution:</p>
    <p>All possible events =&gt; symbolic execution</p>
    <p>All possible times =&gt; timed automata</p>
  </div>
  <div class="page">
    <p>Efficiently Exploring Temporal Behavior</p>
    <p>Timed Automata (TA): finite state machines (states , transitions) extended with real-valued virtual clocks (VC)</p>
    <p>Divide time into equivalent regions using VC constraints</p>
    <p>All VCs progress at same rate, except that one or more VCs may be reset on a transition</p>
    <p>VC constraints gate transitions</p>
  </div>
  <div class="page">
    <p>Timed Automata Regions: 2 VCs</p>
    <p>motionPorch.Detected:</p>
    <p>if (Now  lastMotion &lt; 1s)</p>
    <p>porchLight.Set(On)</p>
    <p>timer.Start(1s)</p>
    <p>lastMotion = Now</p>
    <p>timer.Fired:</p>
    <p>porchLight.Set(Off)</p>
    <p>lastMotion</p>
    <p>ti m</p>
    <p>e r</p>
  </div>
  <div class="page">
    <p>Timed Automata Regions: 2 VCs</p>
    <p>motionPorch.Detected:</p>
    <p>if (Now  lastMotion &lt; 1s)</p>
    <p>porchLight.Set(On)</p>
    <p>timer.Start(1s)</p>
    <p>lastMotion = Now</p>
    <p>timer.Fired:</p>
    <p>porchLight.Set(Off)</p>
    <p>ti m</p>
    <p>e r</p>
    <p>lastMotion</p>
  </div>
  <div class="page">
    <p>Exploring a Timed Automaton</p>
    <p>motionPorch.Detected:</p>
    <p>porchLight.Set(On)</p>
    <p>timer.Start(1 min)</p>
    <p>porchLight.On:</p>
    <p>timer.Start(1 min)</p>
    <p>timer.Fired:</p>
    <p>porchLight.Set(Off)</p>
    <p>[porchLight, Timer] t=timer</p>
    <p>[Off, Off] t = 0</p>
    <p>[On, On] t = 0</p>
    <p>[Off, Off] t = 0.5 min</p>
    <p>Motion</p>
    <p>LightOn</p>
    <p>[On, On] t = 0.5 min</p>
    <p>[Off, Off] t = 1 min</p>
    <p>Motion LightOn</p>
    <p>Motion LightOn</p>
    <p>Motion LightOn</p>
  </div>
  <div class="page">
    <p>Optimization 1: Predicting Successors</p>
    <p>Problem: Running code is costly</p>
    <p>Observation: Multiple region states can have identical response to a trigger</p>
    <p>Clock personality: regions evaluation of a clock</p>
  </div>
  <div class="page">
    <p>Optimization 1: Predicting Successors</p>
    <p>Problem: Running code is costly</p>
    <p>Observation: Multiple region states can have identical response to a trigger</p>
    <p>Clock personality: regions evaluation of a clock</p>
    <p>S1 S2</p>
    <p>Compute</p>
    <p>Predict</p>
    <p>Same variable values and ready timers</p>
    <p>Different regions, same personality</p>
  </div>
  <div class="page">
    <p>Optimization 2: Minimizing Virtual Clocks</p>
    <p>Problem: VCs impact efficiency</p>
    <p>Observation: VCs for some actions can be combined</p>
    <p>Eg: action1; sleep(5); action2; sleep(10);</p>
    <p>Eg, actions at sunset, sunrise, 7PM 14</p>
  </div>
  <div class="page">
    <p>Optimization 3: Independent Loops</p>
    <p>Problem: more devices means more states</p>
    <p>Observation: control programs tend to have multiple, independent control loops</p>
  </div>
  <div class="page">
    <p>DeLorean: Workflow</p>
    <p>Front End</p>
    <p>PreExploration</p>
    <p>Exploration</p>
    <p>Control Program Safety Invariants</p>
    <p>Program with virtualized devices</p>
    <p>Clock constraints Input space classes</p>
    <p>Control loops</p>
    <p>Violations + Paths</p>
    <p>Translation</p>
    <p>Symbolic execution</p>
    <p>Model checking</p>
  </div>
  <div class="page">
    <p>Testing Home Automation Scripts</p>
    <p>10 real home automation programs</p>
    <p>Between 3 and 51 devices</p>
    <p>Between 3 and 90 rules (triggers)</p>
    <p>Between 2 and 14 virtual clocks</p>
    <p>Find 4 bugs</p>
    <p>3 of which are time-related</p>
  </div>
  <div class="page">
    <p>Testing Home Automation: Performance</p>
    <p>DeLorean explores programs 3.6 to 36K times faster than real time  ~200k states/sec</p>
    <p>Predicting states: up to 90% reduction in exploration time</p>
    <p>No prediction, overhead in checking for similar states</p>
  </div>
  <div class="page">
    <p>Testing Home Automation: Correctness</p>
    <p>Compared to untimed model checking</p>
  </div>
  <div class="page">
    <p>Testing SDN Apps</p>
    <p>3 SDN apps:</p>
    <p>MAC-learning switch, traffic engineering, load balancer</p>
    <p>Compare with NICE  untimed model checker</p>
    <p>Largest dependency</p>
    <p>on time 20</p>
  </div>
  <div class="page">
    <p>Conclusion + Lessons Learned</p>
    <p>Cant forget about time when testing</p>
    <p>Even simple programs can have complex dependencies on time</p>
    <p>TA-based exploration most useful for programs with dependence on absolute (timeof-day) and relative time</p>
  </div>
</Presentation>
