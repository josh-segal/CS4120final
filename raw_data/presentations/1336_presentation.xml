<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Empirically Testing Decision Making in TAC SCM</p>
    <p>Erik P. Zawadzki</p>
    <p>July 23, 2007</p>
    <p>Joint work with Kevin Leyton-Brown</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction to Problem Model</p>
    <p>Customer Market Process Component Market Process</p>
    <p>Application: Scheduling Agents Experiments</p>
    <p>Conclusions</p>
  </div>
  <div class="page">
    <p>Trading Agent Competition Supply Chain Management (TAC SCM)</p>
    <p>Supply Chain Management (SCM) is an important industrial issue Static and unresponsive SC policies</p>
    <p>Large inventories Unreliable deliveries Underperformance</p>
    <p>TAC SCM Encourages research into SCM solutions A simpler setting</p>
  </div>
  <div class="page">
    <p>Subproblems</p>
    <p>A TAC SCM PC (personal computer) manufacturing agent must make decisions for the following four subproblems:</p>
    <p>Customer Bidding Customer</p>
    <p>Market Simulation Component</p>
    <p>Market</p>
    <p>Agent 6Agent 1</p>
  </div>
  <div class="page">
    <p>Subproblems</p>
    <p>A TAC SCM PC (personal computer) manufacturing agent must make decisions for the following four subproblems:</p>
    <p>Customer Bidding Component Ordering Customer</p>
    <p>Market Simulation ComponentMarket</p>
    <p>Agent 6Agent 1</p>
  </div>
  <div class="page">
    <p>Subproblems</p>
    <p>A TAC SCM PC (personal computer) manufacturing agent must make decisions for the following four subproblems:</p>
    <p>Customer Bidding Component Ordering Production Scheduling</p>
    <p>Customer Market Simulation</p>
    <p>Component Market</p>
    <p>Agent 6Agent 1</p>
  </div>
  <div class="page">
    <p>Subproblems</p>
    <p>A TAC SCM PC (personal computer) manufacturing agent must make decisions for the following four subproblems:</p>
    <p>Customer Bidding Component Ordering Production Scheduling Delivery Scheduling</p>
    <p>Customer Market Simulation</p>
    <p>Component Market</p>
    <p>Agent 6Agent 1</p>
  </div>
  <div class="page">
    <p>Subproblems</p>
    <p>A TAC SCM PC (personal computer) manufacturing agent must make decisions for the following four subproblems:</p>
    <p>Customer Bidding Component Ordering Production Scheduling Delivery Scheduling</p>
    <p>Decomposition For instance [Collins et al 2007]</p>
    <p>Customer Market Simulation</p>
    <p>Component Market</p>
    <p>Agent 6Agent 1</p>
  </div>
  <div class="page">
    <p>Decision Making is Hard Decision making in TAC SCM is hard</p>
    <p>Each subproblem solution influences the other three E.g. Customer Bidding</p>
    <p>Depends on Delivery Scheduling Depends on Production Scheduling</p>
    <p>Depends on Component Ordering There is an uncertain future</p>
    <p>Customer RFQs Component availability and pricing Late component deliveries</p>
    <p>There is a hard time-constraint Most agents simplify or approximate this decision (or both).</p>
  </div>
  <div class="page">
    <p>Many ways to simplify</p>
    <p>Subproblem connection Introduce independencies</p>
    <p>Action Only build PCs once an order is certain</p>
    <p>Information Do not use all the information that can be collected</p>
  </div>
  <div class="page">
    <p>How Should Algorithms be Compared?</p>
    <p>How do we determine which approaches are better than others?</p>
    <p>The traditional approach is running an agent against a large set of other agents</p>
    <p>Easy to compare complete agents Harder to compare particular approaches to the subproblems</p>
    <p>Test results are immediately relatable to competition performance</p>
    <p>Results may be highly variable Multiagent Randomness in the simulation</p>
  </div>
  <div class="page">
    <p>An Alternate Approach to Evaluation</p>
    <p>We suggest a testing framework makes it easy to: 1. Hold some subproblem algorithms fixed while varying</p>
    <p>others 2. Large number of experiments</p>
    <p>Parallelism 3. Control variance</p>
    <p>Blocked experimental design 4. Focus on particular game events</p>
    <p>Resource shortages Steady state End game</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction to Problem Model</p>
    <p>Customer Market Process Component Market Process</p>
    <p>Application: Scheduling Agents Experiments</p>
    <p>Conclusions</p>
  </div>
  <div class="page">
    <p>Model Overview</p>
    <p>Our Model: Generate RFQs and handle factories like in TAC SCM</p>
    <p>Simulation</p>
    <p>Agent</p>
  </div>
  <div class="page">
    <p>Model Overview</p>
    <p>Our Model: Generate RFQs and handle factories like in TAC SCM Simulate the customer market using a process learned from game data</p>
    <p>Customer Process Simulation</p>
    <p>Agent</p>
  </div>
  <div class="page">
    <p>Model Overview</p>
    <p>Our Model: Generate RFQs and handle factories like in TAC SCM Simulate the customer market using a process learned from game data Simulate the component market using a process structurally similar to TAC SCMs market</p>
    <p>Customer Process Simulation</p>
    <p>Component Process</p>
    <p>Agent</p>
  </div>
  <div class="page">
    <p>Model Overview</p>
    <p>Processes independent of agent actions</p>
    <p>Blocked experimental design Simulation defined random seed Block experiments by simulation seed</p>
    <p>Customer Process</p>
    <p>Component Process</p>
    <p>Agent</p>
    <p>Simulation</p>
    <p>Customer Market Simulation</p>
    <p>Component Market</p>
    <p>Agent 6Agent 1</p>
  </div>
  <div class="page">
    <p>Model Overview</p>
    <p>Processes independent of agent actions</p>
    <p>Blocked experimental design Simulation defined random seed Block experiments by simulation seed</p>
    <p>Customer Process</p>
    <p>Component Process</p>
    <p>Agent</p>
    <p>Simulation</p>
    <p>We will focus on steady-state behaviour</p>
    <p>Days 40 to 200 Beginning and end game effects</p>
    <p>We need to validate our model Want processes to be faithful to game log data</p>
    <p>Customer Market Simulation</p>
    <p>Component Market</p>
    <p>Agent 6Agent 1</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction to Problem Model</p>
    <p>Customer Market Process Component Market Process</p>
    <p>Application: Scheduling Agents Experiments</p>
    <p>Conclusions</p>
  </div>
  <div class="page">
    <p>Customer Market Process (CMP)</p>
    <p>Learn the winning price distribution p(B|t,S) t is the model parameters for day t S is the product type r.v.</p>
    <p>Assume that each days winning price distribution is a Gaussian</p>
  </div>
  <div class="page">
    <p>Customer Market Process (CMP)</p>
    <p>Model parameters linearly related to previous days with unbiased Gaussian noise</p>
    <p>t = At-1 + N(0,Q)</p>
    <p>0 1  T</p>
  </div>
  <div class="page">
    <p>Customer Market Process (CMP)</p>
    <p>Model parameters linearly related to previous days with unbiased Gaussian noise</p>
    <p>t = At-1 + N(0,Q)</p>
    <p>Observations (empirical distribution) linearly related to model parameters with unbiased Gaussian noise</p>
    <p>yt = Ct + N(0,R)</p>
    <p>0 1  T</p>
    <p>y1 yT</p>
  </div>
  <div class="page">
    <p>Customer Market Process (CMP)</p>
    <p>Model parameters linearly related to previous days with unbiased Gaussian noise</p>
    <p>t = At-1 + N(0,Q)</p>
    <p>Observations (empirical distribution) linearly related to model parameters with unbiased Gaussian noise</p>
    <p>yt = Ct + N(0,R) Linear Dynamic System (LDS)</p>
    <p>0 1  T</p>
    <p>y1 yT</p>
  </div>
  <div class="page">
    <p>How to Learn LDS Parameters</p>
    <p>Learn the LDS dynamic (&lt;A,C,Q,R,0&gt;) with EM Iteratively improves on an initial model</p>
    <p>Improvement is increasing data likelihood Unstable</p>
    <p>Inversion Good initial model helps avoid problems</p>
    <p>Can calculate data likelihood and predict future states using Kalman Filters (KFs)</p>
    <p>Recursive filter for estimating LDS states Very fast Simple to implement</p>
  </div>
  <div class="page">
    <p>Other LDS consideration</p>
    <p>Other decisions about the model: Independent vs `Full Model</p>
    <p>Should the behaviour from other PCs be informative? Can an LDS model this relationship?</p>
    <p>Overfitting</p>
    <p>Different dimensionality of the model parameters</p>
  </div>
  <div class="page">
    <p>Picking an LDS Model</p>
    <p>What makes a good model? Model easily explains historical data</p>
    <p>Data likelihood Predictive power</p>
    <p>Absolute prediction error</p>
  </div>
  <div class="page">
    <p>Picking an LDS Model</p>
    <p>What makes a good model? Model easily explains historical data</p>
    <p>Data likelihood Predictive power</p>
    <p>Absolute prediction error</p>
    <p>Independent Full</p>
    <p>Model Log-Likelihoods</p>
  </div>
  <div class="page">
    <p>Picking an LDS Model</p>
    <p>What makes a good model? Model easily explains historical data</p>
    <p>Data likelihood Predictive power</p>
    <p>Absolute prediction error</p>
    <p>Independent Model with 32 model variables</p>
    <p>Highest likelihood Low mean winning price prediction error of 57.0 units</p>
    <p>Independent Full</p>
    <p>Model Log-Likelihoods</p>
  </div>
  <div class="page">
    <p>KF Predictions Based on Learned LDS</p>
  </div>
  <div class="page">
    <p>KF Predictions Based on Learned LDS</p>
  </div>
  <div class="page">
    <p>Alternate Approaches</p>
    <p>Our model is generative But this is similar to the prediction problem</p>
    <p>Deep Maize Forecasting [Kiekintveld et al, 2007] Kth-nearest neighbour</p>
    <p>What in the past looks like what is being seen right now?</p>
    <p>TacTex Offer Acceptance Predictor [Pardoe and Stone, 2006]</p>
    <p>Separated Particle Filters</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction to Problem Model</p>
    <p>Customer Market Process Component Market Process</p>
    <p>Application: Scheduling Agents Experiments</p>
    <p>Conclusions</p>
  </div>
  <div class="page">
    <p>Component Market Process</p>
    <p>Not the focus of our work Needed a simple model Made one based on structural similarity to TAC SCM</p>
    <p>Daily manufacturing capacity determined by random walk Each component manufacturer maximized daily outgoing components using an ILP</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction to Problem Model</p>
    <p>Customer Market Process Component Market Process</p>
    <p>Application: Scheduling Agents Experiments</p>
    <p>Conclusions</p>
  </div>
  <div class="page">
    <p>Comparing Three Scheduling Techniques</p>
    <p>We will use our test framework to compare three different scheduling algorithms</p>
    <p>We are interested in the interaction between production and delivery scheduling To maintain consistency, will using the same customer bidding and component ordering algorithms</p>
    <p>Both done with simple heuristics Ordering: static daily amount with inventory cap Bidding: greedily, fixed percentage of production capacity</p>
  </div>
  <div class="page">
    <p>Myopic</p>
    <p>Myopic Delivery Scheduling</p>
    <p>ILP that maximizes current days revenue Ignores the future</p>
    <p>Production Scheduling Greedy, based on outstanding PC demand</p>
    <p>Customer Bidding</p>
    <p>Production Scheduling</p>
    <p>Delivery Scheduling</p>
    <p>Component Ordering</p>
  </div>
  <div class="page">
    <p>Myopic Delivery Program</p>
    <p>$ $ $ $ $</p>
    <p>SKU 1</p>
    <p>$ $ $ $ $</p>
    <p>SKU 16</p>
  </div>
  <div class="page">
    <p>SILP</p>
    <p>Stochastic Integer Linear Program (SILP)</p>
    <p>SILP from Benisch et al 2004 Delivery and Production Scheduling</p>
    <p>ILP that maximizes expected profit Fixed n-day horizon</p>
    <p>Customer Bidding</p>
    <p>Production Scheduling</p>
    <p>Delivery Scheduling</p>
    <p>Component Ordering</p>
  </div>
  <div class="page">
    <p>SILP Program</p>
    <p>$</p>
    <p>#</p>
    <p>$</p>
    <p>#</p>
    <p>#</p>
    <p>$</p>
    <p>E[$]</p>
    <p>#</p>
    <p>E[$]</p>
    <p>#</p>
    <p>#</p>
    <p>E[$]</p>
    <p>E[$]</p>
    <p>#</p>
    <p>E[$]</p>
    <p>#</p>
    <p>#</p>
    <p>E[$]</p>
    <p>Day n</p>
    <p>Day 1 Day 2</p>
  </div>
  <div class="page">
    <p>SILP Program</p>
    <p>$</p>
    <p>#</p>
    <p>$</p>
    <p>#</p>
    <p>#</p>
    <p>$</p>
    <p>E[$]</p>
    <p>#</p>
    <p>E[$]</p>
    <p>#</p>
    <p>#</p>
    <p>E[$]</p>
    <p>E[$]</p>
    <p>#</p>
    <p>E[$]</p>
    <p>#</p>
    <p>#</p>
    <p>E[$]</p>
    <p>Day n</p>
    <p>Day 1 Day 2</p>
    <p>RFQs and Orders</p>
  </div>
  <div class="page">
    <p>SILP Program</p>
    <p>$</p>
    <p>#</p>
    <p>$</p>
    <p>#</p>
    <p>#</p>
    <p>$</p>
    <p>E[$]</p>
    <p>#</p>
    <p>E[$]</p>
    <p>#</p>
    <p>#</p>
    <p>E[$]</p>
    <p>E[$]</p>
    <p>#</p>
    <p>E[$]</p>
    <p>#</p>
    <p>#</p>
    <p>E[$]</p>
    <p>Day n</p>
    <p>Day 1 Day 2</p>
    <p>Production</p>
  </div>
  <div class="page">
    <p>SILP Program</p>
    <p>$</p>
    <p>#</p>
    <p>$</p>
    <p>#</p>
    <p>#</p>
    <p>$</p>
    <p>E[$]</p>
    <p>#</p>
    <p>E[$]</p>
    <p>#</p>
    <p>#</p>
    <p>E[$]</p>
    <p>E[$]</p>
    <p>#</p>
    <p>E[$]</p>
    <p>#</p>
    <p>#</p>
    <p>E[$]</p>
    <p>Day 1 Day 2 Day n</p>
    <p>C</p>
  </div>
  <div class="page">
    <p>SAA</p>
    <p>Sample Average Approximation (SAA)</p>
    <p>Shapiro et al 2001 Benisch et al 2004</p>
    <p>Delivery and Production Scheduling</p>
    <p>ILP that maximizes expected profit n-day horizon k-samples</p>
    <p>Drawn from uncertainty distribution</p>
    <p>Customer Bidding</p>
    <p>Production Scheduling</p>
    <p>Delivery Scheduling</p>
    <p>Component Ordering</p>
  </div>
  <div class="page">
    <p>SAA Program</p>
    <p>$</p>
    <p>#</p>
    <p>$</p>
    <p>#</p>
    <p>#</p>
    <p>$</p>
    <p>$</p>
    <p>#</p>
    <p>$</p>
    <p>#</p>
    <p>#</p>
    <p>$</p>
    <p>Day 2</p>
    <p>Day 1</p>
    <p>$</p>
    <p>#</p>
    <p>$</p>
    <p>#</p>
    <p>#</p>
    <p>$</p>
    <p>$</p>
    <p>#</p>
    <p>$</p>
    <p>#</p>
    <p>#</p>
    <p>$</p>
    <p>$</p>
    <p>#</p>
    <p>$</p>
    <p>#</p>
    <p>#</p>
    <p>$</p>
    <p>$</p>
    <p>#</p>
    <p>$</p>
    <p>#</p>
    <p>#</p>
    <p>$</p>
    <p>$</p>
    <p>#</p>
    <p>$</p>
    <p>#</p>
    <p>#</p>
    <p>$</p>
    <p>Day n</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction to Problem Model</p>
    <p>Customer Market Process Component Market Process</p>
    <p>Application: Scheduling Agents Experiments</p>
    <p>Conclusions</p>
  </div>
  <div class="page">
    <p>Common Test Setup</p>
    <p>Told to emphasize feasibility over optimality Used profit as a measure of solution quality</p>
    <p>Revenue less late penalties and storage costs</p>
  </div>
  <div class="page">
    <p>Experiment 1: SAA</p>
    <p>Question: Given a global time cap, does it make more sense for SAA to quickly consider more samples, or spend more time optimizing fewer samples?</p>
    <p>For each combination ran 100 simulations 30-days of simulated steady-state behaviour</p>
  </div>
  <div class="page">
    <p>Experiment 1: SAA (Results)</p>
    <p>Flat surface Neither dimension significant for configurations that could be reasonably solved in TAC</p>
  </div>
  <div class="page">
    <p>Experiment 2: Algorithm Comparisons</p>
    <p>Question: Given these three algorithms and a time constraint, which algorithm should one use?</p>
    <p>Myopic 2-day SILP with 10s cap 2-day SILP with 50s cap 3-day SAA with 1 sample, 10s cap 3-day SAA with 5 sample, 50s cap</p>
    <p>For each algorithm ran 100 simulations 30-days of simulated steady-state behaviour</p>
    <p>CPLEX solved the Myopic ILP in under 10s</p>
  </div>
  <div class="page">
    <p>Experiment 2: Algorithm Comparisons (Results)</p>
    <p>SILP and SAA beat Myopic SILP and SAA not significantly different Altering time cap makes no significant difference</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction to Problem Model</p>
    <p>Customer Market Process Component Market Process</p>
    <p>Application: Scheduling Agents Experiments</p>
    <p>Conclusions</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>From experiments SILP and SAA were not significantly different for examined configurations Increasing the number of samples in timeconstrained SAA optimization did not significantly increase profit Early approximations were usually quite good</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>From testing approach and framework Easy to set up and run large experiments</p>
    <p>Simple to parallelize More control over parameters</p>
    <p>Time cap and simulation length altered Accurate model of Customer Market Process</p>
    <p>Game data likely given model Low prediction error</p>
  </div>
  <div class="page">
    <p>Future Directions</p>
    <p>Data generated component market model Improve our model of the customer market</p>
    <p>Priors during EM parameter estimation Larger data set TAC SCM Prediction Challenge</p>
    <p>Expand set of metrics Use framework integrate component ordering and customer bidding</p>
  </div>
  <div class="page">
    <p>Thank You</p>
    <p>Questions and comments</p>
  </div>
</Presentation>
