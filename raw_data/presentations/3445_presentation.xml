<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Sensi&amp;ve Informa&amp;on Tracking in Commodity IoT</p>
    <p>Z. Berkay Celik, Leonardo Babun, Amit K. Sikder, Hidayet Aksu, Gang Tan, Patrick McDaniel, and Selcuk Uluagac</p>
    <p>August 17th, 2018 @ USENIX Security</p>
  </div>
  <div class="page">
    <p>Internet of Things (IoT) enables the future</p>
    <p>Smart Homes</p>
    <p>Healthcare</p>
    <p>Smart Energy</p>
    <p>Smart Farms</p>
  </div>
  <div class="page">
    <p>IoT is not magic</p>
    <p>IoT applica&amp;on</p>
    <p>Mobile app Connected devices</p>
    <p>Automa&amp;on</p>
  </div>
  <div class="page">
    <p>IoT enables the future (and a whole lot of problems)</p>
    <p>When you live home  Whether the door is locked or not</p>
  </div>
  <div class="page">
    <p>Sensi&amp;ve data in IoT apps</p>
    <p>Look inside of IoT apps to determine how they use privacy sensi&amp;ve data</p>
    <p>Device states  Device informa&amp;on  User inputs  Loca&amp;on (physical and geo-loca&amp;on)</p>
    <p>Problem: Users lack visibility into who sees their sensi&amp;ve informa&amp;on</p>
    <p>Saint</p>
  </div>
  <div class="page">
    <p>Sta&amp;c taint analysis</p>
    <p>Sta&amp;c taint analysis is a technique that tracks informa&amp;on dependencies from an origin</p>
    <p>Conceptual idea:  Taint source  Taint propaga&amp;on  Taint sink</p>
    <p>Saint</p>
    <p>Goal: Analyze app source code to determine when privacy sensi&amp;ve informa&amp;on leaves the IoT app</p>
  </div>
  <div class="page">
    <p>Challenges</p>
    <p>Current data tracking tools are insufficient to address these challenges</p>
    <p>Saint</p>
    <p>IoT programming pla^orms are diverse  Iden&amp;fying sensi&amp;ve sources in IoT apps is quite subtle  Each IoT pla^orm has its idiosyncrasies that require special treatment</p>
  </div>
  <div class="page">
    <p>Saint  Saint is integra&amp;on of sta&amp;c taint</p>
    <p>tracking into the IoT apps</p>
    <p>SainT</p>
    <p>IoT App</p>
    <p>source code</p>
    <p>Perform data flow analysis</p>
    <p>Obtain IR</p>
    <p>(source, sink and entry point detec&amp;on)</p>
    <p>Saint analyzer</p>
    <p>Report discovered data flows</p>
    <p>Saints taint sources/</p>
    <p>sinks</p>
    <p>Saint</p>
    <p>Saint Analysis Console</p>
    <p>hdp://saint-project.appspot.com/</p>
    <p>def ini&amp;alize() { ecobee.poll() subscribe(app, appTouch) }</p>
    <p>Taint sink: Internet --- hdpPUT() in Line 123 Dataflow path 1: sendSms --&gt; $DeviceName [Device Informa&amp;on] Finding #: Device Informa&amp;on transmided [Developer-defined URL]</p>
    <p>Analysis Output Stacktrace</p>
  </div>
  <div class="page">
    <p>h1(){ s.on() d.unlock() def between= y() if (between){ z() } }</p>
    <p>y(){ return timeOfDayIsBetween(fromTime, toTime) }</p>
    <p>z(){ sendSms(c, ...) } 9</p>
    <p>input (p, presenceSensor, type:device) input (s, switch, type:device) input (d, door, type:device) input (toTime, time, type:user_defined) input (fromTime, time, type:user_defined) input (c, contact, type:user_defined)</p>
    <p>subscribe(p, present, h1)</p>
    <p>Devices</p>
    <p>z</p>
    <p>y</p>
    <p>h1</p>
    <p>Events</p>
    <p>Computa&amp;on</p>
    <p>Saint</p>
    <p>Saint Analyzer</p>
    <p>IR</p>
    <p>IoT pla^orm programming language</p>
    <p>Groovy DSL Python</p>
    <p>From app source code to IR</p>
  </div>
  <div class="page">
    <p>input (ther, thermostat, device) input (thld, number, user_defined) def initialize() { subscribe(app, appHandler) }</p>
    <p>def appHandler(evt) { foo() }</p>
    <p>def foo(){ temp=ther.latestValue(&quot;temperature&quot;) tempCel=convert(temp) + thld bar(tempCel) }</p>
    <p>def convert(t){ return((t-32)*5)/9) }</p>
    <p>def bar(t){ ther.setHeatingSetpoint(t) sendSMS(adversary,set to ${t}) }</p>
    <p>Backward taint tracking</p>
    <p>Iden&amp;fy sensi&amp;ve data flow paths</p>
    <p>(23: t,16: [tempCel])</p>
    <p>(16: tempCel, 15: [temp, thld])</p>
    <p>(15: temp, 14:[ ther.latestValue])</p>
    <p>Dependence rela&amp;on</p>
    <p>Saint</p>
  </div>
  <div class="page">
    <p>Path-sensi&amp;vity  Collects the evalua&amp;on results of the predicates  Discards infeasible paths</p>
    <p>Context-sensi&amp;vity  Implements depth-one call-site sensi&amp;vity  Discards paths not matching calls and returns</p>
    <p>Implicit flows  Determines whether predicates at condi&amp;onal branches depends on a tainted value  Taints all elements in the condi&amp;onal branch</p>
    <p>Saint</p>
    <p>Analysis Sensi&amp;vity and Implicit Flows</p>
  </div>
  <div class="page">
    <p>Algorithms for IoT-specific idiosyncrasies</p>
    <p>counter=state.switchCounter //state variable if (counter){ device actions}</p>
    <p>&quot;$methodName&quot;() // call by reflec&amp;on def foo() { // add as possible call target } def bar() { // add as possible call target }</p>
    <p>State variables  Field-sensi&amp;ve analysis</p>
    <p>Web service apps  Allows external en&amp;&amp;es to access devices</p>
    <p>Call by reflec&amp;on  Add all methods as possible call targets</p>
    <p>On-demand algorithms for analysis precision</p>
    <p>mappings { // web-service apps path(&quot;/switches&quot;) { action: [GET: &quot;listSwitches&quot;] } def listSwitches() { return it.currentValue(&quot;switch) }</p>
    <p>Saint</p>
  </div>
  <div class="page">
    <p>Implemented Saint for SmartThings IoT pla^orm  Selected 168 official and 62 third-party market apps  92 official and 46 third-party apps expose at least one kind of sensi&amp;ve data</p>
    <p>Saint</p>
    <p>Applica&amp;on Study</p>
    <p>Apps Internet SMS Both Total</p>
    <p>Official 24 63 5 92</p>
    <p>Third-party 10 36 - 46</p>
  </div>
  <div class="page">
    <p>Saint</p>
    <p>What type of privacy-sensi&amp;ve informa&amp;on leaves IoT apps?</p>
    <p>Applica&amp;on Study</p>
    <p>% A</p>
    <p>pp s</p>
    <p>Device state Device info. User input Location State variable</p>
    <p>#57 #29 #28</p>
    <p>#4</p>
    <p>#34 #76</p>
    <p>#60</p>
    <p>#10#9</p>
    <p>Third-party apps</p>
    <p>#12</p>
    <p>Official apps</p>
    <p>Third-party apps</p>
    <p>% A</p>
    <p>p p</p>
    <p>s</p>
  </div>
  <div class="page">
    <p>Who sees privacy-sensi&amp;ve informa&amp;on?</p>
    <p>Recipient defined by Content defined by</p>
    <p>Taint Sinks Apps User Developer External User Developer External</p>
    <p>Messaging Official 154 0 0 5 149 0</p>
    <p>Third-party 67 0 0 4 63 0</p>
    <p>Internet Official 2 48 44 0 54 40</p>
    <p>Third-party 0 13 12 0 13 12</p>
    <p>sendSMS(phoneNumber, kids $presence ) hdpPost(URL, kids $presence)</p>
    <p>Recipient Content</p>
    <p>Saint</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>Introduced Saint, a sta&amp;c analysis tool that iden&amp;fies sensi&amp;ve data flows in IoT apps  Evaluated Saint on 230 SmartThings apps  Found %60 of the analyzed apps includes sensi&amp;ve data flows  Consumers and developers can use Saint to iden&amp;fy poten&amp;al privacy risks  Saint console is available: hdp://saint-project.appspot.com/</p>
    <p>Saint</p>
  </div>
  <div class="page">
    <p>V.1.0.1 Released May 2018</p>
    <p>security</p>
    <p>IoTBench</p>
    <p>hdps://github.com/IoTBench/</p>
  </div>
  <div class="page">
    <p>Thank you for listening!</p>
    <p>hdps://beerkay.github.io</p>
    <p>berkaycelik @ZBerkayCelik</p>
    <p>?</p>
    <p>hdps://github.com/LeoBabun</p>
    <p>leonardo-babun @BabunLeo</p>
  </div>
</Presentation>
