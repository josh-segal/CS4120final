<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>deTector: a Topology-Aware Monitoring System for Data Center Networks</p>
    <p>Yanghua Peng1, Ji Yang2, Chuan Wu1, Chuanxiong Guo3, Chengchen Hu2, Zongpeng Li4</p>
  </div>
  <div class="page">
    <p>Data Center Network Monitoring</p>
    <p>Failures are the norm rather than exception  Typical first year for a new cluster (Jeff Dean, Google)  8 network maintenances  15 router reloads/failures  26 rack failures/moves  Dozens of blips of DNS  1000 individual machine failures</p>
    <p>SLA violation (99.999%)  Packet losses and latency spikes  Difficult to troubleshoot (up to days to fix the issues)</p>
  </div>
  <div class="page">
    <p>Data Center Network Monitoring</p>
    <p>Failures are the norm rather than exception  Typical first year for a new cluster (Jeff Dean, Google)  8 network maintenances  15 router reloads/failures  26 rack failures/moves  Dozens of blips of DNS  1000 individual machine failures</p>
    <p>SLA violation (99.999%)  Packet losses and latency spikes  Difficult to troubleshoot (up to days to fix the issues)</p>
    <p>A network monitoring system for rapid failure recovery</p>
  </div>
  <div class="page">
    <p>Challenges</p>
    <p>Clean failures  Easy to detect, e.g., server down.</p>
    <p>Gray failures  Not reported by the device (SNMP/CLI)</p>
    <p>Low-rate losses  Covered up by ECMP</p>
    <p>Transient failures  Difficult to play back and pinpoint</p>
  </div>
  <div class="page">
    <p>Challenges</p>
    <p>Clean failures  Easy to detect, e.g., server down.</p>
    <p>Gray failures  Not reported by the device (SNMP/CLI)</p>
    <p>Low-rate losses  Covered up by ECMP</p>
    <p>Transient failures  Difficult to play back and pinpoint</p>
    <p>Exhaustive detection</p>
  </div>
  <div class="page">
    <p>Existing Solutions</p>
    <p>Existing systems  Passive: CLI/SNMP  Active: Pingmesh, NetNORAD</p>
    <p>Limitations  Fail to detect at least one type of losses  High overhead  Can not pinpoint failures without other tools (e.g., tracert)</p>
  </div>
  <div class="page">
    <p>Existing Solutions</p>
    <p>Existing systems  Passive: CLI/SNMP  Active: Pingmesh, NetNORAD</p>
    <p>Limitations  Fail to detect at least one type of losses  High overhead  Can not pinpoint failures without other tools (e.g., tracert)</p>
    <p>Can we design a better network monitoring system by exploiting</p>
    <p>network topology?</p>
  </div>
  <div class="page">
    <p>deTector in One Slide</p>
    <p>Controller</p>
    <p>Diagnoser</p>
    <p>Pinger</p>
    <p>Pinglist</p>
    <p>Responder</p>
    <p>Logs</p>
    <p>UDP Probes</p>
  </div>
  <div class="page">
    <p>Phase I: Path Computation</p>
  </div>
  <div class="page">
    <p>Path Selection Problem</p>
    <p>Path 1</p>
    <p>Path 2</p>
    <p>Path 3</p>
    <p>Link 1 Link 2 Link 3  Given a routing matrix, select</p>
    <p>probing paths to send probes:  path number minimizing  -coverage  -identifiability</p>
  </div>
  <div class="page">
    <p>-coverage</p>
    <p>Ensure even and enough path coverage of each link</p>
    <p>Each link is covered by at least  paths</p>
    <p>w[link]: track the number of paths through it.</p>
    <p>If w[link] &gt; , then the link has enough paths through it.</p>
    <p>Path 1</p>
    <p>Path 2</p>
    <p>Path 3</p>
    <p>Link 1 Link 2 Link 3</p>
  </div>
  <div class="page">
    <p>-identifiability</p>
    <p>Any  failed links can be identified correctly</p>
    <p>Probe matrix: path1 + path2 1-identifiability but not 2identifiability</p>
    <p>Path 1</p>
    <p>Path 2</p>
    <p>Path 3</p>
    <p>Link 1 Link 2 Link 3</p>
  </div>
  <div class="page">
    <p>Algorithm for 1-identifiability</p>
    <p>Select the minimum number of paths so that each link has a different set of probe paths.</p>
    <p>Greedily select the path which splits the largest number of link sets in each iteration.</p>
    <p>L</p>
  </div>
  <div class="page">
    <p>Algorithm for 1-identifiability</p>
    <p>Select the minimum number of paths so that each link has a different set of probe paths.</p>
    <p>Greedily select the path which splits the largest number of link sets in each iteration.</p>
    <p>L</p>
    <p>L2L1</p>
    <p>Select a path</p>
  </div>
  <div class="page">
    <p>Algorithm for 1-identifiability</p>
    <p>Select the minimum number of paths so that each link has a different set of probe paths.</p>
    <p>Greedily select the path which splits the largest number of link sets in each iteration.</p>
    <p>L</p>
    <p>L2L1</p>
    <p>L11 L12 L21 L22</p>
    <p>Select a path</p>
    <p>Select a path</p>
  </div>
  <div class="page">
    <p>Extend routing matrix with virtual links.</p>
    <p>If a virtual link is down, we say its corresponding physical links have failed.Physical links</p>
    <p>Path 1</p>
    <p>Path 2</p>
    <p>Path 3</p>
    <p>Link 1 Link 2 Link 3</p>
  </div>
  <div class="page">
    <p>Link 12</p>
    <p>Link 13</p>
    <p>Link 23  Extend routing</p>
    <p>matrix with virtual links.</p>
    <p>If a virtual link is down, we say its corresponding physical links have failed.ORPhysical links Virtual links</p>
    <p>Path 1</p>
    <p>Path 2</p>
    <p>Path 3</p>
    <p>Link 1 Link 2 Link 3</p>
  </div>
  <div class="page">
    <p>Probe Matrix Construction (PMC) Algorithm</p>
    <p>Select a path with minimal score in each iteration  Stop when achieving -coverage and -identifiability</p>
    <p>Extend the routing matrix with virtual links  Define a score for each path Quantify coverage</p>
    <p>Quantify identifiability</p>
  </div>
  <div class="page">
    <p>PMC Algorithm</p>
    <p>Achieve 63% approximation ratio.</p>
    <p>Time complexity O(n2) where n is the number of paths.</p>
    <p>A Fattree(64) DCN has more than 232 paths, running time &gt; 24 hours</p>
  </div>
  <div class="page">
    <p>PMC Algorithm</p>
    <p>Achieve 63% approximation ratio.</p>
    <p>Time complexity O(n2) where n is the number of paths.</p>
    <p>A Fattree(64) DCN has more than 232 paths, running time &gt; 24 hours</p>
  </div>
  <div class="page">
    <p>PMC Algorithm</p>
    <p>Achieve 63% approximation ratio.</p>
    <p>Time complexity O(n2) where n is the number of paths.</p>
    <p>A Fattree(64) DCN has more than 232 paths, running time &gt; 24 hours</p>
    <p>Optimizations for speedup</p>
  </div>
  <div class="page">
    <p>Optimization I: Routing Matrix Decomposition</p>
    <p>Share no links and paths</p>
  </div>
  <div class="page">
    <p>Optimization II: Lazy Update</p>
    <p>Defer the score update of a path as much as possible until we have to.</p>
    <p>Correctness guaranteed by the submodularity of the objective function.</p>
    <p>path 1</p>
    <p>path 3</p>
    <p>Score heap</p>
    <p>Only update the score of the top</p>
    <p>element</p>
    <p>path 2</p>
    <p>path 5</p>
    <p>path 4</p>
  </div>
  <div class="page">
    <p>Optimization III: Symmetry Reduction</p>
    <p>Most DCN topologies are symmetric!</p>
  </div>
  <div class="page">
    <p>PMC Algorithm Results of Fattree</p>
    <p>Running time on one Xeon E5-2620 CPU From days to</p>
    <p>seconds</p>
  </div>
  <div class="page">
    <p>PMC Algorithm Results of Fattree</p>
    <p>Running time on one Xeon E5-2620 CPU</p>
    <p>The number of probe paths The optimal needs</p>
    <p>at least 52428 paths</p>
    <p>From days to seconds</p>
  </div>
  <div class="page">
    <p>Phase II: Network Probing</p>
  </div>
  <div class="page">
    <p>Network Probing</p>
    <p>Source routing: IP-in-IP encapsulation and decapsulation</p>
    <p>UDP probes: varying packet length, DSCP, source port</p>
    <p>Responders: simply echo probes back</p>
  </div>
  <div class="page">
    <p>Phase III: Loss Localization</p>
  </div>
  <div class="page">
    <p>Loss Localization Problem</p>
    <p>Path 1</p>
    <p>Path 2</p>
    <p>Path 3</p>
    <p>Link 1 Link 2 Link 3  Given the probe matrix and loss measurements, select the least number of links to explain the observation.</p>
    <p>NP-hard</p>
    <p>Loss measurements</p>
  </div>
  <div class="page">
    <p>Packet Loss Localization (PLL) Algorithm</p>
    <p>In each iteration we select a link that can explain the largest number of probe losses until all are explained  If a link lies in the packet path, then the link can explain the loss.</p>
    <p>Two simple improvements  Matrix decomposition to speedup computation  Use threshold to filter false positives  The ratio of # of lossy paths over # of all probe paths through the link</p>
  </div>
  <div class="page">
    <p>Experiment</p>
    <p>A 4-ary Fattree testbed with 20 SDN switches  Install OpenFlow rules to emulate losses caused by various</p>
    <p>failures  Full packet loss: link down etc.  Deterministic partial loss: packet blackhole etc.  Random partial loss: bit flips etc.</p>
    <p>Performance metric  Accuracy  False positive ratio</p>
  </div>
  <div class="page">
    <p>Experiment  Sensitivity test of sending frequency</p>
    <p>Overhead of pingersAccuracy and false positives 24</p>
  </div>
  <div class="page">
    <p>Experiment  Sensitivity test of sending frequency</p>
    <p>Overhead of pingersAccuracy and false positives</p>
  </div>
  <div class="page">
    <p>Experiment  Accuracy and false positives of three monitoring systems</p>
  </div>
  <div class="page">
    <p>Experiment  Accuracy and false positives of three monitoring systems</p>
    <p>Same # of probes, 98%, 89%, 78% accuracy respectively</p>
    <p>Same # of probes, 1%, 8%, 1% false positives respectively 25</p>
  </div>
  <div class="page">
    <p>Simulation  Accuracy in a 18-radix Fattree, with probe matrices of</p>
    <p>different levels of -coverage and -identifiability</p>
  </div>
  <div class="page">
    <p>Simulation  Accuracy in a 18-radix Fattree, with probe matrices of</p>
    <p>different levels of -coverage and -identifiability</p>
    <p>Identifiability is more effective than coverage for failure localization.</p>
  </div>
  <div class="page">
    <p>Simulation  Accuracy in a 18-radix Fattree, with probe matrices of</p>
    <p>different levels of -coverage and -identifiability</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>The core of deTector is a carefully designed probe matrix, enabling fast and accurate loss detection and localization.</p>
    <p>deTector is practically deployable.  Discussions  Packet entropy: limited destination IP addresses  Loss diagnosis: do not know why packets are dropped  Beyond deTector: apply probe matrix to optimize in-band</p>
    <p>techniques</p>
  </div>
  <div class="page">
    <p>Thanks</p>
  </div>
</Presentation>
