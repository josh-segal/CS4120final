<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>GRASS: Trimming Stragglers in</p>
    <p>Approximation Analytics</p>
    <p>Ganesh Ananthanarayanan, Michael Hung,</p>
    <p>Xiaoqi Ren, Ion Stoica, Adam Wierman, Minlan Yu</p>
  </div>
  <div class="page">
    <p>Next Generation of Analytics</p>
    <p>Timely results, even if approximate</p>
    <p>Data deluge makes this necessary</p>
  </div>
  <div class="page">
    <p>Optimal Scheduler</p>
    <p>Approximation Dimensions</p>
    <p>Error: Minimize time</p>
    <p>to get desired accuracy</p>
    <p>#cars sold to the nearest</p>
    <p>thousand</p>
    <p>Deadline: Maximize</p>
    <p>accuracy within deadline</p>
    <p>Pick the best ad to display</p>
    <p>within 2s</p>
    <p>*w.r.t. state-of-the-art schedulers (production workloads from</p>
    <p>Facebook and Bing)</p>
    <p>Improve accuracy by 48% Speedup by 40%</p>
  </div>
  <div class="page">
    <p>Prioritize tasks</p>
    <p>Subset of tasks to complete</p>
    <p>#tasks  #slots (multi-waved jobs) (NP-Hard but many known heuristics)</p>
    <p>Straggler tasks</p>
    <p>Slowest task can be 8x slower than median task</p>
    <p>Speculation: Spawn a duplicate, earliest wins</p>
    <p>Google[OSDI04], FB[OSDI08], Microsoft[OSDI10]</p>
    <p>Scheduling Challenge</p>
  </div>
  <div class="page">
    <p>Challenge: dynamically prioritize between</p>
    <p>speculative &amp; unscheduled tasks</p>
    <p>to meet deadline/error bound</p>
  </div>
  <div class="page">
    <p>Speculative copies consume extra resources</p>
    <p>T3T3T3T3</p>
    <p>Opportunity Cost</p>
    <p>T2T2T2T2</p>
    <p>timetimetimetime</p>
    <p>Slot 1Slot 1Slot 1Slot 1</p>
    <p>Slot 2Slot 2Slot 2Slot 2</p>
    <p>Slot 3Slot 3Slot 3Slot 3 T1T1T1T1</p>
    <p>Is speculation</p>
    <p>worth the</p>
    <p>payoff?</p>
    <p>T1T1T1T1</p>
  </div>
  <div class="page">
    <p>Roadmap</p>
  </div>
  <div class="page">
    <p>Greedy Scheduling (GS)</p>
    <p>Greedily improve accuracy, i.e., earliest finishing task</p>
    <p>T1T1T1T1</p>
    <p>T2T2T2T2 T3T3T3T3 timetimetimetime</p>
    <p>Slot 1Slot 1Slot 1Slot 1</p>
    <p>Slot 2Slot 2Slot 2Slot 2</p>
    <p>T4T4T4T4 T5T5T5T5 T6T6T6T6</p>
    <p>T7T7T7T7</p>
    <p>Task ID T1 T2 T3 T4 T5 T6 T7 T8 T9</p>
    <p>Time</p>
    <p>remaining</p>
    <p>New copy 2 --- 1 1 1 1 1 1 3</p>
    <p>T1T1T1T1 Deadline = 6</p>
    <p>(at time =1 )</p>
    <p>Accuracy = 7/9 Straggler</p>
  </div>
  <div class="page">
    <p>Resource Aware Scheduling (RAS)</p>
    <p>Speculate only if it saves time and resources</p>
    <p>timetimetimetime</p>
    <p>T1T1T1T1</p>
    <p>T2T2T2T2 T1T1T1T1</p>
    <p>Slot 1Slot 1Slot 1Slot 1</p>
    <p>Slot 2Slot 2Slot 2Slot 2</p>
    <p>T6T6T6T6</p>
    <p>T3T3T3T3</p>
    <p>T4T4T4T4</p>
    <p>T5T5T5T5</p>
    <p>T7T7T7T7</p>
    <p>T8T8T8T8</p>
    <p>Task ID T1 T2 T3 T4 T5 T6 T7 T8 T9</p>
    <p>Time</p>
    <p>remaining</p>
    <p>New copy 2 --- 1 1 1 1 1 1 3</p>
    <p>T1T1T1T1</p>
    <p>Deadline = 6</p>
    <p>(at time =1 )</p>
    <p>Accuracy = 8/9</p>
    <p>One copy for 5s (vs.)</p>
    <p>Two copies for 2s</p>
    <p>Straggler</p>
  </div>
  <div class="page">
    <p>GS vs. RAS</p>
    <p>T1T1T1T1</p>
    <p>T2T2T2T2 T3T3T3T3 timetimetimetime</p>
    <p>Slot 1Slot 1Slot 1Slot 1</p>
    <p>Slot 2Slot 2Slot 2Slot 2</p>
    <p>T4T4T4T4 T5T5T5T5 T6T6T6T6</p>
    <p>T7T7T7T7</p>
    <p>Deadline = 6</p>
    <p>Accuracy = 7/9</p>
    <p>timetimetimetime</p>
    <p>T1T1T1T1</p>
    <p>T2T2T2T2 T1T1T1T1</p>
    <p>Slot 1Slot 1Slot 1Slot 1</p>
    <p>Slot 2Slot 2Slot 2Slot 2</p>
    <p>T6T6T6T6</p>
    <p>T3T3T3T3</p>
    <p>T4T4T4T4</p>
    <p>T5T5T5T5</p>
    <p>T7T7T7T7</p>
    <p>T8T8T8T8 Deadline = 6</p>
    <p>Accuracy = 8/9</p>
    <p>Deadline = 3</p>
    <p>Deadline = 3</p>
    <p>Accuracy = 3/9T1T1T1T1</p>
    <p>Accuracy = 2/9</p>
    <p>GS</p>
    <p>RAS</p>
    <p>Neither GS nor RAS is uniformly better</p>
  </div>
  <div class="page">
    <p>Intuition:</p>
    <p>Use RAS early in the job (be conservative),</p>
    <p>switch to GS towards the end (be aggressive)</p>
  </div>
  <div class="page">
    <p>Theoretical Scheduling Model</p>
    <p>Multi-waved scheduling of tasks</p>
    <p>Constant wave-width</p>
    <p>Agnostic to fairness policies</p>
    <p>Heavy-tailed (Pareto) distribution of task durations</p>
    <p>Speculation: GS, RAS, Switching, Optimal</p>
    <p>Theorem:</p>
    <p>Using RAS when &gt;2 waves of tasks remain, and GS when 2 waves of tasks remain</p>
    <p>is near-optimal</p>
  </div>
  <div class="page">
    <p>How to estimate two remaining waves?</p>
    <p>Wave boundaries are not strict</p>
    <p>Non-uniform task durations</p>
    <p>Wave-width is not constant</p>
    <p>Start with RAS and switch to GS close to the</p>
    <p>deadline/error-bound</p>
  </div>
  <div class="page">
    <p>GSRASRAS GSRAS</p>
    <p>Learning the switching point</p>
    <p>GS-only and RAS-only job samples</p>
    <p>Exploration vs. Exploitation</p>
    <p>Multi-armed bandit solution,  = 0.1</p>
    <p>RAS[4s]+GS[2s]</p>
    <p>RAS[5s]+GS[1s]</p>
    <p>RAS[6s]</p>
    <p>Switch</p>
    <p>Deadline 5555</p>
  </div>
  <div class="page">
    <p>GRASS (= GS + RAS) Scheduler</p>
    <p>Opportunity Cost in speculation for stragglers</p>
    <p>GS  Greedy Scheduling</p>
    <p>RAS  Resource Aware Scheduling</p>
    <p>Switch RASGS close to deadline/error-bound</p>
    <p>Learn switching point empirically from job samples</p>
    <p>Provably near-optimal in theoretical model</p>
  </div>
  <div class="page">
    <p>Implementation</p>
    <p>Hadoop 0.20.2 and Spark 0.7.3</p>
    <p>Modified Fair Scheduler</p>
    <p>Job bins with GS-only and RAS-only samples</p>
    <p>Task Estimators</p>
    <p>Remaining time is extrapolated from data-to-process</p>
    <p>progress reports at 5% intervals</p>
    <p>New copys time is sampled from completed tasks</p>
  </div>
  <div class="page">
    <p>How well does GRASS perform?</p>
    <p>Workload from Facebook and Bing traces</p>
    <p>Hadoop and Dryad production jobs</p>
    <p>Added deadlines and error bounds</p>
    <p>Baselines: LATE &amp; Mantri</p>
    <p>200 node EC2 deployment (m2.2xlarge instances)</p>
  </div>
  <div class="page">
    <p>Accuracy of deadline-bound jobs</p>
    <p>improve by 47%</p>
    <p>Gains hold across deadlines (lenient and stringent )</p>
  </div>
  <div class="page">
    <p>GRASS is 22% better than statically</p>
    <p>picking GS or RAS</p>
    <p>and is near-optimal</p>
  </div>
  <div class="page">
    <p>Error-bound Jobs</p>
    <p>Overall speedup of 38% (optimal is 40%)</p>
    <p>Gains hold across all error bounds</p>
    <p>Exact jobs (0% error-bound) speed up by 34%</p>
    <p>Unified Straggler Mitigation</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Next gen. of analytics: Approximate but timely results</p>
    <p>Challenge: Dynamic and unpredictable stragglers</p>
    <p>GRASS  Conservative speculation early in the job;</p>
    <p>aggressive towards its end</p>
    <p>Evaluation with Hadoop &amp; Spark</p>
    <p>Accuracy of deadline-bound jobs improve by 47%</p>
    <p>Error-bound jobs speed up by 38%</p>
  </div>
</Presentation>
