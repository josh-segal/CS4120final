<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Lock-free Concurrent Level Hashing for Persistent Memory</p>
    <p>Zhangyu Chen, Yu Hua, Bo Ding, Pengfei Zuo</p>
    <p>Huazhong University of Science and Technology</p>
    <p>USENIX ATC 2020</p>
  </div>
  <div class="page">
    <p>Persistent Memory (PM)</p>
    <p>PM features  Non-volatility</p>
    <p>Large capacity</p>
    <p>PM speedups storage systems  TB-scale memory for applications</p>
    <p>Instant recovery from system failures Intel Optane DC Persistent Memory 512 GB per module at most</p>
    <p>DIMM compatible</p>
    <p>Byte-addressability</p>
    <p>DRAM-scale latency</p>
  </div>
  <div class="page">
    <p>PM Optimization</p>
    <p>Limited endurance</p>
    <p>Low write bandwidth of PM (Optane PM study in FAST 20)</p>
    <p>1/6 DRAM</p>
    <p>1/3 read bandwidth of PM</p>
  </div>
  <div class="page">
    <p>PM Optimization</p>
    <p>CPU</p>
    <p>CacheVolatile</p>
    <p>Persistent</p>
    <p>B u</p>
    <p>s</p>
    <p>Partial update</p>
  </div>
  <div class="page">
    <p>PM Optimization</p>
    <p>CPU</p>
    <p>CacheVolatile</p>
    <p>Persistent</p>
    <p>B u</p>
    <p>s</p>
    <p>Partial update</p>
    <p>data (32 B)</p>
  </div>
  <div class="page">
    <p>PM Optimization</p>
    <p>CPU</p>
    <p>CacheVolatile</p>
    <p>Persistent</p>
    <p>B u</p>
    <p>s8-byte atomic write</p>
    <p>Partial update</p>
  </div>
  <div class="page">
    <p>PM Optimization</p>
    <p>CPU</p>
    <p>CacheVolatile</p>
    <p>Persistent</p>
    <p>B u</p>
    <p>s</p>
    <p>Partial update</p>
  </div>
  <div class="page">
    <p>PM Optimization</p>
    <p>CPU</p>
    <p>CacheVolatile</p>
    <p>Persistent</p>
    <p>B u</p>
    <p>s</p>
    <p>Inconsistency</p>
    <p>Partial update</p>
  </div>
  <div class="page">
    <p>PM Optimization</p>
    <p>CPU</p>
    <p>CacheVolatile</p>
    <p>Persistent</p>
    <p>B u</p>
    <p>s</p>
    <p>Inconsistency</p>
    <p>CPU</p>
    <p>Cache</p>
    <p>clwb sfenceB</p>
    <p>u s</p>
    <p>Partial update</p>
  </div>
  <div class="page">
    <p>PM Optimization</p>
    <p>CPU</p>
    <p>CacheVolatile</p>
    <p>Persistent</p>
    <p>B u</p>
    <p>s</p>
    <p>Inconsistency</p>
    <p>CPU</p>
    <p>Cache</p>
    <p>clwb sfenceB</p>
    <p>u s</p>
    <p>Partial update</p>
  </div>
  <div class="page">
    <p>PM Optimization</p>
    <p>CPU</p>
    <p>CacheVolatile</p>
    <p>Persistent</p>
    <p>B u</p>
    <p>s</p>
    <p>Inconsistency</p>
    <p>CPU</p>
    <p>Cache</p>
    <p>clwb sfenceB</p>
    <p>u s</p>
    <p>Partial update</p>
  </div>
  <div class="page">
    <p>PM Optimization</p>
    <p>CPU</p>
    <p>CacheVolatile</p>
    <p>Persistent</p>
    <p>B u</p>
    <p>s</p>
    <p>Inconsistency</p>
    <p>CPU</p>
    <p>Cache</p>
    <p>clwb sfenceB</p>
    <p>u s</p>
  </div>
  <div class="page">
    <p>PM Optimization</p>
    <p>Reordering: memory fences</p>
    <p>CPU</p>
    <p>Cache</p>
    <p>B u</p>
    <p>s</p>
    <p>slotsProgram order</p>
    <p>slots</p>
  </div>
  <div class="page">
    <p>PM Optimization</p>
    <p>Reordering: memory fences</p>
    <p>CPU</p>
    <p>Cache</p>
    <p>B u</p>
    <p>skv_t item = new kv_t(k, v);</p>
    <p>slots[0] = &amp;item;</p>
    <p>slotsitemProgram order</p>
    <p>slots</p>
    <p>slots</p>
  </div>
  <div class="page">
    <p>PM Optimization</p>
    <p>Reordering: memory fences</p>
    <p>CPU</p>
    <p>Cache</p>
    <p>B u</p>
    <p>skv_t item = new kv_t(k, v);</p>
    <p>slots[0] = &amp;item;</p>
    <p>slotsitem</p>
    <p>Cache Reordering</p>
    <p>Program order</p>
    <p>slotsslots</p>
    <p>slots</p>
  </div>
  <div class="page">
    <p>PM Optimization</p>
    <p>Reordering: memory fences</p>
    <p>CPU</p>
    <p>Cache</p>
    <p>B u</p>
    <p>skv_t item = new kv_t(k, v);</p>
    <p>slots[0] = &amp;item; Cache Reordering</p>
    <p>Program order</p>
    <p>slotsslots Inconsistency</p>
  </div>
  <div class="page">
    <p>PM Optimization</p>
    <p>Reordering: memory fences</p>
    <p>CPU</p>
    <p>Cache</p>
    <p>B u</p>
    <p>skv_t item = new kv_t(k, v);</p>
    <p>slots[0] = &amp;item;</p>
    <p>Program order</p>
    <p>slotsslots Inconsistency</p>
    <p>clwb(item); sfence;</p>
  </div>
  <div class="page">
    <p>PM Index Structures</p>
    <p>PM index structures are important for large-scale storage</p>
    <p>systems to provide fast queries</p>
    <p>Hashing-based structures Tree-based structures</p>
  </div>
  <div class="page">
    <p>PM Index Structures</p>
    <p>PM index structures are important for large-scale storage</p>
    <p>systems to provide fast queries</p>
    <p>Hashing-based structures Tree-based structures key</p>
  </div>
  <div class="page">
    <p>PM Index Structures</p>
    <p>PM index structures are important for large-scale storage</p>
    <p>systems to provide fast queries</p>
    <p>Hashing-based structures Tree-based structures</p>
    <p>Hash(key)</p>
    <p>O(1) time complexity for point query</p>
    <p>keykey</p>
  </div>
  <div class="page">
    <p>PM Index Structures</p>
    <p>PM index structures are important for large-scale storage</p>
    <p>systems to provide fast queries</p>
    <p>Hashing-based structures Tree-based structures</p>
    <p>Hash(key)</p>
    <p>O(1) time complexity for point query</p>
    <p>keykey</p>
  </div>
  <div class="page">
    <p>Hashing Collisions and Resizing</p>
    <p>Hash collisions</p>
    <p>x</p>
    <p>Hash(y)</p>
    <p>y</p>
    <p>Collision</p>
  </div>
  <div class="page">
    <p>Hashing Collisions and Resizing</p>
    <p>Hash collisions</p>
    <p>x y</p>
    <p>Linear probing</p>
    <p>probing distance</p>
  </div>
  <div class="page">
    <p>Hashing Collisions and Resizing</p>
    <p>Hash collisions</p>
    <p>x y</p>
    <p>Linear probing</p>
    <p>x</p>
    <p>y</p>
    <p>Linked list</p>
    <p>probing distance</p>
  </div>
  <div class="page">
    <p>Hashing Collisions and Resizing</p>
    <p>Hash collisions</p>
    <p>Resizing</p>
    <p>Old hash table</p>
    <p>x y</p>
    <p>Linear probing</p>
    <p>x</p>
    <p>y</p>
    <p>Linked list</p>
    <p>probing distance</p>
  </div>
  <div class="page">
    <p>Hashing Collisions and Resizing</p>
    <p>Hash collisions</p>
    <p>Resizing</p>
    <p>Old hash table New hash table</p>
    <p>Rehashing</p>
    <p>x y</p>
    <p>Linear probing</p>
    <p>x</p>
    <p>y</p>
    <p>Linked list</p>
    <p>probing distance</p>
    <p>High latency!</p>
  </div>
  <div class="page">
    <p>Concurrent PM Hashing</p>
    <p>The importance of concurrency</p>
    <p>Fast indexing for TB-scale PM data</p>
    <p>Multi-core environment for servers equipped with Optane PM</p>
    <p>Concurrency for PM hashing</p>
    <p>Concurrent queries with correctness</p>
    <p>Multi-reader concurrency</p>
    <p>Multi-writer concurrency</p>
    <p>Concurrent resizing</p>
    <p>Writers Readers</p>
    <p>Concurrent resizing</p>
  </div>
  <div class="page">
    <p>PM Variants of Concurrent Hashing</p>
    <p>CCEH [FAST 19]</p>
    <p>. . .</p>
    <p>. . .</p>
    <p>Bucket 0</p>
    <p>Bucket 1</p>
    <p>Bucket 254</p>
    <p>Bucket 255</p>
    <p>Bucket 0</p>
    <p>Bucket 1</p>
    <p>Bucket 254</p>
    <p>Bucket 255</p>
    <p>Segment 0 Segment 1</p>
    <p>Directory</p>
  </div>
  <div class="page">
    <p>PM Variants of Concurrent Hashing</p>
    <p>CCEH [FAST 19]  Segment reader/writer locks for queries</p>
    <p>. . .</p>
    <p>. . .</p>
    <p>Bucket 0</p>
    <p>Bucket 1</p>
    <p>Bucket 254</p>
    <p>Bucket 255</p>
    <p>Bucket 0</p>
    <p>Bucket 1</p>
    <p>Bucket 254</p>
    <p>Bucket 255</p>
    <p>Segment 0 Segment 1</p>
    <p>Directory</p>
  </div>
  <div class="page">
    <p>PM Variants of Concurrent Hashing</p>
    <p>CCEH [FAST 19]  Segment reader/writer locks for queries</p>
    <p>Dynamic resizing with segment splitting</p>
    <p>and directory doubling</p>
    <p>. . .</p>
    <p>. . .</p>
    <p>Bucket 0</p>
    <p>Bucket 1</p>
    <p>Bucket 254</p>
    <p>Bucket 255</p>
    <p>Bucket 0</p>
    <p>Bucket 1</p>
    <p>Bucket 254</p>
    <p>Bucket 255</p>
    <p>Segment 0 Segment 1</p>
    <p>Directory</p>
    <p>Coarse-grained locks!</p>
  </div>
  <div class="page">
    <p>PM Variants of Concurrent Hashing</p>
    <p>CCEH [FAST 19]  Segment reader/writer locks for queries</p>
    <p>Dynamic resizing with segment splitting</p>
    <p>and directory doubling</p>
    <p>P-CLHT [SOSP 19]</p>
    <p>. . .</p>
    <p>. . .</p>
    <p>Bucket 0</p>
    <p>Bucket 1</p>
    <p>Bucket 254</p>
    <p>Bucket 255</p>
    <p>Bucket 0</p>
    <p>Bucket 1</p>
    <p>Bucket 254</p>
    <p>Bucket 255</p>
    <p>Segment 0 Segment 1</p>
    <p>Directory</p>
    <p>Coarse-grained locks!</p>
  </div>
  <div class="page">
    <p>PM Variants of Concurrent Hashing</p>
    <p>CCEH [FAST 19]  Segment reader/writer locks for queries</p>
    <p>Dynamic resizing with segment splitting</p>
    <p>and directory doubling</p>
    <p>P-CLHT [SOSP 19]  Lock-free search and bucket lock for writes</p>
    <p>. . .</p>
    <p>. . .</p>
    <p>Bucket 0</p>
    <p>Bucket 1</p>
    <p>Bucket 254</p>
    <p>Bucket 255</p>
    <p>Bucket 0</p>
    <p>Bucket 1</p>
    <p>Bucket 254</p>
    <p>Bucket 255</p>
    <p>Segment 0 Segment 1</p>
    <p>Directory</p>
    <p>Coarse-grained locks!</p>
  </div>
  <div class="page">
    <p>PM Variants of Concurrent Hashing</p>
    <p>CCEH [FAST 19]  Segment reader/writer locks for queries</p>
    <p>Dynamic resizing with segment splitting</p>
    <p>and directory doubling</p>
    <p>P-CLHT [SOSP 19]  Lock-free search and bucket lock for writes  Full-table resizing with one helper thread</p>
    <p>. . .</p>
    <p>. . .</p>
    <p>Bucket 0</p>
    <p>Bucket 1</p>
    <p>Bucket 254</p>
    <p>Bucket 255</p>
    <p>Bucket 0</p>
    <p>Bucket 1</p>
    <p>Bucket 254</p>
    <p>Bucket 255</p>
    <p>Segment 0 Segment 1</p>
    <p>Directory</p>
    <p>Thread-1: resize Thread-2: help resizing</p>
    <p>Thread-3~n: wait for finishing resizing</p>
    <p>Coarse-grained locks!</p>
  </div>
  <div class="page">
    <p>PM Variants of Concurrent Hashing</p>
    <p>CCEH [FAST 19]  Segment reader/writer locks for queries</p>
    <p>Dynamic resizing with segment splitting</p>
    <p>and directory doubling</p>
    <p>P-CLHT [SOSP 19]  Lock-free search and bucket lock for writes  Full-table resizing with one helper thread</p>
    <p>. . .</p>
    <p>. . .</p>
    <p>Bucket 0</p>
    <p>Bucket 1</p>
    <p>Bucket 254</p>
    <p>Bucket 255</p>
    <p>Bucket 0</p>
    <p>Bucket 1</p>
    <p>Bucket 254</p>
    <p>Bucket 255</p>
    <p>Segment 0 Segment 1</p>
    <p>Directory</p>
    <p>Thread-1: resize Thread-2: help resizing</p>
    <p>Thread-3~n: wait for finishing resizing</p>
    <p>Coarse-grained locks!</p>
    <p>Resizing blocks queries!</p>
  </div>
  <div class="page">
    <p>... 0 1 2N-2 2N-1</p>
    <p>Level Hashing [OSDI 18]</p>
    <p>PM-friendly hashing index</p>
    <p>... 0 N-1</p>
    <p>Top level</p>
    <p>Bottom level</p>
  </div>
  <div class="page">
    <p>... 0 1 2N-2 2N-1</p>
    <p>Level Hashing [OSDI 18]</p>
    <p>PM-friendly hashing index  Two-level bucketized hash table with one</p>
    <p>step movement</p>
    <p>Two-level structure</p>
    <p>... 0 N-1</p>
    <p>Top level</p>
    <p>Bottom level</p>
  </div>
  <div class="page">
    <p>... 0 1 2N-2 2N-1</p>
    <p>Level Hashing [OSDI 18]</p>
    <p>PM-friendly hashing index  Two-level bucketized hash table with one</p>
    <p>step movement</p>
    <p>Two-level structure</p>
    <p>KV1 KV2 KV3 KV4</p>
    <p>Slots</p>
    <p>Tokens</p>
    <p>A 4-slot bucket</p>
    <p>... 0 N-1</p>
    <p>Top level</p>
    <p>Bottom level</p>
  </div>
  <div class="page">
    <p>... 0 1 2N-2 2N-1</p>
    <p>Level Hashing [OSDI 18]</p>
    <p>PM-friendly hashing index  Two-level bucketized hash table with one</p>
    <p>step movement</p>
    <p>key h1(key) h2(key)</p>
    <p>Two-level structure</p>
    <p>KV1 KV2 KV3 KV4</p>
    <p>Slots</p>
    <p>Tokens</p>
    <p>A 4-slot bucket</p>
    <p>One-step movement</p>
    <p>One extra write at most ...</p>
    <p>Top level</p>
    <p>Bottom level</p>
  </div>
  <div class="page">
    <p>... 0 1 2N-2 2N-1</p>
    <p>Level Hashing [OSDI 18]</p>
    <p>PM-friendly hashing index  Two-level bucketized hash table with one</p>
    <p>step movement  Write efficiency</p>
    <p>key h1(key) h2(key)</p>
    <p>Two-level structure</p>
    <p>KV1 KV2 KV3 KV4</p>
    <p>Slots</p>
    <p>Tokens</p>
    <p>A 4-slot bucket</p>
    <p>One-step movement</p>
    <p>One extra write at most ...</p>
    <p>Top level</p>
    <p>Bottom level</p>
  </div>
  <div class="page">
    <p>... 0 1 2N-2 2N-1</p>
    <p>Level Hashing [OSDI 18]</p>
    <p>PM-friendly hashing index  Two-level bucketized hash table with one</p>
    <p>step movement</p>
    <p>Low-overhead consistency guarantee via atomic token update</p>
    <p>Write efficiency</p>
    <p>Crash consistency</p>
    <p>key h1(key) h2(key)</p>
    <p>Two-level structure</p>
    <p>KV1 KV2 KV3 KV4</p>
    <p>Slots</p>
    <p>Tokens</p>
    <p>A 4-slot bucket</p>
    <p>One-step movement</p>
    <p>(Atomic update)</p>
    <p>One extra write at most ...</p>
    <p>Top level</p>
    <p>Bottom level</p>
  </div>
  <div class="page">
    <p>... 0 1 2N-2 2N-1</p>
    <p>Level Hashing [OSDI 18]</p>
    <p>PM-friendly hashing index  Two-level bucketized hash table with one</p>
    <p>step movement</p>
    <p>Low-overhead consistency guarantee via atomic token update</p>
    <p>Rehashing 1/3 buckets for one resizing</p>
    <p>Write efficiency</p>
    <p>Crash consistency</p>
    <p>... 0 N-1</p>
    <p>Top level</p>
    <p>Bottom level</p>
  </div>
  <div class="page">
    <p>... 1 2 4N-3 4N-14N-20</p>
    <p>... 0 1 2N-2 2N-1</p>
    <p>Level Hashing [OSDI 18]</p>
    <p>PM-friendly hashing index  Two-level bucketized hash table with one</p>
    <p>step movement</p>
    <p>Low-overhead consistency guarantee via atomic token update</p>
    <p>Rehashing 1/3 buckets for one resizing</p>
    <p>Write efficiency</p>
    <p>Crash consistency</p>
    <p>Top level</p>
    <p>Bottom level</p>
  </div>
  <div class="page">
    <p>...</p>
    <p>Concurrency in Level Hashing</p>
    <p>Slot-grained lock for queries</p>
    <p>Top level</p>
    <p>Bottom level</p>
    <p>Single-thread blocking resizing</p>
    <p>... 0 1 2N-2 2N-1</p>
    <p>... 0 N-1</p>
    <p>Top level</p>
    <p>Bottom level 0 N-1</p>
    <p>...</p>
    <p>x</p>
    <p>Thread-1: search(x) Thread-2: insert(key)</p>
  </div>
  <div class="page">
    <p>...</p>
    <p>Concurrency in Level Hashing</p>
    <p>Slot-grained lock for queries</p>
    <p>Thread-2: relocate x</p>
    <p>Top level</p>
    <p>Bottom level</p>
    <p>Single-thread blocking resizing</p>
    <p>... 0 1 2N-2 2N-1</p>
    <p>... 0 N-1</p>
    <p>Top level</p>
    <p>Bottom level 0 N-1</p>
    <p>...</p>
    <p>x</p>
    <p>Thread-1: search x</p>
    <p>Thread-1: search(x) Thread-2: insert(key)</p>
  </div>
  <div class="page">
    <p>...</p>
    <p>Concurrency in Level Hashing</p>
    <p>Slot-grained lock for queries</p>
    <p>Thread-2: relocate x</p>
    <p>Top level</p>
    <p>Bottom level</p>
    <p>Single-thread blocking resizing</p>
    <p>... 0 1 2N-2 2N-1</p>
    <p>... 0 N-1</p>
    <p>Top level</p>
    <p>Bottom level 0 N-1</p>
    <p>...</p>
    <p>x</p>
    <p>Thread-1: search x</p>
    <p>Missing inserted items!</p>
    <p>No x is found</p>
    <p>Thread-1: search(x) Thread-2: insert(key)</p>
  </div>
  <div class="page">
    <p>...</p>
    <p>Concurrency in Level Hashing</p>
    <p>Slot-grained lock for queries</p>
    <p>Thread-2: relocate x</p>
    <p>Top level</p>
    <p>Bottom level</p>
    <p>Single-thread blocking resizing</p>
    <p>... 1 2 4N-3 4N-14N-20</p>
    <p>... 0 1 2N-2 2N-1</p>
    <p>... 0 N-1</p>
    <p>Top level</p>
    <p>Bottom level 0 N-1</p>
    <p>...</p>
    <p>x</p>
    <p>Thread-1: search x</p>
    <p>Missing inserted items!</p>
    <p>No x is found</p>
    <p>Thread-1: search(x) Thread-2: insert(key)</p>
    <p>Thread-1: insert(key) and trigger resizing</p>
  </div>
  <div class="page">
    <p>...</p>
    <p>Concurrency in Level Hashing</p>
    <p>Slot-grained lock for queries</p>
    <p>Thread-2: relocate x</p>
    <p>Top level</p>
    <p>Bottom level</p>
    <p>Single-thread blocking resizing</p>
    <p>... 1 2 4N-3 4N-14N-20</p>
    <p>... 0 1 2N-2 2N-1</p>
    <p>... 0 N-1</p>
    <p>Top level</p>
    <p>Bottom level 0 N-1</p>
    <p>...</p>
    <p>x</p>
    <p>Thread-1: search x</p>
    <p>Missing inserted items!</p>
    <p>No x is found</p>
    <p>Thread-1: search(x) Thread-2: insert(key)</p>
    <p>Thread-1: insert(key) and trigger resizing</p>
    <p>Thread-2~n: wait for finishing resizing</p>
    <p>Resizing blocks queries!</p>
  </div>
  <div class="page">
    <p>...</p>
    <p>Concurrency in Level Hashing</p>
    <p>Slot-grained lock for queries</p>
    <p>Thread-2: relocate x</p>
    <p>Top level</p>
    <p>Bottom level</p>
    <p>Single-thread blocking resizing</p>
    <p>... 1 2 4N-3 4N-14N-20</p>
    <p>... 0 1 2N-2 2N-1</p>
    <p>... 0 N-1</p>
    <p>Top level</p>
    <p>Bottom level 0 N-1</p>
    <p>...</p>
    <p>x</p>
    <p>Thread-1: search x</p>
    <p>Missing inserted items!</p>
    <p>No x is found</p>
    <p>Thread-1: search(x) Thread-2: insert(key)</p>
    <p>Thread-1: insert(key) and trigger resizing</p>
    <p>Thread-2~n: wait for finishing resizing</p>
    <p>Resizing blocks queries!</p>
    <p>Concurrency is the bottleneck</p>
  </div>
  <div class="page">
    <p>Challenges for PM Hashing</p>
    <p>Challenges</p>
    <p>Performance degradation for blocking resizing  High latency for coarse-grained locks</p>
    <p>Limited scalability for lock-based concurrency control  Lock constraint for concurrent accesses</p>
    <p>Persisting overheads in the critical path</p>
    <p>Design goals</p>
    <p>A PM-friendly and high-concurrency hashing scheme</p>
  </div>
  <div class="page">
    <p>Our Approach: Clevel Hashing</p>
    <p>Rehashing threads</p>
    <p>...</p>
    <p>Worker threads</p>
    <p>...Thread-local context ptr.</p>
    <p>A thread</p>
    <p>...</p>
    <p>... 2N-12N-22N-30 1 2</p>
    <p>... N-1N-20 1</p>
    <p>...</p>
    <p>...</p>
    <p>Rehashing</p>
    <p>key H1(key) H2(key)</p>
    <p>Le v</p>
    <p>el l</p>
    <p>is t</p>
    <p>last_le vel</p>
    <p>first_level</p>
    <p>is_resizing Context</p>
    <p>Global conte xt ptr.</p>
  </div>
  <div class="page">
    <p>Our Approach: Clevel Hashing</p>
    <p>Dynamic multi-level structure w/o</p>
    <p>extra writes for insertion</p>
    <p>Write-optimal insertion</p>
    <p>Rehashing threads</p>
    <p>...</p>
    <p>Worker threads</p>
    <p>...Thread-local context ptr.</p>
    <p>A thread</p>
    <p>...</p>
    <p>... 2N-12N-22N-30 1 2</p>
    <p>... N-1N-20 1</p>
    <p>...</p>
    <p>...</p>
    <p>Rehashing</p>
    <p>key H1(key) H2(key)</p>
    <p>Le v</p>
    <p>el l</p>
    <p>is t</p>
    <p>last_le vel</p>
    <p>first_level</p>
    <p>is_resizing Context</p>
    <p>Global conte xt ptr.</p>
  </div>
  <div class="page">
    <p>Our Approach: Clevel Hashing</p>
    <p>Dynamic multi-level structure w/o</p>
    <p>extra writes for insertion</p>
    <p>Write-optimal insertion</p>
    <p>Asynchronous rehashing w/o</p>
    <p>blocking concurrent queries</p>
    <p>Non-blocking resizing</p>
    <p>Rehashing threads</p>
    <p>...</p>
    <p>Worker threads</p>
    <p>...Thread-local context ptr.</p>
    <p>A thread</p>
    <p>...</p>
    <p>... 2N-12N-22N-30 1 2</p>
    <p>... N-1N-20 1</p>
    <p>...</p>
    <p>...</p>
    <p>Rehashing</p>
    <p>key H1(key) H2(key)</p>
    <p>Le v</p>
    <p>el l</p>
    <p>is t</p>
    <p>last_le vel</p>
    <p>first_level</p>
    <p>is_resizing Context</p>
    <p>Global conte xt ptr.</p>
  </div>
  <div class="page">
    <p>Our Approach: Clevel Hashing</p>
    <p>Dynamic multi-level structure w/o</p>
    <p>extra writes for insertion</p>
    <p>Write-optimal insertion</p>
    <p>Asynchronous rehashing w/o</p>
    <p>blocking concurrent queries</p>
    <p>Non-blocking resizing</p>
    <p>Lock-free concurrency control</p>
    <p>Lock-free queries</p>
    <p>Rehashing threads</p>
    <p>...</p>
    <p>Worker threads</p>
    <p>...Thread-local context ptr.</p>
    <p>A thread</p>
    <p>...</p>
    <p>... 2N-12N-22N-30 1 2</p>
    <p>... N-1N-20 1</p>
    <p>...</p>
    <p>...</p>
    <p>Rehashing</p>
    <p>key H1(key) H2(key)</p>
    <p>Le v</p>
    <p>el l</p>
    <p>is t</p>
    <p>last_le vel</p>
    <p>first_level</p>
    <p>is_resizing Context</p>
    <p>Global conte xt ptr.</p>
  </div>
  <div class="page">
    <p>Components</p>
    <p>Dynamic Multi-level Structure</p>
    <p>Non-blocking Resizing</p>
    <p>Lock-free Concurrency Control</p>
  </div>
  <div class="page">
    <p>Components</p>
    <p>Dynamic Multi-level Structure</p>
    <p>Non-blocking Resizing</p>
    <p>Lock-free Concurrency Control</p>
  </div>
  <div class="page">
    <p>Dynamic Multi-level Structure</p>
    <p>Support for variable-length items</p>
    <p>Store pointers in slots and actual items outside of the table</p>
  </div>
  <div class="page">
    <p>Dynamic Multi-level Structure</p>
    <p>Support for variable-length items</p>
    <p>Write-optimized hash table</p>
    <p>8 slots per bucket ...</p>
    <p>KV_PTR1</p>
    <p>Slots (each 8 bytes)</p>
    <p>A bucket KV_PTR8...</p>
  </div>
  <div class="page">
    <p>Dynamic Multi-level Structure</p>
    <p>Support for variable-length items</p>
    <p>Write-optimized hash table</p>
    <p>8 slots per bucket</p>
    <p>2 candidate buckets in one level</p>
    <p>...</p>
    <p>H1(key) H2(key) key</p>
  </div>
  <div class="page">
    <p>Dynamic Multi-level Structure</p>
    <p>Support for variable-length items</p>
    <p>Write-optimized hash table</p>
    <p>8 slots per bucket</p>
    <p>2 candidate buckets in one level</p>
    <p>Sharing-based multiple levels</p>
    <p>Add a level for resizing</p>
    <p>Remove one when rehashing completes ...</p>
    <p>... 2N-12N-22N-30 1 2</p>
    <p>... N-1N-20 1</p>
    <p>... H1(key) H2(key)</p>
    <p>key</p>
  </div>
  <div class="page">
    <p>Dynamic Multi-level Structure</p>
    <p>Support for variable-length items</p>
    <p>Write-optimized hash table</p>
    <p>8 slots per bucket</p>
    <p>2 candidate buckets in one level</p>
    <p>Sharing-based multiple levels</p>
    <p>Add a level for resizing</p>
    <p>Remove one when rehashing completes ...</p>
    <p>... 2N-12N-22N-30 1 2</p>
    <p>... N-1N-20 1</p>
    <p>... H1(key) H2(key)</p>
    <p>key</p>
    <p>No extra writes for insertion Write-optimal</p>
  </div>
  <div class="page">
    <p>Components</p>
    <p>Dynamic Multi-level Structure</p>
    <p>Non-blocking Resizing</p>
    <p>Lock-free Concurrency Control</p>
  </div>
  <div class="page">
    <p>The Support for Concurrent Resizing</p>
    <p>...</p>
    <p>... 2N-12N-22N-30 1 2</p>
    <p>... N-1N-20 1</p>
    <p>...</p>
    <p>key H1(key) H2(key)</p>
  </div>
  <div class="page">
    <p>The Support for Concurrent Resizing</p>
    <p>Level list A linked list to associate levels</p>
    <p>...</p>
    <p>... 2N-12N-22N-30 1 2</p>
    <p>... N-1N-20 1</p>
    <p>...</p>
    <p>key H1(key) H2(key)</p>
    <p>...</p>
    <p>Le v</p>
    <p>el l</p>
    <p>is t</p>
  </div>
  <div class="page">
    <p>The Support for Concurrent Resizing</p>
    <p>Level list</p>
    <p>A linked list to associate levels</p>
    <p>Context</p>
    <p>A metadata structure including:</p>
    <p>first_level (the largest level)</p>
    <p>last_level</p>
    <p>is_resizing</p>
    <p>...</p>
    <p>... 2N-12N-22N-30 1 2</p>
    <p>... N-1N-20 1</p>
    <p>...</p>
    <p>...</p>
    <p>key H1(key) H2(key)</p>
    <p>Le v</p>
    <p>el l</p>
    <p>is t</p>
    <p>last_le vel</p>
    <p>first_level</p>
    <p>is_resizing</p>
    <p>Context</p>
    <p>Global context ptr.</p>
  </div>
  <div class="page">
    <p>Non-blocking Resizing</p>
    <p>Resizing steps 1. Make a local copy of the global context pointer</p>
    <p>Worker threads</p>
    <p>...Thread-local context ptr.</p>
    <p>A thread</p>
    <p>...</p>
    <p>... N-1N-20 1</p>
    <p>...</p>
    <p>...</p>
    <p>key H1(key) H2(key)</p>
    <p>last_level</p>
    <p>first_le vel</p>
    <p>is_resizing</p>
    <p>Le v</p>
    <p>el l</p>
    <p>is t</p>
    <p>Context</p>
    <p>Global context ptr.</p>
  </div>
  <div class="page">
    <p>Non-blocking Resizing</p>
    <p>Resizing steps 1. Make a local copy of the global context pointer</p>
    <p>Worker threads</p>
    <p>...Thread-local context ptr.</p>
    <p>A thread</p>
    <p>...</p>
    <p>... N-1N-20 1</p>
    <p>...</p>
    <p>... last_le vel</p>
    <p>first_level</p>
    <p>is_resizing</p>
    <p>Le v</p>
    <p>el l</p>
    <p>is t</p>
    <p>Context</p>
    <p>Global context ptr.</p>
    <p>... 2N-12N-22N-30 1 2</p>
    <p>key H1(key) H2(key)</p>
  </div>
  <div class="page">
    <p>Non-blocking Resizing</p>
    <p>Resizing steps 1. Make a local copy of the global context pointer</p>
    <p>Worker threads</p>
    <p>...Thread-local context ptr.</p>
    <p>A thread</p>
    <p>...</p>
    <p>... N-1N-20 1</p>
    <p>...</p>
    <p>...</p>
    <p>Le v</p>
    <p>el l</p>
    <p>is t</p>
    <p>... 2N-12N-22N-30 1 2</p>
    <p>key H1(key) H2(key)</p>
    <p>last_le vel</p>
    <p>first_le vel</p>
    <p>is_resizing</p>
    <p>Global context ptr.</p>
    <p>Context size: 17 bytes</p>
    <p>last_level</p>
    <p>first_level</p>
    <p>is_resizing</p>
  </div>
  <div class="page">
    <p>Non-blocking Resizing</p>
    <p>Resizing steps 1. Make a local copy of the global context pointer</p>
    <p>Worker threads</p>
    <p>...Thread-local context ptr.</p>
    <p>A thread</p>
    <p>...</p>
    <p>... 2N-12N-22N-30 1 2</p>
    <p>... N-1N-20 1</p>
    <p>...</p>
    <p>...</p>
    <p>Rehashing</p>
    <p>key H1(key) H2(key)</p>
    <p>Le v</p>
    <p>el l</p>
    <p>is t</p>
    <p>last_le vel</p>
    <p>first_level</p>
    <p>is_resizing</p>
    <p>Global conte xt ptr.</p>
  </div>
  <div class="page">
    <p>Non-blocking Resizing</p>
    <p>Resizing steps 1. Make a local copy of the global context pointer</p>
    <p>Worker threads</p>
    <p>...Thread-local context ptr.</p>
    <p>A thread</p>
    <p>...</p>
    <p>... 2N-12N-22N-30 1 2</p>
    <p>... N-1N-20 1</p>
    <p>...</p>
    <p>...</p>
    <p>Rehashing</p>
    <p>key H1(key) H2(key)</p>
    <p>Le v</p>
    <p>el l</p>
    <p>is t</p>
    <p>last_le vel</p>
    <p>first_le vel</p>
    <p>is_resizing Context</p>
    <p>Global context ptr.</p>
  </div>
  <div class="page">
    <p>Rehashing threads</p>
    <p>...</p>
    <p>Worker threads</p>
    <p>...</p>
    <p>...</p>
    <p>... 2N-12N-22N-30 1 2</p>
    <p>... N-1N-20 1</p>
    <p>...</p>
    <p>...</p>
    <p>Rehashing</p>
    <p>key H1(key) H2(key)</p>
    <p>Le v</p>
    <p>el l</p>
    <p>is t</p>
    <p>last_le vel</p>
    <p>first_le vel</p>
    <p>is_resizing</p>
    <p>Context</p>
    <p>Global context ptr.</p>
    <p>Non-blocking Resizing</p>
    <p>Resizing steps 1. Make a local copy of the global context pointer</p>
  </div>
  <div class="page">
    <p>Rehashing threads</p>
    <p>...</p>
    <p>Worker threads</p>
    <p>...</p>
    <p>...</p>
    <p>... 2N-12N-22N-30 1 2</p>
    <p>... N-1N-20 1</p>
    <p>...</p>
    <p>...</p>
    <p>Rehashing</p>
    <p>key H1(key) H2(key)</p>
    <p>Le v</p>
    <p>el l</p>
    <p>is t</p>
    <p>last_le vel</p>
    <p>first_le vel</p>
    <p>is_resizing</p>
    <p>Context</p>
    <p>Global context ptr.</p>
    <p>Non-blocking Resizing</p>
    <p>Resizing steps 1. Make a local copy of the global context pointer</p>
    <p>Expansion stage</p>
    <p>Rehashing stage</p>
    <p>Expansion stage Rehashing stage Resizing steps</p>
    <p>Queries</p>
  </div>
  <div class="page">
    <p>Rehashing threads</p>
    <p>...</p>
    <p>Worker threads</p>
    <p>...</p>
    <p>...</p>
    <p>... 2N-12N-22N-30 1 2</p>
    <p>... N-1N-20 1</p>
    <p>...</p>
    <p>...</p>
    <p>Rehashing</p>
    <p>key H1(key) H2(key)</p>
    <p>Le v</p>
    <p>el l</p>
    <p>is t</p>
    <p>last_le vel</p>
    <p>first_le vel</p>
    <p>is_resizing</p>
    <p>Context</p>
    <p>Global context ptr.</p>
    <p>Non-blocking Resizing</p>
    <p>Resizing steps 1. Make a local copy of the global context pointer</p>
    <p>Non-blocking resizing scheme  Rehashing threads: rehash until there are 2</p>
    <p>levels left</p>
    <p>Expansion stage</p>
    <p>Rehashing stage</p>
    <p>Expansion stage Rehashing stage</p>
    <p>Rehashing threads (background)</p>
    <p>Resizing steps</p>
    <p>Queries</p>
  </div>
  <div class="page">
    <p>Rehashing threads</p>
    <p>...</p>
    <p>Worker threads</p>
    <p>...</p>
    <p>...</p>
    <p>... 2N-12N-22N-30 1 2</p>
    <p>... N-1N-20 1</p>
    <p>...</p>
    <p>...</p>
    <p>Rehashing</p>
    <p>key H1(key) H2(key)</p>
    <p>Le v</p>
    <p>el l</p>
    <p>is t</p>
    <p>last_le vel</p>
    <p>first_le vel</p>
    <p>is_resizing</p>
    <p>Context</p>
    <p>Global context ptr.</p>
    <p>Non-blocking Resizing</p>
    <p>Resizing steps 1. Make a local copy of the global context pointer</p>
    <p>Non-blocking resizing scheme  Rehashing threads: rehash until there are 2</p>
    <p>levels left</p>
    <p>Expansion stage</p>
    <p>Rehashing stage</p>
    <p>Expansion stage Rehashing stage</p>
    <p>Rehashing threads (background)</p>
    <p>Resizing steps</p>
    <p>Worker threads</p>
    <p>Queries</p>
  </div>
  <div class="page">
    <p>Components</p>
    <p>Dynamic Multi-level Structure</p>
    <p>Non-blocking Resizing</p>
    <p>Lock-free Concurrency Control</p>
  </div>
  <div class="page">
    <p>Lock-free Search</p>
    <p>High latency for pointer dereference</p>
  </div>
  <div class="page">
    <p>Lock-free Search</p>
    <p>High latency for pointer dereference</p>
    <p>Summary tags  A tag is the summary for a key</p>
    <p>Leverage the unused 16 highest bits of</p>
    <p>a pointer in x86_64 to store the tag Update tag and pointer in an atomic manner</p>
    <p>Tag (2 B)</p>
    <p>KV_PTR1A bucket KV_PTR8...</p>
    <p>A slot</p>
  </div>
  <div class="page">
    <p>Lock-free Search</p>
    <p>High latency for pointer dereference</p>
    <p>Summary tags  A tag is the summary for a key</p>
    <p>Leverage the unused 16 highest bits of</p>
    <p>a pointer in x86_64 to store the tag</p>
    <p>Missing items due to rehashing ...</p>
    <p>... 2N-12N-22N-30 1 2</p>
    <p>... N-1N-20 1</p>
    <p>...</p>
    <p>...</p>
    <p>key H1(key) H2(key)</p>
    <p>Le v</p>
    <p>el l</p>
    <p>is t</p>
    <p>...</p>
    <p>: a pointer in one slot</p>
  </div>
  <div class="page">
    <p>Lock-free Search</p>
    <p>High latency for pointer dereference</p>
    <p>Summary tags  A tag is the summary for a key</p>
    <p>Leverage the unused 16 highest bits of</p>
    <p>a pointer in x86_64 to store the tag</p>
    <p>Missing items due to rehashing ...</p>
    <p>... 2N-12N-22N-30 1 2</p>
    <p>... N-1N-20 1</p>
    <p>...</p>
    <p>...</p>
    <p>key H1(key) H2(key)</p>
    <p>Le v</p>
    <p>el l</p>
    <p>is t</p>
    <p>Thread-2: rehashing</p>
    <p>Thread-1: search</p>
    <p>... 2N-12N-22N-30 1 2</p>
    <p>Missing</p>
    <p>: a pointer in one slot</p>
  </div>
  <div class="page">
    <p>Lock-free Search</p>
    <p>High latency for pointer dereference</p>
    <p>Summary tags  A tag is the summary for a key</p>
    <p>Leverage the unused 16 highest bits of</p>
    <p>a pointer in x86_64 to store the tag</p>
    <p>Missing items due to rehashing</p>
    <p>Bottom-to-top (b2t) search  Search from the last level to the first level</p>
    <p>Redo the search when no item is found and the context changes</p>
    <p>...</p>
    <p>... 2N-12N-22N-30 1 2</p>
    <p>... N-1N-20 1</p>
    <p>...</p>
    <p>...</p>
    <p>key H1(key) H2(key)</p>
    <p>Le v</p>
    <p>el l</p>
    <p>is t</p>
    <p>Thread-2: rehashing Thread-1: b2t search</p>
    <p>... 2N-12N-22N-30 1 2</p>
    <p>: a pointer in one slot</p>
  </div>
  <div class="page">
    <p>... 2N-12N-22N-30 1 2</p>
    <p>... N-1N-20 1</p>
    <p>...</p>
    <p>...</p>
    <p>Le v</p>
    <p>el l</p>
    <p>is t</p>
    <p>Lock-free Insertion</p>
    <p>Basic workflow  Allocate the new item in PM</p>
    <p>B2t search to find duplicate keys</p>
    <p>Insert the pointer via CAS</p>
    <p>...</p>
  </div>
  <div class="page">
    <p>... 2N-12N-22N-30 1 2</p>
    <p>... N-1N-20 1</p>
    <p>...</p>
    <p>...</p>
    <p>Le v</p>
    <p>el l</p>
    <p>is t</p>
    <p>Lock-free Insertion</p>
    <p>Basic workflow  Allocate the new item in PM</p>
    <p>B2t search to find duplicate keys</p>
    <p>Insert the pointer via CAS</p>
    <p>Duplicate items from concurrent insertions xH1(x) H2(x)</p>
    <p>...</p>
  </div>
  <div class="page">
    <p>... 2N-12N-22N-30 1 2</p>
    <p>... N-1N-20 1</p>
    <p>...</p>
    <p>...</p>
    <p>Le v</p>
    <p>el l</p>
    <p>is t</p>
    <p>Lock-free Insertion</p>
    <p>Basic workflow  Allocate the new item in PM</p>
    <p>B2t search to find duplicate keys</p>
    <p>Insert the pointer via CAS</p>
    <p>Duplicate items from concurrent insertions  Both items are allowed for read</p>
    <p>Fix duplication in future update and deletion</p>
    <p>Thread-1: insert(x)</p>
    <p>Thread-2: insert(x)</p>
    <p>...</p>
    <p>...</p>
  </div>
  <div class="page">
    <p>... 2N-12N-22N-30 1 2</p>
    <p>... N-1N-20 1</p>
    <p>...</p>
    <p>...</p>
    <p>Le v</p>
    <p>el l</p>
    <p>is t</p>
    <p>Lock-free Insertion</p>
    <p>Basic workflow  Allocate the new item in PM</p>
    <p>B2t search to find duplicate keys</p>
    <p>Insert the pointer via CAS</p>
    <p>Duplicate items from concurrent insertions  Both items are allowed for read</p>
    <p>Fix duplication in future update and deletion</p>
    <p>Loss of new items due to rehashing</p>
    <p>Thread-1: insert(x)</p>
    <p>Thread-2: rehashing</p>
    <p>...</p>
  </div>
  <div class="page">
    <p>... 2N-12N-22N-30 1 2</p>
    <p>... N-1N-20 1</p>
    <p>...</p>
    <p>...</p>
    <p>Le v</p>
    <p>el l</p>
    <p>is t</p>
    <p>Lock-free Insertion</p>
    <p>Basic workflow  Allocate the new item in PM</p>
    <p>B2t search to find duplicate keys</p>
    <p>Insert the pointer via CAS</p>
    <p>Duplicate items from concurrent insertions  Both items are allowed for read</p>
    <p>Fix duplication in future update and deletion</p>
    <p>Loss of new items due to rehashing</p>
    <p>Thread-1: insert(x)</p>
    <p>Thread-2: rehashing</p>
    <p>......</p>
  </div>
  <div class="page">
    <p>... 2N-12N-22N-30 1 2</p>
    <p>... N-1N-20 1</p>
    <p>...</p>
    <p>...</p>
    <p>Le v</p>
    <p>el l</p>
    <p>is t</p>
    <p>Lock-free Insertion</p>
    <p>Basic workflow  Allocate the new item in PM</p>
    <p>B2t search to find duplicate keys</p>
    <p>Insert the pointer via CAS</p>
    <p>Duplicate items from concurrent insertions  Both items are allowed for read</p>
    <p>Fix duplication in future update and deletion</p>
    <p>Loss of new items due to rehashing</p>
    <p>Thread-1: insert(x)</p>
    <p>Thread-2: rehashing</p>
    <p>......</p>
  </div>
  <div class="page">
    <p>... 2N-12N-22N-30 1 2</p>
    <p>... N-1N-20 1</p>
    <p>...</p>
    <p>...</p>
    <p>Le v</p>
    <p>el l</p>
    <p>is t</p>
    <p>Lock-free Insertion</p>
    <p>Basic workflow  Allocate the new item in PM</p>
    <p>B2t search to find duplicate keys</p>
    <p>Insert the pointer via CAS</p>
    <p>Duplicate items from concurrent insertions  Both items are allowed for read</p>
    <p>Fix duplication in future update and deletion</p>
    <p>Loss of new items due to rehashing</p>
    <p>Thread-1: insert(x)</p>
  </div>
  <div class="page">
    <p>... 2N-12N-22N-30 1 2</p>
    <p>... N-1N-20 1</p>
    <p>...</p>
    <p>...</p>
    <p>Le v</p>
    <p>el l</p>
    <p>is t</p>
    <p>Lock-free Insertion</p>
    <p>Basic workflow  Allocate the new item in PM</p>
    <p>B2t search to find duplicate keys</p>
    <p>Insert the pointer via CAS</p>
    <p>Duplicate items from concurrent insertions  Both items are allowed for read</p>
    <p>Fix duplication in future update and deletion</p>
    <p>Loss of new items due to rehashing</p>
    <p>Thread-1: insert(x)</p>
    <p>Loss</p>
  </div>
  <div class="page">
    <p>... 2N-12N-22N-30 1 2</p>
    <p>... N-1N-20 1</p>
    <p>...</p>
    <p>...</p>
    <p>Le v</p>
    <p>el l</p>
    <p>is t</p>
    <p>Lock-free Insertion</p>
    <p>Basic workflow  Allocate the new item in PM</p>
    <p>B2t search to find duplicate keys</p>
    <p>Insert the pointer via CAS</p>
    <p>Duplicate items from concurrent insertions  Both items are allowed for read</p>
    <p>Fix duplication in future update and deletion</p>
    <p>Loss of new items due to rehashing</p>
    <p>Context-aware insertion  Not inserted to the rehashed last level</p>
    <p>Redo insertion for possible loss Thread-1: insert(x)</p>
    <p>Loss</p>
  </div>
  <div class="page">
    <p>Lock-free Update</p>
    <p>Inconsistency for duplicate items</p>
  </div>
  <div class="page">
    <p>...</p>
    <p>... 2N-12N-22N-30 1 2</p>
    <p>... N-1N-20 1</p>
    <p>...</p>
    <p>...</p>
    <p>Le v</p>
    <p>el l</p>
    <p>is t</p>
    <p>Lock-free Update</p>
    <p>Inconsistency for duplicate items</p>
    <p>Concurrent insertions with the same key</p>
    <p>... 2N-12N-22N-30 1 2</p>
    <p>Thread-1: insert(x)</p>
    <p>Thread-2: insert(x)</p>
  </div>
  <div class="page">
    <p>...</p>
    <p>... 2N-12N-22N-30 1 2</p>
    <p>... N-1N-20 1</p>
    <p>...</p>
    <p>...</p>
    <p>Le v</p>
    <p>el l</p>
    <p>is t</p>
    <p>Lock-free Update</p>
    <p>Inconsistency for duplicate items</p>
    <p>Concurrent insertions with the same key</p>
    <p>Retry of context-aware insertion</p>
    <p>... 2N-12N-22N-30 1 2</p>
    <p>...</p>
    <p>... 2N-12N-22N-30 1 2</p>
    <p>... N-1N-20 1</p>
    <p>...</p>
    <p>...</p>
    <p>Le v</p>
    <p>el l</p>
    <p>is t</p>
    <p>... 2N-12N-22N-30 1 2</p>
    <p>...</p>
    <p>Thread-1: insert(x)</p>
    <p>Thread-2: insert(x)</p>
    <p>Thread-1: insert(x)</p>
    <p>Thread-1: redo insert(x)</p>
  </div>
  <div class="page">
    <p>...</p>
    <p>... 2N-12N-22N-30 1 2</p>
    <p>... N-1N-20 1</p>
    <p>...</p>
    <p>...</p>
    <p>Le v</p>
    <p>el l</p>
    <p>is t</p>
    <p>Lock-free Update</p>
    <p>Inconsistency for duplicate items</p>
    <p>Concurrent insertions with the same key</p>
    <p>Retry of context-aware insertion</p>
    <p>Data movement for rehashing</p>
    <p>... 2N-12N-22N-30 1 2</p>
    <p>...</p>
    <p>... 2N-12N-22N-30 1 2</p>
    <p>... N-1N-20 1</p>
    <p>...</p>
    <p>...</p>
    <p>Le v</p>
    <p>el l</p>
    <p>is t</p>
    <p>... 2N-12N-22N-30 1 2</p>
    <p>... ...</p>
    <p>... 2N-12N-22N-30 1 2</p>
    <p>... N-1N-20 1</p>
    <p>...</p>
    <p>...</p>
    <p>Le v</p>
    <p>el l</p>
    <p>is t</p>
    <p>... 2N-12N-22N-30 1 2</p>
    <p>...</p>
    <p>Rehashing thread</p>
    <p>Thread-1: insert(x)</p>
    <p>Thread-2: insert(x)</p>
    <p>Thread-1: insert(x)</p>
    <p>Thread-1: redo insert(x)</p>
  </div>
  <div class="page">
    <p>...</p>
    <p>... 2N-12N-22N-30 1 2</p>
    <p>... N-1N-20 1</p>
    <p>...</p>
    <p>...</p>
    <p>Le v</p>
    <p>el l</p>
    <p>is t</p>
    <p>Lock-free Update</p>
    <p>Inconsistency for duplicate items</p>
    <p>Concurrent insertions with the same key</p>
    <p>Retry of context-aware insertion</p>
    <p>Data movement for rehashing</p>
    <p>... 2N-12N-22N-30 1 2</p>
    <p>...</p>
    <p>... 2N-12N-22N-30 1 2</p>
    <p>... N-1N-20 1</p>
    <p>...</p>
    <p>...</p>
    <p>Le v</p>
    <p>el l</p>
    <p>is t</p>
    <p>... 2N-12N-22N-30 1 2</p>
    <p>... ...</p>
    <p>... 2N-12N-22N-30 1 2</p>
    <p>... N-1N-20 1</p>
    <p>...</p>
    <p>...</p>
    <p>Le v</p>
    <p>el l</p>
    <p>is t</p>
    <p>... 2N-12N-22N-30 1 2</p>
    <p>...</p>
    <p>Rehashing thread</p>
    <p>Thread-1: insert(x)</p>
    <p>Thread-2: insert(x)</p>
    <p>Thread-1: insert(x)</p>
    <p>Thread-1: redo insert(x)</p>
    <p>Two pointers to different items</p>
  </div>
  <div class="page">
    <p>...</p>
    <p>... 2N-12N-22N-30 1 2</p>
    <p>... N-1N-20 1</p>
    <p>...</p>
    <p>...</p>
    <p>Le v</p>
    <p>el l</p>
    <p>is t</p>
    <p>Lock-free Update</p>
    <p>Inconsistency for duplicate items</p>
    <p>Concurrent insertions with the same key</p>
    <p>Retry of context-aware insertion</p>
    <p>Data movement for rehashing</p>
    <p>... 2N-12N-22N-30 1 2</p>
    <p>...</p>
    <p>... 2N-12N-22N-30 1 2</p>
    <p>... N-1N-20 1</p>
    <p>...</p>
    <p>...</p>
    <p>Le v</p>
    <p>el l</p>
    <p>is t</p>
    <p>... 2N-12N-22N-30 1 2</p>
    <p>... ...</p>
    <p>... 2N-12N-22N-30 1 2</p>
    <p>... N-1N-20 1</p>
    <p>...</p>
    <p>...</p>
    <p>Le v</p>
    <p>el l</p>
    <p>is t</p>
    <p>... 2N-12N-22N-30 1 2</p>
    <p>...</p>
    <p>Rehashing thread</p>
    <p>Thread-1: insert(x)</p>
    <p>Thread-2: insert(x)</p>
    <p>Thread-1: insert(x)</p>
    <p>Thread-1: redo insert(x)</p>
    <p>Two pointers to different items Two pointers to the same item</p>
  </div>
  <div class="page">
    <p>...</p>
    <p>... 2N-12N-22N-30 1 2</p>
    <p>... N-1N-20 1</p>
    <p>...</p>
    <p>...</p>
    <p>Le v</p>
    <p>el l</p>
    <p>is t</p>
    <p>Lock-free Update</p>
    <p>Inconsistency for duplicate items</p>
    <p>Concurrent insertions with the same key</p>
    <p>Retry of context-aware insertion</p>
    <p>Data movement for rehashing</p>
    <p>... 2N-12N-22N-30 1 2</p>
    <p>...</p>
    <p>... 2N-12N-22N-30 1 2</p>
    <p>... N-1N-20 1</p>
    <p>...</p>
    <p>...</p>
    <p>Le v</p>
    <p>el l</p>
    <p>is t</p>
    <p>... 2N-12N-22N-30 1 2</p>
    <p>... ...</p>
    <p>... 2N-12N-22N-30 1 2</p>
    <p>... N-1N-20 1</p>
    <p>...</p>
    <p>...</p>
    <p>Le v</p>
    <p>el l</p>
    <p>is t</p>
    <p>... 2N-12N-22N-30 1 2</p>
    <p>...</p>
    <p>Rehashing thread</p>
    <p>Thread-1: insert(x)</p>
    <p>Thread-2: insert(x)</p>
    <p>Thread-1: insert(x)</p>
    <p>Thread-1: redo insert(x)</p>
    <p>Two pointers to different items Two pointers to the same item</p>
    <p>Content-conscious Find  B2t search to find two pointers to duplicate</p>
    <p>items</p>
    <p>B2t search</p>
  </div>
  <div class="page">
    <p>...</p>
    <p>... 2N-12N-22N-30 1 2</p>
    <p>... N-1N-20 1</p>
    <p>...</p>
    <p>...</p>
    <p>Le v</p>
    <p>el l</p>
    <p>is t</p>
    <p>Lock-free Update</p>
    <p>Inconsistency for duplicate items</p>
    <p>Concurrent insertions with the same key</p>
    <p>Retry of context-aware insertion</p>
    <p>Data movement for rehashing</p>
    <p>... 2N-12N-22N-30 1 2</p>
    <p>...</p>
    <p>... 2N-12N-22N-30 1 2</p>
    <p>... N-1N-20 1</p>
    <p>...</p>
    <p>...</p>
    <p>Le v</p>
    <p>el l</p>
    <p>is t</p>
    <p>... 2N-12N-22N-30 1 2</p>
    <p>... ...</p>
    <p>... 2N-12N-22N-30 1 2</p>
    <p>... N-1N-20 1</p>
    <p>...</p>
    <p>...</p>
    <p>Le v</p>
    <p>el l</p>
    <p>is t</p>
    <p>... 2N-12N-22N-30 1 2</p>
    <p>...</p>
    <p>Rehashing thread</p>
    <p>Thread-1: insert(x)</p>
    <p>Thread-2: insert(x)</p>
    <p>Thread-1: insert(x)</p>
    <p>Thread-1: redo insert(x)</p>
    <p>Two pointers to different items Two pointers to the same item</p>
    <p>Content-conscious Find  B2t search to find two pointers to duplicate</p>
    <p>items</p>
    <p>Check if two pointers refer to the same item</p>
    <p>B2t search</p>
  </div>
  <div class="page">
    <p>...</p>
    <p>... 2N-12N-22N-30 1 2</p>
    <p>... N-1N-20 1</p>
    <p>...</p>
    <p>...</p>
    <p>Le v</p>
    <p>el l</p>
    <p>is t</p>
    <p>Lock-free Update</p>
    <p>Inconsistency for duplicate items</p>
    <p>Concurrent insertions with the same key</p>
    <p>Retry of context-aware insertion</p>
    <p>Data movement for rehashing</p>
    <p>... 2N-12N-22N-30 1 2</p>
    <p>...</p>
    <p>... 2N-12N-22N-30 1 2</p>
    <p>... N-1N-20 1</p>
    <p>...</p>
    <p>...</p>
    <p>Le v</p>
    <p>el l</p>
    <p>is t</p>
    <p>... 2N-12N-22N-30 1 2</p>
    <p>...</p>
    <p>... 2N-12N-22N-30 1 2</p>
    <p>... N-1N-20 1</p>
    <p>...</p>
    <p>...</p>
    <p>Le v</p>
    <p>el l</p>
    <p>is t</p>
    <p>... 2N-12N-22N-30 1 2</p>
    <p>Rehashing thread</p>
    <p>Thread-1: insert(x)</p>
    <p>Thread-2: insert(x)</p>
    <p>Thread-1: redo insert(x)</p>
    <p>Two pointers to different items Two pointers to the same item</p>
    <p>Content-conscious Find  B2t search to find two pointers to duplicate</p>
    <p>items</p>
    <p>Check if two pointers refer to the same item  Yes: delete the first pointer matching the key</p>
    <p>B2t search</p>
  </div>
  <div class="page">
    <p>...</p>
    <p>... 2N-12N-22N-30 1 2</p>
    <p>... N-1N-20 1</p>
    <p>...</p>
    <p>...</p>
    <p>Le v</p>
    <p>el l</p>
    <p>is t</p>
    <p>Lock-free Update</p>
    <p>Inconsistency for duplicate items</p>
    <p>Concurrent insertions with the same key</p>
    <p>Retry of context-aware insertion</p>
    <p>Data movement for rehashing</p>
    <p>... 2N-12N-22N-30 1 2</p>
    <p>...</p>
    <p>... 2N-12N-22N-30 1 2</p>
    <p>... N-1N-20 1</p>
    <p>...</p>
    <p>...</p>
    <p>Le v</p>
    <p>el l</p>
    <p>is t</p>
    <p>... 2N-12N-22N-30 1 2</p>
    <p>...</p>
    <p>... 2N-12N-22N-30 1 2</p>
    <p>... N-1N-20 1</p>
    <p>...</p>
    <p>...</p>
    <p>Le v</p>
    <p>el l</p>
    <p>is t</p>
    <p>... 2N-12N-22N-30 1 2</p>
    <p>Rehashing thread</p>
    <p>Thread-2: insert(x)</p>
    <p>Thread-1: redo insert(x)</p>
    <p>Two pointers to different items Two pointers to the same item</p>
    <p>Content-conscious Find  B2t search to find two pointers to duplicate</p>
    <p>items</p>
    <p>Check if two pointers refer to the same item  Yes: delete the first pointer matching the key  No: delete the first pointer and corresponding item</p>
    <p>matching the key</p>
    <p>B2t search</p>
    <p>... 2N-12N-22N-30 1 2</p>
  </div>
  <div class="page">
    <p>Failures of Lock-free Update</p>
    <p>Update failures due to interleaved update and rehashing</p>
    <p>...</p>
    <p>... 2N-12N-22N-30 1 2</p>
    <p>... N-1N-20 1</p>
    <p>...</p>
    <p>...</p>
    <p>Le v</p>
    <p>el l</p>
    <p>is t</p>
    <p>...</p>
    <p>Timeline</p>
    <p>Thread 1: update</p>
    <p>Thread-2: rehashing</p>
  </div>
  <div class="page">
    <p>Failures of Lock-free Update</p>
    <p>Update failures due to interleaved update and rehashing</p>
    <p>...</p>
    <p>... 2N-12N-22N-30 1 2</p>
    <p>... N-1N-20 1</p>
    <p>...</p>
    <p>...</p>
    <p>Le v</p>
    <p>el l</p>
    <p>is t</p>
    <p>...</p>
    <p>Timeline</p>
    <p>Thread 1: update</p>
    <p>Thread-2: rehashing</p>
    <p>Find</p>
  </div>
  <div class="page">
    <p>Failures of Lock-free Update</p>
    <p>Update failures due to interleaved update and rehashing</p>
    <p>...</p>
    <p>... 2N-12N-22N-30 1 2</p>
    <p>... N-1N-20 1</p>
    <p>...</p>
    <p>...</p>
    <p>Le v</p>
    <p>el l</p>
    <p>is t</p>
    <p>... 2N-12N-22N-30 1 2</p>
    <p>...</p>
    <p>Timeline</p>
    <p>Thread 1: update</p>
    <p>Thread-2: rehashing</p>
    <p>Find</p>
    <p>copy</p>
    <p>Rehashing</p>
  </div>
  <div class="page">
    <p>Failures of Lock-free Update</p>
    <p>Update failures due to interleaved update and rehashing</p>
    <p>...</p>
    <p>... 2N-12N-22N-30 1 2</p>
    <p>... N-1N-20 1</p>
    <p>...</p>
    <p>...</p>
    <p>Le v</p>
    <p>el l</p>
    <p>is t</p>
    <p>... 2N-12N-22N-30 1 2</p>
    <p>Timeline</p>
    <p>Thread 1: update</p>
    <p>Thread-2: rehashing</p>
    <p>Find update</p>
    <p>copy</p>
    <p>...</p>
  </div>
  <div class="page">
    <p>Failures of Lock-free Update</p>
    <p>Update failures due to interleaved update and rehashing</p>
    <p>...</p>
    <p>... 2N-12N-22N-30 1 2</p>
    <p>... N-1N-20 1</p>
    <p>...</p>
    <p>...</p>
    <p>Le v</p>
    <p>el l</p>
    <p>is t</p>
    <p>... 2N-12N-22N-30 1 2</p>
    <p>Timeline</p>
    <p>Thread 1: update</p>
    <p>Thread-2: rehashing</p>
    <p>Find update</p>
    <p>copy delete</p>
  </div>
  <div class="page">
    <p>Failures of Lock-free Update</p>
    <p>Update failures due to interleaved update and rehashing</p>
    <p>Baseline: two-round Find for update</p>
    <p>...</p>
    <p>... 2N-12N-22N-30 1 2</p>
    <p>... N-1N-20 1</p>
    <p>...</p>
    <p>...</p>
    <p>Le v</p>
    <p>el l</p>
    <p>is t</p>
    <p>... 2N-12N-22N-30 1 2</p>
    <p>Timeline</p>
    <p>Thread 1: update</p>
    <p>Thread-2: rehashing</p>
    <p>Find update</p>
    <p>copy delete</p>
  </div>
  <div class="page">
    <p>Failures of Lock-free Update</p>
    <p>Update failures due to interleaved update and rehashing</p>
    <p>Baseline: two-round Find for update</p>
    <p>Optimization: redo Find only</p>
    <p>when simultaneously satisfying:  Table is resizing</p>
    <p>The updated bucket is in the last level</p>
    <p>The bucket index is in one of</p>
    <p>the processed regions of</p>
    <p>rehashing threads</p>
    <p>...</p>
    <p>... 2N-12N-22N-30 1 2</p>
    <p>... N-1N-20 1</p>
    <p>...</p>
    <p>...</p>
    <p>Le v</p>
    <p>el l</p>
    <p>is t</p>
    <p>... 2N-12N-22N-30 1 2</p>
    <p>Timeline</p>
    <p>Thread 1: update</p>
    <p>Thread-2: rehashing</p>
    <p>Find update</p>
    <p>copy delete</p>
  </div>
  <div class="page">
    <p>Lock-free Deletion</p>
    <p>Delete matched pointers atomically via CAS</p>
    <p>Inconsistency due to duplicate items</p>
    <p>Instead of Find, delete all matched items in b2t search</p>
    <p>Deletion failures due to interleaved deletion and rehashing</p>
    <p>Similar optimizations to avoid frequent re-execution of deletion</p>
  </div>
  <div class="page">
    <p>Crash Recovery</p>
    <p>Crash consistency for lock-free Clevel hashing</p>
    <p>Persist after PM writes</p>
    <p>Persist dependent metadata after loading them</p>
    <p>Recovery</p>
    <p>Rehashing resumes from the last processed bucket</p>
    <p>Atomic visibility enables low-overhead crash consistency</p>
  </div>
  <div class="page">
    <p>Experimental Setup</p>
    <p>Platform  Intel Optane DC PMM configured in App Direct mode</p>
    <p>36 threads in one NUMA node</p>
    <p>PMDK</p>
    <p>Comparisons  LEVEL: original level hashing [OSDI 18]</p>
    <p>CCEH: lazy deletion version, default probing distance (16 slots) [FAST 19]</p>
    <p>CMAP: concurrent_hash_map engine from Intel pmemkv</p>
    <p>P-CLHT: PM variant of CLHT converted by RECIPE [SOSP 19]</p>
    <p>CLEVEL: our Clevel hashing</p>
    <p>Benchmark: YCSB</p>
  </div>
  <div class="page">
    <p>Load Factor</p>
    <p>L o</p>
    <p>a d</p>
    <p>f a</p>
    <p>c to</p>
    <p>r (%</p>
    <p>)</p>
    <p>Inserted items (k)</p>
    <p>P-CLHT CCEH</p>
    <p>LEVEL CLEVEL</p>
  </div>
  <div class="page">
    <p>Load Factor</p>
    <p>Clevel hashing has comparable load factor with level hashing, i.e., 86%</p>
    <p>L o</p>
    <p>a d</p>
    <p>f a</p>
    <p>c to</p>
    <p>r (%</p>
    <p>)</p>
    <p>Inserted items (k)</p>
    <p>P-CLHT CCEH</p>
    <p>LEVEL CLEVEL</p>
  </div>
  <div class="page">
    <p>Micro-benchmarks</p>
    <p>Positive Negative</p>
    <p>A v e ra</p>
    <p>g e l a te</p>
    <p>n c y (</p>
    <p>u s )</p>
    <p>P-CLHT LEVEL</p>
    <p>CCEH CMAP</p>
    <p>LEVEL-TBB CCEH-TBB</p>
    <p>CMAP-TBB CLEVEL</p>
    <p>Insertion Update Deletion</p>
    <p>A v e ra</p>
    <p>g e l a te</p>
    <p>n c y (</p>
    <p>u s )</p>
    <p>P-CLHT LEVEL</p>
    <p>CCEH CMAP</p>
    <p>LEVEL-TBB CCEH-TBB</p>
    <p>CMAP-TBB CLEVEL</p>
    <p>* Lack of implementation of update and deletion in open-source code</p>
  </div>
  <div class="page">
    <p>Micro-benchmarks</p>
    <p>Due to using lock-free search and</p>
    <p>summary tags, Clevel hashing obtains</p>
    <p>1.25.0 speedup for positive search</p>
    <p>1.49.0 speedup for negative search</p>
    <p>Positive Negative</p>
    <p>A v e ra</p>
    <p>g e l a te</p>
    <p>n c y (</p>
    <p>u s )</p>
    <p>P-CLHT LEVEL</p>
    <p>CCEH CMAP</p>
    <p>LEVEL-TBB CCEH-TBB</p>
    <p>CMAP-TBB CLEVEL</p>
    <p>Insertion Update Deletion</p>
    <p>A v e ra</p>
    <p>g e l a te</p>
    <p>n c y (</p>
    <p>u s )</p>
    <p>P-CLHT LEVEL</p>
    <p>CCEH CMAP</p>
    <p>LEVEL-TBB CCEH-TBB</p>
    <p>CMAP-TBB CLEVEL</p>
    <p>* Lack of implementation of update and deletion in open-source code</p>
  </div>
  <div class="page">
    <p>Micro-benchmarks</p>
    <p>Due to using lock-free search and</p>
    <p>summary tags, Clevel hashing obtains</p>
    <p>1.25.0 speedup for positive search</p>
    <p>1.49.0 speedup for negative search</p>
    <p>Positive Negative</p>
    <p>A v e ra</p>
    <p>g e l a te</p>
    <p>n c y (</p>
    <p>u s )</p>
    <p>P-CLHT LEVEL</p>
    <p>CCEH CMAP</p>
    <p>LEVEL-TBB CCEH-TBB</p>
    <p>CMAP-TBB CLEVEL</p>
    <p>Insertion Update Deletion</p>
    <p>A v e ra</p>
    <p>g e l a te</p>
    <p>n c y (</p>
    <p>u s )</p>
    <p>P-CLHT LEVEL</p>
    <p>CCEH CMAP</p>
    <p>LEVEL-TBB CCEH-TBB</p>
    <p>CMAP-TBB CLEVEL</p>
    <p>* Lack of implementation of update and deletion in open-source code</p>
    <p>Clevel hashing achieves low latency with</p>
    <p>correctness guarantee</p>
  </div>
  <div class="page">
    <p>Macro-benchmarks</p>
    <p>Read ratio (%): 0 50 95 100</p>
    <p>Write ratio (%): 100 50 5 0</p>
    <p>Load A A B C</p>
    <p>o p</p>
    <p>/s</p>
    <p>o p</p>
    <p>/s</p>
    <p>o p</p>
    <p>/s</p>
    <p>T h</p>
    <p>ro u</p>
    <p>g h</p>
    <p>p u</p>
    <p>t ra</p>
    <p>ti o</p>
    <p>w rt</p>
    <p>P -C</p>
    <p>L H</p>
    <p>T</p>
    <p>P-CLHT LEVEL</p>
    <p>CCEH CMAP</p>
    <p>LEVEL-TBB CCEH-TBB</p>
    <p>CMAP-TBB CLEVEL</p>
    <p>o p</p>
    <p>/s</p>
  </div>
  <div class="page">
    <p>Macro-benchmarks</p>
    <p>Read ratio (%): 0 50 95 100</p>
    <p>Write ratio (%): 100 50 5 0</p>
    <p>Load A A B C</p>
    <p>o p</p>
    <p>/s</p>
    <p>o p</p>
    <p>/s</p>
    <p>o p</p>
    <p>/s</p>
    <p>T h</p>
    <p>ro u</p>
    <p>g h</p>
    <p>p u</p>
    <p>t ra</p>
    <p>ti o</p>
    <p>w rt</p>
    <p>P -C</p>
    <p>L H</p>
    <p>T</p>
    <p>P-CLHT LEVEL</p>
    <p>CCEH CMAP</p>
    <p>LEVEL-TBB CCEH-TBB</p>
    <p>CMAP-TBB CLEVEL</p>
    <p>o p</p>
    <p>/s</p>
    <p>Clevel hashing obtains up to 4.2 speedup than P-CLHT due to the lock-free concurrency control and non-blocking resizing</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Existing PM hashing indexes have limited considerations for</p>
    <p>concurrency</p>
    <p>Clevel hashing is PM-friendly</p>
    <p>Write-optimal multi-level structure without extra writes for insertion</p>
    <p>Crash consistency by enabling lock-free index to be persistent</p>
    <p>Clevel hashing achieves high concurrency</p>
    <p>Non-blocking resizing without blocking queries</p>
    <p>Lock-free concurrency control with correctness guarantee</p>
    <p>Clevel hashing achieves up to 4.2 speedup for throughput than P-CLHT</p>
  </div>
  <div class="page">
    <p>Thanks! Q&amp;A</p>
    <p>Email: chenzy@hust.edu.cn</p>
    <p>Homepage: https://chenzhangyu.github.io</p>
    <p>Open-source code: https://github.com/chenzhangyu/Clevel-Hashing</p>
  </div>
</Presentation>
