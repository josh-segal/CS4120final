<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Unsafe Time Handling In Smartphones</p>
    <p>Abhilash Jindal Prahlad Joshi Y. Charlie Hu Samuel Midkiff</p>
  </div>
  <div class="page">
    <p>Increasing hardware/software</p>
    <p>functionality</p>
    <p>Limited form factor and weight</p>
    <p>Smartphones are Battery Constrained</p>
  </div>
  <div class="page">
    <p>Paradigm Shift in Power Management: Aggressive Sleeping Policy</p>
    <p>Desktop/Server: CPU Default ON  CPU turned off when idle for long time</p>
    <p>Smartphones: CPU Default OFF  Smartphone OSes aggressively turn off Screen/CPU after brief user inactivity  Helps increasing standby time period</p>
  </div>
  <div class="page">
    <p>Time Induced Critical Sections</p>
    <p>public double do_memcpy ( memcpy_t fn, size_t len, .. ) {</p>
    <p>t1 = getTime ( );</p>
    <p>fn (dst, src, len);</p>
    <p>t2 = getTime ( );</p>
    <p>t_diff = (t2  t1);</p>
    <p>return len / t_diff; }</p>
    <p>From tools/perf/bench/mem-memcpy.c</p>
    <p>Time</p>
    <p>t2t1</p>
  </div>
  <div class="page">
    <p>Sleep Induced Time Bugs</p>
    <p>public double do_memcpy ( memcpy_t fn, size_t len, .. ) {</p>
    <p>t1 = getTime ( );</p>
    <p>fn (dst, src, len);</p>
    <p>t2 = getTime ( );</p>
    <p>t_diff = (t2  t1);</p>
    <p>return len / t_diff; }</p>
    <p>From tools/perf/bench/mem-memcpy.c</p>
    <p>Time</p>
    <p>t2t1</p>
  </div>
  <div class="page">
    <p>Sleep Induced Time Bugs (2)</p>
    <p>SITB happens when the smartphone CPU/SOC is suspended in the middle of a time manipulation</p>
    <p>Alters intended program behavior  Hard to reproduce</p>
    <p>Will only happen when CPU sleeps when the code execution is between time manipulation</p>
    <p>I think it will fix an odd issue I have seen in a log file (apparently was completely off track debugging it). As this very likely is a real world issue, Id recommend applying the patch to the fixes branch</p>
    <p>Android kernel developer</p>
  </div>
  <div class="page">
    <p>Power Control API-- Wakelocks</p>
    <p>Foo(){</p>
    <p>time manipulation</p>
    <p>}</p>
    <p>wake_lock (  )</p>
    <p>wake_unlock (  )</p>
    <p>CPU is suspended only after last wakelock is released</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Sleep Induced Time Bugs  Categorizing Time Usages and Vulnerabilities to SITB</p>
    <p>Case 1 : Timed Callback  Case 2 : Time Setting  Case 3 : Time arithmetic  Case 4 : Logging</p>
    <p>Klock Design  Evaluation</p>
  </div>
  <div class="page">
    <p>Time Usage In Android</p>
    <p>Collected list of time related APIs exposed at each software layer and grepped them</p>
    <p>Usages belong to four categories  Timed Callback, Time setting, Time arithmetic, Logging</p>
    <p>Kernel Android Framework</p>
    <p>Time usages 1072 1737 7798</p>
  </div>
  <div class="page">
    <p>Code wishes to perform a certain task at a future time  Register alarm with system specifying a callback function and a time interval</p>
    <p>Vulnerability: CPU suspension before timer callback finishes alters intended semantics</p>
    <p>void msm_serial_clock_request_off(.., int timeout){ clk_off_timer.function = msm_serial_clock_off; hrtimer_start ( clk_off_timer, timeout );</p>
    <p>}</p>
    <p>msm_serial_clock_off (struct hrtimer timer){ clk_disable(msm_port-&gt;clk);</p>
    <p>}</p>
    <p>drivers/serial/msm serial.c</p>
    <p>Case 1: Timed Callback</p>
  </div>
  <div class="page">
    <p>Case 2: Time setting</p>
    <p>Code updates current system time</p>
    <p>void setTimeFromNITZString( .. ) { nitz = getTime ( ); /* some processing */ c = f ( nitz ); setAndBroadcastNetworkSetTime ( c );</p>
    <p>}</p>
    <p>From com/android/internal/telephony/gsm/GsmServiceStateTracker.java</p>
    <p>Time</p>
    <p>cnitz</p>
  </div>
  <div class="page">
    <p>Case 2: Time setting vulnerability</p>
    <p>Code updates current system time</p>
    <p>void setTimeFromNITZString( .. ) { nitz = getTime ( ); /* some processing */ c = f ( nitz ); setAndBroadcastNetworkSetTime ( c );</p>
    <p>}</p>
    <p>From com/android/internal/telephony/gsm/GsmServiceStateTracker.java</p>
    <p>Time</p>
    <p>cnitz</p>
    <p>CPU sleeps before setTime would set stale time</p>
  </div>
  <div class="page">
    <p>Case 3: Time arithmetic</p>
    <p>Code collects two timestamps and performs arithmetic on them</p>
    <p>public double do_memcpy ( memcpy_t fn, size_t len, .. ) {</p>
    <p>t1 = getTime ( );</p>
    <p>fn (dst, src, len);</p>
    <p>t2 = getTime ( );</p>
    <p>t_diff = (t2  t1);</p>
    <p>return len / t_diff; }</p>
    <p>From tools/perf/bench/mem-memcpy.c</p>
    <p>Time</p>
    <p>t2t1</p>
  </div>
  <div class="page">
    <p>Case 3: Time arithmetic vulnerability</p>
    <p>public double do_memcpy ( memcpy_t fn, size_t len, .. ) {</p>
    <p>t1 = getTime ( );</p>
    <p>fn (dst, src, len);</p>
    <p>t2 = getTime ( );</p>
    <p>t_diff = (t2  t1);</p>
    <p>return len / t_diff; }</p>
    <p>From tools/perf/bench/mem-memcpy.c</p>
    <p>Time</p>
    <p>t2t1</p>
    <p>CPU sleeps between obtaining two timestamps</p>
  </div>
  <div class="page">
    <p>Case 3: Time arithmetic vulnerability (2)</p>
    <p>public double do_memcpy ( memcpy_t fn, size_t len, .. ) {</p>
    <p>t1 = getTime ( );</p>
    <p>fn (dst, src, len);</p>
    <p>t2 = getTime ( );</p>
    <p>t_diff = (t2  t1);</p>
    <p>return len / t_diff; }</p>
    <p>From tools/perf/bench/mem-memcpy.c</p>
    <p>Time</p>
    <p>t2t1</p>
    <p>-60</p>
    <p>Time is set between obtaining two timestamps</p>
  </div>
  <div class="page">
    <p>Case 4: Time logging</p>
    <p>Code obtains current time and logs it in conjunction with some event  Usually for postmortem debugging</p>
    <p>Vulnerability: CPU suspension in between event and its timestamping will result in an incorrect timestamp being logged for the event.</p>
  </div>
  <div class="page">
    <p>Overview</p>
    <p>Sleep Induced Time Bugs  Categorizing Time Usages and Vulnerabilities to SITB  Klock Design</p>
    <p>Primer on Reaching definition, UD and DU chains  Identifying Protected Statements  Identifying Time Critical Sections  Implementation</p>
    <p>Evaluation  Conclusion</p>
  </div>
  <div class="page">
    <p>Reaching Definition DataFlow problem</p>
    <p>y = 3; x = 10; y = 11;</p>
    <p>if( y &gt; 5 ) { x = 1; y = 2;</p>
    <p>} else { z = x; x = 4;</p>
    <p>}</p>
    <p>: {}</p>
    <p>: {d1, d2} : {d1, d2}: {d1, d2}</p>
    <p>: {d3, d4} : {d2, d5, d6}</p>
    <p>: {d2, d3, d4, d5, d6} exit</p>
    <p>entry</p>
    <p>d0: y = 3 d1: x = 10 d2: y = 11 if (y&gt;5)</p>
    <p>B0</p>
    <p>d3: x = 1 d4: y = 2</p>
    <p>d5: z = x d6: x = 4</p>
    <p>B1 B2</p>
    <p>IN[B0]</p>
    <p>OUT[B0]</p>
    <p>OUT[B2]</p>
    <p>IN[B2]IN[B1]</p>
    <p>IN[exit]</p>
    <p>OUT[B1]</p>
    <p>OUT[entry] = {}</p>
  </div>
  <div class="page">
    <p>i = 1 sum = 0 product = 1</p>
    <p>While ( i &lt; n ) { sum = i + sum; product *= i  i = i + 1;</p>
    <p>}</p>
    <p>Print ( sum ); Print ( product );</p>
    <p>Use-Def (UD) Chains</p>
    <p>Links each use of variable x to DEF which reach that use</p>
    <p>Closure: Recursively following UD chains show all DEFs that impact 1 variable use</p>
  </div>
  <div class="page">
    <p>i = 1 sum = 0 product = 1</p>
    <p>While ( i &lt; n ) { sum = i + sum; product *= i  i = i + 1;</p>
    <p>}</p>
    <p>Print ( sum ); Print ( product );</p>
    <p>Def-Use (DU) Chains</p>
    <p>Links each definition of variable x to those USE which that definition can reach.</p>
    <p>Closure: Recursively following DU chains show all USEs impacted by 1 definition</p>
  </div>
  <div class="page">
    <p>Klock Overview</p>
    <p>Program source code</p>
    <p>Compare and report BUGS = TICS - SAFE</p>
    <p>Identifying Protected Statements</p>
    <p>Reaching Definition Analysis</p>
    <p>Protection mechanisms</p>
    <p>Identifying Time Critical Sections (TICS)</p>
    <p>Case 1 Timer</p>
    <p>registration APIs</p>
    <p>Case 2: UD chains</p>
    <p>setTimeAPIs</p>
    <p>Case 3: DU chains</p>
    <p>getTime APIs</p>
    <p>Standard Compiler Transformations</p>
    <p>Alias analysis  CFG construction</p>
    <p>TICS</p>
    <p>SAFE</p>
  </div>
  <div class="page">
    <p>wakelock.acquire ( ); //Dont let CPU sleep  If (a condition )</p>
    <p>wakelock.release ( );  wakelock.acquire ( );</p>
    <p>}  wakelock.release ( ); //CPU is now free to sleep</p>
    <p>RDA to Identify Protected Statements</p>
    <p>Entry</p>
    <p>wakelock.acquire(); If( a condition )</p>
    <p>Wakelock.realease()</p>
    <p>Wakelock.release();</p>
    <p>Wakelock.acquire();</p>
    <p>exit</p>
    <p>Entry</p>
    <p>d0: wakelock = 1 If( a condition )</p>
    <p>d3: wakelock = 0</p>
    <p>d1: Wakelock = 0</p>
    <p>d2: Wakelock = 1</p>
    <p>: {}</p>
    <p>: {d0}</p>
    <p>: {d1}</p>
    <p>: {d0, d2}</p>
    <p>: {d3}</p>
  </div>
  <div class="page">
    <p>Klock Overview</p>
    <p>Program source code</p>
    <p>Identifying Protected Statements</p>
    <p>Reaching Definition Analysis</p>
    <p>Protection mechanisms</p>
    <p>Identifying Time Critical Sections (TICS)</p>
    <p>Case 1 Timer</p>
    <p>registration APIs</p>
    <p>Case 2: UD chains</p>
    <p>setTimeAPIs</p>
    <p>Case 3: DU chains</p>
    <p>getTime APIs</p>
    <p>Standard Compiler Transformations</p>
    <p>Alias analysis  CFG construction</p>
    <p>Compare and report BUGS = TICS - SAFE</p>
    <p>TICS</p>
    <p>SAFE</p>
  </div>
  <div class="page">
    <p>Identifying Time Critical Section Case 1: Timer Callback</p>
    <p>void msm_serial_clock_request_off(.., int timeout){ clk_off_timer.function = msm_serial_clock_off;</p>
    <p>hrtimer_start ( clk_off_timer, timeout ); }</p>
    <p>msm_serial_clock_off (struct hrtimer timer){ clk_disable(msm_port-&gt;clk);</p>
    <p>} TICS</p>
    <p>For every timer registration site  Find callback function target  Conservatively add callback function to TICS</p>
  </div>
  <div class="page">
    <p>void setTimeFromNITZString( .. ) { nitz = getTime( ); /* some processing */ c = f ( nitz ); setAndBroadcastNetworkSetTime( c );</p>
    <p>}</p>
    <p>From com/android/internal/telephony/gsm/GsmServiceStateTracker.java</p>
    <p>Identifying Time Critical Section Case 2: Time Setting</p>
    <p>TICS</p>
    <p>For all statements, where time is set  Recursively find DEFS using UD chains  Add all paths from DEFS to set time into TICS</p>
  </div>
  <div class="page">
    <p>Identifying Time Critical Section Case 3: Time Arithmetic</p>
    <p>public double do_memcpy ( memcpy_t fn, size_t len, .. ) {</p>
    <p>t1 = getTime ( );</p>
    <p>fn (dst, src, len);</p>
    <p>t2 = getTime ( );</p>
    <p>t_diff = (t2  t1);</p>
    <p>return len / t_diff; }</p>
    <p>For all definitions that get time  Find closure of USES using DU chains</p>
    <p>If a statement has variables from two different closures (t1, t2)  Must be arithmetic between t1, t2  Add all statements between getting</p>
    <p>t1 and getting t2 to TICS</p>
    <p>TICS</p>
  </div>
  <div class="page">
    <p>Implementation</p>
    <p>Built on LLVM compiler infrastructure  1 custom pass to build call graph  4 custom passes for identifying protected statements and identifying TICS (case 1,2, 3)</p>
    <p>~5 KLOC</p>
    <p>Available at http://github.com/klock-android</p>
  </div>
  <div class="page">
    <p>Overview</p>
    <p>Sleep Induced Time Bugs  Categorizing Time Usages and Vulnerabilities to SITB  Klock Design  Evaluation</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Ran Klock on 5 different kernel versions  Nexus 1, Nexus 7, Nexus 10, Nexus S and x86 (with wakelocks enabled)</p>
    <p>Found 63 bugs  4 timed callback bugs, 0 time setting bugs, 59 time arithmetic bugs  14 have been fixed, 7 files have been removed in newer kernel versions  Out of 42 remaining, 7 developers replied so far confirming the bugs</p>
  </div>
  <div class="page">
    <p>Bugs (63) breakdown</p>
    <p>Correctness related bugs (18)  6 drivers incorrectly measure pulse width hence reading wrong received data  5 radio drivers incorrectly measure clock rate necessary to decode the incoming data</p>
    <p>7 other miscellaneous bugs  Performance related bugs (15)</p>
    <p>8 drivers spin for an extended period of time leaving device unusable  4 code locations call sleep for a long time  3 drivers keep their devices on longer than necessary wasting energy</p>
    <p>Benchmark bugs (30)</p>
  </div>
  <div class="page">
    <p>False Positives</p>
    <p>106 False positives</p>
    <p>Suspension does not affect program semantics  driver generates a random number using timer arithmetic</p>
    <p>System calls  System calls (eg sys_settime) are just wrappers of actual time setting APIs and do not have suspension prevention mechanism</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Sleep Induced Time Bugs  Time manipulation form Time Critical Sections  CPU suspension during Time Critical Sections lead to the bugs</p>
    <p>Time is widely manipulated in Android Ecosystem  Timed callback, Time setting, Time arithmetic and Logging</p>
    <p>Klock  Static checker built using reaching definition analysis, UD/DU chains  Found 63 bugs in the kernel  http://github.com/klock-android</p>
  </div>
</Presentation>
