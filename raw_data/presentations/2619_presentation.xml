<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>CoVisor: A Composi,onal Hypervisor for So6ware-Defined Networks</p>
    <p>Xin Jin Jennifer Gossels, Jennifer Rexford, David Walker</p>
  </div>
  <div class="page">
    <p>Centralized control with open APIs</p>
    <p>So6ware-Defined Networking</p>
    <p>Applica,on</p>
    <p>Controller OpenFlow</p>
    <p>Network</p>
  </div>
  <div class="page">
    <p>Hard to develop and maintain a monolithic applica,on</p>
    <p>Mul,ple Management Tasks</p>
    <p>MAC Learner + Firewall + Gateway + Monitor + IP Router</p>
    <p>Controller OpenFlow</p>
    <p>Network</p>
  </div>
  <div class="page">
    <p>Frene,c: composi,on operators to combine mul,ple applica,ons</p>
    <p>Limita,on: need to adopt Frene,c language and run,me system</p>
    <p>Modular SDN Applica,ons</p>
    <p>Frene,c Controller</p>
    <p>Firewall Gateway MAC</p>
    <p>Learner</p>
    <p>OpenFlow</p>
    <p>Monitor IP Router</p>
    <p>Network</p>
  </div>
  <div class="page">
    <p>Frene,c is Not Enough  Best of breed applica,ons are developed by different par,es  Use different programming languages  Run on different controllers</p>
    <p>Want to mix-and-match third-party controllers</p>
    <p>Firewall Gateway MAC</p>
    <p>Learner Monitor IP Router</p>
    <p>Network</p>
    <p>POX Ryu Floodlight ONOS ODL</p>
  </div>
  <div class="page">
    <p>Slicing is Not Enough  FlowVisor/Open VirteX: each controller works on a disjoint slice of traffic</p>
    <p>Firewall</p>
    <p>Ryu</p>
    <p>Router</p>
    <p>ODL</p>
    <p>OR Packet</p>
    <p>Firewall</p>
    <p>Ryu</p>
    <p>Router</p>
    <p>ODL Packet</p>
    <p>But, we want mul,ple controllers to collabora,vely work on the same traffic</p>
  </div>
  <div class="page">
    <p>Provide a clean interface to compose mul,ple controllers on the same network</p>
    <p>Composi,on of mul,ple controllers  Composi,on operators to compose mul,ple controllers</p>
    <p>Constraints on individual controllers  Visibility: virtual topology to each controller  Capability: fine-grained access control to each controller</p>
    <p>CoVisor: A Composi,onal Hypervisor for SDN</p>
  </div>
  <div class="page">
    <p>Composi,on of Mul,ple Controllers</p>
    <p>Parallel operator (+): two controllers process packets in parallel</p>
    <p>Sequen,al operator (&gt;&gt;): two controllers process packets one a6er another</p>
    <p>Override operator ( ): one controller chooses to act or defer the process</p>
    <p>to another controller</p>
    <p>Use mul,ple operators</p>
    <p>Monitor Router</p>
    <p>Firewall Router</p>
    <p>Elephant Flow Router</p>
    <p>Default Router</p>
    <p>Firewall Monitor Router</p>
  </div>
  <div class="page">
    <p>Constraints on Topology Visibility</p>
    <p>Physical</p>
    <p>Virtual</p>
    <p>Firewall MAC</p>
    <p>Learner Gateway IP</p>
    <p>Router</p>
    <p>Ethernet Island IP Core S</p>
    <p>G E I</p>
    <p>Many-to-One One-to-Many</p>
    <p>Create virtual topology with two primi,ves  Benefits: informa,on hiding, controller reuse, composi,on</p>
  </div>
  <div class="page">
    <p>Constraints on Packet Handling Capability</p>
    <p>Protect against buggy or malicious third-party controllers</p>
    <p>Constrains on pajern: header field, match type  E.g., MAC learner: srcMAC(Exact), dstMAC(Exact), inport(Exact)</p>
    <p>Constraints on ac,on: ac,ons on matched packets  E.g., MAC learner: fwd, drop</p>
  </div>
  <div class="page">
    <p>CoVisor</p>
    <p>OpenFlow</p>
    <p>OpenFlow</p>
    <p>Compose/ACL</p>
    <p>Devirtualize</p>
    <p>CoVisor: A Composi,onal Hypervisor for SDN MAC</p>
    <p>Learner</p>
    <p>POX</p>
    <p>Firewall</p>
    <p>Ryu</p>
    <p>Gateway</p>
    <p>Floodlight</p>
    <p>Monitor</p>
    <p>ONOS</p>
    <p>IP Router</p>
    <p>ODL</p>
    <p>S</p>
    <p>G E I</p>
    <p>Ethernet Island IP Core</p>
    <p>E G G I I</p>
  </div>
  <div class="page">
    <p>Compiling Policy Composi,on</p>
    <p>Policy: a list of rules  Compile policies from controllers to a single policy</p>
    <p>Monitor</p>
    <p>Router</p>
    <p>Priority Match Ac,on</p>
  </div>
  <div class="page">
    <p>Compiling Policy Composi,on</p>
    <p>Policy: a list of rules  Compile policies from controllers to a single policy</p>
    <p>Monitor</p>
    <p>Router</p>
    <p>?. srcip=1.0.0.0/24, ds4p=2.0.0.0/30  count, fwd(1)</p>
  </div>
  <div class="page">
    <p>Compiling Policy Composi,on</p>
    <p>Policy: a list of rules  Compile policies from controllers to a single policy</p>
    <p>Monitor</p>
    <p>Router</p>
    <p>?. srcip=1.0.0.0/24, ds,p=2.0.0.0/30  count, fwd(1) ?. srcip=1.0.0.0/24  count ?. ds,p=2.0.0.0/30  fwd(1) ?. *  drop</p>
  </div>
  <div class="page">
    <p>Key challenge: Efficient data plane update</p>
    <p>Controllers con,nuously update their policies  Hypervisor recompiles them and update switches</p>
    <p>Monitor 7. ds,p=2.0.0.0/30  fwd(1) 3. ds,p=2.0.0.0/26  fwd(2) 0. *  drop</p>
    <p>Router</p>
    <p>?. srcip=1.0.0.0/24, ds,p=2.0.0.0/30  count, fwd(1) ?. srcip=1.0.0.0/24  count ?. ds,p=2.0.0.0/30  fwd(1) ?. *  drop</p>
  </div>
  <div class="page">
    <p>Key challenge: Efficient data plane update</p>
    <p>Computa,on overhead  The computa,on to recompile the new policy</p>
    <p>Rule-update overhead  The rule-updates to update switches to the new policy</p>
    <p>Monitor 7. ds,p=2.0.0.0/30  fwd(1) 3. ds,p=2.0.0.0/26  fwd(2) 0. *  drop</p>
    <p>Router</p>
    <p>?. srcip=1.0.0.0/24, ds,p=2.0.0.0/30  count, fwd(1) ?. srcip=1.0.0.0/24  count ?. ds,p=2.0.0.0/30  fwd(1) ?. *  drop</p>
  </div>
  <div class="page">
    <p>Nave Solu,on  Assign priori,es from top to bojom by decrement of 1</p>
    <p>Monitor</p>
    <p>Router</p>
  </div>
  <div class="page">
    <p>Nave Solu,on  Assign priori,es from top to bojom by decrement of 1</p>
    <p>Monitor 7. ds,p=2.0.0.0/30  fwd(1) 3. ds,p=2.0.0.0/26  fwd(2) 0. *  drop</p>
    <p>Router</p>
  </div>
  <div class="page">
    <p>Nave Solu,on  Assign priori,es from top to bojom by decrement of 1</p>
    <p>Update</p>
    <p>Computa,on overhead  Recompute the en,re switch</p>
    <p>table and assign priori,es Rule-update overhead  Only 2 new rules, but 3 more</p>
    <p>rules change priority</p>
  </div>
  <div class="page">
    <p>Incremental Update</p>
    <p>Add priori,es for parallel composi,on</p>
    <p>Monitor</p>
    <p>Router</p>
  </div>
  <div class="page">
    <p>Incremental Update</p>
    <p>Add priori,es for parallel composi,on</p>
    <p>Monitor</p>
    <p>Router</p>
  </div>
  <div class="page">
    <p>Incremental Update</p>
    <p>Add priori,es for parallel composi,on</p>
    <p>Monitor 7. ds,p=2.0.0.0/30  fwd(1) 3. ds,p=2.0.0.0/26  fwd(2) 0. *  drop</p>
    <p>Router</p>
  </div>
  <div class="page">
    <p>Incremental Update</p>
    <p>Add priori,es for parallel composi,on</p>
    <p>Update</p>
    <p>Computa,on overhead  Only compose the new rule</p>
    <p>with rules in monitor Rule-update overhead  Add 2 new rules</p>
  </div>
  <div class="page">
    <p>Incremental Update</p>
    <p>Add priori,es for parallel composi,on  Concatenate priori,es for sequen,al composi,on</p>
    <p>Load Balancer Router</p>
    <p>. srcip=0.0.0.0/2, ds,p=3.0.0.0  ds,p=2.0.0.1, fwd(1)</p>
    <p>.</p>
    <p>.</p>
    <p>Low Bits</p>
  </div>
  <div class="page">
    <p>Incremental Update</p>
    <p>Add priori,es for parallel composi,on  Concatenate priori,es for sequen,al composi,on</p>
    <p>Load Balancer Router</p>
  </div>
  <div class="page">
    <p>Incremental Update</p>
    <p>Add priori,es for parallel composi,on  Concatenate priori,es for sequen,al composi,on  Stack priori,es for override composi,on</p>
    <p>Elephant Flow Router Default Router (Max priority = 8)</p>
  </div>
  <div class="page">
    <p>CoVisor</p>
    <p>OpenFlow</p>
    <p>OpenFlow</p>
    <p>Compose/ACL</p>
    <p>Devirtualize</p>
    <p>CoVisor: A Composi,onal Hypervisor for SDN MAC</p>
    <p>Learner</p>
    <p>POX</p>
    <p>Firewall</p>
    <p>Ryu</p>
    <p>Gateway</p>
    <p>Floodlight</p>
    <p>Monitor</p>
    <p>ONOS</p>
    <p>IP Router</p>
    <p>ODL</p>
    <p>S</p>
    <p>G E I</p>
    <p>Ethernet Island IP Core</p>
    <p>E G G I I</p>
  </div>
  <div class="page">
    <p>Compiling One-to-Many Virtualiza,on</p>
    <p>G E I</p>
    <p>S</p>
    <p>Physical</p>
    <p>Virtual</p>
    <p>E1</p>
    <p>E2</p>
    <p>G1</p>
    <p>G2</p>
    <p>I1</p>
    <p>I2</p>
    <p>Symbolic path genera,on  Sequen,al composi,on</p>
    <p>*</p>
    <p>E1</p>
    <p>E2 G1</p>
    <p>E2 G2 I2</p>
    <p>I1</p>
  </div>
  <div class="page">
    <p>Compiling One-to-Many Virtualiza,on</p>
    <p>G E I</p>
    <p>S</p>
    <p>Physical</p>
    <p>Virtual</p>
    <p>E1</p>
    <p>E2</p>
    <p>G1</p>
    <p>G2</p>
    <p>I1</p>
    <p>I2</p>
    <p>Symbolic path genera,on  Sequen,al composi,on  Priority augmenta,on</p>
    <p>*</p>
    <p>S1</p>
    <p>S2</p>
    <p>S3</p>
  </div>
  <div class="page">
    <p>Implementa,on and Evalua,on</p>
    <p>Project website: hjp://covisor.cs.princeton.edu  Code, tutorial, etc.</p>
    <p>Evalua,on  Parallel composi,on: L2 Monitor + L2 Router  Sequen,al composi,on: L3-L4 Firewall &gt;&gt; L3 Router  Topology virtualiza,on: gateway between an Ethernet island and an IP core</p>
  </div>
  <div class="page">
    <p>Parallel Composi,on: L2Monitor + L2 Router</p>
    <p>Compila,on ,me of inser,ng one rule to L2 Monitor Policy</p>
    <p>Ti m e (m</p>
    <p>s)</p>
    <p>L2 Router Policy Size</p>
    <p>Strawman</p>
    <p>CoVisor</p>
  </div>
  <div class="page">
    <p>Parallel Composi,on: L2Monitor + L2 Router</p>
    <p>Rule-update overhead of inser,ng one rule to L2 Monitor Policy</p>
    <p># of F lo w m od</p>
    <p>s</p>
    <p>L2 Router Policy Size</p>
    <p>Strawman</p>
    <p>CoVisor</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>CoVisor is a composi,onal hypervisor for so6ware- defined networks</p>
    <p>Provide a clean interface to compose mul,ple controllers on the same network</p>
    <p>For more, visit hjp://covisor.cs.princeton.edu  Ongoing work: integrate into ONOS with ON.LAB</p>
  </div>
  <div class="page">
    <p>Thanks!</p>
  </div>
</Presentation>
