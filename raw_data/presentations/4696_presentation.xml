<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>February 5, 2019</p>
    <p>Efficient Aggregation over Efficient Aggregation over Objects with ExtentObjects with Extent</p>
    <p>Donghui Zhang Vassilis J. Tsotras Dimitrios Gunopulos</p>
    <p>Computer Science Department University of California, Riverside</p>
    <p>PODS02</p>
  </div>
  <div class="page">
    <p>Content Content  Motivating examples  Problem definition  Straightforward approaches  Our solutions  Performance</p>
  </div>
  <div class="page">
    <p>Why Aggregation?Why Aggregation?</p>
    <p>Aggregation: compute the total value over a subset of records which satisfy some selection condition (e.g. located in an interesting region).</p>
    <p>An important operator for data mining, online query processing, data warehousing, etc.</p>
    <p>Data volume is large. With aggregation, user can get a good summary quickly.</p>
  </div>
  <div class="page">
    <p>Why Objects with Extent?Why Objects with Extent?</p>
    <p>Many applications (agricultural, meteorological, geo-spatial, etc.) produce data that have spatial (plus temporal) extent.</p>
    <p>For example, a rainfall record corresponds to a region, not a single point.</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Motivating ExampleMotivating Example</p>
    <p>A set of rain precipitation records, each having a region and a precipitation value.</p>
    <p>Given an arbitrary region, what is the total rainfall in this region this month?</p>
  </div>
  <div class="page">
    <p>Content Content  Motivating examples  Problem definition  Straightforward approaches  Our solutions  Performance</p>
  </div>
  <div class="page">
    <p>Problem DefinitionProblem Definition</p>
    <p>For simplicity, we focus on rectangular objects and query regions (a complex region can be decomposed to boxes).</p>
    <p>Two problem variations: simple box-sum and functional box-sum.</p>
  </div>
  <div class="page">
    <p>Simple Box-SumSimple Box-Sum</p>
    <p>A set of weighted rectangular objects;  Given query box q, compute total weight</p>
    <p>of objects intersecting q.</p>
    <p>box-sum=3</p>
  </div>
  <div class="page">
    <p>Functional Box-SumFunctional Box-Sum</p>
    <p>y</p>
    <p>simple box-sum: 4+3 = 7.  functional box-sum: 4*50+3*12 = 236.</p>
  </div>
  <div class="page">
    <p>In general, object value can be a function.  FBS=</p>
    <p>Functional Box-SumFunctional Box-Sum</p>
    <p>y</p>
    <p>20</p>
    <p>15</p>
  </div>
  <div class="page">
    <p>Functional Box-SumFunctional Box-Sum  A set of objects, each having a box and a</p>
    <p>value function.  Given query box q, compute the total value</p>
    <p>of objects intersecting q, where  contribution of an object is the integral of its</p>
    <p>value function over its intersection with q.</p>
  </div>
  <div class="page">
    <p>Content Content  Motivating examples  Problem definition  Straightforward approaches  Our solutions  Performance</p>
  </div>
  <div class="page">
    <p>Straightforward Approach 1 Straightforward Approach 1</p>
    <p>No index. Scan through all objects;  Obviously not efficient: query time is</p>
    <p>O(n).</p>
  </div>
  <div class="page">
    <p>Straightforward Approach 2 Straightforward Approach 2</p>
    <p>Index the objects using R-tree [Guttman84].  Reduce to range search.  Optimize by storing aggregate information</p>
    <p>at internal nodes [LM01].  Nevertheless, query time is still O(n).</p>
  </div>
  <div class="page">
    <p>Challenge Challenge</p>
    <p>Can we compute the aggregate faster?</p>
    <p>Our approach: specialized index, query time reduces to log2(n).</p>
  </div>
  <div class="page">
    <p>Content Content  Motivating examples  Problem definition  Straightforward approaches  Our solutions  Performance</p>
  </div>
  <div class="page">
    <p>Content Content  Motivating examples  Problem definition  Straightforward approaches  Our solutions</p>
    <p>Performance</p>
    <p>o simple box-sum o functional box-sum</p>
  </div>
  <div class="page">
    <p>Our Solution for Simple Box-SumOur Solution for Simple Box-Sum</p>
    <p>We reduce a box-sum query to a set of dominance-sum queries;</p>
    <p>We propose the BA-tree to answer the dominance-sum query.</p>
  </div>
  <div class="page">
    <p>x</p>
    <p>y</p>
    <p>Dominance-SumDominance-Sum  A set of weighted point objects;  Given query point p, compute total weight</p>
    <p>of objects dominated by p (i.e. to the lower left of p).</p>
  </div>
  <div class="page">
    <p>x</p>
    <p>y</p>
    <p>Dominance-SumDominance-Sum  A set of weighted point objects;  Given query point p, compute total weight</p>
    <p>of objects dominated by p (i.e. to the lower left of p).</p>
    <p>dominance-sum = 18</p>
  </div>
  <div class="page">
    <p>Existing Reduction [EO82]Existing Reduction [EO82]</p>
    <p>We proved that the reduction technique of [EO82] reduces a d-dimensional box-sum query into</p>
    <p>dominance-sum queries.</p>
    <p>) d</p>
    <p>i</p>
    <p>d 2</p>
    <p>dd</p>
    <p>i</p>
  </div>
  <div class="page">
    <p>Our New ReductionOur New Reduction  We reduce a d-dimensional simple box</p>
    <p>sum query to 2d dominance-sum queries.  Comparison:</p>
    <p>[EO82] Our Reduction</p>
    <p>d=2 8 4</p>
    <p>d=3 26 8</p>
  </div>
  <div class="page">
    <p>Our New ReductionOur New Reduction</p>
    <p>Key observation: in order for an object o to intersect query box q, the lower-left corner of o must be dominated by the upper-right corner of q.</p>
    <p>x</p>
    <p>y</p>
    <p>box</p>
    <p>query</p>
  </div>
  <div class="page">
    <p>x</p>
    <p>y</p>
    <p>box</p>
    <p>query</p>
  </div>
  <div class="page">
    <p>x</p>
    <p>y</p>
    <p>box</p>
    <p>query</p>
    <p>x</p>
    <p>y</p>
    <p>box</p>
    <p>query</p>
    <p>x</p>
    <p>y</p>
    <p>box</p>
    <p>query +</p>
    <p>x</p>
    <p>y</p>
    <p>box</p>
    <p>query</p>
  </div>
  <div class="page">
    <p>BA-tree (BA-tree (for dominance-sumfor dominance-sum))</p>
    <p>1-dimensional: augmented B+-tree;  Along with each child pointer in an index</p>
    <p>node, store the total weight of points in the sub-tree;</p>
    <p>Query, update: O(log(n)).</p>
  </div>
  <div class="page">
    <p>BA-tree (BA-tree (higher dimensionshigher dimensions))</p>
    <p>augmented k-d-B-tree;  k-d-B-tree [Robinson81]:</p>
    <p>o indexes point objects; o each index record corresponds to a</p>
    <p>rectangular region; o region of parent is fully partitioned by</p>
    <p>regions of children.</p>
  </div>
  <div class="page">
    <p>k-d-B-treek-d-B-tree</p>
    <p>A</p>
  </div>
  <div class="page">
    <p>k-d-B-treek-d-B-tree</p>
    <p>A</p>
  </div>
  <div class="page">
    <p>k-d-B-treek-d-B-tree</p>
    <p>A B</p>
  </div>
  <div class="page">
    <p>k-d-B-treek-d-B-tree</p>
    <p>A B</p>
    <p>R</p>
  </div>
  <div class="page">
    <p>k-d-B-treek-d-B-tree</p>
    <p>A B</p>
    <p>R</p>
    <p>C</p>
  </div>
  <div class="page">
    <p>k-d-B-treek-d-B-tree R</p>
    <p>A B</p>
    <p>C</p>
  </div>
  <div class="page">
    <p>k-d-B-treek-d-B-tree R</p>
    <p>A B</p>
    <p>C</p>
  </div>
  <div class="page">
    <p>k-d-B-treek-d-B-tree R</p>
    <p>Compute dominance-sum regarding point p by examining all children that intersect the rectangle [origin, p].</p>
    <p>In this example: A, C, D, E, F, H.</p>
    <p>p</p>
    <p>A</p>
    <p>B</p>
    <p>C</p>
    <p>D E H</p>
    <p>F G</p>
    <p>origin</p>
  </div>
  <div class="page">
    <p>BA-treeBA-tree</p>
    <p>A</p>
    <p>B</p>
    <p>C</p>
    <p>D E H</p>
    <p>F G</p>
    <p>origin</p>
    <p>R</p>
    <p>Motivation for augmentation: examine a single child!</p>
    <p>the rectangle [origin, p] can be divided into four parts...</p>
    <p>p</p>
  </div>
  <div class="page">
    <p>BA-treeBA-tree R</p>
    <p>dominated by Fs lower-left corner</p>
    <p>p</p>
    <p>A</p>
    <p>B</p>
    <p>C</p>
    <p>D E H</p>
    <p>F G</p>
    <p>origin</p>
  </div>
  <div class="page">
    <p>BA-treeBA-tree R</p>
    <p>to the left of F</p>
    <p>p</p>
    <p>A</p>
    <p>B</p>
    <p>C</p>
    <p>D E H</p>
    <p>F G</p>
    <p>origin</p>
  </div>
  <div class="page">
    <p>BA-treeBA-tree R</p>
    <p>below F</p>
    <p>p</p>
    <p>A</p>
    <p>B</p>
    <p>C</p>
    <p>D E H</p>
    <p>F G</p>
    <p>origin</p>
  </div>
  <div class="page">
    <p>BA-treeBA-tree R</p>
    <p>intersection with F</p>
    <p>p</p>
    <p>A</p>
    <p>B</p>
    <p>C</p>
    <p>D E H</p>
    <p>F G</p>
    <p>origin</p>
  </div>
  <div class="page">
    <p>BA-treeBA-tree R</p>
    <p>Compute the total weight of points in these four regions separately and add them up!</p>
    <p>p</p>
    <p>A</p>
    <p>B</p>
    <p>C</p>
    <p>D E H</p>
    <p>F G</p>
    <p>origin</p>
  </div>
  <div class="page">
    <p>BA-treeBA-tree R</p>
    <p>Total weight of objects in this region: a single value (independent to where p is); augment F with this value (called subtotal).</p>
    <p>p</p>
    <p>A</p>
    <p>B</p>
    <p>C</p>
    <p>D E H</p>
    <p>F G</p>
    <p>origin</p>
  </div>
  <div class="page">
    <p>A</p>
    <p>B</p>
    <p>C</p>
    <p>D E H</p>
    <p>F G</p>
    <p>origin</p>
    <p>BA-treeBA-tree R</p>
    <p>Total weight of objects in this region: computed via a 1-dimensional BA-tree (called y-border) for the y values of all objects to the left of F.</p>
    <p>p</p>
  </div>
  <div class="page">
    <p>A</p>
    <p>B</p>
    <p>C</p>
    <p>D E H</p>
    <p>F G</p>
    <p>origin</p>
    <p>BA-treeBA-tree R</p>
    <p>p</p>
    <p>Total weight of objects in this region: computed via a 1-dimensional BA-tree (called x-border) for the x values of all objects below F.</p>
  </div>
  <div class="page">
    <p>BA-treeBA-tree R</p>
    <p>For this part, examine the sub-tree rooted by F.</p>
    <p>Only one child! thus a single path from root to leaf.</p>
    <p>p</p>
    <p>A</p>
    <p>B</p>
    <p>C</p>
    <p>D E H</p>
    <p>F G</p>
    <p>origin</p>
  </div>
  <div class="page">
    <p>BA-treeBA-tree R</p>
    <p>Insertion: besides the k-d-B-tree insertion (into sub-tree of C), update subtotal (of F, G), x-border (of B) and y-border (of H).</p>
    <p>p</p>
    <p>A</p>
    <p>B</p>
    <p>C</p>
    <p>D E H</p>
    <p>F G</p>
    <p>origin</p>
  </div>
  <div class="page">
    <p>BA-treeBA-tree R</p>
    <p>Insertion: besides the k-d-B-tree insertion (into sub-tree of C), update subtotal (of F, G), x-border (of B) and y-border (of H).</p>
    <p>p</p>
    <p>A</p>
    <p>B</p>
    <p>C</p>
    <p>D E H</p>
    <p>F G</p>
    <p>origin</p>
  </div>
  <div class="page">
    <p>Summary for Summary for Our Simple Box-Sum SolutionOur Simple Box-Sum Solution  We proposed the BA-tree, a dominance-sum</p>
    <p>index: a k-d-B-tree augmented with subtotal, x-border and y-border.</p>
    <p>Due to our reduction, by maintaining several BA-trees together, we can compute the simple box-sum in poly-logarithmic time (assuming a balanced tree).</p>
  </div>
  <div class="page">
    <p>Content Content  Motivating examples  Problem definition  Straightforward approaches  Our solutions</p>
    <p>Performance</p>
    <p>o simple box-sum o functional box-sum</p>
  </div>
  <div class="page">
    <p>Our Solution for Functional Box-SumOur Solution for Functional Box-Sum</p>
    <p>First, focus on a special case: OIFBS (Origin-Involved Functional Box-Sum), where the query box contains the origin of space.</p>
  </div>
  <div class="page">
    <p>Functional Box-SumFunctional Box-Sum</p>
    <p>y</p>
    <p>origin</p>
  </div>
  <div class="page">
    <p>Origin-Involved special caseOrigin-Involved special case</p>
    <p>OIFBS=4*(18*5)+3*(2*11)=426.</p>
    <p>y</p>
    <p>origin</p>
  </div>
  <div class="page">
    <p>Our Solution for Functional Box-SumOur Solution for Functional Box-Sum</p>
    <p>We reduce a OIFBS query to a dominance-sum query (solvable using BA-tree).</p>
    <p>We show how the Functional Box-Sum query can be computed via a set of OIFBS queries.</p>
  </div>
  <div class="page">
    <p>OIFBS OIFBS  dominance-sum dominance-sum  Idea: to insert a rectangular object, insert its</p>
    <p>four corners, associating a function with each corner.</p>
    <p>The functions should satisfy: for any point p in space, the contribution of each object to the OIFBS is equal to the sum of dominated corners.</p>
    <p>To compute an OIFBS regarding box [origin, p], compute the dominance-sum regarding p.</p>
  </div>
  <div class="page">
    <p>y</p>
    <p>y</p>
    <p>origin</p>
    <p>For any point (x, y) in the object region, the contribution of the object to an OIFBS query at this point is: 4(x-2)(y-10).</p>
    <p>We insert the lower-left corner along with the above function.</p>
  </div>
  <div class="page">
    <p>x1 x x</p>
    <p>y</p>
    <p>y1</p>
    <p>y</p>
    <p>f(x, y)</p>
    <p>origin</p>
    <p>In general, at the lower-left corner (x1, y1) of object with value f(x, y), we should insert:</p>
    <p>x</p>
    <p>x</p>
    <p>y</p>
    <p>y xyyxf</p>
    <p>'d'd)','(g1=</p>
    <p>The functions at the other corners?</p>
  </div>
  <div class="page">
    <p>x1 x x</p>
    <p>y</p>
    <p>y1</p>
    <p>y</p>
    <p>f(x, y)</p>
    <p>origin x2</p>
    <p>If (x, y) is to the right of the object, the contribution of the object to OIFBS is:</p>
    <p>It should equal to the sum of two corners. So the function at lower-right corner is g2-g1.</p>
    <p>x</p>
    <p>x</p>
    <p>y</p>
    <p>y xyyxf</p>
    <p>'d'd)','(g2=</p>
  </div>
  <div class="page">
    <p>x</p>
    <p>y</p>
    <p>x1 x2</p>
    <p>y1</p>
    <p>y2</p>
    <p>origin</p>
    <p>f(x,y)</p>
    <p>We have proved that:  at lower-left: insert v1=g1  at lower-right: insert v2=g2-g1  at upper-left: insert v3=g3-g1  at upper-right: insert v4= g1+g4-g2-g3</p>
    <p>x</p>
    <p>x</p>
    <p>y</p>
    <p>y xyyxf</p>
    <p>'d'd)','(g2=</p>
    <p>x</p>
    <p>x</p>
    <p>y</p>
    <p>y xyyxf</p>
    <p>'d'd)','(g3=</p>
    <p>x</p>
    <p>x</p>
    <p>y</p>
    <p>y xyyxf</p>
    <p>'d'd)','(g4=</p>
    <p>x</p>
    <p>x</p>
    <p>y</p>
    <p>y xyyxf</p>
    <p>'d'd)','(g1=</p>
  </div>
  <div class="page">
    <p>OIFBS OIFBS  dominance-sum dominance-sum  If f(x, y) is a polynomial of degree k, then</p>
    <p>vi(x, y) are polynomials of degree k+2.  e.g. in a previous example, f(x, y)=4, while</p>
    <p>v1(x, y)=4(x-2)(y-10).  Such functions can be represent in constant</p>
    <p>space and can be combined or evaluated efficiently.</p>
  </div>
  <div class="page">
    <p>A functional box-sum query can be transformed into four OIFBS queries.</p>
    <p>Functional Box-Sum Functional Box-Sum  OIFBS OIFBS</p>
  </div>
  <div class="page">
    <p>+</p>
    <p>=</p>
  </div>
  <div class="page">
    <p>Summary for Summary for Our Functional Box-Sum SolutionOur Functional Box-Sum Solution</p>
    <p>We reduced one functional box-sum query to four OIFBS queries;</p>
    <p>We reduced the OIFBS problem to the dominance-sum problem;</p>
    <p>Thus we can use the BA-tree for the functional box-sum computation;</p>
  </div>
  <div class="page">
    <p>Content Content  Motivating examples  Problem definition  Straightforward approaches  Our solutions</p>
    <p>Performance</p>
    <p>o simple box-sum o functional box-sum</p>
  </div>
  <div class="page">
    <p>Experimental SetupExperimental Setup  Sun Enterprise 250 Server, 8KB page size,</p>
    <p>edge: roughly 1/10,000 of space;  Our disk-based, dynamic BA-tree can be</p>
    <p>easily implemented. Implementation can be found at: http://www.cs.ucr.edu/~donghui/boxaggr/</p>
  </div>
  <div class="page">
    <p>Implemented AlgorithmsImplemented Algorithms  The BA-tree has over 200 times faster</p>
    <p>query performance than the plain R*-tree approach!</p>
    <p>We report the comparison against the improved aR-tree and omit the plain R*tree;</p>
    <p>Two extensions of the dominance-sum data structure ECDF-tree [Bentley80] to disk-based, dynamic update environment.</p>
  </div>
  <div class="page">
    <p>Comparing Index SizesComparing Index Sizes</p>
    <p>aR ECDFu ECDFq BAT</p>
  </div>
  <div class="page">
    <p>Simple Box-Sum Query CostSimple Box-Sum Query Cost</p>
    <p>aR</p>
    <p>ECDFu</p>
    <p>ECDFq</p>
    <p>BAT</p>
  </div>
  <div class="page">
    <p>Functional Box-Sum Query CostFunctional Box-Sum Query Cost</p>
    <p>aR_d0 aR_d2 BAT_d0 BAT_d2</p>
    <p>IO</p>
    <p>CPU</p>
  </div>
  <div class="page">
    <p>ConclusionsConclusions</p>
    <p>We solved two variations of the box-sum problem;</p>
    <p>We reduced each variation to dominancesums and proposed the BA-tree;</p>
    <p>With about 4 times overhead in space, we achieved 200x query improvement over the R*-tree approach and 30x query improvement over the aR-tree approach.</p>
  </div>
  <div class="page"/>
</Presentation>
