<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Approximate XML Query Answers</p>
    <p>Neoklis Polyzotis (UC Santa Cruz) Minos Garofalakis (Bell Labs) Yannis Ioannidis (U. of Athens, Hellas)</p>
    <p>Represented by: Gal Zach</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>XML: de-facto standard for data exchange over the Internet.</p>
    <p>Conflict between on-line and query execution cost  Increased query response times  Users might wait for un-interesting results</p>
    <p>Processing the query over a concise synopsis of the XML data.</p>
    <p>The approximate result should be:  Computed fast  Similar in its value content to the true result  Similar in its hierarchical structure to the true result</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Motivation  Background: Synopsis model  TreeSketch Synopses  Summarization model  Structural clustering</p>
    <p>of elements  Efficient processing and construction  Element Simulation Distance  Experimental Results</p>
  </div>
  <div class="page">
    <p>Twig Query - Example</p>
    <p>for q1 in //a[//b]</p>
    <p>for q2 in q1//p</p>
    <p>return</p>
    <p>q1//n,</p>
    <p>for q3 in q2//k</p>
    <p>return q3</p>
    <p>q0</p>
    <p>q1</p>
    <p>q2</p>
    <p>q3</p>
    <p>q4</p>
    <p>//a[//b]</p>
    <p>//p</p>
    <p>//k</p>
    <p>//n</p>
    <p>a</p>
    <p>p</p>
    <p>k</p>
    <p>n</p>
    <p>a</p>
    <p>p</p>
    <p>k</p>
    <p>n</p>
    <p>d</p>
    <p>Twig query Query tree Nesting tree</p>
    <p>b</p>
    <p>The is for the paths that are specified in the return clause.</p>
  </div>
  <div class="page">
    <p>Synopsis Model  Let G =(VG,EG) a direct node-labeled graph.  A graph synopsis S(G)= (VS,ES) is a direct</p>
    <p>node-labeled graph where: 1. Each Node vVS corresponds to a subset of</p>
    <p>element (or attribute) node in VG, termed the extent of v  extent(v), that have the same label.</p>
    <p>Each synopsis node u store a tag tag(u) for the common tag of its element and a count field |u| for the size of its extent.</p>
  </div>
  <div class="page">
    <p>Synopsis Model</p>
    <p>Synopsis node  Set of elements of the same tag</p>
    <p>Synopsis edge  Document edge(s)</p>
    <p>r</p>
    <p>a1 a2 a3 r</p>
    <p>a(3)</p>
    <p>r</p>
    <p>a</p>
    <p>r</p>
    <p>a1 a2 a3</p>
  </div>
  <div class="page">
    <p>XML Data Graph</p>
    <p>P0</p>
    <p>PB3 A1</p>
    <p>A2</p>
    <p>N4</p>
    <p>N8</p>
    <p>V8 V4</p>
    <p>E14</p>
    <p>P6</p>
    <p>F13</p>
    <p>B5</p>
    <p>F10</p>
    <p>P7</p>
    <p>B9</p>
    <p>T12</p>
    <p>V10</p>
    <p>V11</p>
    <p>V12</p>
    <p>V13</p>
    <p>V14</p>
    <p>T11</p>
    <p>Synopsis Model - Example</p>
    <p>P(1)</p>
    <p>A(2) PB(1)</p>
    <p>N(2) P(2)</p>
    <p>T(2)</p>
    <p>B(2)</p>
    <p>F(2) E(1)</p>
    <p>Count(A) = | Extent(A) | = | {A1,A2} | =2</p>
    <p>Synopsis graph</p>
  </div>
  <div class="page">
    <p>Example for Twig-XSketch</p>
    <p>r</p>
    <p>a1</p>
    <p>b</p>
    <p>c</p>
    <p>b</p>
    <p>c</p>
    <p>b</p>
    <p>c</p>
    <p>b</p>
    <p>c</p>
    <p>a2</p>
    <p>Document T1 Twig-XSketch</p>
    <p>B/F=Backward forward</p>
    <p>Document T2</p>
    <p>B/F</p>
    <p>R(1)</p>
    <p>A(2)</p>
    <p>B(4)</p>
    <p>C(10)</p>
    <p>B/F</p>
    <p>B/F</p>
    <p>r</p>
    <p>a1</p>
    <p>b</p>
    <p>c</p>
    <p>b</p>
    <p>c</p>
    <p>b</p>
    <p>c</p>
    <p>b</p>
    <p>c</p>
    <p>a2</p>
    <p>Note: The numbers on the edges represent how many edges are of this kind.</p>
  </div>
  <div class="page">
    <p>Count-Stability and the TreeSketch Synopsis</p>
  </div>
  <div class="page">
    <p>Definitions</p>
    <p>Let R  V x V denote an equivalence relation over the nodes of T(V,E), and let (u,v) denote a pair of equivalence classes (i.e. element node partition) induced by R.</p>
    <p>The pair (u,v) is K-stable (K0) iff each element eu has exactly k child elements in v.</p>
    <p>The relation R and the graph synopsis SR(T) resulting from the corresponding element partition are said to be count stable iff for every possible pair of element partitions (u,v) there exists some k0 such that (u,v) is k-stable.</p>
  </div>
  <div class="page">
    <p>Examples</p>
    <p>Tree T1</p>
    <p>r</p>
    <p>a1</p>
    <p>b1 b3b2</p>
    <p>a2</p>
    <p>r</p>
    <p>a</p>
    <p>b</p>
    <p>SR(T1)</p>
    <p>The pair (r, a) is 2-stable.</p>
    <p>The pair (a, b) is not k-stable for any k0.</p>
    <p>Tree T2</p>
    <p>r</p>
    <p>a</p>
    <p>b</p>
    <p>SR(T2)</p>
    <p>The pair (r, a) is 2-stable.</p>
    <p>The pair (a, b) is 3-stable.</p>
    <p>SR(T2) is count-stable.</p>
    <p>r</p>
    <p>b3b1</p>
    <p>a1</p>
    <p>b2 b6b4</p>
    <p>a2</p>
    <p>b5</p>
  </div>
  <div class="page">
    <p>Lemma</p>
    <p>Given a data tree T(V,E) there exists a unique minimal (in terms of the number of equivalence classes) count-stable equivalence relation R V x V.</p>
    <p>Furthermore, there exists a function Expand from stable relations to XML trees, such that Expand(R) is isomorphic to the original document tree T.</p>
  </div>
  <div class="page">
    <p>Example</p>
    <p>SR(T1) SR(T2)</p>
    <p>r</p>
    <p>a</p>
    <p>b</p>
    <p>c</p>
    <p>b</p>
    <p>r</p>
    <p>a</p>
    <p>b</p>
    <p>c</p>
    <p>a</p>
    <p>b</p>
    <p>r</p>
    <p>a1</p>
    <p>b</p>
    <p>c</p>
    <p>b</p>
    <p>c</p>
    <p>b</p>
    <p>c</p>
    <p>b</p>
    <p>c</p>
    <p>a2</p>
    <p>r</p>
    <p>a1</p>
    <p>b</p>
    <p>c</p>
    <p>b</p>
    <p>c</p>
    <p>b</p>
    <p>c</p>
    <p>b</p>
    <p>c</p>
    <p>a2</p>
  </div>
  <div class="page">
    <p>TreeSketch Synopsis</p>
    <p>TreeSketch synopsis TS for an XML data tree T is a graph-synopsis for T where:</p>
  </div>
  <div class="page">
    <p>TreeSketch Synopsis</p>
    <p>The interpretation of the stored average is simple:</p>
    <p>All elements in the extent of u have count(u,v) child elements in the extent of v.</p>
  </div>
  <div class="page">
    <p>TreeSketches and Clustering</p>
  </div>
  <div class="page">
    <p>TreeSketches and Clustering</p>
    <p>Let u be a synopsis node with outgoing edges</p>
    <p>u v1,,u vn. The set of outgoing edges defines a n-dimnetional space where an element e  u is mapped to point (c1(e),,cn(e)) if it has ci(e) children to node vi, 1 i n.</p>
    <p>The recorded average edge counts essentially map all points in this space to point (count(u,v1), ,count(u,vn)), which actually represents the centroid of the cluster.</p>
  </div>
  <div class="page">
    <p>TreeSketches and Clustering Example</p>
    <p>r</p>
    <p>a1</p>
    <p>cb cb</p>
    <p>a2 1 2 5 8</p>
    <p>r(1)</p>
    <p>c(10)b(6)</p>
    <p>a(2) 3 5</p>
    <p>a1 (1,2)</p>
    <p>a2 (5,8)</p>
    <p>a (3,5)</p>
    <p>Synopsis treeOriginal tree</p>
  </div>
  <div class="page">
    <p>TreeSketches and Clustering</p>
    <p>We can characterize the quality of a TreeSketch synopsis by using a metric that quantifies the quality of the induced clustering.</p>
    <p>The metric used in the article is the squared error of the clustering which essentially measures the euclidean distance between points and their corresponding centroid.</p>
    <p>The squared error of a single cluster u is defined as sq(u) = eu1 i n(ci(e)-count(ui,vi))</p>
    <p>Sq(TS) for a synopsis TS is simply the sum of squared errors for all the induced clusters.</p>
  </div>
  <div class="page">
    <p>TreeSketches and Clustering</p>
    <p>Note that the squared error for a count-stable synopsis is zero since all edge-count centroids are exact, i.e., the child count for any element in a given synopsis node extent are identical.  Tight clusters  Accurate synopsis  The perfect synopsis corresponds to a perfect</p>
    <p>clustering</p>
  </div>
  <div class="page">
    <p>Building the Count-Stable Summery</p>
  </div>
  <div class="page">
    <p>BUILDSTABLE Algorithm Input: XML document T. Output: Count-Stable synopsis S to T. Begin 1. H=; S= 2. foreach eT in post-order do 3. C={(ui,ci):ui is a node in S and ci=|children(e)extent(ui)|&gt;0} 4. if (H[lable(e),C]=) than 5. Add node u to S with label(u)=label(e) 6. H[lable(e),C]=u 7. for (ui,ci)C do add edge u ui to S 8. endif 9. u=H[lable(e),C]; extent(u)=extent(u)U{e} 10. endfor end</p>
    <p>=&gt;The algorithm time: O(|T|)=&gt;The algorithm time: O(|T|)</p>
  </div>
  <div class="page">
    <p>Example</p>
    <p>r</p>
    <p>a1</p>
    <p>b2b1 b3</p>
    <p>a2</p>
    <p>b</p>
    <p>a a</p>
    <p>r 1 1</p>
    <p>T S</p>
    <p>H</p>
    <p>(b, ) = b (a,{(b,2)}) = a (a, {(b,1)}) = a</p>
    <p>(r,{(a,1),(a,1)}) = r</p>
    <p>C= C= {(b,2)}C= C= {(b,1)}C= {(a,1),(a,1)}</p>
    <p>b1 b2</p>
    <p>a1</p>
    <p>b3</p>
    <p>a2</p>
    <p>r</p>
  </div>
  <div class="page">
    <p>Space Budget Limitations</p>
    <p>Given an XML tree T, build a TreeSketch of size B  Difficult clustering problem</p>
    <p>Space dimensionality depends on the clustering itself</p>
    <p>Construction based on bottom-up clustering  Compress perfect synopsis by merging clusters  Best merge determined by marginal gains</p>
    <p>Perfect Space Budget</p>
  </div>
  <div class="page">
    <p>TSBUILD Algorithm  Maintain a pool of candidate operations for merging</p>
    <p>m(TS) denotes the resulting synopsis after applying merge m on TS.</p>
    <p>m.errd = sq(m(TS)) - sq(TS) is the increase in squared error from TS to m(TS).</p>
    <p>m.sized = size(TS) - size(m(TS)) is the decrease in synopsis size.</p>
    <p>The operations pool is organized in min-heap according to the marginal-gain ratio m.errd / m.sized.</p>
  </div>
  <div class="page">
    <p>TSBUILD: Main Steps  Input:</p>
    <p>XML Tree T.  Space budget S.  Upper/Lower bounds for heap size (Uh, Lh).</p>
    <p>Output: TreeSketch synopsis TS of T of size  S.  Main Steps:</p>
    <p>TS = BuildStable(T);  Creates the pool of candidates merge operations on size Uh.  Applying each merge operation on its turn on TS.  After each merge, recompute all necessary parameters of TS.  If TS drops bellow size S, the algorithm stops.  If the pool size drops below the bound Lh, replenish it.</p>
  </div>
  <div class="page">
    <p>TSBUILD</p>
  </div>
  <div class="page">
    <p>CREATEPOOL Algorithm  Generate all possible pair-wise merges and</p>
    <p>keep the top Uh O(N) merge operations.  Key observation: Two elements have similar</p>
    <p>structure, if their children have similar structure.  Children clusters should be merged first.</p>
    <p>Bottom-up merging, based on depth  Depth: distance from the leaves of the tree.  Build a pool of candidate merges by increasing</p>
    <p>depth.  Replenish the pool when it falls below a given</p>
    <p>threshold.</p>
  </div>
  <div class="page">
    <p>CREATEPOOL</p>
  </div>
  <div class="page">
    <p>Approximate Query Processing</p>
  </div>
  <div class="page">
    <p>EVALQUERY: Main Steps  Input:</p>
    <p>TreeSketch TS of document T.  Twig Query Q.</p>
    <p>Output: TreeSketch TQ that approximates the nesting tree NT(Q).</p>
    <p>Main Steps:  Go in pre-order traversal on Q.  After qj was added, go to its son qi.  Add the node qiQ if it doesnt exists yet, and calculate the</p>
    <p>paths number from qj to it, acording to TS.  Connect qi to qj (the parent node) by adding an edge.</p>
  </div>
  <div class="page">
    <p>EVALQUERY Algorithm</p>
  </div>
  <div class="page">
    <p>EVALEMBED</p>
  </div>
  <div class="page">
    <p>Example</p>
    <p>//f</p>
    <p>q0</p>
    <p>q1</p>
    <p>q2q3</p>
    <p>q4</p>
    <p>q5</p>
    <p>//a</p>
    <p>d[/g]//f b|e</p>
    <p>c</p>
    <p>r</p>
    <p>A</p>
    <p>EB</p>
    <p>F</p>
    <p>C</p>
    <p>D</p>
    <p>G2G1</p>
    <p>rQ (q0)</p>
    <p>AQ(q1)</p>
    <p>EQ(q2)BQ(q2)</p>
    <p>FQ(q4)</p>
    <p>CQ(q5)</p>
    <p>FQ(q3)</p>
    <p>Query TREESKETCH Result TREESKETCHTSQ</p>
  </div>
  <div class="page">
    <p>Example Cont.</p>
    <p>Let us consider the processing of node q1 (on the query), and more specifically the computation of bindings from q1 to q3.</p>
    <p>Starting from node A, which appears in the bindings of q1, we can identify exactly one simple embedding of path(q1,q3)=d[/g]//f, namely e=A/D/F. The bindings of q3, therefore, will be the descendants of A along the given embedding.</p>
    <p>The number of descendants for each element in A: nt = count(A,D)count(D,F)=20.5=1. s = 0.6+0.7-0.60.7=0.88. =&gt; The number descendants along d[/g]//f for each</p>
    <p>binding q1 is 10.88 = 0.88.</p>
  </div>
  <div class="page">
    <p>Error of Approximation Abstract</p>
    <p>The error of approximation is quantified by the distance between the 2 XML trees.</p>
    <p>The distance represents how much 2 trees are similar, by the aspects of structure and meaning.</p>
    <p>ESD - Element Simulation Distance - is a metric described on the article which quantifies the above-mentioned distance.</p>
  </div>
  <div class="page">
    <p>Experimental Study</p>
    <p>Data Sets:  IMDB - real-life data set from the Internet Movie Data Base.  XMark - synthetic data set that models transactions on an</p>
    <p>online-action.</p>
    <p>SwissProt - real-life data set with annotations on proteins.</p>
    <p>Workload: 1000 random twig queries.  Evaluation metrics:</p>
    <p>Average ESD for approximate answers</p>
  </div>
  <div class="page">
    <p>Data Sets Characteristics</p>
    <p>Data sets Elements File size (MB) Stable Synopsis Size (KB)</p>
    <p>IMDB 102,754 3 77</p>
    <p>XMARK 103,135 5 276</p>
    <p>SProt 182,300 4 265</p>
  </div>
  <div class="page">
    <p>Approximate Answers IMDB (~102K Elements)</p>
    <p>Avg. Result Size: 3,477 tuples</p>
    <p>A v g</p>
    <p>. E</p>
    <p>S D</p>
    <p>TreeSketch XSketch</p>
  </div>
  <div class="page">
    <p>Approximate Answers A</p>
    <p>v g</p>
    <p>. E</p>
    <p>S D</p>
    <p>Synopsis size (KB)</p>
    <p>XMark (~103K Elements) Avg. Result Size: 2,436 tuples</p>
    <p>. TreeSkethces TwigXSkethces</p>
  </div>
  <div class="page">
    <p>Approximate Answers SwissPort (~182K Elements)</p>
    <p>Avg. Result Size: 104,592 tuples</p>
    <p>Synopsis size (KB)</p>
    <p>A v</p>
    <p>g .</p>
    <p>E S</p>
    <p>D</p>
    <p>. TreeSkethces TwigXSkethces</p>
  </div>
  <div class="page">
    <p>Construction times</p>
    <p>Construction times (minutes) for TREESKETCHes and twig-XSKETCHes.</p>
    <p>IMDB XMark Swiss-Port</p>
    <p>TREESKETCHes 0.7 8 10</p>
    <p>Twig-XSKETCHes 13 47 55</p>
  </div>
  <div class="page">
    <p>Error of Approximation</p>
    <p>Let NTS(Q) be the approximate nesting tree that is computed over a concise synopsis TS, and let NT(Q) be the true nesting tree of the query Q.</p>
    <p>The error of approximation is quantified by the distance between the 2 XML trees, denoted as distA(NTS(Q), NT(Q)).</p>
    <p>We will use the tree-edit distance metric, which measure only the syntactic differences.</p>
  </div>
  <div class="page">
    <p>Tree-edit distance metric</p>
    <p>The tree-edit distance distE(T1,T2) between 2 XML trees measures the minimum cost sequence of edit operations the transform T1 to T2.</p>
    <p>Operations on tree nodes (basic):  Adding  Deleting  Relabeling</p>
  </div>
  <div class="page">
    <p>Tree-edit distance metric Example</p>
    <p>r</p>
    <p>a a</p>
    <p>SdSc Sc Sd</p>
    <p>r</p>
    <p>a a</p>
    <p>SdSc Sc Sd</p>
    <p>r</p>
    <p>a a</p>
    <p>SdSc Sc Sd</p>
    <p>Query answer T Approximation T1 Approximation T2</p>
    <p>distE(T,T1) = 3|Sc|+3|Sc| = 3|Sc|+3|Sd| = distE(T,T2)</p>
  </div>
  <div class="page">
    <p>Element Simulation Distance</p>
    <p>New distance metric for XML trees.  Considers both the overall path structure and</p>
    <p>the distribution of document edges.  Defined recursively.  Uses existing distance metric such as MAC</p>
    <p>(match and compare) and EMD (earth movers distance).</p>
    <p>Note: these metrics are not described on the article.</p>
  </div>
  <div class="page">
    <p>Element Simulation Distance</p>
    <p>MAC: A numerical measure to quantify the quality of an approximate answer to a setvalued query.</p>
    <p>EMD: Measures a distance between 2 distributions, which reflects the minimal amount of work that must be performed to transform one distribution into the other by moving distribution mass around.</p>
  </div>
  <div class="page">
    <p>Element Simulation Distance</p>
    <p>Let uT1 vT2 be elements of the compared trees where label(u)=label(v).</p>
    <p>Let Ut, Vt denote the children sets of u, v respectively, that have tag t.</p>
    <p>ESD(u,v) denotes the distance between any 2 elements uUt, vVt.</p>
    <p>The distance dist(Ut, Vt) between Ut, Vt is defined by using an existing value set distance metric, like MAC or EMD.</p>
    <p>ESD(u,v) = dist(Ut, Vt)</p>
  </div>
  <div class="page">
    <p>Element Simulation Distance</p>
    <p>Assume without loss of generality that Vt=.  For each element eUt, we insert a unique</p>
    <p>element ev in Vt with distance ESD(e,ev)=|e|, where |e| is the sub-trees size of e, and ESD(e,ev)=, for all e Ut, ee.</p>
    <p>ESD Between two Trees :</p>
    <p>ESD(T1,T2) = ESD(root(T1), root(T2)).</p>
  </div>
  <div class="page">
    <p>ESD - Example Let u,v be the left aa elements of T and T1 respectively.</p>
    <p>Element u,v have children of tags c and d and thus ESD(u,v)= dist(Uc, Vc)+ dist(Ud, Vd). ESD(ci,cj), ciUc, cjVc are equal to 0, since the elements have identical sub-trees. Notice that the 2 value sets contain equal values but at different multiplicities. Using the MAC metric: dist(Uc, Vc)=8 =&gt; ESD(u,v)=8+0=8.</p>
    <p>r</p>
    <p>a a</p>
    <p>SdSc Sc Sd</p>
    <p>r</p>
    <p>a a</p>
    <p>SdSc Sc Sd</p>
  </div>
  <div class="page">
    <p>ESD  Example Cont.</p>
    <p>Let v be the left element a of T2. . . . ESD(u,v)=6.</p>
    <p>r</p>
    <p>a a</p>
    <p>SdSc Sc Sd</p>
    <p>r</p>
    <p>a a</p>
    <p>SdSc Sc Sd</p>
  </div>
  <div class="page">
    <p>Questions</p>
  </div>
  <div class="page">
    <p>Thank You!</p>
  </div>
</Presentation>
