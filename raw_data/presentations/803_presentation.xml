<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>2007 Andreas Haeberlen, MPI-SWS 1</p>
    <p>Practical accountability for distributed systems</p>
    <p>Andreas Haeberlen</p>
    <p>MPI-SWS / Rice University</p>
    <p>Petr Kuznetsov MPI-SWS</p>
    <p>Peter Druschel MPI-SWS</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Distributed state, incomplete information  General case: Multiple admins with different interests</p>
    <p>Admin</p>
  </div>
  <div class="page">
    <p>General faults occur in practice</p>
    <p>Many faults are not 'fail-stop'  Node is still running, but its behavior changes</p>
    <p>Examples:  Hardware malfunctions  Misconfigurations  Software modifications by users  Hacker attacks  ...</p>
  </div>
  <div class="page">
    <p>Dealing with general faults is difficult</p>
    <p>How to detect faults?  How to identify the faulty nodes?  How to convince others that a node is (not) faulty?</p>
    <p>Incorrect message</p>
    <p>Responsible admin</p>
  </div>
  <div class="page">
    <p>Learning from the 'offline' world  Relies on accountability  Example: Banks</p>
    <p>Can be used to detect, identify and convince  But: Existing fault-tolerance work mostly focused</p>
    <p>on prevention</p>
    <p>Goal: A general+practical system for accountability</p>
    <p>Requirement Solution</p>
    <p>Commitment Signed receipts</p>
    <p>Tamper-evident record</p>
    <p>Double-entry bookkeeping</p>
    <p>Inspections Audits</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction  What is accountability?  How can we implement it?  How well does it work?</p>
  </div>
  <div class="page">
    <p>Ideal accountability</p>
    <p>Whenever a node is faulty in any way, the system generates a proof of misbehavior against that node</p>
    <p>Fault := Node deviates from expected behavior  Recall that our goal is to</p>
    <p>detect faults  identify the faulty nodes  convince others that a node is (or is not) faulty</p>
    <p>Can we build a system that provides the following guarantee?</p>
  </div>
  <div class="page">
    <p>Can we detect all faults?  Problem: Faults that</p>
    <p>affect only a node's internal state</p>
    <p>Requires online trusted probes at each node</p>
    <p>Focus on observable faults:  Faults that causally</p>
    <p>affect a correct node</p>
    <p>This allows us to detect faults without introducing any trusted components</p>
    <p>AA</p>
    <p>X</p>
    <p>CC</p>
  </div>
  <div class="page">
    <p>Can we always get a proof?  Problem: He-said-she-said</p>
    <p>situation  Three possible causes:</p>
    <p>A never sent X  B refuses to accept X  X was lost by the network</p>
    <p>Cannot get proof of misbehavior!  Generalize to verifiable evidence:</p>
    <p>a proof of misbehavior, or  a challenge that the node cannot answer</p>
    <p>What if, after a long time, no response has arrived?</p>
    <p>Does not prove the fault, but we can suspect the node</p>
    <p>AA</p>
    <p>X</p>
    <p>BB</p>
    <p>CC</p>
    <p>?</p>
    <p>I sent X!</p>
    <p>I never received</p>
    <p>X!</p>
    <p>?!</p>
  </div>
  <div class="page">
    <p>Practical accountability</p>
    <p>We propose the following definition of a distributed system with accountability:</p>
    <p>This is useful  Any (!) fault that affects a correct node is</p>
    <p>eventually detected and linked to a faulty node</p>
    <p>It can be implemented in practice</p>
    <p>Whenever a fault is observed by a correct node, the system eventually generates verifiable evidence against a faulty node</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction  What is accountability?  How can we implement it?  How well does it work?</p>
  </div>
  <div class="page">
    <p>Adds accountability to a given system  Implemented as a library  Provides secure record, commitment, auditing, etc.</p>
    <p>Assumptions:</p>
    <p>Implementation: PeerReview</p>
  </div>
  <div class="page">
    <p>M</p>
    <p>PeerReview from 10,000 feet  All nodes keep a log of</p>
    <p>their inputs &amp; outputs  Including all messages</p>
    <p>Each node has a set of witnesses, who audit its log periodically</p>
    <p>If the witnesses detect misbehavior, they</p>
    <p>generate evidence  make the evidence</p>
    <p>avai-lable to other nodes</p>
    <p>Other nodes check evi-dence, report fault</p>
    <p>A's log</p>
    <p>B's log</p>
    <p>AA</p>
    <p>BB</p>
    <p>M</p>
    <p>CC DD</p>
    <p>EE</p>
    <p>A's witnesses</p>
    <p>M</p>
  </div>
  <div class="page">
    <p>PeerReview detects tampering</p>
    <p>A B</p>
    <p>Message H as</p>
    <p>h ch</p>
    <p>ai n</p>
    <p>Send(X)</p>
    <p>Recv(Y)</p>
    <p>Send(Z)</p>
    <p>Recv(M)</p>
    <p>H0</p>
    <p>H1</p>
    <p>H2</p>
    <p>H3</p>
    <p>H4</p>
    <p>B's log</p>
    <p>ACK</p>
    <p>What if a node modifies its log entries?</p>
    <p>Log entries form a hash chain</p>
    <p>Inspired by secure histories [Maniatis02]</p>
    <p>Signed hash is included with every message  Node commits to its current state  Changes are evident</p>
    <p>Hash(log)</p>
    <p>Hash(log)</p>
  </div>
  <div class="page">
    <p>PeerReview detects inconsistencies</p>
    <p>What if a node  keeps multiple logs?  forks its log?</p>
    <p>Check whether the signed hashes form a single hash chain</p>
    <p>H3 '</p>
    <p>Read X</p>
    <p>H4 '</p>
    <p>Not found</p>
    <p>Read Z</p>
    <p>OK</p>
    <p>Create X</p>
    <p>H0</p>
    <p>H1</p>
    <p>H2</p>
    <p>H3</p>
    <p>H4</p>
    <p>OK</p>
    <p>&quot;View #1&quot;&quot;View #2&quot;</p>
  </div>
  <div class="page">
    <p>Module B</p>
    <p>PeerReview detects faults  How to recognize</p>
    <p>faults in a log?  Assumption:</p>
    <p>Node can be modeled as a deterministic state machine</p>
    <p>To audit a node:  Replay inputs to a</p>
    <p>trusted copy of the state machine</p>
    <p>Check outputs against the log</p>
    <p>Module A</p>
    <p>Module B</p>
    <p>=?</p>
    <p>LogNetwork</p>
    <p>Input</p>
    <p>Output</p>
    <p>S ta</p>
    <p>te m</p>
    <p>a c h in</p>
    <p>e</p>
    <p>if</p>
    <p>Module A</p>
  </div>
  <div class="page">
    <p>PeerReview offers provable guarantees</p>
    <p>PeerReview guarantees that:</p>
    <p>Formal definitions and proof in a TR</p>
    <p>If node commits a fault + has a correct witness,</p>
    <p>then witness obtains  a proof of misbehavior (PoM), or  a challenge that the faulty node cannot answer</p>
    <p>If node is correct  there can never be a PoM, and  it can answer any challenge</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction  What is accountability?  How can we implement it?  How well does it work?</p>
    <p>Is it widely applicable?  How much does it cost?  Does it scale?</p>
  </div>
  <div class="page">
    <p>PeerReview is widely applicable  App #1: NFS server in the Linux kernel</p>
    <p>Many small, latency-sensitive requests  Tampering with files  Lost updates</p>
    <p>App #2: Overlay multicast  Transfers large volume of data</p>
    <p>Freeloading  Tampering with content</p>
    <p>App #3: P2P email  Complex, large, decentralized</p>
    <p>Denial of service  Attacks on DHT routing</p>
    <p>More information in the paper</p>
    <p>Metadata corruption  Incorrect access control</p>
    <p>Censorship</p>
  </div>
  <div class="page">
    <p>How much does PeerReview cost?</p>
    <p>Dominant cost depends on number of witnesses W</p>
    <p>O(W2) component</p>
    <p>Baseline 1 2 3 4 5</p>
    <p>A v g t</p>
    <p>ra ffi</p>
    <p>c (</p>
    <p>K b p s/</p>
    <p>n o d e )</p>
    <p>Number of witnesses</p>
    <p>Baseline traffic</p>
    <p>Signatures and ACKs</p>
    <p>Checking logs</p>
    <p>W dedicated witnesses</p>
  </div>
  <div class="page">
    <p>Mutual auditing</p>
    <p>Small probability of error is inevitable  Example: Replication</p>
    <p>Can use this to optimize PeerReview  Accept that an instance of a fault is found</p>
    <p>only with high probability  Asymptotic complexity: O(N2)  O(log N)</p>
    <p>Small random sample of peers</p>
    <p>chosen as witnesses</p>
    <p>Node</p>
  </div>
  <div class="page">
    <p>PeerReview is scalable</p>
    <p>Assumption: Up to 10% of nodes can be faulty  Probabilistic guarantees enable scalability</p>
    <p>Example: Email system scales to over 10,000 nodes with P=0.999999</p>
    <p>DSL/cable upstream</p>
    <p>Email system w/o accountability</p>
    <p>O((log N)2)</p>
    <p>O(log N)</p>
    <p>Email system + PeerReview (P=0.999999)</p>
    <p>Email system + PeerReview (P=1.0)</p>
    <p>System size (nodes)</p>
    <p>A vg</p>
    <p>t ra</p>
    <p>ff ic</p>
    <p>( K</p>
    <p>b p s /n</p>
    <p>o d e</p>
    <p>)</p>
  </div>
  <div class="page">
    <p>Summary  Accountability is a new approach to handling</p>
    <p>faults in distributed systems  detects faults  identifies the faulty nodes  produces evidence</p>
    <p>Our practical definition of accountability: Whenever a fault is observed by a correct node, the system eventually generates verifiable evidence against a faulty node</p>
    <p>PeerReview: A system that enforces accountability</p>
    <p>Offers provable guarantees and is widely applicable</p>
    <p>Thank you!</p>
  </div>
</Presentation>
