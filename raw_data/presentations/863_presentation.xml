<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Making State Explicit for Impera5ve Big Data Processing</p>
    <p>USENIX Annutal Technical Conference 2014</p>
    <p>Raul Castro Fernandez Imperial College London</p>
    <p>rc3011@doc.ic.ac.uk</p>
    <p>MaGeo Migliavacca University of Kent mm53@kent.ac.uk</p>
    <p>Peter Pietzuch Imperial College London</p>
    <p>prp@doc.ic.ac.uk</p>
    <p>Eva Kalyvianaki City University London</p>
    <p>evangelia.kalyvianaki.1@city.ac.uk</p>
  </div>
  <div class="page">
    <p>Mutable State in a Recommender System</p>
    <p>Matrix userItem = new Matrix(); Matrix coOcc = new Matrix();</p>
    <p>void addRaFng(int user, int item, int raFng) { userItem.setElement(user, item, ra5ng); updateCoOccurrence(coOcc, userItem); }</p>
    <p>Vector getRec(int user) { Vector userRow = userItem.getRow(user); Vector userRec = coOcc.mul5ply(userRow); return userRec; }</p>
    <p>Item-A Item-B</p>
    <p>User-A 4 5</p>
    <p>User-B 0 5</p>
    <p>Item-A Item-B</p>
    <p>Item-A 1 1</p>
    <p>Item-B 1 2</p>
    <p>User-Item matrix (UI)</p>
    <p>Co-Occurrence matrix (CO)</p>
    <p>Update with new ra5ngs</p>
    <p>Mul5ply for recommenda5on</p>
    <p>User-B 1 2 x</p>
  </div>
  <div class="page">
    <p>Challenges When Execu5ng with Big Data</p>
    <p>Big Data Problem: Matrices</p>
    <p>become large</p>
    <p>&gt; Mutable state leads to concise algorithms but complicates parallelism and fault tolerance</p>
    <p>Matrix userItem = new Matrix(); Matrix coOcc = new Matrix();</p>
    <p>&gt; Cannot lose state aNer failure</p>
    <p>&gt; Need to manage state to support data-parallelism</p>
  </div>
  <div class="page">
    <p>Using Current Distributed Dataflow Frameworks</p>
    <p>Input data</p>
    <p>Output data</p>
    <p>&gt; No mutable state simplifies fault tolerance</p>
    <p>&gt; MapReduce: Map and Reduce tasks &gt; Storm: No support for state &gt; Spark: Immutable RDDs</p>
  </div>
  <div class="page">
    <p>Our Goal: Run Java programs with mutable state but with</p>
    <p>performance and fault tolerance of distributed dataflow systems</p>
    <p>&gt; Programming distributed dataflow graphs requires learning new programming models</p>
    <p>Impera5ve Big Data Processing</p>
  </div>
  <div class="page">
    <p>&gt; @AnnotaFons help with translaFon from Java to SDGs &gt; Mutable distributed state in dataflow graphs</p>
    <p>Stateful Dataflow Graphs: From Impera5ve Programs to Distributed Dataflows</p>
    <p>Program.java</p>
    <p>SDGs: Stateful Dataflow Graphs</p>
    <p>&gt; Checkpoint-based fault tolerance recovers mutable state aNer failure</p>
  </div>
  <div class="page">
    <p>SDG: Stateful Dataflow Graphs  Handling distributed state in SDGs  Transla5ng Java programs to SDGs  Checkpoint-based fault tolerance for SDGs  Experimental evalua5on</p>
    <p>Outline</p>
    <p>Program.java</p>
  </div>
  <div class="page">
    <p>SDG: Data, State and Computa5on</p>
    <p>&gt; SDGs separate data and state to allow data and pipeline parallelism</p>
    <p>Task Elements (TEs) process data</p>
    <p>State Elements (SEs) represent state</p>
    <p>Dataflows represent</p>
    <p>data</p>
    <p>&gt; Task Elements have local access to State Elements</p>
  </div>
  <div class="page">
    <p>State Elements support two abstrac5ons for distributed mutable state  ParFFoned SEs: task elements always access</p>
    <p>state by key  ParFal SEs: task elements can access</p>
    <p>complete state</p>
    <p>Distributed Mutable State</p>
  </div>
  <div class="page">
    <p>Distributed Mutable State: Par55oned SEs</p>
    <p>Dataflow routed according to hash func5on</p>
    <p>Item-A Item-B</p>
    <p>User-A 4 5</p>
    <p>User-B 0 5 Access by key</p>
    <p>State par55oned according to parFFoning key</p>
    <p>&gt; ParFFoned SEs split into disjoint par55ons</p>
    <p>User-Item matrix (UI)</p>
    <p>hash(msg.id)</p>
    <p>Key space: [0-N] [0-k]</p>
    <p>[(k+1)-N]</p>
  </div>
  <div class="page">
    <p>Distributed Mutable State: Par5al SEs</p>
    <p>Local access: Data sent to one</p>
    <p>Global access: Data sent to all</p>
    <p>&gt; ParFal SE gives nodes local state instances</p>
    <p>&gt; ParFal SE access by Tes can be local or global</p>
  </div>
  <div class="page">
    <p>Merging Distributed Mutable State</p>
    <p>Mul5ple par5al values</p>
    <p>Collect par5al values</p>
    <p>Merge logic</p>
    <p>&gt; Requires applica5on-specific merge logic</p>
    <p>&gt; Reading all par5al SE instances results in set of parFal values</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>&gt; @AnnotaFons</p>
    <p>SDG: Stateful Dataflow Graphs  Handling distributed state in SDGs  TranslaFng Java programs to SDGs  Checkpoint-based fault tolerance for SDGs  Experimental evalua5on</p>
    <p>Program.java</p>
  </div>
  <div class="page">
    <p>From Impera5ve Code to Execu5on</p>
    <p>SEEP</p>
    <p>Annotated program</p>
    <p>&gt; SEEP: data-parallel processing pla`orm</p>
    <p>Transla5on occurs in two stages:  Sta)c code analysis: From Java to SDG  Bytecode rewri)ng: From SDG to SEEP [SIGMOD13]</p>
    <p>Program.java</p>
  </div>
  <div class="page">
    <p>Program.java</p>
    <p>Extract TEs, SEs and accesses</p>
    <p>Live variable analysis</p>
    <p>TE and SE access code assembly</p>
    <p>SEEP runnable</p>
    <p>SOOT Framework</p>
    <p>Javassist</p>
    <p>&gt; Extract state and state access paaerns through sta5c code analysis</p>
    <p>&gt; Genera5on of runnable code using TE and SE connec5ons</p>
    <p>Transla5on Process</p>
    <p>Annotated Program.java</p>
  </div>
  <div class="page">
    <p>@ParFFoned Matrix userItem = new SeepMatrix(); Matrix coOcc = new Matrix(); void addRa5ng(int user, int item, int ra5ng) { userItem.setElement(user, item, ra5ng); updateCoOccurrence(coOcc, userItem); } Vector getRec(int user) { Vector userRow = userItem.getRow(user); Vector userRec = coOcc.mul5ply(userRow); return userRec; }</p>
    <p>Par55oned State Annota5on</p>
    <p>&gt; @ParFFon field annotaFon indicates par))oned state</p>
    <p>hash(msg.id)</p>
  </div>
  <div class="page">
    <p>@Par55oned Matrix userItem = new SeepMatrix(); @ParFal Matrix coOcc = new SeepMatrix(); void addRa5ng(int user, int item, int ra5ng) { userItem.setElement(user, item, ra5ng); updateCoOccurrence(@Global coOcc, userItem); }</p>
    <p>Par5al State and Global Annota5ons</p>
    <p>&gt; @Global annotates variable to indicate access to all par5al instances</p>
    <p>&gt; @ParFal field annotaFon indicates par)al state</p>
  </div>
  <div class="page">
    <p>@Par55oned Matrix userItem = new SeepMatrix(); @ParFal Matrix coOcc = new SeepMatrix(); Vector getRec(int user) { Vector userRow = userItem.getRow(user); @ParFal Vector puRec = @Global coOcc.mul5ply(userRow); Vector userRec = merge(puRec); return userRec; } Vector merge(@CollecFon Vector[] v){ /**/ }</p>
    <p>Par5al and Collec5on Annota5ons</p>
    <p>&gt; @CollecFon annota5on indicates merge logic</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>&gt; Failures</p>
    <p>SDG: Stateful Dataflow Graphs  Handling distributed state in SDGs  Transla5ng Java programs to SDGs  Checkpoint-Based fault tolerance for SDGs  Experimental evalua5on</p>
    <p>Program.java</p>
  </div>
  <div class="page">
    <p>Challenges of Making SDGs Fault Tolerant</p>
    <p>RAM RAM</p>
    <p>Physical deployment of SDG</p>
    <p>Backups large and cannot be stored in memory</p>
    <p>Large writes to disk through network have high cost</p>
    <p>State Backup</p>
    <p>&gt; Node failures may lead to state loss</p>
    <p>CheckpoinFng State  No updates allowed while state</p>
    <p>is being checkpointed  Checkpoin5ng state should not</p>
    <p>impact data processing path</p>
    <p>&gt; Task elements access local in-memory state</p>
    <p>Physical nodes</p>
  </div>
  <div class="page">
    <p>Checkpoint Mechanism for Fault Tolerance</p>
    <p>Asynchronous, lock-free checkpoinFng</p>
    <p>Dirty state</p>
  </div>
  <div class="page">
    <p>Distributed M to N Checkpoint Backup</p>
    <p>M to N distributed backup and parallel recovery</p>
  </div>
  <div class="page">
    <p>How does mutable state impact performance? How efficient are translated SDGs? What is the throughput/latency trade-off?</p>
    <p>Experimental set-up:  Amazon EC2 (c1 and m1 xlarge instances)  Private cluster (4-core 3.4 GHz Intel Xeon servers with 8 GB RAM )  Sun Java 7, Ubuntu 12.04, Linux kernel 3.10</p>
    <p>Evalua5on of SDG Performance</p>
  </div>
  <div class="page">
    <p>T hr</p>
    <p>ou gh</p>
    <p>pu t(</p>
    <p>re qu</p>
    <p>es ts</p>
    <p>/s )</p>
    <p>La te</p>
    <p>nc y</p>
    <p>(m s)</p>
    <p>Workload (state read/write ratio)</p>
    <p>Throughput Latency</p>
    <p>Combines batch and online processing to serve fresh results over large mutable state</p>
    <p>Processing with Large Mutable State</p>
    <p>&gt; addRa5ng and getRec func5ons from recommender algorithm, while changing read/write ra5o</p>
  </div>
  <div class="page">
    <p>T h</p>
    <p>ro u</p>
    <p>g h</p>
    <p>p u</p>
    <p>t (G</p>
    <p>B /s</p>
    <p>)</p>
    <p>Number of nodes</p>
    <p>SDG Spark</p>
    <p>Translated SDG achieves performance similar to non-mutable dataflow</p>
    <p>&gt; Batch-oriented, itera5ve logis5c regression</p>
    <p>Efficiency of Translated SDG</p>
  </div>
  <div class="page">
    <p>SDGs achieve high throughput while mainFng low latency</p>
    <p>Latency/Throughput Tradeoff</p>
    <p>&gt; Streaming word count query, repor5ng counts over windows</p>
    <p>u g h p u t (1</p>
    <p>e q u e s ts</p>
    <p>/s )</p>
    <p>Window size (ms)</p>
    <p>SDG Naiad-LowLatency</p>
    <p>u g h p u t (1</p>
    <p>e q u e s ts</p>
    <p>/s )</p>
    <p>Window size (ms)</p>
    <p>Naiad-HighThroughput SDG</p>
    <p>Streaming Spark 0</p>
    <p>ro u</p>
    <p>g h</p>
    <p>p u</p>
    <p>t (1</p>
    <p>e q</p>
    <p>u e</p>
    <p>s ts</p>
    <p>/s )</p>
    <p>Window size (ms)</p>
    <p>Naiad-HighThroughput SDG</p>
    <p>Streaming Spark Naiad-LowLatency</p>
  </div>
  <div class="page">
    <p>Running Java programs with the performance of current distributed dataflow frameworks</p>
    <p>SDG: Stateful Dataflow Graphs  Abstrac5ons for distributed mutable state  AnnotaFons to disambiguate types of distributed state and state access</p>
    <p>Checkpoint-based fault tolerance mechanism</p>
    <p>Summary</p>
    <p>Thank you! Any QuesFons?</p>
    <p>Raul Castro Fernandez rc3011@doc.ic.ac.uk</p>
    <p>h:ps://github.com/lsds/Seep/</p>
  </div>
</Presentation>
