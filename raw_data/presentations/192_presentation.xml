<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>A Physical Resource Management Approach toA Physical Resource Management Approach to Minimizing FPGA Partial Reconfiguration Minimizing FPGA Partial Reconfiguration</p>
    <p>Overhead Overhead</p>
    <p>Heng Tan and Ronald F. DeMaraHeng Tan and Ronald F. DeMara University of Central FloridaUniversity of Central Florida</p>
    <p>Heng Tan and Ronald F. DeMaraHeng Tan and Ronald F. DeMara University of Central FloridaUniversity of Central Florida</p>
  </div>
  <div class="page">
    <p>Agenda</p>
    <p>Introduction</p>
    <p>Previous work on reducing Partial Reconfiguration overhead</p>
    <p>Develop a multi-step physical area management strategy</p>
    <p>Experimental case studies:  4 simple circuits: serial, parallel, block multiplier</p>
    <p>resource,high fanout carry chain LUT multiplier  2 large circuits: SECDED, MD5 step function (new)</p>
    <p>Conclusion and future work</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>For partial reconfiguration operations, especially those running on a SOC configuration,</p>
    <p>storage space and</p>
    <p>reconfiguration speed</p>
    <p>are crucial.</p>
    <p>Find way to optimize them . . .</p>
  </div>
  <div class="page">
    <p>Previous Work</p>
    <p>Architecture-level [Ganesan2000]  Pipelining  overlap execution of one temporal partition with reconfiguration</p>
    <p>of another  Logical level [Raghuraman2005]</p>
    <p>Minimization of frames  relating the number of frames that need to be downloaded into</p>
    <p>FPGAs to the number of minterms of a specially constructed logic function</p>
    <p>Hardware level [Compton2002][Hauck1999]  Requires dedicated HW component  Compression or defragmentation performed externally at runtime</p>
    <p>Physical-level resource management?  Not specifically addressed for partial reconfiguration modules in</p>
    <p>literature  But can be done  and  also cascaded with above techniques</p>
    <p>for multiplicative benefit</p>
  </div>
  <div class="page">
    <p>Module Based Flow</p>
    <p>Ext er nal Dat a</p>
    <p>I nt er modul e Si gnal s</p>
    <p>PR Modul e</p>
    <p>Fi xed Modul e</p>
    <p>Fi xed Modul e</p>
    <p>B u s</p>
    <p>M a c r o</p>
    <p>B u s</p>
    <p>M a c r o</p>
    <p>PR Modul e</p>
    <p>Including Fixed modules and PR modules</p>
    <p>Using Bus Macro</p>
    <p>Suitable for potential full automation</p>
    <p>Primary PR technique to study</p>
    <p>Basic concept and capability for PR proposed by Xilinx</p>
  </div>
  <div class="page">
    <p>Column-Level Configuration Format</p>
    <p>For Virtex II/Pro series</p>
    <p>Including IOB, IOI, CLB, GCLK, BlockRAM, and BlockRAM Interconnect</p>
    <p>Labeling with 32-bit addresses composed of a Block Address (BA), a Major Address (MJA), a Minor Address (MNA), and a byte number</p>
    <p>Only contents of CLB column are studied in this research</p>
    <p>BA</p>
    <p>MJ A</p>
    <p>. . .</p>
    <p>M + 2</p>
    <p>M + 3</p>
    <p>M + 4</p>
    <p>. . .</p>
    <p>N</p>
    <p>. . .</p>
    <p>N</p>
    <p>G C L K</p>
    <p>I O B</p>
    <p>I O I</p>
    <p>C L B</p>
    <p>. . .</p>
    <p>C L B</p>
    <p>I O I</p>
    <p>I O B</p>
    <p>B R A M</p>
    <p>B R A M. . .</p>
    <p>B M I N T . . .</p>
    <p>B M I N T</p>
    <p>M = Total Number of CLB Column N = Total Number of Block RAM Column</p>
  </div>
  <div class="page">
    <p>Bitstream Compression</p>
    <p>CLB columns program the configurable logic blocks, routing, and most interconnect resources.</p>
    <p>Each CLB column contains 2 columns of slices.</p>
    <p>22 frames are utilized within the bitstream for each column of slices, describing the logic and routing information respectively.</p>
    <p>Each frame occupies 424 bytes.</p>
    <p>In bitstream of PR modules, a compression technique is already used by Xilinx to represent the unused CLB frame.</p>
    <p>For unused CLB frames, only 10 bytes are used instead of 424 to describe empty contents.</p>
  </div>
  <div class="page">
    <p>Optimization Strategy</p>
    <p>Primary goal: minimize the number of columns of slices utilized, including routing resources</p>
    <p>Secondary goal: do not incur increase in propagation delay after area optimization</p>
    <p>Physical area management procedure:</p>
  </div>
  <div class="page">
    <p>Case Study</p>
    <p>The hardware platform is Xilinx Virtex II Pro VP7 device.</p>
    <p>Module-based partial reconfiguration flow is adopted to generate the partial reconfiguration bitstream.</p>
    <p>The Xilinx ISE 6.3 is used to support the module based flow.</p>
    <p>The area constraints are entered directly into User Constrain File (.ucf) before map and routing.</p>
    <p>Four representative small cases and two larger size cases studies are tested for the strategy.</p>
    <p>Similar or identical external pin arrangement.</p>
    <p>Hypothesis: larger circuits can achieve more savings</p>
  </div>
  <div class="page">
    <p>Simple 4-LUT elements</p>
    <p>Parallel logic path with direct input from external signals</p>
    <p>LUTs feed outputs straight though to flip flops</p>
    <p>Best strategy is by locating them in a single column close to the external pins</p>
  </div>
  <div class="page">
    <p>Shifter Optimization (serial)</p>
    <p>All logic elements are cascaded in contiguous string of CLBs</p>
    <p>Attributes of this serial circuit functionality will have best arrangement from input to output in single column serially</p>
  </div>
  <div class="page">
    <p>Block Multiplier Optimization</p>
    <p>Block multiplier resource involved</p>
    <p>Requires balancing the routing between two paths.</p>
    <p>One path is between the block multiplier and the LUTs. The other path is from the LUTs to the external pins.</p>
    <p>Decreased savings compared to use of LUTonly circuits</p>
  </div>
  <div class="page">
    <p>LUT Multiplier Optimization</p>
    <p>High fan-out occurs because of the carry chains</p>
    <p>Single column style is not optimal</p>
    <p>Arrange related LUTs around each other using adjacent columns</p>
  </div>
  <div class="page">
    <p>Larger Case Studies</p>
    <p>SECDED as full PR module and MD5 step functions were developed as PR module vs. SHA family</p>
    <p>During the optimization process, not every slice has been specifically placed because of the large number of resources involved</p>
    <p>Only the slices on the critical path are constrained.  These are comparatively larger modules, increased</p>
    <p>bitstream savings of 33% and 30% are achieved</p>
  </div>
  <div class="page">
    <p>Benchmark Results</p>
    <p>Module Name</p>
    <p># of LUT.</p>
    <p># of FF # of block</p>
    <p>Multiplier</p>
    <p># of Slices</p>
    <p>Original File Size (bytes)</p>
    <p>Original Max. Delay (ns)</p>
    <p>Optimized File Size (bytes)</p>
    <p>Optimize d Max. Delay (ns)</p>
    <p>Area Saving</p>
    <p>Shifter 1 24 0 13 87K 1.377 63K 1.367 28%</p>
    <p>Block Multiplier</p>
    <p>LUT Multiplier</p>
    <p>SECDED 93 41 0 74 89K 1.355 60K 1.355 33%</p>
    <p>MD5 292 128 0 168 120K 1.380 84K 1.322 30%</p>
  </div>
  <div class="page">
    <p>Area Optimization Results</p>
    <p>A physical resource area management strategy is proposed to minimize the reconfiguration overhead.</p>
    <p>Experiments show that up to one-third of size reduction can be achieved for partial reconfiguration modules.</p>
    <p>The maximum propagation delay has also been decreased slightly in most cases (not increased).</p>
    <p>On the other hand, the larger the module is, the more complicated and time consuming the process becomes.</p>
    <p>Providing autonomous area optimization capabilities is future work for integrating into our Multi-Layer Runtime Reconfiguration Architecture FGPA framework</p>
  </div>
  <div class="page">
    <p>Multi-Layer Runtime Reconfiguration Arch. (MRRA)</p>
    <p>Resource name</p>
    <p>Number of Available</p>
    <p>Number of Used</p>
    <p>Utilization</p>
    <p>IOBs 396 85 21%</p>
    <p>Slices 4928 1805 36%</p>
    <p>BRAM 24 44 54%</p>
    <p>TBUFs 2464 352 14%</p>
    <p>PPC405 1 1 100%</p>
    <p>BUFGMUXs 4 1 25%</p>
    <p>. . .</p>
    <p>PLB</p>
    <p>PowerPC</p>
    <p>O P</p>
    <p>B</p>
    <p>Reconfigurable Module</p>
    <p>Reconfigurable Module</p>
    <p>PCI</p>
    <p>FPGA</p>
    <p>Host PC</p>
    <p>PLB/OPB Bridge</p>
    <p>Block RAM</p>
    <p>UART</p>
    <p>SRAM Controller</p>
    <p>ICAP Controller</p>
    <p>External SRAM</p>
    <p>JTAG</p>
    <p>ICAP</p>
    <p>SelectMAP</p>
    <p>On Chip Data Flow</p>
    <p>Reconfiguration Data Flow</p>
    <p>External Data Flow</p>
    <p>JTAG / SelectMAP / ICAP Reconfiguration Interfaces</p>
  </div>
  <div class="page">
    <p>Current Work: Direct Bitstream Management</p>
    <p>Change one-bit full adder to a one-bit full subtracter Both have three one-bit inputs and two one-bit outputs.  Both used 2 LUTs with identical logic interconnections between LUTs and I/O signals. Only difference between them is actually only one truth table stored inside one LUT, changing from 0xE8 to 0x8E</p>
    <p>X Y Cin Cout S</p>
    <p>X Y Bin Bout D</p>
    <p>E8</p>
    <p>X</p>
    <p>Y S</p>
    <p>Cout</p>
    <p>Cin</p>
    <p>X Y</p>
    <p>Cin / BinCout / Bout</p>
    <p>S / D</p>
    <p>Adder / Subtracter</p>
    <p>X</p>
    <p>Y D</p>
    <p>Bout</p>
    <p>Bin Logic</p>
    <p>Switch</p>
    <p>(a) 1 Bit Full Adder (b) 1 Bit Full Subtracter</p>
    <p>Combined MD5 / SHA-1 Step Function  Area Utilization</p>
    <p>Original Algorithm Module Based Frame Based</p>
    <p>SHA-1 192(slices) 65(slices) 32(slices) MD5 881(slices) 168(slices) 32(slices) Combined 1068(slices) 324(slices) 32(slices)</p>
  </div>
</Presentation>
