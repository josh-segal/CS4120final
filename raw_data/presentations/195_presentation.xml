<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Making the Pyramid Technique Robust to Query Types and Workloads</p>
    <p>Rui Zhang, Beng Chin Ooi, Kian-Lee Tan</p>
    <p>Department of Computer Science</p>
    <p>National University of Singapore</p>
    <p>Singapore</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Backgrounds</p>
    <p>Existing work and limitations  Our proposal: The P+-tree  Experimental results</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Problem &amp; Motivation</p>
    <p>Problem:</p>
    <p>Indexing multidimensional point data</p>
    <p>Applications:</p>
    <p>Low dimension: GIS, CAD, Medical image (X-rays, MRI brain scans)</p>
    <p>High dimension: Image database, Video database, data warehouse</p>
  </div>
  <div class="page">
    <p>Typical Query Types</p>
    <p>Point Query</p>
    <p>Window Query</p>
    <p>[q0min; q0max]; [q1min; q1max] [qd-1min; qd-1max]</p>
    <p>Range Query</p>
    <p>X(x1 , x2 ,  xd-1), r</p>
    <p>K-Nearest Neighbor Query (kNN query)</p>
    <p>X(x1 , x2 ,  xd-1), k</p>
  </div>
  <div class="page">
    <p>Existing work: Four Strategies</p>
    <p>Data partitioning: R-tree family</p>
    <p>Space partitioning: k-d-tree family</p>
    <p>Dimensionality Reduction: mapping</p>
    <p>Data Compression: VA-file, IQ-tree</p>
  </div>
  <div class="page">
    <p>Existing work: Comparison</p>
    <p>Low-dimensional space  The R-tree family structures</p>
    <p>For high-dimensional space  Window query: the Pyramid tech. , the</p>
    <p>iMinMax</p>
    <p>kNN query: the IQ-tree, the iDistance</p>
  </div>
  <div class="page">
    <p>Existing work: Limitations</p>
    <p>Limited to query types  The Pyramid tech. , the iMinMax: window</p>
    <p>query</p>
    <p>The iDistance, the IQ-tree: kNN query</p>
    <p>Limited to certain workloads  The Pyramid tech. : hyper-cube shaped window</p>
    <p>query, located around center of the data space</p>
  </div>
  <div class="page">
    <p>Our proposal: the P+-tree</p>
    <p>Based on the Pyramid tech.</p>
    <p>Support both window and kNN queries</p>
    <p>Robust under different workloads</p>
  </div>
  <div class="page">
    <p>Review of the Pyramid Tech.</p>
    <p>i: pyramid number hv: height , in the ith (if i&lt;d) or (i-d)th (if i&gt;=d) dimension</p>
    <p>pvv=i+hv</p>
  </div>
  <div class="page">
    <p>Sensitivity to location of query window / data distribution</p>
  </div>
  <div class="page">
    <p>Sensitivity to shape of query</p>
  </div>
  <div class="page">
    <p>The P+-tree</p>
    <p>Divide data space to subspaces  Based on clustering  Divide in the dimension where two clusters differ</p>
    <p>greatest</p>
    <p>Transform the points in each subspace  Transform a subspace to unit hyper-cube, [si min, si max]d</p>
    <p>-&gt;[0, 1]d, so that the pyramid tech can be applied  Move the cluster center to center of the transformed</p>
    <p>space (0.5, 0.5,  0.5), the case when the pyramid tech is efficient</p>
  </div>
  <div class="page">
    <p>Space division and data transformation</p>
  </div>
  <div class="page">
    <p>Transformation function  A set of d functions, t0 t1  td-1  Requirements:</p>
    <p>ti is a bijection from [si min , si max] to [0,1]  ti is monotonous  ti ( ci ) = 0.5</p>
    <p>In equations:  ti (si min ) = 0  ti (si max ) = 1  ti ( ci ) = 0.5</p>
  </div>
  <div class="page">
    <p>Transformation function</p>
    <p>ti(x)=(ai x  bi)^ei i=0, 1,  d-1</p>
    <p>For subspace [s0 min , s0 max], [s0 min , s0 max],  [sd-1 min , sd-1 max]</p>
    <p>ai=1/(si min - si max)</p>
    <p>bi= si min /(si min - si max)</p>
    <p>ei=-1/log2(ai ci - bi)</p>
  </div>
  <div class="page">
    <p>The space-tree</p>
    <p>SNo, ai, bi, ei are stored in leaf nodes</p>
  </div>
  <div class="page">
    <p>Space division algorithm</p>
    <p>Clustering data</p>
    <p>Divide space to two subspaces in the dimension where the two cluster centers differ greatest (Recursively)</p>
    <p>Build the space-tree</p>
  </div>
  <div class="page">
    <p>Build the P+-tree</p>
    <p>The P+-tree is in effect a B+-tree that store the data points in the leaf nodes with the P+-value as keys</p>
    <p>P+-value: SNo  2d + pv(v)</p>
    <p>For a newly inserted point v, traverse the spacetree to determine the subspace it belongs to.</p>
    <p>Transform the point v to v, calculate P+-value</p>
    <p>Insert the point v, with its P+-value as key</p>
  </div>
  <div class="page">
    <p>Window search algorithm</p>
    <p>Traverse the space-tree to see which subspaces are intersected by the query</p>
    <p>For each intersected subspace, transform the query according to the transformation function for the subspace</p>
    <p>Search the subspace according to the transformed query</p>
  </div>
  <div class="page">
    <p>KNN search algorithm</p>
    <p>Start from a small window query</p>
    <p>Gradually increase the side length of the query window until kNN are found</p>
  </div>
  <div class="page">
    <p>Experiments: Window Queries</p>
  </div>
  <div class="page">
    <p>Experiments: Partial Window Queries</p>
  </div>
  <div class="page">
    <p>Experiments: kNN Queries</p>
  </div>
</Presentation>
