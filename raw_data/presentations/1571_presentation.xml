<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Enlightening the I/O Path: A Holistic Approach for Application Performance</p>
    <p>Sangwook Kim13, Hwanju Kim2, Joonwon Lee3, and Jinkyu Jeong3</p>
    <p>Apposha1</p>
    <p>Dell EMC2</p>
    <p>Sungkyunkwan University3</p>
  </div>
  <div class="page">
    <p>Data-Intensive Applications</p>
    <p>Relational</p>
    <p>Key-value</p>
    <p>SearchColumn</p>
    <p>Document</p>
  </div>
  <div class="page">
    <p>Data-Intensive Applications</p>
    <p>Common structure</p>
    <p>Storage Device</p>
    <p>Operating System</p>
    <p>T1</p>
    <p>Client</p>
    <p>T2</p>
    <p>I/O</p>
    <p>T3 T4</p>
    <p>Request Response</p>
    <p>I/O I/O I/O</p>
    <p>Application</p>
    <p>Application</p>
    <p>performance</p>
    <p>* Example: MongoDB</p>
    <p>- Client (foreground)</p>
    <p>- Checkpointer</p>
    <p>- Log writer</p>
    <p>- Eviction worker</p>
    <p>-</p>
  </div>
  <div class="page">
    <p>Data-Intensive Applications</p>
    <p>Common structure</p>
    <p>Storage Device</p>
    <p>Operating System</p>
    <p>T1</p>
    <p>Client</p>
    <p>T2</p>
    <p>I/O</p>
    <p>T3 T4</p>
    <p>Request Response</p>
    <p>I/O I/O I/O</p>
    <p>Application</p>
    <p>Application</p>
    <p>performance</p>
    <p>* Example: MongoDB</p>
    <p>- Server (client)</p>
    <p>- Checkpointer</p>
    <p>- Log writer</p>
    <p>- Evict worker</p>
    <p>-</p>
    <p>Background tasks are problematic</p>
    <p>for application performance</p>
  </div>
  <div class="page">
    <p>Application Impact</p>
    <p>Illustrative experiment</p>
    <p>YCSB update-heavy workload against MongoDB</p>
  </div>
  <div class="page">
    <p>Application Impact</p>
    <p>Illustrative experiment</p>
    <p>YCSB update-heavy workload against MongoDB</p>
    <p>O p e ra</p>
    <p>ti o n t h ro</p>
    <p>u g h p u t</p>
    <p>(o p s/</p>
    <p>se c )</p>
    <p>Elapsed time (sec)</p>
    <p>CFQ</p>
    <p>Regular checkpoint task</p>
  </div>
  <div class="page">
    <p>O p e ra</p>
    <p>ti o n t h ro</p>
    <p>u g h p u t</p>
    <p>(o p s/</p>
    <p>se c )</p>
    <p>Elapsed time (sec)</p>
    <p>CFQ CFQ-IDLE</p>
    <p>Application Impact</p>
    <p>Illustrative experiment</p>
    <p>YCSB update-heavy workload against MongoDB</p>
    <p>I/O priority does not help</p>
  </div>
  <div class="page">
    <p>O p e ra</p>
    <p>ti o n t h ro</p>
    <p>u g h p u t</p>
    <p>(o p s/</p>
    <p>se c )</p>
    <p>Elapsed time (sec)</p>
    <p>CFQ CFQ-IDLE SPLIT-A SPLIT-D QASIO</p>
    <p>Application Impact</p>
    <p>Illustrative experiment</p>
    <p>YCSB update-heavy workload against MongoDB</p>
    <p>State-of-the-art schedulers do not help much</p>
  </div>
  <div class="page">
    <p>Whats the Problem?</p>
    <p>Independent policies in multiple layers</p>
    <p>Each layer processes I/Os w/ limited information</p>
    <p>I/O priority inversion</p>
    <p>Background I/Os can arbitrarily delay foreground tasks</p>
  </div>
  <div class="page">
    <p>Whats the Problem?</p>
    <p>Independent policies in multiple layers</p>
    <p>Each layer processes I/Os w/ limited information</p>
    <p>I/O priority inversion</p>
    <p>Background I/Os can arbitrarily delay foreground tasks</p>
  </div>
  <div class="page">
    <p>Multiple Independent Layers</p>
    <p>Independent I/O processing</p>
    <p>Storage Device</p>
    <p>Caching Layer</p>
    <p>Application</p>
    <p>File System Layer</p>
    <p>Block LayerA b</p>
    <p>s tr</p>
    <p>a c ti o</p>
    <p>n</p>
  </div>
  <div class="page">
    <p>Multiple Independent Layers</p>
    <p>Storage Device</p>
    <p>Caching Layer</p>
    <p>Application</p>
    <p>File System Layer</p>
    <p>Block Layer</p>
    <p>Buffer Cache</p>
    <p>read() write() admission</p>
    <p>control</p>
    <p>A b</p>
    <p>s tr</p>
    <p>a c ti o</p>
    <p>n</p>
    <p>Independent I/O processing</p>
  </div>
  <div class="page">
    <p>Multiple Independent Layers</p>
    <p>Independent I/O processing</p>
    <p>Storage Device</p>
    <p>Caching Layer</p>
    <p>Application</p>
    <p>File System Layer</p>
    <p>Block Layer</p>
    <p>Buffer Cache</p>
    <p>read() write()</p>
    <p>Block-level Q</p>
    <p>admission control</p>
    <p>A b</p>
    <p>s tr</p>
    <p>a c ti o</p>
    <p>n</p>
  </div>
  <div class="page">
    <p>Multiple Independent Layers</p>
    <p>Independent I/O processing</p>
    <p>Storage Device</p>
    <p>Caching Layer</p>
    <p>Application</p>
    <p>File System Layer</p>
    <p>Block LayerA b</p>
    <p>s tr</p>
    <p>a c ti o</p>
    <p>n</p>
    <p>Buffer Cache</p>
    <p>read() write()</p>
    <p>reorder</p>
    <p>FG FG BGBG</p>
  </div>
  <div class="page">
    <p>Multiple Independent Layers</p>
    <p>Independent I/O processing</p>
    <p>Storage Device</p>
    <p>Caching Layer</p>
    <p>Application</p>
    <p>File System Layer</p>
    <p>Block LayerA b</p>
    <p>s tr</p>
    <p>a c ti o</p>
    <p>n</p>
    <p>Buffer Cache</p>
    <p>read() write()</p>
    <p>FG FGBG</p>
    <p>Device-internal Q</p>
    <p>admission control</p>
  </div>
  <div class="page">
    <p>Multiple Independent Layers</p>
    <p>Independent I/O processing</p>
    <p>Storage Device</p>
    <p>Caching Layer</p>
    <p>Application</p>
    <p>File System Layer</p>
    <p>Block LayerA b</p>
    <p>s tr</p>
    <p>a c ti o</p>
    <p>n</p>
    <p>Buffer Cache</p>
    <p>read() write()</p>
    <p>FG FGBG</p>
    <p>BG FG BGBG</p>
    <p>reorder</p>
  </div>
  <div class="page">
    <p>Whats the Problem?</p>
    <p>Independent policies in multiple layers</p>
    <p>Each layer processes I/Os w/ limited information</p>
    <p>I/O priority inversion</p>
    <p>Background I/Os can arbitrarily delay foreground tasks</p>
  </div>
  <div class="page">
    <p>I/O Priority Inversion</p>
    <p>Task dependency</p>
    <p>Storage Device</p>
    <p>Caching Layer</p>
    <p>Application</p>
    <p>File System Layer</p>
    <p>Block Layer</p>
    <p>Locks</p>
    <p>Condition variables</p>
  </div>
  <div class="page">
    <p>I/O Priority Inversion</p>
    <p>Task dependency</p>
    <p>Storage Device</p>
    <p>Caching Layer</p>
    <p>Application</p>
    <p>File System Layer</p>
    <p>Block Layer</p>
    <p>Condition variables</p>
    <p>I/OFG lock</p>
    <p>BG wait</p>
  </div>
  <div class="page">
    <p>I/O Priority Inversion</p>
    <p>Task dependency</p>
    <p>Storage Device</p>
    <p>Caching Layer</p>
    <p>Application</p>
    <p>File System Layer</p>
    <p>Block Layer</p>
    <p>I/OFG lock</p>
    <p>BG wait</p>
    <p>FG wait</p>
    <p>wait</p>
    <p>BGvar wake</p>
  </div>
  <div class="page">
    <p>I/O Priority Inversion</p>
    <p>Task dependency</p>
    <p>Storage Device</p>
    <p>Caching Layer</p>
    <p>Application</p>
    <p>File System Layer</p>
    <p>Block Layer</p>
    <p>I/O</p>
    <p>FG wait</p>
    <p>wait</p>
    <p>BG user var</p>
    <p>wake</p>
    <p>FG wait</p>
  </div>
  <div class="page">
    <p>I/O Priority Inversion</p>
    <p>I/O dependency</p>
    <p>Storage Device</p>
    <p>Caching Layer</p>
    <p>Application</p>
    <p>File System Layer</p>
    <p>Block Layer</p>
    <p>Outstanding I/Os</p>
  </div>
  <div class="page">
    <p>I/O Priority Inversion</p>
    <p>I/O dependency</p>
    <p>Storage Device</p>
    <p>Caching Layer</p>
    <p>Application</p>
    <p>File System Layer</p>
    <p>Block Layer</p>
    <p>I/OFG wait</p>
    <p>For ensuring consistency and/or durability</p>
  </div>
  <div class="page">
    <p>O p e ra</p>
    <p>ti o n t h ro</p>
    <p>u g h p u t</p>
    <p>(o p s/</p>
    <p>se c )</p>
    <p>Elapsed time (sec)</p>
    <p>CFQ CFQ-IDLE SPLIT-A SPLIT-D QASIO RCP</p>
    <p>Request-centric I/O prioritization (RCP)</p>
    <p>Critical I/O: I/O in the critical path of request handling</p>
    <p>Policy: holistically prioritizes critical I/Os along the I/O path</p>
    <p>Our Approach</p>
  </div>
  <div class="page">
    <p>Challenges</p>
    <p>How to accurately identify I/O criticality</p>
    <p>How to effectively enforce I/O criticality</p>
  </div>
  <div class="page">
    <p>Critical I/O Detection</p>
    <p>Enlightenment API</p>
    <p>Interface for tagging foreground tasks</p>
    <p>I/O priority inheritance</p>
    <p>Handling task dependency</p>
    <p>Handling I/O dependency</p>
  </div>
  <div class="page">
    <p>I/O Priority Inheritance</p>
    <p>Handling task dependency</p>
    <p>Locks</p>
    <p>Condition variables</p>
    <p>FG lock</p>
    <p>BG I/OFG</p>
    <p>inherit</p>
    <p>BG</p>
    <p>submit</p>
    <p>complete</p>
    <p>FG BG</p>
    <p>unlock</p>
    <p>FG wait</p>
    <p>BG</p>
    <p>register</p>
    <p>BG</p>
    <p>inherit</p>
    <p>FG BGI/O</p>
    <p>submit</p>
    <p>complete</p>
    <p>wake</p>
    <p>CV CV CV</p>
  </div>
  <div class="page">
    <p>I/O Priority Inheritance</p>
    <p>Handling I/O dependency</p>
  </div>
  <div class="page">
    <p>I/O Priority Inheritance</p>
    <p>Handling I/O dependency</p>
    <p>Block Layer</p>
    <p>I/OI/O</p>
  </div>
  <div class="page">
    <p>I/O Priority Inheritance</p>
    <p>Handling I/O dependency</p>
    <p>Block Layer</p>
    <p>Q admission stage</p>
    <p>I/OI/O</p>
    <p>Sched queueing stage</p>
  </div>
  <div class="page">
    <p>I/O Priority Inheritance</p>
    <p>Handling I/O dependency</p>
    <p>Block Layer</p>
    <p>PER-DEV ROOT</p>
    <p>NCIO NCIO</p>
    <p>NCIO NCIO</p>
    <p>Q admission stage</p>
    <p>I/OI/O</p>
    <p>Sched queueing stage</p>
    <p>Non-critical I/O tracking</p>
    <p>Descriptor</p>
    <p>Location</p>
    <p>Resolver</p>
    <p>Sector #</p>
  </div>
  <div class="page">
    <p>I/O Priority Inheritance</p>
    <p>Handling I/O dependency</p>
    <p>Block Layer</p>
    <p>Descriptor Location Resolver Sector #</p>
    <p>allocate</p>
    <p>Q admission stage</p>
    <p>I/O</p>
    <p>I/O</p>
    <p>I/O</p>
    <p>Sched queueing stage</p>
    <p>Non-critical I/O tracking</p>
    <p>PER-DEV ROOT</p>
    <p>NCIO NCIO</p>
    <p>NCIO NCIO</p>
  </div>
  <div class="page">
    <p>I/O Priority Inheritance</p>
    <p>Handling I/O dependency</p>
    <p>Block Layer</p>
    <p>Q admission stage</p>
    <p>I/O</p>
    <p>I/O</p>
    <p>I/O</p>
    <p>Sched queueing stage</p>
    <p>Non-critical I/O tracking</p>
    <p>update</p>
    <p>Descriptor Location Resolver Sector #</p>
    <p>PER-DEV ROOT</p>
    <p>NCIO NCIO</p>
    <p>NCIO NCIO</p>
  </div>
  <div class="page">
    <p>I/O Priority Inheritance</p>
    <p>Handling I/O dependency</p>
    <p>Block Layer</p>
    <p>Q admission stage</p>
    <p>I/O</p>
    <p>I/O</p>
    <p>Sched queueing stage</p>
    <p>I/O</p>
    <p>Non-critical I/O tracking</p>
    <p>update Descriptor Location Resolver Sector #</p>
    <p>PER-DEV ROOT</p>
    <p>NCIO NCIO</p>
    <p>NCIO NCIO</p>
  </div>
  <div class="page">
    <p>I/O Priority Inheritance</p>
    <p>Handling I/O dependency</p>
    <p>Block Layer</p>
    <p>Q admission stage</p>
    <p>I/O</p>
    <p>I/O</p>
    <p>Sched queueing stage</p>
    <p>I/O</p>
    <p>Non-critical I/O tracking</p>
    <p>update Descriptor Location Resolver Sector #</p>
    <p>PER-DEV ROOT</p>
    <p>NCIO NCIO</p>
    <p>NCIO NCIO</p>
  </div>
  <div class="page">
    <p>I/O Priority Inheritance</p>
    <p>Handling I/O dependency</p>
    <p>Block Layer</p>
    <p>Q admission stage</p>
    <p>I/O</p>
    <p>I/O</p>
    <p>Sched queueing stage</p>
    <p>I/O</p>
    <p>Non-critical I/O tracking</p>
    <p>update</p>
    <p>Descriptor Location Resolver Sector #</p>
    <p>PER-DEV ROOT</p>
    <p>NCIO NCIO</p>
    <p>NCIO NCIO</p>
  </div>
  <div class="page">
    <p>I/O Priority Inheritance</p>
    <p>Handling I/O dependency</p>
    <p>Block Layer</p>
    <p>Q admission stage</p>
    <p>I/O</p>
    <p>I/O</p>
    <p>Sched queueing stage</p>
    <p>I/O</p>
    <p>Non-critical I/O tracking</p>
    <p>Descriptor Location Resolver Sector #</p>
    <p>PER-DEV ROOT</p>
    <p>NCIO NCIO</p>
    <p>NCIO NCIO</p>
    <p>delete on completion</p>
  </div>
  <div class="page">
    <p>Handling Transitive Dependency</p>
    <p>Possible states of dependent task</p>
    <p>FG</p>
    <p>inherit</p>
    <p>BG BG</p>
    <p>Blocked on task</p>
    <p>I/OFG</p>
    <p>inherit</p>
    <p>BG</p>
    <p>wait wait</p>
    <p>Blocked on I/O</p>
    <p>FG</p>
    <p>inherit</p>
    <p>BG</p>
    <p>wait</p>
    <p>Blocked at admission stage</p>
  </div>
  <div class="page">
    <p>Handling Transitive Dependency</p>
    <p>Recording blocking status</p>
    <p>FG</p>
    <p>inherit</p>
    <p>BG BG</p>
    <p>Blocked on task</p>
    <p>I/OFG</p>
    <p>inherit</p>
    <p>BG</p>
    <p>wait wait</p>
    <p>Blocked on I/O</p>
    <p>FG</p>
    <p>inherit</p>
    <p>BG</p>
    <p>wait</p>
    <p>Blocked at admission stage</p>
  </div>
  <div class="page">
    <p>Handling Transitive Dependency</p>
    <p>Recording blocking status</p>
    <p>FG</p>
    <p>inherit</p>
    <p>BG BG</p>
    <p>Task is recorded</p>
    <p>I/OFG</p>
    <p>inherit</p>
    <p>BG</p>
    <p>wait</p>
    <p>Blocked on I/O</p>
    <p>FG</p>
    <p>inherit</p>
    <p>BG</p>
    <p>wait</p>
    <p>Blocked at admission stage</p>
    <p>inherit</p>
  </div>
  <div class="page">
    <p>Handling Transitive Dependency</p>
    <p>Recording blocking status</p>
    <p>FG</p>
    <p>inherit</p>
    <p>BG BG I/OFG</p>
    <p>inherit</p>
    <p>BG</p>
    <p>reprio</p>
    <p>I/O is recorded</p>
    <p>FG</p>
    <p>inherit</p>
    <p>BG</p>
    <p>wait</p>
    <p>Blocked at admission stage</p>
    <p>Task is recorded</p>
    <p>inherit</p>
  </div>
  <div class="page">
    <p>Handling Transitive Dependency</p>
    <p>Recording blocking status</p>
    <p>FG</p>
    <p>inherit</p>
    <p>BG BG I/OFG</p>
    <p>inherit</p>
    <p>BG FG</p>
    <p>inherit</p>
    <p>BG</p>
    <p>retryreprio</p>
    <p>I/O is recorded</p>
    <p>Task is recorded</p>
    <p>inherit</p>
  </div>
  <div class="page">
    <p>Challenges</p>
    <p>How to accurately identify I/O criticality</p>
    <p>Enlightenment API</p>
    <p>I/O priority inheritance</p>
    <p>Recording blocking status</p>
    <p>How to effectively enforce I/O criticality</p>
  </div>
  <div class="page">
    <p>Criticality-Aware I/O Prioritization</p>
    <p>Caching layer</p>
    <p>Apply low dirty ratio for non-critical writes (1% by default)</p>
    <p>Block layer</p>
    <p>Isolate allocation of block queue slots</p>
    <p>Maintain 2 FIFO queues</p>
    <p>Schedule critical I/O first</p>
    <p>Limit # of outstanding non-critical I/Os (1 by default)</p>
    <p>Support queue promotion to resolve I/O dependency</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Implementation on Linux 3.13 w/ ext4</p>
    <p>Application studies</p>
    <p>PostgreSQL relational database</p>
    <p>Backend processes as foreground tasks</p>
    <p>I/O priority inheritance on LWLocks (semop)</p>
    <p>MongoDB document store</p>
    <p>Client threads as foreground tasks</p>
    <p>I/O priority inheritance on Pthread mutex and condition vars (futex)</p>
    <p>Redis key-value store</p>
    <p>Master process as foreground task</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Experimental setup</p>
    <p>2 Dell PowerEdge R530 (server &amp; client)</p>
    <p>1TB Micron MX200 SSD</p>
    <p>I/O prioritization schemes</p>
    <p>CFQ (default), CFQ-IDLE</p>
    <p>SPLIT-A (priority), SPLIT-D (deadline) [SOSP15]</p>
    <p>QASIO [FAST15]</p>
    <p>RCP</p>
  </div>
  <div class="page">
    <p>Application Throughput</p>
    <p>PostgreSQL w/ TPC-C workload</p>
    <p>Tr a n sa</p>
    <p>c ti o n t h ro</p>
    <p>u g h p u t</p>
    <p>(t rx</p>
    <p>/s e c )</p>
    <p>CFQ CFQ-IDLE</p>
  </div>
  <div class="page">
    <p>Application Throughput</p>
    <p>PostgreSQL w/ TPC-C workload</p>
    <p>Tr a n sa</p>
    <p>c ti o n t h ro</p>
    <p>u g h p u t</p>
    <p>(t rx</p>
    <p>/s e c )</p>
    <p>CFQ CFQ-IDLE SPLIT-A</p>
  </div>
  <div class="page">
    <p>Application Throughput</p>
    <p>PostgreSQL w/ TPC-C workload</p>
    <p>Tr a n sa</p>
    <p>c ti o n t h ro</p>
    <p>u g h p u t</p>
    <p>(t rx</p>
    <p>/s e c )</p>
    <p>CFQ CFQ-IDLE SPLIT-A SPLIT-D</p>
  </div>
  <div class="page">
    <p>Application Throughput</p>
    <p>PostgreSQL w/ TPC-C workload</p>
    <p>Tr a n sa</p>
    <p>c ti o n t h ro</p>
    <p>u g h p u t</p>
    <p>(t rx</p>
    <p>/s e c )</p>
    <p>CFQ CFQ-IDLE SPLIT-A SPLIT-D QASIO</p>
  </div>
  <div class="page">
    <p>Application Throughput</p>
    <p>PostgreSQL w/ TPC-C workload</p>
    <p>Tr a n sa</p>
    <p>c ti o n t h ro</p>
    <p>u g h p u t</p>
    <p>(t rx</p>
    <p>/s e c )</p>
    <p>CFQ CFQ-IDLE SPLIT-A SPLIT-D QASIO RCP</p>
  </div>
  <div class="page">
    <p>Application Throughput</p>
    <p>Impact on background task</p>
    <p>Tr a n sa</p>
    <p>c ti o n l o g s</p>
    <p>iz e ( G B )</p>
    <p>Elapsed time (sec)</p>
    <p>CFQ CFQ-IDLE QASIO</p>
  </div>
  <div class="page">
    <p>Application Throughput</p>
    <p>Impact on background task</p>
    <p>Tr a n sa</p>
    <p>c ti o n l o g s</p>
    <p>iz e ( G B )</p>
    <p>Elapsed time (sec)</p>
    <p>CFQ CFQ-IDLE SPLIT-A SPLIT-D QASIO</p>
  </div>
  <div class="page">
    <p>Application Throughput</p>
    <p>Impact on background task</p>
    <p>Our scheme improves application throughput w/o penalizing background tasks</p>
    <p>Tr a n sa</p>
    <p>c ti o n l o g s</p>
    <p>iz e ( G B )</p>
    <p>Elapsed time (sec)</p>
    <p>CFQ CFQ-IDLE SPLIT-A SPLIT-D QASIO RCP</p>
  </div>
  <div class="page">
    <p>Application Latency</p>
    <p>PostgreSQL w/ TPC-C workload</p>
    <p>C C D</p>
    <p>F P</p>
    <p>[X &gt; = x ]</p>
    <p>Transaction latency (msec)</p>
    <p>CFQ CFQ-IDLE SPLIT-A SPLIT-D QASIO</p>
    <p>Over 2 sec at 99.9th</p>
  </div>
  <div class="page">
    <p>Application Latency</p>
    <p>PostgreSQL w/ TPC-C workload</p>
    <p>C C D</p>
    <p>F P</p>
    <p>[X &gt; = x ]</p>
    <p>Transaction latency (msec)</p>
    <p>CFQ CFQ-IDLE SPLIT-A SPLIT-D QASIO RCP</p>
    <p>Our scheme is effective for improving tail latency</p>
    <p>Over 2 sec at 99.9th</p>
  </div>
  <div class="page">
    <p>Summary of Other Results</p>
    <p>Performance results</p>
    <p>MongoDB: 12%-201% throughput, 5x-20x latency at 99.9th</p>
    <p>Redis: 7%-49% throughput, 2x-20x latency at 99.9th</p>
    <p>Analysis results</p>
    <p>System latency analysis using LatencyTOP</p>
    <p>System throughput vs. Application latency</p>
    <p>Need for holistic approach</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>Key observation  All the layers in the I/O path should be considered as a whole with I/O</p>
    <p>priority inversion in mind for effective I/O prioritization</p>
    <p>Request-centric I/O prioritization  Enlightens the I/O path solely for application performance</p>
    <p>Improves throughput and latency of real applications</p>
    <p>Ongoing work  Practicalizing implementation</p>
    <p>Applying RCP to database cluster with multiple replicas</p>
  </div>
  <div class="page">
    <p>Thank You!</p>
    <p>Questions and comments</p>
    <p>Contact</p>
    <p>sangwook@apposha.io</p>
  </div>
</Presentation>
