<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>February 2000 1</p>
    <p>School of Computing ScienceSchool of Computing Science Simon Fraser University, CanadaSimon Fraser University, Canada</p>
    <p>Rate-Distortion Optimized Streaming of FineGrained Scalable Video Sequences</p>
    <p>Mohamed Hefeeda &amp; ChengHsin Hsu</p>
    <p>MMCN 2007</p>
  </div>
  <div class="page">
    <p>MotivationsMotivations</p>
    <p>Multimedia streaming over the Internet is becoming very popular</p>
    <p>- More multimedia content is continually created</p>
    <p>- Users have higher network bandwidth and more powerful computers</p>
    <p>Users request more multimedia content</p>
    <p>And they look for the best quality that their resources can support</p>
  </div>
  <div class="page">
    <p>Motivations (contd)Motivations (contd)</p>
    <p>Users have quite heterogeneous resources (bandwidth)</p>
    <p>- Dialup, DSL, cable, wireless, , high-speed LANs</p>
    <p>To accommodate heterogeneity  scalable video coding:</p>
    <p>Layered coded stream - Few accumulative layers</p>
    <p>- Partial layers are not decodable</p>
    <p>Fine-Grained Scalable (FGS) coded stream - Stream can be truncated at bit level</p>
  </div>
  <div class="page">
    <p>Motivations (contd)Motivations (contd)</p>
    <p>Goal: Optimize quality for heterogeneous receivers</p>
    <p>In general setting - FGS-coded streams</p>
    <p>- Multiple senders with heterogeneous bandwidth and store different portions of the stream</p>
    <p>Why multiple senders? - Required in P2P streaming:</p>
    <p>Limited peer capacity and Peer unreliability</p>
    <p>- Desired in distributed streaming environment:  Disjoint network path  Better streaming quality</p>
  </div>
  <div class="page">
    <p>Our Optimization ProblemOur Optimization Problem</p>
    <p>Assign to each sender a rate and bit range to transmit such that the best quality is achieved at the receiver.</p>
    <p>Consider a simple example to illustrate the importance of this problem</p>
  </div>
  <div class="page">
    <p>Example: Different Streaming SchemesExample: Different Streaming Schemes</p>
    <p>Non-scalable Layered</p>
  </div>
  <div class="page">
    <p>Example: Different Streaming SchemesExample: Different Streaming Schemes</p>
    <p>Optimal FGS ScalableFGS Scalable</p>
  </div>
  <div class="page">
    <p>Problem FormulationProblem Formulation</p>
    <p>First: single-frame case - Optimize quality for individual frames</p>
    <p>Then: multiple-frame case - Optimize quality for a block of frames</p>
    <p>- More room for optimization</p>
    <p>- Details are presented in the extended version of the paper</p>
  </div>
  <div class="page">
    <p>Input ParametersInput Parameters</p>
    <p>T : fixed frame period</p>
    <p>n : number of senders</p>
    <p>bi : outgoing bandwidth of sender i</p>
    <p>bI : incoming bandwidth of receiver</p>
    <p>si : length of (contiguous) bits held by sender i</p>
    <p>Assume w.l.g. s1 &lt;= s2 &lt;=  &lt;= sn</p>
  </div>
  <div class="page">
    <p>Allocation: A = {(i , ri) | i = 1, 2, , n}</p>
    <p>- i : number of bits assigned to i</p>
    <p>- ri : streaming rate assigned to i</p>
    <p>Specifies: - Sender 1 sends range [0, 1 -1] at rate r1</p>
    <p>- Sender 2 sends range [1 , 1+2 -1] at rate r2</p>
    <p>-</p>
    <p>- Sender i sends range at rate ri</p>
    <p>OutputsOutputs</p>
    <p>]1,[ 1</p>
  </div>
  <div class="page">
    <p>Integer Programming ProblemInteger Programming Problem</p>
    <p>Minimize distortion</p>
    <p>Subject to:</p>
    <p>- on-time delivery</p>
    <p>- assigned range is available</p>
    <p>- assigned rate is feasible</p>
    <p>- Aggregate rate not exceeds receivers incoming BW</p>
    <p>min A</p>
    <p>D(</p>
  </div>
  <div class="page">
    <p>How do we Compute Distortion?How do we Compute Distortion?</p>
    <p>Using Rate-Distortion (R-D) models - Map bit rates to perceived quality</p>
    <p>- Optimize quality rather than number of bits</p>
    <p>Approaches to construct R-D models - Empirical Models: Many empirical samples  expensive</p>
    <p>- Analytic Models: Quality is a non-linear function of bit rate, e.g., log model [Dai 06] and GGF model [Sun 05]</p>
    <p>- Semi-analytic Models: A few carefully chosen samples, then interpolate, e.g., piecewise linear R-D model [Zhang 03]</p>
    <p>Detailed analysis of R-D models in our previous work [Hsu 06]</p>
  </div>
  <div class="page">
    <p>Within each bitplane, approximate R-D function by a line segment</p>
    <p>Line segments of different bitplanes have different slopes</p>
    <p>The Linear R-D ModelThe Linear R-D Model</p>
  </div>
  <div class="page">
    <p>Visual Validation of Linear R-D ModelVisual Validation of Linear R-D Model</p>
    <p>Mother &amp; Daughter, frame 110</p>
    <p>Foreman, frame 100</p>
  </div>
  <div class="page">
    <p>Rigorous Validation of Linear R-D ModelRigorous Validation of Linear R-D Model</p>
    <p>Average error is less than 2% in most cases</p>
  </div>
  <div class="page">
    <p>Let yi be number of bits transmitted from bitplane i</p>
    <p>Distortion is:</p>
    <p>- d : base layer only distortion</p>
    <p>- gi : slope of bitplane i</p>
    <p>- z : total number of bitplanes</p>
    <p>Using the Linear R-D ModelUsing the Linear R-D Model</p>
    <p>d</p>
  </div>
  <div class="page">
    <p>Integer Linear Programming (ILP) ProblemInteger Linear Programming (ILP) Problem</p>
    <p>Linear objective function</p>
    <p>Additional constraints</p>
    <p>- number of bits transmitted from bit plane h does not exceed its size lh</p>
    <p>- bits assigned to senders are divided among bitplanes</p>
    <p>min A</p>
    <p>D(</p>
  </div>
  <div class="page">
    <p>Solution of ILP is a Valid FGS StreamSolution of ILP is a Valid FGS Stream</p>
    <p>Lemma 1: - An optimal solution for the integer linear program produces a</p>
    <p>contiguous FGS-encoded bit stream with no bit gaps</p>
    <p>Proof sketch - minimizing</p>
    <p>- Since g1 &lt; g2 &lt;  &lt;gn&lt;0 (line segment slopes),</p>
    <p>- the ILP will never assign bits to yi+1 if yi is not full</p>
    <p>d</p>
  </div>
  <div class="page">
    <p>Solving ILP problem is expensive</p>
    <p>Solution: Transform it to Linear Programming (LP) problem</p>
    <p>- Relax variables to take on real values</p>
    <p>Objective function and constraints remain the same</p>
    <p>Linear Programming RelaxationLinear Programming Relaxation</p>
    <p>i , ri , yh R + U {0}; i = 1, 2,L , n; h = 1, 2,L , z.</p>
  </div>
  <div class="page">
    <p>Solve LP  - Result is real values</p>
    <p>Then, use the following rounding scheme for solution of the ILP</p>
    <p>Efficient Rounding SchemeEfficient Rounding Scheme</p>
    <p>A</p>
    <p>ri</p>
  </div>
  <div class="page">
    <p>Correctness/Efficiency of Proposed RoundingCorrectness/Efficiency of Proposed Rounding</p>
    <p>Lemma 2 (Correctness) - Rounding of the optimal solution of the relaxed</p>
    <p>problem produces a feasible solution for the original problem</p>
    <p>Lemma 3 (Efficiency: Size of Rounding Gap) - The rounding gap is at most nT + n, where n is the</p>
    <p>number of senders and T is the frame period</p>
    <p>- (Extreme) Example: n = 30 senders, T = 30 fps ==&gt; gap is 32 bits</p>
    <p>- Indeed negligible (frame sizes are in order of KBs)</p>
  </div>
  <div class="page">
    <p>FGSAssign: Optimal Allocation AlgorithmFGSAssign: Optimal Allocation Algorithm</p>
    <p>Solving LP (using Simplex method for example) may still be too much</p>
    <p>- Need to run in real-time on PCs (not servers)</p>
    <p>Our solution: FGSAssign - Simple, yet optimal, allocation algorithm</p>
    <p>- Greedy: Iteratively allocate bits to sender with smallest si (stored segment) first</p>
  </div>
  <div class="page">
    <p>Pseudo Code of FGSAssignPseudo Code of FGSAssign</p>
  </div>
  <div class="page">
    <p>Optimality of FGSAssignOptimality of FGSAssign</p>
    <p>Theorem 1 - The FGSAssign algorithm produces an optimal</p>
    <p>solution in O(n log n) steps, where n is the number of senders.</p>
    <p>Proof: see paper</p>
    <p>Experimentally validated as well.</p>
  </div>
  <div class="page">
    <p>Multiple-Frame OptimizationMultiple-Frame Optimization</p>
    <p>Solve the allocation problem for blocks of m frames each</p>
    <p>Objective: minimize total distortion in block</p>
    <p>Why consider multiple-frame optimization? - More room for optimization</p>
    <p>- Solve the problem less often</p>
  </div>
  <div class="page">
    <p>Multiple-Frame Optimization: Why?Multiple-Frame Optimization: Why?</p>
    <p>More room for optimization: higher quality and less quality fluctuation</p>
    <p>Bit rate</p>
    <p>D is</p>
    <p>to rt</p>
    <p>io n (</p>
    <p>M S</p>
    <p>E )</p>
  </div>
  <div class="page">
    <p>Multiple-Frame OptimizationMultiple-Frame Optimization</p>
    <p>Formulation (in extended version of the paper): - Straightforward extension to single-frame with lager number</p>
    <p>of variables and constraints</p>
    <p>- Computationally expensive to solve</p>
    <p>Our Solution: mFGSAssign algorithm - Heuristic (close to optimal results)</p>
    <p>- Achieves two goals:</p>
    <p>Minimize total distortion in a block of frames</p>
    <p>Reduce quality fluctuations among successive frames</p>
    <p>- Pseudo code and analysis: see extended version of the paper</p>
  </div>
  <div class="page">
    <p>Experimental SetupExperimental Setup</p>
    <p>Software used - MPEG-4 Reference Software ver 2.5</p>
    <p>Augmented to extract R-D model parameters</p>
    <p>Algorithms implemented (in Matlab) - LP solutions using Simplex for the single-frame and</p>
    <p>multiple-frame problems</p>
    <p>- FGSAssign algorithm</p>
    <p>- mFGSAssign algorithm</p>
    <p>- Nonscalable algorithm for baseline comparisons</p>
  </div>
  <div class="page">
    <p>Experimental Setup (contd)Experimental Setup (contd)</p>
    <p>Streaming scenarios - Four typical scenarios for Internet and corporate</p>
    <p>environments</p>
    <p>Testing video sequences - Akiyo, Mother, Foreman, Mobile (CIF)</p>
    <p>- Sample results shown for Foreman and Mobile</p>
  </div>
  <div class="page">
    <p>Single Frame: Quality (PSNR)Single Frame: Quality (PSNR)</p>
    <p>Foreman, Scenario I Mobile, Scenario III</p>
    <p>Quality Improvement: 1--8 dB</p>
    <p>FGSAssign is optimal</p>
  </div>
  <div class="page">
    <p>Multiple Frame: Quality (PSNR)Multiple Frame: Quality (PSNR)</p>
    <p>Foreman, Scenario II Mobile, Scenario III</p>
    <p>Scalable: higher improvement than single frame</p>
    <p>mFGSAssign: almost optimal (&lt; 1% gap)</p>
  </div>
  <div class="page">
    <p>Fluctuation ReductionFluctuation Reduction</p>
    <p>Foreman, Scenario II Mobile, Scenario III</p>
    <p>Small quality fluctuations in successive frames</p>
  </div>
  <div class="page">
    <p>ConclusionsConclusions</p>
    <p>Formulated and solved the bit allocation problem to optimize quality for receivers in general settings</p>
    <p>- Multiple heterogeneous senders</p>
    <p>Considered single and multiple frame cases</p>
    <p>Approach - Nonlinear problem  integer linear program</p>
    <p>Using linear R-D model</p>
    <p>- Integer linear program  linear program  Using simple rounding scheme</p>
    <p>Proposed efficient algorithms - FGSAssign: optimal and efficient</p>
    <p>- mFGSAssign: close to optimal in terms of average distortion, reduces quality fluctuations, runs in real time</p>
    <p>Significant quality improvements shown by our experiments</p>
  </div>
  <div class="page">
    <p>Thank You!Thank You!</p>
    <p>Questions??</p>
    <p>All programs/scripts/videos are available:</p>
    <p>http://www.cs.sfu.ca/~mhefeeda</p>
  </div>
</Presentation>
