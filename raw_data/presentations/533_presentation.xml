<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>ServerSwitch: A Programmable and High Performance Platform for Data</p>
    <p>Center Networks Guohan Lu, Chuanxiong Guo, Yulong Li, Zhiqiang Zhou,</p>
    <p>Tong Yuan, Haitao Wu, Yongqiang Xiong, Rui Gao, Yongguang Zhang</p>
    <p>Microsoft Research Asia Tsinghua University</p>
  </div>
  <div class="page">
    <p>Motivations</p>
    <p>Lots of research and innovations in DCN  PortLand, DCell/BCube, CamCube, VL2,</p>
    <p>Topology, routing, congestion control, network services, etc.</p>
    <p>Many DCN designs depart from current practices  BCube uses self-defined packet header for source routing</p>
    <p>Portland performs LPM on destination MAC</p>
    <p>Quantized Congestion Notification (QCN) requires the switches to send explicit congestion notification</p>
    <p>Need a platform to prototype existing and many future DCN designs</p>
  </div>
  <div class="page">
    <p>Requirements</p>
    <p>Programmable and high-performance packet forwarding engine  Wire-speed packet forwarding for various packet sizes</p>
    <p>Various packet forwarding schemes and formats</p>
    <p>New routing and signaling, flow/congestion control  ARP interception (PortLand), adaptive routing (BCube),</p>
    <p>congestion control (QCN)</p>
    <p>Support new DCN services by enabling in-network packet processing  Network cache service (CamCube), Switch-assisted reliable</p>
    <p>multicast (SideCar)</p>
  </div>
  <div class="page">
    <p>Existing Approaches</p>
    <p>Existing switches/routers  Usually closed system, no programming interface</p>
    <p>OpenFlow  Mainly focus on control plane at present  Unclear how to support new congestion control</p>
    <p>mechanisms and in-network data processing</p>
    <p>Software routers  Performance not comparable to switching ASIC</p>
    <p>NetFPGA  Not commodity devices and difficult to program</p>
  </div>
  <div class="page">
    <p>Technology Trends</p>
    <p>Modern Switching Chip</p>
    <p>High switching capacity (640Gbps)</p>
    <p>Rich protocol support (Ethernet, IP, MPLS)</p>
    <p>TCAM for advanced packet filtering</p>
    <p>PCI-E Interconnect</p>
    <p>High bandwidth (160Gbps)</p>
    <p>Low latency (&lt;1us)</p>
    <p>Commodity Server</p>
    <p>Multi-core</p>
    <p>Multi 10GE packet processing capability</p>
  </div>
  <div class="page">
    <p>Design Goals</p>
    <p>Programmable packet forwarding engine in silicon  Leverage the high capacity and programmability</p>
    <p>within modern switching chip for packet forwarding</p>
    <p>Low latency software processing for control plane and congestion control messages  Leverage the low latency PCI-E interface for latency</p>
    <p>sensitive schemes</p>
    <p>Software-based in-network packet processing  Leverage the rich programmability and high</p>
    <p>performance provided by modern server</p>
  </div>
  <div class="page">
    <p>Hardware  Modern Switching</p>
    <p>chip</p>
    <p>Multi-core CPU</p>
    <p>PCI-E interconnect</p>
    <p>Software Stack  C APIs for switching</p>
    <p>chip management</p>
    <p>Packet Processing in both Kernel and User Space</p>
    <p>Architecture</p>
    <p>User Space</p>
    <p>KernelSC driver</p>
    <p>ServerSwitch driver</p>
    <p>API/Library</p>
    <p>App</p>
    <p>TCP/IP</p>
    <p>App</p>
    <p>NIC driver</p>
    <p>Hardware</p>
    <p>E xt</p>
    <p>e rn</p>
    <p>a l</p>
    <p>P o</p>
    <p>rt s</p>
    <p>Ethernet Controller</p>
    <p>Ethernet Controller</p>
    <p>Ethernet Controller</p>
    <p>NIC chips</p>
    <p>Switching chip</p>
    <p>PCI-E PCI-E S</p>
    <p>e rv</p>
    <p>e rS</p>
    <p>w it</p>
    <p>ch C</p>
    <p>a rd</p>
    <p>TCAM</p>
    <p>S e</p>
    <p>rv e</p>
    <p>r</p>
  </div>
  <div class="page">
    <p>Programmable Packet Forwarding Engine</p>
    <p>Destination-based forwarding, e.g., IP, Ethernet</p>
    <p>Tag-based forwarding, e.g., MPLS</p>
    <p>Source Routing based forwarding, e.g., BCube</p>
    <p>EM(MPLS)</p>
    <p>TCAM Prog</p>
    <p>Parser</p>
    <p>LPM</p>
    <p>MPLS Parser</p>
    <p>UDLK</p>
    <p>IP Parser DIP</p>
    <p>Label</p>
    <p>DIP</p>
    <p>MPLS Modifier</p>
    <p>L2 Modifier</p>
    <p>Interface Table</p>
    <p>IP Modifier</p>
    <p>EM(IP)</p>
    <p>Eth Parser EM(MAC)DMAC</p>
    <p>Index</p>
    <p>Classifi er</p>
    <p>Limited Programmability</p>
    <p>High Programmability</p>
    <p>No Programmabiltiy</p>
    <p>P P</p>
  </div>
  <div class="page">
    <p>TCAM Basic</p>
    <p>TCAM</p>
    <p>A 1</p>
    <p>A</p>
    <p>B</p>
    <p>A</p>
    <p>B</p>
    <p>A A 2 B</p>
    <p>Key Value 1 Value 2</p>
    <p>Value 3 Value 4</p>
    <p>Value 5 Value 6</p>
    <p>non-cared cared</p>
  </div>
  <div class="page">
    <p>TCAM Based Source Routing</p>
    <p>Idx IA1 IA2 IA3</p>
    <p>TCAM</p>
    <p>Incoming Packet A</p>
    <p>A</p>
    <p>B</p>
    <p>A</p>
    <p>B</p>
    <p>A A 2 B</p>
    <p>Idx IA1 IA2 IA3</p>
    <p>Output Port</p>
    <p>A A 1 B</p>
  </div>
  <div class="page">
    <p>ServerSwitch API</p>
    <p>Switching chip management  User defined lookup key extraction  Forwarding table manipulation  Traffic statistics collection</p>
    <p>Examples:  SetUDLK(1, (B0-5))</p>
    <p>SetLookupTable(TCAM, 1, 1, 000201000000, FFFFFF000000, {act=REDIRECT_VIF, vif=3})</p>
    <p>ReadRegister(OUTPUT_QUEUE_BYTES_PORT 0)</p>
  </div>
  <div class="page">
    <p>Hardware  4 GE external ports  x4 PCI-E to server  2x10GE board-to-board interconnection  Cost: 400$ in 80 pieces  Power consumption: 15.7W</p>
    <p>Implementation</p>
    <p>Software  Windows Server 2008 R2  Switching chip driver (2670 lines of C)  NIC driver (binary from Intel)  ServerSwitch driver (20719 lines of C)  User library (Based on Broadcom SDK)</p>
    <p>Intel 82576EB</p>
  </div>
  <div class="page">
    <p>Example 1: BCube</p>
    <p>Self-defined packet header for BCube source routing</p>
    <p>Easy to program: Less than 200 LoC to program the switching chip</p>
    <p>Version HL Tos Total length</p>
    <p>Identification Flags Fragment offset</p>
    <p>TTL Protocol Header checksum</p>
    <p>Source Address</p>
    <p>Destination Address</p>
    <p>NHA1 NHA2 NHA3 NHA4</p>
    <p>NHA5 NHA6 NHA7 NHA8</p>
    <p>PadBCube Protocol NH</p>
    <p>B14-17</p>
    <p>B18-21</p>
    <p>B22-25</p>
    <p>B26-29</p>
    <p>B30-33</p>
    <p>B34-37</p>
    <p>B38-41</p>
    <p>B42-45</p>
  </div>
  <div class="page">
    <p>BCube Experiment</p>
    <p>ServerSwitch: wire-speed packet forwarding for 64B  ServerSwitch: 15.6us forwarding latency, ~1/3 of software</p>
    <p>forwarding latency</p>
    <p>NetFPGA</p>
    <p>NetFPGA</p>
    <p>Forwarding rate (ServerSwitch)</p>
    <p>Forwarding rate (Software)</p>
    <p>Latency (Software)</p>
    <p>Latnecy (ServerSwitch)</p>
  </div>
  <div class="page">
    <p>Example 2: Quantized Congestion Notification</p>
    <p>Congestion notification generation requires very low latency</p>
    <p>ServerSwitch</p>
    <p>Packet Marker</p>
    <p>RP</p>
    <p>UDP Source</p>
    <p>Token Bucket</p>
    <p>CP</p>
    <p>NIC</p>
    <p>qlen</p>
    <p>Congestion Notication</p>
    <p>Output Port</p>
  </div>
  <div class="page">
    <p>QCN Experiment</p>
    <p>Sender</p>
    <p>Receiver</p>
    <p>Queue Length</p>
    <p>Throughput</p>
    <p>Queue fluctuates around equilibrium point (Q_EQ)</p>
    <p>Change bandwidth</p>
  </div>
  <div class="page">
    <p>Limitations</p>
    <p>Only support modifications for standard protocols  Ethernet MACs, IP TTL, MPLS label</p>
    <p>Not suitable for low-latency, per-packet processing  XCP</p>
    <p>Limited number of ports and port speed  Cannot be directly used for fat-tree and VL2</p>
    <p>4 ServerSwitch cards form a 16-port ServerSwitch, still viable for prototyping fat-tree and VL2</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>ServerSwitch: integrating a high performance, limited programmable ASIC switching chip with a powerful, fully programmable server</p>
    <p>Line-rate forwarding performance for various user-defined forwarding schemes</p>
    <p>Support new signaling and congestion mechanisms</p>
    <p>Enable in-network data processing</p>
    <p>Ongoing 10GE ServerSwitch</p>
  </div>
  <div class="page">
    <p>Thanks.</p>
    <p>Q&amp;A</p>
  </div>
</Presentation>
