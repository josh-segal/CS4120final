<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Samsara: Efficient Deterministic Replay in Multiprocessor</p>
    <p>Environments with Hardware Virtualization Extensions</p>
    <p>Shiru Ren, Le Tan, Chunqi Li, Zhen Xiao, and Weijia Song</p>
    <p>June 24, 2016</p>
  </div>
  <div class="page">
    <p>Introduction1</p>
    <p>Background &amp; Motivation2</p>
    <p>Samsara Overview4</p>
    <p>Conclusion6</p>
    <p>Evaluation5</p>
    <p>Table of Contents</p>
    <p>Record &amp; Replay Memory Interleaving with HAV</p>
  </div>
  <div class="page">
    <p>Non-determinism</p>
    <p>Multiprocessor architectures are inherently non-deterministic</p>
    <p>The lack of reproducibility complicates software debugging, security analysis, and fault tolerance</p>
    <p>Introduction</p>
  </div>
  <div class="page">
    <p>Deterministic Replay</p>
    <p>Gives computer users the ability to travel backward in time, recreating past states and events</p>
    <p>Checkpoint + Record all non-deterministic events</p>
    <p>Checkpoint Execute same instruction stream</p>
    <p>Inject events in logged points</p>
    <p>Initial State Instruction stream</p>
    <p>Final State</p>
    <p>Non-determinism Events (e.g. user / network inputs, interrupts )</p>
    <p>Final State</p>
    <p>Replay log</p>
    <p>Recording Phase</p>
    <p>Replay Phase</p>
    <p>Introduction</p>
  </div>
  <div class="page">
    <p>Deterministic Replay for Multi-processor</p>
    <p>Deterministic replay for single processor is relatively mature and well-developed</p>
    <p>Challenge on the multi-processor systems: Memory Access Interleaving</p>
    <p>Introduction</p>
  </div>
  <div class="page">
    <p>Hardware-based schemes</p>
    <p>Use special hardware support for recording memory access interleaving</p>
    <p>Redesign the cache coherence protocol</p>
    <p>The FDR System [ISCA 03]</p>
    <p>Background &amp; Motivation</p>
  </div>
  <div class="page">
    <p>Issues</p>
    <p>Increase the complexity of the circuits, impractical for use in real systems</p>
    <p>Huge space overhead which limits the duration of the recorded interval</p>
    <p>Background &amp; Motivation Hardware-based schemes</p>
    <p>Use special hardware support for recording memory access interleaving</p>
    <p>Redesign the cache coherence protocol</p>
  </div>
  <div class="page">
    <p>Software-only schemes</p>
    <p>Modify OS, compiler, runtime libraries or VMM</p>
    <p>Virtualization-based approaches -- CREW protocol</p>
    <p>CREW: Concurrent-Read &amp; Exclusive-Write</p>
    <p>P0</p>
    <p>X = 1</p>
    <p>P1</p>
    <p>a = X</p>
    <p>X = 0</p>
    <p>Y = 0</p>
    <p>b = Y + 1</p>
    <p>c = X + Y</p>
    <p>P0 : 23  P1 : 5</p>
    <p>P0 : 24  P1 : 6</p>
    <p>P1 : 5  P0 : 25</p>
    <p>P0 : 25  P1 : 8 c = 0</p>
    <p>. . .</p>
    <p>. . .</p>
    <p>Background &amp; Motivation</p>
  </div>
  <div class="page">
    <p>Issues</p>
    <p>Each memory access operation must be checked for logging before execution</p>
    <p>Serious performance degradation (about 10x compared to the native execution)</p>
    <p>Huge log sizes (approximately 1 MB/processor/second)</p>
    <p>Background &amp; Motivation Software-only schemes</p>
    <p>Modify OS, compiler, runtime libraries or VMM</p>
    <p>Virtualization-based approaches -- CREW protocol</p>
    <p>CREW: Concurrent-Read &amp; Exclusive-Write</p>
  </div>
  <div class="page">
    <p>To summarize</p>
    <p>Software-only schemes are inefficient without proper hardware support</p>
    <p>No commodity processor with dedicated hardware-based record and replay capability</p>
    <p>Background &amp; Motivation</p>
  </div>
  <div class="page">
    <p>Our goal  To implement a software approach that can take full advantages of the latest hardware</p>
    <p>features in commodity processors to record and replay memory access interleaving</p>
    <p>efficiently without introducing any hardware modifications.</p>
    <p>Hardware-assisted virtualization (HAV) (e.g., Intel Virtualization Technology)</p>
    <p>Background &amp; Motivation To summarize</p>
    <p>Software-only schemes are inefficient without proper hardware support</p>
    <p>No commodity processor with dedicated hardware-based record and replay capability</p>
  </div>
  <div class="page">
    <p>Point-to-point logging approach (CREW protocol)</p>
    <p>Record dependences between pairs of instructions Huge logs</p>
    <p>Large number of memory access detections (VM exit) Excessive overhead</p>
    <p>Record &amp; Replay Memory Interleaving with HAV</p>
    <p>P0 P1</p>
    <p>. . . . . .</p>
  </div>
  <div class="page">
    <p>Chunk-based Strategy</p>
    <p>Restrict processors execution into a series</p>
    <p>of chunks</p>
    <p>Record chunk size &amp; commit order</p>
    <p>Chunk execution must satisfy:</p>
    <p>Atomicity</p>
    <p>Serializability</p>
    <p>P0 P1</p>
    <p>. . . . . .</p>
    <p>P0 P1 . . . . . .</p>
    <p>Record &amp; Replay Memory Interleaving with HAV Point-to-point logging approach (CREW protocol)</p>
    <p>Record dependences between pairs of instructions Huge logs</p>
    <p>Large number of memory access detections (VM exit) Excessive overhead</p>
  </div>
  <div class="page">
    <p>Serializability: Conflict detection, Chunk commit</p>
    <p>Atomicity: Copy-on-write (COW), Rollback</p>
    <p>Record &amp; Replay Memory Interleaving with HAV</p>
    <p>P0</p>
    <p>Chunk Start</p>
    <p>LD (A)</p>
    <p>COW ST (A)</p>
    <p>ST (A)</p>
    <p>ST (B)COW</p>
    <p>Chunk Complete</p>
    <p>Truncation Reason: I/O Instruction</p>
    <p>Commit</p>
    <p>P1</p>
    <p>LD (A)</p>
    <p>Squash &amp; Rollback</p>
    <p>LD (B)</p>
    <p>ST (B)</p>
    <p>Re-execution</p>
    <p>LD (D)</p>
    <p>ST (D)</p>
    <p>C1</p>
    <p>C2</p>
    <p>C3 ConflictDetection R-set { A } W-set { A , B }</p>
    <p>Truncation Reason: Chunk Size Limit</p>
    <p>R-set { D } W-set { D }</p>
    <p>R-set { A , B } W-set { B }</p>
  </div>
  <div class="page">
    <p>Obtain R&amp;W-set Efficiently via HAV Extensions</p>
    <p>VM-based approaches: numerous VM exits (hardware page protection)</p>
    <p>Accessed and Dirty Flags of EPT (Extended Page Tables)</p>
    <p>Our approach: a simple EPT traversal</p>
    <p>Record &amp; Replay Memory Interleaving with HAV</p>
  </div>
  <div class="page">
    <p>W(b) R (b)</p>
    <p>R (a) R (c)</p>
    <p>W(b) R (b)</p>
    <p>W(e)</p>
    <p>VM exit</p>
    <p>R (e) R (d)</p>
    <p>P0</p>
    <p>W(b) R (b)</p>
    <p>R (a) R (c)</p>
    <p>W(b) R (b)</p>
    <p>W(e) R (e) R (d)</p>
    <p>P0</p>
    <p>a EPT traversal 16</p>
    <p>Record &amp; Replay Memory Interleaving with HAV Obtain R&amp;W-set Efficiently via HAV Extensions</p>
    <p>VM-based approaches: numerous VM exits (hardware page protection)</p>
    <p>Accessed and Dirty Flags of EPT (Extended Page Tables)</p>
    <p>Our approach: a simple EPT traversal</p>
  </div>
  <div class="page">
    <p>Partial traversal of EPT</p>
    <p>EPT uses a hierarchical, tree-based design</p>
    <p>If the accessed flag of one internal entry is 0, then the accessed flags of all entries in its subtrees</p>
    <p>are guaranteed to be 0</p>
    <p>Locality of reference (just need to traverse a tiny part of EPT)</p>
    <p>Accessed: 1</p>
    <p>Accessed: 0</p>
    <p>Accessed: 1</p>
    <p>Accessed: 1</p>
    <p>Accessed: 0</p>
    <p>Record &amp; Replay Memory Interleaving with HAV</p>
  </div>
  <div class="page">
    <p>Observations</p>
    <p>Chunk commit is time-consuming</p>
    <p>Wait for lock</p>
    <p>Write-back operation</p>
    <p>P0</p>
    <p>Chunk Complete</p>
    <p>Wait for Lock</p>
    <p>Detect Conflict</p>
    <p>Broadcast Updates</p>
    <p>Subsequent Chunk</p>
    <p>Lock</p>
    <p>Obtain R&amp;W-set</p>
    <p>Write-back Updates</p>
    <p>Record &amp; Replay Memory Interleaving with HAV</p>
  </div>
  <div class="page">
    <p>Decentralized Three-Phase Commit Protocol</p>
    <p>Move this out of the synchronized block</p>
    <p>Support parallel commit while ensuring</p>
    <p>serializability</p>
    <p>Three phases:</p>
    <p>Pre-commit phase</p>
    <p>Commit phase</p>
    <p>Synchronization phase</p>
    <p>P0</p>
    <p>Chunk Complete</p>
    <p>Wait for Lock</p>
    <p>Detect Conflict</p>
    <p>Broadcast Updates</p>
    <p>Write-back Updates</p>
    <p>Subsequent Chunk</p>
    <p>Lock</p>
    <p>Insert into committing list</p>
    <p>Update Chunk Info</p>
    <p>Check Committing List</p>
    <p>Obtain R&amp;W-set</p>
    <p>Record &amp; Replay Memory Interleaving with HAV</p>
  </div>
  <div class="page">
    <p>Replay Memory Interleaving</p>
    <p>Guarantee all chunks will be properly re-built and executed in the original order</p>
    <p>Design goal: maintain the same parallelism as the recoding phase</p>
    <p>1. Truncate a chunk at the recorded timestamp</p>
    <p>2. Ensure that all preceding chunks have been committed successfully before the current</p>
    <p>chunk starts</p>
    <p>Record &amp; Replay Memory Interleaving with HAV</p>
  </div>
  <div class="page">
    <p>Samsara Overview</p>
  </div>
  <div class="page">
    <p>Experimental Setup</p>
    <p>4-core Intel Core i7-4790 processor, 12GB memory, 1TB Hard Drive</p>
    <p>Host: Ubuntu 12.04 with Linux kernel version 3.11.0 and Qemu-1.2.2</p>
    <p>Guest: Ubuntu 14.04 with Linux kernel version 3.13.1</p>
    <p>Workloads</p>
    <p>Computation intensive applications</p>
    <p>PARSEC</p>
    <p>SPLASH-2</p>
    <p>I/O intensive applications</p>
    <p>kernel-build</p>
    <p>pbzip2</p>
    <p>Evaluation</p>
  </div>
  <div class="page">
    <p>Log Size</p>
    <p>Samsara generates log at an average rate of 0.0027 MB/core/s and 0.0031 MB/core/s for</p>
    <p>recoding two and four cores</p>
    <p>Reduces the log file size by 98.6% compared to the previous software-only schemes</p>
    <p>Evaluation</p>
    <p>Log size produced by Samsara during recording (compressed with gzip).</p>
  </div>
  <div class="page">
    <p>The proportion of each type of nondeterministic events in a log file (without compression).</p>
    <p>Evaluation The proportion of each type of non-deterministic events</p>
    <p>The size of the chunk commit order log is practically negligible compared with other non</p>
    <p>deterministic events</p>
    <p>9.36% with two cores and 19.31% with four cores on average</p>
  </div>
  <div class="page">
    <p>Recording Overhead Compared to Native Execution</p>
    <p>Compare the performance to native execution</p>
    <p>2.3X and 4.1X for recording these workloads on two and four cores</p>
    <p>Previous software-only approaches cause about 10X with two cores</p>
    <p>Evaluation</p>
    <p>Recording overhead compared to the native execution.</p>
  </div>
  <div class="page">
    <p>We made the first attempt to leverage HAV extensions to achieve an efficient software-based replay</p>
    <p>system on commodity multiprocessors.</p>
    <p>We abandon the inefficient CREW protocol and instead use a chunk-based strategy.</p>
    <p>We avoid all memory access detections, and obtain each chunks read-set and write-set by</p>
    <p>retrieving the accessed and the dirty flags of the EPT.</p>
    <p>We propose a decentralized three-phase commit protocol which significantly reduces the</p>
    <p>performance overhead by allowing chunk commits in parallel while still ensuring serializability.</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Thanks</p>
    <p>renshiru@pku.edu.cn</p>
  </div>
</Presentation>
