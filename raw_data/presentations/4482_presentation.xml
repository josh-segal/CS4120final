<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>A Classification of SQL Injection Attack Techniques and</p>
    <p>Countermeasures</p>
    <p>William G.J. Halfond, Jeremy Viegas &amp; Alessandro Orso</p>
    <p>Georgia Institute of Technology This work was partially supported by DHS contract FA8750-05-2-0214 and</p>
    <p>NSF award CCR-0209322 to Georgia Tech.</p>
  </div>
  <div class="page">
    <p>William Halfond  ISSSE 2006  March 14th, 2006</p>
    <p>Vulnerable Application</p>
    <p>String queryString = &quot;SELECT info FROM userTable WHERE &quot;;</p>
    <p>if ((! login.equals(&quot;&quot;)) &amp;&amp; (! pin.equals(&quot;&quot;))) {</p>
    <p>queryString += &quot;login='&quot; + login + &quot;' AND pin=&quot; + pin ;</p>
    <p>} else {</p>
    <p>queryString+=&quot;login='guest'&quot;;</p>
    <p>}</p>
    <p>ResultSet tempSet = stmt.execute(queryString);</p>
  </div>
  <div class="page">
    <p>William Halfond  ISSSE 2006  March 14th, 2006</p>
    <p>Attack Scenario</p>
    <p>String queryString = &quot;SELECT info FROM userTable WHERE &quot;;</p>
    <p>if ((! login.equals(&quot;&quot;)) &amp;&amp; (! pin.equals(&quot;&quot;))) {</p>
    <p>queryString += &quot;login='&quot; + login + &quot;' AND pin=&quot; + pin ;</p>
    <p>} else {</p>
    <p>queryString+=&quot;login='guest'&quot;;</p>
    <p>}</p>
    <p>ResultSet tempSet = stmt.execute(queryString);</p>
    <p>Normal Usage User submits login doe and pin 123</p>
    <p>SELECT info FROM users WHERE login= `doe AND pin= 123</p>
  </div>
  <div class="page">
    <p>William Halfond  ISSSE 2006  March 14th, 2006</p>
    <p>Malicious Usage Attacker submits admin --  and pin of 0</p>
    <p>SELECT info FROM users WHERE login=admin --  AND pin=0</p>
    <p>Attack Scenario</p>
    <p>String queryString = &quot;SELECT info FROM userTable WHERE &quot;;</p>
    <p>if ((! login.equals(&quot;&quot;)) &amp;&amp; (! pin.equals(&quot;&quot;))) {</p>
    <p>queryString += &quot;login='&quot; + login + &quot;' AND pin=&quot; + pin ;</p>
    <p>} else {</p>
    <p>queryString+=&quot;login='guest'&quot;;</p>
    <p>}</p>
    <p>ResultSet tempSet = stmt.execute(queryString);</p>
  </div>
  <div class="page">
    <p>William Halfond  ISSSE 2006  March 14th, 2006</p>
    <p>Presentation Outline</p>
    <p>SQL Injection Attacks  Intent</p>
    <p>Input Source</p>
    <p>Type</p>
    <p>Countermeasures</p>
    <p>Evaluation of countermeasures</p>
    <p>Lessons learned</p>
  </div>
  <div class="page">
    <p>William Halfond  ISSSE 2006  March 14th, 2006</p>
    <p>Intent</p>
    <p>Extracting data</p>
    <p>Adding or modifying data</p>
    <p>Performing denial of service</p>
    <p>Bypassing authentication</p>
    <p>Executing remote commands</p>
  </div>
  <div class="page">
    <p>William Halfond  ISSSE 2006  March 14th, 2006</p>
    <p>Sources of SQL Injection</p>
    <p>Injection through user input  Malicious strings in web forms.</p>
    <p>Injection through cookies  Modified cookie fields contain attack strings.</p>
    <p>Injection through server variables  Headers are manipulated to contain attack strings.</p>
    <p>Second-order injection  Trojan horse input seems fine until used in a</p>
    <p>certain situation.</p>
  </div>
  <div class="page">
    <p>William Halfond  ISSSE 2006  March 14th, 2006</p>
    <p>Second-Order Injection</p>
    <p>Attack does not occur when it first reaches the database, but when used later on.</p>
    <p>Input: admin-- ===&gt; admin\-</p>
    <p>queryString = &quot;UPDATE users SET pin=&quot; + newPin + &quot; WHERE userName=&quot; + userName + &quot; AND pin=&quot; + oldPin;</p>
    <p>queryString = UPDATE users SET pin=0 WHERE userName= admin-- AND pin=1;</p>
  </div>
  <div class="page">
    <p>William Halfond  ISSSE 2006  March 14th, 2006</p>
    <p>Types of SQL Injection</p>
    <p>Piggy-backed Queries</p>
    <p>Tautologies</p>
    <p>Alternate Encodings</p>
    <p>Inference</p>
    <p>Illegal/Logically Incorrect Queries</p>
    <p>Union Query</p>
    <p>Stored Procedures</p>
  </div>
  <div class="page">
    <p>William Halfond  ISSSE 2006  March 14th, 2006</p>
    <p>Type: Piggy-backed Queries</p>
    <p>Insert additional queries to be executed by the database.</p>
    <p>queryString = SELECT info FROM userTable WHERE + login= + login + ' AND pin= + pin;</p>
    <p>Input pin as 0; DROP database webApp</p>
    <p>queryString = SELECT info FROM userTable WHERE login=name' AND pin=0; DROP database webApp</p>
  </div>
  <div class="page">
    <p>William Halfond  ISSSE 2006  March 14th, 2006</p>
    <p>Type: Tautologies</p>
    <p>Create a query that always evaluates to true for entries in the database.</p>
    <p>queryString = SELECT info FROM userTable WHERE + login= + login + ' AND pin= + pin;</p>
    <p>Input login as user or 1=1 --</p>
    <p>queryString = SELECT info FROM userTable WHERE login=user or 1=1 --' AND pin=</p>
  </div>
  <div class="page">
    <p>William Halfond  ISSSE 2006  March 14th, 2006</p>
    <p>Type: Alternate Encodings</p>
    <p>Encode attacks in such a way as to avoid nave input filtering.</p>
    <p>queryString = SELECT info FROM userTable WHERE + login= + login + ' AND pin= + pin;</p>
    <p>Input pin as 0; declare @a char(20) select @a=0x73687574646f776e exec(@a)</p>
    <p>SELECT info FROM userTable WHERE login=user' AND pin= 0; declare @a char(20) select @a=0x73687574646f776e exec(@a)</p>
  </div>
  <div class="page">
    <p>William Halfond  ISSSE 2006  March 14th, 2006</p>
    <p>Type: Alternate Encodings</p>
    <p>SHUTDOWN</p>
  </div>
  <div class="page">
    <p>William Halfond  ISSSE 2006  March 14th, 2006</p>
    <p>Countermeasures</p>
    <p>Detection</p>
    <p>Detect attacks at runtime</p>
    <p>Prevention</p>
    <p>Augment Code</p>
    <p>Detect vulnerabilities in code</p>
    <p>Safe libraries</p>
    <p>T e ch</p>
    <p>n iq</p>
    <p>u e</p>
    <p>DB X</p>
  </div>
  <div class="page">
    <p>William Halfond  ISSSE 2006  March 14th, 2006</p>
    <p>Prevention Techniques</p>
    <p>Defensive Coding Best Practices</p>
    <p>Penetration Testing</p>
    <p>Static Analysis of Code</p>
    <p>Safe Development Libraries</p>
    <p>Proxy Filters</p>
  </div>
  <div class="page">
    <p>William Halfond  ISSSE 2006  March 14th, 2006</p>
    <p>Detection Techniques</p>
    <p>Anomaly Based Intrusion Detection</p>
    <p>DB</p>
    <p>Network</p>
  </div>
  <div class="page">
    <p>William Halfond  ISSSE 2006  March 14th, 2006</p>
    <p>Detection Techniques</p>
    <p>Anomaly Based Intrusion Detection</p>
    <p>Instruction Set Randomization Decrypt</p>
    <p>Proxy</p>
    <p>Server DB</p>
    <p>SELECT4287 SELECT</p>
  </div>
  <div class="page">
    <p>William Halfond  ISSSE 2006  March 14th, 2006</p>
    <p>Detection Techniques</p>
    <p>Anomaly Based Intrusion Detection</p>
    <p>Instruction Set Randomization</p>
    <p>Dynamic Tainting</p>
    <p>Model-based Checkers</p>
  </div>
  <div class="page">
    <p>William Halfond  ISSSE 2006  March 14th, 2006</p>
    <p>Dynamic Tainting</p>
    <p>Taint Policy Checker</p>
    <p>DB</p>
    <p>login = doe</p>
    <p>pin = 123</p>
    <p>SELECT info FROM users WHERE login= `doe AND pin= 123</p>
    <p>Taint Policy Checker</p>
    <p>DBX</p>
    <p>login = admin--</p>
    <p>pin = 0</p>
    <p>SELECT info FROM users WHERE login=admin --  AND pin=0</p>
  </div>
  <div class="page">
    <p>William Halfond  ISSSE 2006  March 14th, 2006</p>
    <p>Model-based Checkers: AMNESIA</p>
    <p>Basic Insights 1. Code contains enough information to</p>
    <p>accurately model all legitimate queries.</p>
    <p>Solution:</p>
    <p>Static analysis =&gt; build query models</p>
    <p>Runtime analysis =&gt; enforce models</p>
  </div>
  <div class="page">
    <p>William Halfond  ISSSE 2006  March 14th, 2006</p>
    <p>Model-based Checkers: AMNESIA</p>
    <p>SELECT info FROM userTable WHERE</p>
    <p>login</p>
    <p>=  guest</p>
    <p>login</p>
    <p>=    AND pin =</p>
    <p>String queryString = &quot;SELECT info FROM userTable WHERE &quot;;</p>
    <p>if ((! login.equals(&quot;&quot;)) &amp;&amp; (! pin.equals(&quot;&quot;))) {</p>
    <p>queryString += &quot;login='&quot; + login + &quot;' AND pin=&quot; + pin ;</p>
    <p>} else {</p>
    <p>queryString+=&quot;login='guest'&quot;;</p>
    <p>}</p>
    <p>ResultSet tempSet = stmt.execute(queryString);</p>
  </div>
  <div class="page">
    <p>William Halfond  ISSSE 2006  March 14th, 2006</p>
    <p>Model-based Checkers: AMNESIA</p>
    <p>SELECT info FROM userTable WHERE</p>
    <p>login</p>
    <p>=  guest</p>
    <p>login</p>
    <p>=    AND pin =</p>
    <p>SELECT info FROM userTable WHERE login =  doe AND pin = 123</p>
    <p>Normal Usage:</p>
  </div>
  <div class="page">
    <p>William Halfond  ISSSE 2006  March 14th, 2006</p>
    <p>Malicious Usage:</p>
    <p>SELECT info FROM userTable WHERE login =   AND pin = 0-- admin</p>
    <p>Model-based Checkers: AMNESIA</p>
    <p>SELECT info FROM userTable WHERE</p>
    <p>login</p>
    <p>=  guest</p>
    <p>login</p>
    <p>=    AND pin =</p>
  </div>
  <div class="page">
    <p>William Halfond  ISSSE 2006  March 14th, 2006</p>
    <p>Evaluation</p>
    <p>Qualitative vs. Quantitative</p>
    <p>Evaluate technique with respect to 1. Injection Sources</p>
  </div>
  <div class="page">
    <p>William Halfond  ISSSE 2006  March 14th, 2006</p>
    <p>Summary of Results</p>
    <p>Prevention Techniques  Most effective: Java Static Tainting [livshits05]</p>
    <p>and WebSSARI [Huang04]</p>
    <p>Not completely automated</p>
    <p>Runner-ups: Safe Query Objects [cook05], SQL DOM [mcclure05] (Safe development libraries)</p>
    <p>Require developers to learn and use new APIs</p>
    <p>Effective techniques automated enforcement of Best Practices</p>
  </div>
  <div class="page">
    <p>William Halfond  ISSSE 2006  March 14th, 2006</p>
    <p>Summary of Results</p>
    <p>Detection Techniques  Problems caused by Stored Procedures, Alternate</p>
    <p>Encodings</p>
    <p>Most accurate: AMNESIA [halfond05], SQLCheck [su06], SQLGuard [buehrer05] (Model-based checkers)</p>
    <p>Of those, only AMNESIA is fully automated  Runner-ups: CSSE [pietraszek05], Web App.</p>
    <p>Hardening [nguyen-tuong05] (Dynamic tainting)  Fully automated</p>
    <p>Require custom PHP runtime interpreter</p>
  </div>
  <div class="page">
    <p>William Halfond  ISSSE 2006  March 14th, 2006</p>
    <p>Conclusions and Lessons Learned</p>
    <p>b) Many goals</p>
    <p>c) Many types</p>
  </div>
  <div class="page">
    <p>William Halfond  ISSSE 2006  March 14th, 2006</p>
    <p>Questions</p>
    <p>Thank you.</p>
  </div>
  <div class="page">
    <p>William Halfond  ISSSE 2006  March 14th, 2006</p>
    <p>References</p>
    <p>V. B. Livshits and M. S. Lam. Finding Security Errors in Java Programs with Static Analysis. In Proceedings of the 14th Usenix Security Symposium, pages 271286, Aug. 2005.</p>
    <p>Y. Huang, F. Yu, C. Hang, C. H. Tsai, D. T. Lee, and S. Y. Kuo. Securing Web Application Code by Static Analysis and Runtime Protection. In Proceedings of the 12th International World Wide Web Conference (WWW 04), May 2004.</p>
    <p>W. R. Cook and S. Rai. Safe Query Objects: Statically Typed Objects as Remotely Executable Queries. In Proceedings of the 27th International Conference on Software Engineering (ICSE 2005), 2005.</p>
    <p>R. McClure and I. Kruger. SQL DOM: Compile Time Checking of Dynamic SQL Statements. In Proceedings of the 27th International Conference on Software Engineering (ICSE 05), pages 8896, 2005.</p>
    <p>W. G. Halfond and A. Orso. AMNESIA: Analysis and Monitoring for NEutralizing SQL-Injection Attacks. In Proceedings of the IEEE and ACM International Conference on Automated Software Engineering (ASE 2005), Long Beach, CA, USA, Nov 2005.</p>
    <p>Z. Su and G. Wassermann. The Essence of Command Injection Attacks in Web Applications. In The 33rd Annual Symposium on Principles of Programming Languages (POPL 2006), Jan. 2006.</p>
    <p>G. T. Buehrer, B. W. Weide, and P. A. G. Sivilotti. Using Parse Tree Validation to Prevent SQL Injection Attacks. In International Workshop on Software Engineering and Middleware (SEM), 2005.</p>
    <p>A. Nguyen-Tuong, S. Guarnieri, D. Greene, J. Shirley, and D. Evans. Automatically Hardening Web Applications Using Precise Tainting Information. In Twentieth IFIP International Information Security Conference (SEC 2005), May 2005.</p>
    <p>T. Pietraszek and C. V. Berghe. Defending Against Injection Attacks through Context-Sensitive String Evaluation. In Proceedings of Recent Advances in Intrusion Detection (RAID2005), 2005.</p>
  </div>
</Presentation>
