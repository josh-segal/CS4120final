<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Depot Cloud storage with minimal trust</p>
    <p>Prince Mahajan, Srinath Setty, Sangmin Lee, Allen Clement, Lorenzo Alvisi, Mike Dahlin, Michael Walfish</p>
    <p>The University of Texas at Austin</p>
  </div>
  <div class="page">
    <p>Cloud storage is appealing</p>
    <p>( )</p>
    <p>add to album</p>
    <p>show album</p>
    <p>Prince</p>
    <p>Mike</p>
    <p>CloudPic</p>
    <p>Storage Provider</p>
    <p>PUT(k, )</p>
    <p>GET(k)</p>
  </div>
  <div class="page">
    <p>Cloud storage is appealing</p>
    <p>( )</p>
    <p>add to album</p>
    <p>show album</p>
    <p>Prince</p>
    <p>Mike</p>
    <p>CloudPic</p>
    <p>Storage Provider</p>
    <p>PUT(k, )</p>
    <p>GET(k)</p>
  </div>
  <div class="page">
    <p>Failures cause undesired behavior</p>
    <p>Storage Provider</p>
    <p>Risks of cloud storage</p>
    <p>( )</p>
    <p>Prince</p>
    <p>Mike</p>
    <p>PUT(k, )</p>
    <p>GET(k)</p>
    <p>CloudPic</p>
  </div>
  <div class="page">
    <p>Failures cause undesired behavior</p>
    <p>Storage Provider</p>
    <p>Risks of cloud storage</p>
    <p>( )</p>
    <p>Prince</p>
    <p>Mike</p>
    <p>Op1: revoke Mikes access to album</p>
    <p>PUT(k, )</p>
    <p>GET(k)</p>
    <p>CloudPic</p>
  </div>
  <div class="page">
    <p>Failures cause undesired behavior</p>
    <p>Storage Provider</p>
    <p>Risks of cloud storage</p>
    <p>( )</p>
    <p>Prince</p>
    <p>Mike</p>
    <p>Op1: revoke Mikes access to album Op2:add to album</p>
    <p>PUT(k, )</p>
    <p>GET(k)</p>
    <p>CloudPic</p>
  </div>
  <div class="page">
    <p>Failures cause undesired behavior</p>
    <p>Storage Provider</p>
    <p>Risks of cloud storage</p>
    <p>( ) show album</p>
    <p>Prince</p>
    <p>Mike</p>
    <p>Op1: revoke Mikes access to album Op2:add to album</p>
    <p>PUT(k, )</p>
    <p>GET(k)</p>
    <p>CloudPic</p>
  </div>
  <div class="page">
    <p>Failures cause undesired behavior</p>
    <p>Storage Provider</p>
    <p>Risks of cloud storage</p>
    <p>( ) show album</p>
    <p>Prince</p>
    <p>Mike</p>
    <p>Op1: revoke Mikes access to album Op2:add to album</p>
    <p>PUT(k, )</p>
    <p>GET(k)</p>
    <p>CloudPic</p>
  </div>
  <div class="page">
    <p>We have a conflict</p>
    <p>Much to like Geographic replication</p>
    <p>Professional management</p>
    <p>Low cost</p>
    <p>Much to give pause Black box</p>
    <p>Complex</p>
    <p>Error-prone</p>
    <p>Our approach: A radical fault-tolerance stance</p>
  </div>
  <div class="page">
    <p>Cloud storage with minimal trust</p>
    <p>Eliminates trust for</p>
    <p>PUT availability Eventual consistency Staleness detection Dependency preservation</p>
    <p>Minimizes trust for GET availability Durability</p>
    <p>Storage Provider</p>
  </div>
  <div class="page">
    <p>Cloud storage with minimal trust</p>
    <p>Eliminates trust for</p>
    <p>PUT availability Eventual consistency Staleness detection Dependency preservation</p>
    <p>Minimizes trust for GET availability Durability</p>
    <p>Storage Provider</p>
  </div>
  <div class="page">
    <p>Cloud storage with minimal trust</p>
    <p>Eliminates trust for</p>
    <p>PUT availability Eventual consistency Staleness detection Dependency preservation</p>
    <p>Minimizes trust for GET availability Durability</p>
    <p>Storage Provider</p>
  </div>
  <div class="page">
    <p>Cloud storage with minimal trust</p>
    <p>Eliminates trust for</p>
    <p>PUT availability Eventual consistency Staleness detection Dependency preservation</p>
    <p>Minimizes trust for GET availability Durability</p>
    <p>Storage Provider</p>
  </div>
  <div class="page">
    <p>Rest of the talk</p>
    <p>I. How does Depot work?</p>
    <p>II. What properties does it provide?</p>
    <p>III. How much does it cost?</p>
  </div>
  <div class="page">
    <p>Depot in a nutshell</p>
    <p>Ensuring high availability Multiple servers Dont enforce sequential (CAP tradeoff) Fall back on client-client communication</p>
    <p>Storage Provider</p>
  </div>
  <div class="page">
    <p>Depot in a nutshell</p>
    <p>GET(k)</p>
    <p>( )</p>
    <p>PUT(k, )</p>
    <p>Preventing omission, reordering Add metadata to PUTs Add local state to nodes Add checks on received metadata</p>
    <p>Storage Provider</p>
  </div>
  <div class="page">
    <p>Depot in a nutshell</p>
    <p>GET(k)</p>
    <p>( )</p>
    <p>PUT(k, )</p>
    <p>Preventing omission, reordering Add metadata to PUTs Add local state to nodes Add checks on received metadata</p>
    <p>Storage Provider</p>
  </div>
  <div class="page">
    <p>Depot in a nutshell</p>
    <p>GET(k)</p>
    <p>( )</p>
    <p>PUT(k, )</p>
    <p>Preventing omission, reordering Add metadata to PUTs Add local state to nodes Add checks on received metadata</p>
    <p>Storage Provider</p>
  </div>
  <div class="page">
    <p>Depot in a nutshell</p>
    <p>GET(k)</p>
    <p>( )</p>
    <p>PUT(k, )</p>
    <p>Preventing omission, reordering Add metadata to PUTs Add local state to nodes Add checks on received metadata</p>
    <p>Storage Provider</p>
  </div>
  <div class="page">
    <p>Depot in a nutshell</p>
    <p>GET(k)</p>
    <p>( )</p>
    <p>PUT(k, )</p>
    <p>Preventing omission, reordering Add metadata to PUTs Add local state to nodes Add checks on received metadata</p>
    <p>Storage Provider</p>
  </div>
  <div class="page">
    <p>Depot in a nutshell</p>
    <p>GET(k)</p>
    <p>( )</p>
    <p>PUT(k, )</p>
    <p>Preventing omission, reordering Add metadata to PUTs Add local state to nodes Add checks on received metadata</p>
    <p>Storage Provider</p>
  </div>
  <div class="page">
    <p>Depot in a nutshell</p>
    <p>GET(k)</p>
    <p>( )</p>
    <p>PUT(k, )</p>
    <p>Preventing omission, reordering Add metadata to PUTs Add local state to nodes Add checks on received metadata</p>
    <p>Storage Provider</p>
  </div>
  <div class="page">
    <p>Depot in a nutshell</p>
    <p>GET(k)</p>
    <p>( )</p>
    <p>PUT(k, )</p>
    <p>Preventing omission, reordering Add metadata to PUTs Add local state to nodes Add checks on received metadata</p>
    <p>Storage Provider</p>
  </div>
  <div class="page">
    <p>Depot in a nutshell</p>
    <p>GET(k)</p>
    <p>( )</p>
    <p>PUT(k, )</p>
    <p>Preventing omission, reordering Add metadata to PUTs Add local state to nodes Add checks on received metadata</p>
    <p>Storage Provider</p>
  </div>
  <div class="page">
    <p>Protecting Consistency</p>
    <p>(1) Update metadata {nodeID, key, H(value), LocalClock, History}nodeID</p>
    <p>(2) Nodes store update metadata Logically: Store all previous updates [See paper for garbage collection]</p>
  </div>
  <div class="page">
    <p>(3) Local checks Accept an update u created by N if</p>
    <p>No omissions All updates in us History are also in local state</p>
    <p>Dont modify history u is newer than any prior update by N</p>
    <p>Protecting Consistency</p>
  </div>
  <div class="page">
    <p>(3) Local checks Accept an update u created by N if</p>
    <p>No omissions All updates in us History are also in local state</p>
    <p>Dont modify history u is newer than any prior update by N</p>
    <p>Protecting Consistency</p>
  </div>
  <div class="page">
    <p>Faults can cause forks</p>
    <p>Fork: Expose inconsistent views to different nodes Each nodes view locally consistent</p>
    <p>F BA</p>
  </div>
  <div class="page">
    <p>Forks partition correct nodes Correct nodes future updates tainted Receivers update checks fail</p>
    <p>Forks prevent eventual consistency Inconsistently tainted nodes cannot communicate</p>
    <p>Faults can cause forks F BA</p>
  </div>
  <div class="page">
    <p>Forks partition correct nodes Correct nodes future updates tainted Receivers update checks fail</p>
    <p>Forks prevent eventual consistency Inconsistently tainted nodes cannot communicate</p>
    <p>Faults can cause forks F BA</p>
  </div>
  <div class="page">
    <p>Join forks for eventual consistency</p>
    <p>Convert faults into concurrency Faulty node --&gt; Two (correct) virtual nodes Correct nodes can accept subsequent updates Correct nodes can evict faulty node</p>
    <p>BA F</p>
    <p>F</p>
  </div>
  <div class="page">
    <p>Faults v. Concurrency Converting faults into concurrency</p>
    <p>Allows correct nodes to converge</p>
    <p>Concurrency can introduce conflicts Conflict: Concurrent updates to same object</p>
    <p>Problem not introduced by Depot Already possible due to decentralized server</p>
    <p>Applications built for high availability (such as Amazon S3) allow concurrent writes</p>
    <p>Depot exposes conflicts to applications GET returns set of most recent concurrent updates</p>
  </div>
  <div class="page">
    <p>Summary: Basic Protocol</p>
    <p>Protect safety Local checks</p>
    <p>Protect liveness Joining forks Reduce failures to concurrency</p>
    <p>Fork-join-causal consistency A novel consistency semantics Suitable for environments with minimal trust</p>
  </div>
  <div class="page">
    <p>Rest of the talk</p>
    <p>I. How does Depot work?</p>
    <p>II. What properties does Depot provide?</p>
    <p>III. How much does it cost?</p>
  </div>
  <div class="page">
    <p>Depot Properties Dimension</p>
    <p>Safety/ Liveness</p>
    <p>Property Correct Nodes</p>
    <p>Required</p>
    <p>Consistency Safety Safety Safety</p>
    <p>Fork-Join Causal Bounded Staleness</p>
    <p>Eventual Consistency (s)</p>
    <p>Any Subset Any Subset Any Subset</p>
    <p>Availability Liveness Liveness Liveness Liveness</p>
    <p>Eventual consistency (l) Always write</p>
    <p>Always exchange Read availability/</p>
    <p>durability</p>
    <p>Any Subset Any Subset Any Subset</p>
    <p>A correct node has data</p>
    <p>Integrity Safety Only auth. PUT Any Subset</p>
    <p>Eviction Safety Valid eviction Any Subset</p>
  </div>
  <div class="page">
    <p>GET Availability, Durability</p>
    <p>Ideal Trust Only Yourself Cant reach that goal</p>
    <p>Depot 1. Minimize required number of correct nodes</p>
    <p>Data can safely flow via any path If any correct node has data, GET eventually succeeds</p>
  </div>
  <div class="page">
    <p>Contingency Plan Protect against correlated SSP failure</p>
    <p>Availability event or permanent failure</p>
    <p>Key: Storage servers are untrusted Pick any node with low correlation to SSP Prototype:</p>
    <p>Client that issues PUT keeps copy of data Gossiped update metadata sufficient to route GET requests when SSP unavailable</p>
    <p>Alternatives: Private cloud storage node (e.g., Eucalyptus/Walrus) Another external SSP</p>
  </div>
  <div class="page">
    <p>Depot Tolerates SSP Failure</p>
    <p>Complete cloud failure at 300s Depots GET, PUT continue Depots staleness increases</p>
    <p>S ta</p>
    <p>le n e s s (</p>
    <p>s e c )</p>
    <p>Time (sec)</p>
    <p>Depot SSP</p>
  </div>
  <div class="page">
    <p>Rest of the talk</p>
    <p>I. How does Depot work?</p>
    <p>II. What properties does Depot provide?</p>
    <p>III. How much does Depot cost? Latency, resources, dollars</p>
  </div>
  <div class="page">
    <p>How much does it cost?</p>
    <p>Latency cost Compare GET and PUT latencies</p>
    <p>Resource cost Processing (client and server) Network (client-server and server-server) Storage (client and server)</p>
    <p>Dollar cost Weighted Processing + Network + Storage</p>
  </div>
  <div class="page">
    <p>Sources of overhead in Depot</p>
    <p>SSP PUT</p>
    <p>GET</p>
  </div>
  <div class="page">
    <p>Sources of overhead in Depot</p>
    <p>SSP PUT</p>
    <p>GET</p>
    <p>metadata check = SHA256 check + RSA verify</p>
    <p>+ history check</p>
    <p>metadata = signature</p>
    <p>+ partial VV + history hash</p>
    <p>data check = SHA256 check</p>
  </div>
  <div class="page">
    <p>Setup 12 nodes on local Emulab</p>
    <p>Each client issues 1 request/sec Measure latency, per-request cost</p>
    <p>Emulate traditional cloud storage Servers implemented Depot without any checks Clients dont receive any metadata</p>
  </div>
  <div class="page">
    <p>Depot adds little latency</p>
    <p>Depot overheads on GETs are very small Overheads on PUTs are modest</p>
    <p>GET (10KB) PUT (10KB)</p>
    <p>L a te</p>
    <p>n c y (</p>
    <p>m s )</p>
    <p>B a s e</p>
    <p>B a s e +</p>
    <p>H a s h</p>
    <p>B a s e +</p>
    <p>H a s h +</p>
    <p>S ig</p>
    <p>n</p>
    <p>D e p o t</p>
  </div>
  <div class="page">
    <p>Depot GET overheads are modest</p>
    <p>NW (C-S) (KB)</p>
    <p>CPU (C) (ms)</p>
    <p>CPU (S) (ms)</p>
    <p>C o</p>
    <p>s t/</p>
    <p>(D e</p>
    <p>p o</p>
    <p>t C</p>
    <p>o s t)</p>
    <p>B a</p>
    <p>s e</p>
    <p>B +</p>
    <p>H a</p>
    <p>s h</p>
    <p>B +</p>
    <p>H +</p>
    <p>S ig</p>
    <p>n D</p>
    <p>e p</p>
    <p>o t</p>
  </div>
  <div class="page">
    <p>Depot PUT overheads are modest</p>
    <p>Metrics that didnt change are omitted. E.g. Storage(S), NW(S-S)</p>
    <p>Metadata transfer=&gt;NW cost Metadata verification=&gt;CPU cost Metadata store=&gt;Storage cost</p>
    <p>NW (C-S) (KB)</p>
    <p>Stor/Ver (C) (KB)</p>
    <p>CPU (C) (ms)</p>
    <p>CPU (S) (ms)</p>
    <p>C o s t/ (D</p>
    <p>e p o t C</p>
    <p>o s t)</p>
    <p>B a s e</p>
    <p>B +</p>
    <p>H a s h</p>
    <p>B +</p>
    <p>H +</p>
    <p>S ig</p>
    <p>n D</p>
    <p>e p o t</p>
  </div>
  <div class="page">
    <p>Cost Model</p>
    <p>Based (loosely) on current cloud pricing</p>
    <p>Client-Server NW Bandwidth $0.10/GB</p>
    <p>Server-Server NW Bandwidth $0.01/GB</p>
    <p>Disk Storage $0.025 GB/month</p>
    <p>CPU Processing $0.10/hour</p>
  </div>
  <div class="page">
    <p>Depot dollar costs are small</p>
    <p>GET (TB) PUT (TB) Store (TB-mo.)</p>
    <p>C o s t ($</p>
    <p>/T B</p>
    <p>)</p>
    <p>B a s e</p>
    <p>B +</p>
    <p>H a s h</p>
    <p>B +</p>
    <p>H +</p>
    <p>S ig</p>
    <p>n D</p>
    <p>e p o t</p>
  </div>
  <div class="page">
    <p>Related Work Fork-based systems</p>
    <p>SUNDR [Li et al. OSDI 2004] BFT2F [Li and Mazieres NSDI 2007] SPORC [Feldman et al. OSDI 2010] Venus [Shraer et al. CCSW 2010]</p>
    <p>Quorums and state machines BQS [Malkhi and Reiter Dist. Comp. 1998] PBFT [Castro and Liskov TOCS 2002] Q/U [El-Malek et al. SOSP 2005] HQ [Cowling and Liskov OSDI 2006] Zyzzyva [Kotla et al. SOSP 2007]</p>
    <p>Many others Monday, October 11, 2010</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Depot: Cloud storage with minimal trust</p>
    <p>Radical fault tolerance Any node could fail in any way Eliminate trust for consistency, staleness, update exchange, eviction, ...</p>
    <p>Any subset of correct clients get these properties</p>
    <p>Minimize trust for GET availability, durability GET succeeds if any correct, reachable node has data Protocol hooks to make this likely</p>
  </div>
</Presentation>
