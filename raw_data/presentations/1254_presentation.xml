<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>SPINFER: Inferring Semantic Patches for the Linux Kernel</p>
    <p>Lucas Serrano, Van-Anh Nguyen, Ferdian Thung Lingxiao Jiang, David Lo, Julia Lawall, Gilles Muller</p>
  </div>
  <div class="page">
    <p>Maintenance of the Linux kernel</p>
    <p>Maintenance tasks are very common in all software projects.</p>
    <p>These tasks can consist of:</p>
    <p>Refactoring portions of code  Cleaning dead code  Migrating APIs to new version</p>
    <p>But maintaining the Linux kernel is particularly hard:</p>
    <p>18M lines of C code  13M lines of driver code  The same kernel API can be used by thousands of files</p>
    <p>Even simple API migrations can be difficult to do</p>
  </div>
  <div class="page">
    <p>Maintenance of the Linux kernel</p>
    <p>Maintenance tasks are very common in all software projects.</p>
    <p>These tasks can consist of:</p>
    <p>Refactoring portions of code  Cleaning dead code  Migrating APIs to new version</p>
    <p>But maintaining the Linux kernel is particularly hard:</p>
    <p>18M lines of C code  13M lines of driver code  The same kernel API can be used by thousands of files</p>
    <p>Even simple API migrations can be difficult to do</p>
  </div>
  <div class="page">
    <p>Maintenance of the Linux kernel</p>
    <p>Maintenance tasks are very common in all software projects.</p>
    <p>These tasks can consist of:</p>
    <p>Refactoring portions of code  Cleaning dead code  Migrating APIs to new version</p>
    <p>But maintaining the Linux kernel is particularly hard:</p>
    <p>18M lines of C code  13M lines of driver code  The same kernel API can be used by thousands of files</p>
    <p>Even simple API migrations can be difficult to do 2</p>
  </div>
  <div class="page">
    <p>Motivating Example</p>
  </div>
  <div class="page">
    <p>Example of API migration</p>
    <p>Example of low-resolution timer structure initialization:</p>
    <p>Originally with the init_timer function  Since 2006 with setup_timer</p>
    <p>Old function was not removed, the migration was not mandatory.</p>
  </div>
  <div class="page">
    <p>Example of API migration</p>
    <p>Example of low-resolution timer structure initialization:</p>
    <p>Originally with the init_timer function  Since 2006 with setup_timer</p>
    <p>Old function was not removed, the migration was not mandatory.</p>
  </div>
  <div class="page">
    <p>init_timer migration</p>
    <p>d r i v e r s / atm / n i c s t a r . c @@ -284 ,10 +284 ,8 @@ s t a t i c int _ _ i n i t n i c s t a r _ i n i t ( void ) - i n i t _ t i m e r (&amp; n s _ t i m e r ) ; + s e t u p _ t i m e r (&amp; ns_timer , ns_poll , 0 UL ) ;</p>
    <p>n s _ t i m e r . e x p i r e s = j i f f i e s + N S _ P O L L _ P E R I O D ; - n s _ t i m e r . data = 0 UL ; - n s _ t i m e r . f u n c t i o n = n s _ p o l l ;</p>
    <p>d r i v e r s / gpu / drm / o m a p d r m / dss / dsi . c @@ -5449 ,9 +5449 ,7 @@ s t a t i c int d s i _ b i n d ( s t r u c t d e v i c e * dev , - i n i t _ t i m e r (&amp; dsi - &gt; t e _ t i m e r ) ; - dsi - &gt; t e _ t i m e r . f u n c t i o n = d s i _ t e _ t i m e o u t ; - dsi - &gt; t e _ t i m e r . data = 0; + s e t u p _ t i m e r (&amp; dsi - &gt; te_timer , d s i _ t e _ t i m e o u t , 0) ;</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Automation</p>
    <p>In 2018 these interfaces were considered insecure and were both replaced.</p>
    <p>But at this time API usage was in inconsistent state:</p>
    <p>60% using the new setup_timer  40% using the old init_timer</p>
    <p>Could the transformation have been done automatically?</p>
  </div>
  <div class="page">
    <p>Automation</p>
    <p>In 2018 these interfaces were considered insecure and were both replaced.</p>
    <p>But at this time API usage was in inconsistent state:</p>
    <p>60% using the new setup_timer  40% using the old init_timer</p>
    <p>Could the transformation have been done automatically?</p>
  </div>
  <div class="page">
    <p>First contribution: Taxonomy of transformation challenges</p>
  </div>
  <div class="page">
    <p>Related work</p>
    <p>There are a lot of tools to perform API migration by learning from examples: REFAZER, LASE, AppEvolve, Meditor, . . .</p>
    <p>But it was hard to know what kind of transformation they could handle.</p>
    <p>Our first contribution is to classify transformation challenges.</p>
  </div>
  <div class="page">
    <p>Transformation challenges taxonomy</p>
    <p>Challenges can be organized in 5 main categories:</p>
  </div>
  <div class="page">
    <p>Transformation challenges taxonomy</p>
    <p>Challenges can be organized in 5 main categories:</p>
  </div>
  <div class="page">
    <p>Transformation challenges taxonomy</p>
    <p>Challenges can be organized in 5 main categories:</p>
  </div>
  <div class="page">
    <p>Transformation challenges taxonomy</p>
    <p>Challenges can be organized in 5 main categories:</p>
  </div>
  <div class="page">
    <p>Transformation challenges taxonomy</p>
    <p>Challenges can be organized in 5 main categories:</p>
  </div>
  <div class="page">
    <p>Transformation challenges taxonomy</p>
    <p>Challenges can be organized in 5 main categories:</p>
  </div>
  <div class="page">
    <p>Need for a new tool</p>
    <p>We found that all tools cannot handle transformation that:</p>
    <p>Require control-flow dependencies  Have multiple variants</p>
    <p>Both of these constraints are common in Linux kernel transformations.</p>
    <p>And they were necessary for our timer example.</p>
    <p>Moreover transformation rules used by these tools are not exposed Meaning that developers cannot check if the transformation will be correct.</p>
  </div>
  <div class="page">
    <p>Need for a new tool</p>
    <p>We found that all tools cannot handle transformation that:</p>
    <p>Require control-flow dependencies  Have multiple variants</p>
    <p>Both of these constraints are common in Linux kernel transformations.</p>
    <p>And they were necessary for our timer example.</p>
    <p>Moreover transformation rules used by these tools are not exposed Meaning that developers cannot check if the transformation will be correct.</p>
  </div>
  <div class="page">
    <p>Need for a new tool</p>
    <p>We found that all tools cannot handle transformation that:</p>
    <p>Require control-flow dependencies  Have multiple variants</p>
    <p>Both of these constraints are common in Linux kernel transformations.</p>
    <p>And they were necessary for our timer example.</p>
    <p>Moreover transformation rules used by these tools are not exposed Meaning that developers cannot check if the transformation will be correct.</p>
  </div>
  <div class="page">
    <p>Second contribution: Spinfer</p>
  </div>
  <div class="page">
    <p>A tool suitable for the Linux kernel</p>
    <p>To perform API migration in the Linux kernel we want a tool that:</p>
    <p>Learns transformation from examples  Handles both control-flow dependencies and transformation variants  Exposes transformation rules to developers</p>
  </div>
  <div class="page">
    <p>Transformation rules</p>
    <p>Fortunately, a transformation rules language is already used in the Linux kernel.</p>
    <p>Since 2008 Coccinelle rules are used to perform some transformations.</p>
    <p>Even used in our motivating example.</p>
  </div>
  <div class="page">
    <p>Coccinelle</p>
    <p>SP Coccinelle a.c</p>
    <p>b.c</p>
    <p>c.c</p>
    <p>d.c</p>
    <p>Semantic Patch Automatically generated diffs</p>
  </div>
  <div class="page">
    <p>Semantic patch</p>
    <p>@@ expression E0, E1, E2; @@ - init_timer(E0); + setup_timer(E0, E1, E2); ... - E0.data = E2; - E0.function = E1;</p>
    <p>Generates diffs like this:</p>
    <p>- init_timer(&amp;ns_timer); + setup_timer(&amp;ns_timer, ns_poll, 0UL);</p>
    <p>ns_timer.expires = jiffies + NS_P_P; - ns_timer.data = 0UL; - ns_timer.function = ns_poll;</p>
  </div>
  <div class="page">
    <p>Semantic patch</p>
    <p>@@ expression E0, E1, E2; @@ - init_timer(E0); + setup_timer(E0, E1, E2); ... - E0.data = E2; - E0.function = E1;</p>
    <p>Generates diffs like this:</p>
    <p>- init_timer(&amp;ns_timer); + setup_timer(&amp;ns_timer, ns_poll, 0UL);</p>
    <p>ns_timer.expires = jiffies + NS_P_P; - ns_timer.data = 0UL; - ns_timer.function = ns_poll;</p>
  </div>
  <div class="page">
    <p>Our approach: Spinfer</p>
    <p>foo.c</p>
    <p>bar.c</p>
    <p>Spinfer</p>
    <p>SP Coccinelle a.c</p>
    <p>b.c</p>
    <p>c.c</p>
    <p>d.c</p>
    <p>Example files</p>
    <p>Semantic patch Automatically generated diffs</p>
  </div>
  <div class="page">
    <p>Our approach: Spinfer</p>
    <p>foo.c</p>
    <p>bar.c</p>
    <p>Spinfer SP Coccinelle a.c</p>
    <p>b.c</p>
    <p>c.c</p>
    <p>d.c</p>
    <p>Example files Semantic patch Automatically generated diffs</p>
  </div>
  <div class="page">
    <p>Infering semantic patches</p>
    <p>How to convert transformation instances. . .</p>
    <p>- init_timer(&amp;ns_timer); + setup_timer(&amp;ns_timer, ns_poll, 0UL);</p>
    <p>ns_timer.expires = jiffies + NS_P_P; - ns_timer.data = 0UL; - ns_timer.function = ns_poll;</p>
    <p>. . . to a semantic patch.</p>
    <p>@@ expression E0, E1, E2; @@ - init_timer(E0); + setup_timer(E0, E1, E2); ... - E0.data = E2; - E0.function = E1;</p>
  </div>
  <div class="page">
    <p>- init_timer(&amp;ns_timer); + setup_timer(&amp;ns_timer, ns_poll, 0UL);</p>
    <p>ns_timer.expires = jiffies + NS_POLL_PERIOD; - ns_timer.data = 0UL; - ns_timer.function = ns_poll;</p>
    <p>- init_timer(&amp;dsi-&gt;te_timer); - dsi-&gt;te_timer.function = dsi_te_timeout; - dsi-&gt;te_timer.data = 0; + setup_timer(&amp;dsi-&gt;te_timer, dsi_te_timeout, 0);</p>
  </div>
  <div class="page">
    <p>- init_timer(&amp;ns_timer); + setup_timer(&amp;ns_timer, ns_poll, 0UL);</p>
    <p>ns_timer.expires = jiffies + NS_POLL_PERIOD; - ns_timer.data = 0UL; - ns_timer.function = ns_poll;</p>
    <p>- init_timer(&amp;dsi-&gt;te_timer); - dsi-&gt;te_timer.function = dsi_te_timeout; - dsi-&gt;te_timer.data = 0; + setup_timer(&amp;dsi-&gt;te_timer, dsi_te_timeout, 0);</p>
  </div>
  <div class="page">
    <p>- init_timer(&amp;ns_timer); - init_timer(&amp;dsi-&gt;te_timer);</p>
    <p>+ setup_timer(&amp;ns_timer, ns_poll, 0UL); + setup_timer(&amp;dsi-&gt;te_timer, dsi_te_timeout, 0);</p>
    <p>- ns_timer.data = 0UL; - dsi-&gt;te_timer.data = 0;</p>
    <p>- ns_timer.function = ns_poll; - dsi-&gt;te_timer.function = dsi_te_timeout;</p>
  </div>
  <div class="page">
    <p>- init_timer(&amp;ns_timer); - init_timer(&amp;dsi-&gt;te_timer);</p>
    <p>+ setup_timer(&amp;ns_timer, ns_poll, 0UL); + setup_timer(&amp;dsi-&gt;te_timer, dsi_te_timeout, 0);</p>
    <p>- ns_timer.data = 0UL; - dsi-&gt;te_timer.data = 0;</p>
    <p>- ns_timer.function = ns_poll; - dsi-&gt;te_timer.function = dsi_te_timeout;</p>
    <p>- init_timer(Expr);</p>
    <p>+ setup_timer(Expr, Expr, Expr);</p>
    <p>- Expr.data = Expr;</p>
    <p>- Expr.function = Expr;</p>
  </div>
  <div class="page">
    <p>- init_timer(Expr); - Expr.function = Expr;</p>
    <p>- Expr.data = Expr; + setup_timer(Expr, Expr, Expr);</p>
    <p>It extends rules using control-flow dependencies</p>
    <p>- init_timer(Expr);</p>
    <p>... - Expr.function = Expr;</p>
  </div>
  <div class="page">
    <p>- init_timer(Expr); - Expr.function = Expr;</p>
    <p>- Expr.data = Expr; + setup_timer(Expr, Expr, Expr);</p>
    <p>Spinfer takes a first abstraction</p>
    <p>- init_timer(Expr);</p>
    <p>... - Expr.function = Expr;</p>
  </div>
  <div class="page">
    <p>- init_timer(Expr); - Expr.function = Expr;</p>
    <p>- Expr.data = Expr; + setup_timer(Expr, Expr, Expr);</p>
    <p>It extends rules using control-flow dependencies</p>
    <p>- init_timer(Expr); ... - Expr.function = Expr;</p>
  </div>
  <div class="page">
    <p>When there are inconsistencies in control-flow, rules are split:</p>
    <p>- init_timer(Expr); ... - Expr.data = Expr; - Expr.function = Expr;</p>
    <p>- init_timer(Expr); ... - Expr.function = Expr; - Expr.data = Expr;</p>
    <p>This allows Spinfer to discover transformation variants.</p>
  </div>
  <div class="page">
    <p>This process goes on until all abstractions are exhausted.</p>
    <p>- init_timer(Expr); + setup_timer(Expr, Expr, Expr); ... - Expr.data = Expr; - Expr.function = Expr;</p>
    <p>- init_timer(Expr); + setup_timer(Expr, Expr, Expr); ... - Expr.function = Expr; - Expr.data = Expr;</p>
  </div>
  <div class="page">
    <p>To obtain a valid rule Spinfer transforms abstractions into metavariables:</p>
    <p>A unique name is chosen for each set of terms found in the examples.</p>
    <p>- init_timer(Expr); + setup_timer(Expr, Expr, Expr); ... - Expr.data = Expr; - Expr.function = Expr;</p>
    <p>@@ expression E0, E1, E2; @@ - init_timer(E0); + setup_timer(E0, E1, E2); ... - E0.data = E2; - E0.function = E1;</p>
  </div>
  <div class="page">
    <p>Obtained semantic patch</p>
    <p>Spinfer obtained these two rules:</p>
    <p>@@ expression E0, E1, E2; @@ - init_timer(E0); + setup_timer(E0, E1, E2); ... - E0.data = E2; - E0.function = E1;</p>
    <p>@@ expression E0, E1, E2; @@ - init_timer(E0); + setup_timer(E0, E1, E2); ... - E0.function = E1; - E0.data = E2;</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>We evaluated Spinfer by learning real Linux kernel transformations.</p>
    <p>We extracted two datasets of 40 groups of transformation each:</p>
    <p>One selected to be challenging  Another randomly sampled from changes in 2018</p>
    <p>We compared the results produced by Spinfer generated semantic patches to the results produced by a human written semantic patch.</p>
  </div>
  <div class="page">
    <p>Results on the randomly sampled dataset</p>
    <p>Spinfer was learning on one part of the changes and evaluated on the other part.</p>
    <p>Learning set was 10 files or half the dataset.</p>
    <p>Two metrics:</p>
    <p>Precision: fraction of changes produced that were correct  Recall: fraction of needed changes that were produced</p>
    <p>Spinfer obtained 87% precision and 62% recall in average.</p>
    <p>In 8 cases Spinfer obtained a perfect semantic patch.</p>
    <p>More experiments on the paper</p>
  </div>
  <div class="page">
    <p>Results on the randomly sampled dataset</p>
    <p>Spinfer was learning on one part of the changes and evaluated on the other part.</p>
    <p>Learning set was 10 files or half the dataset.</p>
    <p>Two metrics:</p>
    <p>Precision: fraction of changes produced that were correct  Recall: fraction of needed changes that were produced</p>
    <p>Spinfer obtained 87% precision and 62% recall in average.</p>
    <p>In 8 cases Spinfer obtained a perfect semantic patch.</p>
    <p>More experiments on the paper</p>
  </div>
  <div class="page">
    <p>Results on the randomly sampled dataset</p>
    <p>Spinfer was learning on one part of the changes and evaluated on the other part.</p>
    <p>Learning set was 10 files or half the dataset.</p>
    <p>Two metrics:</p>
    <p>Precision: fraction of changes produced that were correct  Recall: fraction of needed changes that were produced</p>
    <p>Spinfer obtained 87% precision and 62% recall in average.</p>
    <p>In 8 cases Spinfer obtained a perfect semantic patch.</p>
    <p>More experiments on the paper</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Spinfer learns semantic patches from examples.</p>
    <p>It can learn transformations variants with many constraints such as:</p>
    <p>Control-flow dependencies  Data-flow dependencies  Transformation variants</p>
    <p>It uses code clustering to find similar pieces of code and abstract them.</p>
    <p>Abstractions are assembled using control-flow information.</p>
    <p>Produced semantic patches can be checked and fixed by developers.</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Spinfer learns semantic patches from examples.</p>
    <p>It can learn transformations variants with many constraints such as:</p>
    <p>Control-flow dependencies  Data-flow dependencies  Transformation variants</p>
    <p>It uses code clustering to find similar pieces of code and abstract them.</p>
    <p>Abstractions are assembled using control-flow information.</p>
    <p>Produced semantic patches can be checked and fixed by developers.</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Spinfer learns semantic patches from examples.</p>
    <p>It can learn transformations variants with many constraints such as:</p>
    <p>Control-flow dependencies  Data-flow dependencies  Transformation variants</p>
    <p>It uses code clustering to find similar pieces of code and abstract them.</p>
    <p>Abstractions are assembled using control-flow information.</p>
    <p>Produced semantic patches can be checked and fixed by developers.</p>
  </div>
  <div class="page">
    <p>Closing</p>
    <p>Thank you If you have more questions: Lucas.Serrano@lip6.fr</p>
  </div>
</Presentation>
