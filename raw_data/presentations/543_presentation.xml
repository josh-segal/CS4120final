<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Petros Maniatis (Intel), Mike Dietz (Rice), Babi Papamanthou (Brown)</p>
    <p>MOMMIE KNOWS BEST SYSTEMATIC OPTIMIZATIONS FOR VERIFIABLE DISTRIBUTED ALGORITHMS</p>
  </div>
  <div class="page">
    <p>Abstraction</p>
    <p>M O M M I E @ H O T O S 2</p>
  </div>
  <div class="page">
    <p>M O M M I E @ H O T O S 3</p>
  </div>
  <div class="page">
    <p>M O M M I E @ H O T O S 4</p>
  </div>
  <div class="page">
    <p>Consistency Security Privacy Fault tolerance Correctness</p>
    <p>Data structures Cryptography Ordering Representation Retransmissions</p>
    <p>M O M M I E @ H O T O S 5</p>
  </div>
  <div class="page">
    <p>M O M M I E @ H O T O S 6</p>
  </div>
  <div class="page">
    <p>M O M M I E @ H O T O S 7</p>
  </div>
  <div class="page">
    <p>A BRIEF ILLUSTRATION</p>
  </div>
  <div class="page">
    <p>Primary</p>
    <p>Client</p>
    <p>Backup</p>
    <p>Req()</p>
    <p>M O M M I E @ H O T O S 9</p>
  </div>
  <div class="page">
    <p>Primary</p>
    <p>Order(n, Req)</p>
    <p>O rd</p>
    <p>er(n , R</p>
    <p>eq )</p>
    <p>Client</p>
    <p>Backup M O M M I E @ H O T O S 10</p>
  </div>
  <div class="page">
    <p>Primary</p>
    <p>Reply(Req, Res) Res()</p>
    <p>Reply (Req, Res) Res()</p>
    <p>Client</p>
    <p>Backup M O M M I E @ H O T O S 11</p>
  </div>
  <div class="page">
    <p>Primary</p>
    <p>Order(n, Req)</p>
    <p>O rd</p>
    <p>er(n , R</p>
    <p>eq )</p>
    <p>Reply(Req, Res) Res()</p>
    <p>Reply (Req, Res) Res()</p>
    <p>Client</p>
    <p>Backup</p>
    <p>Req() 1</p>
    <p>M O M M I E @ H O T O S 12</p>
  </div>
  <div class="page">
    <p>Primary</p>
    <p>Order(n, Req)</p>
    <p>O rd</p>
    <p>er(n , R</p>
    <p>eq )</p>
    <p>Reply(Req, Res) Res()</p>
    <p>Reply (Req, Res) Res()</p>
    <p>Client</p>
    <p>Backup</p>
    <p>Req() 1</p>
    <p>EVENT COORDINATION</p>
  </div>
  <div class="page">
    <p>Primary</p>
    <p>Order(n, Req)</p>
    <p>O rd</p>
    <p>er(n , R</p>
    <p>eq )</p>
    <p>Reply(Req, Res) Res()</p>
    <p>Reply (Req, Res) Res()</p>
    <p>Client</p>
    <p>Backup</p>
    <p>Req() 1</p>
    <p>AUTHENTICATION &amp; INTEGRITY</p>
  </div>
  <div class="page">
    <p>Primary</p>
    <p>Order(n, Req)</p>
    <p>O rd</p>
    <p>er(n , R</p>
    <p>eq )</p>
    <p>Reply(Req, Res) Res()</p>
    <p>Reply (Req, Res) Res()</p>
    <p>Client</p>
    <p>Backup</p>
    <p>Req() 1</p>
    <p>TRANSPORT DETAILS</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Composition</p>
    <p>M O M M I E @ H O T O S 19</p>
  </div>
  <div class="page">
    <p>* OPTIMIZED MESSAGING MIDDLEWARE FOR INSECURE</p>
    <p>ENVIRONMENTS Thats MOMMIE for you</p>
  </div>
  <div class="page">
    <p>S em</p>
    <p>an ti cs</p>
    <p>E xe</p>
    <p>cu ta</p>
    <p>b leMOMMIE Program</p>
    <p>To formal verification</p>
    <p>(TLA+)</p>
    <p>To exec (C++)</p>
    <p>Impl. Modules</p>
    <p>M O M M I E @ H O T O S 22</p>
  </div>
  <div class="page">
    <p>[Issuer, Verifier, Auditor] {c-structs}</p>
    <p>THE MOMMIE STATEMENT POOL</p>
    <p>Principals, can be groups</p>
    <p>Addressing + Auth</p>
    <p>Can be nested, with references</p>
    <p>Cached, disseminated among MOMMIE Pools</p>
    <p>Statement algebra:</p>
    <p>I said X &amp; You said X  We said X</p>
  </div>
  <div class="page">
    <p>WHEN [PRIMARY, ME, NOONE] Order order {{ m==req; seqNo==executeSeqNo; }}</p>
    <p>ANDWHEN [c C == 1, ME NOONE] Request req</p>
    <p>@@{</p>
    <p>Result res &lt;- execute(req);</p>
    <p>PUBLISH [ME, c, NOONE] Reply(req, res);</p>
    <p>executeSeqNo &lt;- executeSeqNo + 1;</p>
    <p>@@}</p>
    <p>[Authentication]</p>
    <p>a &lt;-&gt; b : PlainTxt, HMAC-SHA1</p>
    <p>[Non-repudiation]</p>
    <p>x -&gt; * : TrustedThirdParty(z)</p>
    <p>y -&gt; * : RSA</p>
    <p>ELEMENTS OF A MOMMIE PROGRAM</p>
    <p>[Dissemination]</p>
    <p>x,y -&gt; * : OPTIMISTIC(a);</p>
    <p>OPTIMISTIC({a,b,c} &gt;= 2);</p>
    <p>Spec D</p>
    <p>eploym ent</p>
  </div>
  <div class="page">
    <p>WHEN [PRIMARY, ME, NOONE] Order order {{ m==req; seqNo==executeSeqNo; }}</p>
    <p>ANDWHEN [c C == 1, ME NOONE] Request req</p>
    <p>@@{</p>
    <p>Result res &lt;- execute(req);</p>
    <p>PUBLISH [ME, c, NOONE] Reply(req, res);</p>
    <p>executeSeqNo &lt;- executeSeqNo + 1;</p>
    <p>@@}</p>
    <p>[Authentication]</p>
    <p>a &lt;-&gt; b : PlainTxt, HMAC-SHA1</p>
    <p>[Non-repudiation]</p>
    <p>x -&gt; * : TrustedThirdParty(z)</p>
    <p>y -&gt; * : RSA</p>
    <p>ELEMENTS OF A MOMMIE PROGRAM</p>
    <p>[Dissemination]</p>
    <p>x,y -&gt; * : OPTIMISTIC(a);</p>
    <p>OPTIMISTIC({a,b,c} &gt;= 2);</p>
    <p>Spec D</p>
    <p>eploym ent</p>
    <p>Could be generated from mathematical optimizer</p>
  </div>
  <div class="page">
    <p>Will it actually make writing provably robust programs easier?</p>
    <p>Can it result in sufficiently fast/optimized code?</p>
    <p>Can all functionality and optimizations compose safely?</p>
    <p>What are we proving, really, for the whole system?</p>
    <p>TLA+? Seriously?</p>
    <p>Another language? Seriously?</p>
    <p>MOMMIE? Seriously!</p>
    <p>QUESTIONS I CAN ANSWER</p>
    <p>M O M M I E @ H O T O S 27</p>
  </div>
  <div class="page">
    <p>THANK YOU Q?</p>
  </div>
</Presentation>
