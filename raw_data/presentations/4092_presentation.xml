<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Static Exploration of Taint-Style Vulnerabilities Found by Fuzzing</p>
    <p>Bhargava Shastry, Federico Maggi, Fabian Yamaguchi, Konrad Rieck, and Jean-Pierre Seifert</p>
  </div>
  <div class="page">
    <p>How It Started  Spun afl-fuzz on Open vSwitch</p>
    <p>Found 8 vulnerabilities  Responsibly disclosed and now patched  1 RCE</p>
    <p>Crashing input tweetable</p>
    <p>ffffffffffff0000000000008847</p>
  </div>
  <div class="page">
    <p>Bottleneck  OvS has over 100 functional test cases</p>
    <p>Only 3-4 fuzzable</p>
    <p>Test coverage  3%</p>
    <p>Duh, extensively write fuzzable test cases!</p>
  </div>
  <div class="page">
    <p>Problem  Not faulting OvS, problem deep-rooted  Writing fuzzable tests challenging</p>
    <p>Applicability limited  Does not scale  Requires domain expertise</p>
    <p>Fuzzing may not exercise every single LoC</p>
  </div>
  <div class="page">
    <p>Pitch</p>
    <p>Fuzzer-directed static analysis</p>
  </div>
  <div class="page">
    <p>Proposal Leverage hard data to ask the compiler specific</p>
    <p>questions</p>
    <p>Fuzzer crash  Stack trace  Vulnerability Template  Recurrences</p>
  </div>
  <div class="page">
    <p>Design 7</p>
    <p>int main() { read(); process(in); If (crypto()) process(in); }</p>
    <p>int main() { read(); process(in); If (crypto()) process(in); }</p>
    <p>if (crypto()) process(in);</p>
    <p>Software Localize Fault</p>
    <p>Vulnerability Template</p>
    <p>read(); process(in);</p>
    <p>RankFuzz</p>
    <p>Image: https://www.laserfiche.com/content/uploads/2015/02/shutterstock_137894381.jpg</p>
  </div>
  <div class="page">
    <p>Implementation  Fault localization &amp; Ranking  custom python script  Template matching engine  Clang libASTMatcher</p>
    <p>https://github.com/test-pipeline</p>
  </div>
  <div class="page">
    <p>Results: Effectiveness 9</p>
    <p>Vulnerability Num. matches Num. issues</p>
    <p>CVE-2016-10377 5 0</p>
    <p>CVE-2017-9264 (TCP) 10 0</p>
    <p>CVE-2017-9264 (UDP) 2 1</p>
    <p>CVE-2017-9264 (IPv6) 3 0</p>
    <p>CVE-2017-9214 41 0</p>
    <p>CVE-2017-9263 34 0</p>
    <p>CVE-2017-9265 1 0</p>
  </div>
  <div class="page">
    <p>Ranking Matches  Reports provides insufficient context  We rank matches based on fuzzer coverage  Matches containing uncovered code interesting</p>
    <p>Only 36 out of 96 matches ranked high</p>
  </div>
  <div class="page">
    <p>Insight Developers want contextual information</p>
    <p>I would like to hear about other similar problem(s) you find in the code. Whether they are exploitable or not, it is better for the code to be careful.</p>
    <p>- Ben Pfaff, OvS lead developer</p>
  </div>
  <div class="page">
    <p>Results: Run time 12</p>
  </div>
  <div class="page">
    <p>Insight  Structural (AST) analysis is relatively fast  Semantic analysis is relatively slow  Tension between analysis precision and speed  Run time suitable for continuous integration</p>
  </div>
  <div class="page">
    <p>Summary  Going beyond fuzzing is necessary  Static analysis well-suited, results promising  Evaluated on OvS, drew attention to 1 real issue and</p>
    <p>several corner cases  Fast enough for continuous integration</p>
  </div>
  <div class="page">
    <p>Future Work  Reducing false positives</p>
    <p>Formulating more precise vulnerability templates  Easing manual review further</p>
    <p>Use Angr for path reachability queries  Greetz to Dominic Maier</p>
  </div>
  <div class="page">
    <p>Acknowledgements</p>
    <p>Thank OvS Security/Dev team for timely fixes</p>
  </div>
  <div class="page">
    <p>Questions?</p>
  </div>
  <div class="page">
    <p>Related Work When vulnerable code pattern known</p>
    <p>Code mining  Rely on security patches  Reactive</p>
    <p>When vulnerable code pattern unknown</p>
    <p>Machine learning  As good as training set  Insufficient guarantees</p>
  </div>
</Presentation>
