<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Distributed Proximity Maintenance in Distributed Proximity Maintenance in Ad Hoc Mobile NetworksAd Hoc Mobile Networks</p>
    <p>Jie Gao Leonidas J. Guibas An Nguyen</p>
  </div>
  <div class="page">
    <p>Proximity info: two nodes are near or farProximity info: two nodes are near or far  Nearby nodes interact, collaborate with and</p>
    <p>influence each other in ways that far away node cannot.</p>
  </div>
  <div class="page">
    <p>Proximity is useful across many scalesProximity is useful across many scales</p>
    <p>To support collaboration between mobile nodes:</p>
    <p>Rescue teams;  Sensor deployment by mobile robots;  Aircrafts flying in formation.</p>
    <p>Need to support proximity queries, e.g.,  Collision detection;  Search for near neighbors within, say,1 mile;  Maintain 1-hop neighborhood.</p>
  </div>
  <div class="page">
    <p>Proximity maintenance for mobile nodesProximity maintenance for mobile nodes</p>
    <p>A set of mobile nodes, e.g., vehicles.  Each node has a GPS.  Assume the existence of a routing protocol. Proximity maintenance:  A distributed structure such that any node can</p>
    <p>make proximity queries at any time:  Closest neighbor (collision detection);  Neighbors within distance r, etc.</p>
  </div>
  <div class="page">
    <p>Example: maintain 1Example: maintain 1--hop neighborshop neighbors</p>
    <p>An easy case: a neighbor q can alert p before q moves far.</p>
  </div>
  <div class="page">
    <p>Example: maintain 1Example: maintain 1--hop neighborshop neighbors</p>
    <p>A harder case: how can p find out that a nonneighbor is going to move close?</p>
  </div>
  <div class="page">
    <p>Example: maintain 1Example: maintain 1--hop neighborshop neighbors</p>
    <p>Each node periodically sends out hello beacons for topology discovery.</p>
    <p>But how frequently? - A high rate: unnecessary communication cost. - A low rate: critical changes may be missed.</p>
    <p>How about neighbors within x meters? - Periodical flooding up to x meters is too expensive.</p>
  </div>
  <div class="page">
    <p>Proximity information can change rapidly.  Each node can potentially come near every</p>
    <p>other node (O(n2) interactions).  We seek a proximity data structure that at the</p>
    <p>same time  is relatively stable under motion  is output-sensitive  quickly delivers the required (distance, collision,</p>
    <p>etc.) information</p>
    <p>Challenges in proximity maintenanceChallenges in proximity maintenance</p>
  </div>
  <div class="page">
    <p>An -spanner on n points is a sparse graph s.t. the shortest path distance of p,q   |pq|.</p>
    <p>Idea: maintain a spanner under motionIdea: maintain a spanner under motion</p>
    <p>Spanning ratio</p>
  </div>
  <div class="page">
    <p>Collision detectionCollision detection</p>
    <p>The closest pair pq must have a spanner edge in between, if  2.</p>
  </div>
  <div class="page">
    <p>Find the nodes within Euclidean distance r of p.</p>
    <p>Near neighbors queryNear neighbors query</p>
    <p>Breadth-first search starting at p up to distance r</p>
    <p>|pq|  r only if Path(p,q)  r</p>
    <p>Replace a continuous geometric search by a more efficient combinatorial graph search.</p>
  </div>
  <div class="page">
    <p>Part I: Spanner constructionPart I: Spanner construction</p>
  </div>
  <div class="page">
    <p>Many spanner constructions for static, centralized environments.</p>
    <p>Deformable spanner [GGN04]  (1+)-spanner with O(n) edges, each node has</p>
    <p>O(logn) edges.  Centralized maintenance under motion.</p>
    <p>In this paper: D-spanner  Distributed maintenance on an ad hoc</p>
    <p>communication network.  Non-trivial re-work of deformable spanner.</p>
    <p>Related work on spannerRelated work on spanner</p>
  </div>
  <div class="page">
    <p>r-centers:  Coverage: Every node is within distance r of at least</p>
    <p>one center;  Separation: No two centers are within distance r of</p>
    <p>each other. Spanner: 1. Build a hierarchy of centers.</p>
    <p>Centers on level i have radius ri =2i. 2. At each level, add edges with length  c  2i.</p>
    <p>c = 4+16/.</p>
    <p>Theorem: Graph G is a (1+)-spanner, for any &gt;0.</p>
    <p>Spanner constructionSpanner construction</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>ParentParent--child relationshipchild relationship</p>
  </div>
  <div class="page">
    <p>Double the radius.</p>
  </div>
  <div class="page">
    <p>Double the radius.</p>
  </div>
  <div class="page">
    <p>Edges within length c  2i.</p>
  </div>
  <div class="page">
    <p>Edges within length c  2i.</p>
  </div>
  <div class="page">
    <p>Spanner edgesSpanner edges</p>
    <p>Put all edges together:</p>
  </div>
  <div class="page">
    <p>A short (1+A short (1+) ) pathpath Take the lowest level such that the ancestors of p, q have a spanner edge.</p>
  </div>
  <div class="page">
    <p>Linear size: O(n) edges;  The hierarchy has log n levels.</p>
    <p>Small degree: max degree O(log n) per node.</p>
    <p>Can be computed in time O(nlogn).</p>
    <p>Quality of the spanner [GGNQuality of the spanner [GGN04]04]</p>
  </div>
  <div class="page">
    <p>Part II: distributed maintenance under Part II: distributed maintenance under reasonable motion modelsreasonable motion models</p>
  </div>
  <div class="page">
    <p>Three stepsThree steps</p>
    <p>If nodes move, what may go wrong? How to fix it?</p>
    <p>Motion models.</p>
    <p>Maintenance of D-spanner.</p>
  </div>
  <div class="page">
    <p>DD--spanner under motionspanner under motion</p>
  </div>
  <div class="page">
    <p>DD--spanner under motionspanner under motion</p>
  </div>
  <div class="page">
    <p>DD--spanner under motionspanner under motion</p>
  </div>
  <div class="page">
    <p>DD--spanner under motionspanner under motion</p>
  </div>
  <div class="page">
    <p>DD--spanner under motionspanner under motion</p>
  </div>
  <div class="page">
    <p>DD--spanner under motionspanner under motion</p>
  </div>
  <div class="page">
    <p>DD--spanner under motionspanner under motion</p>
  </div>
  <div class="page">
    <p>DD--spanner under motionspanner under motion</p>
  </div>
  <div class="page">
    <p>DD--spanner under motionspanner under motion</p>
    <p>Sufficient to consider only cousin pairs. Multi-resolution to the rescue!</p>
  </div>
  <div class="page">
    <p>Motion modelsMotion models</p>
    <p>Distributed setting: 1. Shared flight plan motion model</p>
    <p>Each node has a short-term flight plan, e.g., move to the east with speed 50MPH.</p>
    <p>A knows Bs flight plan by communication.</p>
    <p>moves a distance (u, v).</p>
    <p>The D-spanner is the first non-trivial structure maintainable in the distributed setting.</p>
  </div>
  <div class="page">
    <p>Distributed maintenanceDistributed maintenance</p>
    <p>Key observation: all of the constraints of D-spanner are distance constraints: |pq| is no more (less) than a threshold.</p>
    <p>Fix the D-spanner when a constraint is violated.</p>
    <p>Each node p keeps its related distance certificates on each level i:</p>
    <p>its parent q on level i+1; |pq|  2i+1</p>
    <p>its spanner edges pq on level i; 2i  |pq|  c2i</p>
    <p>its potential spanner edge pq on level i; |pq| &gt; c2i, q is a non-neighbor cousin.</p>
  </div>
  <div class="page">
    <p>Each node p tells its flight plan to all related nodes (at most O(logn) ).</p>
    <p>With the flight plan of q, a node p can check when its certificate involving p, q fails.</p>
    <p>Fix the structure when something fails.  Communication to other nodes is involved.</p>
    <p>Shared flight plan modelShared flight plan model</p>
  </div>
  <div class="page">
    <p>A node on level i informs its neighbors of its new position if it moves a distance about O(2i).</p>
    <p>The communication between nodes at higher levels</p>
    <p>though more costly;  But, is less frequent.</p>
    <p>Distance threshold modelDistance threshold model</p>
  </div>
  <div class="page">
    <p>Cost of maintenance, ICost of maintenance, I</p>
    <p>Low memory requirement: O(logn) each.  Each node is involved in O(1) certificates for</p>
    <p>each level it participates in.</p>
    <p>Close-to-optimal total number of updates: O(n2logn)</p>
    <p>If the nodes follow pseudo-algebraic motion (e.g., the trajectory is polynomial).</p>
    <p>Any spanner requires (n2) updates.</p>
  </div>
  <div class="page">
    <p>Cost of maintenance, IICost of maintenance, II</p>
    <p>Communication cost.  Startup cost: exchange flight plans/positions.  Repair the D-spanner.  Assume the cost of communication between pq</p>
    <p>is O(|pq|).</p>
    <p>Low startup communication cost:  The startup cost is O(logn)MST.</p>
    <p>The communication cost of updates caused by p is output-sensitive.</p>
    <p>O(logn) for each unit distance p moves.</p>
  </div>
  <div class="page">
    <p>DemoDemo</p>
  </div>
</Presentation>
