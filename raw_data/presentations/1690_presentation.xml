<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Towards Provably-Secure Scalable Anonymous Broadcast</p>
    <p>Mahdi Zamani Department of Computer Science</p>
    <p>University of New Mexico</p>
    <p>Joint work with Jared Saia, Mahnush Movahedi, and Joud Khoury</p>
    <p>University of New Mexico Raytheon BBN Technologies</p>
  </div>
  <div class="page">
    <p>Anonymity</p>
    <p>Anonymity enables freedom of speech  One can speak without fear of consequences</p>
    <p>Political discussions can result in torture, imprisonment, and death!</p>
    <p>Theoretical guarantees are critical</p>
  </div>
  <div class="page">
    <p>Our Goal</p>
    <p>Provably-anonymous and fully-decentralized broadcast</p>
    <p>Ten-year vision  Fully decentralized anonymous Twitter</p>
  </div>
  <div class="page">
    <p>Our Model</p>
    <p>n parties, all pairs connected by private channel</p>
    <p>Up to a 1/3 fraction are bad</p>
    <p>Byzantine adversary: Bad parties can deviate arbitrarily from protocol; the rest are Good</p>
    <p>Static adversary: takes over bad parties at the beginning of protocol</p>
    <p>Synchronous communication</p>
  </div>
  <div class="page">
    <p>Anonymous Broadcast Problem</p>
    <p>Each party has a message to broadcast</p>
    <p>Goals:</p>
    <p>All parties receive the messages broadcast</p>
    <p>No coalition of parties can do better than uniform guessing to map messages to senders</p>
  </div>
  <div class="page">
    <p>Our Results</p>
    <p>Best known protocol for this model is [GJ 04]</p>
    <p>Sends O(n) bits per player per anonymous bit</p>
    <p>Constant latency</p>
    <p>Cryptographic</p>
    <p>Our Algorithm</p>
    <p>Sends O(1) bits per player per anonymous bit</p>
    <p>O(log n) latency</p>
    <p>Probability that a partys message is broadcast is 11/k  Unconditionally secure</p>
  </div>
  <div class="page">
    <p>Secure Multi-Party Computation</p>
    <p>Each party knows a global function and a private input</p>
    <p>Goals:  Each party learns the output of the function over the</p>
    <p>private inputs</p>
    <p>Keep inputs private: nobody learns anything about the inputs other than what is revealed by the output</p>
  </div>
  <div class="page">
    <p>Simple DC-Net [Chaum 88]</p>
    <p>One party has input m, remaining have input zero</p>
    <p>Compute sum via MPC</p>
    <p>All parties learn m, sender identity remains hidden</p>
    <p>Pros and cons  Secure against traffic analysis</p>
    <p>Vulnerable to jamming attacks</p>
    <p>Poor scalability</p>
  </div>
  <div class="page">
    <p>Our Protocol</p>
    <p>Create a circuit to enable anonymous broadcast with jam prevention</p>
    <p>Prevent jamming by using virtual channels</p>
    <p>Use scalable MPC scheme of [DKMS 12] to securely evaluate this circuit</p>
    <p>Trade off latency to decrease bandwidth cost</p>
  </div>
  <div class="page">
    <p>Quorums [DKMS 12]</p>
    <p>A set of log(n) parties</p>
    <p>2/3 fraction of them are good</p>
    <p>Each gate is mapped to a quorum</p>
    <p>This quorum computes the gate output securely</p>
    <p>Distributed quorum creation is done via [KLST 10]</p>
  </div>
  <div class="page">
    <p>The Circuit</p>
    <p>...</p>
    <p>p1</p>
    <p>ADDER</p>
    <p>JAM-DETECTOR JAM-DETECTOR</p>
    <p>...</p>
    <p>...</p>
    <p>p2</p>
    <p>JAM-DETECTOR</p>
    <p>...</p>
    <p>...</p>
    <p>pn</p>
    <p>...</p>
    <p>...</p>
  </div>
  <div class="page">
    <p>The Circuit</p>
    <p>...</p>
    <p>p1</p>
    <p>ADDER</p>
    <p>JAM-DETECTOR JAM-DETECTOR</p>
    <p>...</p>
    <p>...</p>
    <p>p2</p>
    <p>JAM-DETECTOR</p>
    <p>...</p>
    <p>...</p>
    <p>pn</p>
    <p>...</p>
    <p>...</p>
    <p>All 0 if 1 channel used</p>
    <p>all 1 otherwise</p>
    <p>Virtual</p>
    <p>channels</p>
    <p>Left input if right input is 0</p>
  </div>
  <div class="page">
    <p>JAM-Detector</p>
    <p>JA M</p>
    <p>-D E T E C</p>
    <p>T O</p>
    <p>R 0 if 0 channel used</p>
  </div>
  <div class="page">
    <p>Analysis</p>
    <p>Let r be the number of channels</p>
    <p>Each party sends O( r+  n</p>
    <p>n ) bits for sending one</p>
    <p>anonymous bit</p>
    <p>If r = kn, probability of collision per party is 1/k</p>
    <p>Each party sends O(1) bits per anonymous bit.</p>
  </div>
  <div class="page">
    <p>Simulation Results</p>
    <p>Log number of players</p>
    <p>L o g n</p>
    <p>u m</p>
    <p>b e r</p>
    <p>o f b its</p>
    <p>s e n t</p>
    <p>Number of bits sent per player per anonymous bit</p>
    <p>This paper Ongoing work [GJ 04]</p>
  </div>
  <div class="page">
    <p>Simulation Results</p>
    <p>Log number of players</p>
    <p>L o g n</p>
    <p>u m</p>
    <p>b e r</p>
    <p>o f b its</p>
    <p>s e n t</p>
    <p>Number of bits sent per player per anonymous bit</p>
    <p>This paper Ongoing work [GJ 04]</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Anonymous broadcast against a powerful adversary</p>
    <p>Asymptotically-efficient  Reduces bandwidth cost by n  Increases latency by log n</p>
    <p>We proved  No coalition of parties can do better than uniform guessing</p>
    <p>to map messages to senders</p>
  </div>
  <div class="page">
    <p>Future Work I</p>
    <p>Ten-year vision: decentralized anonymous Twitter</p>
    <p>MBs per player is too high for an anonymous tweet!</p>
    <p>Three orders of magnitude improvement plan</p>
    <p>Use cryptographic methods</p>
    <p>Fully homomorphic encryption</p>
    <p>Threshold cryptography for Byzantine agreement</p>
    <p>Blacklist bad parties over time</p>
  </div>
  <div class="page">
    <p>Future Work II</p>
    <p>Our model was defined 25 years ago [Chaum 88]</p>
    <p>Modern networks are more dynamic and flexible</p>
    <p>How to handle modern networks and still give theoretical guarantees?</p>
    <p>Also  Asynchronous communication</p>
    <p>Adaptive adversary</p>
    <p>Churn</p>
  </div>
  <div class="page">
    <p>Thank you!</p>
    <p>Questions?</p>
  </div>
</Presentation>
