<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Reliable and Efficient Programming Abstractions for</p>
    <p>Sensor Networks</p>
    <p>Nupur Kothari, Ramki Gummadi (USC), Todd Millstein (UCLA) and Ramesh Govindan (USC)</p>
  </div>
  <div class="page">
    <p>What are Sensor Networks?  Composed of small battery-powered</p>
    <p>devices called motes</p>
    <p>Communicate using wireless  Primarily programmed in a language</p>
    <p>called nesC</p>
  </div>
  <div class="page">
    <p>Many Compelling Applications!</p>
    <p>Volcanic activity monitoring Urban sensing Micro-habitat monitoring</p>
    <p>Actuation-based sensing Structural health monitoring Wildlife monitoring</p>
  </div>
  <div class="page">
    <p>Domain-Specific Challenges  Need to deal with several application-level</p>
    <p>concerns  Time-critical sensing  Hardware resource constraints  Energy-efficient communication  Concurrency and application logic  Failures  Distributed data consistency</p>
    <p>Simultaneously achieving efficiency and reliability while providing readability is hard</p>
    <p>Efficiency</p>
    <p>Reliability</p>
  </div>
  <div class="page">
    <p>Programming Today</p>
    <p>Node-level program written in nesC</p>
    <p>Compiled to mote binary</p>
    <p>Tradeoff: High efficiency, but readability and reliability suffer because achieving global results and maintaining invariants through a local approach is tedious and error-prone</p>
  </div>
  <div class="page">
    <p>Our Approach: Centralized Programming</p>
    <p>Central program that specifies application behavior</p>
    <p>Node-level nesC programs</p>
    <p>Compiled to mote binary</p>
    <p>Compiler</p>
    <p>Runtime+</p>
    <p>Simplifies programming by offloading concurrency, reliability, and energy efficiency to the compiler and runtime</p>
  </div>
  <div class="page">
    <p>Our Contributions</p>
    <p>The Pleaides programming language  Centralized as opposed to node-level</p>
    <p>Automatic program partitioning and controlflow migration</p>
    <p>Minimizes energy by optimizing data movement  Easy-to-use and reliable concurrency primitive</p>
    <p>Ensures consistency under concurrent execution  Mote-based implementation</p>
    <p>Evaluated several realistic applications</p>
  </div>
  <div class="page">
    <p>Pleiades Constructs by Example int temp LOCAL;</p>
    <p>void main() { nodelist all = get_available_nodes(); int max = 0;</p>
    <p>(node n = get_first(all); n!=NULL; n = get_next(all)) {</p>
    <p>if (temp@n &gt; max) max = temp@n;</p>
    <p>} }</p>
    <p>Node-local variable</p>
    <p>Central variableList of nodes in network</p>
    <p>Network Node</p>
    <p>Access node-local variables declaratively</p>
    <p>for</p>
    <p>Concurrent-for loop</p>
    <p>cfor</p>
    <p>Central variables neednt be synchronized</p>
  </div>
  <div class="page">
    <p>Two Main Challenges The Pleiades Compiler and</p>
    <p>Runtime</p>
    <p>ConcurrencyPartitioningHow to compile and efficiently execute a centralized program</p>
    <p>How to achieve serializability under concurrency</p>
  </div>
  <div class="page">
    <p>void main() {  val@n1 = a; n3 = val@n2; val@n3 = b; val@n4 = c;</p>
    <p>}</p>
    <p>Program Execution Control-flow migration as</p>
    <p>well as data movement</p>
    <p>Control-flow migration</p>
    <p>Access node-local variables from nearby nodes</p>
    <p>val@n1 = a; n3 = val@n2;</p>
    <p>val@n3 = b; val@n4 = c;</p>
    <p>Nodecut n1</p>
    <p>n2</p>
    <p>n3</p>
    <p>n4</p>
    <p>How does the compiler partition code into nodecuts?</p>
    <p>How does the runtime know where to execute each nodecut?</p>
    <p>Sequential Program</p>
  </div>
  <div class="page">
    <p>Our Contributions</p>
    <p>The Pleaides programming language  Centralized as opposed to node-level</p>
    <p>Automatic program partitioning and controlflow migration</p>
    <p>Minimizes energy  Easy-to-use and reliable concurrency primitive</p>
    <p>Ensures consistency under concurrent execution  Mote-based implementation</p>
    <p>Evaluated several realistic applications</p>
  </div>
  <div class="page">
    <p>start</p>
    <p>end</p>
    <p>all = get_available_nodes()</p>
    <p>max = 0</p>
    <p>n = get_first(all)</p>
    <p>False True</p>
    <p>False True</p>
    <p>max = temp@n</p>
    <p>if(temp@n &gt; max)</p>
    <p>if(n!=NULL)</p>
    <p>n = get_next(all)</p>
    <p>start</p>
    <p>end</p>
    <p>all = get_available_nodes()</p>
    <p>max = 0</p>
    <p>n = get_first(all)</p>
    <p>False True</p>
    <p>False True</p>
    <p>max = temp@n</p>
    <p>if(temp@n &gt; max)</p>
    <p>if(n!=NULL)</p>
    <p>n = get_next(all)</p>
    <p>start</p>
    <p>end</p>
    <p>all = get_available_nodes()</p>
    <p>max = 0</p>
    <p>n = get_first(all)</p>
    <p>False True</p>
    <p>False True</p>
    <p>max = temp@n</p>
    <p>if(temp@n &gt; max)</p>
    <p>if(n!=NULL)</p>
    <p>n = get_next(all)</p>
    <p>Partitioning Code into Nodecuts Control-flow graph for max</p>
    <p>example</p>
    <p>Property: The location of variables accessed within a nodecut are known before its execution</p>
    <p>Nodecuts generated by the Pleiades compiler</p>
  </div>
  <div class="page">
    <p>Control-flow Migration Algorithm</p>
    <p>Runtime attempts to find lowest communication cost node to execute nodecut</p>
    <p>start</p>
    <p>end</p>
    <p>all = get_available_nodes()</p>
    <p>max = 0</p>
    <p>n = get_first(all)</p>
    <p>False True</p>
    <p>False True</p>
    <p>max = temp@n</p>
    <p>if(temp@n &gt; max)</p>
    <p>if(n!=NULL)</p>
    <p>n = get_next(all)</p>
    <p>start</p>
    <p>end</p>
    <p>all = get_available_nodes()</p>
    <p>max = 0</p>
    <p>n = get_first(all)</p>
    <p>False True</p>
    <p>False True</p>
    <p>max = temp@n</p>
    <p>if(temp@n &gt; max)</p>
    <p>if(n!=NULL)</p>
    <p>n = get_next(all)</p>
  </div>
  <div class="page">
    <p>Our Contributions</p>
    <p>The Pleaides programming language  Centralized as opposed to node-level</p>
    <p>Automatic program partitioning and controlflow migration</p>
    <p>Minimizes energy  Easy-to-use and reliable concurrency primitive</p>
    <p>Ensures consistency under concurrent execution  Mote-based implementation</p>
    <p>Evaluated several realistic applications</p>
  </div>
  <div class="page">
    <p>On completion, cfor iterations send DONE message to originating node</p>
    <p>Cfor execution</p>
    <p>Nodecut encountering a cfor forks a thread for each iteration</p>
    <p>start</p>
    <p>end</p>
    <p>all = get_available_nodes()</p>
    <p>max = 0</p>
    <p>n = get_first(all)</p>
    <p>False True</p>
    <p>False True</p>
    <p>max = temp@n</p>
    <p>if(temp@n &gt; max)</p>
    <p>if(n!=NULL)</p>
    <p>n = get_next(all)</p>
    <p>start</p>
    <p>end</p>
    <p>all = get_available_nodes()</p>
    <p>max = 0</p>
    <p>n = get_first(all)</p>
    <p>False True</p>
    <p>False True</p>
    <p>max = temp@n</p>
    <p>if(temp@n &gt; max)</p>
    <p>if(n!=NULL)</p>
    <p>n = get_next(all)</p>
    <p>Challenge: To ensure serializability during concurrent execution</p>
    <p>Approach: Distributed locking, with multiple reader/single writer locks</p>
  </div>
  <div class="page">
    <p>Distributed Locking</p>
    <p>cfor (node n = 1; n &lt; 5; n++) { if (temp@n &gt; max)</p>
    <p>max = temp@n; }</p>
    <p>temp@n</p>
    <p>max</p>
    <p>Technique generalizes to nested cfor loops using hierarchical locking</p>
    <p>Only the write operation to max is serialized.</p>
    <p>Deadlocks possible, but dealt with using a simple deadlock detection</p>
    <p>and recovery scheme</p>
  </div>
  <div class="page">
    <p>Our Contributions</p>
    <p>The Pleaides programming language  Centralized as opposed to node-level</p>
    <p>Automatic program partitioning and controlflow migration</p>
    <p>Minimizes energy  Easy-to-use and reliable concurrency primitive</p>
    <p>Ensures consistency under concurrent execution  Mote-based implementation</p>
    <p>Evaluated several realistic applications</p>
  </div>
  <div class="page">
    <p>Compiler built as an extension to the CIL infrastructure for C analysis and transformation</p>
    <p>Pleiades compiler generates nesC code  Pleiades evaluated on TelosB motes  Experience with several applications:</p>
    <p>pursuit-evasion, car parking, etc.</p>
    <p>Compiler built as an extension to the CIL infrastructure for C analysis and transformation</p>
    <p>Pleiades compiler generates nesC code  Pleiades evaluated on TelosB motes  Experience with several applications:</p>
    <p>pursuit-evasion, car parking, etc.</p>
    <p>Implementation and Evaluation</p>
  </div>
  <div class="page">
    <p>Pursuit-Evasion in Pleiades</p>
    <p>Pleiades-PEG vs. nesC-PEG</p>
    <p>Lines of Code Avg. Error Latency Message Overhead</p>
    <p>Pleiades-PEG</p>
    <p>nesC-PEG</p>
  </div>
  <div class="page">
    <p>Related Work</p>
    <p>Embedded and Sensor networks languages</p>
    <p>Concurrent Systems (e.g.,Transactional Memory)</p>
    <p>Parallel Processing Languages (e.g., Split-C, Linda)</p>
  </div>
  <div class="page">
    <p>Related Work  SpatialViews (Ni et. al., PLDI05)</p>
    <p>Achieve concurrency and reliability by restricting the programming model</p>
    <p>Kairos (Gummadi et. al., DCOSS05)  Does not provide automatic code migration or serializability;</p>
    <p>support for automatic recovery mechanisms  Regiment (Newton et. al., IPSN07)</p>
    <p>Purely functional language; Cannot update node-local state  COSMOS (Awan et. al., EuroSys07)</p>
    <p>Dataflow programming model; Designed for heterogeneous networks</p>
    <p>TinyDB (Madden et. al., TODS05)  Declarative interface for centrally manipulating data; not Turing</p>
    <p>complete</p>
  </div>
  <div class="page">
    <p>The centralized programming model in Pleiades simplifies programming</p>
    <p>Compiler and runtime deal with concurrency, reliability, and efficiency details</p>
    <p>Implemented on TelosB motes  Future Work:</p>
    <p>Declarative failure recovery for Pleiades  User-defined/relaxed consistency models to improve</p>
    <p>concurrency</p>
    <p>Conclusions and Future work</p>
  </div>
  <div class="page">
    <p>Thanks!</p>
    <p>More info at: http://kairos.usc.edu</p>
  </div>
</Presentation>
