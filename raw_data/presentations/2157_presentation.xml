<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Leveraging Progressive Programmability of SLC Flash Pages to Realize Zero-overhead Delta Compression</p>
    <p>for Metadata Storage</p>
    <p>Xuebin Zhang, Jiangpeng Li, Kai Zhao, Hao Wang and Tong Zhang xuebinzhang.rpi@gmail.com</p>
    <p>ECSE Department, Rensselaer Polytechnic Institute (RPI)</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>q Introduction and Background</p>
    <p>q Progressive Programmability of SLC Flash Pages</p>
    <p>q Metadata Update Solution using Delta Compression</p>
    <p>q Evaluation Results and Practical Considerations</p>
    <p>q Summary and Future Work</p>
  </div>
  <div class="page">
    <p>NAND Flash Memory</p>
    <p>p Increasing Adoptions and Decreasing Cost of NAND Flash Memory</p>
    <p>NAND Flash</p>
    <p>consumer client enterprise</p>
    <p>Increasingly wide adoption</p>
    <p>p Endurance: One of Existing Problems of NAND Flash Memory</p>
    <p>Limited lifetime</p>
    <p>Make it worse: Write amplification.</p>
  </div>
  <div class="page">
    <p>Why Metadata Storage A simple example[1] in ext3:</p>
    <p>q Write hello into text1.txt</p>
    <p>Effective data: 6 bytes vs. Flash write: 11 pages*4kB=44kB</p>
    <p>bmp bmp inode data dirent bmp bmp inode data dirent C</p>
    <p>Data area Journal area</p>
    <p>q Read happy from text2.txt</p>
    <p>Flash write: 3pages*4kB=12 kB inode inode C</p>
    <p>Data area Journal area</p>
    <p>[1] Y. Lu, J. Shu, and W. Zheng, Extending the lifetime of flash based storage through reducing write amplification from file systems, Usenix FAST, 2013</p>
  </div>
  <div class="page">
    <p>Metadata Update Characteristics in NAND Flash</p>
    <p>q Small (&lt; 4KB) and Page-aligned</p>
    <p>Around 80% write are smaller than 4KB, metadata are even smaller</p>
    <p>q Abundant redundancy between consecutive versions of metadata.</p>
    <p>Metadata is highly structured.</p>
    <p>Difference would always occur in the same locations.</p>
    <p>Assign a</p>
    <p>new page</p>
    <p>q Frequent update within a short time period (around 1s)</p>
    <p>Delta Compression</p>
  </div>
  <div class="page">
    <p>Delta Compression: Current Practice</p>
    <p>D0P0</p>
    <p>Physical page</p>
    <p>Other data</p>
    <p>D0P0 Other data</p>
    <p>L1P1 Other data</p>
    <p>D0P0 Other data</p>
    <p>L1P1 ...L2</p>
    <p>LiP2 Other data</p>
    <p>T0 T1Write D1 TiWrite Di</p>
    <p>Li-1</p>
    <p>p Need to read multiple pages to recover the latest version.</p>
    <p>p Need to keep a mapping table to store the related deltas location.</p>
  </div>
  <div class="page">
    <p>NAND Flash Progressive Programming</p>
    <p>p Append new data in the same page (for SLC flash pages)</p>
    <p>D0 unwrittenP0</p>
    <p>Physical page</p>
    <p>D0 unwrittenP0 L1</p>
    <p>Overwrite d0 d1  dn l1l2  lm1  11</p>
    <p>Page content d0 d1  dn 111111  11</p>
    <p>d0 d1  dn l1l2  lm1  11</p>
  </div>
  <div class="page">
    <p>NAND Flash Progressive Programming</p>
    <p>p Hardware Platform</p>
  </div>
  <div class="page">
    <p>NAND Flash Progressive Programming</p>
    <p>p Validity checking of multiple programming before erasing</p>
    <p>Conventional: one program  one erase</p>
    <p>Progressive: eight program  one erase</p>
    <p>-3</p>
    <p>Erase count</p>
    <p>B it</p>
    <p>er ro</p>
    <p>r r at</p>
    <p>e</p>
    <p>Conventional Progressive</p>
  </div>
  <div class="page">
    <p>Use SLC to Realize Zero-overhead Metadata Storage</p>
    <p>Read original page content</p>
    <p>XOR to generate difference</p>
    <p>Input: New version data</p>
    <p>Compress</p>
    <p>D0 D1</p>
    <p>L1 Progressive?</p>
    <p>Generate D to be programmed</p>
    <p>Y</p>
    <p>write D1 on a new page</p>
    <p>N</p>
    <p>d0 d1  dn 111111  11</p>
    <p>d0 d1  dn l1l2  lm1  11</p>
    <p>d0 d1  dn l1l2  lm1  11</p>
    <p>Programming D</p>
    <p>D0</p>
    <p>D</p>
    <p>D1</p>
    <p>After appending</p>
    <p>Page content updated to D1</p>
    <p>Page content change</p>
    <p>L1</p>
    <p>p Procedures to update new version data</p>
  </div>
  <div class="page">
    <p>Use SLC to Realize Zero-overhead Metadata Storage</p>
    <p>p0P0</p>
    <p>Physical page</p>
    <p>p1</p>
    <p>D0P0</p>
    <p>D0P0</p>
    <p>L1</p>
    <p>L1 L2</p>
    <p>D0P0</p>
    <p>L1 Li ...</p>
    <p>Di+1P1</p>
    <p>Initial version D0</p>
    <p>Version D1</p>
    <p>Version D2</p>
    <p>Full: Version Di</p>
    <p>NewPage: Version Di+1 Allocate a new page</p>
    <p>p Procedures to update new version data</p>
  </div>
  <div class="page">
    <p>Implement the Delta Compression</p>
    <p>...</p>
    <p>Old Data</p>
    <p>New Data</p>
    <p>Different segments</p>
    <p>IndexCompressed</p>
    <p>...</p>
    <p>Index Index</p>
    <p>p Bit level Run-length compression</p>
    <p>p Difference-Index compression</p>
  </div>
  <div class="page">
    <p>p Experiment Setup</p>
    <p>Use benchmark to generate database/files operations</p>
    <p>Implement a metaAnalyzer to grasp metadata from file system</p>
    <p>Analyze the collected consecutive versions of metadata</p>
    <p>Evaluation Results</p>
    <p>p Compression Efficiency</p>
    <p>Run-length coding Diff-index compression 0.00</p>
    <p>C om</p>
    <p>pr es</p>
    <p>si on</p>
    <p>R at</p>
    <p>io</p>
    <p>SQlite Insert SQlite Update File Append File Update</p>
  </div>
  <div class="page">
    <p>p Write Footprint Reduction of Metadata</p>
    <p>Evaluation Results</p>
    <p>To store 1000 consecutive versions:</p>
    <p>No Compress Run-length coding Diff-index compression 10</p>
    <p>R eq</p>
    <p>ui re</p>
    <p>d pa</p>
    <p>ge c</p>
    <p>ou nt</p>
    <p>SQlite Insert SQlite Update File Append File Update</p>
  </div>
  <div class="page">
    <p>Practical Considerations</p>
    <p>p Read latency brought by decompression</p>
    <p>Need multiple decompression to retrieve the latest version.</p>
    <p>Decompression latency is much smaller(4us) than read latency(41us).</p>
    <p>Decompression could be done by an ASIC module in controller.</p>
    <p>p Changes on ECC management</p>
    <p>Length of compressed delta should be written in the page.</p>
    <p>p SLC mode space overhead compared to MLC mode</p>
    <p>When multiple deltas are stored in the page, space overhead will be compensated.</p>
  </div>
  <div class="page">
    <p>Use SLC to Realize Zero-overhead Metadata Storage</p>
    <p>p Conclusion</p>
    <p>SLC Flash page can support Progressive Programming: different portions of the same flash page can be programmed at different time.</p>
    <p>Proposed solution can save data traffic written into disk.</p>
    <p>Proposed solution can guarantee we do not need to read extra pages to retrieve the latest version.</p>
  </div>
</Presentation>
