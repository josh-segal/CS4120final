<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Mismatched Memory Management of Android Smartphones</p>
    <p>Yu Liang, Qiao Li, Chun Jason Xue</p>
    <p>City University of Hong Kong</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Choose a metric</p>
    <p>Show the evaluation results</p>
    <p>Analyze the root causes</p>
    <p>Provide serval preliminary ideas</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Android mobile device is popular</p>
    <p>Industry report on mobile market [Morgan Stanley Research 2016]</p>
    <p>Mobile devices are everywhere!</p>
    <p>Global mobile OS market share</p>
    <p>Industry report on mobile market [ Statista 2018]</p>
    <p>Android</p>
  </div>
  <div class="page">
    <p>Android inherits Linux kernel</p>
    <p>Linux memory management algorithms are transplanted to Android smartphones</p>
    <p>Are these algorithms working well on Android Smartphones?</p>
  </div>
  <div class="page">
    <p>Page re-fault is used to evaluate the efficiency of algorithms</p>
    <p>Page re-fault is defined as the case that the page fault happens on the previously evicted page.</p>
    <p>Memory</p>
    <p>Flash</p>
    <p>evicted</p>
    <p>Page re-fault</p>
    <p>Memory is full</p>
    <p>Read again</p>
  </div>
  <div class="page">
    <p>Page re-fault is the chosen metric</p>
    <p>Page fault happens in three cases</p>
    <p>How often page re-fault happens on real Android smartphone?</p>
  </div>
  <div class="page">
    <p>Page Re-fault on Android Smartphone</p>
    <p>Experimental setup:  Huawei P9 smartphone with ARMs Cortex-A72 CPU, 32GB internal memory</p>
    <p>and 3GB RAM, running Android 7.0 on Linux 4.1.18 kernel.</p>
    <p>Applications:  Facebook, Twitter, Chrome, Google Earth, Google Map, Angrybirds, YouTube</p>
    <p>Applications Memory Workloads</p>
    <p>Launching one app empty light</p>
    <p>Using two apps empty light</p>
    <p>Launching five apps and using two apps full moderate</p>
    <p>Launching ten apps full moderate</p>
    <p>Launching twenty apps and using three apps full heavy</p>
  </div>
  <div class="page">
    <p>Page re-fault is severe on Android smartphones</p>
    <p>For severity: after launching twenty and only using three apps (full and heavy)</p>
    <p>Facebook, Earth, YouTube, Map, Twitter, Chrome, Angrybirds</p>
    <p>Memory management algorithms often reclaim the pages, which will be used in the near future.</p>
    <p>acronyms</p>
    <p>Wow! That is pretty high!</p>
  </div>
  <div class="page">
    <p>Previous works</p>
    <p>Prior researches have focused on reducing the number of page faults by optimizing eviction algorithms [1] [2].</p>
    <p>Eviction algorithms decide how to select the victim pages which will be evicted out of memory.</p>
    <p>The optimized LRU is known as a good eviction algorithm and is applied to Android.</p>
    <p>However, the experimental results show that page re-fault ratio is still high on Android smartphones from daily usage.</p>
    <p>[1] PAGE, AND HAGINS. Improving the performance of buddy systems. IEEE Transactions on Computers C -35, 5 (May 1986), 441447. [2]SHEN, K. K., AND PETERSON, J. L. A weighted buddy method for dynamic storage allocation. Commun. ACM 17, 10 (Oct. 1974), 558562. What is the root cause of high page re-fault ratio?</p>
  </div>
  <div class="page">
    <p>Uncovered by this paper</p>
    <p>The causes of high page re-fault ratio on smartphones 1. The reclaim size is often too large for the requests of smartphones;</p>
    <p>Reclaim size represents the number of pages freed by each reclaim operation.</p>
    <p>Reclaim scope represents the region of pages freed by each reclaim operation, such as the pages in the inactive_file_lru list.</p>
  </div>
  <div class="page">
    <p>Cause1: Reclaiming size is often too large</p>
    <p>99% of allocation sizes are 1 page (order=0)  80% of reclaiming sizes are larger than 32 pages (order=5).  The requests on Android smartphones are usually small (more than 60%</p>
    <p>requests &lt;16 KB).</p>
    <p>Compared to allocation size, reclaim size is often too large.</p>
    <p>The distribution of allocation size: The distribution of reclaim sizes :</p>
    <p>order=0</p>
    <p>order&gt;5</p>
  </div>
  <div class="page">
    <p>Cause2: Limited reclaim scope</p>
    <p>Current reclaim scope are not fully considering foreground background differentiation</p>
    <p>The page frames are maintained with four lists: inactive_anonymous_list, active_anonymous_list, inactive_file_list, active_file_list.</p>
    <p>The limited reclaim scope aggravates the punishment.</p>
    <p>Background anonymous</p>
    <p>Foreground file</p>
    <p>Page re-fault</p>
    <p>RAM</p>
  </div>
  <div class="page">
    <p>Idea 1: reduce reclaiming size</p>
    <p>A tradeoff between reclaim size and overall performance:  Reclaim size is too small, free pages will be consumed quickly, the heavy</p>
    <p>weight direct reclaiming will be triggered, which degrades the performance.</p>
    <p>Reclaim size is too large, the ratio of page re-fault will be high and thus degrades the performance.</p>
    <p>To exploit the tradeoff to find the optimal reclaim size for Android smartphones.</p>
  </div>
  <div class="page">
    <p>Idea 2: reclaiming considers status of app</p>
    <p>For mobile devices, background and foreground status should be considered in the priority decision of reclaiming.</p>
    <p>For example, the reclaiming procedure should evict some active_anonymous pages of background processes before the active_file pages of foreground processes.</p>
  </div>
  <div class="page">
    <p>Too large allocation size will degrade the efficiency of allocation operations.</p>
    <p>Idea 3: Reduce the maximum order</p>
    <p>Allocation procedure of buddy system for 2 free pages</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Page re-fault is unexpectedly high (up to 37%) on Android smartphones when running popular apps;</p>
    <p>Priority flip between background apps and foreground apps;</p>
    <p>The maximum allocation size of buddy system is often too large for the requests of apps running on Android smartphones .</p>
  </div>
  <div class="page">
    <p>open discussion</p>
    <p>Thank you!</p>
    <p>Welcome discussion</p>
  </div>
  <div class="page">
    <p>Page fault is the root cause of the long read latency</p>
    <p>Overview of Android I/O Stack:</p>
    <p>Handling page fault is on microsecond scale;  Handling cache hit is on nanoseconds level.</p>
    <p>Page fault is the read latency bottleneck of Android smartphones.</p>
    <p>Cache hit: read from the page cache</p>
    <p>Page fault : go through all of these layers</p>
  </div>
  <div class="page">
    <p>The influence of page fault on Android smartphones</p>
    <p>Read and Evict_first cases cause longer launching latency  This additional latency is mainly caused by page fault.</p>
    <p>Page fault prolongs the latency of app launching.</p>
    <p>Page fault is the root cause of the long read latency</p>
  </div>
  <div class="page">
    <p>Cause1: Reclaiming size is often too large</p>
    <p>The distribution of allocation size:</p>
    <p>The corresponding allocation size equals to 2  99% of allocation orders are 0 (1 page), and more than 99.9% of orders are</p>
    <p>smaller than 4 (16 pages).</p>
    <p>The size of requests on Android smartphones is usually small.</p>
    <p>Too large</p>
  </div>
  <div class="page">
    <p>A preliminary idea is proposed to improve performance</p>
    <p>There is a tradeoff between reclaim size and overall performance:  Reclaim size is too small, free pages will be consumed quickly, the heavy</p>
    <p>weight direct reclaiming will be triggered, which degrades the performance.</p>
    <p>Reclaim size is too large, the ratio of page re-fault will be high and thus degrades the performance.</p>
    <p>Influence of kswapd on performance.</p>
  </div>
  <div class="page">
    <p>Tradeoff between reclaiming size and overall performance</p>
    <p>The latency of launching seven apps are tracked when kswapd is turned on or turned off.</p>
    <p>To exploit the tradeoff to find the optimal reclaiming size.</p>
  </div>
  <div class="page">
    <p>Page re-fault is prevalent on Android smartphones</p>
    <p>For universality: empty and light/moderate workloads</p>
    <p>In launching 10 apps case, 10 apps are launched in different orders.  In 5 apps using 2 case, (AC) FYT represents launching Angrybirds, Chrome, Facebook,</p>
    <p>Youtube, and Twitter, but only using Angrybirds and Chrome.</p>
    <p>This is because some data will be pre-loaded into memory after restart</p>
  </div>
  <div class="page">
    <p>Large-size reclaiming scheme induces more page re-faults</p>
    <p>An example of this case:</p>
    <p>Reclaiming size=1, page b will be cache hit.  Reclaiming size=4, page b will be re-fault.  The large-size reclaiming scheme could induce more page re-faults.</p>
  </div>
</Presentation>
