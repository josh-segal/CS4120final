<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>DupLESS</p>
    <p>Mihir Bellare1 Sriram Keelveedhi1 Thomas Ristenpart2</p>
    <p>Server-Aided Encryption for Deduplicated Storage</p>
  </div>
  <div class="page">
    <p>Deduplication</p>
    <p>Storage service Alice</p>
    <p>Bob Store  iff new</p>
    <p>Avoid storing multiple copies of the same data</p>
    <p>Google Drive</p>
    <p>Used in outsourced storage services</p>
    <p>Savings of 50% in enterprise networks [MB11]</p>
    <p>Savings after  uploads</p>
    <p>No dedup   size of</p>
    <p>Dedup 1  size of</p>
    <p>Deduplication happens here</p>
    <p>Enterprise network</p>
  </div>
  <div class="page">
    <p>Untrusted Storage service</p>
    <p>Alice</p>
    <p>Bob Store  iff new</p>
    <p>Compromised</p>
    <p>Compromised</p>
    <p>Our goals</p>
  </div>
  <div class="page">
    <p>Overview DupLESS (DuplicateLess Encryption for simple storage)</p>
    <p>Can be deployed transparently over existing systems</p>
    <p>Implementations over Dropbox, Google Drive</p>
    <p>Modest performance overhead over plaintext dedup</p>
    <p>Storage savings match plaintext dedup</p>
    <p>Server-aided encryption</p>
    <p>Storage serviceDupLESS Client Shared semi-trusted server</p>
    <p>First solution to achieve secure deduplication with compromise resilience</p>
  </div>
  <div class="page">
    <p>Current approaches</p>
  </div>
  <div class="page">
    <p>Attempt 1: Client specific keys</p>
    <p>Untrusted Storage service</p>
    <p>Alice</p>
    <p>Bob Store  iff new</p>
    <p>[GSMB03], [KRS*03], [KPR11]</p>
    <p>Deduplication cannot work</p>
    <p>(, )</p>
    <p>(, )</p>
    <p>CA and CB different</p>
  </div>
  <div class="page">
    <p>Attempt 2: Network-wide key</p>
    <p>Untrusted Storage service</p>
    <p>Alice</p>
    <p>Bob Store  iff new</p>
    <p>[BBO07], [RS06]</p>
    <p>(, )</p>
    <p>(, )</p>
    <p>No compromise resilience All data is insecure even if one client is compromised</p>
  </div>
  <div class="page">
    <p>Attempt 3: Convergent Encryption</p>
    <p>1</p>
    <p>To encrypt message : [DCS02]</p>
    <p>To decrypt ciphertext 1, 2</p>
    <p>1</p>
    <p>2</p>
    <p>2</p>
    <p>H: Hash fn.</p>
    <p>= (E, D): Enc. scheme</p>
    <p>SHA256</p>
    <p>CTR[AES128]</p>
    <p>Alice</p>
  </div>
  <div class="page">
    <p>Attempt 3: Convergent encryption</p>
    <p>Untrusted Storage service</p>
    <p>Alice</p>
    <p>Bob Store  iff new</p>
    <p>[ABC*02], [SGLM08],</p>
    <p>1     ,</p>
    <p>2   ,</p>
    <p>Deduplication: Everyone encrypting  gets 1</p>
    <p>Compromise resilience: No system-wide secret</p>
  </div>
  <div class="page">
    <p>Attempt 3: Convergent encryption</p>
    <p>If  comes from  = {1, 2,  , } attacker can recover m from   E H  ,</p>
    <p>For    do   D H  ,  If  =</p>
    <p>then return</p>
    <p>BruteForc()</p>
    <p>Attack runs in time proportional to</p>
    <p>Security only when  too large to exhaust</p>
    <p>Message-Locked encryption [BKR13]</p>
    <p>Unpredictable</p>
    <p>Generalizes convergent encryption</p>
    <p>Captures properties needed for secure deduplication</p>
    <p>Thm: Brute-force attacks exist for all message-locked encryption schemes</p>
    <p>Real files are often predictable!</p>
    <p>Brute force attacks: The dirty secret of convergent encryption</p>
  </div>
  <div class="page">
    <p>Systems</p>
    <p>Property Client specific</p>
    <p>keys Network wide key</p>
    <p>Convergent encryption</p>
    <p>DupLESS</p>
    <p>Deduplication</p>
    <p>Compromise resilience</p>
    <p>Brute-force attack resilience</p>
    <p>State of the art</p>
    <p>DupLESS: First to achieve all three properties!</p>
    <p>N</p>
    <p>Y</p>
    <p>Y</p>
    <p>Y</p>
    <p>Y</p>
    <p>Y</p>
    <p>YN</p>
    <p>N</p>
    <p>Y</p>
    <p>Y</p>
    <p>Y</p>
  </div>
  <div class="page">
    <p>Server-aided encryption</p>
  </div>
  <div class="page">
    <p>Our key insight: Server-aided encryption</p>
    <p>File server</p>
    <p>Alice</p>
    <p>Bob Store  iff new</p>
    <p>KeyServer</p>
    <p>: A pseudorandom function (PRF) Examples: AES128, HMAC[SHA256]</p>
    <p>1   ,</p>
    <p>2   ,</p>
    <p>1   ,</p>
    <p>2   ,</p>
    <p>2ciphertexts cannot be deduped, but they are tiny</p>
    <p>Deduplication: Any client encrypting  produces same 1</p>
    <p>(,   )</p>
  </div>
  <div class="page">
    <p>Attack type Reason for security Best attack</p>
    <p>External attacks Authenticating clients Break encryption (very hard)</p>
    <p>Client compromise KS interaction overhead Online brute-force (slow)</p>
    <p>KeyServer compromise Obliviously evaluating  Brute-force attacks</p>
    <p>Dealing with attacks</p>
    <p>File server</p>
    <p>Alice</p>
    <p>Bob Store  iff new</p>
    <p>KeyServer</p>
    <p>(,   )</p>
    <p>1   ,</p>
    <p>2   ,</p>
    <p>1   ,</p>
    <p>2   ,</p>
    <p>Authenticate clients</p>
    <p>Online bruteforce</p>
    <p>Insecure</p>
  </div>
  <div class="page">
    <p>Oblivious PRF (OPRF) protocol</p>
    <p>KeyServer Client</p>
    <p>Security, informally: 1.  is a PRF (when not given ) 2. Server learns nothing, client learns only  3. Client can detect when server does not return</p>
    <p>Verifiable OPRF: Client can verify  = (,   )</p>
    <p>()</p>
    <p>(,   )</p>
    <p>[NR97]</p>
    <p>: A Pseudorandom function (PRF)</p>
  </div>
  <div class="page">
    <p>Oblivious PRF protocol</p>
    <p>Securely evaluate AES circuit? Too slow!</p>
    <p>Oblivious PRFs from unique blind signatures [CNS07, DeCSTW12]</p>
    <p>[NR97]</p>
    <p>Main idea Server signs messages with RSA-FDH signatures Obliviousness through blinding</p>
    <p>Verifiable</p>
    <p>Single round</p>
    <p>KeyServer: 1 RSA exponentiation</p>
    <p>Client: 2 RSA exponentiations + 1 inverse</p>
    <p>Blind Signatures from RSA-FDH [C82, BNPS09 ]</p>
  </div>
  <div class="page">
    <p>Client-KS protocol</p>
    <p>ClientKeyServer</p>
    <p>Assume PKI with trusted CA</p>
    <p>CERT, CERT,</p>
    <p>TLS 2way auth handshake</p>
    <p>Session initialization</p>
    <p>Session key sent over secure channel</p>
    <p>Per session keys + sequence numbers + MAC</p>
    <p>Preventing query forgery</p>
    <p>Making a query</p>
    <p>Client sends OPRF input</p>
    <p>KeyServer performs checks, returns OPRF output</p>
    <p>Optimized protocol</p>
    <p>Over UDP</p>
    <p>Standard protocol TLS 2way auth handshake</p>
    <p>+ OPRF query &amp; response over secure channel</p>
  </div>
  <div class="page">
    <p>KS performance</p>
    <p>KS THROUGHPUT Percentage of queries replied</p>
    <p>Queries per second</p>
    <p>KS located on an Amazon EC2 m1Large instance.</p>
    <p>Nave HTTPS based 384ms</p>
    <p>Optimized</p>
    <p>Initialization 278 ms</p>
    <p>Query response (Low load) 83 ms</p>
    <p>Query response (Heavy load) 118 ms</p>
    <p>Ping times 78 ms</p>
    <p>Heavy load  3 queries per second</p>
  </div>
  <div class="page">
    <p>Rate limiting</p>
    <p>Strategy: Limit clients to  queries per epoch One epoch lasts  units of time</p>
    <p>Too low Too high Normal usage affected Attacks not slowed down</p>
    <p>Setting epoch duration   Must handle bursty workloads  Systems exhibit periodic patterns, Eg: 1 week</p>
    <p>Setting bound</p>
    <p>Randomized encryption when KS unavailable  Availability not affected by bad parameter choices</p>
    <p>Goal: Slow down online brute-force trials from attacker controlled clients</p>
    <p>Rate limiting can slow down brute-force attacks by 4000x</p>
  </div>
  <div class="page">
    <p>DupLESS system design</p>
  </div>
  <div class="page">
    <p>Simple file system API put, get, list, delete, search, mkdir, move</p>
    <p>DupLESS (DuplicateLess Encryption for simple storage)</p>
    <p>Storage service (SS)Client</p>
    <p>KeyServer</p>
    <p>KeyServer Module</p>
    <p>KeyServer Module</p>
    <p>Client-KS protocol</p>
    <p>DupLESS</p>
    <p>Client Module</p>
    <p>Rate limiting</p>
    <p>Implement API over encrypted data</p>
    <p>Encrypt and decrypt files</p>
    <p>Handle file names and paths</p>
    <p>Run Transparently :  Low overhead  Works when KS is down  No client-side state</p>
  </div>
  <div class="page">
    <p>Put (, , ):</p>
    <p>A put query in DupLESS</p>
    <p>Storage serviceClient</p>
    <p>KeyServer</p>
    <p>KeyServer Module</p>
    <p>KeyServer Module</p>
    <p>Client-KS protocol</p>
    <p>Client Module</p>
    <p>/:</p>
    <p>: Path : File name : Contents</p>
    <p>Deterministic authenticated encryption [RS07]</p>
    <p>Dedup heuristics e.g. file length</p>
    <p>1 2 /0:</p>
    <p>/1:  2</p>
  </div>
  <div class="page">
    <p>DupLESS client</p>
    <p>Written in Python, command-line interface</p>
    <p>Dropbox and Google Drive can work as storage service</p>
    <p>Performance: Latency</p>
    <p>* Overhead of DupLESS over Dropbox</p>
    <p>Put Get</p>
    <p>File size 16KB 16MB</p>
    <p>Overhead* 16% 14%</p>
    <p>File size 16KB 16MB</p>
    <p>Overhead* 10% 5%</p>
    <p>X-axis: File size (KB) Y-axis: Time (ms)</p>
  </div>
  <div class="page">
    <p>Bandwidth overhead</p>
    <p>File size 16KB 16MB</p>
    <p>DupLESS bandwidth overhead compared to plain Dropbox</p>
    <p>Storage overhead</p>
    <p>Amazon AMI dataset, total size: 2035 GB</p>
    <p>DupLESS storage overhead compared to dedup over plaintexts</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Storage service (SS)Client</p>
    <p>KeyServer</p>
    <p>KeyServer Module</p>
    <p>KeyServer Module</p>
    <p>Client-KS protocol</p>
    <p>DupLESS</p>
    <p>Client Module</p>
    <p>First solution to provide secure deduplication + compromise resilience</p>
    <p>Can be deployed transparently over existing systems</p>
    <p>Implementations over Dropbox, Google Drive</p>
    <p>Nominal performance overhead over plaintext dedup</p>
    <p>Storage savings match plaintext dedup</p>
    <p>Encrypted deduplication with the aid of a KeyServer</p>
  </div>
  <div class="page">
    <p>Future work</p>
    <p>Supporting keyword search</p>
    <p>Defense in depth at the KeyServer</p>
    <p>Combine DoS prevention and rate-limiting</p>
    <p>Support complex file-systems</p>
    <p>NFS, CIFS, etc.</p>
    <p>Exploring dedup heuristics</p>
    <p>Rules on which files to select for dedup</p>
  </div>
  <div class="page">
    <p>DupLESS</p>
    <p>Mihir Bellare1 Sriram Keelveedhi1 Thomas Ristenpart2</p>
    <p>Server-Aided Encryption for Deduplicated Storage</p>
    <p>Thank you! Paper available at</p>
    <p>eprint.iacr.org/2013/429.pdf</p>
    <p>Code available at cseweb.ucsd.edu/users/skeelvee/dupless</p>
  </div>
</Presentation>
