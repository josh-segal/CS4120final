<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>GraphOne: A Data Store for Real-time</p>
    <p>Analytics on Evolving Graphs</p>
    <p>Pradeep Kumar, H. Howie Huang</p>
    <p>The George Washington University</p>
  </div>
  <div class="page">
    <p>Graph Applications: Big Data and Scientific Applications</p>
    <p>Basic Building Block for Modern Trade</p>
    <p>Social Network, Navigation, E-Commerce, etc.</p>
    <p>Metadata Store for Big Data</p>
    <p>Li et al. Science04</p>
    <p>Scientific Applications  Protein-Protein Interaction, Metabolic Network, etc.</p>
    <p>uploads</p>
  </div>
  <div class="page">
    <p>Graph Applications: Big Data and Scientific Applications</p>
    <p>Basic Building Block for Modern Trade</p>
    <p>Social Network, Navigation, E-Commerce, etc.</p>
    <p>Metadata Store for Big Data</p>
    <p>Li et al. Science04</p>
    <p>And Many More  Identification of Vulnerable code, Cyber Attack</p>
    <p>Knowledge Graph</p>
    <p>Key for Data Governance, e.g. GDPR</p>
    <p>Scientific Applications  Protein-Protein Interaction, Metabolic Network, etc.</p>
  </div>
  <div class="page">
    <p>Definitions</p>
    <p>Topological Graph: Static (or slowly changing) Relationships  Vertices: Switches and Computers</p>
    <p>Edges: Network Bandwidth between Vertices</p>
    <p>Batch Analytics on Topological Graph  Network Infrastructure Management</p>
    <p>PageRank, Breadth First Traversal, etc.</p>
    <p>(b) A Stream Graph after Time t: Useful for finding all the infected machines</p>
    <p>t0 = t -</p>
    <p>t2= t +</p>
    <p>t1= t2 +</p>
    <p>t3= t2 -</p>
    <p>t5= t2+</p>
    <p>t3= t -</p>
    <p>t</p>
    <p>(a) A Computer Network Showing Articulation Points</p>
    <p>Articulation Points</p>
    <p>* Grades15 Paper from Pacific Northwest National Laboratory; LANL Net-flow dataset, 2015 and 2017; computers and Security15,</p>
    <p>Streaming Graphs: Faster Arrival Rate  Vertices: Users, Processes, Computers + Ports, etc.</p>
    <p>Edges: Network Data Flow, Authentication Logs, Process Events</p>
    <p>Stream Analytics on Streaming Graph  Identification of Security Risks*</p>
  </div>
  <div class="page">
    <p>Observation: Prior Works have Specialized/Private Data Stores</p>
    <p>Research Question: How to perform diverse set of real-time analytics in presence of high arrival rate of graph data?</p>
    <p>Solutions Data Ingestion Data Access Type</p>
    <p>Graph Databases (For Short Queries)</p>
    <p>Fine-grained (e.g., Neo4j)</p>
    <p>Whole Data</p>
    <p>Dynamic Graph Engines (For Batch Analytics)</p>
    <p>Fine-grained (e.g., Stinger)</p>
    <p>Whole Data</p>
    <p>Coarse-grained (e.g., Graphchi)</p>
    <p>Whole Data</p>
    <p>Stream Graph Engines (For Stream Analytics)</p>
    <p>Coarse-grained (e.g. Naiad)</p>
    <p>Streaming Access Of Whole Data</p>
    <p>Coarse-grained (e.g. GraphTau)</p>
    <p>Streaming Access from a Time Window</p>
    <p>GraphOne Both All</p>
    <p>Findings:</p>
    <p>Specialized/Private Data Stores</p>
    <p>Integration of Many Systems</p>
    <p>Excessive Data Duplication</p>
    <p>Weakest Link Problem</p>
  </div>
  <div class="page">
    <p>Abstracting Data Store away from Graph Analytics Engine</p>
    <p>Data Sources</p>
    <p>+</p>
    <p>Graph Data Store Stream</p>
    <p>Analytics</p>
    <p>Actionable Knowledge</p>
    <p>Anomaly</p>
    <p>Community</p>
    <p>Ranking</p>
    <p>Batch Analytics</p>
    <p>Graph Analytics Framework</p>
    <p>Graph Data Store</p>
  </div>
  <div class="page">
    <p>Idea: Abstracting Data Store away from Graph Analytics Engine</p>
    <p>Data Sources</p>
    <p>+ Graph Data Store</p>
    <p>GraphOne (FAST19)</p>
    <p>Stream Analytics</p>
    <p>Actionable Knowledge</p>
    <p>Anomaly</p>
    <p>Community</p>
    <p>Ranking</p>
    <p>Batch Analytics</p>
    <p>Results:  Over Neo4j and SQLite: 2 to 3 orders of higher ingestion rate</p>
    <p>Over Stinger: 5.36x more ingestion rate, over 3x speedup for analytics</p>
    <p>Over Static Graph Engine: No Pre-processing Cost</p>
    <p>Graph Analytics Framework</p>
  </div>
  <div class="page">
    <p>GraphOne: Background and Architecture</p>
    <p>(a) Example graph</p>
    <p>Vertex Array Edge Arrays</p>
    <p>w2 w3</p>
    <p>w1 w5</p>
    <p>Opportunity: Hybrid Store</p>
    <p>(c) Adjacency List</p>
    <p>Indexed Data Structure</p>
    <p>Coarse-grained Versioning</p>
    <p>(b) Edge List</p>
    <p>Log: Captures Temporal Ordering</p>
    <p>Fine-grained Versioning is Free</p>
    <p>Stream Analytics</p>
    <p>Batch Analytics</p>
    <p>Graph Data Updates</p>
    <p>Data Management</p>
    <p>Hybrid Store</p>
    <p>Archiving</p>
    <p>Adjacency Store</p>
    <p>New log Old log</p>
    <p>Circular Edge Log</p>
    <p>Logging</p>
    <p>Data Durability NVMe</p>
    <p>F in</p>
    <p>e -g</p>
    <p>ra in</p>
    <p>e d</p>
    <p>Coarse-grained</p>
    <p>Data Visibility</p>
    <p>Two New Abstractions:</p>
    <p>Data Visibility: Analytics</p>
    <p>choose their Ingestion type</p>
  </div>
  <div class="page">
    <p>GraphOne: Background and Architecture</p>
    <p>(a) Example graph</p>
    <p>Vertex Array Edge Arrays</p>
    <p>w2 w3</p>
    <p>w1 w5</p>
    <p>Opportunity: Hybrid Store</p>
    <p>(c) Adjacency List</p>
    <p>Indexed Data Structure</p>
    <p>Coarse-grained Versioning</p>
    <p>(b) Edge List</p>
    <p>Log: Captures Temporal Ordering</p>
    <p>Fine-grained Versioning is Free</p>
    <p>Two New Abstractions:</p>
    <p>Data Visibility: Analytics</p>
    <p>choose their Ingestion type</p>
    <p>Graph View:</p>
    <p>Static View: Batch Analytics</p>
    <p>Stream View: Stream Analytics</p>
    <p>Data Management</p>
    <p>Hybrid Store</p>
    <p>GraphView (Data Visibility)</p>
    <p>Static View</p>
    <p>Archiving</p>
    <p>Adjacency Store</p>
    <p>Stream View</p>
    <p>New log Old log</p>
    <p>Circular Edge Log</p>
    <p>Stream Analytics</p>
    <p>Batch Analytics</p>
    <p>Logging</p>
    <p>Data Durability NVMe</p>
    <p>Graph Data Updates</p>
    <p>F in</p>
    <p>e -g</p>
    <p>ra in</p>
    <p>e d</p>
    <p>Coarse-grained</p>
  </div>
  <div class="page">
    <p>Hybrid Store Details</p>
    <p>Edge Deletion at t7</p>
    <p>Edge Arrays</p>
    <p>Vertex Array</p>
    <p>Multi-version Degree Array</p>
    <p>t0 t1 t2 t3</p>
    <p>S0, 4 Global</p>
    <p>Snapshot List</p>
    <p>Circular Edge Log 2</p>
    <p>t4 t1</p>
    <p>t2</p>
    <p>t3</p>
    <p>t0</p>
    <p>t5 t6</p>
    <p>t8</p>
    <p>t9</p>
    <p>S1, 8</p>
    <p>t4 t5 t6 t7</p>
    <p>Adjacency List</p>
  </div>
  <div class="page">
    <p>Hybrid Store Details</p>
    <p>Edge Deletion at t7</p>
    <p>Vertex Array</p>
    <p>Multi-version Degree Array</p>
    <p>Adjacency List</p>
    <p>-1</p>
    <p>-13,S1</p>
    <p>S1, 8</p>
    <p>S0, 4 Global</p>
    <p>Snapshot List</p>
    <p>t0 t1 t2 t3 t4 t5 t6 t7 t8 t9</p>
    <p>Non-archived</p>
    <p>edgesCircular Edge Log 2</p>
    <p>t4 t1</p>
    <p>t2</p>
    <p>t3</p>
    <p>t0</p>
    <p>t5 t6</p>
    <p>t8</p>
    <p>t9</p>
    <p>Stream View</p>
    <p>Static View</p>
    <p>Whole Data Access</p>
    <p>Data Access from a Time-Window</p>
    <p>GraphView</p>
    <p>handle create-static-view(flags) status delete-static-view (handle) count get-nebr-degree(handle, vertex-id) count get-nebrs(handle, vertex-id, ptr)</p>
    <p>status update-view(handle) bool has-vertex-changed(handle, vertex-id)</p>
    <p>Edge Arrays</p>
  </div>
  <div class="page">
    <p>Hybrid Store: Optimizing the Archiving Phase</p>
    <p>edges with source vertex range [v0, v1)</p>
    <p>Adjacency list Data</p>
    <p>edges with source vertex range [v1, v2)</p>
    <p>v0</p>
    <p>v1</p>
    <p>v2</p>
    <p>Non-atomic Archiving</p>
    <p>Non-atomic Archiving</p>
    <p>Tail Head</p>
    <p>Edge Log</p>
    <p>Local Buffers</p>
    <p>Local Buffers</p>
    <p>Edge Sharding</p>
    <p>Archiving with Edge Sharding</p>
    <p>Archiving with Atomic Instruction</p>
    <p>Run Time (sec)</p>
    <p>Sharding Filling Degree Filling Edge Array</p>
    <p>Archiving Phase</p>
    <p>Machine: 2 Intel Xeon CPU socket  14 cores each,  Hyperthreading enabled Dataset: Kron-28 Graph  256 Million Vertex,  4 Billion Edges 0</p>
    <p>A rc</p>
    <p>h iv</p>
    <p>in g</p>
    <p>R</p>
    <p>a te</p>
    <p>M il</p>
    <p>li o</p>
    <p>n s</p>
    <p>Thread Count</p>
  </div>
  <div class="page">
    <p>Hybrid Store: Optimizing Memory Usage</p>
    <p>Edge Log : Circular</p>
    <p>Degree Array: Older Versions Reused</p>
    <p>Optimizations Chain Count Memory</p>
    <p>Needed (GB)</p>
    <p>Average Maximum</p>
    <p>Baseline System 29.18 65536 148.73</p>
    <p>Static GraphOne 0.45 1 33.81</p>
    <p>+Cacheline Size allocation 2.96 65536 47.42</p>
    <p>+Hub vertex Handling 2.47 3998 45.79</p>
    <p>Chained edge arrays</p>
    <p>Vertex array</p>
    <p>Multi-version Degree array</p>
    <p>-1</p>
    <p>-13,S1</p>
    <p>Archiving Rate BFS PageRank 1-Hop</p>
    <p>S p</p>
    <p>e e</p>
    <p>d u</p>
    <p>p</p>
    <p>Baseline +Cacheline Sized +Hub Vertex</p>
    <p>Edge Arrays: Many Memory Links  Cacheline Size Memory Allocation  Hub Vertex Handling</p>
  </div>
  <div class="page">
    <p>A rc</p>
    <p>h iv</p>
    <p>in g</p>
    <p>R a</p>
    <p>te</p>
    <p>(E d</p>
    <p>g e</p>
    <p>/s )</p>
    <p>M il</p>
    <p>li o</p>
    <p>n s</p>
    <p>A lg</p>
    <p>o ri</p>
    <p>th m</p>
    <p>R u</p>
    <p>n t</p>
    <p>im e</p>
    <p>(N</p>
    <p>o rm</p>
    <p>a li</p>
    <p>ze d</p>
    <p>)</p>
    <p>Non-archived Edge Count (Log axis with base 2)</p>
    <p>PageRank BFS 1 Hop Archiving Rate</p>
    <p>Results: Hybrid Store Composition and Ingestion Rate</p>
    <p>Max Non-archived Edge count:  217 edges</p>
    <p>Archiving Threshold:  216 edges</p>
    <p>Archive Rate:  43.68 Million edges/s</p>
    <p>Faster Ingestion?</p>
    <p>Logging rate:</p>
    <p>~80 Million edges/sec</p>
    <p>Higher archiving threshold</p>
    <p>Graph Name Vertex Count (in Millions)</p>
    <p>Edge Count (in Millions)</p>
    <p>Rates (Million Edges/s)</p>
    <p>Logging Archiving Ingestion</p>
    <p>Twitter (D) 52.58 1963.26 82.62 47.98 66.39</p>
    <p>Friendster (D) 68.35 2586.15 82.85 49.32 60.40</p>
    <p>Subdomain (D) 101.72 2043.20 82.86 43.43 68.25</p>
    <p>Kron-28 (U) 256.00 4096.00 79.23 43.68 52.39</p>
    <p>LANL (D) 0.16 1521.19 35.98 28.91 26.99</p>
    <p>D = Directed, U = Undirected</p>
  </div>
  <div class="page">
    <p>Results: Dynamic Graph Systems</p>
    <p>Updates BFS PageRank</p>
    <p>S p</p>
    <p>e e</p>
    <p>d u</p>
    <p>p</p>
    <p>Stinger GraphOne</p>
    <p>Neo4j GraphOne</p>
    <p>U p</p>
    <p>d a</p>
    <p>te R</p>
    <p>a te</p>
    <p>(e</p>
    <p>d g</p>
    <p>e s/</p>
    <p>se c)</p>
    <p>SQLite GraphOne</p>
    <p>U p</p>
    <p>d a</p>
    <p>te R</p>
    <p>a te</p>
    <p>(e</p>
    <p>d g</p>
    <p>e s/</p>
    <p>se c)</p>
    <p>Against Stinger  5.36x Higher Ingestion Rate  12.76x and 3.18x Speedup for BFS and PageRank</p>
    <p>Against SQLite and Neo4j:  2 to 3 Orders of Magnitude Higher Ingestion Rate</p>
    <p>Dataset: RMAT Graph  4 Million Vertices, 64 Million Edges  8 bytes weight  40 Million updates, 2.5 Millions deletions</p>
    <p>Experimental Setup  Two Intel Xeon CPU E5-2683 sockets with 14 Core each  500GB Memory  Samsung 950 Pro NVMe SSD, 512GB</p>
  </div>
  <div class="page">
    <p>Results: Cost of Data Management Over Static Graph Engine</p>
    <p>Static GraphOne: For Static Graphs  Builds graph in entirety, Like Galois</p>
    <p>GraphOne: For Dynamic/Streaming Graphs  Builds graph one edge at a time</p>
    <p>Twitter Friendster Subdomain Kron-28-16 Kron-21-16</p>
    <p>S p</p>
    <p>e e</p>
    <p>d u</p>
    <p>p (C</p>
    <p>o m</p>
    <p>p a</p>
    <p>re d</p>
    <p>t o</p>
    <p>S</p>
    <p>ta ti</p>
    <p>c G</p>
    <p>ra p</p>
    <p>h O</p>
    <p>n e</p>
    <p>) BFS PageRank 1-Hop</p>
    <p>17% less performance for real-world graphs  Avoids pre-processing cost completely</p>
    <p>32.73 second pre-processing cost, 34.12x of BFS</p>
  </div>
  <div class="page">
    <p>GraphOne: Conclusion</p>
    <p>Batch and Stream Analytics on Evolving Graphs</p>
    <p>Hybrid Store: Two Abstractions</p>
    <p>Data Visibility and GraphView</p>
    <p>Optimizations:  Edge Sharding and Memory Allocation</p>
    <p>Results:  Over Neo4j and SQLite: 2 to 3 orders of higher</p>
    <p>ingestion rate</p>
    <p>Over Stinger: 5.36x more ingestion rate, over 3x speedup for analytics</p>
    <p>Over Static Graph Engine: No Pre-processing Cost</p>
    <p>A Real-System you can use</p>
    <p>Can convert text/logs/csv/json to graph</p>
    <p>Data Management</p>
    <p>Hybrid Store</p>
    <p>GraphView (Data Visibility)</p>
    <p>Static View</p>
    <p>Archiving</p>
    <p>Adjacency Store</p>
    <p>Stream View</p>
    <p>New log Old log</p>
    <p>Circular Edge Log</p>
    <p>Stream Analytics</p>
    <p>Batch Analytics</p>
    <p>Logging</p>
    <p>Data Durability NVMe</p>
    <p>Graph Data Updates</p>
    <p>F in</p>
    <p>e -g</p>
    <p>ra in</p>
    <p>e d</p>
    <p>Coarse-grained</p>
  </div>
  <div class="page">
    <p>Thank You pradeepk@email.gwu.edu</p>
  </div>
</Presentation>
