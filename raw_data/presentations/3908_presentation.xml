<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Android Provenance: Debugging Device</p>
    <p>Disorders Sharjeel Qureshi, Dawood Tariq, Ashish Gehani</p>
    <p>SRI Interna:onal Nathaniel Husted Indiana University</p>
  </div>
  <div class="page">
    <p>Android OS</p>
    <p>Smartphone Opera:ng System by Google  49.4% Market share in the US [1]  75% Market share worldwide [2]  Over 700,000 apps at the end of 2012 [3]  Developers average ~$2,700 per app, per month [4]</p>
  </div>
  <div class="page">
    <p>Traditional Development and Debugging</p>
    <p>Eclipse  Open Source IDE  Android Developer Tools and Debugger</p>
    <p>Android SDK (Java Apps and the Framework API)  Emulator  Automa:c UI Interac:ons (Monkey, MonkeyRunner, uiautomator  Not related)</p>
    <p>System tracing u:li:es  Sta:c code analysis</p>
    <p>Android NDK (Na:ve libraries)  A compiler, a linker, and a non-standard C library.</p>
  </div>
  <div class="page">
    <p>Challenges to Traditional Debugging on Android  Lots of Inter-Process Communica:on (IPC)</p>
    <p>Both within the app and through the framework  Lots of Asynchronous Func:ons and Threading  Background processes, foreground processes in the same App</p>
  </div>
  <div class="page">
    <p>Complex Device Disorders</p>
    <p>Performance issues  Bugs disappearing with the debugger (Heisenbugs)  Bafery life issues  How can we solve these issues when all our tools focus on a single applica:on?</p>
  </div>
  <div class="page">
    <p>How can we debug complex disorders?</p>
    <p>Provenance!</p>
  </div>
  <div class="page">
    <p>Provenance for Troubleshooting</p>
    <p>Chiarinis Provenance for System Troubleshoo:ng [5].  Focuses on *nix based server environments  Goals were to improve a systems administrators mental model of the system.</p>
  </div>
  <div class="page">
    <p>Our Contribution: Provenance for Debugging  A manner to gather low level system provenance on Android with minimal performance impact</p>
    <p>A way of quickly querying our provenance output</p>
  </div>
  <div class="page">
    <p>Provenance for Debugging Requirements</p>
    <p>Low level Informa:on Source: Linux Audit [4]  A Data Provenance System: SPADE [5]  A Provenance Querying Method</p>
    <p>Built in to SPADE</p>
  </div>
  <div class="page">
    <p>Information Source: Linux Audit</p>
  </div>
  <div class="page">
    <p>Provenance System: SPADE for Android</p>
  </div>
  <div class="page">
    <p>Querying the Android SPADE database</p>
  </div>
  <div class="page">
    <p>Provenance Debugging Methodology</p>
    <p>Installed Android ports of SPADE and Audit on a Samsung Galaxy Nexus phone running a custom Android (AOSP) OS.</p>
    <p>hfps://github.com/nwhusted/AuditdAndroid  hfp://spade.csl.sri.com/SPADE/Downloads.html</p>
    <p>Configured Audit to ignore informa:on regarding SPADE and itself  We ran our example applica:ons and manually interfaced with them  Final output was analyzed on a desktop machine</p>
    <p>Output graphs were ~900 ver:ces and ~5000 edges  Output was filtered with SPADEs Interac:ve Query Client</p>
  </div>
  <div class="page">
    <p>Provenance for Solving Wakelocks</p>
    <p>BUGGY!</p>
    <p>Correct!</p>
    <p>result = getEdges(loca:on:*wake *lock, null, opera:on:write)</p>
  </div>
  <div class="page">
    <p>Provenance for Solving UI Latency</p>
    <p>Enthusiast replaces blocking calls to /dev/random  Poten:al solu:on: Call /dev/urandom instead.  Its easy to iden:fy if a call is being made to /dev/random instead of / dev/urandom:</p>
    <p>result = getEdges(null, loca:on:/dev/*random, opera:on:read)</p>
  </div>
  <div class="page">
    <p>Provenance Has Little Performance Impact</p>
    <p>Performance Benchmarks</p>
    <p>Configura3on AnTuTu Score</p>
    <p>Factory Default</p>
    <p>Audit Only 7770</p>
    <p>Audit with SPADE</p>
    <p>Score Context  8634 (according to website)  16301 (Galaxy S III)</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Our system captures complicated system bugs  Our system impacts performance negligibly  Querying system bugs is straight forward  Querying s:ll requires expert knowledge of the system</p>
    <p>This could be eased by increased developer tools  Google could integrate our method in to their tool chain</p>
  </div>
  <div class="page">
    <p>Acknowledgements</p>
    <p>This material is based upon work supported by the Na:onal Science Founda:on under Grant IIS-1116414. Any opinions, findings, and conclusions or recommenda:ons expressed in this material are those of the authors and do not necessarily reflect the views of the Na:onal Science Founda:on.</p>
  </div>
  <div class="page">
    <p>References</p>
    <p>most-money/ 5. hfp://www.usenix.org/event/lisa11/tech/full_papers/Chiarini.pdf</p>
  </div>
</Presentation>
