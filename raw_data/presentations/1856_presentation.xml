<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>CodePlugin: Plugging Deduplica1on into Erasure Coding for Cloud</p>
    <p>Storage</p>
    <p>Mengbai Xiao, Qi Wei, Songqing Chen</p>
    <p>George Mason University</p>
    <p>Mohammed A. Hassan</p>
    <p>NetApp Inc.</p>
    <p>Weijun Xiao Virginia Commonwealth</p>
    <p>University</p>
  </div>
  <div class="page">
    <p>Cloud Storage Systems</p>
    <p>The cloud services mostly rely on the cloud storage systems, e.g., Google File System (GFS) or Windows Azure Storage (WAS)</p>
  </div>
  <div class="page">
    <p>Cloud Storage System Features</p>
    <p>Fixed size data files  WAS [SOSP 11] dumps data as 300 MB files</p>
    <p>Append-only file system  Random writes are not allowed</p>
    <p>Availability and reliability  Node failures are not uncommon</p>
  </div>
  <div class="page">
    <p>Replica Protocol</p>
    <p>Triple replica  There are 3 copies for each file</p>
    <p>Erasure code  Coding parameter: (k, m)  Higher availability and storage efficiency  Lower throughput</p>
  </div>
  <div class="page">
    <p>Redundant Workload  Redundant data in cloud storage</p>
    <p>Replica protocols have to process the redundant data  Extra I/O cost  Extra storage cost 5</p>
    <p>Similar Data</p>
    <p>Cloud Storage System (Append-only)</p>
    <p>VM Edit</p>
  </div>
  <div class="page">
    <p>Deduplica1on Technique</p>
    <p>Deduplica1on is widely used in the backup storage systems</p>
    <p>Typical steps  Chunk and fingerprint input data  Determine redundancy by searching index table  Process unique and redundant data, respec1vely</p>
  </div>
  <div class="page">
    <p>Challenges</p>
    <p>Nave method  Deduplica1on and then encoding</p>
    <p>Disadvantages  Demand filesystem support  Fragmenta1on: sequen1al I/Os turn into random I/Os</p>
  </div>
  <div class="page">
    <p>CodePlugin Design and Implementa1on</p>
    <p>Preliminary Evalua1on</p>
    <p>Conclusion and Future Work</p>
    <p>Outline</p>
  </div>
  <div class="page">
    <p>CodePlugin Design and Implementa1on</p>
    <p>Features  CodePlugin is designed as an independent coding scheme</p>
    <p>CodePlugin keeps the original files untouched  CodePlugin can be seamlessly integrated with any erasure code</p>
    <p>Major steps  Preprocess (deduplica1on)  Encode and decode</p>
  </div>
  <div class="page">
    <p>Preprocess  Addressing Blocks</p>
    <p>fid = 0</p>
    <p>sid = 0</p>
    <p>cid = 0 1 2 3</p>
    <p>(0, 2, 3)</p>
    <p>Data file rasteriza1on  Each row is the unit of erasure coding, named sub-file</p>
    <p>Each block is the unit of deduplica1on  Each block is addressed as (fid, sid, cid)</p>
    <p>Coding parameter: (4, 2)</p>
  </div>
  <div class="page">
    <p>Preprocess  Deuplica1on</p>
    <p>Iden1fy the redundant and unique blocks  Fingerprint table in main memory  Evic1on algorithm: LRU</p>
    <p>Generate one map file for one data file</p>
    <p>... FP#2 FP#1 (0,0,0)</p>
    <p>(0,0,1)</p>
    <p>Fingerprint table</p>
    <p>Status: R Source: (0,0,1)</p>
  </div>
  <div class="page">
    <p>Preprocess  Pseudo-shuffling</p>
    <p>Status: R Source: (0,0,2) Stripe: 3</p>
    <p>Shuffle blocks for encoding unique blocks only  Migra1ons are recorded in the map file</p>
  </div>
  <div class="page">
    <p>Preprocess  Sub-file Exchange (1)</p>
    <p>Op1onal step  Exchange sub-files for balancing unique block number</p>
  </div>
  <div class="page">
    <p>Preprocess  Sub-file Exchange (2)</p>
    <p>Status: U Coded: 0 Peers: (1,0,1) (0,1,1) (0,2,1)</p>
    <p>Extra informa1on for decoding  Encoding peers and coded file loca1on (file id)</p>
  </div>
  <div class="page">
    <p>Encoding  Encode the data file stripe by stripe  Skip columns full of redundant block</p>
    <p>Coded file 15</p>
  </div>
  <div class="page">
    <p>Decoding</p>
    <p>Status: U Coded: 0 Peers: (1,0,1) (0,1,1) (0,2,1)</p>
    <p>Status: R Source: (0,0,1) stripe: 2</p>
    <p>Unique blocks: read corresponding blocks and decode</p>
    <p>Redundant blocks: read from the source</p>
  </div>
  <div class="page">
    <p>CodePlugin Design and Implementa1on</p>
    <p>Preliminary Evalua1on</p>
    <p>Conclusion and Future Work</p>
    <p>Outline</p>
  </div>
  <div class="page">
    <p>Experiment Setup</p>
    <p>Dataset  17 VM images of different OS, including Ubuntu, Fedora, Debian and etc.</p>
    <p>Dump these images into 300 MB files, totally ~40 GB  23% redundant data in the workload</p>
    <p>Experiment factors  Coding parameters: (4, 2)/(6, 3)/(10, 5)  Sub-file exchange number: 1(No)/2/4  Cache size: 128/256/512 MB</p>
  </div>
  <div class="page">
    <p>Storage Efficiency</p>
    <p>RS EX-1 EX-2 EX-4</p>
    <p>St or</p>
    <p>ag e</p>
    <p>V ol</p>
    <p>um e</p>
    <p>(G B</p>
    <p>)</p>
    <p>coded-file map-file</p>
  </div>
  <div class="page">
    <p>Encoding Throughput (1)</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (M</p>
    <p>B /s</p>
    <p>)</p>
    <p>Input Volume (GB)</p>
    <p>CodePlugin-no-EX CodePlugin-2-EX CodePlugin-4-EX</p>
    <p>Naive RS</p>
    <p>~20%</p>
    <p>Varying sub-file exchange number</p>
  </div>
  <div class="page">
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (M</p>
    <p>B /s</p>
    <p>)</p>
    <p>Input Volume (GB)</p>
    <p>(4, 2, 8) CodePlugin (6, 3, 8) CodePlugin</p>
    <p>(10, 5, 8) CodePlugin (4, 2, 8) RS naive code (6, 3, 8) RS naive code</p>
    <p>(10, 5, 8) RS naive code</p>
    <p>Encoding Throughput (2)</p>
    <p>Varying coding parameters</p>
  </div>
  <div class="page">
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (M</p>
    <p>B /s</p>
    <p>)</p>
    <p>Input Volume (GB)</p>
    <p>Encoding Throughput (3)</p>
    <p>Varying cache size</p>
  </div>
  <div class="page">
    <p>Conclusion and Future Work  We design and implement the CodePlugin, which integrates the deduplica1on into the erasure coding</p>
    <p>CodePlugin is designed as a system-independent coding scheme with the input files untouched</p>
    <p>According to preliminary evalua1on, upto ~17% storage space can be saved and upto ~20% encoding throughput can be improved on the fresh VM images workload.</p>
  </div>
  <div class="page">
    <p>Thanks</p>
  </div>
</Presentation>
