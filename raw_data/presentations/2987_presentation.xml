<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>SCONE: Secure Linux Container Environments</p>
    <p>with Intel SGX S. Arnautov, B. Trach, F. Gregor, Thomas Knauth, and A. Martin, Technische Universitt Dresden; C.</p>
    <p>Priebe, J. Lind, D. Muthukumaran, D. O'Keeffe, and M. Stillwell, Imperial College London; D. Goltzsche, Technische Universitt Braunschweig; D. Eyers, University of Otago; R. Kapitza, Technische Universitt</p>
    <p>Braunschweig; P. Pietzuch, Imperial College London; C. Fetzer, Technische Universitt Dresden</p>
    <p>thomas.knauth@tu-dresden.de 1</p>
  </div>
  <div class="page">
    <p>Trust Issues: The Providers Perspective</p>
    <p>Cloud provider does not trust users</p>
    <p>Use virtual machines to isolate users from each other and the host</p>
    <p>VMs only provide one way protection</p>
    <p>Redis</p>
    <p>OS</p>
    <p>VMM</p>
    <p>Firmware</p>
    <p>Cloud platform</p>
    <p>Staff</p>
    <p>tru st</p>
    <p>ed</p>
  </div>
  <div class="page">
    <p>Trust Issues: The Users Perspective</p>
    <p>Users trust their application</p>
    <p>Users must implicitly trust the cloud provider</p>
    <p>Existing applications implicitly assume trusted operating system</p>
    <p>Redis</p>
    <p>OS</p>
    <p>VMM</p>
    <p>Firmware</p>
    <p>Cloud platform</p>
    <p>Staff</p>
    <p>un tru</p>
    <p>st ed</p>
  </div>
  <div class="page">
    <p>Containers are the new VMs</p>
    <p>Containers provide resource isolation and bundling</p>
    <p>Smaller resource overhead than virtual machines</p>
    <p>Convenient tooling to create and deploy applications in the cloud</p>
  </div>
  <div class="page">
    <p>Disaster!</p>
    <p>OS</p>
    <p>VMM</p>
    <p>Firmware</p>
    <p>Cloud platform</p>
    <p>Staff</p>
    <p>un tru</p>
    <p>st ed</p>
  </div>
  <div class="page">
    <p>Disaster!</p>
    <p>OS</p>
    <p>VMM</p>
    <p>Firmware</p>
    <p>Cloud platform</p>
    <p>Staff</p>
    <p>un tru</p>
    <p>st ed</p>
  </div>
  <div class="page">
    <p>Disaster!</p>
    <p>OS</p>
    <p>VMM</p>
    <p>Firmware</p>
    <p>Cloud platform</p>
    <p>Staff</p>
    <p>un tru</p>
    <p>st ed</p>
  </div>
  <div class="page">
    <p>Disaster!</p>
    <p>OS</p>
    <p>VMM</p>
    <p>Firmware</p>
    <p>Cloud platform</p>
    <p>Staff</p>
    <p>un tru</p>
    <p>st ed</p>
  </div>
  <div class="page">
    <p>We want to</p>
    <p>OS</p>
    <p>VMM</p>
    <p>Firmware</p>
    <p>Cloud platform</p>
    <p>Staff</p>
    <p>un tru</p>
    <p>st ed</p>
  </div>
  <div class="page">
    <p>We want to</p>
    <p>OS</p>
    <p>VMM</p>
    <p>Firmware</p>
    <p>Cloud platform</p>
    <p>Staff</p>
    <p>un tru</p>
    <p>st ed</p>
    <p>run unmodified Linux applications</p>
  </div>
  <div class="page">
    <p>We want to</p>
    <p>OS</p>
    <p>VMM</p>
    <p>Firmware</p>
    <p>Cloud platform</p>
    <p>Staff</p>
    <p>un tru</p>
    <p>st ed</p>
    <p>run unmodified Linux applications</p>
    <p>in containers</p>
  </div>
  <div class="page">
    <p>We want to</p>
    <p>OS</p>
    <p>VMM</p>
    <p>Firmware</p>
    <p>Cloud platform</p>
    <p>Staff</p>
    <p>un tru</p>
    <p>st ed</p>
    <p>run unmodified Linux applications</p>
    <p>in containers</p>
    <p>in an untrusted cloud</p>
  </div>
  <div class="page">
    <p>We want to</p>
    <p>OS</p>
    <p>VMM</p>
    <p>Firmware</p>
    <p>Cloud platform</p>
    <p>Staff</p>
    <p>un tru</p>
    <p>st ed</p>
    <p>run unmodified Linux applications</p>
    <p>in containers</p>
    <p>in an untrusted cloud</p>
    <p>securely and</p>
  </div>
  <div class="page">
    <p>We want to</p>
    <p>OS</p>
    <p>VMM</p>
    <p>Firmware</p>
    <p>Cloud platform</p>
    <p>Staff</p>
    <p>un tru</p>
    <p>st ed</p>
    <p>run unmodified Linux applications</p>
    <p>in containers</p>
    <p>in an untrusted cloud</p>
    <p>securely and</p>
    <p>with acceptable performance</p>
  </div>
  <div class="page">
    <p>Secure Guard Extensions</p>
    <p>New enclave processor mode</p>
    <p>Users can create a HWenforced trusted environment</p>
    <p>Only trust Intel and Secure Guard Extensions (SGX) implementation</p>
    <p>OS</p>
    <p>VMM</p>
    <p>Firmware</p>
    <p>Cloud platform</p>
    <p>Staff</p>
    <p>un tru</p>
    <p>st ed</p>
    <p>Enclave</p>
  </div>
  <div class="page">
    <p>SGX: HW-enforced Security</p>
    <p>18 new instructions to manage enclave life cycle</p>
    <p>Enclave memory only accessible from enclave</p>
    <p>Certain instructions disallowed, e.g., syscall</p>
    <p>EENTER</p>
    <p>Execute</p>
    <p>Return</p>
    <p>privileged access from</p>
    <p>OS, VMM, SMM forbidden</p>
    <p>untrusted trusted</p>
  </div>
  <div class="page">
    <p>Challenge 1: Interface</p>
    <p>Haven (OSDI14): library operating system in enclave</p>
    <p>Large TCB  more vulnerable</p>
    <p>Small interface (22 system calls)</p>
    <p>Shields protect the interface</p>
    <p>Application Code</p>
    <p>Host OS</p>
    <p>Library OS C Library Libraries</p>
    <p>Shielding layer</p>
    <p>Library OS inside TCB</p>
    <p>Ex te</p>
    <p>rn al</p>
    <p>c on</p>
    <p>ta in</p>
    <p>er in</p>
    <p>te rfa</p>
    <p>ce tr</p>
    <p>us te</p>
    <p>d un</p>
    <p>tru st</p>
    <p>ed</p>
  </div>
  <div class="page">
    <p>Challenge 1: Interface</p>
    <p>Small TCB</p>
    <p>C library interface is complex</p>
    <p>Harder to protect</p>
    <p>Application Code</p>
    <p>Shim C Library</p>
    <p>C Library Host OS</p>
    <p>Libraries</p>
    <p>Minimal TCB</p>
  </div>
  <div class="page">
    <p>Challenge 2: Performance</p>
    <p>sy st</p>
    <p>em c</p>
    <p>al l f</p>
    <p>re qu</p>
    <p>en cy</p>
    <p>(1 00</p>
    <p>ec on</p>
    <p>d)</p>
    <p>Threads</p>
    <p>native</p>
    <p>synchronous enclave exits</p>
    <p>pwrite() with 32 byte buffer  4 cores with hyper threading</p>
  </div>
  <div class="page">
    <p>Challenge 2: Performance</p>
    <p>sy st</p>
    <p>em c</p>
    <p>al l f</p>
    <p>re qu</p>
    <p>en cy</p>
    <p>(1 00</p>
    <p>ec on</p>
    <p>d)</p>
    <p>Threads</p>
    <p>native</p>
    <p>synchronous enclave exits</p>
    <p>pwrite() with 32 byte buffer  4 cores with hyper threading</p>
  </div>
  <div class="page">
    <p>Host operating system</p>
    <p>SCONE Architecture</p>
    <p>Libraries Application</p>
    <p>SCONE module Intel SGX driver Container (cgroups)</p>
  </div>
  <div class="page">
    <p>Host operating system</p>
    <p>SCONE Architecture  Enhanced C library  small</p>
    <p>TCB (Challenge 1)</p>
    <p>SCONE C library</p>
    <p>Libraries Application</p>
    <p>SCONE module Intel SGX driver Container (cgroups)</p>
  </div>
  <div class="page">
    <p>Host operating system</p>
    <p>SCONE Architecture  Enhanced C library  small</p>
    <p>TCB (Challenge 1)</p>
    <p>Asynchronous system calls and user space threading reduce number of enclave exits (Challenge 2)</p>
    <p>SCONE C library Asynchronous system calls</p>
    <p>M:N threading</p>
    <p>Libraries Application</p>
    <p>SCONE module Intel SGX driver Container (cgroups)</p>
  </div>
  <div class="page">
    <p>Host operating system</p>
    <p>SCONE Architecture  Enhanced C library  small</p>
    <p>TCB (Challenge 1)</p>
    <p>Asynchronous system calls and user space threading reduce number of enclave exits (Challenge 2)</p>
    <p>Network and file system shields actively protect user data</p>
    <p>SCONE C library Asynchronous system calls</p>
    <p>M:N threading Network shield File system shield</p>
    <p>Libraries Application</p>
    <p>SCONE module Intel SGX driver Container (cgroups)</p>
  </div>
  <div class="page">
    <p>Anatomy of a System Call</p>
    <p>enclave kernel</p>
  </div>
  <div class="page">
    <p>read, fd, buf, size</p>
    <p>Anatomy of a System Call</p>
    <p>enclave</p>
    <p>read(fd, buf, size)</p>
    <p>[0]</p>
    <p>[2]</p>
    <p>kernel</p>
    <p>T1</p>
    <p>[1]</p>
    <p>system call slots</p>
  </div>
  <div class="page">
    <p>read, fd, buf, size</p>
    <p>Anatomy of a System Call</p>
    <p>enclave kernel</p>
    <p>read(fd, buf, size) S1T1</p>
    <p>[0]</p>
    <p>[2] [1]</p>
    <p>system call slots</p>
  </div>
  <div class="page">
    <p>Anatomy of a System Call</p>
    <p>enclave kernel</p>
    <p>read(fd, buf, size)</p>
    <p>[0]</p>
    <p>T1</p>
    <p>read, fd, buf, size[0]</p>
    <p>[2] [1]</p>
    <p>system call slots</p>
  </div>
  <div class="page">
    <p>Anatomy of a System Call</p>
    <p>enclave kernel</p>
    <p>read(fd, buf, size) T1</p>
    <p>read, fd, buf, size[0]</p>
    <p>[2] [1]</p>
    <p>system call slots</p>
  </div>
  <div class="page">
    <p>read, fd, buf, sizeread(fd, buf, size) T2</p>
    <p>Anatomy of a System Call</p>
    <p>enclave kernel</p>
    <p>read(fd, buf, size) T1</p>
    <p>read, fd, buf, size[0]</p>
    <p>[2] [1]</p>
    <p>system call slots</p>
  </div>
  <div class="page">
    <p>read, fd, buf, sizeread(fd, buf, size) T2</p>
    <p>Anatomy of a System Call</p>
    <p>enclave kernel</p>
    <p>read(fd, buf, size) T1</p>
    <p>read, fd, buf, size[0]</p>
    <p>[2] [1]</p>
    <p>system call slots</p>
    <p>switch to ready user space thread</p>
  </div>
  <div class="page">
    <p>read, fd, buf, sizeread(fd, buf, size) T2</p>
    <p>read, fd, buf, size</p>
    <p>Anatomy of a System Call</p>
    <p>enclave kernel</p>
    <p>read(fd, buf, size) T1</p>
    <p>read, fd, buf, size[0]</p>
    <p>[2] [1]</p>
    <p>system call slots</p>
    <p>switch to ready user space thread</p>
  </div>
  <div class="page">
    <p>read, fd, buf, sizeread(fd, buf, size) T2</p>
    <p>read, fd, buf, size</p>
    <p>Anatomy of a System Call</p>
    <p>enclave kernel</p>
    <p>read(fd, buf, size) T1</p>
    <p>read, fd, buf, size[0]</p>
    <p>[2] [1]</p>
    <p>system call slots</p>
    <p>switch to ready user space thread</p>
    <p>[2]</p>
  </div>
  <div class="page">
    <p>read, fd, buf, size</p>
    <p>Anatomy of a System Call</p>
    <p>enclave kernel</p>
    <p>read(fd, buf, size) T1</p>
    <p>read, fd, buf, sizeread(fd, buf, size) T2</p>
    <p>read, fd, buf, size[0]</p>
    <p>[2] [1]</p>
    <p>system call slots</p>
  </div>
  <div class="page">
    <p>read, fd, buf, size</p>
    <p>Anatomy of a System Call</p>
    <p>enclave kernel</p>
    <p>read(fd, buf, size) T1</p>
    <p>read, fd, buf, sizeread(fd, buf, size) T2</p>
    <p>read, fd, buf, size[0]</p>
    <p>[2] [1]</p>
    <p>system call slots</p>
    <p>[0] #2&amp;$?%</p>
  </div>
  <div class="page">
    <p>read, fd, buf, size</p>
    <p>Anatomy of a System Call</p>
    <p>enclave kernel</p>
    <p>read(fd, buf, size) T1</p>
    <p>read, fd, buf, sizeread(fd, buf, size) T2</p>
    <p>read, fd, buf, size[0]</p>
    <p>[2] [1]</p>
    <p>system call slots</p>
    <p>switch to ready user space thread</p>
    <p>[0] #2&amp;$?%</p>
  </div>
  <div class="page">
    <p>read, fd, buf, size</p>
    <p>Anatomy of a System Call</p>
    <p>enclave kernel</p>
    <p>read(fd, buf, size) T1</p>
    <p>read, fd, buf, sizeread(fd, buf, size) T2</p>
    <p>read, fd, buf, size[0]</p>
    <p>[2] [1]</p>
    <p>system call slots</p>
    <p>[0] #2&amp;$?%</p>
  </div>
  <div class="page">
    <p>read, fd, buf, size</p>
    <p>Anatomy of a System Call</p>
    <p>enclave kernel</p>
    <p>read(fd, buf, size) T1</p>
    <p>read, fd, buf, sizeread(fd, buf, size) T2</p>
    <p>read, fd, buf, size[0]</p>
    <p>[2] [1]</p>
    <p>system call slots</p>
    <p>[0] #2&amp;$?%</p>
    <p>GET K1 decrypt buffer into enclave</p>
  </div>
  <div class="page">
    <p>Container Integration</p>
    <p>Repository Docker Engine</p>
    <p>Secure Image Enclave</p>
    <p>SCONE Client Docker Client</p>
  </div>
  <div class="page">
    <p>Container Integration</p>
    <p>Repository Docker Engine</p>
    <p>Secure Image Enclave</p>
    <p>SCONE Client Docker Client</p>
  </div>
  <div class="page">
    <p>Container Integration</p>
    <p>Repository Docker Engine</p>
    <p>Secure Image Enclave</p>
    <p>SCONE Client Docker Client</p>
  </div>
  <div class="page">
    <p>Container Integration</p>
    <p>Repository Docker Engine</p>
    <p>Secure Image Enclave</p>
    <p>SCONE Client Docker Client</p>
  </div>
  <div class="page">
    <p>Container Integration</p>
    <p>Repository Docker Engine</p>
    <p>Secure Image Enclave</p>
    <p>SCONE Client Docker Client</p>
  </div>
  <div class="page">
    <p>Container Integration</p>
    <p>Repository Docker Engine</p>
    <p>Secure Image Enclave</p>
    <p>SCONE Client Docker Client</p>
  </div>
  <div class="page">
    <p>Sy st</p>
    <p>em c</p>
    <p>al l f</p>
    <p>re qu</p>
    <p>en cy</p>
    <p>(1 00</p>
    <p>ec on</p>
    <p>d)</p>
    <p>Threads</p>
    <p>System Call Performance</p>
    <p>native</p>
    <p>async sync</p>
    <p>pwrite() with 32 byte buffer  4 cores with hyper threading</p>
  </div>
  <div class="page">
    <p>Sy st</p>
    <p>em c</p>
    <p>al l f</p>
    <p>re qu</p>
    <p>en cy</p>
    <p>(1 00</p>
    <p>ec on</p>
    <p>d)</p>
    <p>Threads</p>
    <p>System Call Performance</p>
    <p>native</p>
    <p>async sync</p>
    <p>async with 1 thread achieves 80%</p>
    <p>pwrite() with 32 byte buffer  4 cores with hyper threading</p>
  </div>
  <div class="page">
    <p>Sy st</p>
    <p>em c</p>
    <p>al l f</p>
    <p>re qu</p>
    <p>en cy</p>
    <p>(1 00</p>
    <p>ec on</p>
    <p>d)</p>
    <p>Threads</p>
    <p>System Call Performance</p>
    <p>native</p>
    <p>async sync</p>
    <p>async with 1 thread achieves 80%</p>
    <p>optimized queue may help</p>
    <p>pwrite() with 32 byte buffer  4 cores with hyper threading</p>
  </div>
  <div class="page">
    <p>Apache Throughput</p>
    <p>La te</p>
    <p>nc y</p>
    <p>(s ec</p>
    <p>on ds</p>
    <p>)</p>
    <p>Throughput (requests / second) 0 15000 30000 45000 60000</p>
    <p>glibc async</p>
    <p>sync</p>
  </div>
  <div class="page">
    <p>Performance Overview</p>
    <p>Application Throughput w.r.t. native async (%) sync (%)</p>
    <p>Memcached 120 113 Apache 80 70 NGINX 80 36 Redis 60 20</p>
  </div>
  <div class="page">
    <p>Performance Overview</p>
    <p>Application Throughput w.r.t. native async (%) sync (%)</p>
    <p>Memcached 120 113 Apache 80 70 NGINX 80 36 Redis 60 20</p>
    <p>inline encryption has less overhead</p>
  </div>
  <div class="page">
    <p>Performance Overview</p>
    <p>Application Throughput w.r.t. native async (%) sync (%)</p>
    <p>Memcached 120 113 Apache 80 70 NGINX 80 36 Redis 60 20</p>
    <p>inline encryption has less overhead</p>
    <p>inline encryption hurts performance with single thread</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>Small trusted computing base (0.6  2.0 of native binary size)</p>
    <p>Low runtime overhead (0.6  1.2 of native throughput)</p>
    <p>Transparent to the container engine (e.g. Docker)</p>
  </div>
</Presentation>
