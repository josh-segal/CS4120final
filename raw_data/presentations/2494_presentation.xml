<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>E P F L Princeton University 2 5 A p r 12</p>
  </div>
  <div class="page">
    <p>So8ware-Defined Networking (SDN)</p>
    <p>Enables new funcHonality through programmability</p>
    <p>Third-party program</p>
  </div>
  <div class="page">
    <p>at the risk of bugs</p>
  </div>
  <div class="page">
    <p>So8ware Faults</p>
    <p>Will make communicaHon unreliable</p>
    <p>Major hurdle for success of SDN</p>
    <p>We need effecHve ways to test SDN networks This talk: automaHcally tesHng OpenFlow Apps</p>
  </div>
  <div class="page">
    <p>Quick OpenFlow 101</p>
    <p>Host B Host A</p>
    <p>Switch 2 Flow Table Rule 1 Rule 2</p>
    <p>Rule N</p>
    <p>Switch 1 Packet</p>
    <p>OpenFlow program</p>
    <p>Controller</p>
    <p>Install rule; forward packet</p>
    <p>Default: forward to controller</p>
    <p>Match AcHons Counters Dst: Host B Fwd: Switch 2 pkts / bytes</p>
    <p>System is distributed and asynchronous  can misbehave under corner cases</p>
    <p>Execute packet_in event handler</p>
  </div>
  <div class="page">
    <p>Bugs in OpenFlow Apps</p>
    <p>OpenFlow program</p>
    <p>Host B Host A</p>
    <p>Switch 2</p>
    <p>Controller</p>
    <p>Switch 1 Packet</p>
    <p>Install rule</p>
    <p>?</p>
    <p>Goal: systemaHcally test possible behaviors to detect bugs</p>
    <p>Install rule</p>
    <p>Delayed!</p>
    <p>Drop packet</p>
    <p>Inconsistent distributed state!</p>
  </div>
  <div class="page">
    <p>State-space exploraHon via Model Checking (MC)</p>
    <p>SystemaHcally TesHng OpenFlow Apps</p>
    <p>Target system</p>
    <p>Unmodified OpenFlow program</p>
    <p>Complex environment</p>
    <p>Environment model</p>
    <p>Switch 1</p>
    <p>Switch 2</p>
    <p>Host A Host B</p>
    <p>Carefully-cra8ed streams of packets</p>
    <p>Many orderings of packet arrivals and events</p>
  </div>
  <div class="page">
    <p>Scalability Challenges</p>
    <p>Huge space of possible packets</p>
    <p>Huge space of possible</p>
    <p>event orderings</p>
    <p>Data-plane driven Complex network behavior</p>
    <p>EnumeraHng all inputs and event orderings is intractable</p>
    <p>Equivalence classes of packets</p>
    <p>Domain-specific search</p>
    <p>strategies</p>
  </div>
  <div class="page">
    <p>Network topology</p>
    <p>Correctness properHes</p>
    <p>(e.g., no loops)</p>
    <p>Traces of property violaHons</p>
    <p>Input Output NICE</p>
    <p>State-space search</p>
    <p>No bugs In Controller ExecuHon</p>
    <p>NICE found 11 bugs in 3 real OpenFlow Apps</p>
    <p>Unmodified OpenFlow program</p>
  </div>
  <div class="page">
    <p>Network topology</p>
    <p>Correctness properHes</p>
    <p>(e.g., no loops)</p>
    <p>Traces of property violaHons</p>
    <p>Input Output NICE No bugs In Controller ExecuHon</p>
    <p>Unmodified OpenFlow program</p>
    <p>State-space search</p>
  </div>
  <div class="page">
    <p>Model Checking</p>
    <p>State-Space Model</p>
    <p>State 0</p>
    <p>State 2</p>
    <p>State 6</p>
    <p>State 7</p>
    <p>State 4</p>
    <p>State 9</p>
    <p>State 1</p>
    <p>State 3</p>
    <p>State 5</p>
    <p>State 8</p>
  </div>
  <div class="page">
    <p>System State</p>
    <p>State</p>
    <p>Controller (global variables)</p>
    <p>Environment: Switches (flow table, OpenFlow agent)</p>
    <p>Simplified switch model End-hosts (network stack)</p>
    <p>Simple clients/servers CommunicaIon channels (in-flight pkts)</p>
  </div>
  <div class="page">
    <p>TransiHon System</p>
    <p>State 0</p>
    <p>State 2</p>
    <p>State 6</p>
    <p>State 7</p>
    <p>State 4</p>
    <p>State 9</p>
    <p>State 1</p>
    <p>State 3</p>
    <p>ctrl</p>
    <p>packet_in(pkt B)</p>
    <p>Run actual packet_in handler</p>
    <p>State 5</p>
    <p>State 8</p>
    <p>Data-dependent transiHons!</p>
  </div>
  <div class="page">
    <p>CombaHng Huge Space of Packets</p>
    <p>Packet arrival handler</p>
    <p>is dst broadcast?</p>
    <p>Flood packet Install rule and forward packet</p>
    <p>dst in mactable?</p>
    <p>Equivalence classes of packets: 1. Broadcast desHnaHon 2. Unknown unicast desHnaHon 3. Known unicast desHnaHon</p>
    <p>yes</p>
    <p>no</p>
    <p>no</p>
    <p>yes</p>
    <p>Code itself reveals equivalence classes of packets</p>
    <p>pkt</p>
  </div>
  <div class="page">
    <p>Code Analysis: Symbolic ExecuHon (SE)</p>
    <p>Packet arrival handler</p>
    <p>is .dst broadcast? yes no</p>
    <p>Symbolic packet</p>
    <p>Flood packet</p>
    <p>.dst  {Broadcast}</p>
    <p>.dst in mactable? no</p>
    <p>yes</p>
    <p>.dst  {Broadcast}</p>
    <p>Install rule and forward packet</p>
    <p>.dst  {Broadcast}</p>
    <p>.dst  mactable  .dst  {Broadcast}</p>
    <p>.dst  mactable</p>
    <p>class of packets = 1 packet to inject</p>
    <p>Infeasible from iniHal state</p>
  </div>
  <div class="page">
    <p>New packets</p>
    <p>Enable new transiIons:</p>
    <p>host / send(pkt B) host / send(pkt C)</p>
    <p>Symbolic execuHon</p>
    <p>of packet_in handler</p>
    <p>State 0</p>
    <p>State 1</p>
    <p>Controller state 1</p>
    <p>State 2</p>
    <p>host discover_packets State</p>
    <p>host send(pkt B)</p>
    <p>State 4</p>
    <p>discover_packets transiIon:</p>
    <p>Combining SE with Model Checking</p>
    <p>Controller state changes</p>
    <p>host send(pkt A)</p>
  </div>
  <div class="page">
    <p>CombaHng Huge Space of Orderings</p>
    <p>MC + SE</p>
    <p>FLOW-IR</p>
    <p>NO-DELAY</p>
    <p>UNUSUAL</p>
    <p>OpenFlow-specific search strategies for up to 20x state-space reducHon:</p>
  </div>
  <div class="page">
    <p>Network topology</p>
    <p>Traces of property violaHons</p>
    <p>Input Output NICE No bugs In Controller ExecuHon</p>
    <p>Unmodified OpenFlow program</p>
    <p>State-space search</p>
    <p>Correctness properHes</p>
    <p>(e.g., no loops) 18 25 Apr 2012 NSDI'12</p>
  </div>
  <div class="page">
    <p>Specifying App Correctness</p>
    <p>Library of common properIes  No forwarding loops  No black holes  Direct paths (no unnecessary flooding)  Etc</p>
    <p>Correctness is app-specific in nature</p>
  </div>
  <div class="page">
    <p>API to Define App-Specific ProperHes</p>
    <p>State 0</p>
    <p>State 1</p>
    <p>ctrl packet_in(pkt A)</p>
    <p>def init(): init local vars register(packet_in) def on_packet_in(): check system-wide state</p>
    <p>Register callbacks to observe transiHons</p>
    <p>Execute a8er transiHons</p>
  </div>
  <div class="page">
    <p>Prototype ImplementaHon</p>
    <p>Built a NICE prototype in Python  Target the Python API of NOX</p>
    <p>Unmodified OpenFlow program</p>
    <p>Stub NOX API</p>
    <p>NICE</p>
    <p>Controller state &amp; transiHons</p>
  </div>
  <div class="page">
    <p>Experiences</p>
    <p>Tested 3 unmodified NOX OpenFlow Apps  MAC-learning switch  LB: Web server load balancer [Wang et al., HotICE11]  TE: Energy-aware traffic engineering [CoNEXT11]</p>
    <p>Setup  Iterated with 1, 2 or 3-switch topologies; 1,2, pkts  App-specific properHes</p>
    <p>LB: All packets of same request go to same server replica  TE: Use appropriate path based on network load</p>
  </div>
  <div class="page">
    <p>Results</p>
    <p>NICE found 11 property violaHons  bugs  Few secs to find 1st violaHon of each bug (max 30m)</p>
    <p>Few simple mistakes (not freeing buffered packets)</p>
    <p>3 insidious bugs due to network race condiHons  NICE makes corner cases as likely as normal cases</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>hsp://code.google.com/p/nice-of/</p>
    <p>NICE automates the tesHng of OpenFlow Apps</p>
    <p>Explores state-space efficiently  Tests unmodified NOX applicaHons  Helps to specify correctness  Finds bugs in real applicaHons</p>
    <p>SDN: a new role for so8ware tool chains to make networks more dependable.</p>
    <p>Thank you! QuesHons?</p>
    <p>NICE is a step in this direcIon!</p>
  </div>
  <div class="page">
    <p>Backup slides</p>
  </div>
  <div class="page">
    <p>Related Work (1/2)</p>
    <p>Model Checking  SPIN [Holzmann04], Veriso8 [Godefroid97], JPF [Visser03]</p>
    <p>Musuvathi04, MaceMC [Killian07], MODIST [Yang09]  Symbolic ExecuHon</p>
    <p>DART [Godefroid05], Klee [Cadar08], Cloud9 [Bucur11]</p>
    <p>MC+SE: Khurshid03</p>
  </div>
  <div class="page">
    <p>Related Work (2/2)</p>
    <p>OpenFlow programming  FreneHc [Foster11], NetCore [Monsanto12]</p>
    <p>Network tesHng  FlowChecker [Al-Shaer10]  OFRewind [Wundsam11]  Anteater [Mai11]  Header Space Analysis [Kazemian12]</p>
  </div>
  <div class="page">
    <p>Micro-benchmark of full state-space search</p>
    <p>Pyswitch MAC-learning</p>
    <p>switch</p>
    <p>Switch 1</p>
    <p>Switch 2</p>
    <p>Host A Host B</p>
    <p>Single 2.6 GHz core  64 GB RAM</p>
    <p>Pings TransiIons Unique states Time 2 470 268 0.94 [s] 3 12,801 5,257 47.27 [s] 4 391,091 131,515 36 [m] 5 14,052,853 4,161,335 30 [h]</p>
    <p>Concurrent Layer-2 ping</p>
    <p>Compared with  SPIN: 7 pings  out</p>
    <p>of memory  JPF is 5.5 x slower</p>
  </div>
  <div class="page">
    <p>State space reducHon by heurisHcs</p>
    <p>Pyswitch MAC-learning</p>
    <p>switch</p>
    <p>Switch 1</p>
    <p>Switch 2</p>
    <p>Host A Host B</p>
    <p>Single 2.6 GHz core  64 GB RAM</p>
    <p>Compared to base model checking</p>
  </div>
  <div class="page">
    <p>TransiHons # / run Hme [s] to 1st property violaHon of each bug</p>
  </div>
  <div class="page">
    <p>OpenFlow Switch Model</p>
    <p>State 1</p>
    <p>State 2</p>
    <p>Flow Table</p>
    <p>Flow Table Rule 2 Rule 1</p>
    <p>Rule 1 Flow Table 2)</p>
    <p>Rule 2 Rule 1</p>
    <p>Flow Table 3)</p>
    <p>Rule 2 Flow Table (4</p>
    <p>(5</p>
    <p>switch process_of</p>
    <p>State 4</p>
    <p>State 5</p>
    <p>install Rule 1</p>
    <p>State 3</p>
    <p>install Rule 2</p>
    <p>Example: adding Rule 1 and Rule 2</p>
  </div>
  <div class="page">
    <p>MAC-learning switch (3 bugs)</p>
    <p>OpenFlow program</p>
    <p>Host A</p>
    <p>A-&gt;B | port 2</p>
    <p>A-&gt;B | port 1</p>
    <p>Host B</p>
    <p>BUG-I: Host unreachable a8er moving</p>
  </div>
  <div class="page">
    <p>MAC-learning switch (3 bugs)</p>
    <p>OpenFlow program</p>
    <p>Host A</p>
    <p>B-&gt;A | port 1</p>
    <p>B-&gt;A | port 2</p>
    <p>Host B</p>
    <p>BUG-I: Host unreachable a8er moving</p>
    <p>BUG-II: Delayed direct path</p>
    <p>A-&gt;B | port 2 A-&gt;B | port 1</p>
  </div>
  <div class="page">
    <p>MAC-learning switch (3 bugs)</p>
    <p>OpenFlow program</p>
    <p>Host A 1 2 2 1</p>
    <p>BUG-I: Host unreachable a8er moving</p>
    <p>BUG-II: Delayed direct path BUG-III: Excess flooding</p>
  </div>
  <div class="page">
    <p>Web Server Load Balancer (4 bugs)</p>
    <p>OpenFlow program</p>
    <p>Host A 1 3</p>
    <p>Host B 2 4</p>
    <p>Server 1</p>
    <p>Server 2</p>
    <p>BUG-IV: Next TCP packet always dropped a8er reconfiguraHon BUG-V: Some TCP packets dropped a8er reconfiguraHon BUG-VI: ARP packets forgosen during address resoluHon BUG-VII: Duplicate SYN packets during transiHons</p>
    <p>Custom property: all packets of same request go to same server replica</p>
  </div>
  <div class="page">
    <p>Energy-Efficient TE (4 bugs)</p>
    <p>Precompute 2 paths per &lt;origin,dest.&gt;  Always-on and on-demand</p>
    <p>Make online decision:  Use the smallest subset of network elements that saHsfies current demand</p>
    <p>BUG-VIII: The first packet of a new flow is dropped BUG-IX: The first few packets of a new flow can be dropped BUG-X: Only on-demand routes used under high load BUG-XI: Packets can be dropped when the load reduces</p>
  </div>
  <div class="page">
    <p>Results</p>
    <p>Why were mistakes easy to make?  Centralized programming model only an abstracHon</p>
    <p>Why the programmer could not detect them?  Bugs dont always manifest  TCP masks transient packet loss  Plaorm lacks runHme checks</p>
    <p>Why NICE easily found them?  Makes corner cases as likely as normal cases</p>
  </div>
  <div class="page">
    <p>Example: MAC-learning Switch</p>
  </div>
  <div class="page">
    <p>Causes of Corner Cases (Examples)</p>
    <p>MulHple packets of a flow reach controller</p>
    <p>No atomic update across mulHple switches</p>
    <p>Previously-installed rules limit visibility</p>
    <p>Composing funcHons that affect same packets</p>
    <p>AssumpHons about end-host protocols &amp; SW</p>
  </div>
</Presentation>
