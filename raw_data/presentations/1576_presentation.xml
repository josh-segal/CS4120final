<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Graphene: Fine-Grained IO Management for Graph Computing</p>
    <p>Hang Liu H. Howie Huang</p>
    <p>The George Washington University</p>
    <p>March 2, 2017</p>
  </div>
  <div class="page">
    <p>Graphs are Everywhere</p>
  </div>
  <div class="page">
    <p>Graph Algorithms are Insightful</p>
    <p>Algorithm Functionality Graph</p>
    <p>Triangle completing Friend recommendation</p>
    <p>Shortest path Navigation</p>
    <p>PageRank Webpage searching</p>
    <p>Matrix factorization Product recommendation</p>
  </div>
  <div class="page">
    <p>BIG Graph</p>
    <p>Facebook, #active users</p>
    <p>Gra ph s</p>
    <p>ize con</p>
    <p>tinu es to</p>
    <p>gro w</p>
    <p>* source: statista</p>
  </div>
  <div class="page">
    <p>Related Work</p>
    <p>Easy Hard Programmability</p>
    <p>PriceLow High</p>
    <p>Ti m</p>
    <p>e Sh</p>
    <p>or t</p>
    <p>Lo ng</p>
    <p>Graphene</p>
    <p>Distributed system PowerGraph</p>
    <p>Shared memory system Ligra, Galois</p>
    <p>External-memory system X-Stream, GridGraph, FlashGraph</p>
  </div>
  <div class="page">
    <p>Agenda  Background  Graphene</p>
    <p>Programming model</p>
    <p>Bitmap based IO management</p>
    <p>Row-column balanced partition</p>
    <p>HugePage</p>
    <p>Evaluation  Conclusion</p>
  </div>
  <div class="page">
    <p>Solid-State Drive  Affordable</p>
    <p>SSD ~0.3$/GB vs. DRAM ~10$/GB</p>
    <p>Bandwidth  Sequential IO 540 MB/s</p>
    <p>Random IO ~300 MB/s (4KB IO block)</p>
    <p>Energy efficient</p>
  </div>
  <div class="page">
    <p>Difficult to Program</p>
    <p>Allocate aligned IO buffer IObuffer = posix_memalign(4KB aligned);</p>
    <p>Setup kernel IO context, lack error support</p>
    <p>IOsetup(IOcontext);</p>
    <p>Align the IO offset and size</p>
    <p>while true foreach vertex v</p>
    <p>if isActive(v) begin = v.neighborBeginPostion(); end = v.neighborEndPostion(); beginAligned = IOalign(begin); endAligned = IOalign(end);</p>
    <p>Submit IO request, lack error support</p>
    <p>IOsubmit(IOcontext, IObuffer, fd, beginAligned, endAligned); Poll IO request, lack error supportIOpoll(IOcontext, timeout);</p>
    <p>Define IO error handler if(IOcontext == error){Errorhandler(IOcontext);}</p>
    <p>Parse IO buffer to filter out useful neighbors</p>
    <p>neighborList = neighborParser(IObuffer); Compute (v, neighborList)</p>
    <p>level++;</p>
    <p>Open file descriptorfd = open(neighborListFile, O_DIRECT);</p>
  </div>
  <div class="page">
    <p>IO Centric Graph Processing</p>
    <p>IOIterator it = IOIterator (neighborListFile, isActive);</p>
    <p>while true while it -&gt; hasMore()</p>
    <p>vertex v = it -&gt; current(); Compute (v, it -&gt; getNeighbor(v));</p>
    <p>level++;</p>
    <p>Philosophy:  Graphene knows which neighbors to load  Pushes data to algorithms for computation</p>
    <p>BFS (60)</p>
    <p>SSD</p>
    <p>IOIterator</p>
    <p>PageRank (80)</p>
    <p>k-Core (50)</p>
    <p>WCC (89)</p>
    <p>SpMV (70)</p>
    <p>APSP (LOC = 90)</p>
    <p>Requ es</p>
    <p>t Block</p>
    <p>SSD</p>
    <p>R eq</p>
    <p>ue st Block</p>
    <p>SSD R</p>
    <p>eq ue</p>
    <p>st Block</p>
  </div>
  <div class="page">
    <p>Linux Pluglist</p>
    <p>Active vertices</p>
    <p>Neighbor list file</p>
    <p>Sort</p>
    <p>b1 b7 b15 b16 b2 b13 b14 b15 b5</p>
    <p>Pluglist b7 b15 b16 b1 b2 b13 b14 b15 b5 Small Pluglist size limits adjustment range</p>
    <p>Sorting is costly</p>
    <p>Load redundant blocks</p>
    <p>Random IO</p>
    <p>V5 V8 V1 V7 V3</p>
    <p>Block 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16</p>
    <p>b7 b15 b16 b13 b14 b15 b1 b2 b5IO requests</p>
  </div>
  <div class="page">
    <p>Novel Bitmap Solution</p>
    <p>Active vertices</p>
    <p>Neighbor list file</p>
    <p>Global range IO adjustment</p>
    <p>Hashing for sort</p>
    <p>No redundant IO</p>
    <p>F F F F F F F F F F F F F F F F F</p>
    <p>Sequential IO</p>
    <p>Block id 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16</p>
    <p>Bitmap</p>
    <p>V5 V8 V1 V7 V3</p>
    <p>T T T TT T T T</p>
    <p>Block 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16</p>
  </div>
  <div class="page">
    <p>Conventional 2D Partition</p>
    <p>. .. .. .</p>
    <p>.. .. .. ..</p>
    <p>..  .. .</p>
    <p>.. . .</p>
    <p>. .. .. .</p>
    <p>.. .. .. ..</p>
    <p>..  .. .</p>
    <p>.. . .</p>
    <p>Each partition has same number of vertices</p>
    <p>Balance #edges should be the goal!</p>
    <p>Source vertices</p>
    <p>Destination vertices</p>
  </div>
  <div class="page">
    <p>Row-Column Balanced 2D Partition</p>
    <p>. .. .. .</p>
    <p>.. .. .. ..</p>
    <p>..  .. .</p>
    <p>.. . .</p>
    <p>. . ..</p>
    <p>. ..  ..</p>
    <p>.</p>
    <p>Row balanced ..   ..</p>
    <p>.. ... ..</p>
    <p>Row-column balanced</p>
    <p>Source vertices</p>
    <p>Destination vertices</p>
  </div>
  <div class="page">
    <p>IO vs Compute Pe</p>
    <p>rc en</p>
    <p>ta ge</p>
    <p>(% )</p>
    <p>APSP BFS k-Core WCC</p>
    <p>Pe rc</p>
    <p>en ta</p>
    <p>ge (%</p>
    <p>)</p>
    <p>APSP BFS k-Core WCC</p>
    <p>IO Compute</p>
    <p>Before IO optimization After IO optimization</p>
  </div>
  <div class="page">
    <p>HugePage</p>
    <p>Cache Optimization</p>
    <p>Last-level cache (LLC)  Page coloring has some benefits</p>
    <p>Translation lookaside buffer (TLB)  Use HugePage for buffering IO, managing metadata, etc.</p>
    <p>I/O Buffer:</p>
    <p>LLC</p>
    <p>Physical page Virtual pages A</p>
    <p>Virtual pages B</p>
    <p>Hardware OS</p>
  </div>
  <div class="page">
    <p>Evaluation  Intel Xeon E5-2620 CPUs</p>
    <p>12 cores, supporting 24 physical threads with hyper-threading</p>
    <p>2MB, 1GB HugePage</p>
    <p>15MB LLC</p>
    <p>256GB main memory</p>
    <p>16 SSDs (Samsung 850 EVO SSDs with PCI-HBAs).</p>
    <p>Linux kernel 4.4.0, g++ 4.8.5</p>
  </div>
  <div class="page">
    <p>Datasets Specifications</p>
    <p>Name Description #Vertices #Edges Size Friendster Friendster social 68M 2.6B 20GB</p>
    <p>Twitter Twitter social 53M 2.0B 15GB Clueweb ClueWeb12 978M 42.6B 336GB</p>
    <p>EU EU domains 1071M 92B 683GB Gsh Gsh webpage 988M 33.8B 252GB UK UK domains 788M 48B 270GB</p>
    <p>Kron30 Graph500 Generator 1B 32B 256GB Kron31 Graph500 Generator 2B 1T 8TB</p>
  </div>
  <div class="page">
    <p>Graphene vs. State-of-the-art</p>
    <p>External memory system: FlashGraph 3.6X, X-Stream 16X, GridGraph 6.9X</p>
    <p>Distributed system: PowerGraph 20X.</p>
    <p>Shared memory system: Galois 5% and Ligra 16% (no BFS) 18</p>
    <p>Sp ee</p>
    <p>du p</p>
    <p>APSP BFS k-Core PageRank WCC</p>
    <p>FlashGraph X-Stream GridGraph PowerGraph Galois Ligra</p>
    <p>Dataset: Gsh  1B vertices  34B edges</p>
  </div>
  <div class="page">
    <p>Graphene vs. State-of-the-art (Contd)</p>
    <p>Sp ee</p>
    <p>du p</p>
    <p>APSP BFS k-Core PageRank WCC</p>
    <p>FlashGraph X-Stream GridGraph PowerGraph Galois Ligra</p>
    <p>Dataset: Gsh  1B vertices  34B edges</p>
    <p>External memory system: FlashGraph 3.6X, X-Stream 16X, GridGraph 6.9X</p>
    <p>Distributed system: PowerGraph 20X.</p>
    <p>Shared memory system: Galois 5% and Ligra 16% (no BFS)</p>
  </div>
  <div class="page">
    <p>Disk Bandwidth Utilization</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (M</p>
    <p>B/ s)</p>
    <p>Time elapse (second)</p>
    <p>Min Median Max</p>
  </div>
  <div class="page">
    <p>Conclusion  Easy programming: IO centric graph processing</p>
    <p>IO optimizations:  Bitmap, Asynchronous direct IO</p>
    <p>Fine grained IO</p>
    <p>Balancing:  Row-column based partition</p>
    <p>Workload stealing</p>
    <p>HugePage optimization</p>
    <p>Despite external memory, Graphene performs comparably with in-memory solutions</p>
  </div>
  <div class="page">
    <p>Thank You {asherliu, howie}@gwu.edu</p>
    <p>https://github.com/iHeartGraph/Graphene</p>
  </div>
</Presentation>
