<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>A CUCKOOS EGG IN THE MALWARE NEST ON-THE-FLY SIGNATURE-LESS MALWARE ANALYSIS, DETECTION AND CONTAINMENT FOR LARGE NETWORKS</p>
    <p>CHRISTIAAN SCHADE TWENTE SECURITY LAB UNIVERSITY OF TWENTE THE NETHERLANDS</p>
  </div>
  <div class="page">
    <p>In the last half-decade malware has evolved into a business q Windows is the most attacked platform, OS X also affected</p>
    <p>Symantec &amp; Co show impressive growing rates o Use of polymorphism/packers o Malware writers are just better J</p>
    <p>Dynamic Malware Analysis (DMA) q Malware samples are executed in a sandbox q Analysis results are used to update AV signatures and</p>
    <p>detection models q Anubis, CWSandbox, Malheur, Malnet, etc.</p>
    <p>MALWARE WARS</p>
  </div>
  <div class="page">
    <p>Malware writers implemented several countermeasures to avoid/slow down the DMA analysis</p>
    <p>q Runs only when user(s) is actually logged in</p>
    <p>q Waits for a certain time frame before activating (10-15 mins)</p>
    <p>q Checks for virtualization / known registry keys / known IPs</p>
    <p>DMA tools usually perform post-mortem analysis  users submit their sample(s) and get a report back</p>
    <p>q Limited support to monitor an internal network and protect endpoints</p>
    <p>q If you submit a sample, you already suspect it is malwareand your AV likely did not detect it</p>
    <p>(otherwisewhy submit it for further analysis?</p>
    <p>DMA tools lack information about the execution context and do not offer real-time protection</p>
    <p>LIMITATIONS OF DMA</p>
  </div>
  <div class="page">
    <p>~30% of current malware download additional components once running</p>
    <p>q Require some external content providers, usually early compromised servers</p>
    <p>q Content providers might not be online, malware will often need to run several download attempts</p>
    <p>If we can detect one of these attempts, we can feed the malware with a crafted executable (we call it cuckoos egg) that:</p>
    <p>q Will perform some real-time analysis at the end host  on-the-fly malware analysis</p>
    <p>q Can be instructed to terminate its parent process  effective containment</p>
    <p>THE IDEA</p>
  </div>
  <div class="page">
    <p>GENERAL ARCHITECTURE WE CALL IT AVATAR</p>
  </div>
  <div class="page">
    <p>We use an algorithm based on TWR to detect too many failed attempts, then the egg generator: q Checks the requested filename q Checks magic numbers in case a file is successfully fetched</p>
    <p>after several attempts q Packs and sends the cuckoos egg when # attempts &gt; threshold</p>
    <p>When the egg is executed on the target machine, it attempts to get control over its parent process q Depending on the OS version the egg can freeze/terminate the</p>
    <p>process</p>
    <p>LAYING THE EGG</p>
  </div>
  <div class="page">
    <p>The egg collects several information about the parent process: q Path to the exe q Any module that was loaded (full module paths) q Window (if any is attached) information: handle, size, caption</p>
    <p>text q Executable size</p>
    <p>The collected information are sent to the MAE, which can stop the egg or perform deeper analysis q The egg can send back to the MAE the original parent</p>
    <p>executable</p>
    <p>AND PARASITE!</p>
  </div>
  <div class="page">
    <p>Malware could initiate connections at a very low rate  this would slow down the infection though</p>
    <p>Malware could apply some verification/encryption mechanisms</p>
    <p>to the downloaded components  keys could be disclosed</p>
    <p>Malware writers could use steganography to hide executables into other file formats (e.g., JPEG, like the recent Duqu)</p>
    <p>Malware could leverage the CreateRemoteThread function to execute its code into another process</p>
    <p>LIMITATIONS TO OUR APPROACH</p>
  </div>
  <div class="page">
    <p>Avatar has been tested against real-life malware samples q CWSandbox data set, available at Malheurs web site q everyday malware we all receive in our mailbox J</p>
    <p>Dataset A  PoC q ~10 malware families, huge collection (almost) publicly available</p>
    <p>from the authors of Malheur (2009)  75 samples</p>
    <p>Dataset B  evaluation of false positives/negatives q everyday malware we received in our mailboxes during a week</p>
    <p>time  30 samples + 30 benign samples</p>
    <p>TESTS</p>
  </div>
  <div class="page">
    <p>TEST RESULTS  DATASET A</p>
  </div>
  <div class="page">
    <p>TEST RESULTS  DATASET B</p>
  </div>
  <div class="page">
    <p>Avatar raises the bar of malware analysis q No software is required to run at the endpoint q Delivers on-the-fly any component needed for analysis q Heavy computations are off-loaded q We can stop a malicious process as soon as it is detected (to</p>
    <p>some extent, depending on the OS)</p>
    <p>We know it can be circumvented, but this will also make it more difficult for malware writers q No countermeasure has been observed so far in our tests</p>
    <p>CONCLUSION</p>
  </div>
  <div class="page">
    <p>DEMO</p>
  </div>
  <div class="page">
    <p>?</p>
    <p>QUESTIONS</p>
  </div>
</Presentation>
