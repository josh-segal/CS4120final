<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Gerd Zellweger, Simon Gerber, Kornilios Kourtis, Timothy Roscoe</p>
    <p>Systems Group, ETH Zrich</p>
    <p>Decoupling Cores, Kernels and Operating Systems</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Trends in hardware and software</p>
    <p>Booting and shutting down cores dynamically Decoupling the kernel state</p>
    <p>Evaluation</p>
    <p>Kernel updates, specialized kernels</p>
    <p>Outline</p>
  </div>
  <div class="page">
    <p>Constrained by power consumption</p>
    <p>Reconfigurable cores (dynamically changed behavior)</p>
    <p>DVFS, Turbo Boost, SMT</p>
    <p>Core Fusion [ISCA 07]</p>
    <p>Dark silicon [ISCA 10]</p>
    <p>Heterogeneous cores</p>
    <p>Fast and power hungry vs. slow and power efficient</p>
    <p>Asymmetric multiprocessing</p>
    <p>Conservation Cores [ASPLOS 10]</p>
    <p>Whats happening to hardware</p>
  </div>
  <div class="page">
    <p>CPU CPU</p>
    <p>What current operating systems look like</p>
    <p>CPU</p>
    <p>Kernel</p>
    <p>Application Application Application</p>
    <p>CPU</p>
  </div>
  <div class="page">
    <p>CPU CPU</p>
    <p>What current operating systems look like</p>
    <p>CPU</p>
    <p>Kernel</p>
    <p>Application Application Application</p>
  </div>
  <div class="page">
    <p>CPU</p>
    <p>What current operating systems look like</p>
    <p>CPU</p>
    <p>Kernel</p>
    <p>Application Application Application</p>
  </div>
  <div class="page">
    <p>OS needs to adapt to different workloads</p>
    <p>Adapting at build-, boot-, and run-time</p>
    <p>Debugging support: profiling, tracing etc.</p>
    <p>Real-time support</p>
    <p>On-the-fly kernel updates</p>
    <p>KSplice (Linux) [EuroSys 09]</p>
    <p>K42 [ATC 07]</p>
    <p>Whats happening to software</p>
  </div>
  <div class="page">
    <p>|| 10/6/2014 6</p>
    <p>Multikernel [SOSP 09]</p>
    <p>CPU CPU CPU</p>
    <p>Kernel</p>
    <p>CPU</p>
    <p>Kernel Kernel Kernel</p>
    <p>OSNode OSNode OSNode OSNode Async.</p>
    <p>Messages</p>
    <p>Async.</p>
    <p>Messages</p>
    <p>Async.</p>
    <p>Messages</p>
    <p>Application Application Application</p>
  </div>
  <div class="page">
    <p>Barrelfish OS</p>
    <p>Treating cores as pluggable devices</p>
    <p>Booting a core dynamically with boot drivers</p>
    <p>Shutting down a core</p>
    <p>Decoupling Cores, Kernels and the Operating System</p>
    <p>Externalizing kernel state</p>
    <p>Implementation</p>
  </div>
  <div class="page">
    <p>OS service for target core management</p>
    <p>Dynamically chooses kernel for core based on runtime information</p>
    <p>Boots any core with any suitable kernel</p>
    <p>Run any OSNode on any compatible core</p>
    <p>Implements boot, shutdown, reboot protocol</p>
    <p>Booting a core with boot drivers</p>
  </div>
  <div class="page">
    <p>Harder than booting a core</p>
    <p>Need to deal with per-core state: Scheduler queues, memory pools, page-tables</p>
    <p>Takes time (and energy)</p>
    <p>However, we want to remove the core as fast as possible</p>
    <p>General approach (cf. Chameleon [ASPLOS 12])</p>
    <p>Get state out of the way quickly</p>
    <p>Dismantle it later, lazily (if needed)</p>
    <p>Shutting down a core</p>
  </div>
  <div class="page">
    <p>|| 10/6/2014 10</p>
    <p>Shutting down a core</p>
    <p>CPU CPU CPU</p>
    <p>Kernel</p>
    <p>CPU</p>
    <p>Kernel Kernel Kernel</p>
    <p>OSNode OSNode OSNode OSNode</p>
    <p>Application Application Application</p>
  </div>
  <div class="page">
    <p>|| 10/6/2014 10</p>
    <p>Shutting down a core</p>
    <p>CPU CPU CPU</p>
    <p>Kernel Kernel Kernel</p>
    <p>OSNode OSNode OSNode OSNode</p>
    <p>Application Application Application</p>
  </div>
  <div class="page">
    <p>|| 10/6/2014 10</p>
    <p>Shutting down a core</p>
    <p>CPU CPU CPU</p>
    <p>Kernel Kernel Kernel</p>
    <p>OSNode OSNode</p>
    <p>Application Application</p>
    <p>Application</p>
    <p>OSNode OSNode</p>
  </div>
  <div class="page">
    <p>|| 10/6/2014 10</p>
    <p>Shutting down a core</p>
    <p>CPU CPU CPU</p>
    <p>Kernel Kernel Kernel</p>
    <p>OSNode OSNode</p>
    <p>Application Application</p>
    <p>OSNode</p>
    <p>Scheduler</p>
    <p>Application</p>
    <p>OSNode OSNode</p>
  </div>
  <div class="page">
    <p>|| 10/6/2014 10</p>
    <p>Shutting down a core</p>
    <p>CPU CPU CPU</p>
    <p>Kernel Kernel Kernel</p>
    <p>OSNode OSNode</p>
    <p>Application Application</p>
    <p>OSNode</p>
    <p>Scheduler</p>
    <p>Application</p>
    <p>OSNode OSNode</p>
    <p>Parking</p>
    <p>OSNode</p>
  </div>
  <div class="page">
    <p>|| 10/6/2014 10</p>
    <p>Shutting down a core</p>
    <p>CPU CPU CPU</p>
    <p>Kernel Kernel Kernel</p>
    <p>OSNode OSNode</p>
    <p>Application Application</p>
    <p>OSNode</p>
    <p>Scheduler</p>
    <p>Application</p>
    <p>OSNode OSNode</p>
    <p>Parking</p>
    <p>OSNode</p>
    <p>Highly scalable, only two cores involved</p>
  </div>
  <div class="page">
    <p>CNode</p>
    <p>...</p>
    <p>Frame</p>
    <p>Frame</p>
    <p>Frame</p>
    <p>Frame</p>
    <p>PCB PCBKCB</p>
    <p>Scheduler State</p>
    <p>Cap Derivation Tree</p>
    <p>Ti mer Offs et</p>
    <p>IR Q State CNode</p>
    <p>...</p>
    <p>Frame</p>
    <p>Frame</p>
    <p>Frame</p>
    <p>CNode</p>
    <p>...</p>
    <p>Null</p>
    <p>Frame</p>
    <p>Frame</p>
    <p>Frame</p>
    <p>OSNode: All state for a single core and kernel</p>
    <p>How do we capture this OSNode?</p>
    <p>Capabilities:</p>
    <p>Tracks all application state</p>
    <p>Tracks all OS state</p>
    <p>cf. seL4, EROS, KeyKOS</p>
    <p>KCB (Kernel control block)</p>
    <p>Hardware specific state</p>
    <p>Entry point to capability tree</p>
    <p>Represented as a capability itself</p>
    <p>What is the OSNode?</p>
    <p>CNode</p>
    <p>...</p>
    <p>Frame</p>
    <p>Frame</p>
    <p>Frame</p>
    <p>Frame</p>
    <p>PCB PCBKCB</p>
    <p>Scheduler State</p>
    <p>Cap Derivation Tree</p>
    <p>Ti mer Offs et</p>
    <p>IR Q State CNode</p>
    <p>...</p>
    <p>Frame</p>
    <p>Frame</p>
    <p>Frame</p>
    <p>CNode</p>
    <p>...</p>
    <p>Null</p>
    <p>Frame</p>
    <p>Frame</p>
    <p>Frame</p>
    <p>CNode</p>
    <p>...</p>
    <p>Frame</p>
    <p>Frame</p>
    <p>Frame</p>
    <p>Frame</p>
    <p>PCB PCBKCB</p>
    <p>Scheduler State</p>
    <p>Cap Derivation Tree</p>
    <p>Ti mer Offs et</p>
    <p>IR Q State CNode</p>
    <p>...</p>
    <p>Frame</p>
    <p>Frame</p>
    <p>Frame</p>
    <p>CNode</p>
    <p>...</p>
    <p>Null</p>
    <p>Frame</p>
    <p>Frame</p>
    <p>Frame</p>
  </div>
  <div class="page">
    <p>State externalization &amp; dynamic core booting is a much more general mechanism</p>
    <p>Decoupling Cores, Kernels and Operating Systems</p>
    <p>CPU CPU</p>
    <p>Kernel Kernel</p>
    <p>OSNode OSNode</p>
  </div>
  <div class="page">
    <p>State externalization &amp; dynamic core booting is a much more general mechanism</p>
    <p>Decoupling Cores, Kernels and Operating Systems</p>
    <p>CPU CPU</p>
    <p>Kernel Kernel</p>
    <p>OSNode OSNode</p>
  </div>
  <div class="page">
    <p>State externalization &amp; dynamic core booting is a much more general mechanism</p>
    <p>Decoupling Cores, Kernels and Operating Systems</p>
    <p>CPU CPU</p>
    <p>Kernel Kernel</p>
    <p>OSNode OSNode</p>
  </div>
  <div class="page">
    <p>State externalization &amp; dynamic core booting is a much more general mechanism</p>
    <p>Decoupling Cores, Kernels and Operating Systems</p>
    <p>CPU CPU</p>
    <p>Kernel</p>
    <p>OSNode OSNode</p>
  </div>
  <div class="page">
    <p>State externalization &amp; dynamic core booting is a much more general mechanism</p>
    <p>Decoupling Cores, Kernels and Operating Systems</p>
    <p>CPU CPU</p>
    <p>Kernel</p>
    <p>OSNode OSNode</p>
    <p>Kernel</p>
  </div>
  <div class="page">
    <p>Core management</p>
    <p>Adding and removing cores in the system</p>
    <p>Kernel updates</p>
    <p>Hot-swapping the kernel</p>
    <p>Specialized kernels</p>
    <p>e.g., eliminate OS jitter</p>
    <p>Evaluation</p>
  </div>
  <div class="page">
    <p>|| 10/6/2014 14</p>
    <p>Core management (Haswell, 1x4 cores, no HT)</p>
    <p>Booting a core No Load Load</p>
    <p>Linux 3.13 14 ms 20 ms</p>
    <p>Barrelfish/DC 7.5 ms 7.5 ms</p>
    <p>Removing a core No Load Load</p>
    <p>Linux 3.13 46 ms 2542 ms</p>
    <p>Barrelfish/DC 0.0008 ms 0.0008 ms</p>
  </div>
  <div class="page">
    <p>Shut-down target core</p>
    <p>Use-case: Kernel Updates</p>
    <p>CPU</p>
    <p>Kernel</p>
    <p>OSNode</p>
    <p>Application</p>
    <p>CPU</p>
  </div>
  <div class="page">
    <p>Shut-down target core</p>
    <p>Reboot core with a new kernel image</p>
    <p>Use-case: Kernel Updates</p>
    <p>CPU</p>
    <p>Kernel</p>
    <p>OSNode</p>
    <p>Application</p>
    <p>CPU</p>
    <p>Kernel</p>
  </div>
  <div class="page">
    <p>Shut-down target core</p>
    <p>Reboot core with a new kernel image</p>
    <p>Dispatch previous OSNode</p>
    <p>Use-case: Kernel Updates</p>
    <p>CPU</p>
    <p>Kernel</p>
    <p>OSNode</p>
    <p>Application</p>
    <p>CPU</p>
    <p>OSNode</p>
    <p>Application</p>
    <p>Kernel</p>
  </div>
  <div class="page">
    <p>|| 10/6/2014 16</p>
    <p>Kernel updates: PostgreSQL &amp; TPC-H</p>
    <p>Hot-swapping</p>
    <p>the kernel</p>
  </div>
  <div class="page">
    <p>A thread that needs to run with hard real time performance</p>
    <p>E.g., phone baseband stack, control application, robotics etc.</p>
    <p>A lot of effort spent to make this work in a general purpose OS</p>
    <p>Many real time OS for embedded systems (RTLinux, LynxOS, QNX, )</p>
    <p>Use-case: Temporary real time task</p>
  </div>
  <div class="page">
    <p>|| 10/6/2014 18</p>
    <p>Use-case: Real time application</p>
    <p>OS OS OS OS</p>
    <p>OSOSOSOS</p>
  </div>
  <div class="page">
    <p>|| 10/6/2014 18</p>
    <p>Use-case: Real time application</p>
    <p>OS OS OS OS</p>
    <p>OSOSOSOS</p>
    <p>RT Kernel</p>
  </div>
  <div class="page">
    <p>|| 10/6/2014 18</p>
    <p>Use-case: Real time application</p>
    <p>OS OS OS</p>
    <p>OSOS</p>
    <p>RT Kernel</p>
  </div>
  <div class="page">
    <p>OSNode</p>
    <p>Shut-down target core</p>
    <p>Use-case: Specialized kernels</p>
    <p>CPU</p>
    <p>Kernel</p>
    <p>Application</p>
    <p>CPU</p>
  </div>
  <div class="page">
    <p>OSNodeOSNode</p>
    <p>Shut-down target core</p>
    <p>Temporarily park the target OSNode</p>
    <p>Use-case: Specialized kernels</p>
    <p>CPU</p>
    <p>Kernel</p>
    <p>Application</p>
    <p>CPU</p>
    <p>Application</p>
  </div>
  <div class="page">
    <p>|| 10/6/2014 20</p>
    <p>Evaluation: PostgreSQL &amp; TPC-H</p>
    <p>One OSNode</p>
    <p>per core</p>
    <p>Parked OSNode</p>
    <p>(2 OSNodes per</p>
    <p>core)</p>
    <p>Move OSNode</p>
    <p>back to original</p>
    <p>core</p>
  </div>
  <div class="page">
    <p>RT Kernel</p>
    <p>RT Application</p>
    <p>OSNodeOSNode</p>
    <p>Shut-down target core</p>
    <p>Temporarily park the target OSNode</p>
    <p>Boot simple real-time kernel that runs just</p>
    <p>one application</p>
    <p>Does not take interrupts</p>
    <p>No timers</p>
    <p>No scheduler</p>
    <p>Temporarily provides task with hard real</p>
    <p>time guarantees</p>
    <p>Use-case: Specialized kernels</p>
    <p>CPU</p>
    <p>Kernel</p>
    <p>Application</p>
    <p>CPU</p>
    <p>OSNode</p>
    <p>Application</p>
  </div>
  <div class="page">
    <p>|| 10/6/2014 22</p>
    <p># cycles for</p>
    <p>stores</p>
    <p>Almost all</p>
    <p>samples</p>
    <p>between 6-7k Outliers (OS</p>
    <p>jitter)</p>
    <p>No samples</p>
    <p>outside of 6-7k</p>
    <p>range</p>
  </div>
  <div class="page">
    <p>Transfer OSNodes between power efficient and high performance cores</p>
    <p>Dynamic OS instrumentation</p>
    <p>Profiling, tracing kernels</p>
    <p>A/B kernel testing</p>
    <p>Specialized kernel to run applications in guest ring 0</p>
    <p>cf. Arrakis</p>
    <p>Future Work &amp; Applications</p>
  </div>
  <div class="page">
    <p>Decoupling the kernel state</p>
    <p>Result: highly dynamic OS architecture</p>
    <p>Kernels can be rebooted, updated and</p>
    <p>specialized</p>
    <p>Cores can be allocated and de-allocated</p>
    <p>arbitrarily</p>
    <p>For many versions of the dark silicon</p>
    <p>hardware, this may be the only way for</p>
    <p>system software</p>
    <p>Conclusion</p>
    <p>www.barrelfish.org</p>
  </div>
  <div class="page">
    <p>Backup</p>
  </div>
  <div class="page">
    <p>Dealing with interrupts</p>
    <p>Handled internally to CPU driver</p>
    <p>Indirection table of OSNodes  physical cores</p>
    <p>Must be re-routed to new core</p>
  </div>
  <div class="page">
    <p>Device interrupts</p>
    <p>core 1 core 2</p>
    <p>kernel 1</p>
    <p>Device driver</p>
    <p>vectors</p>
    <p>IRQh</p>
    <p>IOAPIC</p>
  </div>
  <div class="page">
    <p>Device interrupts</p>
    <p>core 1 core 2</p>
    <p>kernel 1 kernel 2</p>
    <p>Device driver</p>
    <p>Kernel masks</p>
    <p>interrupts</p>
    <p>IOAPIC</p>
    <p>vectors</p>
  </div>
  <div class="page">
    <p>Device interrupts</p>
    <p>core 1 core 2</p>
    <p>kernel 2</p>
    <p>Device driver</p>
    <p>vectors</p>
    <p>IOAPIC</p>
    <p>vectors</p>
    <p>IRQh</p>
    <p>New kernel</p>
    <p>initializes</p>
  </div>
  <div class="page">
    <p>Device interrupts</p>
    <p>core 1 core 2</p>
    <p>kernel 2</p>
    <p>Device driver</p>
    <p>&quot;Register interrupts&quot;</p>
    <p>message</p>
    <p>IOAPIC</p>
    <p>IRQh</p>
    <p>vectorsvectors</p>
  </div>
  <div class="page">
    <p>Device interrupts</p>
    <p>core 1 core 2</p>
    <p>kernel 2</p>
    <p>Device driver</p>
    <p>IOAPIC</p>
    <p>vectors</p>
    <p>IRQh</p>
    <p>Interrupt rerouted</p>
  </div>
</Presentation>
