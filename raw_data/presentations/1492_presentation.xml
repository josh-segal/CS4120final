<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>F.F. Dragan F.F. Dragan (Kent State)(Kent State)</p>
    <p>A.B. Kahng A.B. Kahng (UCSD)(UCSD)</p>
    <p>I. Mandoiu I. Mandoiu (Georgia Tech/UCLA)(Georgia Tech/UCLA)</p>
    <p>S. Muddu S. Muddu (Silicon Graphics)(Silicon Graphics)</p>
    <p>A. Zelikovsky A. Zelikovsky (Georgia State)(Georgia State)</p>
    <p>Provably Good Global Buffering Using an Available Buffer Block Plan</p>
    <p>Provably Good Global Buffering Using an Available Buffer Block Plan</p>
  </div>
  <div class="page">
    <p>Global Buffering via Buffer Blocks</p>
    <p>VDSM  buffer / inverter insertion for all global nets  50nm technology  10^6 buffers</p>
    <p>Buffer Block (BB) methodology  isolate buffer insertion from block implementations  improve routing area resources (RAR) utilization</p>
    <p>RAR(2k-buffer block) =   RAR(k-buffer block)</p>
    <p>For high-end designs   1.6</p>
    <p>Buffer block planning [Cong+99] [TangW00]  given block placement + nets  find shape and location of BBs</p>
    <p>Global buffering via BBs  given nets + BB locations and capacities  find buffered routing for each net</p>
  </div>
  <div class="page">
    <p>Global Buffering via Buffer Blocks</p>
  </div>
  <div class="page">
    <p>Global Buffering Problem</p>
    <p>Given:  Pin &amp; BB locations, BB capacities  list of 2-pin nets, each net has</p>
    <p>upper-bound on #buffers  parity requirement on #buffers  [non-negative weight (criticality coefficient)]</p>
    <p>L/U bounds on wirelength b/w consecutive buffers/pins</p>
    <p>Find: buffered routing of a maximum [weighted] number of nets subject to the given constraints</p>
  </div>
  <div class="page">
    <p>Global Buffering Problem</p>
    <p>Given:  Pin &amp; BB locations, BB capacities  list of 2-pin nets, each net has</p>
    <p>upper-bound on #buffers new  parity requirement on #buffers new  [non-negative weight (criticality coefficient)] new</p>
    <p>L/U bounds on wirelength b/w consecutive buffers/pins</p>
    <p>Find: buffered routing of a maximum [weighted] number of nets subject to the given constraints</p>
    <p>Previous work: 1 buffer per connection, no weights</p>
  </div>
  <div class="page">
    <p>Outline of Results</p>
    <p>Provably good algorithm for the Global Buffering Problem</p>
    <p>integer node-capacitated multi-commodity flow (MCF) formulation</p>
    <p>approximation algorithm for solving fractional relaxation</p>
    <p>provably good randomized rounding based on [RaghavanT87]</p>
    <p>allows tradeoff between run-time and solution quality</p>
    <p>Fast heuristic based on ideas from the approximation algorithm</p>
    <p>superior to simpler greedy approaches</p>
    <p>almost matches the provably good algorithm for loosely constrained instances</p>
  </div>
  <div class="page">
    <p>Integer Program Formulation</p>
    <p>}],[:{</p>
    <p>BlocksBuffer pins :),(Graph</p>
    <p>ULdist(u,v)(u,v)E</p>
    <p>VEVG</p>
    <p>paths routing legal ofset P Pppf</p>
    <p>Vuupfts</p>
    <p>pf</p>
    <p>pu</p>
    <p>Pp</p>
    <p>}1,0{)(</p>
    <p>)(cap)(..</p>
    <p>)(max</p>
    <p>oncemost at routednet each</p>
    <p>uu</p>
  </div>
  <div class="page">
    <p>High-Level Approach</p>
    <p>Solve fractional relaxation + rounding</p>
    <p>first introduced for global routing [RaghavanT87]</p>
    <p>fractional relaxation = node-capacitated multi-commodity flow (MCF)</p>
    <p>can be solved exactly using Linear Programming (LP) techniques</p>
    <p>exact LP algorithms are not practical for large instances</p>
    <p>Key idea: approximate solution to the relaxation</p>
    <p>we generalize edge-capacitated MCF approximation of [GargK98, F99]</p>
    <p>[GargK98] successfully applied to global routing by [Albrecht00]</p>
  </div>
  <div class="page">
    <p>Approximating the Fractional MCF</p>
    <p>-MCF algorithm w(v) = , f = 0 For i = 1 to N do For k = 1, , #nets do Find a shortest path p  P for net k While w(p) &lt; min{ 1, (1+2)^I } do f(p)= f(p) + 1 For every v  p do w(v)  ( 1 + /c(v) ) * w(v) End For End While End For End For Output f/N</p>
    <p>Run time for -approximation = ))BBs#nets(#( 22 O</p>
  </div>
  <div class="page">
    <p>Random walk algorithm [RaghavanT87]  probability of routing a net proportional to nets flow  probability of choosing an arc proportional to fractional</p>
    <p>flow along arc  run time = O( #inserted buffers )  To avoid BB overuse, scale-down fractional flow by 1-</p>
    <p>before rounding</p>
    <p>Rounding to an Integer Solution</p>
    <p>Modifications  approximate MCF underestimates optimum</p>
    <p>few violations + unused BB capacity for large   resolve capacity violations by greedily deleting paths  greedily route remaining nets using unused BB capacity</p>
  </div>
  <div class="page">
    <p>Implemented Heuristics  -MCF w/ greedy enhancement</p>
    <p>solve fractional MCF with  approximation  round fractional solution via random walks  apply greedy deletion/addition to get feasible solution</p>
    <p>Greedy  sequentially route nets along shortest available paths</p>
    <p>1-shot integer MCF  assign weight w=1 to each BB  repeat until total overused capacity does not decrease</p>
    <p>for each net find shortest path  for each BB r increase weight by factor (1 +  usage(r) / cap(r))</p>
    <p>apply greedy deletion/addition to get feasible solution</p>
  </div>
  <div class="page">
    <p>Experimental Setup</p>
    <p>Test instances extracted from next-generation SGI microprocessor</p>
    <p>~4,000 nets  U=4,000 m, L=500-2,000 m  50 buffer blocks  BB capacity</p>
    <p>400 (fully routable instances)  50 (hard instances, 50-60% routable)</p>
  </div>
  <div class="page">
    <p>% R</p>
    <p>o u</p>
    <p>te d</p>
    <p>N e ts</p>
    <p>w/o Greedy Addition w/ Greedy Addition</p>
    <p>Fully Routable Instance (4212 nets)</p>
  </div>
  <div class="page">
    <p>Fully Routable Instance (4212 nets)</p>
    <p>% R</p>
    <p>o u</p>
    <p>te d</p>
    <p>N e ts</p>
    <p>w/o Greedy Addition w/ Greedy Addition</p>
    <p>Greedy</p>
  </div>
  <div class="page">
    <p>Running Time vs. Solution Quality</p>
    <p>CPU Seconds</p>
    <p>% R</p>
    <p>o u</p>
    <p>te d</p>
    <p>N e ts</p>
    <p>Greedy 1-Shot .16-MCF</p>
  </div>
  <div class="page">
    <p>~57% Routable Instance (4212 nets)</p>
    <p>% R</p>
    <p>o u</p>
    <p>te d</p>
    <p>N e ts</p>
    <p>w/o Greedy Addition w/ Greedy Addition</p>
    <p>Greedy</p>
  </div>
  <div class="page">
    <p>Conclusions and Ongoing Work</p>
    <p>Provably good algorithm based on nodecapacitated MCF approximation</p>
    <p>Extensions:  combine global buffering with BB planning</p>
    <p>combine with compaction</p>
  </div>
  <div class="page">
    <p>Combining with compaction</p>
  </div>
  <div class="page">
    <p>Combining with compaction</p>
  </div>
  <div class="page">
    <p>Combining with compaction</p>
    <p>Sum-capacity constraints: cap(BB1) + cap(BB2)  const.</p>
  </div>
  <div class="page">
    <p>Conclusions and Ongoing Work</p>
    <p>Provably good algorithm based on nodecapacitated MCF approximation</p>
    <p>Extensions:  combine global buffering with BB planning</p>
    <p>combine with compaction</p>
    <p>enforce channel capacity constraints  multi-terminal nets (ASPDAC-01)</p>
  </div>
</Presentation>
