<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Scripting the cloud with Skywriting</p>
    <p>Derek G. Murray Steven Hand University of Cambridge</p>
  </div>
  <div class="page">
    <p>A universal model?</p>
    <p>MapReduce</p>
  </div>
  <div class="page">
    <p>A universal model?</p>
    <p>MapReduce</p>
  </div>
  <div class="page">
    <p>A universal model!</p>
  </div>
  <div class="page">
    <p>Move computation to the data</p>
    <p>Driver program</p>
    <p>submitJob();</p>
    <p>Code</p>
    <p>Results</p>
  </div>
  <div class="page">
    <p>while (!converged) do work in parallel;</p>
  </div>
  <div class="page">
    <p>Iterative algorithm</p>
    <p>Code</p>
    <p>Results</p>
    <p>Code</p>
    <p>Results</p>
    <p>Code</p>
    <p>Results</p>
    <p>Code</p>
    <p>Results</p>
    <p>Driver program</p>
    <p>submitJob();</p>
    <p>Driver program</p>
    <p>while () submitJob();</p>
  </div>
  <div class="page">
    <p>Iterative algorithm</p>
    <p>Driver program</p>
    <p>Code</p>
    <p>Results</p>
    <p>Code</p>
    <p>Driver program</p>
    <p>while () submitJob();</p>
  </div>
  <div class="page">
    <p>Skywriting</p>
    <p>Code</p>
    <p>Results</p>
    <p>while () doStuff();</p>
  </div>
  <div class="page">
    <p>Skywriting  JavaScript-like job specification language  Supports functional programming  Data-dependent control flow</p>
    <p>Distributed execution engine  Locality-based scheduling  Fault tolerance  Thread migration</p>
  </div>
  <div class="page">
    <p>Spawning a task</p>
    <p>function f(x) { return x + 1; }</p>
    <p>res1 = spawn(f, [42]);</p>
  </div>
  <div class="page">
    <p>Task dependencies</p>
    <p>function f(x) { return x + 1; } function g(y) {  }</p>
    <p>res1 = spawn(f, [42]); res2 = spawn(g, [res1]);</p>
    <p>res1 and res2 are future references</p>
  </div>
  <div class="page">
    <p>Logistic regression points = []; // List of partitions w = ; // Random initial value for (i in range(0, ITERATIONS)) { w_old = w; results = []; for (part in points) { results += spawn(log_reg, [part, w_old]); } w = spawn(update, [w_old, results]); }</p>
  </div>
  <div class="page">
    <p>Logistic regression points = []; // List of partitions w = ; // Random initial value do { w_old = w; results = []; for (part in points) { results += spawn(log_reg, [part, w_old]); } w = spawn(update, [w_old, results]); done = spawn(converged, [w_old, w]); } while (!*done);</p>
  </div>
  <div class="page">
    <p>Logistic regression</p>
    <p>*operator dereferences (forces) a future</p>
  </div>
  <div class="page">
    <p>Implementation status  Implemented in 4000 lines of Python  Also: Java, C and .NET bindings</p>
    <p>Many additional features  Native code execution  Introspection  Conditional synchronisation</p>
    <p>Available as open-source  http://github.com/mrry/skywriting</p>
  </div>
  <div class="page">
    <p>Job creation overhead</p>
    <p>O ve</p>
    <p>rh ea</p>
    <p>d (s</p>
    <p>ec on</p>
    <p>ds )</p>
    <p>Number of workers</p>
    <p>Hadoop Skywriting</p>
  </div>
  <div class="page">
    <p>Future directions  Multiple-scale parallel computing  Multiple cores, machines and clouds</p>
    <p>Streaming computations  Piping high-bandwidth data between tasks</p>
    <p>Better language integration  Hosted Skywriting on CLR or JVM</p>
  </div>
  <div class="page">
    <p>Conclusions  Turing-complete programming language</p>
    <p>for distributed computation</p>
    <p>Runs real jobs with low overhead</p>
    <p>Lots more still to do!</p>
  </div>
  <div class="page">
    <p>Questions?  Email</p>
    <p>Derek.Murray@cl.cam.ac.uk  Project website</p>
    <p>http://www.cl.cam.ac.uk/netos/skywriting/</p>
  </div>
</Presentation>
