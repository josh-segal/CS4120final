<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Automated Bug Removal for Software-Defined Networks</p>
    <p>Yang Wu* Ang Chen* Andreas Haeberlen* Wenchao Zhou+ Boon Thau Loo*</p>
    <p>* University of Pennsylvania + Georgetown University</p>
  </div>
  <div class="page">
    <p>Motivation: Automated repair</p>
    <p>SDN Controller</p>
    <p>Copy-and-paste bug!!!</p>
    <p>S2</p>
    <p>Backup Web Server</p>
    <p>Main Web Server</p>
    <p>DNS Server</p>
    <p>S0</p>
    <p>action = balancer().</p>
    <p>HTTP traffic Offloaded HTTP traffic</p>
    <p>Line 2 does the same thing  lets copy that!</p>
    <p>Copy!</p>
    <p>Why is the backup web server not getting any requests?</p>
  </div>
  <div class="page">
    <p>What does the operator need to do?</p>
    <p>?</p>
    <p>Aha! There was no matching flow entry on S2!</p>
    <p>I can fix this by changing S1 in the controller program to S2!</p>
    <p>ATPG, DiffProv, EverFlow, ExSPAN, HSA, MCS, NetSight, OFRewind, SNP, VeriFlow, Y!, etc.</p>
    <p>Diagnosis is hard; but there are tools that can help  Existing tools do not help much with repair</p>
  </div>
  <div class="page">
    <p>What will existing debuggers do?</p>
    <p>S0</p>
    <p>SDN Controller</p>
    <p>S2 3 4</p>
    <p>S1</p>
    <p>Backup Web Server</p>
    <p>Main Web Server</p>
    <p>DNS Server</p>
    <p>Offloaded HTTP traffic</p>
    <p>Why is the backup web server not getting any requests?</p>
    <p>No HTTP Request at Backup Web Server</p>
    <p>No Forwarding Entry at S2</p>
    <p>HTTP Request at S2</p>
    <p>???</p>
    <p>???</p>
    <p>HTTP Request at S0</p>
    <p>Aha! There was no matching flow entry on S2!</p>
    <p>Example: Y! [SIGCOMM '14]  Provides a causal explanation of any event of interest</p>
    <p>Symptom</p>
    <p>Cause</p>
  </div>
  <div class="page">
    <p>SDN Controller</p>
    <p>How to repair the problem?</p>
    <p>Problem: Many ways to change a buggy program</p>
    <p>Line 3: Change switch == S1 to switch == S2</p>
    <p>Line 3: Change switch == S1 to switch == S3</p>
    <p>Line 2: Change switch == S1 to switch == S3 Line 1: Change switch</p>
    <p>== S0 to switch == S2</p>
    <p>Line 1: Change switch == S0 to switch == S4</p>
    <p>Line 1: Delete protocol== HTTP</p>
    <p>Line 3: Delete protocol== HTTPLine 3: Change</p>
    <p>protocol== HTTP to protocol==DNS</p>
    <p>Line 1: Change protocol== HTTP to protocol==DNS</p>
    <p>Line 3: Delete switch== S1</p>
    <p>Line 3: Delete switch== S1 and protocol==HTTP</p>
    <p>Line 2: Change output-4 to output-1</p>
    <p>Line 2: Change output-3 to output-4</p>
  </div>
  <div class="page">
    <p>SDN Controller</p>
    <p>How to repair the problem?</p>
    <p>Line 3: Change switch == S1 to switch == S2</p>
    <p>Line 3: Change switch == S1 to switch == S3</p>
    <p>Line 2: Change switch == S1 to switch == S3 Line 1: Change switch</p>
    <p>== S0 to switch == S2</p>
    <p>Line 1: Change switch == S0 to switch == S4</p>
    <p>Line 1: Delete protocol== HTTP</p>
    <p>Line 3: Delete protocol== HTTPLine 3: Change</p>
    <p>protocol== HTTP to protocol==DNS</p>
    <p>Line 1: Change protocol== HTTP to protocol==DNS</p>
    <p>Line 3: Delete switch== S1</p>
    <p>Line 3: Delete switch== S1 and protocol==HTTP</p>
    <p>Line 2: Change output-4 to output-1</p>
    <p>Line 2: Change output-3 to output-4</p>
    <p>Cannot fix</p>
    <p>the problem!</p>
    <p>Problem: Many ways to change a buggy program  Most random changes do not fix the problem</p>
  </div>
  <div class="page">
    <p>SDN Controller</p>
    <p>How to repair the problem?</p>
    <p>Line 3: Change switch == S1 to switch == S2</p>
    <p>Line 3: Change switch == S1 to switch == S3</p>
    <p>Line 2: Change switch == S1 to switch == S3 Line 1: Change switch</p>
    <p>== S0 to switch == S2</p>
    <p>Line 1: Change switch == S0 to switch == S4</p>
    <p>Line 1: Delete protocol== HTTP</p>
    <p>Line 3: Delete protocol== HTTPLine 3: Change</p>
    <p>protocol== HTTP to protocol==DNS</p>
    <p>Line 1: Change protocol== HTTP to protocol==DNS</p>
    <p>Line 3: Delete switch== S1</p>
    <p>Line 3: Delete switch== S1 and protocol==HTTP</p>
    <p>Line 2: Change output-4 to output-1</p>
    <p>Line 2: Change output-3 to output-4</p>
    <p>Cannot fix</p>
    <p>the problem!</p>
    <p>Work but cause side effects!</p>
    <p>Problem: Many ways to change a buggy program  Most random changes do not fix the problem</p>
    <p>Changes that do work can have undesirable side effects</p>
  </div>
  <div class="page">
    <p>SDN Controller</p>
    <p>How to repair the problem?</p>
    <p>Line 3: Change switch == S1 to switch == S2</p>
    <p>Line 3: Change switch == S1 to switch == S3</p>
    <p>Line 2: Change switch == S1 to switch == S3 Line 1: Change switch</p>
    <p>== S0 to switch == S2</p>
    <p>Line 1: Change switch == S0 to switch == S4</p>
    <p>Line 1: Delete protocol== HTTP</p>
    <p>Line 3: Delete protocol== HTTPLine 3: Change</p>
    <p>protocol== HTTP to protocol==DNS</p>
    <p>Line 1: Change protocol== HTTP to protocol==DNS</p>
    <p>Line 3: Delete switch== S1</p>
    <p>Line 3: Delete switch== S1 and protocol==HTTP</p>
    <p>Line 2: Change output-4 to output-1</p>
    <p>Line 2: Change output-3 to output-4</p>
    <p>Cannot fix</p>
    <p>the problem!</p>
    <p>Work but cause side effects!Precisely fix</p>
    <p>the problem!</p>
    <p>Goal: Finding a small number of targeted repairs!</p>
    <p>Problem: Many ways to change a buggy program  Most random changes do not fix the problem</p>
    <p>Changes that do work can have undesirable side effects</p>
  </div>
  <div class="page">
    <p>Our approach: Meta provenance</p>
    <p>Meta provenance additionally tracks causality from program elements to outputs</p>
    <p>It tells us where to look for effective program changes!</p>
    <p>Output</p>
    <p>Inputs</p>
    <p>Output</p>
    <p>Inputs Parts of the program</p>
    <p>Provenance Meta provenance</p>
    <p>Provenance tracks causality from inputs to outputs</p>
  </div>
  <div class="page">
    <p>Putting it all together</p>
    <p>Step #1: Generate meta provenance</p>
    <p>Step #2: Extract candidate repairs</p>
    <p>change s1 to s2</p>
    <p>remove swi == s1  change = to &lt;</p>
    <p>Step #3: Backtest repairs</p>
    <p>change s1 to s2</p>
    <p>remove swi == s1  change == to &lt;</p>
    <p>What should it be changed to?</p>
    <p>How to avoid side effects!</p>
    <p>What should be changed?</p>
    <p>Input: The symptom</p>
    <p>No HTTP Request at Backup Web Server</p>
    <p>Why is the backup web server not getting requests?</p>
    <p>I can fix this by changing S1 in the controller program to S2!</p>
  </div>
  <div class="page">
    <p>Overview</p>
    <p>Approach</p>
    <p>Challenge: Finding effective program changes</p>
    <p>Goal: Automated repair</p>
    <p>Approach: Meta provenance</p>
    <p>Generating meta provenance</p>
    <p>Extracting repairs</p>
    <p>Backtesting repairs</p>
    <p>Evaluation</p>
    <p>Implementation</p>
    <p>Experimental setup</p>
    <p>Results</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Step #1: Generate meta provenance</p>
    <p>Step #2: Extract candidate repairs</p>
    <p>change s1 to s2</p>
    <p>remove swi == s1  change = to &lt;</p>
    <p>Step #3: Backtest repairs</p>
    <p>change s1 to s2</p>
    <p>remove swi == s1  change == to &lt;</p>
    <p>What should it be changed to?</p>
    <p>How to avoid side effects!</p>
    <p>What should be changed?</p>
    <p>Input: The symptom</p>
    <p>No HTTP Request at Backup Web Server</p>
  </div>
  <div class="page">
    <p>Background: Provenance</p>
    <p>Bob at NSDI</p>
    <p>Flight departed from Gate 9</p>
    <p>Bob at Gate 9</p>
    <p>Bob at Airport</p>
    <p>Vertexes represent events;</p>
    <p>Matching Flow Entry at S1</p>
    <p>HTTP Request at Main Web Server</p>
    <p>HTTP Request at S1</p>
    <p>HTTP Request at S0</p>
    <p>Ticket said Gate 9</p>
    <p>Provenance: How outputs are derived from inputs</p>
    <p>Good: Includes only inputs that actually matter  Bad: The program does not appear in the provenance!</p>
    <p>edges represent causal relationships</p>
  </div>
  <div class="page">
    <p>else if (switch == S1 &amp;&amp; protocol == HTTP) then action = output:3.</p>
    <p>If clause executed</p>
    <p>Operator == Variable Constant S1</p>
    <p>Matching Flow Entry at S1</p>
    <p>HTTP Request at Main Web Server</p>
    <p>HTTP Request at S1</p>
    <p>HTTP Request at S0</p>
    <p>Idea: Build a meta model that describes the semantics of the programming language</p>
    <p>Apply provenance at the meta level</p>
    <p>Result: The resulting meta provenance covers both inputs and program elements</p>
    <p>Meta provenance</p>
    <p>Inputs</p>
    <p>Output</p>
    <p>Parts of the program</p>
  </div>
  <div class="page">
    <p>Handling negative events</p>
    <p>This can be handled with counter-factual reasoning</p>
    <p>Bob Not at NSDI</p>
    <p>Flight departed from Gate 9</p>
    <p>Bob Not at Gate 9</p>
    <p>Bob at Airport Ticket did Not say Gate 9</p>
    <p>Problem: What if something failed to happen?</p>
  </div>
  <div class="page">
    <p>Handling negative events</p>
    <p>else if (switch == S1 &amp;&amp; protocol == HTTP) then action = output:4.</p>
    <p>If Clause not executed</p>
    <p>Operator == Variable</p>
    <p>is S2</p>
    <p>Constant is not S2</p>
    <p>No Matching Flow Entry at S2</p>
    <p>No HTTP Request at Backup Web Server</p>
    <p>HTTP Request at S2</p>
    <p>HTTP Request at S0</p>
    <p>Meta provenance finds the program elements that can be changed to affect the observed symptom!</p>
    <p>How does this work in our example?</p>
    <p>No need to change this!</p>
    <p>Change this!</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Step #1: Generate meta provenance</p>
    <p>Step #2: Extract candidate repairs</p>
    <p>change s1 to s2</p>
    <p>remove swi == s1  change = to &lt;</p>
    <p>Step #3: Backtest repairs</p>
    <p>change s1 to s2</p>
    <p>remove swi == s1  change == to &lt;</p>
    <p>What should it be changed to?</p>
    <p>How to avoid side effects!</p>
    <p>What should be changed?</p>
    <p>Input: The symptom</p>
    <p>No HTTP Request at Backup Web Server</p>
  </div>
  <div class="page">
    <p>Constraints</p>
    <p>Extracting candidate repairs</p>
    <p>Bob Not at NSDI</p>
    <p>Flight departed from Gate 9</p>
    <p>Bob Not at Gate 9</p>
    <p>Bob at Airport Ticket did Not say Gate 9</p>
    <p>We can change the root by changing leaves</p>
    <p>Idea: Extract a set of constraints from the tree</p>
    <p>Misprinted ticket corrected to Gate 9</p>
    <p>Symptom</p>
    <p>Places to change</p>
    <p>The actual constraints are more complicated</p>
    <p>Flight.Gate (9) == Bob.Gate</p>
    <p>Bob.Gate == Ticket.Gate</p>
    <p>But which values will have the desired effect?</p>
    <p>Constraints can be given to a solver to find suitable values</p>
  </div>
  <div class="page">
    <p>Extracting candidate repairs</p>
    <p>else if (switch == S1 &amp;&amp; protocol == HTTP) then action = output:4.</p>
    <p>No Matching Flow Entry at S2</p>
    <p>If Clause not Executed</p>
    <p>Operator == Variable</p>
    <p>is S2</p>
    <p>Constant is not S2</p>
    <p>No HTTP Request at Backup Web Server</p>
    <p>HTTP Request at S2</p>
    <p>HTTP Request at S0</p>
    <p>Meta provenance generates targeted repairs!</p>
    <p>S2</p>
    <p>S0</p>
    <p>SDN Controller</p>
    <p>S2</p>
    <p>Backup Web Server Web Server</p>
    <p>Off-loading HTTP</p>
    <p>Change switch == S1 to switch == S2</p>
  </div>
  <div class="page">
    <p>else if (source in 1.2.3.4/16 &amp;&amp; switch == S2) then action = output:4.</p>
    <p>Which repairs should we change?</p>
    <p>else if (switch == S1 &amp;&amp; protocol == HTTP) then action = output:4. S2</p>
    <p>Idea: Rank repairs by complexity</p>
    <p>About 9% of all semantic bugs are typos [Li et. al, ASID 2006]  Only 10-30% of bugs fixes create new statements [Pan et. al, ESE 2009]</p>
    <p>Complex repairs are unlikely to be useful in practice</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Step #1: Generate meta provenance</p>
    <p>Step 2: Extract candidate repairs</p>
    <p>change s1 to s2</p>
    <p>remove swi == s1  change = to &lt;</p>
    <p>Step #3: Backtest repairs</p>
    <p>change s1 to s2</p>
    <p>remove swi == s1  change == to &lt;</p>
    <p>What should it be changed to?</p>
    <p>How to avoid side effects!</p>
    <p>What should be changed?</p>
    <p>Input: The symptom</p>
    <p>No HTTP Request at Backup Web Server</p>
  </div>
  <div class="page">
    <p>else if (switch == S1 &amp;&amp; protocol == HTTP) then action = output:4.</p>
    <p>SDN ControllerHow to get requests</p>
    <p>to the backup web server?</p>
    <p>Copy-and-paste bug!!!</p>
    <p>S2</p>
    <p>Backup Web Server</p>
    <p>Main Web Server</p>
    <p>DNS Server</p>
    <p>S0</p>
    <p>HTTP traffic Offloaded</p>
    <p>HTTP traffic</p>
    <p>Challenge: Undesired side effects</p>
    <p>Idea: Backtest repairs using historical data  Replay historical data on the repaired network  Prioritize repairs that do not significantly disrupt traffic distributions  Idea: Efficient backtesting using multi-query optimization</p>
    <p>DNS server receives HTTP requests!</p>
    <p>else if (switch == S1 &amp;&amp; protocol == HTTP) then action = output:4.</p>
  </div>
  <div class="page">
    <p>Overview</p>
    <p>Approach</p>
    <p>Challenge: Finding effective program changes</p>
    <p>Goal: Automated repair</p>
    <p>Approach: Meta provenance</p>
    <p>Generating meta provenance</p>
    <p>Extracting repairs</p>
    <p>Backtesting repairs</p>
    <p>Evaluation</p>
    <p>Implementation</p>
    <p>Experimental setup</p>
    <p>Results</p>
  </div>
  <div class="page">
    <p>Implementation and experimental setup</p>
    <p>Meta provenance is extracted automatically</p>
    <p>We support three languages (NDlog, Pyretic, Trema)</p>
    <p>We used five SDN bugs from other papers - Copy-and-paste error [OSDI 2004] - Forwarding error [CoNEXT 2012] - Uncoordinated policy update [CoNEXT 2014] - Forgotten packets [NSDI 2012] - Incorrect MAC learning [HotSDN 2014]</p>
    <p>Augmented Stanford campus topology with 16~269 switches</p>
    <p>A mix of reactive traffic and background traffic</p>
  </div>
  <div class="page">
    <p>Evaluation: Questions</p>
    <p>Does the algorithm generate reasonable fixes? What is the runtime overhead?</p>
    <p>How much time do diagnostic queries take? Does meta provenance scale with network size?</p>
    <p>How easy is it to add a new language?</p>
  </div>
  <div class="page">
    <p>- Example: copy-and-paste error</p>
    <p>Evaluation: Quality of the generated repairs</p>
    <p>A: Manually install a flow entry B: Change Swi == 2 in r7 to Swi == 3 C: Change Swi == 2 in r7 to Swi != 2 D: Change Swi == 2 in r7 to Swi &gt;= 2 E: Change Swi == 2 in r7 to Swi &gt; 2 F: Delete Swi == 2 in r7 G: Delete Swi == 2 and Dpt == 53 in r6 H: Delete Swi == 2 and Dpt == 80 in r7 I: Change Swi == 2 and Act=output-1 in r5 to Swi == 3 and Act=output-2</p>
    <p>C: Change Swi == 2 in r7 to Swi != 2 D: Change Swi == 2 in r7 to Swi &gt;= 2 E: Change Swi == 2 in r7 to Swi &gt; 2 F: Delete Swi == 2 in r7 G: Delete Swi == 2 and Dpt == 53 in r6 H: Delete Swi == 2 and Dpt == 80 in r7 I: Change Swi == 2 and Act=output-1 in r5 to Swi == 3 and Act=output-2</p>
    <p>B: Change Swi == 2 in r7 to Swi == 3</p>
    <p>Meta provenance generates targeted repairs!</p>
  </div>
  <div class="page">
    <p>Evaluation: Quality of the generated repairs</p>
    <p>Meta provenance generates targeted repairs!</p>
    <p>Q1 Q2 Q3 Q4 Q5</p>
    <p>Repairs generated</p>
    <p>Repairs that pass backtesting</p>
    <p># Repairs</p>
  </div>
  <div class="page">
    <p>Evaluation: Time to answer queries</p>
    <p>Fast enough for interactive use.</p>
    <p>Q1 Q2 Q3 Q4 Q5</p>
    <p>Query turnaround (seconds)</p>
    <p>Less than 30 seconds!</p>
  </div>
  <div class="page">
    <p>Goal: Automated repairs for buggy SDN programs - Ideally, an automatic Fix it! button - Challenge: Finding programs changes that are effective and avoid side effects</p>
    <p>Approach: Meta Provenance - A generalization of data provenance - Finds the data and code that are causally connected</p>
    <p>to a given event - Can be used to efficiently find program changes that</p>
    <p>will have an effect on an observed problem - Backtesting can be used to avoid changes that have</p>
    <p>undesirable side effects.</p>
    <p>- Evaluation with three different SDN languages Repairs are effective and can be found quickly</p>
    <p>Summary</p>
    <p>Thank you!</p>
  </div>
</Presentation>
