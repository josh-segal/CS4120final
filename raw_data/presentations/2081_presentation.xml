<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Understanding the InterleavingSpace Overlap across Inputs and So7ware Versions</p>
    <p>Dongdong Deng, Wei Zhang, Borui Wang, Peisen Zhao, Shan Lu</p>
    <p>University of Wisconsin, Madison</p>
  </div>
  <div class="page">
    <p>Concurrency bug detec3on is cri3cal</p>
    <p>Concurrency bugs are a big problem  Widely exist and cause severe damage [Northeast blackout, NasDaq]</p>
    <p>They only get worse  MulIcore machines are prevalent</p>
  </div>
  <div class="page">
    <p>Concurrency bug detec3on is costly</p>
    <p>Data race detecIon incurs 10200X slowdown  SoOware many inputs to test  Test all inputs again upon new version SoOware companies cannot afford thorough tesIng</p>
    <p>Interleaving space In</p>
    <p>pu t S</p>
    <p>pa ce</p>
    <p>Software evolving</p>
  </div>
  <div class="page">
    <p>How to speed up?</p>
    <p>Interleaving space</p>
    <p>In pu</p>
    <p>t S pa</p>
    <p>ce</p>
    <p>Software evolving</p>
  </div>
  <div class="page">
    <p>Redundancy across inputs (example)</p>
    <p>Mozilla JavaScript Engine</p>
    <p>Thread 1 js_InitAtomState(){</p>
    <p>state-&gt;table = ; if(state-&gt;table) iterate state-&gt;table;</p>
    <p>}</p>
    <p>Thread 2 js_FreeAtomState(..){</p>
    <p>; state-&gt;table = NULL;</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>Redundancy across inputs</p>
    <p>Thread 1</p>
    <p>How to find inputs' interleaving space overlap before heavy-weight detection?</p>
    <p>Thread 2</p>
    <p>Input 1 Input 2</p>
    <p>Synchronization Shared Memory Access</p>
  </div>
  <div class="page">
    <p>We have an opportunity</p>
    <p>Interleaving Space Overlap across Inputs Race Detection</p>
  </div>
  <div class="page">
    <p>We have a problem</p>
    <p>Interleaving Space Overlap across Inputs</p>
    <p>? Interleaving Space Analysis</p>
  </div>
  <div class="page">
    <p>A solu3on</p>
    <p>Here are all my inputs ..</p>
  </div>
  <div class="page">
    <p>Contribu3ons</p>
    <p>CharacterisIcs study of bug detecIon redundancy  Among different inputs  Among different versions</p>
    <p>A good metric to approximate interleaving space Concurrent Func3on Pairs</p>
    <p>Reasonably accurate in depicIng interleaving space  Lightweight in measurement</p>
    <p>CFPguided race detecIon  Similar ideas can be applied to regression test, etc.</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>MoIvaIon  Challenges  CharacterisIcs study  SoluIon in details  Experiment EvaluaIon  Conclusion</p>
  </div>
  <div class="page">
    <p>Characteris3cs Study Methodology</p>
    <p>5 benchmarks wriXen in C/C++  Aget, Click, FFT, Mozilla and Pbzip2</p>
    <p>One input set for each benchmark  Developer designed: Click and Mozilla  We designed: Aget, FFT and Pbzip2</p>
    <p>Detect data races and atomicity violaIons  Exposed by every input  Exposed by every version</p>
  </div>
  <div class="page">
    <p>Characteris3cs study</p>
    <p>PBZIP2 Mozilla</p>
    <p>Y-axis # of bugs X-axis Input id</p>
    <p>Bug detected by 2-4 inputs</p>
    <p>Bug detected by 8 inputs</p>
    <p>Please refer to our paper for more data</p>
    <p>Harmful Data Race</p>
  </div>
  <div class="page">
    <p>Characteris3cs study</p>
    <p>Mozilla PBZIP2</p>
    <p>Y-axis # of bugs X-axis Input id</p>
    <p>Bug detected by 2-4 inputs</p>
    <p>Bug detected by 8 inputs</p>
    <p>Please refer to our paper for more data</p>
    <p>Data Race (Benign &amp; Harmful)</p>
  </div>
  <div class="page">
    <p>Characteris3cs study</p>
    <p>Y-axis # of bugs X-axis Input id</p>
    <p>Bug detected by 2-4 inputs</p>
    <p>Bug detected by 8 inputs</p>
    <p>Bug detected by 1 input</p>
    <p>Please refer to our paper for more data</p>
    <p>PBZIP2 Mozilla</p>
  </div>
  <div class="page">
    <p>Characteris3cs study</p>
    <p>PBZIP2 Mozilla</p>
    <p>Y-axis # of bugs X-axis Input id</p>
    <p>Bug detected by 2-4 inputs</p>
    <p>Bug detected by 8 inputs</p>
    <p>Bug detected by 1 input</p>
    <p>Please refer to our paper for more data</p>
  </div>
  <div class="page">
    <p>Summary of characteris3cs study</p>
    <p>Applica3on # Inputs that expose the same bug</p>
    <p>Aget 6.67</p>
    <p>Click 2.19</p>
    <p>FFT 4.67</p>
    <p>Mozilla 5.47</p>
    <p>Pbzip2 4.17</p>
    <p>Applica3on # Inputs that expose the same bug</p>
    <p>Aget 1</p>
    <p>Click 1</p>
    <p>FFT 1</p>
    <p>Mozilla 1</p>
    <p>Pbzip2 1</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>MoIvaIon  Challenges  CharacterisIcs study  SoluIon in details  Experiment EvaluaIon  Conclusion</p>
  </div>
  <div class="page">
    <p>Overview</p>
    <p>Here are all my inputs ..</p>
    <p>CFP Detector</p>
    <p>Step 1</p>
    <p>Step 2 Step 3</p>
  </div>
  <div class="page">
    <p>Concurrent Func3on Pair</p>
    <p>CFP, Concurrent Function Pair, set of function pairs that can be potentially executed with each other</p>
    <p>Thread 1 Thread 2</p>
    <p>Shared Memory Access Lock</p>
    <p>Unlock</p>
    <p>Function</p>
  </div>
  <div class="page">
    <p>Step1 How to calculate CFP?</p>
    <p>Trace</p>
    <p>THD Addr</p>
    <p>Thread 1 Thread 2</p>
    <p>Func 1 entry 0xab func1 1 exit 0xab func1 2 entry 0xab func2</p>
  </div>
  <div class="page">
    <p>Step2 Design tes3ng plan</p>
    <p>{f2, f3} {f1, f2}</p>
    <p>{f3, f4}</p>
    <p>CFP of input 1</p>
    <p>CFP of input 2 CFP of input 3</p>
    <p>{f4, f5}</p>
    <p>Goal: select inputs and functions to avoid redundant CFP coverage</p>
    <p>{f2, f4}</p>
    <p>{f3, f5}</p>
    <p>CFP Selection Result Input Selected Func</p>
    <p>{f1, f2, f3, f4, f5} {f3, f4, f5}</p>
  </div>
  <div class="page">
    <p>Step3 CFPbased Race Detec3on</p>
    <p>What do we instrument?  Only instrument selected funcIons for selected inputs.</p>
    <p>What data race detector do we use?  Hybrid of Happenbefore &amp; lockset</p>
  </div>
  <div class="page">
    <p>CFPbased Bug Detec3on Methodology</p>
    <p>Here are all my inputs ..</p>
    <p>CFP Detector</p>
    <p>Step 1 Step 3 Step 2</p>
    <p>LLVM C++ Pin</p>
  </div>
  <div class="page">
    <p>Input and func3on selec3on results</p>
    <p>Applica3on Input Sec3on Logsize Reduc3on (%)</p>
    <p>Aget 3 ouf of 8 94%</p>
    <p>Click 6 out of 6 64%</p>
    <p>FFT 1 out of 8 83%</p>
    <p>Mozilla 7 out of 8 33%</p>
    <p>PBZIP2 2 out of 8 44%</p>
  </div>
  <div class="page">
    <p>Miss any failure inducing data race?</p>
  </div>
  <div class="page">
    <p>How much redundancy we reduced?</p>
    <p>Applica3on # Inputs that expose the same bug</p>
    <p>Aget 6.67</p>
    <p>Click 2.19</p>
    <p>FFT 4.67</p>
    <p>Mozilla 5.47</p>
    <p>Pbzip2 4.17</p>
    <p>Applica3on # Inputs that expose the same bug</p>
    <p>Aget 1</p>
    <p>Click 1.63</p>
    <p>FFT 1</p>
    <p>Mozilla 2.73</p>
    <p>Pbzip2 1.16</p>
    <p>VS</p>
  </div>
  <div class="page">
    <p>How much 3me we saved?</p>
    <p>Applica3on Speedup (X)</p>
    <p>Aget 0.76</p>
    <p>Click 2.14</p>
    <p>FFT 7.13</p>
    <p>Mozilla 1.27</p>
    <p>PBZIP2 1.72</p>
    <p>*The time in our approach is calculated as the sum of three steps introduced before</p>
  </div>
  <div class="page">
    <p>Aget (Data Race)</p>
    <p>Extension to Regression Test</p>
    <p>Version 1 2 3 4 5</p>
    <p>Data Race</p>
    <p>while(td-&gt;offset &lt; foffset) {  dw = pwrite(); td-&gt;offset += dw;  bwritten += dw; }</p>
    <p>typedef struct hist_data {  int bwritten;  } hist_data;</p>
    <p>void save_log() {  h.bwritten += bwritten;  }</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>Concurrency bug detecIon results are redundant across inputs and soOware versions</p>
    <p>Concurrent funcIon pair (CFP) is good coverage metric for interleaving space  Lightweight  Reasonably accurate</p>
    <p>CFP can be used to guide concurrencybug detecIon across inputs and soOware versions</p>
  </div>
  <div class="page">
    <p>Future Work</p>
    <p>Applying CFP to help detect other types of bugs</p>
    <p>Preprocessing to get more accurate CFP  Remove funcIons that do not access shared variables</p>
    <p>Trying different heurisIcs for different tesIng budgets</p>
    <p>Exploring other coverage metrics</p>
  </div>
  <div class="page">
    <p>Thanks!</p>
    <p>Wei Zhang hXp://pages.cs.wisc.edu/~wzh</p>
  </div>
</Presentation>
