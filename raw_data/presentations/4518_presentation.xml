<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Page 1</p>
    <p>!&quot;</p>
    <p>I see a deadlock potential</p>
    <p>in that execution log file lock(T1,L1) lock(T1,L2) release(T1,L2) release(T1,L1) lock(T2,L2) lock(T2,L1)</p>
  </div>
  <div class="page">
    <p>Page 2</p>
    <p>Implemented system</p>
    <p>under test</p>
    <p>RV</p>
  </div>
  <div class="page">
    <p>Page 3</p>
    <p>event stream Implemented</p>
    <p>system under test</p>
    <p>instrumentation</p>
    <p>di sp</p>
    <p>at ch</p>
    <p>reports</p>
    <p>Specs</p>
    <p>Algorithms</p>
    <p>input</p>
    <p>runtime monitoring runtime checking runtime validation runtime analysis dynamic analysis</p>
  </div>
  <div class="page">
    <p>Page 4</p>
    <p># $&quot;  ! % # &amp;'  % $(! $</p>
    <p># )'  $  &quot; !</p>
    <p># &quot;  ! % #  &quot;</p>
    <p># *(&quot;%   +&amp;,</p>
    <p># - &quot;%</p>
    <p>#  %</p>
  </div>
  <div class="page">
    <p>Page 5</p>
    <p>! &quot;</p>
    <p>newCommand</p>
    <p>s1 s3s2</p>
    <p>s5</p>
    <p>s4</p>
    <p>validate</p>
    <p>execute</p>
    <p>success</p>
    <p>fail</p>
    <p>rejectCommand</p>
    <p>execute</p>
    <p>customValidate</p>
    <p>s6 s8</p>
    <p>s7</p>
    <p>execute</p>
    <p>customValidate</p>
    <p>always</p>
  </div>
  <div class="page">
    <p>Page 6</p>
    <p>#  $</p>
    <p># !</p>
    <p>( #.%/</p>
    <p># )!</p>
    <p>( %&amp;'</p>
    <p>1   (/</p>
  </div>
  <div class="page">
    <p>Page 7</p>
    <p>$</p>
    <p>!   ! ( (          (    1  +   ,   !  %/</p>
  </div>
  <div class="page">
    <p>Page 8</p>
    <p>T1:</p>
    <p>synchronized(L1){ ... synchronized(L2){ ...</p>
    <p>} ...</p>
    <p>}</p>
    <p>T2:</p>
    <p>synchronized(L2){ ... synchronized(L1){ ...</p>
    <p>} ...</p>
    <p>}</p>
    <p>$  ' 2  *2  3  *3</p>
    <p>synchronized statementsA basic scenario</p>
    <p>( )*+</p>
  </div>
  <div class="page">
    <p>Page 9</p>
    <p>( )*+</p>
    <p>class Value{ int x = 1; synchronized void add(Value v){x = x + v.get();} synchronized int get(){return x;}</p>
    <p>}</p>
    <p>v1.add(v2)</p>
    <p>Thread T1 Thread T2</p>
    <p>v1 = new Value(); v2 = new Value();</p>
    <p>v2.add(v1)</p>
    <p>v1</p>
    <p>v2</p>
    <p>synchronized methodsDynamic locks</p>
  </div>
  <div class="page">
    <p>Page 10</p>
    <p>class Main{ Fork[] forks = new Fork[N]; .. for(int i=0;i&lt;N;i++){ new Phisosopher(forks[i],forks[(i+1)%N];</p>
    <p>}; }</p>
    <p>$' while(count&lt;10){</p>
    <p>synchronized(left){ synchronized(right){count++}</p>
    <p>}</p>
    <p>}</p>
    <p>(  )*+   dynamic lockingA challenge for static analysis</p>
    <p>arithmetic synchronized(salt_chaker)</p>
    <p>N = number of philosophers</p>
  </div>
  <div class="page">
    <p>Page 11</p>
    <p>(  %&amp;$  , ' # (  %   &quot;</p>
    <p># ) !   4% 1 # 0   !   %</p>
    <p># ),-!  4%   #  %'</p>
    <p>0 526 +73 ,  0 538 +3/62 !,  0 532 +!  /,</p>
    <p>#   %'  0 57 +7 !,  0 59 +3: !  !  /,</p>
    <p># ,. ! ;$  ( 4</p>
  </div>
  <div class="page">
    <p>Page 12</p>
    <p>extract trace</p>
    <p>build model</p>
    <p>analyze model</p>
    <p>Error report</p>
    <p>Error X in line Y</p>
    <p>l(T,L) -- T locks L u(T,L) -- T unlocks L</p>
    <p>l(T1,G) l(T1,L1) l(T1,L2) u(T1,L2) u(T1,L1) l(T2,G) l(T2,L2) l(T2,L1) u(T2,L1) u(T2,L2) u(T2,G) l(T3,L1) l(T3,L2) u(T3,L2) u(T3,L1) l(T1,L2) l(T1,L1) u(T1,L1) u(T1,L2)</p>
    <p>Extracted events kinds:</p>
  </div>
  <div class="page">
    <p>Page 13</p>
    <p>&quot; %  /</p>
    <p>good run</p>
    <p>Hmm  looks pretty good</p>
    <p>to me.</p>
    <p>bad run</p>
  </div>
  <div class="page">
    <p>Page 14</p>
    <p>(    0, 1 (  %</p>
    <p>good run</p>
    <p>Shoot  some foot prints of a bug!</p>
    <p>bad run</p>
    <p>turn a hard to test property into a stronger easy</p>
    <p>to test property.</p>
  </div>
  <div class="page">
    <p>Page 15</p>
    <p>, 2</p>
    <p>&lt;  ( + ,</p>
    <p>&lt; =    !   !$$</p>
    <p>&quot; %  $%</p>
    <p>&quot; %  %</p>
    <p>&quot; =  $ !</p>
  </div>
  <div class="page">
    <p>Page 16</p>
    <p># -  (  %</p>
    <p># &gt;!  $       /</p>
    <p># &gt;!        /</p>
  </div>
  <div class="page">
    <p>Page 17</p>
    <p>extract trace</p>
    <p>compute graph</p>
    <p>detect cycles</p>
    <p>Error report</p>
    <p>Error X in line Y</p>
    <p>$ 2%  /</p>
  </div>
  <div class="page">
    <p>Page 18</p>
    <p>(       3 # 45556</p>
    <p>T1:</p>
    <p>synchronized(L1){ ... synchronized(L2){ ...</p>
    <p>} ...</p>
    <p>}</p>
    <p>T2:</p>
    <p>synchronized(L2){ ... synchronized(L1){ ...</p>
    <p>} ...</p>
    <p>}</p>
    <p>/7 /4</p>
    <p>%</p>
    <p>=</p>
  </div>
  <div class="page">
    <p>Page 19</p>
    <p>(</p>
    <p>Input: an execution trace</p>
    <p>GL : (Lock  *,   $ CL : [Thread  Lock ?  ;</p>
    <p>+ 5 2//@@,   A?  +,</p>
    <p>GL '5 GL  { (o ,o) | o  CL(t) };</p>
    <p>CL := CL  [  CL(t)  {o} ]; !+,</p>
    <p>CL := CL  [  CL(t) \ {o} ];</p>
    <p>+ *, $+B $' C &lt; ,D</p>
  </div>
  <div class="page">
    <p>Page 20</p>
    <p>(    -  ,  3- 8  6</p>
    <p>T1:</p>
    <p>sync(G){ sync(L1){ sync(L2){}</p>
    <p>} }; T3 = new T3(); j3.start(); J3.join(); sync(L2){ sync(L1){}</p>
    <p>}</p>
    <p>T2:</p>
    <p>sync(G){ sync(L2){ sync(L1){}</p>
    <p>} }</p>
    <p>T3:</p>
    <p>sync(L1){ sync(L2){}</p>
    <p>}</p>
    <p>%</p>
    <p>%</p>
    <p>%</p>
    <p>$  % 9</p>
  </div>
  <div class="page">
    <p>Page 21</p>
    <p>*+*+</p>
    <p>T1:</p>
    <p>sync(G){ sync(L1){ sync(L2){}</p>
    <p>} }; T3 = new T3(); j3.start(); J3.join(); sync(L2){ sync(L1){}</p>
    <p>}</p>
    <p>T2:</p>
    <p>sync(G){ sync(L2){ sync(L1){}</p>
    <p>} }</p>
    <p>T3:</p>
    <p>sync(L1){ sync(L2){}</p>
    <p>}</p>
    <p>l(T1,G) l(T1,L1) l(T1,L2) u(T1,L2) u(T1,L1) s(T1,T3) l(T2,G) l(T2,L2) l(T2,L1) u(T2,L1) u(T2,L2) u(T2,G) l(T3,L1) l(T3,L2) u(T3,L2) u(T3,L1) j(T1,T3) l(T1,L2) l(T1,L1) u(T1,L1) u(T1,L2)</p>
    <p>* !</p>
    <p>:</p>
  </div>
  <div class="page">
    <p>Page 22</p>
    <p>(</p>
    <p>T1:</p>
    <p>sync(G){ sync(L1){ sync(L2){}</p>
    <p>} }; T3 = new T3(); j3.start(); J3.join(); sync(L2){ sync(L1){}</p>
    <p>}</p>
    <p>T2:</p>
    <p>sync(G){ sync(L2){ sync(L1){}</p>
    <p>} }</p>
    <p>T3:</p>
    <p>sync(L1){ sync(L2){}</p>
    <p>}</p>
    <p>T3: L1 -&gt; L2</p>
    <p>T2: L2 -&gt; L1</p>
    <p>(  ' !  $     $/     E  F     E (  F/</p>
    <p>%</p>
    <p>%</p>
    <p>%</p>
    <p>$  % 9</p>
  </div>
  <div class="page">
    <p>Page 23</p>
    <p>G</p>
    <p>L1</p>
    <p>L2</p>
    <p>L2</p>
    <p>L1</p>
    <p>T1</p>
    <p>G</p>
    <p>L2</p>
    <p>L1</p>
    <p>T2</p>
    <p>L1</p>
    <p>L2</p>
    <p>T3</p>
    <p>/(  3  45556</p>
  </div>
  <div class="page">
    <p>Page 24</p>
    <p>G</p>
    <p>L1</p>
    <p>L2</p>
    <p>L2</p>
    <p>L1</p>
    <p>T1</p>
    <p>G</p>
    <p>L2</p>
    <p>L1</p>
    <p>T2</p>
    <p>L1</p>
    <p>L2</p>
    <p>T3</p>
    <p>/(  3  45556</p>
  </div>
  <div class="page">
    <p>Page 25</p>
    <p>(</p>
    <p>T1:</p>
    <p>sync(G){ sync(L1){ sync(L2){}</p>
    <p>} }; T3 = new T3(); j3.start(); J3.join(); sync(L2){ sync(L1){}</p>
    <p>}</p>
    <p>T2:</p>
    <p>sync(G){ sync(L2){ sync(L1){}</p>
    <p>} }</p>
    <p>T3:</p>
    <p>sync(L1){ sync(L2){}</p>
    <p>}</p>
    <p>!</p>
    <p>2%  !</p>
    <p>Potential 1 &amp; 2</p>
    <p>(  ' ;  $ (   ' (     ! /</p>
    <p>$  % 9</p>
    <p>%</p>
  </div>
  <div class="page">
    <p>Page 26</p>
    <p>Input: an execution trace  % *  5   *  GL : (Lock  *   *,  $ CL : [Thread  Lock ?  ;</p>
    <p>+ 5 2//@@,   A?  +,</p>
    <p>GL '5 GL  { (o ,(t,g),o) | o  CL(t)  g = { o | o  CL(t) }};</p>
    <p>CL := CL  [  CL(t)  {o} ]; !+,</p>
    <p>CL := CL  [  CL(t) \ {o} ];</p>
    <p>%&quot;+ *, $+B $' C &lt; ,D</p>
    <p>valid-cycle( c ) =  e1,e2  c thread(e1) thread(e2)  guards(e1)  guards(e2) = { }</p>
    <p>thread : Label  Thread thread(t,g) = t</p>
    <p>guards : Label  Lock-set guards(t,g) = g</p>
    <p>(</p>
  </div>
  <div class="page">
    <p>Page 27</p>
    <p>$ 2</p>
    <p>T1:</p>
    <p>sync(G){ sync(L1){ sync(L2){}</p>
    <p>} }; T3 = new T3(); j3.start(); J3.join(); sync(L2){ sync(L1){}</p>
    <p>}</p>
    <p>T2:</p>
    <p>sync(G){ sync(L2){ sync(L1){}</p>
    <p>} }</p>
    <p>T3:</p>
    <p>sync(L1){ sync(L2){}</p>
    <p>}</p>
    <p>%</p>
    <p>x y</p>
    <p>x executes before y</p>
  </div>
  <div class="page">
    <p>Page 28</p>
    <p>* 36:36  ;&lt;</p>
    <p>x n</p>
    <p>x</p>
    <p>y</p>
    <p>n</p>
    <p>n+1</p>
    <p>t2.start()</p>
    <p>t2.join()</p>
    <p>T1</p>
    <p>T2</p>
    <p>T2</p>
    <p>T1</p>
    <p>n : next free segment</p>
    <p>Let S* be the transitive closure of segmentation graph S.</p>
    <p>The happens-before relation is defined as:</p>
    <p>x  y = (x,y)  S*</p>
    <p>The in-parallel relation is defined as:</p>
    <p>x || y = (x  y)  (y  x)</p>
  </div>
  <div class="page">
    <p>Page 29</p>
    <p>- (</p>
    <p>T1:</p>
    <p>sync(G){ sync(L1){ sync(L2){}</p>
    <p>} }; T3 = new T3(); j3.start(); J3.join(); sync(L2){ sync(L1){}</p>
    <p>}</p>
    <p>T2:</p>
    <p>sync(G){ sync(L2){ sync(L1){}</p>
    <p>} }</p>
    <p>T3:</p>
    <p>sync(L1){ sync(L2){}</p>
    <p>}</p>
    <p>&quot;##$&quot;##$&quot;##$&quot;##$</p>
    <p>&quot;$&quot;$&quot;$&quot;$$$$$</p>
    <p>&quot;%%$&quot;%%$&quot;%%$&quot;%%$</p>
    <p>&quot;$&quot;$&quot;$&quot;$</p>
    <p>M: new T1().start(); new T2().start();</p>
    <p>M</p>
    <p>T1</p>
    <p>T2</p>
    <p>T3</p>
    <p>!</p>
    <p>&amp;'&amp;'&amp;'&amp;'(</p>
    <p>2%  !</p>
    <p>One potential left, the real deadlock!</p>
    <p>(  ' ;  $ (   ' (       /</p>
    <p>$  % 9</p>
  </div>
  <div class="page">
    <p>Page 30</p>
    <p>- (</p>
    <p>Input: an execution trace  % *  5     *&quot;   GL : (Lock  *   *,  $ GS : (nat  ,  / $ CL : [Thread  (Lock  , ?  ; CS : [Thread  ? / ;  ' 5 2D ; %  /</p>
    <p>+ 5 2//@@,   A?  +,</p>
    <p>GL '5 GL  { (o ,(s1,t,g,s2),o) | (o, s1)  CL(t)  g = { o | (o, *)  CL(t) }  s2 = CS(t)};</p>
    <p>CL := CL  [  CL(t)  {(o,CS(t))} ]; !+,</p>
    <p>CL := CL  [  CL(t) \ {(o,*)} ]; +2 3,</p>
    <p>GS '5 GS  { (CS(t1),n), (CS(t1),n+1)} CS := CS  [2  n, 3  n+1]; n := n + 2;</p>
    <p>G+2 3,  GS '5 GS  { (CS(t1),n), (CS(t2),n)}; CS := CS  [2  n]; n := n + 1;</p>
    <p>%&quot;+ *, $+B $' C &lt; ,D</p>
    <p>valid-cycle( c ) =  e1,e2  c thread(e1) thread(e2)  guards(e1)  guards(e2) = { }  target(e1)  target(e2)</p>
    <p>thread : Label  Thread thread(s1,t,g,s2) = t</p>
    <p>guards : Label  Lock-set guards(s1,t,g,s2) = g</p>
    <p>source : Label  nat source(s1,t,g,s2) = s1</p>
    <p>target : Label  nat target(s1,t,g,s2) = s2</p>
  </div>
  <div class="page">
    <p>Page 31</p>
    <p>extract trace</p>
    <p>project on threads</p>
    <p>model check</p>
    <p>Error report</p>
    <p>Error X in line Y</p>
    <p>&quot;  2</p>
  </div>
  <div class="page">
    <p>Page 32</p>
    <p># &amp;;! ! %  $  ; BC ;! '</p>
    <p>&quot;$&quot;$&quot;$&quot;$ &quot;$&quot;$&quot;$&quot;$ &quot;)$&quot;)$&quot;)$&quot;)$&quot;$&quot;$&quot;$&quot;$*&quot;)$*&quot;)$*&quot;)$*&quot;)$&quot;$&quot;$&quot;$&quot;$ &quot;$&quot;$&quot;$&quot;$ &quot;$&quot;$&quot;$&quot;$ &quot;$&quot;$&quot;$&quot;$&quot;$&quot;$&quot;$&quot;$</p>
    <p>T1:</p>
    <p>long x; synchronized(R1){ synchronized(R2){}; x = big1*big2;</p>
    <p>}</p>
    <p>T2:</p>
    <p>synchronized(R2){ System.out.println(x); synchronized(R1){};</p>
    <p>}</p>
    <p>&quot;  2</p>
  </div>
  <div class="page">
    <p>Page 33</p>
    <p>project on threads</p>
    <p>&quot;$&quot;$&quot;$&quot;$ &quot;$&quot;$&quot;$&quot;$ *&quot;)$*&quot;)$*&quot;)$*&quot;)$&quot;$&quot;$&quot;$&quot;$ &quot;$&quot;$&quot;$&quot;$</p>
    <p>&quot;)$&quot;)$&quot;)$&quot;)$&quot;$&quot;$&quot;$&quot;$ &quot;$&quot;$&quot;$&quot;$ &quot;$&quot;$&quot;$&quot;$&quot;$&quot;$&quot;$&quot;$</p>
    <p>&quot;$&quot;$&quot;$&quot;$ &quot;$&quot;$&quot;$&quot;$ &quot;)$&quot;)$&quot;)$&quot;)$&quot;$&quot;$&quot;$&quot;$*&quot;)$*&quot;)$*&quot;)$*&quot;)$&quot;$&quot;$&quot;$&quot;$ &quot;$&quot;$&quot;$&quot;$ &quot;$&quot;$&quot;$&quot;$ &quot;$&quot;$&quot;$&quot;$&quot;$&quot;$&quot;$&quot;$</p>
    <p>&quot;  2</p>
  </div>
  <div class="page">
    <p>Page 34</p>
    <p>$    %</p>
    <p>;! $  @@   H!'</p>
    <p>!  8     +22I2JK,     ! %  /</p>
    <p>3 6 5 L+ , +2 3 I  JK,  '    %    /</p>
    <p>$  3==6 5   @@ + ,</p>
    <p>$ *( $ / 2. 36 5 +@@,</p>
    <p>8 &quot;232</p>
  </div>
  <div class="page">
    <p>Page 35</p>
    <p># $$'  0 59M  !  6 !</p>
    <p>#    $$ +    28 ,' # . &gt;? %   7N  # . &gt;@!   +2/6 &gt; ,</p>
    <p>*+ #  &quot;  2</p>
    <p>better</p>
    <p>N=3: faster N=4: out of mem.</p>
  </div>
  <div class="page">
    <p>Page 36</p>
    <p>*    ;! / * *    $/ * @@    /</p>
    <p>soundness wrt. execution trace !</p>
    <p>c  valid-cycles(GL)   ||Si Deadlocking( )  reflects(c, )</p>
    <p>completeness wrt. execution trace !</p>
    <p>||Si Deadlocking( )   c  valid-cycles(GL) reflects(c, )</p>
    <p>reflects : Cycle    Bool reflects(c, ) =  (l1,(_,t,_,_),l2)  c</p>
    <p>t holds l1 in  t next wants l2 in</p>
    <p>cycles ||Si</p>
    <p>execution trace</p>
  </div>
  <div class="page">
    <p>Page 37</p>
    <p>&quot;  8</p>
    <p>T1:</p>
    <p>sync(G){ sync(L1){ sync(L2){}</p>
    <p>} }; T3 = new T3(); j3.start(); J3.join(); sync(L2){ sync(L1){}</p>
    <p>}</p>
    <p>T2:</p>
    <p>if(p) X := G</p>
    <p>else X := H;</p>
    <p>sync(X){ sync(L2){ sync(L1){}</p>
    <p>} }</p>
    <p>T3:</p>
    <p>sync(L1){ sync(L2){}</p>
    <p>}</p>
    <p>If p evaluates to true Cycle becomes guarded and error is missed.</p>
    <p>% A</p>
  </div>
  <div class="page">
    <p>Page 38</p>
    <p>,  - .</p>
    <p>#  % ! $ 1   ;! $    !/</p>
    <p># O  (  (   (      $ % /</p>
    <p># - (%  ( !$ (     + ( ! ,/</p>
  </div>
  <div class="page">
    <p>Page 39</p>
    <p>,  ! .</p>
    <p>synchronized(L1){ if(random(1,n)==1)</p>
    <p>synchronized(L2){} }</p>
    <p>synchronized(L2){ if(random(1,n)==1)</p>
    <p>synchronized(L3){} }</p>
    <p>synchronized(Lk){ if(random(1,n)==1)</p>
    <p>synchronized(L1){} }</p>
    <p>Probability for deadlock to occur: ,3B6!</p>
    <p>PD(k,n) = P(,3B6 deadlocks in a run)</p>
    <p>= 1/n * P(deadlock | random == 1)</p>
    <p>= 1/n * (1 * (k-1)/k * (k-2)/k *  * 1/k)</p>
    <p>= 1/n * k!/k^k</p>
    <p>Example:</p>
    <p>PD(k=4,n=3) = 0.03</p>
  </div>
  <div class="page">
    <p>Page 40</p>
    <p>*+   75    *</p>
    <p>synchronized(L1){ if(random(1,n)==1)</p>
    <p>synchronized(L2){} }</p>
    <p>synchronized(L2){ if(random(1,n)==1)</p>
    <p>synchronized(L3){} }</p>
    <p>synchronized(Lk){ if(random(1,n)==1)</p>
    <p>synchronized(L1){} }</p>
    <p>Probability for deadlock to occur: ,3B6!</p>
    <p>PC(k,n) = P(,3B6 generates cycle in a run)</p>
    <p>= 1/n * P(cycle | random == 1)</p>
    <p>= 1/n * 1</p>
    <p>= 1/n</p>
    <p>Example:</p>
    <p>PC(k=4,n=3) = 0.33</p>
    <p>= 10 * PD(k=4,n=3) &lt; 1</p>
  </div>
  <div class="page">
    <p>Page 41</p>
    <p>$ ,</p>
    <p>%' 0 526 +73 , 0 538 +3/62 !, 0 532 +!  /,</p>
    <p>%' 0 57 +7 !, 0 59 +!  /,</p>
    <p>model checking</p>
    <p>%' 0 59M +6 !,</p>
    <p>%' 0 57 +7N , 0 59 +!  /,</p>
    <p>trace model checking</p>
    <p>%' 0 5288 +N , 0 5788 +33 , I</p>
    <p>%' 0 59 +M , 0 5288 +78 , 0 5788 +3 !, I</p>
    <p>runtime analysis</p>
  </div>
  <div class="page">
    <p>Page 42</p>
    <p>2</p>
    <p>. ( ( &lt; C ! 76888   &lt;&lt; ! 2    !/</p>
    <p>. ( ( C) ! N888   4% + 4% %  &lt;&lt; %, ! 3 $    !/   (  B$C/</p>
    <p>. ( ( $ *(    ! &lt;&lt; ! 3 /</p>
    <p>. ( (   ! 0   ! + ! 4% %  &amp; !   ,/</p>
  </div>
  <div class="page">
    <p>Page 43</p>
    <p>$  (  %   . ( ( ;$ *( &lt; ,</p>
    <p>plannermain</p>
    <p>token network (plan)</p>
    <p>agent relay (communication system)</p>
    <p>external events</p>
    <p>traceLock</p>
    <p>TokenNetworkMutex</p>
    <p>TokenNetworkMutex</p>
    <p>PlanRunner::trace_lock by thread:</p>
    <p>DeliberativePlanner at positions:</p>
    <p>- trySetVariableDomain() - PlanRunner::traceLock()</p>
    <p>TokenNetworkMutex by thread:</p>
    <p>Mission_Agent_Main at positions:</p>
    <p>- PlanRunner::traceLock() - getPredicateType()</p>
    <p>Error message:</p>
    <p>With Chuck Fry, QSS, NASA Ames</p>
  </div>
  <div class="page">
    <p>Page 44</p>
    <p># $ % (  %  # PQ %   !    /    !  $  $ + ;/ &lt;&lt;   $  38 /  ! %    ,/</p>
    <p>#  ! %  !!   !/ # - (%   (      !/ # !    ;$ $ ( % /</p>
    <p>#  %  ! #         +  / !,/ # - (%     !   B !  $ C/   (  /  $ /</p>
    <p># $ /</p>
    <p># ,   ! # !$  $'</p>
    <p>synchronized(A,B){} #  $  $$ ( $  /</p>
  </div>
  <div class="page">
    <p>Page 45</p>
    <p>&amp;</p>
  </div>
</Presentation>
