<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Simplifying Datacenter Network Debugging with PathDump</p>
    <p>University of Edinburgh, Cornell University Praveen Tammana Rachit Agarwal Myungjin Lee</p>
  </div>
  <div class="page">
    <p>Datacenter networks are complex</p>
    <p>--source: TechRepublic.com</p>
    <p>Increasingly larger scale  Over 10k switches, 100k servers  Each server with 10 to 40 Gbps  Aggregate traffic &gt; 100 Tbps</p>
  </div>
  <div class="page">
    <p>Datacenter networks are complex</p>
    <p>--source: TechRepublic.com</p>
    <p>Increasingly larger scale  Over 10k switches, 100k servers  Each server with 10 to 40 Gbps  Aggregate traffic &gt; 100 Tbps</p>
    <p>Stringent performance requirements  E.g., Amazon and Google studies</p>
  </div>
  <div class="page">
    <p>Datacenter networks are complex</p>
    <p>--source: TechRepublic.com</p>
    <p>Increasingly larger scale  Over 10k switches, 100k servers  Each server with 10 to 40 Gbps  Aggregate traffic &gt; 100 Tbps</p>
    <p>Stringent performance requirements  E.g., Amazon and Google studies</p>
    <p>Complex policies  Security, isolation, etc.</p>
    <p>Network programmability  Too many possible configurations</p>
  </div>
  <div class="page">
    <p>Network problems are inevitable</p>
    <p>Result: Mismatch between network behavior and operator intent</p>
    <p>Loops</p>
    <p>Failures, bugs</p>
  </div>
  <div class="page">
    <p>Network problems are inevitable</p>
    <p>Result: Mismatch between network behavior and operator intent</p>
    <p>Loops</p>
    <p>Failures, bugs</p>
  </div>
  <div class="page">
    <p>Network problems are inevitable</p>
    <p>Result: Mismatch between network behavior and operator intent</p>
    <p>Loops</p>
    <p>Failures, bugs</p>
    <p>Silent random packet drops</p>
    <p>Faulty interface</p>
    <p>X</p>
  </div>
  <div class="page">
    <p>Network problems are inevitable</p>
    <p>Result: Mismatch between network behavior and operator intent</p>
    <p>Loops</p>
    <p>Failures, bugs</p>
    <p>Silent random packet drops</p>
    <p>Faulty interface</p>
    <p>X</p>
    <p>Human errors</p>
    <p>Black hole</p>
    <p>X X</p>
    <p>X</p>
  </div>
  <div class="page">
    <p>Network problems are inevitable</p>
    <p>Result: Mismatch between network behavior and operator intent</p>
    <p>Loops</p>
    <p>Failures, bugs</p>
    <p>Silent random packet drops</p>
    <p>Faulty interface</p>
    <p>X</p>
    <p>Human errors</p>
    <p>Black hole</p>
    <p>X X</p>
    <p>X</p>
  </div>
  <div class="page">
    <p>Network problems are inevitable</p>
    <p>Result: Mismatch between network behavior and operator intent</p>
    <p>Lots of research efforts in building network debuggers</p>
    <p>Loops</p>
    <p>Failures, bugs</p>
    <p>Silent random packet drops</p>
    <p>Faulty interface</p>
    <p>X</p>
    <p>Human errors</p>
    <p>Black hole</p>
    <p>X X</p>
    <p>X</p>
  </div>
  <div class="page">
    <p>Existing designs: in-network techniques</p>
    <p>Network debuggers are even more complex</p>
  </div>
  <div class="page">
    <p>Existing designs: in-network techniques</p>
    <p>Idea: Use programmability of network switches to capture debugging information</p>
    <p>Network debuggers are even more complex</p>
  </div>
  <div class="page">
    <p>Network debuggers are even more complex Static analysis of data plane snapshots E.g.: HSA [NSDI12], Anteater [SIGCOMM11]</p>
  </div>
  <div class="page">
    <p>Network debuggers are even more complex Static analysis of data plane snapshots E.g.: HSA [NSDI12], Anteater [SIGCOMM11]</p>
  </div>
  <div class="page">
    <p>Network debuggers are even more complex</p>
    <p>FIBs ACLs</p>
    <p>Static analysis of data plane snapshots E.g.: HSA [NSDI12], Anteater [SIGCOMM11]</p>
  </div>
  <div class="page">
    <p>Network debuggers are even more complex</p>
    <p>Capturing consistent network state is a hard problem</p>
    <p>FIBs ACLs</p>
    <p>Static analysis of data plane snapshots E.g.: HSA [NSDI12], Anteater [SIGCOMM11]</p>
  </div>
  <div class="page">
    <p>Network debuggers are even more complex Per-switch per-packet logging E.g.: NetSight [NSDI14]</p>
  </div>
  <div class="page">
    <p>Network debuggers are even more complex Per-switch per-packet logging E.g.: NetSight [NSDI14]</p>
  </div>
  <div class="page">
    <p>Network debuggers are even more complex</p>
    <p>High bandwidth and processing overhead</p>
    <p>Per-switch per-packet logging E.g.: NetSight [NSDI14]</p>
  </div>
  <div class="page">
    <p>Network debuggers are even more complex Selective packet sampling and mirroring E.g.: Everflow [SIGCOMM15], Planck [SIGCOMM14], sFlow</p>
  </div>
  <div class="page">
    <p>Network debuggers are even more complex Selective packet sampling and mirroring E.g.: Everflow [SIGCOMM15], Planck [SIGCOMM14], sFlow</p>
    <p>Sample/mirror packet</p>
  </div>
  <div class="page">
    <p>Network debuggers are even more complex Selective packet sampling and mirroring E.g.: Everflow [SIGCOMM15], Planck [SIGCOMM14], sFlow</p>
  </div>
  <div class="page">
    <p>Network debuggers are even more complex</p>
    <p>Identifying packets to sample for debugging problems is complex</p>
    <p>Selective packet sampling and mirroring E.g.: Everflow [SIGCOMM15], Planck [SIGCOMM14], sFlow</p>
  </div>
  <div class="page">
    <p>Network debuggers are even more complex SQL-like queries on switches E.g.: Pathquery [NSDI16]</p>
  </div>
  <div class="page">
    <p>Network debuggers are even more complex SQL-like queries on switches E.g.: Pathquery [NSDI16]</p>
    <p>Query</p>
  </div>
  <div class="page">
    <p>Network debuggers are even more complex SQL-like queries on switches E.g.: Pathquery [NSDI16]</p>
    <p>Requires dynamic installation of switch rules</p>
    <p>Query</p>
  </div>
  <div class="page">
    <p>Summary: Complex networks and debuggers</p>
    <p>Complex networks --source: TechRepublic.com</p>
    <p>Data plane snapshots</p>
    <p>Per-switch per-packet logs</p>
    <p>Packet mirroring</p>
    <p>Packet sampling Dynamic rule installation</p>
    <p>Network debuggers even more complex</p>
  </div>
  <div class="page">
    <p>PathDump: (Simple) In-network + End-hosts</p>
    <p>In-network debugging functionality</p>
    <p>Network elements</p>
    <p>ProblemProblem</p>
  </div>
  <div class="page">
    <p>PathDump: (Simple) In-network + End-hosts</p>
    <p>Use end-hosts for most debugging problems</p>
    <p>In-network functionality for a small number of debugging problems</p>
    <p>Network elements</p>
    <p>Server Server</p>
    <p>Debugging functionality at end-host</p>
    <p>In-network debugging</p>
    <p>ProblemProblem</p>
  </div>
  <div class="page">
    <p>PathDump in a nutshell  Before forwarding a packet, checks a condition  If met, embeds its ID into packet header</p>
    <p>Switch</p>
  </div>
  <div class="page">
    <p>PathDump in a nutshell  Before forwarding a packet, checks a condition  If met, embeds its ID into packet header</p>
    <p>No data plane snapshots  No per-switch per-packet logs  No packet sampling  No packet mirroring  No dynamic rule installation</p>
    <p>Switch</p>
  </div>
  <div class="page">
    <p>PathDump in a nutshell</p>
    <p>Captures each and every packet header  Stores and updates flow-level statistics  Exposes API for debugging purposes</p>
    <p>Server</p>
    <p>Before forwarding a packet, checks a condition  If met, embeds its ID into packet header</p>
    <p>Switch</p>
  </div>
  <div class="page">
    <p>PathDump in a nutshell</p>
    <p>Captures each and every packet header  Stores and updates flow-level statistics  Exposes API for debugging purposes</p>
    <p>Enables slicing-and-dicing of statistics across flows (potentially stored at various end-hosts)</p>
    <p>Aggregator</p>
    <p>Server</p>
    <p>Before forwarding a packet, checks a condition  If met, embeds its ID into packet header</p>
    <p>Switch</p>
  </div>
  <div class="page">
    <p>PathDump: Three challenges</p>
  </div>
  <div class="page">
    <p>PathDump: Three challenges Coverage</p>
    <p>How to support large class of debugging functionalities?</p>
    <p>Debug more than 85% of reported network problems</p>
  </div>
  <div class="page">
    <p>PathDump: Three challenges Coverage</p>
    <p>How to support large class of debugging functionalities?</p>
    <p>Debug more than 85% of reported network problems</p>
    <p>Packets not reaching destination How to handle packet drops and loops caused by network problems?</p>
    <p>Exploit load balancing (e.g. ECMP) and identify spurious packet drops</p>
  </div>
  <div class="page">
    <p>PathDump: Three challenges Coverage</p>
    <p>How to support large class of debugging functionalities?</p>
    <p>Debug more than 85% of reported network problems</p>
    <p>Packets not reaching destination How to handle packet drops and loops caused by network problems?</p>
    <p>Exploit load balancing (e.g. ECMP) and identify spurious packet drops</p>
    <p>Data plane/end-host resources Switch resources and packet header space are limited PathDump should not hog user apps resources at end-host</p>
    <p>CherryPick: Per-packet path tracing technique 10s of flow rules at switch Two VLAN tags in the packet 25% of one core / 100MB of mem. at end-host</p>
  </div>
  <div class="page">
    <p>PathDump architecture</p>
    <p>DstSrc</p>
    <p>User packet</p>
    <p>ToR</p>
    <p>Aggregate</p>
    <p>Core</p>
  </div>
  <div class="page">
    <p>PathDump architecture</p>
    <p>DstSrc</p>
    <p>ToR</p>
    <p>Aggregate</p>
    <p>Core</p>
  </div>
  <div class="page">
    <p>PathDump architecture</p>
    <p>DstSrc</p>
    <p>Packet header space limitation</p>
    <p>Cherrypick [SOSR15] for current deployments</p>
  </div>
  <div class="page">
    <p>PathDump architecture</p>
    <p>DstSrc</p>
    <p>User packet 1</p>
    <p>ToR</p>
    <p>Aggregate</p>
    <p>Core</p>
  </div>
  <div class="page">
    <p>PathDump architecture</p>
    <p>DstSrc</p>
    <p>User packet</p>
    <p>Picked link</p>
    <p>Only one shortest path from Core to Dst</p>
    <p>ToR</p>
    <p>Aggregate</p>
    <p>Core</p>
  </div>
  <div class="page">
    <p>PathDump architecture</p>
    <p>DstSrc</p>
    <p>ToR</p>
    <p>Aggregate</p>
    <p>Core</p>
  </div>
  <div class="page">
    <p>PathDump architecture</p>
    <p>DstSrc</p>
    <p>More details in our paper</p>
    <p>72-port Fat-tree : 90K servers  62-port VL2 : 20K servers</p>
  </div>
  <div class="page">
    <p>PathDump architecture 2. End-host captures packet path and updates flow-level statistics</p>
    <p>DstSrc</p>
  </div>
  <div class="page">
    <p>PathDump architecture 2. End-host captures packet path and updates flow-level statistics</p>
    <p>Dst</p>
  </div>
  <div class="page">
    <p>PathDump architecture</p>
    <p>Dst</p>
  </div>
  <div class="page">
    <p>PathDump architecture</p>
    <p>Dst</p>
    <p>Packet stream OVS</p>
    <p>Trajectory Information Base</p>
    <p>TIB</p>
    <p>&lt; 5 tuple flow id &gt;</p>
    <p>path: set of switch ids</p>
    <p>start, end, #pkts, #bytes</p>
    <p>Store Agent</p>
  </div>
  <div class="page">
    <p>Congested link Traffic matrix</p>
    <p>Load imbalance</p>
    <p>PathDump architecture 3. Aggregator runs debugging applications</p>
    <p>Aggregator</p>
    <p>Server</p>
    <p>Event-driven debugging applications</p>
    <p>On-demand debugging applications</p>
    <p>On-demand vs. Event-driven</p>
  </div>
  <div class="page">
    <p>Congested link Traffic matrix</p>
    <p>Load imbalance</p>
    <p>PathDump architecture 3. Aggregator runs debugging applications</p>
    <p>Aggregator</p>
    <p>Server</p>
    <p>Event-driven debugging applications</p>
    <p>Request/Reply</p>
    <p>On-demand debugging applications</p>
    <p>On-demand vs. Event-driven</p>
  </div>
  <div class="page">
    <p>PathDump architecture 3. Aggregator runs debugging applications</p>
    <p>Aggregator</p>
    <p>Server</p>
    <p>Event-driven debugging applications</p>
    <p>Path conformance Black hole Silent packet drop</p>
    <p>Congested linkLoad imbalance</p>
    <p>On-demand vs. Event-driven</p>
  </div>
  <div class="page">
    <p>PathDump architecture 3. Aggregator runs debugging applications</p>
    <p>Aggregator</p>
    <p>Server</p>
    <p>Event-driven debugging applications</p>
    <p>post alarm</p>
    <p>Path conformance Black hole Silent packet drop</p>
    <p>Congested linkLoad imbalance</p>
    <p>On-demand vs. Event-driven</p>
  </div>
  <div class="page">
    <p>PathDump interface</p>
    <p>Aggregator APIs: Install(), execute() and uninstall()</p>
    <p>A small set of simple APIs enables a variety of debugging applications</p>
    <p>Other end-host APIs: getCount(), getPoorTCPFlows(), Alarm(), etc.</p>
    <p>A</p>
    <p>B</p>
    <p>C</p>
    <p>Aggregator</p>
  </div>
  <div class="page">
    <p>PathDump interface</p>
    <p>Aggregator APIs: Install(), execute() and uninstall()</p>
    <p>A small set of simple APIs enables a variety of debugging applications</p>
    <p>Other end-host APIs: getCount(), getPoorTCPFlows(), Alarm(), etc.</p>
    <p>A</p>
    <p>B</p>
    <p>C</p>
    <p>Flow 1</p>
    <p>Aggregator</p>
  </div>
  <div class="page">
    <p>PathDump interface</p>
    <p>Aggregator APIs: Install(), execute() and uninstall()</p>
    <p>A small set of simple APIs enables a variety of debugging applications</p>
    <p>Other end-host APIs: getCount(), getPoorTCPFlows(), Alarm(), etc.</p>
    <p>A</p>
    <p>B</p>
    <p>C</p>
    <p>Flow 1</p>
    <p>Flow 2</p>
    <p>Aggregator</p>
  </div>
  <div class="page">
    <p>PathDump interface</p>
    <p>Aggregator APIs: Install(), execute() and uninstall()</p>
    <p>A small set of simple APIs enables a variety of debugging applications</p>
    <p>Other end-host APIs: getCount(), getPoorTCPFlows(), Alarm(), etc.</p>
    <p>A</p>
    <p>B</p>
    <p>C</p>
    <p>Flow 1</p>
    <p>Flow 2</p>
    <p>Aggregator</p>
    <p>Flow 1 A-B-C 5 pkts Flow 2 A-C 2 pkts</p>
  </div>
  <div class="page">
    <p>PathDump interface</p>
    <p>Aggregator APIs: Install(), execute() and uninstall()</p>
    <p>A small set of simple APIs enables a variety of debugging applications</p>
    <p>Other end-host APIs: getCount(), getPoorTCPFlows(), Alarm(), etc.</p>
    <p>A</p>
    <p>B</p>
    <p>C</p>
    <p>Flow 1</p>
    <p>Flow 2</p>
    <p>Aggregator</p>
    <p>Flow 1 A-B-C 5 pkts Flow 2 A-C 2 pkts</p>
    <p>getFlows (B-C) Flow 1</p>
  </div>
  <div class="page">
    <p>PathDump interface</p>
    <p>Aggregator APIs: Install(), execute() and uninstall()</p>
    <p>A small set of simple APIs enables a variety of debugging applications</p>
    <p>Other end-host APIs: getCount(), getPoorTCPFlows(), Alarm(), etc.</p>
    <p>A</p>
    <p>B</p>
    <p>C</p>
    <p>Flow 1</p>
    <p>Flow 2</p>
    <p>Aggregator</p>
    <p>Flow 1 A-B-C 5 pkts Flow 2 A-C 2 pkts</p>
    <p>getPaths (Flow 2) A-C</p>
  </div>
  <div class="page">
    <p>Example 1: Path conformance</p>
  </div>
  <div class="page">
    <p>Dst</p>
    <p>Example 1: Path conformance Check if actual forwarding path != network policy</p>
    <p>May occur due to switch faults or network state change</p>
    <p>Policy: Packet must avoid switch 4 4</p>
  </div>
  <div class="page">
    <p>Dst</p>
    <p>Example 1: Path conformance Check if actual forwarding path != network policy</p>
    <p>May occur due to switch faults or network state change</p>
    <p>Policy: Packet must avoid switch 4</p>
    <p>Actual Path: 1  4  3</p>
    <p>violation 4</p>
  </div>
  <div class="page">
    <p>Dst</p>
    <p>Example 1: Path conformance Check if actual forwarding path != network policy</p>
    <p>May occur due to switch faults or network state change</p>
    <p>Policy: Packet must avoid switch 4</p>
    <p>Actual Path: 1  4  3</p>
    <p>violation 4</p>
    <p># Given flowID, paths, switchID</p>
  </div>
  <div class="page">
    <p>Example 2: Silent random packet drop diagnosis</p>
    <p>A B</p>
    <p>C</p>
    <p>D</p>
    <p>Aggregator</p>
    <p>No packet drop hint  Software/Hardware bug</p>
  </div>
  <div class="page">
    <p>Example 2: Silent random packet drop diagnosis</p>
    <p>A B</p>
    <p>C</p>
    <p>D</p>
    <p>Aggregator 1. Install(query)</p>
    <p>getPoorTCPFlows()</p>
    <p>getPoorTCPFlows()</p>
  </div>
  <div class="page">
    <p>Example 2: Silent random packet drop diagnosis</p>
    <p>A B</p>
    <p>C</p>
    <p>D</p>
    <p>A - B - C</p>
    <p>A - B - D</p>
    <p>Aggregator</p>
    <p>getPoorTCPFlows()</p>
    <p>getPoorTCPFlows()</p>
  </div>
  <div class="page">
    <p>Example 2: Silent random packet drop diagnosis</p>
    <p>A B</p>
    <p>C</p>
    <p>D</p>
    <p>A - B - C</p>
    <p>A - B - D</p>
    <p>Aggregator</p>
    <p>getPoorTCPFlows()</p>
    <p>getPoorTCPFlows()</p>
  </div>
  <div class="page">
    <p>Example 2: Silent random packet drop diagnosis</p>
    <p>A B</p>
    <p>C</p>
    <p>D</p>
    <p>A - B - C</p>
    <p>A - B - D</p>
    <p>Aggregator</p>
    <p>getPoorTCPFlows()</p>
    <p>getPoorTCPFlows()</p>
  </div>
  <div class="page">
    <p>Example 2: Silent random packet drop diagnosis</p>
    <p>A B</p>
    <p>C</p>
    <p>D</p>
    <p>A - B - C</p>
    <p>A - B - D</p>
    <p>Aggregator</p>
    <p>getPoorTCPFlows()</p>
    <p>getPoorTCPFlows()</p>
  </div>
  <div class="page">
    <p>Example 2: Silent random packet drop diagnosis</p>
    <p>A B</p>
    <p>C</p>
    <p>D</p>
    <p>A - B - C</p>
    <p>A - B - D</p>
    <p>Aggregator</p>
    <p>getPoorTCPFlows()</p>
    <p>getPoorTCPFlows()</p>
  </div>
  <div class="page">
    <p>Example 2: Silent random packet drop diagnosis</p>
    <p>Network Load = 70%</p>
    <p>Lab setup  4-ary fat-tree topology  Web-traffic model</p>
  </div>
  <div class="page">
    <p>Example 2: Silent random packet drop diagnosis</p>
    <p>Network Load = 70%</p>
    <p>Number of faulty interfaces</p>
    <p>Lab setup  4-ary fat-tree topology  Web-traffic model</p>
  </div>
  <div class="page">
    <p>Example 2: Silent random packet drop diagnosis</p>
    <p>Network Load = 70%</p>
    <p>Lab setup  4-ary fat-tree topology  Web-traffic model</p>
  </div>
  <div class="page">
    <p>Example 2: Silent random packet drop diagnosis</p>
    <p>Network Load = 70%</p>
    <p>Time taken to reach 100% accuracy</p>
    <p>Lab setup  4-ary fat-tree topology  Web-traffic model</p>
  </div>
  <div class="page">
    <p>Example 2: Silent random packet drop diagnosis</p>
    <p>Network Load = 70%</p>
    <p>Lab setup  4-ary fat-tree topology  Web-traffic model</p>
    <p>As loss rate increases, algorithm takes less time to obtain 100% accuracy</p>
  </div>
  <div class="page">
    <p>Example 3: Load imbalance diagnosis</p>
    <p>Link 1</p>
    <p>Link 2</p>
    <p>A</p>
    <p>Aggregator</p>
  </div>
  <div class="page">
    <p>Example 3: Load imbalance diagnosis</p>
    <p>Link 1</p>
    <p>Link 2</p>
    <p>A</p>
    <p>If flow &gt;= 1 MB  Link 1</p>
    <p>Aggregator</p>
  </div>
  <div class="page">
    <p>Example 3: Load imbalance diagnosis</p>
    <p>If flow &lt; 1 MB  Link 2</p>
    <p>Link 1</p>
    <p>Link 2</p>
    <p>A</p>
    <p>If flow &gt;= 1 MB  Link 1</p>
    <p>Aggregator</p>
  </div>
  <div class="page">
    <p>Example 3: Load imbalance diagnosis</p>
    <p>If flow &lt; 1 MB  Link 2</p>
    <p>Link 1</p>
    <p>Link 2</p>
    <p>A</p>
    <p>If flow &gt;= 1 MB  Link 1</p>
    <p>Aggregator Execute (query)</p>
  </div>
  <div class="page">
    <p>Example 3: Load imbalance diagnosis</p>
    <p>If flow &lt; 1 MB  Link 2</p>
    <p>Link 1</p>
    <p>Link 2</p>
    <p>A</p>
    <p>If flow &gt;= 1 MB  Link 1</p>
    <p>Aggregator</p>
    <p>Local flow size distribution</p>
  </div>
  <div class="page">
    <p>Example 3: Load imbalance diagnosis</p>
    <p>If flow &lt; 1 MB  Link 2</p>
    <p>Link 1</p>
    <p>Link 2</p>
    <p>A</p>
    <p>If flow &gt;= 1 MB  Link 1</p>
    <p>Aggregator</p>
  </div>
  <div class="page">
    <p>Example 3: Load imbalance diagnosis</p>
    <p>If flow &lt; 1 MB  Link 2</p>
    <p>Link 1</p>
    <p>Link 2</p>
    <p>A</p>
    <p>If flow &gt;= 1 MB  Link 1</p>
    <p>Aggregator</p>
  </div>
  <div class="page">
    <p>Other debugging applications  Real-time routing loop detection</p>
    <p>Blackhole diagnosis</p>
    <p>TCP performance anomaly diagnosis  TCP incast and outcast</p>
    <p>Traffic measurement  Traffic matrix, heavy-hitter detection, etc.</p>
    <p>More details in our paper</p>
  </div>
  <div class="page">
    <p>Packet processing overhead at end-host</p>
  </div>
  <div class="page">
    <p>Packet processing overhead at end-host</p>
    <p>Minimal packet processing overhead atop Open vSwitch</p>
    <p>Maximum of 4% throughput loss</p>
  </div>
  <div class="page">
    <p>More details (In the paper)  Distributed query mechanism</p>
    <p>Supported network debugging problems</p>
    <p>Implementation details</p>
    <p>Evaluation over real testbed(s)</p>
  </div>
  <div class="page">
    <p>Conclusion  DCNs are complex; and their debuggers are even more complex  Design and implement PathDump, a simple debugger  Keeps network switches simple</p>
    <p>No complex operations in network switches  Executes debugging queries in a distributed manner  Consumes small amount of data plane and end-host resources  Debugs a large class of network problems</p>
    <p>https://github.com/PathDump</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Datacenter networks are complex(*remove slide)</p>
    <p>Complexity due to need for  High availability  High performance</p>
    <p>--source: The Gigaspaces blog --source: TechRepublic.com</p>
  </div>
  <div class="page">
    <p>PathDump interface</p>
    <p>Host API getFlows(linkID, timeRange) getPaths(flowID, linkID, timeRange) getCount(flow, timeRange) getDuration(flow, timeRange) getPoorTCPFlows(threshold) Alarm(flowID, reason, paths)</p>
    <p>Aggregator API execute(list&lt;hostID&gt;, query) install(list&lt;hostID&gt;, query, Period) uninstall(list&lt;hostID&gt;, query)</p>
    <p>Write a query using host API</p>
    <p>Simple 9 APIs enables a variety of debugging applications</p>
    <p>Install(), execute() or uninstall() with Aggregator API</p>
  </div>
  <div class="page">
    <p>Query processing</p>
    <p>Controller</p>
    <p>Direct query</p>
    <p>Controller</p>
    <p>Multi level query</p>
  </div>
  <div class="page">
    <p>Query processing Flow size distribution query</p>
  </div>
  <div class="page">
    <p>Query processing Flow size distribution queryDirect query is better when</p>
    <p>#servers are small</p>
  </div>
  <div class="page">
    <p>Query processing Flow size distribution query</p>
    <p>Multi-level query is better when #servers are large</p>
  </div>
  <div class="page">
    <p>Query processing Flow size distribution query Top-k flows query</p>
  </div>
  <div class="page">
    <p>Query processing Flow size distribution query Top-k flows query</p>
    <p>If aggregation reduces response data, multi-query is more efficient</p>
  </div>
</Presentation>
