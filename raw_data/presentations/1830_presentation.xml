<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Towards a Leaner Geodistributed Cloud Infrastructure</p>
    <p>Iyswarya Narayanan, Anand Sivasubramaniam,</p>
    <p>Bhuvan Urgaonkar</p>
    <p>PENN STATE</p>
    <p>Aman Kansal, Sriram Govindan</p>
    <p>Microsoft</p>
  </div>
  <div class="page">
    <p>Geo-distribution</p>
    <p>Essential for  Low latency</p>
    <p>High availability</p>
    <p>What are the capacity implications?</p>
  </div>
  <div class="page">
    <p>Model: Client Demand</p>
    <p>Proportional to population of location</p>
    <p>Varies with time of day  Each location has its own time zone</p>
    <p>New York demand</p>
    <p>Oregon demand</p>
  </div>
  <div class="page">
    <p>Capacity Implications of Latency</p>
    <p>Geo-distributed =&gt; closer to clients</p>
    <p>Each data center must meet its local peak</p>
    <p>Single large DC MS MS CDN</p>
    <p>N O</p>
    <p>R M</p>
    <p>A LI</p>
    <p>Z E</p>
    <p>D S</p>
    <p>P A</p>
    <p>R E</p>
    <p>TIME OF DAY (HR)</p>
    <p>Excess capacity to reduce latency</p>
  </div>
  <div class="page">
    <p>Capacity Implications of Availability</p>
    <p>Assuming uniform capacity, with 6 data centers:</p>
    <p>Capacity without spare for availability</p>
    <p>Each DC is 16.6% of total.</p>
    <p>Total spare is 20% of initial total (since spare at failed DC unavailable)</p>
    <p>Capacity with spare for availability</p>
  </div>
  <div class="page">
    <p>Question</p>
    <p>What is the total capacity required and how much of it is placed at each data center</p>
    <p>To meet latency constraints, AND</p>
    <p>To allow for one DC to fail (at any time, including at peak)</p>
    <p>(Server capacity considered, state replication assumed taken care already for geo-distributed operation even without failure.)</p>
  </div>
  <div class="page">
    <p>Optimization Formulation</p>
    <p>Pre-failure latency (L): same as that achieved by any client if routing to nearest DC  100-th percentile of nearest DC mapping, could use other percentiles</p>
    <p>Post-failure latency (L): L &gt;=L</p>
    <p>Assume: service-time same at each DC (nearest or otherwise)  Operating below queue build-up point. Capacity vs. queuing delay trade-off</p>
    <p>not considered</p>
    <p>Capacity at DC-j is cj  Fraction of load from client location i directed to DC j when DC</p>
    <p>k has failed is denoted fijk  K=0 corresponds to no DC failed</p>
  </div>
  <div class="page">
    <p>Minimize the sum of DC capacities</p>
    <p>Subject to:</p>
    <p>Demand at i-th client served by DCs within latency limit (for all i, t). Possibly different latency before and after failure.</p>
    <p>Capacity at j-th DC is the maximum of capacities needed at different time slots, including after failure.</p>
  </div>
  <div class="page">
    <p>Results Experiments using demand measured for one Microsoft cluster, and 6 of MS DC locations within US. L= L</p>
    <p>Availability (against 1 failure) for free!</p>
    <p>Single DC capacity</p>
    <p>Nearest DC (no failure)</p>
    <p>Optimized (support 1 failure)</p>
    <p>Without time-of-day</p>
    <p>Optimized (no failure)</p>
    <p>TOTAL CAPACITY</p>
  </div>
  <div class="page">
    <p>Washington Iowa Texas Illinois Virginia Wyoming</p>
    <p>Nearest DC (no failure) Optimized (1 failure)</p>
    <p>The largest DC capacity is split differently after optimization.</p>
  </div>
  <div class="page">
    <p>Latency Caveat</p>
    <p>Even though we enforced a latency bound, the latency distribution changes  Since clients can be</p>
    <p>allocated anywhere within latency limit, they may not be allocated to nearest DC</p>
    <p>Latency</p>
    <p>Latency CDF</p>
    <p>Nearest DC Optimal - no failure Optimal, 1 failure</p>
  </div>
  <div class="page">
    <p>Results Experiments using demand measured for one Microsoft cluster, and 6 of MS DC locations within US. L= L</p>
    <p>Excess capacity for high availability</p>
    <p>Single DC capacity</p>
    <p>Nearest DC (no failure)</p>
    <p>Optimized (support 1 failure)</p>
    <p>Without time-of-day</p>
    <p>Optimized (no failure)</p>
    <p>TOTAL CAPACITY</p>
  </div>
  <div class="page">
    <p>Use nearest DC before failure</p>
    <p>Before failure, nearest DC  After failure, select</p>
    <p>backup within a latency bound.</p>
    <p>Best possible latency before failure</p>
    <p>C a</p>
    <p>p a</p>
    <p>ci ty</p>
    <p>p ro</p>
    <p>v is</p>
    <p>io n</p>
    <p>e d</p>
    <p>w rt</p>
    <p>si n</p>
    <p>g le</p>
    <p>la</p>
    <p>rg e</p>
    <p>D C</p>
    <p>% Pre-failure Capacity Additional capacity</p>
  </div>
  <div class="page">
    <p>Design Implications: Routing</p>
    <p>Geo-load balancing  No longer routing to nearest DC  After failure, not all traffic from</p>
    <p>failed DC routed to same backup</p>
    <p>Client regions served by nonfailed DCs also affected</p>
    <p>Load balancer  Be aware of app layer capacity</p>
    <p>allocation or app layer response time?  Unlike anycast, cannot route by</p>
    <p>network layer latency 0</p>
    <p>D E</p>
    <p>M A</p>
    <p>N D</p>
    <p>A LL</p>
    <p>O C</p>
    <p>A T</p>
    <p>IO N</p>
    <p>( %</p>
    <p>) TIME SLOTS</p>
    <p>IA VA</p>
    <p>E.g. Penn. clients allocation to DC changes with time of day among Iowa and Virginia DCs</p>
  </div>
  <div class="page">
    <p>Design Implications: State Replication</p>
    <p>Replicas be placed where clients will be routed to after failure</p>
    <p>Option 1: Replicate at nearest DC  Low latency overhead for strong consistency</p>
    <p>May have to migrate data after failure, nearest-DC may not have network bandwidth when taking on failed DCs traffic</p>
    <p>Option 2: Replicate at the DC where client will be routed to  Higher latency penalty during non-failure operation for stronger consistency</p>
    <p>Decision depends on client location, and may differ even for same client location</p>
    <p>May change with time of day: multiple replicas?</p>
  </div>
  <div class="page">
    <p>Design Implications: Cloud API</p>
    <p>Existing clouds  Tenant apps can request capacity in any DC</p>
    <p>Clouds do not guarantee capacity will be available</p>
    <p>For high availability  Arbitrary capacity at next-nearest DC after a DC failure is not going to be</p>
    <p>available</p>
    <p>Availability should be part of cloud API:  infrastructure provisions spare capacity per app requests (lower price than active</p>
    <p>capacity, monetized on the spot market)</p>
    <p>app expects capacity at right locations</p>
  </div>
  <div class="page">
    <p>Related Works</p>
    <p>Capacity planning, facility location [Goiri et al ICDCS11, others]  Showed that more DCs, where each is lower availability (lower cost) but extra</p>
    <p>geo-spares, better  Computed optimal capacity placements  Did not account for time of day variations, compare to nearest DC routing</p>
    <p>Server power management [Mathew et al, Infocom12]  Turns servers off to adapt capacity across multiple DCs within latency bound</p>
    <p>to current demand  Do not compute actual capacity to be built</p>
    <p>Prior works require hard numbers for availability (e.g. 5-9s for power)  Not available for software issues, router misconfiguration outside of cloud</p>
    <p>operators network, operator errors, non-power equipment failures</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>Geo-distribution affects capacity planning</p>
    <p>Jointly optimize availability and latency to reduce capacity</p>
    <p>Actual spare depends on latency objectives before and after failures</p>
    <p>High-availability for free compared to naively routing to nearest DC</p>
    <p>Software design may change due to geo-capacity optimization</p>
    <p>Request routing, state replication, cloud API, auto-scaling impacted</p>
  </div>
</Presentation>
