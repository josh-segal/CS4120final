<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>October 4, 2011</p>
    <p>Recon: Verifying File System</p>
    <p>Consistency at Runtime</p>
    <p>Daniel Fryer, Jack (Kuei) Sun,</p>
    <p>Rahat Mahmood, TingHao Cheng, Shaun Benjamin, Angela Demke Brown and Ashvin Goel</p>
    <p>University of Toronto</p>
  </div>
  <div class="page">
    <p>Metadata Integrity is Crucial</p>
    <p>You dont know what</p>
    <p>youve got til its gone</p>
    <p>D D a</p>
    <p>D D D</p>
    <p>D D t</p>
    <p>D D a</p>
    <p>Kernel</p>
    <p>Block Layer</p>
    <p>M M M</p>
    <p>Storage</p>
    <p>File System</p>
  </div>
  <div class="page">
    <p>File Systems Have Bugs</p>
    <p>Why cant existing solutions handle this problem?</p>
    <p>Bugs in Linux Ext3 File System Closed</p>
    <p>panic/ext3 fs corruption with RHEL4-U6-re20070927.0 2007-11</p>
    <p>Re: [2.6.27] filesystem (ext3) corruption (access beyond end) 2008-06</p>
    <p>linux-2.6: ext3 filesystem corruption 2008-09</p>
    <p>linux-image-2.6.29-2-amd64: occasional ext3 filesystem</p>
    <p>corruption</p>
    <p>ENOSPC during fsstress leads to filesystem corruption on ext2,</p>
    <p>ext3, and ext4</p>
    <p>ext3: Fix fs corruption when make_indexed_dir() fails 2011-06</p>
    <p>Data corruption: resume from hibernate always ends up with</p>
    <p>EXT3 fs errors</p>
    <p>Not yet</p>
  </div>
  <div class="page">
    <p>Solutions</p>
    <p>None of these protect against bugs in file systems</p>
    <p>Existing approaches assume file systems are correct</p>
    <p>Kernel</p>
    <p>Block Layer</p>
    <p>Storage</p>
    <p>File System</p>
    <p>RAID?</p>
    <p>Checksums? Journals?</p>
  </div>
  <div class="page">
    <p>Offline Checking</p>
    <p>Check consistency offline, e.g., fsck</p>
    <p>Consistency properties necessary for correctness</p>
    <p>FS1: No double</p>
    <p>allocation FS2: Refcount-based</p>
    <p>sharing</p>
    <p>D D</p>
    <p>M M</p>
    <p>D Ref: 2</p>
    <p>M M metadata</p>
    <p>data</p>
  </div>
  <div class="page">
    <p>Problems with Offline Checking</p>
    <p>Slow, getting slower with larger disks</p>
    <p>Requires taking file system offline</p>
    <p>After the fact, repair is error prone</p>
    <p>M M</p>
    <p>D</p>
    <p>metadata</p>
    <p>data</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Problem</p>
    <p>Metadata can be corrupted by bugs and existing</p>
    <p>techniques are inadequate</p>
    <p>Our Solution: Recon</p>
    <p>a system for protecting metadata from bugs</p>
    <p>Key idea</p>
    <p>Runtime consistency checking</p>
    <p>Design</p>
    <p>Evaluation</p>
  </div>
  <div class="page">
    <p>Runtime Consistency Checking</p>
    <p>Ensure every update results in a consistent file</p>
    <p>system</p>
    <p>Makes repair unnecessary!</p>
    <p>What happens in DRAM stays in DRAM</p>
    <p>BUT</p>
    <p>Consistency properties are global</p>
    <p>Global properties require full scan</p>
    <p>We cant run fsck at every write</p>
  </div>
  <div class="page">
    <p>Consistency Invariants</p>
    <p>We transform global consistency properties to</p>
    <p>fast, local consistency invariants</p>
    <p>Assume initial consistent state</p>
    <p>New file system is clean</p>
    <p>Use checksums/redundancy to handle errors below FS</p>
    <p>At runtime, check only what is changing</p>
    <p>Do so before changes become persistent</p>
    <p>Resulting new state is consistent</p>
  </div>
  <div class="page">
    <p>size</p>
    <p>Example: Block Allocation in Ext3</p>
    <p>Ext3 maintains a block bitmap  every allocated</p>
    <p>block is marked in the bitmap</p>
    <p>Block Bitmap</p>
    <p>Block 7</p>
    <p>inode</p>
    <p>time</p>
    <p>Block 8</p>
    <p>Updated Block 8 8 U</p>
    <p>p d a te</p>
    <p>d B</p>
    <p>lo c k</p>
  </div>
  <div class="page">
    <p>Example: Block Allocation in Ext3</p>
    <p>Consistency Invariant</p>
    <p>Invariant fails if either update is missing</p>
    <p>Should not mark allocated without setting block pointer</p>
    <p>Should not set block pointer without marking allocated</p>
    <p>Can any consistency property be transformed?</p>
    <p>File systems should maintain consistency efficiently</p>
    <p>Bitmap bit X flip</p>
    <p>from 0 to 1</p>
    <p>Block pointer</p>
    <p>set to X</p>
  </div>
  <div class="page">
    <p>When to Check Invariants</p>
    <p>Invariants involve changes to multiple blocks</p>
    <p>When should they be consistent?</p>
    <p>Transactions are used for crash consistency</p>
    <p>Consistency can be checked at transaction</p>
    <p>boundaries</p>
    <p>Transaction</p>
    <p>Must check transaction</p>
    <p>just before commit block</p>
    <p>reaches disk</p>
    <p>Memory</p>
    <p>Disk</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Problem</p>
    <p>Metadata corruption cause by bugs</p>
    <p>Solution</p>
    <p>Recon</p>
    <p>Key idea</p>
    <p>Runtime checking</p>
    <p>Design</p>
    <p>Metadata interpretation</p>
    <p>Logical change generation</p>
    <p>Evaluation</p>
  </div>
  <div class="page">
    <p>The Recon Design</p>
    <p>Recon</p>
    <p>File System</p>
    <p>Ye Olde Disk</p>
    <p>Block Layer</p>
    <p>Metadata</p>
    <p>Write Cache</p>
    <p>Metadata</p>
    <p>Read Cache</p>
    <p>Ext3_Recon</p>
    <p>Btrfs_Recon</p>
    <p>FS Recon Interface</p>
    <p>Metadata interpretation</p>
    <p>Logical change generation</p>
  </div>
  <div class="page">
    <p>Metadata Interpretation</p>
    <p>To check invariants, we need to determine the</p>
    <p>type of a block on a read or write</p>
    <p>Take advantage of tree structure of metadata</p>
    <p>Superblock is the root of the tree</p>
    <p>Parents are read before children</p>
    <p>For example, inode is read before indirect blocks</p>
    <p>We see the pointer to the block before the block, and</p>
    <p>The pointer within the parent determines the type of</p>
    <p>the child block</p>
  </div>
  <div class="page">
    <p>Logical Change Generation</p>
    <p>Invariants are expressed in terms of logical</p>
    <p>changes to structures, e.g., bitmaps, pointers</p>
    <p>Recon generates these changes based on</p>
    <p>Block types</p>
    <p>Comparing the blocks in the write and read cache</p>
    <p>Logical changes to metadata structures are</p>
    <p>represented as a set of change records:</p>
    <p>Bitmap bit X flip</p>
    <p>from 0 to 1</p>
    <p>Block pointer</p>
    <p>set to X</p>
    <p>[type, id, field, old, new]</p>
  </div>
  <div class="page">
    <p>Checking with Change Records</p>
    <p>type id field oldval newval</p>
    <p>inode 12 blockptr[1] 0 501</p>
    <p>inode 12 i_size 4096 8192</p>
    <p>inode 12 i_blocks 8 16</p>
    <p>Bitmap 501 -- 0 1</p>
    <p>BGD 0 free_blocks 1500 1499</p>
    <p>Transaction appends a new block to inode 12</p>
    <p>Bitmap bit X flip</p>
    <p>from 0 to 1</p>
    <p>Block pointer</p>
    <p>set to X</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Problem</p>
    <p>Metadata corruption cause by bugs</p>
    <p>Solution</p>
    <p>Recon</p>
    <p>Key idea</p>
    <p>Runtime checking</p>
    <p>Design</p>
    <p>Evaluation</p>
    <p>Complexity</p>
    <p>Corruption detection</p>
    <p>Performance overhead</p>
  </div>
  <div class="page">
    <p>Complexity</p>
    <p>Much simpler than FS code</p>
    <p>Only need to verify result of file system operations</p>
    <p>Each invariant can be checked independently</p>
    <p>Code divided into three sections</p>
    <p>Generic Recon framework: 1.5 kLOC</p>
    <p>Ext3 metadata interpretation: 1.5kLOC</p>
    <p>31 Ext3 invariants: 800 LOC</p>
  </div>
  <div class="page">
    <p>Corruption Detection</p>
    <p>C o r ru</p>
    <p>p ti</p>
    <p>o n s</p>
    <p>C a u g h t</p>
    <p>Detected by both e2fsck only Recon only</p>
    <p>inode (stat)</p>
    <p>inode (blk ptr)</p>
    <p>inode (others)</p>
    <p>dir</p>
    <p>bgd</p>
    <p>bbm</p>
    <p>ibm</p>
    <p>random</p>
    <p>Recon matches e2fsck</p>
  </div>
  <div class="page">
    <p>Performance Evaluation</p>
    <p>Used Linux port of Suns FileBench</p>
    <p>Used 5 different emulated workloads</p>
    <p>webserver, webproxy, varmail, fileserver, ms_nfs</p>
    <p>ms_nfs configured to match metadata</p>
    <p>characteristics from Microsoft study (FAST11)</p>
    <p>3 GHz dual core Xeon CPUs, 2 GB RAM</p>
    <p>1 TB ext3 file system</p>
  </div>
  <div class="page">
    <p>Performance Evaluation</p>
    <p>webserver webproxy varmail fileserver ms_nfs</p>
    <p>Cache Size = 128MB</p>
    <p>For reasonable cache sizes, performance impact is modest</p>
  </div>
  <div class="page">
    <p>Handling Violations</p>
    <p>Several options</p>
    <p>Prevent all writes, remount read-only</p>
    <p>Preserves correctness</p>
    <p>Reduces availability</p>
    <p>Take snapshot of filesystem and continue</p>
    <p>Minimal availability impact, snapshot is correct</p>
    <p>Requires repair afterwards</p>
    <p>Micro-reboot file system or kernel</p>
    <p>Transparent to applications</p>
    <p>Overcomes transient failures</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>All consistency properties of fsck can be</p>
    <p>enforced on updates without full disk scan</p>
    <p>Checking can be done outside the file system,</p>
    <p>entirely at the block layer</p>
    <p>Preventing corruption from being committed is a</p>
    <p>huge win over after-the-fact repair!</p>
  </div>
  <div class="page">
    <p>Thanks!</p>
    <p>To our anonymous reviewers</p>
    <p>To our shepherd, Junfeng Yang</p>
    <p>To the Systems Software Reading Group @ U of T</p>
    <p>For their many insightful comments &amp; suggestions!</p>
    <p>To Vivek Lakshmanan</p>
    <p>For early insights that helped start the project!</p>
    <p>This work was supported by NSERC through the Discovery</p>
    <p>Grants program</p>
  </div>
</Presentation>
