<?xml version="1.0" ?>
<Presentation>
  <div class="page"/>
  <div class="page">
    <p>Persistent Memcached: Bringing Legacy Code to Byte-Addressable Persistent Memory</p>
    <p>Virendra J. Marathe, Margo Seltzer, Steve Byan, Tim Harris Penumbra Research Group</p>
  </div>
  <div class="page">
    <p>Copyright  2017 Oracle and/or its affiliates. All rights reserved. 3</p>
    <p>Safe Harbor Statement</p>
    <p>The following is intended to provide some insight into a line of research in Oracle Labs. It is intended for information purposes only, and may not be incorporated into any contract. It is not a commitment to deliver any material, code, or functionality, and should not be relied upon in making purchasing decisions. The development, release, and timing of any features or functionality described in connection with any Oracle product or service remains at the sole discretion of Oracle. Any views expressed in this presentation are my own and do not necessarily reflect the views of Oracle.</p>
  </div>
  <div class="page">
    <p>Copyright  2017 Oracle and/or its affiliates. All rights reserved. 4</p>
    <p>Outline 1</p>
    <p>Persistent Memory and the System Stack</p>
    <p>Making Memcached Persistent: lessons learned</p>
    <p>Takeaways: this is harder than you think!</p>
  </div>
  <div class="page">
    <p>Copyright  2017 Oracle and/or its affiliates. All rights reserved. 5</p>
    <p>Persistent Memory (pmem): What is it?</p>
    <p>Looks like DRAM</p>
    <p>Byte addressable</p>
    <p>DIMMs across the memory bus</p>
    <p>Cacheable</p>
    <p>Low latency: 1000X lower than NAND flash (3D XPoint), projected to approach and eventually eclipse DRAM performance (e.g. STT-MRAM, Carbon-NanoTubes, etc.)</p>
    <p>Acts like Storage: State persists across restart events</p>
    <p>Dense: projections better than DRAM (~10X, 3D Xpoint)</p>
    <p>Cost expected to be between DRAM and NAND flash</p>
    <p>Intel 3D XPoint Marketing Images</p>
  </div>
  <div class="page">
    <p>Copyright  2017 Oracle and/or its affiliates. All rights reserved.</p>
    <p>Integrating Persistent Memory in the Software Stack</p>
    <p>Persistent Memory DIMM</p>
    <p>Kernel SpaceNVDIMM Driver</p>
    <p>File System MMU</p>
    <p>Mappings PM Aware File System</p>
    <p>User Space</p>
    <p>Application Application</p>
    <p>Standard File API</p>
    <p>Standard File API</p>
    <p>mmap()</p>
  </div>
  <div class="page">
    <p>Copyright  2017 Oracle and/or its affiliates. All rights reserved.</p>
    <p>Use cases for persistent memory  Faster block storage device</p>
    <p>No changes to most of the software stack; gains are limited</p>
    <p>Bigger, slower volatile memory</p>
    <p>New tier in the memory hierarchy</p>
    <p>Leverage byte addressability and fast persistence (most disruptive change; our focus)  Make persistence fast via byte addressable data representation and access</p>
    <p>Make application restart/warmup fast</p>
  </div>
  <div class="page">
    <p>Copyright  2017 Oracle and/or its affiliates. All rights reserved.</p>
    <p>Use cases for persistent memory  Faster block storage device</p>
    <p>No changes to most of the software stack; gains are limited</p>
    <p>Bigger, slower volatile memory</p>
    <p>New tier in the memory hierarchy</p>
    <p>Leverage byte addressability and fast persistence (most disruptive change; our focus)  Make persistence fast via byte addressable data representation and access</p>
    <p>Make application restart/warmup fast</p>
    <p>Memcached fits here</p>
  </div>
  <div class="page">
    <p>Copyright  2017 Oracle and/or its affiliates. All rights reserved.</p>
    <p>Use cases for persistent memory  Faster block storage device</p>
    <p>No changes to most of the software stack; gains are limited</p>
    <p>Bigger, slower volatile memory</p>
    <p>New tier in the memory hierarchy</p>
    <p>Leverage byte addressability and fast persistence (most disruptive change; our focus)  Make persistence fast via byte addressable data representation and access</p>
    <p>Make application restart/warmup fast</p>
    <p>Memcached fits here large caches, warmup can take hours</p>
  </div>
  <div class="page">
    <p>Copyright  2017 Oracle and/or its affiliates. All rights reserved. 10</p>
    <p>Outline 1</p>
    <p>Persistent Memory and the System Stack</p>
    <p>Making Memcached Persistent: Lessons Learned</p>
    <p>Early decision: Dont change Memcacheds high level architecture</p>
    <p>Takeaways: this is harder than you think!</p>
  </div>
  <div class="page">
    <p>Copyright  2017 Oracle and/or its affiliates. All rights reserved. 11</p>
    <p>(10 lessons in the paper)</p>
    <p>Lessons Learned (on memcached v1.4.25) This is harder than you might think!</p>
  </div>
  <div class="page">
    <p>Copyright  2017 Oracle and/or its affiliates. All rights reserved. 12</p>
    <p>Lesson I: Mods can be contagious</p>
    <p>Central Hash Table</p>
  </div>
  <div class="page">
    <p>Copyright  2017 Oracle and/or its affiliates. All rights reserved. 13</p>
    <p>Lesson I: Mods can be contagious</p>
    <p>Central Hash Table</p>
    <p>LRU Cache</p>
  </div>
  <div class="page">
    <p>Copyright  2017 Oracle and/or its affiliates. All rights reserved. 14</p>
    <p>Lesson I: Mods can be contagious</p>
    <p>Central Hash Table</p>
    <p>LRU Cache</p>
    <p>Slab Allocator</p>
  </div>
  <div class="page">
    <p>Copyright  2017 Oracle and/or its affiliates. All rights reserved. 15</p>
    <p>Lesson I: Mods can be contagious</p>
    <p>Central Hash Table</p>
    <p>LRU Cache</p>
    <p>Slab Allocator</p>
    <p>Client Request Mgmt State Machine</p>
  </div>
  <div class="page">
    <p>Copyright  2017 Oracle and/or its affiliates. All rights reserved. 16</p>
    <p>Lesson I: Mods can be contagious</p>
    <p>Central Hash Table</p>
    <p>LRU Cache</p>
    <p>Slab Allocator</p>
    <p>Client Request Mgmt State Machine</p>
    <p>Background Maintenance Threads</p>
  </div>
  <div class="page">
    <p>Copyright  2017 Oracle and/or its affiliates. All rights reserved.</p>
    <p>Tightly Coupled Subsystems</p>
    <p>Lesson I: Mods can be contagious</p>
    <p>Central Hash Table</p>
    <p>LRU Cache</p>
    <p>Slab Allocator</p>
    <p>Client Request Mgmt State Machine</p>
    <p>Background Maintenance Threads</p>
  </div>
  <div class="page">
    <p>Copyright  2017 Oracle and/or its affiliates. All rights reserved. 18</p>
    <p>Several (tightly coupled) modules</p>
    <p>Central hash table (can grow, doesnt shrink)</p>
    <p>LRU cache</p>
    <p>Client session management state machine</p>
    <p>Own allocator</p>
    <p>Helper threads: LRU crawler, hash table resizer, allocator slab manager</p>
    <p>Data structures intertwined</p>
    <p>Needed to make changes all over the application</p>
    <p>Lesson I: Mods can be contagious</p>
  </div>
  <div class="page">
    <p>Copyright  2017 Oracle and/or its affiliates. All rights reserved.</p>
    <p>Complex code paths; e.g. Put(K,V)</p>
    <p>Change hash table</p>
    <p>Allocate new &lt;K,V&gt; pair; touches slab allocator</p>
    <p>Update LRU cache</p>
    <p>Lesson II: Failure-Atomic Transactions can be crucial</p>
    <p>Hash Table update</p>
  </div>
  <div class="page">
    <p>Copyright  2017 Oracle and/or its affiliates. All rights reserved.</p>
    <p>Complex code paths; e.g. Put(K,V)</p>
    <p>Change hash table</p>
    <p>Allocate new &lt;K,V&gt; pair; touches slab allocator</p>
    <p>Update LRU cache</p>
    <p>Lesson II: Failure-Atomic Transactions can be crucial</p>
    <p>Slab Allocator update</p>
    <p>Hash Table update</p>
  </div>
  <div class="page">
    <p>Copyright  2017 Oracle and/or its affiliates. All rights reserved.</p>
    <p>Complex code paths; e.g. Put(K,V)</p>
    <p>Change hash table</p>
    <p>Allocate new &lt;K,V&gt; pair; touches slab allocator</p>
    <p>Update LRU cache</p>
    <p>Lesson II: Failure-Atomic Transactions can be crucial</p>
    <p>LRU Cache update</p>
    <p>Hash Table update</p>
    <p>Slab Allocator update</p>
  </div>
  <div class="page">
    <p>Copyright  2017 Oracle and/or its affiliates. All rights reserved.</p>
    <p>Complex code paths; e.g. Put(K,V)</p>
    <p>Change hash table</p>
    <p>Allocate new &lt;K,V&gt; pair; touches slab allocator</p>
    <p>Update LRU cache</p>
    <p>Lesson II: Failure-Atomic Transactions can be crucial</p>
    <p>All updates need to be mutually</p>
    <p>consistent across failures</p>
    <p>Hash Table update</p>
    <p>LRU Cache update</p>
    <p>Slab Allocator update</p>
  </div>
  <div class="page">
    <p>Copyright  2017 Oracle and/or its affiliates. All rights reserved.</p>
    <p>Complex code paths; e.g. Put(K,V)</p>
    <p>Change hash table</p>
    <p>Allocate new &lt;K,V&gt; pair; touches slab allocator</p>
    <p>Update LRU cache</p>
    <p>Lesson II: Failure-Atomic Transactions can be crucial</p>
    <p>Failure-Atomic Transaction</p>
    <p>for Put(K,V)</p>
    <p>Hash Table update</p>
    <p>LRU Cache update</p>
    <p>Slab Allocator update</p>
  </div>
  <div class="page">
    <p>Copyright  2017 Oracle and/or its affiliates. All rights reserved.</p>
    <p>Ended up using in-house transactional runtime</p>
    <p>Original 15K LOC, we ended up adding 7K LOC</p>
    <p>Most of the added LOCs come from hand instrumenting transactional loads/stores to persistent memory</p>
    <p>Language support will help a lot!</p>
    <p>Lesson II: Failure-Atomic Transactions can be crucial</p>
  </div>
  <div class="page">
    <p>Copyright  2017 Oracle and/or its affiliates. All rights reserved. 25</p>
    <p>Lesson III: Persistent and nonpersistent objects interact in unexpected ways</p>
    <p>Persistent Objects Nonpersistent Objects</p>
  </div>
  <div class="page">
    <p>Copyright  2017 Oracle and/or its affiliates. All rights reserved.</p>
    <p>Nonpersistent Objects</p>
    <p>Lesson III: Persistent and nonpersistent objects interact in unexpected ways</p>
    <p>Persistent Objects</p>
  </div>
  <div class="page">
    <p>Copyright  2017 Oracle and/or its affiliates. All rights reserved.</p>
    <p>Nonpersistent Objects</p>
    <p>Lesson III: Persistent and nonpersistent objects interact in unexpected ways</p>
    <p>Persistent Objects</p>
  </div>
  <div class="page">
    <p>Copyright  2017 Oracle and/or its affiliates. All rights reserved.</p>
    <p>Persistent and nonpersistent objects can have dependencies</p>
    <p>In Memcached</p>
    <p>References from nonpersistent client-session objects to key-value pairs tracked using reference counts</p>
    <p>Deleted objects with non-zero reference counts could be lost on failure</p>
    <p>Solution: Add a persistent pending reclamations list, and use it during recovery to avoid memory leaks.</p>
    <p>Lesson III: Persistent and nonpersistent objects interact in unexpected ways</p>
  </div>
  <div class="page">
    <p>Copyright  2017 Oracle and/or its affiliates. All rights reserved.</p>
    <p>Locking: Let the application use its locks within transactions</p>
    <p>But lock release should be deferred to transaction completion (the runtime implicitly releases the acquired locks after the transaction completes)</p>
    <p>Can inflate critical sections by a lot  introduces deadlocks, scalability problems</p>
    <p>Each LRU list has a lock</p>
    <p>Memory allocation/free: memcached has its own allocator which uses its own (single) lock</p>
    <p>Solutions: Make locks reentrant; postpone execution of some critical sections to end of transaction (e.g. hash table size update); approximate LRU</p>
    <p>LRU cache, allocator lock still scalability problems</p>
    <p>Lesson IV: Critical Section Headaches</p>
  </div>
  <div class="page">
    <p>Copyright  2017 Oracle and/or its affiliates. All rights reserved. 30</p>
    <p>Memcached evaluation: YCSB workload generator Experiments conducted on Intels Software Emulation Platform for Persistent Memory</p>
    <p>Emulator Configuration</p>
    <p>Assume CLWB  Latency: 300 nanosecs  Pbarrier: 100 nanosecs</p>
  </div>
  <div class="page">
    <p>Copyright  2017 Oracle and/or its affiliates. All rights reserved. 31</p>
    <p>Outline 1</p>
    <p>Persistent Memory and the System Stack</p>
    <p>Making Memcached Persistent: lessons learned</p>
    <p>Takeaways: this is harder than you think!</p>
  </div>
  <div class="page">
    <p>Copyright  2017 Oracle and/or its affiliates. All rights reserved.</p>
    <p>Fundamental issues  Main decision to not change memcacheds architecture was problematic</p>
    <p>Modules too tightly coupled, leading to extraneous complexity and overheads</p>
    <p>So  Either may need to radically rehash the architecture of such systems</p>
    <p>Or, just build one from scratch</p>
    <p>Or, trade instantaneous warmup for simplicity and better common case performance</p>
    <p>New programming abstractions need to be explored/researched</p>
    <p>Story may be very different for other applications</p>
    <p>Takeaways This can be hard, and the returns may not be worth it!</p>
  </div>
  <div class="page">
    <p>Copyright  2017 Oracle and/or its affiliates. All rights reserved. 33</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Copyright  2017 Oracle and/or its affiliates. All rights reserved. 35</p>
    <p>Lesson I: Mods can be contagious</p>
    <p>Central Hash Table</p>
    <p>LRU Cache</p>
    <p>Slab Allocator</p>
    <p>Client Request Mgmt State Machine</p>
    <p>Background Maintenance Threads</p>
    <p>Tightly Coupled Subsystems</p>
  </div>
</Presentation>
