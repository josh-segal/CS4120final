<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>An Experience Report on Extrac/ng and Viewing Memory Events Via</p>
    <p>Wireshark</p>
    <p>Sarah Laing, Michael E. Locasto, John Aycock University of Calgary</p>
    <p>USENIX WOOT 2014</p>
  </div>
  <div class="page">
    <p>Challenge: Memory Event Analysis</p>
    <p>Cage: a kernel-level mechanism for monitoring process memory events and expor/ng them via a network interface</p>
    <p>Neat twist: display in Wireshark</p>
    <p>Example Uses: find private key in SSH, overwrite data, overwrite instruc/ons, find all buffers in a program,</p>
  </div>
  <div class="page"/>
  <div class="page"/>
  <div class="page"/>
  <div class="page">
    <p>Challenge: Memory Event Analysis</p>
    <p>Cage: a kernel-level mechanism for monitoring (+ modifying) process memory events and expor/ng them via a network interface</p>
    <p>Neat twist: display in Wireshark</p>
    <p>Example Uses: find private key in SSH, overwrite data, overwrite instruc/ons, find all buffers in a program,</p>
  </div>
  <div class="page">
    <p>Underlying Insight / Why Wireshark? BPF: pre-filtering</p>
    <p>Wireshark: post-filtering</p>
    <p>Treat a stream of memory events like a packet trace, and then benefit from the types of filtering languages that exist for such streams.</p>
  </div>
  <div class="page">
    <p>Building a memory trapping system seems conceptually easy, but is non-trivial and difficult if you want to do seamlessly; see Figures 5 and 6 in the paper for valida/on across mul/ple architectures, OS distros, and VMs</p>
    <p>Only raises our level of respect for prior work on memory intercep/on techniques</p>
  </div>
  <div class="page">
    <p>Cage Implementa/on</p>
    <p>Modifica/ons to the Linux 3.9.4 kernel</p>
    <p>create mode 100644 linux-3.9.4/arch/x86/mm/cage.c create mode 100644 linux-3.9.4/chmem/Makefile create mode 100644 linux-3.9.4/chmem/chmem.c create mode 100644 linux-3.9.4/include/linux/cage.h!</p>
  </div>
  <div class="page">
    <p>CPU/MMU Page/PTE Bits Page/Debug! Fault Handler</p>
    <p>BPF Net Device Fetch</p>
    <p>Page Fault</p>
    <p>PTE Entry</p>
    <p>Fetch PTE Bits</p>
    <p>PTE Entry Filter</p>
    <p>Result</p>
    <p>Emit Packet</p>
    <p>To User</p>
    <p>SpaceFix PTE (UnCage)</p>
    <p>Restart Instruction</p>
    <p>Single Step Trap</p>
    <p>Set PTE (ReCage)</p>
    <p>Continue Execution</p>
    <p>Page Fault Handler</p>
    <p>Debug Fault Handler</p>
  </div>
  <div class="page">
    <p>BPF Filters (In-kernel, pre-event)</p>
    <p>Temporal Filter: Watch for a specific address range. Emit a packet every n-th event. Rate limi/ng.</p>
    <p>Data Overwri/ng Filter: Watch for a specific address and replace the data at that address with a user specified value.</p>
    <p>Instruc/on Overwri/ng Filter: Watch for a specific RIP/EIP and replace the instruc/on at that address with a user specified instruc/on.</p>
    <p>Buffer Viewing Filter: Watch for the crea/on of a specific buffer and emit all packets that touch that buffer. (SSH example)</p>
    <p>Buffer Finding Filter: Find all buffers in a program by watching for sequen/al accesses to memory loca/ons.</p>
  </div>
  <div class="page">
    <p>FETCH/EXECUTE</p>
  </div>
  <div class="page"/>
  <div class="page"/>
  <div class="page"/>
  <div class="page"/>
  <div class="page"/>
  <div class="page"/>
  <div class="page"/>
  <div class="page">
    <p>EXECUTE/READ</p>
  </div>
  <div class="page"/>
  <div class="page"/>
  <div class="page">
    <p>Memory Analysis Based on a Simple Language</p>
    <p>Friend asks me: What do I go WOOT about?</p>
    <p>Answer: viewing non-network stuff in Wireshark is kind of cool, but our efforts to design, build, and use Cage are part of a broader argument [6] that offensive does not mean unprincipled or ad hoc.</p>
  </div>
  <div class="page">
    <p>Takeaway Message</p>
    <p>it is precisely the variety of crea/ve abuses of exis/ng memory management circuitry that argue for a more sane and powerful hardware support for memory introspec/on on commodity architectures.</p>
  </div>
  <div class="page">
    <p>Thanks!</p>
    <p>The reviewers</p>
    <p>Our shepherd, Julien</p>
    <p>Research is supported by Canadas NSERC Discovery Grant program</p>
    <p>hnps://github.com/selaing/Cage</p>
  </div>
</Presentation>
