<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Emmett Witchel</p>
    <p>Krste Asanovi</p>
    <p>MIT Lab for Computer Science</p>
    <p>Hardware Works, Software Doesnt: Enforcing Modularity</p>
    <p>with Mondriaan Memory Protection</p>
  </div>
  <div class="page">
    <p>HW Works, SW Doesnt  Negative</p>
    <p>Hardware has a bozo cousin named Software.</p>
    <p>Hardware Software</p>
  </div>
  <div class="page">
    <p>Hardware cooperates with software. Each has their strengths.</p>
    <p>Software Hardware</p>
    <p>HW Works, SW Doesnt  Positive</p>
  </div>
  <div class="page">
    <p>Hardware cooperates with software. Each has their strengths.</p>
    <p>HW Works, SW Doesnt  Positive</p>
    <p>Hardware Software</p>
  </div>
  <div class="page">
    <p>Software is Growing, Becoming Modular</p>
    <p>Software complexity growing quickly.  Faster processors, larger memories allow more</p>
    <p>complicated software.  Linux kernel growing 200,000 lines/yr.</p>
    <p>Debian Linux supports 253 different kernel modules.  A module is code + data, possibly loaded at</p>
    <p>runtime, to provide functionality.</p>
    <p>Modules have narrow interfaces.  Not usually as narrow as an API, some internals</p>
    <p>are exposed.  Enforced by programming convention.</p>
    <p>Code</p>
    <p>Data</p>
  </div>
  <div class="page">
    <p>Modular Software is Failing</p>
    <p>Big, complex software fails too often.  Device drivers are a big problem.</p>
    <p>Big, complex software is hard to maintain.  Dependencies are tough to track.</p>
  </div>
  <div class="page">
    <p>Safe Languages (More SW) Not Answer</p>
    <p>Safe languages are slow and use lots of memory.  Restricts implementation to a single language.  Ignores a large installed base of code.  Can require analysis that is difficult to scale.</p>
    <p>Safe language compiler and run-time system is hard to verify.  Especially as more performance is demanded</p>
    <p>from safe language.</p>
    <p>Doing it all in SW as dumb as doing it all in HW.</p>
  </div>
  <div class="page">
    <p>Both Hardware and Software Needed</p>
    <p>Modules have narrow, but irregular interfaces.  HW should enforce SW convention without</p>
    <p>getting in the way.</p>
    <p>Module execution is finely interleaved.  Protection hardware should be efficient</p>
    <p>and support a general programming model.</p>
    <p>New hardware is needed to support software to make fast, robust systems.</p>
  </div>
  <div class="page">
    <p>Current Hardware Broken</p>
    <p>Page based memory protection.  A reasonable design point, but we need more.</p>
    <p>Capabilities have problems.  Revocation difficult [System/38, M-machine].  Tagged pointers complicate machine.  Requires new instructions.  Different protection values for different</p>
    <p>domains via shared capability is hard.</p>
    <p>x86 segment facilities are broken capabilities.  HW that does not nourish SW.</p>
  </div>
  <div class="page">
    <p>Mondriaan Memory Protection</p>
    <p>Efficient word-level protection HW.  &lt;0.7% space overhead, &lt;0.6% extra memory</p>
    <p>references for coarse-grained use.  &lt;9% space overhead, &lt;8% extra memory references</p>
    <p>for fine-grained use. [Witchel ASPLOS 02]</p>
    <p>Compatible with conventional ISAs and binaries.  HW can change, if its backwards compatible.  Lets put those transistors to good use.</p>
    <p>[Engler 01] studied linux kernel bugs.  Page protection can catch 45% (e.g., null).  Fine-grained protection could catch 64% (e.g.,</p>
    <p>range checking).</p>
  </div>
  <div class="page">
    <p>MMP In Action</p>
    <p>Kernel ide.o</p>
    <p>Kernel loader establishes initial permission regions Kernel calls mprotect(buf0, RO, 2); mprotect(buf1, RW, 2);</p>
    <p>Memory Addresses</p>
    <p>mprotect(printk, EX, 2);</p>
    <p>ide.o calls mprotect(req_q, RW, 1); mprotect(mod_init, EX, 1);</p>
    <p>nfs.o ipip.o 3 4</p>
    <p>No perm</p>
    <p>Read-write</p>
    <p>Read-only</p>
    <p>Execute-read</p>
    <p>Multiple protection domains</p>
  </div>
  <div class="page">
    <p>How Much Work to Use MMP?</p>
    <p>Do nothing.  Your application will still work.</p>
    <p>Change the malloc library (any dynamic lib).  You can add electric fences.</p>
    <p>Change the dynamic loader.  You can have module isolation.</p>
    <p>Add vmware/dynamo-like runtime system.  Many possibilities for fine-grained sharing.</p>
    <p>Change the program source.  You can have and control fine-grained sharing.</p>
  </div>
  <div class="page">
    <p>Trusted Computing Base of MMP</p>
    <p>MMP hardware checks every load, store and instruction fetch.</p>
    <p>MMP memory supervisor (software) writes the permissions tables read by the hardware.  Provides additional functionality and</p>
    <p>semantic guarantees.</p>
    <p>MMP TCB smaller than safe language.</p>
  </div>
  <div class="page">
    <p>Memory Supervisor</p>
    <p>One protection domain (PD) to rule them all.  Writes MMP tables for other domains.  Handles memory protection faults.  Provides basic memory management for domain</p>
    <p>creation.  Enforces some memory use policies.</p>
    <p>Memory supervisor is part of kernel.  User/kernel distinction still exists.</p>
    <p>M M</p>
    <p>P S</p>
    <p>up e</p>
    <p>rv is</p>
    <p>or</p>
    <p>C or</p>
    <p>e K</p>
    <p>er ne</p>
    <p>l</p>
    <p>M em</p>
    <p>or y</p>
    <p>A llo</p>
    <p>ca to</p>
    <p>rs</p>
    <p>K er</p>
    <p>ne l</p>
    <p>M od</p>
    <p>ul es</p>
    <p>Kernel Protection Domains (PD-IDs)</p>
  </div>
  <div class="page">
    <p>Memory Supervisor API</p>
    <p>Create and destroy protection domains.  mmp_alloc_PD(user/kernel);  mmp_free_PD(recursive);</p>
    <p>Allocate and free memory.  mmp_alloc(n_bytes);  mmp_free(ptr);</p>
    <p>Set permissions on memory (global PD-ID supported).  mmp_set_perm(ptr, len, perm, PD-ID);</p>
    <p>Control memory ownership.  mmp_mem_chown(ptr, length, PD-ID);</p>
  </div>
  <div class="page">
    <p>Managing Data</p>
    <p>Heap data is owned by PD.  Permissions managed with supervisor API.  E.g., mmp_set_perm(&amp;buf, 256, readonly, consumer_PD-ID);</p>
    <p>Code is owned by PD.  Execute permission used within a PD.  Call gates are used for cross-domain calls,</p>
    <p>which cross protection domain boundaries.</p>
    <p>Stack is difficult to do fast.</p>
  </div>
  <div class="page">
    <p>Call and Return Gates</p>
    <p>Procedure entry is call gate, exit is return gate.</p>
    <p>Call gate data stored in permissions table.</p>
    <p>Return gate returns &amp; restores original PD.</p>
    <p>call mi</p>
    <p>ret</p>
    <p>mi:</p>
    <p>PD K PD M Addr Space</p>
    <p>PD M</p>
    <p>R</p>
    <p>mov</p>
    <p>add</p>
    <p>jne</p>
    <p>xor</p>
    <p>push</p>
  </div>
  <div class="page">
    <p>Architectural Support for Gates</p>
    <p>Architecture uses protected storage, the cross-domain call stack, to implement gates.</p>
    <p>On call gate execution:  Save current PD-ID and return address on cross</p>
    <p>domain call stack.  Transfer control to PD specified in the gate.</p>
    <p>On return gate execution:  Check instruction RA = RA on top of cross-domain</p>
    <p>call stack, and fault if they are different.  Transfer control to RA in PD specified by popping</p>
    <p>cross-domain call stack.</p>
    <p>PD M</p>
    <p>R</p>
  </div>
  <div class="page">
    <p>Are Gate Semantics Useful?</p>
    <p>Returns are paired with calls.  Works for callbacks.  Works for closures.  Works for most implementations of</p>
    <p>exceptions (not setjmp/longjmp).</p>
    <p>Maybe need a call-only gate.  To support continuations and more exception</p>
    <p>models.  Allow cross-domain call stack to be paged</p>
    <p>out.</p>
  </div>
  <div class="page">
    <p>Stack Headache</p>
    <p>Threads cross PDs, and multiple threads allowed in one PD.  So no single PD can own the stack.</p>
    <p>MMP for stack permissions work, but it is slow.  Can copy stack parameters on entry/exit.  Can add more hardware to make it</p>
    <p>efficient.  Can exploit stack usage properties.</p>
    <p>How prevalent are writes to stack parameters?</p>
  </div>
  <div class="page">
    <p>Finding Modularity in the OS</p>
    <p>Let MMP enforce module boundaries already present in software.</p>
    <p>Defining proper trust relations between modules is a huge task.  Not one I want to do by hand.</p>
    <p>Can we get 90% of the benefit from 5% of the effort?</p>
  </div>
  <div class="page">
    <p>Using Symbol Information</p>
    <p>Symbol import/export gives information about trust relations.  Module that imports printk symbol will need</p>
    <p>permission to call printk.</p>
    <p>Data imports are trickier than code imports.  E.g., code can follow a pointer out of a</p>
    <p>structure imported via symbol name.  Do array names name the array or just one</p>
    <p>entry?</p>
  </div>
  <div class="page">
    <p>Measuring OS Modularity</p>
    <p>Is module interface narrow?  Yes, according to symbol information.  Measured the static data dependence</p>
    <p>between modules and the kernel.</p>
    <p>How often are module boundaries crossed?  Often, at least in the boot.  Measured dynamic calling pattern.</p>
  </div>
  <div class="page">
    <p>Size of Kernel Modules</p>
    <p>Modules are small and mostly code.</p>
    <p>b in f m t_</p>
    <p>f lo p p y</p>
    <p>id e</p>
    <p>id e m o d</p>
    <p>id e</p>
    <p>is a p n p</p>
    <p>lo c k d n e</p>
    <p>n f s</p>
    <p>rt c</p>
    <p>s u n rp</p>
    <p>c</p>
    <p>u n ix</p>
    <p>S iz e i n K</p>
    <p>B Bss (RW)</p>
    <p>Data (RW)</p>
    <p>Read-only</p>
    <p>Execute</p>
  </div>
  <div class="page">
    <p>Number of Imported Call Gates</p>
    <p>4,031 named entry points in kernel.</p>
    <p>bin fm t_ mi sc flo pp y</p>
    <p>ide -d isk</p>
    <p>ide -m od</p>
    <p>ide -p ro be -m od</p>
    <p>isa -p np loc kd ne nf</p>
    <p>s rtc su nr pc un</p>
    <p>ix</p>
  </div>
  <div class="page">
    <p>Size of Imported Data (KB)</p>
    <p>Kernel has 551KB of static data.  Block devices import arrays of structures.</p>
    <p>bin fm t_ mi sc flo pp y</p>
    <p>ide -d isk</p>
    <p>ide -m od</p>
    <p>ide -p ro be -m od</p>
    <p>isa -p np loc kd ne nf</p>
    <p>s rtc su nr pc un</p>
    <p>ix</p>
  </div>
  <div class="page">
    <p>Measuring Cross-Domain Calls</p>
    <p>Instrumented bochs simulator to gather data about module interactions in Debian Linux 2.4.19.  Enforce module boundaries: deal with module</p>
    <p>loader, deal with module version strings in text section, etc.</p>
    <p>284,822 protection domain switches in the billion instruction boot.  3,353 instructions between domain switch.  97.5% switches to IDE disc driver.</p>
    <p>This is fine-grained interleaving.</p>
  </div>
  <div class="page">
    <p>Additional Applications</p>
    <p>Once you have fine-grained protection, exciting possibilities for system design become possible.</p>
    <p>Eliminate memory copying from syscalls.  Provide specialized kernel entry points.  Enable optimistic compiler optimizations.  Implement C++ const.</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Hardware should help make software more reliable.  Without getting in the way of the software</p>
    <p>programming model.</p>
    <p>MMP enables fast, robust, and extensible software systems.  Previously it was pick two out of three.</p>
  </div>
</Presentation>
