<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Haven</p>
    <p>Andrew Baumann Marcus Peinado Galen Hunt</p>
    <p>Microsoft Research</p>
    <p>Shielding applications from an untrusted cloud</p>
  </div>
  <div class="page">
    <p>Application</p>
    <p>Operating system</p>
    <p>In the old days</p>
  </div>
  <div class="page">
    <p>Application</p>
    <p>Operating system</p>
    <p>In the old days</p>
  </div>
  <div class="page">
    <p>Application</p>
    <p>Operating system</p>
    <p>In the old days</p>
  </div>
  <div class="page">
    <p>Trust?</p>
    <p>In the cloud</p>
    <p>Cloud platform</p>
    <p>Application</p>
    <p>Operating system</p>
  </div>
  <div class="page">
    <p>Trust?</p>
    <p>In the cloud</p>
    <p>Cloud platform</p>
    <p>Application</p>
    <p>Operating system</p>
  </div>
  <div class="page">
    <p>Trust?</p>
    <p>In the cloud</p>
    <p>Cloud platform</p>
    <p>Application</p>
    <p>Operating system</p>
  </div>
  <div class="page">
    <p>Trust?</p>
    <p>In the cloud</p>
    <p>Cloud platform</p>
    <p>Application</p>
    <p>Operating system</p>
  </div>
  <div class="page">
    <p>Our goals for Haven</p>
    <p>Secure, private execution</p>
    <p>of unmodified applications</p>
    <p>(bugs and all)</p>
    <p>in an untrusted cloud</p>
    <p>on commodity hardware</p>
    <p>(Intel SGX)</p>
  </div>
  <div class="page">
    <p>Can you trust the cloud?</p>
    <p>Huge trusted computing base  Privileged software</p>
    <p>Hypervisor, firmware, ...</p>
    <p>Management stack</p>
    <p>Staff Sysadmins, cleaners, security,</p>
    <p>Law enforcement</p>
    <p>Hierarchical security model  Observe or modify any data</p>
    <p>Even if encrypted on disk / net</p>
    <p>Application</p>
    <p>Hypervisor</p>
    <p>Operating system</p>
    <p>Firmware/bootloader</p>
    <p>People</p>
    <p>Management tools</p>
    <p>Tr u</p>
    <p>st</p>
  </div>
  <div class="page">
    <p>Current approaches</p>
  </div>
  <div class="page">
    <p>Hardware Security Modules</p>
    <p>Dedicated crypto hardware  Expensive</p>
    <p>Limited set of APIs  Key storage</p>
    <p>Crypto operations</p>
    <p>Protects the crown jewels, not general-purpose</p>
  </div>
  <div class="page">
    <p>Trusted hypervisors</p>
    <p>Use a small, secure, hypervisor</p>
    <p>Ensures basic security, such as strong isolation</p>
    <p>Problem #1: system administrators</p>
    <p>Problem #2: physical attacks (e.g. memory snooping)</p>
    <p>Problem #3: tampering with hypervisor</p>
  </div>
  <div class="page">
    <p>Remote attestation</p>
    <p>Trusted hardware: TPM chip</p>
    <p>Basic idea:  Signed measurement (hash) of privileged software</p>
    <p>Remote user checks measurement</p>
    <p>Incorrect attestation  compromised software</p>
    <p>Problem: what is the expected measurement?  Cloud provider applies patches and updates</p>
    <p>Must trust provider for current hash value</p>
  </div>
  <div class="page">
    <p>What do we really want?</p>
  </div>
  <div class="page">
    <p>Secure colo provides:  Power and cooling  Network access</p>
  </div>
  <div class="page">
    <p>Secure colo provides:  Power and cooling  Network access</p>
    <p>Raw resources</p>
    <p>Untrusted I/O</p>
  </div>
  <div class="page">
    <p>Shielded execution</p>
    <p>Protection of specific program from rest of system  cf. protection, isolation, sandboxing, etc.</p>
    <p>New term (older concept)</p>
    <p>Program unmodified, nave to threats</p>
    <p>Confidentiality and integrity of:  The program</p>
    <p>Its intermediate state, control flow, etc.</p>
    <p>Input and output may be encrypted</p>
    <p>Host may deny service, cannot alter behaviour</p>
  </div>
  <div class="page">
    <p>Threat model</p>
    <p>We assume a malicious cloud provider  Convenient proxy for real threats</p>
    <p>All the providers software is malicious  Hypervisor, firmware, management stack, etc.</p>
    <p>All hardware besides the CPU is untrusted  DMA attacks, DRAM snooping, cold boot</p>
    <p>We do not prevent:  Denial-of-service (dont pay!)  Side-channel attacks</p>
  </div>
  <div class="page">
    <p>Intel SGX</p>
    <p>Application (untrusted)</p>
    <p>Enclave</p>
    <p>Operating system (untrusted)</p>
  </div>
  <div class="page">
    <p>Intel SGX</p>
    <p>Hardware isolation for an enclave  New instructions to</p>
    <p>establish, protect</p>
    <p>Call gate to enter</p>
    <p>Remote attestation Application (untrusted)</p>
    <p>Enclave</p>
    <p>Secret Data</p>
    <p>EnclaveEntry: mov fs:[Tcs],rbx mov fs:[CSSA],eax cmp eax, 0 jne ExceptionEntry mov r10,fs:[ResAdr] cmp r10,0 je @F jmp r10</p>
    <p>@@:mov rcx, r8 mov rdx, r9 mov r8, rbx</p>
    <p>Operating system (untrusted)</p>
  </div>
  <div class="page">
    <p>Enclave RAM</p>
    <p>Physical memory</p>
    <p>SGX at the hardware level Virtual address space</p>
    <p>EPC</p>
    <p>Encrypted &amp; integrity-protected</p>
    <p>Page table mappings checked</p>
    <p>Code/data</p>
  </div>
  <div class="page">
    <p>Enclave RAM</p>
    <p>Physical memory</p>
    <p>SGX at the hardware level Virtual address space</p>
    <p>EPC</p>
    <p>Encrypted &amp; integrity-protected</p>
    <p>Page table mappings checked</p>
    <p>Code/data</p>
    <p>Also:  Protected register file  Secure control transfer</p>
  </div>
  <div class="page">
    <p>Enclave</p>
    <p>Operating system</p>
    <p>Design challenge: Iago attacks</p>
    <p>Application System calls</p>
  </div>
  <div class="page">
    <p>Iago attacks</p>
    <p>malloc() returns pointer to users stack</p>
    <p>Scheduler allows two threads to race in a mutex</p>
    <p>System has 379,283 cores and -42MB of RAM</p>
    <p>read() fails with EROFS</p>
    <p>Our approach:  Dont try to check them all</p>
    <p>Admit OS into trusted computing base</p>
  </div>
  <div class="page">
    <p>Picoprocess (protects host from guest)</p>
    <p>Untrusted interface</p>
    <p>Enclave (protects guest from host)</p>
    <p>Windows 8 API</p>
    <p>Drawbridge ABI</p>
    <p>Drawbridge ABI &amp; SGX priv ops</p>
    <p>Windows kernel</p>
    <p>Untrusted runtime</p>
    <p>Application</p>
    <p>Shield module</p>
    <p>Drawbridge host SGX driver M u</p>
    <p>tu a</p>
    <p>l d</p>
    <p>is tr</p>
    <p>u st Shields LibOS from Iago attacks</p>
    <p>Includes typical kernel functionality</p>
    <p>Scheduling, VM, file system</p>
    <p>Untrusted interface with host</p>
    <p>Haven</p>
    <p>Unmodified binaries</p>
    <p>Library OS (Drawbridge)</p>
    <p>Subset of Windows, enlightened to run in-process</p>
  </div>
  <div class="page">
    <p>Untrusted interface</p>
    <p>Host/guest mutual distrust</p>
    <p>Policy/mechanism with a twist  Virtual resource policy in guest</p>
    <p>Virtual address allocation, threads</p>
    <p>Physical resource policy in host Physical pages, VCPUs</p>
    <p>~20 calls, restricted semantics</p>
    <p>Picoprocess</p>
    <p>Untrusted interface</p>
    <p>Enclave</p>
    <p>Windows 8 API</p>
    <p>Drawbridge ABI</p>
    <p>Drawbridge ABI &amp; SGX priv ops</p>
    <p>Untrusted runtime</p>
    <p>Application</p>
    <p>Library OS</p>
    <p>Shield module</p>
    <p>Windows kernel</p>
    <p>Drawbridge host SGX driver</p>
  </div>
  <div class="page">
    <p>Picoprocess</p>
    <p>Shield module</p>
    <p>Memory allocator, region manager  Host commits/protects specific pages  No address allocation</p>
    <p>Private file system  Encrypted, integrity-protected VHD</p>
    <p>Scheduler Dont trust host to schedule threads</p>
    <p>Exception handler  Emulation of some instructions</p>
    <p>Sanity-check of untrusted inputs  Anything wrong  panic!</p>
    <p>23 KLoC (half in file system)</p>
    <p>Untrusted interface</p>
    <p>Enclave</p>
    <p>Windows 8 API</p>
    <p>Drawbridge ABI</p>
    <p>Drawbridge ABI &amp; SGX priv ops</p>
    <p>Untrusted runtime</p>
    <p>Application</p>
    <p>Library OS</p>
    <p>Windows kernel</p>
    <p>Drawbridge host SGX driver</p>
    <p>Shield module</p>
  </div>
  <div class="page">
    <p>RDTSC/RDTSCP needed, for practicality and performance</p>
    <p>SGX limitations</p>
  </div>
  <div class="page">
    <p>RDTSC/RDTSCP needed, for practicality and performance</p>
    <p>Good news! These are fixed in SGX v2</p>
    <p>SGX limitations</p>
  </div>
  <div class="page">
    <p>Performance evaluation</p>
    <p>Implemented and tested using SGX emulator  Thanks, Intel!</p>
    <p>Problem: no SGX implementation yet</p>
    <p>Solution: model for SGX performance</p>
    <p>Enclave crossings  Dynamic memory allocation, protection</p>
  </div>
  <div class="page">
    <p>Performance summary</p>
    <p>Depends on model parameters, details in paper</p>
    <p>35% (Apache)  65% (SQL Server) slowdown vs. VM  Assumes 10k+ cycles SGX instructions, 30% slower RAM</p>
    <p>and you dont have to trust the cloud!</p>
  </div>
  <div class="page">
    <p>Whats next?</p>
    <p>Rollback of persistent storage  Requires more hardware or communication</p>
    <p>Untrusted time  Network time sync, RDTSC</p>
    <p>Cloud management  Suspend / resume / migrate applications</p>
    <p>Encrypted VLANs</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Closer to a true utility computing model  Utility provides raw resources</p>
    <p>Doesnt care what you do with them</p>
    <p>Why trust the cloud when you dont have to?</p>
    <p>Thanks! baumann@microsoft.com</p>
  </div>
</Presentation>
