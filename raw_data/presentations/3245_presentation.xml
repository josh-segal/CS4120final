<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Automatic Generation of Data-Oriented Exploits</p>
    <p>Hong Hu, Zheng Leong Chua, Sendroiu Adrian, Prateek Saxena, Zhenkai Liang</p>
    <p>National University of Singapore</p>
    <p>USENIX Security Symposium 2015, Washington, D.C., USA</p>
  </div>
  <div class="page">
    <p>Control Flow Attacks Are Getting Harder</p>
    <p>State-of-the-art exploits  Code injection</p>
    <p>heap spray / JIT spray</p>
  </div>
  <div class="page">
    <p>Control Flow Attacks Are Getting Harder</p>
    <p>State-of-the-art exploits  Code injection</p>
    <p>heap spray / JIT spray</p>
    <p>Code reuse  ret2libc, ROP</p>
  </div>
  <div class="page">
    <p>Control Flow Attacks Are Getting Harder</p>
    <p>State-of-the-art exploits  Code injection</p>
    <p>heap spray / JIT spray</p>
    <p>Code reuse  ret2libc, ROP</p>
    <p>Defenses  Data Execution</p>
    <p>Prevention</p>
  </div>
  <div class="page">
    <p>Control Flow Attacks Are Getting Harder</p>
    <p>State-of-the-art exploits  Code injection</p>
    <p>heap spray / JIT spray</p>
    <p>Code reuse  ret2libc, ROP</p>
    <p>Defenses  Data Execution</p>
    <p>Prevention</p>
    <p>Control Flow Integrity</p>
  </div>
  <div class="page">
    <p>Control Flow Attacks Are Getting Harder</p>
    <p>State-of-the-art exploits  Code injection</p>
    <p>heap spray / JIT spray</p>
    <p>Code reuse  ret2libc, ROP</p>
    <p>control-flow bending</p>
    <p>Defenses  Data Execution</p>
    <p>Prevention</p>
    <p>Control Flow Integrity</p>
  </div>
  <div class="page"/>
  <div class="page"/>
  <div class="page">
    <p>Data-Oriented Exploits  State-of-the-art: Corrupt security-critical data</p>
    <p>leave control flow as the same  Exhibit significant damage</p>
  </div>
  <div class="page">
    <p>// set root privilege seteuid(0); ...... // set normal user privilege seteuid(pw-&gt;pw_uid); // execute users command</p>
    <p>Data-Oriented Exploits  State-of-the-art: Corrupt security-critical data</p>
    <p>leave control flow as the same  Exhibit significant damage</p>
    <p>Wu-ftpd setuid operation*</p>
    <p>* Shuo Chen, Jun Xu, Emre C. Sezer, Prachi Gauriar, and Ravishankar K. Iyer. Non-Control-Data Attacks Are Realistic Threats. In USENIX 2005.</p>
  </div>
  <div class="page">
    <p>// set root privilege seteuid(0); ...... // set normal user privilege seteuid(pw-&gt;pw_uid); // execute users command</p>
    <p>Data-Oriented Exploits  State-of-the-art: Corrupt security-critical data</p>
    <p>leave control flow as the same  Exhibit significant damage</p>
    <p>IE SafeMode Bypass+</p>
    <p>+ Yang Yu. Write Once, Pwn Anywhere. In Black Hat USA 2014</p>
    <p>//0x1D4, 0x1E4 or 0x1F4 in JScript 9, //0x188 or 0x184 in JScript 5.8, safemode = *(DWORD *)(jsobj + 0x188); if( safemode &amp; 0xB == 0 ) { Turn_on_God_Mode(); }</p>
    <p>Wu-ftpd setuid operation*</p>
    <p>* Shuo Chen, Jun Xu, Emre C. Sezer, Prachi Gauriar, and Ravishankar K. Iyer. Non-Control-Data Attacks Are Realistic Threats. In USENIX 2005.</p>
  </div>
  <div class="page">
    <p>Data-Oriented Exploits  State-of-the-art: Corrupt security-critical data</p>
    <p>leave control flow as the same  Exhibit significant damage</p>
  </div>
  <div class="page">
    <p>Contributions</p>
  </div>
  <div class="page">
    <p>Contributions</p>
    <p>New class of Data-Oriented Exploits  Reuses existing data flows in normal execution  Agnostic to CFI, DEP and often ASLR</p>
  </div>
  <div class="page">
    <p>Contributions</p>
    <p>New class of Data-Oriented Exploits  Reuses existing data flows in normal execution  Agnostic to CFI, DEP and often ASLR</p>
  </div>
  <div class="page">
    <p>Contributions  New class of Data-Oriented Exploits</p>
    <p>Reuses existing data flows in normal execution  Agnostic to CFI, DEP and often ASLR</p>
  </div>
  <div class="page">
    <p>Contributions  New class of Data-Oriented Exploits</p>
    <p>Reuses existing data flows in normal execution  Agnostic to CFI, DEP and often ASLR</p>
    <p>Data Flow Stitching  Systematic search for data-oriented exploits  Works on binary directly</p>
  </div>
  <div class="page">
    <p>Contributions  New class of Data-Oriented Exploits</p>
    <p>Reuses existing data flows in normal execution  Agnostic to CFI, DEP and often ASLR</p>
    <p>Data Flow Stitching  Systematic search for data-oriented exploits  Works on binary directly</p>
    <p>Results  Concrete exploits on real web/file servers  19 exploits (16 new) from 8 vulnerabilities</p>
  </div>
  <div class="page">
    <p>SSL-enabled web server</p>
    <p>Motivating Example</p>
  </div>
  <div class="page">
    <p>SSL-enabled web server</p>
    <p>Motivating Example</p>
    <p>privKey</p>
    <p>PsVNXi</p>
    <p>PsVNXi</p>
  </div>
  <div class="page">
    <p>SSL-enabled web server</p>
    <p>Motivating Example</p>
    <p>privKey</p>
    <p>PsVNXi</p>
    <p>userInput</p>
    <p>fileName</p>
    <p>GET /index.html HTTP/1.1</p>
    <p>index.html</p>
    <p>index.html : &lt;html&gt; &lt;/html&gt;</p>
    <p>PsVNXi</p>
    <p>/path/to/root</p>
    <p>/path/to/root/ index.html</p>
    <p>fullPath</p>
    <p>&lt;html&gt; &lt;/html&gt;</p>
    <p>result</p>
    <p>output</p>
  </div>
  <div class="page">
    <p>SSL-enabled web server</p>
    <p>Motivating Example</p>
    <p>privKey</p>
    <p>PsVNXi</p>
    <p>userInput</p>
    <p>fileName</p>
    <p>GET /index.html HTTP/1.1</p>
    <p>index.html</p>
    <p>index.html : &lt;html&gt; &lt;/html&gt;</p>
    <p>PsVNXi</p>
    <p>/path/to/root</p>
    <p>/path/to/root/ index.html</p>
    <p>fullPath</p>
    <p>&lt;html&gt; &lt;/html&gt;</p>
    <p>result</p>
    <p>output</p>
  </div>
  <div class="page">
    <p>SSL-enabled web server</p>
    <p>Motivating Example</p>
    <p>privKey</p>
    <p>PsVNXi</p>
    <p>userInput</p>
    <p>fileName</p>
    <p>GET /index.html HTTP/1.1</p>
    <p>index.html</p>
    <p>PsVNXi</p>
    <p>/path/to/root</p>
    <p>/path/to/root/ index.html</p>
    <p>fullPath</p>
    <p>&lt;html&gt; &lt;/html&gt;</p>
    <p>result</p>
    <p>output</p>
    <p>PsVNXi : &lt;html&gt; &lt;/html&gt;</p>
  </div>
  <div class="page">
    <p>Data-Flow Stitching  Manipulate data flows for exploits  Enables systematic way to search for exploits</p>
    <p>Input: binary &amp; error-exhibiting input  Output: data-oriented exploits</p>
    <p>Goal:  Information Leakage (e.g., password, keys)  Privilege Escalation (e.g., setuid, access priv. files)</p>
    <p>Constraints:  Keep the control-flow same  No knowledge of randomized values (CFI tags, ASLR addresses)</p>
    <p>Prevent abrupt termination</p>
  </div>
  <div class="page">
    <p>Challenges  Time-consuming search</p>
    <p>The search-space: Cartesian product |SrcFlow| X |TgtFlow|  Heavy analysis for each candidate</p>
    <p>Our solution:  Filter out candidates with memory error influence  Use an SMT solver to verify candidates</p>
    <p>Target flow</p>
    <p>t0 execution</p>
    <p>Source flow</p>
    <p>v2 VT</p>
    <p>v1 VS</p>
  </div>
  <div class="page">
    <p>Single-Edge Stitch  Corrupt data vertex</p>
  </div>
  <div class="page">
    <p>Single-Edge Stitch</p>
    <p>address</p>
    <p>time &amp;arg</p>
    <p>a1</p>
    <p>&amp;uid</p>
    <p>Corrupt data vertex</p>
    <p>2D-DFG</p>
  </div>
  <div class="page">
    <p>Single-Edge Stitch</p>
    <p>address</p>
    <p>time &amp;arg</p>
    <p>a1</p>
    <p>&amp;uid</p>
    <p>Corrupt data vertex</p>
    <p>I</p>
  </div>
  <div class="page">
    <p>Single-Edge Stitch</p>
    <p>address</p>
    <p>time &amp;arg</p>
    <p>a1</p>
    <p>&amp;uid</p>
    <p>Corrupt data vertex</p>
    <p>I</p>
  </div>
  <div class="page">
    <p>Single-Edge Stitch</p>
    <p>address</p>
    <p>time &amp;arg</p>
    <p>a1</p>
    <p>&amp;uid</p>
    <p>Corrupt data vertex</p>
    <p>I</p>
  </div>
  <div class="page">
    <p>Single-Edge Stitch</p>
    <p>address</p>
    <p>time &amp;arg</p>
    <p>a1</p>
    <p>&amp;uid</p>
    <p>Corrupt data vertex</p>
    <p>I</p>
    <p>Attack</p>
  </div>
  <div class="page">
    <p>Pointer Stitch  Corrupt pointers to connect data flows</p>
    <p>Pointers decide data movement direction</p>
    <p>address</p>
    <p>time</p>
    <p>&amp;arg</p>
    <p>a1 100</p>
    <p>target flow</p>
  </div>
  <div class="page">
    <p>Pointer Stitch  Corrupt pointers to connect data flows</p>
    <p>Pointers decide data movement direction</p>
    <p>address</p>
    <p>time</p>
    <p>&amp;arg</p>
    <p>a1 100</p>
    <p>a1</p>
    <p>target flow</p>
    <p>&amp;pw</p>
  </div>
  <div class="page">
    <p>Pointer Stitch  Corrupt pointers to connect data flows</p>
    <p>Pointers decide data movement direction</p>
    <p>address</p>
    <p>time</p>
    <p>&amp;arg</p>
    <p>a1 100</p>
    <p>a1</p>
    <p>target flow</p>
    <p>&amp;pw</p>
    <p>b1</p>
    <p>b2 source flow</p>
  </div>
  <div class="page">
    <p>Pointer Stitch  Corrupt pointers to connect data flows</p>
    <p>Pointers decide data movement direction</p>
    <p>address</p>
    <p>b1</p>
    <p>b2</p>
    <p>time</p>
    <p>source flow</p>
    <p>&amp;arg</p>
    <p>a1 100</p>
    <p>a1</p>
    <p>target flow</p>
    <p>&amp;pw</p>
    <p>a1</p>
  </div>
  <div class="page">
    <p>Pointer Stitch  Corrupt pointers to connect data flows</p>
    <p>Pointers decide data movement direction</p>
    <p>address</p>
    <p>b1</p>
    <p>b2</p>
    <p>time</p>
    <p>source flow</p>
    <p>&amp;arg</p>
    <p>a1 100</p>
    <p>a1</p>
    <p>target flow</p>
    <p>&amp;pw</p>
    <p>a1</p>
    <p>I</p>
  </div>
  <div class="page">
    <p>Pointer Stitch  Corrupt pointers to connect data flows</p>
    <p>Pointers decide data movement direction</p>
    <p>address</p>
    <p>b1</p>
    <p>b2</p>
    <p>time</p>
    <p>source flow</p>
    <p>&amp;arg</p>
    <p>a1 100</p>
    <p>a1</p>
    <p>target flow</p>
    <p>&amp;pw</p>
    <p>a1</p>
    <p>I</p>
  </div>
  <div class="page">
    <p>Pointer Stitch</p>
    <p>b1</p>
    <p>b2</p>
    <p>time</p>
    <p>source flow</p>
    <p>&amp;arg</p>
    <p>a1 100</p>
    <p>a1</p>
    <p>target flow</p>
    <p>&amp;pw</p>
    <p>I</p>
    <p>b2</p>
    <p>Corrupt pointers to connect data flows  Pointers decide data movement direction</p>
  </div>
  <div class="page">
    <p>Pointer Stitch</p>
    <p>b1</p>
    <p>b2</p>
    <p>time</p>
    <p>source flow</p>
    <p>&amp;arg</p>
    <p>a1 100</p>
    <p>a1</p>
    <p>target flow</p>
    <p>&amp;pw</p>
    <p>I</p>
    <p>b2 b2</p>
    <p>Corrupt pointers to connect data flows  Pointers decide data movement direction</p>
  </div>
  <div class="page">
    <p>Pointer Stitch</p>
    <p>b1</p>
    <p>b2</p>
    <p>time</p>
    <p>source flow</p>
    <p>&amp;arg</p>
    <p>a1 100</p>
    <p>a1</p>
    <p>target flow</p>
    <p>&amp;pw</p>
    <p>I</p>
    <p>b2 b2</p>
    <p>Corrupt pointers to connect data flows  Pointers decide data movement direction</p>
  </div>
  <div class="page">
    <p>Pointer Stitch</p>
    <p>b1</p>
    <p>b2</p>
    <p>time</p>
    <p>source flow</p>
    <p>&amp;arg</p>
    <p>a1 100</p>
    <p>a1</p>
    <p>target flow</p>
    <p>&amp;pw</p>
    <p>I</p>
    <p>b2 b2</p>
    <p>address</p>
    <p>Corrupt pointers to connect data flows  Pointers decide data movement direction</p>
  </div>
  <div class="page">
    <p>Pointer Stitch</p>
    <p>Attack 0</p>
    <p>b1</p>
    <p>b2</p>
    <p>time</p>
    <p>source flow</p>
    <p>&amp;arg</p>
    <p>a1 100</p>
    <p>a1</p>
    <p>target flow</p>
    <p>&amp;pw</p>
    <p>I</p>
    <p>b2</p>
    <p>address</p>
    <p>Corrupt pointers to connect data flows  Pointers decide data movement direction</p>
    <p>Pointer Stitch corrupts pointer vp  *(vp) ---&gt; target / source vertex</p>
  </div>
  <div class="page">
    <p>Pointer Stitch</p>
    <p>time</p>
    <p>a1</p>
    <p>target flow</p>
    <p>Pointer Stitch corrupts pointer vp  *(vp) ---&gt; target / source vertex</p>
    <p>&amp;pw</p>
    <p>a1</p>
    <p>&amp;arg</p>
    <p>a1</p>
    <p>&amp;pw</p>
    <p>address</p>
  </div>
  <div class="page">
    <p>Pointer Stitch</p>
    <p>time</p>
    <p>a1</p>
    <p>target flow</p>
    <p>Pointer Stitch corrupts pointer vp  *(vp) ---&gt; target / source vertex</p>
    <p>&amp;pw</p>
    <p>a1</p>
    <p>&amp;arg</p>
    <p>a1</p>
    <p>&amp;pw</p>
    <p>address</p>
  </div>
  <div class="page">
    <p>Pointer Stitch</p>
    <p>time</p>
    <p>a1</p>
    <p>target flow</p>
    <p>Pointer Stitch corrupts pointer vp  *(vp) ---&gt; target / source vertex</p>
    <p>&amp;pw</p>
    <p>a1</p>
    <p>b2 b2</p>
    <p>&amp;arg</p>
    <p>a1</p>
    <p>&amp;pw</p>
    <p>address</p>
  </div>
  <div class="page">
    <p>Pointer Stitch</p>
    <p>time</p>
    <p>a1</p>
    <p>target flow</p>
    <p>Pointer Stitch corrupts pointer vp  *(vp) ---&gt; target / source vertex</p>
    <p>&amp;pw</p>
    <p>a1 b2</p>
    <p>b2 b2</p>
    <p>&amp;arg</p>
    <p>a1</p>
    <p>&amp;pw</p>
    <p>address</p>
  </div>
  <div class="page">
    <p>Pointer Stitch</p>
    <p>time</p>
    <p>a1</p>
    <p>target flow</p>
    <p>Pointer Stitch corrupts pointer vp  *(vp) ---&gt; target / source vertex</p>
    <p>&amp;pw</p>
    <p>a1 b2</p>
    <p>&amp;arg</p>
    <p>a1</p>
    <p>&amp;pw</p>
    <p>address</p>
  </div>
  <div class="page">
    <p>Pointer Stitch</p>
    <p>time</p>
    <p>a1</p>
    <p>target flow</p>
    <p>Pointer Stitch corrupts pointer vp  *(vp) ---&gt; target / source vertex</p>
    <p>&amp;pw</p>
    <p>a1 b2</p>
    <p>&amp;arg</p>
    <p>a1</p>
    <p>&amp;pw</p>
    <p>address</p>
  </div>
  <div class="page">
    <p>More Ways of Stitches  2-level stitch corrupts pointer vp2</p>
    <p>*(*(vp2)) ---&gt; *(vp) ---&gt; target / source vertex</p>
  </div>
  <div class="page">
    <p>More Ways of Stitches  2-level stitch corrupts pointer vp2</p>
    <p>*(*(vp2)) ---&gt; *(vp) ---&gt; target / source vertex  N-level stitch corrupts pointer vpN</p>
    <p>*(*((vpN))) ---&gt; target / source vertex  Recursively invoke pointer stitch N times  Stitch Alignment</p>
    <p>vpN ---&gt; vpN so that *(*((vpN))) is the source / target vertex</p>
  </div>
  <div class="page">
    <p>More Ways of Stitches  2-level stitch corrupts pointer vp2</p>
    <p>*(*(vp2)) ---&gt; *(vp) ---&gt; target / source vertex  N-level stitch corrupts pointer vpN</p>
    <p>*(*((vpN))) ---&gt; target / source vertex  Recursively invoke pointer stitch N times  Stitch Alignment</p>
    <p>vpN ---&gt; vpN so that *(*((vpN))) is the source / target vertex</p>
    <p>Multi-flow stitching  Intermediate data flows  Source flow -&gt; flow 1 -&gt; flow 2 -&gt;  -&gt; Target flow</p>
  </div>
  <div class="page">
    <p>Defeat ASLR --- Address Reuse  Partial resue: offset is fixed</p>
    <p>//attackers control %eax</p>
    <p>mov (%esi,%eax,4), %ebx</p>
    <p>mov %ecx, (%edi,%eax,4)</p>
  </div>
  <div class="page">
    <p>Defeat ASLR --- Address Reuse  Partial resue: offset is fixed</p>
    <p>Complete reuse:  randomized address in memory //attacker controls %eax mov (%esi, %eax, 4), %ebx</p>
    <p>mov (%ebx), %ecx</p>
    <p>//attackers control %eax</p>
    <p>mov (%esi,%eax,4), %ebx</p>
    <p>mov %ecx, (%edi,%eax,4)</p>
    <p>mov %ecx, (%ebx)</p>
  </div>
  <div class="page">
    <p>Defeat ASLR --- Address Reuse  Partial resue: offset is fixed</p>
    <p>Complete reuse:  randomized address in memory //attacker controls %eax mov (%esi, %eax, 4), %ebx</p>
    <p>mov (%ebx), %ecx</p>
    <p>//attackers control %eax</p>
    <p>mov (%esi,%eax,4), %ebx</p>
    <p>mov %ecx, (%edi,%eax,4)</p>
    <p>address</p>
    <p>&amp;ud.uid</p>
    <p>&amp;arg</p>
    <p>I stack area</p>
    <p>mov %ecx, (%ebx)</p>
  </div>
  <div class="page">
    <p>Defeat ASLR --- Address Reuse  Partial resue: offset is fixed</p>
    <p>Complete reuse:  randomized address in memory //attacker controls %eax mov (%esi, %eax, 4), %ebx</p>
    <p>mov (%ebx), %ecx</p>
    <p>//attackers control %eax</p>
    <p>mov (%esi,%eax,4), %ebx</p>
    <p>mov %ecx, (%edi,%eax,4)</p>
    <p>address</p>
    <p>&amp;ud.uid</p>
    <p>&amp;arg</p>
    <p>I</p>
    <p>Attack 0</p>
    <p>stack area</p>
    <p>mov %ecx, (%ebx)</p>
  </div>
  <div class="page">
    <p>Defeat ASLR --- Address Reuse  Partial resue: offset is fixed</p>
    <p>Complete reuse:  randomized address in memory //attacker controls %eax mov (%esi, %eax, 4), %ebx</p>
    <p>mov (%ebx), %ecx</p>
    <p>//attackers control %eax</p>
    <p>mov (%esi,%eax,4), %ebx</p>
    <p>mov %ecx, (%edi,%eax,4)</p>
    <p>address</p>
    <p>&amp;ud.uid</p>
    <p>&amp;arg</p>
    <p>I</p>
    <p>Attack 0</p>
    <p>stack area</p>
    <p>vsprintf  . %X$n</p>
    <p>&amp;ud.uid</p>
    <p>mov %ecx, (%ebx)</p>
  </div>
  <div class="page">
    <p>Stitch with ASLR  Target deterministic addresses</p>
    <p>non-PIE binaries on Linux</p>
    <p>&gt; 16 &gt; 32 &gt; 64</p>
    <p>&gt; 128 &gt; 256 &gt; 512 /sbin</p>
    <p>/bin /usr/sbin /usr/bin</p>
    <p>Size of fixed space (KB)</p>
    <p># of programs</p>
  </div>
  <div class="page">
    <p>Stitch with ASLR  Target deterministic addresses</p>
    <p>non-PIE binaries on Linux</p>
    <p>msvcr71.dll, hxds.dll on Windows</p>
    <p>&gt; 16 &gt; 32 &gt; 64</p>
    <p>&gt; 128 &gt; 256 &gt; 512 /sbin</p>
    <p>/bin /usr/sbin /usr/bin</p>
    <p>Size of fixed space (KB)</p>
    <p># of programs</p>
  </div>
  <div class="page">
    <p>FlowStitch</p>
    <p>error-exhibiting benign</p>
  </div>
  <div class="page">
    <p>FlowStitch</p>
    <p>error-exhibiting benign</p>
    <p>errorexhibiting</p>
    <p>trace</p>
    <p>benign trace</p>
  </div>
  <div class="page">
    <p>FlowStitch</p>
    <p>error-exhibiting benign</p>
    <p>constraints, influence</p>
    <p>imp. data, data flows</p>
    <p>errorexhibiting</p>
    <p>trace</p>
    <p>benign trace</p>
  </div>
  <div class="page">
    <p>FlowStitch</p>
    <p>error-exhibiting benign</p>
    <p>candidate exploits</p>
    <p>constraints, influence</p>
    <p>imp. data, data flows</p>
    <p>errorexhibiting</p>
    <p>trace</p>
    <p>benign trace</p>
    <p>Data-Flow Stitching</p>
  </div>
  <div class="page">
    <p>FlowStitch</p>
    <p>error-exhibiting benign</p>
    <p>candidate exploits</p>
    <p>constraints, influence</p>
    <p>imp. data, data flows</p>
    <p>errorexhibiting</p>
    <p>trace</p>
    <p>benign trace</p>
    <p>Data-Flow Stitching</p>
    <p>SMT Solver</p>
  </div>
  <div class="page">
    <p>FlowStitch</p>
    <p>error-exhibiting benign</p>
    <p>candidate exploits</p>
    <p>constraints, influence</p>
    <p>imp. data, data flows</p>
    <p>errorexhibiting</p>
    <p>trace</p>
    <p>benign trace</p>
    <p>DOE</p>
    <p>Data-Flow Stitching</p>
    <p>SMT Solver</p>
  </div>
  <div class="page">
    <p>Evaluation --- Generated Exploits ID Vul. bin Vulnerability Data-Oriented Exploits ASLR</p>
    <p>CVE-2013-2028 nginx Stack bof L0 : private key M0: http root dir</p>
    <p>CVE-2012-0809 sudo Format string M0: user id</p>
    <p>CVE-2009-4769 httpdx Format string</p>
    <p>L0: admins passwd  M0: admin;s passwd</p>
    <p>M1: anon.s permission  M2: anon.s root dir  M3: CGI root dir</p>
    <p>bugtraq ID: 41956</p>
    <p>orzhttpd Format string L0: randomized addr  M0: http root dir</p>
    <p>CVE-2002-1496 * nullhttpd Heap overflow M0: http root dir M1: CGI root dir</p>
    <p>CVE-2001-0820 * ghttpd Stack bof M0: CGI root dir</p>
    <p>CVE-2001-0144 * SSHD integer overflow</p>
    <p>L0: root passwd hash M0: user id M1: authenticated flag</p>
    <p>CVE-2000-0573 * wu-ftpd Format string L0: env variables M0: user id (single-edge)  M1: user id (pointer stitch)</p>
    <p>* CVEs discussed in Shuo Chens work [1]</p>
  </div>
  <div class="page">
    <p>Evaluation --- Generated Exploits ID Vul. bin Vulnerability Data-Oriented Exploits ASLR</p>
    <p>CVE-2013-2028 nginx Stack bof L0 : private key M0: http root dir</p>
    <p>CVE-2012-0809 sudo Format string M0: user id</p>
    <p>CVE-2009-4769 httpdx Format string</p>
    <p>L0: admins passwd  M0: admin;s passwd</p>
    <p>M1: anon.s permission  M2: anon.s root dir  M3: CGI root dir</p>
    <p>bugtraq ID: 41956</p>
    <p>orzhttpd Format string L0: randomized addr  M0: http root dir</p>
    <p>CVE-2002-1496 * nullhttpd Heap overflow M0: http root dir M1: CGI root dir</p>
    <p>CVE-2001-0820 * ghttpd Stack bof M0: CGI root dir</p>
    <p>CVE-2001-0144 * SSHD integer overflow</p>
    <p>L0: root passwd hash M0: user id M1: authenticated flag</p>
    <p>CVE-2000-0573 * wu-ftpd Format string L0: env variables M0: user id (single-edge)  M1: user id (pointer stitch)</p>
    <p>* CVEs discussed in Shuo Chens work [1]</p>
    <p>19 exploits</p>
  </div>
  <div class="page">
    <p>Evaluation --- Generated Exploits ID Vul. bin Vulnerability Data-Oriented Exploits ASLR</p>
    <p>CVE-2013-2028 nginx Stack bof L0 : private key M0: http root dir</p>
    <p>CVE-2012-0809 sudo Format string M0: user id</p>
    <p>CVE-2009-4769 httpdx Format string</p>
    <p>L0: admins passwd  M0: admin;s passwd</p>
    <p>M1: anon.s permission  M2: anon.s root dir  M3: CGI root dir</p>
    <p>bugtraq ID: 41956</p>
    <p>orzhttpd Format string L0: randomized addr  M0: http root dir</p>
    <p>CVE-2002-1496 * nullhttpd Heap overflow M0: http root dir M1: CGI root dir</p>
    <p>CVE-2001-0820 * ghttpd Stack bof M0: CGI root dir</p>
    <p>CVE-2001-0144 * SSHD integer overflow</p>
    <p>L0: root passwd hash M0: user id M1: authenticated flag</p>
    <p>CVE-2000-0573 * wu-ftpd Format string L0: env variables M0: user id (single-edge)  M1: user id (pointer stitch)</p>
    <p>* CVEs discussed in Shuo Chens work [1]</p>
    <p>19 exploits</p>
  </div>
  <div class="page">
    <p>Evaluation --- Generated Exploits ID Vul. bin Vulnerability Data-Oriented Exploits ASLR</p>
    <p>CVE-2013-2028 nginx Stack bof L0 : private key M0: http root dir</p>
    <p>CVE-2012-0809 sudo Format string M0: user id</p>
    <p>CVE-2009-4769 httpdx Format string</p>
    <p>L0: admins passwd  M0: admin;s passwd</p>
    <p>M1: anon.s permission  M2: anon.s root dir  M3: CGI root dir</p>
    <p>bugtraq ID: 41956</p>
    <p>orzhttpd Format string L0: randomized addr  M0: http root dir</p>
    <p>CVE-2002-1496 * nullhttpd Heap overflow M0: http root dir M1: CGI root dir</p>
    <p>CVE-2001-0820 * ghttpd Stack bof M0: CGI root dir</p>
    <p>CVE-2001-0144 * SSHD integer overflow</p>
    <p>L0: root passwd hash M0: user id M1: authenticated flag</p>
    <p>CVE-2000-0573 * wu-ftpd Format string L0: env variables M0: user id (single-edge)  M1: user id (pointer stitch)</p>
    <p>* CVEs discussed in Shuo Chens work [1]</p>
    <p>19 exploits  16 prev. unknown</p>
  </div>
  <div class="page">
    <p>Evaluation --- Generated Exploits ID Vul. bin Vulnerability Data-Oriented Exploits ASLR</p>
    <p>CVE-2013-2028 nginx Stack bof L0 : private key M0: http root dir</p>
    <p>CVE-2012-0809 sudo Format string M0: user id</p>
    <p>CVE-2009-4769 httpdx Format string</p>
    <p>L0: admins passwd  M0: admin;s passwd</p>
    <p>M1: anon.s permission  M2: anon.s root dir  M3: CGI root dir</p>
    <p>bugtraq ID: 41956</p>
    <p>orzhttpd Format string L0: randomized addr  M0: http root dir</p>
    <p>CVE-2002-1496 * nullhttpd Heap overflow M0: http root dir M1: CGI root dir</p>
    <p>CVE-2001-0820 * ghttpd Stack bof M0: CGI root dir</p>
    <p>CVE-2001-0144 * SSHD integer overflow</p>
    <p>L0: root passwd hash M0: user id M1: authenticated flag</p>
    <p>CVE-2000-0573 * wu-ftpd Format string L0: env variables M0: user id (single-edge)  M1: user id (pointer stitch)</p>
    <p>* CVEs discussed in Shuo Chens work [1]</p>
    <p>19 exploits  16 prev. unknown  7 advanced stitch  2-level stitch</p>
  </div>
  <div class="page">
    <p>Evaluation --- Generated Exploits ID Vul. bin Vulnerability Data-Oriented Exploits ASLR</p>
    <p>CVE-2013-2028 nginx Stack bof L0 : private key M0: http root dir</p>
    <p>CVE-2012-0809 sudo Format string M0: user id</p>
    <p>CVE-2009-4769 httpdx Format string</p>
    <p>L0: admins passwd  M0: admin;s passwd</p>
    <p>M1: anon.s permission  M2: anon.s root dir  M3: CGI root dir</p>
    <p>bugtraq ID: 41956</p>
    <p>orzhttpd Format string L0: randomized addr  M0: http root dir</p>
    <p>CVE-2002-1496 * nullhttpd Heap overflow M0: http root dir M1: CGI root dir</p>
    <p>CVE-2001-0820 * ghttpd Stack bof M0: CGI root dir</p>
    <p>CVE-2001-0144 * SSHD integer overflow</p>
    <p>L0: root passwd hash M0: user id M1: authenticated flag</p>
    <p>CVE-2000-0573 * wu-ftpd Format string L0: env variables M0: user id (single-edge)  M1: user id (pointer stitch)</p>
    <p>* CVEs discussed in Shuo Chens work [1]</p>
    <p>19 exploits  16 prev. unknown  7 advanced stitch  2-level stitch</p>
    <p>10 bypass ASLR  8 fixed addresses  2 address reuse</p>
  </div>
  <div class="page">
    <p>Evaluation --- Performance</p>
    <p>6.5 min/exploit  Slice takes long</p>
    <p>faster version is available (binary version)</p>
    <p>slice-error</p>
    <p>trace-benign</p>
    <p>trace-error</p>
  </div>
  <div class="page">
    <p>Case Study  2-Level Stitch  ghttpd web server: stack buffer overflow</p>
    <p>Previous exploit[1]</p>
    <p>Corrupt pointer ptr: *(ptr) -&gt; url</p>
    <p>//serveconnection(): char *ptr; //URL pointer //esi is allocated for it 1: if(strstr(ptr,/..)) reject the request; 2: log(...); 3: exec(ptr);</p>
    <p>Assembly of log(...) push %ebp push %esi // stack overflow pop %esi pop %ebp ret</p>
    <p>Assembly of line 3: push %esi  call &lt;exec@plt&gt;</p>
  </div>
  <div class="page">
    <p>Case Study  2-Level Stitch  ghttpd web server: stack buffer overflow</p>
    <p>Previous exploit[1]</p>
    <p>Corrupt pointer ptr: *(ptr) -&gt; url</p>
    <p>//serveconnection(): char *ptr; //URL pointer //esi is allocated for it 1: if(strstr(ptr,/..)) reject the request; 2: log(...); 3: exec(ptr);</p>
    <p>Assembly of log(...) push %ebp push %esi // stack overflow pop %esi pop %ebp ret</p>
    <p>Assembly of line 3: push %esi  call &lt;exec@plt&gt;</p>
    <p>mov -0xc(%ebp), %esi</p>
    <p>does not work any more</p>
  </div>
  <div class="page">
    <p>Case Study  2-Level Stitch  ghttpd web server: stack buffer overflow</p>
    <p>Previous exploit[1]</p>
    <p>Corrupt pointer ptr: *(ptr) -&gt; url  We build a 2-level stitch</p>
    <p>Corrupt pointer saved ebp: *(*(saved ebp)) -&gt; *ptr -&gt; url</p>
    <p>//serveconnection(): char *ptr; //URL pointer //esi is allocated for it 1: if(strstr(ptr,/..)) reject the request; 2: log(...); 3: exec(ptr);</p>
    <p>Assembly of log(...) push %ebp push %esi // stack overflow pop %esi pop %ebp ret</p>
    <p>Assembly of line 3: push %esi  call &lt;exec@plt&gt;</p>
    <p>mov -0xc(%ebp), %esi</p>
    <p>does not work any more</p>
  </div>
  <div class="page">
    <p>SSHD hashed key info leak  getspnam() in glibc gets hashed key (heap copy)</p>
    <p>SSHD copies hashed key to local stack (stack copy)</p>
    <p>Case Study  Sensitive Data Lifespan</p>
  </div>
  <div class="page">
    <p>Case Study  Sensitive Data Lifespan  SSHD hashed key info leak  getspnam() in glibc gets hashed key (heap copy)</p>
    <p>SSHD copies hashed key to local stack (stack copy)  Overwritten by later usage</p>
  </div>
  <div class="page">
    <p>Case Study  Sensitive Data Lifespan  SSHD hashed key info leak  getspnam() in glibc gets hashed key (heap copy)</p>
    <p>endspent() in glibc releases memory, not clears it!  Still alive for stitching</p>
    <p>SSHD copies hashed key to local stack (stack copy)  Overwritten by later usage</p>
  </div>
  <div class="page">
    <p>Case Study  Sensitive Data Lifespan  SSHD hashed key info leak  getspnam() in glibc gets hashed key (heap copy)</p>
    <p>endspent() in glibc releases memory, not clears it!  Still alive for stitching</p>
    <p>SSHD copies hashed key to local stack (stack copy)  Overwritten by later usage</p>
    <p>Challenging to make lifespan correct!</p>
  </div>
  <div class="page">
    <p>Conclusion  Rich Category: Data-Oriented Exploits</p>
    <p>Single-edge stitch, Pointer stitch  N-level stitch, Multi-flow stitch</p>
    <p>Data Flow Stitching</p>
    <p>Systematic way to generate data-oriented exploits  Agnostic to CFI, DEP and often ASLR</p>
    <p>Automatic construction is feasible</p>
  </div>
  <div class="page">
    <p>Thanks!</p>
    <p>Hong Hu huhong@comp.nus.edu.sg</p>
    <p>http://www.comp.nus.edu.sg/~huhong/</p>
  </div>
</Presentation>
