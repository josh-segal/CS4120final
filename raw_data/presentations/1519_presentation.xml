<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>RIPQ: Advanced Photo Caching on Flash for Facebook!</p>
    <p>Linpeng Tang (Princeton)! Qi Huang (Cornell &amp; Facebook)! Wyatt Lloyd (USC &amp; Facebook)!</p>
    <p>Sanjeev Kumar (Facebook)! Kai Li (Princeton)!</p>
  </div>
  <div class="page">
    <p>Photo Serving Stack!2 Billion * Photos !</p>
    <p>Shared Daily!</p>
    <p>Storage! Backend!</p>
  </div>
  <div class="page">
    <p>Photo Caches!</p>
    <p>Close to users! Reduce backbone traffic!</p>
    <p>Co-located with backend! Reduce backend IO!</p>
    <p>Flash!</p>
    <p>Storage! Backend!</p>
    <p>Edge Cache!</p>
    <p>Origin Cache!</p>
    <p>Photo Serving Stack!</p>
  </div>
  <div class="page">
    <p>Flash!</p>
    <p>Storage! Backend!</p>
    <p>Edge Cache!</p>
    <p>Origin Cache!</p>
    <p>Photo Serving Stack!An Analysis of!Facebook Photo Caching! [Huang et al. SOSP13]!</p>
    <p>Segmented LRU-3:! 10% less backbone traffic!</p>
    <p>Greedy-Dual-Size-Frequency-3: 23% fewer backend IOs!</p>
    <p>Advanced caching! algorithms help!!</p>
  </div>
  <div class="page">
    <p>Flash! FIFO was still used! ! No known way to implement advanced algorithms efficiently!</p>
    <p>Storage! Backend!</p>
    <p>Edge Cache!</p>
    <p>Origin Cache!</p>
    <p>In Practice! Photo Serving Stack!</p>
  </div>
  <div class="page">
    <p>Advanced caching helps:!  23% fewer backend IOs!  10% less backbone traffic !</p>
    <p>Theory! Practice!</p>
    <p>Difficult to implement on flash:!  FIFO still used!</p>
    <p>Restricted Insertion Priority Queue: ! efficiently implement advanced!</p>
    <p>caching algorithms on flash!</p>
  </div>
  <div class="page">
    <p>Outline!  Why are advanced caching algorithms!</p>
    <p>difficult to implement on flash efficiently?!</p>
    <p>How RIPQ solves this problem?!  Why use priority queue?!  How to efficiently implement one on flash?!</p>
    <p>Evaluation!  10% less backbone traffic !  23% fewer backend IOs!</p>
  </div>
  <div class="page">
    <p>Outline!  Why are advanced caching algorithms!</p>
    <p>difficult to implement on flash efficiently?!  Write pattern of FIFO and LRU!</p>
    <p>How RIPQ solves this problem?!  Why use priority queue?!  How to efficiently implement one on flash?!</p>
    <p>Evaluation!  10% less backbone traffic !  23% fewer backend IOs!</p>
  </div>
  <div class="page">
    <p>FIFO Does Sequential Writes!</p>
    <p>Cache space of FIFO!</p>
    <p>Head! Tail!</p>
  </div>
  <div class="page">
    <p>FIFO Does Sequential Writes!</p>
    <p>Cache space of FIFO!</p>
    <p>Head! Tail!</p>
    <p>Miss!</p>
  </div>
  <div class="page">
    <p>FIFO Does Sequential Writes!</p>
    <p>Cache space of FIFO!</p>
    <p>Head! Tail!</p>
    <p>Hit!</p>
  </div>
  <div class="page">
    <p>FIFO Does Sequential Writes!</p>
    <p>Cache space of FIFO!</p>
    <p>Head! Tail!</p>
    <p>Evicted!</p>
    <p>No random writes needed for FIFO!</p>
  </div>
  <div class="page">
    <p>LRU Needs Random Writes!</p>
    <p>Cache space of LRU!</p>
    <p>Head! Tail!</p>
    <p>Locations on flash  Locations in LRU queue!</p>
    <p>Hit!</p>
  </div>
  <div class="page">
    <p>LRU Needs Random Writes!</p>
    <p>Head! Tail!</p>
    <p>Non-contiguous! on flash!</p>
    <p>Random writes needed to reuse space!</p>
    <p>Cache space of LRU!</p>
  </div>
  <div class="page">
    <p>Why Care About Random Writes?!</p>
    <p>Write-heavy workload!  Long tail access pattern, moderate hit ratio!  Each miss triggers a write to cache!</p>
    <p>Small random writes are harmful for flash!  e.g. Min et al. FAST12!  High write amplification!</p>
    <p>Low write throughput! ! Short device lifetime!</p>
  </div>
  <div class="page">
    <p>What write size do we need?!  Large writes!  High write throughput at high utilization!  16~32MiB in Min et al. FAST2012!</p>
    <p>!  Whats the trend since then?!  Random writes tested for 3 modern devices!  128~512MiB needed now!</p>
  </div>
  <div class="page">
    <p>Outline!  Why are advanced caching algorithms!</p>
    <p>difficult to implement on flash efficiently?!</p>
    <p>How RIPQ solves this problem?!</p>
    <p>Evaluation!</p>
  </div>
  <div class="page">
    <p>RIPQ Architecture! (Restricted Insertion Priority Queue)!</p>
    <p>Advanced Caching Policy! (SLRU, GDSF )!</p>
    <p>RIPQ!</p>
    <p>Priority Queue API!</p>
    <p>RAM! Flash!</p>
    <p>Flash-friendly Workloads!</p>
    <p>Approximate Priority Queue!</p>
    <p>Efficient caching on flash</p>
    <p>Caching algorithms approximated as well</p>
  </div>
  <div class="page">
    <p>RIPQ Architecture! (Restricted Insertion Priority Queue)!</p>
    <p>Advanced Caching Policy! (SLRU, GDSF )!</p>
    <p>RIPQ!</p>
    <p>Priority Queue API!</p>
    <p>RAM! Flash!</p>
    <p>Flash-friendly Workloads!</p>
    <p>Approximate Priority Queue! Restricted insertion! Section merge/split Large writes! Lazy updates</p>
  </div>
  <div class="page">
    <p>Priority Queue API!  No single best caching policy!</p>
    <p>Segmented LRU [Karedla94]!  Reduce both backend IO and backbone traffic!  SLRU-3: best algorithm for Edge so far!</p>
    <p>Greedy-Dual-Size-Frequency [Cherkasova98]!  Favor small objects!  Further reduces backend IO!  GDSF-3: best algorithm for Origin so far!</p>
  </div>
  <div class="page">
    <p>Segmented LRU!  Concatenation of K LRU caches!</p>
    <p>Cache space of SLRU-3!</p>
    <p>Head! L2! L1!</p>
    <p>Tail! L3!</p>
    <p>Miss!</p>
  </div>
  <div class="page">
    <p>Segmented LRU!  Concatenation of K LRU caches!</p>
    <p>Head! L2! L1!</p>
    <p>Tail! L3!</p>
    <p>Miss!</p>
    <p>Cache space of SLRU-3!</p>
  </div>
  <div class="page">
    <p>Segmented LRU!  Concatenation of K LRU caches!</p>
    <p>Cache space of SLRU-3!</p>
    <p>Head! L2! L1!</p>
    <p>Tail! L3!</p>
    <p>Hit!</p>
  </div>
  <div class="page">
    <p>Segmented LRU!  Concatenation of K LRU caches!</p>
    <p>Cache space of SLRU-3!</p>
    <p>Head! L2! L1!</p>
    <p>Tail! L3!</p>
    <p>Hit! again!</p>
  </div>
  <div class="page">
    <p>Greedy-Dual-Size-Frequency!  Favoring small objects!</p>
    <p>Cache space of GDSF-3!</p>
    <p>Head! Tail!</p>
  </div>
  <div class="page">
    <p>Greedy-Dual-Size-Frequency!  Favoring small objects!</p>
    <p>Cache space of GDSF-3!</p>
    <p>Head! Tail!</p>
    <p>Miss!</p>
  </div>
  <div class="page">
    <p>Greedy-Dual-Size-Frequency!  Favoring small objects!</p>
    <p>Cache space of GDSF-3!</p>
    <p>Head! Tail!</p>
    <p>Miss!</p>
  </div>
  <div class="page">
    <p>Greedy-Dual-Size-Frequency!  Favoring small objects!</p>
    <p>Cache space of GDSF-3!</p>
    <p>Head!</p>
    <p>Write workload more random than LRU!  Operations similar to priority queue!</p>
    <p>Tail!</p>
  </div>
  <div class="page">
    <p>Relative Priority Queue for! Advanced Caching Algorithms!</p>
    <p>Cache space!</p>
    <p>Head! Tail! 1.0! 0.0!</p>
    <p>Miss object: insert(x, p)!</p>
    <p>p</p>
  </div>
  <div class="page">
    <p>Relative Priority Queue for! Advanced Caching Algorithms!</p>
    <p>Cache space!</p>
    <p>Head! Tail! 1.0! 0.0!</p>
    <p>Hit object: increase(x, p)!</p>
    <p>p</p>
  </div>
  <div class="page">
    <p>Relative Priority Queue for! Advanced Caching Algorithms!</p>
    <p>Cache space!</p>
    <p>Head! Tail! 1.0! 0.0!</p>
    <p>Implicit demotion on insert/increase:!  Object with lower priorities!</p>
    <p>moves towards the tail!</p>
  </div>
  <div class="page">
    <p>Relative Priority Queue for! Advanced Caching Algorithms!</p>
    <p>Cache space!</p>
    <p>Head! Tail! 1.0! 0.0!</p>
    <p>Evict from queue tail! Evicted!</p>
    <p>Relative priority queue captures the! dynamics of many caching algorithms!!</p>
  </div>
  <div class="page">
    <p>RIPQ Design: Large Writes!</p>
    <p>Need to buffer object writes (10s KiB) into block writes!  Once written, blocks are immutable!!  256MiB block size, 90% utilization!  Large caching capacity!  High write throughput!</p>
  </div>
  <div class="page">
    <p>RIPQ Design: ! Restricted Insertion Points!</p>
    <p>Exact priority queue!  Insert to any block in the queue!</p>
    <p>Each block needs a separate buffer!  Whole flash space buffered in RAM!!</p>
  </div>
  <div class="page">
    <p>RIPQ Design: ! Restricted Insertion Points!</p>
    <p>Solution: restricted insertion points!</p>
  </div>
  <div class="page">
    <p>Section is Unit for Insertion!</p>
    <p>Active block with! RAM buffer!</p>
    <p>Sealed block! on flash!</p>
    <p>Head! Tail!</p>
    <p>Each section has one insertion point!</p>
    <p>Section! Section! Section!</p>
  </div>
  <div class="page">
    <p>Section is Unit for Insertion!</p>
    <p>Head! Tail!+1!</p>
    <p>insert(x, 0.55)!</p>
    <p>Insert procedure!  Find corresponding section!  Copy data into active block!  Updating section priority range! !</p>
    <p>Section! Section! Section!</p>
  </div>
  <div class="page">
    <p>Section is Unit for Insertion!</p>
    <p>Active block with! RAM buffer!</p>
    <p>Sealed block! on flash!</p>
    <p>Head! Tail!</p>
    <p>Relative orders within one section not guaranteed!!</p>
    <p>Section! Section! Section!</p>
  </div>
  <div class="page">
    <p>Trade-off in Section Size!</p>
    <p>Section size controls approximation error!  Sections , approximation error !  Sections , RAM buffer !</p>
    <p>Head! Tail!</p>
    <p>Section! Section! Section!</p>
  </div>
  <div class="page">
    <p>RIPQ Design: Lazy Update!</p>
    <p>Head! Tail!</p>
    <p>increase(x, 0.9)!</p>
    <p>Problem with nave approach!  Data copying/duplication on flash!</p>
    <p>x!</p>
    <p>+1!</p>
    <p>Nave approach: copy to the corresponding active block!</p>
    <p>Section! Section! Section!</p>
  </div>
  <div class="page">
    <p>RIPQ Design: Lazy Update!</p>
    <p>Head! Tail!</p>
    <p>Solution: use virtual block to ! track the updated location!!</p>
    <p>Section! Section! Section!</p>
  </div>
  <div class="page">
    <p>RIPQ Design: Lazy Update!</p>
    <p>Head! Tail!</p>
    <p>Virtual Blocks!</p>
    <p>Solution: use virtual block to ! track the updated location!!</p>
    <p>Section! Section! Section!</p>
  </div>
  <div class="page">
    <p>Virtual Block Remembers! Update Location!</p>
    <p>Head! Tail!</p>
    <p>No data written during virtual update!</p>
    <p>increase(x, 0.9)!x!</p>
    <p>+1!</p>
    <p>Section! Section! Section!</p>
  </div>
  <div class="page">
    <p>Actual Update During Eviction!</p>
    <p>Head! Tail!</p>
    <p>x!</p>
    <p>Section! Section! Section!</p>
    <p>x now at tail block.!</p>
  </div>
  <div class="page">
    <p>Actual Update During Eviction!</p>
    <p>Head! Tail!</p>
    <p>-1!</p>
    <p>+1!</p>
    <p>x!Copy data to ! the active block!</p>
    <p>Always one copy of data on flash!</p>
    <p>Section! Section! Section!</p>
  </div>
  <div class="page">
    <p>RIPQ Design!  Relative priority queue API!  RIPQ design points!  Large writes!  Restricted insertion points!  Lazy update!  Section merge/split!</p>
    <p>Balance section sizes and RAM buffer usage!</p>
    <p>Static caching!  Photos are static!</p>
  </div>
  <div class="page">
    <p>Outline!  Why are advanced caching algorithms!</p>
    <p>difficult to implement on flash efficiently?!</p>
    <p>How RIPQ solves this problem?!</p>
    <p>Evaluation!</p>
  </div>
  <div class="page">
    <p>Evaluation Questions!  How much RAM buffer needed?!</p>
    <p>How good is RIPQs approximation?!</p>
    <p>Whats the throughput of RIPQ?! !</p>
  </div>
  <div class="page">
    <p>Evaluation Approach!  Real-world Facebook workloads!  Origin!  Edge!</p>
    <p>670 GiB flash card!  256MiB block size!  90% utilization!</p>
    <p>Baselines!  FIFO!  SIPQ: Single Insertion Priority Queue!</p>
  </div>
  <div class="page">
    <p>RIPQ Needs Small Number of Insertion Points!</p>
    <p>Insertion points!</p>
    <p>O bj</p>
    <p>ec t</p>
    <p>w is</p>
    <p>e hi</p>
    <p>tra</p>
    <p>tio (%</p>
    <p>)</p>
    <p>Exact GDSF-3</p>
    <p>GDSF-3</p>
    <p>Exact SLRU-3</p>
    <p>SLRU-3</p>
    <p>FIFO</p>
    <p>+6%</p>
    <p>+16%</p>
  </div>
  <div class="page">
    <p>RIPQ Needs Small Number of Insertion Points!</p>
    <p>O bj</p>
    <p>ec t</p>
    <p>w is</p>
    <p>e hi</p>
    <p>tra</p>
    <p>tio (%</p>
    <p>)</p>
    <p>Exact GDSF-3</p>
    <p>GDSF-3</p>
    <p>Exact SLRU-3</p>
    <p>SLRU-3</p>
    <p>FIFO</p>
    <p>Insertion points!</p>
  </div>
  <div class="page">
    <p>RIPQ Needs Small Number of Insertion Points!</p>
    <p>O bj</p>
    <p>ec t</p>
    <p>w is</p>
    <p>e hi</p>
    <p>tra</p>
    <p>tio (%</p>
    <p>)</p>
    <p>Exact GDSF-3</p>
    <p>GDSF-3</p>
    <p>Exact SLRU-3</p>
    <p>SLRU-3</p>
    <p>FIFO</p>
    <p>You dont need much RAM buffer (2GiB)!!</p>
    <p>Insertion points!</p>
  </div>
  <div class="page">
    <p>RIPQ Has High Fidelity!</p>
    <p>O bj</p>
    <p>ec t</p>
    <p>w is</p>
    <p>e hi</p>
    <p>tra</p>
    <p>tio (%</p>
    <p>)!</p>
    <p>SLRU-1 SLRU-2 SLRU-3 GDSF-1 GDSF-2 GDSF-3 FIFO</p>
    <p>Exact</p>
    <p>RIPQ</p>
    <p>FIFO</p>
  </div>
  <div class="page">
    <p>RIPQ Has High Fidelity!</p>
    <p>O bj</p>
    <p>ec t</p>
    <p>w is</p>
    <p>e hi</p>
    <p>tra</p>
    <p>tio (%</p>
    <p>)!</p>
    <p>SLRU-1 SLRU-2 SLRU-3 GDSF-1 GDSF-2 GDSF-3 FIFO</p>
    <p>Exact</p>
    <p>RIPQ</p>
    <p>FIFO</p>
  </div>
  <div class="page">
    <p>RIPQ Has High Fidelity!</p>
    <p>O bj</p>
    <p>ec t</p>
    <p>w is</p>
    <p>e hi</p>
    <p>tra</p>
    <p>tio (%</p>
    <p>)!</p>
    <p>SLRU-1 SLRU-2 SLRU-3 GDSF-1 GDSF-2 GDSF-3 FIFO</p>
    <p>Exact</p>
    <p>RIPQ</p>
    <p>FIFO</p>
    <p>RIPQ achieves 0.5% difference for all algorithms!</p>
  </div>
  <div class="page">
    <p>RIPQ Has High Fidelity!</p>
    <p>O bj</p>
    <p>ec t</p>
    <p>w is</p>
    <p>e hi</p>
    <p>tra</p>
    <p>tio (%</p>
    <p>)!</p>
    <p>SLRU-1 SLRU-2 SLRU-3 GDSF-1 GDSF-2 GDSF-3 FIFO</p>
    <p>Exact</p>
    <p>RIPQ</p>
    <p>FIFO</p>
    <p>+16% hit-ratio  23% fewer backend IOs!</p>
    <p>+16%</p>
  </div>
  <div class="page">
    <p>RIPQ Has High Throughput!</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (r</p>
    <p>eq ./s</p>
    <p>ec )!</p>
    <p>RIPQ throughput comparable to FIFO (10% diff.) !</p>
    <p>SLRU-1 SLRU-2 SLRU-3 GDSF-1 GDSF-2 GDSF-3</p>
    <p>RIPQ</p>
    <p>FIFO</p>
  </div>
  <div class="page">
    <p>Related Works! RAM-based advanced caching!</p>
    <p>SLRU(Karedla94), GDSF(Young94, Cao97, Cherkasova01), SIZE(Abrams96), LFU(Maffeis93), LIRS (Jiang02),  !</p>
    <p>Flash-based caching solutions! Facebook FlashCache, Janus(Albrecht 13), Nitro(Li13), OP-FCL(Oh12), FlashTier(Saxena12), Hec(Yang13),</p>
    <p>Flash performance! Stoica09, Chen09, Bouganim09, Min12,  !</p>
    <p>RIPQ enables their use on flash!</p>
    <p>RIPQ supports advanced algorithms!</p>
    <p>Trend continues for modern flash cards!</p>
  </div>
  <div class="page">
    <p>RIPQ!  First framework for advanced caching on flash!  Relative priority queue interface!  Large writes!  Restricted insertion points!  Lazy update!  Section merge/split!</p>
    <p>Enables SLRU-3 &amp; GDSF-3 for Facebook photos!  10% less backbone traffic!  23% fewer backend IOs!</p>
  </div>
</Presentation>
