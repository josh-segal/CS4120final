<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Spiffy: Enabling File-System</p>
    <p>Aware Storage Applications</p>
    <p>Kuei (Jack) Sun, Daniel Fryer, Joseph Chu, Matthew Lakier,</p>
    <p>Angela Demke Brown, and Ashvin Goel</p>
    <p>University of Toronto</p>
  </div>
  <div class="page">
    <p>Introduction</p>
    <p>File-system aware applications</p>
    <p>E.g. partition editor, file system checker, defragmentation tool</p>
    <p>Operate directly on file system metadata structures</p>
    <p>Require detailed knowledge of file system format on disk</p>
    <p>Bypass VFS layer</p>
    <p>Essential for successful deployment of file system</p>
  </div>
  <div class="page">
    <p>Problem</p>
    <p>Tools have to be developed from scratch for each file system</p>
    <p>Tools developed only by experts</p>
    <p>Bugs lead to system crash, data corruption, security vulnerability</p>
    <p>Example: bug 723343 in ntfsprogs</p>
    <p>NTFS stores the size of MFT record as either:</p>
    <p># of clusters per record, if value &gt; 0</p>
    <p>2|value|, if value &lt; 0</p>
    <p>ntfsprogs misinterprets this field, corrupting NTFS when resizing partitions</p>
  </div>
  <div class="page">
    <p>Root Cause</p>
    <p>File-system applications are difficult to write</p>
    <p>File system format complex and often poorly documented</p>
    <p>Require detailed knowledge of format</p>
    <p>Cannot be reused across file systems</p>
    <p>Need to handle file system corruption</p>
  </div>
  <div class="page">
    <p>Goals</p>
    <p>Simplify development of file-system aware applications</p>
    <p>Reduce file-system specific code</p>
    <p>Enable code reuse across file systems</p>
    <p>Improve robustness of these applications</p>
    <p>Enable correct traversal of file system metadata</p>
    <p>Ensure type safe access to file system structures</p>
    <p>Helps detect corruption for both read and write</p>
    <p>Helps reduce error propagation, and further corruption</p>
  </div>
  <div class="page">
    <p>Approach: Spiffy Framework</p>
    <p>File system developers specify the format of their file system</p>
    <p>Spiffy uses specification to generate parsing and serialization</p>
    <p>library</p>
    <p>Developers use library to build robust file-system aware</p>
    <p>applications</p>
  </div>
  <div class="page">
    <p>Specifying Format</p>
    <p>File system developers annotate metadata structures in</p>
    <p>header files of existing source code</p>
    <p>File System</p>
    <p>Developer</p>
    <p>File System</p>
    <p>Metadata</p>
    <p>Structures</p>
    <p>Annotations</p>
  </div>
  <div class="page">
    <p>Generating Library</p>
    <p>Spiffy compiler processes annotated metadata structures</p>
    <p>to generate library that provides a generic API for type-safe</p>
    <p>parsing, traversal and serialization of file system structures</p>
    <p>Spiffy</p>
    <p>Compiler</p>
    <p>Spiffy</p>
    <p>Library</p>
    <p>Spiffy</p>
    <p>API</p>
    <p>File System</p>
    <p>Developer</p>
    <p>File System</p>
    <p>Metadata</p>
    <p>Structures</p>
    <p>Annotations</p>
  </div>
  <div class="page">
    <p>Building Applications</p>
    <p>Application developers use Spiffy library to build robust tools</p>
    <p>that work across file systems</p>
    <p>Generic</p>
    <p>Application</p>
    <p>File-System</p>
    <p>Specific Logic</p>
    <p>Application</p>
    <p>Developer</p>
    <p>Spiffy</p>
    <p>Compiler</p>
    <p>Spiffy</p>
    <p>Library</p>
    <p>Spiffy</p>
    <p>API</p>
    <p>File System</p>
    <p>Developer</p>
    <p>File System</p>
    <p>Metadata</p>
    <p>Structures</p>
    <p>Annotations</p>
  </div>
  <div class="page">
    <p>Talk Outline</p>
    <p>Problem</p>
    <p>Hard to write robust file system applications</p>
    <p>Approach</p>
    <p>Spiffy Annotations</p>
    <p>Spiffy Library</p>
    <p>Spiffy Applications</p>
    <p>Evaluation</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Need for Annotations</p>
    <p>Need complete specification of the file system format</p>
    <p>Allows type-safe parsing and updates of file system structures</p>
    <p>Challenge</p>
    <p>Data structure definitions in source files are incomplete</p>
    <p>bar_block_ptr is probably a 32-bit little endian pointer to type bar_block</p>
    <p>However, its hard to deduce this type information</p>
    <p>struct foo {</p>
    <p>__le32 size;</p>
    <p>__le32 bar_block_ptr;</p>
    <p>};</p>
  </div>
  <div class="page">
    <p>Need for Annotations</p>
    <p>Solution</p>
    <p>Annotate structures to supply missing information</p>
    <p>FSSTRUCT() foo {</p>
    <p>__le32 size;</p>
    <p>POINTER(..., type=bar_block)</p>
    <p>__le32 bar_block_ptr;</p>
    <p>};</p>
  </div>
  <div class="page">
    <p>Pointer Annotations</p>
    <p>Ext4 File System</p>
    <p>Metadata Tree</p>
    <p>block</p>
    <p>bitmap</p>
    <p>super</p>
    <p>block ext4 journal</p>
    <p>block group</p>
    <p>descriptor table</p>
    <p>inode</p>
    <p>table</p>
    <p>block</p>
    <p>group</p>
    <p>descriptor</p>
    <p>inode</p>
    <p>(reg file)</p>
    <p>inode</p>
    <p>(directory)</p>
    <p>dir</p>
    <p>block</p>
    <p>dir</p>
    <p>indirect</p>
    <p>block</p>
    <p>dir</p>
    <p>blocks</p>
    <p>data</p>
    <p>block</p>
    <p>inode</p>
    <p>bitmap</p>
    <p>block</p>
    <p>group</p>
    <p>descriptor</p>
  </div>
  <div class="page">
    <p>Pointer Address Space</p>
    <p>Challenge: File system pointer can store different types of</p>
    <p>logical addresses</p>
    <p>Need different mappings to obtain physical address</p>
    <p>Solution: Pointer annotations specify an address space that</p>
    <p>indicates how the address should be mapped to physical location</p>
    <p>Examples: Block, File, F2FS NID address spaces</p>
    <p>POINTER(addrspace=block, type=bar_block)</p>
  </div>
  <div class="page">
    <p>Block Address Space</p>
    <p>Block address is the block number in the file system</p>
    <p>block</p>
    <p>bitmap</p>
    <p>super</p>
    <p>block ext4 journal</p>
    <p>block group</p>
    <p>descriptor table</p>
    <p>inode</p>
    <p>table</p>
    <p>block</p>
    <p>group</p>
    <p>descriptor</p>
    <p>inode</p>
    <p>(reg file)</p>
    <p>inode</p>
    <p>(directory)</p>
    <p>dir</p>
    <p>indirect</p>
    <p>block</p>
    <p>inode</p>
    <p>bitmap</p>
    <p>block</p>
    <p>group</p>
    <p>descriptor</p>
    <p>block addr</p>
    <p>block addr block addr</p>
    <p>block addr block addrblock addr</p>
  </div>
  <div class="page">
    <p>ext4 journal</p>
    <p>File Address Space</p>
    <p>File address is an index into the inode table for a file</p>
    <p>E.g. Ext4 journal is stored as a regular file</p>
    <p>Regular file may be physically discontiguous</p>
    <p>Requires mapping logical blocks of the file to their physical locations</p>
    <p>ext4 journal on physical disk</p>
    <p>super</p>
    <p>block</p>
    <p>block group</p>
    <p>descriptor table</p>
    <p>block</p>
    <p>group</p>
    <p>descriptor</p>
    <p>block addr</p>
    <p>block addr</p>
  </div>
  <div class="page">
    <p>Missing Pointer</p>
    <p>Locations of some structures are implicit in the code</p>
    <p>E.g. Ext4 block group descriptor table is the next block following</p>
    <p>the super block</p>
    <p>Ext4 super block does not have a</p>
    <p>field that points to descriptor table</p>
    <p>Pointer required for file system</p>
    <p>traversal</p>
    <p>super</p>
    <p>block ext4 journal</p>
    <p>block group</p>
    <p>descriptor table</p>
    <p>block</p>
    <p>group</p>
    <p>descriptor</p>
    <p>missing pointer</p>
  </div>
  <div class="page">
    <p>Implicit Pointer</p>
    <p>Solution: Implicit pointer annotation</p>
    <p>name creates a logical pointer field that can be dereferenced</p>
    <p>expr is a C expression that specifies how to calculate the field value</p>
    <p>Expression can reference other fields in the structure</p>
    <p>FSSUPER(...) ext4_super_block {</p>
    <p>__le32 s_log_block_size;</p>
    <p>...</p>
    <p>POINTER(name=s_block_group_desc,</p>
    <p>type=ext4_group_desc_table, addrspace=block,</p>
    <p>expr=(self.s_log_block_size == 0) ? 2 : 1);</p>
    <p>};</p>
    <p>super</p>
    <p>block ext4 journal</p>
    <p>block group</p>
    <p>descriptor table</p>
    <p>block</p>
    <p>group</p>
    <p>descriptor</p>
    <p>implicit pointer</p>
    <p>annotation s_block_group_desc</p>
  </div>
  <div class="page">
    <p>Context-Sensitive Types</p>
    <p>A pointer may point to different types of metadata</p>
    <p>Pointers in inode structure can point to directory or data blocks</p>
    <p>Supported by specifying WHEN condition in pointer annotation</p>
    <p>FSSTRUCT(...) ext4_inode {</p>
    <p>__le16 i_mode;</p>
    <p>POINTER(addrspace=block, type=dir_block,</p>
    <p>when=self.i_mode &amp; S_IFDIR)</p>
    <p>POINTER(addrspace=block, type=data_block,</p>
    <p>when=self.i_mode &amp; S_IFREG)</p>
    <p>__le32 i_block[EXT3_NDIR_BLOCKS];</p>
    <p>};</p>
    <p>inode</p>
    <p>table</p>
    <p>inode</p>
    <p>(reg file)</p>
    <p>inode</p>
    <p>(directory)</p>
    <p>dir</p>
    <p>block data</p>
    <p>block</p>
  </div>
  <div class="page">
    <p>FSSUPER() ext4_super_block {</p>
    <p>__le32 s_log_block_size;</p>
    <p>__le16 s_magic;</p>
    <p>CHECK(expr=self.s_log_block_size &lt;= 6);</p>
    <p>CHECK(expr=self.s_magic == 0xef53);</p>
    <p>};</p>
    <p>Check Annotations</p>
    <p>int Ext4SuperBlock::parse(const char * &amp; buf, unsigned &amp; len) {</p>
    <p>int ret;</p>
    <p>if ((ret = s_log_block_size.parse(buf, len)) &lt; 0) return ret;</p>
    <p>if (!(s_log_block_size &lt;= 6)) return ERR_CORRUPT;</p>
    <p>if (!(s_magic == 0xef53)) return ERR_CORRUPT;</p>
    <p>return 0;</p>
    <p>}</p>
    <p>Generated Code for ext4_super_block</p>
  </div>
  <div class="page">
    <p>Generating Spiffy Library</p>
    <p>C++ classes are generated for all annotated structures</p>
    <p>and their fields</p>
    <p>Enables type-safe parsing and serialization</p>
    <p>Allows introspection of type, size, name, and parent</p>
    <p>int Ext4SuperBlock::parse(const char * &amp; buf, unsigned &amp; len) {</p>
    <p>int ret;</p>
    <p>if ((ret = s_log_block_size.parse(buf, len)) &lt; 0) return ret;</p>
    <p>if (!(s_log_block_size &lt;= 6)) return ERR_CORRUPT;</p>
    <p>if (!(s_magic == 0xef53)) return ERR_CORRUPT;</p>
    <p>return 0;</p>
    <p>}</p>
    <p>Generated Code for ext4_super_block</p>
  </div>
  <div class="page">
    <p>Evaluation: Annotation Effort</p>
    <p>Lines of code required to correctly annotate modern file systems</p>
    <p>Need to declare some structures</p>
    <p>E.g. Ext4 indirect block is assumed to be an array of 4-byte pointers</p>
    <p>Changed some structures for clarity</p>
    <p>E.g. block pointers in Ext4 inode is an array of 15 pointers, the first 12 are direct</p>
    <p>block pointers, while the last 3 are indirect pointers of different types</p>
    <p>File System Line Count Annotated</p>
    <p>Ext4 491 113</p>
    <p>Btrfs 556 151</p>
    <p>F2FS 462 127</p>
  </div>
  <div class="page">
    <p>Building Applications</p>
    <p>Example: File System Free Space Tool</p>
    <p>Plots histogram of size of free extents</p>
    <p>Application requires knowledge of how file system tracks block allocation</p>
    <p>Manually</p>
    <p>Write code to traverse file system and access relevant metadata</p>
    <p>Often through trial-and-error</p>
    <p>Write code to process relevant metadata</p>
    <p>Spiffy framework</p>
    <p>Simplifies the traversal and helps make it more robust</p>
    <p>Application program focuses on processing relevant metadata</p>
  </div>
  <div class="page">
    <p>int process_ext4(vector&lt;Extent&gt; &amp; vec, Device &amp; dev) {</p>
    <p>/* ext4 super block is 1024 bytes away from start */</p>
    <p>struct ext4_super_block * sb = dev.read(1024, SB_SIZE);</p>
    <p>int blk_size = 1024 &lt;&lt; sb-&gt;s_log_block_size;</p>
    <p>dev.set_block_size(blk_size);</p>
    <p>/* block group descriptors start at block 2 or 1 */</p>
    <p>int bg_blknr = (sb-&gt;s_log_block_size == 0) 2 : 1;</p>
    <p>int bg_ngrps = ceil(sb-&gt;s_blocks_count, sb-&gt;s_blocks_per_group);</p>
    <p>int bg_nblks = ceil(bg_ngrps*sizeof(struct ext4_group_desc), blk_size);</p>
    <p>/* read all of the block group descriptors into memory */</p>
    <p>struct ext4_group_desc * gd = dev.read_block(bg_blknr, bg_nblks);</p>
    <p>for (int i = 0; i &lt; bg_ngrps; ++i) {</p>
    <p>char * buf = dev.read_block(gd[i]-&gt;bg_block_bitmap);</p>
    <p>int ret = process_block_bitmap(buf, vec);</p>
    <p>}</p>
    <p>}</p>
    <p>Manually-Written Application</p>
    <p>LOTS of boilerplate code to walk through the intermediate structures</p>
  </div>
  <div class="page">
    <p>int process_ext4(vector&lt;Extent&gt; &amp; vec, Device &amp; dev) {</p>
    <p>/* ext4 super block is 1024 bytes away from start */</p>
    <p>struct ext4_super_block * sb = dev.read(1024, SB_SIZE);</p>
    <p>int blk_size = 1024 &lt;&lt; sb-&gt;s_log_block_size;</p>
    <p>dev.set_block_size(blk_size);</p>
    <p>/* block group descriptors start at block 2 or 1 */</p>
    <p>int bg_blknr = (sb-&gt;s_log_block_size == 0) 2 : 1;</p>
    <p>int bg_ngrps = ceil(sb-&gt;s_blocks_count, sb-&gt;s_blocks_per_group);</p>
    <p>int bg_nblks = ceil(bg_ngrps*sizeof(struct ext4_group_desc), blk_size);</p>
    <p>/* read all of the block group descriptors into memory */</p>
    <p>struct ext4_group_desc * gd = dev.read_block(bg_blknr, bg_nblks);</p>
    <p>for (int i = 0; i &lt; bg_ngrps; ++i) {</p>
    <p>char * buf = dev.read_block(gd[i]-&gt;bg_block_bitmap);</p>
    <p>int ret = process_block_bitmap(buf, vec);</p>
    <p>}</p>
    <p>}</p>
    <p>Manually-Written Application</p>
    <p>Ideally, we would only have to write this function</p>
  </div>
  <div class="page">
    <p>int process_ext4(vector&lt;Extent&gt; &amp; vec, Device &amp; dev) {</p>
    <p>/* ext4 super block is 1024 bytes away from start */</p>
    <p>struct ext4_super_block * sb = dev.read(1024, SB_SIZE);</p>
    <p>int blk_size = 1024 &lt;&lt; sb-&gt;s_log_block_size;</p>
    <p>dev.set_block_size(blk_size);</p>
    <p>/* block group descriptors start at block 2 or 1 */</p>
    <p>int bg_blknr = (sb-&gt;s_log_block_size == 0) 2 : 1;</p>
    <p>int bg_ngrps = ceil(sb-&gt;s_blocks_count, sb-&gt;s_blocks_per_group);</p>
    <p>int bg_nblks = ceil(bg_ngrps*sizeof(struct ext4_group_desc), blk_size);</p>
    <p>/* read all of the block group descriptors into memory */</p>
    <p>struct ext4_group_desc * gd = dev.read_block(bg_blknr, bg_nblks);</p>
    <p>for (int i = 0; i &lt; bg_ngrps; ++i) {</p>
    <p>char * buf = dev.read_block(gd[i]-&gt;bg_block_bitmap);</p>
    <p>int ret = process_block_bitmap(buf, vec);</p>
    <p>}</p>
    <p>}</p>
    <p>Manually-Written Application</p>
    <p>No sanity checks! Value may be out-of-bound or invalid,</p>
    <p>which can cause crashes or garbage output</p>
  </div>
  <div class="page">
    <p>Application Using Spiffy Library</p>
    <p>int process_ext4(vector&lt;Extent&gt; &amp; vec, Device &amp; dev) {</p>
    <p>process_block_bitmap, &amp;vec);</p>
    <p>}</p>
    <p>Returns nullptr</p>
    <p>if super block</p>
    <p>is corrupted</p>
  </div>
  <div class="page">
    <p>int process_ext4(vector&lt;Extent&gt; &amp; vec, Device &amp; dev) {</p>
    <p>process_block_bitmap, &amp;vec);</p>
    <p>}</p>
    <p>Application Using Spiffy Library</p>
    <p>THATS IT</p>
  </div>
  <div class="page">
    <p>int process_ext4(vector&lt;Extent&gt; &amp; vec, Device &amp; dev) {</p>
    <p>process_block_bitmap, &amp;vec);</p>
    <p>}</p>
    <p>Application Using Spiffy Library</p>
    <p>Advantages</p>
    <p>simplifies file system traversal, reduces need to know format details</p>
    <p>library parsing routines have automatically generated sanity checks 29</p>
  </div>
  <div class="page">
    <p>Spiffy Application for Btrfs</p>
    <p>int process_btrfs(vector&lt;Extent&gt; &amp; vec, Device &amp; dev) {</p>
    <p>process_extent_item, &amp;vec);</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>Spiffy Applications</p>
    <p>File System Free Space Tool</p>
    <p>Type-Specific File System Corruptor</p>
    <p>File System Conversion Tool</p>
    <p>File-system aware block layer cache</p>
  </div>
  <div class="page">
    <p>Type-Specific File System Corruptor</p>
    <p>Finds and corrupts a field in a specified structure</p>
    <p>Works for all annotated file systems</p>
    <p>Generic Application Code: 455 LOC</p>
    <p>File-System Specific Code: &lt; 30 LOC each</p>
    <p>Corruption Experiment</p>
    <p>Ran existing tools on corrupt file system image</p>
    <p>Discovered 1 crash bug in dumpe2fs (Ext4)</p>
    <p>Discovered 5 crash bugs in dump.f2fs (F2FS)</p>
    <p>None in our Spiffy dump tool on Ext4, Btrfs and F2FS</p>
  </div>
  <div class="page">
    <p>File System Conversion Tool</p>
    <p>Converts one file system to another while minimizing copying</p>
    <p>data blocks</p>
    <p>Currently, converts from Ext4 to F2FS</p>
    <p>Generic application code: 504 LOC</p>
    <p>Ext4 specific code (source file system): 218 LOC</p>
    <p>F2FS specific code (destination file system): 1760 LOC</p>
  </div>
  <div class="page">
    <p>Evaluation: Ext4 to F2FS Converter</p>
    <p>Compare copy-based converter vs. Spiffy converter</p>
    <p>Copy converter copies data to local disk, reformat, then copies back</p>
    <p>Converts 64GB file system with 16GB of data on SSD</p>
    <p>Copy converter 30~50 times slower 34</p>
    <p>se c</p>
    <p>o n</p>
    <p>d s</p>
    <p># of files</p>
    <p>Copy</p>
    <p>Converter</p>
    <p>Spiffy</p>
    <p>Converter</p>
  </div>
  <div class="page">
    <p>File-system Aware Block Layer Cache</p>
    <p>Supports a rich set of caching policies that require file-system</p>
    <p>specific information at the block layer</p>
    <p>Cache file system metadata</p>
    <p>Requires knowing whether a block is data or metadata</p>
    <p>Cache small files, cache a specific users files</p>
    <p>Requires knowing the file to which a block belongs, and the files size or owner</p>
    <p>Requires no changes to the file system!</p>
    <p>Identifies and interprets blocks as they are read or written</p>
    <p>Identifies the types of blocks</p>
    <p>Interprets their contents to extract file-system specific information</p>
    <p>Requires little file-system specific code 35</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Spiffy framework</p>
    <p>Annotation language for specifying file system format</p>
    <p>Enables generating a library for traversing file system metadata</p>
    <p>Simplifies development of file-system aware applications</p>
    <p>Reduces file-system specific code</p>
    <p>Enables code reuse across file systems</p>
    <p>Enables writing robust applications</p>
    <p>Provides type-safe parsing and serialization of metadata</p>
    <p>Helps detect file system corruption</p>
  </div>
  <div class="page">
    <p>Spiffy: Enabling File-System</p>
    <p>Aware Storage Applications</p>
    <p>Presented by Kuei (Jack) Sun</p>
  </div>
  <div class="page">
    <p>Spiffy API (C++)</p>
    <p>Base Class Member Functions Description</p>
    <p>Spiffy File System Library</p>
    <p>Entity int process_fields(Visitor &amp; v) allows v to visit all fields of this object</p>
    <p>int process_pointer(Visitor &amp; v) allows v to visit all pointers of this object</p>
    <p>int process_by_type(int t,</p>
    <p>Visitor &amp; v)</p>
    <p>allows v to visit all structures of type t that is reachable from this object</p>
    <p>get_name(), get_size(), etc. allows for type introspection</p>
    <p>Container int save(bool alloc=true) serializes and persists the container</p>
    <p>Pointer Container * fetch() retrieves pointed-to container from disk</p>
    <p>FileSystem FileSystem(IO &amp; io) instantiates a new file system object</p>
    <p>Container * fetch_super() retrieves the super block from disk</p>
    <p>Container * parse_by_type(int type,</p>
    <p>..., const char * buf, size_t len)</p>
    <p>parses the buffer buf as metadata container type</p>
    <p>Application Developer</p>
    <p>Visitor virtual int visit(Entity &amp; e)=0; visits an entity and possibly processes it 38</p>
  </div>
  <div class="page">
    <p>File-System Agnostic Traversal</p>
    <p>EntVisitor ev;</p>
    <p>PtrVisitor pv;</p>
    <p>int PtrVisitor::visit(Entity &amp; e) {</p>
    <p>Container * tmp;</p>
    <p>tmp = ((Pointer &amp;)e).fetch();</p>
    <p>if (tmp != nullptr) {</p>
    <p>ev.visit(*tmp);</p>
    <p>tmp-&gt;destroy();</p>
    <p>}</p>
    <p>return 0;</p>
    <p>}</p>
    <p>int EntVisitor::visit(Entity &amp; e) {</p>
    <p>cout &lt;&lt; e.get_name() &lt;&lt; endl;</p>
    <p>return e.process_pointers(pv);</p>
    <p>}</p>
    <p>void main(void) {</p>
    <p>Ext4IO io(&quot;/dev/sdb1&quot;);</p>
    <p>Ext4 fs(io);</p>
    <p>Container * sup = fs.fetch_super();</p>
    <p>if (sup != nullptr) {</p>
    <p>ev.visit(*sup);</p>
    <p>sup-&gt;destroy();</p>
    <p>}</p>
    <p>}</p>
    <p>Simple example to traverse the</p>
    <p>entire file system</p>
    <p>No file-system specific code</p>
    <p>required (except for bootstrap)</p>
  </div>
  <div class="page">
    <p>File-System Agnostic Traversal</p>
    <p>EntVisitor ev;</p>
    <p>PtrVisitor pv;</p>
    <p>int PtrVisitor::visit(Entity &amp; e) {</p>
    <p>Container * tmp;</p>
    <p>tmp = ((Pointer &amp;)e).fetch();</p>
    <p>if (tmp != nullptr) {</p>
    <p>ev.visit(*tmp);</p>
    <p>tmp-&gt;destroy();</p>
    <p>}</p>
    <p>return 0;</p>
    <p>}</p>
    <p>int EntVisitor::visit(Entity &amp; e) {</p>
    <p>cout &lt;&lt; e.get_name() &lt;&lt; endl;</p>
    <p>return e.process_pointers(pv);</p>
    <p>}</p>
    <p>void main(void) {</p>
    <p>Ext4IO io(&quot;/dev/sdb1&quot;);</p>
    <p>Ext4 fs(io);</p>
    <p>Container * sup = fs.fetch_super();</p>
    <p>if (sup != nullptr) {</p>
    <p>ev.visit(*sup);</p>
    <p>sup-&gt;destroy();</p>
    <p>}</p>
    <p>}</p>
    <p>Traversal begins from super block</p>
    <p>Uses two mutually recursive</p>
    <p>visitors to traverse the whole file</p>
    <p>system</p>
  </div>
  <div class="page">
    <p>File-System Agnostic Traversal</p>
    <p>EntVisitor ev;</p>
    <p>PtrVisitor pv;</p>
    <p>int PtrVisitor::visit(Entity &amp; e) {</p>
    <p>Container * tmp;</p>
    <p>tmp = ((Pointer &amp;)e).fetch();</p>
    <p>if (tmp != nullptr) {</p>
    <p>ev.visit(*tmp);</p>
    <p>tmp-&gt;destroy();</p>
    <p>}</p>
    <p>return 0;</p>
    <p>}</p>
    <p>int EntVisitor::visit(Entity &amp; e) {</p>
    <p>cout &lt;&lt; e.get_name() &lt;&lt; endl;</p>
    <p>return e.process_pointers(pv);</p>
    <p>}</p>
    <p>void main(void) {</p>
    <p>Ext4IO io(&quot;/dev/sdb1&quot;);</p>
    <p>Ext4 fs(io);</p>
    <p>Container * sup = fs.fetch_super();</p>
    <p>if (sup != nullptr) {</p>
    <p>ev.visit(*sup);</p>
    <p>sup-&gt;destroy();</p>
    <p>}</p>
    <p>}</p>
    <p>EntVisitor prints name of entity e, then calls PtrVisitor::visit</p>
    <p>on all pointer fields within entity e</p>
  </div>
  <div class="page">
    <p>File-System Agnostic Traversal</p>
    <p>EntVisitor ev;</p>
    <p>PtrVisitor pv;</p>
    <p>int PtrVisitor::visit(Entity &amp; e) {</p>
    <p>Container * tmp;</p>
    <p>tmp = ((Pointer &amp;)e).fetch();</p>
    <p>if (tmp != nullptr) {</p>
    <p>ev.visit(*tmp);</p>
    <p>tmp-&gt;destroy();</p>
    <p>}</p>
    <p>return 0;</p>
    <p>}</p>
    <p>int EntVisitor::visit(Entity &amp; e) {</p>
    <p>cout &lt;&lt; e.get_name() &lt;&lt; endl;</p>
    <p>return e.process_pointers(pv);</p>
    <p>}</p>
    <p>void main(void) {</p>
    <p>Ext4IO io(&quot;/dev/sdb1&quot;);</p>
    <p>Ext4 fs(io);</p>
    <p>Container * sup = fs.fetch_super();</p>
    <p>if (sup != nullptr) {</p>
    <p>ev.visit(*sup);</p>
    <p>sup-&gt;destroy();</p>
    <p>}</p>
    <p>}</p>
    <p>PtrVisitor fetches the pointed-to</p>
    <p>Container from disk, then calls EntVisitor::visit on the</p>
    <p>pointed-to Container</p>
  </div>
  <div class="page">
    <p>Evaluation: Programming Effort</p>
    <p>Programming effort reduced for read-only file system applications</p>
    <p>Both online and offline</p>
    <p>Applications Generic (LOC) File-System Specific (LOC)</p>
    <p>XML Dump Tool 565 40~50</p>
    <p>Free Space Display Tool 271 76~194 (F2FS)</p>
    <p>Type-Specific Corruptor 455 &lt; 30</p>
    <p>Ext4 to F2FS Converter 504 218 (Ext4), 1760 (F2FS)</p>
    <p>Runtime Interpretation 2158 111 (Ext4), 134 (Btrfs)</p>
    <p>Differentiated Storage</p>
    <p>- Block Layer Cache 10518 N/A</p>
    <p>- Preferential Caching 289 N/A</p>
  </div>
  <div class="page">
    <p>Evaluation: Corruption Experiment</p>
    <p>Run Spiffy dump tool and existing dump tools on corrupt images</p>
    <p>Corrupt images generated by type-specific corruptor</p>
    <p>Spiffy is robust against corruption, found crashes on existing tools</p>
    <p>Tool Structure Field Description</p>
    <p>dumpe2fs super block s_creator_os index out of bound error during OS name lookup</p>
    <p>dump.f2fs super block log_blocks_per_seg index out of bound error while building nat bitmap</p>
    <p>super block segment_count_main null pointer dereference after calloc fails</p>
    <p>checkpoint cp_blkaddr double free error during error handling</p>
    <p>summary n_nats index out of bound error during nid lookup</p>
    <p>inode i_namelen index out of bound error when adding null character to end of name</p>
  </div>
  <div class="page">
    <p>Evaluation: Preferential Caching</p>
    <p>2 identical fileservers running on block layer cache</p>
    <p>Overall performance improves with preferential caching</p>
    <p>Fileserver A + Fileserver B, A is preferred</p>
    <p>Fileserver A + Fileserver B, no preference</p>
    <p>Fileserver A, alone</p>
    <p>Fileserver A + Fileserver B, A is preferred</p>
    <p>Fileserver A + Fileserver B, no preference</p>
    <p>Fileserver A, alone</p>
    <p>ops/s Fileserver A Fileserver B</p>
    <p>Btrfs</p>
    <p>Ext4</p>
  </div>
  <div class="page">
    <p>FSSUPER Annotation</p>
    <p>Super block is the root of every file system tree</p>
    <p>Specified using FSSUPER annotation</p>
    <p>location argument specifies address in byte offset</p>
    <p>FSSUPER(location=1024) ext4_super_block {</p>
    <p>__le32 s_log_block_size;</p>
    <p>...</p>
    <p>POINTER(addrspace=file, type=ext4_journal)</p>
    <p>__le32 s_journal_inum;</p>
    <p>};</p>
    <p>supzer block</p>
    <p>ext4 journalfile addr.</p>
  </div>
  <div class="page">
    <p>F2FS NID Address Space</p>
    <p>NID address is an index into the node address table for an</p>
    <p>F2FS metadata block</p>
  </div>
</Presentation>
