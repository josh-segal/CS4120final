<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Correctness Proofs for Device Drivers in Embedded Systems</p>
    <p>Jianjun Duan, John Regehr</p>
    <p>School of Computing</p>
    <p>University of Utah</p>
    <p>Oct. 7, 2010</p>
  </div>
  <div class="page">
    <p>Embedded systems</p>
  </div>
  <div class="page">
    <p>processor core memory</p>
    <p>Cambridge ARM model Fox (2003)</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>processor core memory</p>
    <p>device</p>
    <p>environment</p>
    <p>device</p>
  </div>
  <div class="page">
    <p>Layered proof</p>
    <p>application</p>
    <p>driver driver</p>
    <p>device device</p>
    <p>application correctness  automation and scalability</p>
    <p>memorymapped access</p>
    <p>functional correctness of device drivers  reasoning about timing  not much automation</p>
    <p>API</p>
  </div>
  <div class="page">
    <p>Our work</p>
    <p>Abstract device model to be plugged into an instruction set architecture model</p>
    <p>A realistic serial port (UART) model</p>
    <p>Strong properties including timing constraints</p>
    <p>Full correctness proof for a UART driver</p>
    <p>Implementation based on ARM v6 model in HOL4</p>
  </div>
  <div class="page">
    <p>driver</p>
    <p>Related work</p>
    <p>device</p>
    <p>Alkassar et al. (2007, 2008), Monniaux (2007)</p>
    <p>Difficult to reason about timing property</p>
  </div>
  <div class="page">
    <p>System with devices</p>
    <p>processor memory</p>
    <p>arbitrator</p>
    <p>device device device</p>
    <p>memory</p>
    <p>address/data</p>
    <p>processor clock</p>
    <p>device clock</p>
  </div>
  <div class="page">
    <p>Device model</p>
    <p>Set of memory-mapped device registers :</p>
    <p>Read effect : (  )</p>
    <p>Write effect : (    )</p>
    <p>Autonomous transition :</p>
    <p>Device state must be well-formed :</p>
  </div>
  <div class="page">
    <p>undefined</p>
    <p>processor + memory state</p>
    <p>devices state</p>
    <p>data</p>
    <p>addr</p>
    <p>transit</p>
    <p>read + transit</p>
    <p>write + transit</p>
    <p>Parallel state transition instruction cycle</p>
  </div>
  <div class="page">
    <p>UART input stream</p>
    <p>A B C D E</p>
    <p>receive buffer input stream</p>
    <p>no char available</p>
  </div>
  <div class="page">
    <p>UART input stream</p>
    <p>receive buffer input stream</p>
    <p>B C D E A char available</p>
    <p>A B C D E no char available</p>
  </div>
  <div class="page">
    <p>UART input stream</p>
    <p>A C D E</p>
    <p>receive buffer input stream</p>
    <p>buffer overrun</p>
    <p>B</p>
    <p>B C D E A char available</p>
    <p>A B C D E no char available</p>
  </div>
  <div class="page">
    <p>read char</p>
    <p>receive a char</p>
    <p>no char available</p>
    <p>undefined</p>
    <p>read char</p>
    <p>char available</p>
    <p>receive no char</p>
    <p>receive a char</p>
    <p>buffer overrun</p>
    <p>UART receive state machine</p>
    <p>Can the driver avoid buffer overrun?</p>
  </div>
  <div class="page">
    <p>LPC2129 is based on ARM7TDMI-S  306 page manual  12 pages for UART0</p>
  </div>
  <div class="page">
    <p>LPC2129 UART0 model</p>
    <p>Functional model at character level</p>
    <p>Side effect and undefined behavior of memory-mapped access of registers</p>
    <p>Speed of UART relative to the processor</p>
    <p>allows timing properties to be expressed</p>
    <p>Buffer size = 1</p>
    <p>No interrupt support</p>
  </div>
  <div class="page">
    <p>Modeling UART speed</p>
    <p>frequency divider</p>
    <p>Processor core speed UART speed</p>
  </div>
  <div class="page">
    <p>&lt;getchW&gt;:</p>
    <p>ldr r2, uart0rbr</p>
    <p>ldrb r3, [r2, #20]</p>
    <p>tst r3, #1</p>
    <p>beq &lt;getchW&gt;</p>
    <p>ldrb r0, [r2]</p>
    <p>mov pc, lr</p>
    <p>&lt;putch&gt;:</p>
    <p>ldr r2, uart0rbr</p>
    <p>ldrb r3, [r2, #20]</p>
    <p>tst r3, #32</p>
    <p>beq &lt;putch&gt;</p>
    <p>and r0, r0, #225</p>
    <p>strb r0, [r2]</p>
    <p>mov pc, lr</p>
    <p>&lt;getch&gt;:</p>
    <p>ldr r2, uart0rbr</p>
    <p>ldrb r3, [r2, #20]</p>
    <p>tst r3, #1</p>
    <p>ldrneb r3, [r2]</p>
    <p>mvn r0, #0</p>
    <p>andne r0, r3, #255</p>
    <p>mov pc, lr</p>
    <p>Compiled from open-source C code</p>
  </div>
  <div class="page">
    <p>Receive a string using getchW</p>
    <p>UART speed divider &gt; 9 + d</p>
    <p>getchW</p>
    <p>call getchW</p>
    <p>d</p>
    <p>inside one UART cycle</p>
    <p>busy waiting</p>
    <p>overhead</p>
  </div>
  <div class="page">
    <p>Correctness of getchW</p>
    <p>UART speed divider &gt; 9 + d</p>
    <p>Pre: pc points to getchW, receive buffer accessible, no char available</p>
    <p>Post: getchW returns, reads the first char from the input queue, no receive action for d + 1 cycles</p>
    <p>Invariant: no buffer overrun, safety property is observed</p>
  </div>
  <div class="page">
    <p>Correctness of getch and putch</p>
    <p>putch appends the character to the string already sent out in the output queue.</p>
    <p>getch reads a character from the input queue or returns an error code.</p>
    <p>Safety invariant: UART configuration is not changed, memory safety is observed, no undefined behavior</p>
  </div>
  <div class="page">
    <p>Proof method</p>
    <p>Busy waiting until char is available (not a static point)</p>
    <p>Loop exit (char available)</p>
    <p>Copy receive buffer and return</p>
    <p>&lt;getchW&gt;:</p>
    <p>ldr r2, uart0rbr</p>
    <p>ldrb r3, [r2, #20]</p>
    <p>tst r3, #1</p>
    <p>beq &lt;getchW&gt;</p>
    <p>ldrb r0, [r2]</p>
    <p>mov pc, lr</p>
  </div>
  <div class="page">
    <p>Layered proof</p>
    <p>application</p>
    <p>driver driver</p>
    <p>device device</p>
    <p>application correctness  automation and scalability</p>
    <p>Interrupts DMA</p>
    <p>functional correctness of device drivers  reasoning about timing  not much automation</p>
    <p>API</p>
  </div>
  <div class="page">
    <p>Contributions</p>
    <p>A framework for proving correctness of device drivers in embedded systems</p>
    <p>A realistic UART model to work with the ARM model in HOL4</p>
    <p>Full correctness of character level receive and send functions in a realistic UART driver, including timing constraints</p>
  </div>
</Presentation>
