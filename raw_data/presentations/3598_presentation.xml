<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Aurora: Statistical Crash Analysis for Automated Root Cause Explanation</p>
    <p>Tim Blazytko, Moritz Schlgel, Cornelius Aschermann, Ali Abbasi, Joel Frank, Simon Wrner and Thorsten Holz</p>
  </div>
  <div class="page">
    <p>Let us look at some crash!</p>
  </div>
  <div class="page">
    <p>mruby</p>
  </div>
  <div class="page">
    <p>CASE(OP_GETUPVAR) {  A B C R(A)  uvget(B,C)  int a = GETARG_A(i); int b = GETARG_B(i); int c = GETARG_C(i); mrb_value regs_a = regs + a; struct REnv e = uvenv(mrb, c); if (!e) { regs_a = mrb_nil_value(); } else { regs_a = estack[b]; } NEXT;</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>heap buer overflow</p>
    <p>CASE(OP_GETUPVAR) {  A B C R(A)  uvget(B,C)  int a = GETARG_A(i); int b = GETARG_B(i); int c = GETARG_C(i); mrb_value regs_a = regs + a; struct REnv e = uvenv(mrb, c); if (!e) { regs_a = mrb_nil_value(); } else { regs_a = estack[b]; } NEXT;</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>heap buer overflow</p>
    <p>integer overflow</p>
    <p>CASE(OP_GETUPVAR) {  A B C R(A)  uvget(B,C)  int a = GETARG_A(i); int b = GETARG_B(i); int c = GETARG_C(i); mrb_value regs_a = regs + a; struct REnv e = uvenv(mrb, c); if (!e) { regs_a = mrb_nil_value(); } else { regs_a = estack[b]; } NEXT;</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>How to find the root cause?</p>
  </div>
  <div class="page">
    <p>It starts at the crashing location</p>
    <p>Name: &quot;mruby&quot;, stopped 0x55555556634c in kh_put_iv (), reason: SIGSEGV</p>
  </div>
  <div class="page">
    <p>Automated Approaches</p>
  </div>
  <div class="page">
    <p>Backward Taint Analysis and Reverse Execution</p>
    <p>Program Flow</p>
    <p>Root Cause</p>
    <p>Crash</p>
  </div>
  <div class="page">
    <p>Backward Taint Analysis and Reverse Execution</p>
    <p>Program Flow</p>
    <p>Reverse Flow</p>
    <p>Root Cause</p>
    <p>Crash</p>
  </div>
  <div class="page">
    <p>What about this?</p>
    <p>NotImplementedError = String Module.constants</p>
    <p>No direct data flow between crash site and root cause</p>
  </div>
  <div class="page">
    <p>What about this?</p>
    <p>NotImplementedError = String Module.constants</p>
    <p>exception type</p>
    <p>No direct data flow between crash site and root cause</p>
  </div>
  <div class="page">
    <p>What about this?</p>
    <p>NotImplementedError = String Module.constants</p>
    <p>string typeexception type</p>
    <p>No direct data flow between crash site and root cause</p>
  </div>
  <div class="page">
    <p>What about this?</p>
    <p>NotImplementedError = String Module.constants</p>
    <p>string type</p>
    <p>raises exception of string type</p>
    <p>exception type</p>
    <p>No direct data flow between crash site and root cause</p>
  </div>
  <div class="page">
    <p>What about this?</p>
    <p>NotImplementedError = String Module.constants</p>
    <p>string type</p>
    <p>raises exception of string type</p>
    <p>type confusion</p>
    <p>exception type</p>
    <p>No direct data flow between crash site and root cause</p>
  </div>
  <div class="page">
    <p>What about this?</p>
    <p>NotImplementedError = String Module.constants</p>
    <p>string type</p>
    <p>raises exception of string type</p>
    <p>type confusion</p>
    <p>exception type</p>
    <p>No direct data flow between crash site and root cause</p>
  </div>
  <div class="page">
    <p>Our Approach</p>
  </div>
  <div class="page">
    <p>Root Cause Analysis</p>
  </div>
  <div class="page">
    <p>Root Cause Analysis</p>
  </div>
  <div class="page">
    <p>Root Cause Analysis</p>
  </div>
  <div class="page">
    <p>Root Cause Analysis</p>
  </div>
  <div class="page">
    <p>Root Cause Analysis</p>
  </div>
  <div class="page">
    <p>Root Cause Analysis</p>
    <p>val.type &lt; 17</p>
  </div>
  <div class="page">
    <p>Root Cause Analysis</p>
    <p>val.type &lt; 17</p>
    <p>MRB_TT_STRING / * 16 * / MRB_TT_RANGE / * 17 * / MRB_TT_EXCEPTION / * 18 * /</p>
  </div>
  <div class="page">
    <p>Root Cause Analysis</p>
    <p>val.type  MRB_TT_EXCEPTION</p>
    <p>val.type &lt; 17</p>
    <p>MRB_TT_STRING / * 16 * / MRB_TT_RANGE / * 17 * / MRB_TT_EXCEPTION / * 18 * /</p>
  </div>
  <div class="page">
    <p>Crash Exploration</p>
  </div>
  <div class="page">
    <p>Coverage-guided Fuzzing</p>
    <p>Program instrumentation</p>
  </div>
  <div class="page">
    <p>Coverage-guided Fuzzing</p>
  </div>
  <div class="page">
    <p>Coverage-guided Fuzzing</p>
  </div>
  <div class="page">
    <p>Coverage-guided Fuzzing</p>
    <p>...</p>
    <p>...</p>
    <p>...</p>
    <p>...</p>
  </div>
  <div class="page">
    <p>Coverage-guided Fuzzing</p>
    <p>...</p>
    <p>...</p>
    <p>...</p>
    <p>...</p>
  </div>
  <div class="page">
    <p>Collect Trace Information</p>
  </div>
  <div class="page">
    <p>Register and Memory Writes</p>
    <p>min: 0x0 max: 0x50</p>
    <p>min: 0x20 max: 0x20</p>
    <p>min: 0x100 max: 0x10000</p>
    <p>jmp taken to exit 4 times</p>
    <p>min: 0x0 max: 0x1342</p>
    <p>min: 0x0 max: 0x1343</p>
    <p>min: 0x400546 max: 0x403142</p>
  </div>
  <div class="page">
    <p>Register and Memory Writes</p>
    <p>min: 0x0 max: 0x50</p>
    <p>min: 0x20 max: 0x20</p>
    <p>min: 0x100 max: 0x10000</p>
    <p>jmp taken to exit 4 times</p>
    <p>min: 0x0 max: 0x1342</p>
    <p>min: 0x0 max: 0x1343</p>
    <p>min: 0x400546 max: 0x403142</p>
  </div>
  <div class="page">
    <p>Register and Memory Writes</p>
    <p>jmp taken to exit 4 times</p>
  </div>
  <div class="page">
    <p>Control-flow Edges</p>
  </div>
  <div class="page">
    <p>Predicate Synthesis</p>
  </div>
  <div class="page">
    <p>Find the best value to distinguish crashes from non-crashes</p>
    <p>outcome crash crash non-crash non-crash</p>
    <p>val.type 16 16 18 18</p>
    <p>val.type &lt; 17</p>
  </div>
  <div class="page">
    <p>Find the best value to distinguish crashes from non-crashes</p>
    <p>outcome crash crash non-crash non-crash</p>
    <p>val.type 16 16 18 18</p>
    <p>val.type &lt; 17</p>
  </div>
  <div class="page">
    <p>Find the best value to distinguish crashes from non-crashes</p>
    <p>outcome crash crash non-crash non-crash</p>
    <p>val.type 16 16 18 18 val.type &lt; 17</p>
  </div>
  <div class="page">
    <p>Predicate Types</p>
    <p>control-flow edges</p>
    <p>r &lt; c for register and memory values</p>
    <p>is_heap_ptr(r)</p>
    <p>is_stack_ptr(r)</p>
    <p>flags</p>
  </div>
  <div class="page">
    <p>Predicate Ranking</p>
  </div>
  <div class="page">
    <p>Execution Order</p>
    <p>Program Flow</p>
  </div>
  <div class="page">
    <p>Execution Order</p>
  </div>
  <div class="page">
    <p>Execution Order</p>
    <p>Root Cause</p>
    <p>Crash</p>
  </div>
  <div class="page">
    <p>Execution Order</p>
    <p>Root Cause</p>
    <p>Crash</p>
    <p>Propagation</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
  </div>
  <div class="page">
    <p>heap buer overflow</p>
    <p>integer overflow</p>
    <p>CASE(OP_GETUPVAR) {  A B C R(A)  uvget(B,C)  int a = GETARG_A(i); int b = GETARG_B(i); int c = GETARG_C(i); mrb_value regs_a = regs + a; struct REnv e = uvenv(mrb, c); if (!e) { regs_a = mrb_nil_value(); } else { regs_a = estack[b]; } NEXT;</p>
    <p>}</p>
    <p>rbx &lt; 0xff</p>
  </div>
  <div class="page">
    <p>heap buer overflow</p>
    <p>integer overflow</p>
    <p>CASE(OP_GETUPVAR) {  A B C R(A)  uvget(B,C)  int a = GETARG_A(i); int b = GETARG_B(i); int c = GETARG_C(i); mrb_value regs_a = regs + a; struct REnv e = uvenv(mrb, c); if (!e) { regs_a = mrb_nil_value(); } else { regs_a = estack[b]; } NEXT;</p>
    <p>}</p>
    <p>rbx &lt; 0xff</p>
  </div>
  <div class="page">
    <p>Targets</p>
    <p>patch</p>
    <p>screen</p>
    <p>Sleuthkit</p>
    <p>libzip</p>
  </div>
  <div class="page">
    <p>Bug Classes</p>
    <p>type confusion (Python and mruby)</p>
    <p>useafter-free (Lua, mruby, )</p>
    <p>uninitialized variable (PHP, mruby)</p>
    <p>heap buffer overflow (Perl, Lua, )</p>
    <p>null pointer dereference, stack-based buffer overflow,</p>
    <p>Up to 28,289,736 instructions between root cause and crash</p>
  </div>
  <div class="page">
    <p>Bug Classes</p>
    <p>type confusion (Python and mruby)</p>
    <p>useafter-free (Lua, mruby, )</p>
    <p>uninitialized variable (PHP, mruby)</p>
    <p>heap buffer overflow (Perl, Lua, )</p>
    <p>null pointer dereference, stack-based buffer overflow,</p>
    <p>Up to 28,289,736 instructions between root cause and crash</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>automated root cause analysis for complex bugs</p>
    <p>find related inputs for a given crash</p>
    <p>collect trace information</p>
    <p>distinguish crashing from non-crashing behavior via statistical analysis</p>
    <p>bug classes: type confusion, use-after-free, heap buffer overflow,</p>
  </div>
  <div class="page">
    <p>Thank You!</p>
    <p>tim.blazytko@rub.de</p>
    <p>@mr_phrazer</p>
    <p>https://github.com/RUB-SysSec/aurora</p>
  </div>
</Presentation>
