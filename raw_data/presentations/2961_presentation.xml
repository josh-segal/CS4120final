<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Rococo: Extract more concurrency from distributed transactions</p>
    <p>Shuai Mu, Yang Cui, Yang Zhang, Wyatt Lloyd, Jinyang Li</p>
    <p>Tsinghua University, New York University, University of Southern California, Facebook</p>
  </div>
  <div class="page">
    <p>What Large Web Sites Need</p>
    <p>Scalable Storage w/ Transactions!</p>
  </div>
  <div class="page">
    <p>What is a Distributed Transaction</p>
    <p>Item Stock iPhone 6 Plus 1 iPhone Case 1</p>
    <p>iPhone=1 Case=1</p>
    <p>BEGIN_TX if (iphone &gt; 0) { iphone--; } if (case &gt; 0) { case--; } END_TX</p>
    <p>if (case &gt; 0) { case--; }</p>
    <p>if (iphone &gt; 0) { iphone--; }</p>
    <p>Transactions should be strictly serializable! Otherwise</p>
  </div>
  <div class="page">
    <p>Loss of serializability = angry customer</p>
  </div>
  <div class="page">
    <p>Serializability is Costly under Contention T</p>
    <p>hr ou</p>
    <p>gh pu</p>
    <p>t tr</p>
    <p>an sa</p>
    <p>ct io</p>
    <p>n/ s</p>
    <p># of concurrent transactions</p>
    <p>Two-Phase Locking (2PL) Optimistic Concurrency Control (OCC)</p>
  </div>
  <div class="page">
    <p>OCC Aborts Contended Transactions</p>
    <p>If (iphone &gt; 0) { iphone--; }</p>
    <p>if (case &gt; 0) { case--; }</p>
    <p>iPhone=1 Case=1 If (iphone &gt; 0) { iphone--; }</p>
    <p>if (case &gt; 0) { case--; }</p>
    <p>Execute</p>
    <p>if (iphone &gt; 0) { iphone--; } if (case &gt; 0) { case--; }</p>
    <p>if (iphone &gt; 0) { iphone--; } if (case &gt; 0) { case--; }</p>
    <p>Two-Phase Commit (2PC)</p>
  </div>
  <div class="page">
    <p>If (iphone &gt; 0) { iphone--; }</p>
    <p>if (case &gt; 0) { case--; } iPhone=1 Case=1</p>
    <p>If (iphone &gt; 0) { iphone--; }</p>
    <p>if (case &gt; 0) { case--; }</p>
    <p>Execute</p>
    <p>if (iphone &gt; 0) { iphone--; } if (case &gt; 0) { case--; }</p>
    <p>if (iphone &gt; 0) { iphone--; } if (case &gt; 0) { case--; } 2PC</p>
  </div>
  <div class="page">
    <p>Achieve serializability w/o aborting or blocking*</p>
    <p>* for common workloads</p>
  </div>
  <div class="page">
    <p>Rococos Approach</p>
    <p>If (iphone &gt; 0) { iphone--; }</p>
    <p>if (case &gt; 0) { case--; }</p>
    <p>iPhone=1 Case=1 If (iphone &gt; 0) { iphone--; }</p>
    <p>if (case &gt; 0) { case--; }</p>
    <p>Defer piece execution to enable reordering 9</p>
    <p>if (iphone &gt; 0) { iphone--; } if (case &gt; 0) { case--; }</p>
    <p>if (iphone &gt; 0) { iphone--; } if (case &gt; 0) { case--; }</p>
  </div>
  <div class="page">
    <p>Rococo Overview: Key techniques</p>
    <p>Enable piece reordering for serializability</p>
    <p>Avoid aborts for common workloads</p>
  </div>
  <div class="page">
    <p>#1 Two-phase protocol</p>
    <p>Start Phase Commit Phase</p>
    <p>Send pieces to servers w/o</p>
    <p>executing them</p>
    <p>Establish a final order and</p>
    <p>execute pieces</p>
    <p>Reorder for serializability</p>
    <p>Set up a provisional order</p>
  </div>
  <div class="page">
    <p>dep dep</p>
    <p>dep</p>
    <p>T2: T1:</p>
    <p>#2 Dependency Tracking: Start Phase</p>
    <p>if ... iphone-</p>
    <p>if ... case-</p>
    <p>iPhone=1</p>
    <p>if ... iphone-</p>
    <p>if ... case-</p>
    <p>if ...iphone-</p>
    <p>if ... case-</p>
    <p>if ... iphone-</p>
    <p>if ... case-</p>
    <p>T2</p>
    <p>T1</p>
    <p>dep</p>
    <p>Case=1</p>
    <p>T1</p>
    <p>T2</p>
    <p>T1 T2</p>
    <p>T1</p>
    <p>T1</p>
    <p>T2</p>
    <p>T2</p>
  </div>
  <div class="page">
    <p>if ... case-</p>
    <p>if ... case-</p>
    <p>dep dep</p>
    <p>dep</p>
    <p>#2 Dependency Tracking: Commit Phase</p>
    <p>if ... iphone-</p>
    <p>iPhone=1</p>
    <p>if ... iphone-</p>
    <p>T2</p>
    <p>T1</p>
    <p>dep</p>
    <p>Case=1</p>
    <p>T1</p>
    <p>T2</p>
    <p>T2</p>
    <p>T1</p>
    <p>T1</p>
    <p>T2</p>
    <p>T1</p>
    <p>T2</p>
    <p>T1</p>
    <p>T2</p>
    <p>T2</p>
    <p>T1</p>
    <p>T2</p>
    <p>T1</p>
    <p>Sort the cycle by any deterministic order</p>
  </div>
  <div class="page">
    <p>oid = next_oid ++</p>
    <p>if ... iphone-</p>
    <p>if ... case-</p>
    <p>orderline.insert(oid, )</p>
    <p>iPhone Case</p>
    <p>orderline.insert(</p>
    <p>oid, )</p>
    <p>Problem: Not Every Piece is Deferrable</p>
    <p>Intermediate Results Calls for Immediate Execution</p>
    <p>next_oid orderline</p>
    <p>if ... iphone-- if ... case-- oid oid = next_oid ++</p>
  </div>
  <div class="page">
    <p>a = next_a++;</p>
    <p>b = next_b++;</p>
    <p>ol_a.insert(a, );</p>
    <p>ol_b.insert(b, );</p>
    <p>a = next_a++;</p>
    <p>b = next_b++;</p>
    <p>ol_a.insert(a, );</p>
    <p>ol_b.insert(b, );</p>
    <p>Immediate Pieces are Naughty!</p>
    <p>a = next_a++ b = next_b ++</p>
    <p>b = next_b ++</p>
    <p>next_a = 0 next_b = 0</p>
    <p>a = next_a++</p>
  </div>
  <div class="page">
    <p>S(ibling)-edge linking pieces within a transaction</p>
    <p>#3: Offline Checking: Basic</p>
    <p>T1</p>
    <p>T2</p>
    <p>iphone case</p>
    <p>iphone case</p>
    <p>T1 T1</p>
    <p>T2</p>
    <p>Item_Table Item_Table</p>
    <p>Item_Table Item_Table</p>
    <p>T1 C(onflict)-edge linking pieces w/ conflicting access</p>
    <p>An SC-cycle consists of</p>
    <p>both S-edge and C-edge</p>
    <p>SC-cycles represent potential non-serializable executions</p>
    <p>that require 2PL/OCC 16</p>
  </div>
  <div class="page">
    <p>#3: Offline Checking: Enhanced</p>
    <p>SC-cycles with deferrable pieces can be safely reordered!</p>
    <p>T1</p>
    <p>T2</p>
    <p>OidTable ItemTable</p>
    <p>OidTable ItemTable</p>
    <p>ItemTable</p>
    <p>ItemTable</p>
    <p>Deferrable Immediate</p>
  </div>
  <div class="page">
    <p>dep dep dep dep</p>
    <p>Incorporating Immediate Pieces</p>
    <p>oid</p>
    <p>iPhone Case next_oid orderline</p>
    <p>iphone</p>
    <p>case</p>
    <p>orderline</p>
    <p>oid</p>
    <p>iphone</p>
    <p>case</p>
    <p>orderline</p>
    <p>oid</p>
    <p>oid</p>
    <p>iphone</p>
    <p>iphone</p>
    <p>Immediate dependency</p>
    <p>T2 T1</p>
    <p>orderline</p>
    <p>orderline</p>
    <p>T2 T1 T2 T1 T2 T1</p>
    <p>case</p>
    <p>case</p>
    <p>Every cycle contains deferrable pieces, ensured by</p>
    <p>offline checking</p>
    <p>Deferrable dependency</p>
    <p>A cycle with deferrable pieces is</p>
    <p>safe to reorder</p>
  </div>
  <div class="page">
    <p>Merged Pieces</p>
    <p>Read-only Transactions</p>
    <p>Reducing Dep. Size</p>
    <p>Fault Tolerance</p>
    <p>Overlapping Trans.</p>
    <p>Deferred Execution</p>
    <p>Decentralized Dependency</p>
    <p>Tracking</p>
    <p>Offline Checking</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>How does Rococo perform under contention?</p>
    <p>How does Rococo scale?</p>
  </div>
  <div class="page">
    <p>Workload: Scaled TPC-C  One warehouse, many districts  Partitioned by districts - all transactions distributed</p>
    <p>New order (45%)</p>
    <p>Payment (43%)</p>
    <p>Delivery (4%)</p>
    <p>Read-only: OrderStatus(4%), StockLevel (4%)</p>
  </div>
  <div class="page">
    <p>Rococo Has Higher Throughput</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut -(</p>
    <p>ne w</p>
    <p>-o rd</p>
    <p>er /s</p>
    <p>)</p>
    <p>Concurrent reqs/server</p>
    <p>Rococo</p>
    <p>OCC</p>
    <p>Aborts due to conflicts in validation</p>
    <p>Aborts due to deadlock detection</p>
    <p>Increasing graph size</p>
  </div>
  <div class="page">
    <p>Rococo Avoids Aborts</p>
    <p>C om</p>
    <p>m it</p>
    <p>ra te</p>
    <p>Concurrent reqs/server</p>
    <p>Rococo 2PL OCC</p>
  </div>
  <div class="page">
    <p>Rococo Scales Out</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut -(</p>
    <p>ne w</p>
    <p>-o rd</p>
    <p>er /s</p>
    <p>)</p>
    <p>Number of servers</p>
    <p>Rococo</p>
    <p>OCC</p>
    <p>Aborts</p>
    <p>Blocking</p>
    <p>Almost Linear</p>
  </div>
  <div class="page">
    <p>Related Work Isolation Level Concurrency Control Mech.</p>
    <p>Rococo Strict-Serial. Rococo</p>
    <p>Lynx [SOSP13] Serial. Origin Ordering Granola [SIGMOD10] Serial. Timestamp based Percolator [OSDI10] S.I. OCC Walter [SOSP11] P.S.I. W-W Preclusion COPS [SOSP11] Causal Dependency Tracking</p>
    <p>Spanner [OSDI12] Strict-Serial. 2PL HStore [VLDB07] Strict-Serial. OCC</p>
    <p>Calvin [SIGMOD12] Strict-Serial. Pre-ordered Locking</p>
    <p>Decentralized dependency tracking</p>
    <p>Centralized sequencing layer, difficult to scale</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Traditional protocols perform poorly w/ contention  OCC aborts &amp; 2PL blocks</p>
    <p>Rococo defers execution to enable reordering  Strict serializability w/o aborting or blocking</p>
    <p>for common workloads</p>
    <p>Rococo outperforms 2PL &amp; OCC  With growing contention  Scales out</p>
  </div>
  <div class="page">
    <p>Thank you!</p>
    <p>Questions?</p>
    <p>https://github.com/msmummy/rococo</p>
    <p>Poster tonight!</p>
  </div>
</Presentation>
