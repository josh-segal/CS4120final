<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Achieving 10Gbps Line-rate Key-value Stores with FPGAs Michaela Blott, Kimon Karras, Ling Liu, Kees Vissers - Xilinx Research Jeremia Baer, Zsolt Istvan - ETH Zurich</p>
  </div>
  <div class="page">
    <p>! Common middleware application running on x86s to alleviate bottlenecks on databases</p>
    <p>! Agenda  State of the art  FPGAs  Proposed architecture  Results  Limitations</p>
    <p>Page 2</p>
    <p>Introduction</p>
    <p>Memcached Web server Database Memcached Memcached</p>
    <p>server</p>
  </div>
  <div class="page">
    <p>! Best published numbers:</p>
    <p>Page 3</p>
    <p>Typical Memcached Implementations</p>
    <p>Platform RPS [M] Latency [us] RPS/W [K]</p>
    <p>Intel Xeon (8 cores) 1.34 200-300 7</p>
    <p>Intel Xeon (2 sockets, 16cores) 3.15 200-300 11.2</p>
    <p>Memcached with Infiniband &amp; Intel Xeon (2 sockets, 16cores)</p>
    <p>TilePRO (64 cores) 0.34 200-400 3.6</p>
    <p>TilePRO (4x64 cores) 1.34 200-400 5.8</p>
    <p>Chalamalasetti (FPGA) 0.27 2.4-12 30.04</p>
    <p>Source: see paper</p>
    <p>motherboard</p>
    <p>DRAM x86</p>
    <p>network adapter</p>
    <p>nc 10G if</p>
  </div>
  <div class="page">
    <p>! Semiconductor devices that consist of a matrix of configurable logic blocks (CLBs) connected via programmable interconnects.</p>
    <p>! On an extremely large scale  highly integrated (28nm, 2million logic cells)</p>
    <p>! Nowadays, FPGAs integrate many other blocks  Up to 3600 DSPs, 68Mb SRAM, 96 high-speed serial IO, ARM processors (Cortex-A9)</p>
    <p>! They can be programmed to become ANY custom circuit  Ideal for architectural exploration</p>
    <p>Page 4</p>
    <p>What are FPGAs?</p>
    <p>IO</p>
    <p>IO</p>
    <p>IO</p>
    <p>IO</p>
    <p>IO</p>
    <p>IO</p>
    <p>IO</p>
    <p>IO</p>
    <p>CLB CLB</p>
    <p>CLB CLB</p>
    <p>We use FPGAs to implement a new dataflow-based architecture for memcached</p>
  </div>
  <div class="page">
    <p>! FPGAs can be reprogrammed after manufacturing through hardwarebased design flow</p>
    <p>Page 5</p>
    <p>Programming FPGAs?</p>
    <p>Design spec In HDL</p>
    <p>C-based design</p>
    <p>Bitstream</p>
    <p>High-Level Synthesis</p>
    <p>Synthesis Place&amp;Route</p>
    <p>Meeting physical constraints</p>
    <p>Simulation</p>
    <p>Hardware design exposes a greater complexity to the user and requires therefore more engineering effort</p>
  </div>
  <div class="page">
    <p>! Memcached is fundamentally a streaming problem  Data is moved from network to memory and back with little compute</p>
    <p>! Dataflow architectures, frequently used for network processing, should be well suited towards the application</p>
    <p>Page 6</p>
    <p>Why Dataflow Architectures?</p>
    <p>Program: receive(p); k = parse(p); a = hashKey(k); v = readValue(a); new_p = format(v); send(new_p);</p>
    <p>DRAM Network Interface</p>
    <p>(10Gbps Ethernet) Processing</p>
  </div>
  <div class="page">
    <p>! High throughput through data-flow architecture</p>
    <p>! Low latency through tight integration of network, compute and memory</p>
    <p>! Hash table to support 2 million entries and 24GB of storage</p>
    <p>Page 7</p>
    <p>System-level Architecture</p>
    <p>motherboard</p>
    <p>DRAM x86</p>
    <p>network adapter</p>
    <p>Memcached</p>
    <p>Network stack</p>
    <p>DRAM</p>
  </div>
  <div class="page">
    <p>FPGA-based Dataflow Architecture</p>
    <p>Page 8</p>
    <p>Request Parser</p>
    <p>Response Formatter</p>
    <p>Hash Table Value Store</p>
    <p>DRAM Controller</p>
    <p>UDP/TCP Offload Engines PCI DMA</p>
    <p>Network Interface</p>
    <p>(10Gbps Ethernet)</p>
    <p>DRAM</p>
    <p>Fully flow controlled standardized interface: Key, value, meta-data</p>
    <p>FPGA</p>
    <p>Hash Table</p>
    <p>Value Store</p>
    <p>Total: 16k LOC vs 10k LOC</p>
    <p>LOC = Lines of Code</p>
  </div>
  <div class="page">
    <p>FPGA-based Dataflow Architecture</p>
    <p>Page 9</p>
    <p>Request Parser</p>
    <p>Response Formatter</p>
    <p>Hash Table Value Store</p>
    <p>DRAM Controller</p>
    <p>UDP/TCP Offload Engines PCI DMA</p>
    <p>Network Interface</p>
    <p>(10Gbps Ethernet)</p>
    <p>DRAM</p>
    <p>FPGA</p>
    <p>Hash Table</p>
    <p>Value Store</p>
    <p>Up to 23 packets reside</p>
    <p>concurrently in the pipeline</p>
    <p>Exploiting task and instruction-level parallelism increases throughput and is more power efficient Inherently scalable</p>
    <p>Memcached Processing Pipeline (Latency: 481 cycles @ 156MHz vs 1Million cycles @ 2GHz)</p>
  </div>
  <div class="page">
    <p>! Bob Jenkins lookup3 implemented in FPGA ! Collision handling through parallel lookup (8-way) ! Flexible key handling through striping</p>
    <p>Page 10</p>
    <p>Hash Table architecture</p>
  </div>
  <div class="page">
    <p>System-Level Architecture</p>
    <p>Page 11</p>
    <p>motherboard</p>
    <p>DRAM x86</p>
    <p>network adapter</p>
    <p>Memcached: All major functions handled inside FPGA</p>
    <p>Network stack</p>
    <p>Memcached: Memory allocation* General: Configuration Control</p>
    <p>DRAM</p>
    <p>Value Store</p>
    <p>*below 3% of 1 core for 10% SET operations *limited memory access bandwidth on platform</p>
    <p>Hash table</p>
  </div>
  <div class="page">
    <p>System Test Setup</p>
    <p>Page 12</p>
    <p>Standard x86 Memcached client</p>
    <p>Standard x86 Memcached</p>
    <p>server Reproducing</p>
    <p>standard performance</p>
    <p>results</p>
    <p>FPGA Memcached</p>
    <p>server Spirent Network Tester/</p>
    <p>NetFPGA-10G Testing</p>
    <p>functionality Performance</p>
    <p>Testing</p>
    <p>Standard Intel I7 Memcached server</p>
    <p>Standard Intel I7 Memcached client (Memslap etc...)</p>
    <p>FPGA-based Memcached server</p>
    <p>NetFPGA-10G</p>
    <p>Spirent TestCenter</p>
  </div>
  <div class="page">
    <p>Power - Test Setup &amp; Results</p>
    <p>Test system 1: without FPGA board Test system 2: with FPGA board</p>
    <p>*(Power sourced from: power plug meter, xpower, data sheets and power regulator readings) **(UDP, binary protocol) ***(includes FPGA and host system)</p>
    <p>Page 13</p>
  </div>
  <div class="page">
    <p>Results - Performance</p>
    <p>* UDP, GET, BINARY</p>
    <p>FPGA delivers constant 10Gbps</p>
    <p>performance  network becomes the</p>
    <p>bottleneck</p>
    <p>X86 performance limited by a per</p>
    <p>packet overhead</p>
    <p>Set performance saturates network as</p>
    <p>well</p>
  </div>
  <div class="page">
    <p>! Sustained line rate processing for 10GE  13MTps possible  Significant improvement over latest x86 numbers</p>
    <p>! Lower power</p>
    <p>! Combined: 36x in RPS/Watt with low variation</p>
    <p>! Cutting edge latency  microseconds instead of 100s of microseconds</p>
    <p>First Results of Memcached Evaluation</p>
    <p>Page 15</p>
    <p>Platform RPS [M] Latency [us] RPS/W [K]</p>
    <p>Intel Xeon (8 cores) 1.34 200-300 7</p>
    <p>TilePRO (64 cores) 0.34 200-400 3.6</p>
    <p>FPGA (board only) 13.02 3.5-4.5 254.8</p>
    <p>FPGA (with host) 13.02 3.5-4.5 106.7</p>
    <p>Source: see paper</p>
  </div>
  <div class="page">
    <p>! Programmability  HLS investigation</p>
    <p>! TCP offload  Future work</p>
    <p>! Storage capacity  SSD</p>
    <p>! Memory allocation &amp; cache management  Current platform limitation</p>
    <p>! Limited protocol support</p>
    <p>Current Platform Limitations</p>
    <p>?</p>
    <p>Qualitative graph only</p>
    <p>Page 16</p>
  </div>
  <div class="page">
    <p>! Dataflow architecture delivers 10Gbps line-rate performance and scalability to higher rates</p>
    <p>! Significantly higher RPS/Watt, with that lower TCO</p>
    <p>! Minimal latency</p>
    <p>! Next Steps:  Addressing limitations  Trials with real use cases  Exploration of other applications</p>
    <p>Summary &amp; Next Steps</p>
    <p>Page 17</p>
  </div>
  <div class="page">
    <p>Thank You. mblott@xilinx.com</p>
    <p>Page 18</p>
  </div>
</Presentation>
