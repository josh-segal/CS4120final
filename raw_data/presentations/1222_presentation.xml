<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>SweynTooth: Unleashing Mayhem over Bluetooth Low Energy</p>
    <p>Matheus Eduardo Garbelini1, Chundong Wang2, Sudipta Chattopadhyay1, Sun Sumei3, Ernest Kurniawan3</p>
    <p>USENIX Annual Technical Conference 2020, July 15-17 Track 2, The One on the Edge</p>
    <p>Partially sponsored by Keysight Technologies</p>
  </div>
  <div class="page">
    <p>Affected SoC Vendors (not exhaustive)</p>
    <p>A family of over dozen new vulnerabilities in Bluetooth Low Energy (BLE) implementations Named after Sweyn Forkbeard who revolted against his father King Harald Bluetooth.</p>
    <p>Open Source BLE Stack (not exhaustive)</p>
    <p>Why the Mayhem?</p>
    <p>Many IoTs affected</p>
  </div>
  <div class="page">
    <p>Comprehensive testing equipment is expensive! More complexity More vulnerabilities!</p>
    <p>A look into Bluetooth flavours - Past Vulnerabilities</p>
    <p>Latest Attacks Affected stack  [2017] BlueBorne (Classic)  [2018] BleedingBit (BLE)  [2019] Invalid Curve Attack (Classic/BLE)  [2019] Knob (Classic)  [2020] Bias (Classic)</p>
    <p>Is everything well tested?</p>
    <p>Our Target</p>
  </div>
  <div class="page">
    <p>Smart Watch</p>
    <p>Smartphone Device roles  Central vs peripheral</p>
    <p>Bluetooth Low Energy Overview Can we test BLE security ourselves with off the shelve hardware?</p>
    <p>Central</p>
    <p>Peripheral</p>
    <p>Connects to</p>
    <p>Standard Testing Equipment</p>
    <p>Advertises</p>
    <p>Our target</p>
    <p>Ellisys Bluetooth Explorer (Over $10k)</p>
    <p>Can we avoid this setup?</p>
  </div>
  <div class="page">
    <p>Smart Watch</p>
    <p>Smartphone Device roles  Central vs peripheral</p>
    <p>Bluetooth Low Energy Overview</p>
    <p>Field Preamble Access Address</p>
    <p>Link Layer Header</p>
    <p>PDU Length PDU</p>
    <p>Payload CRC</p>
    <p>Layer Radio Link Layer Link Layer Link Layer Host Layers Link Layer</p>
    <p>Radio 2.4Ghz (GFSK) Link Layer (LL)</p>
    <p>GATT ATTSMP</p>
    <p>Application GAP</p>
    <p>L2CAP</p>
    <p>BLE Stack Can we test BLE security ourselves with off the shelve hardware?</p>
    <p>Central</p>
    <p>Peripheral</p>
    <p>Connects to</p>
    <p>BLE Frame</p>
    <p>Advertises</p>
    <p>Our target</p>
    <p>Host</p>
    <p>Controller</p>
    <p>User</p>
    <p>HCI</p>
    <p>Host cannot access Link Layer via HCI! How can we manipulate arbitrary LL fields?</p>
  </div>
  <div class="page">
    <p>Smart Watch</p>
    <p>Smartphone Device roles  Central vs peripheral</p>
    <p>Bluetooth Low Energy Overview Can we test BLE security ourselves with off the shelve hardware?</p>
    <p>Central</p>
    <p>Peripheral</p>
    <p>Connects to</p>
    <p>Advertises</p>
    <p>Our target</p>
    <p>Main BLE Exchanges</p>
    <p>From adv. channel to data channel</p>
  </div>
  <div class="page">
    <p>Report Bugs</p>
    <p>Next attemptBlack/grey box software</p>
    <p>Crashes</p>
    <p>Testing Security by Fuzzing</p>
    <p>Output</p>
    <p>Inject Input</p>
    <p>Feedback</p>
    <p>Is it possible to apply fuzzing to lower-level over the air communication?</p>
    <p>Challenges: 1. Full control over BLE Link Layer (Including manipulation of the connection procedure) 2. What feedback metric to use? Most BLE stack implementation is closed source. 3. BLE is a heavily stateful protocol, simply mutating the input is not enough. 4. How to detect crashes or anomalies when fuzzing over the air?</p>
  </div>
  <div class="page">
    <p>Bluetooth Controller</p>
    <p>USB Serial-CDC</p>
    <p>Introducing a non-compliant controller implementation!</p>
    <p>Internal Design</p>
    <p>Setup</p>
    <p>nRF52_driver_firmware.hex</p>
    <p>No HCI allowed here!</p>
    <p>(~10-11USD)</p>
  </div>
  <div class="page">
    <p>Fuzzing &amp;</p>
    <p>Optimization</p>
    <p>Protocol Model (State Machine)</p>
    <p>Anomaly Report &amp; Cost Calculation</p>
    <p>Normal Packet (P )</p>
    <p>Bluetooth Controller</p>
    <p>USB Serial-CDC</p>
    <p>TX</p>
    <p>R X</p>
    <p>(Smart Home, Wearables,</p>
    <p>Trackers, etc.)</p>
    <p>Peripheral</p>
    <p>(iv)</p>
    <p>Fuzzer Arquitecture Overview</p>
    <p>Packet Redundancy</p>
    <p>(ii)Packet Manipulation</p>
    <p>(i) Packet Validation</p>
    <p>(iii)</p>
  </div>
  <div class="page">
    <p>Fuzzing BLE Layers - Fields mutation</p>
    <p>Packet Manipulation</p>
    <p>(i)</p>
  </div>
  <div class="page">
    <p>Fuzzing BLE Layers - Out of order sequences</p>
    <p>Packet Redundancy</p>
    <p>(ii) TX PKT 1</p>
    <p>Transmission</p>
    <p>Packet History</p>
    <p>Peripheral Advertises</p>
    <p>Protocol Model</p>
  </div>
  <div class="page">
    <p>Fuzzing BLE Layers - Out of order sequences</p>
    <p>Packet Redundancy</p>
    <p>(ii) TX PKT 1 Transmission</p>
    <p>Packet History</p>
    <p>Peripheral Advertises</p>
    <p>Protocol Model</p>
    <p>TX PKT 2 2</p>
  </div>
  <div class="page">
    <p>Fuzzing BLE Layers - Out of order sequences</p>
    <p>Packet Redundancy</p>
    <p>(ii) TX PKT 1</p>
    <p>Transmission</p>
    <p>Packet History</p>
    <p>TX PKT 2 TX PKT 3 Peripheral</p>
    <p>Advertises Protocol Model</p>
  </div>
  <div class="page">
    <p>Fuzzing BLE Layers - Out of order sequences</p>
    <p>Packet Redundancy</p>
    <p>(ii) TX PKT 1</p>
    <p>Transmission</p>
    <p>Packet History</p>
    <p>TX PKT 2 TX PKT 3</p>
    <p>Picked by random chance</p>
    <p>Peripheral Advertises</p>
    <p>Protocol Model</p>
  </div>
  <div class="page">
    <p>Fuzzing BLE Layers - Out of order sequences</p>
    <p>Packet Redundancy</p>
    <p>(ii) Peripheral</p>
    <p>AdvertisesTransmission</p>
    <p>Packet History</p>
    <p>TX PKT 2 TX PKT 3 TX PKT 1 Sent after packet 3</p>
    <p>Protocol Model TX PKT 1</p>
  </div>
  <div class="page">
    <p>Fuzzing BLE Layers - Out of order sequences</p>
    <p>Packet Redundancy</p>
    <p>(ii)</p>
    <p>TX PKT 1</p>
    <p>Peripheral AdvertisesTransmission</p>
    <p>Packet History</p>
    <p>TX PKT 2 TX PKT 3</p>
    <p>Protocol Model</p>
    <p>TX PKT 1 3</p>
  </div>
  <div class="page">
    <p>Fuzzing BLE Layers - Out of order sequences</p>
    <p>Packet Redundancy</p>
    <p>(ii)</p>
    <p>TX PKT 1</p>
    <p>Peripheral AdvertisesTransmission</p>
    <p>Packet History</p>
    <p>TX PKT 2 TX PKT 3 TX PKT 4</p>
    <p>Redundant packets are not saved in packet history again</p>
    <p>Protocol Model</p>
  </div>
  <div class="page">
    <p>Validation Strategy - Exemplified</p>
    <p>Packet Validation</p>
    <p>Valid and invalid responses</p>
  </div>
  <div class="page">
    <p>Validation Strategy - Exemplified</p>
    <p>NXP LLID Deadlock (CVE-2019-17060)</p>
    <p>Packet Validation</p>
    <p>Valid and invalid responses</p>
  </div>
  <div class="page">
    <p>Validation Strategy - Exemplified</p>
    <p>Packet Validation</p>
    <p>Mixed Valid and invalid responses</p>
  </div>
  <div class="page">
    <p>Validation Strategy - Exemplified</p>
    <p>Packet Validation</p>
    <p>Mixed Valid and invalid responses</p>
  </div>
  <div class="page">
    <p>Validation Strategy - Exemplified</p>
    <p>Packet Validation</p>
    <p>Mixed Valid and invalid responses</p>
    <p>Key Size Overflow (CVE-2019-19196)</p>
  </div>
  <div class="page">
    <p>State N.</p>
    <p>Optimization</p>
    <p>Fuzzing &amp;</p>
    <p>Optimization</p>
    <p>(iv) Peripheral</p>
    <p>Start of new iteration</p>
    <p>Central (Fuzzer)</p>
    <p>State Machine (Protocol Model)</p>
    <p>Mutation Probabilities</p>
    <p>State 1.</p>
    <p>State 2.</p>
    <p>Transmission</p>
    <p>Reception</p>
    <p>Particle Swarm Optimization (PSO)</p>
    <p>Cost Function: Total number of anomalies &amp; crashes</p>
  </div>
  <div class="page">
    <p>Evaluation - Setup</p>
    <p>SoCs BLE SDK</p>
    <p>User Code</p>
    <p>SDK API BLE Stack</p>
    <p>Programmer</p>
    <p>BLE SoC</p>
    <p>Static Library (binary blob)</p>
    <p>Some SoCskeep parts of the stack in the read-only memory (ROM)</p>
    <p>BLE Firmware Layout</p>
    <p>Saved to non-volatile or static random-access memory</p>
  </div>
  <div class="page">
    <p>address of the target</p>
    <p>anomalies or crashes</p>
    <p>security bypass</p>
    <p>(SweynTooth github)</p>
    <p>Evaluation - Setup</p>
    <p>Serial output not required, but recommended</p>
    <p>Target BLE SoC Dev. Kits</p>
    <p>BlueNRG-2 DA14580</p>
    <p>DA14680</p>
    <p>CC2640R2</p>
    <p>KW41Z</p>
    <p>CY5677</p>
    <p>CY8CPROTO-63</p>
    <p>SAMB11ESP32</p>
    <p>TLSR8258 CC2540</p>
    <p>nRF51422</p>
    <p>nRF52840</p>
    <p>WB55</p>
  </div>
  <div class="page">
    <p>Evaluation - Comparison</p>
    <p>Qualitative comparison with publicly available tools</p>
    <p>BT Classic only. Adaption was needed for comparison;  Only a subset of L2CAP is available for BLE;  Previous Bluetooth fuzzers detect crashes, but not logic problems (anomalies);  Link Layer was not supported by other fuzzers.</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Anomalies vs iteration Summary of Evaluation Time for Each Device (*channel hop Interval = 20ms)</p>
    <p>*Same as Connection Interval</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Anomalies vs iteration Summary of Evaluation Time for Each Device (*channel hop Interval = 20ms)</p>
    <p>Repeated anomaly in differente states (LLID Deadlock)</p>
    <p>Repeated anomaly in different states (Multiple Version indication response)</p>
    <p>*Same as Connection Interval</p>
  </div>
  <div class="page">
    <p>Impact - Non-compliance in the wild!</p>
    <p>*Test scripts are available on https://github.com/Matheus-Garbelini/sweyntooth_bluetooth_low_energy_attacks/tree/master/extras *Details of all vulnerabilities &amp; non-compliances on https://asset-group.github.io/disclosures/sweyntooth/</p>
  </div>
  <div class="page">
    <p>Impact - Non-compliance in the wild!</p>
    <p>*Test scripts are available on https://github.com/Matheus-Garbelini/sweyntooth_bluetooth_low_energy_attacks/tree/master/extras *Details of all vulnerabilities &amp; non-compliances on https://asset-group.github.io/disclosures/sweyntooth/</p>
    <p>Security bypass issues were found to be a mishandling of A1 - Encryption setup happens during SMP pairing procedure</p>
  </div>
  <div class="page">
    <p>Impact - Non-compliance in the wild!</p>
    <p>*Test scripts are available on https://github.com/Matheus-Garbelini/sweyntooth_bluetooth_low_energy_attacks/tree/master/extras *Details of all vulnerabilities &amp; non-compliances on https://asset-group.github.io/disclosures/sweyntooth/</p>
    <p>Widely spread non-compliance. hopIncrement is a fundamental field used during the connection procedure. Certification didn't catch it?</p>
  </div>
  <div class="page">
    <p>Impact - Non-compliance in the wild!</p>
    <p>*Test scripts are available on https://github.com/Matheus-Garbelini/sweyntooth_bluetooth_low_energy_attacks/tree/master/extras *Details of all vulnerabilities &amp; non-compliances on https://asset-group.github.io/disclosures/sweyntooth/</p>
  </div>
  <div class="page">
    <p>Some affected IoT products</p>
    <p>Impact CubiTag: Public Key Crash (Deadlock)</p>
    <p>https://youtu.be/Iw8sIBLWE_w</p>
  </div>
  <div class="page">
    <p>Disclosure window of 90 days, starting since the last communicated SoC vendor;  Second batch of SweynTooth vulnerabilities privately shared in advance with CSA and HSA, Singapore;  Bluetooth SIG has also requested early access to the non-disclosed information of the 2nd batch (13th July, 2020);  As far as we now, only one vendor has yet to create a firmware patch!</p>
    <p>Disclosure process</p>
    <p>Exploits repository (GitHub) Asset Research Website</p>
    <p>Public Disclosure (9th February, 2020) https://github.com/Matheus-Garbelini/sweyntooth_bluetooth_low_energy_attacks</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Certification does not prevent against bad implementation nor guarantee an BLE stack to be free of non-compliances.</p>
    <p>Procedures which conflict with each other could be better clarified on the standard (i.g., unexpected encryption response) to avoid related security bypass attacks.</p>
    <p>Over-the-air fuzzing is still a good way to find many wireless bugs, given it a proper control over the lowest layers of the target wireless protocol.</p>
    <p>What about other wireless technologies? BLE Mesh, Wi-Fi EasyMesh, 5G, NB-IoT? More fuzzing tool are needed.</p>
    <p>Lesson learned. Product vendors may rethink their solution and give it more priority for SoC vendors with greater security response and easier patching process.</p>
    <p>The fuzzer is available open source upon request to sweyntooth@gmail.com</p>
  </div>
  <div class="page">
    <p>Thank you</p>
    <p>Questions? Feel free to reach us by our email sweyntooth@gmail.com</p>
  </div>
  <div class="page">
    <p>Final Remark: Get Ready for BLE Experimentation What if I want to experiment with BLE myself?</p>
    <p>Simplest Setup: Scapy Python API to get you started with BLE experimentation is available on our GitHub repo. Use of our custom firmware requires a nRF52840 Dongle (~10-11USD). Works on Linux, OSX and Windows distros.</p>
    <p>nRF52_driver_firmware.hex</p>
    <p>driver.send(ll_bytes)</p>
    <p>driver.receive() Target BLE PeripheralBLE</p>
  </div>
</Presentation>
