<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Shweta Shinde* Shengyi Wang Pinghai Yuan Aquinas Hobor Abhik Roychoudhury Prateek Saxena</p>
    <p>*UC Berkeley National University of Singapore Yale-NUS College</p>
    <p>BesFS: A POSIX Filesystem for Enclaves with a</p>
    <p>Mechanized Safety Proof</p>
  </div>
  <div class="page">
    <p>Trusted Execution Environments</p>
    <p>E.g., Intel SGX [HASP13], Keystone [EuroSys20]</p>
    <p>Hypervisor</p>
    <p>Operating System</p>
    <p>Sensitive Compute</p>
    <p>Sensitive Data Secure Enclave</p>
    <p>Root of trust Hardware</p>
    <p>Untrusted interface e.g., Iago Attacks [ASPLOS13]</p>
  </div>
  <div class="page">
    <p>Interface Attacks on Existing Frameworks</p>
    <p>fopen: Intel SDK</p>
    <p>fopen: Google Asylo</p>
  </div>
  <div class="page">
    <p>Attack Potency and Existing Solutions</p>
    <p>Potential Defenses: - Narrow &amp; limited interface - Input-output sanitization - Compiler-based checks</p>
    <p>Necessary but incomplete--No guarantees</p>
    <p>[CCS20]</p>
    <p>[ASPLOS20]</p>
  </div>
  <div class="page">
    <p>A Formal Verification Approach</p>
    <p>Safe specification  Encapsulates accepted behavior of the interface (e.g., open)</p>
    <p>A machine checked interface  Guarantees detection of specification violation (e.g., malicious return value)</p>
    <p>Complicated verification problem: Adversary OS can deviate arbitrarily</p>
  </div>
  <div class="page">
    <p>A Formal Verification Approach:</p>
    <p>Standard Specification e.g., ~300 APIs</p>
    <p>Implementation e.g., 100K 1Mil</p>
    <p>Safe Speci</p>
    <p>fication</p>
    <p>How to scale to a large interface (e.g., POSIX)?</p>
    <p>The scalability challenge:</p>
    <p>- Specification for safe behavior for the entire POSIX API</p>
    <p>- Proving safe implementation - entire libc (glibc, musl) - filesystem (ext4)</p>
  </div>
  <div class="page">
    <p>BesFS Interface: Designing Scalable Specification</p>
    <p>Our Approach  15 core APIs: e.g., open, close, read, write  Allow to execute any sequence of these while maintaining safety property</p>
    <p>Can be composed to express higher-level interfaces  e.g., fwrite can be composed with write and fstat  Created 22 auxiliary APIs witnessed in applications</p>
  </div>
  <div class="page">
    <p>Designing Specification for BesFS Interface</p>
    <p>Transition Safety Properties  All the file and directory paths are unique  All open file IDs have to be registered  All open file IDs have unique entries  No overlaps between virtual addresses  Current cursor position can only take</p>
    <p>values between 0 and EOF</p>
    <p>State Safety Properties</p>
    <p>True for all states True before and after a call</p>
    <p>Pre-condition ()</p>
    <p>Transition Relation (,)</p>
    <p>, =       =     {}]   =</p>
    <p>fs_close :  (:)</p>
  </div>
  <div class="page">
    <p>Scaling the Specification Safety Proof of BesFS</p>
    <p>State Transition Safety</p>
    <p>Given a good state S satisfying pre-conditions prei, then if we execute fi to reach state S, then S is always a good state and relation between S and S is valid according to the transition relation i</p>
    <p>Sequential Composition Safety Given a good initial state S0 subject to a sequence of transitions m1 , . . . , mn always produces a good final state Sn</p>
  </div>
  <div class="page">
    <p>Proving Implementation Safety</p>
    <p>- Employ the state and transition safety checks - Encryption - Data structures to keep state</p>
    <p>- File and directory layout - Memory map - File handles - Permissions and sizes - Page hashes</p>
    <p>Implementation is proof checked  In higher level language (e.g., Gallina+Coq)</p>
    <p>Secure Enclave</p>
    <p>Untrusted OS</p>
    <p>Syscall Interface (e.g., POSIX)</p>
    <p>Implementation of BesFS Interface</p>
    <p>Application Logic</p>
    <p>Untrusted External FS</p>
    <p>Hardware</p>
  </div>
  <div class="page">
    <p>Evaluation Goals</p>
    <p>TCB: Do the checks increase the enclave code size?</p>
    <p>Expressiveness: Is the subset enough to run interesting applications?</p>
    <p>Compatibility: Do existing systems adhere to BesFS specifications?</p>
    <p>Performance: What is the cost of machine-checked security guarantees?</p>
  </div>
  <div class="page">
    <p>Evaluation I: Small TCB</p>
    <p>Component Language LOC Specification &amp; Machine-proved Implementation</p>
    <p>Coq definitions &amp; Proofs Gallina 4625 Hand-coded C Implementation</p>
    <p>Implementation C 863</p>
    <p>External Calls C 469</p>
    <p>SGX Utils C 117</p>
    <p>Total 1449</p>
  </div>
  <div class="page">
    <p>Evaluation II: Expressiveness</p>
    <p>from 15 core</p>
    <p>fwrite composed from write and fstat</p>
  </div>
  <div class="page">
    <p>Evaluation III: Compatibility</p>
    <p>Protects 235000/235008</p>
    <p>APIs in our benchmarks</p>
  </div>
  <div class="page">
    <p>Evaluation IV: Performance</p>
    <p>bzi p2 mc</p>
    <p>f hm</p>
    <p>me r sje</p>
    <p>ng</p>
    <p>libq uan</p>
    <p>tum h26</p>
    <p>ast ar</p>
    <p>im e</p>
    <p>(s ec</p>
    <p>on ds</p>
    <p>) Panoply BesFS</p>
    <p>CPU-intensive: ~12.22%</p>
    <p>wri te rew</p>
    <p>rite rea d rer</p>
    <p>ead</p>
    <p>ran dre</p>
    <p>ad</p>
    <p>ran dw</p>
    <p>rite</p>
    <p>bkw dre</p>
    <p>ad 0</p>
    <p>B an</p>
    <p>dw id</p>
    <p>th (M</p>
    <p>B /s</p>
    <p>ec ) Panoply BesFS</p>
    <p>IO-intensive: ~480%</p>
  </div>
  <div class="page">
    <p>Do Proofs Help in Eliminating Bugs?</p>
    <p>Example 1: seek Specification Bug  if pos &lt; size</p>
    <p>Example 2: write Implementation Bug  Variable scope overlaps</p>
    <p>Example 3: Panoply &amp; Intel SGX SDK Bugs  enclave stack is corrupted for large sizes</p>
    <p>Example 4: Panoply Error Code Bugs  7 distinct functions where PANOPLYs error codes were incorrect</p>
  </div>
  <div class="page">
    <p>Project Page &amp; Contact</p>
    <p>BesFS Webpage (Coq Spec, Implementation, and Proofs)</p>
    <p>https://shwetasshinde24.github.io/BesFS</p>
    <p>Shweta Shinde shweta.shivajishinde@inf.eth.ch</p>
    <p>@shw3ta_shinde</p>
  </div>
</Presentation>
