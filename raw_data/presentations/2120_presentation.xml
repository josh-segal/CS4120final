<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Ji-Yong Shin</p>
    <p>Cornell University</p>
    <p>In collaboration with Mahesh Balakrishnan (MSR SVC), Tudor Marian (Google),</p>
    <p>Lakshmi Ganesh (UT Austin), and Hakim Weatherspoon (Cornell)</p>
    <p>HotStorage Talk on June 13, 2012</p>
    <p>Gecko: A Contention-Oblivious Design for Cloud Storage</p>
  </div>
  <div class="page">
    <p>What happens to storage?</p>
    <p>Cloud and Virtualization</p>
    <p>VMM</p>
    <p>Guest VM</p>
    <p>Guest VM</p>
    <p>Guest VM</p>
    <p>Guest VM</p>
    <p>Shared Disk</p>
    <p>Shared Disk</p>
    <p>Shared Disk</p>
    <p>Shared Disk</p>
    <p>SEQUENTIAL</p>
    <p>RANDOM</p>
  </div>
  <div class="page">
    <p>Sequential Writers Only</p>
    <p>Sequential streams are no longer sequential</p>
    <p>1~8 VM + EXT4 FS</p>
    <p>4-disk RAID-0 setting</p>
    <p>Sequential Writer (256KB)</p>
    <p>Random Writer (4KB)</p>
    <p>T h</p>
    <p>ro u</p>
    <p>g h</p>
    <p>p u</p>
    <p>t (M</p>
    <p>B /s</p>
    <p>)</p>
    <p># of VMs</p>
    <p>Sequential Writers Only</p>
    <p>T h</p>
    <p>ro u</p>
    <p>g h</p>
    <p>p u</p>
    <p>t (M</p>
    <p>B /s</p>
    <p>)</p>
    <p># of VMs</p>
    <p>Sequential Writers + 1 Random Writer</p>
  </div>
  <div class="page">
    <p>Existing Solutions for IO Contention?</p>
    <p>IO scheduling</p>
    <p>Entails increased latency for certain workload</p>
    <p>May still require moving disk head</p>
    <p>Workload placement</p>
    <p>Requires prior knowledge or dynamic prediction</p>
    <p>Limits freedom of placing VMs in the cloud</p>
  </div>
  <div class="page">
    <p>Lo g</p>
    <p>Ta</p>
    <p>il</p>
    <p>Shared Disk</p>
    <p>Log-structured File System to the Rescue?</p>
    <p>Write everything as log to tail</p>
    <p>Perfect prediction for writes</p>
    <p>Assume reads are handled by cache</p>
    <p>Addr 0 1 2   N</p>
    <p>W ri</p>
    <p>te</p>
    <p>W ri</p>
    <p>te</p>
    <p>W ri</p>
    <p>te</p>
    <p>Lo g</p>
    <p>Ta</p>
    <p>il</p>
    <p>Shared Disk</p>
    <p>Shared Disk</p>
    <p>Lo g</p>
    <p>Ta</p>
    <p>il</p>
    <p>RAID0 + LFS</p>
  </div>
  <div class="page">
    <p>Garbage collection is the Achilles Heel of LFS</p>
    <p>Lo g</p>
    <p>Ta</p>
    <p>il</p>
    <p>Shared Disk</p>
    <p>Challenges of Log-Structured File System</p>
    <p>N</p>
    <p>Lo g</p>
    <p>Ta</p>
    <p>il</p>
    <p>Shared Disk</p>
    <p>Shared Disk</p>
    <p>Lo g</p>
    <p>Ta</p>
    <p>il</p>
    <p>G C</p>
    <p>G C</p>
    <p>G C</p>
    <p>Garbage Collection (GC) from Log Head</p>
    <p>RAID0 + LFS</p>
  </div>
  <div class="page">
    <p>Challenges of Log-Structured File System</p>
    <p>Garbage collection is the Achilles Heel of LFS</p>
    <p>2-disk RAID-0 setting of LFS</p>
    <p>GC under write-only workload RAID 0 + LFS</p>
    <p>T h</p>
    <p>ro u</p>
    <p>g h</p>
    <p>p u</p>
    <p>t (M</p>
    <p>B /s</p>
    <p>)</p>
    <p>Time (s)</p>
    <p>Aggregate Writes</p>
    <p>Application Writes</p>
    <p>GC Writes</p>
  </div>
  <div class="page">
    <p>Summary of Challenges in the Cloud</p>
    <p>Server consolidation through cloud and virtualization</p>
    <p>Numbers of core and VM per server increase</p>
    <p>Storage is not yet maturely virtualized</p>
    <p>RAID cannot preserve high throughput</p>
    <p>IO performance varies depending on coexisting VMs</p>
    <p>LFS only solves write-write contention</p>
    <p>GC operation interferes with logging</p>
    <p>First class reads can interfere with logging</p>
  </div>
  <div class="page">
    <p>Rest of the Talk</p>
    <p>Gecko, a chain logging design</p>
    <p>Overview</p>
    <p>Caching reads</p>
    <p>Garbage collection strategies</p>
    <p>Metadata management</p>
    <p>Evaluation</p>
    <p>Summary</p>
  </div>
  <div class="page">
    <p>Gecko: Chain logging Design</p>
    <p>Cutting the log tail from the body</p>
    <p>GC reads do not interrupt the sequential write</p>
    <p>1 uncontended drive &gt;&gt;faster&gt;&gt; N contended drives</p>
    <p>Disk 2 Disk 1 Disk 0</p>
    <p>Log Tail</p>
    <p>Physical Addr Space</p>
    <p>G C</p>
    <p>Garbage Collection</p>
    <p>from Log Head</p>
    <p>Disk 2</p>
  </div>
  <div class="page">
    <p>Disk 2</p>
    <p>Read</p>
    <p>Gecko Overview and Properties</p>
    <p>Fault tolerance + Read performance</p>
    <p>Disk 1 Disk 0</p>
    <p>Log Tail</p>
    <p>Read Read</p>
    <p>No write-write contention, No GC-write contention</p>
    <p>Disk 2 Disk 1 Disk 0</p>
    <p>Primary</p>
    <p>Mirror</p>
    <p>Read Log Tail</p>
    <p>Disk 1 Off</p>
    <p>Disk 0 Off</p>
    <p>Power saving w/o</p>
    <p>Consistency concerns</p>
    <p>Read Read</p>
  </div>
  <div class="page">
    <p>Gecko Caching</p>
    <p>What happens to reads going to tail drives?</p>
    <p>Disk 2 Disk 1 Disk 0</p>
    <p>W ri</p>
    <p>te Tail Cache (Flash )</p>
    <p>R e</p>
    <p>a d</p>
    <p>R e</p>
    <p>a d</p>
    <p>R e</p>
    <p>a d</p>
    <p>Blocks AT LEAST 86% of reads from real workload. (500GB disk, 34GB cache)</p>
    <p>Prevents first-class read-write contention.</p>
    <p>Revival of LFS using Flash</p>
  </div>
  <div class="page">
    <p>Gecko Garbage Collection (GC)</p>
    <p>Disk 2 Disk 1</p>
    <p>Move-to-tail GC</p>
    <p>Compact-in-body GC</p>
    <p>+ Simple - GC shares write bandwidth</p>
    <p>+ GC is independent from writes - Complicates metadata management</p>
    <p>Disk 0</p>
  </div>
  <div class="page">
    <p>Gecko Metadata and Persistence Primary map: less than 8 GB RAM</p>
    <p>for a 8 TB storage</p>
    <p>Inverse map: 8 GB flash for a 8 TB storage (flushed every 1024 writes)</p>
    <p>empty filled</p>
    <p>Data (in disk)</p>
    <p>Disk 0 Disk 2 Disk 1</p>
    <p>Physical-to-logical map (in flash) h</p>
    <p>e a</p>
    <p>d</p>
    <p>ta il</p>
    <p>h e</p>
    <p>a d</p>
    <p>ta il</p>
  </div>
  <div class="page">
    <p>Evaluation Setup</p>
    <p>In-kernel version</p>
    <p>Implemented as block device for portability</p>
    <p>Similar to software RAID</p>
    <p>Move-to-tail GC</p>
    <p>User-level emulator</p>
    <p>For fast prototyping</p>
    <p>Runs block traces</p>
    <p>Compact-in-body GC</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Performance under move-to-tail GC</p>
    <p>2-disk Gecko chain, write only workload</p>
    <p>GC does not affect aggregate throughput</p>
    <p>RAID 0 + LFS Gecko</p>
    <p>T h</p>
    <p>ro u</p>
    <p>g h</p>
    <p>p u</p>
    <p>t (M</p>
    <p>B /s</p>
    <p>)</p>
    <p>Time (s)</p>
    <p>T h</p>
    <p>ro u</p>
    <p>g h</p>
    <p>p u</p>
    <p>t (M</p>
    <p>B /s</p>
    <p>)</p>
    <p>Time (s)</p>
    <p>Aggregate Writes</p>
    <p>Application Writes</p>
    <p>GC Writes</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Performance under compact-in-body GC (CIB GC)</p>
    <p>Write only workload is used</p>
    <p>Application throughput is not affected</p>
    <p>No GC CIB GC</p>
    <p>T h</p>
    <p>ro u</p>
    <p>g h</p>
    <p>p u</p>
    <p>t (M</p>
    <p>B /s</p>
    <p>)</p>
    <p>Average Application Throughput</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>Log-structured designs</p>
    <p>Oblivious to write-write contention</p>
    <p>Sensitive to GC/read-write contention</p>
    <p>Gecko fixes the GC-write and read-write contention</p>
    <p>Separates the tail of the log from its body</p>
    <p>Flash re-enables log-structured designs</p>
    <p>Tail flash cache for read-write contention</p>
    <p>Small flash memory for persistence</p>
  </div>
  <div class="page">
    <p>Future work</p>
    <p>Experiments with real workloads</p>
    <p>Exploration to minimize read-read contention</p>
    <p>IO handling policy inside Gecko</p>
  </div>
</Presentation>
