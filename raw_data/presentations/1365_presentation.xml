<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>RTRlib An Open-Source Library in C for RPKI-based Prefix Origin Validation</p>
    <p>Matthias Whlisch, Fabian Holler, Thomas C. Schmidt, Jochen H. Schiller m.waehlisch@fu-berlin.de</p>
    <p>schmidt@informatik.haw-hamburg.de</p>
  </div>
  <div class="page">
    <p>Harming the Internet Backbone</p>
    <p>Problem</p>
    <p>BGP is based on trust  Originally, no mechanism for cryptographically strong</p>
    <p>verification of AS-to-prefix mapping</p>
    <p>AS 123 10 AS 20 AS 567</p>
    <p>AS 9</p>
    <p>BGP Update 10.20.10.0/24</p>
    <p>Prefix Hijack</p>
  </div>
  <div class="page">
    <p>Prefix Hijacking  Reality?</p>
    <p>Prominent Examples</p>
    <p>Caveat: Reasons may also be misconfiguration ;-)</p>
  </div>
  <div class="page">
    <p>Countermeasure: RPKI-based Prefix Origin Validation</p>
    <p>Research Questions 1. What is the performance overhead for prefix origin validation at</p>
    <p>routers? 2. Does prefix origin validation introduce new attacks that harm the</p>
    <p>local router system? 3. What is the current state of deployment?  We need a flexible and efficient open-source implementation of the</p>
    <p>RPKI RTR protocol  RTRlib</p>
    <p>RPKI RTR Protocol</p>
    <p>Deployment started in January 2011</p>
  </div>
  <div class="page">
    <p>What is the RTRlib?</p>
    <p>General objective</p>
    <p>Implementation of the RPKI-RTR client protocol in C</p>
    <p>Details</p>
    <p>Fetch validated prefixes + origin ASes from RPKI cache  Keep the routers validation database in sync  Provide an interface between local database and routing</p>
    <p>daemon to access validated objects</p>
    <p>Allow also for validation of BGP updates  Conforms to relevant IETF RFCs/drafts</p>
    <p>Its open-source: http://rpki.realmv6.org</p>
  </div>
  <div class="page">
    <p>Memory Consumption</p>
  </div>
  <div class="page">
    <p>Processing Time to Load Data Into Router</p>
    <p>Motivation</p>
    <p>Startup  Cache server session</p>
    <p>reset</p>
    <p>Evaluation Approach</p>
    <p>Load data directly from file</p>
    <p>Result</p>
    <p>Delay will be dominated by distance to cache server</p>
  </div>
  <div class="page">
    <p>CPU Load Based on Deployment State</p>
    <p>Motivation</p>
    <p>Does deployment state influence performance?</p>
    <p>Complexity attacks</p>
    <p>Evaluation Approach</p>
    <p>Creation of predefined mixture of validation outcome</p>
    <p>Result</p>
    <p>Almost no dependency</p>
  </div>
  <div class="page">
    <p>RPKI in the Wild  CPU Load</p>
    <p>Test on commodity hardware  AMD Athlon 64 X2 CPU 4200+ and 2 GB RAM</p>
    <p>Live BGP update stream over several months</p>
  </div>
  <div class="page">
    <p>Applications</p>
    <p>Extension of BGP daemons  In discussions with BIRD developers</p>
    <p>Beta version for Quagga is available</p>
    <p>Monitoring of the RPKI deployment  Integrate the library in your Python/Perl  scripts</p>
    <p>Particularly suitable for real-time monitoring</p>
    <p>Testing purposes  Evaluate performance of your RPKI/RTR cache server</p>
    <p>Play around with BGP update validation</p>
  </div>
  <div class="page">
    <p>RTRlib: Architectural Design</p>
    <p>Layered architecture to support flexibility</p>
  </div>
  <div class="page">
    <p>Objective: Emulate update validation of your BGP peer</p>
    <p>Setup  No Firmware Change at Your Router:</p>
    <p>Tools: RTRlib + Python Script + BGPmon  Establish peering between router and BGPmon</p>
    <p>Using RTRlib for Monitoring</p>
    <p>BGP Router</p>
    <p>BGP Session BGPmon</p>
    <p>RTRlib + Python</p>
    <p>XML Stream</p>
    <p>Real-time Analyses</p>
  </div>
  <div class="page">
    <p>Validation of Web Server Prefix in Firefox</p>
    <p>Map URL to IP address and IP prefix</p>
    <p>Check IP prefix + Origin AS against RPKI</p>
    <p>Based on real-time BGP and RPKI data</p>
  </div>
  <div class="page">
    <p>Current # IP prefixes in ROAs</p>
    <p>IPv4 IPv6</p>
    <p>http://certification-stats.ripe.net/</p>
  </div>
  <div class="page">
    <p>Attacking the Local Router System  One Example?</p>
    <p>Attacker misuses the creation of AS to prefix mapping (ROA)</p>
    <p>Any owner of an IP prefix can create arbitrary ROAs for this prefix</p>
    <p>Example: Operators own 10.20.30.0/24</p>
    <p>Create 10.20.30.1/32 AS10; 10.20.30.2/32 AS10;  lead to 255 entries</p>
    <p>Easily to handle in IPv4 due to limited address space</p>
    <p>Getting worse in IPv6</p>
    <p>Limit the creation of ROAs</p>
  </div>
  <div class="page">
    <p>Conclusion &amp; Outlook</p>
    <p>Conclusion</p>
    <p>Prefix origin validation can start  Load at routers is relatively negligible  Monitoring of prefix origin validation: Use RTRlib</p>
    <p>Outlook</p>
    <p>Continue the long-term study  More extensive analysis of RPKI-based complexity attacks  Development of approach to distinguish invalid updates</p>
    <p>from misconfigurations and real prefix hijacks</p>
  </div>
  <div class="page">
    <p>Thanks!</p>
    <p>Interested in Testing RPKI/RTR?</p>
    <p>Download: http://rpki.realmv6.org</p>
    <p>Firefox Add-on RPKI Validator</p>
    <p>https://addons.mozilla.org/addon/ rpki-validator/</p>
    <p>GitHub</p>
    <p>https://github.com/rtrlib</p>
  </div>
  <div class="page">
    <p>BACKUP</p>
  </div>
  <div class="page">
    <p>Example  Establish Transport</p>
    <p>tr_socket* ssh_socket; //create a SSH connection</p>
    <p>tr_ssh_config config = {</p>
    <p>&quot;123.321.123.321&quot;, //IP</p>
    <p>&quot;rpki_user&quot;, //SSH User</p>
    <p>&quot;/etc/rpki-rtr/hostkey&quot;, //Server hostkey</p>
    <p>&quot;/etc/rpki-rtr/client.priv&quot;, //Authentication private key</p>
    <p>&quot;/etc/rpki-rtr/server.pub&quot; //Authentication public key</p>
    <p>};</p>
    <p>tr_ssh_init(&amp;config, &amp;ssh_socket);</p>
    <p>tr_socket* tcp_socket; //create unprotected TCP conn.</p>
    <p>tr_tcp_config tcp_config = {</p>
    <p>&quot;123.321.123.321&quot;, //IP</p>
    <p>&quot;1234&quot; //Port</p>
    <p>};</p>
    <p>tr_tcp_init(&amp;tcp_config, &amp;tcp_socket);</p>
  </div>
  <div class="page">
    <p>Create Connection Manager and Perform Origin Validation</p>
    <p>//init all rtr_sockets with the same settings</p>
    <p>//srv.pool,polling_period,cache_timeout,update_fp,conn_f</p>
    <p>rtr_mgr_init(&amp;p0, 60, 120, NULL, 0, NULL, 0);</p>
    <p>//create and start the connection manager</p>
    <p>rtr_mgr_socket mgr_sock;</p>
    <p>rtr_mgr_start(&amp;mgr_sock, &amp;p0);</p>
    <p>//validate the BGP origin ASN 12345 for 10.10.0.0/24</p>
    <p>ip_addr prefix;</p>
    <p>prefix.ver = IPV4;</p>
    <p>prefix.u.addr4.addr = 0x0A0A0000;</p>
    <p>pfxv_state result;</p>
    <p>rtr_mgr_validate(mgr_sock, 12345, &amp;prefix, 24, &amp;result);</p>
  </div>
  <div class="page">
    <p>Prefix Origin Verification &amp; RPKI</p>
    <p>Validation process consists of two steps</p>
    <p>IETF RPKI/RTR protocol manages push of valid ROAs from cache to BGP router</p>
    <p>Implementations for Cisco and Juniper available</p>
    <p>Open-source BGP daemons on the way</p>
    <p>Evaluation result of BGP update: VALID, INVALID, NOT_FOUND</p>
    <p>Combine this with BGP policies</p>
    <p>cache</p>
    <p>operations necessary</p>
  </div>
  <div class="page">
    <p>Protection Concepts</p>
    <p>Mapping of IP prefixes and origin AS necessary</p>
    <p>Including cryptographic proof</p>
    <p>Prefix owner should be able to authenticate Origin AS(es)</p>
    <p>BGP router compares BGP update with mapping</p>
    <p>BGP path information are cryptographically secured</p>
    <p>Paths will be signed</p>
    <p>Challenges</p>
    <p>Cryptographic operations are complex  Minimal additional load at routers</p>
    <p>In the following we concentrate on 1.</p>
  </div>
  <div class="page">
    <p>Resource Public Key Infrastructure (RPKI)</p>
    <p>System that allows to attest the usage of IP addresses and ASNs (i.e., Internet resources)</p>
    <p>RPKI includes cryptographically provable certificates</p>
    <p>Certificate hierarchy reflects IP-/AS-allocation in the Internet</p>
    <p>Currently, each RIR creates a self-signed root certificate</p>
    <p>Implementation of the RPKI started January 2011  All RIRs participate</p>
    <p>Source: Cisco</p>
  </div>
  <div class="page">
    <p>Routing Origination Authorization (ROA)</p>
    <p>Content of an ROA  Set of IP prefixes with minimal and maximal (optional)</p>
    <p>length</p>
    <p>An AS number allowed to announce the prefixes</p>
    <p>End-Entity-Certificate</p>
    <p>ROA will be signed with the certificate of the RPKI  Note: Multiple ROAs per IP prefix possible</p>
    <p>Example:</p>
    <p>AS 123 is allowed to announce network range 10.20.0.0/16 to 10.20.0.0/24 and 80.90.0.0/16 from 1st Oct. 2012 until 1st Oct. 2013</p>
    <p>ROA</p>
    <p>Valid from 01/10/2012 to 01/10/2013 + E2E Cert</p>
  </div>
  <div class="page">
    <p>RPKI &amp; ROA</p>
    <p>All certificates including ROAs will be published in RPKI repositories</p>
    <p>Each RIR operates one</p>
    <p>You could maintain your own repository</p>
    <p>Information of all repositories describe the overall picture</p>
    <p>Check if AS is allowed to announce IP prefix = check the corresponding ROA</p>
    <p>Corresponding ROA will be determined based on CIDR</p>
    <p>ROA needs cryptographic verification</p>
    <p>ROAs implements a positive attestation</p>
    <p>If a ROA for a prefix exists, announcements of all origin ASes that are not included will be considered INVALID</p>
  </div>
</Presentation>
