<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>FLUSH+RELOAD a High Resolu6on, Low Noise, L3 Cache Side-channel A@ack</p>
    <p>Yuval Yarom Katrina Falkner</p>
  </div>
  <div class="page">
    <p>Memory Sharing</p>
    <p>Techniques for reducing the overall memory footprint of the system.  Shared text segments  Shared libraries  Memory de-duplica6on</p>
    <p>Considered safe, i.e. equivalent to no sharing</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Cache Architecture and the FLUSH+RELOAD a@ack</p>
    <p>RSA and Square-and-mul6ply exponen6a6on  A@acking the GnuPG implementa6on of RSA</p>
  </div>
  <div class="page">
    <p>The X86 Cache</p>
    <p>Memory is slower than the processor</p>
    <p>The cache u6lises locality to bridge the gap  Divides memory into lines  Stores recently used lines</p>
    <p>Shared caches improve performance for mul6-core processors</p>
    <p>Processor</p>
    <p>Memory</p>
    <p>Cache</p>
  </div>
  <div class="page">
    <p>Cache Consistency</p>
    <p>Memory and cache can be in inconsistent states  Rare, but possible</p>
    <p>Solu6on: Flushing the cache contents  Ensures that the next load is served from the memory</p>
    <p>Processor</p>
    <p>Memory</p>
    <p>Cache</p>
  </div>
  <div class="page">
    <p>The FLUSH+RELOAD Technique</p>
    <p>Exploits cache behaviour to leak informa6on on vic6m access to shared memory.</p>
    <p>Spy monitors vic6ms access to shared code  Spy can determine what vic6m does  Spy can infer the data the vic6m operates on</p>
  </div>
  <div class="page">
    <p>FLUSH+RELOAD</p>
    <p>FLUSH memory line  Wait a bit  Measure 6me to RELOAD line  slow-&gt; no access  fast-&gt; access</p>
    <p>Repeat</p>
    <p>Processor</p>
    <p>Memory</p>
    <p>Cache</p>
  </div>
  <div class="page">
    <p>RSA</p>
    <p>RSA is a public key cryptographic scheme  The main opera6on is modular exponen6a6on, i.e. calcula6ng</p>
    <p>be mod n</p>
    <p>The exponent e used for decryp6on and for signing is secret</p>
  </div>
  <div class="page">
    <p>Square-and-Mul6ply Exponen6a6on</p>
    <p>Scans the exponent from the MSB to the LSB</p>
    <p>For clear bits does Square-Reduce</p>
    <p>For set bits does Square-Reduce- Mul6ply-Reduce</p>
    <p>The sequence of opera6ons reveals the (secret) exponent</p>
    <p>x 1 for i |e|-1 downto 0 do x x2 mod n if (ei =1) then x = xb mod n endif done return x</p>
  </div>
  <div class="page">
    <p>A@acking GnuPG</p>
    <p>Achieve sharing of the vic6m code  Use FLUSH+RELOAD to recover the sequence of opera6ons of the modular exponen6a6on</p>
    <p>Divide 6me into slots of 2048 cycles (about 0.6s)</p>
    <p>In each slot, probe a memory line in the code of the Square, Mul6ply and Modulo-reduce func6ons</p>
  </div>
  <div class="page">
    <p>A Sample Trace</p>
    <p>P ro</p>
    <p>b e</p>
    <p>T im</p>
    <p>e (</p>
    <p>c y c le</p>
    <p>s )</p>
    <p>Time Slot Number</p>
    <p>Threshold</p>
    <p>Square Multiply Modulo</p>
    <p>S S M r S S S M r r r r r r</p>
  </div>
  <div class="page">
    <p>Results</p>
    <p>Lost Bits</p>
    <p>i5-CentOS i5-VMware</p>
    <p>Xeon-CentOS Xeon-KVM</p>
  </div>
  <div class="page">
    <p>Applica6ons</p>
    <p>A@acking the default OpenSSL implementa6ons of ECDSA</p>
    <p>Synchronous cross-VM final round a@ack on AES  Trace the use of vi  Poten6al: keystroke 6ming, network use sta6s6cs</p>
  </div>
  <div class="page">
    <p>Lessons</p>
    <p>It is hard to limit the extent of sharing. E.g. read-only is more than read only.</p>
    <p>Use constant-6me implementa6ons of cryptographic primi6ves.</p>
    <p>Apply the principle of least privilege</p>
  </div>
</Presentation>
