<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>HeavyKeeper: An Accurate Algorithm for Finding Top-k Elephant Flows</p>
    <p>Junzhi Gong1, Tong Yang1, Haowei Zhang1, Hao Li1, Steve Uhlig2, Shigang Chen3, Lorna Uden4, Xiaoming Li1</p>
    <p>Peking University1, Queen Mary University of London2, University of Florida3, Staffordshire University4</p>
  </div>
  <div class="page">
    <p>Finding Top-k Elephant Flows</p>
    <p>Basic Flow Statistics</p>
    <p>Top-k Elephant Flows</p>
  </div>
  <div class="page">
    <p>Finding Top-k Elephant Flows</p>
    <p>Top-k Elephant Flows</p>
    <p>Applications Congestion</p>
    <p>Control Anomaly Detection</p>
    <p>Network Capacity Planning</p>
    <p>Finding top-k elephant flows serves as a fundamental network management function.</p>
  </div>
  <div class="page">
    <p>Flow Distribution of Real Traffic  Highly Skewed</p>
    <p>The majority are mouse flows  The minority are elephant flows  However, elephant flows are much more important</p>
  </div>
  <div class="page">
    <p>Challenges  High Line Rate</p>
    <p>Impossible to track information of all flows</p>
    <p>Solution: approximate methods</p>
    <p>High Latency of Off-chip Memory  Force algorithm to use on-chip</p>
    <p>memory, like SRAM</p>
    <p>The size of on-chip memory is small, e.g., several megabytes</p>
    <p>Packets</p>
  </div>
  <div class="page">
    <p>Existing Solution I: Count-All  A sketch to approximately record all flow sizes</p>
    <p>And a min-heap to maintain top-k elephant flows</p>
    <p>Sketches are smaller than hash tables  But they still need to store all flows, which is not memory</p>
    <p>efficient</p>
    <p>+1</p>
    <p>+1</p>
    <p>+1</p>
    <p>+1</p>
    <p>Packet</p>
    <p>Min-Heap</p>
  </div>
  <div class="page">
    <p>Existing Solution II: Admit-All-Count-Some</p>
    <p>Frequent, Lossy Counting, Space-Saving, CSS</p>
    <p>Process all flows, but only record a small part of them</p>
    <p>Example: Space-Saving</p>
    <p>!&quot;14 !#10 !$7 !%515 !&amp;6f1 f5</p>
  </div>
  <div class="page">
    <p>Limitation of two existing solutions  Count-All</p>
    <p>Spend too much memory and time on mouse flows  With total memory size small, the accuracy cannot be high</p>
    <p>Admit-All-Count-Some  Could drastically over-estimate flow sizes (Space-Saving, CSS)  Could make the size of elephant flows inaccurate (Frequent, Lossy</p>
    <p>Counting)  With limited memory size, many mouse flows can be mistreated as</p>
    <p>elephant flows.</p>
  </div>
  <div class="page">
    <p>Our Contributions  A new data structure, named HeavyKeeper, which achieves high</p>
    <p>accuracy and high processing speed in finding top-k elephant flows.</p>
    <p>Experiments on real network traffic and synthetic datasets, showing the high performance of HeavyKeeper</p>
    <p>Deploy algorithms in Open vSwitch (OVS) platform</p>
  </div>
  <div class="page">
    <p>Our Solution  HeavyKeeper</p>
    <p>Strategy: count-with-exponential-decay  Keeps only elephant flows  Drastically reduce space wasted on mouse flows</p>
    <p>Exponential-weakening-decay  Mouse flows are easily be decayed and removed  Elephant flows can hardly be removed  Will not admit new flows unless one flow is ready to be removed</p>
  </div>
  <div class="page">
    <p>Data Structure</p>
    <p>!3</p>
    <p>$(&amp;)</p>
    <p>((&amp;) )(&amp;)</p>
    <p>*</p>
    <p>+</p>
    <p>!  !  !  !  !  !  !  !  !  !  !  !</p>
  </div>
  <div class="page">
    <p>Insertion  Map: each incoming flow is mapped to one bucket for each array</p>
    <p>by using the hash functions</p>
    <p>Insert: for each mapped bucket, different strategies are applied according to different cases.</p>
  </div>
  <div class="page">
    <p>Insertion</p>
    <p>C-1</p>
    <p>!3 hi (!3)</p>
    <p>Case 1: if C=0 then C=C+1</p>
    <p>Case 2: if C&gt;0 &amp;&amp; FP=F3 then C=C+1</p>
    <p>FP</p>
    <p>Case 3.1: if C&gt;0 &amp;&amp; FP  F3 with %&amp;'(.= 1  -./012/, C=C</p>
    <p>Case 3.2: if C&gt;0 &amp;&amp; FP  F3 with %&amp;'(.= -./012/, C=C-1</p>
    <p>CFP</p>
    <p>C+1F3</p>
    <p>C+1F3</p>
    <p>CFP</p>
  </div>
  <div class="page">
    <p>Case 1  The bucket is empty, i.e., C=0</p>
    <p>Simply set the fingerprint to FP(f3), and set C=C+1=1</p>
    <p>&quot;3</p>
  </div>
  <div class="page">
    <p>Case 2  The bucket is not empty, i.e., C&gt;0, and FP=F3</p>
    <p>Simply set C=C+1</p>
    <p>CF3</p>
    <p>&quot;3</p>
    <p>C+1</p>
  </div>
  <div class="page">
    <p>Case 3  The bucket is not empty, i.e., C&gt;0, but FP F3</p>
    <p>With a probability &quot;#$%&amp;'$, decrease the counter C by 1.  If the counter is reduced to 0, we replace the original FP to the fingerprint</p>
    <p>of the new flow F3</p>
    <p>CFP</p>
    <p>*3</p>
    <p>C-10F3 1</p>
  </div>
  <div class="page">
    <p>Query  For incoming flow f</p>
    <p>Map: get d mapped buckets</p>
    <p>Filter: get those buckets whose fingerprint is FP(f)</p>
    <p>Answer: report the largest value among all filtered buckets (0 if no bucket left after filtering)</p>
  </div>
  <div class="page">
    <p>Decay Probability ! = #$%</p>
    <p># is a predefined constant, e.g., # = 1.08 * is the value in the current counter field (the value to be decayed)</p>
    <p>The larger * is, the harder its flow size is decayed</p>
  </div>
  <div class="page">
    <p>Decay Probability  When the original bucket stores a mouse flow, it will be easily</p>
    <p>decayed</p>
    <p>!  !3</p>
    <p>Decay with probability 1.08-3=0.794</p>
  </div>
  <div class="page">
    <p>Decay Probability  When the size of mouse flow is decayed to 0, the original flow will</p>
    <p>be replaced  Therefore, mouse flows can hardly stay in HeavyKeeper</p>
    <p>!  !3</p>
    <p>Decay with probability 1.08-1=0.926</p>
  </div>
  <div class="page">
    <p>Decay Probability  When the original bucket stores an elephant flow, it can be hardly</p>
    <p>decayed  Therefore, elephant flows can be stably stored in HeavyKeeper  The estimated size of elephant flows will also be accurate</p>
    <p>!  !3</p>
    <p>Decay with probability 1.08-100=4.55*10-4</p>
  </div>
  <div class="page">
    <p>Analysis  With exponential-weakening decay, HeavyKeeper will tend to</p>
    <p>store elephant flows and evict mouse flows.</p>
    <p>Most mouse flows are simply passers-by of HeavyKeeper.</p>
    <p>Elephant flows are easily stored, and their estimated flow sizes are also accurate.</p>
  </div>
  <div class="page">
    <p>Basic Algorithm  To find top-k elephant flows, the basic</p>
    <p>version of our algorithm will simply use a min-heap to maintain the top-k elephant flows, like sketches.</p>
    <p>Min-Heap</p>
    <p>HeavyKeeper</p>
  </div>
  <div class="page">
    <p>Analysis  Complexity</p>
    <p>Space: O(d*w).</p>
    <p>Experiments will show HeavyKeeper achieves high accuracy with very small memory</p>
    <p>usage.</p>
    <p>Time: O(k).</p>
    <p>Updating the min-heap is time consuming. Even with the help of hash tables, the</p>
    <p>insertion of the min-heap will also consume O(logk) time complexity.</p>
  </div>
  <div class="page">
    <p>Optimizations  Using the min-heap, improving accuracy</p>
    <p>Too many details, skip</p>
    <p>Replacing the min-heap with a single list, improving speed  Ignoring fingerprint collisions, the flow size of each flow will grow 1 by 1.</p>
    <p>Define a threshold T (e.g., T=1000)</p>
    <p>Recording the incoming flow in the list if the estimated size of the flow is equal to T</p>
    <p>Time complexity O(d)</p>
    <p>HeavyKeeper !&quot;#&quot;# !&quot;# = %? List Y</p>
  </div>
  <div class="page">
    <p>Experimental Setup  Datasets</p>
    <p>Campus network traffic  CAIDA  Synthetic skewed datasets, Zipf</p>
    <p>Implementation  &quot; = 2, enough for HeavyKeeper  Fixing k and changing memory size, estimate accuracy  Fixing memory size and changing k, estimate accuracy  Speed evaluation</p>
  </div>
  <div class="page">
    <p>Experimental Setup  Metrics</p>
    <p>Average absolute error (AAE). Absolute error is defined as |&quot;#  %&quot;#|.</p>
    <p>Average relative error (ARE). Relative error is defined as |&amp;'(%&amp;'| &amp;'</p>
    <p>.</p>
    <p>Precision. Among the k reported flows, how many flows are real top-k elephant flows. 0%~100%.</p>
  </div>
  <div class="page">
    <p>Changing Memory Size</p>
  </div>
  <div class="page">
    <p>Changing K</p>
  </div>
  <div class="page">
    <p>Speed Evaluation</p>
  </div>
  <div class="page">
    <p>Open vSwitch Deployment  Create a shared buffer between processes to store flow IDs.</p>
    <p>Modify OVS datapath to report each incoming flow ID to the shared buffer.</p>
    <p>A user-space program of HeavyKeeper to process those flow IDs from the buffer.</p>
    <p>Open vSwitch Buffer Flow ID</p>
    <p>HeavyKeeperFlow ID</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
  </div>
  <div class="page">
    <p>Thank you!</p>
  </div>
</Presentation>
