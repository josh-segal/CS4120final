<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Composing Software-Defined Networks</p>
    <p>Princeton* Cornell^</p>
    <p>Chris Monsanto*, Joshua Reich* Nate Foster^, Jen Rexford*, David Walker*</p>
    <p>www.frenetic-lang.org/pyretic</p>
  </div>
  <div class="page">
    <p>Enable network innovation by decoupling control plane: determines rules data plane: applies rules to packets</p>
    <p>Software Defined Networks (SDN)</p>
  </div>
  <div class="page">
    <p>Software Defined Networks (SDN)</p>
    <p>Acheived using open standard API</p>
  </div>
  <div class="page">
    <p>Controller Platform</p>
    <p>Controller Application</p>
    <p>Software Defined Networks (SDN)</p>
    <p>Enabling a shift from protocols to applications</p>
  </div>
  <div class="page">
    <p>Running Example Network!</p>
    <p>Internet</p>
    <p>Servers</p>
    <p>B</p>
    <p>A 1</p>
    <p>SDN Switch w/ labeled ports</p>
  </div>
  <div class="page">
    <p>Counters for each rule - #bytes, #packets</p>
    <p>Programming in OpenFlow</p>
    <p>Pattern Action</p>
    <p>Priority</p>
    <p>Route: IP/fwd</p>
    <p>B</p>
    <p>A 1</p>
    <p>dstip=A</p>
    <p>dstip=B dstip!=A dstip!=B</p>
  </div>
  <div class="page">
    <p>match(dstmac=A)[fwd(2)] match(dstmac=B)[fwd(3)] match(* )[fwd(1)]</p>
    <p>Pattern</p>
    <p>Switch: MAC/fwd</p>
    <p>B</p>
    <p>A 1</p>
    <p>One API, Many Uses</p>
    <p>Priority Ordered</p>
    <p>Action</p>
  </div>
  <div class="page">
    <p>Load Balancer: IP/mod</p>
    <p>B</p>
    <p>A 1</p>
    <p>Pattern Action</p>
    <p>match(srcip=0*,dstip=P)[mod(dstip=A)] match(srcip=1*,dstip=P)[mod(dstip=B)]</p>
    <p>One API, Many Uses</p>
  </div>
  <div class="page">
    <p>But Only Half of the Story</p>
    <p>Controller Platform</p>
    <p>Controller Application</p>
    <p>Hardware Interface</p>
    <p>OpenFlow (assembly)</p>
    <p>Hardware Flow-Table Rules (Machine Language)</p>
  </div>
  <div class="page">
    <p>But Only Half of the Story</p>
    <p>Controller Platform</p>
    <p>Hardware Interface</p>
    <p>Programmer Interface</p>
    <p>OpenFlow (assembly)</p>
    <p>? Modular &amp; Intuitive</p>
    <p>Hardware Flow-Table Rules (Machine Language)</p>
    <p>LB Route Monitor FW</p>
  </div>
  <div class="page">
    <p>match( dstip=A)[fwd(2) ] match( dstip=B)[fwd(3) ] match(* )[fwd(1) ]</p>
    <p>match(srcip=0*,dstip=P)[mod(dstip=A)] match(srcip=1*,dstip=P)[mod(dstip=B)]</p>
    <p>match(dstip=A)[fwd(2)] match(dstip=B)[fwd(3)] match(* )[fwd(1)]</p>
    <p>OpenFlow Isnt Modular</p>
    <p>Balance then Route</p>
    <p>match(srcip=0*,dstip=P)[mod(dstip=A)] match(srcip=1*,dstip=P)[mod(dstip=B)]</p>
    <p>Combined Rules? (only one match)</p>
    <p>Balances w/o Forwarding!</p>
  </div>
  <div class="page">
    <p>match( dstip=A)[fwd(2) ] match( dstip=B)[fwd(3) ] match(* )[fwd(1) ]</p>
    <p>match(srcip=0*,dstip=P)[mod(dstip=A)] match(srcip=1*,dstip=P)[mod(dstip=B)]</p>
    <p>match(dstip=A)[fwd(2)] match(dstip=B)[fwd(3)] match(* )[fwd(1)]</p>
    <p>OpenFlow Isnt Modular</p>
    <p>Balance then Route</p>
    <p>Combined Rules? (only one match)</p>
    <p>match(srcip=0*,dstip=P)[mod(dstip=A)] match(srcip=1*,dstip=P)[mod(dstip=B)]</p>
    <p>Forwards w/o Balancing!</p>
  </div>
  <div class="page">
    <p>Abstracts Providing Supporting</p>
    <p>Policy Compositional Operators</p>
    <p>Functional Composition</p>
    <p>Network Layered Abstract Topologies</p>
    <p>Topological Decomposition</p>
    <p>Packet Extensible Headers</p>
    <p>Policy &amp; Network Abstractions</p>
    <p>Pyretic (Contributions)</p>
  </div>
  <div class="page">
    <p>Traffic to P re-addressed and fowarded to either A or B, based on source</p>
    <p>Counted if from source X 14</p>
    <p>Compositional Operators: A Monitoring Load Balancer</p>
    <p>IP = 1*</p>
    <p>IP = 0*</p>
    <p>B</p>
    <p>A</p>
  </div>
  <div class="page">
    <p>Module 1: Balance</p>
    <p>Rewrite dstip P to A, if srcip=0* B, if srcip=1*</p>
    <p>Module 2: Route</p>
    <p>Based on dstip</p>
    <p>Module 3: Monitor</p>
    <p>count if srcip=X</p>
    <p>Compositional Operators: A Monitoring Load Balancer</p>
    <p>IP = 1*</p>
    <p>IP = 0*</p>
    <p>B</p>
    <p>A</p>
    <p>then , and</p>
  </div>
  <div class="page">
    <p>Gateway acts like:  Legacy router  Legacy switch</p>
    <p>ARP responder  Hybrid MAC-rewriter,</p>
    <p>legacy router/switch</p>
    <p>I 3 4</p>
    <p>Topology Abstraction: A Legacy Gateway Replacement</p>
    <p>F 1 E 2 G</p>
  </div>
  <div class="page">
    <p>Topology Abstraction: A Legacy Gateway Replacement</p>
    <p>F I 3 4 1 E 2</p>
    <p>Module 1: MAC-learn</p>
    <p>Module 3: IP-Route</p>
    <p>Module 2: Forward</p>
    <p>(ARP or MAC Rewrite)</p>
  </div>
  <div class="page">
    <p>Pyretics Design</p>
    <p>Monitoring Load Balancer  Encode policies as functions  Compositional operators  Queries as forwarding policies</p>
    <p>MAC-Learning Module  Dynamic Policies</p>
    <p>One Big Switch Topology Abstraction  Extensible packet model</p>
  </div>
  <div class="page">
    <p>Pyretic Drop Policy</p>
    <p>Goal: Drop packets (i.e., OpenFlow drop) Write: drop Means: eval(drop,p) = {}</p>
    <p>evaluate given policy on packet results in</p>
  </div>
  <div class="page">
    <p>Pyretic Forward Policy</p>
    <p>Goal: Forward packets out port a Write: fwd(a) Means: eval(fwd(a),p) = {p[outport:=a]}</p>
    <p>located packet w/ fields for  switch  inport  outport</p>
  </div>
  <div class="page">
    <p>One Pyretic Policy For Each OpenFlow Action</p>
    <p>drop fwd(port) flood mod(h=v)</p>
  </div>
  <div class="page">
    <p>Pyretic Policy</p>
    <p>Puts focus on meaning instead of mechanics</p>
    <p>A function mapping a located packet to a set of located packets eval(policy,packet) = {packet}</p>
  </div>
  <div class="page">
    <p>Parallel |: Do both C1 and C2 simultaneously eval(C1 | C2,p) = eval(C1,p) U eval(C2,p)</p>
    <p>Sequential &gt;&gt;: First do C1 and then do C2 eval(C1 &gt;&gt; C2,p) = U {eval(C2,p) for p in eval(C1,p)}</p>
    <p>match(dstip=A)[fwd(2)] | match(dstip=B)[fwd(3)] | ~(match(dstip=A) | match(dstip=b))[fwd(1)]</p>
    <p>Enabling Compositional Operators</p>
    <p>No priorities needed!</p>
  </div>
  <div class="page">
    <p>Querying as Forwarding</p>
    <p>Abstract location corresponding to a data-structure that store packet-data and callback processing routines</p>
    <p>b = count_bucket(every=1) b.register_callback(print) match(srcip=X)[fwd(b)]</p>
    <p>bucket(limit,[h]) count_bucket(every,[h])</p>
  </div>
  <div class="page">
    <p>Monitoring Load Balancer balance = match(srcip=0*,dstip=P)[mod(dstip=A)] | match(srcip=1*,dstip=P)[mod(dstip=B)] | ~match( dstip=P)[id ] route = match(dstip=A)[fwd(2)] | match(dstip=B)[fwd(3)] | ~(match(dstip=A) | match(dstip=B))[fwd(1)] b = counts(every=1) b.register_callback(print) monitor = match(srcip=X)[fwd(b)] mlb = (balance &gt;&gt; route) | monitor 25</p>
    <p>B</p>
    <p>A 1</p>
    <p>eval(id,p) = {p}</p>
  </div>
  <div class="page">
    <p>Compared to install_flowmod(5,srcip=X &amp; dstip=P,[mod(dstip=A), fwd(2)]) install_flowmod(4,srcip=0* &amp; dstip=P,[mod(dstip=A), fwd(2)]) install_flowmod(4,srcip=1* &amp; dstip=P,[mod(dstip=B), fwd(3)]) install_flowmod(4,srcip=X &amp; dstip=A ,[ fwd(2)]) install_flowmod(4,srcip=X &amp; dstip=B,[ fwd(3)]) install_flowmod(3, dstip=A,[ fwd(2)]) install_flowmod(3, dstip=B,[ fwd(3)]) install_flowmod(2,srcip=X ,[ fwd(1)]) install_flowmod(1,* ,[ fwd(3)])</p>
  </div>
  <div class="page">
    <p>Pyretics Design</p>
    <p>Monitoring Load Balancer  Encode Policies as Functions  Compositional Operators  Queries as Forwarding Policies</p>
    <p>MAC-Learning Module  Dynamic Policies</p>
    <p>One Big Switch Topology Abstraction  Extensible packet model</p>
  </div>
  <div class="page">
    <p>How Do We Change Policies?</p>
    <p>Dynamic policy a time-series of policies</p>
    <p>Pt=0 Pt=1</p>
    <p>Pt=3</p>
  </div>
  <div class="page">
    <p>Update current val Otherwise, policy unchanged</p>
    <p>MAC-Learning Module class learn(): def init(self): b = bucket(limit=1,[srcmac,switch]) b.register_callback(update) self.P = flood | fwd(b) def update(self,pkt): self.P = if_(match(dstmac=pkt[srcmac], switch=pkt[switch]), fwd(pkt[inport]), self.P)</p>
    <p>to flood</p>
    <p>If newly learned MAC</p>
    <p>if_(P,C1,C2) = P[C1] | ~P[C2]</p>
    <p>Forward directly to learned port</p>
  </div>
  <div class="page">
    <p>MAC-Learning Module class learn(): def init(self): b = bucket(limit=1,[srcmac,switch]) b.register_callback(update) self.P = flood | fwd(b) def update(self,pkt): self.P = if_(match(dstmac=pkt[srcmac], switch=pkt[switch]), fwd(pkt[inport]), self.P)</p>
    <p>First packet with unique srcmac, switch</p>
    <p>Defined momentarily</p>
    <p>to flood</p>
    <p>Time-series object</p>
    <p>and query Initialize current value of time series</p>
  </div>
  <div class="page">
    <p>Pyretics Design</p>
    <p>Monitoring Load Balancer  Encode Policies as Functions  Compositional Operators  Queries as Forwarding Policies</p>
    <p>MAC-Learning Module  Dynamic Policies</p>
    <p>One Big Switch Topology Abstraction  Extensible packet model</p>
  </div>
  <div class="page">
    <p>Field Val[0] Val[1] srcmac dstmac proto srcip ... switch inport outport vswitch</p>
    <p>All OpenFlow fields  Location fields  Virtual fields  Stacks of values</p>
    <p>push(h=v)  pop(h)  Actions and matches</p>
    <p>use (currently) top value</p>
    <p>Implemented on OpenFlow by mapping extended field values to VLAN tags/MPLS labels</p>
    <p>Extensible Pyretic Packet Model</p>
  </div>
  <div class="page">
    <p>Simplest of topology abstraction examples  Build a distributed middlebox</p>
    <p>by running centralized middlebox app on V!</p>
    <p>One Big Switch Topology Abstraction</p>
    <p>V</p>
    <p>S T</p>
  </div>
  <div class="page">
    <p>V</p>
    <p>S T</p>
    <p>Topology Abstraction def abstract(ingress,fabric,egress,derived):</p>
    <p>Returns a new policy for the underlying network (i.e., on nodes S and T)</p>
    <p>that does the derived policy on the abstract topology (i.e., on node V)</p>
    <p>using 3 partial transformation policies to:  handle packets entering abstract switch  move packets through abstract switch  handle packets exiting abstract switch</p>
  </div>
  <div class="page">
    <p>Field V0 V1 switch S V inport 1 1 outport 2</p>
    <p>Field V0 V1 switch S V inport 1 1</p>
    <p>Field V0 switch T inport 1 vswitch V vinport 1 voutport 2</p>
    <p>Field V0 switch S inport 1</p>
    <p>Field V0 switch T inport 1 vswitch 2 vinport 1 voutport 2</p>
    <p>Field V0 switch T inport 1 outport 2</p>
    <p>V</p>
    <p>S T</p>
    <p>Implementing abstract() def abstract(ingress,fabric,egress,derived): return ingress &gt;&gt; # defines part of transform derived &gt;&gt; # app run on abstract topo lower_packet &gt;&gt; # built-in fabric &gt;&gt; # defines part of transform egress # defines part of transform</p>
  </div>
  <div class="page">
    <p>Summary: Pyretic Policy Syntax</p>
    <p>(You may already be a Pyretic programmer!)</p>
  </div>
  <div class="page">
    <p>Summary: Abstractions</p>
    <p>Pyretic Current APIs</p>
    <p>Policy Rich Composition</p>
    <p>Little Composition</p>
    <p>Network Layered Abstract Topologies</p>
    <p>Concrete Network</p>
    <p>Packet Extensible Headers</p>
    <p>Fixed OpenFlow Headers</p>
  </div>
  <div class="page">
    <p>Related Work: [Frenetic, Maestro, FRESCO] / [Click]</p>
    <p>Abstracts Pyretic Current APIs</p>
    <p>Policy Rich Composition</p>
    <p>Some / Full Composition</p>
    <p>Network Layered Abstract Topologies</p>
    <p>Concrete Network</p>
    <p>Packet Extensible Headers</p>
    <p>Fixed OpenFlow Headers</p>
    <p>But only for a single software switch not multiple hardware switches</p>
  </div>
  <div class="page">
    <p>Related Work: [FlowVisor] / [Nicira NVP, OpenStack Quantum]</p>
    <p>Abstracts Pyretic Current APIs</p>
    <p>Policy Rich Composition</p>
    <p>Little Composition</p>
    <p>Network Layered Abstract Topologies</p>
    <p>Disjoint Slices / Topology Hiding</p>
    <p>Packet Extensible Headers</p>
    <p>Fixed OpenFlow Headers</p>
    <p>Both approaches support multi-tenancy, but not topological decomposition</p>
    <p>(of functional composition)</p>
  </div>
  <div class="page">
    <p>Pyretic Interpreter and Suite of Apps Available at www.frenetic-lang.org/pyretic</p>
    <p>Monitoring &amp; DPI  Load Balancers  Hub  ARP  Firewalls  MAC learner</p>
    <p>Abstractions  Big switch (one-to-many)  Spanning tree (many-to-many)  Gateway</p>
    <p>(many-to-one)</p>
    <p>And bigger applications built by combining these.</p>
  </div>
  <div class="page">
    <p>And More! Available at www.frenetic-lang.org/pyretic</p>
    <p>Features Request  Bug reporting</p>
    <p>Link to github</p>
    <p>Discuss list  Join the project</p>
    <p>Dev Roadmap  Reactive</p>
    <p>(microflow) runtime</p>
    <p>Proactive (compilation) runtime</p>
    <p>Optimizations  Caching</p>
  </div>
  <div class="page">
    <p>Thanks for Listening!</p>
  </div>
</Presentation>
