<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>BinSim: Trace-based Semantic Binary Diffing via System Call Sliced</p>
    <p>Segment Equivalence Checking</p>
    <p>Jiang Ming, Dongpeng Xu, Yufei Jiang, Dinghao Wu</p>
  </div>
  <div class="page">
    <p>This Talk is About  A hybrid method to identify fine-grained relations between</p>
    <p>obfuscated binary code.  Address block-centric limitation  Detect conditionally equivalent behaviors</p>
    <p>BinSim</p>
  </div>
  <div class="page">
    <p>Security-relevant Software Analysis for Binary Code</p>
    <p>Source</p>
    <p>datasize = getc(infile); .... for (code = 0; code &lt; clear; code++) {</p>
    <p>prefix[code] = 0; suffix[code] = code;</p>
    <p>}</p>
    <p>Binary Code</p>
    <p>Commercial-Off-The-Shelf</p>
  </div>
  <div class="page">
    <p>Binary Difference Analysis (Binary Diffing)</p>
    <p>MS12-005: Object Packager Patch Diffing</p>
  </div>
  <div class="page">
    <p>Security Applications of Binary Diffing  1-day exploit generation</p>
    <p>Software plagiarism detection</p>
    <p>Malware analysis</p>
    <p>Source: http://www.bankinfosecurity.com/blogs/nowransomware-goes-to-200-p-2287</p>
    <p>Ransomware Family Count Surpasses 200</p>
  </div>
  <div class="page">
    <p>Challenge: Code Obfuscation</p>
    <p>Original binary</p>
    <p>Suspicious binary</p>
    <p>Packer, polymorphism, metamorphism, and code virtualization</p>
  </div>
  <div class="page">
    <p>Compare Runtime Execution Behavior</p>
    <p>Measure the similarities of program behavior features  E.g., system call sequences and system call dependency graphs  Limitation: many binary code differences do not reflect on the</p>
    <p>behavior change; neglect conditionally equivalent behaviors</p>
    <p>Conditional equivalent behaviors between Trojan-Spy.Win32.Zbot variants</p>
  </div>
  <div class="page">
    <p>Basic Block Semantics Modeling  Represent the input-output relations as symbolic formulas</p>
    <p>Constraint solver, random sampling, and hashing  Resilient to moderate obfuscation within a basic block</p>
    <p>Register swapping, instruction reordering/substitution, and junk code  Block-centric limitation</p>
  </div>
  <div class="page">
    <p>mov edx, ecx mov ebx, 0x000A add edx, ebx mov ebx, ecx sub ecx, eax mov eax, ecx dec eax and ecx, 0 jmp 0x401922</p>
    <p>lea eax, [ebx] mov edx, 0x000A nop nop add eax, edx xchg eax, eax not ecx add ecx, ebx lea edx, [ebx] xor ebx, ebx jmp 0x401A22</p>
    <p>Binary block 1: Binary block 2:</p>
    <p>Are they semantically equivalent?</p>
  </div>
  <div class="page">
    <p>mov edx, ecx mov ebx, 0x000A add edx, ebx mov ebx, ecx sub ecx, eax mov eax, ecx dec eax and ecx, 0 jmp 0x401922</p>
    <p>lea eax, [ebx] mov edx, 0x000A nop nop add eax, edx xchg eax, eax not ecx add ecx, ebx lea edx, [ebx] xor ebx, ebx jmp 0x401A22</p>
    <p>Symbolic inputs to basic block 1: ecx_0 = symbol1; eax_0 = symbol2;</p>
    <p>Symbolic inputs to basic block 2: ebx_0 = symbol3; ecx_0 = symbol4;</p>
    <p>Outputs: eax_2 = symbol1-symbol2-1; ebx_1 = symbol 1; ecx_2 = 0x0; edx_1 = symbol1 + 0xA</p>
    <p>Outputs: ecx_2 = symbol3-symbol4-1; edx_1 = symbol 3; ebx_1 = 0x0; eax_3 = symbol4 + 0xA</p>
    <p>Constraint solver</p>
  </div>
  <div class="page">
    <p>Block-Centric Limitation (1)</p>
  </div>
  <div class="page">
    <p>Block-centric binary diffing methods fail to match these three cases</p>
  </div>
  <div class="page">
    <p>Block-Centric Limitation (2)  Compiler optimizations</p>
    <p>loop unrolling and function inline  Return-oriented programming obfuscation</p>
    <p>The chain of ROP gadgets will result in a set of small basic blocks  Different implementations of the same algorithm</p>
    <p>More examples in Hackers Delight  Control flow obfuscation</p>
    <p>opaque predicates and control flow flattening  Virtualization obfuscation</p>
    <p>The decode-dispatch loop generates a sequence of basic blocks to interpret one x86 instruction.</p>
  </div>
  <div class="page">
    <p>BinSim Overview</p>
    <p>syscall (arg1) syscall (arg1)</p>
    <p>System Call Sliced Segments + Equivalence Checking</p>
    <p>Equivalence Checking</p>
  </div>
  <div class="page">
    <p>BinSim Advantages  Whether two matched system calls are conditional equivalent  System call sliced segments bypass the boundary of a basic</p>
    <p>block  more likely to address Block-centric limitation</p>
    <p>BinSim</p>
  </div>
  <div class="page">
    <p>BinSim Core Method</p>
  </div>
  <div class="page">
    <p>BinSim Architecture</p>
  </div>
  <div class="page">
    <p>System Call Alignment  We rely on MalGene [CCS15], an advanced bioinformatics</p>
    <p>inspired approach to perform system call sequence alignment  Remove system call noises</p>
    <p>multi-tag taint analysis  consider the parameter semantics  fake dependency: xor eax, eax; NtClose(eax)</p>
  </div>
  <div class="page">
    <p>Dynamic Slicing Binary Code (1)  Dynamic slicing on the obfuscated binaries is never a</p>
    <p>textbook problem  Indirect memory access: mov ebx, [4*eax+4]  Implicit control transfers: COMVcc, SETcc, REP, LOOP, CMPXCHG  Decode-dispatch loop of virtualization obfuscation</p>
  </div>
  <div class="page">
    <p>Dynamic Slicing Binary Code (2)  Our solution: split data dependencies and control</p>
    <p>dependencies tracking  index and value based slicing to only trace data flow  tracking explicit and implicit control dependencies: eflags bit  exception: jecxz jumps if register ecx is zero  remove the fake control dependencies caused by virtualization</p>
    <p>obfuscation code dispatcher: 5 3,163  109</p>
  </div>
  <div class="page">
    <p>Handling Cryptographic Functions</p>
    <p>Cryptographic functions have been a known challenge to symbolic execution  Almost no interaction with system calls  Inspired by Caballero et al.s work (CCS'10), we do a stitched symbolic execution</p>
  </div>
  <div class="page">
    <p>Ground Truth Dataset</p>
    <p>Similarity scores change from right pairs to wrong pairs.</p>
  </div>
  <div class="page">
    <p>Comparative Evaluation Results</p>
  </div>
  <div class="page">
    <p>Analyzing Wild Malware Variants</p>
    <p>Collect 1,050 active malware samples from VirusShare on February 2017, 112 families Perform intra-family pairwise comparison BinSim are able to find small distances among intra-family samples. 11% of malware variants are conditionally equivalent Example: A variant of CryptoWall terminate execution if infected machines UI languages are former Soviet Union country languages</p>
  </div>
  <div class="page">
    <p>BinSim Limitations  BinSim only detects the similarities/differences exhibiting</p>
    <p>during execution.  incomplete path coverage + environment-sensitive malware</p>
    <p>Attack BinSims enhanced slicing algorithm  slice size explosion</p>
    <p>Custom cryptographic algorithm  evade cryptographic function approximate matching</p>
  </div>
  <div class="page">
    <p>Q &amp; A</p>
  </div>
</Presentation>
