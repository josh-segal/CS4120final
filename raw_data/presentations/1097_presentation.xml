<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Coccinelle: 10 Years of Automated Evolution in the Linux Kernel</p>
    <p>Julia Lawall, Gilles Muller (Inria/LIP6) July 12, 2018</p>
  </div>
  <div class="page">
    <p>Context</p>
    <p>The Linux kernel:</p>
    <p>Open source OS kernel, used in smartphones to supercomputers.  16MLOC and rapidly growing.  Frequent changes to improve correctness and performance.</p>
    <p>Issues:</p>
    <p>How to perform evolutions in such a large code base?  Once a bug is found, how to check whether it occurs elsewhere?</p>
  </div>
  <div class="page">
    <p>How to better maintain large code bases?</p>
    <p>Patches: The key to reasoning about change in the Linux kernel.</p>
    <p>From:</p>
    <p>@@ -1348,8 +1348,7 @@ - fh = kmalloc(sizeof(struct zoran_fh), GFP_KERNEL); + fh = kzalloc(sizeof(struct zoran_fh), GFP_KERNEL); if (!fh) { dprintk(1,</p>
    <p>KERN_ERR &quot;%s: zoran_open(): allocation of zoran_fh failed\n&quot;, ZR_DEVNAME(zr));</p>
    <p>return -ENOMEM; }</p>
    <p>- memset(fh, 0, sizeof(struct zoran_fh));</p>
    <p>SmPL = Semantic Patch Language Coccinelle applies SmPL semantic patches across a code base. Development began in 2006, first released in 2008.</p>
  </div>
  <div class="page">
    <p>Coccinelle</p>
    <p>A SmPL idea: Raise the level of abstraction to semantic patches.</p>
    <p>From: @@ -1348,8 +1348,7 @@ - fh = kmalloc(sizeof(struct zoran_fh), GFP_KERNEL); + fh = kzalloc(sizeof(struct zoran_fh), GFP_KERNEL); if (!fh) { dprintk(1,</p>
    <p>KERN_ERR &quot;%s: zoran_open(): allocation of zoran_fh failed\n&quot;, ZR_DEVNAME(zr));</p>
    <p>return -ENOMEM; }</p>
    <p>- memset(fh, 0, sizeof(struct zoran_fh));</p>
    <p>SmPL = Semantic Patch Language Coccinelle applies SmPL semantic patches across a code base. Development began in 2006, first released in 2008.</p>
  </div>
  <div class="page">
    <p>Coccinelle</p>
    <p>A SmPL idea: Raise the level of abstraction to semantic patches.</p>
    <p>To: @@ expression x,E1,E2; @@ - x = kmalloc(E1,E2); + x = kzalloc(E1,E2); ...</p>
    <p>- memset(x, 0, E1);</p>
    <p>SmPL = Semantic Patch Language  Coccinelle applies SmPL semantic patches across a code base.  Development began in 2006, first released in 2008. 5</p>
  </div>
  <div class="page">
    <p>Usage in the Linux kernel</p>
    <p>Coccinelle developers Outreachy interns Dedicated user 0-day Kernel maintainers Others</p>
    <p>Over 5500 commits.  59 semantic patches in the Linux kernel, usable via make coccicheck.</p>
    <p>44% of the 88 kernel developers who have at least one commit that touches 100 files also have at least one commit that uses Coccinelle.</p>
  </div>
  <div class="page">
    <p>Usage in the Linux kernel</p>
    <p>Coccinelle developers Outreachy interns Dedicated user 0-day Kernel maintainers Others</p>
    <p>Over 5500 commits.  59 semantic patches in the Linux kernel, usable via make coccicheck.  44% of the 88 kernel developers who have at least one commit that touches 100 files also have at least one commit that uses Coccinelle.</p>
  </div>
  <div class="page">
    <p>How did we get here?</p>
  </div>
  <div class="page">
    <p>Design dimensions</p>
    <p>Expressivity</p>
    <p>Performance</p>
    <p>Correctness guarantees</p>
    <p>Dissemination</p>
    <p>Did we make the right decisions? 8</p>
  </div>
  <div class="page">
    <p>Coccinelle design: expressivity</p>
    <p>Original hypothesis: Linux kernel developers will find it easy and convenient to describe needed code changes in terms of fragments of removed and added code.</p>
    <p>@@ expression x,E1,E2; @@ - x = kmalloc(E1,E2); + x = kzalloc(E1,E2); ...</p>
    <p>- memset(x, 0, E1);</p>
  </div>
  <div class="page">
    <p>Expressivity evolutions</p>
    <p>Confrontation with the real world:</p>
    <p>Many language evolutions: C features, metavariable types, etc.</p>
    <p>Position variables.  Record and match position of a token.</p>
    <p>Scripting language rules.  Original goal: bug finding, eg buffer overflows.  Used in practice for error reporting, counting, etc.</p>
  </div>
  <div class="page">
    <p>Position variables and scripts</p>
    <p>@ r @ expression object; position p @@ ( drm_connector_reference@p(object) | drm_connector_unreference@p(object) )</p>
    <p>@script:python@ object &lt;&lt; r.object; p &lt;&lt; r.p; @@</p>
    <p>msg=&quot;WARNING: use get/put helpers to reference and dereference %s&quot; % (object) coccilib.report.print_report(p[0], msg)</p>
  </div>
  <div class="page">
    <p>Status: Use of new features</p>
    <p>3325 commits contain semantic patches.</p>
    <p>18% use position variables.</p>
    <p>5% use scripts.</p>
    <p>43% of the semantic patches using position variables or scripts are from outside the Coccinelle team.</p>
    <p>All 59 semantic patches in the Linux kernel use both.</p>
  </div>
  <div class="page">
    <p>Coccinelle design: performance</p>
    <p>Goal: Be usable on a typical developer laptop.</p>
    <p>Target code base: 5MLOC in Feb 2007, 16.5MLOC in Jan 2018.</p>
    <p>Original design choices:</p>
    <p>Intraprocedural, one file at a time.  Process only .c files, by default.  Include only local or same-named headers, by default.  No macro expansion, instead use heuristics to parse macro uses.  Provide best-effort type inference, but no other program analysis.</p>
  </div>
  <div class="page">
    <p>Performance evolutions</p>
    <p>Confrontation with the real world:</p>
    <p>1, 5, or 15 MLOC is a lot of code.  Parsing is slow, because of backtracking heuristics.</p>
    <p>Evolutions:</p>
    <p>Indexing, via glimpse, id-utils.  Parallelism, via parmap.</p>
  </div>
  <div class="page">
    <p>Performance evolutions</p>
    <p>Confrontation with the real world:</p>
    <p>1, 5, or 15 MLOC is a lot of code.  Parsing is slow, because of backtracking heuristics.</p>
    <p>Evolutions:</p>
    <p>Indexing, via glimpse, id-utils.  Parallelism, via parmap.</p>
  </div>
  <div class="page">
    <p>Status: Performance</p>
    <p>semantic patches el ap se d tim</p>
    <p>e (s ec .)</p>
    <p>semantic patches</p>
    <p>nu m be r of fil es</p>
    <p>files considered</p>
    <p>Based on the 59 semantic patches in the Linux kernel.</p>
  </div>
  <div class="page">
    <p>Coccinelle design: correctness guarantees</p>
    <p>Ensure that outermost terms are replaced by like outermost terms @@ expression x,E1,E2,E3; @@ - x = kmalloc(E1,E2); + x = kzalloc(E1,E2); ...</p>
    <p>- memset(x, 0, E1);</p>
    <p>No other correctness guarantees:</p>
    <p>Bug fixes and evolutions may not be semantics preserving.  Improves expressiveness and performance.  Rely on developers knowledge of the code base and ease of creating and refining semantic patches.</p>
  </div>
  <div class="page">
    <p>Correctness guarantee evolutions</p>
    <p>Confrontation with the real world:</p>
    <p>Mostly, developer control over readable rules is good enough.</p>
  </div>
  <div class="page">
    <p>Coccinelle design: dissemination strategy</p>
    <p>Show by example:</p>
    <p>June 1, 2007: Fix parse errors in kernel code.</p>
    <p>July 7, 2007: Irq function evolution  Updates in 5 files, in net, atm, and usb</p>
    <p>July 6, 2007: kmalloc + memset  kzalloc  Updates to 166 calls in 146 files.  A kernel developer responded Cool!.  Violated patch-review policy of Linux.</p>
    <p>July 2008: Use by a non-Coccinelle developer.</p>
    <p>October 2008: Open-source release.</p>
  </div>
  <div class="page">
    <p>Dissemination strategy evolutions</p>
    <p>Confrontation with the real world:</p>
    <p>Showing by example generated initial interest.  Organized four workshops: industry participants.  Presentations at developer conferences: FOSDEM, Linux Plumbers, etc.  LWN articles by kernel developers.</p>
  </div>
  <div class="page">
    <p>Impact: Changed lines</p>
    <p>ar ch</p>
    <p>bl oc k</p>
    <p>cr yp to</p>
    <p>dr iv er s fs</p>
    <p>in cl ud e</p>
    <p>in it</p>
    <p>ip c</p>
    <p>ke rn el lib m m ne t</p>
    <p>sa m pl es</p>
    <p>se cu ri ty</p>
    <p>so un d</p>
    <p>to ol s</p>
    <p>vi rt</p>
    <p>(lo g sc al e) Removed lines Added lines</p>
  </div>
  <div class="page">
    <p>Impact: Maintainer use</p>
    <p>nu m be r of co m m its Cleanups</p>
    <p>Bug fixes</p>
  </div>
  <div class="page">
    <p>Impact: Maintainer use examples</p>
    <p>TTY. Remove an unused function argument.</p>
    <p>11 affected files.</p>
    <p>DRM. Eliminate a redundant field in a data structure.</p>
    <p>54 affected files.</p>
    <p>Interrupts. Prepare to remove the irq argument from interrupt handlers, and then remove that argument.</p>
    <p>188 affected files.</p>
  </div>
  <div class="page">
    <p>Impact: Intels 0-day build-testing service</p>
    <p># w ith</p>
    <p>pa tc he s</p>
    <p>api free iterators locks null tests misc</p>
    <p># w ith</p>
    <p>m es sa ge on ly</p>
  </div>
  <div class="page">
    <p>Coccinelle community</p>
    <p>Most from the Coccinelle team, due to use of OCaml and PL concepts.  Active mailing list (cocci@systeme.lip6.fr).</p>
    <p>Availability</p>
    <p>Packaged for many Linux distros.</p>
    <p>Use outside Linux</p>
    <p>RIOT, systemd, qemu, etc.</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Initial design decisions mostly remain valid, with some extensions.  Take the expertise of the target users into account.  Avoid creeping featurism: Do one thing and do it well.</p>
    <p>Tool should be easy to access and install, and easy to use and robust.</p>
    <p>Success measure: Over 5500 commits in the Linux kernel based on Coccinelle.</p>
    <p>Probably, everyone in this room uses some Coccinelle modified code!</p>
    <p>http://coccinelle.lip6.fr</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Initial design decisions mostly remain valid, with some extensions.  Take the expertise of the target users into account.  Avoid creeping featurism: Do one thing and do it well.</p>
    <p>Tool should be easy to access and install, and easy to use and robust.</p>
    <p>Success measure: Over 5500 commits in the Linux kernel based on Coccinelle.</p>
    <p>Probably, everyone in this room uses some Coccinelle modified code!</p>
    <p>http://coccinelle.lip6.fr</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Initial design decisions mostly remain valid, with some extensions.  Take the expertise of the target users into account.  Avoid creeping featurism: Do one thing and do it well.</p>
    <p>Tool should be easy to access and install, and easy to use and robust.</p>
    <p>Success measure: Over 5500 commits in the Linux kernel based on Coccinelle.</p>
    <p>Probably, everyone in this room uses some Coccinelle modified code!</p>
    <p>http://coccinelle.lip6.fr</p>
  </div>
</Presentation>
