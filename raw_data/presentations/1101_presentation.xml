<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>AUDIT: Troubleshooting TransientlyRecurring Problems in Production Systems with Blame-Proportional Logging</p>
    <p>Liang Luo, Suman Nath, Lenin Ravindranath Sivalingam, Madan Musuvathi and Luis Ceze University of Washington, Microsoft Research</p>
  </div>
  <div class="page">
    <p>Cloud applications are complex</p>
    <p>Despite tremendous effort of testing, SLO violations, exceptions, and crashes</p>
    <p>Shared environments</p>
    <p>Many layers 3rd-party components</p>
  </div>
  <div class="page">
    <p>DevOps usually turn to logging for help when problems occur</p>
    <p>Logging is the most commonly used technique for troubleshooting, but logging itself is very hard to done right!</p>
  </div>
  <div class="page">
    <p>Logging has an inherent trade off between utility and overhead: Ef</p>
    <p>fic ie</p>
    <p>nc y</p>
    <p>Utility</p>
    <p>Log Little</p>
    <p>Log All</p>
    <p>(in production)</p>
    <p>(pre-production)</p>
    <p>Two extremes in production and testing:</p>
    <p>Production: collects little data for higher runtime performance; however log utility is low as most logs generated are irrelevant when root-causing problems.</p>
    <p>Testing: collects everything for maximum utility and ignores runtime overhead.</p>
  </div>
  <div class="page">
    <p>AUDIT: AUtomatic Drilldown with Dynamic Instrumentation and Trigger</p>
    <p>Ef fic</p>
    <p>ie nc</p>
    <p>y</p>
    <p>Utility</p>
    <p>Log Little</p>
    <p>Log All</p>
    <p>(in production)</p>
    <p>(pre-production)</p>
    <p>AUDIT (in production) AUDIT Strategy:</p>
    <p>Get the best of both world with Dynamic Logging.</p>
  </div>
  <div class="page">
    <p>AUDIT Challenges</p>
    <p>When to log? Right after a problem occurs. Problems are detected using developer specified triggers.</p>
    <p>Key insight: Many problems in cloud applications are transiently recurring -- they occur rarely, but when they do, they recur for a short period of time.</p>
    <p>Can start logging when they show up, and when they recur, detailed info can be collected.</p>
    <p>Examples: network hardware issues, malformed user inputs, load balancer taking time to tick in, neck and back pain</p>
  </div>
  <div class="page">
    <p>AUDIT Challenges</p>
    <p>When to log?</p>
    <p>Where to Log? Highly blamed methods that are causally related to the misbehaving request.</p>
    <p>Requires: AUDIT uses Continuous Causal Tracing to track methods that are causally related to misbehaving request.</p>
    <p>Requires: AUDIT uses novel Critical Blame metric to select highly-blamed methods to log, as root cause usually involves a small set of methods.</p>
  </div>
  <div class="page">
    <p>AUDIT Challenges</p>
    <p>When to log?</p>
    <p>Where to Log?</p>
    <p>Dynamically Turning Logging On/Off? Use dynamic instrumentation to log only what is specified in triggers.</p>
  </div>
  <div class="page">
    <p>AUDIT in action</p>
    <p>Always On Monitoring</p>
    <p>Problem detected</p>
    <p>Detail logging for a small time window, at few places</p>
    <p>Developer saw the logs sometime in the future</p>
    <p>time</p>
    <p>Always On Monitoring La</p>
    <p>te nc</p>
    <p>y (m</p>
    <p>s) 1</p>
  </div>
  <div class="page">
    <p>AUDIT Key Mechanisms</p>
    <p>When to log?</p>
    <p>Where to Log?</p>
    <p>Dynamically Turning Logging On/Off?</p>
    <p>End product: A push button tool: no knowledge of or changes to code, activate only by setting environment variable.</p>
    <p>Efficient: &lt;1% overhead during normal operation.</p>
    <p>Effective: found 8 unforeseen bugs in 5 production systems.</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>When to log? AUDIT Triggers</p>
    <p>Where to Log? Causal tracing Blame ranking</p>
    <p>Evaluation Case studies Micro benchmark results</p>
  </div>
  <div class="page">
    <p>AUDIT triggers</p>
    <p>Defining what it means for application to go wrong. Triggers contains 4 components.</p>
    <p>ON: when is the trigger evaluated? IF: on what condition is the trigger activated? LOG: what to do when the trigger is activated? UNTIL: when is the logging deactivated?</p>
  </div>
  <div class="page">
    <p>AUDIT triggers highlights</p>
    <p>Trigger language is motivated by recent surveys on how developers log and what logging is useful. (See paper for details) - Logging for both bad and good requests help differential analysis - Provides streaming aggregates of performance metrics to be used with triggers</p>
    <p>Uses dynamic instrumentation to flexibly collect data required for trigger evaluation (more on this later)</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>When to log? AUDIT Triggers</p>
    <p>Where to Log? Causal tracing (Only methods related to misbehaving requests) Blame ranking</p>
    <p>Evaluation Case studies Overhead</p>
  </div>
  <div class="page">
    <p>Continuous Causal Tracing: generating request activity graph</p>
    <p>AUDIT reconstructs request activity graph (RAG), all methods that are casually related to a request. AUDIT assumes requests are independent of each other.</p>
    <p>F1 F3 F4</p>
    <p>F5</p>
    <p>F6</p>
    <p>F9F7</p>
    <p>F8 F10</p>
    <p>F12 F11</p>
    <p>F12</p>
    <p>F13</p>
    <p>F16 F14 F15</p>
    <p>F2</p>
  </div>
  <div class="page">
    <p>Continuous Causal Tracing: generating asynchronous exception chain</p>
    <p>AUDIT reconstructs asynchronous exception chain (AEC). A call chain consists of all methods from root to the exception site. A chain differs from stacktrace such that it can contain already finished methods.</p>
    <p>Exc id: 0xA45 St. trace: [ ]</p>
    <p>Exc id: 0xA45 St. trace: [ ]</p>
    <p>Exc id: 0xA45 St. trace: [F4, F3]</p>
    <p>SyncAsync</p>
    <p>Join on exception ID Use stack trace Call chain: F1 F2 F3 F4</p>
    <p>Async F1 F3 F4F2</p>
  </div>
  <div class="page">
    <p>Continuous Causal Tracing: tracing RAG and AEC</p>
    <p>AUDIT can use existing causal tracing techniques for reconstructing RAG and AEC: Dynamic Instrumentation, Thread Local Storage, and Metadata Propagation.</p>
    <p>High runtime overhead: 8% for just continuous causal tracing, which is required for trigger evaluation (when trigger fires we need to know what methods lead to it).</p>
    <p>Needs optimizations!</p>
  </div>
  <div class="page">
    <p>Continuous Causal Tracing: optimization for TAP applications</p>
    <p>Task Asynchronous Pattern is an emerging pattern that allows writing asynchronous code in a synchronous way, using the idea of continuation.</p>
    <p>TAP is supported in many platforms natively or via libraries.</p>
    <p>TAP is supported in all major cloud providers.</p>
  </div>
  <div class="page">
    <p>Continuous Causal Tracing: optimization for TAP applications</p>
    <p>RAG: AUDIT utilizes async lifecycle events by existing TAP frameworks to piece together a RAG without dynamic Instrumentation.</p>
    <p>AEC: AUDIT utilizes first chance exception, global exception handler, inheritable thread-local storage to passively reconstruct the exception call chain. AUDITs AEC construction incurs zero overhead during normal execution.</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>When to log? AUDIT Triggers</p>
    <p>Where to Log? Causal tracing (Only methods related to misbehaving requests) Blame ranking (Select top-blamed methods as RAGs and AECs can be big)</p>
    <p>Evaluation Case studies Overhead</p>
  </div>
  <div class="page">
    <p>Critical Blame: ranking methods for exception-related trigger</p>
    <p>Methods that are closer to the exception are more likely related to the root cause.</p>
  </div>
  <div class="page">
    <p>Critical Blame: ranking methods for performance-related trigger</p>
    <p>Critical blame combines critical path analysis and normalized processor time. - Blame only tasks that are running (versus waiting) - Co-running tasks share the blame for the time period - Focus on task on the critical path - Include selective non-critical path as they may interfere with critical path methods</p>
    <p>Task1</p>
    <p>Task1.1</p>
    <p>Task1.2</p>
    <p>Task1.1.1</p>
    <p>Task1.1.3</p>
    <p>A</p>
    <p>B</p>
    <p>C</p>
    <p>D</p>
    <p>E F</p>
    <p>G</p>
    <p>H</p>
    <p>Task Blame</p>
    <p>Task1 A+H/2</p>
    <p>Task1.1 (B+D+G)/2</p>
    <p>Task1.1.1 C/2</p>
    <p>Task1.1.2 E/3+(F+G+H)/2</p>
    <p>Task1.1.3 (E+F)/2</p>
    <p>Task1.2 (B+C+D)/2+E/3</p>
    <p>Task1.1.2</p>
  </div>
  <div class="page">
    <p>Task1</p>
    <p>Task1.1</p>
    <p>Task1.2</p>
    <p>Task1.1.1</p>
    <p>Task1.1.3</p>
    <p>A</p>
    <p>B</p>
    <p>C</p>
    <p>D</p>
    <p>E F</p>
    <p>G</p>
    <p>H</p>
    <p>Task1.1.2</p>
    <p>Critical Blame: selecting top N=2 methods</p>
    <p>Task Blame</p>
    <p>Task1 A+H/2</p>
    <p>Task1.1 (B+D+G)/2</p>
    <p>Task1.1.1 C/2</p>
    <p>Task1.1.2 E/3+(F+G+H)/2</p>
    <p>Task1.1.3 (E+F)/2</p>
    <p>Task1.2 (B+C+D)/2+E/3</p>
    <p>Task Blame</p>
    <p>Task1.1 (B+D+G)/2</p>
    <p>Task1 A+H/2</p>
    <p>Task1.1.2 E/3+(F+G+H)/2</p>
    <p>Task1.2 (B+C+D)/2+E/3</p>
    <p>Task1.1.3 (E+F)/2</p>
    <p>Task1.1.1 C/2</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>When to log? AUDIT Triggers</p>
    <p>Where to Log? Causal tracing (Only methods related to misbehaving requests) Blame ranking (Select top-blamed methods)</p>
    <p>Evaluation Case studies Overhead</p>
  </div>
  <div class="page">
    <p>AUDIT Effectiveness: root-causing problems</p>
    <p>AUDIT can pinpoint performance issues, such as</p>
    <p>We implemented AUDIT for .NET and applied it to 1 production system at Microsoft and 4 highprofile, open source libraries in GitHub.</p>
    <p>lack of negative caching bad content formatmissed parallel opportunityredundant method callscontention with optimistic concurrency</p>
  </div>
  <div class="page">
    <p>AUDIT Effectiveness: root-causing problems</p>
    <p>AUDIT can pinpoint exception issues, such as</p>
    <p>We implemented AUDIT for .NET and applied it to 1 production system at Microsoft and 4 highprofile, open source libraries in GitHub.</p>
    <p>concurrent editsfile name length</p>
  </div>
  <div class="page">
    <p>AUDIT Effectiveness: critical blame ranking</p>
    <p>A1 B1</p>
    <p>A2</p>
    <p>AllJoin</p>
    <p>C1</p>
    <p>A3</p>
    <p>Scenario 1</p>
    <p>C2B2</p>
    <p>B3 C3</p>
    <p>Delay1 Delay2 Delay3</p>
    <p>AnyJoin</p>
    <p>A1</p>
    <p>AnyJoin</p>
    <p>A2 A3</p>
    <p>AnyJoin</p>
    <p>Scenario 4</p>
    <p>AnyJoin</p>
    <p>Delay</p>
    <p>A</p>
    <p>B C</p>
    <p>Scenario 2</p>
    <p>AllJoinA</p>
    <p>B C</p>
    <p>DE F</p>
    <p>H</p>
    <p>Task JoinTask Fork Task Exec Task WaitTime</p>
    <p>Scenario 3 (A: async method, A1: first instance of A, Delay: timeout method)</p>
    <p>AUDIT is more sensitive than Normalized Processor Time, Top Critical Methods, and Iterative Logical Zeroing in locating bottlenecks.</p>
  </div>
  <div class="page">
    <p>AUDIT Overhead: negligible for real applications</p>
    <p>NO A</p>
    <p>UD IT</p>
    <p>Al wa</p>
    <p>ys O</p>
    <p>n ( AO</p>
    <p>) E TW</p>
    <p>AO in</p>
    <p>str um</p>
    <p>en tat</p>
    <p>ion</p>
    <p>Tr igg</p>
    <p>er</p>
    <p>Lo gg</p>
    <p>ing (5</p>
    <p>)</p>
    <p>Lo gg</p>
    <p>ing (a</p>
    <p>ll)</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (r</p>
    <p>eq /s</p>
    <p>) 0% 0.59% 1.13% 2.50% 0.45% 7.05%</p>
    <p>NO A</p>
    <p>UD IT</p>
    <p>Al wa</p>
    <p>ys O</p>
    <p>n ( AO</p>
    <p>) E TW</p>
    <p>AO in</p>
    <p>str um</p>
    <p>en tat</p>
    <p>ion</p>
    <p>Tr igg</p>
    <p>er</p>
    <p>Lo gg</p>
    <p>ing (5</p>
    <p>)</p>
    <p>Lo gg</p>
    <p>ing (a</p>
    <p>ll)</p>
    <p>La te</p>
    <p>nc y</p>
    <p>(m s)</p>
    <p>Ra w</p>
    <p>O ve</p>
    <p>rh ea</p>
    <p>d Re</p>
    <p>al A</p>
    <p>pp lic</p>
    <p>at io</p>
    <p>n (M</p>
    <p>as si</p>
    <p>ve )</p>
    <p>O ve</p>
    <p>rh ea</p>
    <p>d</p>
  </div>
  <div class="page">
    <p>AUDIT</p>
    <p>- Troubleshooting transiently-recurring errors - Blame-proportional logging - Provide declarative trigger language - Negligible overhead - Found 8 new unforeseen bugs</p>
  </div>
</Presentation>
