<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Decaf: Moving Device Drivers to a Modern Language</p>
    <p>Ma$hew Renzelmann Michael Swi0 University of WisconsinMadison</p>
  </div>
  <div class="page">
    <p>Many, many more</p>
    <p>Driver Programming Is Not Easy  __free_pages  argv_free  blk_queue_free_tags  dma_free_coherent  free_all_bootmem  free_page_and_swap_cache  free_pages  free_pages_exact  free_swap_and_cache  hci_free_dev  kfree  kfree_skb  mempool_kfree  page_table_free  pci_free_consistent</p>
    <p>release_and_free_resource  rpc_free_iostats  sctp_ootb_pkt_free  selinux_xfrm_policy_free  skb_free_datagram  snd_device_free_all  snd_dma_free_pages  snd_info_free_entry  snd_free_pages  snd_soc_dapm_free  snd_util_mem_free  snd_util_memhdr_free  ssp_free  try_to_free_swap  vfree</p>
  </div>
  <div class="page">
    <p>What About Java?</p>
    <p>&lt;This slide inten,onally le0 blank&gt;</p>
  </div>
  <div class="page">
    <p>Kernel vs. Java Development</p>
    <p>Feature Kernel Java</p>
    <p>Memory management</p>
    <p>Manual Garbage collecTon</p>
    <p>Type safety Limited Extensive</p>
    <p>Debugging Few tools / difficult</p>
    <p>Many tools / easier</p>
    <p>Data structure library</p>
    <p>Subset of libc Java class library</p>
    <p>Error handling Return values ExcepTons</p>
  </div>
  <div class="page">
    <p>MoTvaTon</p>
    <p>Kernel programming is difficult and leads to driver unreliability</p>
    <p>ExisTng approaches  IsolaTng drivers (Nooks [Swi004], SafeDrive [Zhou06])</p>
    <p>Userlevel drivers (Nexus [Williams08])  New driver design (Dingo [Ryzhyk09], Usermode Driver Framework [Microso006], Singularity [Hunt05])</p>
  </div>
  <div class="page">
    <p>Decaf Drivers</p>
    <p>Decaf Drivers execute most driver code in user mode Java  Performance criTcal code le0 in kernel</p>
    <p>The Decaf System provides support for 1. migraTng driver code into a modern language (Java)</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>IntroducTon  Overview</p>
    <p>Goals  Architecture</p>
    <p>Design and ImplementaTon  EvaluaTon  Conclusion</p>
  </div>
  <div class="page">
    <p>Goals: Making Decaf PracTcal</p>
  </div>
  <div class="page">
    <p>ExisTng Driver Architecture</p>
    <p>Kernel</p>
    <p>Driver Device</p>
    <p>ApplicaTon</p>
    <p>Li$le error checking at compile or run Tme</p>
    <p>No rich data structure library  Few debugging aids</p>
  </div>
  <div class="page">
    <p>Kernel</p>
    <p>Decaf Architecture</p>
    <p>ApplicaTon</p>
    <p>UserLevel Driver Decaf Driver</p>
    <p>(Java)</p>
    <p>Decaf RunTme/XPC</p>
    <p>Nuclear RunTme/XPC</p>
    <p>Driver Nucleus Driver Device</p>
  </div>
  <div class="page">
    <p>Kernel</p>
    <p>Decaf Architecture</p>
    <p>ApplicaTon</p>
    <p>UserLevel Driver Decaf Driver</p>
    <p>(Java)</p>
    <p>Decaf RunTme/XPC</p>
    <p>Nuclear RunTme/XPC</p>
    <p>Driver Nucleus</p>
    <p>Driver Library (C)</p>
    <p>Device</p>
  </div>
  <div class="page">
    <p>CreaTng Decaf Drivers</p>
    <p>DriverSlicer provides tool support to move driver code out of the kernel</p>
  </div>
  <div class="page">
    <p>CreaTng Decaf Drivers Legacy Driver</p>
    <p>Annotated Legacy Driver</p>
    <p>DriverSlicer</p>
    <p>the driver into a Driver Nucleus and Library</p>
    <p>Decaf Driver (Java)</p>
    <p>Decaf Driver (Java)</p>
    <p>XPC</p>
    <p>Driver Nucleus</p>
    <p>Driver Library (C)</p>
    <p>Driver Library (C)</p>
    <p>XPC</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>IntroducTon  Overview  Design and ImplementaTon</p>
    <p>CommunicaTon  CreaTon</p>
    <p>EvaluaTon  Conclusion</p>
  </div>
  <div class="page">
    <p>Design: RunTme Components</p>
    <p>Locking/SynchronizaTon: ComboLocks  Sharing: Object Tracker  CommunicaTon: Extension Procedure Call (XPC)</p>
    <p>Kernel/User upcalls and downcalls  Java/C calls</p>
  </div>
  <div class="page">
    <p>Kernel</p>
    <p>ENS1371 CommunicaTon Example</p>
    <p>ApplicaTon</p>
    <p>UserLevel Driver Decaf Driver</p>
    <p>(Java)</p>
    <p>Decaf RunTme/XPC</p>
    <p>Nuclear RunTme/XPC</p>
    <p>Driver Nucleus</p>
    <p>Driver Library (C)</p>
    <p>Device snd_audiopci_int</p>
  </div>
  <div class="page">
    <p>Kernel</p>
    <p>ENS1371 CommunicaTon Example</p>
    <p>ApplicaTon</p>
    <p>UserLevel Driver Decaf Driver</p>
    <p>(Java)</p>
    <p>Decaf RunTme/XPC</p>
    <p>Nuclear RunTme/XPC</p>
    <p>Driver Nucleus</p>
    <p>Driver Library (C)</p>
    <p>Device</p>
    <p>insmod ens1371</p>
    <p>snd_audiopci_probe</p>
  </div>
  <div class="page">
    <p>Kernel/User XPC</p>
    <p>Challenges  Minimizing data copied  CommunicaTng complex data structures</p>
    <p>SoluTons  Copying only structure fields that are used  DetecTng recursion and linked data structures</p>
  </div>
  <div class="page">
    <p>Kernel</p>
    <p>Kernel/User XPC</p>
    <p>ApplicaTon</p>
    <p>UserLevel Driver Decaf Driver</p>
    <p>(Java)</p>
    <p>Decaf RunTme/XPC</p>
    <p>Nuclear RunTme/XPC</p>
    <p>Driver Nucleus</p>
    <p>Driver Library (C)</p>
    <p>Device</p>
    <p>snd_audiopci_probe</p>
  </div>
  <div class="page">
    <p>Java/C CommunicaTon</p>
    <p>SoluTon: Use Jeannie [Hirzel, OOPSLA 07]  Allows C and Java code to be mixed at the expression level</p>
    <p>Uses the back Tck operator (`) to switch from Java to C</p>
    <p>No need to write Java NaTve Interface code</p>
    <p>public static void outb(int val, int port) `{ outb (`val, `port); // No XPC necessary }</p>
  </div>
  <div class="page">
    <p>Complex Java/C Transfer: XPC</p>
    <p>Example: invoking the Java implementaTon of snd_audiopci_probe from C</p>
    <p>Complex data structures are communicated via Java/C XPC  XPC uses marshaling and demarshaling to transfer data structures</p>
    <p>Wrappers implemented using Jeannie simplify control and data transfer</p>
  </div>
  <div class="page">
    <p>Kernel</p>
    <p>Java/C XPC</p>
    <p>ApplicaTon</p>
    <p>UserLevel Driver Decaf Driver</p>
    <p>(Java)</p>
    <p>Decaf RunTme/XPC</p>
    <p>Nuclear RunTme/XPC</p>
    <p>Driver Nucleus</p>
    <p>Driver Library (C)</p>
    <p>Device</p>
    <p>snd_audiopci_probe</p>
  </div>
  <div class="page">
    <p>CreaTon: DriverSlicer</p>
    <p>Goal: Migrate code in exisTng driver to Java  DriverSlicer features</p>
    <p>Splits drivers into a driver nucleus and library  Provides access to kernel data and funcTons from Java</p>
  </div>
  <div class="page">
    <p>Access to Kernel Data and FuncTons</p>
    <p>Phase one: CILbased tool  Extracts all data structure definiTons and typedefs  Converts these definiTons to an XDR specificaTon</p>
    <p>Phase two: Enhanced exisTng rpcgen and jrpcgen tools  Create Java classes with public fields  Support features like recursive data structures</p>
  </div>
  <div class="page">
    <p>Phase 1: Example</p>
    <p>struct e1000_adapter {  struct e1000_rx_ring test_rx_ring; uint32_t * __attribute__((exp(PCI_LEN))) config_space; int msg_enable;  };</p>
    <p>typedef unsigned int uint32_t;</p>
    <p>struct uint32_256_t { uint32_t array_256[256]; };</p>
    <p>typedef struct uint32_t_256 *uint32_t_256_ptr;</p>
    <p>struct e1000_adapter {  struct e1000_rx_ring test_rx_ring; uint32_t_256_ptr config_space; int msg_enable;  };</p>
    <p>Original C code</p>
    <p>AutomaBcallygenerated XDR DefiniBon</p>
    <p>From e1000.h</p>
  </div>
  <div class="page">
    <p>Phase 2: ConTnued</p>
    <p>public class e1000_adapter  {  public e1000_rx_ring test_rx_ring; public uint32_t_256_ptr config_space; public int msg_enable;  public e1000_adapter () {  } public e1000_adapter(XdrDecStream xdr) {  } public void xdrEncode(XdrEncStream xdr) {  } public void xdrDecode(XdrDecStream xdr) {  } } AutomaBcallygenerated Java</p>
    <p>typedef unsigned int uint32_t; struct uint32_256_t { uint32_t array_256[256]; }; typedef struct uint32_t_256 *uint32_t_256_ptr; struct e1000_adapter {  struct e1000_rx_ring test_rx_ring; uint32_t_256_ptr config_space; int msg_enable;  }; AutomaBcallygenerated XDR DefiniBon</p>
  </div>
  <div class="page">
    <p>Driver EvoluTon</p>
    <p>Example: E1000 network driver 2.6.18.1 to 2.6.27  e1000_adapter structure needs addiTonal members</p>
    <p>XPC does not transfer new fields automaTcally  SoluTon: the driver is the specificaTon</p>
  </div>
  <div class="page">
    <p>Design Summary</p>
    <p>Decaf meets its goals  Decaf supports</p>
    <p>CompaTbility with exisTng drivers  A migraTon path from C to Java  EvoluTon of kernels and drivers</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>IntroducTon  Overview  Design and ImplementaTon  EvaluaTon</p>
    <p>Conversion effort  Performance analysis  Benefits of Decaf Drivers</p>
    <p>Case study of E1000 gigabit network driver  Conclusion</p>
  </div>
  <div class="page">
    <p>Conversion Effort</p>
    <p>Driver Original Lines of Code</p>
    <p>Anno  taBons</p>
    <p>FuncBons</p>
    <p>Driver Nucleus</p>
    <p>Decaf Driver</p>
    <p>Driver Library</p>
    <p>e1000 14,204 64 46 236 0</p>
    <p>ens1371 2,165 18 6 59 0</p>
    <p>psmouse 2,448 17 15 14 74</p>
    <p>uhci  hcd 2,339 94 68 3 12</p>
  </div>
  <div class="page">
    <p>Results: RelaTve Performance</p>
  </div>
  <div class="page">
    <p>Results: CPU UTlizaTon</p>
    <p>E1000: Core 2 Quad 2.4Ghz, 4GB RAM All others: PenTum D 3.0Ghz, 1GB RAM</p>
    <p>No XPC</p>
    <p>One XPC call every two seconds</p>
    <p>No XPC 15 XPC calls on playback start/end</p>
  </div>
  <div class="page">
    <p>Experience RewriTng Drivers</p>
    <p>Step one: iniTal conversion  Largely mechanical: syntax is similar  Leaf funcTons first, then remainder</p>
    <p>Step two: use Java language features  Example benefit: E1000 excepTon handling</p>
  </div>
  <div class="page">
    <p>Java Error Handling Original C, e1000_hw.c</p>
    <p>Many extra condiTonals  Easy to miss an error condiTon</p>
    <p>if(hw-&gt;ffe_config_state == e1000_ffe_config_active) { ret_val = e1000_read_phy_reg(hw, 0x2F5B, &amp;phy_saved_data); if(ret_val) return ret_val;</p>
    <p>ret_val = e1000_write_phy_reg(hw, 0x2F5B, 0x0003); if(ret_val) return ret_val;</p>
    <p>msec_delay_irq(20); ret_val = e1000_write_phy_reg(hw, 0x0000, IGP01E1000_IEEE_FORCE_GIGA); if(ret_val) return ret_val;</p>
  </div>
  <div class="page">
    <p>Java Error Handling Java, e1000_hw.java</p>
    <p>E1000 Decaf Driver: using excepTons  Uncovered at least 28 cases of ignored error condiTons</p>
    <p>ResulTng code 8% shorter overall 35</p>
    <p>if(hw.ffe_config_state.value == e1000_ffe_config_active) { e1000_read_phy_reg(0x2F5B, phy_saved_data); e1000_write_phy_reg((short) 0x2F5B, (short) 0x0003); e1000_write_phy_reg((short) 0x2F5B, (short) 0x0003); DriverWrappers.Java_msleep (20); e1000_write_phy_reg((short) 0x0000, (short) IGP01E1000_IEEE_FORCE_GIGA);</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>Decaf Drivers simplify driver programming  Provide a migraTon path from C to Java  Allow driver code to run in user mode  Support conTnued driver and kernel evoluTon  Offer excellent performance</p>
  </div>
  <div class="page">
    <p>QuesTons?</p>
    <p>For more informaTon:</p>
    <p>mjr@cs.wisc.edu</p>
    <p>swi0@cs.wisc.edu</p>
    <p>h$p://pages.cs.wisc.edu/~swi0/drivers</p>
  </div>
</Presentation>
