<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>WiscKey: Separating Keys from Values in SSD-Conscious Storage</p>
    <p>Lanyue Lu, Thanumalayan Pillai, Andrea C. Arpaci-Dusseau, Remzi H. Arpaci-Dusseau</p>
    <p>University of Wisconsin-Madison</p>
  </div>
  <div class="page">
    <p>Key-Value Stores</p>
  </div>
  <div class="page">
    <p>Key-Value Stores</p>
    <p>Key-value stores are important  web indexing, e-commerce, social networks  various key-value stores  hash table, b-tree  log-structured merge trees (LSM-trees)</p>
  </div>
  <div class="page">
    <p>Key-Value Stores</p>
    <p>Key-value stores are important  web indexing, e-commerce, social networks  various key-value stores  hash table, b-tree  log-structured merge trees (LSM-trees)</p>
    <p>LSM-tree based key-value stores are popular  optimize for write intensive workloads  widely deployed  BigTable and LevelDB at Google  HBase, Cassandra and RocksDB at FaceBook</p>
  </div>
  <div class="page">
    <p>Why LSM-trees ?</p>
  </div>
  <div class="page">
    <p>Why LSM-trees ?</p>
    <p>Good for hard drives  batch and write sequentially  high sequential throughput  sequential access up to 1000x faster than random</p>
  </div>
  <div class="page">
    <p>Why LSM-trees ?</p>
    <p>Good for hard drives  batch and write sequentially  high sequential throughput  sequential access up to 1000x faster than random</p>
    <p>Not optimal for SSDs  large write/read amplification  wastes device resources</p>
  </div>
  <div class="page">
    <p>Why LSM-trees ?</p>
    <p>Good for hard drives  batch and write sequentially  high sequential throughput  sequential access up to 1000x faster than random</p>
    <p>Not optimal for SSDs  large write/read amplification  wastes device resources</p>
    <p>unique characteristics of SSDs  fast random reads  internal parallelism</p>
  </div>
  <div class="page">
    <p>Our Solution: WiscKey</p>
  </div>
  <div class="page">
    <p>Our Solution: WiscKey</p>
    <p>Separate keys from values</p>
  </div>
  <div class="page">
    <p>Our Solution: WiscKey</p>
    <p>Separate keys from values  decouple sorting and garbage collection</p>
    <p>LSM-tree</p>
    <p>key value</p>
  </div>
  <div class="page">
    <p>Our Solution: WiscKey</p>
    <p>Separate keys from values  decouple sorting and garbage collection</p>
    <p>LSM-tree</p>
    <p>key value</p>
    <p>Value Log</p>
  </div>
  <div class="page">
    <p>Our Solution: WiscKey</p>
    <p>Separate keys from values  decouple sorting and garbage collection  harness SSDs internal parallelism for range queries</p>
    <p>LSM-tree</p>
    <p>key value</p>
    <p>Value Log</p>
  </div>
  <div class="page">
    <p>Our Solution: WiscKey</p>
    <p>Separate keys from values  decouple sorting and garbage collection  harness SSDs internal parallelism for range queries  online and light-weight garbage collection</p>
    <p>LSM-tree</p>
    <p>key value</p>
    <p>Value Log</p>
  </div>
  <div class="page">
    <p>Our Solution: WiscKey</p>
    <p>Separate keys from values  decouple sorting and garbage collection  harness SSDs internal parallelism for range queries  online and light-weight garbage collection  minimize I/O amplification and crash consistent</p>
    <p>LSM-tree</p>
    <p>key value</p>
    <p>Value Log</p>
  </div>
  <div class="page">
    <p>Our Solution: WiscKey</p>
    <p>Separate keys from values  decouple sorting and garbage collection  harness SSDs internal parallelism for range queries  online and light-weight garbage collection  minimize I/O amplification and crash consistent</p>
    <p>LSM-tree</p>
    <p>key value</p>
    <p>Value Log</p>
    <p>Performance of WiscKey  2.5x to 111x for loading, 1.6x to 14x for lookups</p>
  </div>
  <div class="page">
    <p>Background</p>
    <p>Key-Value Separation</p>
    <p>Challenges and Optimizations</p>
    <p>Evaluation</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>LSM-trees: Insertion</p>
    <p>Log L0 (8MB)</p>
    <p>L1 (10MB)</p>
    <p>L2 (100MB)</p>
    <p>L6 (ITB)</p>
    <p>memory</p>
    <p>disk</p>
  </div>
  <div class="page">
    <p>LSM-trees: Insertion</p>
    <p>Log L0 (8MB)</p>
    <p>L1 (10MB)</p>
    <p>L2 (100MB)</p>
    <p>L6 (ITB)</p>
    <p>memory</p>
    <p>disk</p>
    <p>LevelDB</p>
  </div>
  <div class="page">
    <p>LSM-trees: Insertion</p>
    <p>Log L0 (8MB)</p>
    <p>L1 (10MB)</p>
    <p>L2 (100MB)</p>
    <p>L6 (ITB)</p>
    <p>memory KV</p>
    <p>disk</p>
    <p>LevelDB</p>
  </div>
  <div class="page">
    <p>LSM-trees: Insertion</p>
    <p>Log L0 (8MB)</p>
    <p>L1 (10MB)</p>
    <p>L2 (100MB)</p>
    <p>L6 (ITB)</p>
    <p>memory 1</p>
    <p>KV</p>
    <p>disk</p>
    <p>LevelDB</p>
  </div>
  <div class="page">
    <p>LSM-trees: Insertion</p>
    <p>Log L0 (8MB)</p>
    <p>L1 (10MB)</p>
    <p>L2 (100MB)</p>
    <p>L6 (ITB)</p>
    <p>memory 1</p>
    <p>KVmemT 2</p>
    <p>disk</p>
    <p>LevelDB</p>
  </div>
  <div class="page">
    <p>LSM-trees: Insertion</p>
    <p>Log L0 (8MB)</p>
    <p>L1 (10MB)</p>
    <p>L2 (100MB)</p>
    <p>L6 (ITB)</p>
    <p>memory 1</p>
    <p>KVmemTmemT 23</p>
    <p>disk</p>
    <p>LevelDB</p>
  </div>
  <div class="page">
    <p>LSM-trees: Insertion</p>
    <p>Log L0 (8MB)</p>
    <p>L1 (10MB)</p>
    <p>L2 (100MB)</p>
    <p>L6 (ITB)</p>
    <p>memory 1</p>
    <p>KVmemTmemT 23</p>
    <p>LevelDB</p>
  </div>
  <div class="page">
    <p>LSM-trees: Insertion</p>
    <p>Log L0 (8MB)</p>
    <p>L1 (10MB)</p>
    <p>L2 (100MB)</p>
    <p>L6 (ITB)</p>
    <p>memory 1</p>
    <p>KVmemTmemT 23</p>
    <p>disk</p>
    <p>LevelDB</p>
  </div>
  <div class="page">
    <p>LSM-trees: Insertion</p>
    <p>Log L0 (8MB)</p>
    <p>L1 (10MB)</p>
    <p>L2 (100MB)</p>
    <p>L6 (ITB)</p>
    <p>memory 1</p>
    <p>KVmemTmemT 23</p>
    <p>disk</p>
    <p>LevelDB</p>
  </div>
  <div class="page">
    <p>LSM-trees: Insertion</p>
    <p>Log L0 (8MB)</p>
    <p>L1 (10MB)</p>
    <p>L2 (100MB)</p>
    <p>L6 (ITB)</p>
    <p>memory 1</p>
    <p>KVmemTmemT 23</p>
    <p>disk</p>
    <p>LevelDB</p>
  </div>
  <div class="page">
    <p>LSM-trees: Lookup</p>
    <p>Log L0 (8MB)</p>
    <p>L1 (10MB)</p>
    <p>L2 (100MB)</p>
    <p>L6 (ITB)</p>
    <p>memory</p>
    <p>disk</p>
  </div>
  <div class="page">
    <p>LSM-trees: Lookup</p>
    <p>Log L0 (8MB)</p>
    <p>L1 (10MB)</p>
    <p>L2 (100MB)</p>
    <p>L6 (ITB)</p>
    <p>memory</p>
    <p>disk</p>
    <p>LevelDB</p>
  </div>
  <div class="page">
    <p>LSM-trees: Lookup</p>
    <p>Log L0 (8MB)</p>
    <p>L1 (10MB)</p>
    <p>L2 (100MB)</p>
    <p>L6 (ITB)</p>
    <p>memory</p>
    <p>K</p>
    <p>disk</p>
    <p>LevelDB</p>
  </div>
  <div class="page">
    <p>LSM-trees: Lookup</p>
    <p>Log L0 (8MB)</p>
    <p>L1 (10MB)</p>
    <p>L2 (100MB)</p>
    <p>L6 (ITB)</p>
    <p>memory</p>
    <p>KmemT 1</p>
    <p>disk</p>
    <p>LevelDB</p>
  </div>
  <div class="page">
    <p>LSM-trees: Lookup</p>
    <p>Log L0 (8MB)</p>
    <p>L1 (10MB)</p>
    <p>L2 (100MB)</p>
    <p>L6 (ITB)</p>
    <p>memory</p>
    <p>KmemT 1</p>
    <p>disk</p>
    <p>LevelDB</p>
  </div>
  <div class="page">
    <p>LSM-trees: Lookup</p>
    <p>Log L0 (8MB)</p>
    <p>L1 (10MB)</p>
    <p>L2 (100MB)</p>
    <p>L6 (ITB)</p>
    <p>memory</p>
    <p>KmemT 1</p>
    <p>disk</p>
    <p>LevelDB</p>
  </div>
  <div class="page">
    <p>LSM-trees: Lookup</p>
    <p>Log L0 (8MB)</p>
    <p>L1 (10MB)</p>
    <p>L2 (100MB)</p>
    <p>L6 (ITB)</p>
    <p>memory</p>
    <p>KmemT 1</p>
    <p>disk</p>
    <p>LevelDB</p>
  </div>
  <div class="page">
    <p>LSM-trees: Lookup</p>
    <p>Log L0 (8MB)</p>
    <p>L1 (10MB)</p>
    <p>L2 (100MB)</p>
    <p>L6 (ITB)</p>
    <p>memory</p>
    <p>KmemT 1</p>
    <p>disk</p>
    <p>LevelDB</p>
  </div>
  <div class="page">
    <p>I/O Amplification in LSM-trees</p>
  </div>
  <div class="page">
    <p>I/O Amplification in LSM-trees</p>
    <p>m pl</p>
    <p>ifi ca</p>
    <p>tio n</p>
    <p>R at</p>
    <p>io</p>
    <p>Write Read</p>
  </div>
  <div class="page">
    <p>Random load: a 100GB database</p>
    <p>Random lookup: 100,000 lookups</p>
    <p>I/O Amplification in LSM-trees</p>
    <p>m pl</p>
    <p>ifi ca</p>
    <p>tio n</p>
    <p>R at</p>
    <p>io</p>
    <p>Write Read</p>
  </div>
  <div class="page">
    <p>Problems:</p>
    <p>large write amplification</p>
    <p>large read amplification</p>
    <p>Random load: a 100GB database</p>
    <p>Random lookup: 100,000 lookups</p>
    <p>I/O Amplification in LSM-trees</p>
    <p>m pl</p>
    <p>ifi ca</p>
    <p>tio n</p>
    <p>R at</p>
    <p>io</p>
    <p>Write Read</p>
  </div>
  <div class="page">
    <p>Background</p>
    <p>Key-Value Separation</p>
    <p>Challenges and Optimizations</p>
    <p>Evaluation</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Key-Value Separation</p>
  </div>
  <div class="page">
    <p>Key-Value Separation</p>
    <p>Main idea: only keys are required to be sorted</p>
  </div>
  <div class="page">
    <p>Key-Value Separation</p>
    <p>Main idea: only keys are required to be sorted</p>
    <p>Decouple sorting and garbage collection</p>
  </div>
  <div class="page">
    <p>Key-Value Separation</p>
    <p>LSM-tree Value Log</p>
    <p>SSD device</p>
    <p>Main idea: only keys are required to be sorted</p>
    <p>Decouple sorting and garbage collection</p>
  </div>
  <div class="page">
    <p>Key-Value Separation</p>
    <p>key</p>
    <p>LSM-tree</p>
    <p>value</p>
    <p>Value Log</p>
    <p>SSD device</p>
    <p>Main idea: only keys are required to be sorted</p>
    <p>Decouple sorting and garbage collection</p>
  </div>
  <div class="page">
    <p>Key-Value Separation</p>
    <p>key</p>
    <p>LSM-tree</p>
    <p>value</p>
    <p>Value Log</p>
    <p>value</p>
    <p>SSD device</p>
    <p>Main idea: only keys are required to be sorted</p>
    <p>Decouple sorting and garbage collection</p>
  </div>
  <div class="page">
    <p>Key-Value Separation</p>
    <p>key</p>
    <p>LSM-tree</p>
    <p>value</p>
    <p>Value Log</p>
    <p>k, addr value</p>
    <p>SSD device</p>
    <p>Main idea: only keys are required to be sorted</p>
    <p>Decouple sorting and garbage collection</p>
  </div>
  <div class="page">
    <p>Random Load</p>
    <p>Key: 16B, Value: 64B to 256KB</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (M</p>
    <p>B /s</p>
    <p>)</p>
    <p>LevelDB WiscKey</p>
  </div>
  <div class="page">
    <p>Random Load</p>
    <p>Key: 16B, Value: 64B to 256KB</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (M</p>
    <p>B /s</p>
    <p>)</p>
    <p>LevelDB WiscKey load 100 GB database</p>
  </div>
  <div class="page">
    <p>Random Load</p>
    <p>only 2 MB/s to 4.1 MB/s</p>
    <p>Key: 16B, Value: 64B to 256KB</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (M</p>
    <p>B /s</p>
    <p>)</p>
    <p>LevelDB WiscKey load 100 GB database</p>
  </div>
  <div class="page">
    <p>Random Load</p>
    <p>only 2 MB/s to 4.1 MB/s</p>
    <p>Key: 16B, Value: 64B to 256KB</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (M</p>
    <p>B /s</p>
    <p>)</p>
    <p>LevelDB WiscKey load 100 GB database</p>
    <p>large write amplification (12 to 16) in LevelDB</p>
  </div>
  <div class="page">
    <p>Random Load</p>
    <p>only 2 MB/s to 4.1 MB/s</p>
    <p>Small write amplification in WiscKey due to keyvalue separation (up to 111x in throughput)</p>
    <p>Key: 16B, Value: 64B to 256KB</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (M</p>
    <p>B /s</p>
    <p>)</p>
    <p>LevelDB WiscKey load 100 GB database</p>
    <p>large write amplification (12 to 16) in LevelDB</p>
  </div>
  <div class="page">
    <p>Random Load</p>
    <p>only 2 MB/s to 4.1 MB/s</p>
    <p>Small write amplification in WiscKey due to keyvalue separation (up to 111x in throughput)</p>
    <p>Key: 16B, Value: 64B to 256KB</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (M</p>
    <p>B /s</p>
    <p>)</p>
    <p>LevelDB WiscKey load 100 GB database</p>
    <p>large write amplification (12 to 16) in LevelDB</p>
  </div>
  <div class="page">
    <p>L0</p>
    <p>L1 (5)</p>
    <p>L2 (50)</p>
    <p>L3 (500)</p>
    <p>L4 (5000)</p>
    <p>L5 (50000)</p>
    <p>L6 (500000)</p>
    <p>LevelDB</p>
    <p>limits of files num of files</p>
  </div>
  <div class="page">
    <p>L0</p>
    <p>L1 (5)</p>
    <p>L2 (50)</p>
    <p>L3 (500)</p>
    <p>L4 (5000)</p>
    <p>L5 (50000)</p>
    <p>L6 (500000)</p>
    <p>LevelDB</p>
    <p>limits of files num of files</p>
    <p>Large LSM-tree:</p>
    <p>Intensive compaction  repeated reads/writes  stall foreground I/Os</p>
    <p>Many levels  travel several levels for each lookup</p>
  </div>
  <div class="page">
    <p>L0</p>
    <p>L1 (5)</p>
    <p>L2 (50)</p>
    <p>L3 (500)</p>
    <p>L4 (5000)</p>
    <p>L5 (50000)</p>
    <p>L6 (500000)</p>
    <p>LevelDB WiscKey</p>
    <p>limits of files num of files num of files</p>
  </div>
  <div class="page">
    <p>L0</p>
    <p>L1 (5)</p>
    <p>L2 (50)</p>
    <p>L3 (500)</p>
    <p>L4 (5000)</p>
    <p>L5 (50000)</p>
    <p>L6 (500000)</p>
    <p>LevelDB WiscKey</p>
    <p>Small LSM-tree: less compaction, fewer levels to search, and better caching</p>
    <p>limits of files num of files num of files</p>
  </div>
  <div class="page">
    <p>Random Lookup</p>
    <p>Key: 16B, Value: 64B to 256KB</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (M</p>
    <p>B /s</p>
    <p>)</p>
    <p>LevelDB WiscKey</p>
  </div>
  <div class="page">
    <p>Random Lookup</p>
    <p>Key: 16B, Value: 64B to 256KB</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (M</p>
    <p>B /s</p>
    <p>)</p>
    <p>LevelDB WiscKey</p>
  </div>
  <div class="page">
    <p>Random Lookup</p>
    <p>Key: 16B, Value: 64B to 256KB</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (M</p>
    <p>B /s</p>
    <p>)</p>
    <p>LevelDB WiscKey</p>
    <p>in LevelDB</p>
  </div>
  <div class="page">
    <p>Random Lookup</p>
    <p>Smaller LSM-tree in WiscKey leads to better lookup performance (1.6x - 14x)</p>
    <p>Key: 16B, Value: 64B to 256KB</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (M</p>
    <p>B /s</p>
    <p>)</p>
    <p>LevelDB WiscKey</p>
    <p>in LevelDB</p>
  </div>
  <div class="page">
    <p>Background</p>
    <p>Key-Value Separation</p>
    <p>Challenges and Optimizations  Parallel range query  Garbage collection  LSM-log</p>
    <p>Evaluation</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Parallel Range Query</p>
  </div>
  <div class="page">
    <p>Parallel Range Query</p>
    <p>SSD read performance  sequential, random, parallel</p>
  </div>
  <div class="page">
    <p>Parallel Range Query</p>
    <p>Request size: 1KB to 256KB</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (M</p>
    <p>B /s</p>
    <p>)</p>
    <p>Sequential Rand-1thread Rand-32threads</p>
    <p>SSD: Samsung 840 EVO 500GB Reads on a 100GB file on ext4</p>
    <p>SSD read performance  sequential, random, parallel</p>
  </div>
  <div class="page">
    <p>Parallel Range Query</p>
  </div>
  <div class="page">
    <p>Parallel Range Query</p>
    <p>Challenge  sequential reads in LevelDB  read keys and values separately in WiscKey</p>
  </div>
  <div class="page">
    <p>Parallel Range Query</p>
    <p>Challenge  sequential reads in LevelDB  read keys and values separately in WiscKey</p>
    <p>Parallel range query  leverage parallel random reads of SSDs</p>
  </div>
  <div class="page">
    <p>Parallel Range Query</p>
    <p>Challenge  sequential reads in LevelDB  read keys and values separately in WiscKey</p>
    <p>Parallel range query  leverage parallel random reads of SSDs  prefetch key-value pairs in advance  range query interface: seek(), next(), prev()  detect a sequential pattern  prefetch concurrently in background</p>
  </div>
  <div class="page">
    <p>Range Query</p>
    <p>Key: 16B, Value: 64B to 256KB</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (M</p>
    <p>B /s</p>
    <p>)</p>
    <p>LevelDB-Rand WiscKey-Rand</p>
  </div>
  <div class="page">
    <p>Range Query</p>
    <p>Key: 16B, Value: 64B to 256KB</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (M</p>
    <p>B /s</p>
    <p>)</p>
    <p>LevelDB-Rand WiscKey-Rand</p>
    <p>read 4GB from a randomly loaded 100 GB database</p>
  </div>
  <div class="page">
    <p>Range Query</p>
    <p>Key: 16B, Value: 64B to 256KB</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (M</p>
    <p>B /s</p>
    <p>)</p>
    <p>LevelDB-Rand WiscKey-Rand</p>
    <p>read 4GB from a randomly loaded 100 GB database</p>
    <p>For large kv pairs, WiscKey can perform better</p>
  </div>
  <div class="page">
    <p>Range Query</p>
    <p>Key: 16B, Value: 64B to 256KB</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (M</p>
    <p>B /s</p>
    <p>)</p>
    <p>LevelDB-Rand WiscKey-Rand</p>
    <p>read 4GB from a randomly loaded 100 GB database</p>
    <p>WiscKey is limited by SSDs parallel random read performance</p>
    <p>For large kv pairs, WiscKey can perform better</p>
  </div>
  <div class="page">
    <p>Range Query</p>
    <p>Better for large kv pairs, but worse for small kv pairs on an unsorted database</p>
    <p>Key: 16B, Value: 64B to 256KB</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (M</p>
    <p>B /s</p>
    <p>)</p>
    <p>LevelDB-Rand WiscKey-Rand</p>
    <p>read 4GB from a randomly loaded 100 GB database</p>
    <p>WiscKey is limited by SSDs parallel random read performance</p>
    <p>For large kv pairs, WiscKey can perform better</p>
  </div>
  <div class="page">
    <p>Range Query</p>
    <p>Key: 16B, Value: 64B to 256KB</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (M</p>
    <p>B /s</p>
    <p>)</p>
    <p>LevelDB-Rand WiscKey-Rand</p>
    <p>LevelDB-Seq WiscKey-Seq</p>
  </div>
  <div class="page">
    <p>Range Query</p>
    <p>Key: 16B, Value: 64B to 256KB</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (M</p>
    <p>B /s</p>
    <p>)</p>
    <p>LevelDB-Rand WiscKey-Rand</p>
    <p>LevelDB-Seq WiscKey-Seq</p>
    <p>read 4GB from a sequentially loaded 100 GB database</p>
  </div>
  <div class="page">
    <p>Range Query</p>
    <p>Key: 16B, Value: 64B to 256KB</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (M</p>
    <p>B /s</p>
    <p>)</p>
    <p>LevelDB-Rand WiscKey-Rand</p>
    <p>LevelDB-Seq WiscKey-Seq</p>
    <p>read 4GB from a sequentially loaded 100 GB database</p>
    <p>Both WiscKey and LevelDB read sequentially</p>
  </div>
  <div class="page">
    <p>Range Query</p>
    <p>Sorted databases help WiscKeys range query</p>
    <p>Key: 16B, Value: 64B to 256KB</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (M</p>
    <p>B /s</p>
    <p>)</p>
    <p>LevelDB-Rand WiscKey-Rand</p>
    <p>LevelDB-Seq WiscKey-Seq</p>
    <p>read 4GB from a sequentially loaded 100 GB database</p>
    <p>Both WiscKey and LevelDB read sequentially</p>
  </div>
  <div class="page">
    <p>Optimizations</p>
  </div>
  <div class="page">
    <p>Optimizations</p>
    <p>LSM-tree Value Log</p>
    <p>valuek, addr value value</p>
    <p>SSD device</p>
  </div>
  <div class="page">
    <p>Optimizations</p>
    <p>LSM-tree Value Log</p>
    <p>valuek, addr value value</p>
    <p>SSD device</p>
    <p>Online and light-weight garbage collection  append (ksize, vsize, key, value) in value log</p>
  </div>
  <div class="page">
    <p>Optimizations</p>
    <p>LSM-tree Value Log</p>
    <p>valuek, addr value value</p>
    <p>SSD device</p>
    <p>ksize, vsize, key, value</p>
    <p>Online and light-weight garbage collection  append (ksize, vsize, key, value) in value log</p>
  </div>
  <div class="page">
    <p>Optimizations</p>
    <p>LSM-tree Value Log</p>
    <p>valuek, addr value value</p>
    <p>SSD device</p>
    <p>ksize, vsize, key, value</p>
    <p>tail head</p>
    <p>Online and light-weight garbage collection  append (ksize, vsize, key, value) in value log</p>
  </div>
  <div class="page">
    <p>Optimizations</p>
    <p>LSM-tree Value Log</p>
    <p>valuek, addr value value</p>
    <p>SSD device</p>
    <p>ksize, vsize, key, value</p>
    <p>tail head</p>
    <p>Online and light-weight garbage collection  append (ksize, vsize, key, value) in value log</p>
    <p>Remove LSM-tree log in WiscKey</p>
  </div>
  <div class="page">
    <p>Optimizations</p>
    <p>LSM-tree Value Log</p>
    <p>valuek, addr value value</p>
    <p>SSD device</p>
    <p>ksize, vsize, key, value</p>
    <p>tail head</p>
    <p>Online and light-weight garbage collection  append (ksize, vsize, key, value) in value log</p>
    <p>Remove LSM-tree log in WiscKey  store head in LSM-tree periodically</p>
  </div>
  <div class="page">
    <p>Optimizations</p>
    <p>LSM-tree Value Log</p>
    <p>valuek, addr value value</p>
    <p>SSD device</p>
    <p>ksize, vsize, key, value</p>
    <p>tail head</p>
    <p>Online and light-weight garbage collection  append (ksize, vsize, key, value) in value log</p>
    <p>Remove LSM-tree log in WiscKey  store head in LSM-tree periodically  scan the value log from the head to recover</p>
    <p>log</p>
  </div>
  <div class="page">
    <p>Optimizations</p>
    <p>LSM-tree Value Log</p>
    <p>valuek, addr value value</p>
    <p>SSD device</p>
    <p>ksize, vsize, key, value</p>
    <p>tail head</p>
    <p>Online and light-weight garbage collection  append (ksize, vsize, key, value) in value log</p>
    <p>Remove LSM-tree log in WiscKey  store head in LSM-tree periodically  scan the value log from the head to recover</p>
  </div>
  <div class="page">
    <p>WiscKey Implementation</p>
  </div>
  <div class="page">
    <p>WiscKey Implementation</p>
    <p>Based on LevelDB  a separate vLog file for values  modify I/O paths to separate keys and values  leverages most of high-quality LevelDB source code</p>
  </div>
  <div class="page">
    <p>WiscKey Implementation</p>
    <p>Based on LevelDB  a separate vLog file for values  modify I/O paths to separate keys and values  leverages most of high-quality LevelDB source code</p>
    <p>Range query  thread pool launches queries in parallel  detect sequential pattern with the Iterator interface</p>
  </div>
  <div class="page">
    <p>WiscKey Implementation</p>
    <p>Based on LevelDB  a separate vLog file for values  modify I/O paths to separate keys and values  leverages most of high-quality LevelDB source code</p>
    <p>Range query  thread pool launches queries in parallel  detect sequential pattern with the Iterator interface</p>
    <p>File-system support  fadvise to predeclare access patterns  hole-punching to free space</p>
  </div>
  <div class="page">
    <p>Background</p>
    <p>Key-Value Separation</p>
    <p>Challenges and Optimizations</p>
    <p>Evaluation</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>YCSB Benchmarks</p>
    <p>N or</p>
    <p>m al</p>
    <p>iz ed</p>
    <p>P er</p>
    <p>fo rm</p>
    <p>an ce</p>
    <p>Key size: 16B, Value size: 1KB LOAD A B C D E F</p>
    <p>LevelDB RocksDB WiscKey-GC WiscKey</p>
    <p>Key size: 16B, Value size: 1KB</p>
  </div>
  <div class="page">
    <p>YCSB Benchmarks</p>
    <p>N or</p>
    <p>m al</p>
    <p>iz ed</p>
    <p>P er</p>
    <p>fo rm</p>
    <p>an ce</p>
    <p>Key size: 16B, Value size: 1KB LOAD A B C D E F</p>
    <p>LevelDB RocksDB WiscKey-GC WiscKey</p>
    <p>Key size: 16B, Value size: 1KB</p>
  </div>
  <div class="page">
    <p>YCSB Benchmarks</p>
    <p>N or</p>
    <p>m al</p>
    <p>iz ed</p>
    <p>P er</p>
    <p>fo rm</p>
    <p>an ce</p>
    <p>Key size: 16B, Value size: 1KB LOAD A B C D E F</p>
    <p>LevelDB RocksDB WiscKey-GC WiscKey</p>
    <p>Key size: 16B, Value size: 1KB</p>
  </div>
  <div class="page">
    <p>YCSB Benchmarks</p>
    <p>N or</p>
    <p>m al</p>
    <p>iz ed</p>
    <p>P er</p>
    <p>fo rm</p>
    <p>an ce</p>
    <p>Key size: 16B, Value size: 1KB LOAD A B C D E F</p>
    <p>LevelDB RocksDB WiscKey-GC WiscKey</p>
    <p>Key size: 16B, Value size: 1KB</p>
  </div>
  <div class="page">
    <p>YCSB Benchmarks</p>
    <p>N or</p>
    <p>m al</p>
    <p>iz ed</p>
    <p>P er</p>
    <p>fo rm</p>
    <p>an ce</p>
    <p>Key size: 16B, Value size: 1KB LOAD A B C D E F</p>
    <p>LevelDB RocksDB WiscKey-GC WiscKey</p>
    <p>many small range queries</p>
    <p>Key size: 16B, Value size: 1KB</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>WiscKey: a LSM-tree based key-value store  decouple sorting and garbage collection by separating keys from values  SSD-conscious designs  significant performance gain</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>WiscKey: a LSM-tree based key-value store  decouple sorting and garbage collection by separating keys from values  SSD-conscious designs  significant performance gain</p>
    <p>Transition to new storage hardware  understand and leverage existing software  explore new designs to utilize the new hardware  get the best of two worlds</p>
  </div>
</Presentation>
