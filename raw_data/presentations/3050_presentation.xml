<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Differential Energy Profiling: Energy Optimization via Diffing</p>
    <p>Similar apps Abhilash Jindal Y. Charlie Hu</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Source code energy profilers</p>
    <p>DIFFPROF (this paper)</p>
    <p>A: 10 Ah</p>
    <p>C: 20 Ah</p>
    <p>B: 90 Ah</p>
    <p>Towards optimizing app battery drain</p>
    <p>App-1</p>
    <p>A: 10 Ah</p>
    <p>C: 20 Ah</p>
    <p>B: 90 Ah</p>
    <p>App-1</p>
    <p>X: 10 Ah</p>
    <p>Y: 20 Ah</p>
    <p>App-2Is there room for improvement? How to do the optimization?</p>
  </div>
  <div class="page">
    <p>Part I: Why diffing? Key Observations</p>
  </div>
  <div class="page">
    <p>There is an app for</p>
    <p>that!</p>
  </div>
  <div class="page">
    <p>There are dozens of apps for that!</p>
    <p>Online Shopping</p>
    <p>Music</p>
    <p>Instant Message</p>
    <p>Chess 6</p>
  </div>
  <div class="page">
    <p>Similar apps implement similar functionalities</p>
    <p>O1: Dozens of similar apps implement similar app functions</p>
  </div>
  <div class="page">
    <p>Battery drain of similar apps differ a lot</p>
    <p>Music playback for 30 sec</p>
    <p>Search socks, scrollSwipe 2 sec for 1 min</p>
    <p>Send 5 messages to friend</p>
    <p>Create new folder, scroll Compose email and send</p>
    <p>Press clean and waitPress scan and wait</p>
    <p>O2: Battery drain among similar apps</p>
    <p>differ significantly (2.8x  8.0x)</p>
  </div>
  <div class="page">
    <p>Comparing energy profiles can potentially be effective</p>
    <p>O2: Battery drain differ significantly</p>
    <p>O1: Dozens of similar apps A: 10 uAh</p>
    <p>C: 20 uAh</p>
    <p>B: 90 uAh</p>
    <p>App-1</p>
    <p>X: 10 uAh</p>
    <p>Y: 20 uAh</p>
    <p>App-2</p>
  </div>
  <div class="page">
    <p>Framework services dominate energy drain</p>
    <p>Music playback for 30 sec</p>
    <p>Search socks, scrollSwipe 2 sec for 1 min</p>
    <p>Send 5 messages to friend</p>
    <p>Create new folder, scroll Compose email and send</p>
    <p>Press clean and waitPress scan and wait</p>
    <p>O3: Framework services, common to all apps, drain up to 90% of total app energy drain</p>
  </div>
  <div class="page">
    <p>Comparing energy profiles will be effective</p>
    <p>O2: Battery drain differ significantly</p>
    <p>O1: Dozens of similar apps A: 10 uAh</p>
    <p>C: 20 uAh</p>
    <p>B: 90 uAh</p>
    <p>X: 10 uAh</p>
    <p>Y: 20 uAh</p>
    <p>O3: Framework services dominate battery drain</p>
    <p>App-1 App-2</p>
  </div>
  <div class="page">
    <p>Part II: How to diff? What should be the diffing granularity? How to perform diffing?</p>
  </div>
  <div class="page">
    <p>What should be the diffing granularity?  Similar apps perform similar</p>
    <p>core tasks  Music app performs music</p>
    <p>playback, UI updates such as progress bar, text boxes</p>
    <p>Diffing should be performed on app tasks</p>
    <p>A: 10 uAh</p>
    <p>C: 20 uAh</p>
    <p>B: 90 uAh</p>
    <p>X: 10 uAh</p>
    <p>Y: 20 uAh</p>
    <p>!!</p>
  </div>
  <div class="page">
    <p>App task (EFLASK)</p>
    <p>How to identify app tasks from energy profile?  App tasks manifest as EFLASK</p>
    <p>(Erlenmeyer flask shaped)  Call path  Neck F-method  Subtree</p>
    <p>Identifying matching tasks boils down to matching EFLASK</p>
    <p>Framework subtree</p>
    <p>F2</p>
    <p>F0</p>
    <p>A1</p>
    <p>F3</p>
    <p>A2</p>
    <p>F4</p>
  </div>
  <div class="page">
    <p>What tree structures to diff?</p>
    <p>Tree type Size Path preserving</p>
    <p>Call tree O(millions) Yes</p>
    <p>Dynamic call graph O(thousands) No</p>
    <p>Calling context tree O(ten thousands) Yes</p>
  </div>
  <div class="page">
    <p>How to perform diffing?  Previous tree matching algorithms are not</p>
    <p>applicable</p>
    <p>EFLASK matching algorithm  Simultaneously identifies EFLASKs and finds</p>
    <p>matching EFLASKs between two similar apps</p>
    <p>App task (EFLASK)</p>
    <p>Framework subtree</p>
    <p>F2</p>
    <p>F0</p>
    <p>A1</p>
    <p>F3</p>
    <p>A2</p>
    <p>F4</p>
  </div>
  <div class="page">
    <p>Exact path matching</p>
    <p>Unique node with same path from root</p>
    <p>A</p>
    <p>D</p>
    <p>Calling Context Tree</p>
    <p>M</p>
    <p>B</p>
    <p>CCB</p>
    <p>A</p>
    <p>D</p>
    <p>Calling Context Tree</p>
    <p>M</p>
    <p>B</p>
    <p>CC</p>
    <p>D</p>
    <p>B A</p>
    <p>App -2App -1</p>
  </div>
  <div class="page">
    <p>EFLASKs for matching tasks can vary</p>
    <p>android.os.Looper.loop( )</p>
    <p>android.os.Handler.dispatchMessage( Message )</p>
    <p>android.os.Handler.handleCallback( Message )</p>
    <p>View$PerformClick.run( )</p>
    <p>Common path</p>
    <p>TurboCleaner</p>
    <p>DFNDR</p>
    <p>View.performClick ( )</p>
    <p>App.onClick ( )</p>
    <p>Activity.startActivity ( )</p>
    <p>AbsListView$PerformClick.run ( )</p>
    <p>AbsListView.performItemClick ( )</p>
    <p>AbsListView.performItemClick ( )</p>
    <p>AdapterView.performItemClick ( )</p>
    <p>App.onItemClick ( )</p>
    <p>Call paths can vary slightly  Use different mechanism to get</p>
    <p>same callback  Use different callbacks to</p>
    <p>receive similar events</p>
  </div>
  <div class="page">
    <p>EFLASKs for matching tasks can vary (2)</p>
    <p>android.os.Looper.loop( )</p>
    <p>android.os.Handler.dispatchMessage( Message )</p>
    <p>android.os.Handler.handleCallback( Message )</p>
    <p>App.run( )</p>
    <p>android.widget.ImageView.setImageDrawable( Drawable )</p>
    <p>android.widget.ImageView.setImageBitmap( Bitmap )</p>
    <p>void android.widget.ImageView.setImageResource( int )</p>
    <p>Common path</p>
    <p>Wish</p>
    <p>Kohl</p>
    <p>Letgo</p>
    <p>Call paths can differ slightly</p>
    <p>Neck F-methods may vary  Use different classes that</p>
    <p>implement same APIs  HttpConnectionURLImpl,</p>
    <p>HttpsConnectionURLImpl  Use alternate APIs to perform</p>
    <p>same task</p>
  </div>
  <div class="page">
    <p>EFLASKs for matching tasks can vary (3)</p>
    <p>Call paths can differ slightly</p>
    <p>Neck F-methods may differ</p>
    <p>F-method subtrees may vary  Program state, call parameters</p>
    <p>determine F-method subtree</p>
    <p>App task</p>
    <p>Framework subtree</p>
    <p>F2</p>
    <p>F0</p>
    <p>A1</p>
    <p>F3</p>
    <p>A2</p>
    <p>F4</p>
  </div>
  <div class="page">
    <p>Prior approximate tree matching algorithms</p>
    <p>[Zhang et.al. Algorithmica 1995] produces maximal matching</p>
    <p>Drawback: matches EFLASKS with arbitrarily different paths  Maximize subtree overlap,</p>
    <p>disregard paths</p>
    <p>App -2</p>
    <p>App -1</p>
    <p>Framework subtree</p>
    <p>F1</p>
    <p>F0</p>
    <p>A1</p>
    <p>F1</p>
    <p>F0</p>
    <p>A2</p>
    <p>F3</p>
    <p>F4</p>
    <p>Dozens of nodes</p>
  </div>
  <div class="page">
    <p>EFLASK matching algorithm</p>
    <p>Algorithm Passes Approach Drawback Exact Path Matching Top-down Matches paths,</p>
    <p>disregards subtree Cant handle path variations</p>
    <p>Approximate Tree Matching (Zhang et.al)</p>
    <p>Bottom-up Maximizes subtree overlap, disregards path</p>
    <p>Matches nodes with arbitrarily different paths</p>
    <p>EFLASK matching algorithm</p>
    <p>Maximizes subtree overlap while respecting path similarity</p>
  </div>
  <div class="page">
    <p>EFLASK Matching Algorithm 1. Top down pass: Calculate !&quot; # 2. Bottom up</p>
    <p>pass: Calculate $&quot; #</p>
    <p>A</p>
    <p>CB</p>
    <p>X</p>
    <p>Y</p>
    <p>#,'  )  '  !&quot; #</p>
    <p>!&quot; # = {w  V(T2) | (s(v),s(w))  }</p>
  </div>
  <div class="page">
    <p>Reducing unimportant call path variations  Collapsing app methods  Internal app method names</p>
    <p>are arbitrary and often obfuscated</p>
    <p>App callback method names are well-defined by framework  foo.onClick overrides</p>
    <p>onClickListener.onClick</p>
    <p>App methodFramework method</p>
    <p>M</p>
    <p>D E</p>
    <p>foo.onClick</p>
    <p>foo.A foo.B</p>
    <p>foo.C</p>
    <p>M</p>
    <p>D</p>
    <p>bar.onClick</p>
    <p>bar.X</p>
    <p>(a) CCT of app 1</p>
    <p>(b) CCT of app 2</p>
    <p>M</p>
    <p>D E</p>
    <p>.onClick</p>
    <p>(c) CCT with merged app nodes</p>
  </div>
  <div class="page">
    <p>Part III: It works!</p>
  </div>
  <div class="page">
    <p>DIFFPROF implementation  Built on top of Eprof [Pathak et. al. EuroSys 12]  Diffing and GUI front-end  5.7k lines Java code</p>
  </div>
  <div class="page">
    <p>Developer workflow with DIFFPROF</p>
    <p>Write automated tests for two similar apps</p>
    <p>Run the tests with Eprof and collect energy profiles</p>
    <p>Upload energy profiles to DIFFPROF</p>
    <p>Tabular output</p>
    <p>Graphical output</p>
  </div>
  <div class="page">
    <p>Evaluation  Androids UI Automator tests  8 app groups- 5 popular apps, 5 versions of one app, majority</p>
    <p>with 50M+ installs</p>
    <p>App Category App group Similar/Competing Apps</p>
    <p>Communication Instant Messaging Whatsapp, Google Hangouts, Facebook Messenger, Line, TextNow</p>
    <p>Email Android mail, Aqua Mail, Email For Any, MailRU, myMail</p>
    <p>Music &amp; Audio Music streaming Spotify, Pandora, Soundcloud, iHeartRadio, Free music</p>
    <p>Personalization Launcher GO, CM Launcher 3D, APUS, Solo, Hola</p>
    <p>Productivity File explorer ES, FX, Solid, File explorer, File manager</p>
    <p>Shopping Shopping Wish, eBay, Amazon, Kohl, letgo</p>
    <p>Tools Antivirus CM Security, AVG, DU, Mobile Security &amp; Antivirus, Kaspersky</p>
    <p>Cleaning Clean Master, DFNDR, Fast Cleaner, Turbo cleaner, DU, Ccleaner</p>
  </div>
  <div class="page">
    <p>Evaluation  Matching task statistics</p>
    <p>App Matched tasks energy Antivirus</p>
    <p>AVG 92.73% CMSecurity 79.64%</p>
    <p>DU 85.90% Kaspersky 73.99% MobileSec 69.98%</p>
    <p>Cleaner CCleaner 76.57%</p>
    <p>Clean Master 70.82% DFNDR 73.52%</p>
    <p>Fast Cleaner 94.89% Turbo Cleaner 88.46%</p>
    <p>Average 78.86%</p>
  </div>
  <div class="page">
    <p>Evaluation  Case studies</p>
    <p>App Task Percentage of total energy drain Wish letgo</p>
    <p>Bitmap.compress 15.9% 3.6%</p>
    <p>Wish letgo</p>
    <p>BitmapFactory.decodeStream 19.9% 2.5%</p>
    <p>Pandora5.7 Pandora8.3</p>
    <p>TextView.setText 28.1% 0.7%</p>
    <p>Spotify Pandora</p>
    <p>ProgressBar.setProgress 20.2% 1.6%</p>
    <p>Found 12 energy optimizations in 9 popular apps  3 of them already confirmed by developers  Saves 5.2% - 27.4%</p>
  </div>
  <div class="page">
    <p>EFLASK matching algorithms effectiveness:</p>
    <p>Wish vs letgo</p>
    <p>Extra CCT node s</p>
    <p>Low energy High energy</p>
    <p>Wish letgo</p>
    <p>*.run( )</p>
    <p>.run( )*.run( )</p>
  </div>
  <div class="page">
    <p>DIFFPROF vs Eprof: Wish vs letgo</p>
    <p>Method energy drain rank</p>
    <p>Method name Wish Energy drain (Ah)</p>
    <p>EprofDIFFPROF Task energy drain difference rank</p>
    <p>Task Name Wish energy drain (Ah)</p>
    <p>Letgo energy drain (Ah)</p>
  </div>
  <div class="page">
    <p>Wish vs letgo : Energy optimization  Setting breakpoint at Bitmap.compress method reveals  Wish uses png images with quality set to 100  letgo uses jpg images with quality set to 90</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>Why diffing?</p>
    <p>Dozens of similar apps</p>
    <p>Similar apps differ significantly in battery drain</p>
    <p>Framework services dominate battery drain</p>
    <p>How to diff?</p>
    <p>App tasks manifest as EFLASK (call path, neck Fmethod, subtree)</p>
    <p>EFLASK matching algorithm</p>
    <p>Diffing works!</p>
    <p>DIFFPROF matches tasks consuming 80% of total energy</p>
    <p>Found 12 energy optimization opportunities in 9 popular apps</p>
    <p>Poster# 46</p>
  </div>
</Presentation>
