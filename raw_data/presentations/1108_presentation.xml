<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>TerseCades: Efficient Data Compression in Stream Processing</p>
    <p>Gennady Pekhimenko Chuanxiong Guo, Myeongjae Jeon, Peng Huang, Lidong Zhou</p>
  </div>
  <div class="page">
    <p>IoT Clouds Big Data</p>
    <p>Huge volumes of streaming data with real-time processing requirements Enormous pressure on the capacity and bandwidth of servers main memory</p>
  </div>
  <div class="page">
    <p>Is Data Compression Useful for Streaming?</p>
    <p>Intuitively, streaming with simple operators should be bandwidthbottlenecked: either network or memory bandwidth</p>
    <p>Simple single node experiment with the state-of-the-art streaming engine, Trill, with the Where query over large one column 8-byte field: E.g., Where (e =&gt; e.errorCode != 0)</p>
    <p>Expectation: observe memory bandwidth as a major bottleneck</p>
  </div>
  <div class="page">
    <p>Compressibility &gt; Performance Gain</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (M</p>
    <p>T/ s)</p>
    <p># Threads</p>
    <p>Ideal 8X Compression vs. No Compression on Where Query with Trill 1 byte 8 byte</p>
    <p>Only 10%-15% performance improvement with 8X compression</p>
  </div>
  <div class="page">
    <p>What Went Wrong?</p>
    <p>Memory allocation overhead: just-in-time copy of payloads to create a streameable event Memory copying and reallocation:</p>
    <p>enables flexible column-oriented data batches Inefficient bit-wise manipulation Hash tables manipulations</p>
  </div>
  <div class="page">
    <p>Compressibility =&gt; Performance Gain</p>
    <p>If no artificial bottlenecks: performance improvement is close to compression ratio (7.6X speedup with 8X compression)</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (M</p>
    <p>El em</p>
    <p>s/ se</p>
    <p>c)</p>
    <p># Threads</p>
    <p>Char CharCompr. Long</p>
    <p>Up to 6.1X speedup with realistic compression algorithm: Base-Delta Encoding</p>
  </div>
  <div class="page">
    <p>Prerequisites for Efficient Data Streaming</p>
    <p>Fixed Memory Allocation</p>
    <p>Efficient HashMap Primitives</p>
    <p>Efficient Filtering Operations (bit-wise manipulations)</p>
  </div>
  <div class="page">
    <p>Key Observations</p>
    <p>Memory bandwidth becomes the major bottleneck if streaming is properly optimized</p>
    <p>Dominant part of the data is synthetic in nature and hence has a lot of redundancy  Can be exploited through efficient data compression</p>
  </div>
  <div class="page">
    <p>TerseCades: Baseline System Overview</p>
    <p>Event Stream Compressor Decompressor</p>
    <p>Op1</p>
    <p>Decompressor</p>
    <p>Opn</p>
    <p>Compressed Data Store</p>
    <p>Operator Op1 on compressed data</p>
    <p>Operator Opn on compressed data</p>
  </div>
  <div class="page">
    <p>Key Design Choices and Optimizations</p>
    <p>Lossless Compression Arithmetic vs. Dictionary-based Compression Decompression is on the critical path</p>
    <p>Lossy Compression without Output Quality Loss Integers and floating points</p>
    <p>Reducing Compression/Decompression Cost Hardware-based acceleration: vectorization, GPU, FPGA</p>
    <p>Direct Execution on Compressed Data</p>
  </div>
  <div class="page">
    <p>Lossless Compression: Base-Delta Encoding</p>
    <p>Fast Decompression: vector addition</p>
    <p>Simple SW/HW Implementations: arithmetic and comparison</p>
    <p>Effective: good compression ratio</p>
  </div>
  <div class="page">
    <p>Lossy Compression Without Output Quality Loss</p>
    <p>Base-Delta Encoding modification  Truncate deltas when full precision not required</p>
    <p>ZFP floating point compression engine  Equivalent of BD in floating point domain with controlled precision</p>
  </div>
  <div class="page">
    <p>Reducing Compression Overhead</p>
    <p>SIMD/Vectorization GPU FPGA</p>
    <p>Intel Xeon with 256-bit SIMD NVIDIA 1080Ti Altera Stratix V</p>
  </div>
  <div class="page">
    <p>Execution on Compressed Data</p>
    <p>ProcessorMemory</p>
    <p>Decompress</p>
    <p>CompressCompressed</p>
    <p>Incurs decompression and compression latency High energy overhead</p>
    <p>Can we leverage data being in a condensed form?</p>
  </div>
  <div class="page">
    <p>Execution on Compressed Data</p>
    <p>Value 1</p>
    <p>Value 2</p>
    <p>Value 3</p>
    <p>Value N</p>
    <p>Key 1</p>
    <p>Key 2</p>
    <p>Key 3</p>
    <p>Key N</p>
    <p>Value 1 Value 2 Value 3 Value N</p>
    <p>Memory</p>
  </div>
  <div class="page">
    <p>Execution on Compressed Data</p>
    <p>Value 1 Value 2 Value 3 Value N</p>
    <p>Meta data</p>
    <p>Value 1</p>
    <p>Value 2</p>
    <p>Value 3</p>
    <p>Value N</p>
    <p>Value N 8-byte Comparisons</p>
    <p>Value 1 or N/8 Comparisons</p>
    <p>Low Latency Single Comparison Narrower Operations</p>
  </div>
  <div class="page">
    <p>Evaluation: Methodology</p>
    <p>CPU: 24-core system based on Intel Xeon CPU E5-2673, 2.40GHz with SMT-enabled, and 128GB of memory</p>
    <p>GPU: NVIDIA GeForce GTX 1080 Ti with 11GB of GDDR5X memory</p>
    <p>FPGA: Altera Stratix V FPGA, 200MHz</p>
  </div>
  <div class="page">
    <p>STREAM Benchmark Results</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut , M</p>
    <p>Re c/</p>
    <p>s</p>
    <p># Threads</p>
    <p>Char CharCompr. CharCompr+V Long</p>
    <p>Add benchmark from STREAM suite</p>
    <p>Vectorization further reduces compression/decompression overhead, especially for smaller number of threads</p>
  </div>
  <div class="page">
    <p>STREAM Benchmark Results (2)</p>
    <p>Search benchmark</p>
    <p>When direct execution is applicable, it can significantly improve performance as it reduces the total computation</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut , M</p>
    <p>Re c/</p>
    <p>se c</p>
    <p># Threads</p>
    <p>Char CharCompr. Long Compr.+Direct</p>
  </div>
  <div class="page">
    <p>Monitoring and Troubleshooting: PingMesh</p>
    <p>C2cProbeCount = Stream .HopWindow(windowSize, period) .Where(e =&gt; e.errorCode != 0</p>
    <p>&amp;&amp; e.rtt &gt;= 100) .GroupApply((e.srcCluster,</p>
    <p>e.dstCluster)) .Aggregate(c =&gt; c.Count())</p>
    <p>TimeStamp (8, BD)</p>
    <p>ErrorCode (4, EN+BD)</p>
    <p>SrcCluster (4, HS+BD)</p>
    <p>DstCluster (4, HS+BD)</p>
    <p>RoundTripTime (4, BD)</p>
    <p>BD  Base+Delta encoding HS  String hashing EN  Enumeration</p>
    <p>Number in parenthesis  number of bytes before compression</p>
    <p>T2tProbeCount = Stream .HopWindow(windowSize, period) .Where(e =&gt; e.errorCode != 0</p>
    <p>&amp;&amp; e.rtt &gt;= 100) .Join(m, e =&gt; e.srcIp, m =&gt; m.ipAddr, (e,m) =&gt; {e, srcTor=m.torId}) .Join(m, e =&gt; e.dstIp, m =&gt; m.ipAddr, (e,m)=&gt; {e, dstTor=m.torId}) .GroupApply((srcTor, dstTor)) .Aggregate(c =&gt; c.Count())</p>
  </div>
  <div class="page">
    <p>PingMesh C2cProbeCount Results</p>
    <p>Tri ll</p>
    <p>No nO</p>
    <p>pti mi</p>
    <p>ze d</p>
    <p>No Co</p>
    <p>mp res</p>
    <p>sio n</p>
    <p>Lo ssl</p>
    <p>es s</p>
    <p>Lo ssl</p>
    <p>es sO</p>
    <p>pti mi</p>
    <p>ze d</p>
    <p>Lo ssy</p>
    <p>Lo ssy</p>
    <p>Op tim</p>
    <p>ize d</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut , M</p>
    <p>Re c/</p>
    <p>s</p>
    <p>Total of more that 15X improvement in throughput due to data compression with efficient optimizations</p>
  </div>
  <div class="page">
    <p>Performance of Individual Operators</p>
    <p>No Compression Lossless LosslessOptimized Lossy LossyOptimized</p>
    <p>Ti m</p>
    <p>e (m</p>
    <p>s)</p>
    <p>Where GroupApply</p>
    <p>The highest performance benefits are for operators where direct execution is applicable (e.g., Where)</p>
  </div>
  <div class="page">
    <p>IaaS VM Performance Counters</p>
    <p>Upto 6X compression with ZFP lossy compression algorithm</p>
    <p>TimeStamp (8, BD)</p>
    <p>Cluster (11, HS)</p>
    <p>VmID (36, HS)</p>
    <p>SampleCount (4, BD)</p>
    <p>MinValue (8, ZFP)</p>
    <p>MaxValue (8, ZFP)</p>
    <p>CounterName (15, EN)</p>
    <p>NodeId (10, HS)</p>
    <p>Datacenter (3, HS)</p>
    <p>AverageValue (8, ZFP)</p>
    <p>BD  Base+Delta encoding; HS  String hashing; EN  Enumeration; ZFP  efficient floating point compression (lossy with controlled accuracy)</p>
    <p>Number in parenthesis  number of bytes before compression</p>
  </div>
  <div class="page">
    <p>IoT Datasets  Geolocation data (GPS coordinates from GeoLife project):  4.5X average compression ratio  Less than 10-6 loss in accuracy</p>
    <p>Weather data (Hurricane Katrina in 2005)  3X-4X compression ratios for 18 metrics used in the data set</p>
    <p>TimeStamp (8, BD) Latitude (8, ZFP) Longtitude (8, ZFP) Altitude (4, BD)</p>
  </div>
  <div class="page">
    <p>Comparison to Prior Work</p>
    <p>Compression in databases  Succinct, NSDI15: execution on compressed textual data, complete</p>
    <p>redesign of data storage in memory  Abadi, SIGMOD06: compression in column-oriented data stores; uses</p>
    <p>conventional compression algorithms not applicable to streaming  Generic memory compression  Execution on compressed data is not supported  Lower compression ratios due to generality of algorithms chosen</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>Q: Can data compression be effective in stream processing?  A: Yes, our TerseCades design is the proof-of-concept  Properly optimize the baseline system  Use light-weight data compression algorithms + HW acceleration  Directly execute on compressed data</p>
    <p>Results on troubleshooting workload used in production allowed to replace 16 servers with just one!</p>
  </div>
  <div class="page">
    <p>TerseCades: Efficient Data Compression in Stream Processing</p>
    <p>Gennady Pekhimenko Chuanxiong Guo, Myeongjae Jeon, Peng Huang, Lidong Zhou</p>
  </div>
</Presentation>
