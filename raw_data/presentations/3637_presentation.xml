<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>GREYONE: Data Flow Sensitive Fuzzing</p>
    <p>Shuitao Gan, Chao Zhang, Peng Chen, Bodong Zhao,</p>
    <p>Xiaojun Qin, Dong Wu, Zuoning Chen</p>
    <p>SKL-MEAC &amp; Tsinghua University</p>
  </div>
  <div class="page">
    <p>Background</p>
    <p>CheckSum/Magic Bytes checking branches generally existed in popular programs.</p>
    <p>Symbolic-based techniques are applied in fuzzing to alleviate the problem(Driller, QSYM, DigFuzz..),</p>
    <p>open challenge of constraint solving</p>
    <p>Data flow analysis (e.g., dynamic taint analysis) has proven to be useful for guiding fuzzingTaintScopeVuzzerAngora...</p>
  </div>
  <div class="page">
    <p>Bottleneck of traditional taint analysis</p>
    <p>Consume large memory, execute slowly  Under-taint by external call  Under-taint by implicit control flow  Over-taint by specified instructions</p>
    <p>//the following branch lose all taints data</p>
  </div>
  <div class="page">
    <p>Leave many questions</p>
    <p>RQ1: How to perform lightweight and accurate taint analysis for efficient fuzzing ?</p>
    <p>RQ2: How to efficiently guide mutation with taint?</p>
    <p>RQ3: How to tune fuzzers evolution direction with data flow features?</p>
  </div>
  <div class="page">
    <p>GreyOne: Data Flow Sensitive Fuzzing</p>
    <p>Our Solution</p>
  </div>
  <div class="page">
    <p>Architecture of GreyOne</p>
    <p>FTI :Fuzzing-driven Taint Inference</p>
    <p>Taint-Guided Mutation</p>
    <p>Conformance-Guided Evolution</p>
    <p>Selective testing</p>
    <p>Solve RQ1</p>
    <p>Solve RQ2</p>
    <p>Solve RQ3</p>
    <p>Performance optimization</p>
  </div>
  <div class="page">
    <p>Part 1: Fuzzing-driven Taint Inference</p>
  </div>
  <div class="page">
    <p>Fuzzing-driven Taint Inference</p>
    <p>Byte-level Mutation  A set of predefined mutation rules</p>
    <p>Single bit flipping  Multiple-bits flipping  Arithmetic operations</p>
    <p>Variable Value Monitoring  Static instrumentation</p>
    <p>Variables in constraints with multiple-bits flipping</p>
    <p>Taint Inference  Taint rule</p>
    <p>If the value of a variable var changes, we could infer that var is tainted and depends on the pos-th byte of the input seed S.</p>
  </div>
  <div class="page">
    <p>Comparison with Traditional Taint Analysis</p>
    <p>Manual Efforts  Traditional taint analysis</p>
    <p>Labor-intensive efforts  Custom specific taint propagation</p>
    <p>rules for each instruction</p>
    <p>FTI  Architecture independent  No extra efforts to port to new</p>
    <p>platforms</p>
    <p>Speed  Traditional taint analysis</p>
    <p>Slow  Dynamic binary instrumentation</p>
    <p>FTI  Fast  Based on static code instrumentation</p>
    <p>Accuracy  Traditional taint analysis</p>
    <p>Over-taint  Under-taint</p>
    <p>FTI  No over-taint  Less under-taint</p>
  </div>
  <div class="page">
    <p>Application : Branch-Input Dependency</p>
    <p>Branch-Input Dependency  Identify Direct Copies of Inputs  Identify InDirect Copies of Inputs</p>
  </div>
  <div class="page">
    <p>Performance of FTI</p>
    <p>Average speed of analyzing one seed by FTI  FTI brings 25% overhead on average</p>
    <p>Proportion of tainted untouched branches reported  FTI outperforms the classic taint</p>
    <p>analysis solution DFSan  FTI finds 1.3X more untouched</p>
    <p>branches that are tainted</p>
  </div>
  <div class="page">
    <p>Part 2: Taint-guided Mutation</p>
  </div>
  <div class="page">
    <p>Taint-guided Mutation  Prioritize Bytes to Mutate</p>
    <p>Prioritize Branches to Explore</p>
    <p>Determine Where and How to Mutate</p>
  </div>
  <div class="page">
    <p>Prioritize Bytes to Mutate</p>
    <p>IsUntouched returns 1 if the branch br is not explored by any test case so far, otherwise 0.</p>
    <p>DepOn returns 1 if the branch br depends on the pos-th input byte, according to FTI, otherwise 0.</p>
  </div>
  <div class="page">
    <p>Prioritize Branches to Explore</p>
    <p>The weight of an untouched branch br in the according path is the sum of all its dependent input bytes weight</p>
  </div>
  <div class="page">
    <p>Determine Where and How to Mutate</p>
    <p>Where to mutate  Exploring the untouched neighbor</p>
    <p>branches along this path one by one  Descending order of branch weight</p>
    <p>For specific untouched neighbor branch  Mutating its dependent input bytes  Descending order of byte weight</p>
    <p>How to mutate indirect copies of input  Random bit flipping and arithmetic</p>
    <p>operations on each dependent byte  Multiple dependent bytes could be</p>
    <p>mutated together</p>
    <p>Mitigate the under-taint issue  Randomly mutating their adjacent bytes with a small probability</p>
  </div>
  <div class="page">
    <p>Part 3: Conformance-Guided Evolution</p>
  </div>
  <div class="page">
    <p>Related work on selecting and updating seeds</p>
    <p>Evolutionary direction control Covering more code Discovering more vulnerabilities Triggering relevant behavior</p>
    <p>Related work  AFLFast (CCS16): seeds being picked fewer or</p>
    <p>exercising less-frequent paths  Vuzzer (NDSS17): seeds exercising deeper paths  QTEP (FSE17): seeds covering more faulty code  AFLgo (CCS17): seeds closer to target vulnerable</p>
    <p>paths  SlowFuzz (CCS17): seeds consuming more</p>
    <p>resources</p>
    <p>Our previous solution Prioritize seeds with more untouched branches(CollAFL-br, IEEE S&amp;P 18) 20% more paths over AFL</p>
  </div>
  <div class="page">
    <p>Data flow features: conformance of constraints</p>
    <p>Conformance of constraints  Expressing the distance of tainted variables to</p>
    <p>the values expected in untouched branches  Higher conformance means lower complexity of</p>
    <p>mutation</p>
    <p>Advantages  Few extra instrumented overhead  Keep the original construct of program  Non-constant variables comparison</p>
    <p>branch could be calculated</p>
    <p>Q1: How to evaluate single constraint? Q2 How to evaluate a set of constraints?</p>
    <p>Conformance of one branch</p>
    <p>Conformance of a basic block</p>
    <p>A set of constraints : Conformance of one path</p>
  </div>
  <div class="page">
    <p>Conformance-Guided Seed Updating  Seed queue Updates</p>
    <p>since the test case has an unique distribution of basic block conformance, it could derive new test cases to quickly trigger untouched neighbor branches of some basic blocks</p>
  </div>
  <div class="page">
    <p>Conformance-Guided Seed Selection</p>
    <p>Advantages: accelerate the evolution of fuzzing  Long-term stable improvements  Avoid getting stuck in local minimum like gradient descent</p>
    <p>algorithm  The conformance focuses on untouched branches, which</p>
    <p>is better than the measurement of Honggfuzz and libfuzzer</p>
    <p>Giving priority to seeds with higher conformance</p>
    <p>Combining with updating mechanism</p>
  </div>
  <div class="page">
    <p>Part 4: Performance Optimization</p>
  </div>
  <div class="page">
    <p>Selective execution mechanism  GREYONE has three modes during testing</p>
    <p>Variable value monitoring mode used for FTI  Conformance-guided tracking mode for evolution tuning  Only tracking edges.</p>
    <p>Extending the fork server used by AFL to switch between them on demand  When conformance tracking mode brought few conformance</p>
    <p>promotion, switching to normal tracking mode</p>
  </div>
  <div class="page">
    <p>Performance Optimization</p>
    <p>Selective execution mechanism  By comparing these two mode</p>
    <p>with AFL  The mode without selective mechanism</p>
    <p>will slow down to less than 65%  GREYONEs could keep execution speed</p>
    <p>more than 80%</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
  </div>
  <div class="page">
    <p>Vulnerabilities Discovery</p>
    <p>Number of vulnerabilities (accumulated in 5 runs) detected by 6 fuzzers, including AFL, CollAFL-br, VUzzer, Honggfuzz,Angora, and GREYONE, after testing each application for 60 hours</p>
    <p>Testing 19 popular applications</p>
    <p>GREYONE detected 209% more vulnerabilities (41 CVEs)</p>
    <p>libwpd CVE-2017-14226, CVE-2018-19208</p>
    <p>libtiff CVE-2018-19210</p>
    <p>libbson CVE-2017-14227,</p>
    <p>libncurses CVE-2018-19217, CVE-2018-19211</p>
    <p>libsass CVE-2018-19218, CVE-2018-19218</p>
    <p>libsndfile CVE-2018-19758</p>
    <p>nasm CVE-2018-19213, CVE-2018-19215, CVE-2018-19216, CVE-2018-20535, CVE-2018-20538, CVE-2018-19755</p>
    <p>libwebm CVE-2018-19212</p>
    <p>libconfuse CVE-2018-19760</p>
    <p>libsixel CVE-2018-19757, CVE-2018-19756, CVE-2018-19762, CVE-2018-19761, CVE-2018-19763, CVE-2018-19763</p>
    <p>libsolv CVE-2018-20533, CVE-2018-20534, CVE-2018-20532</p>
    <p>libLAS CVE-2018-20539, CVE-2018-20536, CVE-2018-20537, CVE-2018-20540</p>
    <p>libxsmm CVE-2018-20541, CVE-2018-20542, CVE-2018-20543</p>
    <p>libcaca CVE-2018-20545, CVE-2018-20546, CVE-2018-20547, CVE-2018-20548, CVE-2018-20544, CVE-2018-20544</p>
  </div>
  <div class="page">
    <p>Unique Crashes Evaluation</p>
    <p>Number of unique crashes (average and maximum count in 5 runs) found in real world programs by various fuzzers</p>
    <p>The growth trend of number of unique crashes (average and each of 5 runs) detected by AFL, CollAFL-br, Angora and GREYONE</p>
  </div>
  <div class="page">
    <p>Code Coverage Evaluation</p>
    <p>Number of unique crashes (average and maximum count in 5 runs) found in real world programs by various fuzzers</p>
    <p>The growth trend of number of unique paths (average in 5 runs) detected by AFL, CollAFL-br, Angora and GREYONE</p>
  </div>
  <div class="page">
    <p>Further evaluation</p>
  </div>
  <div class="page">
    <p>Improvements Breakdown (FTI)</p>
    <p>FTI could double the code coverage on all targets, comparing to</p>
    <p>GREYONE-DTA.</p>
  </div>
  <div class="page">
    <p>Improvements Breakdown (taint-guided mutation and conformance-guided evolution)</p>
  </div>
  <div class="page">
    <p>Heuristic Constraints Solving</p>
    <p>On average, GREYONE found 1.2X unique paths, 1.12X edges, 2.15X</p>
    <p>unique crashes and 1.52X vulnerabilities than QSYM.</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>We propose a novel data flow sensitive fuzzing solution GREYONE  Where FTI is further more efficient than traditional analysis  It performs better performance than existing popular fuzzing tools  It detected 105 unknown vulnerabilities with 41 CVEs</p>
  </div>
  <div class="page">
    <p>Thanks! Q&amp;A</p>
    <p>If you have any question offline, please send email to</p>
    <p>ganshuitao@gmail.com and chaoz@tsinghua.edu.cn</p>
  </div>
</Presentation>
