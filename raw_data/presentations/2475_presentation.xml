<?xml version="1.0" ?>
<Presentation>
  <div class="page"/>
  <div class="page">
    <p>Mugshot: Recording and Replaying JavaScript Applica9ons</p>
    <p>James Mickens Jeremy Elson Jon Howell</p>
  </div>
  <div class="page">
    <p>Modern web sites: event driven func9onality via</p>
    <p>JavaScript</p>
    <p>mapItem.onclick = func9on(){ mapControl.zoomLevel++; mapControl.fetchTiles(); mapControl.displayTiles(); };</p>
    <p>I ALREADY LEARNED THIS TO YOU.</p>
    <p>XOXO, JAMES</p>
  </div>
  <div class="page">
    <p>Hard errors  Unexpected excep9on  Missing resource</p>
    <p>SoS errors  Layout glitch  Broken event handler  Poor performance</p>
  </div>
  <div class="page">
    <p>When Things Go Wrong  Common postmortems  Core dump  Stack trace  Error log</p>
    <p>In eventdriven systems   interleavings are key!  Shouldnt rely on user to report nondeterminis9c events</p>
  </div>
  <div class="page">
    <p>Our Solu9on: Mugshot</p>
    <p>Logs nondeterminis9c JavaScript events  Ex: Mouse clicks, date requests, random number genera9on</p>
    <p>On panic, upload event log to developer machine  Developers replays the buggy program run  Single step or (near) real9me playback  Developer can leverage rich localhost debuggers . . .  . . . using buggy applica9ons runs from the wild!</p>
  </div>
  <div class="page">
    <p>Why Mugshot Is Awesome  Easy to deploy to end users</p>
    <p>Logging/replay code is just a JavaScript library  Ship Mugshot infrastructure with the applica9on: &lt;script src=mugshot.js&gt;&lt;/script&gt;  Dont need special kernel/VM/browser!</p>
    <p>Logging is lightweight: run in common case  Log size: Worst case 16 Kbps  CPU: Worst case 7% reduc9on in frame rate</p>
    <p>Solves an important, prac9cal problem  Increasingly complex apps migra9ng to the web</p>
    <p>Remote bug repro is very important!</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Logging  Replay  Evalua9on  Conclusion</p>
  </div>
  <div class="page">
    <p>Child frame 1 Child frame 2</p>
    <p>Parent frame</p>
    <p>Child 1 Bujon Child 2 Bujon</p>
    <p>Parent Bujon</p>
  </div>
  <div class="page">
    <p>&lt;html&gt; &lt;head&gt; &lt;script src=logger.js&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;bujon type=bujon onclick=alert(Date())/&gt; &lt;iframe&gt;</p>
    <p>&lt;/iframe&gt; &lt;iframe&gt;</p>
    <p>&lt;/iframe&gt; &lt;/body&gt; &lt;/html&gt;</p>
    <p>&lt;script src=logger.js&gt;&lt;/script&gt; &lt;bujon type=bujon onclick=alert(Date())&gt;</p>
    <p>&lt;script src=logger.js&gt;&lt;/script&gt; &lt;bujon type=bujon onclick=alert(Date())&gt;</p>
    <p>Event Log</p>
  </div>
  <div class="page">
    <p>Official W3C Event Model</p>
    <p>&lt;iframe&gt;</p>
    <p>&lt;bujon type=`bujon` onclick=`alert(Date())`/&gt;</p>
    <p>&lt;/iframe&gt; Child 2 Bujon</p>
    <p>Child frame 2</p>
    <p>Phase 1: Capturing Phase 2: Target Phase 3: Bubbling</p>
  </div>
  <div class="page">
    <p>Child frame 1 Child frame 2</p>
    <p>Parent frame</p>
    <p>Child 1 Bujon Child 2 Bujon</p>
    <p>Parent Bujon</p>
    <p>Event Log</p>
    <p>bujon.onclick = func9on(){ alert(Date()); }</p>
    <p>Nondeterminism to log 1) Click (mouse bujon, target) 2) Return value of Date()</p>
  </div>
  <div class="page">
    <p>Logging Events on Firefox  Logging Date() is straighporward . . .  . . . just enclose real Date() in logging wrapper</p>
    <p>Logging mouse click is straighporward</p>
    <p>&lt;iframe&gt; &lt;script src=logger.js&gt;&lt;/script&gt; &lt;bujon type=bujon onclick=alert( )&gt; &lt;/iframe&gt;</p>
    <p>&lt;iframe onclick=mugshotCapturingLogger() &gt;</p>
    <p>Event log Event: Date Time: 2000</p>
    <p>Event: Click Time: 1000 Value: Child 2 bujon LeSclick X=312, Y=209</p>
    <p>Date() Date()</p>
  </div>
  <div class="page">
    <p>Seems simple, right?</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>DOM 0 versus DOM 2 Handlers</p>
    <p>var f = document.getElementById(child2frame); f.onclick = func9on(){alert(DOM 0 handler)}; f.addEventListener(click, func9on(){alert(DOM 1 handler), true);</p>
    <p>For any DOM node/event name pair:  At most one DOM 0 handler  Arbitrary number of DOM 2 handlers</p>
  </div>
  <div class="page">
    <p>Life Is So Difficult</p>
    <p>Firefox calls DOM 0 handler before DOM 2 handlers  DOM 2 handlers called in order of registra9on</p>
    <p>Mugshot must ensure that its handler runs before any appdefined ones  App handler can cancel event . . .  . . . but we s9ll need to log it!</p>
  </div>
  <div class="page">
    <p>Life Is So Difficult  Wed like to run before the app and . . .</p>
    <p>Define DOM 2 logging handler for onclick  Use JavaScript sejer shim to interpose on</p>
    <p>assignment to iframe.onclick  This would let us:</p>
    <p>Use DOM 2 logging func if no appdefined DOM 0 handler</p>
    <p>Wrap appdefined DOM 0 handler in logging code</p>
    <p>The problem: Firefox sejers are par9ally broken  Browser will not invoke DOM 0 handler for node with a shimmed DOM 0 event property</p>
  </div>
  <div class="page">
    <p>Life Is So Difficult  Fortunately, sejers for DOM 0 handlers dont keep browser from firing DOM 2 handlers  So, sejer code registers DOM 0 app handler as DOM 2 handler too</p>
    <p>Sejer removes DOM 2 handler if backing DOM 0 handler is reset</p>
  </div>
  <div class="page">
    <p>Recap: Logging Events on Firefox</p>
    <p>&lt;iframe &lt;script src=logger.js&gt;&lt;/script&gt; &lt;bujon type=bujon onclick=alert( )&gt; &lt;/iframe&gt;</p>
    <p>&lt;iframe onclick=mugshotCapturingLogger() &gt;</p>
    <p>Date() Date()</p>
    <p>Strategery</p>
  </div>
  <div class="page">
    <p>Logging Events on IE  Logging Date() is straighporward . . .  . . . just enclose real Date() in logging wrapper</p>
    <p>Logging GUI events is tricky in IE!  There is no capture phase!</p>
    <p>&lt;iframe&gt; &lt;script src=logger.js&gt;&lt;/script&gt; &lt;bujon type=bujon onclick=alert(Date())&gt; &lt;/iframe&gt;</p>
    <p>Event log Event: Date Time: 1000</p>
    <p>Event: Click Time: 2000 Value: Child 2 bujon LeSclick X=312, Y=209</p>
  </div>
  <div class="page">
    <p>&lt;script src=logger.js&gt;&lt;/script&gt; &lt;bujon type=bujon onclick=alert(Date())&gt; &lt;/iframe&gt;</p>
    <p>Event log Event: Date Time: 1000</p>
    <p>Event: Click Time: 1000 Value: Child 2 bujon LeSclick X=312, Y=209</p>
    <p>Is there an unlogged GUI event?</p>
    <p>Doesnt log the already logged event</p>
    <p>Logging Date() is straighporward . . .  . . . just enclose real Date() in logging wrapper</p>
    <p>Logging GUI events is tricky in IE!  There is no capture phase!</p>
    <p>Logging Events on IE</p>
  </div>
  <div class="page">
    <p>Sources of Nondeterminism</p>
    <p>DOM Events Mouse Key Loads Form Body</p>
    <p>click, mouseover keydown, keyup load focus, blur, select scroll, resize</p>
    <p>Asynchronous callbacks Set 9mer AJAX state change</p>
    <p>setTimeout(f, 100) req.onchange = f</p>
    <p>Nondeterminis9c func9ons Get current 9me Get random number</p>
    <p>(new Date()).getTime() Math.random()</p>
    <p>Text selec9on IE: document.selec9on FF: window.getSelec9on()</p>
    <p>Highlight text w/mouse Highlight text w/mouse</p>
    <p>Category Event Type Example</p>
  </div>
  <div class="page">
    <p>How Do We Log setTimeout(f, 50)?</p>
    <p>Interpose on setTimeout()</p>
    <p>Easy, right?</p>
    <p>var oldSetTimeout = setTimeout; setTimeout = func9on(f, waitMs){ f.callbackId = Mugshot.nextCallbackId++; var wrappedF = func9on(){ logCallbackExecu9on(f.callbackId); f(); }; oldSetTimeout(wrappedF, waitMs); };</p>
  </div>
  <div class="page">
    <p>var oldSetTimeout = setTimeout; setTimeout = func9on(f, waitMs){ f.callbackId = Mugshot.nextCallbackId++; var wrappedF = func9on(){ logCallbackExecu9on(f.callbackId); f(); }; oldSetTimeout(wrappedF, waitMs); };</p>
    <p>Browser garbagecollects this reference!?!</p>
    <p>Call to oldSetTimeout() will fail (undefined func9on)!</p>
  </div>
  <div class="page">
    <p>I Hate Myself And I Want To Die</p>
    <p>Solu9on: Create an invisible iframe!  Save its reference to setTimeout() . . .  . . . and call it inside the wrapped callback</p>
    <p>Have to do this nonsense at replay 9me too  Mugshot uses a variety of addi9onal hacks  See the paper for details</p>
  </div>
  <div class="page">
    <p>Logging the Value of Loads</p>
    <p>Replay Cache</p>
    <p>User browser</p>
    <p>Web server Replay proxy 1 2</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Logging  Replay  Evalua9on  Conclusion</p>
  </div>
  <div class="page">
    <p>Using the Replay Proxy</p>
    <p>Developer browser</p>
    <p>Replay proxy</p>
    <p>Replay Cache</p>
  </div>
  <div class="page">
    <p>On The Developer Machine: replay.js</p>
    <p>fireEvent()/dispatchEvent()  Execute 9mer func9ons as they</p>
    <p>appear in log  As app code executes, pull</p>
    <p>return values of Date() and Math.random() from the log</p>
    <p>When load arrives, signal replay proxy to release the data</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Logging  Replay  Evalua9on  Conclusion</p>
  </div>
  <div class="page">
    <p>Log Growth</p>
    <p>Tetris Pacman Spacius BASIC Painter NicEdit Shell</p>
    <p>Fi re fo x Lo g G ro w th ( K b p s) Verbose</p>
    <p>Compact</p>
  </div>
  <div class="page">
    <p>Timer Callback Rates</p>
    <p>Firefox IE</p>
    <p>Sp ac iu s: C B s p er s ec o n d</p>
    <p>Baseline</p>
    <p>Logging</p>
    <p>Replay</p>
  </div>
  <div class="page">
    <p>Reproducing Bugs</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Mugshot: trace+replay for JavaScript apps  Easy to deploy: run a script inside unmodified browser  Lightweight: 7% CPU overhead, 16 Kbps log growth</p>
    <p>Design is straighporward . . .  . . . but implementa9on is not!  Take my learnings, make them your own</p>
  </div>
  <div class="page"/>
  <div class="page"/>
</Presentation>
