<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Social Hash: an Assignment Framework for Optimizing Distributed Systems Operations on Social Networks</p>
    <p>Alon Shalita, Brian Karrer, Igor Kabiljo, Arun Sharma, Alessandro Presta, Aaron Adcock, Herald Kllapi, and Michael Stumm</p>
    <p>March 2016</p>
  </div>
  <div class="page">
    <p>Assignment Problem Front-end clusters</p>
    <p>Cache</p>
    <p>Point-ofPresence</p>
    <p>(PoP) Cache</p>
    <p>Cache</p>
    <p>Alons HTTP requests</p>
    <p>Igors HTTP requests</p>
  </div>
  <div class="page">
    <p>Assignment Problem Front-end clusters</p>
    <p>Cache</p>
    <p>Cache</p>
    <p>Cache</p>
    <p>Point-ofPresence</p>
    <p>(PoP)</p>
    <p>Alons HTTP requests</p>
    <p>Igors HTTP requests</p>
  </div>
  <div class="page">
    <p>Assignment Problem Optimization Front-end clusters</p>
    <p>Cache</p>
    <p>Cache</p>
    <p>Cache</p>
    <p>Point-ofPresence</p>
    <p>(PoP)</p>
  </div>
  <div class="page">
    <p>Solution Requirements Front-end clusters</p>
    <p>Cache</p>
    <p>Cache</p>
    <p>Cache</p>
    <p>Balanced</p>
    <p>Point-ofPresence</p>
    <p>(PoP)</p>
  </div>
  <div class="page">
    <p>Solution Requirements Front-end clusters</p>
    <p>Cache</p>
    <p>Cache</p>
    <p>Cache</p>
    <p>Adaptive</p>
    <p>Point-ofPresence</p>
    <p>(PoP)</p>
    <p>Alons HTTP requests</p>
  </div>
  <div class="page">
    <p>Solution Requirements Front-end clusters</p>
    <p>Cache</p>
    <p>Cache</p>
    <p>Cache</p>
    <p>Stable</p>
    <p>Point-ofPresence</p>
    <p>(PoP)</p>
    <p>Alons HTTP requests</p>
  </div>
  <div class="page">
    <p>Solution Requirements Front-end clusters</p>
    <p>Cache</p>
    <p>Cache</p>
    <p>Cache</p>
    <p>Fast decision</p>
    <p>Point-ofPresence</p>
    <p>(PoP)</p>
    <p>Alons HTTP requests</p>
  </div>
  <div class="page">
    <p>Social Hash framework</p>
  </div>
  <div class="page">
    <p>Social Hash framework</p>
    <p>!</p>
    <p>Components! (e.g.,!compute!clusters!or! storage!subsystems)!</p>
    <p>Groups!</p>
    <p>Objects!(e.g.,!data!records!or!HTTP!requests)!</p>
    <p>st at ic! !</p>
    <p>as sig nm</p>
    <p>en t!</p>
    <p>dy na m ic! !</p>
    <p>as sig nm</p>
    <p>en t!</p>
  </div>
  <div class="page">
    <p>Static assignment</p>
    <p>Goal: assign similar objects sent to the same group</p>
    <p>Data access pattern -&gt; represent as graph -&gt; graph partitioning</p>
    <p>Large-scale optimization: slow, time-consuming</p>
  </div>
  <div class="page">
    <p>Dynamic assignment</p>
    <p>Goal: adapt to maintain load balance by altering group -&gt; component</p>
    <p>hardware changes</p>
    <p>dynamic workload</p>
    <p>addition and removal of objects</p>
    <p>Two-level framework separates optimization from adaptation</p>
    <p>Slow optimization -&gt; static</p>
    <p>Fast adaptation -&gt; dynamic</p>
    <p>Group-to-component ratio controls tradeoff</p>
  </div>
  <div class="page">
    <p>Social Hash framework ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! !</p>
    <p>Social!Hash!Tbl! Assignment!Tbl!</p>
    <p>group! g&quot;</p>
    <p>Lo ok up !</p>
    <p>Re qu es t!</p>
    <p>Missing!key!! assignment!</p>
    <p>key&quot;</p>
    <p>fai led !</p>
    <p>gr ou p!</p>
    <p>c&quot;</p>
    <p>Graph! Partitioning!</p>
    <p>graph! specifications! Dynamic!!</p>
    <p>Assignment!</p>
    <p>monitoring! info! operator! console!</p>
    <p>key&quot;</p>
  </div>
  <div class="page">
    <p>HTTP Request Routing</p>
  </div>
  <div class="page">
    <p>Social Hash for Facebooks web routing</p>
    <p>Objects: HTTP request identified by user, Components: front-end clusters</p>
    <p>PoP: Dynamic assignment by hash ring Front-end clusters</p>
    <p>Cache</p>
    <p>Cache</p>
    <p>Point-ofPresence</p>
    <p>(PoP)</p>
  </div>
  <div class="page">
    <p>Edge locality for Facebooks web routing</p>
    <p>E dg</p>
    <p>e lo</p>
    <p>ca lit</p>
    <p>y</p>
    <p>Production routing: 21k groups for 10s of front-end clusters</p>
    <p>Over half of friendships are within groups</p>
    <p>Updated on a weekly basis (~1% movement)</p>
  </div>
  <div class="page">
    <p>Live traffic experiment: TAO miss rate</p>
    <p>30</p>
    <p>20</p>
    <p>10</p>
    <p>Su n</p>
    <p>M on Tu e</p>
    <p>W ed Th u Fr i</p>
    <p>Sa t</p>
    <p>Su n</p>
    <p>M on Tu e</p>
    <p>W ed Th u Fr i</p>
    <p>Sa t</p>
    <p>Day</p>
    <p>Pe rc</p>
    <p>en ta</p>
    <p>ge c</p>
    <p>ha ng</p>
    <p>e in</p>
    <p>T AO</p>
    <p>m is</p>
    <p>s ra</p>
    <p>te (%</p>
    <p>) Orange: traffic shifts</p>
    <p>Red: duration of test</p>
    <p>Green: updated Social Hash table</p>
  </div>
  <div class="page">
    <p>Storage Sharding</p>
  </div>
  <div class="page">
    <p>Assignment Problem 2: Storage sharding</p>
    <p>Aruns query</p>
    <p>Objects: data records Components: storage machines</p>
  </div>
  <div class="page">
    <p>Assignment Problem 2: Storage sharding</p>
    <p>Aruns query</p>
    <p>Objects: data records Components: storage machines</p>
  </div>
  <div class="page">
    <p>Static assignment</p>
    <p>Minimize fanout through bipartite graph partitioning</p>
    <p>Graph contains recent queries and data records</p>
    <p>edge =&gt; query accesses data record</p>
    <p>Dotted: edge locality optimization</p>
    <p>Solid: fanout optimization</p>
    <p>Av er</p>
    <p>ag e</p>
    <p>fa no</p>
    <p>ut</p>
  </div>
  <div class="page">
    <p>Storage sharding deployment</p>
    <p>Graph database with thousands of storage servers</p>
    <p>Group-to-component ratio of 8</p>
    <p>Static assignment every few months</p>
    <p>Results:</p>
    <p>Average latencies decreased by over 50%</p>
    <p>CPU utilization decreased by over 50%</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>Assignment problems are common in distributed systems design</p>
    <p>Proposed Social Hash framework for solving assignment problems</p>
    <p>Two-level design optimizes performance with graph partitioning</p>
    <p>Two Facebook integrations in production for over a year</p>
    <p>HTTP Request Routing: &gt; 25% reduction in TAO miss rate</p>
    <p>Storage Sharding: Latency and CPU utilization reduced by over 50%</p>
  </div>
</Presentation>
