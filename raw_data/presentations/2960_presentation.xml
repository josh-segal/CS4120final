<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>A Secure Shell Scripting Language</p>
    <p>Scott Moore, Christos Dimoulas, Dan King, and Stephen Chong</p>
  </div>
  <div class="page">
    <p>Can you advise me how to recognize if its safe or how to set its limited rights in the system?</p>
  </div>
  <div class="page">
    <p>Every program  should operate using the least amount of privilege necessary to complete the job.</p>
    <p>Saltzer [CACM 74]</p>
    <p>Principle of Least Privilege</p>
  </div>
  <div class="page">
    <p>Every program  should operate using the least amount of privilege necessary to complete the job.</p>
    <p>Saltzer [CACM 74]</p>
    <p>Principle of Least Privilege</p>
    <p>How do we limit the authority of scripts?</p>
    <p>How do we determine what authority is necessary?</p>
  </div>
  <div class="page">
    <p>sandbox</p>
    <p>a.out</p>
    <p>p o</p>
    <p>lic y</p>
    <p>p o</p>
    <p>lic y Shill</p>
    <p>script</p>
    <p>End-to-end policy enforcement</p>
    <p>Kernel-based enforcement for executables</p>
    <p>Shill script</p>
    <p>Declarative security policy</p>
  </div>
  <div class="page">
    <p>Capabilities to manifest authority</p>
    <p>Contracts and sandboxes to control authority</p>
    <p>+</p>
    <p>=</p>
    <p>+ Contracts to communicate authority</p>
    <p>Scripting with Least Privilege</p>
  </div>
  <div class="page">
    <p>Capabilities</p>
  </div>
  <div class="page">
    <p>Capability-based security</p>
    <p>Google Caja</p>
    <p>Joe-E CaPerl</p>
    <p>Emily Oz-E</p>
    <p>W7</p>
    <p>Dennis and Van Horn</p>
    <p>EROS</p>
    <p>KeyKOS</p>
    <p>Coyotos</p>
    <p>seL4 PDP-1 Supervisor</p>
    <p>CAL-TSS PSOS</p>
    <p>NTLSS</p>
    <p>Polaris</p>
    <p>PLASHCapDesk</p>
    <p>A capability is an unforgeable token of authority</p>
  </div>
  <div class="page">
    <p>copy = fun(from_dir,to_dir) { for entry in contents(from_dir) do { current = lookup(from_dir,entry); if is_file(current) then { new = create_file(to_dir,name); write(new,read(current)) } } }</p>
    <p>A capability-safe script</p>
    <p>copy = fun(from_dir,to_dir) { for entry in contents(from_dir) do { current = lookup(from_dir,entry); if is_file(current) then { new = create_file(to_dir,name); write(new,read(current)) } } }</p>
  </div>
  <div class="page">
    <p>copy = fun(from_dir,to_dir) { for entry in contents(from_dir) do { current = lookup(from_dir,entry); if is_file(current) then { new = create_file(to_dir,name); write(new,read(current)) } } }</p>
    <p>A capability-safe script</p>
    <p>copy = fun(from_dir,to_dir) { for entry in contents(from_dir) do { current = lookup(from_dir,entry); if is_file(current) then { new = create_file(to_dir,name); write(new,read(current)) } } }</p>
    <p>capabilities: files, directories, pipes, sockets,</p>
  </div>
  <div class="page">
    <p>copy = fun(from_dir,to_dir) { for entry in contents(from_dir) do { current = lookup(from_dir,entry); if is_file(current) then { new = create_file(to_dir,name); write(new,read(current)) } } }</p>
    <p>A capability-safe script</p>
    <p>copy = fun(from_dir,to_dir) { for entry in contents(from_dir) do { current = lookup(from_dir,entry); if is_file(current) then { new = create_file(to_dir,name); write(new,read(current)) } } } operations: require privileges on capabilities</p>
    <p>Directories: +contents, +lookup, +unlink, ...</p>
    <p>Files: +read, +stat, +path, ...</p>
    <p>Sockets: +bind, +send, +receive, ...</p>
  </div>
  <div class="page">
    <p>copy = fun(from_dir,to_dir) { for entry in contents(from_dir) do { current = lookup(from_dir,entry); if is_file(current) then { new = create_file(to_dir,name); write(new,read(current)) } } }</p>
    <p>A capability-safe script</p>
    <p>copy = fun(from_dir,to_dir) { for entry in contents(from_dir) do { current = lookup(from_dir,entry); if is_file(current) then { new = create_file(to_dir,name); write(new,read(current)) } } }</p>
    <p>derived capabilities</p>
    <p>Directories: +contents, +lookup, +unlink, ...</p>
    <p>Files: +read, +stat, +path, ...</p>
    <p>Sockets: +bind, +send, +receive, ...</p>
  </div>
  <div class="page">
    <p>copy = fun(from_dir,to_dir) { for entry in contents(from_dir) do { current = lookup(from_dir,entry); if is_file(current) then { new = create_file(to_dir,name); write(new,read(current)) } } }</p>
    <p>A capability-safe script</p>
    <p>All resources are represented by capabilities</p>
    <p>Scripts have no capabilities by default 10</p>
    <p>Capability safety</p>
    <p>copy = fun(from_dir,to_dir) { for entry in contents(from_dir) do { current = lookup(from_dir,entry); if is_file(current) then { new = create_file(to_dir,name); write(new,read(current)) } } }</p>
  </div>
  <div class="page">
    <p>Contracts</p>
  </div>
  <div class="page">
    <p>Software contracts</p>
    <p>Applying Design by Contract, Bertrand Meyer [IEEE Computer 92]</p>
  </div>
  <div class="page">
    <p>Software contracts in Shill</p>
    <p>Contract violations stop execution at runtime</p>
    <p>provide find_c : { dir : is_dir } ! listof(is_filename); find_c = fun(dir) { filter(fun (entry) has_ext(c,entry), contents(dir)); }</p>
    <p>executable specifications</p>
    <p>Compositional reasoning about scripts</p>
  </div>
  <div class="page">
    <p>Capability contracts in Shill</p>
    <p>provide find_c : { dir : is_dir(+contents) } ! listof(is_filename);</p>
    <p>More precise contract specifying +contents privilege</p>
    <p>find_c = fun(dir) { filter(fun (entry) has_ext(c,entry), contents(dir)); }</p>
    <p>Capability contracts both require and restrict privileges</p>
  </div>
  <div class="page">
    <p>Sandboxing</p>
  </div>
  <div class="page">
    <p>Capability-based sandboxing</p>
    <p>#!/usr/bin/bash</p>
    <p>...</p>
    <p>./a.out $test &amp;&gt; $log</p>
    <p>...</p>
    <p>unknown binary</p>
    <p>Need to enforce security on executables!</p>
    <p>Emulate capabilities with Mandatory Access Control</p>
  </div>
  <div class="page">
    <p>Capability-based sandboxing</p>
    <p>exec(aout,[test.txt], stdout = log, stderr = log, extra = [libc,cwd,...]);</p>
    <p>File capability with +exec</p>
    <p>arguments</p>
    <p>capabilities for stdin/out/err</p>
    <p>additional capabilities for sandbox</p>
  </div>
  <div class="page">
    <p>foo.c</p>
    <p>open(../alice/dog.jpg, O_RDONLY)</p>
    <p>cwd</p>
    <p>Mandatory Access Control Policy</p>
    <p>/ (root)</p>
    <p>home</p>
    <p>bob</p>
    <p>usr</p>
    <p>alice</p>
    <p>dog.jpg</p>
  </div>
  <div class="page">
    <p>foo.c</p>
    <p>open(../alice/dog.jpg, O_RDONLY)</p>
    <p>cwd</p>
    <p>+lookup with { +read } +lookup</p>
    <p>Mandatory Access Control Policy</p>
    <p>/ (root)</p>
    <p>home</p>
    <p>bob</p>
    <p>usr</p>
    <p>alice</p>
    <p>dog.jpg</p>
    <p>Label objects with capabilities</p>
  </div>
  <div class="page">
    <p>foo.c</p>
    <p>open(../alice/dog.jpg, O_RDONLY)</p>
    <p>cwd</p>
    <p>+lookup with { +read } +lookup</p>
    <p>Mandatory Access Control Policy</p>
    <p>/ (root)</p>
    <p>home</p>
    <p>bob</p>
    <p>usr</p>
    <p>alice</p>
    <p>dog.jpg</p>
    <p>Label objects with capabilities</p>
    <p>Authorize actions against permissions</p>
  </div>
  <div class="page">
    <p>Mandatory Access Control Policy</p>
    <p>foo.c</p>
    <p>cwd</p>
    <p>+lookup</p>
    <p>open(../alice/dog.jpg, O_RDONLY)</p>
    <p>Label objects with capabilities</p>
    <p>Authorize actions against permissions</p>
    <p>+lookup with { +read }</p>
    <p>/ (root)</p>
    <p>home</p>
    <p>bob</p>
    <p>usr</p>
    <p>alice</p>
    <p>dog.jpg</p>
  </div>
  <div class="page">
    <p>Mandatory Access Control Policy</p>
    <p>foo.c</p>
    <p>cwd</p>
    <p>+lookup</p>
    <p>open(../alice/dog.jpg, O_RDONLY)</p>
    <p>Label objects with capabilities</p>
    <p>Authorize actions against permissions</p>
    <p>+lookup with { +read }</p>
    <p>+lookup</p>
    <p>/ (root)</p>
    <p>home</p>
    <p>bob</p>
    <p>usr</p>
    <p>alice</p>
    <p>dog.jpg</p>
  </div>
  <div class="page">
    <p>Mandatory Access Control Policy</p>
    <p>foo.c</p>
    <p>cwd</p>
    <p>+lookup</p>
    <p>open(../alice/dog.jpg, O_RDONLY)</p>
    <p>Label objects with capabilities</p>
    <p>Authorize actions against permissions</p>
    <p>+lookup</p>
    <p>+lookup with { +read }</p>
    <p>/ (root)</p>
    <p>home</p>
    <p>bob</p>
    <p>usr</p>
    <p>alice</p>
    <p>dog.jpg</p>
  </div>
  <div class="page">
    <p>Mandatory Access Control Policy</p>
    <p>foo.c</p>
    <p>cwd</p>
    <p>+lookup</p>
    <p>open(../alice/dog.jpg, O_RDONLY)</p>
    <p>Label objects with capabilities</p>
    <p>Authorize actions against permissions</p>
    <p>+lookup with { +read }</p>
    <p>+lookup</p>
    <p>/ (root)</p>
    <p>home</p>
    <p>bob</p>
    <p>usr</p>
    <p>alice</p>
    <p>dog.jpg</p>
  </div>
  <div class="page">
    <p>Mandatory Access Control Policy</p>
    <p>foo.c</p>
    <p>cwd</p>
    <p>+lookup</p>
    <p>open(../alice/dog.jpg, O_RDONLY)</p>
    <p>+read</p>
    <p>Label objects with capabilities</p>
    <p>Authorize actions against permissions</p>
    <p>Propagate new capabilities</p>
    <p>+lookup with { +read }</p>
    <p>+lookup</p>
    <p>/ (root)</p>
    <p>home</p>
    <p>bob</p>
    <p>usr</p>
    <p>alice</p>
    <p>dog.jpg</p>
  </div>
  <div class="page">
    <p>Mandatory Access Control Policy</p>
    <p>foo.c</p>
    <p>cwd</p>
    <p>+lookup</p>
    <p>open(../alice/dog.jpg, O_RDONLY)</p>
    <p>Label objects with capabilities</p>
    <p>Authorize actions against permissions</p>
    <p>Propagate new capabilities</p>
    <p>+lookup with { +read }</p>
    <p>+lookup</p>
    <p>+read</p>
    <p>/ (root)</p>
    <p>home</p>
    <p>bob</p>
    <p>usr</p>
    <p>alice</p>
    <p>dog.jpg</p>
  </div>
  <div class="page">
    <p>Managing capabilities</p>
    <p>/bin/cat foo.txt &amp;stdout /libexec/ld-elf.so.1 /var/run/ld-elf.so.hints /etc/libmap.conf /lib/libc.so.7 /usr/share/locale/en_US.UTF-8 /usr/share/locale/UTF-8/LC_CTYPE</p>
    <p>cat foo.txt { Difficult to gather all the capabilities needed</p>
    <p>populate-native-wallet(wallet,path,ld_path,...); ... gcc = pkg-native(wallet,gcc); gcc([source,-o,myprog]);</p>
    <p>Need abstractions: capability wallets package sets of capabilities with contracts standard library for running binaries</p>
  </div>
  <div class="page">
    <p>Putting it together</p>
  </div>
  <div class="page">
    <p>Architecture of shill</p>
    <p>co n</p>
    <p>tract: file(+read)</p>
    <p>kernel</p>
    <p>shill</p>
    <p>capability-safe script</p>
    <p>foo.txt</p>
  </div>
  <div class="page">
    <p>Architecture of shill</p>
    <p>co n</p>
    <p>tract: file(+read)</p>
    <p>kernel</p>
    <p>shill</p>
    <p>capability-safe script</p>
    <p>Where do capabilities come from?</p>
    <p>foo.txt</p>
  </div>
  <div class="page">
    <p>Architecture of shill</p>
    <p>ambient script</p>
    <p>co n</p>
    <p>tract: file(+read)</p>
    <p>kernel</p>
    <p>shill</p>
    <p>capability-safe script</p>
    <p>Where do capabilities come from?</p>
    <p>foo.txt</p>
    <p>Limited expressiveness</p>
  </div>
  <div class="page">
    <p>Architecture of shill</p>
    <p>ambient script</p>
    <p>+read</p>
    <p>foo.txt</p>
    <p>co n</p>
    <p>tract: file(+read)</p>
    <p>kernel</p>
    <p>shill</p>
    <p>capability-safe script</p>
    <p>Where do capabilities come from?</p>
    <p>foo.txt</p>
    <p>foo.txt +read</p>
    <p>foo.txt</p>
    <p>Limited expressiveness</p>
  </div>
  <div class="page">
    <p>Architecture of shill</p>
    <p>ambient script</p>
    <p>+read</p>
    <p>foo.txt</p>
    <p>co n</p>
    <p>tract: file(+read)</p>
    <p>kernel</p>
    <p>shill</p>
    <p>capability-safe script</p>
    <p>foo.txt</p>
    <p>foo.txt +read</p>
    <p>foo.txt</p>
  </div>
  <div class="page">
    <p>Architecture of shill</p>
    <p>ambient script</p>
    <p>+read</p>
    <p>foo.txt</p>
    <p>co n</p>
    <p>tract: file(+read)</p>
    <p>sandbox</p>
    <p>executable</p>
    <p>foo.txt</p>
    <p>kernel</p>
    <p>shill</p>
    <p>capability-safe script</p>
    <p>foo.txt</p>
    <p>foo.txt +read</p>
    <p>foo.txt</p>
  </div>
  <div class="page">
    <p>Architecture of shill</p>
    <p>ambient script</p>
    <p>+read</p>
    <p>foo.txt</p>
    <p>co n</p>
    <p>tract: file(+read)</p>
    <p>sandbox</p>
    <p>executable</p>
    <p>foo.txt</p>
    <p>kernel</p>
    <p>shill</p>
    <p>capability-safe script</p>
    <p>+readfoo.txt</p>
    <p>foo.txt +read</p>
    <p>foo.txt</p>
  </div>
  <div class="page">
    <p>Architecture of shill</p>
    <p>ambient script</p>
    <p>+read</p>
    <p>foo.txt</p>
    <p>co n</p>
    <p>tract: file(+read)</p>
    <p>sandbox</p>
    <p>executable</p>
    <p>foo.txt</p>
    <p>kernel</p>
    <p>shill</p>
    <p>capability-safe script</p>
    <p>+readfoo.txt</p>
    <p>foo.txt +read</p>
    <p>foo.txt</p>
  </div>
  <div class="page">
    <p>Example: grading script</p>
    <p>G1. Dont corrupt my other files</p>
    <p>G2. Dont modify or leak the test suite</p>
    <p>G3. Dont allow submissions to interact 29</p>
    <p>create log file</p>
    <p>create work dir</p>
    <p>copy in code</p>
    <p>compile run tests clean up</p>
    <p>scr ipt</p>
  </div>
  <div class="page">
    <p>Example: grading script</p>
    <p>create log file</p>
    <p>create work dir</p>
    <p>copy in code</p>
    <p>compile run tests clean up</p>
    <p>Reuse the glue for security</p>
  </div>
  <div class="page">
    <p>Scripting with Least Privilege</p>
    <p>provide grade : { submission : is_file &amp;&amp; readonly, tests : is_dir &amp;&amp; readonly, working : is_dir(+create_dir with full_privilege), grade_log : is_file &amp;&amp; appendonly, extras : libc_wallet } ! void;</p>
    <p>G1. Dont corrupt my other files</p>
    <p>G2. Dont modify or leak the test suite</p>
    <p>G3. Dont allow submissions to interact 31</p>
  </div>
  <div class="page">
    <p>Scripting with Least Privilege</p>
    <p>provide grade : { submission : is_file &amp;&amp; readonly, tests : is_dir &amp;&amp; readonly, working : is_dir(+create_dir with full_privilege), grade_log : is_file &amp;&amp; appendonly, extras : libc_wallet } ! void;</p>
    <p>G1. Dont corrupt my other files</p>
    <p>G2. Dont modify or leak the test suite</p>
    <p>G3. Dont allow submissions to interact 31</p>
  </div>
  <div class="page">
    <p>Scripting with Least Privilege</p>
    <p>provide grade : { submission : is_file &amp;&amp; readonly, tests : is_dir &amp;&amp; readonly, working : is_dir(+create_dir with full_privilege), grade_log : is_file &amp;&amp; appendonly, extras : libc_wallet } ! void;</p>
    <p>cant modify test suite</p>
    <p>no network capability to leak tests G1. Dont corrupt my other files</p>
    <p>G2. Dont modify or leak the test suite</p>
    <p>G3. Dont allow submissions to interact 31</p>
  </div>
  <div class="page">
    <p>Scripting with Least Privilege</p>
    <p>provide grade : { submission : is_file &amp;&amp; readonly, tests : is_dir &amp;&amp; readonly, working : is_dir(+create_dir with full_privilege), grade_log : is_file &amp;&amp; appendonly, extras : libc_wallet } ! void;</p>
    <p>cant modify test suite</p>
    <p>no network capability to leak tests</p>
    <p>submissions isolated</p>
    <p>G1. Dont corrupt my other files</p>
    <p>G2. Dont modify or leak the test suite</p>
    <p>G3. Dont allow submissions to interact 31</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
  </div>
  <div class="page">
    <p>Implementation</p>
    <p>Racket Capability-safe subset of racket Capability-based systems library Contracts built with Racket combinators</p>
    <p>Capability-based sandbox Policy module for Trusted MAC framework Few additional capability-safe system calls</p>
  </div>
  <div class="page">
    <p>Case studies</p>
    <p>Grading OCaml assignments sandboxed execution, isolation between students</p>
    <p>GNU Emacs installer sandboxed execution, install/uninstall locations</p>
    <p>Apache webserver read-only access to config and content directories</p>
    <p>find and execute sandboxed execution per-file</p>
    <p>find</p>
  </div>
  <div class="page">
    <p>Grading Emacs Apache Find</p>
    <p>Ti m</p>
    <p>e (s</p>
    <p>)</p>
    <p>symbol</p>
    <p>none</p>
    <p>bashFALSE</p>
    <p>bashTRUE</p>
    <p>sandboxTRUE</p>
    <p>shillTRUE</p>
    <p>Performance</p>
    <p>Grading Emacs Apache Find</p>
    <p>Download Untar Configure Make Install Uninstall</p>
    <p>m e</p>
    <p>(s )</p>
    <p>symbol</p>
    <p>none</p>
    <p>bashFALSE</p>
    <p>bashTRUE</p>
    <p>sandboxFALSE</p>
    <p>sandboxTRUE</p>
    <p>shillTRUE</p>
    <p>Grading Emacs Apache Find</p>
    <p>Download Untar Configure Make Install Uninstall</p>
    <p>m e</p>
    <p>(s )</p>
    <p>symbol</p>
    <p>none</p>
    <p>bashFALSE</p>
    <p>bashTRUE</p>
    <p>sandboxFALSE</p>
    <p>sandboxTRUE</p>
    <p>shillTRUE</p>
    <p>Grading Emacs Apache Find</p>
    <p>Download Untar Configure Make Install Uninstall</p>
    <p>m e</p>
    <p>(s )</p>
    <p>symbol</p>
    <p>none</p>
    <p>bashFALSE</p>
    <p>bashTRUE</p>
    <p>sandboxFALSE</p>
    <p>sandboxTRUE</p>
    <p>shillTRUE</p>
    <p>Grading Emacs Apache Find</p>
    <p>Download Untar Configure Make Install Uninstall</p>
    <p>m e</p>
    <p>(s )</p>
    <p>symbol</p>
    <p>none</p>
    <p>bashFALSE</p>
    <p>bashTRUE</p>
    <p>sandboxFALSE</p>
    <p>sandboxTRUE</p>
    <p>shillTRUE</p>
    <p>Ba se</p>
    <p>lin e</p>
    <p>In sta</p>
    <p>lle d</p>
    <p>Sa nd</p>
    <p>bo xe</p>
    <p>d</p>
    <p>sh ill</p>
    <p>ve rs</p>
    <p>ion</p>
    <p>Overhead generally below 20%</p>
    <p>Overhead proportional to security guarantees</p>
  </div>
  <div class="page">
    <p>Capabilities to manifest authority</p>
    <p>Contracts and sandboxes to control authority</p>
    <p>+</p>
    <p>=</p>
    <p>+ Contracts to communicate authority</p>
    <p>Scripting with Least Privilege</p>
    <p>www.shill-lang.org</p>
  </div>
</Presentation>
