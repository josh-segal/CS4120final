<?xml version="1.0" ?>
<Presentation>
  <div class="page"/>
  <div class="page">
    <p>Data Storage Revolution</p>
    <p>Relational Databases</p>
    <p>Object Storage (put/get)  Dynamo  PNUTS  CouchDB  MemcacheDB  Cassandra</p>
    <p>Speed Scalability Availability Throughput</p>
    <p>No Complexity</p>
  </div>
  <div class="page">
    <p>Eventual Consistency</p>
    <p>Manager</p>
    <p>Replica</p>
    <p>Replica Replica</p>
    <p>Write Request Read Request Replica</p>
    <p>B</p>
    <p>A</p>
    <p>Read Request</p>
  </div>
  <div class="page">
    <p>Eventual Consistency</p>
    <p>Writes ordered after commit  Reads can be out-of-order or stale</p>
    <p>Easy to scale, high throughput</p>
    <p>Difficult application programming model</p>
  </div>
  <div class="page">
    <p>Traditional Solution to Consistency</p>
    <p>Manager</p>
    <p>Replica</p>
    <p>Replica</p>
    <p>Replica Replica</p>
    <p>Write Request Two-Phase Commit:</p>
  </div>
  <div class="page">
    <p>Strong Consistency</p>
    <p>Reads and Writes strictly ordered</p>
    <p>Easy programming</p>
    <p>Expensive implementation  Doesnt scale well</p>
  </div>
  <div class="page">
    <p>Our Goal</p>
    <p>Easy programming</p>
    <p>Easy to scale, high throughput</p>
  </div>
  <div class="page">
    <p>Chain Replication</p>
    <p>Manager</p>
    <p>Replica</p>
    <p>Replica</p>
    <p>Replica Replica</p>
    <p>HEAD TAIL</p>
    <p>Write Request Read Request</p>
    <p>W1 R1 W2 R2 R3</p>
    <p>van Renesse &amp; Schneider</p>
    <p>(OSDI 2004)</p>
    <p>W1</p>
    <p>R1</p>
    <p>R2</p>
    <p>W2</p>
    <p>R3</p>
  </div>
  <div class="page">
    <p>Chain Replication</p>
    <p>Strong consistency  Simple replication  Increases write throughput</p>
    <p>Low read throughput</p>
    <p>Can we increase throughput?  Insight:</p>
    <p>Most applications are read-heavy (100:1)</p>
  </div>
  <div class="page">
    <p>CRAQ</p>
    <p>Two states  clean and dirty</p>
    <p>Replica TAIL Replica Replica HEAD</p>
    <p>Read Request Read Request Read Request Read Request Read Request</p>
    <p>V1 V1 V1 V1 V1</p>
  </div>
  <div class="page">
    <p>CRAQ</p>
    <p>Two states per object  clean and dirty  If latest version is clean, return value  If dirty, contact tail for latest version number</p>
    <p>Replica TAIL Replica Replica HEAD</p>
    <p>V1 V1 V1 V1 V1</p>
    <p>Write Request</p>
    <p>,V2 ,V2 ,V2</p>
    <p>Read Request</p>
    <p>V1</p>
    <p>Read Request</p>
    <p>,V2 V2 V2 V2 V2 V2</p>
  </div>
  <div class="page">
    <p>Multicast Optimizations</p>
    <p>Each chain forms group  Tail multicasts ACKs</p>
    <p>Replica TAIL Replica Replica HEAD</p>
    <p>V1 V1 V1 V1 ,V2 ,V2 ,V2 ,V2 V2 V2 V2 V2 V2</p>
  </div>
  <div class="page">
    <p>Multicast Optimizations</p>
    <p>Each chain forms group  Tail multicasts ACKs  Head multicasts write data</p>
    <p>Replica TAIL Replica Replica HEAD</p>
    <p>V2 V2 V2 V2</p>
    <p>Write Request</p>
    <p>,V3 ,V3 ,V3 ,V3 V2 ,V3 V3</p>
  </div>
  <div class="page">
    <p>CRAQ Benefits</p>
    <p>From Chain Replication  Strong consistency  Simple replication  Increases write throughput</p>
    <p>Additional Contributions  Read throughput scales :</p>
    <p>Chain Replication with Apportioned Queries  Supports Eventual Consistency</p>
  </div>
  <div class="page">
    <p>High Diversity</p>
    <p>Many data storage systems assume locality  Well connected, low latency</p>
    <p>Real large applications are geo-replicated  To provide low latency  Fault tolerance</p>
    <p>(source: Data Center Knowledge)</p>
  </div>
  <div class="page">
    <p>TAIL</p>
    <p>Multi-Datacenter CRAQ</p>
    <p>HEAD Replica</p>
    <p>Replica</p>
    <p>Replica</p>
    <p>Replica</p>
    <p>Replica</p>
    <p>TAIL Replica</p>
    <p>Replica</p>
    <p>DC1</p>
    <p>DC2</p>
    <p>DC3</p>
  </div>
  <div class="page">
    <p>Multi-Datacenter CRAQ</p>
    <p>HEAD Replica</p>
    <p>Replica</p>
    <p>Replica</p>
    <p>Replica</p>
    <p>Replica</p>
    <p>TAIL Replica</p>
    <p>Replica Client</p>
    <p>DC1</p>
    <p>DC2</p>
    <p>DC3</p>
    <p>Client</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Solution</p>
    <p>Chain Configuration</p>
  </div>
  <div class="page">
    <p>Master Datacenter</p>
    <p>HEAD</p>
    <p>Replica Replica</p>
    <p>Replica</p>
    <p>Replica</p>
    <p>Replica</p>
    <p>DC1</p>
    <p>DC2</p>
    <p>HEAD</p>
    <p>Writer</p>
    <p>TAIL</p>
    <p>TAIL</p>
    <p>Replica</p>
    <p>Replica</p>
    <p>DC3</p>
  </div>
  <div class="page">
    <p>Implementation</p>
    <p>Approximately 3,000 lines of C++</p>
    <p>Uses Tame extensions to SFS asynchronous I/O and RPC libraries</p>
    <p>Network operations use Sun RPC interfaces</p>
    <p>Uses Yahoos ZooKeeper for coordination</p>
  </div>
  <div class="page">
    <p>Coordination Using ZooKeeper</p>
    <p>Stores chain metadata  Monitors/notifies about node membership</p>
    <p>CRAQ CRAQ</p>
    <p>CRAQ</p>
    <p>CRAQ</p>
    <p>CRAQ</p>
    <p>CRAQ</p>
    <p>CRAQ</p>
    <p>CRAQ</p>
    <p>CRAQ</p>
    <p>DC1</p>
    <p>DC3</p>
    <p>DC2</p>
    <p>ZooKeeper ZooKeeper</p>
    <p>ZooKeeper</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Does CRAQ scale vs. CR?</p>
    <p>How does write rate impact performance?</p>
    <p>Can CRAQ recover from failures?</p>
    <p>How does WAN effect CRAQ?</p>
    <p>Tests use Emulab network emulation testbed</p>
  </div>
  <div class="page">
    <p>Writes/s</p>
    <p>R ea ds /s</p>
    <p>CRAQ7 CRAQ3 CR3</p>
    <p>Read Throughput as Writes Increase</p>
  </div>
  <div class="page">
    <p>Failure Recovery (Read Throughput)</p>
    <p>Time (s)</p>
    <p>R ea</p>
    <p>ds /s</p>
    <p>Length 7 Length 5 Length 3</p>
  </div>
  <div class="page">
    <p>Failure Recovery (Latency)</p>
    <p>Time (s)</p>
    <p>R ea</p>
    <p>d La</p>
    <p>te nc</p>
    <p>y (m</p>
    <p>s)</p>
    <p>Time (s)</p>
    <p>W ri te</p>
    <p>L a</p>
    <p>te n</p>
    <p>c y (</p>
    <p>m s )</p>
    <p>Time (s) Time (s)</p>
  </div>
  <div class="page">
    <p>Geo-replicated Read Latency</p>
    <p>Writes/s</p>
    <p>M ea</p>
    <p>n La</p>
    <p>te nc</p>
    <p>y (m</p>
    <p>s)</p>
    <p>CR CRAQ</p>
  </div>
  <div class="page">
    <p>If Single Object Put/Get Insufficient</p>
    <p>Test-and-Set, Append, Increment  Trivial to implement  Head alone can evaluate</p>
    <p>Multiple object transaction in same chain  Can still be performed easily  Head alone can evaluate</p>
    <p>Multiple chains  An agreement protocol (2PC) can be used  Only heads of chains need to participate  Although degrades performance (use carefully!)</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>CRAQ Contributions?  Challenges trade-off of consistency vs. throughput</p>
    <p>Provides strong consistency  Throughput scales linearly for read-mostly  Support for wide-area deployments of chains  Provides atomic operations and transactions</p>
    <p>Thank You</p>
    <p>Questions?</p>
  </div>
</Presentation>
