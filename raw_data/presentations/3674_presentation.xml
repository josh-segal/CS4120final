<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Secure Parallel Computation on National-Scale Volumes of Data Sahar Mazloom, Phi Hung Le, Samuel Ranellucci, S. Dov Gordon</p>
  </div>
  <div class="page">
    <p>User</p>
    <p>Learning on User Data</p>
    <p>User</p>
    <p>Data Model</p>
    <p>Machine Learning Engine</p>
    <p>User Data</p>
  </div>
  <div class="page">
    <p>Computation on Encrypted Data</p>
    <p>Goal: Creating methods for parties to jointly compute a function over their inputs while keeping those inputs private.</p>
    <p>Secure Multi-Party Computation:</p>
  </div>
  <div class="page">
    <p>Example of a ML algorithm (Sparse) Matrix Factorization:  De-composition of a sparse</p>
    <p>matrix of Ratings (R), into Users (U), and Items (V) matrices.</p>
    <p>Gradient Descend:  An optimization algorithm</p>
    <p>used in many machine learning algorithms.</p>
    <p>R VU  Items</p>
    <p>U se</p>
    <p>rs</p>
    <p>items</p>
    <p>U se</p>
    <p>rs</p>
    <p>d</p>
    <p>d</p>
    <p>Matrix Factorization for Recommendation Systems</p>
  </div>
  <div class="page">
    <p>Matrix Factorization using Gradient Descent for Movie Recommendation</p>
    <p>R VU  Movies</p>
    <p>U se</p>
    <p>rs</p>
    <p>Movie Profiles U</p>
    <p>se r</p>
    <p>P ro</p>
    <p>fil es</p>
    <p>d</p>
    <p>d</p>
    <p>rij ui vj</p>
    <p>!&quot;  !,&quot;</p>
    <p>Objective function:  = min(!,&quot;)&amp;' !,&quot;  !,&quot; ( + !&amp;) !</p>
    <p>( + &quot;&amp;* &quot; (</p>
    <p>User gradient: +! = 2&quot;&amp;* &quot; !&quot;  !,&quot; + 2! Movie gradient: ,&quot; = 2!&amp;) ! !&quot;  !,&quot; + 2&quot;</p>
  </div>
  <div class="page">
    <p>Distributed Graph Parallel Computation</p>
    <p>Non-secure Frameworks: MapReduce, GraphLab, PowerGraph [Gonzalez et al. 2012]</p>
    <p>Supported algorithms: Matrix Factorization, Histogram, PageRank, Markov Random Field Parameter Learning, Name Entity Resolution,</p>
    <p>Users Movies</p>
  </div>
  <div class="page">
    <p>PowerGraph: Think as a</p>
    <p>Vertex! Move computation</p>
    <p>to data</p>
    <p>GAS model of Operation</p>
  </div>
  <div class="page">
    <p>Secure Graph Parallel Computation</p>
    <p>GraphSC [Nayak et al. SP15]</p>
    <p>Use Oblivious Sort to hide node degree and edge structure</p>
    <p>Users Movies</p>
    <p>Complexity: (  +    +  )</p>
    <p>V vertices, E edges</p>
    <p>Running time: 6K users, 4K movies, 1 M Ratings =&gt; 13 Hrs</p>
  </div>
  <div class="page">
    <p>Primary Question [Mazloom, Gordon CCS18]</p>
    <p>Can we make secure computation algorithms faster</p>
    <p>if we allow something small to be learned?</p>
    <p>And prove the leakage is Differentially Private!</p>
  </div>
  <div class="page">
    <p>Differentially-Oblivious Graph Parallel Computation</p>
    <p>OblivGraph [Mazloom, Gordon CCS18]</p>
    <p>Noisy node degree by adding dummy edges  No. of dummy edges determined by DP parameters  Use Oblivious Sort to hide the edge structure</p>
    <p>Users Movies</p>
    <p>Shuffle</p>
    <p>Complexity: ( 4 +     +   ), : O !&quot;# $%!&quot;# &amp;</p>
    <p>'</p>
  </div>
  <div class="page">
    <p>OblivGraph [Mazloom, Gordon CCS18]</p>
    <p>input</p>
    <p>Alice Bob</p>
    <p>users</p>
    <p>inpu t input</p>
  </div>
  <div class="page">
    <p>OblivShuffle</p>
    <p>OblivGather</p>
    <p>OblivApply</p>
    <p>OblivScatter</p>
    <p>Alice Bob</p>
    <p>OblivGraph [Mazloom, Gordon CCS18]</p>
    <p>Running time: 6K users, 4K movies, 1 M Ratings =&gt; 2 Hrs</p>
    <p>Threat model: Honest-But-Curious Adversary</p>
  </div>
  <div class="page">
    <p>Current Question</p>
    <p>Can we make these differentially private secure</p>
    <p>computation algorithms even faster?</p>
  </div>
  <div class="page">
    <p>Can we do better?</p>
    <p>q Low communication MPC [Gordon et al. Asiacrypt18] q Differentially Private Leakage in Secure Computation [Mazloom, Gordon CCS18] q Graph Parallel Computation</p>
    <p>=&gt; Constructing an MPC protocol that can</p>
    <p>MF on 20 million inputs &lt; 6 mins (MovieLens dataset) Histograms on 300 million inputs in only 4 mins (Counting users in each zip code)</p>
    <p>Running time: 6K users, 4K movies, 1 M Ratings =&gt; 25 Sec</p>
  </div>
  <div class="page">
    <p>Key playing factors</p>
    <p>Using 4 computation servers instead of 2  Linear Oblivious Shuffle instead of Quasi-Linear OblivShuffle  Fixed-Point Arithmetic Computation instead of Boolean Circuit  Secure against one malicious adversary</p>
  </div>
  <div class="page">
    <p>Challenge 1</p>
    <p>o The party that access the data should NOT learn the shuffling pattern</p>
    <p>Merging these construction ==&gt; Opportunities and Challenges</p>
    <p>Partition the tasks between 4 parties: Group 1: Shuffle the data Group 2: Access the data</p>
    <p>Solution</p>
  </div>
  <div class="page">
    <p>Challenge 2</p>
    <p>o Secure against active adversary</p>
    <p>Verifying the result of each operation to detect cheating behaviorSolution</p>
  </div>
  <div class="page">
    <p>Alice Bob</p>
    <p>OblivShuffle</p>
    <p>Verify Gather</p>
    <p>Verify Scatter</p>
    <p>Charlotte David</p>
    <p>Verify Shuffle</p>
    <p>OblivGather</p>
    <p>OblivApply</p>
    <p>OblivScatter 18</p>
    <p>Malicious-secure 4-party Secure Parallel Computation</p>
    <p>OblivApply Cross-Check</p>
    <p>Improved by 230X</p>
    <p>Improved by 880X</p>
  </div>
  <div class="page">
    <p>Challenge 3</p>
    <p>o Fixed-Point Arithmetic Computation</p>
    <p>Truncation and handling the rounding errorSolution</p>
  </div>
  <div class="page">
    <p>CrossCheck Verification after Apply phase</p>
    <p>Alice &amp; Bob compute on some masked values and truncate</p>
    <p>Charlotte &amp; David compute on some masked values and truncate</p>
    <p>If their results dont match?</p>
    <p>The verification may Fail if data is a decimal value, and its NOT because</p>
    <p>of malicious behavior!</p>
    <p>Abort</p>
    <p>inspired by [Gordon et al. 2018]</p>
  </div>
  <div class="page">
    <p>Implementation Results</p>
    <p>Implemented in C++, run experiments on AWS</p>
    <p>Multiple benchmark algorithms, including Matrix Factorization and Histogram</p>
    <p>Input size and privacy parameters for different experiments</p>
  </div>
  <div class="page">
    <p>Run Time on National-Scale Histogram Problem</p>
    <p>Run time (s) for computing Histogram problem on different input sizes (LAN) Counting people in each zip code</p>
  </div>
  <div class="page">
    <p>Run Time Large-Scale MF Problem</p>
    <p>Run time (s) for computing Matrix Factorization problem on real-world dataset, MovieLens on different input sizes for Movie Recommendation</p>
  </div>
  <div class="page">
    <p>Run Time Comparison with previous works</p>
    <p>Run time comparison on this work vs. OblivGraph vs. GraphSC. Single iteration of Matrix Factorization on real- world dataset, MovieLens with 6K users ranked 4K movies with 1M ratings</p>
  </div>
  <div class="page">
    <p>Summarize</p>
    <p>Goal: Learning on large-scale data with security and privacy</p>
    <p>Secure MPC for Privacy Preserving Machine Learning  Secure against one malicious corruption  Leverage Differential Privacy to improve efficiency</p>
  </div>
  <div class="page">
    <p>Thanks! Q&amp;A</p>
    <p>Secure Parallel Computation on National-Scale Volumes of Data Sahar Mazloom, Phi Hung Le, Samuel Ranellucci, S. Dov Gordon</p>
    <p>sseyedma@gmu.edu Code is publicly available!</p>
  </div>
</Presentation>
