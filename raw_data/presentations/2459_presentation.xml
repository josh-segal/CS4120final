<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>DRIVOLUTION: RETHINKING THE DATABASE DRIVER LIFECYCLE</p>
    <p>Emmanuel Cecchet (UMass Amherst) Joint work with George Candea ( )</p>
  </div>
  <div class="page">
    <p>THIS RESEARCH IS BASED ON TRUE</p>
    <p>EVENTS</p>
    <p>U UN</p>
    <p>APPROPRIATE FOR BOTH ACADEMIC AND INDUSTRIAL AUDIENCES</p>
  </div>
  <div class="page">
    <p>JVM</p>
    <p>Java Application</p>
    <p>Connector/J JDBC Driver MySQL</p>
    <p>DATABASE DRIVERS</p>
    <p>PHP Application libmysl</p>
    <p>native lib Connector/</p>
    <p>ODBC</p>
    <p>.Net Application Connector/Net</p>
    <p>Perl script DBD::mysql</p>
    <p>Python MySQLdb DB</p>
    <p>API</p>
    <p>mysql network protocol</p>
    <p>MySQL drivers: 63 platforms, 14+ languages</p>
  </div>
  <div class="page">
    <p>DATABASE DRIVER LIFECYCLE</p>
    <p>Driver update:</p>
  </div>
  <div class="page">
    <p>STATE OF THE ART IN DATABASE DRIVERS</p>
    <p>Drivers are not sexy</p>
    <p>Driver distribution separate from database engine</p>
    <p>Driver installation manual process on client machine</p>
    <p>Driver upgrades are disruptive (client application reconfiguration + restart)</p>
    <p>No protection against malicious drivers</p>
  </div>
  <div class="page">
    <p>A REAL LIFE EXAMPLE</p>
    <p>200 application servers accessing a cluster of 4 DBs  Driver upgrade more complex than database</p>
    <p>upgrade  Online upgrades?</p>
    <p>Interne t</p>
    <p>DB Driver DB Driver DB Driver DB Driver DB Driver</p>
    <p>DB Driver DB Driver DB Driver DB Driver DB Driver</p>
    <p>DB Driver DB Driver DB Driver DB Driver DB Driver</p>
  </div>
  <div class="page">
    <p>DRIVOLUTION Think different</p>
    <p>Concepts  Implementatio</p>
    <p>n  Use cases</p>
  </div>
  <div class="page">
    <p>Database</p>
    <p>DRIVOLUTION CONCEPTS</p>
    <p>2 Components: Bootloader and Server</p>
    <p>Drivers are stored in the database information schema</p>
    <p>Generic bootstrap receives driver a la DHCP from Drivolution server</p>
    <p>Lease associated to driver with various renewal policies</p>
    <p>Application 1</p>
    <p>Driver 1</p>
    <p>Driver 2</p>
    <p>Driver 1</p>
    <p>Drivolution protocol</p>
    <p>Drivolution Bootloader</p>
    <p>Drivolution Bootloader</p>
    <p>Drivolution JDBC Bootloader</p>
    <p>Drivolution Server</p>
    <p>Driver 3</p>
    <p>Database protocol</p>
    <p>Application 2 Application 3</p>
    <p>binary code</p>
    <p>API</p>
    <p>JDBC</p>
    <p>ODBC</p>
    <p>API version</p>
    <p>ODBC</p>
    <p>binary format</p>
    <p>jar</p>
    <p>zip</p>
    <p>platform</p>
    <p>JRE 1.6</p>
    <p>linux_i386</p>
    <p>ADO.Net</p>
  </div>
  <div class="page">
    <p>DRIVOLUTION CONCEPTS</p>
    <p>Drivolution Bootloader</p>
    <p>Drivolution Server</p>
    <p>send(db, user, API, platform)</p>
    <p>find_available_driver(API, platform) send(lease, driver_bin_format)</p>
    <p>DRIVOLUTION_OFFER</p>
    <p>DRIVOLUTION_REQUEST</p>
    <p>set(lease_expire_time, expire_policy)</p>
    <p>download(driver_code) load(driver) connect()</p>
    <p>Lease expires</p>
    <p>Install new driver Switch according to policy</p>
    <p>TFTP or secure transfer</p>
    <p>send(driver_code)</p>
    <p>Application</p>
    <p>update lease table set (user, client@, driver id, lease)</p>
    <p>DRIVOLUTION_REQUEST</p>
    <p>DRIVOLUTION_OFFER</p>
    <p>send(driver_code)</p>
    <p>Upgrade driver update lease table</p>
  </div>
  <div class="page">
    <p>DRIVOLUTION Think different</p>
    <p>Concepts  Implementatio</p>
    <p>n  Use cases</p>
  </div>
  <div class="page">
    <p>DRIVOLUTION BOOTLOADER</p>
    <p>Database driver agnostic but API[/Platform] specific</p>
    <p>Implements the Drivolution protocol  Can load multiple drivers and switch</p>
    <p>from 1 version to the other  Does not need to be upgraded</p>
  </div>
  <div class="page">
    <p>DRIVOLUTION SERVER</p>
    <p>Server logic uses regular SQL  re-uses all existing database mechanisms  logic can be implemented as a stored procedure</p>
    <p>In-core implementation  Drivolution server embedded in the database  can enforce connection closing on server side</p>
    <p>upon lease expiration  External server</p>
    <p>Server runs outside the DB  uses legacy driver to access DB</p>
    <p>Standalone server  database independent service  generic driver distribution server</p>
    <p>Application 1</p>
    <p>Bootloader</p>
    <p>driver table</p>
    <p>Driver 1</p>
    <p>Driver 2</p>
    <p>legacy driverDriver 2</p>
    <p>Drivolution Server 1</p>
    <p>Legacy Database</p>
  </div>
  <div class="page">
    <p>DRIVOLUTION IN A JAVA WORLD</p>
    <p>Bootloader can be integrated in JVM runtime</p>
    <p>Very small footprint (8 KB)</p>
    <p>Drivers loaded in separate classloaders</p>
    <p>No runtime overhead after 1st connect (original driver code)</p>
  </div>
  <div class="page">
    <p>DRIVOLUTION Think different</p>
    <p>Concepts  Implementatio</p>
    <p>n  Use cases</p>
  </div>
  <div class="page">
    <p>DRIVOLUTION USE CASES: HETEROGENEOUS DATABASE ADMIN</p>
  </div>
  <div class="page">
    <p>DRIVOLUTION USE CASES: DYNAMIC RECONFIGURATION OF CLIENTS</p>
    <p>Master/slave failover for planned maintenance</p>
    <p>0-downtime operation  Failback = downgrade</p>
  </div>
  <div class="page">
    <p>DRIVOLUTION USE CASES: DATABASE CLUSTERS</p>
    <p>Drivolution server as a standalone driver distribution service</p>
    <p>Useful for both legacy and homogeneous systems</p>
    <p>Can be replicated for HA</p>
  </div>
  <div class="page">
    <p>DRIVOLUTION: OTHER USE CASES</p>
    <p>Assembling drivers on-demand  extensions on-demand (NLS, GIS, Kerberos)  driver code signing to identify malicious drivers  dynamic generation of preconfigured drivers</p>
    <p>License server  license keys in separate files  static or dynamic distribution</p>
    <p>Integration of Bootloaders in runtime libraries</p>
  </div>
  <div class="page">
    <p>WHAT IS THE MESSAGE TO TAKE BACK HOME?</p>
  </div>
  <div class="page">
    <p>CONCLUSION</p>
    <p>Drivers are not sexy but they deserve our attention</p>
    <p>https://sourceforge.net/projects/drivoluti on/</p>
    <p>More open issues in Sigmod08 paper MIDDLEWARE-BASED DATABASE REPLICATION: THE GAPS BETWEEN THEORY AND PRACTICE</p>
  </div>
  <div class="page">
    <p>QUESTIONS?</p>
    <p>Contact: cecchet@cs.umass.edu</p>
  </div>
</Presentation>
