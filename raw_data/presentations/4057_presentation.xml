<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Run-DMA Michael Rushanan, Stephen Checkoway</p>
    <p>Johns Hopkins University, University of Illinois at Chicago</p>
  </div>
  <div class="page">
    <p>Introduction</p>
    <p>Arbitrary computation using Direct Memory Access engine</p>
    <p>Access all resources of the device</p>
    <p>Implement the following as an example:</p>
    <p>Brainfuck</p>
    <p>Rootkit</p>
    <p>Glorified memcpy</p>
  </div>
  <div class="page">
    <p>Direct Memory Access</p>
    <p>Offload task of copying memory to/from auxiliary processors (e.g., NIC, GPU, etc)</p>
    <p>Free CPU to do more interesting work</p>
    <p>CPU</p>
    <p>Auxiliary Processor</p>
    <p>Main MemoryDMA</p>
  </div>
  <div class="page">
    <p>DMA Engine</p>
    <p>CPU configures DMA transfer by setting control registers</p>
    <p>Control registers specify transfer operation</p>
    <p>src</p>
    <p>dest</p>
    <p>length</p>
    <p>next_cb</p>
    <p>Control Block Structure</p>
  </div>
  <div class="page">
    <p>Control Blocking Chaining  Scatter/gather DMA can transfer to/from multiple memory</p>
    <p>areas in a single transaction</p>
    <p>Configure a sequence of control blocks</p>
    <p>src</p>
    <p>dest</p>
    <p>length</p>
    <p>next_cb</p>
    <p>src</p>
    <p>dest</p>
    <p>length</p>
    <p>next_cb</p>
    <p>src</p>
    <p>dest</p>
    <p>length</p>
    <p>next_cb</p>
  </div>
  <div class="page">
    <p>Required DMA Properties</p>
    <p>Perform memory-to-memory copies</p>
    <p>Programmed by loading address of control blocks</p>
    <p>Supports scatter/gather mode</p>
  </div>
  <div class="page">
    <p>Target Device  Raspberry Pi 2 single-board computer</p>
    <p>Other Potential DMA Engines:</p>
    <p>Intel 8237 (e.g., legacy IBM PC/ATs)</p>
    <p>Cell multi-core microprocessor (e.g., PS3)</p>
    <p>BCM2836</p>
  </div>
  <div class="page">
    <p>DMA Gadgets  DMA programs require self-modifying constructs</p>
    <p>Overwrite members of later control blocks</p>
    <p>src</p>
    <p>cb0 cb1</p>
  </div>
  <div class="page">
    <p>Table Lookups</p>
    <p>src</p>
    <p>dest</p>
    <p>next_cb</p>
    <p>cb0 cb1</p>
    <p>sqr_tbl</p>
  </div>
  <div class="page">
    <p>Basic Building Blocks</p>
    <p>Unary Functions</p>
    <p>Lookup value in table and store to memory y = f(x)</p>
    <p>Variable Dereferencing</p>
    <p>Copy value pointed to into src/dest of subsequent control block</p>
    <p>*x</p>
  </div>
  <div class="page">
    <p>Basic Building Blocks</p>
    <p>Conditional Goto Address of a control block written to the next_cb member of a trampoline</p>
    <p>Switch Offset table with entries that are offsets into an address table</p>
    <p>Memory-mapped I/O Registers</p>
    <p>Loop over memory-mapped flag or status register</p>
  </div>
  <div class="page">
    <p>BrainFuck</p>
  </div>
  <div class="page">
    <p>BrainFuck</p>
    <p>+ increment the cell pointed to by head ++*ptr;</p>
    <p>- decrement the cell pointed to by head --*ptr;</p>
    <p>&gt; increment head to point to the next cell ++ptr;</p>
    <p>&lt; decrement head to point to the previous cell --ptr;</p>
  </div>
  <div class="page">
    <p>BrainFuck</p>
    <p>[ if the cell pointed to by head is nonzero, execute next instruction; otherwise, jump to the instruction following ]</p>
    <p>while (*ptr) {</p>
    <p>] if the cell pointed to by head is zero, execute next instruction; otherwise, jump to the instruction following [</p>
    <p>}</p>
    <p>, store the input to the cell pointed to by head *ptr=getchar();</p>
    <p>. output the cell pointed to by head putchar(*ptr);</p>
  </div>
  <div class="page">
    <p>Interpreter Implementation</p>
    <p>8 gadgets corresponding to BrainFuck instructions</p>
    <p>Dispatch</p>
    <p>Increment word and decrement word</p>
    <p>Fetch Next instruction (i.e., increment PC and dispatch)</p>
  </div>
  <div class="page">
    <p>Increment</p>
    <p>ff</p>
    <p>inc_tbl</p>
    <p>cb0 cb1</p>
    <p>cb2</p>
    <p>cb3</p>
  </div>
  <div class="page">
    <p>Increment</p>
    <p>ff</p>
    <p>inc_tbl</p>
    <p>cb0 cb1</p>
    <p>cb2</p>
    <p>cb3</p>
    <p>Variable Dereference</p>
  </div>
  <div class="page">
    <p>Increment</p>
    <p>ff</p>
    <p>inc_tbl</p>
    <p>cb0 cb1</p>
    <p>cb2</p>
    <p>cb3</p>
    <p>Unary Function</p>
  </div>
  <div class="page">
    <p>Increment</p>
    <p>ff</p>
    <p>inc_tbl</p>
    <p>cb0 cb1</p>
    <p>cb2</p>
    <p>cb3</p>
  </div>
  <div class="page">
    <p>Dispatch</p>
    <p>quit</p>
    <p>nop</p>
    <p>inc</p>
    <p>dec</p>
    <p>insn_tbl</p>
    <p>cb0 cb1</p>
    <p>cb2</p>
    <p>cb3</p>
    <p>e0 30 00 fb 00 20 00 fb 00 23 00 fb</p>
    <p>trampoline</p>
    <p>dispatch_tbl</p>
  </div>
  <div class="page">
    <p>Variable Dereference</p>
    <p>Dispatch</p>
    <p>quit</p>
    <p>nop</p>
    <p>inc</p>
    <p>dec</p>
    <p>insn_tbl</p>
    <p>cb0 cb1</p>
    <p>cb2</p>
    <p>cb3</p>
    <p>e0 30 00 fb 00 20 00 fb 00 23 00 fb</p>
    <p>trampoline</p>
    <p>dispatch_tbl</p>
  </div>
  <div class="page">
    <p>Switch</p>
    <p>Dispatch</p>
    <p>quit</p>
    <p>nop</p>
    <p>inc</p>
    <p>dec</p>
    <p>insn_tbl</p>
    <p>cb0 cb1</p>
    <p>cb2</p>
    <p>cb3</p>
    <p>e0 30 00 fb 00 20 00 fb 00 23 00 fb</p>
    <p>trampoline</p>
    <p>dispatch_tbl</p>
  </div>
  <div class="page">
    <p>Dispatch</p>
    <p>quit</p>
    <p>nop</p>
    <p>inc</p>
    <p>dec</p>
    <p>insn_tbl</p>
    <p>cb0 cb1</p>
    <p>cb2</p>
    <p>cb3</p>
    <p>e0 30 00 fb 00 20 00 fb 00 23 00 fb</p>
    <p>trampoline</p>
    <p>dispatch_tbl</p>
  </div>
  <div class="page">
    <p>Turing-Complete</p>
    <p>BrainFuck is Turing-complete</p>
    <p>We implemented BrainFuck with DMA gadgets</p>
    <p>Thus DMA gadgets are Turing-complete</p>
    <p>Simulate any other computational</p>
    <p>device/language</p>
  </div>
  <div class="page">
    <p>Resource-Complete</p>
    <p>DMA has access to memory-mapped IO registers</p>
    <p>Thus DMA gadgets are resource-complete</p>
    <p>Access all resources of system from within</p>
    <p>the language</p>
  </div>
  <div class="page">
    <p>Hello World</p>
    <p>https://github.com/stevecheckoway/rundma</p>
  </div>
  <div class="page">
    <p>More Gadgets</p>
    <p>Binary functions</p>
    <p>f : {0,1}8  {0,1}8  {0,1}8</p>
    <p>Relational operators</p>
    <p>Equality (e.g., =)</p>
    <p>Inequality (e.g., &lt;)</p>
  </div>
  <div class="page">
    <p>Raspbian Rootkit  Raspbian Linux</p>
    <p>task_structs hold information about a process</p>
    <p>pointer to cred structure (e.g., UID of process)</p>
    <p>pointer to next structure</p>
    <p>init_task task 1 task n</p>
  </div>
  <div class="page">
    <p>DMA Performance</p>
    <p>Gadget Control Blocks</p>
    <p>inc/dec 4</p>
    <p>inc/dec word 4 + 2 trampolines</p>
    <p>dispatch 33</p>
    <p>right/left 26</p>
    <p>left/right condition 2</p>
    <p>I/O 5</p>
  </div>
  <div class="page">
    <p>Total DMA Transfers</p>
    <p>Program Control Blocks</p>
    <p>Interpreter 148</p>
    <p>Hello World 36356</p>
    <p>Rootkit 20</p>
  </div>
  <div class="page">
    <p>DMA Malware  DMA Malware</p>
    <p>Code running on auxilary processor/external device with DMA access</p>
    <p>Example: firewire, thunderbolt, NIC, GPU</p>
    <p>Main difference of our work:</p>
    <p>DMA gadgets run entirely on DMA engine</p>
    <p>No additional processors</p>
  </div>
  <div class="page">
    <p>Countermeasures</p>
    <p>Input/out memory management (Duflot, 2011)</p>
    <p>Peripheral firmware load-time integrity (Stewin, 2012)</p>
    <p>Anomaly detection systems (Duflot, 2011)</p>
    <p>Bus agent runtime monitors (Stewin, 2013)</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Everything non-trivial ends up being Turing-complete</p>
    <p>Parsing file formats</p>
    <p>Page Tables</p>
    <p>DMA Engine is yet another example</p>
    <p>We need to consider specialized hardware</p>
  </div>
  <div class="page">
    <p>Questions?</p>
  </div>
</Presentation>
