<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Tight Bounds for Delay-Sensitive Aggregation</p>
    <p>Yvonne Anne Oswald</p>
    <p>Stefan Schmid</p>
    <p>Roger Wattenhofer</p>
    <p>Distributed Computing</p>
    <p>Group</p>
    <p>LEA</p>
  </div>
  <div class="page">
    <p>Introduction</p>
    <p>Distributed Computing Trade-off:</p>
    <p>examples:  gossiping  data gathering  organization theory</p>
    <p>time complexity message complexityvs</p>
    <p>Dijkstra Prize 2008</p>
  </div>
  <div class="page">
    <p>Introduction</p>
    <p>Particularly in sensor networks  limited energy (battery): transmission/reception expensive  goal: be up-to-date without much delay</p>
    <p>time complexity message complexityvs</p>
    <p>Distributed Computing Trade-off:</p>
  </div>
  <div class="page">
    <p>Model</p>
    <p>communication network: rooted spanning tree</p>
    <p>root</p>
  </div>
  <div class="page">
    <p>Model</p>
    <p>communication network: rooted spanning tree  transmission cost c  nodes synchronized, time slotted  events occur at nodes (online, worst case)</p>
    <p>Goal: forward events to root</p>
    <p>Root</p>
    <p>, be fast and energy-efficient!</p>
  </div>
  <div class="page">
    <p>Model</p>
    <p>communication network: rooted spanning tree  transmission cost c  nodes synchronized, time slotted  events occur at nodes (online, worst case)</p>
    <p>Goal: forward events to root, be fast and energy-efficient!</p>
    <p>minimize (c # transmissions + delay cost)</p>
    <p>messages can be merged</p>
    <p>Root</p>
    <p>e.g.,1 per event per time slot</p>
    <p>until arrival at</p>
    <p>root =&gt; reduce # transmissions</p>
  </div>
  <div class="page">
    <p>Oblivious Algorithm</p>
    <p>DEFINITION: OBLIVIOUS ALGORITHM</p>
    <p>decision (transmit/wait) of node v depends on</p>
    <p># events currently at node v</p>
    <p>when events arrived at node v</p>
    <p>decision of node v does NOT depend on</p>
    <p>history (messages forwarded earlier)</p>
    <p>v s location in the aggregation network</p>
    <p>perfect for sensor nodes!</p>
    <p>Ive got a memory like a</p>
    <p>sieve and I dont know</p>
    <p>where I am..</p>
  </div>
  <div class="page">
    <p>Related Work and our Contributions</p>
    <p>Trees  O(min(c,h))  oblivious (min(c,h))</p>
    <p>Chains  O(min(c,h1/2))  oblivious (min(c, h1/2))</p>
    <p>WSN model</p>
    <p>log(e c(e))</p>
    <p>improvement  higher lower bound</p>
    <p>Link:  Dooly et al.[JACM01]: TCP,</p>
    <p>offline OPT online O(1)</p>
    <p>Karlin et al.[STOC01] online randomized e/(e</p>
    <p>Tree: Khanna et al.[ICALP02]  model: edge e -&gt; cost c(e)  distributed bounds</p>
    <p>O(h log(e c(e)) (h1/2)</p>
  </div>
  <div class="page">
    <p>Algorithm AGG ([DGS01],[KNR01])</p>
    <p>AGG: node v forwards msg m as soon as delay(m,t)  c</p>
    <p>Balance delay cost and total communication cost</p>
    <p>ski rental on trees</p>
    <p>Details</p>
    <p>m : message at v, containing |m| events</p>
    <p>delay(m,t) : delay associated with m at time t</p>
    <p>no transmission:</p>
    <p>delay(m,t+1) = delay (m,t) + |m|</p>
    <p>transmission:</p>
    <p>delay(m,t+1) = delay (m,t) + |m| c</p>
  </div>
  <div class="page">
    <p>cost = 17+9</p>
    <p>events</p>
    <p>v1 v2 t = 1 1 0</p>
    <p>t = 2 1 2</p>
    <p>delay at v1 v2 v3 t = 1 1 0 0</p>
    <p>t = 2 3 2 0</p>
    <p>t = 3 0 4 2</p>
    <p>t = 4 0 0 7</p>
    <p>t = 5 0 0 0V1 v2</p>
    <p>V3</p>
    <p>|m|=1 delay = 1</p>
    <p>|m| =2 delay = 3</p>
    <p>|m|=2 delay=2</p>
    <p>|m| =2 delay = 0 |m| =2</p>
    <p>delay = 2</p>
    <p>|m|=2 delay=4</p>
    <p>|m|=2 delay=1</p>
    <p>|m|=4 delay=7</p>
    <p>Example (4 nodes, 4 events, c=3)</p>
    <p>root</p>
  </div>
  <div class="page">
    <p>Related Work and our Contributions</p>
    <p>Trees  O(min(c,h))  oblivious (min(c,h))</p>
    <p>Chains  O(min(c,h1/2))  oblivious (min(c, h1/2))</p>
    <p>WSN model</p>
    <p>log(e c(e))</p>
    <p>improvement  higher lower bound</p>
    <p>Link:  Dooly et al.[JACM01]: TCP,</p>
    <p>offline OPT online O(1)</p>
    <p>Karlin et al.[STOC01] online randomized e/(e</p>
    <p>Tree: Khanna et al.[ICALP02]  model: edge e -&gt; cost c(e)  distributed bounds</p>
    <p>O(h log(e c(e)) (h1/2)</p>
  </div>
  <div class="page">
    <p>Lower Bound on Trees</p>
    <p>Thm: any oblivious deterministic online algorithm ALG has a competitive ratio of at least (min(c,h)) on the tree.</p>
    <p>root</p>
    <p>t=1 events at nodes v1..vn/2-1</p>
    <p>t=w messages leave vi</p>
    <p>t=w+1 messages at nodes vn/2..vn1</p>
    <p>ALG:</p>
    <p>cost 2 (c+w)h2</p>
  </div>
  <div class="page">
    <p>Lower Bound on Trees</p>
    <p>root</p>
    <p>ALG: cost 2 (c+w)h2</p>
    <p>OPT: cost 2 O(ch+h2)</p>
    <p>=&gt; ratio (min(c,h))</p>
    <p>Thm: any oblivious deterministic online algorithm ALG has a competitive ratio of at least (min(c,h)) on the tree.</p>
  </div>
  <div class="page">
    <p>Upper Bound on Chains</p>
    <p>root</p>
    <p>Thm: AGG has a competitive ratio of at most</p>
    <p>O(min(c,h1/2)) on chains.</p>
    <p>proof sketch  assume no messages merged: ratio O(h1/2)  include u merges at depth i:</p>
    <p>cost reduction AGG (uci) cost reduction OPT O(uci)</p>
    <p>generalize for many merges at any depth: ratio O(h1/2)  combine with result from trees: ratio O(min(c,h1/2)</p>
    <p>assume : #msgOPT = x h 1/2 #msgAGG, x 2 (1)</p>
    <p>=&gt; costAGG 2 O(x h 1/2 hc)</p>
    <p>find sequence keeping costopt minimal =&gt; msg size increases with t</p>
    <p>yet no merges for AGG =&gt; costOPT 2 (xhc)</p>
    <p>time difference ensures no merges</p>
    <p>before i =&gt; bound for reduction cost</p>
  </div>
  <div class="page">
    <p>Teaser on Value-Sensitive Aggregation</p>
    <p>What if urgency of delivery depends on value?</p>
    <p>root knows vr(t), value at leaf vl(t)</p>
    <p>cost := transmissions + t |vr(t) vl(t)|</p>
    <p>Results (2 nodes):  offline: dynamic programming O(#changes3)  online: competitive ratio 2 O(c/),</p>
    <p>where  smallest difference between values</p>
    <p>Online AGG: forward at (t+1) if</p>
    <p>last sent |vr(t) vl(t)|  c consider intervals</p>
    <p>between consecutive transmissions</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>event aggregation  Tree: O(min(c,h))</p>
    <p>oblivious (min(c,h))  Chain: O(min(c,h1/2))</p>
    <p>oblivious (min(c, h1/2))</p>
    <p>value-sensitive event aggregation  model  optimal algorithm for link O(# changes3)  online algorithm for link O(c/min.change)</p>
    <p>ski rental on trees</p>
  </div>
  <div class="page">
    <p>The End!</p>
    <p>Thank you!</p>
    <p>Questions? Comments?</p>
  </div>
</Presentation>
