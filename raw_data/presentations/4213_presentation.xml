<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Defragmenting DHT-based Distributed File Systems</p>
    <p>Jeffrey Pang, Srinivasan Seshan Carnegie Mellon University</p>
    <p>Phillip B. Gibbons, Michael Kaminsky Intel Research Pittsburgh</p>
    <p>Haifeng Yu National University of Singapore</p>
  </div>
  <div class="page">
    <p>Traditional DHTs</p>
    <p>Each node responsible for random key range</p>
    <p>Objects are assigned random keys</p>
  </div>
  <div class="page">
    <p>Defragmented DHT (D2)</p>
    <p>Related objects are assigned contiguous keys</p>
  </div>
  <div class="page">
    <p>Why Defragment DHTs?</p>
    <p>Traditional DHT D2</p>
    <p>objects in two tasks:</p>
    <p>Improves Task Locality</p>
    <p>Task Success Rate  Depend on fewer servers</p>
    <p>when accessing files</p>
    <p>Task Performance  Fewer DHT lookups</p>
    <p>when accessing files</p>
    <p>x</p>
    <p>Fail!</p>
    <p>x</p>
    <p>Fail!</p>
    <p>x Fail!</p>
    <p>x Success</p>
    <p>x</p>
    <p>Fail!</p>
    <p>x</p>
    <p>Success</p>
  </div>
  <div class="page">
    <p>Why Defragment DHTs?</p>
    <p>Traditional DHT D2</p>
    <p>objects in two tasks:</p>
    <p>Improves Task Locality</p>
    <p>Task Success Rate  Depend on fewer servers</p>
    <p>when accessing files</p>
    <p>Task Performance  Fewer DHT lookups</p>
    <p>when accessing files</p>
    <p>lookup</p>
  </div>
  <div class="page">
    <p>Why Defragment DHTs?</p>
    <p>Traditional DHT D2</p>
    <p>objects in two tasks:</p>
    <p>Improves Task Locality</p>
    <p>Task Success Rate  Depend on fewer servers</p>
    <p>when accessing files</p>
    <p>Task Performance  Fewer DHT lookups</p>
    <p>when accessing files</p>
    <p>lookup</p>
  </div>
  <div class="page">
    <p>D2 Contributions</p>
    <p>Simple, effective locality techniques</p>
    <p>Real defragmented DHT implementation</p>
    <p>Evaluation with real file system workloads</p>
    <p>Answers to three principle questions</p>
  </div>
  <div class="page">
    <p>Questions</p>
    <p>Can task locality be maintained simply?</p>
    <p>Does locality outweigh parallelism?</p>
    <p>Can load balance be maintained cheaply?</p>
  </div>
  <div class="page">
    <p>Questions</p>
    <p>Can task locality be maintained simply?</p>
    <p>Does locality outweigh parallelism?</p>
    <p>Can load balance be maintained cheaply?</p>
  </div>
  <div class="page">
    <p>Technique #1: Locality Preserving Keys</p>
    <p>Preserve locality in DHT placement  Assign related objects nearby keys</p>
    <p>Group related objects  Leverage namespace locality</p>
    <p>Preserve in-order traversal of file system</p>
    <p>E.G., files in same directory are related</p>
  </div>
  <div class="page">
    <p>Assigning Object Keys</p>
    <p>Bill</p>
    <p>Bob</p>
    <p>Docs1</p>
    <p>userid path encode blockid6</p>
    <p>bid</p>
    <p>bid</p>
    <p>bid</p>
  </div>
  <div class="page">
    <p>Practical Concern</p>
    <p>Key distribution is not uniformly random   Object placement is no longer uniform   Load imbalance if node IDs are random</p>
    <p>Solution:  Dynamically balance load</p>
    <p>(Discussed later in talk)</p>
  </div>
  <div class="page">
    <p>DHT Nodes Accessed</p>
  </div>
  <div class="page">
    <p>Task Availability Evaluation</p>
    <p>How much does D2 reduce task failures?  Task = sequence of related accesses</p>
    <p>E.G., ls -l accesses directory and files metadata  Estimate tasks:</p>
    <p>Evaluated infrastructure DHT scenario:  Faultload: PlanetLab failure trace (247 nodes)  Workload: Harvard NFS trace</p>
    <p>Task</p>
    <p>&lt; 1sec&lt; 1sec</p>
    <p>ac ce</p>
    <p>ss</p>
    <p>time</p>
  </div>
  <div class="page">
    <p>Systems Compared</p>
    <p>Traditional-File</p>
    <p>(PAST)</p>
    <p>Traditional</p>
    <p>(CFS)</p>
    <p>D2</p>
  </div>
  <div class="page">
    <p>Task Unavailability</p>
    <p>What fraction of tasks fail?</p>
    <p>median</p>
  </div>
  <div class="page">
    <p>Questions</p>
    <p>Can task locality be maintained simply?</p>
    <p>Does locality outweigh parallelism?</p>
    <p>Can load balance be maintained cheaply?</p>
  </div>
  <div class="page">
    <p>Technique #2: Lookup Cache</p>
    <p>Task locality  objects on a few nodes  Cache lookup results to avoid future lookups</p>
    <p>Client-side lookup cache  Lookups give: IP Address  Key Range  If key in a cached Key Range, avoid lookup</p>
  </div>
  <div class="page">
    <p>Performance Evaluation</p>
    <p>How much faster are tasks in D2 than Traditional?</p>
    <p>Deploy real implementation on Emulab  Same infrastructure DHT scenario as before  Emulate world-wide network topology  All DHTs compared use lookup cache</p>
    <p>Task replay modes:  Sequential: accesses dependent on each other</p>
    <p>E.G., make  Parallel: accesses not dependent on each other</p>
    <p>E.G., cat *</p>
  </div>
  <div class="page">
    <p>Performance Speedup</p>
    <p>How much faster is D2 vs. Traditional?</p>
  </div>
  <div class="page">
    <p>Performance Speedup</p>
    <p>How much faster is D2 vs. Traditional-File?</p>
  </div>
  <div class="page">
    <p>Questions</p>
    <p>Can task locality be maintained simply?</p>
    <p>Does locality outweigh parallelism?</p>
    <p>Can load balance be maintained cheaply?</p>
  </div>
  <div class="page">
    <p>Technique #3: Dynamic Load Balancing</p>
    <p>Why?  Object placement is no longer uniform</p>
    <p>Random node IDs  imbalance</p>
    <p>Simple dynamic load balancing  Karger [IPTPS04], Mercury [SIGCOMM04]</p>
    <p>Fully distributed</p>
    <p>Converges to load balance quickly</p>
  </div>
  <div class="page">
    <p>Dynamic Load Balancing</p>
  </div>
  <div class="page">
    <p>Load Balance</p>
    <p>How balanced is storage load over time?</p>
  </div>
  <div class="page">
    <p>Load Balancing Overhead</p>
    <p>How much data is transferred to balance load?</p>
    <p>MB/nodeWrites Load Balance</p>
    <p>Writes</p>
    <p>Load Balance  50%  cost of 1 or 2 more replicas</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>Can task locality be maintained simply?  Yes: Namespace locality enough to improve</p>
    <p>availability by an order of magnitude</p>
    <p>Does locality outweigh parallelism?  Yes: Real workloads observe 30-100% speedup</p>
    <p>Can load balance be maintained cheaply?  Maintain Balance? Yes: better than traditional</p>
    <p>Cheaply? Maybe: 1 byte for every 2 bytes written</p>
    <p>Defragmentation: a useful DHT technique</p>
  </div>
  <div class="page">
    <p>Thank You.</p>
  </div>
  <div class="page">
    <p>Backup Slides</p>
    <p>Or, more graphs than anyone cares for</p>
  </div>
  <div class="page">
    <p>Related Work</p>
    <p>MOAT [Yu et al., NSDI 06]  Only studied availability  No mechanism for load balance  No evaluation of file systems</p>
    <p>SkipNet [Harvey et al., USITS 03]  Provides administrative locality  Cant do both locality + global load balance</p>
    <p>Mercury [Bharambe et al., SIGCOMM 04]  Dynamic load balancing for range queries  D2 uses Mercury as the routing substrate  D2 has independent storage layer, load balancing</p>
    <p>optimizations (see paper)</p>
  </div>
  <div class="page">
    <p>Encoding Object Names</p>
    <p>SHA-1 Hash</p>
    <p>SHA1(data)data</p>
    <p>Traditional key encoding:</p>
    <p>Example</p>
    <p>intel.pkey /home/bob/Mail/INBOX 0000 . 0001 . 0004 . 0003 . 0000 .</p>
    <p>b-tree-like 8kb blocks</p>
    <p>hash(data)</p>
    <p>SHA1(pkey) dir1 block no.dir2 ... file ver. hash</p>
    <p>D2 key encoding:</p>
    <p>depth: 12 width: 65k petabytes</p>
  </div>
  <div class="page">
    <p>DHT Nodes Accessed</p>
    <p>How many nodes does a user access?</p>
  </div>
  <div class="page">
    <p>Task Unavailability</p>
    <p>What fraction of tasks fail?</p>
    <p>Application Tasks Human Tasks</p>
  </div>
  <div class="page">
    <p>Task Unavailability</p>
    <p>How many nodes are accessed per task?</p>
  </div>
  <div class="page">
    <p>Task Unavailability (Per-User)</p>
    <p>What fraction of each users tasks fail?</p>
  </div>
  <div class="page">
    <p>DHT Lookup Messages</p>
    <p>How many lookup messages are used?</p>
  </div>
  <div class="page">
    <p>Lookup Cache Utilization</p>
    <p>How many lookups miss the cache?</p>
  </div>
  <div class="page">
    <p>Performance Speedup (Per-Task)</p>
    <p>How much faster is D2 vs. Traditional?</p>
  </div>
  <div class="page">
    <p>Performance Speedup (Per-User)</p>
    <p>How much faster is D2 vs. Traditional?</p>
  </div>
  <div class="page">
    <p>Load Balance (Webcache)</p>
    <p>How balanced is storage load over time?</p>
  </div>
  <div class="page">
    <p>Load Balancing Overhead</p>
    <p>How much data is transferred to balance load?</p>
  </div>
</Presentation>
