<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Effectively Prefetching Remote Memory</p>
    <p>with Leap Hasan Al Maruf and Mosharaf Chowdhury</p>
  </div>
  <div class="page">
    <p>Memory-Intensive Applications</p>
  </div>
  <div class="page">
    <p>Perform Great!</p>
    <p>TPC-C on VoltDB</p>
    <p>T PS</p>
    <p>( T</p>
    <p>ho us</p>
    <p>an ds</p>
    <p>)</p>
    <p>In-Memory Working Set</p>
  </div>
  <div class="page">
    <p>Perform Great Until Memory Runs Out</p>
    <p>TPC-C on VoltDB</p>
    <p>T PS</p>
    <p>( T</p>
    <p>ho us</p>
    <p>an ds</p>
    <p>)</p>
    <p>In-Memory Working Set</p>
  </div>
  <div class="page">
    <p>Perform Great Until Memory Runs Out</p>
    <p>TPC-C on VoltDB</p>
    <p>T PS</p>
    <p>( T</p>
    <p>ho us</p>
    <p>an ds</p>
    <p>)</p>
    <p>In-Memory Working Set</p>
    <p>PageRank on PowerGraph</p>
    <p>C o m</p>
    <p>pl et</p>
    <p>io n</p>
    <p>T im</p>
    <p>e (s</p>
    <p>)</p>
    <p>In-Memory Working Set</p>
  </div>
  <div class="page">
    <p>PageRank on PowerGraph</p>
    <p>TPC-C on VoltDB</p>
    <p>T PS</p>
    <p>( T</p>
    <p>ho us</p>
    <p>an ds</p>
    <p>)</p>
    <p>In-Memory Working Set</p>
    <p>C o m</p>
    <p>pl et</p>
    <p>io n</p>
    <p>T im</p>
    <p>e (s</p>
    <p>)</p>
    <p>In-Memory Working Set</p>
  </div>
  <div class="page">
    <p>Between a Rock and a Hard Place</p>
    <p>Overallocation Leads to underutilization</p>
    <p>Underallocation Leads to severe performance loss</p>
    <p>VS.</p>
  </div>
  <div class="page">
    <p>Machine 1 Machine 2 Machine 3 Machine N</p>
    <p>Used Memory Free Memory</p>
    <p>Disaggregated Memory</p>
    <p>Memory Disaggregation</p>
    <p>Remote Memory 8</p>
  </div>
  <div class="page">
    <p>Remote Memory Access</p>
    <p>User-space Applications</p>
    <p>Memory Disaggregation Frameworks</p>
    <p>Remote Memory</p>
    <p>Infiniswap (NSDI17)</p>
    <p>Remote memory paging</p>
    <p>Remote Regions (ATC18)</p>
    <p>Remote file abstraction</p>
    <p>LegoOS (OSDI18)</p>
    <p>Disaggregated OS</p>
  </div>
  <div class="page">
    <p>Remote Memory Access</p>
    <p>User-space Applications</p>
    <p>Memory Disaggregation Frameworks</p>
    <p>Remote Memory</p>
    <p>Infiniswap (NSDI17)</p>
    <p>Remote memory paging</p>
    <p>Remote Regions (ATC18)</p>
    <p>Remote file abstraction</p>
    <p>LegoOS (OSDI18)</p>
    <p>Disaggregated OS</p>
    <p>[1] P. X. Gao et al. Network requirements for resource disaggregation OSDI16.</p>
    <p>Latency requirement for preferable performance[1]</p>
    <p>Existing frameworks cant achieve!</p>
  </div>
  <div class="page">
    <p>Remote Memory Access</p>
    <p>User-space Applications</p>
    <p>Memory Disaggregation Frameworks</p>
    <p>Remote Memory</p>
    <p>Infiniswap (NSDI17)</p>
    <p>Remote memory paging</p>
    <p>Remote Regions (ATC18)</p>
    <p>Remote file abstraction</p>
    <p>LegoOS (OSDI18)</p>
    <p>Disaggregated OS</p>
    <p>variation in network latency</p>
    <p>[1] P. X. Gao et al. Network requirements for resource disaggregation OSDI16.</p>
    <p>data path overhead Latency requirement for</p>
    <p>preferable performance[1]</p>
    <p>Existing frameworks cant achieve!</p>
  </div>
  <div class="page">
    <p>Life of a Page</p>
    <p>I/O Scheduler Request QueueRequest queue processing:</p>
    <p>Insertion, Merging, Sorting, Staging and Dispatch</p>
    <p>Dispatch Queue</p>
    <p>Device Mapping Layer</p>
    <p>Generic Block Layer bio 10.04 us</p>
    <p>Remote Memory RDMA: 4.3 us</p>
    <p>Cache Miss</p>
    <p>Hit</p>
    <p>User Space</p>
    <p>Kernel SpaceMemory Management</p>
    <p>Unit (MMU)</p>
    <p>Process 1 Process 2 Process N</p>
    <p>Page Fault MMU</p>
    <p>Page Cache</p>
    <p>Block Device Driver</p>
  </div>
  <div class="page">
    <p>Where Does the Time Go? Page Request</p>
    <p>In Page Cache?</p>
    <p>Read Request?</p>
    <p>Yes</p>
    <p>Update Page Table &amp; End I/O</p>
    <p>Yes</p>
    <p>Fast Path</p>
  </div>
  <div class="page">
    <p>Where Does the Time Go? Page Request</p>
    <p>In Page Cache?</p>
    <p>Allocate Cache for Page</p>
    <p>Read Request?</p>
    <p>No</p>
    <p>Yes</p>
    <p>Update Page Table &amp; End I/OPrepare for I/O</p>
    <p>YesNo</p>
    <p>Queue and Batch Requests</p>
    <p>Execute I/O</p>
    <p>RDMA: 4.3 s</p>
    <p>Fast Path</p>
    <p>Slow Path</p>
  </div>
  <div class="page">
    <p>Design Goal</p>
  </div>
  <div class="page">
    <p>Online remote memory prefetcherLeap</p>
    <p>Identifies memory access patterns to prefetch pages in a  fast,  cache-efficient, and  resilient manner</p>
    <p>without modifying any  applications, or  hardware</p>
  </div>
  <div class="page">
    <p>Life of a Page User Space</p>
    <p>Kernel Space</p>
    <p>Device Mapping Layer</p>
    <p>Block Device Driver</p>
    <p>Generic Block Layer</p>
    <p>I/O Scheduler Request QueueRequest queue processing:</p>
    <p>Insertion, Merging, Sorting, Staging and Dispatch</p>
    <p>bio</p>
    <p>Remote Memory</p>
    <p>Dispatch Queue</p>
    <p>Memory Management Unit (MMU)</p>
    <p>Process 1 Process 2 Process N</p>
    <p>Page Fault</p>
    <p>RDMA: 4.3 us</p>
    <p>Cache Miss</p>
    <p>Cache Hit</p>
    <p>MMU Page Cache</p>
  </div>
  <div class="page">
    <p>Life of a Page w/ Leap User Space</p>
    <p>Kernel Space</p>
    <p>Remote Memory</p>
    <p>Memory Management Unit (MMU)</p>
    <p>Process 1 Process 2 Process N</p>
    <p>Page Fault</p>
    <p>RDMA: 4.3 us</p>
    <p>Cache Miss</p>
    <p>Cache Hit</p>
    <p>MMU Page Cache</p>
  </div>
  <div class="page">
    <p>Life of a Page w/ Leap User Space</p>
    <p>Kernel Space</p>
    <p>Remote Memory</p>
    <p>Memory Management Unit (MMU)</p>
    <p>Process 1 Process 2 Process N</p>
    <p>Page Fault</p>
    <p>RDMA: 4.3 us</p>
    <p>Cache Miss</p>
    <p>Cache Hit</p>
    <p>MMU Page Cache</p>
    <p>Process Specific Page Access Tracker</p>
    <p>Leap</p>
    <p>Trend Detection</p>
    <p>Prefetch Candidate Generation</p>
    <p>Prefetcher</p>
    <p>Eager Cache Eviction</p>
  </div>
  <div class="page">
    <p>Prefetching in Linux</p>
    <p>Reads ahead pages sequentially</p>
    <p>Based only on the last page access</p>
    <p>Does not distinguish between processes</p>
    <p>Cannot detect thread-level access irregularities</p>
    <p>too aggressive on seq: cache pollution</p>
    <p>too conservative off seq: brings nothing</p>
  </div>
  <div class="page">
    <p>Prefetching Techniques</p>
    <p>Approach Low Computational Complexity</p>
    <p>Low Memory Overhead</p>
    <p>Unmodified Application</p>
    <p>HW/SW Independence</p>
    <p>Temporal Locality</p>
    <p>Spatial Locality</p>
    <p>Low Cache Pollution</p>
    <p>Next N-Line Yes Yes Yes Yes No Yes No</p>
    <p>Stride Yes Yes Yes Yes No Yes No</p>
    <p>Instruction Prefetch No No No No Yes Yes No</p>
    <p>Linux Read-Ahead Yes Yes Yes Yes Yes Yes No</p>
    <p>Leap Yes Yes Yes Yes Yes Yes Yes</p>
  </div>
  <div class="page">
    <p>Prefetching Techniques</p>
    <p>Approach Low Computational Complexity</p>
    <p>Low Memory Overhead</p>
    <p>Unmodified Application</p>
    <p>HW/SW Independence</p>
    <p>Temporal Locality</p>
    <p>Spatial Locality</p>
    <p>Low Cache Pollution</p>
    <p>Next N-Line Yes Yes Yes Yes No Yes No</p>
    <p>Stride Yes Yes Yes Yes No Yes No</p>
    <p>Instruction Prefetch No No No No Yes Yes No</p>
    <p>Linux Read-Ahead Yes Yes Yes Yes Yes Yes No</p>
    <p>Leap Yes Yes Yes Yes Yes Yes Yes</p>
  </div>
  <div class="page">
    <p>Prefetching Techniques</p>
    <p>Approach Low Computational Complexity</p>
    <p>Low Memory Overhead</p>
    <p>Unmodified Application</p>
    <p>HW/SW Independence</p>
    <p>Temporal Locality</p>
    <p>Spatial Locality</p>
    <p>Low Cache Pollution</p>
    <p>Next N-Line Yes Yes Yes Yes No Yes No</p>
    <p>Stride Yes Yes Yes Yes No Yes No</p>
    <p>Instruction Prefetch No No No No Yes Yes No</p>
    <p>Linux Read-Ahead Yes Yes Yes Yes Yes Yes No</p>
    <p>Leap Yes Yes Yes Yes Yes Yes Yes</p>
  </div>
  <div class="page">
    <p>Prefetching Techniques</p>
    <p>Approach Low Computational Complexity</p>
    <p>Low Memory Overhead</p>
    <p>Unmodified Application</p>
    <p>HW/SW Independence</p>
    <p>Temporal Locality</p>
    <p>Spatial Locality</p>
    <p>Low Cache Pollution</p>
    <p>Next N-Line Yes Yes Yes Yes No Yes No</p>
    <p>Stride Yes Yes Yes Yes No Yes No</p>
    <p>Instruction Prefetch No No No No Yes Yes No</p>
    <p>Linux Read-Ahead Yes Yes Yes Yes Yes Yes No</p>
    <p>Leap Yes Yes Yes Yes Yes Yes Yes</p>
  </div>
  <div class="page">
    <p>Prefetching Techniques</p>
    <p>Approach Low Computational Complexity</p>
    <p>Low Memory Overhead</p>
    <p>Unmodified Application</p>
    <p>HW/SW Independence</p>
    <p>Temporal Locality</p>
    <p>Spatial Locality</p>
    <p>Low Cache Pollution</p>
    <p>Next N-Line Yes Yes Yes Yes No Yes No</p>
    <p>Stride Yes Yes Yes Yes No Yes No</p>
    <p>Instruction Prefetch No No No No Yes Yes No</p>
    <p>Linux Read-Ahead Yes Yes Yes Yes Yes Yes No</p>
    <p>Leap Yes Yes Yes Yes Yes Yes Yes</p>
  </div>
  <div class="page">
    <p>Leap Prefetcher Linear-time and constant memory space</p>
    <p>Two main components:  Trend detection  Prefetch window size detection</p>
    <p>Get Prefetch Window Size</p>
    <p>Window Size = 0?</p>
    <p>Read only the requested page</p>
    <p>Trend Found?</p>
    <p>Prefetch with Current Trend</p>
    <p>Prefetch with Previous Trend</p>
    <p>YesNo</p>
    <p>No Yes</p>
  </div>
  <div class="page">
    <p>Trend Detection Start with a smaller window of Access History</p>
    <p>Majority found?</p>
    <p>Doubles the window size</p>
    <p>No Yes</p>
    <p>Run Boyer-Moore on the window</p>
    <p>Return Majority maj</p>
    <p>Max. window</p>
    <p>size?</p>
    <p>Yes No trend found</p>
    <p>No</p>
    <p>Flexible to short term irregularity</p>
    <p>Identifies the majority element in access history</p>
    <p>Regular trends can be found within recent accesses</p>
  </div>
  <div class="page">
    <p>Trend Detection Example</p>
    <p>t4 t5 t6 t7</p>
    <p>t0 t1 t2 t3</p>
    <p>t0 t1 t2 t3</p>
    <p>t8 t9 t10 t11</p>
    <p>t12 t13 t14 t15</p>
    <p>t8 t1 t2 t3</p>
    <p>t4 t5 t6 t7</p>
    <p>(a) at time t3 (b) at time t7</p>
    <p>(c) at time t8 (d) at time t15</p>
    <p>trend of -3 trend of -3 disappears, no major new trend</p>
    <p>trend of +2 detected trend of +2 detected among irregularities</p>
  </div>
  <div class="page">
    <p>Prefetch Window Size Detection</p>
    <p>Cache hit indicates prefetch utilization</p>
    <p>High cache hit: increase prefetch window aggressively</p>
    <p>No cache hit</p>
    <p>Gradual slow down helps during sudden changes</p>
    <p>trend availability: increase prefetch window gradually</p>
    <p>no trend: decrease prefetch window gradually</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Memory Disaggregation Frameworks</p>
    <p>Deploy and evaluate over 56 Gbps InfiniBand network</p>
    <p>Disaggregated VMM: Infiniswap</p>
    <p>Disaggregated VFS: Remote Regions</p>
  </div>
  <div class="page">
    <p>Lowers Remote Page Access Latency by Sequential Access</p>
    <p>C D</p>
    <p>F</p>
    <p>Latency (us)</p>
    <p>Infiniswap</p>
    <p>Infiniswap+Leap</p>
    <p>Stride Access</p>
    <p>C D</p>
    <p>F</p>
    <p>Latency (us)</p>
  </div>
  <div class="page">
    <p>Efficient Pattern Detection</p>
    <p>Detects 29.70% more sequential accesses</p>
    <p>Detects most of the irregularity</p>
  </div>
  <div class="page">
    <p>Efficient Pattern Detection</p>
    <p>Detects 29.70% more sequential accesses</p>
    <p>Detects most of the irregularity</p>
    <p>During irregularities, doing nothing helps the most</p>
  </div>
  <div class="page">
    <p>Perform Great Even After Memory Runs Out</p>
    <p>TPC-C on VoltDB</p>
    <p>T PS</p>
    <p>( T</p>
    <p>ho us</p>
    <p>an ds</p>
    <p>)</p>
    <p>In-Memory Working Set</p>
    <p>Infiniswap</p>
    <p>T PS</p>
    <p>( T</p>
    <p>ho us</p>
    <p>an ds</p>
    <p>)</p>
    <p>In-Memory Working Set</p>
    <p>TPC-C on VoltDB</p>
    <p>Infiniswap + Leap</p>
    <p>T PS</p>
    <p>( T</p>
    <p>ho us</p>
    <p>an ds</p>
    <p>)</p>
    <p>In-Memory Working Set</p>
    <p>Disk</p>
    <p>TPC-C on VoltDB</p>
  </div>
  <div class="page">
    <p>Perform Great Even After Memory Runs Out</p>
    <p>TPC-C on VoltDB</p>
    <p>T PS</p>
    <p>( T</p>
    <p>ho us</p>
    <p>an ds</p>
    <p>)</p>
    <p>In-Memory Working Set</p>
    <p>Infiniswap</p>
    <p>T PS</p>
    <p>( T</p>
    <p>ho us</p>
    <p>an ds</p>
    <p>)</p>
    <p>In-Memory Working Set</p>
    <p>TPC-C on VoltDB</p>
    <p>Infiniswap + Leap</p>
    <p>T PS</p>
    <p>( T</p>
    <p>ho us</p>
    <p>an ds</p>
    <p>)</p>
    <p>In-Memory Working Set</p>
    <p>Disk</p>
    <p>TPC-C on VoltDB</p>
  </div>
  <div class="page">
    <p>Benefit Breakdown of Leaps Components</p>
    <p>Data path optimizations: single-s latency till 95th percentile</p>
    <p>Prefetcher: sub-s latency till 85th percentile</p>
    <p>Eager cache eviction: improves the 99th percentile latency by 22%</p>
  </div>
  <div class="page">
    <p>Future Work 1. Thread-specific prefetching for multiple concurrent streams  memory is managed at the process level  this requires significant changes in virtual memory subsystem</p>
  </div>
  <div class="page">
    <p>Leap</p>
    <p>Lightweight and efficient data path for remote memory source code available at https://github.com/SymbioticLab/leap</p>
    <p>Online prefetcher with a leaner data path and eager cache eviction policy to improve  cache hit,  remote I/O latency, and  application-level performance</p>
    <p>without modifying any  application, or  hardware</p>
  </div>
  <div class="page">
    <p>Thank You! source code available at https://github.com/SymbioticLab/leap</p>
  </div>
</Presentation>
