<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>FileMR: Rethinking RDMA Networking for Scalable Persistent Memory</p>
    <p>Jian Yang (UC San Diego)</p>
    <p>Joseph Izraelevitz (University of Colorado, Boulder)</p>
    <p>Steven Swanson (UC San Diego)</p>
  </div>
  <div class="page">
    <p>Cache</p>
    <p>Register</p>
    <p>CPU</p>
    <p>DRAMMemory</p>
    <p>CacheCache</p>
    <p>Persistent memory and RDMA</p>
    <p>Volatile</p>
    <p>SSD</p>
    <p>HDDStorage Persistence</p>
    <p>iSCSI</p>
    <p>Block</p>
    <p>Access</p>
    <p>Byte</p>
    <p>Addressable</p>
    <p>PM  PCM, STT-RAM, 3DXPoint</p>
    <p>Co-locate with DRAM</p>
    <p>Higher density than DRAM</p>
    <p>Byte-addressable: load/store</p>
    <p>Fast, fine-grained persistence</p>
    <p>Persistent Memory (PM, aka. SCM, NVMM)</p>
    <p>CPU</p>
    <p>DRAM PM</p>
    <p>&gt;1ms</p>
    <p>&gt;100us</p>
    <p>Read Latency</p>
    <p>RNIC RNIC</p>
    <p>App App</p>
    <p>PM</p>
    <p>DMA access across nodes</p>
    <p>One-sided (read/write)</p>
    <p>Fast, fine-grained remote access</p>
    <p>Remote Direct Memory Access (RDMA)</p>
  </div>
  <div class="page">
    <p>RDMA on PM != Fast, fine-grained persistent remote access</p>
    <p>Throughput (kiops) of random 4KB RDMA writes on PM (Optane)</p>
    <p>Other issues: allocations, protection, naming</p>
    <p>Persistent memory and RDMA</p>
    <p>Region Size</p>
    <p>-60%</p>
  </div>
  <div class="page">
    <p>PM: memory management</p>
    <p>OS</p>
    <p>Userspace</p>
    <p>Application</p>
    <p>PM-Aware File System</p>
    <p>Hardware</p>
    <p>Persistent Memory</p>
    <p>POSIX IO</p>
    <p>fd=open(f) buf=mmap(fd)</p>
    <p>mapped files</p>
    <p>Memory mapped IO</p>
    <p>*buf=42</p>
    <p>Physical Address</p>
    <p>File Extents</p>
    <p>(KVirt Address)</p>
    <p>C o</p>
    <p>n tr</p>
    <p>o l</p>
    <p>P a</p>
    <p>th</p>
    <p>D a</p>
    <p>ta P</p>
    <p>a th</p>
    <p>UserVirt Address</p>
    <p>Direct Access (DAX)</p>
    <p>GC, Compaction</p>
  </div>
  <div class="page">
    <p>RDMA memory management</p>
    <p>OS</p>
    <p>Userspace</p>
    <p>Application</p>
    <p>RDMA Driver</p>
    <p>Memory Region</p>
    <p>mr=ibv_reg_mr() //mr.rkey=42</p>
    <p>C o</p>
    <p>n tr</p>
    <p>o l</p>
    <p>P a</p>
    <p>th</p>
    <p>OS</p>
    <p>Userspace</p>
    <p>Application</p>
    <p>Work Request</p>
    <p>wr.rdma.raddr=0 wr.rdma.rkey=42 ibv_post_send()Da</p>
    <p>ta P</p>
    <p>a th</p>
    <p>Physical Address</p>
    <p>Page Table</p>
    <p>UserVirt Address</p>
    <p>RNIC Driver</p>
    <p>Hardware</p>
    <p>PM</p>
    <p>Hardware</p>
    <p>RNICRNIC</p>
  </div>
  <div class="page">
    <p>RDMA Driver</p>
    <p>KernelFile System</p>
    <p>Application</p>
    <p>Hardware</p>
    <p>RDMA on PM</p>
    <p>inode</p>
    <p>RNIC</p>
    <p>fd = open(/mnt/file) p = mmap(, fd, ) # RDMA connection setup ibv_reg_mr(pd, p, ) # incoming writes from a remote node &lt; ibv_post_send(, wr{RDMA_WRITE, addr,})</p>
    <p>Virtual address space</p>
    <p>Extents</p>
    <p>Mem Translate Table</p>
    <p>Populating mapping in TBs</p>
    <p>Preventing VM layout update</p>
    <p>Performance degradation</p>
    <p>File</p>
    <p>RDMA_Write</p>
    <p>Virtual memory related issues:  Linux VM subsystem was not designed for the</p>
    <p>usage of PM, optimizations require remapping</p>
    <p>RDMA is not designed for large, long-term memory</p>
    <p>Issues discussed in paper:  Security, naming, isolation, connection</p>
    <p>management, replication, persistence, multicast</p>
  </div>
  <div class="page">
    <p>Alternative approaches to VM issues on RDMA</p>
    <p>Indirection:  Existing interfaces (e.g. POSIX IO) as indirection</p>
    <p>E.g., Octopus, Orion, RDMA key-value stores</p>
    <p>No userspace direct access ATC 17 FAST19</p>
    <p>Holistic Design:</p>
    <p>Co-design PM management software and RDMA</p>
    <p>networking</p>
    <p>VM mitigation: PUD(1GB) pages, data structure</p>
    <p>E.g., PASTE, Mojim, Hotpot, LITE, librpmem</p>
    <p>Require dedicate APIs and application redesign</p>
    <p>NSDI 18 ASPLOS 15 SOCC 15 SOSP 17</p>
    <p>NIC Pagefault:</p>
    <p>Using on-demand paging (IO page faults)</p>
    <p>MR registration is O(1)</p>
    <p>#IOPF is expensive (300+s on mlx5)</p>
    <p>Physical address on wire:</p>
    <p>No translation needed</p>
    <p>MR registration is O(1), no translation</p>
    <p>Security issues</p>
  </div>
  <div class="page">
    <p>Conflicting roles of metadata management</p>
    <p>PM-aware file system RDMA</p>
    <p>Allocation</p>
    <p>Permission</p>
    <p>Naming</p>
    <p>Append</p>
    <p>Defragmentation</p>
    <p>Persistent</p>
    <p>Translation</p>
    <p>Remote Access</p>
    <p>Translation</p>
    <p>Overlapping</p>
    <p>Conflicting</p>
  </div>
  <div class="page">
    <p>FileMR: File-based memory region</p>
    <p>File-based memory region</p>
    <p>New type of memory region: FileMR</p>
    <p>File system/PM Library maintains the</p>
    <p>metadata of the MR</p>
    <p>File system initiates translation update</p>
    <p>Decoupled with VM (file offset)</p>
    <p>FS-managed protection / naming</p>
    <p>KernelFile System</p>
    <p>Application</p>
    <p>Hardware</p>
    <p>File System</p>
    <p>File</p>
    <p>PM</p>
    <p>RNIC Driver</p>
    <p>FileMR</p>
    <p>open()</p>
    <p>bind()</p>
    <p>write()</p>
    <p>Extents</p>
    <p>Write WR</p>
    <p>fd, fkey, offset, data</p>
    <p>RNIC</p>
    <p>RDMA Library</p>
    <p>reg/unreg/invalidate/</p>
    <p>fd = open(/mnt/file) # RDMA connection setup mr=ibv_reg_mr(pd, NULL, FILEMR) ioctl(fd, FILEMR_BIND, mr.key, ) # incoming writes from a remote node &lt; ibv_post_send(,wr{RDMA_WRITE,offset,})</p>
    <p>Data Sturcture</p>
    <p>Component</p>
    <p>Legend:</p>
    <p>CtlPath</p>
    <p>DataPath</p>
  </div>
  <div class="page">
    <p>Range-based memory translation table</p>
    <p>RDMA Append</p>
    <p>APPEND verb (write at MR.size)</p>
    <p>Pre-provision / IO pagefault</p>
    <p>File system is loosely defined</p>
    <p>Implements functions and callbacks</p>
    <p>Case study: libpmemlog  libpmem manages extents in userspace  Bypass kernel-space file system (devdax)</p>
    <p>Hardware</p>
    <p>libpmemlog-server</p>
    <p>PM</p>
    <p>ibv_reg_mr()</p>
    <p>libpmemlog-client</p>
    <p>RDMA Context</p>
    <p>PM</p>
    <p>Data Sturcture</p>
    <p>Component</p>
    <p>Legend:</p>
    <p>CtlPath</p>
    <p>DataPath</p>
    <p>RDMA Context</p>
    <p>Extents MR</p>
    <p>MR.size</p>
    <p>wr.op = WR_APPEND wr.size = 0 // hole ibv_post_send(wr)</p>
  </div>
  <div class="page">
    <p>Range-based memory translation table</p>
    <p>RangeMTT: Range-based address translation</p>
    <p>Based on the design of range-based TLB[1]</p>
    <p>Reverse translation between file offset to physical address</p>
    <p>4KB page-aligned, 32-bit addressing (16PB)</p>
    <p>B-tree structure</p>
    <p>[1] Karakostas et al, Redundant Memory Mappings for Fast Access to Large Memories (ISCA 2015)</p>
    <p>Range Table Entry</p>
    <p>Base Size</p>
    <p>PW</p>
    <p>RTTRoot RTE RTE RTE RTE</p>
    <p>RTE RTE RTE RTE</p>
  </div>
  <div class="page">
    <p>FileMR : Implementation</p>
    <p>Implement FileMR and RangeMTT on SoftRoCE (rxe)  SoftRoCE is a software RNIC based on UDP</p>
    <p>Minor change throughout RDMA stack</p>
    <p>Added Filesystem RangeMTT API</p>
    <p>Using ioctl for bind API</p>
    <p>RNIC cache emulation  Emulate MTT/RangeMTT cache on rxe  4096-entry 4-way set associative</p>
    <p>Limitations:</p>
    <p>No application-level end-to-end performance</p>
    <p>Higher latency than real RNICs</p>
    <p>RDMA Verbs</p>
    <p>Applicatio n</p>
    <p>RangeMTT API</p>
    <p>Bind/Destroy Init/Update Invalidate</p>
    <p>RDMA Lib</p>
    <p>File System</p>
    <p>RNIC Driver</p>
    <p>RNIC</p>
    <p>RDMA Verbs</p>
    <p>Verbs</p>
    <p>OS</p>
    <p>Userspace</p>
    <p>Lookup Miss</p>
    <p>Fault Callbacks</p>
    <p>FileMR_Bind</p>
    <p>RDMA Core</p>
    <p>ioctl</p>
    <p>RangeMTT_Fault</p>
  </div>
  <div class="page">
    <p>FileMR: Evaluation</p>
    <p>MR Registration time</p>
    <p>The registration time of FileMR is much less</p>
    <p>(&lt; 1%) than MR on file or shmem</p>
    <p>Log appending latency breakdown</p>
    <p>FileMR adds 53% overhead over libpmemlog  HERD-RPC adds 192% overhead</p>
  </div>
  <div class="page">
    <p>RangeMTT: Evaluation</p>
    <p>FileMR+RangeMTT vs. Registered MR+MTT</p>
    <p>Registration time saving (1.8% ~ 86.2%)</p>
    <p># MTT entries saving (0.03% ~ 97%) are less significant on fragmented files.</p>
    <p>FileMR has higher cache hit rate for all workloads. (Hot files stay in cache)</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Persistent memory provides byte-addressable memory accesses with</p>
    <p>persistency.</p>
    <p>RDMA networking enables fine-grained remote memory accesses.</p>
    <p>PM and RDMA should allow user to access remote PM directly, however:</p>
    <p>PM and RDMA handle address translation in incompatible ways</p>
    <p>Both PM and RDMA provide allocation, naming and permission checks</p>
    <p>Existing user MR registration and address translation cause overhead</p>
    <p>Existing user MR prevents PM from updating file layouts</p>
    <p>FileMR: using files as RDMA memory regions</p>
    <p>RangeMTT: leveraging file contiguity and translate file extents</p>
  </div>
  <div class="page">
    <p>PM: memory management</p>
    <p>OS</p>
    <p>Userspace</p>
    <p>Application</p>
    <p>PM-Aware File System</p>
    <p>Hardware</p>
    <p>Persistent Memory</p>
    <p>POSIX IO</p>
    <p>fd=open(f) buf=mmap(fd)</p>
    <p>mapped files</p>
    <p>Memory mapped IO</p>
    <p>*buf=42</p>
    <p>C o</p>
    <p>n tr</p>
    <p>o l</p>
    <p>P a</p>
    <p>th</p>
    <p>D a</p>
    <p>ta P</p>
    <p>a th</p>
    <p>Allocation:</p>
    <p>File system managed</p>
    <p>Deferred: append</p>
    <p>Translation:</p>
    <p>Contiguity: file extents</p>
    <p>Dynamic: defragmentation (GC),</p>
    <p>transparent huge pages</p>
    <p>Protection:</p>
    <p>File system managed (ACL)</p>
    <p>Naming:</p>
    <p>Persistent hierarchical files</p>
    <p>System-wide</p>
  </div>
  <div class="page">
    <p>RDMA memory management</p>
    <p>mr=ibv_reg_mr() //mr.rkey=42</p>
    <p>Allocation:</p>
    <p>Application managed (RDMA context)</p>
    <p>Translation:</p>
    <p>Part of virtual address translation</p>
    <p>Static: pinned pages</p>
    <p>Protection:</p>
    <p>Protection domain (PD)</p>
    <p>Naming:</p>
    <p>Implicit naming</p>
    <p>PD-wide</p>
    <p>mr=ibv_reg_mr() //mr.rkey=42</p>
    <p>OS</p>
    <p>Userspace</p>
    <p>Application</p>
    <p>RDMA Driver</p>
    <p>Memory Region</p>
    <p>mr=ibv_reg_mr() //mr.rkey=42</p>
    <p>C o</p>
    <p>n tr</p>
    <p>o l</p>
    <p>P a</p>
    <p>th</p>
    <p>OS</p>
    <p>Userspace</p>
    <p>Application</p>
    <p>Work Request</p>
    <p>wr.rdma.raddr=0 wr.rdma.rkey=42 ibv_post_send()Da</p>
    <p>ta P</p>
    <p>a th</p>
    <p>RNIC Driver</p>
    <p>Hardware</p>
    <p>PM</p>
    <p>Hardware</p>
    <p>RNICRNIC</p>
  </div>
</Presentation>
