<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>HotStorage 2020 14 July 2020</p>
    <p>IN SUPPORT OF WORKLOAD-AWARE STREAMING STATE MANAGEMENT</p>
    <p>John Liagouris liagos@bu.edu</p>
    <p>Vasiliki Kalavri vkalavri@bu.edu</p>
  </div>
  <div class="page">
    <p>STREAMING DATAFLOWS</p>
    <p>Logical Dataflow</p>
    <p>Worker 1</p>
    <p>Worker 2</p>
    <p>Physical Dataflow</p>
    <p>auctions source</p>
    <p>bids source</p>
    <p>join rolling average</p>
    <p>sink</p>
    <p>Nexmark Streaming Benchmark Suite: https://beam.apache.org/documentation/sdks/java/testing/nexmark/</p>
    <p>Nexmark Q4: Rolling average of winning bids</p>
  </div>
  <div class="page">
    <p>LARGER-THAN-MEMORY STATE MANAGEMENT</p>
    <p>put/get</p>
    <p>put/get</p>
    <p>&lt;k,v&gt;</p>
    <p>&lt;k,v&gt;</p>
    <p>Worker 1</p>
    <p>Worker 2</p>
    <p>Large operator state is backed by key-value stores</p>
  </div>
  <div class="page">
    <p>LARGER-THAN-MEMORY STATE MANAGEMENT</p>
    <p>put/get</p>
    <p>put/get</p>
    <p>&lt;k,v&gt;</p>
    <p>&lt;k,v&gt;</p>
    <p>Worker 1</p>
    <p>Worker 2</p>
    <p>Large operator state is backed by key-value stores</p>
    <p>LSM-based write-optimized store with efficient range scans</p>
  </div>
  <div class="page">
    <p>STATE REQUIREMENTS VARY ACROSS OPERATORS</p>
    <p>Average: Read-Modify-Write a single value</p>
    <p>Join: Write-heavy and can potentially accumulate large state</p>
    <p>auctions source</p>
    <p>bids source</p>
    <p>join rolling average</p>
    <p>sink</p>
    <p>Dataflow operators may have different state access patterns and memory requirements</p>
    <p>Nexmark Q4: Rolling average of winning bids</p>
  </div>
  <div class="page">
    <p>CURRENT PRACTICE: MONOLITHIC STATE MANAGEMENT</p>
    <p>All key-value stores in the dataflow are globally-configured</p>
    <p>One key-value store (RocksDB) per stateful operator instance</p>
    <p>&lt;k,v&gt;</p>
    <p>&lt;k,v&gt;</p>
    <p>Worker 1</p>
    <p>Worker 2</p>
    <p>&lt;k,v&gt;</p>
    <p>&lt;k,v&gt;</p>
  </div>
  <div class="page">
    <p>FLAWS OF MONOLITHIC STATE MANAGEMENT</p>
    <p>&lt;k,v&gt;</p>
    <p>&lt;k,v&gt;</p>
    <p>Worker 1</p>
    <p>Worker 2</p>
    <p>&lt;k,v&gt;</p>
    <p>&lt;k,v&gt; - Oblivious store configuration</p>
    <p>- Unnecessary data marshaling</p>
    <p>- Unnecessary key-value store features</p>
  </div>
  <div class="page">
    <p>UNNECESSARY KEY-VALUE STORE FEATURES</p>
    <p>- State partitioning</p>
    <p>- State scoping</p>
    <p>- Concurrent access to state</p>
    <p>- State checkpointing</p>
    <p>All these operations are handled by modern stream processors outside the state store</p>
    <p>Stream processors guarantee single-thread access to state</p>
  </div>
  <div class="page">
    <p>WORKLOAD-AWARE STREAMING STATE MANAGEMENT</p>
    <p>Multiple state stores of different types and configurations according to the requirements of the stateful operators</p>
    <p>Worker 1</p>
    <p>Worker 2</p>
    <p>put/get</p>
    <p>store:u64</p>
    <p>rmw_u64</p>
    <p>store:&lt;u64,auction&gt;</p>
    <p>store:&lt;u64,bid&gt;</p>
    <p>Streaming operators are instantiated once and are long-running: their access patterns and state sizes are largely known in advance</p>
  </div>
  <div class="page">
    <p>A FLEXIBLE TESTBED FOR STREAMING STATE MANAGEMENT - Implemented in Rust</p>
    <p>- Based on Timely Dataflow stream processor</p>
    <p>- Supports two key-value stores - RocksDB - FASTER</p>
    <p>- Supports different window evaluation strategies</p>
    <p>Timely Dataflow: https://github.com/TimelyDataflow/timely-dataflow</p>
    <p>FASTER: Hybrid log with efficient lookups and in-place updates</p>
    <p>FASTER: https://github.com/microsoft/FASTER</p>
    <p>Testbed: https://github.com/jliagouris/wassm</p>
    <p>RocksDB: LSM-based with efficient range scans</p>
  </div>
  <div class="page">
    <p>EXPERIMENTAL RESULTS</p>
  </div>
  <div class="page">
    <p>EVALUATION GOALS</p>
  </div>
  <div class="page">
    <p>- Query 1: Count the number of records in a</p>
    <p>- Input rate: 10K records/s</p>
    <p>- Single thread execution</p>
    <p>- Report end-to-end latency (ms) per record</p>
    <p>EFFECT OF DATA LAYOUT ON WINDOW EVALUATION COUNT-30s-1s</p>
  </div>
  <div class="page">
    <p>p90 p99 p99.9</p>
    <p>Complementary CDF: Each point (x,y) indicates that y% of the latency measurements are at least x ms</p>
    <p>Lower is better</p>
    <p>EFFECT OF DATA LAYOUT ON WINDOW EVALUATION COUNT-30s-1s</p>
  </div>
  <div class="page">
    <p>RocksDB PUT/GET: On record, retrieve window contents, apply new record, and put the updated contents back to the store</p>
    <p>EFFECT OF DATA LAYOUT ON WINDOW EVALUATION COUNT-30s-1s</p>
    <p>Lower is better 15</p>
  </div>
  <div class="page">
    <p>RocksDB MERGE: On record, put record to the store using MERGE. The record is applied to the window contents lazily on trigger</p>
    <p>EFFECT OF DATA LAYOUT ON WINDOW EVALUATION COUNT-30s-1s</p>
    <p>Lower is better 16</p>
  </div>
  <div class="page">
    <p>EFFECT OF DATA LAYOUT ON WINDOW EVALUATION COUNT-30s-1s</p>
    <p>Lower is better 17</p>
  </div>
  <div class="page">
    <p>- Query 2: Rank records in a 30s tumbling window</p>
    <p>- Input rate: 1K records/s</p>
    <p>- Single thread execution</p>
    <p>- Report end-to-end latency (ms) per record</p>
    <p>EFFECT OF DATA LAYOUT ON WINDOW EVALUATION RANK-30s-30s</p>
    <p>Lower is better 18</p>
  </div>
  <div class="page">
    <p>RocksDB MERGE performs best due to lazy evaluation</p>
    <p>EFFECT OF DATA LAYOUT ON WINDOW EVALUATION RANK-30s-30s</p>
    <p>Lower is better 19</p>
  </div>
  <div class="page">
    <p>THERE IS NO CLEAR WINNER</p>
    <p>COUNT-30s-1s</p>
    <p>RANK-30s-30s</p>
  </div>
  <div class="page">
    <p>MONOLITHIC VS WORKLOAD-WARE STATE MANAGEMENT</p>
    <p>- Experiments with six Nexmark* queries</p>
    <p>- Different stateful operators (joins, window aggregations, custom aggregations)</p>
    <p>- Simple workload-aware configuration of data types and available memory size</p>
    <p>*Nexmark Streaming Benchmark Suite: https://beam.apache.org/documentation/sdks/java/testing/nexmark/ 21</p>
  </div>
  <div class="page">
    <p>MONOLITHIC VS WORKLOAD-AWARE STATE MANAGEMENT</p>
    <p>Q4 custom join and</p>
    <p>rolling aggregate - State store used: FASTER</p>
    <p>- Input rate: 10K records/s</p>
    <p>- SIngle thread execution</p>
    <p>- Monolithic memory configuration: 8GB</p>
    <p>- Workload-aware memory configuration: 6GB (bids), 1.5GB (auctions), 512MB (average)</p>
    <p>- Report end-to-end latency (ms) per record</p>
  </div>
  <div class="page">
    <p>MONOLITHIC VS WORKLOAD-AWARE STATE MANAGEMENT</p>
    <p>Q4 custom join and</p>
    <p>rolling aggregate</p>
    <p>- State store used: FASTER</p>
    <p>- Input rate: 10K records/s</p>
    <p>- SIngle thread execution</p>
    <p>- Monolithic memory configuration: 8GB</p>
    <p>- Workload-aware memory configuration: 6GB (bids), 1.5GB (auctions), 512MB (average)</p>
    <p>- Report end-to-end latency (ms) per record 23</p>
  </div>
  <div class="page">
    <p>MONOLITHIC VS WORKLOAD-AWARE STATE MANAGEMENT</p>
    <p>Q4 custom join and</p>
    <p>rolling aggregate</p>
    <p>- State store used: FASTER</p>
    <p>- Input rate: 10K records/s</p>
    <p>- SIngle thread execution</p>
    <p>- Monolithic memory configuration: 8GB</p>
    <p>- Workload-aware memory configuration: 6GB (bids), 1.5GB (auctions), 512MB (average)</p>
    <p>- Report end-to-end latency (ms) per record 24</p>
  </div>
  <div class="page">
    <p>MONOLITHIC VS WORKLOAD-AWARE STATE MANAGEMENT</p>
    <p>Q4 custom join and</p>
    <p>rolling aggregate</p>
    <p>- State store used: FASTER</p>
    <p>- Input rate: 10K records/s</p>
    <p>- SIngle thread execution</p>
    <p>- Monolithic memory configuration: 8GB</p>
    <p>- Workload-aware memory configuration: 6GB (bids), 1.5GB (auctions), 512MB (average)</p>
    <p>- Report end-to-end latency (ms) per record 25</p>
  </div>
  <div class="page">
    <p>MONOLITHIC VS WORKLOAD-AWARE STATE MANAGEMENT</p>
    <p>Q5 sliding window</p>
    <p>aggregation</p>
    <p>- State store used: FASTER</p>
    <p>- Input rate: 10K records/s</p>
    <p>- Single thread execution</p>
    <p>- Monolithic memory configuration: 8GB</p>
    <p>- Workload-aware memory configuration: 6GB (additions), 1GB (deletions), 512MB (accumulations), 512MB (hot items)</p>
    <p>- Report end-to-end latency (ms) per record 26</p>
  </div>
  <div class="page">
    <p>MONOLITHIC VS WORKLOAD-AWARE STATE MANAGEMENT</p>
    <p>Q5 sliding window</p>
    <p>aggregation</p>
    <p>- State store used: FASTER</p>
    <p>- Input rate: 10K records/s</p>
    <p>- Single thread execution</p>
    <p>- Monolithic memory configuration: 8GB</p>
    <p>- Workload-aware memory configuration: 6GB (additions), 1GB (deletions), 512MB (accumulations), 512MB (hot items)</p>
    <p>- Report end-to-end latency (ms) per record 27</p>
  </div>
  <div class="page">
    <p>Q4 latency vs throughput with a single thread Q7</p>
    <p>latency with varying the number of threads</p>
    <p>MONOLITHIC VS WORKLOAD-AWARE STATE MANAGEMENT</p>
  </div>
  <div class="page">
    <p>Q4 latency vs throughput with a single thread Q7</p>
    <p>latency with varying the number of threads</p>
    <p>MONOLITHIC VS WORKLOAD-AWARE STATE MANAGEMENT</p>
  </div>
  <div class="page">
    <p>Q4 latency vs throughput with a single thread Q7</p>
    <p>latency with varying the number of threads</p>
    <p>FASTER (monolithic) and RocksDB (monolithic) do not keep up with 2M records/s</p>
    <p>MONOLITHIC VS WORKLOAD-AWARE STATE MANAGEMENT</p>
  </div>
  <div class="page">
    <p>Q4 latency vs throughput with a single thread Q7</p>
    <p>latency with varying the number of threads</p>
    <p>benefits persist in multiworker dataflows</p>
    <p>MONOLITHIC VS WORKLOAD-AWARE STATE MANAGEMENT</p>
  </div>
  <div class="page">
    <p>OPEN QUESTIONS</p>
    <p>One store fits all or many?</p>
    <p>Do we need new streaming benchmarks?</p>
    <p>What are the desirable store features to support advanced state operations (e.g. state migration, etc.)?</p>
    <p>How can we learn streaming state characteristics?</p>
  </div>
  <div class="page">
    <p>SUMMARY Workload-aware streaming state management</p>
    <p>https://github.com/jliagouris/wassmTestbed:</p>
    <p>- We need to revisit current monolithic approaches</p>
    <p>- State store layout affects query performance significantly</p>
    <p>- Workload-aware state management achieves up to 14X speedup and 2X higher throughput in Nexmark queries</p>
    <p>Worker 1</p>
    <p>Worker 2</p>
    <p>put/get</p>
    <p>store:u64</p>
    <p>rmw_u64</p>
    <p>store:&lt;u64,auction&gt;</p>
    <p>store:&lt;u64,bid&gt;</p>
    <p>John Liagouris liagos@bu.edu</p>
    <p>Vasiliki Kalavri vkalavri@bu.edu 33</p>
  </div>
</Presentation>
