<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Mahimahi: Accurate Record-and-Replay for HTTP</p>
    <p>Ravi Netravali*, Anirudh Sivaraman*, Somak Das*, Ameesh Goyal*, Keith Winstein, James Mickens, and Hari Balakrishnan*</p>
    <p>*MIT CSAIL, Stanford University, Harvard University</p>
  </div>
  <div class="page">
    <p>HTTP is Everywhere</p>
    <p>IniNally developed for web browsing (browsers)</p>
    <p>Instant messaging Video streaming Mobile applica7ons</p>
  </div>
  <div class="page">
    <p>HTTP Client Apps updated frequently</p>
    <p>Mobile apps updated monthly</p>
    <p>HTTP Performance MaTers</p>
    <p>New Mul7plexing Protocols: HTTP/2.0, SPDY, QUIC</p>
    <p>Browsers built every 6 weeks</p>
    <p>New Conges7on Control: TCP Fast Open, IW10, PRECONNECT</p>
    <p>Modifica7ons to HTTP: Pipelining, Persistent ConnecNons</p>
  </div>
  <div class="page">
    <p>Problem Difficult to evaluate changes in controlled seangs</p>
    <p>Googles web-page-replay</p>
    <p>Teleriks Fiddler</p>
    <p>Test with Live Users</p>
    <p>Shortcomings</p>
    <p>Not accurate  No isolaNon</p>
    <p>Record-and-Replay Tools</p>
    <p>Not scalable  Difficult in early development  Hard to understand why</p>
    <p>Current Approaches</p>
    <p>browser1</p>
    <p>browser2</p>
    <p>HTTP Proxy</p>
  </div>
  <div class="page">
    <p>Mahimahi: Accurate Record-and- Replay for HTTP</p>
    <p>MulN-server emulaNon</p>
    <p>Accuracy</p>
    <p>Isola7on Use private network namespaces</p>
    <p>Composability Structure components as UNIX shells</p>
  </div>
  <div class="page">
    <p>Rest of This Talk</p>
    <p>Mahimahi  Design  Goals</p>
    <p>Case Studies  EvaluaNng Web mulNplexing protocols</p>
    <p>SPDY 1.15-4.93x worse than OpNmal  Improving Web performance with Cumulus</p>
    <p>Cumulus outperforms SPDY by 1.07-3.60x</p>
  </div>
  <div class="page">
    <p>Design Record and Replay</p>
    <p>RecordShell ReplayShell</p>
    <p>Network EmulaNon</p>
    <p>DelayShell</p>
    <p>LinkShell</p>
    <p>LossShell</p>
    <p>private network namespace</p>
    <p>Browser</p>
    <p>Ferry can implement arbitrary policies to handle packets:  Record traffic  Serve recorded content  Delay packets</p>
    <p>Ferry</p>
    <p>ingress-1 egress-1</p>
    <p>ingress-n egress-n</p>
  </div>
  <div class="page">
    <p>ReplayShell Replay recorded traffic locally</p>
    <p>private network namespace</p>
    <p>Browser ingress-1 egress-1</p>
    <p>ingress-n egress-n</p>
    <p>Apache Server</p>
    <p>Apache Server</p>
    <p>Apache Server</p>
    <p>Mirror server side of app locally  Preserve recorded server distribuNon</p>
    <p>Transparent</p>
  </div>
  <div class="page">
    <p>DelayShell/LinkShell</p>
    <p>DelayShell (min RTT)  Release packets aker specified delay</p>
    <p>LinkShell (link rates)</p>
    <p>Release packets based on traces</p>
    <p>Live graphing of network usage/ queuing delay</p>
    <p>Emulate fixed propagaNon delay or fixed/variable-rate links</p>
    <p>private network namespace</p>
    <p>Browser ingress-1 egress-1</p>
    <p>ingress-n egress-n</p>
    <p>Internet</p>
    <p>Uplink Queue</p>
    <p>Downlink Queue</p>
  </div>
  <div class="page">
    <p>Accuracy</p>
    <p>ReplayShell correctly emulates mulN-server apps</p>
    <p>ReplayShell, mulN-server: 12.4% web-page-replay: 36.7%</p>
    <p>More accurate measurements</p>
    <p>C u</p>
    <p>m u</p>
    <p>la tiv</p>
    <p>e P</p>
    <p>ro p</p>
    <p>o rt</p>
    <p>io n</p>
    <p>Absolute Value of Relative Percent Error</p>
    <p>ReplayShell, multi-server web-page-replay</p>
  </div>
  <div class="page">
    <p>IsolaNon</p>
    <p>C u</p>
    <p>m u</p>
    <p>la tiv</p>
    <p>e P</p>
    <p>ro p o</p>
    <p>rt io</p>
    <p>n</p>
    <p>Relative Percent Error</p>
    <p>DelayShell 0 ms LinkShell 1000 Mbits/s</p>
    <p>User Computer</p>
    <p>DelayShell 50 ms</p>
    <p>Browser 1</p>
    <p>Browser 3</p>
    <p>Each shell creates a new network namespace</p>
    <p>RTT = X milliseconds</p>
    <p>Mul7ple instances in parallel Low overhead</p>
    <p>DelayShell: 0.33% LinkShell: 0.31%</p>
    <p>DelayShell 10 ms</p>
    <p>Browser 2 X + 10 ms</p>
  </div>
  <div class="page">
    <p>Composability Each tool is structured as a UNIX shell</p>
    <p>Unmodified apps can run within each shell</p>
    <p>Shells can be arbitrarily nested within one another</p>
  </div>
  <div class="page">
    <p>Case Studies</p>
    <p>EvaluaNng web mulNplexing protocols  SPDY</p>
    <p>MulNplexed streams  Header compression  Server push</p>
    <p>QUIC  MulNplexing without head of line blocking  0-1 round trips to establish secure connecNon (uses UDP)</p>
    <p>Reducing page load Nmes with Cumulus</p>
  </div>
  <div class="page">
    <p>MulNplexing Protocol Setup  HTTP  default Apache servers</p>
    <p>minimumRTT + (siteSize/linkRate) + browserTime</p>
    <p>Time between first client request and first byte of response</p>
    <p>Time to transfer all bytes for web page over link with rate linkRate</p>
    <p>Time for browser to process all responses and render page</p>
    <p>SPDY  Apache servers + mod_spdy module  QUIC  replace Apache with QUIC test servers</p>
    <p>OpNmal</p>
  </div>
  <div class="page">
    <p>EvaluaNng MulNplexing Protocols</p>
    <p>MulNplexing protocols are subopNmal  SubopNmality increases as RTT increases</p>
    <p>C u</p>
    <p>m u</p>
    <p>la tiv</p>
    <p>e P</p>
    <p>ro p</p>
    <p>o rt</p>
    <p>io n</p>
    <p>Page Load Time (s)</p>
    <p>Optimal SPDY</p>
    <p>QUIC-toy HTTP/1.1</p>
    <p>SPDY: 2.39x Optimal</p>
    <p>C u</p>
    <p>m u</p>
    <p>la tiv</p>
    <p>e P</p>
    <p>ro p</p>
    <p>o rt</p>
    <p>io n</p>
    <p>Page Load Time (s)</p>
    <p>Optimal SPDY</p>
    <p>QUIC-toy HTTP/1.1</p>
    <p>SPDY: 4.93x Optimal</p>
    <p>C u</p>
    <p>m u</p>
    <p>la tiv</p>
    <p>e P</p>
    <p>ro p</p>
    <p>o rt</p>
    <p>io n</p>
    <p>Page Load Time (s)</p>
    <p>Optimal SPDY</p>
    <p>QUIC-toy HTTP/1.1</p>
    <p>SPDY: 1.15x Optimal</p>
  </div>
  <div class="page">
    <p>Understanding SubopNmality</p>
    <p>HTTP R equest</p>
    <p>HTTP R espons</p>
    <p>e</p>
    <p>Long-delay Link</p>
    <p>Web Servers</p>
    <p>Client Browser</p>
    <p>HTTP requests become serialized  link not fully u7lized</p>
  </div>
  <div class="page">
    <p>Cumulus</p>
    <p>Long-delay Link</p>
    <p>Web Servers</p>
    <p>Remote Proxy</p>
    <p>Bulk Response</p>
    <p>HTTP Request</p>
    <p>Short-delay Link</p>
    <p>Client Browser</p>
    <p>Local Proxy</p>
    <p>Reduces the effec7ve RTT</p>
    <p>Headless browser running on well- provisioned server</p>
    <p>Transparent HTTP caching proxy running on users machine</p>
    <p>Implemented Using RecordShell</p>
  </div>
  <div class="page">
    <p>EvaluaNng Cumulus</p>
    <p>Performance stays close to OpNmal as RTTs increase  Cumulus incurs only one</p>
    <p>RTT on the long-delay link (reduces effecNve RTT)</p>
    <p>R a tio</p>
    <p>w ith</p>
    <p>O p tim</p>
    <p>a l</p>
    <p>Minimum RTT (ms)</p>
    <p>Cumulus SPDY</p>
    <p>QUIC-toy HTTP/1.1</p>
  </div>
  <div class="page">
    <p>Other Uses</p>
    <p>EvaluaNng mobile apps over wireless networks  Shuo Deng</p>
    <p>EmulaNng mobile mulN-homing (MPTCP)</p>
    <p>Shuo Deng</p>
    <p>Replaying streamed video  Devasia Manuel, Victor Vasiliev, Saunders Hayes</p>
    <p>Measuring speed index</p>
  </div>
  <div class="page">
    <p>Conclusion  Mahimahi records HTTP traffic and replays it over emulated networks</p>
    <p>Composability- UNIX shells</p>
    <p>Accuracy- mulN-server emulaNon</p>
    <p>Case studies using Mahimahi</p>
    <p>hOp://mahimahi.mit.edu mahimahi@mit.edu</p>
    <p>Isola7on- private network namespaces</p>
    <p>Web mulNplexing protocols are subopNmal</p>
    <p>Cumulus reduces effecNve RTT to lower page load Nmes</p>
  </div>
</Presentation>
