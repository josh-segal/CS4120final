<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>A Tale of Two Abstractions The Case for Object Space</p>
    <p>Daniel Bittman Peter Alvaro Darrell D. E. Long Ethan L. Miller</p>
    <p>HotStorage 19 2019-07-08</p>
    <p>UC Santa Cruz</p>
  </div>
  <div class="page">
    <p>Hardware Trends</p>
    <p>Byte-addressable Non-volatile Memory (actual implementations may vary)</p>
    <p>Multiplicity of Computing Devices and Heterogeneous Memory</p>
    <p>ARM</p>
  </div>
  <div class="page">
    <p>Hardwares Needs vs. Softwares Needs</p>
    <p>Consideration Hardware Software</p>
    <p>Latency</p>
    <p>In-memory Data Structures Data Lifetime and Persistent Data</p>
    <p>References Memory Heterogeneity and Data</p>
    <p>Movement</p>
  </div>
  <div class="page">
    <p>Hardwares Needs vs. Softwares Needs</p>
    <p>Consideration Hardware Software</p>
    <p>Latency   In-memory Data Structures</p>
    <p>Data Lifetime and Persistent Data References</p>
    <p>Memory Heterogeneity and Data Movement</p>
  </div>
  <div class="page">
    <p>Hardwares Needs vs. Softwares Needs</p>
    <p>Consideration Hardware Software</p>
    <p>Latency   In-memory Data Structures</p>
    <p>Data Lifetime and Persistent Data References</p>
    <p>Memory Heterogeneity and Data Movement</p>
    <p>Serialization Cost + Two different data</p>
    <p>representations</p>
  </div>
  <div class="page">
    <p>Hardwares Needs vs. Softwares Needs</p>
    <p>Consideration Hardware Software</p>
    <p>Latency   In-memory Data Structures X</p>
    <p>Data Lifetime and Persistent Data References</p>
    <p>Memory Heterogeneity and Data Movement</p>
  </div>
  <div class="page">
    <p>Hardwares Needs vs. Softwares Needs</p>
    <p>Consideration Hardware Software</p>
    <p>Latency   In-memory Data Structures X</p>
    <p>Data Lifetime and Persistent Data References X</p>
    <p>Memory Heterogeneity and Data Movement</p>
    <p>New challenges</p>
  </div>
  <div class="page">
    <p>Hardwares Needs vs. Softwares Needs</p>
    <p>Consideration Hardware Software</p>
    <p>Latency   In-memory Data Structures X</p>
    <p>Data Lifetime and Persistent Data References X</p>
    <p>Memory Heterogeneity and Data Movement</p>
  </div>
  <div class="page">
    <p>Heterogeneity and Autonomy</p>
    <p>NIC FPGA</p>
    <p>Access data A</p>
    <p>Access data A</p>
    <p>DRAM BNVM</p>
  </div>
  <div class="page">
    <p>Data Movement</p>
    <p>NIC FPGA</p>
    <p>Access data A</p>
    <p>Move data A</p>
    <p>DRAM BNVM</p>
  </div>
  <div class="page">
    <p>Hardwares Needs vs. Softwares Needs</p>
    <p>Consideration Hardware Software</p>
    <p>Latency   In-memory Data Structures X</p>
    <p>Data Lifetime and Persistent Data References X</p>
    <p>Memory Heterogeneity and Data Movement  X</p>
  </div>
  <div class="page">
    <p>In short...</p>
    <p>Software cares about long-lived data relationships,</p>
    <p>even across program runs.</p>
    <p>Hardware must provide consistent data access, even</p>
    <p>if it moves in memory.</p>
    <p>Virtual memory is the wrong abstraction. Virtual memory is fine.</p>
    <p>Software is easier to change than hardware</p>
  </div>
  <div class="page">
    <p>Two Abstractions</p>
    <p>Global Object Space</p>
    <p>Provides long-term data references (persistent pointers)</p>
    <p>Logical Object Space</p>
    <p>Abstracts physical location from hardware to enable correct access to objects</p>
    <p>Object-logical address</p>
    <p>Physical address</p>
    <p>MappingObject-global address</p>
    <p>Translation</p>
    <p>Common ground: organize data into objects.</p>
  </div>
  <div class="page">
    <p>Global Object Space: Abstract References</p>
    <p>Persistent data should be operated on directly and like memory</p>
    <p>A B</p>
    <p>C AB</p>
    <p>Process 1</p>
    <p>Process 2 A B</p>
    <p>Pointers may be cross-object: referring to data within a different object</p>
    <p>object-id offset</p>
  </div>
  <div class="page">
    <p>Global Object Space: Abstract References</p>
    <p>FOT entry offset</p>
    <p>FOT Data</p>
    <p>Object Layout</p>
    <p>object ID or Name Name Resolver flags</p>
    <p>Foreign Object Table</p>
    <p>object ID or Name Name Resolver flags</p>
  </div>
  <div class="page">
    <p>Global Object Space: Abstract References</p>
    <p>O</p>
    <p>FOT</p>
    <p>A</p>
    <p>FOT entry of &gt;0 means cross-objectpoints to a different object.</p>
  </div>
  <div class="page">
    <p>Logical Object Space: Abstract Location</p>
    <p>Object A Object B</p>
    <p>Object AObject B</p>
    <p>Object C</p>
    <p>X</p>
    <p>Object Global Space</p>
    <p>Object Logical Space</p>
    <p>Physical Memory</p>
    <p>DRAM BNVM</p>
    <p>Software sees global space of ALL objects.</p>
    <p>Hardware sees logical space of currently accessible, active objects</p>
    <p>...</p>
  </div>
  <div class="page">
    <p>Implications for Operating Systems</p>
    <p>Operating systems</p>
    <p>Operating systems</p>
    <p>Greatly simplified mapping management</p>
    <p>The kernel is out of the way</p>
  </div>
  <div class="page">
    <p>Implications for Operating Systems</p>
    <p>Object A Object B</p>
    <p>Object A rw</p>
    <p>Object B r-</p>
    <p>Object C</p>
    <p>X</p>
    <p>Object Global Space</p>
    <p>Object Logical Space</p>
    <p>Physical Memory</p>
    <p>DRAM BNVM</p>
    <p>Security Contexts!</p>
    <p>...</p>
  </div>
  <div class="page">
    <p>Implementation Details</p>
    <p>Virtual Address</p>
    <p>Object-logical address</p>
    <p>Physical address</p>
    <p>MMU EPT / IOMMUObject-global address</p>
    <p>ptr_lea</p>
    <p>EPT Drawbacks  Longer page walking  Additional switching</p>
    <p>Optimizations  vmfunc enables faster EPT switching  Virtualization exceptions allow guest to</p>
    <p>handle EPT violations</p>
  </div>
  <div class="page">
    <p>Where do we go from here?</p>
    <p>Were building a new OS, Twizzler, around BNVM and heterogeneous memory.</p>
    <p>Initial results show negligible impact from using VT-x hardware, and a very small overhead on translating persistent pointers.</p>
    <p>We plan to explore implications for distributed computing, distributed memory and storage, and resumability under power cycles.</p>
  </div>
  <div class="page">
    <p>Remember: Different Needs</p>
    <p>Consideration Hardware Software</p>
    <p>Latency   In-memory Data Structures X</p>
    <p>Data Lifetime and Persistent Data References X</p>
    <p>Memory Heterogeneity and Data Movement  X</p>
  </div>
  <div class="page">
    <p>Remember: Two Abstractions</p>
    <p>Global Object Space</p>
    <p>Provides long-term data references (persistent pointers)</p>
    <p>Logical Object Space</p>
    <p>Abstracts physical location from hardware to enable correct access to objects</p>
    <p>Object-logical address</p>
    <p>Physical address</p>
    <p>MappingObject-global address</p>
    <p>Translation</p>
    <p>Common ground: organize data into objects.</p>
  </div>
  <div class="page">
    <p>Remember: Implications</p>
    <p>Software should operate on in-memory data structures.</p>
    <p>Hardware should have abstracted view of memory.</p>
    <p>Were building Twizzler to explore the implications.</p>
  </div>
  <div class="page">
    <p>Thank You!</p>
    <p>Questions / Discussion</p>
    <p>Daniel Bittman dbittman@ucsc.edu</p>
    <p>@danielbittman</p>
    <p>Peter Alvaro palvaro@ucsc.edu</p>
    <p>Darrell D. E. Long darrell@ucsc.edu</p>
    <p>Ethan L. Miller elm@ucsc.edu</p>
  </div>
  <div class="page">
    <p>Implementation of Global Space</p>
    <p>O</p>
    <p>FOT</p>
    <p>A</p>
    <p>Address Space: 264 (248 on x86_64)</p>
    <p>? ?</p>
    <p>Mapping should be transparent to application.</p>
    <p>The virtual address space abstraction does not fit with the object:offset model</p>
    <p>LibOS handles address space management</p>
  </div>
  <div class="page">
    <p>Implementation of Global Object Space</p>
    <p>O A</p>
    <p>Os FOT 1  A</p>
    <p>int *tmp0 = lea(O, ptr0);</p>
    <p>int *tmp1 = lea(O, ptr1);</p>
    <p>x = *tmp1; y = *tmp0;</p>
    <p>T *lea(object, T *) Convert a persistent pointer into a virtual address</p>
  </div>
</Presentation>
