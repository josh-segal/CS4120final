<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Sep 13th, 2007</p>
    <p>S. Trujillo, G. Aldekoa, G. Sagardui 1</p>
    <p>Tracking the Evolution of Feature Oriented Product Lines</p>
    <p>S. Trujillo1, G. Aldekoa2, G. Sagardui2</p>
    <p>JISBD 2007 Zaragoza, Sep 13th, 2007</p>
    <p>S. Trujillo JISBD 2007 (@CEDI 2007)2</p>
    <p>This Talk</p>
    <p>Feature Oriented Programming (FOP)  is a paradigm for software product lines  programs are synthesized by composing features  a feature is an increment in program functionality</p>
    <p>Prior work analyzed evolution generically (e.g. the reasons, which content change, and its generic process)</p>
    <p>but did not track the evolution (e.g. milestones)</p>
    <p>What we attempt is to explore such evolution tracking  in the context of FOP  in terms of refinements (a sort of deltas in FOP)  we are aware that this is still a prospective work (with limitations)</p>
  </div>
  <div class="page">
    <p>Sep 13th, 2007</p>
    <p>S. Trujillo, G. Aldekoa, G. Sagardui 2</p>
    <p>S. Trujillo JISBD 2007 (@CEDI 2007)3</p>
    <p>The General Problem The aim of FOP is to ease product-line synthesis</p>
    <p>Product = F3  F2  F1  BASE (feature composition)</p>
    <p>Feature implementation evolves  because of new requirements, maintenance,</p>
    <p>The general problem  From Lehman/Parnas: code gradually deteriorates  Intuition: any way to prevent this?</p>
    <p>CBASE CF2 Impl. (Code) TIME 1</p>
    <p>Features BASE F1 F2 F3</p>
    <p>CBASE Impl. (Code) TIME 0</p>
    <p>CF1 CF2 CF3</p>
    <p>S. Trujillo JISBD 2007 (@CEDI 2007)4</p>
    <p>This Work</p>
    <p>Ideas:  Track the evolution of the product-line features</p>
    <p>when a feature evolves, a new feature is added,  (incidentally, this would impact on feature model)</p>
    <p>Track the evolution of features artifacts  when they are modified (as features encompass them)</p>
    <p>Benefit  Enable the control of code deterioration by  tracking evolution effectively at all feature granularity</p>
    <p>levels (e.g. features, artifacts, etc)</p>
  </div>
  <div class="page">
    <p>Sep 13th, 2007</p>
    <p>S. Trujillo, G. Aldekoa, G. Sagardui 3</p>
    <p>S. Trujillo JISBD 2007 (@CEDI 2007)5</p>
    <p>Outline</p>
    <p>Coming up   Feature Oriented Product Lines  Tracking the Evolution  Summary, Conclusions and Future Work</p>
    <p>Feature Oriented Product Lines</p>
    <p>Background</p>
  </div>
  <div class="page">
    <p>Sep 13th, 2007</p>
    <p>S. Trujillo, G. Aldekoa, G. Sagardui 4</p>
    <p>S. Trujillo JISBD 2007 (@CEDI 2007)7</p>
    <p>Software Product Lines</p>
    <p>Precursors: McIlroy 60s, Parnas 70s Definition</p>
    <p>A software product line is a set of software-intensive systems, sharing a common, managed set of features that satisfy the specific needs of a particular market segment or mission and that are developed from a common set of core assets in a prescribed way [Clements 2001]</p>
    <p>A Software Product Line  (1) Set of products SPL is a set of software-intensive systems..  (2) Features ..sharing a common, managed set of features..  (3) Domain ..that satisfy the specific needs of a particular market</p>
    <p>segment or mission..  (4) Core Assets ..are developed from a common set of core</p>
    <p>assets..  (5) Production Plan ..in a prescribed way.</p>
    <p>S. Trujillo JISBD 2007 (@CEDI 2007)8</p>
    <p>Feature Oriented Programming</p>
    <p>Feature Oriented Programming (FOP)  paradigm for creating software product lines  programs are synthesized by composing features</p>
    <p>features  are not only increments in program functionality  are building blocks of products  are realized by a set of artifacts</p>
    <p>products  are not only differentiated by their features  but are composed of features (i.e. different compositions of</p>
    <p>features yield different products)</p>
    <p>FOP is an entire approach with models and tools (a longstanding work by Don Batory)</p>
  </div>
  <div class="page">
    <p>Sep 13th, 2007</p>
    <p>S. Trujillo, G. Aldekoa, G. Sagardui 5</p>
    <p>Tracking the evolution</p>
    <p>Prospective ideas</p>
    <p>S. Trujillo JISBD 2007 (@CEDI 2007)10</p>
    <p>Feature evolution</p>
    <p>An SPL has a set of features  at time N: M = {f, h, i, j}</p>
    <p>Evolution means that some artifacts realizing a feature evolve</p>
    <p>at time N+1: M = {f, h, i', j, k} This means (delta from N to N+1)</p>
    <p>M = M01  M  M01 = f01  h01  i01  j01  k01</p>
    <p>where:  unmodified f = f01  f  unmodified h = h01  h  MODIFIED i = i01  i  MODIFIED j = j01  j  new feature k = k01</p>
    <p>But, each feature consists of artifacts, which also evolve . (next slide)</p>
    <p>NOTE: whenever M deteriorates, it is possible to return backwards</p>
    <p>f h i j</p>
    <p>f h i kj</p>
    <p>f h i j k</p>
  </div>
  <div class="page">
    <p>Sep 13th, 2007</p>
    <p>S. Trujillo, G. Aldekoa, G. Sagardui 6</p>
    <p>S. Trujillo JISBD 2007 (@CEDI 2007)11</p>
    <p>Artifact evolution I</p>
    <p>The evolution of each feature actually means that its artifacts evolve</p>
    <p>Time N</p>
    <p>Time N+1</p>
    <p>New code is inserted, modified, .</p>
    <p>X.java</p>
    <p>Code WAR</p>
    <p>A.xml</p>
    <p>fA.xml</p>
    <p>A.xml</p>
    <p>S. Trujillo JISBD 2007 (@CEDI 2007)12</p>
    <p>Artifact evolution II Our solution does not keep the new version, but alternatively</p>
    <p>differentiate from prior version:  file1 = diff (filen+1, filen)</p>
    <p>the result can be transformed into a refinement (XAK)  which can be composed using FOP mechanisms</p>
    <p>filen+1 = file1  filen</p>
    <p>Limitations with deletion:</p>
    <p>Deletion would be problematic since we know monotonicity would not hold</p>
  </div>
  <div class="page">
    <p>Sep 13th, 2007</p>
    <p>S. Trujillo, G. Aldekoa, G. Sagardui 7</p>
    <p>S. Trujillo JISBD 2007 (@CEDI 2007)13</p>
    <p>Feature model evolution</p>
    <p>As features evolve, the feature model could be affected  if a new feature is added  if a feature is modified, then new</p>
    <p>dependencies could appear (e.g. exclusion, inclusion, etc)</p>
    <p>even cardinality could change</p>
    <p>Summary &amp; Conclusions</p>
    <p>Perspective</p>
  </div>
  <div class="page">
    <p>Sep 13th, 2007</p>
    <p>S. Trujillo, G. Aldekoa, G. Sagardui 8</p>
    <p>S. Trujillo JISBD 2007 (@CEDI 2007)15</p>
    <p>Summary</p>
    <p>Current practice  FOP is a model for product lines  evolve to cater for new requirements</p>
    <p>Negative Consequences  if a product line deteriorates, there is no mechanism</p>
    <p>to return backwards or even control such deterioration This work</p>
    <p>Proposes an initial approach to track the evolution of features, artefacts and feature model</p>
    <p>introducing a prospective approach based on deltas Beyond</p>
    <p>Aplicar la misma idea, combinando FOP + MDD</p>
    <p>S. Trujillo JISBD 2007 (@CEDI 2007)16</p>
    <p>Beyond Feature Oriented Programming (FOP) Model Driven Development (MDD)</p>
    <p>is a paradigm for software creation using models  programs are the result of model transformations</p>
    <p>Feature Oriented Model Driven Development  FOMDD is a blend of FOP and MDD  products in a SPL are synthesized</p>
    <p>by composing features to create models  transforming models into executables</p>
    <p>FOMDD ideas further detailed at: Feature Oriented Model Driven Development: A Case Study for Portlets. ICSE 2007.</p>
    <p>FOMDD  Evolution  Model updates (related to Czarneckis round-trip)</p>
    <p>Go west young men!</p>
  </div>
  <div class="page">
    <p>Sep 13th, 2007</p>
    <p>S. Trujillo, G. Aldekoa, G. Sagardui 9</p>
    <p>Gracias!</p>
    <p>Tracking the Evolution of Feature Oriented Product Lines</p>
    <p>S. Trujillo1, G. Aldekoa2, G. Sagardui2</p>
    <p>JISBD 2007 Zaragoza, Sep 13, 2007</p>
    <p>S. Trujillo JISBD 2007 (@CEDI 2007)18</p>
    <p>product = set of features</p>
    <p>portlet_2 = commercials  en_US  base</p>
    <p>portlet_1 = es_ES  base</p>
    <p>Simple Portlet for a spanish company</p>
    <p>Using FOP, different products can be obtained</p>
    <p>Portlet for an american company with commercials</p>
  </div>
  <div class="page">
    <p>Sep 13th, 2007</p>
    <p>S. Trujillo, G. Aldekoa, G. Sagardui 10</p>
    <p>S. Trujillo JISBD 2007 (@CEDI 2007)19</p>
    <p>Product Synthesis</p>
    <p>Y.java W.jspLib</p>
    <p>=</p>
    <p>X.java</p>
    <p>Code WAR</p>
    <p>portlet_1</p>
    <p>Z.xml</p>
    <p>Y.java W.jsp</p>
    <p>Code WAR</p>
    <p>es_ES</p>
    <p>Lib X.java</p>
    <p>Code WAR</p>
    <p>base</p>
    <p>Z.xml</p>
    <p>Feature base (setting the ground)</p>
    <p>Product portlet_1 (outcome)</p>
    <p>Feature es_ES (refining)</p>
    <p>portlet_1 =  es_ES  base</p>
    <p>endo</p>
    <p>How is the code obtained in FOP?</p>
    <p>Does MDD offer a way to obtain such code?</p>
  </div>
</Presentation>
