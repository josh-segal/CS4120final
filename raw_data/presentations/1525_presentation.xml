<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>(SSWS2008)(SSWS2008)</p>
    <p>Benchmarking the Performance Benchmarking the Performance of Storage Systems that of Storage Systems that</p>
    <p>expose SPARQL Endpointsp Q p</p>
    <p>Christian Bizer Andreas Schultz</p>
    <p>Freie Universitt Berlin</p>
    <p>Christian Bizer: The Berlin SPARQL Benchmark (8/20/2008)Karlsruhe, Germany. October 27, 2008</p>
  </div>
  <div class="page">
    <p>Overview</p>
  </div>
  <div class="page">
    <p>Existing Benchmarks for Semantic Web Technologies</p>
    <p>Lehigh University Benchmark (LUBM)  benchmark for comparing the performance OWL reasoning engines</p>
    <p>does not test specific SPARQL features like OPTIONALS, UNION,</p>
    <p>does not employ parameterized queries, concurrent clients, warm-up</p>
    <p>DBpedia Benchmark  uses DBpedia as benchmark dataset</p>
    <p>5 queries that were relevant for DBpedia Mobile</p>
    <p>very specific queries, benchmark dataset not scalable</p>
    <p>SP2Bench SP Bench  from the databases group at Freiburg University, Germany</p>
    <p>uses an synthetic scalable version of the DBLP bibliography dataset uses an synthetic, scalable version of the DBLP bibliography dataset</p>
    <p>queries are designed for the comparison of different RDF store layouts</p>
    <p>not designed towards realistic workloads of parameterized queries</p>
    <p>not designed towards realistic workloads of parameterized queries, no concurrent clients, no warm-up</p>
  </div>
  <div class="page">
    <p>i i query parameterization  simulation of multiple clients  system warm up system warm-up</p>
  </div>
  <div class="page">
    <p>Benchmark Dataset</p>
    <p>The benchmark is built around an e-commerce use case, where a set of products is offered by different vendors andwhere a set of products is offered by different vendors and consumers have posted reviews about products.</p>
  </div>
  <div class="page">
    <p>Data Generator</p>
    <p>supports the creation of arbitrarily large datasets using the number of products as scale factornumber of products as scale factor.</p>
    <p>produces  RDF representation</p>
    <p>relational representation</p>
    <p>output formats  Turtle</p>
    <p>MySQL dump</p>
    <p>The data generations is deterministic The data generations is deterministic.</p>
  </div>
  <div class="page">
    <p>Number of Instances in BSBM Datasets of different Sizes</p>
  </div>
  <div class="page">
    <p>The Benchmark Query Mix</p>
  </div>
  <div class="page">
    <p>Representations of the Query Mix</p>
  </div>
  <div class="page">
    <p>Query 1: Find Products for a generic set of features</p>
    <p>SELECT DISTINCT ?product ?label Parameters</p>
    <p>p WHERE {</p>
    <p>?product rdfs:label ?label . ?product rdf:type %ProductType%?product rdf:type %ProductType% . ?product bsbm:productFeature %ProductFeature1% . ?product bsbm:productFeature %ProductFeature2% . ? d t b b d tP t N i 1 ? l 1?product bsbm:productPropertyNumeric1 ?value1 .</p>
    <p>FILTER (?value1 &gt; %x%)} ORDER BY ?label LIMIT 10</p>
    <p>Q P tiQuery Properties  Small number of patterns</p>
    <p>Si l filt Simple filters</p>
    <p>Uses ORDER BY and LIMIT</p>
  </div>
  <div class="page">
    <p>Query 2: Retrieve basic information about a specific product for display purposes</p>
    <p>SELECT ?label ?comment ?producer ?productFeature ?propertyTextual1 ?propertyTextual2 ?propertyTextual3 ?propertyNumeric1 ?propertyNumeric2 ?propertyTextual4 ?propertyTextual5?propertyNumeric2 ?propertyTextual4 ?propertyTextual5 ?propertyNumeric4</p>
    <p>WHERE { %ProductXYZ% rdfs:label ?label . %ProductXYZ% rdfs:comment ?comment . %ProductXYZ% bsbm:producer ?p . ?p rdfs:label ?producer . %ProductXYZ% dc:publisher ?p%ProductXYZ% dc:publisher ?p . %ProductXYZ% bsbm:productFeature ?f . ?f rdfs:label ?productFeature . %ProductXYZ% bsbm:productPropertyTextual1 ?propertyTextual1 . %ProductXYZ% bsbm:productPropertyTextual2 ?propertyTextual2 . %ProductXYZ% bsbm:productPropertyTextual3 ?propertyTextual3 . %ProductXYZ% bsbm:productPropertyNumeric1 ?propertyNumeric1 . %ProductXYZ% bsbm:productPropertyNumeric2 ?propertyNumeric2%ProductXYZ% bsbm:productPropertyNumeric2 ?propertyNumeric2 .</p>
    <p>OPTIONAL { %ProductXYZ% bsbm:productPropertyTextual4 ?propertyTextual4 } OPTIONAL { %ProductXYZ% bsbm:productPropertyTextual5 ?propertyTextual5 } OPTIONAL { %ProductXYZ% bsbm:productPropertyNumeric4 ?propertyNumeric4 }}</p>
    <p>Query Properties</p>
    <p>large number of patterns  Uses OPTIONAL</p>
  </div>
  <div class="page">
    <p>Query 3: Find products having some specific features and not having one feature</p>
    <p>SELECT ?product ?label WHERE {</p>
    <p>?product rdfs:label ?label . ?product rdf:type %ProductType% . ?product bsbm:productFeature %ProductFeature1% . ?product bsbm:productPropertyNumeric1 ?p1 .</p>
    <p>FILTER ( ?p1 &gt; %x% ) ?product bsbm:productPropertyNumeric3 ?p3 .</p>
    <p>FILTER (?p3 &lt; %y% ) OPTIONAL {</p>
    <p>?product bsbm:productFeature %ProductFeature2% . ?product rdfs:label ?testVar }</p>
    <p>FILTER (!bound(?testVar)) } ORDER BY ?label LIMIT 10</p>
    <p>Query PropertiesQuery Properties  Uses negation</p>
  </div>
  <div class="page">
    <p>Query 4: Find products matching two different sets of features</p>
    <p>SELECT ?product ?label WHERE {</p>
    <p>{ ?product rdfs:label ?label . ?product rdf:type %ProductType% . ?product bsbm:productFeature %ProductFeature1% . ?product bsbm:productFeature %ProductFeature2% . ?product bsbm:productPropertyNumeric1 ?p1 .</p>
    <p>FILTER ( ?p1 &gt; %x% ) } UNION {</p>
    <p>?product rdfs:label ?label . ?product rdf:type %ProductType% . ?product bsbm:productFeature %ProductFeature1% . ?product bsbm:productFeature %ProductFeature3% . ?product bsbm:productPropertyNumeric2 ?p2 .</p>
    <p>FILTER ( ?p2&gt; %y% ) }} ORDER BY ?label LIMIT 10 OFFSET 10</p>
    <p>Query Properties  Uses UNION</p>
  </div>
  <div class="page">
    <p>Query 5: Find products that are similar to a given product</p>
    <p>SELECT DISTINCT ?product ?productLabel WHERE {</p>
    <p>?product rdfs:label ?productLabel . %ProductXYZ% rdf:type ?prodtype. ?product rdf:type ?prodtype .</p>
    <p>FILTER (%ProductXYZ% != ?product) %ProductXYZ% bsbm:productFeature ?prodFeature . ?product bsbm:productFeature ?prodFeature . %ProductXYZ% bsbm:productPropertyNumeric1 ?origProperty1 . ?product bsbm:productPropertyNumeric1 ?simProperty1 .</p>
    <p>FILTER (?simProperty1 &lt; (?origProperty1 + 150) &amp;&amp; ?simProperty1 &gt; (?origProperty1  150))</p>
    <p>%ProductXYZ% bsbm:productPropertyNumeric2 ?origProperty2 . ?product bsbm:productPropertyNumeric2 ?simProperty2 .</p>
    <p>FILTER (?simProperty2 &lt; (?origProperty2 + 220) &amp;&amp; ?simProperty2 &gt; (?origProperty2  220)) }</p>
    <p>ORDER BY ?productLabel LIMIT 5LIMIT 5</p>
    <p>Query Properties</p>
    <p>Uses complex filters</p>
  </div>
  <div class="page">
    <p>Query 6: Find products having a label that contains a specific word</p>
    <p>SELECT ?product ?label WHERE {</p>
    <p>?product rdfs:label ?label . ?product rdf:type bsbm:Product .</p>
    <p>FILTER regex(?label, &quot;%word1%&quot;)}</p>
    <p>Q P tiQuery Properties  Uses a regular expression to emulate free-text search</p>
  </div>
  <div class="page">
    <p>Query 7: Retrieve in-depth information about a product including offers and reviews</p>
    <p>SELECT ?productLabel ?offer ?price ?vendor ?vendorTitle ?review ?revTitle ?reviewer ?revName ?rating1 ?rating2g g</p>
    <p>WHERE { %ProductXYZ% rdfs:label ?productLabel .</p>
    <p>OPTIONAL { ?offer bsbm:product %ProductXYZ% . ?offer bsbm:price ?price . ?offer bsbm:vendor ?vendor . ?vendor rdfs:label ?vendorTitle . ?vendor bsbm:country &lt;http://downlode.org/rdf/iso-3166/countries#DE&gt;.</p>
    <p>?offer dc:publisher ?vendor . ?offer bsbm:validTo ?date .</p>
    <p>FILTER (?date &gt; %currentDate% ) } OPTIONAL {</p>
    <p>?review bsbm:reviewFor %ProductXYZ% . ?review rev:reviewer ?reviewer . ? i f f ? N?reviewer foaf:name ?revName . ?review dc:title ?revTitle .</p>
    <p>OPTIONAL { ?review bsbm:rating1 ?rating1 . } OPTIONAL { ? i b b ti 2 ? ti 2 } } }</p>
    <p>OPTIONAL { ?review bsbm:rating2 ?rating2 . } } }</p>
  </div>
  <div class="page">
    <p>Query 8: Give me recent English language reviews for a specific product</p>
    <p>SELECT ?title ?text ?reviewDate ?reviewer ?reviewerName ?rating1 ?rating2 ?rating3 ?rating4 g g g</p>
    <p>WHERE { ?review bsbm:reviewFor %ProductXYZ% . ?review dc:title ?title . ?review rev:text ?text .</p>
    <p>FILTER langMatches( lang(?text), &quot;EN&quot; ) ?review bsbm:reviewDate ?reviewDate . ?review rev:reviewer ?reviewer . ?reviewer foaf:name ?reviewerName .</p>
    <p>OPTIONAL { ?review bsbm:rating1 ?rating1 . } OPTIONAL { ?review bsbm:rating2 ?rating2 . } OPTIONAL { ?review bsbm:rating3 ?rating3 . } OPTIONAL { ?review bsbm:rating4 ?rating4 . } }</p>
    <p>ORDER BY DESC(?reviewDate) LIMIT 20</p>
    <p>Query PropertiesQuery Properties  Uses langMatches() function</p>
    <p>Uses OPTIONAL</p>
    <p>Uses OPTIONAL</p>
  </div>
  <div class="page">
    <p>Query 9: Get information about a reviewer</p>
    <p>DESCRIBE ?x WHERE {</p>
    <p>%ReviewXYZ% rev:reviewer ?x }</p>
    <p>Query Properties  Uses DESCRIBE Uses DESCRIBE</p>
  </div>
  <div class="page">
    <p>Query 10: Get cheap offers which fulfill the consumers delivery requirements</p>
    <p>SELECT DISTINCT ?offer ?price WHERE {</p>
    <p>?offer bsbm:product %ProductXYZ% . ?offer bsbm:vendor ?vendor . ?offer dc:publisher ?vendor . ?vendor bsbm:country %CountryXYZ% . ?offer bsbm:deliveryDays ?deliveryDays .</p>
    <p>FILTER (?deliveryDays &lt;= 3) ?offer bsbm:price ?price . ?offer bsbm:validTo ?date .</p>
    <p>FILTER (?date &gt; %currentDate% ) } ORDER BY ?price LIMIT 10</p>
    <p>Query Properties  Medium amount of patternsMedium amount of patterns</p>
    <p>Medium amount of filters</p>
  </div>
  <div class="page">
    <p>Query 11: Get all information about an offer</p>
    <p>SELECT ?property ?hasValue ?isValueOfp p y WHERE {</p>
    <p>{ %OfferXYZ% ?property ?hasValue } UNION</p>
    <p>{ ?isValueOf ?property %OfferXYZ% } }</p>
    <p>Query Properties  query contains unbound predicates</p>
    <p>uses UNION</p>
  </div>
  <div class="page">
    <p>Query 12: Export information about an offer into another schemata</p>
    <p>CONSTRUCT { %OfferXYZ% bsbm-export:product ?productURI . %OfferXYZ% bsbm-export:productlabel ?productlabel . %OfferXYZ% bsbm-export:vendor ?vendorname . %OfferXYZ% bsbm-export:vendorhomepage ?vendorhomepage . %OfferXYZ% bsbm-export:offerURL ?offerURL . %OfferXYZ% bsbm-export:price ?price . %OfferXYZ% bsbm-export:deliveryDays ?deliveryDays . %Off XYZ% b b t lid til ? lidT }%OfferXYZ% bsbm-export:validuntil ?validTo }</p>
    <p>WHERE { %OfferXYZ% bsbm:product ?productURI . ?productURI rdfs:label ?productlabel?productURI rdfs:label ?productlabel . %OfferXYZ% bsbm:vendor ?vendorURI . ?vendorURI rdfs:label ?vendorname . ?vendorURI foaf:homepage ?vendorhomepage?vendorURI foaf:homepage ?vendorhomepage . %OfferXYZ% bsbm:offerWebpage ?offerURL . %OfferXYZ% bsbm:price ?price . %OfferXYZ% bsbm:deliveryDays ?deliveryDays%OfferXYZ% bsbm:deliveryDays ?deliveryDays . %OfferXYZ% bsbm:validTo ?validTo }</p>
    <p>Query Properties</p>
    <p>Query Properties  Uses CONSTRUCT</p>
  </div>
  <div class="page">
    <p>The Test Driver</p>
    <p>Executes sequences of parameterized  SPARQL queries over the SPARQL protocol</p>
    <p>SQL queries over JDBC</p>
    <p>The query sequence is deterministic.</p>
    <p>The test driver can simulate multiple clients The test driver can simulate multiple clients.</p>
    <p>Test driver configuration  SPARQL d i t URL SPARQL endpoint URL</p>
    <p>Number of warmup query mixes</p>
    <p>N b f b h k i Number of benchmark query mixes</p>
    <p>Number of clients</p>
    <p>The data generator and test driver are available under GPL license.</p>
  </div>
  <div class="page">
    <p>We were interested in comparing the performance of  relational database to RDF wrappers and</p>
    <p>native RDF stores.</p>
    <p>3 RDF stores  Jena TDB Version 0.53 and Joseki Version 3.2.1 as HTTP interface.  Sesame Version 2.2 (Native Storage) over Tomcat Version  Virtuoso Triple Store v5.0.9</p>
    <p>2 SPARQL-to-SQL rewriters  D2R Server Version 0 4 with MySQL Version 5 1 26 as underlying RDBMS D2R Server Version 0.4 with MySQL Version 5.1.26 as underlying RDBMS.  Virtuoso RDF Views with Virtuoso v5.0.9 as underlying RDBMS.</p>
    <p>Virtuoso v5.0.9</p>
  </div>
  <div class="page">
    <p>Setup of the Benchmark Experiment</p>
    <p>Dataset sizes: 250,000 to 100,000,000 triples</p>
    <p>1 to 16 concurrent clients</p>
    <p>Test run Test run  Warm-up 32 BSBM query mixes (altogether 800 queries)</p>
    <p>Performance measurement:128 BSBM query mixes (altogether 3200 queries) Performance measurement:128 BSBM query mixes (altogether 3200 queries)</p>
    <p>Test driver and SUT on same machine</p>
    <p>M hi Machine  DELL workstation</p>
    <p>C Q Q G Processor: Intel Core 2 Quad Q9450 2.66GHz</p>
    <p>Memory: 8GB DDR2 667</p>
    <p>Hard disks: 160GB (10,000 rpm) SATA2, 750GB (7,200 rpm) SATA2</p>
    <p>Operating system: Ubuntu 8.04 64-bit</p>
  </div>
  <div class="page">
    <p>Load Times</p>
    <p>values in d:hh:mm:ss</p>
    <p>for loading the Turtle and relational representation</p>
  </div>
  <div class="page">
    <p>Overall Query Execution Time for a Single Client</p>
    <p>in seconds</p>
    <p>128 Query mixes = 3200 queries</p>
    <p>Performance of SPARQL-to-SQL rewriters and RDF stores is similar for small datasets.</p>
    <p>Vi t RDF Vi t f f t t t i l t f 100M d t t b f t 5 Virtuoso RDF Views outperforms fastest triple store for 100M dataset by factor 5.</p>
    <p>Individual query times vary widely.  25% 90 % of the overall time spend on query 5 (complex filter expression)</p>
    <p>25% - 90 % of the overall time spend on query 5 (complex filter expression) and query 6 (regex).</p>
  </div>
  <div class="page">
    <p>Overall Query Execution Time Single Client without Q5 and Q6</p>
    <p>Sesame is the fastest triple store for small datasets.</p>
    <p>Virtuoso TS is the fastest triple store for large datasets.</p>
    <p>SPARQL-to-SQL rewriters outperform triple stores for large datasets.</p>
    <p>R l ti l d t b l l t f t i l t Relational databases clearly outperform triple stores.</p>
  </div>
  <div class="page">
    <p>Performance by Individual Query (queries per second)</p>
  </div>
  <div class="page">
    <p>Performance by Individual Query (queries per second)</p>
  </div>
  <div class="page">
    <p>Performance by Individual Query (queries per second)</p>
  </div>
  <div class="page">
    <p>Performance by Individual Query (queries per second)</p>
  </div>
  <div class="page">
    <p>Performance by Individual Query (queries per second)</p>
  </div>
  <div class="page">
    <p>Performance by Individual Query (queries per second)</p>
  </div>
  <div class="page">
    <p>Results for Multiple Client (1M dataset)</p>
    <p>in query mixes per hour.</p>
  </div>
  <div class="page">
    <p>Results for Multiple Client (25M dataset)</p>
    <p>in query mixes per hour</p>
  </div>
  <div class="page">
    <p>Conclusions from the Experiment</p>
    <p>Concerning Triple Stores  Sesame is good for small and medium data sets.</p>
    <p>Virtuoso TS is faster for large datasets.</p>
    <p>Concerning Triple Stores vs. SPARQL-to-SQL rewriters  SPARQL-to-SQL rewriters clearly outperform triple stores.</p>
    <p>Concering Systems for Mutiple Clients  Virtuoso TS and Virtuoso RV clearly outperform the other systems Virtuoso TS and Virtuoso RV clearly outperform the other systems.</p>
    <p>Concerning Triple Stores vs. Relational Databases R l ti l d t b t f t i l t b t l t f t 9 Relational databases outperform triple stores by at least factor 9.</p>
  </div>
  <div class="page">
    <p>Thanks!</p>
    <p>Berlin SPARQL Benchmark (BSBM) Website http://www4 wiwiss fu berlin de/bizer/BerlinSPARQLBenchmark/</p>
    <p>http://www4.wiwiss.fu-berlin.de/bizer/BerlinSPARQLBenchmark/</p>
  </div>
</Presentation>
