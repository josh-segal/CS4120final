<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>(C) 2002 Daniel Sorin Wisconsin Multifacet Project</p>
    <p>SafetyNet: Improving the Availability of</p>
    <p>Shared Memory Multiprocessors with Global Checkpoint/Recovery</p>
    <p>Daniel J. Sorin, Milo M. K. Martin,</p>
    <p>Mark D. Hill, and David A. Wood</p>
    <p>Computer Sciences Department</p>
    <p>University of WisconsinMadison</p>
  </div>
  <div class="page">
    <p>SafetyNet  Daniel Sorinslide 2</p>
    <p>Overview</p>
    <p>Hardware fault frequencies are increasing</p>
    <p>Hardware checkpoint/recovery for multiprocessors</p>
    <p>Transparent to software</p>
    <p>SafetyNet Innovations  Efficient coordination of checkpoint creation</p>
    <p>Optimized logging of checkpoint state</p>
    <p>Checkpoint validation off critical path</p>
    <p>SafetyNet achieves 3 goals, existing systems get 2  High availability</p>
    <p>High performance</p>
    <p>Low cost</p>
  </div>
  <div class="page">
    <p>SafetyNet  Daniel Sorinslide 3</p>
    <p>Outline</p>
    <p>Availability  Motivation</p>
    <p>Example targeted faults</p>
    <p>Differences between SafetyNet and existing approaches</p>
    <p>SafetyNet: Key Features</p>
    <p>A SafetyNet Implementation</p>
    <p>Evaluation</p>
    <p>Conclusions</p>
  </div>
  <div class="page">
    <p>SafetyNet  Daniel Sorinslide 4</p>
    <p>Availability Motivation</p>
    <p>Fault frequencies are increasing</p>
    <p>Marketing trends demand more availability</p>
    <p>Need architectural solution to improve availability</p>
  </div>
  <div class="page">
    <p>SafetyNet  Daniel Sorinslide 5</p>
    <p>Which Faults Do We Target?</p>
    <p>Hardware faults in shared memory multiprocessors  Mostly transient, some permanent, not chipkill</p>
    <p>We focus on faults outside of processor cores  Why? Good techniques for processors (e.g., DIVA)</p>
    <p>Interconnection network  Example: dead switch</p>
    <p>Detect with timeout</p>
    <p>Cache coherence protocols  Example: lost coherence message</p>
    <p>Detect with timeout</p>
    <p>CPU CPU CPU</p>
    <p>Interconnectio n</p>
    <p>Network</p>
    <p>Interconnectio n</p>
    <p>Network</p>
  </div>
  <div class="page">
    <p>SafetyNet  Daniel Sorinslide 6</p>
    <p>System Hardware Design Space</p>
    <p>Backward Error Recovery (Tandem NonStop)</p>
    <p>Forward Error Recovery (IBM mainframes)</p>
    <p>Servers and PCs</p>
    <p>Existing systems get only 2 out of 3 features</p>
  </div>
  <div class="page">
    <p>SafetyNet  Daniel Sorinslide 7</p>
    <p>Outline</p>
    <p>Availability</p>
    <p>SafetyNet: Key Features  System abstraction  Innovations</p>
    <p>A SafetyNet Implementation</p>
    <p>Evaluation</p>
    <p>Conclusions</p>
  </div>
  <div class="page">
    <p>SafetyNet  Daniel Sorinslide 8</p>
    <p>SafetyNet Abstraction</p>
    <p>Processor</p>
    <p>Processor</p>
    <p>Current Memory</p>
    <p>Checkpoint</p>
    <p>Current Memory</p>
    <p>checkpoint</p>
    <p>Current Memory Version</p>
    <p>Active (Architectural)</p>
    <p>State of System</p>
    <p>Most Recently Validated Checkpoint</p>
    <p>Recovery Point</p>
    <p>Checkpoints Awaiting Validation</p>
  </div>
  <div class="page">
    <p>SafetyNet  Daniel Sorinslide 9</p>
    <p>SafetyNet Execution Model</p>
    <p>CP1</p>
    <p>time</p>
    <p>CP2</p>
    <p>CP3</p>
    <p>CP4</p>
    <p>CP5</p>
    <p>recovery pt</p>
    <p>validating</p>
    <p>active</p>
    <p>Create CP3</p>
    <p>recovery pt</p>
    <p>validating</p>
    <p>active</p>
    <p>validating</p>
    <p>Validate CP2</p>
    <p>recovery pt</p>
    <p>validating</p>
    <p>active</p>
    <p>Create CP4</p>
    <p>active</p>
    <p>validating</p>
    <p>validating</p>
    <p>recovery pt</p>
    <p>Recovery</p>
    <p>recovery pt</p>
    <p>active</p>
  </div>
  <div class="page">
    <p>SafetyNet  Daniel Sorinslide 10</p>
    <p>SafetyNet Goal and Innovations</p>
    <p>Goal: Recover to consistent checkpoint if fault</p>
    <p>Inefficient but correct solution  Periodically quiesce entire system to take checkpoint</p>
    <p>Checkpoints include all system state</p>
    <p>Stop system to validate checkpoints as fault free</p>
    <p>SafetyNet innovations: 1. Efficient coordination of checkpoint creation across system</p>
  </div>
  <div class="page">
    <p>SafetyNet  Daniel Sorinslide 11</p>
    <p>Checkpoints must reflect consistent system state  Nodes must agree on memory values and coherence</p>
    <p>Coordinate checkpoints in logical time  Logical time is time base that respects causality</p>
    <p>Each node maintains its own logical clock  Create checkpoint every K logical cycles</p>
    <p>We need logical time base that helps coordination</p>
    <p>Key #1 Coordinating Checkpoint Creation</p>
  </div>
  <div class="page">
    <p>SafetyNet  Daniel Sorinslide 12</p>
    <p>Logical Time Base</p>
    <p>Many logical time bases exist  Depends on coherence protocol</p>
    <p>Broadcast snooping systems  Increment clock for every coherence request processed</p>
    <p>Nodes can be at different logical times</p>
    <p>All nodes can agree when coherence transaction happens</p>
    <p>Directory protocol systems  Based on loosely synchronized physical clock (10 kHz)</p>
    <p>More complicated explanation  refer to paper for details</p>
  </div>
  <div class="page">
    <p>SafetyNet  Daniel Sorinslide 13</p>
    <p>Key #2 Optimized Checkpointing of System State</p>
    <p>Checkpoint all state needed to resume execution  Processor registers  Memory state (including cache state)  Cache coherence state</p>
    <p>Processors save register state at each checkpoint  Copy registers into shadow registers</p>
    <p>Logically, cache/memory log old data every time:  Store overwrites an old checkpoint of block  Blocks coherence ownership is transferred</p>
    <p>How can we reduce the amount of logged state?</p>
  </div>
  <div class="page">
    <p>SafetyNet  Daniel Sorinslide 14</p>
    <p>Optimized Logging</p>
    <p>Insight: only recover at checkpoint granularity</p>
    <p>Intervals between checkpoints group writes/transfers  E.g., checkpoint every 100,000 cycles (100 sec at 1GHz)</p>
    <p>Only log first store/transfer per block per interval</p>
    <p>Optimization at cache:  Label cache blocks with checkpoint numbers (CNs)</p>
    <p>If write/transfer is from same checkpoint, no logging needed</p>
    <p>Large benefit due to locality of references</p>
  </div>
  <div class="page">
    <p>SafetyNet  Daniel Sorinslide 15</p>
    <p>Key #3 Checkpoint Validation in Background</p>
    <p>Only validate when all agree checkpoint is fault-free  Example: no outstanding coherence requests in checkpoint</p>
    <p>Nodes perform fault detection, then coordinate</p>
    <p>Can be in background and pipelined  Reason why we have checkpoints awaiting validation</p>
    <p>Can hide long fault detection latencies  Number of outstanding checkpoints x checkpoint length  Design tolerance to be longer than longest detection latency</p>
    <p>Dont slow down execution to validate checkpoints</p>
  </div>
  <div class="page">
    <p>SafetyNet  Daniel Sorinslide 16</p>
    <p>Outline</p>
    <p>Availability</p>
    <p>SafetyNet: Key Features</p>
    <p>A SafetyNet Implementation</p>
    <p>Evaluation</p>
    <p>Conclusions</p>
  </div>
  <div class="page">
    <p>SafetyNet  Daniel Sorinslide 17</p>
    <p>System Model</p>
    <p>Checkpoint Log Buffer (CLB) at cache and memory  Just FIFO log of block writes/transfers</p>
    <p>CPU</p>
    <p>cache(s) CLB CLBmemory</p>
    <p>network interface</p>
    <p>NS half switch</p>
    <p>EW half switch</p>
    <p>reg CPs</p>
    <p>I/O bridge</p>
  </div>
  <div class="page">
    <p>SafetyNet  Daniel Sorinslide 18</p>
    <p>Example of SafetyNet Operation</p>
    <p>Recovery point is checkpoint 2. Most recent checkpoint is 3. Active checkpoint is 4. Processor 1 owns block B (validated).</p>
    <p>CLB</p>
    <p>Cache</p>
    <p>P1</p>
    <p>B M 2000</p>
    <p>P2</p>
    <p>Interconnection network</p>
    <p>Regs: CP2 Regs: CP3</p>
    <p>Regs: CP2 Regs: CP3</p>
    <p>Addr State CN data</p>
    <p>Addr State data Addr State data</p>
    <p>Addr State CN data</p>
    <p>CLB</p>
    <p>Cache</p>
  </div>
  <div class="page">
    <p>SafetyNet  Daniel Sorinslide 19</p>
    <p>Example of SafetyNet Operation</p>
    <p>P1 stores 3000 to block B between checkpoints 3 and 4. Logs old data.</p>
    <p>P1</p>
    <p>B M 4 3000</p>
    <p>P2</p>
    <p>B M 2000</p>
    <p>Addr State CN data Addr State CN data</p>
    <p>Addr State data Addr State data</p>
    <p>Regs: CP2 Regs: CP3</p>
    <p>Regs: CP2 Regs: CP3</p>
    <p>CLB</p>
    <p>Cache</p>
    <p>CLB</p>
    <p>Cache</p>
    <p>Interconnection network</p>
  </div>
  <div class="page">
    <p>SafetyNet  Daniel Sorinslide 20</p>
    <p>Example of SafetyNet Operation</p>
    <p>P1 loads from block B. SafetyNet uninvolved.</p>
    <p>P1</p>
    <p>B M 4 3000</p>
    <p>P2</p>
    <p>B M 2000</p>
    <p>Addr State CN data Addr State CN data</p>
    <p>Addr State data Addr State data</p>
    <p>Regs: CP2 Regs: CP3</p>
    <p>Regs: CP2 Regs: CP3</p>
    <p>CLB</p>
    <p>Cache</p>
    <p>CLB</p>
    <p>Cache</p>
    <p>Interconnection network</p>
  </div>
  <div class="page">
    <p>SafetyNet  Daniel Sorinslide 21</p>
    <p>Example of SafetyNet Operation</p>
    <p>Coordinated creation of checkpoint 4. Active checkpoint is 5. Save register state at beginning of checkpoint 4.</p>
    <p>P1</p>
    <p>B M 4 3000</p>
    <p>P2</p>
    <p>B M 2000</p>
    <p>Regs: CP2 Regs: CP3</p>
    <p>Regs: CP4 Regs: CP2</p>
    <p>Regs: CP3 Regs: CP4</p>
    <p>Addr State CN data Addr State CN data</p>
    <p>Addr State data Addr State data</p>
    <p>CLB</p>
    <p>Cache</p>
    <p>CLB</p>
    <p>Cache</p>
    <p>Interconnection network</p>
  </div>
  <div class="page">
    <p>SafetyNet  Daniel Sorinslide 22</p>
    <p>Example of SafetyNet Operation</p>
    <p>P2 requests ownership of block B. P1 logs old data and sends copy to P2. P1 invalidates cache entry.</p>
    <p>P1 P2</p>
    <p>B M 5 3000</p>
    <p>B M 2000</p>
    <p>B M 3000</p>
    <p>Addr State CN data Addr State CN data</p>
    <p>Addr State data Addr State data</p>
    <p>Regs: CP2 Regs: CP3</p>
    <p>Regs: CP4 Regs: CP2</p>
    <p>Regs: CP3 Regs: CP4</p>
    <p>CLB</p>
    <p>Cache</p>
    <p>CLB</p>
    <p>Cache</p>
    <p>Interconnection network</p>
  </div>
  <div class="page">
    <p>SafetyNet  Daniel Sorinslide 23</p>
    <p>Example of SafetyNet Operation</p>
    <p>Validation of checkpoint 3. Discard checkpoint 2 registers. Recovery point is now beginning of checkpoint 3.</p>
    <p>P1 P2</p>
    <p>B M 5 3000</p>
    <p>B M 3000</p>
    <p>Regs: CP3 Regs: CP4</p>
    <p>Regs: CP3 Regs: CP4</p>
    <p>Addr State CN data Addr State CN data</p>
    <p>Addr State data Addr State data</p>
    <p>B M 2000 CLB</p>
    <p>Cache</p>
    <p>CLB</p>
    <p>Cache</p>
    <p>Interconnection network</p>
  </div>
  <div class="page">
    <p>SafetyNet  Daniel Sorinslide 24</p>
    <p>Example of SafetyNet Operation</p>
    <p>Recovery (to checkpoint 3). Restore CP3 registers. Restore ownership of B to P1. Invalidate B at P2. Now restart system!</p>
    <p>P1</p>
    <p>B M</p>
    <p>P2</p>
    <p>Regs: CP3 Regs: CP3</p>
    <p>Addr State CN data Addr State CN data</p>
    <p>Addr State data Addr State data</p>
    <p>CLB</p>
    <p>Cache</p>
    <p>CLB</p>
    <p>Cache</p>
    <p>Interconnection network</p>
  </div>
  <div class="page">
    <p>SafetyNet  Daniel Sorinslide 25</p>
    <p>System Recovery and Restart</p>
    <p>Any component can trigger recovery  E.g., processor times out on coherence request</p>
    <p>All in-progress transactions are dropped  By definition, these transactions are not validated</p>
    <p>After recovery, resume execution  May have to reconfigure (e.g., route around dead link)</p>
    <p>Must replay work that was lost</p>
  </div>
  <div class="page">
    <p>SafetyNet  Daniel Sorinslide 26</p>
    <p>I/O and the Outside World</p>
    <p>Output commit problem  Cant send uncommitted data beyond sphere of recoverability</p>
    <p>SafetyNet includes processors, memory, coherence</p>
    <p>Doesnt include network, disks, printer, etc.</p>
    <p>Standard solution: wait to communicate with I/O</p>
    <p>Only send validated data to outside world</p>
    <p>Input commit problem  Input cant be recovered  Standard solution: log input</p>
  </div>
  <div class="page">
    <p>SafetyNet  Daniel Sorinslide 27</p>
    <p>Outline</p>
    <p>Availability</p>
    <p>SafetyNet: Key Features</p>
    <p>A SafetyNet Implementation</p>
    <p>Evaluation  Methodology</p>
    <p>Runtime performance</p>
    <p>Conclusions</p>
  </div>
  <div class="page">
    <p>SafetyNet  Daniel Sorinslide 28</p>
    <p>Methodology: Simulation &amp; Workloads</p>
    <p>Simulation  Simics full-system simulation of 16-proc SPARC system</p>
    <p>Detailed timing simulation of memory system  MOSI directory cache coherence protocol</p>
    <p>Simple, in-order processor model  128KB L1I/D, 4MB L2, 512KB CLB</p>
    <p>Workloads (commercial and scientific)  Online transaction processing (OLTP): IBMs DB2</p>
    <p>Static web server: Apache driven by SURGE</p>
    <p>Dynamic web server: Slashcode  Java server: SpecJBB</p>
    <p>Scientific: barnes-hut from SPLASH2</p>
  </div>
  <div class="page">
    <p>SafetyNet  Daniel Sorinslide 29</p>
    <p>Runtime Performance</p>
    <p>Normalize results to unprotected system</p>
  </div>
  <div class="page">
    <p>SafetyNet  Daniel Sorinslide 30</p>
    <p>Runtime Performance</p>
    <p>Unprotected system crashes if fault occurs</p>
  </div>
  <div class="page">
    <p>SafetyNet  Daniel Sorinslide 31</p>
    <p>Runtime Performance</p>
    <p>SafetyNet has same fault-free performance as unprotected</p>
    <p>Error bars = +/- one standard deviation</p>
  </div>
  <div class="page">
    <p>SafetyNet  Daniel Sorinslide 32</p>
    <p>Runtime Performance</p>
    <p>SafetyNet avoids crashes in presence of lost messages</p>
  </div>
  <div class="page">
    <p>SafetyNet  Daniel Sorinslide 33</p>
    <p>Runtime Performance</p>
    <p>SafetyNet avoids crashes in presence of dead half-switch</p>
  </div>
  <div class="page">
    <p>SafetyNet  Daniel Sorinslide 34</p>
    <p>High-Level Comparison to ReVive</p>
    <p>ReVive SafetyNet</p>
    <p>Backward error recovery scheme</p>
    <p>Yes Yes</p>
    <p>Fault model Transient &amp; permanent</p>
    <p>Transient &amp; some permanent</p>
    <p>Processor modification</p>
    <p>No Yes</p>
    <p>Software modification Minor None</p>
    <p>Fault-free performance</p>
    <p>Output commit latency At least 100 milliseconds</p>
    <p>No more than 0.4 milliseconds</p>
  </div>
  <div class="page">
    <p>SafetyNet  Daniel Sorinslide 35</p>
    <p>Conclusions</p>
    <p>SafetyNet: global, consistent checkpointing  Low cost and high performance</p>
    <p>Efficient logical time checkpoint coordination</p>
    <p>Optimized checkpointing of state  Pipelined, in-background checkpoint validation</p>
    <p>Improved availability  Avoid crash in case of fault</p>
    <p>Same fault-free performance</p>
  </div>
  <div class="page">
    <p>SafetyNet  Daniel Sorinslide 36</p>
    <p>Performance vs. CLB Size</p>
    <p>Caveats  Scaled workloads  100,000 cycle intervals</p>
  </div>
  <div class="page">
    <p>SafetyNet  Daniel Sorinslide 37</p>
    <p>Traditional Availability</p>
    <p>Forward Error Recovery (FER)  Use redundant hardware to mask faults</p>
    <p>E.g., triple modular redundancy with voter or pair&amp;spare</p>
    <p>Systems: IBM mainframes, Intel 432, Stratus  Sacrifices cost to achieve availability</p>
    <p>Backward Error Recovery (BER)  If fault detected, recover system to pre-fault state</p>
    <p>Periodically stop system and save state or log changes  Fault? Restore pre-fault checkpoint or unroll log</p>
    <p>Systems: Sequoia, Synapse N+1, Tandem NonStop</p>
    <p>Sacrifices performance to achieve availability</p>
  </div>
</Presentation>
