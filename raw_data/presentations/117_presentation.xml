<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>GroupGroup</p>
    <p>Using Positive Tainting and Syntax-Aware Evaluation to</p>
    <p>Counter SQL Injection Attacks</p>
    <p>William G.J. Halfond Alessandro Orso</p>
    <p>Panagiotis Manolios</p>
    <p>Supported by NSF awards CCR-0205422 and CCR-0306372 to GA Tech and by DHS and US Air Force under Contract No. FA8750-05-C-0179.</p>
    <p>Georgia Institute of Technology</p>
  </div>
  <div class="page">
    <p>William Halfond  FSE 2006  November 8th, 2006  Slide 2GroupGroup</p>
    <p>Introduction</p>
    <p>Internet</p>
    <p>DB</p>
    <p>Other Systems</p>
    <p>Web Server</p>
    <p>End Users</p>
    <p>Deployment context of a typical Web application.</p>
  </div>
  <div class="page">
    <p>William Halfond  FSE 2006  November 8th, 2006  Slide 3GroupGroup</p>
    <p>Introduction</p>
    <p>Internet</p>
    <p>DB</p>
    <p>Other Systems</p>
    <p>Web Server</p>
    <p>End Users</p>
    <p>Deployment context of a typical Web application.</p>
  </div>
  <div class="page">
    <p>William Halfond  FSE 2006  November 8th, 2006  Slide 4GroupGroup</p>
    <p>SQL Injection Attacks</p>
    <p>Easy to create a database query  hard to do it securely.</p>
    <p>Open Web Application Security Project (OWASP) lists SQLIA in its top ten most critical web application security vulnerabilities</p>
    <p>David Aucsmith (CTO of Security and Business Unit, Microsoft) defined SQLIA as one of the most serious threats to web apps</p>
    <p>Successful attacks on Guess Inc., Travelocity, FTD.com, Tower Records, RIAA,</p>
    <p>Companies have built their business on detecting SQLIAs</p>
  </div>
  <div class="page">
    <p>William Halfond  FSE 2006  November 8th, 2006  Slide 5GroupGroup</p>
    <p>Example of an SQLIA public Login(request, response) {</p>
    <p>String login = request.getParameter(login); String passwd = request.getParameter(passwd); String query = &quot;SELECT info FROM userTable WHERE &quot;; if ((! login.equals(&quot;&quot;)) &amp;&amp; (! password.equals(&quot;&quot;)))</p>
    <p>query += &quot;login='&quot;+login+&quot;' AND pass='&quot;+passwd +&quot;'&quot; else</p>
    <p>query+=&quot;login='guest'&quot;; ResultSet result = stmt.executeQuery(query); if (result != null)</p>
    <p>displayAccount(result); else</p>
    <p>sendAuthFailed(); }</p>
  </div>
  <div class="page">
    <p>William Halfond  FSE 2006  November 8th, 2006  Slide 6GroupGroup</p>
    <p>Example of an SQLIA</p>
    <p>Normal Usage User submits login doe and passwd xyz</p>
    <p>SELECT info FROM users WHERE login= `doe AND pass= xyz</p>
    <p>public Login(request, response) { String login = request.getParameter(login); String passwd = request.getParameter(passwd); String query = &quot;SELECT info FROM userTable WHERE &quot;; if ((! login.equals(&quot;&quot;)) &amp;&amp; (! password.equals(&quot;&quot;)))</p>
    <p>query += &quot;login='&quot;+login+&quot;' AND pass='&quot;+passwd +&quot;'&quot; else</p>
    <p>query+=&quot;login='guest'&quot;; ResultSet result = stmt.executeQuery(query); if (result != null)</p>
    <p>displayAccount(result); else</p>
    <p>sendAuthFailed(); }</p>
  </div>
  <div class="page">
    <p>William Halfond  FSE 2006  November 8th, 2006  Slide 7GroupGroup</p>
    <p>Example of an SQLIA public Login(request, response) {</p>
    <p>String login = request.getParameter(login); String passwd = request.getParameter(passwd); String query = &quot;SELECT info FROM userTable WHERE &quot;; if ((! login.equals(&quot;&quot;)) &amp;&amp; (! password.equals(&quot;&quot;)))</p>
    <p>query += &quot;login='&quot;+login+&quot;' AND pass='&quot;+passwd +&quot;'&quot; else</p>
    <p>query+=&quot;login='guest'&quot;; ResultSet result = stmt.executeQuery(query); if (result != null)</p>
    <p>displayAccount(result); else</p>
    <p>sendAuthFailed(); }</p>
    <p>Malicious Usage Attacker submits admin --  and passwd of 0</p>
    <p>SELECT info FROM users WHERE login=admin --  AND pass=0</p>
  </div>
  <div class="page">
    <p>William Halfond  FSE 2006  November 8th, 2006  Slide 8GroupGroup</p>
    <p>Presentation Outline</p>
    <p>Our Technique  Positive tainting  Syntax-aware evaluation</p>
    <p>Implementation -- WASP  Evaluation  Related work  Conclusions and future work</p>
  </div>
  <div class="page">
    <p>William Halfond  FSE 2006  November 8th, 2006  Slide 9GroupGroup</p>
    <p>Our Technique</p>
    <p>Basic approach =&gt; Only allow developertrusted strings to form sensitive parts of a query</p>
    <p>Solution: 1. Positive tainting: Identify and mark developer</p>
    <p>trusted strings. Propagate taint markings at runtime 2. Syntax-Aware Evaluation: Check that all keywords</p>
    <p>and operators in a query were formed using marked strings</p>
  </div>
  <div class="page">
    <p>William Halfond  FSE 2006  November 8th, 2006  Slide 10GroupGroup</p>
    <p>Example: Positive vs. Negative Tainting public Login(request, response) {</p>
    <p>String login = request.getParameter(login); String passwd = request.getParameter(passwd); String query = &quot;SELECT info FROM userTable WHERE &quot;; if ((! login.equals(&quot;&quot;)) &amp;&amp; (! password.equals(&quot;&quot;)))</p>
    <p>query += &quot;login='&quot;+login+&quot;' AND pass='&quot;+passwd + &quot;'&quot; else</p>
    <p>query+=&quot;login='guest'&quot;; ResultSet result = stmt.executeQuery(query); if (result != null)</p>
    <p>displayAccount(result); else</p>
    <p>sendAuthFailed(); }</p>
    <p>Negative tainting. Positive tainting.</p>
    <p>Identify and mark trusted data instead of untrusted data.</p>
  </div>
  <div class="page">
    <p>William Halfond  FSE 2006  November 8th, 2006  Slide 11GroupGroup</p>
    <p>Benefits of Positive Tainting</p>
    <p>Increased safety: Incompleteness leads to easy-to-eliminate false positives</p>
    <p>Normal in-house testing causes set of trusted data to converge to complete set</p>
    <p>Implements security principle of fail-safe defaults [Saltzer and Schroeder]</p>
    <p>Increased automation: Trusted data readily identifiable in Web applications</p>
  </div>
  <div class="page">
    <p>William Halfond  FSE 2006  November 8th, 2006  Slide 12GroupGroup</p>
    <p>Syntax-aware Evaluation</p>
    <p>Cannot simply forbid the use of untrusted data in queries</p>
    <p>Dependence on filtering rules requires unsafe assumptions</p>
    <p>Syntax-aware evaluation  Performed right before the query is sent to</p>
    <p>the database  Consider the context in which trusted and</p>
    <p>untrusted data is used</p>
  </div>
  <div class="page">
    <p>William Halfond  FSE 2006  November 8th, 2006  Slide 13GroupGroup</p>
    <p>Complete Example 1. String queryString = &quot;SELECT info FROM userTable WHERE &quot;; 2. if ((! login.equals(&quot;&quot;)) &amp;&amp; (! password.equals(&quot;&quot;))) { 3. queryString += &quot;login='&quot; + login + &quot;' AND pass='&quot; + password + &quot;'&quot;; } else { 4. queryString+=&quot;login='guest'&quot;; } 5. ResultSet tempSet = stmt.executeQuery(queryString);</p>
    <p>login -&gt; doe, password -&gt; xyz</p>
  </div>
  <div class="page">
    <p>William Halfond  FSE 2006  November 8th, 2006  Slide 14GroupGroup</p>
    <p>Complete Example 1. String queryString = &quot;SELECT info FROM userTable WHERE &quot;; 2. if ((! login.equals(&quot;&quot;)) &amp;&amp; (! password.equals(&quot;&quot;))) { 3. queryString += &quot;login='&quot; + login + &quot;' AND pass='&quot; + password + &quot;'&quot;; } else { 4. queryString+=&quot;login='guest'&quot;; } 5. ResultSet tempSet = stmt.executeQuery(queryString);</p>
    <p>queryString [S][E][L][E][C][T]  [W][H][E][R][E][]</p>
    <p>login -&gt; doe, password -&gt; xyz</p>
  </div>
  <div class="page">
    <p>William Halfond  FSE 2006  November 8th, 2006  Slide 15GroupGroup</p>
    <p>Complete Example 1. String queryString = &quot;SELECT info FROM userTable WHERE &quot;; 2. if ((! login.equals(&quot;&quot;)) &amp;&amp; (! password.equals(&quot;&quot;))) { 3. queryString += &quot;login='&quot; + login + &quot;' AND pass='&quot; + password + &quot;'&quot;; } else { 4. queryString+=&quot;login='guest'&quot;; } 5. ResultSet tempSet = stmt.executeQuery(queryString);</p>
    <p>queryString [S][E][L][E][C][T]  [W][H][E][R][E][]</p>
    <p>login -&gt; doe, password -&gt; xyz</p>
    <p>tmp0 [l][o][g][i][n][=][]</p>
    <p>tmp1 [d][o][e]</p>
    <p>tmp2 [][][A][N][D][][p][a][s][s][=][]</p>
    <p>tmp3 [x][y][z]</p>
    <p>tmp4 []</p>
  </div>
  <div class="page">
    <p>William Halfond  FSE 2006  November 8th, 2006  Slide 16GroupGroup</p>
    <p>Complete Example 1. String queryString = &quot;SELECT info FROM userTable WHERE &quot;; 2. if ((! login.equals(&quot;&quot;)) &amp;&amp; (! password.equals(&quot;&quot;))) { 3. queryString += &quot;login='&quot; + login + &quot;' AND pass='&quot; + password + &quot;'&quot;; } else { 4. queryString+=&quot;login='guest'&quot;; } 5. ResultSet tempSet = stmt.executeQuery(queryString);</p>
    <p>login -&gt; doe, password -&gt; xyz</p>
    <p>queryString  [W][H][E][R][E][][l][o][g][i][n][=][][d][o][e][][A][N][D][][p][a][s][s][=][][x][y][z][]</p>
  </div>
  <div class="page">
    <p>William Halfond  FSE 2006  November 8th, 2006  Slide 17GroupGroup</p>
    <p>Complete Example 1. String queryString = &quot;SELECT info FROM userTable WHERE &quot;; 2. if ((! login.equals(&quot;&quot;)) &amp;&amp; (! password.equals(&quot;&quot;))) { 3. queryString += &quot;login='&quot; + login + &quot;' AND pass='&quot; + password + &quot;'&quot;; } else { 4. queryString+=&quot;login='guest'&quot;; } 5. ResultSet tempSet = stmt.executeQuery(queryString);</p>
    <p>login -&gt; doe, password -&gt; xyz</p>
    <p>SELECT info FROM userTable WHERE login=doe AND pass=xyz</p>
  </div>
  <div class="page">
    <p>William Halfond  FSE 2006  November 8th, 2006  Slide 18GroupGroup</p>
    <p>Complete Example 1. String queryString = &quot;SELECT info FROM userTable WHERE &quot;; 2. if ((! login.equals(&quot;&quot;)) &amp;&amp; (! password.equals(&quot;&quot;))) { 3. queryString += &quot;login='&quot; + login + &quot;' AND pass='&quot; + password + &quot;'&quot;; } else { 4. queryString+=&quot;login='guest'&quot;; } 5. ResultSet tempSet = stmt.executeQuery(queryString);</p>
    <p>login -&gt; doe, password -&gt; xyz</p>
    <p>SELECT info FROM userTable WHERE login =  doe AND pass =  xyz</p>
  </div>
  <div class="page">
    <p>William Halfond  FSE 2006  November 8th, 2006  Slide 19GroupGroup</p>
    <p>Complete Example 1. String queryString = &quot;SELECT info FROM userTable WHERE &quot;; 2. if ((! login.equals(&quot;&quot;)) &amp;&amp; (! password.equals(&quot;&quot;))) { 3. queryString += &quot;login='&quot; + login + &quot;' AND pass='&quot; + password + &quot;'&quot;; } else { 4. queryString+=&quot;login='guest'&quot;; } 5. ResultSet tempSet = stmt.executeQuery(queryString);</p>
    <p>login -&gt; admin -- , password -&gt;</p>
    <p>queryString  [R][E][][l][o][g][i][n][=][][a][d][m][i][n][][][-][-][][][A][N][D][][p][a][s][s][=][][]</p>
  </div>
  <div class="page">
    <p>William Halfond  FSE 2006  November 8th, 2006  Slide 20GroupGroup</p>
    <p>Complete Example 1. String queryString = &quot;SELECT info FROM userTable WHERE &quot;; 2. if ((! login.equals(&quot;&quot;)) &amp;&amp; (! password.equals(&quot;&quot;))) { 3. queryString += &quot;login='&quot; + login + &quot;' AND pass='&quot; + password + &quot;'&quot;; } else { 4. queryString+=&quot;login='guest'&quot;; } 5. ResultSet tempSet = stmt.executeQuery(queryString);</p>
    <p>login -&gt; admin -- , password -&gt;</p>
    <p>SELECT info FROM userTable WHERE login=admin --  AND pass=</p>
  </div>
  <div class="page">
    <p>William Halfond  FSE 2006  November 8th, 2006  Slide 21GroupGroup</p>
    <p>Complete Example 1. String queryString = &quot;SELECT info FROM userTable WHERE &quot;; 2. if ((! login.equals(&quot;&quot;)) &amp;&amp; (! password.equals(&quot;&quot;))) { 3. queryString += &quot;login='&quot; + login + &quot;' AND pass='&quot; + password + &quot;'&quot;; } else { 4. queryString+=&quot;login='guest'&quot;; } 5. ResultSet tempSet = stmt.executeQuery(queryString);</p>
    <p>login -&gt; admin -- , password -&gt;</p>
    <p>SELECT info FROM userTable WHERE login =  admin AND pass =   --</p>
  </div>
  <div class="page">
    <p>William Halfond  FSE 2006  November 8th, 2006  Slide 22GroupGroup</p>
    <p>WASP Architecture</p>
  </div>
  <div class="page">
    <p>William Halfond  FSE 2006  November 8th, 2006  Slide 23GroupGroup</p>
    <p>Tracking the Taint Markings</p>
    <p>MetaStrings: library that mimics all string-related classes</p>
    <p>Benefits of the approach: 1. Complete mediation of</p>
    <p>all string operations 2. Polymorphism reduces</p>
    <p>instrumentation. 3. Track at the right level of</p>
    <p>granularity: characterlevel tainting</p>
  </div>
  <div class="page">
    <p>William Halfond  FSE 2006  November 8th, 2006  Slide 24GroupGroup</p>
    <p>Implementation: Positive Tainting</p>
    <p>Identify developer-trusted strings. 1.Hard-coded strings 2.Implicitly-created strings 3.Strings from external sources</p>
    <p>Use instrumentation to: 1.Replace with MetaStrings 2.Assign trust markings</p>
  </div>
  <div class="page">
    <p>William Halfond  FSE 2006  November 8th, 2006  Slide 25GroupGroup</p>
    <p>Minimal Deployment Requirements</p>
    <p>No need for a customized runtime system</p>
    <p>Based on instrumentation  Off-line  On the fly</p>
    <p>Highly automated  Transparent for the system</p>
    <p>administrator</p>
  </div>
  <div class="page">
    <p>William Halfond  FSE 2006  November 8th, 2006  Slide 26GroupGroup</p>
    <p>Evaluation</p>
  </div>
  <div class="page">
    <p>William Halfond  FSE 2006  November 8th, 2006  Slide 27GroupGroup</p>
    <p>Experiment Setup</p>
    <p>Database Interaction PointsLOCSubject</p>
    <p>Applications are a mix of commercial (5) and student projects (2)</p>
    <p>Attacks and legitimate inputs developed independently</p>
    <p>Attack inputs represent broad range of exploits</p>
  </div>
  <div class="page">
    <p>William Halfond  FSE 2006  November 8th, 2006  Slide 28GroupGroup</p>
    <p>Evaluation Results: Accuracy</p>
    <p>WASP Protected Web Apps</p>
    <p>Original Web Apps</p>
    <p>Total # Attacks</p>
    <p>False Positives</p>
    <p># Legit. AccessesSubject</p>
    <p>Successful Attacks</p>
  </div>
  <div class="page">
    <p>William Halfond  FSE 2006  November 8th, 2006  Slide 29GroupGroup</p>
    <p>Evaluation Results: Accuracy</p>
    <p>WASP Protected Web Apps</p>
    <p>Original Web Apps</p>
    <p>Total # Attacks</p>
    <p>False Positives</p>
    <p># Legit. AccessesSubject</p>
    <p>Successful Attacks</p>
  </div>
  <div class="page">
    <p>William Halfond  FSE 2006  November 8th, 2006  Slide 30GroupGroup</p>
    <p>Evaluation Results: Accuracy</p>
    <p>WASP Protected Web Apps</p>
    <p>Original Web Apps</p>
    <p>Total # Attacks</p>
    <p>False Positives</p>
    <p># Legit. AccessesSubject</p>
    <p>Successful Attacks</p>
    <p>No false positives or false negatives in our evaluation.</p>
  </div>
  <div class="page">
    <p>William Halfond  FSE 2006  November 8th, 2006  Slide 31GroupGroup</p>
    <p>Evaluation Results: Overhead</p>
    <p>% OverheadAvg. Access Overhead (ms)</p>
    <p>Avg. Access Time (ms)</p>
    <p># InputsSubject</p>
    <p>Overhead is dominated by network and database access time.</p>
  </div>
  <div class="page">
    <p>William Halfond  FSE 2006  November 8th, 2006  Slide 32GroupGroup</p>
    <p>Related Work</p>
    <p>Similar Dynamic Tainting Approaches  Nguyen-Tuong et. al.  Pietraszek and Berghe</p>
    <p>Other Dynamic Tainting Approaches  Haldar, Chandra, and Franz  Martin, Livshits, and Lam</p>
    <p>Other approaches discussed in the paper.</p>
  </div>
  <div class="page">
    <p>William Halfond  FSE 2006  November 8th, 2006  Slide 33GroupGroup</p>
    <p>Conclusions and Future Work  WASP: Highly automated technique for securing</p>
    <p>applications against SQL Injection Attacks  Positive tainting  Accurate and efficient taint propagation  Syntax-aware evaluation  Minimal deployment requirements</p>
    <p>Evaluation involving over 47,000 web accesses showed no false positives or false negatives</p>
    <p>Future work  Use static analysis to optimize dynamic</p>
    <p>instrumentation  Apply general principle to other forms of attacks</p>
  </div>
  <div class="page">
    <p>William Halfond  FSE 2006  November 8th, 2006  Slide 34GroupGroup</p>
    <p>Questions?</p>
  </div>
</Presentation>
