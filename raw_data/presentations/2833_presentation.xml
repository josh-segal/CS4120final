<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Config2Spec: Mining Network Specifications from Network Configurations</p>
    <p>nsg.ee.ethz.ch</p>
    <p>NSDI20</p>
    <p>Martin Vechev, Laurent Vanbever</p>
    <p>Rdiger Birkner, Dana Drachsler-Cohen,</p>
    <p>February, 27 2020</p>
  </div>
  <div class="page">
    <p>Many tools are available that allow you to check that your network behaves as intended</p>
    <p>Upload configurations1</p>
    <p>Define specification2</p>
    <p>Run the tool3</p>
    <p>Iterate &amp; deploy4</p>
    <p>Standard recipe:</p>
  </div>
  <div class="page">
    <p>Many tools are available that allow you to check that your network behaves as intended</p>
    <p>Upload configurations</p>
    <p>Define specification</p>
    <p>Run the tool</p>
    <p>Iterate &amp; deploy</p>
    <p>Standard recipe:</p>
  </div>
  <div class="page">
    <p>The specification of a network is the set of all policies that hold</p>
    <p>Definition</p>
    <p>Set of policies</p>
    <p>waypoint(r3,r1,p2)</p>
    <p>reachability(r1,p1)</p>
    <p>reachability(r5,p2)</p>
    <p>loadbalancing(r3,p2)</p>
    <p>r1</p>
    <p>p2</p>
    <p>r2</p>
    <p>r3</p>
    <p>r4</p>
    <p>r5</p>
    <p>p1</p>
    <p>Topology</p>
  </div>
  <div class="page">
    <p>The specification of a network is the set of all policies that hold</p>
    <p>Definition</p>
    <p>Set of policies</p>
    <p>waypoint(r3,r1,p2)</p>
    <p>reachability(r1,p1)</p>
    <p>reachability(r5,p2)</p>
    <p>loadbalancing(r3,p2)</p>
    <p>r1</p>
    <p>p2</p>
    <p>r2</p>
    <p>r3</p>
    <p>r4</p>
    <p>r5</p>
    <p>p1</p>
    <p>Topology</p>
  </div>
  <div class="page">
    <p>The specification of a network is the set of all policies that hold</p>
    <p>Definition</p>
    <p>Set of policies</p>
    <p>waypoint(r3,r1,p2)</p>
    <p>reachability(r1,p1)</p>
    <p>reachability(r5,p2)</p>
    <p>loadbalancing(r3,p2)</p>
    <p>r1</p>
    <p>p2</p>
    <p>r2</p>
    <p>r3</p>
    <p>r4</p>
    <p>r5</p>
    <p>p1</p>
    <p>Topology</p>
  </div>
  <div class="page">
    <p>The specification of a network is the set of all policies that hold under a given failure model.</p>
    <p>Definition</p>
    <p>Set of policies</p>
    <p>waypoint(r3,r1,p2)</p>
    <p>reachability(r1,p1)</p>
    <p>reachability(r5,p2)</p>
    <p>loadbalancing(r3,p2)</p>
  </div>
  <div class="page">
    <p>The specification of a network is the set of all policies that hold under a given failure model.</p>
    <p>Set of concrete environments</p>
    <p>Definition</p>
    <p>Failure bound</p>
    <p>k = 2</p>
    <p>Symbolic environment</p>
    <p>? ? ? ?</p>
  </div>
  <div class="page">
    <p>The specification of a network is the set of all policies that hold under a given failure model.</p>
    <p>Failure bound</p>
    <p>k = 2</p>
    <p>Definition</p>
    <p>Symbolic environment</p>
    <p>? ? ? ?</p>
    <p>Set of policies</p>
    <p>waypoint(r3,r1,p2)</p>
    <p>reachability(r1,p1)</p>
    <p>reachability(r5,p2)</p>
    <p>loadbalancing(r3,p2)</p>
  </div>
  <div class="page">
    <p>Writing the networks precise specification is hard</p>
    <p>Upload configurations</p>
    <p>Define specification</p>
    <p>Run the tool</p>
    <p>Iterate &amp; deploy</p>
    <p>Standard recipe:</p>
    <p>However, outside of a handful of large cloud computing providers, the use of network verification is still sparse.</p>
  </div>
  <div class="page">
    <p>Internet2s specification with its 10 routers consists of ~4000 policy predicates.</p>
  </div>
  <div class="page">
    <p>Imagine writing that specification by hand.</p>
    <p>Internet2s specification with its 10 routers consists of ~4000 policy predicates.</p>
  </div>
  <div class="page">
    <p>Introducing</p>
    <p>Config2Spec</p>
  </div>
  <div class="page">
    <p>Config2Spec</p>
    <p>Config2Spec automatically mines the networks full specification from its configuration and the given failure model</p>
    <p>Output</p>
    <p>DF</p>
    <p>Network</p>
    <p>Specification</p>
    <p>loadbalancing(4, p2)</p>
    <p>reachability(1, p1)</p>
    <p>reachability(1, p2)</p>
    <p>reachability(4, p2)</p>
    <p>reachability(5, p2)</p>
    <p>Input</p>
    <p>Network</p>
    <p>Configuration</p>
    <p>Failure Model</p>
    <p>k=2</p>
    <p>? ? ? ?</p>
  </div>
  <div class="page">
    <p>Config2Spec: Mining Network Specifications from Network Configurations</p>
    <p>Baseline approaches</p>
    <p>Evaluation</p>
    <p>Our approach</p>
    <p>one search space at a time</p>
    <p>scales to realistic networks</p>
    <p>the best of both worlds</p>
  </div>
  <div class="page">
    <p>Config2Spec: Mining Network Specifications from Network Configurations</p>
    <p>Baseline approaches</p>
    <p>Evaluation</p>
    <p>Our approach</p>
    <p>one search space at a time</p>
    <p>scales to realistic networks</p>
    <p>the best of both worlds</p>
  </div>
  <div class="page">
    <p>Mining a network specification involves exploring two exponential search spaces</p>
    <p>waypoint(r3,r1,p2)</p>
    <p>reachability(r1,p1)</p>
    <p>loadbalancing(r5,p2)</p>
    <p>all possible policies</p>
    <p>all concrete environments</p>
  </div>
  <div class="page">
    <p>waypoint(r3,r1,p2)</p>
    <p>reachability(r1,p1)</p>
    <p>loadbalancing(r1,p2)</p>
    <p>control plane verificationdata plane analysis</p>
    <p>Mining a network specification involves exploring two exponential search spaces</p>
  </div>
  <div class="page">
    <p>data plane analysis control plane verification</p>
  </div>
  <div class="page">
    <p>Data plane analysis tools allow to find all the policies that hold for a single concrete environment</p>
    <p>?</p>
    <p>? ? ?</p>
    <p>k = 2</p>
    <p>Concrete environment</p>
    <p>Data plane analysis</p>
    <p>Set of policies</p>
    <p>All possible policies</p>
  </div>
  <div class="page">
    <p>The network specification is the intersection of the policies that hold for every concrete environment</p>
    <p>?</p>
    <p>? ? ?</p>
    <p>k = 2</p>
  </div>
  <div class="page">
    <p>The network specification is the intersection of the policies that hold for every concrete environment</p>
    <p>=</p>
    <p>waypoint(r3,r1,p2)</p>
    <p>loadbalancing(r4,p2)</p>
    <p>reachability(r1,p1)</p>
    <p>Network specification</p>
    <p>?</p>
    <p>? ? ?</p>
    <p>k = 2</p>
    <p>over-approximation of the specification</p>
  </div>
  <div class="page">
    <p>data plane analysis control plane verification</p>
  </div>
  <div class="page">
    <p>Control plane verification tools determine whether a policy holds for the entire failure model</p>
    <p>?</p>
    <p>? ? ?</p>
    <p>k = 2 Control plane verification</p>
    <p>reachability(r1,p1) Single policy</p>
    <p>Verification result</p>
  </div>
  <div class="page">
    <p>The network specification is the set of policies that the verifier determined to hold for the failure model</p>
    <p>?</p>
    <p>? ? ?</p>
    <p>k = 2</p>
    <p>reachability(r2,p1)</p>
    <p>reachability(r1,p1)</p>
  </div>
  <div class="page">
    <p>The network specification is the set of policies that the verifier determined to hold for the failure model</p>
    <p>?</p>
    <p>? ? ?</p>
    <p>k = 2</p>
    <p>reachability(r2,p1) waypoint(r3,r1,p2)reachability(r1,p1)</p>
    <p>=</p>
    <p>waypoint(r3,r1,p2)</p>
    <p>loadbalancing(r4,p2)</p>
    <p>reachability(r1,p1)</p>
    <p>Network specification</p>
    <p>under-approximation of the specification</p>
  </div>
  <div class="page">
    <p>Both techniques have pros and cons</p>
    <p>approach</p>
    <p>all policies for one concrete env.</p>
    <p>data plane analysis</p>
    <p>one policy for the entire failure model</p>
    <p>control plane verification</p>
    <p>good at pruning dense violations sparse violations</p>
  </div>
  <div class="page">
    <p>Violations are policies that are not part of the specification</p>
    <p>dense violation sparse violation</p>
    <p>reachability(r1,p2)</p>
    <p>r1</p>
    <p>p2</p>
    <p>r4</p>
    <p>r5</p>
    <p>r2</p>
    <p>? ?  ?</p>
    <p>?</p>
    <p>k = 3</p>
    <p>waypoint(r5,r2,p2)</p>
    <p>all envs.policies that hold for almost no envs.</p>
  </div>
  <div class="page">
    <p>What about combining them?</p>
    <p>all policies for one concrete env.</p>
    <p>one policy for the entire failure model</p>
    <p>Both techniques have pros and cons</p>
    <p>approach data plane analysis control plane verification</p>
    <p>good at pruning dense violations sparse violations</p>
  </div>
  <div class="page">
    <p>Config2Spec: Mining Network Specifications from Network Configurations</p>
    <p>Baseline approaches</p>
    <p>Evaluation</p>
    <p>Our approach</p>
    <p>one search space at a time</p>
    <p>scales to realistic networks</p>
    <p>the best of both worlds</p>
  </div>
  <div class="page">
    <p>Config2Spec mines the networks full specification from its configuration and the required failure tolerance</p>
    <p>Network</p>
    <p>Configuration</p>
    <p>Failure Model</p>
    <p>k=2</p>
    <p>? ? ? ?</p>
    <p>Input OutputConfig2Spec</p>
    <p>Data Plane Analysis</p>
    <p>Control Plane Verification</p>
    <p>Infer a specification</p>
    <p>Verify that specification</p>
    <p>Predictor</p>
    <p>DF</p>
    <p>Network</p>
    <p>Specification</p>
    <p>loadbalancing(4, p2)</p>
    <p>reachability(1, p1)</p>
    <p>reachability(1, p2)</p>
    <p>reachability(4, p2)</p>
    <p>reachability(5, p2)</p>
  </div>
  <div class="page">
    <p>Control plane verification</p>
    <p>under-approximation</p>
    <p>Data plane analysis</p>
    <p>over-approximation</p>
    <p>Thanks to combining the two approaches, Config2Spec is precise</p>
  </div>
  <div class="page">
    <p>Step-by-step from all existing policies to the networks specification</p>
  </div>
  <div class="page">
    <p>By performing data plane analysis on a topology, Config2Spec refines the space of candidate policies</p>
    <p>concrete env. #1</p>
  </div>
  <div class="page">
    <p>By performing data plane analysis on a topology, Config2Spec refines the space of candidate policies</p>
    <p>concrete env. #2</p>
  </div>
  <div class="page">
    <p>By performing data plane analysis on a topology, Config2Spec refines the space of candidate policies</p>
    <p>concrete env. #3</p>
  </div>
  <div class="page">
    <p>With control plane verification, Config2Spec checks whether a candidate policy belongs to the specification.</p>
    <p>Policy #1</p>
    <p>reachability(1,p1)</p>
  </div>
  <div class="page">
    <p>With control plane verification, Config2Spec checks whether a candidate policy belongs to the specification.</p>
    <p>Policy #1</p>
    <p>reachability(1,p1)</p>
  </div>
  <div class="page">
    <p>With control plane verification, Config2Spec checks whether a candidate policy belongs to the specification.</p>
    <p>Policy #2</p>
    <p>reachability(3,p2)</p>
  </div>
  <div class="page">
    <p>With control plane verification, Config2Spec checks whether a candidate policy belongs to the specification.</p>
    <p>Policy #3</p>
    <p>reachability(1,p2)</p>
  </div>
  <div class="page">
    <p>With control plane verification, Config2Spec checks whether a candidate policy belongs to the specification.</p>
  </div>
  <div class="page">
    <p>With control plane verification, Config2Spec checks whether a candidate policy belongs to the specification.</p>
  </div>
  <div class="page">
    <p>With control plane verification, Config2Spec checks whether a candidate policy belongs to the specification.</p>
  </div>
  <div class="page">
    <p>With control plane verification, Config2Spec checks whether a candidate policy belongs to the specification.</p>
  </div>
  <div class="page">
    <p>With control plane verification, Config2Spec checks whether a candidate policy belongs to the specification.</p>
  </div>
  <div class="page">
    <p>When Config2Spec terminates, it is left with the specification.</p>
    <p>Full specification</p>
  </div>
  <div class="page">
    <p>Config2Spec can be improved further by two domain-specific techniques</p>
    <p>policy-aware selection grouping and trimming</p>
  </div>
  <div class="page">
    <p>policy-aware selection</p>
    <p>grouping and trimming</p>
  </div>
  <div class="page">
    <p>Data plane analysis has to reduce the candidate set to a minimum as fast as possible</p>
    <p>basic randomly pick concrete environments</p>
    <p>policy-aware pick concrete envs. based on the candidate set</p>
    <p>reachability(r1,p2)</p>
    <p>reachability(r2,p2)</p>
    <p>k=2</p>
    <p>? ? ? ?</p>
    <p>Candidate set</p>
    <p>Failure model</p>
    <p>env #n</p>
    <p>r2</p>
    <p>r1</p>
    <p>p2</p>
    <p>forwarding state</p>
    <p>env #n+1</p>
  </div>
  <div class="page">
    <p>grouping and trimming</p>
    <p>policy-aware selection</p>
  </div>
  <div class="page">
    <p>To be fast, control plane verification should be used as little as possible</p>
    <p>basic verify each policy separately</p>
    <p>trimming leverage topology and failure model</p>
    <p>can connectivity requirements be met?</p>
    <p>grouping verify similar policies at once</p>
    <p>grouping is based on the destination</p>
  </div>
  <div class="page">
    <p>Config2Spec: Mining Network Specifications from Network Configurations</p>
    <p>Baseline approaches</p>
    <p>Evaluation</p>
    <p>Our approach</p>
    <p>one search space at a time</p>
    <p>scales to realistic networks</p>
    <p>the best of both worlds</p>
  </div>
  <div class="page">
    <p>Question #1 How does Config2Spec scale</p>
    <p>to large-scale configurations?</p>
    <p>Question #2 How do the domain-specific techniques</p>
    <p>contribute to Config2Spec?</p>
  </div>
  <div class="page">
    <p>We fully implement Config2Spec and show its practicality</p>
    <p>Implementation 5k lines of Python and Java</p>
    <p>relying on Batfish [NSDI15] and Minesweeper [Sigcomm17]</p>
    <p>Methodology [NSDI18]generated configs using NetComplete</p>
    <p>employing OSPF, BGP</p>
    <p>with 33, 70, and 158 routers</p>
    <p>for a small, medium, and large network</p>
  </div>
  <div class="page">
    <p>Config2Spec mines the specification for realistic networks in few hours</p>
    <p>k = 2 31</p>
    <p>BGP</p>
    <p>OSPF</p>
    <p>Data plane analysis</p>
    <p>Control plane verification</p>
    <p>large topology</p>
  </div>
  <div class="page">
    <p>For failure models with few concrete environments, data plane analysis on its own provides fastest progress</p>
    <p>k = 2 31</p>
    <p>BGP</p>
    <p>OSPF</p>
    <p>Data plane analysis</p>
    <p>Control plane verification</p>
    <p>large topology</p>
  </div>
  <div class="page">
    <p>For failure models with a high failure bound, policy trimming reduces the candidate space significantly</p>
    <p>k = 2 31</p>
    <p>BGP</p>
    <p>OSPF</p>
    <p>Data plane analysis</p>
    <p>Control plane verification</p>
    <p>large topology</p>
  </div>
  <div class="page">
    <p>Config2Spec mines the specification for realistic networks in few hours</p>
    <p>k = 2 31</p>
    <p>BGP</p>
    <p>OSPF</p>
    <p>Data plane analysis</p>
    <p>Control plane verification</p>
    <p>large topology</p>
  </div>
  <div class="page">
    <p>Policy-aware environment selection leads to smaller candidate sets with fewer samples than random</p>
    <p># of environments</p>
    <p>medium &gt; 600</p>
    <p>large0</p>
    <p>candidate set</p>
    <p>as % of initial set</p>
    <p>avg. over 5 runs</p>
    <p>small</p>
    <p>policy-aware</p>
    <p>random</p>
  </div>
  <div class="page">
    <p>for control plane verification</p>
    <p>number of queries</p>
    <p>medium topology, k = 2</p>
    <p>after data plane analysis</p>
    <p>after policy trimming</p>
    <p>Policy trimming and grouping allows to significantly reduce the number of queries</p>
    <p>after policy grouping</p>
    <p>better</p>
  </div>
  <div class="page">
    <p>Config2Spec: Mining Network Specifications from Network Configurations</p>
    <p>Baseline approaches</p>
    <p>Evaluation</p>
    <p>Our approach</p>
    <p>one search space at a time</p>
    <p>scales to realistic networks</p>
    <p>the best of both worlds</p>
  </div>
  <div class="page">
    <p>Config2Spec: Mining Network Specifications from Network Configurations</p>
    <p>scales thanks to the combination of the two approaches</p>
    <p>data plane analysis and control plane verification</p>
    <p>the specification is useful beyond verification</p>
    <p>what-if analysis, config streamlining, network understanding</p>
    <p>automatically learns a network's specification</p>
    <p>based on its configuration and failure model</p>
  </div>
  <div class="page">
    <p>nsg.ee.ethz.ch</p>
    <p>Dana Drachsler-Cohen Martin Vechev Laurent VanbeverRdiger Birkner</p>
    <p>Mining Network Specifications from Network Configurations</p>
    <p>Config2Spec</p>
  </div>
</Presentation>
