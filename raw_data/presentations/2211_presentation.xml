<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>How to Teach an Old File System Dog New Object Store Tricks</p>
    <p>USENIX HotStorage 18</p>
    <p>Eunji Lee1, Youil Han1, Suli Yang2, Andrea C. Arpaci-Dusseau2, Remzi H. Arpaci-Dusseau2</p>
    <p>Chungbuk National University</p>
  </div>
  <div class="page">
    <p>Data-service Platforms  Layering</p>
    <p>Abstract away underlying details  Reuse of existing software  Agility: development, operation, and maintenance</p>
  </div>
  <div class="page">
    <p>Often at odds with efficiency  Local File System</p>
    <p>Bottom layer of modern storage platforms  Portability, Extensibility, Ease of Development</p>
    <p>Distributed Data Store (Dynamo, MongoDB)</p>
    <p>Key-value Store (RocksDB, BerkelyDB)</p>
    <p>Local File System (Ext4, XFS, BtrFS)</p>
    <p>Distributed Data Store (HBase, BigTable)</p>
    <p>Object Store</p>
    <p>Distributed File System (HDFS, GFS)</p>
    <p>Local File System (Ext4, XFS, BtrFS)</p>
    <p>Distributed Data Store (Ceph)</p>
    <p>Object Store Daemon (Ceph)</p>
    <p>Local File System (Ext4, XFS, BtrFS)</p>
  </div>
  <div class="page">
    <p>Local File System  Not intended to serve as an underlying storage engine  Mismatch between the two layers  System-wide optimization</p>
    <p>Ignore demands from individual applications  Little control over file system internals  Suffer from degraded QoS</p>
    <p>Lack of required operations  No atomic operation  No data movement or reorganization  No additional user-level metadata</p>
    <p>Out-of-control and Sub-optimal Performance</p>
  </div>
  <div class="page">
    <p>Current Solutions  Bypass File System</p>
    <p>Key-value store, Object Store, Database  But, reliniquish file system benefits</p>
    <p>Extend file system interfaces  Add new features to POSIX APIs  Slow and conservative</p>
    <p>evolution  Stable maintenance than</p>
    <p>specific optimizations</p>
    <p>Name: Ext2/3/4 Birth: 1993</p>
  </div>
  <div class="page">
    <p>Our Approach  Use a file system as it is, but in a different</p>
    <p>manner!  Design patterns of user-level data platform</p>
    <p>Take advantages of file system  Minimize negative effects of mismatches</p>
  </div>
  <div class="page">
    <p>Contents  Motivation  Problem Analysis  SwimStore  Performance Evaluation  Conclusion</p>
  </div>
  <div class="page">
    <p>Data-service Platform Taxonomy</p>
    <p>PackingMapping</p>
    <p>Multiple objects in a fileObject as a file</p>
    <p>What is the best way to store objects atop a file system?</p>
  </div>
  <div class="page">
    <p>Case Study: Ceph  Backend object store engine</p>
    <p>FileStore : mapping  KStore : packing  BlueStore</p>
    <p>FileStore</p>
    <p>OSD</p>
    <p>BlueStore</p>
    <p>File system</p>
    <p>Storage Device</p>
    <p>RGW RBD CephFS</p>
    <p>RADOS</p>
    <p>Ceph Architecture Backend Object Store</p>
    <p>KStore</p>
  </div>
  <div class="page">
    <p>Mapping vs. Packing</p>
    <p>KStore (Packing)</p>
    <p>Object Store Log</p>
    <p>FileStore (Mapping)</p>
    <p>Object Store</p>
    <p>Log</p>
    <p>LSM Tree</p>
    <p>Multiple Objects in a File</p>
    <p>Object</p>
    <p>File A</p>
    <p>Object as a File</p>
    <p>FileA B</p>
    <p>File B</p>
    <p>A</p>
  </div>
  <div class="page">
    <p>Experimental Setup  Ceph 12.01  Amazon EC2 Clusters  Intel Xeon quad-core  32GB DRAM  256 GB SSD x 2  Ubuntu Server 16.04  File System : XFS (recommended in Ceph)  Backend: FileStore, KStore  Benchmark: Rados  Metric: IOPS, throughput, write traffic</p>
  </div>
  <div class="page">
    <p>Performance  Small Write (4KB)</p>
    <p>KStore performs better than FileStore by 1.5x  Write amplification by file metadata</p>
    <p>Ksto re</p>
    <p>File stor</p>
    <p>e Ksto</p>
    <p>re File</p>
    <p>stor e0.0</p>
    <p>R at</p>
    <p>io w</p>
    <p>rto O</p>
    <p>rig in</p>
    <p>al W</p>
    <p>rit e</p>
    <p>Original Logging Compaction Filesystem</p>
    <p>Original write traffic Kstore(4KB) 864 MB Kstore(1MB) 2.4 GB Filestore(4KB) 332 MB Filestore(1MB) 3.8 GB</p>
    <p>IO P</p>
    <p>S</p>
    <p>FileStore KStore</p>
    <p>File stor</p>
    <p>e Ksto</p>
    <p>re File</p>
    <p>stor e</p>
    <p>Ksto re0.0</p>
    <p>R at</p>
    <p>io w</p>
    <p>rto O</p>
    <p>rig in</p>
    <p>al W</p>
    <p>rit e</p>
    <p>Original Logging Compaction Filesystem</p>
    <p>Write Traffic BreakdownAverage IOPS</p>
  </div>
  <div class="page">
    <p>Performance  Large Write (1MB)</p>
    <p>FileStore outperforms KStore by 1.6x  Write amplification by compaction</p>
    <p>IO P</p>
    <p>S</p>
    <p>FileStore KStore Ksto</p>
    <p>re File</p>
    <p>stor e</p>
    <p>Ksto re</p>
    <p>File stor</p>
    <p>e0.0 1.0 2.0 3.0 4.0 5.0 6.0 7.0 8.0 9.0</p>
    <p>R at</p>
    <p>io w</p>
    <p>rto O</p>
    <p>rig in</p>
    <p>al W</p>
    <p>rit e</p>
    <p>Original Logging Compaction Filesystem</p>
    <p>Original write traffic Kstore(4KB) 864 MB Kstore(1MB) 2.4 GB Filestore(4KB) 332 MB Filestore(1MB) 3.8 GB</p>
    <p>File stor</p>
    <p>e Ksto</p>
    <p>re File</p>
    <p>stor e</p>
    <p>Ksto re0.0</p>
    <p>R at</p>
    <p>io w</p>
    <p>rto O</p>
    <p>rig in</p>
    <p>al W</p>
    <p>rit e</p>
    <p>Original Logging Compaction FilesystemFileStore</p>
    <p>KStore</p>
    <p>Write Traffic BreakdownAverage IOPS</p>
  </div>
  <div class="page">
    <p>Performance  Lack of atomic update support in file systems  Double-write penalty of logging  Halve bandwidth in large writes</p>
    <p>File stor</p>
    <p>e Ksto</p>
    <p>re File</p>
    <p>stor e</p>
    <p>Ksto re0.0</p>
    <p>R at</p>
    <p>io w</p>
    <p>rto O</p>
    <p>rig in</p>
    <p>al W</p>
    <p>rit e</p>
    <p>Original Logging Compaction Filesystem</p>
    <p>Ksto re</p>
    <p>File stor</p>
    <p>e Ksto</p>
    <p>re File</p>
    <p>stor e0.0</p>
    <p>R at</p>
    <p>io w</p>
    <p>rto O</p>
    <p>rig in</p>
    <p>al W</p>
    <p>rit e</p>
    <p>Original Logging Compaction Filesystem</p>
    <p>Original write traffic Kstore(4KB) 864 MB Kstore(1MB) 2.4 GB Filestore(4KB) 332 MB Filestore(1MB) 3.8 GB</p>
    <p>Write Traffic Breakdown</p>
  </div>
  <div class="page">
    <p>QoS  FileStore</p>
    <p>Time(s)</p>
    <p>W rit</p>
    <p>e (M</p>
    <p>iB )</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (M</p>
    <p>B /s</p>
    <p>)</p>
    <p>BG-Write Throughputfilestore FS: XFS W: 4KB</p>
    <p>Performance Write Traffic</p>
    <p>Time(s)</p>
    <p>W rit</p>
    <p>e (M</p>
    <p>iB )</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (M</p>
    <p>B /s</p>
    <p>)</p>
    <p>BG-Write Throughputfilestore FS: XFS W: 1MB</p>
    <p>Page Cache</p>
    <p>Storage</p>
    <p>Periodic Flush w. Buffered I/O Transaction Entanglement</p>
  </div>
  <div class="page">
    <p>QoS  KStore</p>
    <p>Time(s)</p>
    <p>W rit</p>
    <p>e (M</p>
    <p>iB )</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (M</p>
    <p>B /s</p>
    <p>)</p>
    <p>BG-Write Throughputkstore FS: XFS W: 4KB</p>
    <p>Throughput: 40MB/s0 10 20 30 40 50 60</p>
    <p>Time(s)</p>
    <p>W rit</p>
    <p>e (M</p>
    <p>iB )</p>
    <p>ro ug</p>
    <p>hp ut</p>
    <p>(M B</p>
    <p>/s )</p>
    <p>BG-Write Throughputkstore FS: XFS W: 1MB</p>
    <p>Consistently Poor</p>
    <p>User-level Cache</p>
    <p>Storage Frequent Compaction</p>
    <p>Write amplification by merge</p>
  </div>
  <div class="page">
    <p>Summary  Performance penalties of file systems</p>
    <p>Small objects seriously suffer from write amplification caused by filesystem metadata</p>
    <p>Large writes are sensitive to write traffic increase by Logging in common, and frequent compaction in packing architecture.</p>
    <p>Buffered I/O and out-of-control flush mechanism in file systems makes it challenging to support QoS.</p>
  </div>
  <div class="page">
    <p>Contents  Motivation  Problem Analysis  SwimStore  Performance Evaluation  Conclusion</p>
  </div>
  <div class="page">
    <p>SwimStore  Shadowing with Immutable Metadata Store  Provide consistently excellent performance for</p>
    <p>all object sizes running over a file system</p>
  </div>
  <div class="page">
    <p>Strategy 1. In-file shadowing</p>
    <p>SwimStore</p>
    <p>File</p>
    <p>Object</p>
    <p>Log</p>
    <p>Direct I/O</p>
    <p>A</p>
    <p>A</p>
    <p>B</p>
    <p>Problems  Filesystem metadata overhead  Double-write penalty  Performance fluctuation  Compaction cost</p>
    <p>key, offset, length</p>
    <p>Indexing</p>
  </div>
  <div class="page">
    <p>Strategy 1. In-file shadowing</p>
    <p>SwimStore</p>
    <p>File</p>
    <p>Synchronous Direct I/O</p>
    <p>A</p>
    <p>A</p>
    <p>User-facing Latency increases!</p>
    <p>File</p>
    <p>Raw Device Logging</p>
    <p>A</p>
    <p>Log</p>
    <p>Asynchronous Buffered I/O</p>
    <p>A</p>
    <p>FileStore SwimStore</p>
    <p>File System</p>
  </div>
  <div class="page">
    <p>SwimStore  File system access is slower than raw device access</p>
    <p>File system metadata (e.g., inode, allocation bitmap, etc.)  Transaction entanglement</p>
    <p>File</p>
    <p>Synchronous Direct I/O</p>
    <p>A</p>
    <p>A</p>
    <p>File System</p>
    <p>m m m m</p>
  </div>
  <div class="page">
    <p>SwimStore  Strategy 2. Metadata-Immutable Container</p>
    <p>File</p>
    <p>Synchronous Direct I/O</p>
    <p>A</p>
    <p>A</p>
    <p>File System</p>
    <p>m m m m</p>
    <p>Per-file</p>
    <p>Single file</p>
    <p>Raw device</p>
    <p>MetadataImmutable Container</p>
    <p>Latency (4KB write)</p>
    <p>Create a container file and allocate space in advance</p>
  </div>
  <div class="page">
    <p>Strategy 3. Hole-punching with Buddy-like Allocation</p>
    <p>SwimStore</p>
    <p>Shadowing technique requires the recycling of obsolete data space</p>
  </div>
  <div class="page">
    <p>Strategy 3. Hole-punching with Buddy-like Allocation</p>
    <p>SwimStore</p>
    <p>Opportunities (+) Filesystem has infinite address space (+) Filesystem provides physical space reclamation with punch-hole</p>
    <p>.</p>
    <p>Hole-punching</p>
  </div>
  <div class="page">
    <p>Strategy 3. Hole-punching with Buddy-like Allocation</p>
    <p>SwimStore</p>
    <p>Too small holes severely fragments space</p>
    <p>Logical address</p>
    <p>Physical address</p>
    <p>New object</p>
  </div>
  <div class="page">
    <p>SwimStore  Strategy 3. Hole-punching with Buddy-like</p>
    <p>Allocation</p>
    <p>. Hole-punching for large holes</p>
    <p>GC for small holes</p>
  </div>
  <div class="page">
    <p>Architecture</p>
    <p>SwimStore</p>
    <p>Container File Pool Metadata (Indexing, attributes, etc.)</p>
    <p>Intent Log (metadata, checksum)</p>
    <p>LSM-Tree (LevelDB)</p>
  </div>
  <div class="page">
    <p>Contents  Motivation  Problem Analysis  SwimStore  Performance Evaluation  Conclusion</p>
  </div>
  <div class="page">
    <p>Experimental Setup  Ceph 12.01, C++ 12K LOC  Amazon EC2 Clusters  Intel Xeon quad-core  32GB DRAM  256 GB SSD x 2  Ubuntu Server 16.04  File System : XFS (recommended in Ceph)  Backend: FileStore, KStore, BlueStore, SwimStore  Benchmark: Rados  Metric: IOPS, throughput, write traffic</p>
  </div>
  <div class="page">
    <p>Performance Evaluation  IOPS</p>
    <p>IOSize</p>
    <p>R at</p>
    <p>io w</p>
    <p>rto F</p>
    <p>ile S</p>
    <p>to re</p>
    <p>o ps</p>
    <p>/s</p>
    <p>o ps</p>
    <p>/s</p>
    <p>op s/</p>
    <p>s</p>
    <p>op s/</p>
    <p>s</p>
    <p>ps /s</p>
    <p>FileStore BlueStore SwimStore KStore</p>
    <p>Small Write 2.5x better than FileStore 1.6x better than BlueStore 1.1x better than KStore</p>
    <p>Large Write 1.8x better than FileStore 3.1x better than KStore</p>
    <p>FileStore</p>
    <p>BlueStore</p>
    <p>SwimStore KStore</p>
  </div>
  <div class="page">
    <p>Performance Evaluation  Write Traffic</p>
    <p>IOSize</p>
    <p>R at</p>
    <p>io w</p>
    <p>rto S</p>
    <p>w im</p>
    <p>S to</p>
    <p>re</p>
    <p>(M B</p>
    <p>)</p>
    <p>(M B</p>
    <p>)</p>
    <p>(M B</p>
    <p>)</p>
    <p>(M B</p>
    <p>)</p>
    <p>(M B</p>
    <p>)</p>
    <p>FileStore BlueStore SwimStore KStore</p>
    <p>FileStore</p>
    <p>BlueStore SwimStore</p>
    <p>KStore</p>
  </div>
  <div class="page">
    <p>Contents  Motivation  Problem Analysis  Solution  Performance Evaluation  Conclusion</p>
  </div>
  <div class="page">
    <p>Conclusion  Explore design patterns to build an object</p>
    <p>store atop a local file system  SwimStore: a new backend object store</p>
    <p>In-file shadowing  Immutable metadata container  Hole-punching with buddy-like allocation</p>
    <p>Provide high performance and little performance variations</p>
    <p>Retain all benefits of the file system</p>
  </div>
  <div class="page">
    <p>Thank you</p>
  </div>
</Presentation>
