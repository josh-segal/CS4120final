<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Consistent and Durable Data Structures for</p>
    <p>Non-Volatile Byte-Addressable Memory</p>
    <p>Shivaram Venkataraman*, Niraj Tolia, Parthasarathy Ranganathan* and Roy H. Campbell</p>
    <p>*HP Labs, Palo Alto, Maginatics, and University of Illinois, Urbana-Champaign</p>
  </div>
  <div class="page">
    <p>Non-Volatile Byte-Addressable Memory (NVBM)</p>
    <p>Memristor</p>
    <p>Phase Change Memory Memristor</p>
  </div>
  <div class="page">
    <p>Non-Volatile Byte-Addressable Memory (NVBM)</p>
    <p>Scalable</p>
    <p>Non-Volatile</p>
    <p>Lower energy</p>
    <p>Memristor</p>
  </div>
  <div class="page">
    <p>Access Times</p>
    <p>N an</p>
    <p>o se</p>
    <p>co n</p>
    <p>d s</p>
    <p>Hard Disk Writes  3 ms Write to SLC Flash  200 s</p>
    <p>Processor clock cycle  1ns Access L2 cache  10ns Update DRAM  55ns</p>
  </div>
  <div class="page">
    <p>Access Times</p>
    <p>N an</p>
    <p>o se</p>
    <p>co n</p>
    <p>d s</p>
    <p>Hard Disk Writes  3 ms Write to SLC Flash  200 s</p>
    <p>Processor clock cycle  1ns Access L2 cache  10ns Update DRAM  55ns</p>
    <p>Writes to PCM / Memristor  100-150 ns</p>
  </div>
  <div class="page">
    <p>Data Stores - Disk</p>
    <p>L1 Cache</p>
    <p>Traditional DB</p>
    <p>DRAM</p>
    <p>Core1 Core2</p>
    <p>L1 Cache L1 Cache</p>
    <p>L2 Cache</p>
    <p>Disk</p>
    <p>File systems</p>
  </div>
  <div class="page">
    <p>DRAM</p>
    <p>Data Stores - DRAM</p>
    <p>Core1 Core2</p>
    <p>L1 Cache L1 Cache</p>
    <p>L2 Cache</p>
    <p>Commit Log - Disk</p>
    <p>RAMCloud memcached Memory-based DB</p>
  </div>
  <div class="page">
    <p>DRAM</p>
    <p>Data Stores - NVBM</p>
    <p>Core1 Core2</p>
    <p>L1 Cache L1 Cache</p>
    <p>L2 Cache</p>
    <p>Non-Volatile Memory</p>
    <p>Single-level store</p>
  </div>
  <div class="page">
    <p>Challenges</p>
    <p>Consistency Durability</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Motivation  Consistent durable data structures</p>
    <p>Consistent durable B-Tree  Tembo  Distributed Data Store Implementation</p>
    <p>Evaluation</p>
  </div>
  <div class="page">
    <p>Consistent Durable Data Structures</p>
    <p>Versioning for consistency across failures</p>
    <p>Restore to last consistent version on recovery</p>
    <p>Atomic change across versions</p>
    <p>No new processor extensions!</p>
  </div>
  <div class="page">
    <p>Versioning</p>
    <p>Totally ordered  Increasing natural numbers</p>
    <p>Every update creates a new version</p>
    <p>Last consistent version  Stored in a well-known location  Used by reader threads and for recovery</p>
  </div>
  <div class="page">
    <p>Consistent Durable B-Tree</p>
    <p>B  Size of a B-Tree node</p>
    <p>Key [start, end) Deleted entry</p>
    <p>Live entry</p>
  </div>
  <div class="page">
    <p>Lookup</p>
    <p>Find key 20 at version 5</p>
  </div>
  <div class="page">
    <p>Insert / Split</p>
  </div>
  <div class="page">
    <p>Garbage Collection</p>
  </div>
  <div class="page">
    <p>Tembo  Distributed Data Store Implementation</p>
    <p>Based on open source key-value store</p>
    <p>Widely used in production</p>
    <p>In-memory dataset</p>
  </div>
  <div class="page">
    <p>Tembo  Distributed Data Store Implementation</p>
    <p>Key Value Server</p>
    <p>Consistent durable B-Tree</p>
    <p>Single writer, shared reader</p>
    <p>Consistent Hashing</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Motivation  Consistent durable data structures</p>
    <p>Consistent durable B-Tree  Tembo  Distributed Data Store Implementation</p>
    <p>Evaluation</p>
  </div>
  <div class="page">
    <p>Ease of Integration</p>
    <p>Lines of Code Original STX B-Tree 2110 CDDS Modifications 1902 (90%)</p>
    <p>Redis (v2.0.0-rc4) 18539 Tembo Modifications 321 (1.7%)</p>
  </div>
  <div class="page">
    <p>Evaluation - Setup</p>
    <p>API Microbenchmarks  Compare with Berkeley DB  Tembo: Versioning vs. write-ahead logging</p>
    <p>End-to-End Comparison  NoSQL systems  Cassandra  Yahoo Cloud Serving Benchmark</p>
    <p>15 node test cluster  13 servers, 2 clients  720 GB RAM, 120 cores</p>
  </div>
  <div class="page">
    <p>Durability - Logging vs. Versioning</p>
    <p>T hr</p>
    <p>o ug</p>
    <p>hp ut</p>
    <p>( O</p>
    <p>ps /s</p>
    <p>ec )</p>
    <p>Value size (bytes)</p>
    <p>Redis - BTree+Logging Redis - Hashtable+Logging Tembo - CDDS BTree</p>
  </div>
  <div class="page">
    <p>Yahoo Cloud Serving Benchmark</p>
    <p>O p</p>
    <p>s/ se</p>
    <p>c</p>
    <p>Client Threads</p>
    <p>Tembo Cassandra-inmemory Cassandra-disk</p>
  </div>
  <div class="page">
    <p>Furthermore</p>
    <p>Algorithms for deletion</p>
    <p>Analysis for space usage and height of B-Tree</p>
    <p>Durability techniques for current processors</p>
  </div>
  <div class="page">
    <p>Related Work</p>
    <p>Multi-version data structures  Used in transaction time databases</p>
    <p>NVBM based systems  BPFS  File system (SOSP 2009)  NV-Heaps  Transaction Interface (ASPLOS 2011)</p>
    <p>In-memory data stores  H-Store  MIT, Brown University, Yale University  RAMCloud  Stanford University</p>
  </div>
  <div class="page">
    <p>Work-in-progress</p>
    <p>Robust reliability testing</p>
    <p>Support for transaction-like operations</p>
    <p>Integration of versioning and wear-leveling</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Changes in storage media  Rethink software stack</p>
    <p>Consistent Durable Data Structures  Single-level store  Durability through versioning  Up to 286% faster than memory-backed systems</p>
  </div>
</Presentation>
