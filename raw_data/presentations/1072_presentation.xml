<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Log-free concurrent data structures</p>
    <p>Tudor David (IBM Research, Zurich) Aleksandar Dragojevic (Microsoft Research, Cambridge) Rachid Guerraoui (EPFL) Igor Zablotchi (EPFL)</p>
  </div>
  <div class="page">
    <p>In-memory data structures  at the core of many systems</p>
    <p>Lists</p>
    <p>Trees</p>
    <p>Hash tables</p>
    <p>Skip lists</p>
    <p>Interface:  insert(k,v);  remove(k);  find(k);</p>
  </div>
  <div class="page">
    <p>NV-RAM  expected to become ubiquitous</p>
    <p>An ideal data structure:  fast  scalable  durable</p>
    <p>An ideal data structure:  fast  scalable</p>
    <p>How can we ensure performance + consistent durable state?</p>
  </div>
  <div class="page">
    <p>Upcoming technology: Non-volatile RAM</p>
    <p>L1 cache L2 cache L3 cache DRAM FeRAM PCM MRAM STT-RAM</p>
    <p>Read 1 ns 3 ns 10 ns 60 ns 100 ns 70 ns 62 ns 60 ns</p>
    <p>Write 1 ns 3 ns 10 ns 60 ns 125 ns 150 ns 62 ns 60 ns</p>
    <p>Latencies:</p>
    <p>NV-RAM:  Durable  Byte-addressable  Latencies  comparable with DRAM  Programming model - map to area of virtual memory</p>
    <p>Source: nv_malloc: Memory Allocation for NVRAM, Schwalb et al., 2015</p>
  </div>
  <div class="page">
    <p>Persistent, fast and correct software  not trivial</p>
    <p>Write-back cache: 1: mark allocation 2: initialize mem 3: change link 1 4: change link 2 5: done = 1</p>
    <p>NV memory:</p>
    <p>crash</p>
    <p>Upon restart: incorrect state</p>
    <p>CLWB A CLWB B CLWB C</p>
    <p>Batching write-backs: beneficial for performance</p>
    <p>time</p>
    <p>cache line write-back</p>
    <p>store fence</p>
  </div>
  <div class="page">
    <p>Write-back cache: 1: mark allocation 2: initialize mem 3: change link 1 4: change link 2 5: done = 1</p>
    <p>Frequent waiting for data to be persisted</p>
    <p>NV memory: 1: mark allocation 2: initialize mem 3: change link 1crash</p>
    <p>Upon restart: undo incomplete operations</p>
    <p>Persistent, fast and correct software  not trivial</p>
  </div>
  <div class="page">
    <p>Persist latency &gt;&gt; cache latency</p>
    <p>For performance  minimize time waiting for data to be persisted; Logging  problematic:  We need to issue write-back to the log before each update;  The log entry must be persisted before we perform the</p>
    <p>update;</p>
    <p>Our work: minimize logging and write backs in data structures</p>
  </div>
  <div class="page">
    <p>Our techniques for fast durable data structures 1. Link-and-persist:</p>
    <p>Use lock-free algorithms: they never leave the structure in an inconsistent state</p>
    <p>no logging in the data structure algorithm Correctness: link-and-persist</p>
    <p>Log-free concurrent data structures</p>
  </div>
  <div class="page">
    <p>Correct durable implementations?</p>
    <p>Use lock-free algorithms: they never leave the structure in an inconsistent state</p>
    <p>no logging in the data structure algorithm</p>
    <p>Correctness condition: durable linearizability After a restart, the structure reflects:  all operations completed (linearized) before the crash;  (potentially) some operations that were ongoing when the crash occurred;</p>
    <p>persist</p>
    <p>If crash between steps 2 and 3,</p>
    <p>violation of durable linearizability</p>
  </div>
  <div class="page">
    <p>Link-and-persist: achieving correctness</p>
    <p>persist</p>
    <p>Other threads - persist marked link if needed</p>
  </div>
  <div class="page">
    <p>Going further: defer persisting links</p>
    <p>key 1 link addr1</p>
    <p>key z link addr z</p>
    <p>key y link addr y</p>
    <p>Insert(X) X link addr X</p>
    <p>Read(X)</p>
    <p>write-back all links</p>
    <p>A link only needs to be persisted when an operation depends on it</p>
    <p>Store all un-persisted links in a fast concurrent cache</p>
    <p>When an operation directly depends on a link in the cache: batch write-backs of all links in the cache (and empty the cache)</p>
  </div>
  <div class="page">
    <p>Memory allocation and reclamation</p>
    <p>Insertion Deletion</p>
    <p>Instead of logging each allocation, keep track of recently used memory areas</p>
    <p>alloc 0xa010 alloc 0xa110 alloc 0xa210</p>
    <p>Locality of allocations/deallocations</p>
    <p>At recovery, traverse nodes in active areas at the moment of the crash/restart</p>
  </div>
  <div class="page">
    <p>Experimental evaluation</p>
    <p>No fast byte-addressable NV-RAM for now;  Inject latencies of flushes and write-backs to NV-RAM based on</p>
    <p>published values;  Shown experiments:125 ns;</p>
    <p>Comparison with redo-log-based implementations  Also provide durable linearizability;</p>
  </div>
  <div class="page">
    <p>Throughput vs. transactional redo-log-based</p>
    <p>Consistently faster than log-based data structures Particularly suited to small and medium sized data structures</p>
    <p>at e</p>
    <p>th ro</p>
    <p>ug hp</p>
    <p>ut r</p>
    <p>el at</p>
    <p>iv e</p>
    <p>to</p>
    <p>lo g</p>
    <p>ba se</p>
    <p>d im</p>
    <p>pl em</p>
    <p>en ta</p>
    <p>ti o n</p>
    <p># of elements in structure</p>
    <p>Hash table</p>
    <p>Linked lists, BSTs, skip lists in the paper</p>
  </div>
  <div class="page">
    <p>NV-Memcached</p>
    <p>T hr</p>
    <p>o ug</p>
    <p>hp ut</p>
    <p>( 10</p>
    <p>s) 10 keys</p>
    <p>memcached</p>
    <p>memcached-clht</p>
    <p>nv-memcached</p>
    <p>R ec</p>
    <p>o ve</p>
    <p>ry /w</p>
    <p>ar m</p>
    <p>-u p</p>
    <p>ti m</p>
    <p>e (m</p>
    <p>s) 10 keys</p>
    <p>memcached</p>
    <p>memcached-clht</p>
    <p>nv-memcached</p>
  </div>
  <div class="page">
    <p>Log-free concurrent data structures 1. Link-and-persist: Use lock-free algorithms: they never leave the structure in an inconsistent state</p>
    <p>no logging in the data structure algorithm</p>
    <p>Correctness: link-and-persist</p>
    <p>Thank you! Up to several times throughput improvement</p>
  </div>
</Presentation>
