<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>CAERUS: Chronoscopic Assessment Engine for</p>
    <p>Recovering Undocumented Specifications</p>
    <p>Adam Seitz,1 Adam Satar, 1 Brian Burke, 1 Lok Yan,2 Zachary Estrada1</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Modernizing/Protecting Legacy Systems</p>
    <p>Legacy SystemModern System</p>
    <p>Verifier</p>
  </div>
  <div class="page">
    <p>Undocumented Specification: Toy Example</p>
    <p>Automate It</p>
  </div>
  <div class="page">
    <p>We want to automate the task of finding timing sensitivities</p>
    <p>?</p>
  </div>
  <div class="page">
    <p>Goal: a tool for uncovering timing sensitivities</p>
    <p>Automated: run with minimal user interaction</p>
    <p>Versatile: applicable to different target devices</p>
    <p>Extensible: system capabilities can be augmented</p>
  </div>
  <div class="page">
    <p>Chronoscopic Assessment Engine for Recovering Undocumented Specifications</p>
    <p>Legacy System</p>
  </div>
  <div class="page">
    <p>User Interface</p>
    <p>Define Inputs/Outputs  Define fixed signals  Control Experiments</p>
    <p>Output timing properties</p>
    <p>Test Routine</p>
    <p>Mutate input signals of interest to perturb a suspected sensitivity</p>
    <p>Report acceptable timing variations</p>
    <p>Done?</p>
    <p>No</p>
    <p>Yes</p>
    <p>Behavior model</p>
    <p>Peripherals</p>
    <p>Play signals  Record outputs</p>
    <p>Evaluate target device behavior</p>
  </div>
  <div class="page">
    <p>Example Test Routine: Button Duration</p>
    <p>ResponseButton press</p>
    <p>Configurable duration to register button press</p>
  </div>
  <div class="page">
    <p>Example Test Routine: Button Duration</p>
    <p>Max: 250 msMin: 1 s Try: 125 ms</p>
    <p>Validate with Behavior Model</p>
    <p>Try: 62.5 ms</p>
    <p>RST</p>
    <p>Button</p>
    <p>Response</p>
  </div>
  <div class="page">
    <p>Example Test Routine: Button Duration</p>
    <p>HS = High Speed crystal oscillator (precise)</p>
  </div>
  <div class="page">
    <p>Current &amp; Future Work</p>
  </div>
  <div class="page">
    <p>Security Applications: Fault Injection Attacks</p>
    <p>CAERUS as an embedded device fuzzer</p>
    <p>Clock glitching (e.g., instruction skipping)</p>
    <p>CAERUS is useful for tasks such as finding the right clock cycle, etc</p>
  </div>
  <div class="page">
    <p>Going Forward</p>
    <p>Released as open-source under Mozilla Public License</p>
    <p>Stream-lining installation, set-up</p>
    <p>Currently have library support for RS232, looking to add CAN, J1939</p>
    <p>Analog to test other attacks (e.g., brownout, reset)</p>
    <p>Combine peripheral devices</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>Legacy systems &amp; timing sensitivity</p>
    <p>CAERUS architecture</p>
    <p>Minimum button duration example</p>
    <p>Security applications</p>
    <p>Source available on github: https://github.com/caerus-timing</p>
  </div>
</Presentation>
