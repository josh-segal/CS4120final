<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>ZebRAM: Comprehensive and Compatible Software Protection against Rowhammer Attacks</p>
    <p>Radhesh Krishnan Konoth, Marco Oliverio, Andrei Tatar, Dennis Andriesse, Herbert Bos, Cristiano Giuffrida and Kaveh Razavi</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Rowhammer -- a DRAM defect that allows an attacker to exploit a system</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Rowhammer -- a DRAM defect that allows an attacker to exploit a system  Even if there is no software bug (and formally verified)</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Rowhammer -- a DRAM defect that allows an attacker to exploit a system  Even if there is no software bug (and formally verified)  87% of DDR3 DIMMs are vulnerable (Kim et al. ISCA14)</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Rowhammer -- a DRAM defect that allows an attacker to exploit a system  Even if there is no software bug (and formally verified)  87% of DDR3 DIMMs are vulnerable (Kim et al. ISCA14)  DDR4 also contain this bug (Van der Veen et al. CCS17)</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Rowhammer -- a DRAM defect that allows an attacker to exploit a system  Even if there is no software bug (and formally verified)  87% of DDR3 DIMMs are vulnerable (Kim et al. ISCA14)  DDR4 also contain this bug (Van der Veen et al. CCS17)</p>
    <p>Existing defenses are ineffective</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Rowhammer -- a DRAM defect that allows an attacker to exploit a system  Even if there is no software bug (and formally verified)  87% of DDR3 DIMMs are vulnerable (Kim et al. ISCA14)  DDR4 also contain this bug (Van der Veen et al. CCS17)</p>
    <p>Existing defenses are ineffective  Hardware solutions like ECC, TRR are found to ineffective</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Rowhammer -- a DRAM defect that allows an attacker to exploit a system  Even if there is no software bug (and formally verified)  87% of DDR3 DIMMs are vulnerable (Kim et al. ISCA14)  DDR4 also contain this bug (Van der Veen et al. CCS17)</p>
    <p>Existing defenses are ineffective  Hardware solutions like ECC, TRR are found to ineffective (Cojocar et. al S&amp;P19, Gruss et al.</p>
    <p>Blackhat18)</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Rowhammer -- a DRAM defect that allows an attacker to exploit a system  Even if there is no software bug (and formally verified)  87% of DDR3 DIMMs are vulnerable (Kim et al. ISCA14)  DDR4 also contain this bug (Van der Veen et al. CCS17)</p>
    <p>Existing defenses are ineffective  Hardware solutions like ECC, TRR are found to ineffective (Cojocar et. al S&amp;P19, Gruss et al.</p>
    <p>Blackhat18)  ANVIL - CPU performance counters to detect Rowhammer attack (AWEKE et. al ASPLOS16)</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Rowhammer -- a DRAM defect that allows an attacker to exploit a system  Even if there is no software bug (and formally verified)  87% of DDR3 DIMMs are vulnerable (Kim et al. ISCA14)  DDR4 also contain this bug (Van der Veen et al. CCS17)</p>
    <p>Existing defenses are ineffective  Hardware solutions like ECC, TRR are found to ineffective (Cojocar et. al S&amp;P19, Gruss et al.</p>
    <p>Blackhat18)  ANVIL - fails against DMA-based attacks (Van der Veen et al. CCS17)</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Rowhammer -- a DRAM defect that allows an attacker to exploit a system  Even if there is no software bug (and formally verified)  87% of DDR3 DIMMs are vulnerable (Kim et al. ISCA14)  DDR4 also contain this bug (Van der Veen et al. CCS17)</p>
    <p>Existing defenses are ineffective  Hardware solutions like ECC, TRR are found to ineffective (Cojocar et. al S&amp;P19, Gruss et al.</p>
    <p>Blackhat18)  ANVIL - fails against DMA-based attacks (Van der Veen et al. CCS17)  CATT - isolates different security domains using guard rows (Brasser et al. SEC17)</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Rowhammer -- a DRAM defect that allows an attacker to exploit a system  Even if there is no software bug (and formally verified)  87% of DDR3 DIMMs are vulnerable (Kim et al. ISCA14)  DDR4 also contain this bug (Van der Veen et al. CCS17)</p>
    <p>Existing defenses are ineffective  Hardware solutions like ECC, TRR are found to ineffective (Cojocar et. al S&amp;P19, Gruss et al.</p>
    <p>Blackhat18)  ANVIL - fails against DMA-based attacks (Van der Veen et al. CCS17)  CATT - fails because different security domains share memory (Gruss et al. S&amp;P18)</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Rowhammer -- a DRAM defect that allows an attacker to exploit a system  Even if there is no software bug (and formally verified)  87% of DDR3 DIMMs are vulnerable (Kim et al. ISCA14)  DDR4 also contain this bug (Van der Veen et al. CCS17)</p>
    <p>Existing defenses are ineffective  Hardware solutions like ECC, TRR are found to ineffective (Cojocar et. al S&amp;P19, Gruss et al.</p>
    <p>Blackhat18)  ANVIL - fails against DMA-based attacks (Van der Veen et al. CCS17)  CATT - fails because different security domains share memory (Gruss et al. S&amp;P18)</p>
    <p>ZebRAM</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Rowhammer -- a DRAM defect that allows an attacker to exploit a system  Even if there is no software bug (and formally verified)  87% of DDR3 DIMMs are vulnerable (Kim et al. ISCA14)  DDR4 also contain this bug (Van der Veen et al. CCS17)</p>
    <p>Existing defenses are ineffective  Hardware solutions like ECC, TRR are found to ineffective (Cojocar et. al S&amp;P19, Gruss et al.</p>
    <p>Blackhat18)  ANVIL - fails against DMA-based attacks (Van der Veen et al. CCS17)  CATT - fails because different security domains share memory (Gruss et al. S&amp;P18)</p>
    <p>ZebRAM  The first comprehensive and compatible software-based solution ...</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Rowhammer -- a DRAM defect that allows an attacker to exploit a system  Even if there is no software bug (and formally verified)  87% of DDR3 DIMMs are vulnerable (Kim et al. ISCA14)  DDR4 also contain this bug (Van der Veen et al. CCS17)</p>
    <p>Existing defenses are ineffective  Hardware solutions like ECC, TRR are found to ineffective (Cojocar et. al S&amp;P19, Gruss et al.</p>
    <p>Blackhat18)  ANVIL - fails against DMA-based attacks (Van der Veen et al. CCS17)  CATT - fails because different security domains share memory (Gruss et al. S&amp;P18)</p>
    <p>ZebRAM  The first comprehensive and compatible software-based solution ...   to defend against this hardware bug.</p>
  </div>
  <div class="page">
    <p>Rowhammer bug</p>
  </div>
  <div class="page">
    <p>Rowhammer bug</p>
    <p>DRAM rows consists of DRAM cells</p>
  </div>
  <div class="page">
    <p>Rowhammer bug</p>
    <p>DRAM rows consists of DRAM cells</p>
    <p>Each cell can store one bit information</p>
  </div>
  <div class="page">
    <p>Rowhammer bug</p>
    <p>DRAM rows consists of DRAM cells</p>
    <p>Each cell can store one bit information</p>
    <p>Up on proximate access, DRAM cells leak charge to neighbouring cells</p>
    <p>Aggressor row</p>
  </div>
  <div class="page">
    <p>Rowhammer bug</p>
    <p>DRAM rows consists of DRAM cells</p>
    <p>Each cell can store one bit information</p>
    <p>Up on proximate access, DRAM cells leak charge to neighbouring cells</p>
    <p>Aggressor row</p>
  </div>
  <div class="page">
    <p>Rowhammer bug</p>
    <p>DRAM rows consists of DRAM cells</p>
    <p>Each cell can store one bit information</p>
    <p>Up on proximate access, DRAM cells leak charge to neighbouring cells</p>
    <p>Aggressor row</p>
  </div>
  <div class="page">
    <p>Rowhammer bug</p>
    <p>DRAM rows consists of DRAM cells</p>
    <p>Each cell can store one bit information</p>
    <p>Up on proximate access, DRAM cells leak charge to neighbouring cells</p>
    <p>Aggressor row</p>
  </div>
  <div class="page">
    <p>Rowhammer bug</p>
    <p>DRAM rows consists of DRAM cells</p>
    <p>Each cell can store one bit information</p>
    <p>Up on proximate access, DRAM cells leak charge to neighbouring cells</p>
    <p>Aggressor row</p>
  </div>
  <div class="page">
    <p>Rowhammer bug</p>
    <p>DRAM rows consists of DRAM cells</p>
    <p>Each cell can store one bit information</p>
    <p>Up on proximate access, DRAM cells leak charge to neighbouring cells</p>
    <p>and induce bit flips in them: (1 =&gt; 0) or (0 =&gt; 1)</p>
    <p>Victim row</p>
    <p>Bit flips</p>
    <p>Aggressor row</p>
    <p>Aggressor row</p>
    <p>Victim row</p>
  </div>
  <div class="page">
    <p>Rowhammer bug</p>
    <p>DRAM rows consists of DRAM cells</p>
    <p>Each cell can store one bit information</p>
    <p>Up on proximate access, DRAM cells leak charge to neighbouring cells</p>
    <p>and induce bit flips in them: (1 =&gt; 0) or (0 =&gt; 1)</p>
    <p>Rowhammer bug</p>
    <p>Victim row</p>
    <p>Bit flips</p>
    <p>Aggressor row</p>
    <p>Aggressor row</p>
    <p>Victim row</p>
  </div>
  <div class="page">
    <p>How is this a security problem?</p>
    <p>An attacker can flips a bit in:</p>
    <p>Cryptographic key, page table entry in kernel e.t.c.   to compromise the system.</p>
  </div>
  <div class="page">
    <p>How is this a security problem?</p>
    <p>An attacker can flips a bit in:</p>
    <p>Cryptographic key, page table entry in kernel e.t.c.   to compromise the system.</p>
    <p>Two important points to note: 1. Attacker should able to read very fast</p>
  </div>
  <div class="page">
    <p>How is this a security problem?</p>
    <p>An attacker can flips a bit in:</p>
    <p>Cryptographic key, page table entry in kernel e.t.c.   to compromise the system.</p>
    <p>Two important points to note: 1. Attacker should able to read very fast 2. Can flip a bit on its neighboring row</p>
  </div>
  <div class="page">
    <p>Solution for many security problems</p>
  </div>
  <div class="page">
    <p>Solution for many security problems</p>
    <p>Isolation</p>
  </div>
  <div class="page">
    <p>Solution for many security problems</p>
    <p>Isolation</p>
    <p>To protect a process A from writing to process Bs memory:</p>
    <p>A B</p>
  </div>
  <div class="page">
    <p>Solution for many security problems</p>
    <p>Isolation</p>
    <p>To protect a process A from writing to process Bs memory:</p>
    <p>We isolate them using virtual address space</p>
    <p>A B</p>
    <p>Virtual Address</p>
  </div>
  <div class="page">
    <p>Isolation approach 1</p>
  </div>
  <div class="page">
    <p>Isolation approach 1</p>
    <p>User space</p>
    <p>Kernel space</p>
  </div>
  <div class="page">
    <p>Isolation approach 1</p>
    <p>User space</p>
    <p>Kernel space</p>
    <p>Guard Rows</p>
  </div>
  <div class="page">
    <p>Isolation approach 1</p>
    <p>User space</p>
    <p>Kernel space</p>
    <p>Guard Rows</p>
    <p>x x x x</p>
  </div>
  <div class="page">
    <p>Isolation approach 1</p>
    <p>CATT uses this approach (Brasser et al. SEC17) User space</p>
    <p>Kernel space</p>
    <p>Guard Rows</p>
  </div>
  <div class="page">
    <p>Isolation approach 1</p>
    <p>CATT uses this approach (Brasser et al. SEC17)</p>
    <p>Limitation :</p>
    <p>Security domains share memory (pagecache) (Gruss et al. S&amp;P18)</p>
    <p>User space</p>
    <p>Kernel space</p>
    <p>Guard Rows</p>
  </div>
  <div class="page">
    <p>Isolation approach 2</p>
    <p>An application can use a custom memory allocator:</p>
    <p>Allocate memory protected by guard rows</p>
  </div>
  <div class="page">
    <p>Isolation approach 2</p>
    <p>An application can use a custom memory allocator:</p>
    <p>Allocate memory protected by guard rows  for storing sensitive data (Tatar et al. ATC18)</p>
    <p>Sensitive data</p>
    <p>DRAM address space</p>
  </div>
  <div class="page">
    <p>Isolation approach 2</p>
    <p>An application can use a custom memory allocator:</p>
    <p>Allocate memory protected by guard rows  for storing sensitive data (Tatar et al. ATC18)</p>
    <p>Limitation:</p>
    <p>Application specific defense</p>
    <p>Sensitive data</p>
    <p>DRAM address space</p>
  </div>
  <div class="page">
    <p>ZebRAM Protect the whole system transparently..</p>
  </div>
  <div class="page">
    <p>ZebRAM Protect the whole system transparently.. ...by placing guard row between every data row!</p>
  </div>
  <div class="page">
    <p>ZebRAM Protect the whole system transparently.. ...by placing guard row between every data row!</p>
    <p>DRAM address space</p>
  </div>
  <div class="page">
    <p>ZebRAM Protect the whole system transparently.. ...by placing guard row between every data row!</p>
    <p>Data row</p>
    <p>Data row</p>
    <p>Data row</p>
    <p>Data row</p>
    <p>Data row</p>
    <p>Data row</p>
    <p>Guard row</p>
    <p>Guard row</p>
    <p>Guard row</p>
    <p>Guard row</p>
    <p>Guard row</p>
    <p>DRAM address space DRAM address space</p>
  </div>
  <div class="page">
    <p>ZebRAM Protect the whole system transparently.. ...by placing guard row between every data row!</p>
    <p>Data row</p>
    <p>Data row</p>
    <p>Data row</p>
    <p>Data row</p>
    <p>Data row</p>
    <p>Data row</p>
    <p>Data region</p>
    <p>Guard region</p>
    <p>Guard row</p>
    <p>Guard row</p>
    <p>Guard row</p>
    <p>Guard row</p>
    <p>Guard row</p>
    <p>DRAM address space</p>
    <p>DRAM address space</p>
  </div>
  <div class="page">
    <p>ZebRAM Protect the whole system transparently.. ...by placing guard row between every data row!</p>
    <p>Data row</p>
    <p>Data row</p>
    <p>Data row</p>
    <p>Data row</p>
    <p>Data row</p>
    <p>Data row</p>
    <p>Data region</p>
    <p>Guard region</p>
    <p>Guard row</p>
    <p>Guard row</p>
    <p>Guard row</p>
    <p>Guard row</p>
    <p>Guard row</p>
    <p>DRAM address space</p>
    <p>DRAM address space</p>
    <p>X</p>
    <p>XX</p>
    <p>X</p>
  </div>
  <div class="page">
    <p>ZebRAM Protect the whole system transparently.. ...by placing guard row between every data row!</p>
    <p>Data row</p>
    <p>Data row</p>
    <p>Data row</p>
    <p>Data row</p>
    <p>Data row</p>
    <p>Data row</p>
    <p>Safe region</p>
    <p>Unsafe region</p>
    <p>Guard row</p>
    <p>Guard row</p>
    <p>Guard row</p>
    <p>Guard row</p>
    <p>Guard row</p>
    <p>DRAM address space</p>
    <p>DRAM address space</p>
    <p>Data region</p>
    <p>X</p>
    <p>XX</p>
    <p>X</p>
  </div>
  <div class="page">
    <p>ZebRAM Protect the whole system transparently.. ...by placing guard row between every data row!</p>
    <p>Data row</p>
    <p>Data row</p>
    <p>Data row</p>
    <p>Data row</p>
    <p>Data row</p>
    <p>Data row</p>
    <p>Safe region for OS</p>
    <p>Unsafe region</p>
    <p>Guard row</p>
    <p>Guard row</p>
    <p>Guard row</p>
    <p>Guard row</p>
    <p>Guard row</p>
    <p>DRAM address space</p>
    <p>DRAM address space</p>
  </div>
  <div class="page">
    <p>ZebRAM Protect the whole system transparently.. ...by placing guard row between every data row!</p>
    <p>Data row</p>
    <p>Data row</p>
    <p>Data row</p>
    <p>Data row</p>
    <p>Data row</p>
    <p>Data row</p>
    <p>Safe region for OS</p>
    <p>Unsafe region</p>
    <p>Guard row</p>
    <p>Guard row</p>
    <p>Guard row</p>
    <p>Guard row</p>
    <p>Guard row</p>
    <p>DRAM address space</p>
    <p>Basic ZebRAM</p>
    <p>DRAM address space</p>
  </div>
  <div class="page">
    <p>How do we achieve these?</p>
  </div>
  <div class="page">
    <p>ZebRAM Challenge 1</p>
    <p>Physical address space</p>
    <p>DRAM address space</p>
    <p>Physical address space</p>
    <p>DRAM address space Physical address space</p>
    <p>Safe region</p>
    <p>Unsafe region</p>
  </div>
  <div class="page">
    <p>ZebRAM Challenge 1</p>
    <p>Physical address space</p>
    <p>DRAM address space</p>
    <p>Physical address space</p>
    <p>DRAM address space Physical address space</p>
    <p>Safe region</p>
    <p>Unsafe region</p>
  </div>
  <div class="page">
    <p>Challenge 1 : Physical address to DRAM address</p>
    <p>Virtual address to Physical address:</p>
  </div>
  <div class="page">
    <p>Challenge 1 : Physical address to DRAM address</p>
    <p>Physical address to DRAM address</p>
  </div>
  <div class="page">
    <p>Challenge 1 : Physical address to DRAM address</p>
    <p>DRAM organized in: channel</p>
  </div>
  <div class="page">
    <p>Challenge 1 : Physical address to DRAM address</p>
    <p>DRAM organized in: channel, DIMM</p>
  </div>
  <div class="page">
    <p>Challenge 1 : Physical address to DRAM address</p>
    <p>DRAM organized in: channel, DIMM, rank</p>
  </div>
  <div class="page">
    <p>Challenge 1 : Physical address to DRAM address</p>
    <p>DRAM organized in: channel, DIMM, rank, bank</p>
  </div>
  <div class="page">
    <p>Challenge 1 : Physical address to DRAM address</p>
    <p>DRAM organized in: channel, DIMM, rank, bank, row</p>
  </div>
  <div class="page">
    <p>Challenge 1 : Physical address to DRAM address</p>
    <p>DRAM organized in: channel, DIMM, rank, bank, row, column</p>
  </div>
  <div class="page">
    <p>Challenge 1 : Physical address to DRAM address</p>
    <p>To understand this mapping:</p>
  </div>
  <div class="page">
    <p>Challenge 1 : Physical address to DRAM address</p>
    <p>To understand this mapping:</p>
    <p>Previous reverse-engineering work (Pessl et al. SEC16)</p>
  </div>
  <div class="page">
    <p>Challenge 1 : Physical address to DRAM address</p>
    <p>To understand this mapping:</p>
    <p>Previous reverse-engineering work (Pessl et al. SEC16)  More reverse engineering</p>
  </div>
  <div class="page">
    <p>Challenge 1 : Physical address to DRAM address</p>
    <p>To understand this mapping:</p>
    <p>Previous reverse-engineering work (Pessl et al. SEC16)  More reverse engineering</p>
    <p>DRAM address translation library, RAMSES</p>
  </div>
  <div class="page">
    <p>Challenge 1 : Physical address to DRAM address</p>
    <p>To understand this mapping:</p>
    <p>Previous reverse-engineering work (Pessl et al. SEC16)  More reverse engineering</p>
    <p>DRAM address translation library, RAMSES Memory allocator, ALIS (Tatar et al. ATC18)</p>
  </div>
  <div class="page">
    <p>Challenge 1 : Physical address to DRAM address</p>
    <p>To understand this mapping:</p>
    <p>Previous reverse-engineering work (Pessl et al. SEC16)  More reverse engineering</p>
    <p>DRAM address translation library, RAMSES Memory allocator, ALIS (Tatar et al. ATC18)</p>
  </div>
  <div class="page">
    <p>Challenge 1 : Physical address to DRAM address</p>
    <p>To understand this mapping:</p>
    <p>Previous reverse-engineering work (Pessl et al. SEC16)  More reverse engineering</p>
    <p>DRAM address translation library, RAMSES Memory allocator, ALIS (Tatar et al. ATC18)</p>
    <p>For ZebRAM, we extended ALIS ...to allocate memory in zebra pattern.</p>
  </div>
  <div class="page">
    <p>ZebRAM Challenge 1</p>
    <p>Physical address space</p>
    <p>Physical address space</p>
    <p>DRAM address space</p>
    <p>RAMSES + ALIS*</p>
  </div>
  <div class="page">
    <p>Challenge 2 : Re-mapping physical address space</p>
    <p>Physical address space</p>
    <p>Physical address space</p>
    <p>DRAM address space</p>
    <p>RAMSES + ALIS</p>
    <p>Physical address space 15</p>
  </div>
  <div class="page">
    <p>Challenge 2 : Re-mapping physical address space</p>
    <p>Physical address space</p>
    <p>Physical address space</p>
    <p>DRAM address space</p>
    <p>RAMSES + ALIS</p>
    <p>Physical address space 15</p>
    <p>Safe region for OS</p>
    <p>Unsafe region</p>
  </div>
  <div class="page">
    <p>Challenge 2 : Re-mapping physical address space</p>
    <p>We use virtualization feature like Intel (VT-x)  to transparently re-map the guard and data rows as two contiguous memory region</p>
    <p>DRAM address space</p>
    <p>RAMSES + ALIS</p>
    <p>Physical address space</p>
    <p>VT-x</p>
    <p>Physical address space</p>
    <p>Safe region for OS</p>
    <p>Unsafe region</p>
  </div>
  <div class="page">
    <p>ZebRAM Challenge 3</p>
    <p>DRAM address space Physical address space</p>
    <p>Safe region for OS</p>
    <p>Unsafe region</p>
    <p>VTx</p>
    <p>RAMSES + ALIS</p>
    <p>Physical address space</p>
  </div>
  <div class="page">
    <p>Challenge 3 : Utilizing unsafe region</p>
    <p>Securely means two things here :</p>
    <p>Physical address space</p>
    <p>Unsafe region</p>
    <p>Safe region for OS</p>
  </div>
  <div class="page">
    <p>Challenge 3 : Utilizing unsafe region</p>
    <p>Securely means two things here : 1. Handle bit flips that may occur on unsafe region</p>
    <p>Physical address space</p>
    <p>Unsafe region</p>
    <p>x x</p>
    <p>x</p>
    <p>x</p>
    <p>Safe region for OS</p>
  </div>
  <div class="page">
    <p>Challenge 3 : Utilizing unsafe region</p>
    <p>Securely means two things here : 1. Handle bit flips that may occur on unsafe region</p>
    <p>ZebRAM implements a integrity manager that uses: 1. Hash verification (SHA-256) 2. Error correction code (ECC)</p>
    <p>Physical address space</p>
    <p>Unsafe region</p>
    <p>Integrity Manager</p>
    <p>Safe region for OS</p>
  </div>
  <div class="page">
    <p>Challenge 3 : Utilizing unsafe region</p>
    <p>Securely means two things: 1. Handle bit flips that may occur on unsafe region</p>
    <p>Physical address space</p>
    <p>Unsafe region</p>
    <p>Safe region for OS</p>
  </div>
  <div class="page">
    <p>Challenge 3 : Utilizing unsafe region</p>
    <p>Securely means two things: 1. Handle bit flips that may occur on unsafe region</p>
    <p>Physical address space</p>
    <p>Unsafe region</p>
    <p>x</p>
    <p>x x</p>
    <p>xSafe region for OS</p>
  </div>
  <div class="page">
    <p>Challenge 3 : Utilizing unsafe region</p>
    <p>Securely means two things: 1. Handle bit flips that may occur on unsafe region</p>
    <p>ZebRAM slows down the consecutive accesses to the same location in the unsafe region:</p>
    <p>Physical address space</p>
    <p>Unsafe region</p>
    <p>Cache layer</p>
    <p>Safe region for OS</p>
  </div>
  <div class="page">
    <p>Challenge 3 : Utilizing unsafe region</p>
    <p>Securely means two things: 1. Handle bit flips that may occur on unsafe region</p>
    <p>ZebRAM slows down the consecutive accesses to the same location in the unsafe region:</p>
    <p>Physical address space</p>
    <p>Unsafe region</p>
    <p>Cache layer</p>
    <p>Safe region for OS</p>
  </div>
  <div class="page">
    <p>Challenge 3 : Utilizing unsafe region</p>
    <p>Efficiently:</p>
    <p>Physical address space</p>
    <p>Integrity Manager Cache layer</p>
    <p>Unsafe region</p>
    <p>Safe region for OS</p>
  </div>
  <div class="page">
    <p>Challenge 3 : Utilizing unsafe region</p>
    <p>Efficiently:  Exposes the unsafe region as swap space to the OS</p>
    <p>Physical address space</p>
    <p>Swap space</p>
    <p>Integrity Manager Cache layer</p>
    <p>Safe region for OS</p>
  </div>
  <div class="page">
    <p>Challenge 3 : Utilizing unsafe region</p>
    <p>Efficiently:  Exposes the unsafe region as swap space to the OS  Helps to utilize efficient page replacement policies</p>
    <p>in commodity OS</p>
    <p>Physical address space</p>
    <p>Swap space</p>
    <p>Integrity Manager Cache layer</p>
    <p>Safe region for OS</p>
  </div>
  <div class="page">
    <p>Life of a page in ZebRAM world</p>
    <p>Compression/ Decompression</p>
    <p>Hash Generation/ Verification</p>
    <p>ECC Encoder/ Decoder</p>
    <p>Kswapd Cache</p>
    <p>Safe region</p>
    <p>Swap Space</p>
  </div>
  <div class="page">
    <p>Life of a page in ZebRAM world</p>
    <p>Compression/ Decompression</p>
    <p>Hash Generation/ Verification</p>
    <p>ECC Encoder/ Decoder</p>
    <p>Kswapd Cache</p>
    <p>Safe region</p>
    <p>Swap Space</p>
  </div>
  <div class="page">
    <p>Life of a page in ZebRAM world</p>
    <p>Compression/ Decompression</p>
    <p>Hash Generation/ Verification</p>
    <p>ECC Encoder/ Decoder</p>
    <p>Kswapd Cache</p>
    <p>Safe region</p>
    <p>Swap Space</p>
  </div>
  <div class="page">
    <p>Life of a page in ZebRAM world</p>
    <p>Compression/ Decompression</p>
    <p>Hash Generation/ Verification</p>
    <p>ECC Encoder/ Decoder</p>
    <p>Kswapd Cache</p>
    <p>Safe region</p>
    <p>Swap Space</p>
  </div>
  <div class="page">
    <p>Life of a page in ZebRAM world</p>
    <p>Compression/ Decompression</p>
    <p>Hash Generation/ Verification</p>
    <p>ECC Encoder/ Decoder</p>
    <p>Kswapd Cache</p>
    <p>Safe region</p>
    <p>Swap Space</p>
  </div>
  <div class="page">
    <p>Life of a page in ZebRAM world</p>
    <p>Compression/ Decompression</p>
    <p>Hash Generation/ Verification</p>
    <p>ECC Encoder/ Decoder</p>
    <p>Kswapd Cache</p>
    <p>Safe region</p>
    <p>Swap Space</p>
  </div>
  <div class="page">
    <p>Life of a page in ZebRAM world</p>
    <p>Compression/ Decompression</p>
    <p>Hash Generation/ Verification</p>
    <p>ECC Encoder/ Decoder</p>
    <p>Kswapd Cache</p>
    <p>#</p>
    <p>Safe region</p>
    <p>Swap Space</p>
  </div>
  <div class="page">
    <p>Life of a page in ZebRAM world</p>
    <p>Compression/ Decompression</p>
    <p>Hash Generation/ Verification</p>
    <p>ECC Encoder/ Decoder</p>
    <p>Kswapd Cache</p>
    <p>#</p>
    <p>Safe region</p>
    <p>Swap Space</p>
  </div>
  <div class="page">
    <p>Life of a page in ZebRAM world</p>
    <p>Compression/ Decompression</p>
    <p>Hash Generation/ Verification</p>
    <p>ECC Encoder/ Decoder</p>
    <p>Kswapd Cache</p>
    <p>#</p>
    <p>Safe region</p>
    <p>Swap Space</p>
  </div>
  <div class="page">
    <p>Life of a page in ZebRAM world</p>
    <p>Compression/ Decompression</p>
    <p>Hash Generation/ Verification</p>
    <p>ECC Encoder/ Decoder</p>
    <p>Kswapd Cache</p>
    <p>#</p>
    <p>Safe region</p>
    <p>Swap Space</p>
  </div>
  <div class="page">
    <p>Life of a page in ZebRAM world</p>
    <p>Compression/ Decompression</p>
    <p>Hash Generation/ Verification</p>
    <p>ECC Encoder/ Decoder</p>
    <p>Kswapd Cache</p>
    <p>#</p>
    <p>Safe region</p>
    <p>Swap Space</p>
  </div>
  <div class="page">
    <p>Life of a page in ZebRAM world</p>
    <p>Compression/ Decompression</p>
    <p>Hash Generation/ Verification</p>
    <p>ECC Encoder/ Decoder</p>
    <p>Kswapd Cache</p>
    <p>#</p>
    <p>Safe region</p>
    <p>Swap Space</p>
    <p>X</p>
  </div>
  <div class="page">
    <p>Life of a page in ZebRAM world</p>
    <p>Compression/ Decompression</p>
    <p>Hash Generation/ Verification</p>
    <p>ECC Encoder/ Decoder</p>
    <p>Kswapd Cache</p>
    <p>#</p>
    <p>X</p>
    <p>Safe region</p>
    <p>Swap Space</p>
  </div>
  <div class="page">
    <p>Life of a page in ZebRAM world</p>
    <p>Compression/ Decompression</p>
    <p>Hash Generation/ Verification</p>
    <p>ECC Encoder/ Decoder</p>
    <p>Kswapd Cache</p>
    <p>#</p>
    <p>Safe region</p>
    <p>Swap Space</p>
  </div>
  <div class="page">
    <p>Life of a page in ZebRAM world</p>
    <p>Compression/ Decompression</p>
    <p>Hash Generation/ Verification</p>
    <p>ECC Encoder/ Decoder</p>
    <p>Kswapd Cache</p>
    <p>#</p>
    <p>#</p>
    <p>Safe region</p>
    <p>Swap Space</p>
  </div>
  <div class="page">
    <p>Life of a page in ZebRAM world</p>
    <p>Compression/ Decompression</p>
    <p>Hash Generation/ Verification</p>
    <p>ECC Encoder/ Decoder</p>
    <p>Kswapd Cache</p>
    <p>#</p>
    <p>Safe region</p>
    <p>Swap Space</p>
  </div>
  <div class="page">
    <p>Life of a page in ZebRAM world</p>
    <p>Compression/ Decompression</p>
    <p>Hash Generation/ Verification</p>
    <p>ECC Encoder/ Decoder</p>
    <p>Kswapd Cache</p>
    <p>#</p>
    <p>Safe region</p>
    <p>Swap Space</p>
  </div>
  <div class="page">
    <p>Life of a page in ZebRAM world</p>
    <p>Compression/ Decompression</p>
    <p>Hash Generation/ Verification</p>
    <p>ECC Encoder/ Decoder</p>
    <p>Kswapd Cache</p>
    <p>#</p>
    <p>Safe region</p>
    <p>Swap Space</p>
  </div>
  <div class="page">
    <p>Life of a page in ZebRAM world</p>
    <p>Compression/ Decompression</p>
    <p>Hash Generation/ Verification</p>
    <p>ECC Encoder/ Decoder</p>
    <p>Kswapd Cache</p>
    <p>#</p>
    <p>Safe region</p>
    <p>Swap Space</p>
  </div>
  <div class="page">
    <p>Implementation</p>
    <p>Compression/ Decompression</p>
    <p>Hash Generation/ Verification</p>
    <p>ECC Encoder/ Decoder</p>
    <p>Kswapd Cache</p>
    <p>#</p>
    <p>Safe region</p>
    <p>Swap Space</p>
    <p>LKM</p>
  </div>
  <div class="page">
    <p>Evaluation setup</p>
    <p>Haswell i7-4790 machine  Qemu-KVM hypervisor to run ZebRAM protected OS  Ubuntu 16.04 64-bit OS  100Gbit/s link</p>
  </div>
  <div class="page">
    <p>Evaluation setup</p>
    <p>Haswell i7-4790 machine  Qemu-KVM hypervisor to run ZebRAM protected OS  Ubuntu 16.04 64-bit OS  100Gbit/s link</p>
    <p>SECURITY  SPEC  APACHE  NGINX  Micro benchmarks  REDIS</p>
  </div>
  <div class="page">
    <p>Evaluation setup</p>
    <p>Haswell i7-4790 machine  Qemu-KVM hypervisor to run ZebRAM protected OS  Ubuntu 16.04 64-bit OS  100Gbit/s link</p>
    <p>SECURITY  SPEC  APACHE  NGINX  Micro benchmarks  REDIS</p>
  </div>
  <div class="page">
    <p>Security Evaluation</p>
    <p>We ran the Rowhammer exploit on the ZebRAM protected OS</p>
  </div>
  <div class="page">
    <p>Security Evaluation</p>
    <p>We ran the Rowhammer exploit on the ZebRAM protected OS</p>
  </div>
  <div class="page">
    <p>Security Evaluation</p>
    <p>We ran the Rowhammer exploit on the ZebRAM protected OS</p>
    <p>= 100%</p>
  </div>
  <div class="page">
    <p>Security Evaluation</p>
    <p>We ran the Rowhammer exploit on the ZebRAM protected OS</p>
  </div>
  <div class="page">
    <p>Security Evaluation</p>
    <p>We ran the Rowhammer exploit on the ZebRAM protected OS</p>
    <p>Take away:</p>
    <p>ECC module alone detected 100% the bit flips  ECC module corrected 99.97 % of the bit flips 23</p>
  </div>
  <div class="page">
    <p>Performance Evaluation</p>
    <p>We ran spec 2006 on three different setup:</p>
    <p>Baseline (unmodified Linux) with 4GB memory</p>
    <p>ZebRAM (ECC only)</p>
    <p>ZebRAM (ECC + SHA-256)</p>
  </div>
  <div class="page">
    <p>Performance Evaluation</p>
    <p>Spec 2006 benchmark shows ...</p>
    <p>perlbench</p>
    <p>bzip2 gcc</p>
    <p>mcf gobmk</p>
    <p>hmmer</p>
    <p>sjeng libquantum</p>
    <p>h264ref</p>
    <p>omnetpp</p>
    <p>astar xalancbmk</p>
    <p>bwaves</p>
    <p>gamess</p>
    <p>milc zeusmp</p>
    <p>gromacs</p>
    <p>cactusADM</p>
    <p>leslie3d</p>
    <p>namd dealII</p>
    <p>soplex povray</p>
    <p>calculix</p>
    <p>GemsFDTD</p>
    <p>tonto lbm wrf</p>
    <p>sphinx3</p>
    <p>geomean</p>
    <p>S PE</p>
    <p>C S</p>
    <p>co re</p>
    <p>Unmodi ed ZebRAM (ECC)</p>
    <p>ZebRAM (ECC+SHA-256)</p>
  </div>
  <div class="page">
    <p>Performance Evaluation</p>
    <p>Spec 2006 benchmark shows   5% (geometric mean) overhead from unavailability of transparent huge page</p>
    <p>perlbench</p>
    <p>bzip2 gcc</p>
    <p>mcf gobmk</p>
    <p>hmmer</p>
    <p>sjeng libquantum</p>
    <p>h264ref</p>
    <p>omnetpp</p>
    <p>astar xalancbmk</p>
    <p>bwaves</p>
    <p>gamess</p>
    <p>milc zeusmp</p>
    <p>gromacs</p>
    <p>cactusADM</p>
    <p>leslie3d</p>
    <p>namd dealII</p>
    <p>soplex povray</p>
    <p>calculix</p>
    <p>GemsFDTD</p>
    <p>tonto lbm wrf</p>
    <p>sphinx3</p>
    <p>geomean</p>
    <p>S PE</p>
    <p>C S</p>
    <p>co re</p>
    <p>Unmodi ed ZebRAM (ECC)</p>
    <p>ZebRAM (ECC+SHA-256)</p>
  </div>
  <div class="page">
    <p>Performance Evaluation</p>
    <p>MCF benchmark shows more than 5% performance overhead</p>
    <p>perlbench</p>
    <p>bzip2 gcc</p>
    <p>mcf gobmk</p>
    <p>hmmer</p>
    <p>sjeng libquantum</p>
    <p>h264ref</p>
    <p>omnetpp</p>
    <p>astar xalancbmk</p>
    <p>bwaves</p>
    <p>gamess</p>
    <p>milc zeusmp</p>
    <p>gromacs</p>
    <p>cactusADM</p>
    <p>leslie3d</p>
    <p>namd dealII</p>
    <p>soplex povray</p>
    <p>calculix</p>
    <p>GemsFDTD</p>
    <p>tonto lbm wrf</p>
    <p>sphinx3</p>
    <p>geomean</p>
    <p>S PE</p>
    <p>C S</p>
    <p>co re</p>
    <p>Unmodi ed ZebRAM (ECC)</p>
    <p>ZebRAM (ECC+SHA-256)</p>
  </div>
  <div class="page">
    <p>Performance Evaluation : Working Set Size</p>
    <p>YCSB to generate the load and induce different working set size ...</p>
    <p>for redis (4.0.8) key-value store</p>
    <p>We ran experiments on different setups:</p>
    <p>ZebRAM Basic  uses only safe region and swaps out to SSD</p>
    <p>ZebRAM (ECC only)</p>
    <p>ZebRAM (ECC + SHA-256)</p>
    <p>Baseline 24</p>
  </div>
  <div class="page">
    <p>Performance Evaluation</p>
  </div>
  <div class="page">
    <p>Performance Evaluation</p>
  </div>
  <div class="page">
    <p>Performance Evaluation When active working set is using 70% of the memory:  ZebRAM (Basic) = 30x  ZebRAM (ECC) = 3x  ZebRAM (ECC + SHA-256) = 3.9x</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>The ZebRAM is the first solution to provide complete protection against Rowhammer attacks</p>
    <p>Performance overhead:</p>
    <p>Minimal when the active working set fits in the safe region</p>
    <p>Function of the active working set size when it does not fit in the safe region</p>
    <p>Code for ZebRAM will be available soon at https://github.com/vusec</p>
  </div>
</Presentation>
