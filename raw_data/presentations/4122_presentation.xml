<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Taking a Look into Execute-Only Memory</p>
    <p>Marc Schink, Johannes Obermaier, August 12, 2019</p>
  </div>
  <div class="page">
    <p>Introduction</p>
    <p>You</p>
    <p>Another developer</p>
    <p>Taking a Look into Execute-Only Memory | Schink and Obermaier | August 12, 2019 | 1  Fraunhofer</p>
  </div>
  <div class="page">
    <p>Introduction</p>
    <p>You</p>
    <p>Adversarial developer</p>
    <p>Taking a Look into Execute-Only Memory | Schink and Obermaier | August 12, 2019 | 1  Fraunhofer</p>
  </div>
  <div class="page">
    <p>Introduction</p>
    <p>You</p>
    <p>Another developer</p>
    <p>Taking a Look into Execute-Only Memory | Schink and Obermaier | August 12, 2019 | 2  Fraunhofer</p>
  </div>
  <div class="page">
    <p>Introduction</p>
    <p>You</p>
    <p>Adversarial developer</p>
    <p>Taking a Look into Execute-Only Memory | Schink and Obermaier | August 12, 2019 | 2  Fraunhofer</p>
  </div>
  <div class="page">
    <p>eXecute-Only Memory</p>
    <p>You</p>
    <p>Adversarial developer</p>
    <p>Taking a Look into Execute-Only Memory | Schink and Obermaier | August 12, 2019 | 3  Fraunhofer</p>
  </div>
  <div class="page">
    <p>eXecute-Only Memory</p>
    <p>Adversarial developer</p>
    <p>Physical access Privileged code execution</p>
    <p>No hardware modifications</p>
    <p>Attacker model</p>
    <p>Taking a Look into Execute-Only Memory | Schink and Obermaier | August 12, 2019 | 4  Fraunhofer</p>
  </div>
  <div class="page">
    <p>eXecute-Only Memory</p>
    <p>NXP Semiconductors Kinetis K8x</p>
    <p>Kinetis KV1x</p>
    <p>Kinetis KV3x</p>
    <p>STMicroelectronics STM32L0</p>
    <p>STM32L1</p>
    <p>STM32L4</p>
    <p>STM32F4</p>
    <p>STM32F7</p>
    <p>STM32H7</p>
    <p>Texas Instruments TM4C12x</p>
    <p>MSP432</p>
    <p>Taking a Look into Execute-Only Memory | Schink and Obermaier | August 12, 2019 | 5  Fraunhofer</p>
  </div>
  <div class="page">
    <p>eXecute-Only Memory</p>
    <p>Texas Instruments TM4C12x</p>
    <p>MSP432</p>
    <p>STMicroelectronics STM32L0</p>
    <p>STM32L1</p>
    <p>STM32L4</p>
    <p>STM32F4</p>
    <p>STM32F7</p>
    <p>STM32H7</p>
    <p>NXP Semiconductors Kinetis K8x</p>
    <p>Kinetis KV1x</p>
    <p>Kinetis KV3x</p>
    <p>Taking a Look into Execute-Only Memory | Schink and Obermaier | August 12, 2019 | 5  Fraunhofer</p>
  </div>
  <div class="page">
    <p>eXecute-Only Memory</p>
    <p>eXecute-Only Memory</p>
    <p>Regular Memory</p>
    <p>Bus Matrix</p>
    <p>Flash module</p>
    <p>Debug interface</p>
    <p>SRAM</p>
    <p>Peripherals</p>
    <p>CPU</p>
    <p>Taking a Look into Execute-Only Memory | Schink and Obermaier | August 12, 2019 | 6  Fraunhofer</p>
  </div>
  <div class="page">
    <p>Conceptual weakness</p>
    <p>eXecute-Only Memory</p>
    <p>Regular Memory</p>
    <p>Bus Matrix</p>
    <p>Flash module</p>
    <p>Debug interface</p>
    <p>SRAM</p>
    <p>Peripherals</p>
    <p>CPU</p>
    <p>Taking a Look into Execute-Only Memory | Schink and Obermaier | August 12, 2019 | 7  Fraunhofer</p>
  </div>
  <div class="page">
    <p>Code recovery attack</p>
    <p>Code recovery framework</p>
    <p>OpenOCDDebug probe</p>
    <p>Target device</p>
    <p>Host device</p>
    <p>JTAG / SWD</p>
    <p>USB</p>
    <p>Tcl RPC</p>
    <p>Taking a Look into Execute-Only Memory | Schink and Obermaier | August 12, 2019 | 8  Fraunhofer</p>
  </div>
  <div class="page">
    <p>Code recovery attack</p>
    <p>Code recovery framework</p>
    <p>OpenOCDDebug probe</p>
    <p>Target device</p>
    <p>Host device</p>
    <p>Input state</p>
    <p>Taking a Look into Execute-Only Memory | Schink and Obermaier | August 12, 2019 | 8  Fraunhofer</p>
  </div>
  <div class="page">
    <p>Code recovery attack</p>
    <p>Code recovery framework</p>
    <p>OpenOCDDebug probe</p>
    <p>Target device</p>
    <p>Host device</p>
    <p>Output state</p>
    <p>Taking a Look into Execute-Only Memory | Schink and Obermaier | August 12, 2019 | 8  Fraunhofer</p>
  </div>
  <div class="page">
    <p>Code recovery attack</p>
    <p>Code recovery framework</p>
    <p>OpenOCDDebug probe</p>
    <p>Target device Recovered disassembly codeHost device</p>
    <p>Output state</p>
    <p>Taking a Look into Execute-Only Memory | Schink and Obermaier | August 12, 2019 | 8  Fraunhofer</p>
  </div>
  <div class="page">
    <p>Code recovery attack</p>
    <p>R1: R2: R3: R4: R5: R6: R7:</p>
    <p>R1: R2: R3: R4: R5: R6: R7:</p>
    <p>???</p>
    <p>Input state Output stateTarget instruction</p>
    <p>Taking a Look into Execute-Only Memory | Schink and Obermaier | August 12, 2019 | 9  Fraunhofer</p>
  </div>
  <div class="page">
    <p>Code recovery attack</p>
    <p>R1: R2: R3: R4: R5: R6: R7:</p>
    <p>R1: R2: R3: R4: R5: R6: R7:</p>
    <p>???</p>
    <p>Input state Output stateTarget instruction</p>
    <p>Taking a Look into Execute-Only Memory | Schink and Obermaier | August 12, 2019 | 9  Fraunhofer</p>
  </div>
  <div class="page">
    <p>Code recovery attack</p>
    <p>R1: R2: R3: R4: R5: R6: R7:</p>
    <p>R1: R2: R3: R4: R5: R6: R7:</p>
    <p>orrs r0, r2</p>
    <p>movs r0, #0x84</p>
    <p>mov r0, r2</p>
    <p>adds r0, r0, #4</p>
    <p>adds r0, r2, #0</p>
    <p>adds r0, #4</p>
    <p>uxtb r0, r2 uxth r0, r2</p>
    <p>lsls r0, r2, #0</p>
    <p>sxth r0, r2</p>
    <p>movs r0, r2</p>
    <p>Input state Output stateTarget instruction</p>
    <p>Taking a Look into Execute-Only Memory | Schink and Obermaier | August 12, 2019 | 9  Fraunhofer</p>
  </div>
  <div class="page">
    <p>Code recovery attack</p>
    <p>orrs r0, r2</p>
    <p>movs r0, #0x84</p>
    <p>mov r0, r2</p>
    <p>adds r0, r0, #4</p>
    <p>adds r0, r2, #0</p>
    <p>adds r0, #4</p>
    <p>uxtb r0, r2 uxth r0, r2</p>
    <p>lsls r0, r2, #0</p>
    <p>sxth r0, r2</p>
    <p>movs r0, r2</p>
    <p>R1: R2: R3: R4: R5: R6: R7:</p>
    <p>R1: R2: R3: R4: R5: R6: R7:</p>
    <p>Input state Output stateTarget instruction</p>
    <p>Taking a Look into Execute-Only Memory | Schink and Obermaier | August 12, 2019 | 9  Fraunhofer</p>
  </div>
  <div class="page">
    <p>Code recovery attack</p>
    <p>R1: R2: R3: R4: R5: R6: R7:</p>
    <p>R1: R2: R3: R4: R5: R6: R7:</p>
    <p>orrs r0, r2</p>
    <p>movs r0, #0x84</p>
    <p>mov r0, r2</p>
    <p>adds r0, r0, #4</p>
    <p>adds r0, r2, #0</p>
    <p>adds r0, #4</p>
    <p>uxtb r0, r2 uxth r0, r2</p>
    <p>lsls r0, r2, #0</p>
    <p>sxth r0, r2</p>
    <p>movs r0, r2</p>
    <p>Input state Output stateTarget instruction</p>
    <p>Taking a Look into Execute-Only Memory | Schink and Obermaier | August 12, 2019 | 9  Fraunhofer</p>
  </div>
  <div class="page">
    <p>Code recovery attack</p>
    <p>orrs r0, r2</p>
    <p>movs r0, #0x84</p>
    <p>mov r0, r2</p>
    <p>adds r0, r0, #4</p>
    <p>adds r0, r2, #0</p>
    <p>adds r0, #4</p>
    <p>uxtb r0, r2 uxth r0, r2</p>
    <p>lsls r0, r2, #0</p>
    <p>sxth r0, r2</p>
    <p>movs r0, r2</p>
    <p>R1: R2: R3: R4: R5: R6: R7:</p>
    <p>R1: R2: R3: R4: R5: R6: R7:</p>
    <p>Input state Output stateTarget instruction</p>
    <p>Taking a Look into Execute-Only Memory | Schink and Obermaier | August 12, 2019 | 9  Fraunhofer</p>
  </div>
  <div class="page">
    <p>Code recovery attack</p>
    <p>R1: R2: R3: R4: R5: R6: R7:</p>
    <p>orrs r0, r2</p>
    <p>movs r0, #0x84</p>
    <p>mov r0, r2</p>
    <p>adds r0, r0, #4</p>
    <p>adds r0, r2, #0</p>
    <p>adds r0, #4</p>
    <p>uxtb r0, r2 uxth r0, r2</p>
    <p>lsls r0, r2, #0</p>
    <p>sxth r0, r2</p>
    <p>movs r0, r2</p>
    <p>R1: R2: R3: R4: R5: R6: R7:</p>
    <p>Input state Output stateTarget instruction</p>
    <p>Taking a Look into Execute-Only Memory | Schink and Obermaier | August 12, 2019 | 9  Fraunhofer</p>
  </div>
  <div class="page">
    <p>Code recovery attack</p>
    <p>orrs r0, r2</p>
    <p>movs r0, #0x84</p>
    <p>mov r0, r2</p>
    <p>adds r0, r0, #4</p>
    <p>adds r0, r2, #0</p>
    <p>adds r0, #4</p>
    <p>uxtb r0, r2 uxth r0, r2</p>
    <p>lsls r0, r2, #0</p>
    <p>sxth r0, r2</p>
    <p>movs r0, r2</p>
    <p>R1: R2: R3: R4: R5: R6: R7:</p>
    <p>R1: R2: R3: R4: R5: R6: R7:</p>
    <p>Input state Output stateTarget instruction</p>
    <p>Taking a Look into Execute-Only Memory | Schink and Obermaier | August 12, 2019 | 9  Fraunhofer</p>
  </div>
  <div class="page">
    <p>Code recovery attack</p>
    <p>R1: R2: R3: R4: R5: R6: R7:</p>
    <p>orrs r0, r2</p>
    <p>movs r0, #0x84</p>
    <p>mov r0, r2</p>
    <p>adds r0, r0, #4</p>
    <p>adds r0, r2, #0</p>
    <p>adds r0, #4</p>
    <p>uxtb r0, r2 uxth r0, r2</p>
    <p>lsls r0, r2, #0</p>
    <p>sxth r0, r2</p>
    <p>movs r0, r2</p>
    <p>R1: R2: R3: R4: R5: R6: R7:</p>
    <p>Input state Output stateTarget instruction</p>
    <p>Taking a Look into Execute-Only Memory | Schink and Obermaier | August 12, 2019 | 9  Fraunhofer</p>
  </div>
  <div class="page">
    <p>Code recovery attack</p>
    <p>subs r0, r0, #1</p>
    <p>subs r0, #1</p>
    <p>Binary encodingCommutative properties adds r0, r2, r4</p>
    <p>adds r0, r4, r2</p>
    <p>Algorithmic equivalence movs r2, #0</p>
    <p>eors r2, r2 ? ? ?</p>
    <p>Taking a Look into Execute-Only Memory | Schink and Obermaier | August 12, 2019 | 10  Fraunhofer</p>
  </div>
  <div class="page">
    <p>Code recovery attack</p>
    <p>?</p>
    <p>Commutative properties adds r0, r2, r4</p>
    <p>adds r0, r4, r2</p>
    <p>Algorithmic equivalence movs r2, #0</p>
    <p>eors r2, r2 ?</p>
    <p>subs r0, r0, #1</p>
    <p>subs r0, #1</p>
    <p>Binary encoding</p>
    <p>?</p>
    <p>No effect on the correct functionality of the recovered code</p>
    <p>Taking a Look into Execute-Only Memory | Schink and Obermaier | August 12, 2019 | 10  Fraunhofer</p>
  </div>
  <div class="page">
    <p>Code recovery attack</p>
    <p>Hint instructions yield</p>
    <p>sev</p>
    <p>Control instructions dsb</p>
    <p>isb dmb</p>
    <p>?</p>
    <p>Taking a Look into Execute-Only Memory | Schink and Obermaier | August 12, 2019 | 11  Fraunhofer</p>
  </div>
  <div class="page">
    <p>Code recovery attack</p>
    <p>Hint instructions yield</p>
    <p>sev</p>
    <p>Control instructions dsb</p>
    <p>isb dmb</p>
    <p>?</p>
    <p>Rarely used and only for special purposes</p>
    <p>Taking a Look into Execute-Only Memory | Schink and Obermaier | August 12, 2019 | 11  Fraunhofer</p>
  </div>
  <div class="page">
    <p>Code recovery attack</p>
    <p>Kinetis KV11STM32L0</p>
    <p>Full device recovery time</p>
    <p>Instruction recovery time</p>
    <p>Sector recovery time</p>
    <p>Flash memory size</p>
    <p>Taking a Look into Execute-Only Memory | Schink and Obermaier | August 12, 2019 | 12  Fraunhofer</p>
  </div>
  <div class="page">
    <p>Code recovery attack</p>
    <p>Demo: Code recovery attack on STM32L0</p>
    <p>Taking a Look into Execute-Only Memory | Schink and Obermaier | August 12, 2019 | 13  Fraunhofer</p>
  </div>
  <div class="page">
    <p>What else?</p>
    <p>Recovered disassembly code</p>
    <p>Code recovery framework</p>
    <p>Target device</p>
    <p>Host device</p>
    <p>UART Code recovery framework</p>
    <p>Target device Recovered disassembly codeHost device</p>
    <p>Taking a Look into Execute-Only Memory | Schink and Obermaier | August 12, 2019 | 14  Fraunhofer</p>
  </div>
  <div class="page">
    <p>What else?</p>
    <p>Hardware implementation flaws</p>
    <p>Taking a Look into Execute-Only Memory | Schink and Obermaier | August 12, 2019 | 15  Fraunhofer</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>eXecute-Only Memory is inadquate for IP protection</p>
    <p>Hardware-backed isolation required</p>
    <p>Conceptual weakness allows code recovery attack</p>
    <p>Practicability of code recovery attacks demonstrated</p>
    <p>Taking a Look into Execute-Only Memory | Schink and Obermaier | August 12, 2019 | 16  Fraunhofer</p>
  </div>
  <div class="page">
    <p>Contact Information</p>
    <p>Marc Schink, Johannes Obermaier</p>
    <p>Department Hardware Security</p>
    <p>Fraunhofer-Institute for Applied and Integrated Security (AISEC)</p>
    <p>Address: Parkring 4 85748 Garching (near Munich) Germany</p>
    <p>Internet: https://www.aisec.fraunhofer.de</p>
    <p>Phone: +49 89 3229986-144 Fax: +49 89 3229986-299 E-Mail: marc.schink@aisec.fraunhofer.de</p>
    <p>Taking a Look into Execute-Only Memory | Schink and Obermaier | August 12, 2019 | 17  Fraunhofer</p>
  </div>
</Presentation>
