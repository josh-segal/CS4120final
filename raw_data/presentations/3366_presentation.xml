<?xml version="1.0" ?>
<Presentation>
  <div class="page"/>
  <div class="page">
    <p>user mode process</p>
    <p>code</p>
    <p>data</p>
    <p>SGX Enclave</p>
    <p>app.exe</p>
    <p>direct I/O</p>
    <p>enter</p>
  </div>
  <div class="page">
    <p>L1-D L1-I</p>
    <p>L2</p>
    <p>Thread</p>
    <p>Thread</p>
    <p>L1-D L1-I</p>
    <p>L2</p>
    <p>Thread</p>
    <p>Thread</p>
    <p>L1-D L1-I</p>
    <p>L2</p>
    <p>Thread</p>
    <p>Thread</p>
    <p>L1-D L1-I</p>
    <p>L2</p>
    <p>Thread</p>
    <p>Thread</p>
    <p>Core 0 Core 1 Core 2 Core 3</p>
    <p>L3 3</p>
  </div>
  <div class="page">
    <p>L1-D L1-I</p>
    <p>L2</p>
    <p>Thread</p>
    <p>Thread</p>
    <p>L1-D L1-I</p>
    <p>L2</p>
    <p>Thread</p>
    <p>Thread</p>
    <p>L1-D L1-I</p>
    <p>L2</p>
    <p>Thread</p>
    <p>Thread</p>
    <p>L1-D L1-I</p>
    <p>L2</p>
    <p>Thread</p>
    <p>Thread</p>
    <p>Core 0 Core 1 Core 2 Core 3</p>
    <p>L3 4</p>
  </div>
  <div class="page">
    <p>L1-D L1-I</p>
    <p>L2</p>
    <p>Thread</p>
    <p>Thread</p>
    <p>L1-D L1-I</p>
    <p>L2</p>
    <p>Thread</p>
    <p>Thread</p>
    <p>L1-D L1-I</p>
    <p>L2</p>
    <p>Thread</p>
    <p>Thread</p>
    <p>L1-D L1-I</p>
    <p>L2</p>
    <p>Thread</p>
    <p>Thread</p>
    <p>Core 0 Core 1 Core 2 Core 3</p>
    <p>L3 5</p>
  </div>
  <div class="page">
    <p>if (secret) {</p>
    <p>// ...</p>
    <p>}</p>
    <p>else {</p>
    <p>// ...</p>
    <p>}</p>
    <p>Way 3</p>
    <p>Way 0</p>
    <p>Way 1</p>
    <p>Way 2</p>
    <p>Way 7</p>
    <p>Way 4</p>
    <p>Way 5</p>
    <p>Way 6</p>
    <p>Way 3</p>
    <p>Way 0</p>
    <p>Way 1</p>
    <p>Way 2</p>
    <p>Way 7</p>
    <p>Way 4</p>
    <p>Way 5</p>
    <p>Way 6</p>
    <p>Way 3</p>
    <p>Way 0</p>
    <p>Way 1</p>
    <p>Way 2</p>
    <p>Way 4</p>
    <p>Cache sets (L1-I)</p>
  </div>
  <div class="page">
    <p>if (secret) {</p>
    <p>// ...</p>
    <p>}</p>
    <p>else {</p>
    <p>// ...</p>
    <p>}</p>
    <p>Way 3</p>
    <p>Way 0</p>
    <p>Way 1</p>
    <p>Way 2</p>
    <p>Way 7</p>
    <p>Way 4</p>
    <p>Way 5</p>
    <p>Way 6</p>
    <p>Way 3</p>
    <p>Way 0</p>
    <p>Way 1</p>
    <p>Way 2</p>
    <p>Way 7</p>
    <p>Way 4</p>
    <p>Way 5</p>
    <p>Way 6</p>
    <p>Way 3</p>
    <p>Way 0</p>
    <p>Way 1</p>
    <p>Way 2</p>
    <p>Way 4</p>
    <p>Cache sets (L1-I)</p>
  </div>
  <div class="page">
    <p>if (secret) {</p>
    <p>// ...</p>
    <p>}</p>
    <p>else {</p>
    <p>// ...</p>
    <p>}</p>
    <p>Way 3</p>
    <p>Way 0</p>
    <p>Way 1</p>
    <p>Way 2</p>
    <p>Way 7</p>
    <p>Way 4</p>
    <p>Way 5</p>
    <p>Way 6</p>
    <p>Way 3</p>
    <p>Way 0</p>
    <p>Way 1</p>
    <p>Way 2</p>
    <p>Way 7</p>
    <p>Way 4</p>
    <p>Way 5</p>
    <p>Way 6</p>
    <p>Way 3</p>
    <p>Way 0</p>
    <p>Way 1</p>
    <p>Way 2</p>
    <p>Way 4</p>
    <p>Cache sets (L1-I)</p>
  </div>
  <div class="page">
    <p>if (secret) {</p>
    <p>// ...</p>
    <p>}</p>
    <p>else {</p>
    <p>// ...</p>
    <p>}</p>
    <p>Way 3</p>
    <p>Way 0</p>
    <p>Way 1</p>
    <p>Way 2</p>
    <p>Way 7</p>
    <p>Way 4</p>
    <p>Way 5</p>
    <p>Way 6</p>
    <p>Way 3</p>
    <p>Way 0</p>
    <p>Way 1</p>
    <p>Way 2</p>
    <p>Way 7</p>
    <p>Way 4</p>
    <p>Way 5</p>
    <p>Way 6</p>
    <p>Way 3</p>
    <p>Way 0</p>
    <p>Way 1</p>
    <p>Way 2</p>
    <p>Way 4</p>
    <p>Cache sets (L1-I)</p>
  </div>
  <div class="page">
    <p>A. Attempt to detect attacks</p>
    <p>B. Prevent sharing of resources</p>
    <p>C. Obfuscate accesses / shuffle memory</p>
    <p>D. Make accesses input-independent (i.e., ORAM)</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Tracks read write sets</p>
    <p>Lock elision</p>
    <p>void criticalFunc() {</p>
    <p>mtx.lock();</p>
    <p>if (g_x &gt; 0) {</p>
    <p>g_y = true;</p>
    <p>g_x--;</p>
    <p>}</p>
    <p>mtx.unlock();</p>
    <p>}</p>
    <p>void criticalFuncTSX() {</p>
    <p>if (_xbegin() == _XBEGIN_STARTED) {</p>
    <p>if (g_x &gt; 0) {</p>
    <p>g_y = true;</p>
    <p>g_x--;</p>
    <p>}</p>
    <p>_xend();</p>
    <p>}</p>
    <p>else</p>
    <p>// slow path</p>
    <p>criticalFunc();</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>Undocumented side effect  External code evictions from L1-I cause aborts</p>
    <p>Interrupts/exceptions cause aborts</p>
    <p>Works in SGX</p>
  </div>
  <div class="page"/>
  <div class="page"/>
  <div class="page">
    <p>ret</p>
    <p>call</p>
    <p>Insert 3-byte NOP-RETs into every code CL</p>
    <p>Call NOP-RETs during preloading</p>
    <p>Implemented in custom MSVC++ compiler</p>
  </div>
  <div class="page">
    <p>Way 7</p>
    <p>B m</p>
    <p>e m</p>
    <p>o ry</p>
    <p>p a g</p>
    <p>e s</p>
    <p>CL 0</p>
    <p>CL 1</p>
    <p>CL 2</p>
    <p>CL 63</p>
    <p>CL 0</p>
    <p>CL 1</p>
    <p>CL 2</p>
    <p>CL 63</p>
    <p>CL 0</p>
    <p>CL 1</p>
    <p>CL 2</p>
    <p>CL 63</p>
    <p>Way 0</p>
    <p>Way 1</p>
    <p>Cache set 0</p>
    <p>Way 7</p>
    <p>Way 0</p>
    <p>Way 1</p>
    <p>Cache set 1</p>
    <p>Way 7</p>
    <p>Way 0</p>
    <p>Way 1</p>
    <p>Cache set 2</p>
    <p>Way 7</p>
    <p>Way 0</p>
    <p>Way 1</p>
    <p>Cache set 63</p>
    <p>L 1 i n</p>
    <p>s tr</p>
    <p>u c ti</p>
    <p>o n</p>
    <p>/d a ta</p>
    <p>c a c h</p>
    <p>e (</p>
    <p>B )</p>
    <p>Write set in 2 out of 64 cache sets:</p>
    <p>Read set in rest of memory:</p>
    <p>Constrained by LLC 17</p>
  </div>
  <div class="page">
    <p>Way 7</p>
    <p>B m</p>
    <p>e m</p>
    <p>o ry</p>
    <p>p a g</p>
    <p>e s</p>
    <p>CL 0</p>
    <p>CL 1</p>
    <p>CL 2</p>
    <p>CL 63</p>
    <p>CL 0</p>
    <p>CL 1</p>
    <p>CL 2</p>
    <p>CL 63</p>
    <p>CL 0</p>
    <p>CL 1</p>
    <p>CL 2</p>
    <p>CL 63</p>
    <p>Way 0</p>
    <p>Way 1</p>
    <p>Cache set 0</p>
    <p>Way 7</p>
    <p>Way 0</p>
    <p>Way 1</p>
    <p>Cache set 1</p>
    <p>Way 7</p>
    <p>Way 0</p>
    <p>Way 1</p>
    <p>Cache set 2</p>
    <p>Way 7</p>
    <p>Way 0</p>
    <p>Way 1</p>
    <p>Cache set 63</p>
    <p>L 1 i n</p>
    <p>s tr</p>
    <p>u c ti</p>
    <p>o n</p>
    <p>/d a ta</p>
    <p>c a c h</p>
    <p>e (</p>
    <p>B )</p>
    <p>Write set in 2 out of 64 cache sets:</p>
    <p>Read set in rest of memory:</p>
    <p>Constrained by LLC 18</p>
  </div>
  <div class="page"/>
  <div class="page"/>
  <div class="page"/>
  <div class="page"/>
  <div class="page">
    <p>using Nodes = nelem_t*;</p>
    <p>using LeafIds = uint16_t*;</p>
    <p>using Queries = Matrix&lt;float&gt;;</p>
    <p>static void lookup_leafids(</p>
    <p>Nodes&amp; nodes, Queries&amp; queries, LeafIds&amp; leafids) {</p>
    <p>for (auto size_t i = 0; i &lt; = queries.entries(); i++) {</p>
    <p>size_t node = 0;</p>
    <p>size_t left, right;</p>
    <p>for (;;) {</p>
    <p>auto &amp;_node = nodes[node];</p>
    <p>left = _node.left;</p>
    <p>right = _node.right_or_leafid;</p>
    <p>if (left == node) {</p>
    <p>leafids[i] = (uint16_t)right;</p>
    <p>break;</p>
    <p>}</p>
    <p>if (queries.item(i, _node.fdim) &lt;= _node.fthresh) {</p>
    <p>node = left;</p>
    <p>}</p>
    <p>else {</p>
    <p>node = right;</p>
    <p>}</p>
    <p>}</p>
    <p>}</p>
    <p>}</p>
    <p>using Nodes = ReadArray&lt;nelem_t, NCS_R&gt;;</p>
    <p>using Queries = ReadMatrix&lt;float, NCS_R&gt;;</p>
    <p>using LeafIdsW = WriteArray&lt;uint16_t, NCS_W&gt;;</p>
    <p>static void _tsx_protected_lookup_leafids(</p>
    <p>Nodes&amp; nodes, Queries&amp; queries, LeafIdsW&amp; leafids) {</p>
    <p>nodes.preload();</p>
    <p>queries.preload();</p>
    <p>for (register size_t i = 0; i &lt; queries.entries(); i++) {</p>
    <p>if (!(i%8)) leafids.preload();</p>
    <p>size_t node = 0;</p>
    <p>size_t left, right;</p>
    <p>for(;;) {</p>
    <p>auto &amp;_node = nodes[node];</p>
    <p>left = _node.left;</p>
    <p>right = _node.right_or_leafid;</p>
    <p>if (left == node) {</p>
    <p>leafids[i] = (uint16_t)right;</p>
    <p>break;</p>
    <p>}</p>
    <p>if (queries.item(i, _node.fdim) &lt;= _node.fthresh) {</p>
    <p>node = left;</p>
    <p>}</p>
    <p>else {</p>
    <p>node = right;</p>
    <p>}</p>
    <p>}</p>
    <p>}</p>
    <p>} 23</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>A. Always give both hyperthreads to the enclave</p>
    <p>B. Temporarily reserve part of the caches for enclave</p>
    <p>C. No unexpected interrupts or page faults</p>
    <p>D. (No unwanted resets)</p>
  </div>
  <div class="page"/>
  <div class="page"/>
  <div class="page"/>
</Presentation>
