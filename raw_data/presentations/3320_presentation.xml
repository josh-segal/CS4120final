<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Adwait Nadkarni1, Benjamin Andow1, William Enck1, Somesh Jha2</p>
    <p>Practical DIFC Enforcement on Android</p>
  </div>
  <div class="page">
    <p>The new Modern Operating Systems</p>
  </div>
  <div class="page">
    <p>Example use case  Email</p>
    <p>Remote Server</p>
    <p>How do we enable data sharing among apps, and also prevent unauthorized disclosure?</p>
  </div>
  <div class="page">
    <p>The Problem  The problem stems from the loss of control over the</p>
    <p>flow of shared data.  So the solution is</p>
    <p>For data secrecy, the Bell-LaPadula model.  IFC models have only seen limited use (e.g., military).  Centrally administered policy  What about</p>
    <p>application-specific user data (e.g., email attachment).</p>
    <p>Information Flow Control (IFC)</p>
  </div>
  <div class="page">
    <p>Decentralized Information Flow Control (DIFC)</p>
    <p>Secrecy for application-specific user data.  Applications are Data Owners that define the secrecy</p>
    <p>policy for their own data.  Data Owners can</p>
    <p>create new labels (i.e., security classes)  define the policy for their labels  declassify their labels</p>
    <p>E.g., the Email app creates label {email}. 5</p>
  </div>
  <div class="page">
    <p>DIFC for Android  DLM-like DIFC policy (Aquifer) [Nadkarni &amp; Enck, CCS 2013]  Noninterference proof [Jia et al., ESORICS 2013]  Storage-level enforcement primitives (Maxoid) [Xu &amp;</p>
    <p>Witchel, EuroSys 2015].</p>
    <p>Takeaway  Hard to make DIFC enforcement both secure and backwards compatible with unmodified legacy applications on Android.</p>
  </div>
  <div class="page">
    <p>DIFC Enforcement Challenges on Android</p>
  </div>
  <div class="page">
    <p>C1. Subject Granularity 1. Fine-grained PL variable (e.g., TaintDroid [Enck et al.],</p>
    <p>Laminar [Roy et al.])  False Negatives (Implicit flows)</p>
    <p>(Multiple tasks in one process)</p>
    <p>//'a' contains a secret b = false; if (a &gt; 10) {</p>
    <p>b = true; }</p>
    <p>Is there a balance? 8</p>
    <p>PDF Activity Create Note secret.pdf</p>
    <p>User Task 1</p>
    <p>Process Boundaries</p>
    <p>secret.pdf</p>
    <p>PDF Activity Print Activity public.pdf public.pdf</p>
    <p>User Task 2</p>
    <p>WPS Office WPS Office</p>
    <p>WPS Office Evernote</p>
  </div>
  <div class="page">
    <p>C2. Label Propagation A. Explicit flows (e.g., HiStar [Zeldovich et al.06],</p>
    <p>Flume [Krohn et al.07])  Limitation: Unsuitable for ad-hoc communication</p>
    <p>(e.g., unpredictable user-directed sharing).</p>
    <p>B. Floating labels (e.g., Asbestos [Efstathopoulos et al.05]).</p>
    <p>Communication is always enabled.  Are floating labels secure and practical?</p>
    <p>P Q</p>
    <p>{LP} {LQ} X</p>
    <p>P Q</p>
    <p>{LP} {LQ} --&gt; {LPLQ}</p>
    <p>A. Explicit labels</p>
    <p>B. Floating labels</p>
  </div>
  <div class="page">
    <p>C2. Label Propagation  Limitations of floating labels:</p>
    <p>P 0 1</p>
    <p>{L1}</p>
    <p>Q</p>
    <p>{} Q2</p>
    <p>{}</p>
    <p>Q1</p>
    <p>{}</p>
    <p>Attack Setup</p>
    <p>Prior Agreement: 1) Q1 and Q2 will call Q at a predefined time</p>
    <p>Unless, they get called by P. 2) P will call Qi if ith bit is 0. Therefore, the Qi that calls Q back must indicate 1!</p>
    <p>Step 1. P calls Q1Step 2. Q2 calls QStep 3. Q guesses data 0 1</p>
    <p>{L1}</p>
  </div>
  <div class="page">
    <p>{L1,L2,L3,L4,L5}{L1,L2,L3,L4,L5}</p>
    <p>{L1,L2,L3,L4,L5}</p>
    <p>C2. Label Propagation  Limitations of floating labels:</p>
    <p>P</p>
    <p>{L1}</p>
    <p>Scenario: Subject A reads/writes to many other subjects (with different labels)</p>
    <p>Q</p>
    <p>{L2}</p>
    <p>R</p>
    <p>{L3}</p>
    <p>T</p>
    <p>{L5}</p>
    <p>A</p>
    <p>{}</p>
    <p>S</p>
    <p>{L4}</p>
    <p>A could be: 1) an Android service component. 2) an Android content provider component. 3) a shared file (e.g., SharedPreferences). 4) A general-purpose application (e.g., PDF</p>
    <p>reader); due to application multi-tasking.</p>
    <p>{L1,L2,L3,L4,L5}</p>
    <p>{L1,L2,L3,L4,L5}</p>
    <p>{L1,L2,L3,L4,L5}</p>
  </div>
  <div class="page">
    <p>C3. Network Declassification  The network is public.  Declassification is necessary before network export.  Existing DIFC policy allows</p>
    <p>This is not practical on Android, where 1. The environment is network driven. 2. The user may not ideally be limited to using a few</p>
    <p>applications for export. 12</p>
  </div>
  <div class="page">
    <p>Weir</p>
    <p>Secure and backwards compatible DIFC Enforcement for Android.</p>
    <p>Lazy Polyinstantiation  Making floating labels context sensitive. (C1, C2)</p>
    <p>Domain Declassification  Providing an alternate network declassification primitive. (C3)</p>
  </div>
  <div class="page">
    <p>Lazy Polyinstantiation  Polyintantiation  Creating multiple (context-sensitive)</p>
    <p>instances.</p>
    <p>What makes it Lazy ? 1. Event-driven</p>
    <p>Caused by a call (i.e., Inter Component Communication).</p>
    <p>unavailable. 14</p>
    <p>P Q</p>
    <p>{LP} {LQ} X</p>
    <p>Explicit labels</p>
    <p>P Q</p>
    <p>{LP} {LQ} --&gt; {LPLQ}</p>
    <p>Floating labels</p>
    <p>P Q</p>
    <p>{LP} {LQ} Q'</p>
    <p>{} --&gt; {LP}</p>
    <p>Floating labels w/ polyinstantiation</p>
  </div>
  <div class="page">
    <p>Polyinstantiation  Preventing implicit flows</p>
    <p>Recap: Floating labels, Q gets original data 01.</p>
    <p>With polyinstantiation:</p>
    <p>P 0 1</p>
    <p>{L1}</p>
    <p>Q</p>
    <p>{} Q2</p>
    <p>{}</p>
    <p>Q1</p>
    <p>{} 1 1</p>
    <p>{L1}</p>
    <p>Q1</p>
    <p>P 0 1</p>
    <p>{L1}</p>
    <p>Q</p>
    <p>{} Q2</p>
    <p>{}</p>
    <p>Q1</p>
    <p>{L1}</p>
    <p>Q always gets 11.</p>
  </div>
  <div class="page">
    <p>Practicality of Polyinstantiation</p>
    <p>prevent label explosion. 2. Process-level labeling:</p>
    <p>Context-sensitivity eliminates false positives.</p>
  </div>
  <div class="page">
    <p>Design of Polyinstantiation on Android  Polyinstantiation in memory: Processes and components</p>
    <p>compatibility).  Polyinstantiation on storage: Context-specific layers.</p>
    <p>Transparent Storage access.  Copy-on-write</p>
    <p>&quot;procService_0&quot;; label = {L1}</p>
    <p>C</p>
    <p>&quot;procService&quot;; label = {}</p>
    <p>C</p>
    <p>Layer (L1)</p>
    <p>Shared Prefs</p>
    <p>read/write read</p>
    <p>&quot;procService_0&quot;; label = {L1}</p>
    <p>C</p>
    <p>&quot;procService&quot;; label = {}</p>
    <p>C</p>
    <p>Layer (L1)</p>
    <p>Shared Prefs</p>
    <p>read/write write</p>
    <p>Shared Prefs</p>
    <p>copy</p>
  </div>
  <div class="page">
    <p>Why this works? 1. Component Model  Activity (UI), Service (Daemon),</p>
    <p>Provider (Data Interface/Daemon), Receiver (Event handler).</p>
    <p>(e.g., startActivity, bindService). b. Direct  Binder; exchange Binder objects first (e.g.,</p>
    <p>RPC to a service, first bound using bindService).</p>
  </div>
  <div class="page">
    <p>Domain Declassification  Intuition: In a network driven environment, it may be</p>
    <p>more practical to reason about where the data is being delivered, rather than who is performing the export.</p>
    <p>Data Owner (i.e., security class creator) associates a set of trusted network domains with the security class.  Set tD for a security class t.</p>
    <p>Enforcement  For export to a domain d, if d tD, t can be implicitly</p>
    <p>declassified. 19 2</p>
  </div>
  <div class="page">
    <p>Implementation &amp; Performance  Implemented on Android v5.0.1, kernel v3.4  Policy Model  Flume [Krohn et al.]  Source code available at http://wspr.csc.ncsu.edu/weir/</p>
    <p>Process &amp; Component Assignment Logic</p>
    <p>Weir Manager Service</p>
    <p>Weir LSM</p>
    <p>Activity Manager Service</p>
    <p>Component 1 Component 2 Application Layer</p>
    <p>Android OS</p>
    <p>Linux Kernel</p>
    <p>Start Component 2</p>
    <p>OverlayFS</p>
  </div>
  <div class="page">
    <p>Evaluation: Microbenchmarks</p>
    <p>Start Activity</p>
    <p>Start Provider</p>
    <p>File Read File Write Internet</p>
    <p>A ve ra ge ti m e (m</p>
    <p>s)</p>
    <p>Operations</p>
    <p>AOSP</p>
    <p>Weir (no Label)</p>
    <p>Weir (with Label)</p>
    <p>Micro-benchmarks for common operations:</p>
  </div>
  <div class="page">
    <p>Evaluation: Scalability  Start 0-100 instances of an already started component:</p>
    <p>A ve ra ge ti m e (m</p>
    <p>s)</p>
    <p>Number of simultaneous instances</p>
  </div>
  <div class="page">
    <p>Case Study  K9 Email  Objective: Separation of the personal and work email.  Applications:</p>
    <p>BCloud app, allows the user to sync her work cloud data (e.g., contacts, documents) to the device.</p>
    <p>Unmodified K-9 Email app, used for both the personal (smtp.gmail.com) and work (smtp.bcloud.com) email.23</p>
    <p>//Creating a tag t domains = {www.bcloud.com, smtp.bcloud.com,}; createTag(t, domains);</p>
    <p>// Add t to the intents label. intent.addToLabel(t); // Add data to the intent startActivity(intent); //Call</p>
  </div>
  <div class="page">
    <p>Case Study  K9 Email  Steps</p>
  </div>
  <div class="page">
    <p>Case Study  K9 Email</p>
    <p>Observations  General: Instances of K9 Email existed simultaneously in</p>
    <p>both contexts.  In enterprise context t:</p>
    <p>Files and Contacts: Data from personal context + the enterprise context t is visible.</p>
    <p>Network Export: K-9 Email could only sync with the enterprise accounts servers.</p>
  </div>
  <div class="page">
    <p>Caveats  Centralized perspective:</p>
    <p>Labeled + unlabeled files can only be seen in the specific labeled context (e.g., t).</p>
    <p>Files with different non-default labels can only be seen via a trusted OS application that can accumulate all labels.</p>
    <p>Updates to default layer:  Updates to contacts in the personal context are not</p>
    <p>visible in other contexts, once copied. 26</p>
  </div>
  <div class="page">
    <p>Closing Remarks  Weir makes floating label enforcement possible on</p>
    <p>Android via lazy polyinstantiation.  Some open challenges remain:</p>
    <p>Centralized perspective over labeled data.  Propagation of changes made to the default layer.  Instance explosion.  Defining trusted domains.</p>
  </div>
  <div class="page">
    <p>Thank you!</p>
    <p>Adwait Nadkarni anadkarni@ncsu.edu</p>
    <p>http://wspr.csc.ncsu.edu/weir/</p>
    <p>Looking for a position starting Fall 2017.</p>
  </div>
</Presentation>
