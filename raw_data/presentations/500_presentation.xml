<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Experiences on a Design Approach for</p>
    <p>Interactive Web Applications</p>
  </div>
  <div class="page">
    <p>Experiences on a Design Approach for</p>
    <p>Interactive Web Applications</p>
    <p>Janne Kuuskeri Tampere University of Technology</p>
    <p>Stratagen Systems</p>
  </div>
  <div class="page">
    <p>Current</p>
    <p>Browser</p>
    <p>Server</p>
  </div>
  <div class="page">
    <p>Current</p>
    <p>Browser</p>
    <p>Server</p>
    <p>GET /myapp/index.html</p>
  </div>
  <div class="page">
    <p>Current</p>
    <p>Browser</p>
    <p>Server</p>
    <p>GET /myapp/userlist.html</p>
  </div>
  <div class="page">
    <p>Current</p>
    <p>Browser</p>
    <p>Server</p>
    <p>POST /myapp/userdata</p>
  </div>
  <div class="page">
    <p>Current</p>
    <p>Browser</p>
    <p>Server</p>
    <p>resume app state execute app logic update model find view update session generate page</p>
  </div>
  <div class="page">
    <p>Current</p>
    <p>Browser</p>
  </div>
  <div class="page">
    <p>Current</p>
    <p>Browser</p>
    <p>Java</p>
  </div>
  <div class="page">
    <p>Current</p>
    <p>Browser H T</p>
    <p>M L</p>
    <p>Java</p>
  </div>
  <div class="page">
    <p>Current</p>
    <p>Browser H T</p>
    <p>M L</p>
    <p>JavaScript</p>
    <p>Java</p>
  </div>
  <div class="page">
    <p>Current</p>
    <p>Browser H T</p>
    <p>M LCSS</p>
    <p>JavaScript</p>
    <p>Java</p>
  </div>
  <div class="page">
    <p>Current</p>
    <p>Browser H T</p>
    <p>M LCSS</p>
    <p>JavaScript</p>
    <p>Java</p>
    <p>JSP</p>
  </div>
  <div class="page">
    <p>Current</p>
    <p>Browser H T</p>
    <p>M LCSS</p>
    <p>JavaScript</p>
    <p>Java</p>
    <p>JSP</p>
    <p>HTML page</p>
  </div>
  <div class="page">
    <p>Current</p>
    <p>Browser H T</p>
    <p>M LCSS</p>
    <p>JavaScript</p>
    <p>Java</p>
    <p>JSP</p>
    <p>Java</p>
    <p>String hql = &quot;from Person p where p.age &gt; :age&quot;; Query q = session.createQuery(); q.setInteger(&quot;age&quot;, 33); List people = q.list(hql);</p>
    <p>JSP</p>
    <p>&lt;table&gt; &lt;% for (Person p : people) { %&gt;</p>
    <p>&lt;tr&gt; &lt;td&gt;p.getName()&lt;/td&gt; &lt;td&gt;p.getAge()&lt;/td&gt;</p>
    <p>&lt;/tr&gt; &lt;% } %&gt; &lt;/table&gt;</p>
  </div>
  <div class="page">
    <p>Current</p>
    <p>Browser H T</p>
    <p>M LCSS</p>
    <p>JavaScript</p>
    <p>Java</p>
    <p>JSP</p>
    <p>JSP</p>
    <p>&lt;% if (request.getParameter(&quot;age&quot;) != null) { age=Integer.parseInt(request.getParameter(age)); }</p>
    <p>String hql = &quot;from Person p where p.age &gt; :age&quot;; Query q = session.createQuery(); q.setInteger(&quot;age&quot;, age); List people = q.list(hql); %&gt;</p>
    <p>&lt;table&gt; &lt;% for (Person p : people) { %&gt;</p>
    <p>&lt;tr&gt; &lt;td&gt;p.getName()&lt;/td&gt; &lt;td&gt;p.getAge()&lt;/td&gt;</p>
    <p>&lt;/tr&gt; &lt;% } %&gt; &lt;/table&gt;</p>
  </div>
  <div class="page">
    <p>Current</p>
    <p>Browser H T</p>
    <p>M LCSS</p>
    <p>JavaScript</p>
    <p>Java</p>
    <p>JSP</p>
    <p>JavaScript</p>
    <p>var onClick = function () { $.ajax({</p>
    <p>url: /people/, dataType: json, data: { age: 33 }, success: function (data) {</p>
    <p>var rows = []; $.each(data, function (person) {</p>
    <p>rows.push(&lt;tr&gt;&lt;td&gt; + person.name + &lt;/td&gt;&lt;td&gt; + person.age +&lt;/td&gt;&lt;/tr&gt;);</p>
    <p>} $(#peopletable &gt; tbody:last).append(</p>
    <p>.join(rows)); }</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>MVC</p>
  </div>
  <div class="page">
    <p>MVC</p>
    <p>Browser</p>
    <p>Server</p>
    <p>View</p>
    <p>Controller, Model</p>
  </div>
  <div class="page">
    <p>MVC</p>
    <p>Browser</p>
    <p>Server</p>
    <p>View Controller, Model</p>
    <p>?</p>
  </div>
  <div class="page">
    <p>REST</p>
    <p>MVC</p>
    <p>Browser</p>
    <p>Server</p>
    <p>View Controller, Model</p>
  </div>
  <div class="page">
    <p>REST</p>
    <p>MVC</p>
    <p>Server</p>
    <p>Single page web application</p>
  </div>
  <div class="page">
    <p>REST</p>
    <p>MVC</p>
    <p>Server</p>
    <p>Single page web application</p>
    <p>HTML</p>
    <p>&lt;html&gt; &lt;head&gt; &lt;link type=&quot;text/css&quot; href=&quot;someframework.css&quot;&gt;</p>
    <p>&lt;script src=someframework.js&gt;&lt;/script&gt; &lt;script src=myapp.js&gt;&lt;/script&gt;</p>
    <p>&lt;/head&gt; &lt;body&gt; &lt;/body&gt;</p>
    <p>&lt;/html&gt;</p>
  </div>
  <div class="page">
    <p>REST</p>
    <p>MVC</p>
    <p>Server</p>
    <p>Single page web application</p>
  </div>
  <div class="page">
    <p>REST</p>
    <p>MVC</p>
    <p>Server</p>
    <p>Single page web application</p>
  </div>
  <div class="page">
    <p>Case: Valvomo</p>
  </div>
  <div class="page">
    <p>Valvomo</p>
    <p>Transit API</p>
    <p>Browser</p>
    <p>Server</p>
    <p>Paratransit System</p>
  </div>
  <div class="page">
    <p>Browser</p>
    <p>Server</p>
    <p>Paratransit System</p>
    <p>Single page UI</p>
    <p>RESTful API Transit API</p>
    <p>Valvomo</p>
  </div>
  <div class="page">
    <p>Browser</p>
    <p>Server</p>
    <p>Paratransit System</p>
    <p>Valvomo Web Application</p>
    <p>HTML</p>
    <p>Valvomo Web Application</p>
    <p>Transit API</p>
  </div>
  <div class="page">
    <p>Browser</p>
    <p>Server</p>
    <p>Paratransit System</p>
    <p>JSON</p>
    <p>Valvomo</p>
    <p>Transit API</p>
  </div>
  <div class="page">
    <p>DEMO</p>
  </div>
  <div class="page">
    <p>Pros</p>
    <p>browsers  mobile devices  programmatic clients  HTTP</p>
    <p>Accessible API</p>
  </div>
  <div class="page">
    <p>Pros</p>
    <p>can have several different server implementations</p>
    <p>same UI can be placed on top of another server implementation as long as it is the same API</p>
    <p>no predefined application flow</p>
    <p>Reusable API  Accessible API</p>
  </div>
  <div class="page">
    <p>Pros</p>
    <p>responsibilities are easier to assign</p>
    <p>data validation  error handling  localization</p>
    <p>Reusable API  Accessible API</p>
    <p>Decoupling</p>
  </div>
  <div class="page">
    <p>Pros</p>
    <p>unambiguously assign responsibilities for state handling</p>
    <p>server is responsible for resources and their states</p>
    <p>application (client) is responsible for the application flow and state</p>
    <p>Reusable API  Accessible API</p>
    <p>Decoupling  Application flow / state</p>
  </div>
  <div class="page">
    <p>Pros</p>
    <p>fewer technologies to worry about</p>
    <p>one language for the client</p>
    <p>one language (maybe even the same) for the server</p>
    <p>client and server are easier to develop in parallel</p>
    <p>Reusable API  Accessible API</p>
    <p>Decoupling  Application flow / state  Development model</p>
  </div>
  <div class="page">
    <p>Pros</p>
    <p>client and server may be tested separately</p>
    <p>server API may be tested using isolated HTTP request and checking the result codes and content</p>
    <p>UI may be tested without the server or the network traffic</p>
    <p>Reusable API  Accessible API</p>
    <p>Decoupling  Application flow / state  Development model  Testing</p>
  </div>
  <div class="page">
    <p>Pros</p>
    <p>REST offers minimal HTTP overhead</p>
    <p>network is utilized only when necessary (no page reloads)</p>
    <p>no data (e.g. HTML or CSS) overhead when transferring only payload data (e.g. JSON or XML)</p>
    <p>Reusable API  Accessible API</p>
    <p>Decoupling  Application flow / state  Development model  Testing  Network traffic</p>
  </div>
  <div class="page">
    <p>Cons</p>
    <p>some server frameworks have REST support</p>
    <p>MVC support on client depends solely on the chosen toolkit Framework support</p>
  </div>
  <div class="page">
    <p>Cons</p>
    <p>single page web applications are difficult to crawl and index</p>
    <p>RESTful API could be crawled and indexed but difficult to rank</p>
    <p>Framework support  Search engine support</p>
  </div>
  <div class="page">
    <p>Cons</p>
    <p>highly dynamic JavaScript UIs require extra work to be accessible for the visually impaired</p>
    <p>some JavaScript toolkits offer support for accessibility</p>
    <p>Framework support  Search engine support  Accessibility</p>
  </div>
  <div class="page">
    <p>Future work</p>
    <p>Authentication  Flexible authorization configuration  per resource  per request method  representations per auth level?</p>
  </div>
  <div class="page">
    <p>Thank You</p>
  </div>
</Presentation>
