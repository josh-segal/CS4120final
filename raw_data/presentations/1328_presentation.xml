<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Can DREs Provide LongLasting Security?</p>
    <p>The Case of Return-Oriented Programming and the AVC Advantage</p>
    <p>Stephen Checkoway,* Ariel J. Feldman, Brian Kantor,*</p>
    <p>J. Alex Halderman, Edward W. Felten, Hovav Shacham*</p>
    <p>*UCSD, Princeton, U Michigan</p>
  </div>
  <div class="page">
    <p>Long Lasting Security: EVT09</p>
    <p>Voting System Studies</p>
    <p>Study Vendors Year Appel et al. Sequoia 2008</p>
    <p>EVEREST ES&amp;S, Hart, Premier 2007</p>
    <p>California TTBR Hart, Premier, Sequoia 2007</p>
    <p>Feldman et al. Diebold 2006</p>
    <p>Hursti Diebold 2006</p>
    <p>Kohno et al. Diebold 2003</p>
  </div>
  <div class="page">
    <p>Long Lasting Security: EVT09</p>
    <p>The proposed 'red team' concept also contemplates giving attackers access to source code, which is unrealistic and dangerous if not strictly controlled by test protocols. It is the considered opinion of election officials and information technology professionals that ANY system can be attacked if source code is made available. We urge the Secretary of State not to engage in any practice that will jeopardize the integrity of our voting systems.</p>
    <p>California Association of Clerks and Election Officials, 2007</p>
    <p>Response</p>
  </div>
  <div class="page">
    <p>Long Lasting Security: EVT09</p>
    <p>The proposed 'red team' concept also contemplates giving attackers access to source code, which is unrealistic and dangerous if not strictly controlled by test protocols. It is the considered opinion of election officials and information technology professionals that ANY system can be attacked if source code is made available. We urge the Secretary of State not to engage in any practice that will jeopardize the integrity of our voting systems.</p>
    <p>California Association of Clerks and Election Officials, 2007</p>
    <p>By any standard  academic or common sense  the study is unrealistic and inaccurate.</p>
    <p>Diebold Election Systems, 2006</p>
    <p>Your guidelines suggest that you will provide source code to an expert and ask that person to subvert the system. It is almost certain that would be possible under these conditions. However, these are extreme circumstances, not taking into consideration real world use cases.</p>
    <p>Hart InterCivic, 2007</p>
    <p>Letting the hackers have the source codes, operating manuals and unlimited access to the voting machines is like giving a burglar the keys to your house.</p>
    <p>Contra Costa County Clerk-recorder and head of the state Association of Clerks and Election Officials</p>
    <p>Steve Weir, quoted by sfgate.com, 2007</p>
    <p>Response</p>
    <p>In short, the Red Team was able to, using a financial institution as an example, take away the locked front door of the bank branch, remove the security guard, remove the bank tellers, remove the panic alarm that notifies law enforcement, and have only slightly limited resources (particularly time and knowledge) to pick the lock on the bank vault.</p>
    <p>Sequoia Voting Systems, 2007 Company officials have said the researchers were given unusual access to the machines that real-world hackers could never gain.</p>
    <p>Mercury News, 2007</p>
    <p>Putting isolated technology in the hands of computer experts in order to engage in unrestricted, calculated, advanced and malicious attacks is highly improbable in a real-world election.</p>
    <p>Hart InterCivic, 2007</p>
    <p>No computer system could pass the assault made by your team of computer scientists. In fact, I think my 9 and 12-year-old kids could find ways to break into the voting equipment if they had unfettered access.</p>
    <p>Santa Cruz County Clerk Gail Pellerin, 2007</p>
  </div>
  <div class="page">
    <p>Long Lasting Security: EVT09</p>
    <p>Is it practical to hack a voting machine without unreasonable access?</p>
    <p>Hint: Yes</p>
  </div>
  <div class="page">
    <p>Long Lasting Security: EVT09</p>
    <p>AVC Advantage</p>
    <p>Best-case to study</p>
    <p>Only does one thing: count votes</p>
    <p>Defenses against code injection</p>
  </div>
  <div class="page">
    <p>Long Lasting Security: EVT09</p>
    <p>Challenges</p>
  </div>
  <div class="page">
    <p>Long Lasting Security: EVT09</p>
    <p>Reverse-Engineering</p>
    <p>Z80</p>
    <p>ROMs</p>
  </div>
  <div class="page">
    <p>Long Lasting Security: EVT09</p>
    <p>Artifacts Produced</p>
    <p>Hardware Functional Specifications</p>
    <p>Hardware Simulator</p>
    <p>Initial version by Joshua Herbach</p>
    <p>Exploit developed on the simulator  tested on machine, worked first try</p>
  </div>
  <div class="page">
    <p>Long Lasting Security: EVT09</p>
    <p>Exploit</p>
    <p>Classic stack-smashing buffer overflow</p>
    <p>Roughly a dozen bytes overwritten</p>
    <p>Exploit code needs to be in memory</p>
    <p>For now, assume we can inject code</p>
  </div>
  <div class="page">
    <p>Long Lasting Security: EVT09</p>
    <p>Vote-Stealing Attack</p>
    <p>Gain physical access</p>
    <p>Malicious auxiliary cartridge</p>
    <p>Trigger exploitable bug</p>
    <p>Follow instructions</p>
  </div>
  <div class="page">
    <p>Long Lasting Security: EVT09</p>
    <p>Vote-Stealing Attack</p>
    <p>Gain physical access</p>
    <p>Malicious auxiliary cartridge</p>
    <p>Trigger exploitable bug</p>
    <p>Follow instructions</p>
  </div>
  <div class="page">
    <p>Long Lasting Security: EVT09</p>
    <p>Vote-Stealing Program</p>
    <p>Survives turning power switch to off</p>
    <p>Runs election as normal</p>
    <p>Silently shifts votes</p>
  </div>
  <div class="page">
    <p>Long Lasting Security: EVT09</p>
    <p>Vote-Stealing Program</p>
    <p>Survives turning power switch to off</p>
    <p>Runs election as normal</p>
    <p>Silently shifts votes</p>
  </div>
  <div class="page">
    <p>Long Lasting Security: EVT09</p>
    <p>Code Injection?</p>
    <p>Earlier, we assumed we could inject code</p>
    <p>Hardware interlock prevents fetching instructions from RAM</p>
    <p>Program code in read-only memory</p>
  </div>
  <div class="page">
    <p>Long Lasting Security: EVT09</p>
    <p>Harvard Architecture</p>
    <p>Program in read-only memory +</p>
    <p>Nonexecutable, writable data</p>
    <p>memory</p>
    <p>No code injection</p>
  </div>
  <div class="page">
    <p>Long Lasting Security: EVT09</p>
    <p>Return-Oriented Programming</p>
  </div>
  <div class="page">
    <p>Long Lasting Security: EVT09</p>
    <p>Return-Oriented Programming</p>
    <p>Arbitrary behavior without code injection</p>
    <p>Combine snippets of existing code</p>
    <p>Requires control of the call stack</p>
    <p>Processor/program specific</p>
  </div>
  <div class="page">
    <p>Long Lasting Security: EVT09</p>
    <p>Return-Oriented Programming</p>
    <p>Arbitrary behavior without code injection</p>
    <p>Combine snippets of existing code</p>
    <p>Requires control of the call stack</p>
    <p>Processor/program specific</p>
    <p>Instructions movl $0x006f6d2e,(%eax,%ebx) movl 0xd4(%ebp),%eax movl %eax,(%esp) calll 0x0008ba11 addl $0x1f,%eax andl $0xf0,%eax subl %eax,%esp leal 0x20(%esp),%edx movl %edx,0xb4(%ebp) jmp 0x0006d8b4 incl 0xd4(%ebp) movl 0xd4(%ebp),%eax movzbl (%eax),%ecx cmpb $0x3a,%cl je 0x0006d8b1 testb %cl,%cl movl 0xb4(%ebp),%ebx jne 0x0006d8db movb $0x43,(%ebx) movb $0x00,0x01(%ebx) jmp 0x0006d90d movb %cl,(%ebx) incl %ebx incl 0xd4(%ebp) movl 0xd4(%ebp),%eax movzbl (%eax),%ecx testb %cl,%cl setne %dl cmpb $0x3a,%cl setne %al testb %al,%dl jne 0x0006d8cf movb $0x00,(%ebx) cmpl $0x01,0x0008a780 jne 0x0006d90d movl 0xb4(%ebp),%edx movl $0x0000002f,0x04(%esp) movl %edx,(%esp) calll 0x0008b9e9 testl %eax,%eax jne 0x0006d8b4 movl 0xb4(%ebp),%esi movl $0x00000002,%ecx movl $0x0007e270,%edi cld repz/cmpsb (%esi),(%edi) movl $0x00000000,%eax je 0x0006d92e movzbl 0xff(%esi),%eax movzbl 0xff(%edi),%ecx subl %ecx,%eax testl %eax,%eax jel 0x0006da53 movl 0xb4(%ebp),%esi movl $0x00070bbb,%edi movl $0x00000006,%ecx repz/cmpsb (%esi),(%edi) movl $0x00000000,%edx je 0x0006d956 movzbl 0xff(%esi),%edx movzbl 0xff(%edi),%ecx subl %ecx,%edx testl %edx,%edx</p>
  </div>
  <div class="page">
    <p>Long Lasting Security: EVT09</p>
    <p>Return-Oriented Programming</p>
    <p>Arbitrary behavior without code injection</p>
    <p>Combine snippets of existing code</p>
    <p>Requires control of the call stack</p>
    <p>Processor/program specific</p>
    <p>Instructions movl $0x006f6d2e,(%eax,%ebx) movl 0xd4(%ebp),%eax movl %eax,(%esp) calll 0x0008ba11 addl $0x1f,%eax andl $0xf0,%eax subl %eax,%esp leal 0x20(%esp),%edx movl %edx,0xb4(%ebp) jmp 0x0006d8b4 incl 0xd4(%ebp) movl 0xd4(%ebp),%eax movzbl (%eax),%ecx cmpb $0x3a,%cl je 0x0006d8b1 testb %cl,%cl movl 0xb4(%ebp),%ebx jne 0x0006d8db movb $0x43,(%ebx) movb $0x00,0x01(%ebx) jmp 0x0006d90d movb %cl,(%ebx) incl %ebx incl 0xd4(%ebp) movl 0xd4(%ebp),%eax movzbl (%eax),%ecx testb %cl,%cl setne %dl cmpb $0x3a,%cl setne %al testb %al,%dl jne 0x0006d8cf movb $0x00,(%ebx) cmpl $0x01,0x0008a780 jne 0x0006d90d movl 0xb4(%ebp),%edx movl $0x0000002f,0x04(%esp) movl %edx,(%esp) calll 0x0008b9e9 testl %eax,%eax jne 0x0006d8b4 movl 0xb4(%ebp),%esi movl $0x00000002,%ecx movl $0x0007e270,%edi cld repz/cmpsb (%esi),(%edi) movl $0x00000000,%eax je 0x0006d92e movzbl 0xff(%esi),%eax movzbl 0xff(%edi),%ecx subl %ecx,%eax testl %eax,%eax jel 0x0006da53 movl 0xb4(%ebp),%esi movl $0x00070bbb,%edi movl $0x00000006,%ecx repz/cmpsb (%esi),(%edi) movl $0x00000000,%edx je 0x0006d956 movzbl 0xff(%esi),%edx movzbl 0xff(%edi),%ecx subl %ecx,%edx testl %edx,%edx</p>
  </div>
  <div class="page">
    <p>Long Lasting Security: EVT09</p>
    <p>Return-Oriented Programming</p>
    <p>Arbitrary behavior without code injection</p>
    <p>Combine snippets of existing code</p>
    <p>Requires control of the call stack</p>
    <p>Processor/program specific</p>
    <p>Instructions movl $0x006f6d2e,(%eax,%ebx) movl 0xd4(%ebp),%eax movl %eax,(%esp) calll 0x0008ba11 addl $0x1f,%eax andl $0xf0,%eax subl %eax,%esp leal 0x20(%esp),%edx movl %edx,0xb4(%ebp) jmp 0x0006d8b4 incl 0xd4(%ebp) movl 0xd4(%ebp),%eax movzbl (%eax),%ecx cmpb $0x3a,%cl je 0x0006d8b1 testb %cl,%cl movl 0xb4(%ebp),%ebx jne 0x0006d8db movb $0x43,(%ebx) movb $0x00,0x01(%ebx) jmp 0x0006d90d movb %cl,(%ebx) incl %ebx incl 0xd4(%ebp) movl 0xd4(%ebp),%eax movzbl (%eax),%ecx testb %cl,%cl setne %dl cmpb $0x3a,%cl setne %al testb %al,%dl jne 0x0006d8cf movb $0x00,(%ebx) cmpl $0x01,0x0008a780 jne 0x0006d90d movl 0xb4(%ebp),%edx movl $0x0000002f,0x04(%esp) movl %edx,(%esp) calll 0x0008b9e9 testl %eax,%eax jne 0x0006d8b4 movl 0xb4(%ebp),%esi movl $0x00000002,%ecx movl $0x0007e270,%edi cld repz/cmpsb (%esi),(%edi) movl $0x00000000,%eax je 0x0006d92e movzbl 0xff(%esi),%eax movzbl 0xff(%edi),%ecx subl %ecx,%eax testl %eax,%eax jel 0x0006da53 movl 0xb4(%ebp),%esi movl $0x00070bbb,%edi movl $0x00000006,%ecx repz/cmpsb (%esi),(%edi) movl $0x00000000,%edx je 0x0006d956 movzbl 0xff(%esi),%edx movzbl 0xff(%edi),%ecx subl %ecx,%edx testl %edx,%edx</p>
    <p>Stack</p>
  </div>
  <div class="page">
    <p>Long Lasting Security: EVT09</p>
    <p>The Usual Method</p>
    <p>if arnold  washington: amount = (washington - arnold)/2 + 1 arnold = arnold + amount washington = washington - amount</p>
    <p>High-level specification</p>
  </div>
  <div class="page">
    <p>Long Lasting Security: EVT09</p>
    <p>The Usual Method</p>
    <p>if arnold  washington: amount = (washington - arnold)/2 + 1 arnold = arnold + amount washington = washington - amount</p>
    <p>High-level specification Assembly</p>
    <p>movl ..., %edx movl ..., %ecx compl %ecx, %edx jg winning movl %ecx, %eax subl %edx, %eax shrl %eax incl %eax addl %eax, %edx movl %edx, ... subl %eax, %ecx movl %ecx, ... winning:</p>
  </div>
  <div class="page">
    <p>Long Lasting Security: EVT09</p>
    <p>The Usual Method</p>
    <p>if arnold  washington: amount = (washington - arnold)/2 + 1 arnold = arnold + amount washington = washington - amount</p>
    <p>High-level specification Assembly</p>
    <p>movl ..., %edx movl ..., %ecx compl %ecx, %edx jg winning movl %ecx, %eax subl %edx, %eax shrl %eax incl %eax addl %eax, %edx movl %edx, ... subl %eax, %ecx movl %ecx, ... winning:</p>
    <p>Binary 00000000 55 89 e5 53 e8 00 00 00 00 5b 8b 93 2f 00 00 00 00000010 8b 8b 2b 00 00 00 39 ca 77 17 89 c8 29 d0 d1 e8 00000020 40 01 c2 89 93 2f 00 00 00 29 c1 89 8b 2b 00 00 00000030 00 5b c9 c3</p>
  </div>
  <div class="page">
    <p>Long Lasting Security: EVT09</p>
    <p>The ROP Method</p>
    <p>if arnold  washington: amount = (washington - arnold)/2 + 1 arnold = arnold + amount washington = washington - amount</p>
    <p>High-level specification</p>
  </div>
  <div class="page">
    <p>Long Lasting Security: EVT09</p>
    <p>The ROP Method</p>
    <p>if arnold  washington: amount = (washington - arnold)/2 + 1 arnold = arnold + amount washington = washington - amount</p>
    <p>High-level specification Pseudo-assembly</p>
    <p>ld t1, 0(A) ld t2, 2(A) slt t3, t2, t1 btr t3, winning sub amt, t2, t1 srl amt, amt, 1 inc amt sub t2, t2, amt add t1, t1, amt st t1, 0(A) st t2, 2(A) winning:</p>
  </div>
  <div class="page">
    <p>Long Lasting Security: EVT09</p>
    <p>The ROP Method</p>
    <p>if arnold  washington: amount = (washington - arnold)/2 + 1 arnold = arnold + amount washington = washington - amount</p>
    <p>High-level specification Pseudo-assembly</p>
    <p>ld t1, 0(A) ld t2, 2(A) slt t3, t2, t1 btr t3, winning sub amt, t2, t1 srl amt, amt, 1 inc amt sub t2, t2, amt add t1, t1, amt st t1, 0(A) st t2, 2(A) winning:</p>
    <p>(data)</p>
    <p>(data) (data)</p>
    <p>insns...ret insns...ret</p>
    <p>insns...ret</p>
    <p>insns...ret insns...ret</p>
    <p>Stack Program Code</p>
    <p>Gadgets</p>
  </div>
  <div class="page">
    <p>Long Lasting Security: EVT09</p>
    <p>The Usual Method</p>
    <p>Sequence of instructions: %eip</p>
    <p>Execute instruction, update %eip</p>
    <p>Control flow by changing %eip</p>
    <p>movl ..., %edx movl ..., %ecx compl %ecx, %edx jg winning movl %ecx, %eax subl %edx, %eax shrl %eax incl %eax addl %eax, %edx movl %edx, ... subl %eax, %ecx movl %ecx, ... winning:</p>
    <p>%eip</p>
  </div>
  <div class="page">
    <p>Long Lasting Security: EVT09</p>
    <p>The Usual Method</p>
    <p>Sequence of instructions: %eip</p>
    <p>Execute instruction, update %eip</p>
    <p>Control flow by changing %eip</p>
    <p>movl ..., %edx movl ..., %ecx compl %ecx, %edx jg winning movl %ecx, %eax subl %edx, %eax shrl %eax incl %eax addl %eax, %edx movl %edx, ... subl %eax, %ecx movl %ecx, ... winning:</p>
    <p>%eip</p>
  </div>
  <div class="page">
    <p>Long Lasting Security: EVT09</p>
    <p>The Usual Method</p>
    <p>Sequence of instructions: %eip</p>
    <p>Execute instruction, update %eip</p>
    <p>Control flow by changing %eip</p>
    <p>movl ..., %edx movl ..., %ecx compl %ecx, %edx jg winning movl %ecx, %eax subl %edx, %eax shrl %eax incl %eax addl %eax, %edx movl %edx, ... subl %eax, %ecx movl %ecx, ... winning:%eip</p>
  </div>
  <div class="page">
    <p>Long Lasting Security: EVT09</p>
    <p>The ROP Method</p>
    <p>Sequence of Gadgets: %esp</p>
    <p>Pointers to instructions</p>
    <p>Data</p>
    <p>Execute Gadget</p>
    <p>ret increments %esp</p>
    <p>Control flow by changing %esp</p>
    <p>(data)</p>
    <p>(data)</p>
    <p>(data)</p>
    <p>insns...ret</p>
    <p>insns...ret</p>
    <p>insns...ret</p>
    <p>insns...ret</p>
    <p>insns...ret %esp</p>
  </div>
  <div class="page">
    <p>Long Lasting Security: EVT09</p>
    <p>The ROP Method</p>
    <p>Sequence of Gadgets: %esp</p>
    <p>Pointers to instructions</p>
    <p>Data</p>
    <p>Execute Gadget</p>
    <p>ret increments %esp</p>
    <p>Control flow by changing %esp</p>
    <p>(data)</p>
    <p>(data)</p>
    <p>(data)</p>
    <p>insns...ret</p>
    <p>insns...ret</p>
    <p>insns...ret</p>
    <p>insns...ret</p>
    <p>insns...ret %esp</p>
    <p>%eip</p>
  </div>
  <div class="page">
    <p>Long Lasting Security: EVT09</p>
    <p>The ROP Method</p>
    <p>Sequence of Gadgets: %esp</p>
    <p>Pointers to instructions</p>
    <p>Data</p>
    <p>Execute Gadget</p>
    <p>ret increments %esp</p>
    <p>Control flow by changing %esp</p>
    <p>(data)</p>
    <p>(data)</p>
    <p>(data)</p>
    <p>insns...ret</p>
    <p>insns...ret</p>
    <p>insns...ret</p>
    <p>insns...ret</p>
    <p>insns...ret</p>
    <p>%esp</p>
    <p>%eip</p>
  </div>
  <div class="page">
    <p>Long Lasting Security: EVT09</p>
    <p>ROP Example 1: No-op</p>
    <p>nop</p>
    <p>Usual ROP ret</p>
    <p>Just advances %eip Just advances %esp</p>
    <p>Pointer to ret instruction</p>
    <p>%esp %eip</p>
  </div>
  <div class="page">
    <p>Long Lasting Security: EVT09</p>
    <p>ROP Example 2: Immediate Constants</p>
    <p>movl $0xdeadbeef, %eax movl $0xcafebabe, %ebx</p>
    <p>Usual ROP</p>
    <p>Set %eax to 0xdeadbeef</p>
    <p>Set %ebx to 0xcafebabe</p>
    <p>Put constants on stack</p>
    <p>Pop them into registers</p>
    <p>%esp</p>
    <p>%eip</p>
  </div>
  <div class="page">
    <p>Long Lasting Security: EVT09</p>
    <p>Update %eip Update %esp</p>
    <p>Conditional branch possible</p>
    <p>ROP Example 3: Control Flow</p>
    <p>jmp +16</p>
    <p>Usual ROP</p>
    <p>...</p>
    <p>popl %esp ret</p>
    <p>%esp</p>
    <p>%eip ... ret</p>
  </div>
  <div class="page">
    <p>Long Lasting Security: EVT09</p>
    <p>ROP Wrap-Up</p>
    <p>Use stack for program (%esp vs. %eip)</p>
    <p>Gadgets</p>
    <p>Multiple instruction sequences &amp; data</p>
    <p>Chained together by ret</p>
    <p>Turing-complete</p>
    <p>No code injection!</p>
  </div>
  <div class="page">
    <p>Long Lasting Security: EVT09</p>
    <p>SP</p>
    <p>SP</p>
    <p>d</p>
    <p>pop hl, de</p>
    <p>bc ! (hl) pop hl</p>
    <p>(de) ! hl + bc pop hl</p>
    <p>sp ! sp + hl pop bc</p>
    <p>(de) ! hl + bc pop hl</p>
    <p>sp ! sp + hl</p>
    <p>ROP On The AVC Advantage</p>
    <p>Extended ROP to Z80</p>
    <p>Turing-complete gadget set</p>
    <p>Some automation</p>
    <p>sp</p>
  </div>
  <div class="page">
    <p>Long Lasting Security: EVT09</p>
    <p>Challenges Overcome</p>
  </div>
  <div class="page">
    <p>Long Lasting Security: EVT09</p>
    <p>Thank you</p>
  </div>
</Presentation>
