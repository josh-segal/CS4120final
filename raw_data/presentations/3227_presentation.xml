<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Trustworthy Whole-System Provenance for the Linux Kernel</p>
    <p>Adam Bates, Dave (Jing) Tian, Thomas Moyer, and Kevin R. B. Butler</p>
    <p>USENIX Security Symposium, Washington D.C., USA 13 August, 2015</p>
    <p>In association with</p>
  </div>
  <div class="page">
    <p>Provenance Matters!</p>
  </div>
  <div class="page">
    <p>Provenance Matters!</p>
  </div>
  <div class="page">
    <p>Provenance Matters!</p>
    <p>40,000 Massachusetts d e f e n d a n t s m a y b e affected by chemistss alleged misdeeds - Morgan Windsor, CNN, Aug 2013</p>
  </div>
  <div class="page">
    <p>Provenance Matters!</p>
    <p>40,000 Massachusetts d e f e n d a n t s m a y b e affected by chemistss alleged misdeeds - Morgan Windsor, CNN, Aug 2013</p>
    <p>But is our provenance secure?</p>
  </div>
  <div class="page">
    <p>Overview</p>
    <p>Linux Provenance Modules (LPM), for trustworthy provenance monitors in Linux.</p>
    <p>Provenance-Based Data Loss Prevention, to monitor and control the propagation of sensitive data in enterprise environments.</p>
    <p>Evaluation:</p>
    <p>Collection agent imposes 3%-8% runtime overhead</p>
    <p>Provenance queries return in under 3 milliseconds</p>
  </div>
  <div class="page">
    <p>Whole-System Provenance</p>
    <p>A complete description of system Agents</p>
    <p>e.g., Users, Groups</p>
    <p>controlling Activities</p>
    <p>e.g., Processes, Forks</p>
    <p>and their interactions with Controlled Data Types.</p>
    <p>e.g., Inodes, Sockets, IPC, Memory</p>
    <p>Def: provenance \pra-v -nan(t)s\ n:</p>
  </div>
  <div class="page">
    <p>Provenance-Aware Adversary attempts to disable collection agent, tamper with logs, etc.</p>
    <p>Provenance-Aware Applications can be compromised, and may lie about system events.</p>
    <p>Kernel is trusted on install, but can later be attacked.</p>
    <p>PKI stores and distributes keys for Prov-Aware Hosts.</p>
    <p>Threat Model</p>
    <p>L T HE</p>
    <p>PR</p>
    <p>OV EN</p>
    <p>AN CE</p>
  </div>
  <div class="page">
    <p>Design Goals</p>
    <p>Reference Monitor Concept</p>
    <p>Networked Provenance</p>
    <p>Layered Provenance</p>
    <p>Rationale</p>
  </div>
  <div class="page">
    <p>Design</p>
    <p>LPM architecture mirrors Linux Security Modules.</p>
    <p>Kernel instrumented with 170 provenance hooks.</p>
    <p>Modules efficiently transmit provenance to user space with relay buffer.</p>
    <p>user space</p>
    <p>kernel space</p>
    <p>Prov. Module</p>
    <p>Relay Buffer</p>
    <p>Prov. Hooks</p>
    <p>System Provenance</p>
    <p>Provenance Recorder</p>
    <p>Kernel layer collection agent:</p>
  </div>
  <div class="page">
    <p>Design</p>
    <p>user space</p>
    <p>kernel space</p>
    <p>Prov. Module</p>
    <p>Relay Buffer</p>
    <p>Prov. Hooks</p>
    <p>System Provenance</p>
    <p>Provenance Recorder</p>
    <p>Kernel layer collection agent: user spaceText Editor</p>
    <p>kernel spaceopen System Call</p>
    <p>Look Up Inode</p>
    <p>Error Checks</p>
    <p>DAC Checks</p>
    <p>LSM Hook</p>
    <p>LPM Hook</p>
    <p>Access Inode</p>
    <p>Examine context. Does request pass policy? Grant or deny.</p>
    <p>Examine context. Collect provenance. If successful, grant.</p>
    <p>LSM Module</p>
    <p>LPM Module</p>
    <p>&quot;Authorized?&quot; Yes or No</p>
    <p>&quot;Prov collected?&quot; Yes or No</p>
    <p>Example control flow through an LPM provenance hook.</p>
  </div>
  <div class="page">
    <p>user space</p>
    <p>kernel space</p>
    <p>Neo4j</p>
    <p>Prov. Module</p>
    <p>Relay Buffer</p>
    <p>SNAP</p>
    <p>GZip</p>
    <p>SQL</p>
    <p>Prov. Hooks</p>
    <p>System Provenance</p>
    <p>Provenance Recorder</p>
    <p>Design</p>
    <p>Recorders translate provenance stream for various storage backends.</p>
    <p>Support recording to file, relational DBs, graph DBs.</p>
    <p>Upcoming: Accumulo.</p>
    <p>Support for provenance storage:</p>
  </div>
  <div class="page">
    <p>user space</p>
    <p>kernel space</p>
    <p>Neo4j</p>
    <p>NF Hooks</p>
    <p>Prov. Module</p>
    <p>Relay Buffer</p>
    <p>SNAP</p>
    <p>GZip</p>
    <p>SQL</p>
    <p>Prov. Hooks</p>
    <p>System Provenance</p>
    <p>Provenance Recorder</p>
    <p>Design</p>
    <p>Message Commitment Protocol enforced with Netfilter subsystem.</p>
    <p>LPM performs per-packet DSA signing and verification.</p>
    <p>Signatures are embedded in IP Options, ensuring (nearly) universal compatibility.</p>
    <p>Support for networked provenance-aware systems:</p>
  </div>
  <div class="page">
    <p>user space</p>
    <p>kernel space</p>
    <p>Neo4j</p>
    <p>NF Hooks</p>
    <p>Prov. Module</p>
    <p>Relay Buffer</p>
    <p>SNAP</p>
    <p>GZip</p>
    <p>SQL</p>
    <p>Prov. Hooks</p>
    <p>System Provenance</p>
    <p>Provenance Recorder</p>
    <p>Design Support for networked provenance-aware systems:</p>
    <p>user spaceWeb Browser</p>
    <p>kernel spaceTCP Send Packet</p>
    <p>IP Send Packet</p>
    <p>Update IP Checksum</p>
    <p>Netfilter Hook Iterate</p>
    <p>IPTables Hook</p>
    <p>LPM Hook</p>
    <p>Network Card</p>
    <p>Examine routing table. Does request pass policy? Grant or deny.</p>
    <p>Sign IP HDR, Payload. Embed in IP Options. Update IP Checksum.</p>
    <p>IPTables</p>
    <p>LPM Module</p>
    <p>&quot;Ok with you?&quot; Yes or No</p>
    <p>&quot;Prov embedded?&quot; Yes or No</p>
    <p>Example control flow for authenticated packet transmission.</p>
  </div>
  <div class="page">
    <p>user space</p>
    <p>kernel space</p>
    <p>Neo4j</p>
    <p>NF Hooks</p>
    <p>Prov. Module</p>
    <p>Relay Buffer</p>
    <p>SNAP</p>
    <p>GZip</p>
    <p>SQL</p>
    <p>Prov. Hooks</p>
    <p>Prov. Aware Applications</p>
    <p>System Provenance Workflow Provenance</p>
    <p>Provenance Recorder</p>
    <p>Design Support for layered provenance-aware systems:</p>
    <p>Kernel provenance suffers from semantic gap problem.</p>
    <p>Layered provenance bridges the gap, but expands attack surface.</p>
    <p>Authenticity and integrity of workflow provenance must be validated, but how?</p>
  </div>
  <div class="page">
    <p>user space</p>
    <p>kernel space</p>
    <p>Neo4j</p>
    <p>NF Hooks</p>
    <p>Prov. Module</p>
    <p>Relay Buffer</p>
    <p>SNAP</p>
    <p>GZip</p>
    <p>SQL</p>
    <p>Prov. Hooks</p>
    <p>IMA</p>
    <p>TPM</p>
    <p>Prov. Aware Applications</p>
    <p>System Provenance Workflow Provenance</p>
    <p>Integrity Measurements</p>
    <p>Provenance Recorder</p>
    <p>Design Support for layered provenance-aware systems:</p>
    <p>LPM includes a gateway for upgrading low integrity provenance.</p>
    <p>Integrity Measurement Architecture (IMA) check verifies load time integrity of application.</p>
    <p>Only correctly validated provenance is recorded.</p>
  </div>
  <div class="page">
    <p>Analysis of Secure Deployment 1. Completeness</p>
    <p>Provenance hooks observe all sensitive operations performed on controlled data types.</p>
    <p>complete mediation of controlled data types.</p>
  </div>
  <div class="page">
    <p>Data Loss Prevention</p>
    <p>Data Loss Prevention tools take the following forms:</p>
    <p>Regex-Based: Fails to recognize data transformations</p>
    <p>Manual Labelling: Not tamper proof, may fail to handle data fusions.</p>
    <p>Provenance-Based: All lineage information is recorded, any sensitive ancestry can be traced.</p>
    <p>Used</p>
    <p>Used UsedWasGeneratedBy WasGeneratedBy</p>
    <p>Birth_Dates:0</p>
    <p>SSNs:0</p>
    <p>Training_Data:0</p>
    <p>PII_Data:0 PII_Data.gz:0join Birth_Dates SSNs &gt; PII_Data gzip PII_Data</p>
    <p>Provenance Graph: Two objects are fused together to create PII, then compressed.</p>
  </div>
  <div class="page">
    <p>Evaluation: Collection Costs</p>
    <p>Benchmark VanillaKernel LPM w/</p>
    <p>Provmon Overhead</p>
    <p>Kernel Compilation 598 sec 612 sec 2.7%</p>
    <p>Postmark 25 sec 27 sec 7.5%</p>
    <p>Blast Sequencing 376 sec 390 sec 4.8%</p>
    <p>Overhead is highest on I/O intensive tasks with frequent file creation, deletion, and open.</p>
    <p>Costs amortize over reads and writes.</p>
  </div>
  <div class="page">
    <p>Raw volume generated by</p>
    <p>the kernel.</p>
    <p>Evaluation: Collection Costs</p>
    <p>Storage overhead is high, but consistent with other system layer provenance/audit tools. Compression techniques can be used to reduce storage burden.</p>
    <p>S to</p>
    <p>ra ge</p>
    <p>C os</p>
    <p>t ( G</p>
    <p>B yt</p>
    <p>es )</p>
    <p>Time (Minutes)</p>
    <p>Uncompressed Stream Compressed Stream</p>
    <p>In-Memory Graph</p>
    <p>Max. Space Efficiency</p>
    <p>Max. Query Efficiency</p>
  </div>
  <div class="page">
    <p>Evaluation: Query Costs</p>
    <p>PB-DLP Ancestry Queries for Inodes in a 6 million node graph. (Only inodes with over 50 ancestors were considered)</p>
    <p>C u m</p>
    <p>u la</p>
    <p>ti ve</p>
    <p>D en</p>
    <p>si ty</p>
    <p>Response Time (Milliseconds)</p>
    <p>Worst case: 17,696 nodes Returns in 21 ms</p>
  </div>
  <div class="page">
    <p>Iperf Performance</p>
    <p>T h ro</p>
    <p>u g h p u t</p>
    <p>(M b p s)</p>
    <p>Vanilla LPM</p>
    <p>Provmon Batch Sig</p>
    <p>Evaluation: Network Prov.</p>
    <p>IPerf TCP benchmarks of Message Commitment Protocol.</p>
    <p>Alternatives: SSL or IPSec, which require app rewriting.</p>
    <p>Batch signatures c o u l d r e d u c e performance cost.</p>
  </div>
  <div class="page">
    <p>Takeaways</p>
    <p>identify the requirements for trustworthy provenance in distributed, heterogeneous environments.</p>
    <p>design, implement, and deploy the first fully-realized provenance monitor.</p>
    <p>propose a mechanism for provenance-based data loss prevention that offers improved capabilities over existing enterprise systems.</p>
    <p>In this work, we</p>
  </div>
  <div class="page">
    <p>Questions?</p>
    <p>Thank you for your time. adammbates@ufl.edu</p>
    <p>LPM is available at http://linuxprovenance.org</p>
  </div>
</Presentation>
