<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>HotDep'10 1</p>
    <p>Active Quorum Systems</p>
    <p>Alysson Bessani, Paulo Sousa, Miguel Correia University of Lisbon, Faculty of Sciences - Portugal</p>
    <p>USENIX HotDep10 Vancouver - CA</p>
    <p>October 3rd, 2010</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>the state machine replication model</p>
    <p>synchronization primitives due to their</p>
    <p>complexity and underlying assumptions</p>
    <p>October 3rd, 2010 HotDep'10 2</p>
  </div>
  <div class="page">
    <p>State Machine Replication</p>
    <p>October 3rd, 2010 HotDep'10 3</p>
    <p>SERVERS CLIENTS</p>
    <p>op1</p>
    <p>op2 Total Order Broadcast</p>
    <p>(the magic happens here)</p>
    <p>op2, op1</p>
    <p>op2, op1</p>
    <p>op2, op1</p>
    <p>op2, op1</p>
    <p>Requires Consensus</p>
  </div>
  <div class="page">
    <p>SMR Limitations</p>
    <p>Conceptually simple, but too restrictive</p>
    <p>Make it difficult to implement things like housekeeping or asynchronous messaging</p>
    <p>Usually provides linearizability, which is a</p>
    <p>very strong consistency model, not</p>
    <p>required in many applications</p>
    <p>Difficult to implement multi-threaded</p>
    <p>servers (replica determinism requirement)</p>
    <p>October 3rd, 2010 HotDep'10 4</p>
  </div>
  <div class="page">
    <p>Avoiding Consensus</p>
    <p>Strong synchronization should be avoided at all costs</p>
    <p>Embrace eventual consistency</p>
    <p>This is the way things are done</p>
    <p>But it is not always adequate</p>
    <p>It makes the programmers life harder</p>
    <p>Some applications do require consistency</p>
    <p>October 3rd, 2010 HotDep'10 5</p>
  </div>
  <div class="page">
    <p>Research Question</p>
    <p>Would it be possible to build</p>
    <p>dependable and consistent services</p>
    <p>relying on strong synchronization only</p>
    <p>when it is absolutely necessary?</p>
    <p>October 3rd, 2010 HotDep'10 6</p>
  </div>
  <div class="page">
    <p>HotDep'10 7</p>
    <p>BFT Abstractions</p>
    <p>BFT  BFT State Machine Replication</p>
    <p>October 3rd, 2010</p>
    <p>High level abstractions</p>
    <p>Low level abstractions</p>
  </div>
  <div class="page">
    <p>High-level Abstractions:</p>
    <p>Coordination Services</p>
    <p>October 3rd, 2010 HotDep'10 8</p>
    <p>Crash FT: Zookeper (name service + sequencers), Chubby (file system + locks), Sinfonia (registers + mini transactions)</p>
    <p>BFT: DepSpace (policy enforced augmented tuple space), UpRightZookeeper (same as Zookeeper)</p>
    <p>Traditional systems Coordination systems</p>
  </div>
  <div class="page">
    <p>Low-level Abstractions</p>
    <p>read/write quorum systems</p>
    <p>leader election</p>
    <p>barriers, etc</p>
    <p>In this paper we propose a new one:</p>
    <p>Active quorum systems (AQS) (Byzantine Quorum System + Synchronization Power)</p>
    <p>October 3rd, 2010 HotDep'10 9</p>
  </div>
  <div class="page">
    <p>AQS Benefits</p>
    <p>Minimal assumptions</p>
    <p>Consensus is used only when it is absolutely necessary</p>
    <p>Stability</p>
    <p>Non-favorable executions (faults, asynchrony, contention) adds only 2 communication steps</p>
    <p>Flexibility</p>
    <p>Protocols can be simplified if the application requirements allow it</p>
    <p>October 3rd, 2010 HotDep'10 10</p>
  </div>
  <div class="page">
    <p>AQS Principle #1</p>
    <p>Break the state in small objects</p>
    <p>October 3rd, 2010 HotDep'10 11</p>
    <p>SERVERS</p>
    <p>Service State</p>
    <p>SERVERS</p>
    <p>SMR: the service as a replicated deterministic</p>
    <p>state machine</p>
    <p>AQS: the service as a a set of independent objects accessed by</p>
    <p>different clients.</p>
  </div>
  <div class="page">
    <p>AQS Principle #2</p>
    <p>Three types of operations</p>
    <p>read</p>
    <p>Reads the state of the object</p>
    <p>write</p>
    <p>Defines a new state for the object</p>
    <p>Example: x = 2</p>
    <p>rmw (read-modify-write)</p>
    <p>Updates the state of the object using its old value (consensus number = n)</p>
    <p>Example: x = x + 2 October 3rd, 2010 HotDep'10 12</p>
  </div>
  <div class="page">
    <p>HotDep'10 13</p>
    <p>Active Quorum Systems Protocols</p>
    <p>read</p>
    <p>write</p>
    <p>rmw</p>
    <p>Quorum-based asynchronous protocols for register</p>
    <p>implementation (PBFT-BC, Liskov &amp; Rodrigues - ICDCS06).</p>
    <p>PBFT (Castro &amp; Liskov, OSDI99) with some modifications</p>
    <p>to deal with concurrent writes.</p>
    <p>October 3rd, 2010</p>
  </div>
  <div class="page">
    <p>Active Quorum Systems Protocols</p>
    <p>October 3rd, 2010 HotDep'10 14</p>
  </div>
  <div class="page">
    <p>Extensions</p>
    <p>Avoiding signatures</p>
    <p>Authenticators can be used instead (like HQ)</p>
    <p>Additional cores can be used to verify signatures</p>
    <p>Non-malicious BFT does not require full-fledge</p>
    <p>cryptographic signatures</p>
    <p>Multi-object operations</p>
    <p>If one operation is an rmw, the whole operation set is</p>
    <p>executed as an rmw</p>
    <p>October 3rd, 2010 HotDep'10 15</p>
  </div>
  <div class="page">
    <p>Weakening the protocols</p>
    <p>October 3rd, 2010 HotDep'10 16</p>
    <p>(BFT) Replication Protocol</p>
    <p>Environment</p>
    <p>Service</p>
    <p>No Faults</p>
    <p>No Contention</p>
    <p>Synchrony</p>
    <p>Semantics</p>
    <p>Consistency</p>
    <p>Access Control</p>
    <p>AQS</p>
    <p>Q/U HQ-Replication</p>
    <p>Zyzzyva</p>
  </div>
  <div class="page">
    <p>AQS Principle #3</p>
    <p>Exploit the service specification for</p>
    <p>optimizations</p>
    <p>Access control: single- vs multiple-writers</p>
    <p>Consistency: regular vs. atomic objects</p>
    <p>Regular: no perfect emulation of a nonreplicated system</p>
    <p>Atomic = Linearizable</p>
    <p>October 3rd, 2010 HotDep'10 17</p>
  </div>
  <div class="page">
    <p>Performance (number of communication steps)</p>
    <p>October 3rd, 2010 HotDep'10 18</p>
    <p>Operation</p>
    <p>Type</p>
    <p>Single W.</p>
    <p>Regular</p>
    <p>Single W.</p>
    <p>Atomic</p>
    <p>Multiple W.</p>
    <p>Regular</p>
    <p>Multiple W.</p>
    <p>Atomic</p>
    <p>read 2 2(4) 2 2(4)</p>
    <p>write 2 2 4(6) 4(6)</p>
    <p>rmw 2 2 5(7)* 5(7)*</p>
    <p>Single writer: No need to read the current timestamp before updating it</p>
    <p>Single writer: No PBFT, just a single-writer write</p>
    <p>Regularity: No need to do write-backs</p>
  </div>
  <div class="page">
    <p>AQS Applications</p>
    <p>LDAP:  Main AQS Object: LDAP Entry</p>
    <p>Only Entry creation and removal require rmw</p>
    <p>(A file system metadata service is very similar)</p>
    <p>Smart object storage:  Main AQS Object: Data Block</p>
    <p>Uses rmw to modify single bytes of large blocks</p>
    <p>Access control can be used to optimize writes</p>
    <p>Tuple Space:  Main AQS Object: Tuple</p>
    <p>Only tuple removal requires rmw</p>
    <p>October 3rd, 2010 HotDep'10 19</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>AQS key principles</p>
    <p>Break the service state in as many objects as</p>
    <p>possible</p>
    <p>Divide the object operations in read, write and rmw</p>
    <p>Exploit the service specification in order to find</p>
    <p>opportunities for optimization</p>
    <p>Benefits:</p>
    <p>Minimal assumptions</p>
    <p>Communication optimality</p>
    <p>Stability for non-favorable executions</p>
    <p>October 3rd, 2010 HotDep'10 20</p>
  </div>
</Presentation>
