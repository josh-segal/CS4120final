<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Samuel Jero1, William Koch2, Richard Skowyra3, Hamed Okhravi3, Cristina Nita-Rotaru4, and David Bigelow3</p>
    <p>USENIX Security 2017</p>
    <p>Identifier Binding Attacks and Defenses in Software-Defined Networks</p>
    <p>DISTRIBUTION STATEMENT A. Approved for public release: distribution unlimited. This material is based upon work supported by the Department of Defense under Air Force Contract No. FA8721-05-C-0002 and/or FA8702-15-D-0001. Any opinions, findings, conclusions or recommendations expressed in this material are those of the author(s) and do not necessarily reflect the views of the Department of Defense. 2017 Massachusetts Institute of Technology. Delivered to the U.S. Government with Unlimited Rights, as defined in DFARS Part 252.227-7013 or 7014 (Feb 2014). Notwithstanding any copyright notice, U.S. Government rights in this work are defined by DFARS 252.227-7013 or DFARS 252.227-7014 as detailed above. Use of this work other than as specifically authorized by the U.S. Government may violate any copyrights that exist in this work.</p>
  </div>
  <div class="page">
    <p>A Day in the Life Of Your Browser</p>
    <p>www.chase.com</p>
    <p>DNS Request</p>
    <p>HTTP Request</p>
    <p>ARP Request DNS RequestDNS Response</p>
    <p>ARP Reply</p>
    <p>HTTP Reply</p>
    <p>Insecure identifier bindings make this possible</p>
  </div>
  <div class="page">
    <p>Modern networks have many protocols layered on top of each other</p>
    <p>Network Identifier: An identifier for a device used at some layer of the network stack  Examples: IP addresses, MAC addresses,</p>
    <p>Hostnames  Used for forwarding as well as access</p>
    <p>control and authorization</p>
    <p>Devices need to bind identifiers from higher layers to lower layers  ARP, DHCP, DNS, Active Directory</p>
    <p>Network Identifiers and Their Bindings</p>
    <p>ARP DHCP</p>
    <p>DNS</p>
    <p>Directory Service</p>
    <p>sw:1,port:1 sw:2,port:42</p>
    <p>laptop.example.org server.example.org</p>
    <p>user1 user2</p>
    <p>Devices</p>
    <p>Network Locations</p>
    <p>MAC Addresses</p>
    <p>IP Addresses</p>
    <p>Hostnames</p>
    <p>Usernames</p>
    <p>MultiHoming</p>
    <p>Switch Learning</p>
  </div>
  <div class="page">
    <p>No authentication</p>
    <p>Binding protocols often rely on simple broadcast queries</p>
    <p>No cross-layer checks</p>
    <p>No additional checks on binding updates</p>
    <p>Mutable Identifiers</p>
    <p>Bindings Performed by Insecure Protocols</p>
    <p>WHO HAS 10.0.1.42?</p>
    <p>ME! ME! ME! I DO!</p>
    <p>I do</p>
    <p>ARP Poisoning</p>
    <p>Enables:  Host Impersonation  Man-In-The-Middle  Privilege Escalation  Denial of Service</p>
  </div>
  <div class="page">
    <p>Port Security  Limits number of MAC address per switch port  Heuristically blocks attackers spoofing MAC addresses</p>
    <p>Cisco Dynamic ARP Inspection (DAI)  Compares ARP responses with internal DHCP server records  Requires use of internal DHCP server</p>
    <p>DHCP Snooping  Trusted / Untrusted zones  DHCP packets from trusted zone used to setup bindings to filter untrusted zone packets</p>
    <p>DNSSEC  Prevents forged DNS responses</p>
    <p>Existing Defenses</p>
    <p>These are ad-hoc solutions specific to particular identifiers and requiring manual configuration</p>
    <p>Ad-hoc, limited to MAC layer, manual configuration</p>
    <p>Limited to ARP, no protection for static IPs, manual configuration</p>
    <p>Limited to DNS, rogue servers can still exist, manual and complex configuration</p>
    <p>Limited to DHCP, no protection for static IPs, manual configuration</p>
  </div>
  <div class="page">
    <p>Unified control plane  Single binding table for entire</p>
    <p>network</p>
    <p>Bare Metal Switches  Switches do not include existing</p>
    <p>defenses against binding attacks</p>
    <p>Delayed Flow Rule Consistency  Temporary inconsistencies between</p>
    <p>controller and switches  Flow rules are not instantly removed</p>
    <p>from switches when controller state changes</p>
    <p>Identifier Binding in Software Defined Networks</p>
    <p>Control Plane</p>
    <p>Data Plane</p>
    <p>Switch Switch</p>
    <p>Switch</p>
    <p>Device Device</p>
    <p>Switch</p>
    <p>SDN Controller</p>
    <p>Fwd ACLs</p>
  </div>
  <div class="page">
    <p>Unified control plane  Attackers anywhere in the network can</p>
    <p>poison any binding</p>
    <p>Bare Metal Switches  Existing defenses must be implemented</p>
    <p>in the controller  Most controllers have not implement</p>
    <p>them</p>
    <p>Delayed Flow Rule Consistency  Attackers can cause a few packets to be</p>
    <p>forwarded with stale state</p>
    <p>Binding Attacks in Software Defined Networks</p>
    <p>Binding Attacks Have Significantly Amplified Power In SDNs</p>
    <p>Control Plane</p>
    <p>Data Plane</p>
    <p>Switch Switch</p>
    <p>Switch</p>
    <p>Device Device</p>
    <p>Switch</p>
    <p>SDN Controller</p>
    <p>Fwd ACLs</p>
    <p>Spread</p>
    <p>Defenses</p>
    <p>Stale</p>
  </div>
  <div class="page">
    <p>Ethane (SIGCOMM 07)  Fine grained access control based on high level identifiers  Leverages bindings for access control at a per-flow level</p>
    <p>TopoGuard (NDSS 15)  Demonstrated attacks on the MAC Address to Location binding  Defense based on querying old location of MAC address before allowing address to move</p>
    <p>SPHINX (NDSS 15)  Demonstrated attacks on the MAC Address to Location binding  Defense by ensuring that new flows are consistent with existing bindings</p>
    <p>Existing Software Defined Network Defenses</p>
    <p>These solutions are focused only on specific identifiers, leaving other bindings vulnerable</p>
    <p>Vulnerable to MAC address spoofing, does not protect IP-hostname or hostname-user bindings</p>
    <p>Vulnerable to MAC address spoofing, limited to MAC-location binding</p>
    <p>Vulnerable to MAC address spoofing, limited to MAC-location binding</p>
  </div>
  <div class="page">
    <p>A new, more powerful binding attack  The Persona Hijacking Attack</p>
    <p>Takeover of ALL Identifiers</p>
    <p>Persistent</p>
    <p>A defense against ALL binding attacks  SecureBinder</p>
    <p>Mediate Bindings</p>
    <p>Root-of-trust</p>
    <p>This Paper Focuses On</p>
  </div>
  <div class="page">
    <p>Takeover of the Victim's IP address and DNS name  Persists for hours or days  Progressively breaks the MAC-Location, MAC-IP,</p>
    <p>and (possibly) IP-hostname bindings  Attacker becomes the owner-of-record for the</p>
    <p>Victims IP address  Victim appears to be malicious party</p>
    <p>DHCP server is co-opted to propagate this deception further into the network</p>
    <p>Operates in two phases:  IP Takeover  Leverage DHCP server to steal IP address</p>
    <p>and DNS name from Victim  Flow Poisoning  Leverage SDN to complete DHCP</p>
    <p>assignment</p>
    <p>Persona Hijacking</p>
    <p>sw:5,port:15 sw:1,port:1</p>
    <p>attacker.evil.org server.example.org</p>
  </div>
  <div class="page">
    <p>Attacker sends forged DHCP_RELEASE for Victim</p>
    <p>DHCP Server releases Victims address, but does not notify Victim</p>
    <p>Attacker sends DHCP_DISCOVER messages until Victims address is offered</p>
    <p>Attacker sends DHCP_REQUEST and launches Flow Poisoning attack</p>
    <p>DHCP server checks offered IP with an ARP request. Victims response is blocked by Flow Poisoning</p>
    <p>DHCP server completes handshake and Attacker becomes the owner-of-record of the Victims IP address</p>
    <p>IP Takeover</p>
    <p>SDN Controller</p>
    <p>DHCP ServerVictim</p>
    <p>Attacker</p>
    <p>RELEASE Victim IP</p>
    <p>DHCP DISCOVER DHCP DISCOVER DHCP DISCOVER</p>
    <p>IP OFFER IP OFFER</p>
    <p>IP OFFER=Victim</p>
    <p>ARP Flood</p>
    <p>Flow Poisoning</p>
    <p>DHCP ACK</p>
    <p>Attacker Owns Victims IP Address</p>
    <p>Goal: Steal Victims IP address and co-opt DHCP server to persist and propagate this deception</p>
  </div>
  <div class="page">
    <p>Flow Poisoning</p>
    <p>Attacker sends spoofed packets from the DHCP server to Victim</p>
    <p>SDN controller believes DHCP server has moved, inserts new flow rules</p>
    <p>DHCP server sends ARP broadcast to check for users of the Victims IP address</p>
    <p>SDN controller discovers true location of DHCP server, but old flow rules are not removed  Removed asynchronously via separate thread or timeouts</p>
    <p>ARP reply from victim hits old flow rules and is sent to Attacker, not DHCP server</p>
    <p>DHCP server assigns Victims IP address to Attacker</p>
    <p>SDN Controller</p>
    <p>DHCP ServerVictim</p>
    <p>Attacker</p>
    <p>ARP Flood</p>
    <p>A dd R</p>
    <p>ules</p>
    <p>Host Moved</p>
    <p>Old Rule</p>
    <p>X</p>
    <p>Goal: Blackhole ARP response from Victim to DHCP server</p>
  </div>
  <div class="page">
    <p>We demonstrated Persona Hijacking against ONOS and Ryu  Emulated Mininet environment  Persona Hijacking succeeded against both</p>
    <p>Source code analysis suggests that POX and Floodlight are also vulnerable</p>
    <p>Persona Hijacking In The Wild</p>
    <p>Controller Experimentally Vulnerable Probably</p>
    <p>Vulnerable Not Vulnerable</p>
    <p>ONOS</p>
    <p>Ryu</p>
    <p>POX</p>
    <p>Floodlight</p>
  </div>
  <div class="page">
    <p>Background</p>
    <p>SDN</p>
    <p>Persona Hijacking Attack  Takeover of ALL Identifiers</p>
    <p>Persistent</p>
    <p>SecureBinder: Designing A Defense  Mediate Bindings</p>
    <p>Root-of-trust</p>
    <p>Evaluation</p>
    <p>Summary</p>
    <p>Outline</p>
  </div>
  <div class="page">
    <p>Goals:  Isolate identifier binding control traffic from the data-plane</p>
    <p>Preventing attackers from observing and responding to queries  Mediate all bindings and answer queries</p>
    <p>Validate changes to existing bindings  Preventing attackers from poisoning these mappings and impersonating other hosts  Use a global network view to detect and resolve conflicts</p>
    <p>Validate binding control traffic  Preventing attacker from using forged lower-layer identifiers to change higher-layer</p>
    <p>bindings  Ensure that lower-layer bindings are valid before processing binding control traffic</p>
    <p>Protect readily-changed root identifiers (MAC Addresses)  Preventing attackers from impersonating known, but powered-off, devices  Use IEEE 802.1x to provide a root-of-trust for our network identifiers</p>
    <p>SecureBinder: Design Active Directory Communication</p>
    <p>DNS Protocol</p>
    <p>DHCP ARP</p>
    <p>L2 Switching</p>
    <p>MAC Addresses</p>
    <p>Active Directory Server</p>
    <p>DNS Server</p>
    <p>SDN Controller</p>
    <p>RADIUS Server</p>
    <p>No trust required</p>
    <p>Trusted</p>
  </div>
  <div class="page">
    <p>Separate control-plane and data-plane  Send binding control traffic to the control-plane  Seamlessly interpose on all binding protocols</p>
    <p>and requests  ARP, DHCP, DNS, NETBIOS, Active Directory</p>
    <p>Eliminates broadcast requests</p>
    <p>Global view of the network  Validate bindings by ensuring that identifiers</p>
    <p>are unique and binding requests come from expected locations</p>
    <p>Validate all layers of binding control traffic</p>
    <p>Programmatic control of the network  Efficiently prevent all spoofed packets using</p>
    <p>PER PORT egress (outbound) filters  Painless for administrators</p>
    <p>SecureBinder: Leveraging SDN</p>
    <p>Control Plane</p>
    <p>Data Plane</p>
    <p>Switch Switch</p>
    <p>Switch</p>
    <p>Device Device</p>
    <p>Switch</p>
    <p>Fwd ACLs</p>
    <p>Binding Mediator</p>
    <p>SDN Controller</p>
    <p>Egress Filter</p>
    <p>Control</p>
    <p>Binding Control Traffic</p>
    <p>Egress Filters</p>
    <p>Global Check</p>
  </div>
  <div class="page">
    <p>MAC addresses are easily modified  Attacker can trivially clone the MAC address of a victim device  Network cannot tell the difference between the legitimate device and a cloned MAC</p>
    <p>address</p>
    <p>MAC addresses are often equated with particular devices  i.e. The CEOs Laptop, My Desktop, the GIT server  Commonly used in or for Access Control</p>
    <p>A global network view does not help  Can ensure that MAC address is at exactly one place in the network  Cannot ensure it corresponds to the device we expect</p>
    <p>Need a root-of-trust</p>
    <p>Need to Protect MAC Addresses</p>
    <p>While not needed to prevent Persona Hijacking or ARP Poisoning, protecting MAC addresses is required to completely eliminate identifier binding attacks</p>
  </div>
  <div class="page">
    <p>IEEE 802.1x provides cryptographic assurance that a host is authorized to access the network  Optional extension ensures that it has the</p>
    <p>MAC address we expect</p>
    <p>Supported by all major OSes and switches  Same technology as WPA2 Enterprise</p>
    <p>An IEEE 802.1x Solution</p>
    <p>Network</p>
    <p>RADIUS Server</p>
    <p>Daemon</p>
  </div>
  <div class="page">
    <p>OF 1.3 Multiple Flow Tables  Table 0 is egress filtering and</p>
    <p>binding traffic separation  Table 1+ is forwarding, etc</p>
    <p>Based on the ONOS SDN controller  Version 1.5.1  Including Apps: Forwarding,</p>
    <p>ARP Proxy, DHCP</p>
    <p>New Apps  Binding Security App</p>
    <p>maintaining verified bindings  IEEE 802.1x app heavily</p>
    <p>modified</p>
    <p>Implementation</p>
    <p>ONOS SDN Controller</p>
    <p>Forwarding</p>
    <p>IEEE 802.1xDHCP</p>
    <p>ARP Proxy</p>
    <p>BindingApp</p>
    <p>TBL 0 TBL 1</p>
    <p>TBL 0 TBL 1</p>
    <p>Egress Fltr Fwd</p>
    <p>Egress Fltr Fwd FreeRADIUS</p>
    <p>Server</p>
    <p>Open vSwitch</p>
    <p>Open vSwitch</p>
  </div>
  <div class="page">
    <p>Formal:  Model checking analysis using SPIN  Modeled ARP and DHCP  7 correctness invariants  Found 6 attacks without SecureBinder  No attacks found with SecureBinder</p>
    <p>Security Evaluation</p>
    <p>Experimental:  Tested with Mininet, which provides an</p>
    <p>emulated SDN network environment  Launched three identifier binding</p>
    <p>attacks against ONOS and SecureBinder</p>
    <p>Attack ONOS SecureBinder</p>
    <p>Persona Hijacking</p>
    <p>ARP Spoofing</p>
    <p>Host Location Hijacking</p>
    <p>See the paper for more details</p>
    <p>Attacks Stopped by ONOS and SecureBinder</p>
  </div>
  <div class="page">
    <p>Latency and Controller Load:  Host Join Latency: time from host</p>
    <p>connected to network to operational network  New Flow Latency: time to start a new flow</p>
    <p>Only the first packet will be impacted</p>
    <p>Approximate controller load based on number of pkt_in events</p>
    <p>Performance Evaluation</p>
    <p>Flow Rules:  Limited switch resource  Typical switch has ~2-8K slots</p>
    <p>ONOS SecureBinder</p>
    <p>Host Join Latency 505ms 3505ms (+3sec)</p>
    <p>New Flow Latency 8ms 6ms (-2ms)</p>
    <p>Pkt_ins (Load) 131 193 (+47%)</p>
    <p>Testing done with Mininet, which provides an emulated SDN network environment</p>
  </div>
  <div class="page">
    <p>We demonstrated the power of identifier binding attacks in SDNs by developing a new attack called Persona Hijacking that progressively breaks multiple bindings to hijack a Victims IP address and hostname persistently and co-opts the network infrastructure to propagate that deception</p>
    <p>We showed that this attack is effective against ONOS and Ryu  We then developed a defense called SecureBinder that systematically and completely</p>
    <p>prevent all identifier binding attacks at multiple layers of the network stack by leveraging the programmatic control and global view of the network in SDN and a rootof-trust provided by IEEE 802.1x</p>
    <p>We showed that this defense is effective against 3 identifier binding attacks, including Persona Hijacking, and that its performance overhead is acceptable</p>
    <p>Summary</p>
  </div>
  <div class="page">
    <p>Questions?</p>
    <p>Samuel Jero sjero@purdue.edu</p>
  </div>
</Presentation>
