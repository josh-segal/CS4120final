<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>PHP Aspis:</p>
    <p>Using Partial Taint Tracking To</p>
    <p>Protect Against Injection Attacks</p>
    <p>Portland, OR, USA</p>
    <p>Ioannis Papagiannis, Matteo Migliavacca, Peter Pietzuch</p>
    <p>Department of Computing, Imperial College London</p>
  </div>
  <div class="page">
    <p>Injection Vulnerability Example</p>
    <p>&lt;?php</p>
    <p>$name=$GET[name];</p>
    <p>$sql =</p>
    <p>SELECT *</p>
    <p>FROM USERS</p>
    <p>WHERE user=.</p>
    <p>$name;</p>
    <p>mysql_query($sql);</p>
    <p>?&gt;</p>
  </div>
  <div class="page">
    <p>Injection Vulnerability Example</p>
    <p>&lt;?php</p>
    <p>$name=$GET[name];</p>
    <p>$sql =</p>
    <p>SELECT *</p>
    <p>FROM USERS</p>
    <p>WHERE user=.</p>
    <p>;</p>
    <p>mysql_query($sql);</p>
    <p>?&gt;</p>
    <p>http://?name=</p>
  </div>
  <div class="page">
    <p>Sanitisation</p>
    <p>&lt;?php</p>
    <p>$name=$GET[name];</p>
    <p>$sql =</p>
    <p>SELECT *</p>
    <p>FROM USERS</p>
    <p>WHERE user=.</p>
    <p>;</p>
    <p>mysql_query($sql);</p>
    <p>?&gt;</p>
    <p>http://?name=Yiannis</p>
  </div>
  <div class="page">
    <p>Taint Tracking</p>
    <p>&lt;?php</p>
    <p>$name=$GET[name];</p>
    <p>$sql =</p>
    <p>SELECT *</p>
    <p>FROM USERS</p>
    <p>WHERE user=.</p>
    <p>$name;</p>
    <p>mysql_query($sql);</p>
    <p>?&gt;</p>
    <p>taint data in entry points</p>
    <p>propagate taint</p>
    <p>use taint to guide sanitisation</p>
  </div>
  <div class="page">
    <p>Taint Tracking in PHP</p>
    <p>No support</p>
    <p>[Venema06]</p>
    <p>[Yip09, Pietraszek06]</p>
    <p>taint</p>
    <p>tracking</p>
    <p>modifications to the Zend engine should be avoided.</p>
    <p>Changes here result in incompatibilities with the rest</p>
    <p>of the world, and hardly anyone will ever adapt to</p>
    <p>specially patched Zend engines.  Therefore, this</p>
    <p>method is generally considered bad practice</p>
    <p>The PHP Manual</p>
  </div>
  <div class="page">
    <p>PHP is popular</p>
    <p>data provided by langpop.com</p>
  </div>
  <div class="page">
    <p>PHP Aspis Contributions</p>
    <p>Source-to-source transformations</p>
    <p>Partial Taint Tracking</p>
    <p>taint</p>
    <p>tracking!</p>
  </div>
  <div class="page">
    <p>PHP Aspis Contributions</p>
    <p>Source-to-source transformations</p>
    <p>Partial Taint Tracking</p>
    <p>taint</p>
    <p>tracking!</p>
  </div>
  <div class="page">
    <p>Why source transformations?</p>
    <p>Adopt officially</p>
    <p>Custom Runtime</p>
    <p>Source code transformations On demand</p>
    <p>Portable</p>
  </div>
  <div class="page">
    <p>Why source transformations?</p>
    <p>Challenges:</p>
    <p>(no metaprogramming)</p>
    <p>Adopt officially</p>
    <p>Custom Runtime</p>
    <p>Source code transformations On demand</p>
    <p>Portable</p>
  </div>
  <div class="page">
    <p>What is the performance overhead?</p>
    <p>Partial taint tracking: Code is not equally vulnerable</p>
    <p>Third-party plugin code</p>
    <p>Code that handles user data</p>
    <p>year WordPress WordPress</p>
    <p>Plugins</p>
    <p>CVE WordPress-Platform Injection Vulnerabilities</p>
    <p>CVE # Functionality</p>
    <p>CVE WordPress-Core Injection Vulnerabilities</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>PHP Aspis Overview</p>
    <p>PHP Aspis Transformed Application</p>
    <p>Tracking Code</p>
    <p>PHP Statements Library Calls</p>
    <p>Sanitisation Operations</p>
    <p>Non Tracking Code</p>
  </div>
  <div class="page">
    <p>PHP Aspis Overview</p>
    <p>PHP Aspis Transformed Application</p>
    <p>Tracking Code</p>
    <p>PHP Statements Library Calls</p>
    <p>Sanitisation Operations</p>
    <p>Non Tracking Code</p>
    <p>Yiannis</p>
    <p>Taint</p>
    <p>Input HTTP</p>
    <p>Request</p>
  </div>
  <div class="page">
    <p>PHP Aspis Overview</p>
    <p>PHP Aspis Transformed Application</p>
    <p>Yiannis</p>
    <p>Taint</p>
    <p>Tracking Code</p>
    <p>PHP Statements Library Calls</p>
    <p>Sanitisation Operations</p>
    <p>Non Tracking Code</p>
    <p>Input HTTP</p>
    <p>Request</p>
    <p>HTML Output</p>
    <p>SQL Query</p>
    <p>Eval Statement</p>
  </div>
  <div class="page">
    <p>PHP Aspis Overview</p>
    <p>WordPress</p>
    <p>Yiannis</p>
    <p>Taint</p>
    <p>WordPress plugin</p>
    <p>WordPress Core</p>
    <p>Input HTTP</p>
    <p>Request</p>
    <p>HTML Output</p>
    <p>SQL Query</p>
    <p>Eval Statement</p>
  </div>
  <div class="page">
    <p>PHP Aspis Overview</p>
    <p>PHP Aspis Transformed Application</p>
    <p>Yiannis</p>
    <p>Taint</p>
    <p>Tracking Code</p>
    <p>PHP Statements Library Calls</p>
    <p>Sanitisation Operations</p>
    <p>Non Tracking Code</p>
    <p>Input HTTP</p>
    <p>Request</p>
    <p>HTML Output</p>
    <p>SQL Query</p>
    <p>Taint meta-data</p>
    <p>Eval Statement</p>
    <p>Vulnerability prevention 1</p>
  </div>
  <div class="page">
    <p>PHP Aspis Overview</p>
    <p>PHP Aspis Transformed Application</p>
    <p>Yiannis</p>
    <p>Taint</p>
    <p>Tracking Code</p>
    <p>PHP Statements Library Calls</p>
    <p>Sanitisation Operations</p>
    <p>Non Tracking Code</p>
    <p>Input HTTP</p>
    <p>Request</p>
    <p>HTML Output</p>
    <p>SQL Query</p>
    <p>Eval Statement</p>
    <p>Taint meta-data Vulnerability prevention</p>
  </div>
  <div class="page">
    <p>Taint Meta-data</p>
    <p>Character Level</p>
    <p>o Precise information</p>
    <p>SELECT *</p>
    <p>FROM USERS</p>
    <p>WHERE user=yiannis;</p>
    <p>untainted</p>
    <p>tainted</p>
    <p>Variable Level</p>
    <p>o Leads to false positives</p>
    <p>SELECT *</p>
    <p>FROM USERS</p>
    <p>WHERE user=yiannis;</p>
    <p>tainted</p>
  </div>
  <div class="page">
    <p>Taint Meta-data</p>
    <p>More than 1 bit of taint meta-data is required</p>
    <p>SELECT *</p>
    <p>FROM USERS</p>
    <p>WHERE user=yiannis;</p>
    <p>untainted</p>
    <p>Partial sanitisation (e.g. )</p>
    <p>untainted (for SQL Injection)</p>
    <p>Character Level</p>
    <p>o Precise information</p>
    <p>SELECT *</p>
    <p>FROM USERS</p>
    <p>WHERE user=yiannis;</p>
    <p>untainted</p>
    <p>tainted</p>
    <p>Variable Level</p>
    <p>o Leads to false positives</p>
    <p>SELECT *</p>
    <p>FROM USERS</p>
    <p>WHERE user=yiannis;</p>
    <p>tainted</p>
  </div>
  <div class="page">
    <p>Example</p>
    <p>Taint Categories</p>
    <p>SELECT *</p>
    <p>FROM USERS</p>
    <p>WHERE user=yiannis;</p>
    <p>Taint Category</p>
    <p>SQL Injection XSS Eval Injection</p>
    <p>untainted untainted untainted</p>
    <p>tainted tainted</p>
  </div>
  <div class="page">
    <p>Example</p>
    <p>Taint Categories</p>
    <p>SELECT *</p>
    <p>FROM USERS</p>
    <p>WHERE user=yiannis;</p>
    <p>Generic way to define:</p>
    <p>How an application is</p>
    <p>supposed to sanitise</p>
    <p>What to do if it doesnt</p>
    <p>Sanitisation</p>
    <p>Functions</p>
    <p>htmlentities()</p>
    <p>htmlspecialchars()</p>
    <p>Guarded</p>
    <p>Sinks</p>
    <p>echo()AspisAntiXSS()</p>
    <p>print()AspisAntiXSS()</p>
    <p>XSS taint category excerpt</p>
    <p>Taint Category</p>
    <p>SQL Injection XSS Eval Injection</p>
    <p>untainted untainted untainted</p>
    <p>tainted tainted</p>
  </div>
  <div class="page">
    <p>PHP Aspis Overview</p>
    <p>PHP Aspis Transformed Application</p>
    <p>Yiannis</p>
    <p>Taint</p>
    <p>Tracking Code</p>
    <p>PHP Statements Library Calls</p>
    <p>Sanitisation Operations</p>
    <p>Non Tracking Code</p>
    <p>Input HTTP</p>
    <p>Request</p>
    <p>HTML Output</p>
    <p>SQL Query</p>
    <p>Taint meta-data Vulnerability prevention</p>
    <p>Eval Statement</p>
  </div>
  <div class="page">
    <p>PHP Aspis Overview</p>
    <p>PHP Aspis Transformed Application</p>
    <p>Yiannis</p>
    <p>Taint</p>
    <p>Tracking Code</p>
    <p>PHP Statements Library Calls</p>
    <p>Sanitisation Operations</p>
    <p>Non Tracking Code</p>
    <p>Input HTTP</p>
    <p>Request</p>
    <p>HTML Output</p>
    <p>SQL Query</p>
    <p>Taint meta-data Vulnerability prevention</p>
    <p>Eval Statement</p>
  </div>
  <div class="page">
    <p>Which vulnerabilities can be prevented?</p>
    <p>Possible Data Flows</p>
    <p>to</p>
    <p>from</p>
    <p>Tracking Non Tracking</p>
    <p>Tracking</p>
    <p>Non Tracking</p>
  </div>
  <div class="page">
    <p>Tracking code only</p>
    <p>PHP Aspis Transformed Application</p>
    <p>Tracking Code</p>
    <p>Non Tracking Code</p>
    <p>Input HTTP</p>
    <p>Request</p>
    <p>Yiannis</p>
    <p>Taint</p>
    <p>to</p>
    <p>from</p>
    <p>Tracking Non</p>
    <p>Tracking</p>
    <p>Tracking</p>
    <p>Non</p>
    <p>Tracking</p>
  </div>
  <div class="page">
    <p>Non Tracking code only</p>
    <p>PHP Aspis Transformed Application</p>
    <p>Tracking Code</p>
    <p>Non Tracking Code</p>
    <p>Input HTTP</p>
    <p>Request</p>
    <p>Yiannis</p>
    <p>Taint</p>
    <p>to</p>
    <p>from</p>
    <p>Tracking Non</p>
    <p>Tracking</p>
    <p>Tracking</p>
    <p>Non</p>
    <p>Tracking</p>
  </div>
  <div class="page">
    <p>PHP Aspis Transformed Application</p>
    <p>Tracking Code</p>
    <p>Non Tracking Code</p>
    <p>Input HTTP</p>
    <p>Request</p>
    <p>Yiannis</p>
    <p>Taint</p>
    <p>Non Tracking to Tracking</p>
    <p>to</p>
    <p>from</p>
    <p>Tracking Non</p>
    <p>Tracking</p>
    <p>Tracking</p>
    <p>Non</p>
    <p>Tracking</p>
  </div>
  <div class="page">
    <p>PHP Aspis Transformed Application</p>
    <p>Tracking Code</p>
    <p>Non Tracking Code</p>
    <p>Input HTTP</p>
    <p>Request</p>
    <p>Yiannis</p>
    <p>Taint</p>
    <p>Tracking/Non Tracking mixes</p>
    <p>to</p>
    <p>from</p>
    <p>Tracking Non</p>
    <p>Tracking</p>
    <p>Tracking</p>
    <p>Non</p>
    <p>Tracking</p>
  </div>
  <div class="page">
    <p>PHP Aspis Transformed Application</p>
    <p>Tracking Code</p>
    <p>Non Tracking Code</p>
    <p>Input HTTP</p>
    <p>Request</p>
    <p>Yiannis</p>
    <p>Taint</p>
    <p>Tracking to Non Tracking</p>
    <p>to</p>
    <p>from</p>
    <p>Tracking Non</p>
    <p>Tracking</p>
    <p>Tracking</p>
    <p>Non</p>
    <p>Tracking</p>
  </div>
  <div class="page">
    <p>PHP Aspis Transformed Application</p>
    <p>Tracking Code</p>
    <p>Non Tracking Code</p>
    <p>Input HTTP</p>
    <p>Request</p>
    <p>Yiannis</p>
    <p>Taint</p>
    <p>Tracking to Non Tracking</p>
    <p>to</p>
    <p>from</p>
    <p>Tracking Non</p>
    <p>Tracking</p>
    <p>Tracking</p>
    <p>Non</p>
    <p>Tracking</p>
  </div>
  <div class="page">
    <p>Summary: Prevented Vulnerabilities</p>
    <p>Vulnerabilities Prevented</p>
    <p>Tracking-code only</p>
    <p>Tracking to non tracking</p>
    <p>Vulnerabilities Not Prevented</p>
    <p>Non Tracking-code only</p>
    <p>Non Tracking to Tracking</p>
    <p>Tracking/Non Tracking mixes</p>
    <p>to</p>
    <p>From</p>
    <p>Tracking Non</p>
    <p>Tracking</p>
    <p>Tracking</p>
    <p>Non</p>
    <p>Tracking</p>
    <p>to</p>
    <p>from</p>
    <p>Tracking Non</p>
    <p>Tracking</p>
    <p>Tracking</p>
    <p>Non</p>
    <p>Tracking</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Storing Taint Meta-Data</p>
    <p>Original value Aspis-protected value</p>
    <p>Hello</p>
    <p>array (</p>
    <p>Hello, TaintCats</p>
    <p>)</p>
    <p>array (</p>
    <p>)</p>
    <p>Store taint in place</p>
    <p>Interoperation with non-tracking code</p>
    <p>Use arrays</p>
    <p>Scalar assignment semantics</p>
  </div>
  <div class="page">
    <p>Taint Tracking Transformations</p>
    <p>Statements &amp; Expressions must</p>
    <p>Original expression Transformed Expression</p>
    <p>$s.$t concat($s,$t)</p>
    <p>if ($v) {} if ($v[0]) {}</p>
    <p>$j = $i++ $j = postincr($i)</p>
  </div>
  <div class="page">
    <p>PHP Function Library</p>
    <p>Library functions do not work with Aspis-protected values</p>
    <p>use interceptors!</p>
    <p>Default Interceptor</p>
    <p>strip input taint</p>
    <p>add empty output taint</p>
    <p>good as the default fclose(), fopen()</p>
    <p>Custom Interceptors</p>
    <p>guess the taint of the output substr()</p>
    <p>reimplement the function sort()</p>
    <p>More custom interceptors, less false negatives</p>
    <p>o Default: drop taint, not abort the call</p>
    <p>o Support existing applications without developer intervention</p>
  </div>
  <div class="page">
    <p>The rest</p>
    <p>Taint representation Expressions Statements PHP Library Function Calls Taint initialisation Tracking/Non Tracking Calls Calls to sanitisation functions Calls to sinks Variable variables Variable function calls Include Statements Dynamic code generation</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Goals</p>
    <p>Is PHP Aspis effective in preventing injection attacks?</p>
    <p>What is the performance overhead?</p>
  </div>
  <div class="page">
    <p>Goals</p>
    <p>Is PHP Aspis effective in preventing injection attacks?</p>
    <p>What is the performance overhead?</p>
  </div>
  <div class="page">
    <p>Evaluation methodology</p>
    <p>WordPress</p>
    <p>Yiannis</p>
    <p>Taint</p>
    <p>Plugin</p>
    <p>Tracking Code</p>
    <p>WordPress Core Non Tracking Code</p>
    <p>Use all reported WordPress plugins to the CVE since 1/1/2010</p>
    <p>Replay the provided attack vectors where possible</p>
    <p>CVE attack vector Tainted?</p>
    <p>Tainted?</p>
  </div>
  <div class="page">
    <p>WordPress Plugins Results</p>
    <p>Total plugins with injection vulnerabilities: 15</p>
    <p>Tested plugins: 14</p>
    <p>o 1 plugin was not publicly available</p>
    <p>Vulnerabilities prevented: 12</p>
    <p>o 10 XSS cases</p>
    <p>o 2 SQL Injection cases</p>
    <p>Vulnerabilities not prevented: 2 (false negatives)</p>
    <p>o Stored XSS attacks</p>
    <p>o PHP Aspis does not track taint in the database</p>
    <p>No observed false positives</p>
  </div>
  <div class="page">
    <p>PHP Aspis Overhead</p>
    <p>DBGen</p>
    <p>PrimeGen</p>
    <p>WordPress</p>
    <p>Off</p>
    <p>On</p>
    <p>Partial</p>
    <p>Page Generation</p>
    <p>(ms)</p>
    <p>Issues DB queries Generates prime numbers</p>
    <p>Blogging platform</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Partial taint tracking</p>
    <p>o Can be applied by source code transformations</p>
    <p>o Is suitable for applications that support plugins</p>
    <p>o Is effective for real world plugin vulnerabilities</p>
    <p>PHP Aspis design favours false negatives</p>
    <p>o False negatives are a consequence of partial taint tracking</p>
    <p>o False positives break existing applications</p>
    <p>Reasonable performance overhead</p>
    <p>o Suitable for deployments where security is more important than</p>
    <p>performance</p>
    <p>o Partial taint tracking for the WordPress case: 2.2x slowdown</p>
  </div>
  <div class="page">
    <p>The End</p>
    <p>Ioannis Papagiannis</p>
    <p>DoC, Imperial College London</p>
    <p>$git clone git://github.com/jpapayan/aspis.git</p>
    <p>ip108@doc.ic.ac.uk</p>
  </div>
  <div class="page">
    <p>References</p>
    <p>[1] Venema, W. Runtime taint support proposal. In PHP Internals mailing list</p>
    <p>(2006)</p>
    <p>[2] Yip, A. Wang X., et all. Improving application security with data flow assertions.</p>
    <p>In SOSP 2009</p>
    <p>[3] Pietraszek, T and Berghe, C. Defending against injection attacks through</p>
    <p>context sensitive string evaluation. In Recent Advances in Intrusion Detection</p>
    <p>(2006)</p>
  </div>
</Presentation>
