<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>ADsafety Type-based Verification of JavaScript Sandboxing</p>
    <p>Joe Gibbs Politz Spiridon Aristides Eliopoulos</p>
    <p>Arjun Guha Shriram Krishnamurthi</p>
  </div>
  <div class="page"/>
  <div class="page"/>
  <div class="page">
    <p>third-party ad</p>
    <p>third-party ad</p>
  </div>
  <div class="page">
    <p>Who is running code in your</p>
    <p>browser?</p>
  </div>
  <div class="page">
    <p>Who is running code in your</p>
    <p>browser?</p>
  </div>
  <div class="page">
    <p>Who is running code in your</p>
    <p>browser?</p>
  </div>
  <div class="page">
    <p>the host you visit</p>
  </div>
  <div class="page">
    <p>the host you visit</p>
  </div>
  <div class="page">
    <p>the host you visit</p>
    <p>the ad server</p>
  </div>
  <div class="page">
    <p>the host you visit</p>
    <p>the ad server</p>
    <p>same JavaScript context</p>
  </div>
  <div class="page">
    <p>the host you visit</p>
    <p>the ad server</p>
    <p>&lt;iframe&gt;</p>
  </div>
  <div class="page">
    <p>the host you visit</p>
    <p>the ad server</p>
    <p>&lt;iframe&gt;</p>
    <p>top.location.href</p>
  </div>
  <div class="page">
    <p>Facebook JavaScript (FBJS)</p>
    <p>Google Caja</p>
    <p>Yahoo! ADsafe</p>
    <p>All are defining safe sub-languages</p>
    <p>Microsoft Web Sandbox</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>eval</p>
  </div>
  <div class="page">
    <p>eval</p>
  </div>
  <div class="page">
    <p>eval e</p>
  </div>
  <div class="page">
    <p>eval e</p>
    <p>wrap(e)</p>
  </div>
  <div class="page">
    <p>wrap</p>
    <p>eval e</p>
    <p>wrap(e)</p>
  </div>
  <div class="page">
    <p>wrap</p>
    <p>eval e</p>
    <p>wrap(e)</p>
    <p>filters</p>
    <p>w rappers</p>
    <p>Maffeis, Mitchell, and Taly, ESORICS 2009</p>
    <p>r ew</p>
    <p>rit er</p>
    <p>s 8</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>eval</p>
  </div>
  <div class="page">
    <p>eval</p>
    <p>ADSAFE.get(obj, x)</p>
    <p>untrusted widget</p>
  </div>
  <div class="page">
    <p>ADSAFE.get</p>
    <p>eval</p>
    <p>ADSAFE.get(obj, x)</p>
    <p>untrusted widget</p>
  </div>
  <div class="page">
    <p>1, 800 LOC adsafe.js library  50 calls to three kinds of assertions  40 type-tests  5 regular-expression based checks  60 privileged DOM method calls</p>
  </div>
  <div class="page">
    <p>1, 800 LOC adsafe.js library  50 calls to three kinds of assertions  40 type-tests  5 regular-expression based checks  60 privileged DOM method calls</p>
    <p>?</p>
  </div>
  <div class="page">
    <p>Type-based Verification of</p>
  </div>
  <div class="page">
    <p>Definition 1 (ADsafety): If all embedded widgets pass JSLint, then:</p>
  </div>
  <div class="page">
    <p>Definition 1 (ADsafety): If all embedded widgets pass JSLint, then: eval()</p>
    <p>document.write() document.createElement(&quot;script&quot;)</p>
    <p>...1.Widgets cannot load new code at runtime, or cause ADsafe to load new code on their behalf;</p>
  </div>
  <div class="page">
    <p>Definition 1 (ADsafety): If all embedded widgets pass JSLint, then: eval()</p>
    <p>document.write() document.createElement(&quot;script&quot;)</p>
    <p>...1.Widgets cannot load new code at runtime, or cause ADsafe to load new code on their behalf;</p>
  </div>
  <div class="page">
    <p>Definition 1 (ADsafety): If all embedded widgets pass JSLint, then:</p>
    <p>&lt;div&gt;</p>
    <p>&lt;p&gt; &lt;div&gt;</p>
    <p>&lt;b&gt;</p>
    <p>ADsafe Untrusted</p>
    <p>Widget</p>
  </div>
  <div class="page">
    <p>Definition 1 (ADsafety): If all embedded widgets pass JSLint, then:</p>
    <p>&lt;div&gt;</p>
    <p>&lt;p&gt; &lt;div&gt;</p>
    <p>&lt;b&gt;</p>
    <p>ADsafe Untrusted</p>
    <p>Widget</p>
  </div>
  <div class="page">
    <p>Definition 1 (ADsafety): If all embedded widgets pass JSLint, then:</p>
    <p>&lt;div id=&quot;WIDGET&quot;&gt;</p>
    <p>&lt;p&gt; &lt;div&gt;</p>
    <p>&lt;b&gt;</p>
    <p>ADsafe Untrusted</p>
    <p>Widget</p>
    <p>&lt;div&gt;</p>
  </div>
  <div class="page">
    <p>Definition 1 (ADsafety): If all embedded widgets pass JSLint, then:</p>
    <p>&lt;div id=&quot;WIDGET&quot;&gt;</p>
    <p>&lt;p&gt; &lt;div&gt;</p>
    <p>&lt;b&gt;</p>
    <p>ADsafe Untrusted</p>
    <p>Widget</p>
    <p>&lt;div&gt;</p>
  </div>
  <div class="page">
    <p>Definition 1 (ADsafety): If all embedded widgets pass JSLint, then:</p>
    <p>ADsafeWidget A Widget B</p>
  </div>
  <div class="page">
    <p>ADSAFE.get</p>
    <p>eval</p>
    <p>ADSAFE.get(obj, x)</p>
    <p>Goal: Verify ADsafe</p>
  </div>
  <div class="page">
    <p>ADSAFE.get</p>
    <p>eval</p>
    <p>ADSAFE.get(obj, x)</p>
    <p>Goal: Verify ADsafe</p>
    <p>untrusted, but passes JSLint</p>
  </div>
  <div class="page">
    <p>ADSAFE.get</p>
    <p>eval</p>
    <p>ADSAFE.get(obj, x)</p>
    <p>Goal: Verify ADsafe</p>
    <p>untrusted, but passes JSLint</p>
    <p>Goal: model JSLint</p>
  </div>
  <div class="page">
    <p>JSLint ensures: no DOM references</p>
    <p>node</p>
    <p>Widgets cannot obtain direct references to DOM nodes.</p>
    <p>&lt;div&gt;</p>
    <p>&lt;p&gt; &lt;div&gt;</p>
    <p>&lt;b&gt;</p>
    <p>ADsafe Untrusted</p>
    <p>Widget</p>
  </div>
  <div class="page">
    <p>bunch = { __nodes__ : array of nodes, append: function ..., getText: function ..., ... 20 functions }</p>
    <p>ADsafe ensures: only safe</p>
    <p>methods on bunches</p>
    <p>JSLint ensures: no DOM references</p>
    <p>node</p>
    <p>Widgets cannot obtain direct references to DOM nodes.</p>
    <p>&lt;div&gt;</p>
    <p>&lt;p&gt; &lt;div&gt;</p>
    <p>&lt;b&gt;</p>
    <p>ADsafe Untrusted</p>
    <p>Widget</p>
  </div>
  <div class="page">
    <p>bunch = { __nodes__ : array of nodes, append: function ..., getText: function ..., ... 20 functions }</p>
    <p>ADsafe ensures: only safe</p>
    <p>methods on bunches</p>
    <p>bunch.__nodes__</p>
    <p>No private fields in JavaScript!</p>
    <p>JSLint ensures: no DOM references</p>
    <p>node</p>
    <p>Widgets cannot obtain direct references to DOM nodes.</p>
    <p>&lt;div&gt;</p>
    <p>&lt;p&gt; &lt;div&gt;</p>
    <p>&lt;b&gt;</p>
    <p>ADsafe Untrusted</p>
    <p>Widget</p>
  </div>
  <div class="page">
    <p>bunch = { __nodes__ : array of nodes, append: function ..., getText: function ..., ... 20 functions }</p>
    <p>ADsafe ensures: only safe</p>
    <p>methods on bunches</p>
    <p>JSLint ensures: __nodes__ is</p>
    <p>private bunch.__nodes__</p>
    <p>JSLint ensures: no DOM references</p>
    <p>node</p>
    <p>Widgets cannot obtain direct references to DOM nodes.</p>
    <p>&lt;div&gt;</p>
    <p>&lt;p&gt; &lt;div&gt;</p>
    <p>&lt;b&gt;</p>
    <p>ADsafe Untrusted</p>
    <p>Widget</p>
  </div>
  <div class="page">
    <p>bunch = { __nodes__ : array of nodes, append: function ..., getText: function ..., ... 20 functions }</p>
    <p>ADsafe ensures: only safe</p>
    <p>methods on bunches</p>
    <p>JSLint ensures: __nodes__ is</p>
    <p>private</p>
    <p>bunch.append(...)</p>
    <p>bunch.__nodes__</p>
    <p>JSLint ensures: no DOM references</p>
    <p>node</p>
    <p>Widgets cannot obtain direct references to DOM nodes.</p>
    <p>&lt;div&gt;</p>
    <p>&lt;p&gt; &lt;div&gt;</p>
    <p>&lt;b&gt;</p>
    <p>ADsafe Untrusted</p>
    <p>Widget</p>
    <p>Exploit append to return nodes?</p>
  </div>
  <div class="page">
    <p>bunch = { __nodes__ : array of nodes, append: function ..., getText: function ..., ... 20 functions }</p>
    <p>ADsafe ensures: only safe</p>
    <p>methods on bunches</p>
    <p>JSLint ensures: __nodes__ is</p>
    <p>private</p>
    <p>bunch.append(...) ADsafe ensures: DOM nodes are</p>
    <p>not returned</p>
    <p>bunch.__nodes__</p>
    <p>JSLint ensures: no DOM references</p>
    <p>node</p>
    <p>Widgets cannot obtain direct references to DOM nodes.</p>
    <p>&lt;div&gt;</p>
    <p>&lt;p&gt; &lt;div&gt;</p>
    <p>&lt;b&gt;</p>
    <p>ADsafe Untrusted</p>
    <p>Widget</p>
  </div>
  <div class="page">
    <p>ADSAFE.get</p>
    <p>eval</p>
    <p>ADSAFE.get(obj, x)</p>
    <p>Goal 2: Verify ADsafe</p>
    <p>untrusted, but passes JSLint</p>
    <p>Goal 1: model JSLint</p>
  </div>
  <div class="page">
    <p>var n = 6 var s = &quot;a string&quot; var b = true</p>
  </div>
  <div class="page">
    <p>var n = 6 var s = &quot;a string&quot; var b = true</p>
    <p>Widget := Number + String + Boolean + Undefined + Null +</p>
  </div>
  <div class="page">
    <p>Widget := Number + String + Boolean + Undefined + Null +</p>
  </div>
  <div class="page">
    <p>{ x: 6, b: &quot;car&quot; }</p>
    <p>Widget := Number + String + Boolean + Undefined + Null +</p>
  </div>
  <div class="page">
    <p>: Widget __nodes__: Array&lt;Node&gt; caller:  prototype:  ... code : Widget  ...  Widget __proto__: Object + Function + Array + ...</p>
    <p>{ x: 6, b: &quot;car&quot; } { nested: { y: 10, b: false } }</p>
    <p>Widget := Number + String + Boolean + Undefined + Null +</p>
  </div>
  <div class="page">
    <p>: Widget __nodes__: Array&lt;Node&gt; caller:  prototype:  ... code : Widget  ...  Widget __proto__: Object + Function + Array + ...</p>
    <p>{ x: 6, b: &quot;car&quot; } { nested: { y: 10, b: false } } { __nodes__: 90 } myObj.prototype = { };</p>
    <p>Widget := Number + String + Boolean + Undefined + Null +</p>
  </div>
  <div class="page">
    <p>: Widget __nodes__: Array&lt;Node&gt; caller:  prototype:  ... code : Widget  ...  Widget __proto__: Object + Function + Array + ...</p>
    <p>{ x: 6, b: &quot;car&quot; } { nested: { y: 10, b: false } } { __nodes__: 90 } myObj.prototype = { }; function foo(x) { return x + 1; } foo(900) foo.w = &quot;functions are objects&quot; [&quot;array&quot;, &quot;of&quot;, &quot;strings&quot;] /regular[ \t]*expressions/</p>
    <p>Widget := Number + String + Boolean + Undefined + Null +</p>
  </div>
  <div class="page">
    <p>JSLint Widget type-checker</p>
    <p>typable widgets</p>
    <p>widgets that pass JSLint</p>
  </div>
  <div class="page">
    <p>JSLint Widget type-checker</p>
    <p>typable widgets</p>
    <p>widgets that pass JSLint</p>
    <p>or, passing JSLint Widget-typable</p>
    <p>Claim: evidence: 1,100 LOC of tests</p>
  </div>
  <div class="page">
    <p>JSLint Widget type-checker</p>
    <p>typable widgets</p>
    <p>widgets that pass JSLint</p>
    <p>or, passing JSLint Widget-typable</p>
    <p>type-based arguments about</p>
    <p>widgets</p>
    <p>Claim: evidence: 1,100 LOC of tests</p>
  </div>
  <div class="page">
    <p>ADSAFE.get</p>
    <p>eval</p>
    <p>ADSAFE.get(obj, x)</p>
    <p>untrusted, but passes JSLint</p>
    <p>Goal 1: model JSLint</p>
    <p>Goal 2: Verify ADsafe</p>
  </div>
  <div class="page">
    <p>window.setTimeout(callback, delay);</p>
    <p>eval</p>
    <p>window.setTimeout</p>
    <p>WidgetWidget</p>
    <p>String</p>
  </div>
  <div class="page">
    <p>window.setTimeout(callback, delay);</p>
    <p>eval</p>
    <p>window.setTimeout</p>
    <p>WidgetWidget</p>
    <p>String</p>
    <p>Stri ng</p>
    <p>WidgetWidget</p>
    <p>WidgetWidget</p>
    <p>Object</p>
    <p>Number</p>
    <p>/*: Widget  Widget  Widget */ ADSAFE.later = function(callback, delay) { if (typeof callback !== &quot;function&quot;) { throw &quot;expected function&quot;; }</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>window.setTimeout(callback, delay);</p>
    <p>window : { eval: , setTimeout : (Widget  ...  Widget)  Widget  Undefined, ... }</p>
    <p>eval</p>
    <p>window.setTimeout</p>
    <p>WidgetWidget</p>
    <p>String</p>
    <p>Stri ng</p>
    <p>WidgetWidget</p>
    <p>WidgetWidget</p>
    <p>Object</p>
    <p>Number</p>
    <p>/*: Widget  Widget  Widget */ ADSAFE.later = function(callback, delay) { if (typeof callback !== &quot;function&quot;) { throw &quot;expected function&quot;; }</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>window.setTimeout(callback, delay);</p>
    <p>window : { eval: , setTimeout : (Widget  ...  Widget)  Widget  Undefined, ... }</p>
    <p>eval</p>
    <p>window.setTimeout</p>
    <p>WidgetWidget</p>
    <p>String</p>
    <p>Stri ng</p>
    <p>WidgetWidget</p>
    <p>WidgetWidget</p>
    <p>Object</p>
    <p>Number</p>
    <p>/*: Widget  Widget  Widget */ ADSAFE.later = function(callback, delay) { if (typeof callback !== &quot;function&quot;) { throw &quot;expected function&quot;; }</p>
    <p>}</p>
    <p>Widget</p>
  </div>
  <div class="page">
    <p>window.setTimeout(callback, delay);</p>
    <p>window : { eval: , setTimeout : (Widget  ...  Widget)  Widget  Undefined, ... }</p>
    <p>Widget  ...  Widget eval</p>
    <p>window.setTimeout</p>
    <p>WidgetWidget</p>
    <p>String</p>
    <p>Stri ng</p>
    <p>WidgetWidget</p>
    <p>WidgetWidget</p>
    <p>Object</p>
    <p>Number</p>
    <p>/*: Widget  Widget  Widget */ ADSAFE.later = function(callback, delay) { if (typeof callback !== &quot;function&quot;) { throw &quot;expected function&quot;; }</p>
    <p>}</p>
    <p>Widget</p>
  </div>
  <div class="page">
    <p>window.setTimeout(callback, delay);</p>
    <p>window : { eval: , setTimeout : (Widget  ...  Widget)  Widget  Undefined, ... }</p>
    <p>Widget  ...  Widget</p>
    <p>Politz et al. USENIX Security 2011 and Guha, Saftoiu, Krishnamurthi. ESOP 2011.</p>
    <p>eval</p>
    <p>window.setTimeout</p>
    <p>WidgetWidget</p>
    <p>String</p>
    <p>Stri ng</p>
    <p>WidgetWidget</p>
    <p>WidgetWidget</p>
    <p>Object</p>
    <p>Number</p>
    <p>/*: Widget  Widget  Widget */ ADSAFE.later = function(callback, delay) { if (typeof callback !== &quot;function&quot;) { throw &quot;expected function&quot;; }</p>
    <p>}</p>
    <p>Widget</p>
    <p>This is just one kind of if-split we handle.</p>
  </div>
  <div class="page">
    <p>JSLinted widgetadsafe.js</p>
  </div>
  <div class="page">
    <p>JSLinted widgetadsafe.js</p>
  </div>
  <div class="page">
    <p>JSLinted widgetadsafe.js</p>
  </div>
  <div class="page">
    <p>JSLinted widget</p>
    <p>W idgetW</p>
    <p>idget</p>
    <p>W id</p>
    <p>ge t</p>
    <p>W id</p>
    <p>ge t</p>
    <p>adsafe.js 21</p>
  </div>
  <div class="page">
    <p>JSLinted widget</p>
    <p>W idgetW</p>
    <p>idget</p>
    <p>W id</p>
    <p>ge t</p>
    <p>W id</p>
    <p>ge t</p>
    <p>adsafe.js 21</p>
  </div>
  <div class="page">
    <p>JSLinted widget</p>
    <p>W idgetW</p>
    <p>idget</p>
    <p>W id</p>
    <p>ge t</p>
    <p>W id</p>
    <p>ge t</p>
    <p>adsafe.js</p>
    <p>Widget</p>
    <p>Widget</p>
    <p>W idget</p>
    <p>Widget</p>
  </div>
  <div class="page">
    <p>JSLinted widget</p>
    <p>W idgetW</p>
    <p>idget</p>
    <p>W id</p>
    <p>ge t</p>
    <p>W id</p>
    <p>ge t</p>
    <p>adsafe.js</p>
    <p>Widget</p>
    <p>Widget</p>
    <p>W idget</p>
    <p>Widget</p>
    <p>A rr</p>
    <p>ay &lt; N</p>
    <p>od e&gt;</p>
    <p>N od</p>
    <p>e</p>
  </div>
  <div class="page">
    <p>JSLinted widget</p>
    <p>W idgetW</p>
    <p>idget</p>
    <p>W id</p>
    <p>ge t</p>
    <p>W id</p>
    <p>ge t</p>
    <p>adsafe.js</p>
    <p>Widget</p>
    <p>Widget</p>
    <p>W idget</p>
    <p>Widget</p>
    <p>A rr</p>
    <p>ay &lt; N</p>
    <p>od e&gt;</p>
    <p>N od</p>
    <p>e</p>
    <p>Node</p>
    <p>Node</p>
  </div>
  <div class="page">
    <p>typable widgets</p>
    <p>widgets that pass JSLint</p>
    <p>JSLinted widget</p>
    <p>W idgetW</p>
    <p>idget</p>
    <p>W id</p>
    <p>ge t</p>
    <p>W id</p>
    <p>ge t</p>
    <p>adsafe.js</p>
    <p>Widget</p>
    <p>Widget</p>
    <p>W idget</p>
    <p>Widget</p>
    <p>A rr</p>
    <p>ay &lt; N</p>
    <p>od e&gt;</p>
    <p>N od</p>
    <p>e</p>
    <p>JSLint model Type-checked ADsafe</p>
    <p>+ =</p>
  </div>
  <div class="page">
    <p>typable widgets</p>
    <p>widgets that pass JSLint</p>
    <p>var fakeNode = { tagName: &quot;div&quot;, appendChild: function(elt) { var win = elt.ownerDocument.defaultView; win.eval(&quot;alert('hacked')&quot;); } };</p>
  </div>
  <div class="page">
    <p>typable widgets</p>
    <p>widgets that pass JSLint</p>
    <p>var fakeNode = { tagName: &quot;div&quot;, appendChild: function(elt) { var win = elt.ownerDocument.defaultView; win.eval(&quot;alert('hacked')&quot;); } }; var fakeBunch = { __nodes__: [fakeNode] };</p>
    <p>Rejected by JSLint</p>
  </div>
  <div class="page">
    <p>typable widgets</p>
    <p>widgets that pass JSLint</p>
    <p>var fakeNode = { tagName: &quot;div&quot;, appendChild: function(elt) { var win = elt.ownerDocument.defaultView; win.eval(&quot;alert('hacked')&quot;); } }; var fakeBunch = { __nodes__: [fakeNode] };</p>
    <p>Rejected by JSLint</p>
    <p>var fakeBunch = { '__nodes__': [fakeNode] };</p>
    <p>Accepted by JSLint</p>
    <p>type error: expected Array&lt;HTML&gt;, received Array&lt;Widget&gt;</p>
  </div>
  <div class="page">
    <p>/*: Widget  Widget  Widget */ WrappedElt.prototype.style = function(name, val) { var regexp = new Regexp(&quot;url&quot;); if (regexp.test(val)) { return error(); } ... this.__node__.style[name] = val ... }</p>
  </div>
  <div class="page">
    <p>/*: Widget  Widget  Widget */ WrappedElt.prototype.style = function(name, val) { var regexp = new Regexp(&quot;url&quot;); if (regexp.test(val)) { return error(); } ... this.__node__.style[name] = val ... }</p>
    <p>expected String, received</p>
    <p>Widget</p>
  </div>
  <div class="page">
    <p>/*: Widget  Widget  Widget */ WrappedElt.prototype.style = function(name, val) { var regexp = new Regexp(&quot;url&quot;); if (regexp.test(val)) { return error(); } ... this.__node__.style[name] = val ... }</p>
    <p>expected String, received</p>
    <p>Widget</p>
    <p>var firstCall = true; var badName = { toString: function() { if (firstCall) { firstCall = false; return &quot;font&quot;; } else { return &quot;url('/evil.xml')&quot;; } } };</p>
    <p>passes safety check</p>
    <p>returns bad value</p>
  </div>
  <div class="page">
    <p>/*: Widget  Widget  Widget */ WrappedElt.prototype.style = function(name, val) { var regexp = new Regexp(&quot;url&quot;); if (regexp.test(val)) { return error(); } ... this.__node__.style[name] = val ... }</p>
    <p>expected String, received</p>
    <p>Widget</p>
    <p>var firstCall = true; var badName = { toString: function() { if (firstCall) { firstCall = false; return &quot;font&quot;; } else { return &quot;url('/evil.xml')&quot;; } } };</p>
    <p>passes safety check</p>
    <p>returns bad value</p>
    <p>Fix: check_string</p>
    <p>assertion inserted here, and in 16 other places</p>
  </div>
  <div class="page">
    <p>Definition 1 (ADsafety): If all embedded widgets pass JSLint, then:</p>
    <p>eval() document.write()</p>
    <p>document.createElement(&quot;script&quot;) ...</p>
    <p>&lt;div&gt;</p>
    <p>&lt;p&gt; &lt;div&gt;</p>
    <p>&lt;b&gt;</p>
    <p>ADsafe Untrusted</p>
    <p>Widget</p>
    <p>&lt;div id=&quot;WIDGET&quot;&gt;</p>
    <p>&lt;p&gt; &lt;div&gt;</p>
    <p>&lt;b&gt;</p>
    <p>ADsafe Untrusted</p>
    <p>Widget</p>
    <p>&lt;div&gt;</p>
    <p>ADsafeWidget A Widget B</p>
  </div>
  <div class="page">
    <p>Definition 1 (ADsafety): If all embedded widgets pass JSLint, then:</p>
    <p>eval() document.write()</p>
    <p>document.createElement(&quot;script&quot;) ...</p>
    <p>&lt;div&gt;</p>
    <p>&lt;p&gt; &lt;div&gt;</p>
    <p>&lt;b&gt;</p>
    <p>ADsafe Untrusted</p>
    <p>Widget</p>
    <p>&lt;div id=&quot;WIDGET&quot;&gt;</p>
    <p>&lt;p&gt; &lt;div&gt;</p>
    <p>&lt;b&gt;</p>
    <p>ADsafe Untrusted</p>
    <p>Widget</p>
    <p>&lt;div&gt;</p>
    <p>ADsafeWidget A Widget B</p>
  </div>
  <div class="page">
    <p>Definition 1 (ADsafety): If all embedded widgets pass JSLint, then:</p>
    <p>eval() document.write()</p>
    <p>document.createElement(&quot;script&quot;) ...</p>
    <p>&lt;div&gt;</p>
    <p>&lt;p&gt; &lt;div&gt;</p>
    <p>&lt;b&gt;</p>
    <p>ADsafe Untrusted</p>
    <p>Widget</p>
    <p>&lt;div id=&quot;WIDGET&quot;&gt;</p>
    <p>&lt;p&gt; &lt;div&gt;</p>
    <p>&lt;b&gt;</p>
    <p>ADsafe Untrusted</p>
    <p>Widget</p>
    <p>&lt;div&gt;</p>
    <p>ADsafeWidget A Widget B</p>
  </div>
  <div class="page">
    <p>Definition 1 (ADsafety): If all embedded widgets pass JSLint, then:</p>
    <p>eval() document.write()</p>
    <p>document.createElement(&quot;script&quot;) ...</p>
    <p>&lt;div&gt;</p>
    <p>&lt;p&gt; &lt;div&gt;</p>
    <p>&lt;b&gt;</p>
    <p>ADsafe Untrusted</p>
    <p>Widget</p>
    <p>&lt;div id=&quot;WIDGET&quot;&gt;</p>
    <p>&lt;p&gt; &lt;div&gt;</p>
    <p>&lt;b&gt;</p>
    <p>ADsafe Untrusted</p>
    <p>Widget</p>
    <p>&lt;div&gt;</p>
    <p>ADsafeWidget A Widget B</p>
  </div>
  <div class="page">
    <p>Definition 1 (ADsafety): If all embedded widgets pass JSLint, then:</p>
    <p>eval() document.write()</p>
    <p>document.createElement(&quot;script&quot;) ...</p>
    <p>&lt;div&gt;</p>
    <p>&lt;p&gt; &lt;div&gt;</p>
    <p>&lt;b&gt;</p>
    <p>ADsafe Untrusted</p>
    <p>Widget</p>
    <p>&lt;div id=&quot;WIDGET&quot;&gt;</p>
    <p>&lt;p&gt; &lt;div&gt;</p>
    <p>&lt;b&gt;</p>
    <p>ADsafe Untrusted</p>
    <p>Widget</p>
    <p>&lt;div&gt;</p>
    <p>ADsafeWidget A Widget BRe trac ted</p>
  </div>
  <div class="page">
    <p>Caveats:</p>
    <p>11 LOC unverified  subtree property unverified</p>
    <p>!</p>
  </div>
  <div class="page">
    <p>JavaScript program</p>
    <p>Proofs for JavaScript?</p>
  </div>
  <div class="page">
    <p>JavaScript program</p>
    <p>JS program</p>
    <p>desugar</p>
    <p>Proofs for JavaScript?</p>
    <p>Proofs for JS.</p>
  </div>
  <div class="page">
    <p>JavaScript program</p>
    <p>JS program</p>
    <p>their answer</p>
    <p>our answer</p>
    <p>desugar</p>
    <p>SpiderMonkey, V8, Rhino</p>
    <p>identical for Mozilla JS test suite*</p>
    <p>Proofs for JavaScript?</p>
    <p>Proofs for JS.</p>
    <p>Guha, Saftoiu, Krishnamurthi. ECOOP 2010.</p>
  </div>
  <div class="page">
    <p>banned = { 'arguments' : true, callee : true, caller : true, constructor : true, 'eval' : true, prototype : true, stack : true, unwatch : true, valueOf : true, watch : true }</p>
    <p>function reject_global(that) { if (that.window) { error(); } }+</p>
    <p>if (/url/i.test(string_check(value[i]))) { error('ADsafe error.'); }+</p>
    <p>and other patterns...</p>
  </div>
  <div class="page">
    <p>banned = { 'arguments' : true, callee : true, caller : true, constructor : true, 'eval' : true, prototype : true, stack : true, unwatch : true, valueOf : true, watch : true }</p>
    <p>function reject_global(that) { if (that.window) { error(); } }+</p>
    <p>if (/url/i.test(string_check(value[i]))) { error('ADsafe error.'); }+</p>
    <p>and other patterns...</p>
    <p>... can be succinctly expressed with types Widget := Number + String + Boolean + Undefined + Null +</p>
    <p>: Widget __nodes__: Array&lt;Node&gt; caller:  prototype:  ... code : Widget  ...  Widget __proto__: Object + Function + Array + ...</p>
  </div>
  <div class="page">
    <p>: Widget __proto__: Object + Function + Array + ... code : Widget  ...  Widget arguments:  caller:  ...</p>
    <p>Widget := Number + String + Boolean + Undefined + Null +</p>
    <p>JavaScript program</p>
    <p>JS program</p>
    <p>their answer</p>
    <p>our answer</p>
    <p>SpiderMonkey, V8, Rhino</p>
    <p>desugar</p>
    <p>identical for Mozilla JS test suite*</p>
    <p>wrap wrap(e)</p>
    <p>e eval</p>
    <p>untyp able</p>
    <p>typable</p>
    <p>typable</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Extra Slides 30</p>
    <p>Spiridon Aristides Eliopoulos</p>
  </div>
  <div class="page">
    <p>Unverified Code</p>
    <p>function F() {};</p>
    <p>ADSAFE.create = typeof Object.create === 'function' ? Object.create : function (o) { F.prototype = typeof o === 'object' &amp;&amp; o ? o : Object.prototype; return new F(); };</p>
    <p>/*: (banned  True) &amp; (not_banned  False) */ function reject_name(name) { return banned[name] || ((typeof name !== 'number' || name &lt; 0) &amp;&amp; (typeof name !== 'string' || name.charAt(0) === '_' || name.slice(-1) === '_' || name.charAt(0) === '-')); }</p>
  </div>
  <div class="page">
    <p>Theorems</p>
  </div>
  <div class="page">
    <p>Full Widget Type</p>
  </div>
</Presentation>
