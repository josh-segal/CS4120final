<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Large-Scale Evalua.on of a Vulnerability Analysis Framework</p>
    <p>Nathan S. Evans, Azzedine Benameur, MaEhew C. Elder Symantec Research Labs</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Overview</p>
    <p>MINESTRONE: Architecture and Detec5on Technologies</p>
    <p>Test and Evalua5on: Architecture, Test Suite, and Results</p>
    <p>Technology Improvements and Results</p>
    <p>Lessons Learned</p>
  </div>
  <div class="page">
    <p>Overview</p>
    <p>SoOware vulnerability detec5on is an ongoing research problem  Exis5ng commercial tools address non-overlapping subsets of vulnerabili5es, have high false posi5ve rates, and require security exper5se to use</p>
    <p>Vulnerability detec5on experimenta5on/evalua5on is an open problem  IARPA STONESOUP Program: Securely Taking On New Executable SoOware of Uncertain Provenance  Develop and demonstrate technology that provides comprehensive, automated techniques that allow end users to safely execute new soOware of uncertain provenance</p>
    <p>Addressing 8 weakness classes across 3 target language classes  MINESTRONE Team: Columbia University (PI: Sal Stolfo), George Mason University (GMU), and Symantec</p>
  </div>
  <div class="page">
    <p>Overview: STONESOUP/MINESTRONE Program Targets</p>
    <p>Target classes of vulnerabili5es (including example CWE numbers):  Number handling (e.g., integer overflow/underflow, sign conversion: #190, #191  Resource drains (e.g., failure to release memory, structures, devices: #400, #404)  Tainted data/input valida5on errors (#78, #134)  Error handling (e.g., unhandled excep5ons/error status codes: #248, #252)  SQL injec5on / command injec5on (#78, #89)  Concurrency handling (e.g., race condi5ons, thread safety: #362, #366)  Buffer overflows/underflows/out of bounds accesses/memory safety (#121, #122)  Null pointer errors (#476)</p>
    <p>Target language classes:  Type-safe languages (Java, C#)  Type-unsafe languages (C, C++)  Binaries (x86, Windows or Linux)</p>
  </div>
  <div class="page">
    <p>MINESTRONE: System Architecture</p>
    <p>SoTware of Unknown Provenance (SOUP)</p>
    <p>MINESTRONE System</p>
    <p>Composer</p>
    <p>REASSURE Container</p>
    <p>DYBOC Container(s)</p>
    <p>ResMon Container</p>
    <p>NumHandling Container</p>
  </div>
  <div class="page">
    <p>MINESTRONE: Detec.on Technologies</p>
    <p>DYBOC  Source-to-source transforma5on  Memory-based errors (overflows and underflows)  Run5me checks (custom memory allocator)</p>
    <p>REASSURE (TheRing)  Self-contained mechanism for healing soOware using rescue points  Detects program crashes and gracefully recovers</p>
    <p>ResMon  Resource monitoring tool  Monitors CPU, memory, disk space; enforces a threshold or absolute value</p>
    <p>Number Handling  Unsafe signed/unsigned conversion, overflow, etc.  Clang-based (enforced at run5me)</p>
  </div>
  <div class="page">
    <p>Test and Evalua.on: Architecture</p>
    <p>MITRE developed tes5ng framework and API  We/Symantec developed the interface to interact with the test harness</p>
  </div>
  <div class="page">
    <p>Test and Evalua.on: Test Suite Base Programs</p>
    <p>Rela5vely large real-world open source projects  Improvement over phase 1 test suite  Integra5on more difficult</p>
    <p>Base programs used:  Cherokee, 200KLOC  Nginx, 200KLOC  GNU wget, over 50KLOC  GNU grep, ~10KLOC  zshell, over 150KLOC  libwww, ~80KLOC  tcpdump, over 200KLOC</p>
  </div>
  <div class="page">
    <p>Test and Evalua.on: Test Suite</p>
    <p>Vulnerability classes:  Null pointer: 1530 test cases  Memory corrup5on: 1810 test cases  Resource drain: 900 test cases  Number handling: 1237 test cases</p>
    <p>Input sources:  Environment variable  Command line arguments  File  Network  Shared Memory  Clipboard</p>
  </div>
  <div class="page">
    <p>Test and Evalua.on: Results</p>
    <p>Terminology  Processed  Unaltered  Rendered unexploitable  Base Score  Final Score</p>
    <p>Caveats, issues:  Memory alignment required for many test cases  Our memory-based tools inten5onally do not return aligned memory!  Clang issues building certain test cases  CIL issues building certain test cases  Some uninten5onal test case bugs</p>
  </div>
  <div class="page">
    <p>Test and Evalua.on: Results, Overall</p>
  </div>
  <div class="page">
    <p>Test and Evalua.on: Results, Memory Corrup.on</p>
    <p>Overall: 88.19% final score  CWEs successfully detected (&gt;90%): 120, 124, 129, 170, 415, 416, 590, 761, 785, 805, 806, 822, 824, 843</p>
  </div>
  <div class="page">
    <p>Test and Evalua.on: Results, Number Handling</p>
    <p>Overall: 68.76% final score  CWEs successfully detected: 194, 195, 197, 369</p>
  </div>
  <div class="page">
    <p>Test and Evalua.on: Results, Resource Drain</p>
    <p>Overall: 75.38% final score  CWEs successfully detected: 401, 459, 674, 771, 773, 774, 775, 834</p>
  </div>
  <div class="page">
    <p>Technology Improvements</p>
    <p>Format string vulnerability detec5on  During ini5al T&amp;E, we had no protec5on against format string vulnerabili5es</p>
    <p>Implemented FormatGuard-inspired protec5on</p>
    <p>Improved stack-to-heap source transforma5on  Original stack-to-heap transform not fine grained  Modified CIL source to protect individual stack-allocated variables</p>
  </div>
  <div class="page">
    <p>Technology Improvements: Format String Vulnerability Detec.on</p>
  </div>
  <div class="page">
    <p>Technology Improvements: Improved Stack-to-Heap Source Transforma.on</p>
  </div>
  <div class="page">
    <p>Technology Improvements: Improved Stack-to-Heap Source Transforma.on</p>
  </div>
  <div class="page">
    <p>Technology Improvements: Results</p>
  </div>
  <div class="page">
    <p>Lessons Learned</p>
    <p>Building a large corpus of vulnerability injected programs is hard  Number handling test cases are hard: developers intent vs. vulnerability (whitelis5ng helped)</p>
    <p>Resource consump5on test cases should leverage a learning phase not ulimits</p>
    <p>Focus should be on easy to use repeatable test cases, not architecture</p>
    <p>Obfusca5on of details makes everyones life harder  Scoring  Vulnerability source  Co-processes</p>
  </div>
  <div class="page">
    <p>Lessons Learned</p>
    <p>Assump5ons/misunderstandings between performers/ evaluators cause big problems  Memory alignment  Network configura5on</p>
    <p>Scoring should be based on the program under test not the co- process output</p>
    <p>Discard all unnecessary files or youll need a 6Tb file share</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>T&amp;E was successful, more so than phase 1</p>
    <p>Difficult task to create large, reliable test suite, infrastructure</p>
    <p>Using open source soOware a double edged sword</p>
    <p>Scores improved with minor fixes (once IO pairs known)</p>
    <p>MINESTRONE con5nues on to phase 3</p>
  </div>
  <div class="page">
    <p>Thank you!</p>
    <p>Copyright  2011 Symantec Corpora.on. All rights reserved. Symantec and the Symantec Logo are trademarks or registered trademarks of Symantec Corpora5on or its affiliates in the U.S. and other countries. Other names may be trademarks of their respec5ve owners. This document is provided for informa5onal purposes only and is not intended as adver5sing. All warran5es rela5ng to the informa5on in this document, either express or implied, are disclaimed to the maximum extent allowed by law. The informa5on in this document is subject to change without no5ce.</p>
    <p>Nathan Evans nathan_evans@symantec.com Azzedine Benameur azzedine_benameur@symantec.com Mayhew Elder mayhew_elder@symantec.com</p>
  </div>
</Presentation>
