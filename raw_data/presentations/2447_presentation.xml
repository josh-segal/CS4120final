<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>ASPLOS XI, October 11, 2004ASPLOS XI, October 11, 2004</p>
    <p>Secure Program Execution via Secure Program Execution via Dynamic Information Flow Dynamic Information Flow</p>
    <p>TrackingTracking</p>
    <p>G. Edward G. Edward SuhSuh, , JaeJae W. Lee, David W. Lee, David Zhang, Zhang, SrinivasSrinivas DevadasDevadas</p>
    <p>Massachusetts Institute of TechnologyMassachusetts Institute of Technology</p>
  </div>
  <div class="page">
    <p>ASPLOS XI, October 11, 2004ASPLOS XI, October 11, 2004 22</p>
    <p>Program VulnerabilitiesProgram Vulnerabilities</p>
    <p>Program bugs cause serious security risks Program bugs cause serious security risks Attackers can gain total control of victim processesAttackers can gain total control of victim processes Very difficult, if not impossible, to eliminate the bugsVery difficult, if not impossible, to eliminate the bugs</p>
    <p>Existing solutions have limitationsExisting solutions have limitations Safe languages Safe languages rere--programming, performance hitprogramming, performance hit Fix programs: new libraries, compilers Fix programs: new libraries, compilers</p>
    <p>partial protection, repartial protection, re--compilationcompilation RunRun--time monitoring: program shepherding time monitoring: program shepherding</p>
    <p>overheadsoverheads Other hardware solutions Other hardware solutions partial protectionpartial protection</p>
  </div>
  <div class="page">
    <p>ASPLOS XI, October 11, 2004ASPLOS XI, October 11, 2004 33</p>
    <p>Our GoalOur Goal</p>
    <p>Architectural support to defeat Architectural support to defeat a broad rangea broad range of of security exploits (possibly all)security exploits (possibly all)</p>
    <p>Focus on attacks to Focus on attacks to gain total controlgain total control (shell)(shell) Should work for legacy code and shared librariesShould work for legacy code and shared libraries</p>
    <p>transparenttransparent to applications, runto applications, run--time checkstime checks Should have Should have low overhead low overhead (performance and memory (performance and memory space)space)</p>
    <p>Need to find common requirements for successful Need to find common requirements for successful security exploitssecurity exploits</p>
  </div>
  <div class="page">
    <p>ASPLOS XI, October 11, 2004ASPLOS XI, October 11, 2004 44</p>
    <p>Attack Model: Attack Model: Example Example -- Stack SmashingStack Smashing</p>
    <p>Step 1. Inject Step 1. Inject malicious datamalicious data through legitimate channelsthrough legitimate channels</p>
    <p>Long inputLong input for buffer overflows for buffer overflows</p>
    <p>Step 2. Bugs modify unintended Step 2. Bugs modify unintended memory locationsmemory locations</p>
    <p>The data flows into The data flows into bufbuf[][], , overwrites a return addressoverwrites a return address</p>
    <p>Step 3. Take control overStep 3. Take control over Jump to Jump to injected target addressinjected target address ((return address return address in the example)in the example) Execute Execute injected code</p>
    <p>int func(void) {</p>
    <p>char buf[256]; while (gets(buf)) {...}</p>
    <p>}</p>
    <p>injected code Other Other</p>
    <p>variablesvariables</p>
    <p>bufbuf (256 Bytes)(256 Bytes)</p>
    <p>Return Return AddressAddress</p>
    <p>StackStack</p>
    <p>Attack</p>
    <p>Other Other variablesvariables</p>
    <p>MaliciousMalicious Input dataInput data</p>
    <p>from from gets()gets()</p>
    <p>StackStack</p>
    <p>Used for return</p>
  </div>
  <div class="page">
    <p>ASPLOS XI, October 11, 2004ASPLOS XI, October 11, 2004 55</p>
    <p>Observation: Observation: Common Requirements for Common Requirements for Successful AttacksSuccessful Attacks</p>
    <p>All attacks come from All attacks come from identifiable I/Oidentifiable I/O channelschannels Both OS and applications explicitly manage I/OBoth OS and applications explicitly manage I/O</p>
    <p>Malicious inputs should be used for Malicious inputs should be used for a fewa few security security sensitive operations to take control of a processsensitive operations to take control of a process</p>
    <p>InstructionsInstructions: executes malicious code from I/O: executes malicious code from I/O Code pointersCode pointers: : arbitrarilyarbitrarily redirect the control flowredirect the control flow Data pointers for storesData pointers for stores: overwrite a : overwrite a critical program critical program variable variable ((valid_passwdvalid_passwd = 1)= 1)</p>
    <p>In most applications, instructions and pointers In most applications, instructions and pointers usually do not come directly from I/Ousually do not come directly from I/O</p>
  </div>
  <div class="page">
    <p>ASPLOS XI, October 11, 2004ASPLOS XI, October 11, 2004 66</p>
    <p>Our Protection SchemeOur Protection Scheme</p>
    <p>I/O, other processes</p>
    <p>Program</p>
    <p>Vulnerability</p>
    <p>Unintended Uses</p>
    <p>Step 3. Detect attacks - Check and restrict the use of spurious values</p>
    <p>Detect</p>
    <p>Operating System</p>
    <p>Step 1. OS tags potentially malicious inputs as spurious</p>
    <p>Security Tags; 0  authentic, 1  spurious</p>
    <p>Step 2. Processors track the flow of the spurious values</p>
    <p>Dynamic Information Flow Tracking</p>
    <p>Processors checks + trap handler</p>
  </div>
  <div class="page">
    <p>ASPLOS XI, October 11, 2004ASPLOS XI, October 11, 2004 77</p>
    <p>Implementation OverviewImplementation Overview</p>
    <p>I/O</p>
    <p>Information flow</p>
    <p>tracker</p>
    <p>Processor</p>
    <p>Tag checker</p>
    <p>Operating System</p>
    <p>Execution Monitor I/O</p>
    <p>I/O interface Trap handler</p>
    <p>Security Policy</p>
    <p>Traps</p>
  </div>
  <div class="page">
    <p>ASPLOS XI, October 11, 2004ASPLOS XI, October 11, 2004</p>
    <p>Architectural SupportArchitectural Support</p>
  </div>
  <div class="page">
    <p>ASPLOS XI, October 11, 2004ASPLOS XI, October 11, 2004 99</p>
    <p>Security TagsSecurity Tags</p>
    <p>GranularityGranularity One for One for each general purpose registereach general purpose register (GPR)(GPR) One for One for each byteeach byte in memory in memory  12.5% overhead is a na12.5% overhead is a nave management ve management MultiMulti--granularity tags granularity tags -- Only Only 1.4%1.4% space overhead, space overhead, 2.1%2.1% bandwidth bandwidth overhead on average (based on experiments)overhead on average (based on experiments)</p>
    <p>At the startAt the start--up, all instructions and initial data will be tagged up, all instructions and initial data will be tagged authenticauthentic During the execution, the execution monitor sets the tag for eacDuring the execution, the execution monitor sets the tag for each I/O h I/O input according to the security policyinput according to the security policy</p>
    <p>GPR (32 or 64 bits) 0/1 Memory (1 Byte) 0/1</p>
  </div>
  <div class="page">
    <p>ASPLOS XI, October 11, 2004ASPLOS XI, October 11, 2004 1010</p>
    <p>Dynamic Information Flow TrackingDynamic Information Flow Tracking</p>
    <p>Compute a new security tag for each operationCompute a new security tag for each operation If If spuriousspurious data controls a result, the result is also data controls a result, the result is also spuriousspurious</p>
    <p>Various types of dependencies existVarious types of dependencies exist Direct copyDirect copy: load/store spurious data: load/store spurious data ComputationComputation: compute from spurious data: compute from spurious data</p>
    <p>Pointer additionsPointer additions Other computationsOther computations</p>
    <p>Load addressLoad address: load from spurious address: load from spurious address Store addressStore address: store into spurious address: store into spurious address</p>
    <p>Propagation Control Register (PCR) determines which Propagation Control Register (PCR) determines which dependencies to trackdependencies to track</p>
    <p>Execution monitor sets the register based on the security policyExecution monitor sets the register based on the security policy</p>
  </div>
  <div class="page">
    <p>ASPLOS XI, October 11, 2004ASPLOS XI, October 11, 2004 1111</p>
    <p>Security Tag Computation ExamplesSecurity Tag Computation Examples</p>
    <p>T[MEM] = T[R3] OR T[R1]</p>
    <p>ST R1, Imm(R2)</p>
    <p>R1 1</p>
    <p>Memory</p>
    <p>Spurious</p>
    <p>R3 0 +Imm Tag spurious</p>
    <p>T[R2] = T[MEM] OR T[R1]</p>
    <p>LD R2, Imm(R1)</p>
    <p>R1 1</p>
    <p>Memory</p>
    <p>Authentic</p>
    <p>R2 1 +Imm</p>
    <p>R1 1 R2 0</p>
    <p>R3 1</p>
    <p>T[R3] = T[R1] OR T[R2]</p>
    <p>SUB R3, R1, R2</p>
  </div>
  <div class="page">
    <p>ASPLOS XI, October 11, 2004ASPLOS XI, October 11, 2004 1212</p>
    <p>Tag CheckerTag Checker</p>
    <p>Processor traps when spurious values are used for Processor traps when spurious values are used for sensitive operationssensitive operations</p>
    <p>Sensitive values to be checkedSensitive values to be checked InstructionsInstructions Load addressesLoad addresses Store addressesStore addresses Jump target addressesJump target addresses</p>
    <p>Trap Control Register (TCR) determines which Trap Control Register (TCR) determines which uses of spurious values generate a trapuses of spurious values generate a trap</p>
  </div>
  <div class="page">
    <p>ASPLOS XI, October 11, 2004ASPLOS XI, October 11, 2004 1313</p>
    <p>Hardware Support SummaryHardware Support Summary</p>
    <p>Tag computation (logical OR)Tag computation (logical OR)</p>
    <p>TLB contains tag types and TLB contains tag types and tag pointers tag pointers Separate tag cachesSeparate tag caches</p>
    <p>Allow parallel accesses to Allow parallel accesses to data and tagsdata and tags Exploit multiExploit multi--granularity tagsgranularity tags</p>
    <p>Tags will be often less than Tags will be often less than 1/8 of data</p>
    <p>Core</p>
    <p>D$-L1</p>
    <p>L2</p>
    <p>I$-L1</p>
    <p>D-TLB</p>
    <p>I-TLB</p>
    <p>T$-L2</p>
    <p>T$-L1</p>
    <p>Regs</p>
    <p>Tag Types, Pointers</p>
    <p>Security Tags</p>
  </div>
  <div class="page">
    <p>ASPLOS XI, October 11, 2004ASPLOS XI, October 11, 2004</p>
    <p>Security PolicySecurity Policy</p>
  </div>
  <div class="page">
    <p>ASPLOS XI, October 11, 2004ASPLOS XI, October 11, 2004 1515</p>
    <p>Security PolicySecurity Policy</p>
    <p>Defines Defines spuriousspurious valuesvalues I/O channels to be taggedI/O channels to be tagged Dependencies to be trackedDependencies to be tracked</p>
    <p>Defines illegal uses of spurious valuesDefines illegal uses of spurious values Trap conditionsTrap conditions Software checks in the handlerSoftware checks in the handler</p>
    <p>Can be general for many programs, or customized Can be general for many programs, or customized for each programfor each program</p>
  </div>
  <div class="page">
    <p>ASPLOS XI, October 11, 2004ASPLOS XI, October 11, 2004 1616</p>
    <p>Take 1: Maximum SecurityTake 1: Maximum Security</p>
    <p>UntrustedUntrusted I/OI/O ALLALL</p>
    <p>Tracked DependenciesTracked Dependencies ALLALL</p>
    <p>Trap ConditionTrap Condition InstructionInstruction Jump target addressJump target address Store address Store address</p>
    <p>Trap HandlerTrap Handler Terminate the process</p>
    <p>False alarms from spurious</p>
    <p>pointers</p>
    <p>Need to balance security and false positivesTerminate the process</p>
  </div>
  <div class="page">
    <p>ASPLOS XI, October 11, 2004ASPLOS XI, October 11, 2004 1717</p>
    <p>Where Are Spurious Pointers From?Where Are Spurious Pointers From?</p>
    <p>I/O inputs are often used as I/O inputs are often used as offsets for pointer offsets for pointer tablestables after a bound checkafter a bound check</p>
    <p>PTR_nPTR_n</p>
    <p>PTR_3PTR_3 PTR_2PTR_2 PTR_1PTR_1</p>
    <p>LDA Dep.</p>
    <p>Comp Dependency</p>
    <p>Base PTR 0 +</p>
    <p>Bound Check 0  offset &lt; n *4</p>
    <p>Offset 1 Jump Table Spurious Jump Pointer</p>
    <p>From I/O</p>
  </div>
  <div class="page">
    <p>ASPLOS XI, October 11, 2004ASPLOS XI, October 11, 2004 1818</p>
    <p>Take 2: Allow Legitimate Uses Take 2: Allow Legitimate Uses</p>
    <p>UnstrustedUnstrusted I/OI/O ALLALL</p>
    <p>Tracked DependenciesTracked Dependencies ALL but pointer offsetsALL but pointer offsets</p>
    <p>Trap ConditionTrap Condition InstructionInstruction Jump target addressJump target address Store address Store address</p>
    <p>Trap HandlerTrap Handler Terminate the processTerminate the process</p>
    <p>For pointer additions such as</p>
    <p>[4*r1+r2] in x86, s4addq r1, r2, r3</p>
    <p>(r3 r2+4*r1) in Alpha</p>
    <p>The new tag = T[r2]</p>
    <p>assuming the bound check is done.</p>
  </div>
  <div class="page">
    <p>ASPLOS XI, October 11, 2004ASPLOS XI, October 11, 2004 1919</p>
    <p>Example Example  Stack SmashingStack Smashing</p>
    <p>Registers</p>
    <p>LD R1, Imm(SP) - Load a return address</p>
    <p>Data 0</p>
    <p>Inst 0</p>
    <p>Inst 0</p>
    <p>Inst 0</p>
    <p>Data 0</p>
    <p>Ret Adr 0</p>
    <p>I/O 1</p>
    <p>I/O 1</p>
    <p>I/O 1</p>
    <p>I/O 1I/O 1 JR R1 - Return Trap</p>
    <p>spurious jump target address</p>
    <p>Tag Check</p>
    <p>Processor Memory</p>
  </div>
  <div class="page">
    <p>ASPLOS XI, October 11, 2004ASPLOS XI, October 11, 2004</p>
    <p>EvaluationEvaluation</p>
  </div>
  <div class="page">
    <p>ASPLOS XI, October 11, 2004ASPLOS XI, October 11, 2004 2121</p>
    <p>Simulation FrameworksSimulation Frameworks</p>
    <p>BochsBochs (Intel x86)(Intel x86) Keyboard and network I/O are tagged spuriousKeyboard and network I/O are tagged spurious Used to evaluate the effectiveness of our schemeUsed to evaluate the effectiveness of our scheme x86 applications on x86 applications on DebianDebian Linux (3.0r0)Linux (3.0r0)</p>
    <p>SimpleScalarSimpleScalar (Alpha)(Alpha) All I/O are tagged spuriousAll I/O are tagged spurious simsim--fast: functional evaluations (false alarms, space fast: functional evaluations (false alarms, space overheads for tags)overheads for tags) simsim--outorderoutorder: performance evaluations: performance evaluations SPEC CPU2000 benchmarksSPEC CPU2000 benchmarks</p>
  </div>
  <div class="page">
    <p>ASPLOS XI, October 11, 2004ASPLOS XI, October 11, 2004 2222</p>
    <p>Detecting Security AttacksDetecting Security Attacks</p>
    <p>Buffer overflow Buffer overflow testbedtestbed (by (by WilanderWilander, 2003), 2003) Covers all 20 combinations possible in practiceCovers all 20 combinations possible in practice</p>
    <p>Overwrite technique: direct, pointer redirectionOverwrite technique: direct, pointer redirection Buffer location: stack, heap/BSS/dataBuffer location: stack, heap/BSS/data Attack targets: return address, base pointer, function pointer, Attack targets: return address, base pointer, function pointer, and and longjmplongjmp buffersbuffers</p>
    <p>The best protection scheme in 2003 detected only 50%The best protection scheme in 2003 detected only 50%</p>
    <p>Format string attacks (from TESO security group)Format string attacks (from TESO security group) Overflow a buffer or use %n conversion specification Overflow a buffer or use %n conversion specification</p>
    <p>Detects and stops Detects and stops ALLALL security attacks testedsecurity attacks tested So far, all known attacks directly inject pointers or So far, all known attacks directly inject pointers or instructions instructions lenient tag propagation does not matterlenient tag propagation does not matter</p>
  </div>
  <div class="page">
    <p>ASPLOS XI, October 11, 2004ASPLOS XI, October 11, 2004 2323</p>
    <p>No False AlarmsNo False Alarms</p>
    <p>Common x86 applications Common x86 applications DebianDebian Linux 3.0 (keyboard, network marked spurious)Linux 3.0 (keyboard, network marked spurious) System commands: System commands: lsls, cp, vi, ping, etc., cp, vi, ping, etc. openSSHopenSSH server/clientserver/client</p>
    <p>Dynamically generated codeDynamically generated code A simple http server (TinyHttpd2) A simple http server (TinyHttpd2)  marked spuriousmarked spurious SUNSUNss JAVA SDK 1.3 JAVA SDK 1.3 HotSpotHotSpot VM with JITVM with JIT</p>
    <p>SPEC2000 CPU benchmarksSPEC2000 CPU benchmarks Input files are marked spuriousInput files are marked spurious</p>
  </div>
  <div class="page">
    <p>ASPLOS XI, October 11, 2004ASPLOS XI, October 11, 2004 2424</p>
    <p>Performance DegradationPerformance Degradation</p>
    <p>am m</p>
    <p>p</p>
    <p>ap pl</p>
    <p>u</p>
    <p>ap si ar t</p>
    <p>cr af</p>
    <p>ty</p>
    <p>eo n</p>
    <p>eq ua</p>
    <p>ke ga p</p>
    <p>gc c</p>
    <p>gz ip</p>
    <p>m cf</p>
    <p>m es</p>
    <p>a</p>
    <p>m gr</p>
    <p>id</p>
    <p>pa rs</p>
    <p>er</p>
    <p>si xt</p>
    <p>ra ck</p>
    <p>sw im</p>
    <p>tw ol</p>
    <p>f</p>
    <p>vo rt ex vp</p>
    <p>r</p>
    <p>w up</p>
    <p>w is</p>
    <p>e</p>
    <p>av e</p>
    <p>N or</p>
    <p>m al</p>
    <p>iz ed</p>
    <p>I P</p>
    <p>C</p>
    <p>Various L2 sizes with 1/8 tag caches Various L2 sizes with 1/8 tag caches  1.1%1.1% degradation on averagedegradation on average PessimisticPessimistic overhead: baseline case gets 12.5% larger caches if it helpsoverhead: baseline case gets 12.5% larger caches if it helps</p>
    <p>With the same cache sizes, the performance degradation is less</p>
    <p>than 0.1% in the worst case.</p>
  </div>
  <div class="page">
    <p>ASPLOS XI, October 11, 2004ASPLOS XI, October 11, 2004 2525</p>
    <p>ConclusionConclusion</p>
    <p>Dynamic information flow tracking provides a powerful tool Dynamic information flow tracking provides a powerful tool for system securityfor system security</p>
    <p>Tells whether a value came from Tells whether a value came from untrusteduntrusted I/O or notI/O or not Can restrict the use of potentially malicious input valuesCan restrict the use of potentially malicious input values</p>
    <p>Our protection scheme is effective against large class of Our protection scheme is effective against large class of attacksattacks</p>
    <p>Stops both buffer overflow and format string attacksStops both buffer overflow and format string attacks No false alarms for realNo false alarms for real--world applicationsworld applications</p>
    <p>The overhead of tagging can be smallThe overhead of tagging can be small 1.4% space, 2.1% bandwidth, 1.1% performance overhead1.4% space, 2.1% bandwidth, 1.1% performance overhead</p>
    <p>Many extensions are possibleMany extensions are possible Automatically identify bound checks and strictly follow dependenAutomatically identify bound checks and strictly follow dependencies cies Combine with static analysisCombine with static analysis Other applications such as protecting private information or Other applications such as protecting private information or debuggingdebugging</p>
  </div>
  <div class="page">
    <p>ASPLOS XI, October 11, 2004ASPLOS XI, October 11, 2004 2626</p>
    <p>Questions?Questions?</p>
    <p>Our websiteOur website http://http://www.csg.csail.mit.eduwww.csg.csail.mit.edu</p>
    <p>Contact InfoContact Info Edward Suh (Edward Suh (suh@mit.edusuh@mit.edu))</p>
  </div>
</Presentation>
