<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Mark Tuttle, Lee Rosenbaum,</p>
    <p>Oleksandr Bazhaniuk, John Loucaides, Vincent Zimmer</p>
    <p>Intel Corporation</p>
    <p>August 10, 2015</p>
  </div>
  <div class="page">
    <p>Overview</p>
    <p>Message:</p>
    <p>Symbolic execution is now a believable path to BIOS validation</p>
    <p>Outline:</p>
    <p>BIOS/UEFI Background</p>
    <p>The problem: BIOS security</p>
    <p>The approach: Symbolic execution</p>
    <p>Status, risks, and mitigations</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>SMM / BIOS</p>
    <p>CPU</p>
    <p>App</p>
    <p>OS</p>
    <p>App</p>
    <p>VM</p>
    <p>App</p>
    <p>OS</p>
    <p>App</p>
    <p>VM</p>
    <p>VMM / Hypervisor</p>
    <p>Memory Peripherals</p>
    <p>Firmware</p>
    <p>Hardware</p>
    <p>Platform</p>
    <p>P ri</p>
    <p>v il</p>
    <p>e g</p>
    <p>e</p>
    <p>Where is BIOS/UEFI?</p>
    <p>Acronyms</p>
    <p>UEFI  Unified Extensible Firmware Interface</p>
    <p>UEFI Forum @ www.uefi.org</p>
    <p>SMM  System Management Mode</p>
    <p>VM  Virtual Machine</p>
    <p>VMM  Virtual Machine Monitor</p>
  </div>
  <div class="page">
    <p>Whats in UEFI?</p>
    <p>Specification pages: UEFI 2,000+, PI 2,000+, Also: ACPI, TCG, PECOFF, USB,</p>
    <p>Tianocore.org: UDK2014: 2 million+ open source LOC</p>
    <p>Typical platform: 200,000 open source LOC,</p>
  </div>
  <div class="page">
    <p>UEFI Boot Timeline</p>
    <p>SMM IPL</p>
    <p>Power on</p>
    <p>Security (SEC)</p>
    <p>[ . . Platform initialization . . ]</p>
    <p>Pre EFI Initialization</p>
    <p>(PEI)</p>
    <p>Driver Execution Environment</p>
    <p>(DXE)</p>
    <p>Boot Dev Select (BDS)</p>
    <p>[ . . . . OS boot . . . . ]</p>
    <p>Transient System Load</p>
    <p>(TSL)</p>
    <p>Shutdown</p>
    <p>After Life (AL)</p>
    <p>Run Time (RT)</p>
    <p>?</p>
    <p>OS-Present App</p>
    <p>Final OS Environment</p>
    <p>Final OS Boot Loader</p>
    <p>OS Absent Application</p>
    <p>Transient OS Boot Loader</p>
    <p>Boot Manager</p>
    <p>CPU Init</p>
    <p>Chipset Init</p>
    <p>Board Init</p>
    <p>v e</p>
    <p>ri fy</p>
    <p>Device, Bus, or Service Driver</p>
    <p>Exposed Platform Interface</p>
    <p>Pre Verifier</p>
    <p>EFI Driver Dispatcher</p>
    <p>Boot Services Runtime Services</p>
    <p>SMM Handler SMM Intrinsic</p>
    <p>Services</p>
    <p>UEFI Runtime, ACPI, SMBIOS,.</p>
    <p>What Could Possibly Go Wrong???</p>
  </div>
  <div class="page">
    <p>BIOS Attack Surfaces</p>
    <p>BIOS</p>
    <p>Unsafe</p>
    <p>Coding</p>
    <p>Practices</p>
    <p>Server</p>
    <p>Mgmnt</p>
    <p>Interfaces</p>
    <p>Shell</p>
    <p>Apps &amp;</p>
    <p>Diags</p>
    <p>BIOS</p>
    <p>Update</p>
    <p>Interfaces</p>
    <p>Option</p>
    <p>ROMs</p>
    <p>Standard</p>
    <p>APIs</p>
    <p>System</p>
    <p>Mgmnt</p>
    <p>Mode BIOS</p>
    <p>Vendor</p>
    <p>Hooks</p>
    <p>UEFI, Open Platforms, and the Defenders</p>
    <p>Dilemma</p>
    <p>Vincent Zimmer</p>
    <p>@vincentzimmer, vincent.zimmer @intel.com | @gmail.com</p>
    <p>CanSecWest 2015 Vancouver, Canada</p>
    <p>Attacking</p>
    <p>Hypervisors</p>
    <p>Using Firmware</p>
    <p>and Hardware Bulygin, Matrosov,</p>
    <p>Gorobets,</p>
    <p>&amp; Bazhaniuk</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>System Management</p>
    <p>Mode</p>
    <p>SMM is valuable because it:</p>
    <p>Is invisible to Operating System, Anti Virus, Virtual Machines</p>
    <p>Can see all memory and access all host accessible resources</p>
    <p>Is used to protect flash  which contains UEFI code and variables</p>
    <p>Threats</p>
    <p>Elevation</p>
    <p>View secrets or own the system by subverting RAM</p>
    <p>Mitigations include code reviews to:</p>
    <p>Validate external / untrusted input</p>
    <p>Remove calls from inside SMM to outside SMM</p>
    <p>SMM</p>
  </div>
  <div class="page">
    <p>SMM security with Symbolic Execution</p>
    <p>Goal</p>
    <p>Eliminate vulnerabilities during development,</p>
    <p>So they cant be exploited</p>
    <p>Approach: Search for vulnerabilities with S2E</p>
    <p>Integer overflow, division by zero</p>
    <p>Pointers invalid or out of range, buffer overflow</p>
    <p>Insecure memory references</p>
    <p>Current target: SMM interrupt handlers + call outs</p>
    <p>Searching for SMI memory references outside of SMRAM</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Cristian Cadar, Imperial College</p>
    <p>OSDI 2008</p>
  </div>
  <div class="page">
    <p>KLEE</p>
    <p>Symbolic execution for code coverage and bug hunting</p>
    <p>Coverage: minimal test cases inducing maximal code coverage</p>
    <p>Bugs: test cases inducing common program vulnerabilities</p>
    <p>f(x,y)</p>
    <p>x=1, y=0 x=2, y=1 x=3, y=4</p>
  </div>
  <div class="page">
    <p>Symbolic execution</p>
    <p>Program</p>
    <p>if (x &lt; y)</p>
    <p>print(small)</p>
    <p>else</p>
    <p>print(large)</p>
    <p>Harness</p>
    <p>make_symbolic(x);</p>
    <p>make_symbolic(y);</p>
    <p>x &lt; y</p>
    <p>x &lt; y x &gt;= y</p>
    <p>constraints</p>
    <p>x &lt; y x &gt;= y</p>
    <p>solver</p>
    <p>x=0</p>
    <p>y=1</p>
    <p>x=1</p>
    <p>y=0</p>
    <p>test cases</p>
  </div>
  <div class="page">
    <p>KLEE flow</p>
    <p>program</p>
    <p>harness</p>
    <p>clang llvm klee</p>
    <p>constraint</p>
    <p>solver</p>
    <p>test</p>
    <p>cases</p>
    <p>gcc +</p>
    <p>profiling x86</p>
    <p>compute</p>
    <p>coverage</p>
    <p>on test cases</p>
    <p>llvm</p>
    <p>symbolic</p>
    <p>execution</p>
    <p>engine</p>
    <p>KLEEs</p>
    <p>crown</p>
    <p>jewel</p>
  </div>
  <div class="page">
    <p>But the test harness is a problem</p>
    <p>Has to model the environment of the software under test</p>
    <p>System Table</p>
    <p>foo.efi</p>
    <p>int x</p>
    <p>f(){</p>
    <p>x=4;</p>
    <p>}</p>
    <p>bar.efi</p>
    <p>g(){</p>
    <p>}</p>
    <p>SMM Memory (SMRAM)</p>
    <p>SMRAM is the model</p>
    <p>The code is there</p>
    <p>The data and data layout there</p>
    <p>S2E lets us use SMRAM</p>
    <p>Boot to SMRAM and dump it</p>
    <p>Load it into S2E</p>
    <p>Jump to an entry point</p>
    <p>And execute symbolically</p>
  </div>
  <div class="page">
    <p>Vitaly Chipounov, et al, EPFL</p>
    <p>ASPLOS 2011</p>
  </div>
  <div class="page">
    <p>S2E does symbolic execution on binaries</p>
    <p>x86 binary symbolic</p>
    <p>execution</p>
    <p>engine</p>
    <p>Test cases</p>
    <p>A powerful plug-in mechanism instruments and extends S2E</p>
    <p>Check memory references</p>
    <p>Simulate buggy devices</p>
    <p>plug ins</p>
  </div>
  <div class="page">
    <p>S2E: dynamic binary translation</p>
    <p>guest</p>
    <p>binary x86</p>
    <p>basic</p>
    <p>block</p>
    <p>host</p>
    <p>binary x86</p>
    <p>basic</p>
    <p>block</p>
    <p>QEMU intermediate</p>
    <p>language</p>
    <p>llvm basic</p>
    <p>block llvm</p>
    <p>symbolic execution engine</p>
    <p>x86 cores</p>
    <p>The trick: correlate values</p>
    <p>concrete x for x86</p>
    <p>symbolic x for llvm</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Use Open Source HW, SW and Tools</p>
    <p>HW: Minnow Board MAX Open hardware platform</p>
    <p>http://firmware.intel.com/projects</p>
    <p>SW: Minnow Board MAX UEFI Open Source (EDKII project)</p>
    <p>http://tianocore.sourceforge.net/wiki/EDK2</p>
    <p>Builds using Microsoft Visual Studios or GNU C Compiler</p>
    <p>Tools: S2E</p>
    <p>http://s2e.epfl.ch/</p>
  </div>
  <div class="page">
    <p>Our Process</p>
    <p>SMRAM SMRAM image</p>
    <p>Boot</p>
    <p>on board</p>
    <p>Dump</p>
    <p>to disk</p>
    <p>Run S2E</p>
    <p>on QEMU</p>
    <p>SMRAM</p>
    <p>Main()</p>
    <p>{</p>
    <p>}</p>
    <p>Replay</p>
    <p>on board</p>
    <p>SMRAM</p>
    <p>Main()</p>
    <p>{</p>
    <p>}</p>
    <p>Test</p>
    <p>cases</p>
    <p>Error</p>
    <p>Messages</p>
    <p>Code</p>
    <p>Coverage</p>
    <p>SmmMemoryChecker: address 0xffffffff8172eef4 out of range at pc 0x7b3ec435</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Our status</p>
    <p>For a SMM handler, we need:</p>
    <p>SMRAM image, its base &amp; size and the address of the entry point</p>
    <p>We have three tools</p>
    <p>excite-generate: generate test cases from Linux shell</p>
    <p>Generates 4000 tests in 4 hours [1]</p>
    <p>excite-replay: replay test cases from Linux shell</p>
    <p>s2eReplay.nsh - UEFI shell application:</p>
    <p>replay test cases on the board in 30 min</p>
    <p>and measure the code coverage</p>
    <p>[1] Intel Core 2 Quad 2.66 GHZ CPU with 2GB ram running Ubuntu 14.04 LTS</p>
    <p>For SmmVariableHandler in MdeModulePkg\Universal\Variable\RuntimeDxe\VariableSmm.c</p>
  </div>
  <div class="page">
    <p>Inducing dangerous memory ops</p>
    <p>MemoryCheck plugin from S2E</p>
    <p>Traps on every memory reference</p>
    <p>Checks address of every memory reference</p>
    <p>We are modifying MemoryCheck to induce bad addresses</p>
    <p>Invoke solver: Could the address be outside SMRAM?</p>
    <p>excite-checker tool in process</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Conclusion</p>
    <p>We have a believable path to detecting SMRAM callouts in SMI handlers</p>
    <p>Test harness identifies symbolic data, but does no additional modeling</p>
    <p>Boot system on a board or simulator (Simics, zsim ) to desired state and dump SMRAM</p>
    <p>Execute entry points symbolically from that state</p>
    <p>We believe it is extendable to BIOS in general</p>
    <p>UEFI capsules, binary modules, DXE drivers, UEFI applications</p>
    <p>as well as other embedded firmware</p>
  </div>
  <div class="page">
    <p>References</p>
    <p>https://cansecwest.com/csw15archive.html - See: Wojtczuk, Kallenberg, Loucaides and Zimmer</p>
    <p>https://cansecwest.com/csw09/csw09-duflot.pdf</p>
    <p>https://www.blackhat.com/us-15/briefings.html#attacking-hypervisors-using-firmware-and</p>
    <p>hardware</p>
  </div>
  <div class="page"/>
  <div class="page"/>
  <div class="page">
    <p>What is UEFI/PI? www.uefi.org</p>
    <p>UEFI 2.5 specifies how firmware boots OS loader</p>
    <p>UEFIs Platform Initialization (PI) 1.4 Architecture</p>
    <p>specifies how Driver Execution Environment</p>
    <p>(DXE) Drivers and Pre-EFI Initialization (PEI)</p>
    <p>Modules (PEIMs) initialize SI and the platform</p>
    <p>PEIMs, UEFI and DXE drivers implement</p>
    <p>networking, Update, other security features</p>
    <p>Hardware</p>
    <p>OS Pre-boot</p>
    <p>Tools</p>
    <p>UEFI Specification</p>
    <p>Silicon Component</p>
    <p>Modules</p>
    <p>Platform</p>
    <p>Drivers</p>
    <p>U E</p>
    <p>F I</p>
    <p>P I</p>
    <p>S c o</p>
    <p>p e</p>
    <p>G</p>
    <p>re e</p>
    <p>n</p>
    <p>H</p>
    <p>PEI/DXE PI Foundation</p>
    <p>Modular components</p>
    <p>Network</p>
    <p>Hardware</p>
    <p>Firmware</p>
    <p>OS</p>
    <p>Drivers</p>
    <p>Libraries</p>
    <p>Application</p>
    <p>GUI</p>
    <p>Human User</p>
    <p>Full system stack</p>
    <p>(user -&gt; hardware)</p>
  </div>
  <div class="page">
    <p>The road from core to platform</p>
    <p>Reference Tree</p>
    <p>tianocore.org</p>
    <p>OEM BIOS</p>
    <p>New product</p>
    <p>IBV</p>
    <p>Existing product</p>
    <p>ODM BIOS New</p>
    <p>product Existing ODM</p>
    <p>product</p>
    <p>Commercial product in the field</p>
    <p>Consumer product in the field</p>
    <p>End users</p>
    <p>updating?</p>
    <p>ODMs updating?</p>
    <p>Time</p>
    <p>Open Source</p>
    <p>All</p>
    <p>Intel</p>
    <p>OEM</p>
    <p>IBV</p>
    <p>ODM</p>
  </div>
  <div class="page">
    <p>System Management Mode with UEFI PI</p>
    <p>Orange regions are SMRAM</p>
    <p>Software model defined in PI 1.4 specification, volume 4</p>
    <p>Implementation at edk2\MdeModulePkg\Core\PiSmmCore</p>
  </div>
  <div class="page">
    <p>SMM Attacks</p>
    <p>SMI Call-outs (aka Incursions)  Legbacore Kallenberg &amp; Kovah, LegbaCore - How many million BIOSes would you like to infect?,</p>
    <p>Wojtczuk &amp; Kallenberg - Attacks on UEFI Security,</p>
    <p>SMI Pointer Inputs  Intel ATR Loucaides &amp; Furtak, Intel - A new class of vulnerability in SMI Handlers of BIOS/UEFI Firmware</p>
    <p>SMM Cache Poisoning  Duflot and Invisible Things Lab  Compatibility SMRAM Locking  Duflot</p>
  </div>
  <div class="page">
    <p>Symbolic Execution Example</p>
  </div>
  <div class="page">
    <p>Exploration: 1</p>
    <p>choose x, y</p>
    <p>inputs</p>
    <p>x = 0</p>
    <p>y = 9</p>
    <p>Exploring f(int x, int y)</p>
    <p>x &gt; y</p>
    <p>x1 = x  1;</p>
    <p>x1 &gt; y</p>
    <p>false</p>
    <p>false</p>
    <p>x</p>
    <p>y = 0</p>
    <p>= 9</p>
    <p>=-1</p>
  </div>
  <div class="page">
    <p>Exploration: 2</p>
    <p>choose x, y so</p>
    <p>(x &gt; y) = false</p>
    <p>x1 = x  1</p>
    <p>(x1 &gt; y) = true</p>
    <p>inputs</p>
    <p>no such x, y!</p>
    <p>Exploring f(int x, int y)</p>
    <p>x &gt; y</p>
    <p>x1 = x  1;</p>
    <p>x1 &gt; y</p>
    <p>x</p>
    <p>y</p>
  </div>
  <div class="page">
    <p>x1 = x + y;</p>
    <p>y1 = x1  y;</p>
    <p>x2 = x1  y1  3;</p>
    <p>x3 = x2  1;</p>
    <p>Exploration: 3</p>
    <p>choose x, y so</p>
    <p>(x &gt; y) = true</p>
    <p>inputs</p>
    <p>x = 9</p>
    <p>y = 0</p>
    <p>Exploring f(int x, int y)</p>
    <p>x &gt; y</p>
    <p>x1 = x  1;</p>
    <p>x1 &gt; y</p>
    <p>true</p>
    <p>false</p>
    <p>x</p>
    <p>y</p>
    <p>x3 &gt; y1</p>
    <p>=9</p>
    <p>=0</p>
    <p>=9</p>
    <p>=9</p>
    <p>=-3</p>
    <p>=-4</p>
  </div>
  <div class="page">
    <p>Exploration: 4</p>
    <p>choose x, y so</p>
    <p>(x &gt; y) = true</p>
    <p>x1 = x + y</p>
    <p>y1 = x1  y</p>
    <p>x2 = x1  y1 + 3</p>
    <p>x3 = x2  1</p>
    <p>(x3 &gt; y1) = true</p>
    <p>inputs</p>
    <p>x = 1</p>
    <p>y = 0</p>
    <p>Exploring f(int x, int y)</p>
    <p>x1 = x + y;</p>
    <p>y1 = x1  y;</p>
    <p>x2 = x1  y1  3;</p>
    <p>x3 = x2  1;</p>
    <p>x &gt; y</p>
    <p>x1 = x  1;</p>
    <p>x1 &gt; y</p>
    <p>x</p>
    <p>y</p>
    <p>x3 &gt; y1</p>
    <p>Crash!</p>
    <p>=1</p>
    <p>=0</p>
    <p>true</p>
    <p>=1</p>
    <p>=1</p>
    <p>=-3</p>
    <p>=-4</p>
    <p>true</p>
  </div>
  <div class="page">
    <p>void f (int x, int y) { if (x &gt; y) {</p>
    <p>x = x + y;</p>
    <p>y = x  y  3;</p>
    <p>x = x  y; }</p>
    <p>x = x  1;</p>
    <p>if (x &gt; y) {</p>
    <p>abort (); }</p>
    <p>}</p>
    <p>int main () {</p>
    <p>int x,y;</p>
    <p>klee_make_symbolic (x);</p>
    <p>klee_make_symbolic (y);</p>
    <p>f (x, y);</p>
    <p>return 0;</p>
    <p>}</p>
    <p>Program Test Harness</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Opens</p>
    <p>Bug hunting</p>
    <p>Existing plug ins only detect bugs</p>
    <p>We must extend them to induce bugs</p>
    <p>Device behavior</p>
    <p>Model devices</p>
    <p>SymbolicHardware plug in for PCI devices would be a good start</p>
    <p>Use devices</p>
    <p>Avatar runs S2E on devices. How about SIMICS device models?</p>
    <p>Integration</p>
    <p>Goal: command-line, turn-key tool checking all handlers</p>
    <p>Seamless integration into product groups development and test processes</p>
    <p>Source annotations to identify symbolic data</p>
  </div>
  <div class="page">
    <p>Issues</p>
    <p>State explosion</p>
    <p>Use path selector plug-in: heuristics for loops fill the literature</p>
    <p>Automate handler checking</p>
    <p>Find the handlers to check</p>
    <p>Find the data to make symbolic (annotations required?)</p>
    <p>ITS coverage tool</p>
    <p>Not open source (were aiming for the broader UEFI ecosystem)</p>
    <p>Not easy to enable tool on code base</p>
    <p>Coverage Data not based on the paths explored by S2E</p>
    <p>Mapping S2Es errors from assembly code to corresponding C source line</p>
  </div>
  <div class="page">
    <p>Details: Test case generation</p>
    <p>Run test harness from Bash shell on QEMU</p>
    <p>Memory map SMRAM into address space, jump to entry point</p>
    <p>Status: working</p>
    <p>Run test harness from UEFI shell (OVMF) on QEMU</p>
    <p>Allocate pages and write SMRAM into memory</p>
    <p>But SMRAM pages must be unused by OVMF</p>
    <p>Status: working for quicksort, in progress for SMM</p>
    <p>Run test harness on seabios or s2ebios on QEMU</p>
    <p>Only minimal hardware initialized, small loader required</p>
    <p>Status: unimplemented</p>
  </div>
  <div class="page">
    <p>Details: Test case replay for coverage</p>
    <p>Run test harness from Bash shell on Debian (no QEMU)</p>
    <p>Replay works</p>
    <p>No coverage: Considering a gcov for embedded systems</p>
    <p>Run test harness on MinnowMax board</p>
    <p>SMRAM unlocked: Use SSG coverage package</p>
    <p>Status: SSG is fixing the mechanism to boot unlocked</p>
    <p>SMRAM locked: Use SSG coverage package, write to port B2</p>
    <p>Some test cases cannot be run with SMRAM locked</p>
    <p>Status: In progress</p>
  </div>
  <div class="page">
    <p>S2E Configuaration  per Section 8.1 of paper</p>
    <p>-- File: config.lua</p>
    <p>s2e = {</p>
    <p>kleeArgs = {</p>
    <p>&quot;--enable-speculative-forking=false&quot;,</p>
    <p>&quot;--state-shared-memory=true&quot;,</p>
    <p>&quot;--flush-tbs-on-state-switch=false&quot;</p>
    <p>}</p>
    <p>}</p>
  </div>
</Presentation>
