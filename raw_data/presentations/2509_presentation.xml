<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Serval: An End-Host Stack for Service-Centric Networking</p>
    <p>Erik Nordstrm David Shue, Prem Gopalan, Rob Kiefer,</p>
    <p>Mat Arye, Steven Ko, Jen Rexford, Mike Freedman</p>
    <p>Princeton University</p>
    <p>serval-arch.org</p>
  </div>
  <div class="page">
    <p>The Internet of the 1970s</p>
    <p>Network designed for accessing hosts</p>
    <p>Killer Apps: telnet, Sp</p>
    <p>IMP 1 UCLA</p>
    <p>IMP 4 Utah</p>
    <p>IMP 2 SRI</p>
    <p>IMP 3 UCSB</p>
  </div>
  <div class="page">
    <p>Users agnosYc of actual service locaYon and host</p>
    <p>The Internet of the 2000s</p>
    <p>Datacenter</p>
    <p>Datacenter</p>
  </div>
  <div class="page">
    <p>What does Service Access Involve?</p>
  </div>
  <div class="page">
    <p>Todays (Overloaded) AbstracYons</p>
    <p>Service is IP + port  Exposes locaYon  Specifies app. protocol  One service per IP</p>
    <p>Flow is five tuple  Binds flow to interface and locaYon</p>
    <p>Cannot migrate between interfaces or networks</p>
    <p>TCP/IP</p>
    <p>demux (IP + port)</p>
    <p>Network</p>
    <p>connect (IP + port)</p>
    <p>Transport</p>
    <p>ApplicaYon</p>
  </div>
  <div class="page">
    <p>Cellular Provider</p>
    <p>Enterprise Network</p>
    <p>Transit Provider</p>
    <p>Service Access Today</p>
    <p>Datacenter</p>
    <p>Datacenter</p>
  </div>
  <div class="page">
    <p>Cellular Provider</p>
    <p>Enterprise Network</p>
    <p>Transit Provider</p>
    <p>Finding a Service LocaYon</p>
    <p>Load-Balanced Web Service</p>
    <p>DNS binds service to locaYon at client (early binding)  Caching and ignoring TTL exacerbates the problem  Slow failover when instance or load balancer fail</p>
    <p>DNS</p>
  </div>
  <div class="page">
    <p>Cellular Provider</p>
    <p>Enterprise Network</p>
    <p>Transit Provider</p>
    <p>ConnecYng to Service</p>
    <p>Load-Balanced Web Service</p>
    <p>Datacenter LB maps single IP to mulYple servers  Must do this for every packet on path -&gt; fate sharing  Increases complexity and cost</p>
  </div>
  <div class="page">
    <p>Cellular Provider</p>
    <p>Enterprise Network</p>
    <p>Transit Provider</p>
    <p>Maintaining ConnecYvity to Service</p>
    <p>VM MigraYon</p>
    <p>Datacenter</p>
    <p>Migrate VMs to balance load in the cloud  Requires flat addressing or tunneling within datacenter</p>
  </div>
  <div class="page">
    <p>Cellular Provider</p>
    <p>Enterprise Network</p>
    <p>Maintaining ConnecYvity to Service</p>
    <p>Datacenter</p>
    <p>Datacenter</p>
    <p>Physical Mobility</p>
    <p>MulY- Homing</p>
    <p>Transit Provider</p>
    <p>Flows break when switching networks or interfaces</p>
  </div>
  <div class="page">
    <p>ContribuYons</p>
    <p>Naming abstracYons  Services, flows  Clean role separaYon in the network stack</p>
    <p>SoSware architecture for services (Serval)  Service-level control/data plane split  Service-level events</p>
  </div>
  <div class="page">
    <p>Naming AbstracYons</p>
  </div>
  <div class="page">
    <p>Todays (Overloaded) AbstracYons</p>
    <p>TCP/IP</p>
    <p>demux (IP + port)</p>
    <p>Network forward (IP)</p>
    <p>connect (IP + port)</p>
    <p>Transport</p>
    <p>ApplicaYon</p>
  </div>
  <div class="page">
    <p>Service Access</p>
    <p>Serval AbstracYons</p>
    <p>Serval cleans the slate  (But not completely)</p>
    <p>Network layer unmodified!</p>
    <p>Service Access Layer (SAL)  Connects to services  Maintains connecYvity</p>
    <p>Transport</p>
    <p>ApplicaYon</p>
    <p>Network forward (IP)</p>
    <p>Serval</p>
  </div>
  <div class="page">
    <p>Serval AbstracYons</p>
    <p>Service = ServiceID  Group of processes with idenYcal funcYonality</p>
    <p>Flow = FlowID  Invariant demux key  Host-local, ephemeral</p>
    <p>LocaYon = IP address  LocaYon, interface  Can change dynamically</p>
    <p>connect (serviceID)</p>
    <p>Transport</p>
    <p>ApplicaYon</p>
    <p>demux ( ) serviceID</p>
    <p>Network forward (IP)</p>
    <p>Service Access flowID</p>
    <p>Serval</p>
  </div>
  <div class="page">
    <p>A Clean Role SeparaYon in the Stack</p>
    <p>What you access (serviceID), over which flows (flowIDs), and at which service instance (IP address)</p>
    <p>TCP/IP Serval</p>
    <p>demux (IP + port)</p>
    <p>forward (IP) forward (IP)</p>
    <p>connect (IP + port) connect (serviceID)</p>
    <p>demux ( ) serviceID flowID</p>
    <p>Transport</p>
    <p>Network</p>
    <p>ApplicaYon</p>
    <p>Service Access</p>
  </div>
  <div class="page">
    <p>Service Names (ServiceIDs)</p>
    <p>ServiceIDs allocated in blocks  Prefix ensures global uniqueness  Prefix-based aggregaYon and LPM</p>
    <p>A ServiceID late binds to service instance  ServiceID in first packet of connecYon  Service-level rouYng and forwarding</p>
    <p>Provider prefix Provider-specific Self-cerYfying</p>
  </div>
  <div class="page">
    <p>A Service-Aware Network Stack</p>
    <p>connect(sock, serviceID) bind(sock, serviceID) listen(sock)</p>
    <p>Network stack must resolve service to instance for client</p>
    <p>Network stack must adver/se service for</p>
    <p>server</p>
  </div>
  <div class="page">
    <p>SoSware Architecture</p>
  </div>
  <div class="page">
    <p>Service Controller</p>
    <p>Serval End-host Architecture</p>
    <p>ServiceID Ac;on Sock/Addr FlowID Socket</p>
    <p>ApplicaYon</p>
    <p>Dest Address Next Hop IP Forwarding Table</p>
    <p>Flow Table Service Table</p>
    <p>Service Control API</p>
  </div>
  <div class="page">
    <p>Data Plane: The Service Table</p>
    <p>ServiceID Ac;on Rule State</p>
    <p>Prefix A FORWARD Send to addr A1</p>
    <p>Prefix B FORWARD Send to [A2, A3, A4]</p>
    <p>Prefix C DEMUX Send to listening sock s</p>
    <p>Prefix D DELAY Queue and noYfy service</p>
    <p>controller</p>
    <p>Prefix E DROP</p>
    <p>default FORWARD Send to A5</p>
  </div>
  <div class="page">
    <p>Data Plane: The Service Table</p>
    <p>ServiceID Ac;on Rule State</p>
    <p>Prefix A FORWARD Send to addr A1</p>
    <p>Prefix B FORWARD Send to [A2, A3, A4]</p>
    <p>Prefix C DEMUX Send to listening sock s</p>
    <p>Prefix D DELAY Queue and noYfy service</p>
    <p>controller</p>
    <p>Prefix E DROP</p>
    <p>default FORWARD Send to A5</p>
  </div>
  <div class="page">
    <p>Data Plane: The Service Table</p>
    <p>ServiceID Ac;on Rule State</p>
    <p>Prefix A FORWARD Send to addr A1</p>
    <p>Prefix B FORWARD Send to [A2, A3, A4]</p>
    <p>Prefix C DEMUX Send to listening sock s</p>
    <p>Prefix D DELAY Queue and noYfy service</p>
    <p>controller</p>
    <p>Prefix E DROP</p>
    <p>default FORWARD Send to A5</p>
  </div>
  <div class="page">
    <p>Data Plane: The Service Table</p>
    <p>ServiceID Ac;on Rule State</p>
    <p>Prefix A FORWARD Send to addr A1</p>
    <p>Prefix B FORWARD Send to [A2, A3, A4]</p>
    <p>Prefix C DEMUX Send to listening sock s</p>
    <p>Prefix D DELAY Queue and noYfy service</p>
    <p>controller</p>
    <p>Prefix E DROP</p>
    <p>default FORWARD Send to A5</p>
  </div>
  <div class="page">
    <p>Data Plane: The Service Table</p>
    <p>ServiceID Ac;on Rule State</p>
    <p>Prefix A FORWARD Send to addr A1</p>
    <p>Prefix B FORWARD Send to [A2, A3, A4]</p>
    <p>Prefix C DEMUX Send to listening sock s</p>
    <p>Prefix D DELAY Queue and noYfy service</p>
    <p>controller</p>
    <p>Prefix E DROP</p>
    <p>default FORWARD Send to A5</p>
  </div>
  <div class="page">
    <p>Internet</p>
    <p>Service Access with Serval</p>
    <p>X</p>
    <p>X</p>
    <p>a</p>
    <p>c d</p>
    <p>e Datacenter</p>
    <p>Service Router</p>
  </div>
  <div class="page">
    <p>Adding a Service Instance</p>
    <p>ServiceID Ac;on Sock/Addr FlowID Socket</p>
    <p>ApplicaYon Service</p>
    <p>Controller</p>
    <p>S bind(X) listen()</p>
    <p>Add DEMUX rule</p>
    <p>X DMX s</p>
    <p>Register Service X</p>
  </div>
  <div class="page">
    <p>Removing a Service Instance</p>
    <p>ServiceID Ac;on Sock/Addr FlowID Socket</p>
    <p>ApplicaYon Service</p>
    <p>Controller</p>
    <p>S close()</p>
    <p>Remove DEMUX rule</p>
    <p>X DMX s</p>
    <p>Unregister Service X</p>
  </div>
  <div class="page">
    <p>Control Plane: The Service Controller</p>
    <p>Service Controller</p>
    <p>Service X @ address a</p>
    <p>Service Controller</p>
    <p>DNS</p>
  </div>
  <div class="page">
    <p>Control Plane: The Service Controller</p>
    <p>ServiceID Ac;on Sock/Addr FlowID Socket</p>
    <p>Service Controller</p>
    <p>Add FORWARD rule</p>
    <p>X FWD d</p>
    <p>Service X @ address d</p>
  </div>
  <div class="page">
    <p>Internet</p>
    <p>Service Access with Serval</p>
    <p>X</p>
    <p>X</p>
    <p>a</p>
    <p>c d</p>
    <p>e Datacenter</p>
    <p>X d,e</p>
    <p>X/24@ c</p>
    <p>X/24 c</p>
    <p>Service Router</p>
    <p>bind(X)</p>
    <p>bind(X)</p>
  </div>
  <div class="page">
    <p>Service Controller</p>
    <p>ConnecYng to Service X</p>
    <p>ServiceID Ac;on Sock/Addr FlowID Socket</p>
    <p>ApplicaYon</p>
    <p>S socket()</p>
    <p>X FWD c 2 s</p>
    <p>Allocates local flowID</p>
    <p>a</p>
  </div>
  <div class="page">
    <p>ConnecYng to Service X</p>
    <p>ServiceID Ac;on Sock/Addr FlowID Socket</p>
    <p>ApplicaYon</p>
    <p>S connect(X)</p>
    <p>X FWD c 2 s</p>
    <p>a a 2 SYN c - X</p>
    <p>To c</p>
  </div>
  <div class="page">
    <p>Load Balancing in Service Router</p>
    <p>ServiceID Ac;on Sock/Addr FlowID Socket</p>
    <p>X FWD d,e</p>
    <p>f c To e From a</p>
    <p>a 2 SYN e - X a 2 SYN c - X</p>
  </div>
  <div class="page">
    <p>Service Instance Providing Service X</p>
    <p>ServiceID Ac;on Sock/Addr FlowID Socket</p>
    <p>ApplicaYon</p>
    <p>X DMX s</p>
    <p>a 2 SYN e - X</p>
    <p>S</p>
    <p>e From a</p>
  </div>
  <div class="page">
    <p>Service Instance Providing Service X</p>
    <p>ServiceID Ac;on Sock/Addr FlowID Socket</p>
    <p>ApplicaYon</p>
    <p>accept()</p>
    <p>X DMX s 3 sc</p>
    <p>S Sc</p>
    <p>e To a</p>
    <p>e 3 SYN-ACK a 2</p>
  </div>
  <div class="page">
    <p>Internet</p>
    <p>Service Access with Serval</p>
    <p>X</p>
    <p>X</p>
    <p>a</p>
    <p>c d</p>
    <p>e Datacenter</p>
    <p>a SYN c X</p>
    <p>e SYN-ACK a</p>
    <p>a SYN e X</p>
    <p>X d,e</p>
    <p>e data a</p>
    <p>Service Router</p>
  </div>
  <div class="page">
    <p>Ad hoc Service Discovery</p>
    <p>ServiceID Ac;on Rule State</p>
    <p>default FORWARD broadcast</p>
    <p>X</p>
    <p>X</p>
    <p>connect(X)</p>
    <p>a</p>
    <p>c</p>
    <p>b</p>
    <p>Accessing service X</p>
    <p>a SYN * X</p>
    <p>b SYN-AC</p>
    <p>K a</p>
    <p>c SYN-ACK</p>
    <p>a</p>
  </div>
  <div class="page">
    <p>What does Service Access Involve?</p>
  </div>
  <div class="page">
    <p>MigraYon of Flows</p>
    <p>sC sS fS1 fC1 a1</p>
    <p>a2</p>
    <p>a3</p>
    <p>Host C Host S a4</p>
    <p>RSYN</p>
    <p>RSYN-ACK</p>
    <p>ACK</p>
    <p>Migrate flow a1 -&gt; a2</p>
  </div>
  <div class="page">
    <p>MulYpath with MulYple Subflows</p>
    <p>sC sS fS1 fC1</p>
    <p>fS2 fC2</p>
    <p>a1</p>
    <p>a2</p>
    <p>a3</p>
    <p>Host C Host S a4</p>
    <p>SYN</p>
    <p>SYN-ACK</p>
    <p>ACK</p>
    <p>Add flow a2 &lt;-&gt; a4</p>
  </div>
  <div class="page">
    <p>Prototype  End-host network stack (28,000 LOC)  Linux kernel module  BSD sockets with AF_SERVAL protocol family  AF_INET sockets can be accessed simultaneously</p>
    <p>Legacy middleboxes / NATs handled via encap.</p>
    <p>Translator for incremental deployment  Unmodified apps and end-hosts  Serval apps with unmodified services</p>
  </div>
  <div class="page">
    <p>Incremental Deployment</p>
    <p>Translator App</p>
    <p>TCP/IP Serval</p>
  </div>
  <div class="page">
    <p>Incremental Deployment</p>
    <p>TCP/IP</p>
    <p>Translator</p>
    <p>App</p>
    <p>Serval TCP/IP</p>
    <p>Translator</p>
  </div>
  <div class="page">
    <p>Use of MigraYon on Clients WiFi Cellular</p>
    <p>Single Serval TCP connecYon that never breaks</p>
    <p>Saves &gt; 900 MB cellular data per month</p>
  </div>
  <div class="page">
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (M</p>
    <p>bp s)</p>
    <p>Time (s)</p>
    <p>Flow 1 Flow 2</p>
    <p>Uses of MigraYon on Servers</p>
    <p>Load balancing across NICs</p>
    <p>Both flows use eth0</p>
    <p>Flow 1 moved to eth1</p>
  </div>
  <div class="page">
    <p>Uses of MigraYon on Servers MigraYng VMs across subnets</p>
    <p>Th ro</p>
    <p>ug hp</p>
    <p>ut (M</p>
    <p>bp s)</p>
    <p>Time (s)</p>
    <p>Flow 1</p>
    <p>VM changes subnet, acquiring new address</p>
    <p>VM migrates flow to new address</p>
  </div>
  <div class="page">
    <p>CompeYYve Performance</p>
    <p>Mean (Mbit/s) TCP/IP 934.5 Serval 933.8 Translator 932.1</p>
    <p>TCP Throughput</p>
    <p>Mbit/s Kpkt/s IP forwarding 987 388.4 Serval 872 142.8</p>
    <p>Service Table Throughput</p>
  </div>
  <div class="page">
    <p>ApplicaYons are Easy to Port</p>
    <p>Applica;on Codebase Changes Iperf 5,934 240 TFTP 3,452 90 wget 87,164 207 Elinks browser 115,224 234 Firefox browser 4,615,324 70 Mongoose webserver 8,831 425 Memcached server 8,329 159 Memcached client 12,503 184</p>
  </div>
  <div class="page">
    <p>SDN to the Edges!  SDN about network-wide visibility and control  Todays SDN (OpenFlow) primarily focuses on layer-2 / layer-3 abstracYons</p>
    <p>Serval extends SDN model to the network edge  New programming abstracYons for services, flows, hosts, and interfaces</p>
    <p>Service-level control/data plane split</p>
    <p>Joint service and network control</p>
  </div>
  <div class="page">
    <p>Summary of ContribuYons</p>
    <p>New naming abstracYons  Clean role separaYon in the stack  Makes it easier to build and manage services</p>
    <p>SoSware architecture for services  Flexible service resoluYon and discovery  Maintains robust connecYvity  Joint service and network management</p>
  </div>
  <div class="page">
    <p>Papers, demos, source code (GPL) online</p>
    <p>serval-arch.org</p>
    <p>@servalnetwork</p>
  </div>
  <div class="page">
    <p>Related Work</p>
    <p>Locator/idenYfier separaYon  HIP, i3, HAIR, DOA, LISP, LNA</p>
    <p>Data-oriented networking  DONA, CCNx</p>
    <p>Support for mobility and migraYon  TCP Migrate, Mobile IP, ROAM</p>
    <p>MulYpath and mulY-homing  MPTCP, SCTP, Shim6</p>
  </div>
</Presentation>
