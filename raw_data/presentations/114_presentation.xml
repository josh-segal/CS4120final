<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Design and Implementation of the AEGIS Single-Chip Secure Processor Using</p>
    <p>Physical Random Functions</p>
    <p>G. Edward Suh, Charles W. ODonnell, Ishan Sachdev, and Srinivas Devadas</p>
    <p>Massachusetts Institute of Technology</p>
  </div>
  <div class="page">
    <p>New Security Challenges</p>
    <p>Computing devices are becoming distributed, unsupervised, and physically exposed  Computers on the Internet (with untrusted owners)</p>
    <p>Embedded devices (cars, home appliances)</p>
    <p>Mobile devices (cell phones, PDAs, laptops)</p>
    <p>Attackers can physically tamper with devices  Invasive probing  Non-invasive measurement</p>
    <p>Install malicious software</p>
    <p>Software-only protections are not enough</p>
  </div>
  <div class="page">
    <p>Distributed Computation</p>
    <p>How can we trust remote computation? Example: Distributed Computation on the Internet (SETI@home, etc.)</p>
    <p>DistComp() { x = Receive(); result = Func(x); Send(result); }</p>
    <p>Receive() {  }</p>
    <p>Send() {  }</p>
    <p>Func() {  }  Need a secure platform</p>
    <p>Authenticate itself (device)</p>
    <p>Authenticate software</p>
    <p>Guarantee the integrity and privacy of execution</p>
  </div>
  <div class="page">
    <p>Existing Approaches</p>
    <p>Sensors to detect attacks</p>
    <p>Expensive</p>
    <p>Continually battery-powered</p>
    <p>Tamper-Proof Package: IBM 4758</p>
    <p>Trusted Platform Module (TPM)</p>
    <p>A separate chip (TPM) for security functions</p>
    <p>Decrypted secondary keys can be read out from the bus</p>
  </div>
  <div class="page">
    <p>Our Approach</p>
    <p>Build a secure computing platform with only trusting a single-chip processor (named AEGIS)</p>
    <p>Protected Environment</p>
    <p>Memory</p>
    <p>I/O</p>
    <p>Security Kernel</p>
    <p>(trusted part of an OS)</p>
    <p>A single chip is easier and cheaper to protect  The processor authenticates itself, identifies the security</p>
    <p>kernel, and protects off-chip memory</p>
    <p>Protect</p>
    <p>Identify</p>
  </div>
  <div class="page">
    <p>Contributions</p>
    <p>Physical Random Functions (PUFs)  Cheap and secure way to authenticate the processor</p>
    <p>Architecture to minimize the trusted code base  Efficient use of protection mechanisms  Reduce the code to be verified</p>
    <p>Integration of protection mechanisms  Additional checks in MMU  Off-chip memory encryption and integrity verification (IV)</p>
    <p>Evaluation of a fully-functional RTL implementation  Area Estimate  Performance Measurement</p>
  </div>
  <div class="page">
    <p>Physical Random Function</p>
    <p>(PUF  Physical Unclonable Function)</p>
  </div>
  <div class="page">
    <p>Problem</p>
    <p>EEPROM/ROM</p>
    <p>ProcessorProbe</p>
    <p>Adversaries can physically extract secret keys from EEPROM while processor is off</p>
    <p>Trusted party must embed and test secret keys in a secure location</p>
    <p>EEPROM adds additional complexity to manufacturing</p>
    <p>Storing digital information in a device in a way that is resistant to physical attacks is difficult and expensive.</p>
  </div>
  <div class="page">
    <p>Our Solution: Physical Random Functions (PUFs)</p>
    <p>Generate keys from a complex physical system</p>
    <p>Security Advantage  Keys are generated on demand  No non-volatile secrets</p>
    <p>No need to program the secret</p>
    <p>Can generate multiple master keys</p>
    <p>What can be hard to predict, but easy to measure?</p>
    <p>Physical System</p>
    <p>Processor</p>
    <p>Challenge (c-bits)</p>
    <p>configure</p>
    <p>characterize</p>
    <p>Response (n-bits) Use as a secret</p>
    <p>Can generate many secrets by changing the challenge</p>
    <p>Hard to fully characterize or predict</p>
  </div>
  <div class="page">
    <p>Silicon PUF  Concept</p>
    <p>Because of random process variations, no two Integrated Circuits even with the same layouts are identical  Variation is inherent in fabrication process  Hard to remove or predict  Relative variation increases as the fabrication process advances</p>
    <p>Experiments in which identical circuits with identical layouts were placed on different ICs show that path delays vary enough across ICs to use them for identification.</p>
    <p>Combinatorial Circuit</p>
    <p>Challenge c-bits</p>
    <p>Response n-bits</p>
  </div>
  <div class="page">
    <p>A (Simple) Silicon PUF [VLSI04]</p>
    <p>Each challenge creates two paths through the circuit that are excited simultaneously. The digital response of 0 or 1 is based on a comparison of the path delays by the arbiter</p>
    <p>We can obtain n-bit responses from this circuit by either duplicate the circuit n times, or use n different challenges</p>
    <p>Only use standard digital logic  No special fabrication</p>
    <p>c-bit Challenge</p>
    <p>Rising Edge</p>
    <p>D Q 1</p>
    <p>G</p>
  </div>
  <div class="page">
    <p>PUF Experiments</p>
    <p>Fabricated 200 identical chips with PUFs in TSMC 0.18on 5 different wafer runs</p>
    <p>Security</p>
    <p>What is the probability that a challenge produces different responses on two different PUFs?</p>
    <p>Reliability</p>
    <p>What is the probability that a PUF output for a challenge changes with temperature?</p>
    <p>With voltage variation?</p>
  </div>
  <div class="page">
    <p>Hamming Distance (# of different bits, out of 100)</p>
    <p>P ro</p>
    <p>b a</p>
    <p>b ili</p>
    <p>ty D</p>
    <p>e n</p>
    <p>si ty</p>
    <p>F u</p>
    <p>n ct</p>
    <p>io n</p>
    <p>Measurement Noise Inter-Chip Variation</p>
    <p>Inter-Chip Variation</p>
    <p>Apply random challenges and observe 100 response bits</p>
    <p>Measurement noise for Chip X = 0.9 bits</p>
    <p>Distance between Chip X and Y responses = 24.8 bits</p>
    <p>Can identify individual ICs</p>
  </div>
  <div class="page">
    <p>Hamming Distance (# of different bits, out of 100)</p>
    <p>P ro</p>
    <p>b a</p>
    <p>b ili</p>
    <p>ty D</p>
    <p>e n</p>
    <p>si ty</p>
    <p>F u</p>
    <p>n ct</p>
    <p>io n</p>
    <p>Measurement Noise Inter-Chip Variation Voltage Variation Noise Temp Variation Noise</p>
    <p>Environmental Variations</p>
    <p>What happens if we change voltage and temperature?</p>
    <p>Measurement noise at 125C (baseline at 20C) = 3.5 bits</p>
    <p>Measurement noise with 10% voltage variation = 4 bits</p>
    <p>Even with environmental variation, we can still distinguish two different</p>
    <p>PUFs</p>
  </div>
  <div class="page">
    <p>Reliable PUFs</p>
    <p>PUF n</p>
    <p>Challenge</p>
    <p>PUFs can be made more secure and reliable by adding extra control logic</p>
    <p>c</p>
    <p>Response</p>
    <p>k</p>
    <p>One-Way Hash</p>
    <p>Function</p>
    <p>New Response</p>
    <p>Hash function (SHA-1,MD5) precludes PUF model-building attacks since, to obtain PUF output, adversary has to invert a one-way function</p>
    <p>Syndrome BCH</p>
    <p>Encoding n - k</p>
    <p>Error Correcting Code (ECC) can eliminate the measurement noise without compromising security</p>
    <p>BCH Decoding</p>
    <p>Syndrome</p>
    <p>For calibrationFor Re-generation</p>
  </div>
  <div class="page">
    <p>Architecture Overview</p>
  </div>
  <div class="page">
    <p>Authentication</p>
    <p>The processor identifies security kernel by computing the kernels hash (on the l.enter.aegis instruction)  Similar to ideas in TCG TPM and Microsoft NGSCB  Security kernel identifies application programs</p>
    <p>H(SKernel) is used to produce a unique key for security kernel from a PUF response (l.puf.secret instruction)  Security kernel provides a unique key for each application</p>
    <p>Message Authentication Code (MAC) A server can authenticate the processor,</p>
    <p>the security kernel, and the application</p>
    <p>Application (DistComp)</p>
    <p>Security Kernel H(SKernel)</p>
    <p>H(App)</p>
  </div>
  <div class="page">
    <p>Protecting Program State</p>
    <p>Memory Encryption [MICRO36][Yang 03]  Counter-mode encryption</p>
    <p>Integrity Verification [HPCA03,MICRO36,IEEE S&amp;P 05]  Hash trees</p>
    <p>Processor External Memory</p>
    <p>write</p>
    <p>read</p>
    <p>INTEGRITY VERIFICATIO</p>
    <p>N</p>
    <p>ENCRYPT / DECRYPT</p>
    <p>On-chip registers and caches  Security kernel handles context switches and permission checks in MMU</p>
  </div>
  <div class="page">
    <p>A Simple Protection Model</p>
    <p>How should we apply the authentication and protection mechanisms?</p>
    <p>What to protect?  All instructions and data</p>
    <p>Both integrity and privacy</p>
    <p>What to trust?  The entire program code</p>
    <p>Any part of the code can read/write protected data</p>
    <p>Program Code (Instructions)</p>
    <p>Initialized Data (.rodata, .bss)</p>
    <p>Uninitialized Data (stack, heap)</p>
    <p>Memory Space</p>
    <p>Encrypted &amp;</p>
    <p>Integrity Verified</p>
    <p>Hash</p>
    <p>Program Identity</p>
  </div>
  <div class="page">
    <p>What Is Wrong?</p>
    <p>Large Trusted Code Base  Difficult to verify to be bug-free</p>
    <p>How can we trust shared libraries?</p>
    <p>Applications/functions have varying security requirements  Do all code and data need privacy?  Do I/O functions need to be protected?  Unnecessary performance and power overheads</p>
    <p>Architecture should provide flexibility so that software can choose the minimum required trust and protection</p>
  </div>
  <div class="page">
    <p>Distributed Computation Example</p>
    <p>Obtaining a secret key and computing a MAC  Need both privacy and</p>
    <p>integrity</p>
    <p>Computing the result  Only need integrity</p>
    <p>Receiving the input and sending the result (I/O)  No need for protection  No need to be trusted</p>
    <p>DistComp() {</p>
    <p>x = Receive();</p>
    <p>result = Func(x);</p>
    <p>key = get_puf_secret(); mac = MAC(x,result,key);</p>
    <p>Send(result,mac);</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>AEGIS Memory Protection</p>
    <p>Architecture provides five different memory regions  Applications choose how to use</p>
    <p>Static (read-only)  Integrity verified</p>
    <p>Integrity verified &amp; encrypted</p>
    <p>Dynamic (read-write)  Integrity verified  Integrity verified &amp; encrypted</p>
    <p>Unprotected</p>
    <p>Only authenticate code in the verified regions</p>
    <p>Memory Space</p>
    <p>Static Verified</p>
    <p>Dynamic Encrypted</p>
    <p>Dynamic Verified</p>
    <p>Static Encrypted</p>
    <p>Unprotected</p>
    <p>Unprotected Receive(), Send()</p>
    <p>Receive(), Send() data</p>
    <p>Func(), MAC()</p>
    <p>Func() data</p>
    <p>MAC() data</p>
  </div>
  <div class="page">
    <p>Suspended Secure Processing (SSP)</p>
    <p>Two security levels within a process  Untrusted code such as</p>
    <p>Receive() and Send() should have less privilege</p>
    <p>Architecture ensures that SSP mode cannot tamper with secure processing  No permission for</p>
    <p>protected memory  Only resume secure</p>
    <p>processing at a specific point</p>
    <p>STD</p>
    <p>TE/PTR</p>
    <p>SSP</p>
    <p>Start-up</p>
    <p>Secure Modes</p>
    <p>Insecure (untrusted) Modes</p>
    <p>Compute Hash</p>
    <p>Suspend</p>
    <p>Resume</p>
  </div>
  <div class="page">
    <p>Implementation &amp; Evaluation</p>
  </div>
  <div class="page">
    <p>Implementation</p>
    <p>Fully-functional system on an FPGA board  AEGIS (Virtex2 FPGA), Memory (256MB SDRAM), I/O (RS-232)  Based on openRISC 1200 (a simple 4-stage pipelined RISC)  AEGIS instructions are implemented as special traps</p>
    <p>Processor (FPGA)</p>
    <p>External Memory</p>
    <p>RS-232</p>
  </div>
  <div class="page">
    <p>Area Estimate</p>
    <p>Synopsys DC with TSMC 0.18u lib</p>
    <p>New instructions and PUF add 30K gates, 2KB mem (1.12x larger)</p>
    <p>Off-chip protection adds 200K gates, 20KB memory (1.9x larger total)</p>
    <p>The area can be further optimized</p>
    <p>Core</p>
    <p>I-Cache (32KB)</p>
    <p>D-Cache (32KB)</p>
    <p>I/O (UART, SDRAM ctrl, debug unit) 0.258mm2</p>
    <p>IV Unit (5 SHA-1)</p>
    <p>Encryption Unit (3 AES) 0.864mm2</p>
    <p>Cache (16KB)</p>
    <p>Cache (4KB) 0.504mm2</p>
    <p>Code ROM (11KB)</p>
    <p>Scratch Pad (2KB)</p>
    <p>PUF 0.027mm2</p>
  </div>
  <div class="page">
    <p>Performance Slowdown</p>
    <p>Performance overhead comes from off-chip protections</p>
    <p>Synthetic benchmark  Reads 4MB array with a</p>
    <p>varying stride</p>
    <p>Measures the slowdown for a varying cache miss-rate</p>
    <p>Slowdown is reasonable for realistic miss-rates  Less than 20% for integrity</p>
    <p>5-10% additional for encryption</p>
    <p>D-Cache miss-rate</p>
    <p>Slowdown (%)</p>
    <p>Integrity Integrity +</p>
    <p>Privacy</p>
  </div>
  <div class="page">
    <p>EEMBC/SPEC Performance</p>
    <p>5 EEMBC kernels and 1 SPEC benchmark</p>
    <p>EEMBC kernels have negligible slowdown  Low cache miss-rate</p>
    <p>Only ran 1 iteration</p>
    <p>SPEC twolf also has reasonable slowdown</p>
    <p>Benchmark Slowdown (%)</p>
    <p>Integrity Integrity +</p>
    <p>Privacy</p>
    <p>routelookup 0.0 0.3</p>
    <p>ospf 0.2 3.3</p>
    <p>autocor 0.1 1.6</p>
    <p>conven 0.1 1.3</p>
    <p>fbital 0.0 0.1</p>
    <p>twolf (SPEC) 7.1 15.5</p>
  </div>
  <div class="page">
    <p>Related Projects</p>
    <p>XOM (eXecution Only Memory)  Stated goal: Protect integrity and privacy of code and data</p>
    <p>Operating system is completely untrusted</p>
    <p>Memory integrity checking does not prevent replay attacks</p>
    <p>Privacy enforced for all code and data</p>
    <p>TCG TPM / Microsoft NGSCB / ARM TrustZone  Protects from software attacks</p>
    <p>Off-chip memory integrity and privacy are assumed</p>
    <p>AEGIS provides higher security with smaller Trusted Computing Base (TCB)</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>Physical attacks are becoming more prevalent  Untrusted owners, physically exposed devices  Requires secure hardware platform to trust remote</p>
    <p>computation</p>
    <p>The trusted computing base should be small to be secure and cheap  Hardware: single-chip secure processor</p>
    <p>Physical random functions  Memory protection mechanisms</p>
    <p>Software: suspended secure processing</p>
    <p>Initial overheads of the AEGIS single-chip secure processor is promising</p>
  </div>
  <div class="page">
    <p>Questions?</p>
    <p>More information on www.csg.csail.mit.edu</p>
  </div>
</Presentation>
