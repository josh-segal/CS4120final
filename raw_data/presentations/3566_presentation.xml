<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Site Isolation: Process Separation for Web Sites within the Browser</p>
    <p>Charlie Reis, Alex Moshchuk, Nasko Oskov Google</p>
  </div>
  <div class="page">
    <p>Protecting Web Sites against Strong Attackers</p>
    <p>Rendering engine vulnerabilities are common  Spectre / transient execution attacks work in the browser</p>
    <p>Shipped Site Isolation to all Chrome desktop users as mitigation  Overcame challenges beyond prior research browsers  Practical to deploy: compatibility, performance  Some limitations, but offers the best path to protection</p>
  </div>
  <div class="page">
    <p>Multi-Process Web Browsers</p>
    <p>Browser Process</p>
    <p>Renderer Process</p>
    <p>evil.com</p>
    <p>Sandbox</p>
    <p>evil.com</p>
    <p>evil.com</p>
    <p>youtube.com</p>
  </div>
  <div class="page">
    <p>Browser Process</p>
    <p>Renderer Process</p>
    <p>evil.com</p>
    <p>Sandbox</p>
    <p>evil.com</p>
    <p>youtube.com</p>
  </div>
  <div class="page">
    <p>&lt;img&gt;</p>
    <p>Renderer data</p>
    <p>&lt;iframe&gt; Other pages</p>
    <p>Renderer Process</p>
  </div>
  <div class="page">
    <p>Site Isolation</p>
  </div>
  <div class="page">
    <p>Site Isolation Architecture Cross-Origin Read Blocking (CORB)Site-Dedicated Processes</p>
    <p>foo.com</p>
    <p>foo.com Cross-site images, scripts</p>
    <p>Cross-site data</p>
    <p>Browser Process</p>
    <p>Renderer Process: evil.com</p>
    <p>evil.com</p>
    <p>youtube. com</p>
    <p>Renderer Process: youtube.com</p>
  </div>
  <div class="page">
    <p>Out-of-process iframes  Challenging to support web platform</p>
    <p>Secure compositing  Frame proxies  State replication  Many affected features</p>
    <p>(e.g., find-in-page)</p>
    <p>Browser Process</p>
    <p>Renderer Process: evil.com</p>
    <p>evil.com</p>
    <p>youtube. com</p>
    <p>Renderer Process: youtube.com</p>
  </div>
  <div class="page">
    <p>Cross-Origin Read Blocking  Must allow subresources</p>
    <p>Want to protect sensitive data (HTML, XML, JSON)</p>
    <p>Mislabeled Content-Types  Custom sniffing</p>
    <p>foo.com</p>
    <p>foo.com Cross-site images, scripts</p>
    <p>Cross-site data</p>
    <p>&lt;!-- This is JS. --&gt; function a() {...}</p>
    <p>Content-Type: text/html</p>
    <p>Must allow responses like:</p>
    <p>&lt;img src= &quot;bar.com/image.jpg&quot;&gt;</p>
    <p>&lt;img src= &quot;bar.com/secret.html&quot;&gt;</p>
  </div>
  <div class="page">
    <p>Enforcements  Catch malicious IPC messages</p>
    <p>Limit access to site data  Terminate misbehaving processes</p>
    <p>Matters for renderer exploits</p>
    <p>Browser Process</p>
    <p>Web Renderer</p>
    <p>evil.com</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
  </div>
  <div class="page">
    <p>Mitigating Renderer Exploits  Renderer vulnerabilities matter in practice</p>
    <p>94 UXSS-like bugs in 2014-2018</p>
    <p>Web developer practices now robust to renderer exploits:  Authentication  Confidential data in HTML/XML/JSON  Cross-Origin Messaging  Anti-Clickjacking  Use of storage and permissions</p>
  </div>
  <div class="page">
    <p>Transient Execution Attacks: Mitigation Strategies  1. Remove precise timers (e.g., SharedArrayBuffers)</p>
    <p>Not effective: Coarse timers can be amplified  Harmful to Web Platform</p>
    <p>?  3. Site Isolation</p>
    <p>Put data worth stealing out of reach  Effective for same-process variants  Combine with OS/HW mitigations for cross-process</p>
    <p>2. Compiler/Runtime mitigations  Not effective: Can't handle all variants</p>
  </div>
  <div class="page">
    <p>Addressing Limitations  Sites vs Origins</p>
    <p>https://google.com vs https://mail.google.com:443 (due to document.domain)  Opt-in origin isolation</p>
    <p>Many data types are not yet protected  Opt-in header, more CORB-protected types, SameSite cookie defaults</p>
    <p>Cross-process transient execution attacks (e.g., MDS)  Combine with OS/HW mitigations</p>
    <p>Not yet deployed on mobile devices  Preparing to isolate a subset of sites on Android</p>
  </div>
  <div class="page">
    <p>Practical to Deploy  Performance Optimizations</p>
    <p>Reduced potential process count and total memory overhead  Reduced latency for navigations and input</p>
  </div>
  <div class="page">
    <p>Conclusion  Transient execution attacks change the web threat model</p>
    <p>Site Isolation offers best path to protection  Don't leak data to renderer exploits or Spectre attacks  Practical to deploy to all Chrome desktop users  Need to push further to protect more types of data</p>
    <p>Other systems may want to revisit their architectures  Not safe to run untrustworthy code in same process as sensitive data</p>
  </div>
</Presentation>
