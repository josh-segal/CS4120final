<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Gulfstream</p>
    <p>Salvatore Guarnieri University of Washington</p>
    <p>Ben Livshits Microso3 Research</p>
    <p>Staged Sta4c Analysis for Streaming JavaScript Applica4ons</p>
  </div>
  <div class="page">
    <p>Third Party Server</p>
    <p>Web applica4on</p>
    <p>widget.js</p>
    <p>Web page</p>
  </div>
  <div class="page">
    <p>Safe Code Inclusion In JavaScript</p>
    <p>Run8me Enforcement</p>
    <p>Conscript [Oakland 10]  BrowserShield [OSDI 06]  Caja</p>
    <p>Sta8c Analysis</p>
    <p>Gatekeeper [USENIX Sec 09]  Staged Informa4on flow for</p>
    <p>JavaScript [PLDI 09]</p>
    <p>Whole program analysis approaches require the en4re program</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>JavaScript programs are streaming</p>
  </div>
  <div class="page">
    <p>&lt;HTML&gt;! &lt;HEAD&gt;! &lt;SCRIPT&gt;! function foo(){...}! var f = foo;! &lt;/SCRIPT&gt;! &lt;SCRIPT&gt;! function bar(){...}! if (...) f = bar;! &lt;/SCRIPT&gt;! &lt;/HEAD&gt;! &lt;BODY onclick=&quot;f();&quot;&gt; ...&lt;/BODY&gt;! &lt;/HTML&gt;!</p>
    <p>Script Crea8on</p>
    <p>What does f refer to?</p>
  </div>
  <div class="page">
    <p>Incremental Loading in Facebook</p>
    <p>K B</p>
    <p>Profile</p>
    <p>Inbox</p>
    <p>Friends</p>
    <p>Home 71%</p>
  </div>
  <div class="page">
    <p>Gulfstream In Ac8on</p>
    <p>Offline Online</p>
  </div>
  <div class="page">
    <p>Gulfstream In Ac8on</p>
    <p>Offline Online</p>
  </div>
  <div class="page">
    <p>Gulfstream In Ac8on</p>
    <p>Offline Online</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Mo4va4on  Implementa4on  Evalua4on  Conclusions</p>
  </div>
  <div class="page">
    <p>Queries</p>
    <p>We want to determine something about the program</p>
    <p>Example  What does f() refer to  Detect alert calls  Does this program use setTimeout</p>
  </div>
  <div class="page">
    <p>Points-To Analysis</p>
    <p>Provides deep program understanding</p>
    <p>Can be used to construct call graphs</p>
    <p>Is the founda4on of further analyses</p>
    <p>Answers a simple ques4on: What heap loca4ons does variable x point to</p>
  </div>
  <div class="page">
    <p>Points-To Example</p>
    <p>!&quot;#&quot;$%&amp;'()* +,-&amp;%.+</p>
    <p>/&amp;&quot;(0* &amp;.(&amp;.+.1)&quot;)',1</p>
    <p>/:;&lt;$=8&gt;?@</p>
    <p>A&quot;13B%,3.3* '5(6.5.1)&quot;)',1</p>
    <p>/?=&gt;C&gt;&gt;D&gt;8</p>
    <p>EFFB2&quot;+.3*+,6#.&amp;</p>
    <p>Figure 3: GULFSTREAM architecture and a comparison with the Gatekeeper project.</p>
    <p>that in turn update the Web site. If the updates to the Web sites JavaScript are small, it would make sense that an staged analysis would perform better than a full program analysis. We looked at range of update sizes to identify when an staged analysis is faster than recomputing the full program analysis. Full program analysis might be faster because there is book keeping and graph transfer time in the staged analysis that is not present in the full program analysis. Section 5 talks about advantages of staged analysis in detail. In general, we find it to be advantageous in most settings, especially on slower mobile connections with slower mobile hardware.</p>
    <p>Soundness. In this paper we do not explicitly focus on the issue of analysis soundness. Soundness would be especially important for a tool designed to look for security vulnerabilities, for instance, or applications of static analysis to runtime optimizations. Generally, sound static analysis of JavaScript only has been shown possible for subsets of the language. If the program under analysis belongs to a particular language subset, such as JavaScriptSAFE advocated by Guarnieri et al. [14], the analysis results are sound. However, even if it does not, analysis results can still be used for bug finding, without necessarily guaranteeing that all the bugs will be found. In the remainder of the paper, we ignore the issues of soundness and subsetting, as we consider them to be orthogonal to staged analysis challenges.</p>
    <p>Client analyses as queries. In addition to the pointer analysis, we also show how GULFSTREAM can be used to resolve two typical queries that take advantage of points-to analysis results. The first query looks for calls to alert, which might be an undesirable annoyance to the user and, as such, need to be prevented in third-party code. The second looks for calls to setInterval1 with non-function parameters.</p>
    <p>The static analysis process in GULFSTREAM proceeds in stages, as is typical for a declarative style of program</p>
    <p>(a) Input JavaScript program.</p>
    <p>!&quot; !# !$ !% !&amp;</p>
    <p>' () * +,-.#</p>
    <p>/00</p>
    <p>+,-.&quot; +,-.%</p>
    <p>(b) Resulting graph.</p>
    <p>Figure 4: Example of a program with a function call.</p>
    <p>analysis. On a high level, the program is first represented as a database of facts. Next, a solver is used to derive new information about the program on the basis of initial facts and inference rules.</p>
    <p>In GULFSTREAM, the first analysis stage is normalizing the program representation. Based on this normalized representation, we built two analyses. The first is the declarative, bddbddb-based points-to analysis described in Gatekeeper [14]. The second is a hand-coded implementation of points-to information using graphs as described in the rest of this section.</p>
    <p>The graph-based representation also produces graphs that can efficiently compressed and transferred to the browser from the server. To our surprise, we find that at least for small programs, the graph-based representation performs at least as well as the bddbddb-based approach often advocated in the past; bddbddb-based analysis, however, performs faster on larger code bases, as discussed in Section 5.4.</p>
    <p>!&quot;#&quot;$%&amp;'()* +,-&amp;%.+</p>
    <p>/&amp;&quot;(0* &amp;.(&amp;.+.1)&quot;)',1</p>
    <p>/:;&lt;$=8&gt;?@</p>
    <p>A&quot;13B%,3.3* '5(6.5.1)&quot;)',1</p>
    <p>/?=&gt;C&gt;&gt;D&gt;8</p>
    <p>EFFB2&quot;+.3*+,6#.&amp;</p>
    <p>Figure 3: GULFSTREAM architecture and a comparison with the Gatekeeper project.</p>
    <p>that in turn update the Web site. If the updates to the Web sites JavaScript are small, it would make sense that an staged analysis would perform better than a full program analysis. We looked at range of update sizes to identify when an staged analysis is faster than recomputing the full program analysis. Full program analysis might be faster because there is book keeping and graph transfer time in the staged analysis that is not present in the full program analysis. Section 5 talks about advantages of staged analysis in detail. In general, we find it to be advantageous in most settings, especially on slower mobile connections with slower mobile hardware.</p>
    <p>Soundness. In this paper we do not explicitly focus on the issue of analysis soundness. Soundness would be especially important for a tool designed to look for security vulnerabilities, for instance, or applications of static analysis to runtime optimizations. Generally, sound static analysis of JavaScript only has been shown possible for subsets of the language. If the program under analysis belongs to a particular language subset, such as JavaScriptSAFE advocated by Guarnieri et al. [14], the analysis results are sound. However, even if it does not, analysis results can still be used for bug finding, without necessarily guaranteeing that all the bugs will be found. In the remainder of the paper, we ignore the issues of soundness and subsetting, as we consider them to be orthogonal to staged analysis challenges.</p>
    <p>Client analyses as queries. In addition to the pointer analysis, we also show how GULFSTREAM can be used to resolve two typical queries that take advantage of points-to analysis results. The first query looks for calls to alert, which might be an undesirable annoyance to the user and, as such, need to be prevented in third-party code. The second looks for calls to setInterval1 with non-function parameters.</p>
    <p>The static analysis process in GULFSTREAM proceeds in stages, as is typical for a declarative style of program</p>
    <p>(a) Input JavaScript program.</p>
    <p>!&quot; !# !$ !% !&amp;</p>
    <p>' () * +,-.#</p>
    <p>/00</p>
    <p>+,-.&quot; +,-.%</p>
    <p>(b) Resulting graph.</p>
    <p>Figure 4: Example of a program with a function call.</p>
    <p>analysis. On a high level, the program is first represented as a database of facts. Next, a solver is used to derive new information about the program on the basis of initial facts and inference rules.</p>
    <p>In GULFSTREAM, the first analysis stage is normalizing the program representation. Based on this normalized representation, we built two analyses. The first is the declarative, bddbddb-based points-to analysis described in Gatekeeper [14]. The second is a hand-coded implementation of points-to information using graphs as described in the rest of this section.</p>
    <p>The graph-based representation also produces graphs that can efficiently compressed and transferred to the browser from the server. To our surprise, we find that at least for small programs, the graph-based representation performs at least as well as the bddbddb-based approach often advocated in the past; bddbddb-based analysis, however, performs faster on larger code bases, as discussed in Section 5.4.</p>
  </div>
  <div class="page">
    <p>Implementa8on Strategies</p>
    <p>Datalog with bddbddb</p>
    <p>+ Fast for large programs</p>
    <p>+ Highly tuned - Large startup cost</p>
    <p>- Difficult to implement in the browser</p>
    <p>Used in Gatekeeper [USENIX Sec 09]</p>
    <p>Graph-based flow analysis</p>
    <p>+ Very small startup cost</p>
    <p>+ Customized to work with Gulfstream</p>
    <p>- Does not scale well</p>
  </div>
  <div class="page">
    <p>Implementa8on</p>
    <p>Normalize JavaScript  Turn program into a series of simple statements  Introduce temporaries as necessary</p>
    <p>Create flow graph  Use normalized program to generate flow constraints</p>
    <p>Serialize flow graph  Encode the flow-graph so online analysis can use it to update results</p>
  </div>
  <div class="page">
    <p>Implementa8on Con8nued</p>
    <p>Perform points-to analysis  Traverse flow graph to find all aliases  Follow flow through method boundaries  Generate points-to map for queries to use</p>
    <p>Queries  Use points-to data and flow graph to answer queries</p>
  </div>
  <div class="page">
    <p>Evalua8on</p>
    <p>Ques4on  Is Gulfstream faster than non-staged analysis</p>
    <p>Benchmarks  Synthe4cally generated  Scraped from Google code  Scraped from Facebook</p>
    <p>Simulate diverse environments  CPU speed and network proper4es  Cell phone, laptop, desktop, etc.</p>
  </div>
  <div class="page">
    <p>Se co n d s</p>
    <p>Total Page Size (KB)</p>
    <p>Gulfstream Full Analysis bddbddb</p>
    <p>Laptop Running Time Comparison</p>
    <p>Aner 30KB of updates, Gulfstream is no longer</p>
    <p>faster</p>
  </div>
  <div class="page">
    <p>Simulated Devices</p>
    <p>Low power mobile</p>
    <p>High power</p>
  </div>
  <div class="page">
    <p>Simulated Devices</p>
    <p>Low power mobile</p>
    <p>High power</p>
  </div>
  <div class="page">
    <p>Lessons Learned</p>
    <p>Slow devices benefit from Gulfstream</p>
    <p>A slow network can negate the benefits of the staged analysis</p>
    <p>Large page updates dont benefit from Gulfstream</p>
  </div>
  <div class="page">
    <p>Facebook Experiment</p>
    <p>Visit 4 pages  Home  Friends  Inbox  Profile</p>
    <p>Each page loads addi4onal JavaScript</p>
  </div>
  <div class="page">
    <p>Gulfstream Savings: Slow Devices</p>
    <p>Se co n d s</p>
    <p>profile</p>
    <p>inbox</p>
    <p>friends</p>
    <p>home</p>
  </div>
  <div class="page">
    <p>Gulfstream Savings: Fast Devices</p>
    <p>Se co n d s</p>
    <p>profile</p>
    <p>inbox</p>
    <p>friends</p>
    <p>home</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Gulfstream, staged analysis for JavaScript</p>
    <p>Staged analysis  Offline on the server  Online in the browser</p>
    <p>Wide range of experiments  For small updates, Gulfstream is faster  Devices with slow CPU benefit most</p>
  </div>
  <div class="page">
    <p>The End</p>
    <p>Contact: salvatore.guarnieri@gmail.com</p>
  </div>
</Presentation>
