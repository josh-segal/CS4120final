<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>DISTROY: Detec-ng IC Trojans with Compressive Measurements</p>
    <p>Youngjune Gwon, H. T. Kung, and Dario Vlah Harvard University</p>
    <p>August 9, 2011</p>
  </div>
  <div class="page">
    <p>Understanding Modern IC Manufacturing Cycle</p>
    <p>Fabless design now mainstream  IC designed in-house  Fabrica-on outsourced to foundry</p>
    <p>Externali-es introduced  Fab: infrastructural, tes-ng, calibra-on related addi-ves  Design: third-party IP and tools, standard cells, models</p>
    <p>Mul-ple par-es get involved  Difficult to guarantee returned IC genuinely matches original design</p>
    <p>IP, tools, cells, models</p>
    <p>Infrastructural, process-specific</p>
    <p>addi6ves Netlist/physical layout</p>
    <p>Does returned silicon reflect genuine design?</p>
  </div>
  <div class="page">
    <p>IC Trojan and Detec-on  What is IC Trojan?</p>
    <p>Malicious circuitry inserted on purpose by adversary  Not a bug or accidental modifica-on</p>
    <p>Inserted during design and fab steps  Dormant un-l triggered to get ac-vated</p>
    <p>BeZer catch while dormant to avoid consequences  Difficult to catch with small background power usage at dormant</p>
    <p>Process varia-on can be larger  Consequences</p>
    <p>Malfunc-on: performs incorrect opera-ons, fails normal tasks  Breach of security and privacy: leaks sensi-ve/cri-cal informa-on</p>
    <p>Detec-ng Trojans via power or current side-channel measurement analysis</p>
    <p>Want to detect any abnormal readings  Depends on circuit inputs that drive IC to lowest power states so</p>
    <p>extra leakage above expected devia-on can be detected</p>
  </div>
  <div class="page">
    <p>Side-channel Approach  Run sufficiently many test vectors for side-channel measurement</p>
    <p>Increase chances to include revealing test vectors  Use reference measurement values</p>
    <p>Process-specific Trojan-free mean and devia-on for all test vectors</p>
    <p>Circuit Under Test</p>
    <p>(CUT) vN ... v2 v1 N test vectors</p>
    <p>xN ... x2 x1 N corresponding measurements</p>
    <p>Compare Result</p>
    <p>Tool</p>
    <p>DB Probability distribu7on DB of gate-level characteris7cs specific to fab process Done offline</p>
    <p>g1 g2 ... gN N reference (golden) measurements</p>
    <p>vN ... v2 v1</p>
  </div>
  <div class="page">
    <p>Challenges of Side-channel Approach</p>
    <p>Trojan background power consump-on too small  No-ceable only by revealing test vectors</p>
    <p>But how to find revealing test vectors?  No prior informa-on  How many is sufficient?</p>
    <p>Chip I/O is boZleneck  Infeasible to export large number of measurements for off-chip</p>
    <p>analysis  Intelligence of Trojan designer makes detec-on more</p>
    <p>difficult  Know vs. not-know the IC design  If knowledge enables to offset amount of Trojan power leakage,</p>
    <p>detec-on may be impossible  Assuring detec-on reliability</p>
    <p>How to reduce false posi-ve and false nega-ve rates?</p>
  </div>
  <div class="page">
    <p>Compressive Sensing as Solu-on</p>
    <p>Compressive sensing  Signal processing technique for recovering data with number of</p>
    <p>measurements propor-onal to sparsity of data (not size)  Uses simple encoding</p>
    <p>Why is compressive sensing applicable?  Revealing test vectors are sparse  Can reduce chip output requirement while capturing significant</p>
    <p>power leakage due to Trojans</p>
  </div>
  <div class="page">
    <p>DISTROY  Compressive Sensing Encoding</p>
    <p>Circuit Under Test</p>
    <p>(CUT) N test vectors</p>
    <p>vN ... v2 v1</p>
    <p>x = [x1 x2 ... xN]T is buffered test vector output  DISTROY encoding: y =  x</p>
    <p>Compresses x (size N) in y (M RLCs) using MxN  M  N  : random measurement matrix</p>
    <p>x1 x2</p>
    <p>x3</p>
    <p>xN</p>
    <p>i,1 i,2</p>
    <p>i,3</p>
    <p>i,N</p>
    <p>i-th row of  = [ i,1 i,2 ... i,N ]</p>
    <p>y M compressive measurements</p>
    <p>Chip boundary with DISTROY</p>
  </div>
  <div class="page">
    <p>DISTROY  Compressive Sensing Decoding</p>
    <p>Compressive sensing uses l1-norm minimiza6on decoding  d is sparse, thus recover d = x  g directly</p>
    <p>Of course, x can be recovered from d  g = corresponding expected output values for Trojan-free IC</p>
    <p>y</p>
    <p>min d!&quot;N</p>
    <p>d l1 subject to y=#</p>
    <p>g1+d1 g2 +d2 !</p>
    <p>gN +dN</p>
    <p>$</p>
    <p>%</p>
    <p>&amp; &amp; &amp; &amp;</p>
    <p>'</p>
    <p>(</p>
    <p>) ) ) )g</p>
    <p>Reference test vector output</p>
    <p>d</p>
  </div>
  <div class="page">
    <p>Process varia-on makes leakage current vary  : average leakage current contributed by Trojan gates  Small  makes detec-on more difficult  large overlap under curves</p>
    <p>Detec-on threshold   Tradeoff between false posi-ve and nega-ve rates: can op-mize only</p>
    <p>one of them (not both)  Can we do beZer?</p>
    <p>!&quot;#$#%&quot;&amp; '())&quot;*+</p>
    <p>, -!./0</p>
    <p>, 1234/0</p>
    <p>Analysis of Threshold Detec-on</p>
    <p>Reduce false positives Reduce false negatives</p>
    <p>Probability distribution</p>
  </div>
  <div class="page">
    <p>Enhance Detec-on with Tes-ng Mul-ple Chips</p>
    <p>Group mul-ple chips by fab process  To reduce false posi-ves</p>
    <p>Require all P &gt; 1 chips meet detec-on criteria  To reduce false nega-ves</p>
    <p>Require at least P out of Q &gt; P chips meet detec-on criteria  For fixed P, larger Q yields fewer false nega-ves  we can</p>
    <p>achieve both false posi&gt;ve and nega&gt;ve rates reasonably good</p>
  </div>
  <div class="page">
    <p>Evalua-on</p>
    <p>Benchmark circuit has 100 NAND gates  Built using ISCAS-85 c17</p>
    <p>Wrote logic simula-on in C  Pre-ran all possible test vectors and cached results</p>
    <p>Trojan circuits  Placed 1 to 5 NAND gates at random loca-ons  trojan-1/2/3/4/5!</p>
    <p>trojan-1 yields smallest leakage, thus most difficult to detect  Metrics</p>
    <p>Compression gain (N/M)  False posi-ve rate  False nega-ve rate</p>
  </div>
  <div class="page">
    <p>Expected Outcome</p>
    <p>Compressive sensing advantage  achieves same margin of error with reduced number of measurements</p>
    <p>Without compressive sensing: N measurements needed  With compressive sensing: N/k measurements should suffice</p>
    <p>Compressive sensing tradeoff  reduced measurements for increase in false detec-on rates</p>
    <p>How would false detec-on rates grow?</p>
  </div>
  <div class="page">
    <p>Detec-on Performance: Single Chip Tes-ng</p>
    <p>M (number of measurements)</p>
    <p>R at</p>
    <p>e</p>
    <p>(a) Trojan size = 1 gate</p>
    <p>False positive for N = 1000 random test vectors False negative for N = 1000 random test vectors</p>
    <p>M (number of measurements)</p>
    <p>R at</p>
    <p>e</p>
    <p>(b) Trojan size = 5 gates</p>
    <p>False positive for N=1000 random test vectors False negative for N=1000 random test vectors</p>
    <p>About 4:1 to 5:1 compression gain (for false rates &lt; 0.05)  Trojan size maZers</p>
    <p>False rates go up quickly aper reducing further from some M</p>
  </div>
  <div class="page">
    <p>Detec-on Performance: Mul-ple Chip Tes-ng</p>
    <p>P (# of chips fabricated under same process for testing)</p>
    <p>R at</p>
    <p>e</p>
    <p>False positive rate over P (Trojan size = 1 gate)</p>
    <p>Q (# of chips from which P=2 chips are chosen for testing)</p>
    <p>R at</p>
    <p>e</p>
    <p>False negative rate over Q (Trojan size = 1 gate)</p>
    <p>M=200, N=1000</p>
    <p>M=200, N=1000, P=2</p>
    <p>Tes-ng mul-ple chips reduce both false rates  We can address tradeoff with fixed P and adjustable Q</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>DISTROY unconven-onal new way of using compressive sensing</p>
    <p>Takes test vector output values as signal to compress  Substan-ally reduces chip output requirement related to</p>
    <p>detec-ng sta-s-cally rare events from large measurements</p>
    <p>Combined with tes-ng mul-ple chips from same fab process, we can detect Trojans reliably</p>
    <p>Despite inevitable tradeoff, we showed that both reasonably good false posi7ve and false nega7ve detec-on rates can be achieved</p>
    <p>Were implemen-ng DISTROY and plan to test against real chips with real Trojans</p>
  </div>
  <div class="page">
    <p>Extras</p>
  </div>
  <div class="page">
    <p>Mul--chip Tes-ng Example</p>
    <p>Consider 10-chip test example: Q = 10  Fix P first</p>
    <p>P = 2 happens to meet required false posi-ve rate  Trojan-free IC (lep curve)</p>
    <p>Probability at least P out of Q (2 out of 10) chips power higher than  is very small  false posi-ve rate is small</p>
    <p>Trojan-containing IC (right curve)  Probability that any 9 of 10 chips all exhibit power lower than  is very</p>
    <p>small  false nega-ve rate is also small</p>
    <p>!&quot;#$#%&quot;&amp; '())&quot;*+</p>
    <p>, -!./0</p>
    <p>, 1234/0</p>
    <p>Reduce false positives Reduce false negatives</p>
    <p>Probability distribution</p>
  </div>
</Presentation>
