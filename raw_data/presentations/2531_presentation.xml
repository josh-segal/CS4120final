<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Eiger: Stronger Semantics for ! Low-Latency !</p>
    <p>Geo-Replicated ! Storage!</p>
    <p>Wyatt Lloyd*! &quot; Michael J. Freedman*! &quot; &quot; Michael Kaminsky! &quot; &quot; &quot; David G. Andersen!</p>
    <p>*Princeton, Intel Labs, CMU!</p>
  </div>
  <div class="page">
    <p>Geo-Replicated Storage !</p>
    <p>is the backend of massive websites !</p>
    <p>FriendO f!</p>
    <p>FriendO f!</p>
    <p>Like!</p>
    <p>Halting is Undecidable!</p>
  </div>
  <div class="page">
    <p>Storage Dimensions!</p>
    <p>A-F !</p>
    <p>G-L!</p>
    <p>M-R!</p>
    <p>S-Z!</p>
    <p>Shard Data Across Many Nodes !</p>
    <p>Like!</p>
    <p>Halting is Undecidable!</p>
    <p>FriendO f!</p>
    <p>FriendO f!</p>
  </div>
  <div class="page">
    <p>Storage Dimensions!</p>
    <p>A-F !</p>
    <p>G-L!</p>
    <p>M-R!</p>
    <p>S-Z!</p>
    <p>Shard Data Across Many Nodes !</p>
    <p>A-F!</p>
    <p>G-L!</p>
    <p>M-R !</p>
    <p>S-Z!</p>
    <p>A-F!</p>
    <p>G-L!</p>
    <p>M-R!</p>
    <p>S-Z!</p>
    <p>Data Geo-Replicated In Multiple Datacenters!</p>
  </div>
  <div class="page">
    <p>Sharded, Geo-Replicated Storage !</p>
    <p>A-F !</p>
    <p>G-L!</p>
    <p>M-R!</p>
    <p>S-Z!</p>
    <p>A-F!</p>
    <p>G-L!</p>
    <p>M-R !</p>
    <p>S-Z!</p>
    <p>A-F!</p>
    <p>G-L!</p>
    <p>M-R!</p>
    <p>S-Z!</p>
  </div>
  <div class="page">
    <p>Low Latency!  Improves user experience !  Correlates with revenue!</p>
    <p>Strong Consistency!  Obey user expectations!  Easier for programmers!</p>
    <p>Fundamentally in Conflict! [LiptonSandberg88, AttiyaWelch94] !</p>
    <p>Strong Consistency or Low Latency !</p>
  </div>
  <div class="page">
    <p>Strong Consistency or Low Latency!</p>
    <p>Megastore [SIGMOD 08]! !</p>
    <p>Spanner [OSDI 12] !.! !</p>
    <p>Gemini [OSDI 12] !.! !</p>
    <p>Walter [SOSP 11] !.!</p>
    <p>Dynamo [SOSP 07]!</p>
    <p>&quot; COPS [SOSP 11]!</p>
    <p>&quot; Eiger! Obey user expectations! Easier for programmers !</p>
    <p>Causal+ Consistency ! Rich Data Model! Read-only Txns! Write-only Txns! !</p>
  </div>
  <div class="page">
    <p>Eiger Ensures Low Latency!</p>
    <p>A-F !</p>
    <p>G-L!</p>
    <p>M-R!</p>
    <p>S-Z!</p>
    <p>A-F!</p>
    <p>G-L!</p>
    <p>M-R !</p>
    <p>S-Z!</p>
    <p>A-F!</p>
    <p>G-L!</p>
    <p>M-R!</p>
    <p>S-Z!</p>
    <p>Keep All Ops Local!</p>
  </div>
  <div class="page">
    <p>Causal+ Consistency Across DCs!  If A happens before B!  Everyone sees A before B!</p>
    <p>Obeys user! expectations!</p>
    <p>Simplifies! programming!</p>
    <p>New Job!!</p>
    <p>Friends ! Boss! Then!</p>
    <p>Then!</p>
    <p>Then!</p>
  </div>
  <div class="page">
    <p>Causal For Column Families!</p>
    <p>Operations update/read many columns !  Range query columns concurrent w/ deletes!  Counter columns!  See paper for details !</p>
    <p>Lovelace!</p>
    <p>Turing!</p>
    <p>Church! Lovelace! Turing!</p>
    <p>-! -! 1/1/54!</p>
    <p>Friends!</p>
    <p>Friends! Count!Profile!</p>
    <p>Age! Town!</p>
    <p>Key1!</p>
    <p>Key2!</p>
    <p>Val!</p>
    <p>Val!</p>
  </div>
  <div class="page">
    <p>Viewing Data Consistently Is Hard! Asynchronous requests + distributed data = ????? !</p>
    <p>A!</p>
    <p>B!</p>
    <p>C!</p>
    <p>Update A ! 2!</p>
    <p>Update B!3!</p>
    <p>Update C!4!</p>
    <p>??? !</p>
  </div>
  <div class="page">
    <p>Read-Only Transactions!  Logical time gives a global view of data store!  Clocks on all nodes, carried with all messages !</p>
    <p>Insight: Store is consistent at all logical times !</p>
    <p>Logical Time !</p>
    <p>A! 0! 2!</p>
    <p>B! 0! 3!</p>
    <p>C! 0! 5!</p>
    <p>A1! A2!</p>
    <p>B1! B2!</p>
    <p>C1! C2!</p>
  </div>
  <div class="page">
    <p>Read-Only Transactions!  Extract consistent up-to-date view of data!  Across many servers !</p>
    <p>Challenges!  Scalability!</p>
    <p>Decentralized algorithm!  Guaranteed low latency!</p>
    <p>At most 2 parallel rounds of local reads !  No locks, no blocking!</p>
    <p>High performance!  Normal case: 1 round of reads!</p>
  </div>
  <div class="page">
    <p>Read-Only Transactions!  Round 1: Optimistic parallel reads !  Calculate effective time !  Round 2: Parallel read_at_times!</p>
    <p>Logical Time !</p>
    <p>A! 0! 2!</p>
    <p>B! 0! 3!</p>
    <p>C! 0! 5!</p>
    <p>A1! A2!</p>
    <p>B1! B2!</p>
    <p>C1! C2!</p>
    <p>Distributed Storage!Client! 0! 1!</p>
    <p>A1!</p>
  </div>
  <div class="page">
    <p>Logical Time !</p>
    <p>A! 2!</p>
    <p>B! 3!</p>
    <p>C! 5!</p>
    <p>A2!</p>
    <p>B2!</p>
    <p>C2!</p>
    <p>Transaction Intuition!  Read-only transactions !  Read from a single logical time !</p>
    <p>Write-only transactions !  Appear at a single logical time !</p>
    <p>Bonus:! Works for</p>
    <p>Linearizability!</p>
    <p>A3!</p>
    <p>B3!</p>
    <p>C3!</p>
  </div>
  <div class="page">
    <p>Eiger Provides!  Low latency!  Rich data model!  Causal+ consistency !  Read-only transactions!  Write-only transactions! But what does all this cost?! Does it scale? !</p>
  </div>
  <div class="page">
    <p>Eiger Implementation!  Fork of open-source Cassandra!</p>
    <p>+5K lines of Java to Cassandras 75K !</p>
    <p>Code Available:!  https://github.com/wlloyd/eiger!</p>
  </div>
  <div class="page">
    <p>Evaluation!  Cost of stronger consistency &amp; semantics !  Vs. eventually-consistent Cassandra!  Overhead for real (Facebook) workload!  Overhead for state-space of workloads !</p>
    <p>Scalability!</p>
  </div>
  <div class="page">
    <p>A-F!</p>
    <p>G-L!</p>
    <p>M-R!</p>
    <p>S-Z!</p>
    <p>A-F!</p>
    <p>G-L!</p>
    <p>M-R!</p>
    <p>S-Z!</p>
    <p>Experimental Setup! Local Datacenter (Stanford) !</p>
    <p>Remote DC (UW)!</p>
  </div>
  <div class="page">
    <p>Facebook Workload Results!</p>
    <p>!! ! ! ! ! ! ! ! ! !</p>
  </div>
  <div class="page">
    <p>Eiger Scales !</p>
    <p>Facebook Workload !</p>
    <p>Scales out !</p>
  </div>
  <div class="page">
    <p>Improving Low-Latency Storage ! &quot; &quot; &quot; &quot; &quot; &quot; COPS &quot; &quot; ! Eiger!</p>
    <p>Data model &quot; &quot; Key-Value&quot; &quot; ! Column-Family!</p>
    <p>Read-only Txns &quot;&quot; Causal stores&quot; ! All stores!</p>
    <p>Write-only Txns &quot; None &quot; &quot; &quot; ! Yes!</p>
    <p>Performance &quot;&quot; &quot; Good &quot; &quot; &quot; ! Great!</p>
    <p>DC Failure&quot;&quot; &quot; &quot; Throughput &quot; ! Resilient! &quot; &quot; &quot; &quot; &quot; &quot; degradation!</p>
  </div>
  <div class="page">
    <p>Eiger!  Low-latency geo-replicated storage!  Causal+ for column families !  Read-only transactions!  Write-only transactions!</p>
    <p>Demonstrated in working system!  Competitive with eventual!  Scales to large clusters!  https://github.com/wlloyd/eiger!</p>
  </div>
</Presentation>
