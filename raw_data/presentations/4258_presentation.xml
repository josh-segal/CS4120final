<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Consistent Updates in Software-De!ned Networks</p>
    <p>Nate Foster Mark Reitblatt</p>
    <p>Cole Schlesinger Jennifer Rexford</p>
    <p>David Walker</p>
  </div>
  <div class="page">
    <p>Network Updates</p>
    <p>OpenFlow Switch</p>
    <p>OpenFlow Switch</p>
    <p>OpenFlow Switch</p>
    <p>OpenFlow Switch</p>
    <p>OpenFlow Switch</p>
    <p>OpenFlow Switch</p>
    <p>Network Updates  Routine maintenance  Unexpected failures  Traffic engineering  Updated ACL</p>
  </div>
  <div class="page">
    <p>Network Updates</p>
    <p>OpenFlow Switch</p>
    <p>OpenFlow Switch</p>
    <p>OpenFlow Switch</p>
    <p>OpenFlow Switch</p>
    <p>OpenFlow Switch</p>
    <p>OpenFlow Switch</p>
    <p>Desired Invariants  No lost packets  No broken connections  No forwarding loops  No security holes</p>
    <p>Network Updates  Routine maintenance  Unexpected failures  Traffic engineering  Updated ACL</p>
  </div>
  <div class="page">
    <p>At 12:47 AM PDT on April 21st, a network change was performed as part of our normal scaling activities...</p>
    <p>During the change, one of the steps is to shift traffic off of one of the redundant routers...</p>
    <p>The traffic shift was executed incorrectly and the traffic was routed onto the lower capacity redundant network.</p>
    <p>This led to a re-mirroring storm...</p>
    <p>During this re-mirroring storm, the volume of connection attempts was extremely high and nodes began to fail, resulting in more volumes left needing to re-mirror. This added more requests to the re-mirroring storm...</p>
    <p>The trigger for this event was a network configuration change.</p>
  </div>
  <div class="page">
    <p>At 12:47 AM PDT on April 21st, a network change was performed as part of our normal scaling activities...</p>
    <p>During the change, one of the steps is to shift traffic off of one of the redundant routers...</p>
    <p>The traffic shift was executed incorrectly and the traffic was routed onto the lower capacity redundant network.</p>
    <p>This led to a re-mirroring storm...</p>
    <p>During this re-mirroring storm, the volume of connection attempts was extremely high and nodes began to fail, resulting in more volumes left needing to re-mirror. This added more requests to the re-mirroring storm...</p>
    <p>The trigger for this event was a network configuration change.</p>
  </div>
  <div class="page">
    <p>Prior Work</p>
  </div>
  <div class="page">
    <p>Prior Work</p>
  </div>
  <div class="page">
    <p>Prior Work</p>
  </div>
  <div class="page">
    <p>Prior Work</p>
  </div>
  <div class="page">
    <p>Prior Work</p>
  </div>
  <div class="page">
    <p>Prior Work</p>
  </div>
  <div class="page">
    <p>Prior Work</p>
  </div>
  <div class="page">
    <p>Prior Work</p>
  </div>
  <div class="page">
    <p>Prior Work</p>
  </div>
  <div class="page">
    <p>Prior Work</p>
  </div>
  <div class="page">
    <p>Controller</p>
    <p>OpenFlow Switch</p>
    <p>OpenFlow Switch</p>
    <p>OpenFlow Switch</p>
    <p>Software Abstractions</p>
  </div>
  <div class="page">
    <p>Controller</p>
    <p>OpenFlow Switch</p>
    <p>OpenFlow Switch</p>
    <p>OpenFlow Switch</p>
    <p>Software Abstractions</p>
    <p>PL Abstractions</p>
    <p>By designing the right software abstractions, we can solve the network update problem once and for all!</p>
  </div>
  <div class="page">
    <p>Controller</p>
    <p>OpenFlow Switch</p>
    <p>OpenFlow Switch</p>
    <p>OpenFlow Switch</p>
    <p>Software Abstractions</p>
    <p>PL Abstractions</p>
    <p>D isco</p>
    <p>very</p>
    <p>M o n ito rin g</p>
    <p>R o u tin g</p>
    <p>By designing the right software abstractions, we can solve the network update problem once and for all!</p>
  </div>
  <div class="page">
    <p>OpenFlow Switch</p>
    <p>Example: Distributed Access Control</p>
    <p>Controller</p>
    <p>Application</p>
    <p>OpenFlow Switch</p>
    <p>OpenFlow Switch</p>
    <p>OpenFlow Switch</p>
    <p>F2</p>
    <p>F3</p>
    <p>Src Traffic Action Web Allow</p>
    <p>Non-web Drop Any Allow</p>
    <p>Security Policy</p>
    <p>F1</p>
    <p>I</p>
    <p>Traffic</p>
  </div>
  <div class="page">
    <p>OpenFlow Switch</p>
    <p>Example: Distributed Access Control</p>
    <p>Controller</p>
    <p>Application</p>
    <p>OpenFlow Switch</p>
    <p>OpenFlow Switch</p>
    <p>OpenFlow Switch</p>
    <p>F2</p>
    <p>F3</p>
    <p>Src Traffic Action Web Allow</p>
    <p>Non-web Drop Any Allow</p>
    <p>Security Policy</p>
    <p>Con&quot;guration A Process black-hat traffic on F1</p>
    <p>Process white-hat traffic on {F2,F3}</p>
    <p>F1</p>
    <p>I</p>
    <p>Traffic</p>
  </div>
  <div class="page">
    <p>OpenFlow Switch</p>
    <p>Example: Distributed Access Control</p>
    <p>Controller</p>
    <p>Application</p>
    <p>OpenFlow Switch</p>
    <p>OpenFlow Switch</p>
    <p>OpenFlow Switch</p>
    <p>F2</p>
    <p>F3</p>
    <p>Src Traffic Action Web Allow</p>
    <p>Non-web Drop Any Allow</p>
    <p>Security Policy</p>
    <p>Con&quot;guration A Process black-hat traffic on F1</p>
    <p>Process white-hat traffic on {F2,F3}</p>
    <p>F1</p>
    <p>I</p>
    <p>Traffic</p>
  </div>
  <div class="page">
    <p>OpenFlow Switch</p>
    <p>Example: Distributed Access Control</p>
    <p>Controller</p>
    <p>Application</p>
    <p>OpenFlow Switch</p>
    <p>OpenFlow Switch</p>
    <p>OpenFlow Switch</p>
    <p>F2</p>
    <p>F3</p>
    <p>Src Traffic Action Web Allow</p>
    <p>Non-web Drop Any Allow</p>
    <p>Security Policy</p>
    <p>Con&quot;guration A Process black-hat traffic on F1</p>
    <p>Process white-hat traffic on {F2,F3}</p>
    <p>Con&quot;guration B Process black-hat traffic on {F1,F2}</p>
    <p>Process white-hat traffic on F3</p>
    <p>?</p>
    <p>F1</p>
    <p>I</p>
    <p>Traffic</p>
  </div>
  <div class="page">
    <p>Abstractions for Network Update</p>
    <p>Challenge The network is a distributed system Can only update one element at a time</p>
    <p>Our Approach Provide programmers with constructs for</p>
    <p>updating the entire network at once</p>
    <p>Design semantics to ensure reasonable behavior Engineer efficient implementation mechanisms</p>
    <p>- Compiler constructs low-level update protocols - Automatically applies optimizations</p>
    <p>update(config, topo)</p>
    <p>OpenFlow Switch</p>
    <p>OpenFlow Switch</p>
    <p>OpenFlow Switch</p>
    <p>OpenFlow Switch</p>
    <p>OpenFlow Switch</p>
    <p>OpenFlow Switch</p>
  </div>
  <div class="page">
    <p>Consistent Updates in Action</p>
    <p># Configuration A I_configA = [Rule({IN_PORT:1},[forward(5)]), Rule({IN_PORT:2},[forward(5)]), Rule({IN_PORT:3},[forward(6)]), Rule({IN_PORT:4},[forward(7)])]) F1_configA = [Rule({TP_DST:80}, [forward(2)]), Rule({TP_DST:22}, [])]) F2_configA = [Rule({},[forward(2)])] F3_configA = [Rule({},[forward(2)])] configA = {I:SwitchConfiguration(I_configA), F1:SwitchConfiguration(F1_configA), F2:SwitchConfiguration(F2_configA), F3:SwitchConfiguration(F3_configA)}</p>
    <p># Configuration B I_configB = [Rule({IN_PORT:1},[forward(5)]), Rule({IN_PORT:2},[forward(6)]), Rule({IN_PORT:3},[forward(7)]), Rule({IN_PORT:4},[forward(7)])]) F1_configB = [Rule({TP_DST:80}, [forward(2)]), Rule({TP_DST:22}, [])]) F2_configB = [Rule({TP_DST:80}, [forward(2)]), Rule({TP_DST:22}, [])]) F3_configB = [Rule({},[forward(2)])] configB = {I:SwitchConfiguration(I_configB), F1:SwitchConfiguration(F1_configB), F2:SwitchConfiguration(F2_configB), F3:SwitchConfiguration(F3_configB)}</p>
    <p># Main Function topo = Topo(...) update(configA, topo) ...wait for traffic load to shift... update(configB, topo)</p>
    <p>Src Traffic Action Web Allow</p>
    <p>Non-web Drop Any Allow</p>
    <p>Security Policy</p>
    <p>OpenFlow Switch</p>
    <p>OpenFlow Switch</p>
    <p>OpenFlow Switch</p>
    <p>OpenFlow Switch</p>
    <p>OpenFlow Switch</p>
    <p>OpenFlow Switch</p>
  </div>
  <div class="page">
    <p>Semantics of Network Updates</p>
    <p>OpenFlow Switch</p>
    <p>OpenFlow Switch</p>
    <p>OpenFlow Switch</p>
    <p>OpenFlow Switch</p>
    <p>OpenFlow Switch</p>
    <p>OpenFlow Switch</p>
    <p>Atomic Updates  Seem sensible...  but costly to implement  and difficult to reason about effects on</p>
    <p>packets already in-#ight</p>
  </div>
  <div class="page">
    <p>Semantics of Network Updates</p>
    <p>OpenFlow Switch</p>
    <p>OpenFlow Switch</p>
    <p>OpenFlow Switch</p>
    <p>OpenFlow Switch</p>
    <p>OpenFlow Switch</p>
    <p>OpenFlow Switch</p>
    <p>Atomic Updates  Seem sensible...  but costly to implement  and difficult to reason about effects on</p>
    <p>packets already in-#ight</p>
    <p>Per-Packet Consistent Updates Every packet processed with old or new con$guration, but not a mixture of the two</p>
  </div>
  <div class="page">
    <p>Implementation Mechanisms</p>
    <p>OpenFlow Switch</p>
    <p>OpenFlow Switch</p>
    <p>OpenFlow Switch</p>
    <p>NOX Controller</p>
    <p>Frenetic Run-Time System</p>
    <p>Frenetic Application</p>
    <p>update(con&quot;g,topo)</p>
    <p>Calculate rules, generate messsages</p>
    <p>Raw OpenFlow control messages</p>
    <p>Two-phase commit  Construct versioned internal and edge</p>
    <p>con$gurations  Phase 1: Install internal con$guration  Phase 2: Install edge con$guration</p>
    <p>Pure Extension  Update strictly adds paths</p>
    <p>Pure Retraction  Update strictly removes paths</p>
    <p>Slice Update  Update affects a small number of switches</p>
  </div>
  <div class="page">
    <p>(Ask me for a demo!)</p>
  </div>
  <div class="page">
    <p>(Ask me for a demo!)</p>
    <p>OpenFlow Switch</p>
    <p>OpenFlow Switch</p>
    <p>OpenFlow Switch</p>
    <p>OpenFlow Switch</p>
    <p>OpenFlow Switch</p>
    <p>OpenFlow Switch</p>
  </div>
  <div class="page">
    <p>(Ask me for a demo!)</p>
    <p>OpenFlow Switch</p>
    <p>OpenFlow Switch</p>
    <p>OpenFlow Switch</p>
    <p>OpenFlow Switch</p>
    <p>OpenFlow Switch</p>
    <p>OpenFlow Switch</p>
    <p>OpenFlow Switch</p>
    <p>OpenFlow Switch</p>
    <p>OpenFlow Switch</p>
    <p>OpenFlow Switch</p>
    <p>OpenFlow Switch</p>
    <p>OpenFlow Switch</p>
  </div>
  <div class="page">
    <p>Formal Veri!cation</p>
    <p>Global Con&quot;g</p>
    <p>Packet Queue</p>
    <p>Update</p>
    <p>hC, Qi u! hC0, Q0i</p>
  </div>
  <div class="page">
    <p>Theorem</p>
    <p>An update u C1 to C2 is per-packet consistent if and only if it preserves all properties satis$ed by C1 and C2.</p>
    <p>Formal Veri!cation</p>
    <p>Global Con&quot;g</p>
    <p>Packet Queue</p>
    <p>Update</p>
    <p>hC, Qi u! hC0, Q0i</p>
  </div>
  <div class="page">
    <p>Theorem</p>
    <p>An update u C1 to C2 is per-packet consistent if and only if it preserves all properties satis$ed by C1 and C2.</p>
    <p>Formal Veri!cation</p>
    <p>Global Con&quot;g</p>
    <p>Packet Queue</p>
    <p>Update</p>
    <p>hC, Qi u! hC0, Q0i</p>
    <p>Ve ri&quot;e</p>
    <p>d</p>
  </div>
  <div class="page">
    <p>Formal Veri!cation</p>
    <p>Corollary To verify that a property is invariant, simply check that the old and new con$gurations satisfy it</p>
    <p>OpenFlow Switch</p>
    <p>OpenFlow Switch</p>
    <p>OpenFlow Switch</p>
  </div>
  <div class="page">
    <p>Formal Veri!cation</p>
    <p>Corollary To verify that a property is invariant, simply check that the old and new con$gurations satisfy it</p>
    <p>OpenFlow Switch</p>
    <p>OpenFlow Switch</p>
    <p>OpenFlow Switch</p>
    <p>Kripke Structure</p>
  </div>
  <div class="page">
    <p>Formal Veri!cation</p>
    <p>Corollary To verify that a property is invariant, simply check that the old and new con$gurations satisfy it</p>
    <p>OpenFlow Switch</p>
    <p>OpenFlow Switch</p>
    <p>OpenFlow Switch</p>
    <p>Model Checker</p>
    <p>Kripke Structure</p>
    <p>CTL Property</p>
  </div>
  <div class="page">
    <p>Formal Veri!cation</p>
    <p>Corollary To verify that a property is invariant, simply check that the old and new con$gurations satisfy it</p>
    <p>OpenFlow Switch</p>
    <p>OpenFlow Switch</p>
    <p>OpenFlow Switch</p>
    <p>Model Checker</p>
    <p>Kripke Structure</p>
    <p>CTL Property</p>
  </div>
  <div class="page">
    <p>Formal Veri!cation</p>
    <p>Corollary To verify that a property is invariant, simply check that the old and new con$gurations satisfy it</p>
    <p>OpenFlow Switch</p>
    <p>OpenFlow Switch</p>
    <p>OpenFlow Switch</p>
    <p>Model Checker</p>
    <p>Kripke Structure</p>
    <p>CTL Property</p>
    <p>Properties  Connectivity  Loop freedom  Blackhole freedom  Access control  Waypointing  Totality</p>
  </div>
  <div class="page">
    <p>Per-Flow Consistency</p>
    <p>Use Cases  Load balancer  Flow affinity  In-order delivery</p>
    <p>Per-#ow consistent updates Every set of related packets processed with old or new con$guration, but not a mixture of the two.</p>
    <p>Implementation mechanisms  Need to identify active #ows  Rules with soft timeouts  DevoFlow wildcard cloning  End-host feedback</p>
    <p>OpenFlow Switch</p>
    <p>OpenFlow Switch</p>
  </div>
  <div class="page">
    <p>Ongoing Work</p>
    <p>Other abstractions  Loop-freedom  Affinity preserving</p>
    <p>Update Synthesis  Programmer speci$es an invariant  Compiler constructs an update protocol</p>
    <p>Enhanced fault tolerance  Rapid response when failures occur  Compiler hardens con$gurations  Pre-loads backup policy</p>
    <p>Leverage end hosts  Help identify active #ows</p>
  </div>
  <div class="page">
    <p>Thank You!</p>
    <p>Collaborators Shrutarshi Basu (Cornell) Mike Freedman (Princeton) Rob Harrison (West Point) Chris Monsanto (Princeton) Mark Reitblatt (Cornell) Gn Sirer (Cornell) Cole Schlesinger (Princeton) Alec Story (Cornell) Jen Rexford (Princeton) Dave Walker (Princeton)</p>
    <p>Funding</p>
    <p>http://frenetic-lang.org</p>
  </div>
</Presentation>
