<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Correctness and Performance for Stateful Chained Network Functions</p>
    <p>Junaid KhalidW,G and Aditya AkellaW</p>
  </div>
  <div class="page">
    <p>Network Function Virtualization (NFV)</p>
    <p>Hardware NF  software NF over commodity server</p>
  </div>
  <div class="page">
    <p>Network Function Virtualization (NFV)</p>
    <p>Intrusion</p>
    <p>detection</p>
    <p>system (IDS)</p>
    <p>Hardware NF  software NF over commodity server</p>
  </div>
  <div class="page">
    <p>Network Function Virtualization (NFV)</p>
    <p>Caching</p>
    <p>proxy</p>
    <p>Intrusion</p>
    <p>detection</p>
    <p>system (IDS)</p>
    <p>Hardware NF  software NF over commodity server</p>
  </div>
  <div class="page">
    <p>Network Function Virtualization (NFV)</p>
    <p>Firewall</p>
    <p>Caching</p>
    <p>proxy</p>
    <p>Intrusion</p>
    <p>detection</p>
    <p>system (IDS)</p>
    <p>Hardware NF  software NF over commodity server</p>
  </div>
  <div class="page">
    <p>Network Function Virtualization (NFV)</p>
    <p>Firewall</p>
    <p>Caching</p>
    <p>proxy</p>
    <p>Intrusion</p>
    <p>detection</p>
    <p>system (IDS)</p>
    <p>WAN</p>
    <p>optimizer</p>
    <p>Hardware NF  software NF over commodity server</p>
  </div>
  <div class="page">
    <p>Network Function Virtualization (NFV)</p>
    <p>Firewall</p>
    <p>Caching</p>
    <p>proxy</p>
    <p>Intrusion</p>
    <p>detection</p>
    <p>system (IDS)</p>
    <p>WAN</p>
    <p>optimizer</p>
    <p>Hardware NF  software NF over commodity server</p>
    <p>Enables resource consolidation  Dynamic allocation of packet processing  Adding new functionality</p>
  </div>
  <div class="page">
    <p>Network Function Virtualization (NFV)</p>
    <p>Firewall</p>
    <p>Caching</p>
    <p>proxy</p>
    <p>Intrusion</p>
    <p>detection</p>
    <p>system (IDS)</p>
    <p>WAN</p>
    <p>optimizer</p>
    <p>Hardware NF  software NF over commodity server</p>
    <p>Enables resource consolidation  Dynamic allocation of packet processing  Adding new functionality  Simplifies service chaining</p>
  </div>
  <div class="page">
    <p>Service Chaining</p>
  </div>
  <div class="page">
    <p>Service Chaining</p>
  </div>
  <div class="page">
    <p>Service Chaining</p>
    <p>Intrusion</p>
    <p>detection</p>
    <p>system (IDS)</p>
    <p>WAN</p>
    <p>optimizer</p>
  </div>
  <div class="page">
    <p>Service Chaining</p>
  </div>
  <div class="page">
    <p>Service Chaining</p>
  </div>
  <div class="page">
    <p>Service Chaining</p>
  </div>
  <div class="page">
    <p>Service Chaining</p>
    <p>Chain output equivalence (COE): for any input the aggregate output of a dynamic set of instances should be equivalent to the output produced by a single instance</p>
  </div>
  <div class="page">
    <p>Service Chaining</p>
    <p>Chain output equivalence (COE): for any input the aggregate output of a dynamic set of instances should be equivalent to the output produced by a single instance.</p>
    <p>Our goal is to provide COE in service chaining without compromising performance or correctness</p>
  </div>
  <div class="page">
    <p>Service Chaining</p>
    <p>Chain output equivalence (COE): for any input the aggregate output of a dynamic set of instances should be equivalent to the output produced by a single instance.</p>
    <p>Our goal is to provide COE in service chaining without compromising performance or correctness</p>
    <p>Ensuring COE is challenging: NF chain attributes &amp; Dynamic Actions</p>
  </div>
  <div class="page">
    <p>NF Chain Attributes</p>
  </div>
  <div class="page">
    <p>NF Chain Attributes</p>
    <p>Perform sophisticated stateful actions on packets/flows</p>
  </div>
  <div class="page">
    <p>NF Chain Attributes</p>
    <p>IDS maintains cross-flows state (e.g., per host active conn. count) and per-flow state (e.g., TCP conn. state)</p>
    <p>Perform sophisticated stateful actions on packets/flows</p>
  </div>
  <div class="page">
    <p>NF Chain Attributes</p>
    <p>IDS maintains cross-flows state (e.g., per host active conn. count) and per-flow state (e.g., TCP conn. state)</p>
    <p>Perform sophisticated stateful actions on packets/flows</p>
  </div>
  <div class="page">
    <p>NF Chain Attributes</p>
    <p>Perform sophisticated stateful actions on packets/flows</p>
  </div>
  <div class="page">
    <p>NF Chain Attributes</p>
    <p>Perform sophisticated stateful actions on packets/flows</p>
    <p>Action taken by an NF instance depends on the state updates from other NF instances</p>
    <p>updating shared state</p>
  </div>
  <div class="page">
    <p>NF Chain Attributes</p>
    <p>Perform sophisticated stateful actions on packets/flows</p>
    <p>Action taken by an NF instance depends on the state updates from other NF instances</p>
    <p>off-path</p>
  </div>
  <div class="page">
    <p>NF Chain Attributes</p>
    <p>Perform sophisticated stateful actions on packets/flows</p>
    <p>Action taken by an NF instance depends on the state updates from other NF instances</p>
    <p>Action at the downstream NF may depend on the upstream NFs</p>
    <p>FTP</p>
    <p>SSH off-path</p>
  </div>
  <div class="page">
    <p>NF Chain Attributes</p>
    <p>Perform sophisticated stateful actions on packets/flows</p>
    <p>Action taken by an NF instance depends on the state updates from other NF instances</p>
    <p>Action at the downstream NF may depend on the upstream NFs</p>
    <p>SSH off-path</p>
  </div>
  <div class="page">
    <p>Dynamic Actions Key requirements</p>
  </div>
  <div class="page">
    <p>Dynamic Actions Key requirementsLoad balancing/elastic scaling</p>
    <p>Flows are moved from one instance to another to balance load or handle traffic spikes</p>
  </div>
  <div class="page">
    <p>Dynamic Actions Key requirements</p>
    <p>Safe cross-instance state transfer</p>
    <p>Load balancing/elastic scaling</p>
    <p>Flows are moved from one instance to another to balance load or handle traffic spikes</p>
  </div>
  <div class="page">
    <p>Dynamic Actions Key requirements</p>
    <p>Safe cross-instance state transfer</p>
    <p>Load balancing/elastic scaling</p>
    <p>Flows are moved from one instance to another to balance load or handle traffic spikes</p>
  </div>
  <div class="page">
    <p>Dynamic Actions Key requirements</p>
    <p>Safe cross-instance state transfer</p>
    <p>Consistent shared state</p>
    <p>Load balancing/elastic scaling</p>
    <p>Flows are moved from one instance to another to balance load or handle traffic spikes</p>
  </div>
  <div class="page">
    <p>Dynamic Actions Key requirements</p>
    <p>Safe cross-instance state transfer</p>
    <p>Consistent shared state</p>
  </div>
  <div class="page">
    <p>Dynamic Actions Key requirements</p>
    <p>Safe cross-instance state transfer</p>
    <p>Consistent shared state</p>
    <p>State availability</p>
    <p>Failure recovery</p>
    <p>When NF fails, all its state disappears. For fault tolerance, that state needs to be recovered</p>
  </div>
  <div class="page">
    <p>Dynamic Actions Key requirements</p>
    <p>Safe cross-instance state transfer</p>
    <p>Consistent shared state</p>
    <p>State availability</p>
  </div>
  <div class="page">
    <p>Dynamic Actions Key requirements</p>
    <p>Safe cross-instance state transfer</p>
    <p>Consistent shared state</p>
    <p>State availability</p>
    <p>Duplicate suppression</p>
    <p>Instance slowdown</p>
    <p>Clones may be launched to handle a straggler NF (a slow NF)</p>
  </div>
  <div class="page">
    <p>Dynamic Actions Key requirements</p>
    <p>Safe cross-instance state transfer</p>
    <p>Consistent shared state</p>
    <p>State availability</p>
    <p>Duplicate suppression</p>
    <p>Chain-wide ordering</p>
    <p>Instance slowdown</p>
    <p>Clones may be launched to handle a straggler NF (a slow NF)</p>
    <p>Downstream NFs rely on the order at upstream NFs</p>
  </div>
  <div class="page">
    <p>Key Requirements for COE</p>
  </div>
  <div class="page">
    <p>NF statefulness</p>
    <p>Consistent state updates</p>
    <p>Dependency between different NF instances</p>
    <p>NF chain attributes</p>
    <p>Key Requirements for COE</p>
  </div>
  <div class="page">
    <p>x  NF statefulness</p>
    <p>Consistent state updates</p>
    <p>Dependency between different NF instances</p>
    <p>NF chain attributes</p>
    <p>Key Requirements for COE Dynamic actions</p>
    <p>Elastic scaling</p>
    <p>Failure recovery</p>
    <p>Instance slowdown</p>
  </div>
  <div class="page">
    <p>x =  NF statefulness</p>
    <p>Consistent state updates</p>
    <p>Dependency between different NF instances</p>
    <p>NF chain attributes Key requirements</p>
    <p>Safe cross-instance state transfer</p>
    <p>Consistent shared state</p>
    <p>State availability</p>
    <p>Duplicate suppression</p>
    <p>Chain-wide ordering</p>
    <p>Key Requirements for COE Dynamic actions</p>
    <p>Elastic scaling</p>
    <p>Failure recovery</p>
    <p>Instance slowdown</p>
  </div>
  <div class="page">
    <p>Existing Solutions</p>
    <p>Framework State availability</p>
    <p>State transfer</p>
    <p>Consistent shared state</p>
    <p>Duplicate suppression</p>
    <p>Chain-wide ordering</p>
    <p>Split/Merge[NSDI13]</p>
    <p>OpenNF[SIGCOMM14]</p>
    <p>FTMB [SIGCOMM 15]</p>
    <p>S6 [NSDI18]</p>
    <p>Pico Rep.[SOCC13]</p>
    <p>StatelessNF[NSDI17]</p>
  </div>
  <div class="page">
    <p>Existing Solutions</p>
    <p>Framework State availability</p>
    <p>State transfer</p>
    <p>Consistent shared state</p>
    <p>Duplicate suppression</p>
    <p>Chain-wide ordering</p>
    <p>Split/Merge[NSDI13]</p>
    <p>OpenNF[SIGCOMM14]</p>
    <p>FTMB [SIGCOMM 15]</p>
    <p>S6 [NSDI18]</p>
    <p>Pico Rep.[SOCC13]</p>
    <p>StatelessNF[NSDI17]</p>
    <p>Incomplete support  restricted functionality</p>
  </div>
  <div class="page">
    <p>CHC</p>
    <p>CHC is a generic NFV framework to support all of these requirements without trading off correctness for performance or functionality</p>
  </div>
  <div class="page">
    <p>CHC</p>
    <p>CHC is a generic NFV framework to support all of these requirements without trading off correctness for performance or functionality</p>
  </div>
  <div class="page">
    <p>CHC</p>
    <p>CHC is a generic NFV framework to support all of these requirements without trading off correctness for performance or functionality</p>
    <p>CHC consist of three main building blocks</p>
  </div>
  <div class="page">
    <p>CHC</p>
    <p>CHC is a generic NFV framework to support all of these requirements without trading off correctness for performance or functionality</p>
    <p>CHC consist of three main building blocks 1. State store external to NF</p>
    <p>Datastore</p>
  </div>
  <div class="page">
    <p>CHC</p>
    <p>CHC is a generic NFV framework to support all of these requirements without trading off correctness for performance or functionality</p>
    <p>CHC consist of three main building blocks 1. State store external to NF 2. NF state-aware state management algorithms</p>
    <p>Datastore</p>
  </div>
  <div class="page">
    <p>CHC</p>
    <p>CHC is a generic NFV framework to support all of these requirements without trading off correctness for performance or functionality</p>
    <p>CHC consist of three main building blocks 1. State store external to NF 2. NF state-aware state management algorithms 3. Metadata  logical clock and logs</p>
    <p>Root splitter</p>
    <p>Datastore</p>
  </div>
  <div class="page">
    <p>CHC</p>
    <p>CHC is a generic NFV framework to support all of these requirements without trading off correctness for performance or functionality</p>
    <p>CHC consist of three main building blocks 1. State store external to NF 2. NF state-aware state management algorithms 3. Metadata  logical clock and logs</p>
  </div>
  <div class="page">
    <p>CHC  State Externalization</p>
    <p>NF state is stored in an in-memory external state store (similar to statelessNF)</p>
  </div>
  <div class="page">
    <p>CHC  State Externalization</p>
    <p>NF state is stored in an in-memory external state store (similar to statelessNF)  This ensures state availability and simplifies reasoning about state ownership</p>
    <p>and concurrency control across instances</p>
    <p>External store</p>
  </div>
  <div class="page">
    <p>CHC  State Externalization</p>
    <p>NF state is stored in an in-memory external state store (similar to statelessNF)  This ensures state availability and simplifies reasoning about state ownership</p>
    <p>and concurrency control across instances</p>
    <p>Naively externalizing the state can degrade NF performance</p>
    <p>External store</p>
  </div>
  <div class="page">
    <p>CHC</p>
    <p>CHC is a generic NFV framework to support all of these requirements without trading off correctness for performance or functionality</p>
    <p>CHC consist of three main building blocks 1. State store external to NF 2. NF state-aware state management algorithms 3. Metadata  logical clock and logs</p>
  </div>
  <div class="page">
    <p>State Management Strategies</p>
    <p>State</p>
  </div>
  <div class="page">
    <p>State Management Strategies</p>
    <p>State</p>
    <p>per-flow cross-flow</p>
  </div>
  <div class="page">
    <p>State Management Strategies</p>
    <p>State</p>
    <p>per-flow cross-flow</p>
    <p>Any</p>
    <p>Instance-local caching w/ periodic nonblocking flush</p>
  </div>
  <div class="page">
    <p>State Management Strategies</p>
    <p>State</p>
    <p>per-flow cross-flow</p>
    <p>Any Write rarely (read heavy)</p>
    <p>Instance-local caching w/ periodic nonblocking flush</p>
    <p>Instance-local caching w/ callbacks</p>
  </div>
  <div class="page">
    <p>State Management Strategies</p>
    <p>State</p>
    <p>per-flow cross-flow</p>
    <p>Any Write rarely (read heavy)</p>
    <p>Write mostly Read rarely</p>
    <p>Instance-local caching w/ periodic nonblocking flush</p>
    <p>Instance-local caching w/ callbacks</p>
  </div>
  <div class="page">
    <p>State Management Strategies</p>
    <p>State</p>
    <p>per-flow cross-flow</p>
    <p>Any Write rarely (read heavy)</p>
    <p>Write mostly Read rarely</p>
    <p>Write/read often</p>
    <p>Instance-local caching w/ periodic nonblocking flush</p>
    <p>Instance-local caching w/ callbacks</p>
  </div>
  <div class="page">
    <p>State Management Strategies</p>
    <p>State</p>
    <p>per-flow cross-flow</p>
    <p>Any Write rarely (read heavy)</p>
    <p>Write mostly Read rarely</p>
    <p>Write/read often</p>
    <p>Instance-local caching w/ periodic nonblocking flush</p>
    <p>Instance-local caching w/ callbacks</p>
    <p>Operation offloading</p>
  </div>
  <div class="page">
    <p>State Maintenance - Offloading Operation</p>
    <p>An NF instance can offload operations and instruct the datastore to perform them on its behalf</p>
  </div>
  <div class="page">
    <p>State Maintenance - Offloading Operation</p>
    <p>Operation Description</p>
    <p>Increment/Decrement a value</p>
    <p>Increment or decrement the value stored at key by the given value</p>
    <p>Push/pop a value to/from list</p>
    <p>Push or pop the value in/from the list stored at the given key</p>
    <p>Compare and update Update the value, if the condition is true</p>
    <p>An NF instance can offload operations and instruct the datastore to perform them on its behalf</p>
  </div>
  <div class="page">
    <p>State Maintenance - Offloading Operation</p>
    <p>Operation Description</p>
    <p>Increment/Decrement a value</p>
    <p>Increment or decrement the value stored at key by the given value</p>
    <p>Push/pop a value to/from list</p>
    <p>Push or pop the value in/from the list stored at the given key</p>
    <p>Compare and update Update the value, if the condition is true</p>
    <p>An NF instance can offload operations and instruct the datastore to perform them on its behalf</p>
    <p>The datastore serializes operations issued by different instances for the same shared state object and applies them in the background</p>
  </div>
  <div class="page">
    <p>An NF instance can offload operations and instruct the datastore to perform them on its behalf</p>
    <p>State Maintenance - Offloading Operation</p>
  </div>
  <div class="page">
    <p>NF1</p>
    <p>An NF instance can offload operations and instruct the datastore to perform them on its behalf</p>
    <p>State Maintenance - Offloading Operation</p>
    <p>NF2NF1 Datastore X=0</p>
    <p>Without operation offload</p>
  </div>
  <div class="page">
    <p>NF1</p>
    <p>An NF instance can offload operations and instruct the datastore to perform them on its behalf</p>
    <p>State Maintenance - Offloading Operation</p>
    <p>NF2</p>
    <p>NF1</p>
    <p>Datastore X=0</p>
    <p>Without operation offload</p>
  </div>
  <div class="page">
    <p>NF1</p>
    <p>An NF instance can offload operations and instruct the datastore to perform them on its behalf</p>
    <p>State Maintenance - Offloading Operation</p>
    <p>NF2NF1 Datastore X=0</p>
    <p>Without operation offload</p>
  </div>
  <div class="page">
    <p>NF1</p>
    <p>An NF instance can offload operations and instruct the datastore to perform them on its behalf</p>
    <p>State Maintenance - Offloading Operation</p>
    <p>NF2</p>
    <p>NF1</p>
    <p>Datastore X=0</p>
    <p>X++</p>
    <p>Without operation offload</p>
  </div>
  <div class="page">
    <p>NF1</p>
    <p>An NF instance can offload operations and instruct the datastore to perform them on its behalf</p>
    <p>State Maintenance - Offloading Operation</p>
    <p>NF2NF1 Datastore X=0</p>
    <p>X++</p>
    <p>Without operation offload</p>
  </div>
  <div class="page">
    <p>NF1</p>
    <p>An NF instance can offload operations and instruct the datastore to perform them on its behalf</p>
    <p>State Maintenance - Offloading Operation</p>
    <p>NF2</p>
    <p>NF1</p>
    <p>Datastore X=0</p>
    <p>X++</p>
    <p>X++</p>
    <p>Without operation offload</p>
  </div>
  <div class="page">
    <p>NF1</p>
    <p>An NF instance can offload operations and instruct the datastore to perform them on its behalf</p>
    <p>State Maintenance - Offloading Operation</p>
    <p>NF2NF1 Datastore</p>
    <p>X=2</p>
    <p>X=0</p>
    <p>X++</p>
    <p>X++</p>
    <p>Without operation offload</p>
  </div>
  <div class="page">
    <p>NF1</p>
    <p>An NF instance can offload operations and instruct the datastore to perform them on its behalf</p>
    <p>State Maintenance - Offloading Operation</p>
    <p>NF2</p>
    <p>NF1</p>
    <p>Datastore</p>
    <p>X=2</p>
    <p>X=0</p>
    <p>X++</p>
    <p>X++</p>
    <p>NF2NF1 Datastore X=0</p>
    <p>Without operation offload With operation offload</p>
  </div>
  <div class="page">
    <p>NF1</p>
    <p>An NF instance can offload operations and instruct the datastore to perform them on its behalf</p>
    <p>State Maintenance - Offloading Operation</p>
    <p>NF2NF1 Datastore</p>
    <p>X=2</p>
    <p>X=0</p>
    <p>X++</p>
    <p>X++</p>
    <p>NF2NF1 Datastore X=0</p>
    <p>Without operation offload With operation offload</p>
  </div>
  <div class="page">
    <p>NF1</p>
    <p>An NF instance can offload operations and instruct the datastore to perform them on its behalf</p>
    <p>State Maintenance - Offloading Operation</p>
    <p>NF2</p>
    <p>NF1</p>
    <p>Datastore</p>
    <p>X=2</p>
    <p>X=0</p>
    <p>X++</p>
    <p>X++</p>
    <p>NF2NF1 Datastore X=0</p>
    <p>Without operation offload With operation offload</p>
  </div>
  <div class="page">
    <p>NF1</p>
    <p>An NF instance can offload operations and instruct the datastore to perform them on its behalf</p>
    <p>State Maintenance - Offloading Operation</p>
    <p>NF2NF1 Datastore</p>
    <p>X=2</p>
    <p>X=0</p>
    <p>X++</p>
    <p>X++</p>
    <p>NF2NF1 Datastore X=0</p>
    <p>Without operation offload With operation offload</p>
  </div>
  <div class="page">
    <p>NF1</p>
    <p>An NF instance can offload operations and instruct the datastore to perform them on its behalf</p>
    <p>State Maintenance - Offloading Operation</p>
    <p>NF2</p>
    <p>NF1</p>
    <p>Datastore</p>
    <p>X=2</p>
    <p>X=0</p>
    <p>X++</p>
    <p>X++</p>
    <p>NF2NF1 Datastore X=0</p>
    <p>X=2</p>
    <p>Without operation offload With operation offload</p>
  </div>
  <div class="page">
    <p>State Management Strategies</p>
    <p>State</p>
    <p>per-flow cross-flow</p>
    <p>Any Write rarely (read heavy)</p>
    <p>Write mostly Read rarely</p>
    <p>Instance-local caching w/ periodic nonblocking flush</p>
    <p>Instance-local caching w/ callbacks</p>
  </div>
  <div class="page">
    <p>State Management Strategies</p>
    <p>State</p>
    <p>per-flow cross-flow</p>
    <p>Any Write rarely (read heavy)</p>
    <p>Write mostly Read rarely</p>
    <p>Non-blocking operation without</p>
    <p>caching</p>
    <p>Instance-local caching w/ periodic nonblocking flush</p>
    <p>Instance-local caching w/ callbacks</p>
  </div>
  <div class="page">
    <p>State Management Strategies</p>
    <p>State</p>
    <p>per-flow cross-flow</p>
    <p>Any Write rarely (read heavy)</p>
    <p>Write mostly Read rarely</p>
    <p>Write/read often</p>
    <p>Non-blocking operation without</p>
    <p>caching</p>
    <p>Depends upon traffic split. Cache, if split allows; flush periodically</p>
    <p>Instance-local caching w/ periodic nonblocking flush</p>
    <p>Instance-local caching w/ callbacks</p>
  </div>
  <div class="page">
    <p>CHC</p>
    <p>CHC is a generic NFV framework to support all of these requirements without trading off correctness for performance or functionality</p>
    <p>CHC consist of three main building blocks 1. State store external to NF 2. NF state-aware state management algorithms 3. Metadata  logical clock and logs</p>
  </div>
  <div class="page">
    <p>Metadata</p>
    <p>CHC adds a root splitter at the entry of a chain that:</p>
    <p>Root splitter 25</p>
  </div>
  <div class="page">
    <p>Metadata</p>
    <p>CHC adds a root splitter at the entry of a chain that:</p>
    <p>Root splitter attaches a unique logical clock with each packet. Logical clock is used for duplication suppression, ordering, and traffic replay</p>
    <p>Root splitter 25</p>
    <p>Adding logical clock</p>
  </div>
  <div class="page">
    <p>Metadata</p>
    <p>CHC adds a root splitter at the entry of a chain that:</p>
    <p>Root splitter attaches a unique logical clock with each packet. Logical clock is used for duplication suppression, ordering, and traffic replay</p>
    <p>It also logs all the in-transit packets</p>
    <p>Root splitter 25</p>
    <p>Packet logging</p>
    <p>Adding logical clock</p>
  </div>
  <div class="page">
    <p>Metadata</p>
    <p>CHC adds a root splitter at the entry of a chain that:</p>
    <p>Root splitter attaches a unique logical clock with each packet. Logical clock is used for duplication suppression, ordering, and traffic replay</p>
    <p>It also logs all the in-transit packets</p>
    <p>CHC encodes state objects ownership information and logical clock associated with state operations as metadata</p>
    <p>Root splitter 25</p>
    <p>Packet logging</p>
    <p>Adding logical clock</p>
    <p>State ownership info</p>
  </div>
  <div class="page">
    <p>CHC  Elastic Scaling</p>
    <p>Root splitter</p>
  </div>
  <div class="page">
    <p>CHC  Elastic Scaling</p>
    <p>Root splitter</p>
    <p>CHC marks the last packet going to the old instance and first packet going to the new instance</p>
    <p>Last pkt</p>
    <p>First pkt</p>
  </div>
  <div class="page">
    <p>CHC  Elastic Scaling</p>
    <p>Root splitter</p>
    <p>CHC marks the last packet going to the old instance and first packet going to the new instance</p>
    <p>Ownership information encoded as metadata of state objects is used to ensure consistent handover of per-flow state</p>
    <p>Last pkt</p>
    <p>First pkt</p>
  </div>
  <div class="page">
    <p>CHC  Elastic Scaling</p>
    <p>Root splitter</p>
    <p>CHC marks the last packet going to the old instance and first packet going to the new instance</p>
    <p>Ownership information encoded as metadata of state objects is used to ensure consistent handover of per-flow state</p>
    <p>Cross-flow state does not require any special handling as operation offloading is used to update it</p>
    <p>Last pkt</p>
    <p>First pkt</p>
  </div>
  <div class="page">
    <p>CHC provides fault tolerance for:</p>
    <p>NF instance</p>
    <p>Root splitter</p>
    <p>Datastore</p>
    <p>CHC  Fault Tolerance</p>
  </div>
  <div class="page">
    <p>CHC provides fault tolerance for:</p>
    <p>NF instance</p>
    <p>Root splitter</p>
    <p>Datastore</p>
    <p>CHC  Fault Tolerance</p>
  </div>
  <div class="page">
    <p>NF instance failure recovery:</p>
    <p>CHC  Fault Tolerance</p>
  </div>
  <div class="page">
    <p>NF instance failure recovery:</p>
    <p>Failover instance takes over</p>
    <p>CHC  Fault Tolerance</p>
  </div>
  <div class="page">
    <p>NF instance failure recovery:</p>
    <p>Failover instance takes over</p>
    <p>Datastore associates the failover instance ID with the relevant state</p>
    <p>CHC  Fault Tolerance</p>
  </div>
  <div class="page">
    <p>NF instance failure recovery:</p>
    <p>Failover instance takes over</p>
    <p>Datastore associates the failover instance ID with the relevant state</p>
    <p>Root replays the packet</p>
    <p>CHC  Fault Tolerance</p>
  </div>
  <div class="page">
    <p>NF instance failure recovery:</p>
    <p>Failover instance takes over</p>
    <p>Datastore associates the failover instance ID with the relevant state</p>
    <p>Root replays the packet</p>
    <p>CHC  Fault Tolerance</p>
  </div>
  <div class="page">
    <p>NF instance failure recovery:</p>
    <p>Failover instance takes over</p>
    <p>Datastore associates the failover instance ID with the relevant state</p>
    <p>Root replays the packet</p>
    <p>Metadata is used to suppress duplicate state-update and processing</p>
    <p>CHC  Fault Tolerance</p>
  </div>
  <div class="page">
    <p>CHC  Straggler Mitigation</p>
  </div>
  <div class="page">
    <p>Metadata (logical clocks) is used to suppress duplicate state updates at the datastore and duplicate packets at downstream NFs</p>
    <p>CHC  Straggler Mitigation</p>
  </div>
  <div class="page">
    <p>Metadata (logical clocks) is used to suppress duplicate state updates at the datastore and duplicate packets at downstream NFs</p>
    <p>CHC  Straggler Mitigation</p>
  </div>
  <div class="page">
    <p>Metadata (logical clocks) is used to suppress duplicate state updates at the datastore and duplicate packets at downstream NFs</p>
    <p>CHC  Straggler Mitigation</p>
    <p>state updates are suppressed</p>
  </div>
  <div class="page">
    <p>Implementation of CHC</p>
  </div>
  <div class="page">
    <p>Prototype is implemented in C++</p>
    <p>Leverages Mellanox messaging accelerator for low latency communication</p>
    <p>Implementation of CHC</p>
  </div>
  <div class="page">
    <p>Prototype is implemented in C++</p>
    <p>Leverages Mellanox messaging accelerator for low latency communication</p>
    <p>We implemented four NFs on top of CHC  NAT</p>
    <p>Trojan detector</p>
    <p>Portscan detector</p>
    <p>Load balancer</p>
    <p>Implementation of CHC</p>
  </div>
  <div class="page">
    <p>Traditional NF with infinite capacity</p>
    <p>Evaluation  Performance</p>
    <p>State variable Scope State Externalization</p>
    <p>Caching Asynch. + op offload</p>
    <p>Port mapping per-flow</p>
    <p>Total TCP pkt count cross flow</p>
    <p>Total IP pkt count cross low</p>
  </div>
  <div class="page">
    <p>Traditional NF with infinite capacity</p>
    <p>Externalized state operations</p>
    <p>Evaluation  Performance</p>
    <p>State variable Scope State Externalization</p>
    <p>Caching Asynch. + op offload</p>
    <p>Port mapping per-flow</p>
    <p>Total TCP pkt count cross flow</p>
    <p>Total IP pkt count cross low</p>
  </div>
  <div class="page">
    <p>Traditional NF with infinite capacity</p>
    <p>Externalized state operations</p>
    <p>State externalization with caching</p>
    <p>Evaluation  Performance</p>
    <p>State variable Scope State Externalization</p>
    <p>Caching Asynch. + op offload</p>
    <p>Port mapping per-flow</p>
    <p>Total TCP pkt count cross flow</p>
    <p>Total IP pkt count cross low</p>
  </div>
  <div class="page">
    <p>Traditional NF with infinite capacity</p>
    <p>Externalized state operations</p>
    <p>State externalization with caching</p>
    <p>State externalization with caching and asynchronous + offloaded updates</p>
    <p>Evaluation  Performance</p>
    <p>State variable Scope State Externalization</p>
    <p>Caching Asynch. + op offload</p>
    <p>Port mapping per-flow</p>
    <p>Total TCP pkt count cross flow</p>
    <p>Total IP pkt count cross low</p>
  </div>
  <div class="page">
    <p>Traditional NF with infinite capacity</p>
    <p>Externalized state operations</p>
    <p>State externalization with caching</p>
    <p>State externalization with caching and asynchronous + offloaded updates</p>
    <p>Less than 0.6s increase in the median per-NF packet processing latency</p>
    <p>Evaluation  Performance</p>
  </div>
  <div class="page">
    <p>Evaluation  Dynamic Actions</p>
  </div>
  <div class="page">
    <p>Evaluation  Dynamic Actions</p>
  </div>
  <div class="page">
    <p>Evaluation  Dynamic Actions</p>
  </div>
  <div class="page">
    <p>Evaluation  Dynamic Actions</p>
    <p>During cross instance state sharing</p>
  </div>
  <div class="page">
    <p>Evaluation  Dynamic Actions</p>
    <p>During cross instance state sharing</p>
  </div>
  <div class="page">
    <p>Evaluation  Dynamic Actions</p>
    <p>CHC</p>
    <p>operation offloading</p>
  </div>
  <div class="page">
    <p>Evaluation  Dynamic Actions</p>
    <p>checkpointing every 200ms</p>
    <p>CHC</p>
    <p>FTMB</p>
    <p>operation offloading</p>
  </div>
  <div class="page">
    <p>Evaluation  Dynamic Actions</p>
    <p>Ensuing Fault tolerance</p>
    <p>checkpointing every 200ms</p>
    <p>CHC</p>
    <p>FTMB</p>
    <p>operation offloading</p>
  </div>
  <div class="page">
    <p>Evaluation  Dynamic Actions</p>
    <p>Ensuing Fault tolerance</p>
    <p>checkpointing every 200ms</p>
    <p>CHC</p>
    <p>FTMB</p>
    <p>operation offloading</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Portscan detector Load Balancer NAT</p>
    <p>CHC operates at line rate with an end-to-end median per packet processing overhead of 11.3us</p>
    <p>Trojan detector</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>State management performance</p>
    <p>Metadata overhead</p>
    <p>Correctness requirements:  State availability</p>
    <p>Cross instance state transfer</p>
    <p>Cross instance state sharing</p>
    <p>Chain wide ordering</p>
    <p>Duplication suppression</p>
    <p>Fault tolerance</p>
  </div>
  <div class="page">
    <p>CHC supports output equivalence and high performance state management for NFV chains</p>
    <p>It hides the complexity of handling states during dynamic actions (elastic scaling and failure recovery)</p>
    <p>It relies on managing state external to NFs, but couples it with several caching and state update algorithms to ensure low latency</p>
    <p>Summary</p>
  </div>
</Presentation>
