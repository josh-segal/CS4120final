<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Security Namespace : Making Linux Security Frameworks Available to Containers</p>
    <p>Yuqiong Sun, David Safford, Mimi Zohar, Dimitrios Pendarakis, Zhongshu Gu and Trent Jaeger</p>
  </div>
  <div class="page">
    <p>Container vs. Virtual Machines</p>
    <p>Containers are operating system level virtualization environment for running multiple isolated Linux systems on a single Linux control host</p>
    <p>Image credit: Docker Inc. and RightScale Inc.</p>
  </div>
  <div class="page">
    <p>Is Kernel Sharing All Good?</p>
    <p>Container owners cannot leverage kernel security frameworks to protect their containers  I.e., cannot apply local security policies to govern integrity measurement,</p>
    <p>code execution, mandatory access control, etc.</p>
  </div>
  <div class="page">
    <p>Integrity Attestation for Container</p>
    <p>On a container cloud, can a container owner attest integrity of his/her containers to his/her customers?  Exactly what Linux Integrity subsystem (a.k.a. IMA) is designed for</p>
    <p>Process Measure</p>
    <p>Policy Measurements</p>
    <p>mmap() e xte</p>
    <p>nd</p>
    <p>record</p>
    <p>kernel</p>
  </div>
  <div class="page">
    <p>Integrity Attestation for Container (Cont.)</p>
    <p>But  Mixed measurements from different containers and host</p>
    <p>Process</p>
    <p>Measure</p>
    <p>Policy Measurements</p>
    <p>mmap ()</p>
    <p>ext end</p>
    <p>record</p>
    <p>kernel</p>
    <p>Container1</p>
    <p>Process</p>
    <p>Container2</p>
    <p>mmap()</p>
  </div>
  <div class="page">
    <p>Integrity Attestation for Container (Cont.)</p>
    <p>But  Mixed measurements from different containers and host  Different versions of policies</p>
    <p>Process</p>
    <p>Measure</p>
    <p>Policy1 Measurements</p>
    <p>mmap ()</p>
    <p>ext end</p>
    <p>record</p>
    <p>kernel</p>
    <p>Container1</p>
    <p>Process</p>
    <p>Container2</p>
    <p>mmap()</p>
    <p>Policy2</p>
  </div>
  <div class="page">
    <p>Integrity Attestation for Container (Cont.)</p>
    <p>But  Mixed measurements from different containers and host  Different versions of policies</p>
    <p>And policies do not always agree with each other</p>
    <p>Me: I am hosting a honeypot. Let the IMA allow all the</p>
    <p>vulnerable versions of software Bank: Awesome decision!</p>
    <p>I like Yuqiongs policy.</p>
  </div>
  <div class="page">
    <p>Mandatory Access Control for Container</p>
    <p>MAC mechanisms can only be used to protect container host, but not container  An excerpt from Ubuntu LXC documentation (section AppArmor):</p>
  </div>
  <div class="page">
    <p>Goal: Security Namespace</p>
    <p>Can we virtualize/isolate security frameworks in Linux kernel to make them available to containers?  Just like how other kernel resources are virtualized/isolated for containers</p>
    <p>Ideally, we want:  Each container can govern the security of its containerized processes  Each container can independently define its security policies and access its</p>
    <p>security states (e.g., audit logs, measurements)  Security Invariant: a container cannot invalidate the security goal of other</p>
    <p>containers or the container host, as expressed via their respective security policies</p>
  </div>
  <div class="page">
    <p>Background: Namespaces in Kernel</p>
  </div>
  <div class="page">
    <p>Background: Namespaces in Kernel</p>
  </div>
  <div class="page">
    <p>Background: Namespaces in Kernel (Cont.)</p>
    <p>There are 6 7 namespaces isolating different types of kernel resources</p>
  </div>
  <div class="page">
    <p>Background: Namespaces and Container</p>
    <p>There are 6 7 namespaces isolating different types of kernel resources</p>
  </div>
  <div class="page">
    <p>Background: Namespaces and Container</p>
    <p>There are 6 7 namespaces isolating different types of kernel resources</p>
    <p>Apache running in the container</p>
    <p>Docker Daemon</p>
    <p>clone( CLONE_NEWIPC | CLONE_NEWNET | CLONE_NEWPID | CLONE_NEWUTS | CLONE_NEWNEWNS)</p>
    <p>hostname setup rootfs setup pivot root</p>
    <p>mount /dev, /proc, /sys IP, firewall setup execve( Apache2 )</p>
    <p>Daemon continue running in the native system</p>
    <p>protected by IMA /AppArmor / SELinux and etc.</p>
    <p>CLONE_NEW IMA /AppArmor /SELinux</p>
  </div>
  <div class="page">
    <p>A Strawman Design</p>
    <p>Virtualize security framework into instances and divide control  NSnative controls P0 , NS1 controls P1 and P2, and NS2 controls P3  NSnative, NS1 and NS2 independently applies security policies</p>
    <p>Security Framework Instance 1</p>
    <p>States Policy</p>
    <p>Security Framework Instance 2</p>
    <p>States Policy</p>
    <p>Security Framework Instance 3</p>
    <p>States Policy</p>
    <p>P0 fork fork</p>
    <p>new security ns</p>
    <p>P1 P2 P3 fork</p>
    <p>new security ns</p>
    <p>NSnative NS1 NS2</p>
  </div>
  <div class="page">
    <p>Attack in Strawman Design</p>
    <p>Kernel security frameworks are no longer global</p>
  </div>
  <div class="page">
    <p>Attack in Strawman Design (Cont.)</p>
    <p>Kernel security frameworks are are no longer mandatory</p>
    <p>Process P0</p>
    <p>File</p>
    <p>Process P1</p>
    <p>Container1/ Security NS1</p>
    <p>Container2/ Security NS2</p>
    <p>I need my precious file to be maintained as read-only</p>
    <p>Lets make it read-write to my processes</p>
  </div>
  <div class="page">
    <p>Challenges</p>
    <p>Kernel security frameworks are designed to be global  They control ALL processes running on a system (completeness for reference</p>
    <p>monitor)  But we should allow container owners to exercise control over limited set of</p>
    <p>processes (i.e., his/her own containers)  Kernel security frameworks are designed to be mandatory  Only system admin may define security policies  But we should allow container owners to make his/her security decisions</p>
    <p>independently  Relaxing the two requirements in a nave way may compromise</p>
    <p>security offered by security frameworks</p>
  </div>
  <div class="page">
    <p>Insights</p>
    <p>Insight 1 (to relax global requirement)  Route an operation (i.e., system call) to ALL security namespaces whose</p>
    <p>security might be affected by the operation  Insight 2 (to relax mandatory requirement)  Only allow an operation if all security namespaces affected by the operation</p>
    <p>allow the operation</p>
  </div>
  <div class="page">
    <p>Solution Overview</p>
  </div>
  <div class="page">
    <p>Solution Overview</p>
  </div>
  <div class="page">
    <p>Solution Overview</p>
  </div>
  <div class="page">
    <p>Solution Overview</p>
  </div>
  <div class="page">
    <p>Solution Overview</p>
  </div>
  <div class="page">
    <p>Operation Router</p>
    <p>Key Task:  Route an operation to all security namespaces whose security might be</p>
    <p>affected by the operation  How:  Operation can be written as 3-tuple &lt;subject, object, operation&gt;  Security namespace has implicit assumptions over subject and object</p>
  </div>
  <div class="page">
    <p>A Subjects Perspective</p>
    <p>Implicit assumption of global  A security framework controls all subjects stemming from the first subject</p>
    <p>that it sees  For native  all subjects forked from init (PID 1)  For a container  all subjects forked from the first container process</p>
    <p>A subject may affect a security namespace  If the subject is associated with or a descendant of that security namespace</p>
  </div>
  <div class="page">
    <p>A Subjects Perspective (Cont.)</p>
    <p>A subject may affect a security namespace  If the subject is associated with or a descendant of that security namespace</p>
  </div>
  <div class="page">
    <p>An Objects Perspective</p>
    <p>Implicit assumption of mandatory  Only operations explicitly allowed by a policy can be performed</p>
    <p>An object may affect a security namespace  If it is visible to the security namespace</p>
    <p>Process P0</p>
    <p>File</p>
    <p>Process P1</p>
    <p>Container1/ Security NS1</p>
    <p>Container2/ Security NS2</p>
    <p>I need my precious file to be maintained as read-only</p>
    <p>Lets make it read-write to my processes</p>
  </div>
  <div class="page">
    <p>Solution Overview</p>
  </div>
  <div class="page">
    <p>Policy Engine</p>
    <p>Runtime conflicts affect usability  An operation might be eventually denied even if a container allowed it  Cannot debug since security namespaces are isolated  So we detect and inform potential conflicts at policy load time</p>
  </div>
  <div class="page">
    <p>Implementation</p>
    <p>Namespace for two kernel security frameworks  IMA (Integrity Measurement Architecture) for integrity attestation</p>
    <p>~1.1K LOC in C  https://git.kernel.org/pub/scm/linux/kernel/git/zohar/linux-integrity.git/log/?h=next</p>
    <p>namespacing-experimental  AppArmor for mandatory access control</p>
    <p>~1.5K LOC in C</p>
    <p>Less than 20 LOC extension to Docker libcontainer  Essentially use CLONE_NEWIMA &amp; CLONE_NEWAPPARMOR flags in clone</p>
    <p>system call</p>
  </div>
  <div class="page">
    <p>Evaluation: AppArmor Namespace</p>
  </div>
  <div class="page">
    <p>Evaluation: AppArmor Namespace (Cont.)</p>
    <p>Enforce both host profile (Docker profile) and application (in container) profile at the same time  Both profiles are shipped as default in Ubuntu</p>
  </div>
  <div class="page">
    <p>Evaluation: AppArmor Namespace (Cont.)</p>
    <p>Enforce both host profile (Docker profile) and application (in container) profile at the same time  Both profiles are shipped as default in Ubuntu</p>
    <p>Container wants to allow something that container host denies</p>
  </div>
  <div class="page">
    <p>Sharing, Sharing, Conflicts, Conflicts</p>
    <p>/proc, /sys and /dev has been historically used as interfaces between kernel and userspace  Many objects under them (e.g., /proc/uptime) may break container isolation  Many applications need to access objects under them</p>
    <p>Solution  Fine tune both host and application profiles (e.g., do firefox need /proc/ r)  Avoid sharing</p>
    <p>Device namespaces to isolate /dev? (e.g., NTP  /dev/pps[0-9]* rw)  Multi-layered filesystems to conceal /proc?</p>
  </div>
  <div class="page">
    <p>Evaluation: Performance</p>
    <p>System call latency added due to namespace  Common system calls hooked by LSM (e.g., read, write, mmap, execve)</p>
  </div>
  <div class="page">
    <p>Evaluation: Performance</p>
    <p>System call latency added due to namespace  Common system calls hooked by LSM (e.g., read, write, mmap, execve)</p>
  </div>
  <div class="page">
    <p>Evaluation: Performance</p>
    <p>System call latency added due to namespace  Common system calls hooked by LSM (e.g., read, write, mmap, execve)</p>
    <p>Application performance  Containerized Apache throughput (w and w/o application profile)</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>Existing containers cannot leverage kernel security frameworks to apply local security control  A nave virtualization may break security offered by security frameworks</p>
    <p>The routing based security namespace design preserves security while making kernel security frameworks available to containers</p>
  </div>
  <div class="page">
    <p>Backup Slides</p>
  </div>
  <div class="page">
    <p>SELinux Namespace</p>
    <p>Routing based design largely apply, but  Challenge 1: filesystem labeling  Subjects and objects will have multiple labels?</p>
    <p>Multiple security attributes  Runtime manipulation of security attributes without reboot</p>
    <p>Challenge 2: policy conflict detection  Statically decide potential labels for subjects?</p>
    <p>Hard to predict due to the complexity of transition rules</p>
  </div>
</Presentation>
