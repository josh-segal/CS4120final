<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Jigsaw: Efficient, Loweffort Mashup Isolation</p>
    <p>James Mickens and Matthew Finifter Microsoft Research UC Berkeley</p>
  </div>
  <div class="page">
    <p>The joy of creating a new webapp</p>
  </div>
  <div class="page">
    <p>Mashup Security</p>
    <p>Isolate third-party code</p>
    <p>Control what you share with it</p>
    <p>And make it easy for developers!</p>
  </div>
  <div class="page">
    <p>Talk Outline  Previous approaches</p>
    <p>Goals</p>
    <p>Design</p>
    <p>Implementation</p>
    <p>Evaluation</p>
  </div>
  <div class="page">
    <p>Previous approaches: do nothing</p>
    <p>+ Ease of development - Zero isolation</p>
  </div>
  <div class="page">
    <p>Previous approaches: iframes plus postMessage</p>
    <p>+ Standardized + Strong isolation + Simple string-based programming model - Asynchronous programming model - Need to layer on top of postMessage - Performance overhead of object marshaling</p>
  </div>
  <div class="page">
    <p>Previous approaches: mashup isolation framework</p>
    <p>Caja, Object Views, ConScript, ... + Built with security in mind - Policies tend to be complex - Varying performance and compatibility implications</p>
  </div>
  <div class="page">
    <p>Goals  Isolation by default</p>
    <p>Simplicity</p>
    <p>Efficient, synchronous sharing</p>
    <p>Fail-safe legacy code</p>
  </div>
  <div class="page">
    <p>Design: terminology  Principal is an</p>
    <p>instance of content  May include HTML,</p>
    <p>CSS, JS  Top-level is integrator  Each principal is</p>
    <p>placed in a box, the unit of isolation</p>
  </div>
  <div class="page">
    <p>What's in a box?  JavaScript namespace  DOM tree  Event loop  Visual region  Network connection  Local storage area</p>
  </div>
  <div class="page">
    <p>box != iframe  Same-origin boxes isolated by default</p>
    <p>Enables fault isolation, privilege separation</p>
    <p>Box permissions nest  e.g., monotonically decreasing network permission</p>
    <p>Synchronous communication</p>
  </div>
  <div class="page">
    <p>The horror of asynchrony  N items to process with external library</p>
    <p>function process(data, i) { if (i &lt; N) { externalLibrary.process(data[i], function(result) {</p>
    <p>processed[i] = result process(data, i+1)</p>
    <p>} ) } } process(data, 0)</p>
    <p>for i in 0 .. N-1 processed[i] = externalLibrary.process(data[i])</p>
  </div>
  <div class="page">
    <p>Design: principal objects  Each principal has a principal object</p>
    <p>Defines the public interface  Jigsaw.getParentPrincipal()  Jigsaw.principals</p>
  </div>
  <div class="page">
    <p>Design: DOM tree and visual field  Each box can have a DOM tree and</p>
    <p>associated visual field.  Visual field: width, height, location (within</p>
    <p>parent), z-order  Granted using CSS-style syntax  Parent can change child visual field  Child changes validated by parent</p>
  </div>
  <div class="page">
    <p>Design: network access  Granted from parent to child  Specified as a whitelist of accessible</p>
    <p>domains  Wildcards allowed</p>
    <p>e.g., *.foo.com or cache.*.bar.com  Monotonically decreasing</p>
  </div>
  <div class="page">
    <p>Design: JavaScript namespace  public/private visibility modifiers  Define the subset of an object graph that</p>
    <p>crosses an isolation boundary  private by default</p>
    <p>Principal X passes {public p: &quot;foo&quot;, private q: &quot;bar&quot;}</p>
    <p>to principal Y</p>
    <p>Principal Y sees {p: &quot;foo&quot;}</p>
  </div>
  <div class="page">
    <p>Design: Surrogate objects  Surrogate objects enforce private/public  Jigsaw passes surrogate, not raw object,</p>
    <p>between boxes  Initially empty object, with public properties added</p>
    <p>Getter for public p of obj returns createSurrogate(obj.p)</p>
    <p>Setter for public p of obj executes obj.p = createSurrogate(newVal)</p>
  </div>
  <div class="page">
    <p>Design summary  Isolation by default using boxes  Principal object defines interface  Only public properties traverse box</p>
    <p>boundary  Resources (e.g., network, visual field)</p>
    <p>granted by parent to child</p>
  </div>
  <div class="page">
    <p>Implementation  Jigsaw-to-JavaScript compiler</p>
    <p>Translate private/public keywords into operations on per-object visibility metadata map</p>
    <p>Adds calls to create surrogates  Maintain object ids and box ids</p>
    <p>Client-side JavaScript library  Defines management interface (e.g., Jigsaw. createBox())</p>
    <p>evals box code in context with redefined globals  Redefined globals implement security checks</p>
    <p>Current prototype implements most (but not all) of the design</p>
  </div>
  <div class="page">
    <p>Evaluation: porting effort  Many libraries already have a de facto</p>
    <p>principal object -- mark it as such  Mark properties as public where appropriate  Use a modified runtime to log private objects</p>
    <p>crossing boundaries, instead of disallowing them</p>
    <p>No explicit sanitization necessary</p>
  </div>
  <div class="page">
    <p>Evaluation: performance</p>
  </div>
  <div class="page">
    <p>Evaluation: performance</p>
  </div>
  <div class="page">
    <p>Related work  ADsafe  FBJS  Dojo Secure  Caja  Secure ECMAScript  PostMash  Object Views  ConScript</p>
  </div>
  <div class="page">
    <p>Conclusion  Jigsaw: a new mashup isolation framework  Policies are simple to write</p>
    <p>public/private objects  high-level browser resources</p>
    <p>Synchronous programming model  Automatic surrogates</p>
  </div>
  <div class="page">
    <p>Thank you Matthew Finifter finifter@cs.berkeley.edu James Mickens mickens@microsoft.com</p>
  </div>
</Presentation>
