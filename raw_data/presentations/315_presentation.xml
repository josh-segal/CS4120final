<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Model-based Testing Without a Model: Assessing Portability in the Seattle Testbed</p>
    <p>Justin Cappos and Jonathan Jacky</p>
    <p>University of Washington Seattle, Washington USA</p>
    <p>justinc@cs.washington.edu, jon@u.washington.edu</p>
    <p>with special thanks to Jeff Rasley</p>
  </div>
  <div class="page">
    <p>Seattle Testbed</p>
    <p>Seattle distributed computing testbed https://seattle.cs.washington.edu/</p>
    <p>Seattle programs</p>
    <p>Coded in a Python subset</p>
    <p>Use a special API</p>
    <p>Run in a sandbox, a safe execution environment</p>
    <p>Run on many platforms: Windows, Linux, Mac OS X, BSD, various mobile . . .</p>
  </div>
  <div class="page">
    <p>Portability</p>
    <p>Seattle programs should be portable: behave the same on all platforms.</p>
    <p>Portability has proved to be a problem</p>
    <p>On other systems (Java, POSIX, . . . )</p>
    <p>On Seattle itself (file system, network . . . )</p>
  </div>
  <div class="page">
    <p>Seattle API</p>
    <p>Simple API: 32 functions</p>
    <p>File I/O: 6 functions</p>
    <p>Locks: 3</p>
    <p>Debugging: 2</p>
    <p>Threads: 3</p>
    <p>Code verification and evaluation: 2</p>
    <p>Network DNS, UDP, TCP: 13</p>
    <p>Accounting: 2</p>
    <p>Random bytes (crypto): 1</p>
  </div>
  <div class="page">
    <p>Testing the Seattle API</p>
    <p>Unit tests are not enough. We need</p>
    <p>Many interleavings (to check different orders)</p>
    <p>Handle nondeterminism (for network API)</p>
    <p>We chose model-based testing.</p>
  </div>
  <div class="page">
    <p>Traces</p>
    <p>Traces are samples of behavior:</p>
    <p>(listfiles_start, ()),</p>
    <p>(listfiles_finish, ([&quot;junk.testfile&quot;],)),</p>
    <p>(removefile_start, (&quot;junk.testfile&quot;,)),</p>
    <p>(removefile_finish, ()),</p>
    <p>(openfile_start, (&quot;junk.testfile&quot;, True)),</p>
    <p>(openfile_finish, (fileobject0)),</p>
    <p>(filewriteat_start, (fileobject0, &quot;hello world!!!&quot;, 0)),</p>
    <p>(filewriteat_finish, ()),</p>
    <p>(filewriteat_start, (fileobject0, &quot;ked&quot;, 9)),</p>
    <p>(filewriteat_finish, ()),</p>
    <p>(filereadat_start, (fileobject0, None, 0)),</p>
    <p>(filereadat_finish, (&quot;hello worked!!&quot;),</p>
    <p>(fileclose_start, (fileobject0)),</p>
    <p>(fileclose_finish, ())</p>
  </div>
  <div class="page">
    <p>Model-based testing</p>
    <p>Model Program</p>
    <p>Offline Test Generator</p>
    <p>Traces</p>
    <p>Traces</p>
    <p>Offline Test Runner</p>
    <p>Test Harness</p>
    <p>Implementation</p>
    <p>Traces</p>
    <p>Model Program</p>
    <p>On-the-fly Test Runner</p>
    <p>Test Harness</p>
    <p>Implementation</p>
    <p>Traces</p>
  </div>
  <div class="page">
    <p>Model-based testing with trace capture / replay</p>
    <p>Model Program</p>
    <p>Offline Test Generator</p>
    <p>Traces</p>
    <p>Reference Implementation</p>
    <p>Interposition</p>
    <p>Traces</p>
    <p>Traces</p>
    <p>Offline Test Runner</p>
    <p>Test Harness</p>
    <p>Implementation</p>
    <p>Traces</p>
    <p>Model Program</p>
    <p>On-the-fly Test Runner</p>
    <p>Test Harness</p>
    <p>Implementation</p>
    <p>Traces</p>
  </div>
  <div class="page">
    <p>Experience</p>
    <p>Technology demonstration:</p>
    <p>File system API for next Seattle version</p>
    <p>Capture traces (via interposition) on Windows, Mac, Linux</p>
    <p>Captured traces while executing unit tests for file system API</p>
    <p>Replay traces on Windows, Mac, Linux</p>
    <p>Discovered, fixed several portability problems involving filenames</p>
  </div>
  <div class="page">
    <p>Future work</p>
    <p>Test with traces captured in the wild</p>
    <p>Test entire Seattle API</p>
    <p>Compare to offline testing, on-the-fly testing</p>
    <p>Consider testing other systems with portability requirements</p>
    <p>Seattle distributed computing testbed https://seattle.cs.washington.edu/</p>
    <p>PyModel model-based testing framework http://staff.washington.edu/jon/pymodel/www/</p>
  </div>
</Presentation>
