<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>UC Berkeley</p>
    <p>Ari Rabkin, Wei Xu, Avani Wildani, Armando Fox, David Patterson and Randy Katz</p>
    <p>SLAML October 3, 2010</p>
    <p>A Graphical representation for identifier structure in application logs</p>
  </div>
  <div class="page">
    <p>Motivation &amp; Summary</p>
    <p>Log analysis is fundamentally constrained by the information content of the underlying logs</p>
    <p>Need tools to help developers spot flaws in their loging</p>
    <p>We propose a compact graph-based representation for log structure</p>
    <p>Differs from previous work in analyzing logging behavior, not logs of particular executions</p>
  </div>
  <div class="page">
    <p>Focus on identifers  We focus on identifiers in logs</p>
    <p>Variable fields that refer to entities in a system.  Can be operationally defined as variable fields</p>
    <p>with increasingly many possible strings [Xu 09]  Previous work has modeled logs as sets of</p>
    <p>concurrent state machines. [Fu 09, Tan 08]  Identifiers tie together messages that correlate to</p>
    <p>the same state machine</p>
  </div>
  <div class="page">
    <p>Some defects</p>
    <p>Imagine a transaction processing system.</p>
  </div>
  <div class="page">
    <p>Missing IDs</p>
    <p>Imagine a transaction processing system.</p>
    <p>No ID</p>
  </div>
  <div class="page">
    <p>Inconsistent IDs</p>
    <p>Imagine a transaction processing system.</p>
    <p>identification</p>
  </div>
  <div class="page">
    <p>Ambiguous IDs</p>
    <p>Imagine a transaction processing system.</p>
    <p>Ambiguous identification</p>
  </div>
  <div class="page">
    <p>Goals</p>
    <p>Seek a compact representation for logs  Make common logging flaws visible  Facilitate comparison across related logs  Not depend on details of particular</p>
    <p>execution traces</p>
  </div>
  <div class="page">
    <p>A real example</p>
    <p>!</p>
    <p>&quot;#$%&amp;'&amp;#$()*&amp;+</p>
    <p>'&amp;#$(</p>
    <p>,</p>
    <p>-.</p>
    <p>/</p>
    <p>!0 !1</p>
    <p>!</p>
    <p>!2</p>
    <p>!/!!</p>
    <p>!3</p>
    <p>!,</p>
    <p>:%;(</p>
    <p>&lt;99+=&gt;9</p>
    <p>?#@</p>
    <p>Hadoop datanode logs from Yahoo! M45 cluster</p>
  </div>
  <div class="page">
    <p>Definitions</p>
    <p>Definitions:  A log message is a string.  Each log message is associated with a</p>
    <p>specific message type.  All messages of a type are structurally</p>
    <p>identical. (same set of identifier fields)  Identifiers belong to identifier classes.</p>
  </div>
  <div class="page">
    <p>Assumptions</p>
    <p>Assumptions  Have representative sample of logs  Can find message type from message  Can extract identifiers from messages  Have identifier class for each identifier field in</p>
    <p>a message type</p>
  </div>
  <div class="page">
    <p>Core structure</p>
    <p>Ex: Starting task t123 on node n Task ID Host name</p>
    <p>Starting task Host name Task ID</p>
    <p>Formally: a graph with V = { identifier classes} U {message types} E = { (i,m) | message m includes an identifier of class i}</p>
  </div>
  <div class="page">
    <p>Subsumption</p>
    <p>Sometimes, one identifier includes another.</p>
    <p>Model this by adding a graph edge between two identifiers if one inclues another.</p>
    <p>Call this subsumption  E.g., URLs subsume host names</p>
    <p>Host name URL</p>
  </div>
  <div class="page">
    <p>Frequency</p>
    <p>Can encode frequency information on diagram</p>
    <p>Rare Common Medium</p>
    <p>Scaled relative to most-frequent message or identifier</p>
    <p>-correction: scale by sqrt(freq / Max(freq))</p>
  </div>
  <div class="page">
    <p>Ubiquity</p>
    <p>Can show information about joint IDmessage statistics</p>
    <p>Want to distinguish (ab)normal messages  Defn:</p>
    <p>The ubiquity of identifier class C for message type T is the fraction of identifiers belonging to class C appearing in messages of type T.</p>
    <p>Orthogonal to frequency of message</p>
  </div>
  <div class="page">
    <p>Drawing ubiquity</p>
    <p>Line thickness proportional to ubiquity</p>
    <p>Abnormal failure Task ID Starting task</p>
  </div>
  <div class="page">
    <p>Diagramming defects</p>
    <p>Missing ID: Message 1 Message 2</p>
    <p>Inconsistent IDs Message 1 Message 2</p>
    <p>ID 1 ID 2</p>
  </div>
  <div class="page">
    <p>Our prototype</p>
    <p>Have a prototype that converts logs into .dot files for rendering with GraphViz</p>
    <p>Pluggable parsers  Omit message strings; output alongside</p>
  </div>
  <div class="page">
    <p>A real example, part 2</p>
    <p>!</p>
    <p>&quot;#$%&amp;'&amp;#$()*&amp;+</p>
    <p>'&amp;#$(</p>
    <p>,</p>
    <p>-.</p>
    <p>/</p>
    <p>!0 !1</p>
    <p>!</p>
    <p>!2</p>
    <p>!/!!</p>
    <p>!3</p>
    <p>!,</p>
    <p>:%;(</p>
    <p>&lt;99+=&gt;9</p>
    <p>?#@</p>
    <p>Hadoop datanode logs from Yahoo! M45 cluster</p>
  </div>
  <div class="page">
    <p>Inconsistent identifiers</p>
    <p>Logs from Chukwa, an open-source log collection system [Boulon 08, Rabkin 10]</p>
    <p>!&quot;#$%&amp;'()</p>
    <p>*+</p>
    <p>,</p>
    <p>!&quot;#$%&amp;'.)/01'2$%2&amp;3</p>
    <p>-4</p>
    <p>-,</p>
    <p>,+ -8</p>
    <p>Old New</p>
    <p>!</p>
    <p>&quot;#$%&amp;'()*</p>
    <p>+,</p>
    <p>-.</p>
    <p>-/ -0</p>
    <p>&quot;#$%&amp;'(1*234(5%&amp;5'6</p>
    <p>+0</p>
    <p>+!</p>
    <p>/8</p>
    <p>+&lt;</p>
  </div>
  <div class="page">
    <p>Ambiguous identifiers</p>
    <p>Logs from SCADS, an experimental system at Berkeley</p>
  </div>
  <div class="page">
    <p>Ambiguous identifiers</p>
    <p>Logs from SCADS, an experimental system at Berkeley</p>
  </div>
  <div class="page">
    <p>Comparing logs</p>
    <p>Comparing Hadoop JobTracker logs</p>
    <p>!</p>
    <p>&quot;#$</p>
    <p>%&amp;'(</p>
    <p>)*</p>
    <p>+,,-./, )0</p>
    <p>)4</p>
    <p>!6</p>
    <p>)1</p>
    <p>!3</p>
    <p>!2</p>
    <p>!4</p>
    <p>!*</p>
    <p>)!1)</p>
    <p>)6</p>
    <p>*</p>
    <p>&lt;#',=&amp;.</p>
    <p>)3</p>
    <p>&gt;?#8(</p>
    <p>*1</p>
    <p>*4 **</p>
    <p>@ABC?D-=,</p>
    <p>*!</p>
    <p>Missing ID/message</p>
    <p>M45 cluster (professional management)</p>
    <p>!</p>
    <p>&quot;#$</p>
    <p>%&amp;'(</p>
    <p>)*</p>
    <p>*+</p>
    <p>,,</p>
    <p>)! *!</p>
    <p>*)</p>
    <p>-.</p>
    <p>!*</p>
    <p>).</p>
    <p>*/</p>
    <p>,)</p>
    <p>-!</p>
    <p>)5</p>
    <p>*,</p>
    <p>*</p>
    <p>)</p>
    <p>)/</p>
    <p>,*</p>
    <p>-+</p>
    <p>*6</p>
    <p>)6 !.</p>
    <p>!,</p>
    <p>!- !5</p>
    <p>+!</p>
    <p>+*</p>
    <p>**</p>
    <p>*</p>
    <p>.*</p>
    <p>+.</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>Aspects of log structure can be encoded in succinct diagrams.</p>
    <p>Our choice of representation captures:  missing identifiers, inconsistent identifiers, and</p>
    <p>ambiguous identifiers  How much detail about different topics  Ratio of routine vs peculiar messages + types</p>
    <p>Usable on real systems, even with limited understanding of system and logs</p>
    <p>No need for temporal information</p>
  </div>
  <div class="page">
    <p>Questions?</p>
  </div>
  <div class="page">
    <p>A note on parsing</p>
    <p>I used semi-hand-written parsers.  Wrote rules to tag identifiers:</p>
    <p>e.g., &quot;job_...&quot; is a job ID  Tokenized lines, identified line by token</p>
    <p>sequence + constants  Special cases for numbers</p>
    <p>Explored using program analysis to extract messages  Came out ugly, but cleanable.  Need to fix names  Need to merge some categories</p>
  </div>
  <div class="page">
    <p>Related work</p>
    <p>Xu 09  State machines  Entropy as metric?</p>
  </div>
</Presentation>
