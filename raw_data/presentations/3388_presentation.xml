<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>ROTE: Rollback Protection for Trusted Execution Sinisa Matetic, Mansoor Ahmed, Kari Kostiainen, Aritra Dhar, David Sommer, Arthur Gervais, Ari Juels, Srdjan Capkun</p>
    <p>Sinia Mateti</p>
    <p>ETH Zurich Institute of Information Security</p>
    <p>August 18th, 2017</p>
  </div>
  <div class="page">
    <p>/ 46Sinisa Matetic - ROTE: Rollback Protection for Trusted Execution 2</p>
    <p>Intel Software Guard Extensions (SGX) - Intels new architecture containing new instructions and protective mechanism in the processor</p>
    <p>Regular systems are vulnerable to various attacks</p>
    <p>Intel SGX</p>
    <p>HW</p>
    <p>OS</p>
    <p>APP APP</p>
    <p>HW</p>
    <p>OS</p>
    <p>APP APP</p>
    <p>Introduction</p>
  </div>
  <div class="page">
    <p>/ 46Sinisa Matetic - ROTE: Rollback Protection for Trusted Execution 3 Images taken from software.intel.com</p>
    <p>Enables trusted execution of security-critical application code - SGX enclaves</p>
    <p>Isolation from the untrusted system software, other enclaves and peripherals Security perimeter is the processor itself</p>
    <p>Introduction Intel SGX</p>
  </div>
  <div class="page">
    <p>/ 46Sinisa Matetic - ROTE: Rollback Protection for Trusted Execution 4</p>
    <p>Sealing - storing data for persistent storage across executions which gives confidentiality and authentication - but what about integrity?</p>
    <p>Processors are equipped with certified cryptographic keys - enables remotely verifiable attestation statements</p>
    <p>Introduction Intel SGX</p>
  </div>
  <div class="page">
    <p>/ 46Sinisa Matetic - ROTE: Rollback Protection for Trusted Execution 5</p>
    <p>Intel SGX</p>
    <p>+ and + Isolates execution, can handle untrusted OS + Can run many enclaves in parallel + Supports attestation + Supports sealing + Unlike with TPM, security boundary is the processor</p>
    <p>- It is not system-wide (unlike TrustZone) - No direct access to peripherals - Side Channels [many recent works] - No Rollback Protection</p>
  </div>
  <div class="page">
    <p>/ 46Sinisa Matetic - ROTE: Rollback Protection for Trusted Execution 6</p>
    <p>Please store message1</p>
    <p>Target Adversary</p>
    <p>Rollback attack</p>
    <p>I have stored message1</p>
    <p>Target Adversary Enclave OS</p>
    <p>Example</p>
  </div>
  <div class="page">
    <p>/ 46Sinisa Matetic - ROTE: Rollback Protection for Trusted Execution 7</p>
    <p>I have stored message1</p>
    <p>Target Adversary</p>
    <p>Rollback attack</p>
    <p>Enclave OS</p>
    <p>Example</p>
  </div>
  <div class="page">
    <p>/ 46Sinisa Matetic - ROTE: Rollback Protection for Trusted Execution 8</p>
    <p>Please store message2</p>
    <p>Target Adversary</p>
    <p>Rollback attack</p>
    <p>Enclave OS</p>
    <p>Example</p>
  </div>
  <div class="page">
    <p>/ 46Sinisa Matetic - ROTE: Rollback Protection for Trusted Execution 9</p>
    <p>I have stored message2</p>
    <p>Target Adversary</p>
    <p>Rollback attack</p>
    <p>Enclave OS</p>
    <p>Example</p>
  </div>
  <div class="page">
    <p>/ 46Sinisa Matetic - ROTE: Rollback Protection for Trusted Execution 10</p>
    <p>Target Adversary</p>
    <p>Rollback attack</p>
    <p>Enclave OS</p>
    <p>Example</p>
  </div>
  <div class="page">
    <p>/ 46Sinisa Matetic - ROTE: Rollback Protection for Trusted Execution 11</p>
    <p>Could you give me the latest message?</p>
    <p>Target Adversary</p>
    <p>Rollback attack</p>
    <p>Enclave OS</p>
    <p>Example</p>
  </div>
  <div class="page">
    <p>/ 46Sinisa Matetic - ROTE: Rollback Protection for Trusted Execution 12</p>
    <p>Sure. Heres Message1</p>
    <p>Target Adversary</p>
    <p>Rollback attack</p>
    <p>Enclave OS</p>
    <p>Example</p>
  </div>
  <div class="page">
    <p>/ 46Sinisa Matetic - ROTE: Rollback Protection for Trusted Execution 13</p>
    <p>Intel SGX - Protecting the Local State? Rollback attack</p>
    <p>In a rollback attack a malicious OS replaces the latest sealed data with an older encrypted and authenticated version</p>
    <p>Another way to violate state integrity is to create two instances of the same enclave and route update requests to one instance and read requests to the other (restart, terminate, ).</p>
    <p>Enclaves cannot detect replay, because the processor does not hold persistent state across enclave executions (and platform reboots)</p>
  </div>
  <div class="page">
    <p>/ 46Sinisa Matetic - ROTE: Rollback Protection for Trusted Execution 14</p>
    <p>Attacker</p>
    <p>Example scenario Rollback attack</p>
    <p>SGX</p>
    <p>Imagine a financial application where account balance is enforced by SGX</p>
    <p>State 1: Initial bank account balance: 300</p>
  </div>
  <div class="page">
    <p>/ 46Sinisa Matetic - ROTE: Rollback Protection for Trusted Execution 15</p>
    <p>Attacker User 1 1. Send</p>
    <p>Imagine a financial application where account balance is enforced by SGX</p>
    <p>State 1: Initial bank account balance: 300</p>
    <p>SGX</p>
    <p>Rollback attack</p>
    <p>Example scenario</p>
  </div>
  <div class="page">
    <p>/ 46Sinisa Matetic - ROTE: Rollback Protection for Trusted Execution 16</p>
    <p>Attacker User 1 1. Send</p>
    <p>Imagine a financial application where account balance is enforced by SGX</p>
    <p>State 2: Initial bank account balance: 200</p>
    <p>SGX</p>
    <p>Rollback attack</p>
    <p>Example scenario</p>
  </div>
  <div class="page">
    <p>/ 46Sinisa Matetic - ROTE: Rollback Protection for Trusted Execution 17</p>
    <p>Attacker User 1</p>
    <p>User 2</p>
    <p>Imagine a financial application where account balance is enforced by SGX</p>
    <p>State 2: Initial bank account balance: 200</p>
    <p>SGX</p>
    <p>Rollback attack</p>
    <p>Example scenario</p>
  </div>
  <div class="page">
    <p>/ 46Sinisa Matetic - ROTE: Rollback Protection for Trusted Execution 18</p>
    <p>Attacker User 1</p>
    <p>User 2</p>
    <p>Imagine a financial application where account balance is enforced by SGX</p>
    <p>State 3: Initial bank account balance: 0</p>
    <p>SGX</p>
    <p>Rollback attack</p>
    <p>Example scenario</p>
  </div>
  <div class="page">
    <p>/ 46Sinisa Matetic - ROTE: Rollback Protection for Trusted Execution 19</p>
    <p>Attacker User 1</p>
    <p>User 2</p>
    <p>Imagine a financial application where account balance is enforced by SGX</p>
    <p>State 3: Initial bank account balance: 0</p>
    <p>SGX</p>
    <p>Rollback attack</p>
    <p>Example scenario</p>
  </div>
  <div class="page">
    <p>/ 46Sinisa Matetic - ROTE: Rollback Protection for Trusted Execution 20</p>
    <p>Attacker User 1</p>
    <p>User 2</p>
    <p>Imagine a financial application where account balance is enforced by SGX</p>
    <p>State 1: Initial bank account balance: 300</p>
    <p>SGX</p>
    <p>Rollback attack</p>
    <p>Example scenario</p>
  </div>
  <div class="page">
    <p>/ 46Sinisa Matetic - ROTE: Rollback Protection for Trusted Execution 21</p>
    <p>Attacker User 1</p>
    <p>User 2</p>
    <p>User 3</p>
    <p>Imagine a financial application where account balance is enforced by SGX</p>
    <p>State 1: Initial bank account balance: 300</p>
    <p>SGX</p>
    <p>Rollback attack</p>
    <p>Example scenario</p>
  </div>
  <div class="page">
    <p>/ 46Sinisa Matetic - ROTE: Rollback Protection for Trusted Execution 22</p>
    <p>Attacker User 1</p>
    <p>User 2</p>
    <p>User 3</p>
    <p>Imagine a financial application where account balance is enforced by SGX</p>
    <p>State 2: Initial bank account balance: 200</p>
    <p>SGX</p>
    <p>Rollback attack</p>
    <p>Example scenario</p>
  </div>
  <div class="page">
    <p>/ 46Sinisa Matetic - ROTE: Rollback Protection for Trusted Execution 23</p>
    <p>New security model for reasoning about the integrity and freshness of SGX applications - identified security weaknesses in existing SGX systems.</p>
    <p>SGX counter experiments showing limitation of the service</p>
    <p>Novel approach of realising rollback protection by storing enclave-specific counters in a distributed system</p>
    <p>Implemented ROTE system that ensures integrity and freshness of application data in a powerful adversarial model.</p>
    <p>Experimental evaluation showing only a small performance overhead for our system - in a low-latency network state update overhead is only 1-2 ms</p>
    <p>Main contributions of this work ROTE</p>
  </div>
  <div class="page">
    <p>/ 46Sinisa Matetic - ROTE: Rollback Protection for Trusted Execution 24</p>
    <p>Adversary</p>
    <p>Store &lt;&lt; Messagen , n &gt;&gt;</p>
    <p>Target</p>
    <p>Increment MC</p>
    <p>Protected Space</p>
    <p>Example solution Rollback attack</p>
    <p>Enclave OS</p>
  </div>
  <div class="page">
    <p>/ 46Sinisa Matetic - ROTE: Rollback Protection for Trusted Execution 25</p>
    <p>Target Adversary</p>
    <p>Rollback attack</p>
    <p>Example solution</p>
    <p>Enclave OS</p>
  </div>
  <div class="page">
    <p>/ 46Sinisa Matetic - ROTE: Rollback Protection for Trusted Execution 26</p>
    <p>Here is &lt;&lt; Messagex , x &gt;&gt;</p>
    <p>Target Adversary</p>
    <p>Protected Space MC = n</p>
    <p>Rollback attack</p>
    <p>Example solution</p>
    <p>Enclave OS</p>
  </div>
  <div class="page">
    <p>/ 46Sinisa Matetic - ROTE: Rollback Protection for Trusted Execution 27</p>
    <p>Here is &lt;&lt; Messagex , x &gt;&gt;</p>
    <p>Target Adversary</p>
    <p>Protected Space MC = n</p>
    <p>Is x = n?</p>
    <p>Enclave OS</p>
    <p>Rollback attack</p>
    <p>Example solution</p>
  </div>
  <div class="page">
    <p>/ 46Sinisa Matetic - ROTE: Rollback Protection for Trusted Execution 28</p>
    <p>Existing solutions To address rollback attacks, two basic approaches are known: - use non-volatile memory element to store the state - maintain integrity information in a separate trusted server</p>
    <p>SGX supports Monotonic Counter service - limited security guarantees - poor performance (limits high-throughput transactions)</p>
    <p>Leveraging Trusted Platform Modules (TPMs) - similar limitations</p>
  </div>
  <div class="page">
    <p>/ 46Sinisa Matetic - ROTE: Rollback Protection for Trusted Execution 29</p>
    <p>Solution provided by Intel SGX  SGX supports Monotonic Counter service</p>
    <p>Stored in an off-CPU memory Security concern: counters stored in a flash memory that is also used by the BIOS, connected via an SPI bus. This is a passive component.</p>
    <p>Performance concerns: how practical is this?</p>
  </div>
  <div class="page">
    <p>/ 46Sinisa Matetic - ROTE: Rollback Protection for Trusted Execution 30</p>
    <p>Experiments - SGX counter service Counter increment operation took 80 - 250 ms (model dependent). Counter read operations took 60-140 ms</p>
    <p>1.05 M writes render the NV counter (memory) unusable (wear) Reinstalling the SGX Platform Software (PSW) or removing the BIOS battery deletes all counters</p>
    <p>After reinstalling the PSW the platform software connects to Intel server. If connection not available, the counter service is unavailable</p>
    <p>Updates of an enclave every 250 ms =&gt; counters become unusable in few days. - with one increment per minute, the counters are exhausted in two years</p>
  </div>
  <div class="page">
    <p>/ 46Sinisa Matetic - ROTE: Rollback Protection for Trusted Execution 31</p>
    <p>ROTE</p>
    <p>SGX: System / Attacker Model Attacker: - enclave scheduling, - platform reboots, - control of the full software stack, - control over the complete communication channel, and - compromising the SGX hardware</p>
    <p>One can achieve all-or-nothing rollback - the only way to violate data integrity is to reset the entire group to its initial state</p>
  </div>
  <div class="page">
    <p>/ 46Sinisa Matetic - ROTE: Rollback Protection for Trusted Execution 32</p>
    <p>ROTE</p>
    <p>Our Approach Intuition: A single platform cannot efficiently prevent rollback, but in many practical scenarios, multiple processors can be enrolled to assist each other</p>
    <p>SGX</p>
    <p>SGX</p>
    <p>SGX</p>
    <p>SGX</p>
    <p>SGX</p>
    <p>SGX</p>
  </div>
  <div class="page">
    <p>/ 46Sinisa Matetic - ROTE: Rollback Protection for Trusted Execution 33</p>
    <p>ROTE</p>
    <p>Our Approach We try to build a distributed system where each participating nodes provides state protection for all other nodes</p>
    <p>SGX SGX</p>
    <p>SGX</p>
    <p>SGX</p>
    <p>SGX</p>
    <p>SGX</p>
  </div>
  <div class="page">
    <p>/ 46Sinisa Matetic - ROTE: Rollback Protection for Trusted Execution 34</p>
    <p>ROTE</p>
    <p>Our Approach When an enclave updates its state, it stores a counter to a set of enclaves running on assisting processors</p>
    <p>SGX SGX</p>
    <p>SGX</p>
    <p>SGX</p>
    <p>SGX</p>
    <p>SGX State update</p>
  </div>
  <div class="page">
    <p>/ 46Sinisa Matetic - ROTE: Rollback Protection for Trusted Execution 35</p>
    <p>ROTE</p>
    <p>Our Approach When the enclave needs to recover its state, it obtains counter values from assisting enclaves to verify that the recovered state data is of the latest version</p>
    <p>SGX SGX</p>
    <p>SGX</p>
    <p>SGX</p>
    <p>SGX</p>
    <p>SGX</p>
    <p>Restart Retrieve state</p>
    <p>Check counter State 1</p>
  </div>
  <div class="page">
    <p>/ 46Sinisa Matetic - ROTE: Rollback Protection for Trusted Execution 36</p>
    <p>ROTE</p>
    <p>Challenges</p>
  </div>
  <div class="page">
    <p>/ 46Sinisa Matetic - ROTE: Rollback Protection for Trusted Execution 37</p>
    <p>System architecture Multiple user applications with matching Application-Specific Enclave (ASE) System service, Rollback Enclave (RE), implements ROTE library that ASEs use The design choice of introducing a dedicated system service (RE) hides the distributed counter maintenance from the applications</p>
    <p>ROTE</p>
    <p>OS</p>
    <p>Platform A</p>
    <p>ASEA1 ROTE lib ROTE lib</p>
    <p>ASEAi REA Platform B</p>
    <p>ROTE System (TCB) 3rd Party Development</p>
  </div>
  <div class="page">
    <p>/ 46Sinisa Matetic - ROTE: Rollback Protection for Trusted Execution 38</p>
    <p>ASE start/read protocolRE restart protocol ASE State update protocol</p>
    <p>ASEA1ASEA1 Rollback EnclaveB Rollback EnclaveB</p>
    <p>EchoB</p>
    <p>Rollback Enclavei Rollback Enclavei</p>
    <p>signed (MCA)</p>
    <p>...</p>
    <p>updateGroupCounterTable()</p>
    <p>Echoi</p>
    <p>RESPONSE</p>
    <p>Rollback EnclaveA Rollback EnclaveA</p>
    <p>incrementASEA1Counter(); updateLocalASECounterTable();</p>
    <p>increaseMC();2</p>
    <p>signed (MCA)</p>
    <p>verify final ACKs(); acceptNewState();</p>
    <p>store&amp;seal();</p>
    <p>acceptNewState(); store&amp;seal();</p>
    <p>REQUEST LOCAL ENTITY EXTERNAL ENTITY</p>
    <p>verify Echoes returned EchoB</p>
    <p>check returned Echoi for valididity</p>
    <p>returned Echoi</p>
    <p>final ACKB</p>
    <p>final ACKi</p>
    <p>ASEA1ASEA1 Rollback EnclaveA Rollback EnclaveA</p>
    <p>getASEA1Counter()</p>
    <p>CounterASEA1</p>
    <p>Operating system</p>
    <p>Operating system</p>
    <p>requestLocalState()</p>
    <p>unsealState(); retrieveASEcounter()</p>
    <p>compare counter from the unsealed state with counter received from REA</p>
    <p>REQUEST RESPONSE</p>
    <p>Rollback Enclavei Rollback Enclavei</p>
    <p>...</p>
    <p>LOCAL ENTITY EXTERNAL ENTITY</p>
    <p>OfferSeal(ASEA1,seal) checkLocalASECounterTable()</p>
    <p>RE restart protocol STEPS 4-64</p>
    <p>Rollback EnclaveA Rollback EnclaveA</p>
    <p>Rollback EnclaveB Rollback EnclaveB</p>
    <p>getMC()</p>
    <p>signed MC(REA), signed MC(all)</p>
    <p>Operating system</p>
    <p>Operating system</p>
    <p>requestLocalState()</p>
    <p>OfferSeal(REA,seal) unsealState(); extract MC</p>
    <p>Rollback Enclavei Rollback Enclavei</p>
    <p>...</p>
    <p>getMC()</p>
    <p>...</p>
    <p>checkGroupCounterTable()</p>
    <p>signed MC(REA), signed MC(all)</p>
    <p>compare MC from sealed state with max(MC)</p>
    <p>REQUEST RESPONSE</p>
    <p>LOCAL ENTITY EXTERNAL ENTITY</p>
    <p>verify final ACKs(); acceptNewState(); store&amp;seal(); continueOperation();</p>
    <p>Session key(s) establishment 1</p>
    <p>ROTE</p>
    <p>System protocols</p>
  </div>
  <div class="page">
    <p>/ 46Sinisa Matetic - ROTE: Rollback Protection for Trusted Execution 39</p>
    <p>unseal</p>
    <p>value</p>
    <p>ask seal</p>
    <p>fail</p>
    <p>halt</p>
    <p>OfferSeal (latest)</p>
    <p>OfferSeal (arbitrary)</p>
    <p>OfferSeal (previous)</p>
    <p>increment</p>
    <p>WriteCounter()</p>
    <p>fail ok</p>
    <p>Seal()</p>
    <p>ok</p>
    <p>ready to update state</p>
    <p>normal operation</p>
    <p>fail</p>
    <p>counter match</p>
    <p>unseal</p>
    <p>unseal</p>
    <p>check counter</p>
    <p>counter match empty</p>
    <p>ReadCounter()</p>
    <p>fail</p>
    <p>Basic intuition: Given a secure storage functionality (abstraction), the RE can verify that its state its the latest and rollback is prevented - First start - Sealing &amp; Unsealing - Forking - Restart</p>
    <p>Security Analysis ROTE</p>
  </div>
  <div class="page">
    <p>/ 46Sinisa Matetic - ROTE: Rollback Protection for Trusted Execution 40</p>
    <p>Security Analysis  Realization of the secure storage functionality as a distributed system - Quorum size - Platform restarts - Forking attacks</p>
    <p>Dependency between the parameters is n=f+2u+1</p>
    <p>ROTE</p>
    <p>ul f 1 ur</p>
    <p>state=1state=2</p>
    <p>state update: 1 state update: 2</p>
    <p>state retrieval</p>
    <p>n</p>
    <p>q</p>
  </div>
  <div class="page">
    <p>/ 46Sinisa Matetic - ROTE: Rollback Protection for Trusted Execution 41</p>
    <p>T im</p>
    <p>e (m</p>
    <p>s)</p>
    <p>Response Time Update Response Time Read</p>
    <p>T im</p>
    <p>e (m</p>
    <p>s) Response Time Update Response Time Read</p>
    <p>ROTE</p>
    <p>Performance evaluation</p>
    <p>T im</p>
    <p>e (m</p>
    <p>s)</p>
    <p>Response Time Update Response Time Read</p>
    <p>Experimental results - state update/read delay.</p>
  </div>
  <div class="page">
    <p>/ 46Sinisa Matetic - ROTE: Rollback Protection for Trusted Execution 42</p>
    <p>ROTE</p>
    <p>Performance evaluation</p>
  </div>
  <div class="page">
    <p>/ 46Sinisa Matetic - ROTE: Rollback Protection for Trusted Execution</p>
    <p>The current SGX design and architecture clearly have some shortcoming that could be addressed in the future to strengthen its position</p>
    <p>Designing a distributed system that is both efficient and satisfies the required security properties proved to be quite a challenge - http://scholar.harvard.edu/files/mickens/files/thesaddestmoment.pdf</p>
    <p>During the whole project we stumbled upon numerous new attack vectors and thus had to change the core work to adapt</p>
    <p>Developing enclaves for Intel SGX is still buggy and cumbersome</p>
    <p>Lessons learnt</p>
  </div>
  <div class="page">
    <p>/ 46Sinisa Matetic - ROTE: Rollback Protection for Trusted Execution 44</p>
    <p>New security model for reasoning about the integrity and freshness of SGX applications - identified security weaknesses in existing SGX systems.</p>
    <p>SGX counter experiments showing limitation of the service</p>
    <p>Novel approach of realising rollback protection by storing enclave-specific counters in a distributed system</p>
    <p>Implemented ROTE system that ensures integrity and freshness of application data in a powerful adversarial model.</p>
    <p>Experimental evaluation showing only a small performance overhead for our system - in a low-latency network state update overhead is only 1-2 ms</p>
    <p>Conclusion ROTE</p>
  </div>
  <div class="page">
    <p>Thank you for your attention! Any Questions?</p>
    <p>sinisa.matetic@inf.ethz.ch</p>
  </div>
</Presentation>
