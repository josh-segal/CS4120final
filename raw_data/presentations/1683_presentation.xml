<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>One-way indexing for plausible deniability in</p>
    <p>censorship resistant storage</p>
    <p>Eugene Vasserman, Victor Heorhiadi, Nicholas Hopper, and Yongdae Kim</p>
  </div>
  <div class="page">
    <p>Censorship resistant storage  Provides robust permanent storage  Protects against targeted blocking  Resists rubber-hose cryptanalysis  provides publisher deniability</p>
    <p>Easily searchable (e.g., not hashes)  Removes dead data  Without necessarily killing unpopular content</p>
    <p>Scales gracefully</p>
  </div>
  <div class="page">
    <p>I am not a lawyer</p>
    <p>Is plausible deniability needed?</p>
    <p>Is plausible deniability enough?</p>
    <p>Is probable ignorance enough?</p>
  </div>
  <div class="page">
    <p>Conflicting requirements</p>
    <p>Storer plausible deniability  Keyword search  DecrypIon key must be stored in the network  Pointer and storer must not discover the key</p>
    <p>Self-contained network  Store keys and content in the same network? Are you crazy?!</p>
    <p>One-way indexing</p>
  </div>
  <div class="page">
    <p>DHT P2P storage refresher</p>
    <p>Pointer (Storer)</p>
    <p>Searcher</p>
    <p>Publisher ANIMATION</p>
  </div>
  <div class="page">
    <p>Encoding a file</p>
    <p>Publisher has</p>
    <p>n chunks (n &gt;&gt; m)</p>
    <p>m-of-n erasure coding</p>
    <p>File F</p>
    <p>Encrypt with key K</p>
    <p>EK(F)</p>
  </div>
  <div class="page">
    <p>Publishing files</p>
    <p>n chunks</p>
    <p>File Manifest</p>
    <p>h(EK(F)) h(keyword1), h(keyword2),  h(index keywordi) h(F) h(c1), h(c2), , h(cn)</p>
    <p>Publisher composes manifests:</p>
    <p>Key Manifest</p>
    <p>h(EK(F)) h(keyword1), h(keyword2),  h(index keywordi) h(K) K</p>
  </div>
  <div class="page">
    <p>One-way publishing</p>
    <p>Publisher</p>
    <p>Publish file manifest to h(r, keyword1), h(r, keyword2),</p>
    <p>Publish file chunks to h(chunk)</p>
    <p>Publish key manifest to h(r, keyword1), h(r, keyword2),</p>
    <p>ANIMATION</p>
  </div>
  <div class="page">
    <p>Finding a file</p>
    <p>Searcher</p>
    <p>Retrieve m random file chunks</p>
    <p>Reconstruct file, verify against manifest (hash)</p>
    <p>Decrypt file, verify against manifest (hash)</p>
    <p>Search for file manifest by keyword</p>
    <p>Search for key manifest by keyword</p>
    <p>ANIMATION</p>
  </div>
  <div class="page">
    <p>Beware of forbidden keywords</p>
    <p>h(keyword1)  salt, h(salt, keyword1)  Brute-force hash search protecIon (rainbow tables)</p>
    <p>Robustness improvement (load balancing)</p>
    <p>Different salts in different manifests  Forbidden keyword aSacks tend to fail</p>
  </div>
  <div class="page">
    <p>Continuous robustness  Pointer storer  manifest guarantor  Guarantor can:  Reassemble the encrypted file  Check replicaIon level of manifest and file  Re-encode the encrypted file (like publisher)</p>
    <p>Guarantor cannot:  Decrypt the file (get the plaintext)  Obtain the keywords (invert a hash)  Remove data from the network (can drop own data)</p>
  </div>
  <div class="page">
    <p>Maintaining/refreshing a file</p>
    <p>Manifest guarantor</p>
    <p>Re-publish data chunks</p>
    <p>and/or manifest if needed</p>
    <p>Retrieve x &gt; 2m manifest replicas,</p>
    <p>verify them</p>
    <p>Retrieve x  m random chunks</p>
    <p>Reconstruct data, verify against</p>
    <p>manifest (hash) ANIMATION</p>
  </div>
  <div class="page">
    <p>Dead data pruning  Each stored item has a Imestamp  File manifest, key manifest, content chunk</p>
    <p>Timestamp iniIalized at publicaIon Ime, refreshed at access Ime</p>
    <p>Nodes lazily garbage-collect idle items  Have not been accessed in some Ime period t  A single honest guarantor is enough to retain a file in the network</p>
    <p>Manifests vouched for by editors are not subject to dropping</p>
  </div>
  <div class="page">
    <p>System robustness</p>
    <p>C en</p>
    <p>so rs</p>
    <p>hi p</p>
    <p>su cc</p>
    <p>es s</p>
    <p>Node failure 1-of-10 (replication) 10-of-100 50-of-250 50-of-500 50-of-750 75-of-750</p>
  </div>
  <div class="page">
    <p>Performance Time to perform DHT operations</p>
    <p>C D</p>
    <p>F</p>
    <p>Time (seconds)</p>
    <p>Chunk Put Chunk Get</p>
    <p>Manifest Put Manifest Get</p>
    <p>Manifest Maintenance</p>
    <p>User time to find and download a file</p>
    <p>C D</p>
    <p>F</p>
    <p>Time (seconds)</p>
  </div>
  <div class="page">
    <p>Summary Toward robust censorship-resistant</p>
    <p>permanent storage:</p>
    <p>One-way indexing and easy search  Probable ignorance for storers</p>
    <p>ReplicaIon and proacIve maintenance  targeted are aSacks difficult  Need underlying blocking resistance</p>
    <p>Dead data removal and file curaIon  Keeps all files for a Ime, some forever</p>
  </div>
</Presentation>
