<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Semantics of Caching with SPOCA - A Stateless, Proportional, Optimally-Consistent Addressing Algorithm Ashish Chawla, Benjamin Reed, Karl Juhnke, Ghousuddin Syed Yahoo! Inc</p>
  </div>
  <div class="page">
    <p>Video Platform</p>
  </div>
  <div class="page">
    <p>Video Platform</p>
  </div>
  <div class="page">
    <p>Simple Content Serving Architecture</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction  Problem Definition  SPOCA and Requirements  Evaluations  Conclusion</p>
  </div>
  <div class="page">
    <p>The Problem</p>
    <p>The front-end server disks are a secondary bottleneck.  Eliminating redundant caching of content also reduces the</p>
    <p>load on the storage farm.</p>
    <p>An intelligent request-routing policy can produce far more caching efficiency than even a perfect cache promotion policy that must labor under random request routing.</p>
    <p>The cache promotion algorithm not enough.</p>
  </div>
  <div class="page">
    <p>Problems from Geographic Distribution</p>
  </div>
  <div class="page">
    <p>Problems from Geographic Distribution</p>
    <p>Reque sts v7</p>
  </div>
  <div class="page">
    <p>Problems from Geographic Distribution</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction  Problem Definition  SPOCA and Requirements  Evaluations  Conclusion</p>
  </div>
  <div class="page">
    <p>Requirements</p>
    <p>Merge different delivery pools and manage the diverse requirements in an adaptive way.</p>
    <p>Minimize caching disruptions when front-end server leaves or enters the pool - re-address as few files as possible to different servers.</p>
    <p>Proportional distribution of files among servers does not necessarily result in a proportional distribution of requests (Power Law)</p>
  </div>
  <div class="page">
    <p>SPOCA and Zebra</p>
    <p>Used in production in a global scenario for web-scale load.</p>
    <p>Shows real world improvements over the simple off-theshelf solution.</p>
    <p>Implements load balancing, fault tolerance, popular content handling, and efficient cache utilization with a single simple mechanism.</p>
  </div>
  <div class="page">
    <p>Traditional Approach</p>
  </div>
  <div class="page">
    <p>Complete Picture</p>
  </div>
  <div class="page">
    <p>Complete Picture  Inside Data Center</p>
  </div>
  <div class="page">
    <p>Zebra Algorithm</p>
    <p>Handles the geographic component of request routing and content caching</p>
    <p>Based on content popularity, Zebra decides when requests should be routed to contents home locale and when the content should be cached in the nearest locale</p>
    <p>We use bloom filters to determine popularity.</p>
  </div>
  <div class="page">
    <p>Tracking popularity</p>
    <p>add(vid1)</p>
    <p>Bloom Filter</p>
  </div>
  <div class="page">
    <p>Checking Popularity</p>
    <p>contains(vid1)</p>
    <p>Bloom Filter</p>
  </div>
  <div class="page">
    <p>Whats the problem here?</p>
    <p>Everything will become popular.  No way to expire content in bloom filter  We use a sequence of bloom filters to track</p>
    <p>popularity.</p>
  </div>
  <div class="page">
    <p>Bloom Filter Representation</p>
    <p>vid1  vid5</p>
    <p>vid8  vid526</p>
    <p>vid2  vid752</p>
  </div>
  <div class="page">
    <p>Bloom Filter Representation</p>
    <p>vid1  vid5</p>
    <p>vid8  vid526</p>
  </div>
  <div class="page">
    <p>Bloom Filter Representation</p>
    <p>vid1  vid5</p>
    <p>vid8  vid526</p>
    <p>add(vid8)</p>
  </div>
  <div class="page">
    <p>Bloom Filter Representation</p>
    <p>vid8</p>
    <p>vid1  vid5</p>
    <p>vid8  vid526</p>
  </div>
  <div class="page">
    <p>Bloom Filter Representation</p>
    <p>vid8</p>
    <p>vid1  vid5</p>
    <p>vid8  vid526</p>
    <p>contains(vid3)</p>
  </div>
  <div class="page">
    <p>Bloom Filter Representation</p>
    <p>vid8</p>
    <p>vid1  vid5</p>
    <p>vid8  vid526</p>
    <p>contains(vid3)</p>
    <p>Unified Filter</p>
    <p>vid1, vid5, vid8, vid526</p>
  </div>
  <div class="page">
    <p>Key Points</p>
    <p>Zebra determines which serving cluster will handle a given request based on geolocality and popularity.</p>
    <p>SPOCA determines which front-end server within that cluster will cache and serve the request.</p>
  </div>
  <div class="page">
    <p>SPOCA Algorithm</p>
    <p>Goal: Maximize cache utilization at the front-end servers.  Simple content to server assignment function based on a</p>
    <p>sparse hash space.</p>
    <p>Each front-end server is assigned a portion of the hash space according to its capacity.</p>
    <p>The SPOCA routing function uses a hash function to map names to a point in a hash space.</p>
    <p>Input = the name of the requested content</p>
    <p>Output = the server that will handle the request.</p>
    <p>Re-hashing happens till the result maps to a valid hash space.</p>
  </div>
  <div class="page">
    <p>SPOCA hash map example</p>
  </div>
  <div class="page">
    <p>Failure Handling</p>
  </div>
  <div class="page">
    <p>Elasticity</p>
  </div>
  <div class="page">
    <p>Popular Content</p>
    <p>SPOCA minimizes the number of servers to maximize the aggregate number of cached objects.</p>
    <p>For popular content we need to route requests to multiple front-end servers.</p>
    <p>We store the hashed address of any requested content for a brief popularity window, 150 seconds in our case.</p>
    <p>When the popularity window expires, the stored hash for each object is discarded.</p>
  </div>
  <div class="page"/>
  <div class="page"/>
  <div class="page">
    <p>Outline</p>
    <p>Introduction  Problem Definition  SPOCA and Requirements  Evaluations  Conclusion</p>
  </div>
  <div class="page">
    <p>Scaling 5x w/o software improvements</p>
  </div>
  <div class="page">
    <p>Scaling 5x with software improvements</p>
  </div>
  <div class="page">
    <p>Memory cache hits</p>
  </div>
  <div class="page">
    <p>Cache Hit and Misses*</p>
    <p>* Download and Flash Pools in S1S data center</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Zebra and SPOCA do not have any hard state to maintain or per object meta-data</p>
    <p>Eliminates any per object storage overhead or management, simplifying operations.</p>
    <p>Consolidate content serving into a single pool of servers that can handle files from a variety of different workloads.</p>
    <p>Decouple serving and caching layers.  Cost savings and end user satisfaction are key success</p>
    <p>metrics.</p>
  </div>
  <div class="page"/>
</Presentation>
