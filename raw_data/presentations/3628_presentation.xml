<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>FIRMSCOPE: Automatic Uncovering of Privilege-Escalation Vulnerabilities in Pre-Installed Apps in Android Firmware</p>
    <p>Mohamed Elsabagh, Ryan Johnson, and Angelos Stavrou Kryptowire</p>
    <p>Chaoshun Zuo, Qingchuan Zhao, and Zhiqiang Lin The Ohio State University</p>
  </div>
  <div class="page">
    <p>Android Framework</p>
    <p>Android Runtime</p>
    <p>Android Kernel + SELinux</p>
    <p>Application Application</p>
    <p>Sandbox</p>
    <p>Isolated process  Isolated storage  Secure IPC  Restricted access to resources</p>
    <p>(permission based)</p>
    <p>Sandbox</p>
    <p>Android Application Sandbox</p>
    <p>IPC</p>
  </div>
  <div class="page">
    <p>System Apps /system/priv-app/...</p>
    <p>User Apps /data/app/...</p>
    <p>Netflix, SnapChat,   User-Installed  Low privilege  Limited permissions  User-granted permissions</p>
    <p>Telephony, I/O, Package Mgmt, ...  Pre-installed + Persistent  High privilege  Unrestricted permissions  Pre-granted permissions</p>
    <p>Privileged Pre-Installed Apps</p>
  </div>
  <div class="page">
    <p>AOSP+Google</p>
    <p>Chipset OEMs</p>
    <p>Device OEMs (Firmware Signer)</p>
    <p>Affiliates</p>
    <p>Carriers</p>
    <p>Pre-Installed Apps</p>
  </div>
  <div class="page">
    <p>Pre-Installed Apps</p>
    <p>User Apps</p>
    <p>Average No. Apps on an Android Phone</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>&gt; dumpsys package com.google.android.packageinstaller ... 1. android.permission.KILL_UID: granted=true 2. android.permission.USE_RESERVED_DISK: granted=true 3. android.permission.CLEAR_APP_USER_DATA: granted=true 4. android.permission.INSTALL_PACKAGES: granted=true 5. android.permission.FOREGROUND_SERVICE: granted=true 6. android.permission.RECEIVE_BOOT_COMPLETED: granted=true 7. android.permission.INSTALL_GRANT_RUNTIME_PERMISSIONS: granted=true 8. android.permission.ACCESS_INSTANT_APPS: granted=true 9. android.permission.INTERACT_ACROSS_USERS_FULL: granted=true 10. android.permission.READ_INSTALL_SESSIONS: granted=true 11. android.permission.REVOKE_RUNTIME_PERMISSIONS: granted=true 12. android.permission.MANAGE_USERS: granted=true 13. android.permission.MANAGE_APP_OPS_RESTRICTIONS: granted=true 14. android.permission.CLEAR_APP_CACHE: granted=true 15. android.permission.GRANT_RUNTIME_PERMISSIONS: granted=true 16. android.permission.HIDE_NON_SYSTEM_OVERLAY_WINDOWS: granted=true 17. android.permission.MANAGE_APP_OPS_MODES: granted=true 18. android.permission.WAKE_LOCK: granted=true 19. android.permission.UPDATE_APP_OPS_STATS: granted=true 20. android.permission.OBSERVE_GRANT_REVOKE_PERMISSIONS: granted=true 21. android.permission.DELETE_PACKAGES: granted=true 22. android.permission.READ_EXTERNAL_STORAGE: granted=true</p>
    <p>?!</p>
  </div>
  <div class="page">
    <p>Authentication: Who is allowed access?</p>
    <p>Authorization: What are they allowed to do?</p>
    <p>Accounting: What did they do?</p>
    <p>Privileged Functionality  Access Control</p>
  </div>
  <div class="page">
    <p>Package Installer</p>
    <p>install(app)</p>
    <p>inst all(a</p>
    <p>pp)</p>
    <p>Nah !</p>
    <p>OK!</p>
    <p>Allowed calling me?  Allowed installing apps?</p>
  </div>
  <div class="page">
    <p>What We Found</p>
    <p>Thousands of privilege-escalation vulnerabilities in Android 4 to 9 due to improper access control in pre-installed apps</p>
  </div>
  <div class="page">
    <p>Real Example: Lovely Fonts</p>
  </div>
  <div class="page">
    <p>LovelyFonts Service</p>
    <p>payload</p>
    <p>OK!</p>
    <p>PrivilegedUnprivileged + Zero permissions + Local/Remote</p>
    <p>Local/Remote Command+Code Injection</p>
    <p>40+ ROMs, 10+ Vendors, Millions of users</p>
    <p>Real Example: Lovely Fonts</p>
    <p>Not-so-lovely Actor</p>
    <p>exec(payload)</p>
  </div>
  <div class="page">
    <p>Automatic Discovery: FIRMSCOPE</p>
  </div>
  <div class="page">
    <p>Automatic Discovery: Preprocessing</p>
    <p>Challenges:  Non-standard image formats  Different build/optimization settings  Dalvik bytecode internals</p>
    <p>Solutions:  Unpacking heuristics  Lift disassembly into IL</p>
  </div>
  <div class="page">
    <p>Automatic Discovery: Static Taint Analysis</p>
    <p>Challenges:  Flows through fields, callbacks, lifecycles, ...  Analysis sensitivities  Practical considerations</p>
    <p>Solutions:  Custom Def-Use  Encode flows using custom gadgets  Path finding + Post-validation</p>
  </div>
  <div class="page">
    <p>Automatic Discovery: Rules</p>
    <p>Command/Code Injection  App (Un)Installation  Audio/Video/Screen Recording  Settings Modification  SMS Reading, Sending  Information Leakage  Device Flashing/Resetting</p>
    <p>Source/Sink rules + Custom Plugins</p>
  </div>
  <div class="page">
    <p>Findings Summary</p>
    <p>Scanned 2017 Android 4 to 9 ROMs (331k apps)</p>
    <p>850 unique vulnerabilities (3k+ total)  77% ROMs impacted  41% had Command Injection</p>
    <p>the findings lead to code execution</p>
    <p>Disclosed 370+ in Android 7,8,9  200+ vendor-confirmed to date</p>
    <p>Impacted</p>
  </div>
  <div class="page">
    <p>Who Is to Blame?</p>
    <p>Overall lax security posture by vendors  Most flaws from custom features, factory-mode</p>
    <p>apps, OTA providers, MDM apps, helpers, ...  AOSP-like devices were the cleanest</p>
  </div>
  <div class="page">
    <p>Runtime Performance</p>
    <p>7 min per app on average (53 s median)  81.7 min per ROM on average (55.7 min median)  Significantly less FPs, FNs, CPU, MEM than prior solutions</p>
  </div>
  <div class="page">
    <p>FIRMSCOPE</p>
    <p>Accurate, efficient, static taint analysis  Automatic privilege-escalation vulnerabilities detection</p>
    <p>Scanned 2017 ROMs (331k pre-installed apps)  Discovered 850 unique privilege-escalation vulnerabilities  Responsible disclosures for Android 7,8,9</p>
    <p>Thank You! Pilots: https://www.kryptowire.com/contact-us</p>
    <p>Courtesy: thehackernews.com</p>
  </div>
</Presentation>
