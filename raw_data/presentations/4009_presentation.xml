<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>SMT solvers for software security</p>
    <p>Tales of automation</p>
    <p>Usenix Security Workshop on Offensive Technologies (WOOT12)</p>
    <p>August 7th 2012, Bellevue, WA, USA</p>
    <p>Julien Vanegue (Microsoft Security Science)</p>
    <p>Sean Heelan (Immunity Inc.)</p>
    <p>Rolf Rolles (Unaffiliated)</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>Discuss the applicability of SMT (Satisfiability Modulo Theories) solvers for software security, in particular for:  Vulnerability checking</p>
    <p>Exploit generation</p>
    <p>Copy protection analysis</p>
    <p>Overall workflow: abstract a program into a formula and check if the formula has the desired properties</p>
    <p>Overall message: SMT solvers perform great once the problem domain has been defined. Solvers do not define the problem automatically.</p>
  </div>
  <div class="page">
    <p>Part I: Finding vulnerabilities using SMT</p>
  </div>
  <div class="page">
    <p>Work flow for static security checking</p>
    <p>(1) The security auditor formalizes what he thinks is the formal code contract into an annotation (directive to the checker)</p>
    <p>(2) The analyzed source code gets translated into an intermediate form.</p>
    <p>(3) The intermediate form is consumed by a theorem prover that creates a verification condition (VC, aka a safety formula)</p>
    <p>(4) The VC is passed to the SMT solver for resolution</p>
  </div>
  <div class="page">
    <p>Boogie VCGen</p>
    <p>Boogie program</p>
    <p>HAVOC: Heap aware verifier for C/C++ programs</p>
    <p>SMT Solver (Z3) Decision Procedures for</p>
    <p>types, lists, arrays</p>
    <p>Verification condition</p>
    <p>Verified Warning</p>
    <p>C/C++  BoogiePL</p>
    <p>C/C++ program</p>
    <p>Memory model [POPL09]</p>
    <p>Annotations</p>
  </div>
  <div class="page">
    <p>Example on Loop analysis Sendmail CrackAddr() buffer overflow</p>
    <p>CVE-2002-1337: A buffer overflow in sendmail 5.79 to</p>
    <p>Published by Mark Dowd, Exploited by Last Stage of Delirium group in 4 hours (bugtraq posts).</p>
    <p>Presented at Infiltrate 2011 by Thomas Dullien as an example of failure of static analysis tools based on state merging (e.g. path-insensitive analyzers)</p>
    <p>We show how to check the absence of such vulnerabilities using loop invariants in Havoc/Boogie/Z3.</p>
  </div>
  <div class="page"/>
  <div class="page"/>
  <div class="page"/>
  <div class="page"/>
  <div class="page"/>
  <div class="page"/>
  <div class="page"/>
  <div class="page"/>
  <div class="page">
    <p>We can feed this invariant to HAVOC in this syntax: __loop_assert( (upperlimit == globalbuf + 15 &amp;&amp; quotation == FALSE &amp;&amp; roundquote == FALSE) || (upperlimit == globalbuf + 14 &amp;&amp; quotation == TRUE &amp;&amp; roundquote == FALSE) || (upperlimit == globalbuf + 14 &amp;&amp; quotation == FALSE &amp;&amp; roundquote == TRUE) || (upperlimit == globalbuf + 13 &amp;&amp; quotation == TRUE &amp;&amp; roundquote == TRUE) )</p>
    <p>An inductive invariant for crackaddr()</p>
    <p>Let us construct the finite state machine for this loop in domain (quotation,roundquote,offset) :  States correspond to memory</p>
    <p>values at the beginning of a loop iteration.</p>
    <p>Transitions correspond to</p>
    <p>executing an iteration after reading a character in the input string.</p>
  </div>
  <div class="page">
    <p>Part II: Assisting exploit generation using SMT</p>
  </div>
  <div class="page">
    <p>Automatic Exploit Generation (AEG)</p>
    <p>Loosely defined as Given a program and a vulnerability, automatically craft an input that redirects control flow to malicious code</p>
    <p>Canonical example of a problem domain where there have been many successes but real world applicability is hindered by modeling/constraint generation rather than solver performance or features</p>
  </div>
  <div class="page">
    <p>State of the Art</p>
    <p>Based directly on techniques and platforms built for symbolic/concolic execution</p>
    <p>Given a sequence of instructions, construct a path condition reflecting the modifications (e.g. arithmetic transformations) and constraints (e.g. conditional jumps) on attacker provided input</p>
  </div>
  <div class="page">
    <p>Example: Constructing the Path Condition</p>
    <p>Path Condition at 6:</p>
    <p>a1 = a0 + a0</p>
    <p>a2 = a1 - 15</p>
    <p>a2 = 0</p>
    <p>(a0 represents the initial input with an created on a register write)</p>
  </div>
  <div class="page">
    <p>Restricted-Model Exploit Generation</p>
    <p>The entirety of knowledge possessed by the AEG system is in the form of these path conditions</p>
    <p>Lets represent this as a map K from registers/memory locations to logical formulae: K: M  F</p>
    <p>Ex: M[eax] = (eax != 0 ^ Tainted(eax))</p>
    <p>No information on the relationship between user input and the heap state, thread execution, signals/events etc</p>
  </div>
  <div class="page">
    <p>Restricted-Model Exploit Generation</p>
    <p>Heap Layout on Run / Input 1</p>
    <p>Heap Layout on Run / Input 2</p>
    <p>Overflow Chunk Data</p>
    <p>Overflow Chunk Data</p>
    <p>Function Pointer</p>
    <p>(1) What can K tell us about the data contained in the overflow chunk and other heap chunks?</p>
    <p>(2) What can K tell us about the effect of attacker input on the relative layout of the overflow chunk with respect to other heap chunks?</p>
    <p>Accurate exploit generation requires information from both categories but K only provides the first</p>
  </div>
  <div class="page">
    <p>Restricted-Model Exploit Generation</p>
    <p>K combined with a set of exploit templates to produce SMT formulae  A template is a static set of rules describing the</p>
    <p>constraints to generate when certain conditions are met (ex: If the stored return address can be influenced then try to set it to address 0xABCD)</p>
    <p>Crucially, a template is restricted to the information present in K (no heap crafting or other external environment control strategies)</p>
    <p>At present templates have only described basic, single-shot exploitation techniques (no vulnerability chaining, no information disclosures)</p>
  </div>
  <div class="page">
    <p>Deconstructing the myth of fully automated exploit generation</p>
    <p>The real execution environment is not accurately described by K</p>
    <p>Modern operating systems have killed the majority of generic exploitation techniques</p>
    <p>More often than not static templates are not a feasible solution (need domain specific language?)</p>
    <p>Usually, modern exploits require application specific techniques, memory crafting and bug chaining: how to encode this in SMT?</p>
  </div>
  <div class="page">
    <p>Part III: Analyze copy protection using SMT</p>
  </div>
  <div class="page">
    <p>Copy protection analysis</p>
    <p>SMT solvers for copy protection analysis have been used mostly in two scenarios:</p>
    <p>(1) Equivalence checking between obfuscated code generated out of a copy protection technology and the original non-obfuscated code.</p>
    <p>(2) Semi-automated cryptanalysis of serial number algorithms and bypassing them using key generation (keygens)</p>
    <p>We give an example of (2) in next slide</p>
  </div>
  <div class="page">
    <p>Ex: the main loop for a serial algorithm</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>SMT solvers have demonstrated they can effectively resolve constraints generated by static security checkers, AEG systems, and copy protection analysts.</p>
    <p>Improving the state of the art will require more effective modeling of the execution environment and more sophisticated methods for generating candidate formulae without user-interaction (automated constraint generation a.k.a. inference)</p>
    <p>Interesting challenges remain in encoding more complex and informed strategies as SMT formula (ex: to model exploit mitigation bypass techniques)</p>
  </div>
</Presentation>
