<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>A Framework for Cost-Effective Peer-to-Peer Content Distribution</p>
    <p>Mohamed Hefeeda Ph.D. Candidate</p>
    <p>Advisor: Bharat Bhargava</p>
    <p>Department of Computer Sciences</p>
    <p>Purdue University</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Lots of underutilized end systems (peers) connected to the Internet</p>
    <p>Success of Peer-to-Peer (P2P) paradigm - Kazaa, Gnutella, SETI@HOME,</p>
    <p>Fairly high cost for distributing digital contents (large videos)</p>
    <p>Why not share? Everybody benefits!</p>
  </div>
  <div class="page">
    <p>Motivation (contd)</p>
    <p>Our contribution  - Collaborative P2P Framework for Content</p>
    <p>Distribution  Peer contributes little, but we have too many of them!</p>
    <p>Two settings for the framework - Infrastructure</p>
    <p>Content provider employs peers resources to disseminate contents</p>
    <p>- Cooperative resource sharing  Peers cooperate/coordinate to serve requests</p>
  </div>
  <div class="page">
    <p>Motivation (contd)</p>
    <p>What we gain  - Cost-effectiveness (for supplier &amp; client)</p>
    <p>- Ease of deployment (on end systems)</p>
    <p>- Availability (large degree of redundancy)</p>
    <p>- Scalability (more peers  more resources)</p>
    <p>- ..</p>
    <p>What we need to do  - Address research challenges</p>
  </div>
  <div class="page">
    <p>Motivation (contd)</p>
    <p>Research problems</p>
    <p>- Select and match multiple supplying peers with a</p>
    <p>requesting peer</p>
    <p>- Aggregate and coordinate contributions from peers</p>
    <p>- Adapt to peer failures and network conditions</p>
    <p>- Disseminate contents into the system</p>
    <p>- Consider peer rationality (self-interest) into protocols</p>
    <p>- Assess and incorporate peer trustworthiness</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Cooperative environment [ACM MM03] - CollectCast - PROMISE - Evaluation: simulation and implementation (PlanetLab)</p>
    <p>Infrastructure [J. Computer Networks, To appear 03] - Hybrid (super peer) architecture - Peer clustering and organization - Searching and dispersion algorithms - Evaluation: simulation</p>
    <p>Current/Future work - Rationality (Economics) [Tech Reports 03] - Trustworthiness (Security)</p>
  </div>
  <div class="page">
    <p>CollectCast</p>
    <p>CollectCast is a new P2P service - Middleware layer between a P2P lookup</p>
    <p>substrate and applications</p>
    <p>Previous work either - Assume one sender, e.g., [Tran, et al. 03, Bawa, et al. 02]</p>
    <p>Ignores peer limited capacity</p>
    <p>- Or, multiple senders but no careful selection, e.g., [Padmanabhan, et al. 02]</p>
    <p>Ignores peer diversity and network conditions</p>
  </div>
  <div class="page">
    <p>CollectCast (contd)</p>
    <p>Functions - Infer and label topology</p>
    <p>- Select best sending peers for each session</p>
    <p>- Coordinate contributions from peers</p>
    <p>- Adapt to peer failures and network conditions</p>
  </div>
  <div class="page">
    <p>CollectCast: Peer Selection</p>
    <p>Considers - Rp, Ap(t)</p>
    <p>- e2e available bandwidth and loss rate</p>
    <p>- Shared path segments</p>
    <p>Problem formulation: - Find Pactv that</p>
    <p>u Pp</p>
    <p>pl</p>
    <p>Pp pp</p>
    <p>RRR</p>
    <p>RE</p>
    <p>actv</p>
    <p>actv</p>
    <p>oSubject t</p>
    <p>Maximizes G</p>
  </div>
  <div class="page">
    <p>PROMISE and Experiments on PlanetLab</p>
    <p>PROMISE is a P2P media streaming system built on top of CollectCast</p>
    <p>Tested on PlanetLab test bed</p>
    <p>Extended Pastry to support multiple peer look up</p>
    <p>Used several MPGE-4 movie traces</p>
    <p>Select peers using topology-aware (the one used in CollectCast) and end-to-end</p>
  </div>
  <div class="page">
    <p>CollectCast: Performance</p>
    <p>Packet-level performance</p>
    <p>Smoother aggregated rate achieved by CollectCast</p>
    <p>Frame-level performance  Much fewer frames miss their</p>
    <p>deadlines with CollectCast</p>
    <p>CollectCast requires smaller initial buffering time to ensure all frames meet their deadlines</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Cooperative environment [ACM MM03] - CollectCast - PROMISE - Evaluation: simulation and implementation (PlanetLab)</p>
    <p>Infrastructure [J. Computer Networks, To appear 03] - Hybrid (super peer) architecture - Peer clustering and organization - Searching and dispersion algorithms - Evaluation: simulation</p>
    <p>Current/Future work - Rationality (Economics) [Tech Reports 03] - Trustworthiness (Security)</p>
  </div>
  <div class="page">
    <p>Target environments - Streaming (on-demand) videos to many clients</p>
    <p>Distance learning, media center, corporate streaming,</p>
    <p>Current approaches - Unicast</p>
    <p>Centralized  Proxy caches  CDN (third-party)</p>
    <p>- Multicast  Network layer  Application layer</p>
    <p>Proposed approach (Peer-to-Peer)</p>
    <p>P2P Infrastructure</p>
  </div>
  <div class="page">
    <p>Unicast Streaming</p>
    <p>Centralized</p>
    <p>Easy to deploy, administer</p>
    <p>Limited scalability</p>
    <p>Reliability concerns</p>
    <p>Load on the backbone</p>
    <p>High deployment cost $$$.$</p>
    <p>CDN</p>
    <p>Good performance</p>
    <p>Suitable for web pages with moderate-size objects</p>
    <p>Co$t: CDN charges for every megabyte served! [Raczkowski 02]</p>
    <p>For one-hour streamed to 1,000 clients, content provider pays $264 to CDN (at 0.5 cents/MByte)</p>
  </div>
  <div class="page">
    <p>Multicast Streaming</p>
    <p>Network layer</p>
    <p>Efficient!  Asynchronous client: Patching,</p>
    <p>skyscraper,  [Mahanti, et al. 03]</p>
    <p>Tune to multiple channels  Require inbound bandwidth 2R+</p>
    <p>Scalability of routers  Not widely deployed!!</p>
    <p>Patch stream</p>
    <p>Application layer</p>
    <p>Deployable</p>
    <p>E.g., [Narada 02, NICE 02, Zigzag 03, ]</p>
    <p>Assume end systems can support (outbound bandwidth) multiple folds of the streaming rate</p>
  </div>
  <div class="page">
    <p>P2P Approach: Key Ideas</p>
    <p>Make use of underutilized peers resources</p>
    <p>Make use of heterogeneity</p>
    <p>Multiple peers serve a requesting peer</p>
    <p>Network-aware peer organization</p>
    <p>Super Peers play special roles</p>
    <p>Hybrid Architecture</p>
  </div>
  <div class="page">
    <p>Hybrid Architecture: Issues</p>
    <p>Peer Organization - Two-level peer clustering - Join, leave, failure, overhead, super peer</p>
    <p>selection  Cluster-Based Searching</p>
    <p>- Find nearby suppliers  Cluster-Based Dispersion</p>
    <p>- Efficiently disseminate new media files</p>
  </div>
  <div class="page">
    <p>Peer Organization</p>
    <p>Previous client clustering techniques - Too coarse [Barford, et al. 02]</p>
    <p>Few large clusters</p>
    <p>Good for cache placement</p>
    <p>- Too fine [Bestavros, et al. 01] [Krishnamurthy, et al. 00]  Many small clusters</p>
    <p>Our approach - Balanced, suitable for P2P environments</p>
    <p>- Use BGP tables [RouteViews, Univ. of Oregon]</p>
    <p>- Validated by Internet Statistics</p>
  </div>
  <div class="page">
    <p>Peer Organization: Two-Level Clustering</p>
    <p>Snapshot of a BGP routing table</p>
    <p>Two-level clustering - Network cluster</p>
    <p>Peers sharing same network prefix</p>
    <p>- AS cluster  All network clusters</p>
    <p>within an Autonomous</p>
    <p>System</p>
  </div>
  <div class="page">
    <p>Dispersion (cont'd)</p>
    <p>Dispersion Algorithm (basic idea)</p>
    <p>- /* Upon getting a request from Py to cache Ny segments */</p>
    <p>- C  getCluster (Py)</p>
    <p>- Compute available (A) and required (D) capacities in cluster C</p>
    <p>- If A &lt; D</p>
    <p>Py caches Ny segments in a cluster-wide round robin fashion (CWRR)</p>
    <p>x x</p>
    <p>CinP</p>
    <p>x C u</p>
    <p>N</p>
    <p>N</p>
    <p>R</p>
    <p>R</p>
    <p>T A</p>
    <p>x</p>
    <p>1</p>
    <p>All values are smoothed averages</p>
    <p>Average available capacity in C:</p>
    <p>CWRR Example: (10-segment file)</p>
    <p>P1 caches 4 segments: 1,2,3,4</p>
    <p>P2 then caches 7 segments: 5,6,7,8,9,10,1</p>
  </div>
  <div class="page">
    <p>Performance Under Flash Crowd Arrivals</p>
    <p>Flash crowd  sudden increase in client arrivals</p>
    <p>Client Arrival Pattern</p>
  </div>
  <div class="page">
    <p>System Under Flash Crowd (cont'd)</p>
    <p>The role of the seeding peer is just seeding</p>
    <p>During the peak, we have 400 concurrent clients (26.7 times original capacity) and none of them is served by the seeding server (50% caching)</p>
    <p>Load on seeding peerSystem capacity</p>
  </div>
  <div class="page">
    <p>Dispersion Algorithm</p>
    <p>Avg. number of hops</p>
    <p>8.05 hops (random), 6.82 hops (ours)  15.3% savings</p>
    <p>For a domain with a 6-hop diameter</p>
    <p>Random: 23% of the traffic was kept inside the domain</p>
    <p>Cluster-based: 44% of the traffic was kept inside the domain</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Cooperative environment [ACM MM03] - CollectCast - PROMISE - Evaluation: simulation and implementation (PlanetLab)</p>
    <p>Infrastructure [J. Computer Networks, To appear 03] - Hybrid (super peer) architecture - Peer clustering and organization - Searching and dispersion algorithms - Evaluation: simulation</p>
    <p>Current/Future work - Rationality (Economics) [Tech Reports 03] - Trustworthiness (Security)</p>
  </div>
  <div class="page">
    <p>Rationality in P2P Systems</p>
    <p>Rationality  self-interest  maximize ones own utility</p>
    <p>Rationality is a growing concern in P2P systems [Shneidman &amp; Parkes 03] [Adar &amp; Huberman 00] [Golle, et al. 01]</p>
    <p>- Rational nodes consume more than they contribute Jeopardizes growth of P2P systems</p>
    <p>Infrastructure - Provider motivates peers to contribute resources - Revenue sharing mechanism [Hefeeda, et al., Tech Report 03]</p>
    <p>Cooperative - Enforce fair contribution/consumption of resources - Develop distributed incentive mechanisms [in progress]</p>
  </div>
  <div class="page">
    <p>Dealing with Rationality</p>
    <p>Ideas from economic theory ported to computer science</p>
    <p>Mechanism Design (MD) [e.g., Fudenburg &amp; Triole 91] - Inverse game theory: how to design a game to yield the</p>
    <p>desired outcomes in equilibrium</p>
    <p>- Define strategies, rules of the game, for selfish agents</p>
    <p>Algorithmic Mechanism Design (AMD) [Nissan &amp; Ronen 99] - MD + computational complexity considerations</p>
    <p>Distributed Algorithm Mechanism Design (DAMD) [Feigenbaum &amp; Shenker 02] [Feigenbaum et al. 02]</p>
    <p>- AMD + Distributed</p>
  </div>
  <div class="page">
    <p>Cooperative: Incentive Mechanism</p>
    <p>Peers are agents with costs (storage and BW)</p>
    <p>Want to replicate (provision) objects into the network to optimize a system-wide function (e.g. minimize the Expected Search Size (ESS))</p>
    <p>Problem - Design an incentive mechanism that yields optimal</p>
    <p>replication strategy, given that nodes are rational</p>
    <p>Related Work - Optimal replication with obedient nodes [Cohen &amp; Shenker 02]</p>
    <p>Replicating objects in proportion to the square root of their rates results in minimum ESS</p>
  </div>
  <div class="page">
    <p>Incentives??</p>
    <p>What may serve as Incentives in P2P??? - Pricing (monetary)</p>
    <p>E.g., micro payments</p>
    <p>- Non-pricing (non-monetary)  Higher priority</p>
    <p>Peers ranking</p>
    <p>Peers membership level</p>
    <p>..</p>
    <p>- Success story  SETI@HOME: User of the Day, listing of users</p>
  </div>
  <div class="page">
    <p>Trustworthy P2P Systems</p>
    <p>As always, Security is a big issue!  More peers join if they can trust other peers  How to assess trust? And, how to use it?  Research Problems</p>
    <p>- Evidence identification  What may serve as an evidence?  E.g., fraction of time a peer fulfilled its commitment</p>
    <p>- Evidence collection  How to collect sufficient instances of this evidence?  Complexity: communications, processing</p>
    <p>- Trust models  Using evidences, build web of trust among peers</p>
    <p>- Trust-based searching  Find me a peer that, with high probability, will fulfill its</p>
    <p>duties!!!</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>A P2P framework for content distribution</p>
    <p>CollectCast and PROMISE - Cooperative media streaming environment</p>
    <p>Hybrid Architecture - P2P streaming with super peer assisting in searching</p>
    <p>and dispersion</p>
    <p>- Cost-effective infrastructure for content distribution managed by a provider</p>
    <p>Rationality (Current) - Incentive-compatible network provisioning</p>
    <p>Trustworthiness (Future) - Trust-based searching schemes</p>
  </div>
  <div class="page">
    <p>Thank You!</p>
    <p>Questions, Suggestions, Comments are appreciated!</p>
    <p>More information and papers at</p>
    <p>http://www.cs.purdue.edu/homes/mhefeeda</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>P2P Systems: Basic Definitions</p>
    <p>Peers cooperate to achieve desired functions - Cooperate: share resources (CPU, storage, bandwidth),</p>
    <p>participate in the protocols (routing, replication, )</p>
    <p>- Functions: file-sharing, distributed computing, communications,</p>
    <p>Examples - Gnutella, Napster, Freenet, OceanStore, CFS, CoopNet,</p>
    <p>SpreadIt, SETI@HOME,</p>
    <p>Well, arent they just distributed systems?</p>
    <p>- P2P == distributed systems?</p>
    <p>B ackground</p>
  </div>
  <div class="page">
    <p>P2P vs. Distributed Systems</p>
    <p>P2P = distributed systems++; - Ad-hoc nature</p>
    <p>- Peers are not servers [Saroui, et al. 02 ]  Limited capacity and reliability</p>
    <p>- Much more dynamism</p>
    <p>- Scalability is a more serious issue (millions of nodes)</p>
    <p>- Peers are self-interested (selfish!) entities  70% of Gnutella users share nothing [Adar &amp; Huberman 00]</p>
    <p>- All kind of Security concerns</p>
    <p>Privacy, anonymity, malicious peers,  you name it!</p>
    <p>B ackground</p>
  </div>
  <div class="page">
    <p>P2P Systems: Rough Classification [Lv et al., ICS02], [Yang et al., ICDCS02]</p>
    <p>Structured (or tightly controlled, DHT) + Files are rigidly assigned to specific nodes + Efficient search &amp; guarantee of finding  Lack of partial name and keyword queries  Ex.: Chord [Stoica, et al. 01], CAN [Ratnasamy, et al. 01],</p>
    <p>Pastry [Rowstron &amp; Druschel 01]  Unstructured (or loosely controlled)</p>
    <p>+ Files can be anywhere + Support of partial name and keyword queries  Inefficient search (some heuristics exist) &amp; no</p>
    <p>guarantee of finding  Ex.: Gnutella</p>
    <p>Hybrid (P2P + centralized), super peer notion) - Napster, KazaA</p>
    <p>B ackground</p>
  </div>
  <div class="page">
    <p>File-sharing vs. Streaming</p>
    <p>File-sharing - Download the entire file first, then use it</p>
    <p>- Small files (few Mbytes)  short download time</p>
    <p>- A file is stored by one peer  one connection</p>
    <p>- No timing constraints</p>
    <p>Streaming - Consume (playback) as you download</p>
    <p>- Large files (few Gbytes)  long download time</p>
    <p>- A file is stored by multiple peers  several connections</p>
    <p>- Timing is crucial</p>
    <p>B ackground</p>
  </div>
  <div class="page">
    <p>Streaming Approaches</p>
    <p>Distributed caches [e.g., Chen and Tobagi, ToN01 ] - Deploy caches all over the place</p>
    <p>- Yes, increases the scalability</p>
    <p>Shifts the bottleneck from the server to caches!</p>
    <p>- But, it also multiplies cost</p>
    <p>- What to cache? And where to put caches?</p>
    <p>Multicast - Mainly for live media broadcast</p>
    <p>- Application level [Narada, NICE, Scattercast, Zigzag,  ]</p>
    <p>- IP level [e.g., Dutta and Schulzrine, ICC01]  Widely deployed?</p>
    <p>B ackground</p>
  </div>
  <div class="page">
    <p>Streaming Approaches (cont'd)</p>
    <p>P2P approaches - SpreadIt [Deshpande, et al., Stanford TR 01]</p>
    <p>Live media  Build application-level multicast distribution tree over peers</p>
    <p>- CoopNet [Padmanabhan et al. 02]  Live media</p>
    <p>Builds application-level multicast distribution tree over peers</p>
    <p>On-demand  Server redirects clients to other peers  Assumes a peer can (or is willing to) support the full rate  CoopNet does not address the issue of quickly</p>
    <p>disseminating the media file</p>
    <p>B ackground</p>
  </div>
</Presentation>
