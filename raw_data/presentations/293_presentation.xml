<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>XXX</p>
  </div>
  <div class="page">
    <p>Tolerating Malicious Drivers in Linux</p>
    <p>Silas Boyd-Wickizer and Nickolai Zeldovich</p>
  </div>
  <div class="page">
    <p>How could a device driver be malicious?</p>
    <p>Today's device drivers are highly privileged</p>
    <p>Write kernel memory, allocate memory, ...</p>
    <p>Drivers are complex; developers write buggy code</p>
    <p>Result: Attackers exploit vulnerabilities</p>
  </div>
  <div class="page">
    <p>How could a device driver be malicious?</p>
    <p>Today's device drivers are highly privileged</p>
    <p>Write kernel memory, allocate memory, ...</p>
    <p>Drivers are complex; developers write buggy code</p>
    <p>Result: Attackers exploit vulnerabilities</p>
  </div>
  <div class="page">
    <p>How could a device driver be malicious?</p>
    <p>Today's device drivers are highly privileged</p>
    <p>Write kernel memory, allocate memory, ...</p>
    <p>Drivers are complex; developers write buggy code</p>
    <p>Result: Attackers exploit vulnerabilities</p>
  </div>
  <div class="page">
    <p>Current approach</p>
    <p>User-space drivers in kernels (Minix, L4, ...)</p>
    <p>Write device driver in new language (Termite)</p>
    <p>Handle common faults (Nooks, microdrivers, ...)</p>
  </div>
  <div class="page">
    <p>Secure, efficient, &amp; unmodified drivers on Linux</p>
    <p>Goal</p>
  </div>
  <div class="page">
    <p>Previous user-space drivers</p>
    <p>Kernel</p>
    <p>User</p>
    <p>Kernel core</p>
    <p>Network stack</p>
    <p>Hardware</p>
    <p>Ethernet driver</p>
    <p>User User</p>
    <p>Application</p>
    <p>kernel</p>
  </div>
  <div class="page">
    <p>Previous user-space drivers</p>
    <p>Kernel</p>
    <p>User</p>
    <p>Kernel core</p>
    <p>Network stack</p>
    <p>Hardware</p>
    <p>Ethernet driver</p>
    <p>User User</p>
    <p>Application</p>
    <p>kernel Confine driver in a process</p>
  </div>
  <div class="page">
    <p>Previous user-space drivers</p>
    <p>Kernel</p>
    <p>User</p>
    <p>Kernel core</p>
    <p>Network stack</p>
    <p>Hardware</p>
    <p>Ethernet driver</p>
    <p>User User</p>
    <p>Application</p>
    <p>kernel Confine driver in a process</p>
    <p>General purpose syscall API to</p>
    <p>configure device</p>
  </div>
  <div class="page">
    <p>Previous user-space drivers</p>
    <p>Kernel</p>
    <p>User</p>
    <p>Kernel core</p>
    <p>Network stack</p>
    <p>Hardware</p>
    <p>Ethernet driver</p>
    <p>User User</p>
    <p>Application</p>
    <p>kernel Confine driver in a process</p>
    <p>General purpose syscall API to</p>
    <p>configure device</p>
    <p>Confine device with IO virtualization HW.</p>
  </div>
  <div class="page">
    <p>Previous user-space drivers</p>
    <p>Kernel</p>
    <p>User</p>
    <p>Kernel core</p>
    <p>Network stack</p>
    <p>Hardware</p>
    <p>Ethernet driver</p>
    <p>User User</p>
    <p>Application</p>
    <p>kernel Confine driver in a process</p>
    <p>General purpose syscall API to</p>
    <p>configure device</p>
    <p>IPC network driver API E.g. tx_packet</p>
    <p>Confine device with IO virtualization HW.</p>
  </div>
  <div class="page">
    <p>Current Linux driver architecture</p>
    <p>Kernel</p>
    <p>User</p>
    <p>Ethernet driver</p>
    <p>Network stack</p>
    <p>Application</p>
    <p>Hardware</p>
    <p>netdeviceKernel RT</p>
  </div>
  <div class="page">
    <p>Current Linux driver architecture</p>
    <p>Kernel</p>
    <p>User</p>
    <p>Ethernet driver</p>
    <p>Network stack</p>
    <p>Application</p>
    <p>Hardware</p>
    <p>netdeviceKernel RT</p>
    <p>Kernel runtime (e.g. kmalloc)</p>
  </div>
  <div class="page">
    <p>Current Linux driver architecture</p>
    <p>Kernel</p>
    <p>User</p>
    <p>Ethernet driver</p>
    <p>Network stack</p>
    <p>Application</p>
    <p>Hardware</p>
    <p>netdeviceKernel RT</p>
    <p>Kernel runtime (e.g. kmalloc)</p>
    <p>Network driver API (e.g. tx_packet)</p>
  </div>
  <div class="page">
    <p>Linux user-space driver problem</p>
    <p>Kernel RT and driver APIs won't work for untrusted drivers in a different AS</p>
    <p>Kernel</p>
    <p>UserEthernet driver</p>
    <p>Network stack</p>
    <p>Application</p>
    <p>Hardware</p>
    <p>netdevice</p>
    <p>User</p>
    <p>Kernel RT</p>
  </div>
  <div class="page">
    <p>SUD's approach</p>
    <p>Kernel</p>
    <p>UserEthernet driver</p>
    <p>Network stack</p>
    <p>Application</p>
    <p>Hardware</p>
    <p>netdevice</p>
    <p>User</p>
    <p>Kernel RT</p>
  </div>
  <div class="page">
    <p>SUD's approach</p>
    <p>SUD UML handles calls to kernel RT</p>
    <p>Kernel</p>
    <p>UserEthernet driver</p>
    <p>Network stack</p>
    <p>Application</p>
    <p>Hardware</p>
    <p>netdevice</p>
    <p>User</p>
    <p>Kernel RT</p>
    <p>SUD UML</p>
  </div>
  <div class="page">
    <p>SUD's approach</p>
    <p>SUD UML handles calls to kernel RT</p>
    <p>Proxy driver and SUD UML allow reuse of existing driver APIs</p>
    <p>Kernel</p>
    <p>UserEthernet driver</p>
    <p>Network stack</p>
    <p>Application</p>
    <p>Hardware</p>
    <p>netdevice</p>
    <p>User</p>
    <p>Kernel RT</p>
    <p>SUD UML</p>
    <p>Ethernet proxy driver</p>
  </div>
  <div class="page">
    <p>SUD's approach</p>
    <p>SUD UML handles calls to kernel RT</p>
    <p>Proxy driver and SUD UML allow reuse of existing driver APIs</p>
    <p>Kernel</p>
    <p>UserEthernet driver</p>
    <p>Network stack</p>
    <p>Application</p>
    <p>Hardware</p>
    <p>netdevice</p>
    <p>User</p>
    <p>Kernel RT</p>
    <p>SUD UML</p>
    <p>Ethernet proxy driver</p>
    <p>Network driver API</p>
  </div>
  <div class="page">
    <p>SUD's approach</p>
    <p>SUD UML handles calls to kernel RT</p>
    <p>Proxy driver and SUD UML allow reuse of existing driver APIs</p>
    <p>Kernel</p>
    <p>UserEthernet driver</p>
    <p>Network stack</p>
    <p>Application</p>
    <p>Hardware</p>
    <p>netdevice</p>
    <p>User</p>
    <p>Kernel RT</p>
    <p>SUD UML</p>
    <p>Ethernet proxy driver</p>
    <p>Network driver API</p>
    <p>SUD RPC API</p>
  </div>
  <div class="page">
    <p>SUD's approach</p>
    <p>SUD UML handles calls to kernel RT</p>
    <p>Proxy driver and SUD UML allow reuse of existing driver APIs</p>
    <p>Kernel</p>
    <p>UserEthernet driver</p>
    <p>Network stack</p>
    <p>Application</p>
    <p>Hardware</p>
    <p>netdevice</p>
    <p>User</p>
    <p>Kernel RT</p>
    <p>SUD UML</p>
    <p>Ethernet proxy driver</p>
    <p>Network driver API</p>
    <p>SUD RPC API</p>
    <p>Network driver API</p>
  </div>
  <div class="page">
    <p>SUD's results</p>
    <p>Tolerate malicious device drivers</p>
    <p>Proxy drivers small (~500 LOC)</p>
    <p>One proxy driver per device class</p>
    <p>Few kernel modifications (~50 LOC)</p>
    <p>Unmodified drivers (6 test drivers)</p>
    <p>High performance, low overhead</p>
    <p>No need for new OS or language</p>
  </div>
  <div class="page">
    <p>Security challenge: prevent attacks</p>
    <p>Problem: driver must perform privileged operations</p>
    <p>Memory access, driver API, DMA, interrupts,</p>
    <p>Attacks from driver code:</p>
    <p>Direct system attacks: memory corruption, ...</p>
    <p>Driver API attacks: invalid return value, deadlock, ...</p>
    <p>Attacks from device:</p>
    <p>DMA to DRAM, peer-to-peer attacks, interrupt storms</p>
  </div>
  <div class="page">
    <p>Practical challenges</p>
    <p>High performance, low overhead</p>
    <p>Challenge: interact with hardware and kernel at high rate, kernel-user switch expensive</p>
    <p>E.g. Ethernet driver ~100k times a second</p>
    <p>Reuse existing drivers and kernel</p>
    <p>Challenge: drivers assume fully-privileged kernel env.</p>
    <p>Challenge: kernel driver API complex, non-uniform</p>
  </div>
  <div class="page">
    <p>SUD overview</p>
    <p>Kernel</p>
    <p>User</p>
    <p>Proxy driver Kernel core</p>
    <p>Application</p>
    <p>Hardware</p>
    <p>Driver</p>
    <p>User</p>
    <p>SUD UML</p>
    <p>HW access module</p>
  </div>
  <div class="page">
    <p>SUD overview</p>
    <p>Kernel</p>
    <p>User</p>
    <p>Proxy driver Kernel core</p>
    <p>Application</p>
    <p>Hardware</p>
    <p>Driver</p>
    <p>User</p>
    <p>SUD UML</p>
    <p>HW access module</p>
  </div>
  <div class="page">
    <p>Linux driver APIs</p>
    <p>Linux defines a driver API for each device class</p>
    <p>Driver and kernel functions and variables</p>
  </div>
  <div class="page">
    <p>Example: wireless driver API</p>
    <p>Linux defines a driver API for each device class</p>
    <p>Driver and kernel functions and variables struct wireless_ops {</p>
    <p>int (*tx)(struct sk_buff*);</p>
    <p>int (*configure_filter)(int);</p>
    <p>...</p>
    <p>};</p>
    <p>struct wireless_hw {</p>
    <p>int conf;</p>
    <p>int flags</p>
    <p>....</p>
    <p>};</p>
  </div>
  <div class="page">
    <p>Example: wireless driver API</p>
    <p>Linux defines a driver API for each device class</p>
    <p>Driver and kernel functions and variables</p>
    <p>Proxy drivers and SUD-UML convert API to RPCs</p>
    <p>struct wireless_ops {</p>
    <p>int (*tx)(struct sk_buff*);</p>
    <p>int (*configure_filter)(int);</p>
    <p>...</p>
    <p>};</p>
    <p>struct wireless_hw {</p>
    <p>int conf;</p>
    <p>int flags</p>
    <p>....</p>
    <p>};</p>
  </div>
  <div class="page">
    <p>Example: wireless driver API</p>
    <p>Linux defines a driver API for each device class</p>
    <p>Driver and kernel functions and variables</p>
    <p>Proxy drivers and SUD-UML convert API to RPCs</p>
    <p>struct wireless_ops {</p>
    <p>int (*tx)(struct sk_buff*);</p>
    <p>int (*configure_filter)(int);</p>
    <p>...</p>
    <p>};</p>
    <p>struct wireless_hw {</p>
    <p>int conf;</p>
    <p>int flags</p>
    <p>....</p>
    <p>};</p>
  </div>
  <div class="page">
    <p>Example: wireless driver API</p>
    <p>Linux defines a driver API for each device class</p>
    <p>Driver and kernel functions and variables</p>
    <p>Proxy drivers and SUD-UML convert API to RPCs</p>
    <p>struct wireless_ops {</p>
    <p>int (*tx)(struct sk_buff*);</p>
    <p>int (*configure_filter)(int);</p>
    <p>...</p>
    <p>};</p>
    <p>struct wireless_hw {</p>
    <p>int conf;</p>
    <p>int flags</p>
    <p>....</p>
    <p>};</p>
    <p>Called in a nonpreemptable context</p>
  </div>
  <div class="page">
    <p>Example: wireless driver API</p>
    <p>Linux defines a driver API for each device class</p>
    <p>Driver and kernel functions and variables</p>
    <p>Proxy drivers and SUD-UML convert API to RPCs</p>
    <p>struct wireless_ops {</p>
    <p>int (*tx)(struct sk_buff*);</p>
    <p>int (*configure_filter)(int);</p>
    <p>...</p>
    <p>};</p>
    <p>struct wireless_hw {</p>
    <p>int conf;</p>
    <p>int flags</p>
    <p>....</p>
    <p>};</p>
    <p>Called in a nonpreemptable context</p>
    <p>Driver API variable</p>
  </div>
  <div class="page">
    <p>Wireless driver in SUD</p>
    <p>Basic driver API  SUD RPC API driver API</p>
    <p>Non-preemptable function: implement in proxy</p>
    <p>Driver API variable: shadow variables</p>
  </div>
  <div class="page">
    <p>Example 1: transmit a packet</p>
    <p>Kernel</p>
    <p>User</p>
    <p>Wireless proxy driver</p>
    <p>Wireless core</p>
    <p>Web browser</p>
    <p>Hardware</p>
    <p>Wireless driver</p>
    <p>User</p>
    <p>SUD UML</p>
  </div>
  <div class="page">
    <p>Example 1: transmit a packet</p>
    <p>Kernel</p>
    <p>User</p>
    <p>Wireless proxy driver</p>
    <p>Wireless core</p>
    <p>Web browser</p>
    <p>Hardware</p>
    <p>Wireless driver</p>
    <p>User</p>
    <p>SUD UML</p>
    <p>Socket write</p>
  </div>
  <div class="page">
    <p>Example 1: transmit a packet</p>
    <p>Kernel</p>
    <p>User</p>
    <p>Wireless proxy driver</p>
    <p>Wireless core</p>
    <p>Web browser</p>
    <p>Hardware</p>
    <p>Wireless driver</p>
    <p>User</p>
    <p>SUD UML wireless_ops.tx</p>
  </div>
  <div class="page">
    <p>Example 1: transmit a packet</p>
    <p>Kernel</p>
    <p>User</p>
    <p>Wireless proxy driver</p>
    <p>Wireless core</p>
    <p>Web browser</p>
    <p>Hardware</p>
    <p>Wireless driver</p>
    <p>User</p>
    <p>SUD UML</p>
    <p>TX packet RPC</p>
  </div>
  <div class="page">
    <p>Example 1: transmit a packet</p>
    <p>Kernel</p>
    <p>User</p>
    <p>Wireless proxy driver</p>
    <p>Wireless core</p>
    <p>Web browser</p>
    <p>Hardware</p>
    <p>Wireless driver</p>
    <p>User</p>
    <p>SUD UML</p>
    <p>wireless_ops.tx</p>
  </div>
  <div class="page">
    <p>Example 1: transmit a packet</p>
    <p>Kernel</p>
    <p>User</p>
    <p>Wireless proxy driver</p>
    <p>Wireless core</p>
    <p>Web browser</p>
    <p>Hardware</p>
    <p>Wireless driver</p>
    <p>User</p>
    <p>SUD UML</p>
    <p>DMA TX</p>
  </div>
  <div class="page">
    <p>Example 2: non-preemptable callback</p>
    <p>Problem: unable to switch to user-space</p>
    <p>Kernel</p>
    <p>User</p>
    <p>Wireless proxy driver</p>
    <p>Wireless core</p>
    <p>Web browser</p>
    <p>Hardware</p>
    <p>Wireless driver</p>
    <p>User</p>
    <p>SUD UML</p>
  </div>
  <div class="page">
    <p>Problem: unable to switch to user-space</p>
    <p>Kernel</p>
    <p>User</p>
    <p>Wireless proxy driver</p>
    <p>Wireless core</p>
    <p>Web browser</p>
    <p>Hardware</p>
    <p>Wireless driver</p>
    <p>User</p>
    <p>SUD UML Acquires a spin lock</p>
    <p>Example 2: non-preemptable callback</p>
  </div>
  <div class="page">
    <p>Problem: unable to switch to user-space</p>
    <p>Kernel</p>
    <p>User</p>
    <p>Wireless proxy driver</p>
    <p>Wireless core</p>
    <p>Web browser</p>
    <p>Hardware</p>
    <p>Wireless driver</p>
    <p>User</p>
    <p>SUD UML wireless_ops.configure_filter</p>
    <p>Example 2: non-preemptable callback</p>
  </div>
  <div class="page">
    <p>Problem: unable to switch to user-space</p>
    <p>Kernel</p>
    <p>User</p>
    <p>Wireless proxy driver</p>
    <p>Wireless core</p>
    <p>Web browser</p>
    <p>Hardware</p>
    <p>Wireless driver</p>
    <p>User</p>
    <p>SUD UML</p>
    <p>Filter RPC</p>
    <p>Example 2: non-preemptable callback</p>
  </div>
  <div class="page">
    <p>Problem: unable to switch to user-space</p>
    <p>Kernel</p>
    <p>User</p>
    <p>Wireless proxy driver</p>
    <p>Wireless core</p>
    <p>Web browser</p>
    <p>Hardware</p>
    <p>Wireless driver</p>
    <p>User</p>
    <p>SUD UML</p>
    <p>Example 2: non-preemptable callback</p>
  </div>
  <div class="page">
    <p>Problem: unable to switch to user-space</p>
    <p>Solution: implement directly in proxy driver</p>
    <p>Kernel</p>
    <p>User</p>
    <p>Wireless proxy driver</p>
    <p>Wireless core</p>
    <p>Web browser</p>
    <p>Hardware</p>
    <p>Wireless driver</p>
    <p>User</p>
    <p>SUD UML</p>
    <p>Example 2: non-preemptable callback</p>
  </div>
  <div class="page">
    <p>Problem: unable to switch to user-space</p>
    <p>Solution: implement directly in proxy driver</p>
    <p>Kernel</p>
    <p>User</p>
    <p>Wireless proxy driver</p>
    <p>Wireless core</p>
    <p>Web browser</p>
    <p>Hardware</p>
    <p>Wireless driver</p>
    <p>User</p>
    <p>SUD UML</p>
    <p>Register RX packet types</p>
    <p>Example 2: non-preemptable callback</p>
  </div>
  <div class="page">
    <p>Problem: unable to switch to user-space</p>
    <p>Solution: implement directly in proxy driver</p>
    <p>Kernel</p>
    <p>User</p>
    <p>Wireless proxy driver</p>
    <p>Wireless core</p>
    <p>Web browser</p>
    <p>Hardware</p>
    <p>Wireless driver</p>
    <p>User</p>
    <p>SUD UML</p>
    <p>Example 2: non-preemptable callback</p>
    <p>Acquires a spin lock</p>
  </div>
  <div class="page">
    <p>Problem: unable to switch to user-space</p>
    <p>Solution: implement directly in proxy driver</p>
    <p>Kernel</p>
    <p>User</p>
    <p>Wireless proxy driver</p>
    <p>Wireless core</p>
    <p>Web browser</p>
    <p>Hardware</p>
    <p>Wireless driver</p>
    <p>User</p>
    <p>SUD UML</p>
    <p>Example 2: non-preemptable callback</p>
    <p>wireless_ops.configure_filter</p>
  </div>
  <div class="page">
    <p>Problem: unable to switch to user-space</p>
    <p>Solution: implement directly in proxy driver</p>
    <p>Kernel</p>
    <p>User</p>
    <p>Wireless proxy driver</p>
    <p>Wireless core</p>
    <p>Web browser</p>
    <p>Hardware</p>
    <p>Wireless driver</p>
    <p>User</p>
    <p>SUD UML</p>
    <p>Example 2: non-preemptable callback</p>
    <p>Return RX packet types</p>
  </div>
  <div class="page">
    <p>Example 3: driver API variables</p>
    <p>Problem: user-space can't access API variables</p>
    <p>Kernel</p>
    <p>User</p>
    <p>Wireless proxy driver</p>
    <p>Wireless core</p>
    <p>Web browser</p>
    <p>Hardware</p>
    <p>Wireless driver</p>
    <p>User</p>
    <p>SUD UML</p>
    <p>wireless_hw</p>
  </div>
  <div class="page">
    <p>Problem: user-space can't access API variables</p>
    <p>Kernel</p>
    <p>User</p>
    <p>Wireless proxy driver</p>
    <p>Wireless core</p>
    <p>Web browser</p>
    <p>Hardware</p>
    <p>Wireless driver</p>
    <p>User</p>
    <p>SUD UML</p>
    <p>wireless_hw</p>
    <p>Driver API variable</p>
    <p>Example 3: driver API variables</p>
  </div>
  <div class="page">
    <p>Problem: user-space can't access API variables</p>
    <p>Kernel</p>
    <p>User</p>
    <p>Wireless proxy driver</p>
    <p>Wireless core</p>
    <p>Web browser</p>
    <p>Hardware</p>
    <p>Wireless driver</p>
    <p>User</p>
    <p>SUD UML</p>
    <p>wireless_hw</p>
    <p>Writes to wireless_hw</p>
    <p>Example 3: driver API variables</p>
  </div>
  <div class="page">
    <p>Problem: user-space can't access API variables</p>
    <p>Kernel</p>
    <p>User</p>
    <p>Wireless proxy driver</p>
    <p>Wireless core</p>
    <p>Web browser</p>
    <p>Hardware</p>
    <p>Wireless driver</p>
    <p>User</p>
    <p>SUD UML</p>
    <p>wireless_hw</p>
    <p>Example 3: driver API variables</p>
  </div>
  <div class="page">
    <p>Problem: user-space can't access API variables</p>
    <p>Solution: allocate a shadow copy and synchronize before and after RPCs</p>
    <p>Kernel</p>
    <p>User</p>
    <p>Wireless proxy driver</p>
    <p>Wireless core</p>
    <p>Web browser</p>
    <p>Hardware</p>
    <p>Wireless driver</p>
    <p>User</p>
    <p>SUD UML</p>
    <p>wireless_hw</p>
    <p>Example 3: driver API variables</p>
  </div>
  <div class="page">
    <p>Problem: user-space can't access API variables</p>
    <p>Solution: allocate a shadow copy and synchronize before and after RPCs</p>
    <p>Kernel</p>
    <p>User</p>
    <p>Wireless proxy driver</p>
    <p>Wireless core</p>
    <p>Web browser</p>
    <p>Hardware</p>
    <p>Wireless driver</p>
    <p>User</p>
    <p>SUD UML</p>
    <p>wireless_hw</p>
    <p>wireless_hw</p>
    <p>Shadow variable</p>
    <p>Example 3: driver API variables</p>
  </div>
  <div class="page">
    <p>Problem: user-space can't access API variables</p>
    <p>Solution: allocate a shadow copy and synchronize before and after RPCs</p>
    <p>Kernel</p>
    <p>User</p>
    <p>Wireless proxy driver</p>
    <p>Wireless core</p>
    <p>Web browser</p>
    <p>Hardware</p>
    <p>Wireless driver</p>
    <p>User</p>
    <p>SUD UML</p>
    <p>wireless_hw</p>
    <p>wireless_hw Writes to</p>
    <p>wireless_hw</p>
    <p>Example 3: driver API variables</p>
  </div>
  <div class="page">
    <p>Problem: user-space can't access API variables</p>
    <p>Solution: allocate a shadow copy and synchronize before and after RPCs</p>
    <p>Kernel</p>
    <p>User</p>
    <p>Wireless proxy driver</p>
    <p>Wireless core</p>
    <p>Web browser</p>
    <p>Hardware</p>
    <p>Wireless driver</p>
    <p>User</p>
    <p>SUD UML</p>
    <p>wireless_hw</p>
    <p>wireless_hw</p>
    <p>Synchronize before sending RPC</p>
    <p>Example 3: driver API variables</p>
  </div>
  <div class="page">
    <p>Problem: user-space can't access API variables</p>
    <p>Solution: allocate a shadow copy and synchronize before and after RPCs</p>
    <p>Kernel</p>
    <p>User</p>
    <p>Wireless proxy driver</p>
    <p>Wireless core</p>
    <p>Web browser</p>
    <p>Hardware</p>
    <p>Wireless driver</p>
    <p>User</p>
    <p>SUD UML</p>
    <p>wireless_hw</p>
    <p>wireless_hw</p>
    <p>Send RPC</p>
    <p>Example 3: driver API variables</p>
  </div>
  <div class="page">
    <p>Problem: user-space can't access API variables</p>
    <p>Solution: allocate a shadow copy and synchronize before and after RPCs</p>
    <p>Kernel</p>
    <p>User</p>
    <p>Wireless proxy driver</p>
    <p>Wireless core</p>
    <p>Web browser</p>
    <p>Hardware</p>
    <p>Wireless driver</p>
    <p>User</p>
    <p>SUD UML</p>
    <p>wireless_hw</p>
    <p>wireless_hw</p>
    <p>Reads updates from shadow variable</p>
    <p>Example 3: driver API variables</p>
  </div>
  <div class="page">
    <p>SUD overview</p>
    <p>Kernel</p>
    <p>User</p>
    <p>Proxy driver Kernel core</p>
    <p>Application</p>
    <p>Hardware</p>
    <p>Driver</p>
    <p>User</p>
    <p>SUD UML</p>
    <p>HW access module</p>
  </div>
  <div class="page">
    <p>SUD overview</p>
    <p>Kernel</p>
    <p>User</p>
    <p>Proxy driver Kernel core</p>
    <p>Application</p>
    <p>Hardware</p>
    <p>Driver</p>
    <p>User</p>
    <p>SUD UML</p>
    <p>HW access module</p>
  </div>
  <div class="page">
    <p>Attacks from hardware</p>
    <p>CPU</p>
    <p>PCI bus</p>
    <p>DRAM</p>
    <p>Memory interconnect</p>
  </div>
  <div class="page">
    <p>Attacks from hardware</p>
    <p>CPU</p>
    <p>PCI bus</p>
    <p>DRAM</p>
    <p>Memory interconnect</p>
    <p>Driver configures the device to execute attacks</p>
  </div>
  <div class="page">
    <p>Attacks from hardware</p>
    <p>CPU</p>
    <p>PCI bus</p>
    <p>DRAM</p>
    <p>Memory interconnect</p>
    <p>Driver configures the device to execute attacks</p>
    <p>DMA to DRAM</p>
  </div>
  <div class="page">
    <p>Attacks from hardware</p>
    <p>CPU</p>
    <p>PCI bus</p>
    <p>DRAM</p>
    <p>Memory interconnect</p>
    <p>Driver configures the device to execute attacks</p>
    <p>DMA to DRAM</p>
    <p>Peer-to-peer messages</p>
  </div>
  <div class="page">
    <p>Attacks from hardware</p>
    <p>CPU</p>
    <p>PCI bus</p>
    <p>DRAM</p>
    <p>Memory interconnect</p>
    <p>Driver configures the device to execute attacks</p>
    <p>DMA to DRAM</p>
    <p>Peer-to-peer messages</p>
    <p>Interrupt storms</p>
  </div>
  <div class="page">
    <p>Attacks from hardware</p>
    <p>Driver configures the device to execute attacks</p>
    <p>DMA to DRAM</p>
    <p>Peer-to-peer messages</p>
    <p>Interrupt storms</p>
    <p>HW access module prevents attacks</p>
    <p>Interposes on driver-device communication</p>
    <p>Uses IO virtualization to provide direct device access</p>
  </div>
  <div class="page">
    <p>IO virtualization hardware</p>
    <p>CPU MSI</p>
    <p>IOMMU PCI express</p>
    <p>switch</p>
    <p>DRAM</p>
    <p>Memory interconnect</p>
    <p>APIC interconnect</p>
  </div>
  <div class="page">
    <p>IO virtualization hardware</p>
    <p>CPU MSI</p>
    <p>IOMMU PCI express</p>
    <p>switch</p>
    <p>DRAM</p>
    <p>Memory interconnect</p>
    <p>APIC interconnect</p>
    <p>Use IOMMU to map DMA buffer pools</p>
    <p>Prevents DMA to DRAM attacks</p>
  </div>
  <div class="page">
    <p>IO virtualization hardware</p>
    <p>CPU MSI</p>
    <p>IOMMU PCI express</p>
    <p>switch</p>
    <p>DRAM</p>
    <p>Memory interconnect</p>
    <p>APIC interconnect</p>
    <p>Use PCI ACS to prevent peer-to-peer messaging</p>
    <p>Prevents peer-to-peer attacks</p>
  </div>
  <div class="page">
    <p>IO virtualization hardware</p>
    <p>CPU MSI</p>
    <p>IOMMU PCI express</p>
    <p>switch</p>
    <p>DRAM</p>
    <p>Memory interconnect</p>
    <p>APIC interconnect</p>
    <p>Use MSI to mask interrupts</p>
    <p>Prevents interrupt storms</p>
  </div>
  <div class="page">
    <p>Interrupt handlers in Linux</p>
    <p>Kernel</p>
    <p>Driver IRQ core</p>
    <p>User MSI</p>
  </div>
  <div class="page">
    <p>Interrupt handlers in Linux</p>
    <p>Kernel</p>
    <p>Driver IRQ core</p>
    <p>User MSI</p>
  </div>
  <div class="page">
    <p>Interrupt handlers in Linux</p>
    <p>Driver called with IRQs disabled (non-preemptable)</p>
    <p>Kernel</p>
    <p>Driver IRQ core</p>
    <p>User MSI</p>
  </div>
  <div class="page">
    <p>Interrupt handlers in Linux</p>
    <p>Kernel calls driver interrupt handler</p>
    <p>Driver clears interrupt flag</p>
    <p>Kernel</p>
    <p>Driver IRQ core</p>
    <p>User MSI</p>
  </div>
  <div class="page">
    <p>Interrupt handlers with SUD</p>
    <p>Kernel</p>
    <p>HW access module</p>
    <p>IRQ core</p>
    <p>User MSI</p>
    <p>Driver</p>
    <p>SUD UML</p>
  </div>
  <div class="page">
    <p>Interrupt handlers with SUD</p>
    <p>Kernel calls HW access module interrupt handler</p>
    <p>HW access module masks interrupt with MSI</p>
    <p>Kernel</p>
    <p>HW access module</p>
    <p>IRQ core</p>
    <p>User MSI</p>
    <p>Driver</p>
    <p>SUD UML</p>
  </div>
  <div class="page">
    <p>Interrupt handlers with SUD</p>
    <p>Kernel calls HW access module interrupt handler</p>
    <p>HW access module masks interrupt with MSI</p>
    <p>Kernel</p>
    <p>HW access module</p>
    <p>IRQ core</p>
    <p>User MSI</p>
    <p>Driver</p>
    <p>SUD UML</p>
  </div>
  <div class="page">
    <p>Interrupt handlers with SUD</p>
    <p>Kernel calls HW access module interrupt handler</p>
    <p>HW access module masks interrupt with MSI</p>
    <p>Asynchronous RPC to driver</p>
    <p>Kernel</p>
    <p>HW access module</p>
    <p>IRQ core</p>
    <p>User MSI</p>
    <p>Driver</p>
    <p>SUD UML</p>
  </div>
  <div class="page">
    <p>Interrupt handlers with SUD</p>
    <p>Kernel calls HW access module interrupt handler</p>
    <p>HW access module masks interrupt with MSI</p>
    <p>Asynchronous RPC to driver</p>
    <p>Driver clears interrupt</p>
    <p>Kernel</p>
    <p>HW access module</p>
    <p>IRQ core</p>
    <p>User MSI</p>
    <p>Driver</p>
    <p>SUD UML</p>
  </div>
  <div class="page">
    <p>Interrupt handlers with SUD</p>
    <p>HW access module masks interrupt with MSI</p>
    <p>Asynchronous RPC to driver</p>
    <p>Driver clears interrupt</p>
    <p>HW access module unmasks MSI</p>
    <p>Kernel</p>
    <p>HW access module</p>
    <p>IRQ core</p>
    <p>User MSI</p>
    <p>Driver</p>
    <p>SUD UML</p>
  </div>
  <div class="page">
    <p>SUD overview</p>
    <p>Kernel</p>
    <p>User</p>
    <p>Proxy driver Kernel core</p>
    <p>Application</p>
    <p>Hardware</p>
    <p>Driver</p>
    <p>User</p>
    <p>SUD UML</p>
    <p>HW access module</p>
  </div>
  <div class="page">
    <p>Prototype of SUD</p>
    <p>Supports all Ethernet, wireless, USB, audio drivers</p>
    <p>Tested: e1000e, ne2k-pci, iwlagn, snd_hda_intel, ehci_hcd, uhci_hcd, ...</p>
    <p>Trusted code Lines of code PCI access module 2800 Ethernet proxy driver 300 Wireless proxy driver 600 Audio proxy driver 550</p>
    <p>Untrusted code Lines of code User-mode runtime 5000 Drivers 5000  50,000 (each)</p>
  </div>
  <div class="page">
    <p>Trusted code Lines of code PCI access module 2800 Ethernet proxy driver 300 Wireless proxy driver 600 Audio proxy driver 550</p>
    <p>Untrusted code Lines of code User-mode runtime 5000 Drivers 5000  50,000 (each)</p>
    <p>Prototype of SUD</p>
    <p>Supports all Ethernet, wireless, USB, audio drivers</p>
    <p>Tested: e1000e, ne2k-pci, iwlagn, snd_hda_intel, ehci_hcd, uhci_hcd, ...</p>
  </div>
  <div class="page">
    <p>Trusted code Lines of code PCI access module 2800 Ethernet proxy driver 300 Wireless proxy driver 600 Audio proxy driver 550</p>
    <p>Untrusted code Lines of code User-mode runtime 5000 Drivers 5000  50,000 (each)</p>
    <p>Prototype of SUD</p>
    <p>Supports all Ethernet, wireless, USB, audio drivers</p>
    <p>Tested: e1000e, ne2k-pci, iwlagn, snd_hda_intel, ehci_hcd, uhci_hcd, ...</p>
  </div>
  <div class="page">
    <p>Performance</p>
    <p>For most devices, does not matter</p>
    <p>Printers, cameras,</p>
    <p>Stress-test: e1000e gigabit network card</p>
    <p>Requires high throughput</p>
    <p>Requires low latency</p>
    <p>Many device driver interactions</p>
    <p>Test machine: 1.4GHz dual core Thinkpad</p>
  </div>
  <div class="page">
    <p>Performance questions?</p>
    <p>What performance does SUD get?</p>
    <p>Network throughput, latency</p>
    <p>How much does it cost?</p>
    <p>CPU cycles</p>
  </div>
  <div class="page">
    <p>SUD achieves same device performance</p>
    <p>TCP UDP TX UDP RX UDP latency 0</p>
    <p>Linux Sud</p>
    <p>Normalized throughput relative to Linux</p>
    <p>TCP: streaming (950 Mbps in both cases)</p>
    <p>UDP: one-byte-data packets</p>
    <p>T h</p>
    <p>ro u</p>
    <p>g h</p>
    <p>p u</p>
    <p>t re</p>
    <p>la tiv</p>
    <p>e t</p>
    <p>o L</p>
    <p>in u</p>
    <p>x</p>
  </div>
  <div class="page">
    <p>CPU cost is low</p>
    <p>TCP UDP TX UDP RX UDP latency 0</p>
    <p>Linux Sud</p>
    <p>SUD overhead: user-kernel switch, TLB misses</p>
    <p>Overheads not significant for many workloads (packets larger than min. packet size)</p>
    <p>C P</p>
    <p>U u</p>
    <p>ti liz</p>
    <p>a ti o</p>
    <p>n</p>
  </div>
  <div class="page">
    <p>Future directions</p>
    <p>Explore hierarchical untrusted device drivers</p>
    <p>PCI bus  SATA controller  SATA disk</p>
    <p>Explore giving apps direct hardware access</p>
    <p>Safe HW access for network analyzer, X server,</p>
    <p>Performance analysis and optimizations</p>
    <p>SUD specific device drivers, super pages, ...</p>
  </div>
  <div class="page">
    <p>Related work</p>
    <p>Mircokernels (Minix, L4, ...)</p>
    <p>Simple drivers, driver API designed for user-space</p>
    <p>Nooks, microdrivers</p>
    <p>Handles common bugs, many changes to kernel</p>
    <p>Languages (e.g. Termite), source code analysis</p>
    <p>Complimentary to user-space drivers</p>
    <p>No need for new OS or language</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>Driver bugs lead to system crashes or exploits</p>
    <p>SUD protects Linux from malicious drivers using proxy drivers and IO virtualization HW</p>
    <p>Runs unmodified Linux device drivers</p>
    <p>High performance, low overheads</p>
    <p>Few modifications to Linux kernel</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Security evaluation</p>
    <p>Manually constructed potential attacks</p>
    <p>Memory corruption, arbitrary upcall responses, not responding at all, arbitrary DMA, ...</p>
    <p>Relied on security heavily during development</p>
    <p>SUD caught all bugs in user-mode driver framework</p>
    <p>No crashes / reboots required to develop drivers</p>
    <p>Ideal, but not done: red-team evaluation?</p>
  </div>
</Presentation>
