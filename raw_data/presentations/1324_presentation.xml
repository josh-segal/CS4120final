<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Nebulas: Using Distributed Voluntary Resources to Build Clouds</p>
    <p>Abhishek Chandra and Jon Weissman Department of Computer Science</p>
  </div>
  <div class="page">
    <p>Clouds</p>
    <p>Cloud: Hides details of actual service deployment from users</p>
    <p>Users</p>
  </div>
  <div class="page">
    <p>Current Cloud Model</p>
    <p>Cloud: Hides details of actual service deployment from users</p>
    <p>Users</p>
  </div>
  <div class="page">
    <p>Current Cloud Model</p>
    <p>Largely centralized (or small degree of distribution)</p>
    <p>Pay-as-you-go model  Strong guarantees</p>
    <p>Question: Are there services that do not need/ fit this cloud model?</p>
  </div>
  <div class="page">
    <p>Class 1: Experimental Services</p>
    <p>Experimental deployment for:  Debugging, viability, requirement estimation</p>
  </div>
  <div class="page">
    <p>Class 1: Experimental Services</p>
    <p>SOSP 07 USENIX 09</p>
    <p>OSDI 08</p>
    <p>SOSP 2009</p>
    <p>Experimental deployment for:  Debugging, viability, requirement estimation</p>
  </div>
  <div class="page">
    <p>Class 2: Dispersed-Data-Intensive Services  Data is geographically distributed</p>
    <p>Costly, inefficient to move to central location</p>
  </div>
  <div class="page">
    <p>Class 2: Dispersed-Data-Intensive Services</p>
    <p>blog1 blog2</p>
    <p>blog3</p>
    <p>Data is geographically distributed  Costly, inefficient to move to central location</p>
  </div>
  <div class="page">
    <p>Class 3: Shared Public Services</p>
    <p>Tour of</p>
    <p>Paris</p>
    <p>Personal application offered as free service  User-demand driven, scale-up/scale-down needed</p>
  </div>
  <div class="page">
    <p>Class 3: Shared Public Services</p>
    <p>Tour of</p>
    <p>Paris</p>
    <p>Personal application offered as free service  User-demand driven, scale-up/scale-down needed</p>
  </div>
  <div class="page">
    <p>Common Service Characteristics</p>
    <p>Elastic resource consumption  Scale up/down based on demand</p>
    <p>Geographical data/user distribution  Execution dependent on location of data/user</p>
    <p>Low/no cost  Do not want to pay for resources</p>
    <p>Weak performance/robustness requirements  Some failures may be ok</p>
  </div>
  <div class="page">
    <p>Users</p>
    <p>Cloud  Cloud: Hides details of actual service deployment</p>
    <p>from users</p>
  </div>
  <div class="page">
    <p>Nebula  Decentralized, less-managed cloud</p>
    <p>Dispersed storage/compute resources  No/low user cost</p>
    <p>Users</p>
  </div>
  <div class="page">
    <p>Building Nebulas</p>
    <p>Idea: Use distributed voluntary resources  Resources donated by end-users  ala @home, P2P systems</p>
  </div>
  <div class="page">
    <p>Why Voluntary Resources?</p>
    <p>Scalability: Large number of resources available  SETI@Home: Over 2.2 million computers contributing</p>
    <p>~510 TFlops of compute power  Kazaa: Over 3.5 million users</p>
    <p>Low cost:  Minimal deployment, management costs  [Kondo09]: 2 orders of magnitude difference in EC2</p>
    <p>vs. SETI@home resources/$  Dispersion: Geographically distributed</p>
    <p>Users can be located worldwide</p>
  </div>
  <div class="page">
    <p>How is Nebula different from @home?</p>
    <p>Cloud-oriented services impose new requirements</p>
    <p>Requirement Nebula @home</p>
    <p>Collective performance</p>
    <p>High None</p>
    <p>Locality/Contextawareness</p>
    <p>High Low</p>
    <p>Statefulness High/medium Low</p>
  </div>
  <div class="page">
    <p>University of Minnesota 17</p>
    <p>Challenges</p>
    <p>Heterogeneity  Different nodes have different CPU speeds, network</p>
    <p>bandwidth, loads</p>
    <p>Resource dispersion  Data sources and compute resources may be widely</p>
    <p>distributed</p>
    <p>Unreliability  Node/link failures, high churn</p>
  </div>
  <div class="page">
    <p>Handling Heterogeneity</p>
    <p>Heterogeneity-aware resource selection and allocation  Allows better collective performance</p>
    <p>Trivedi et al. [IJHPCA06]: Fit tasks to node capability</p>
    <p>Heterogeneity-aware allocation reduces execution time</p>
  </div>
  <div class="page">
    <p>Handling Data Dependence</p>
    <p>Find compute nodes and data sources with high accessibility to each other</p>
    <p>Kim et al. [UM-TR08]: Use passive accessibility estimation</p>
    <p>Data accessibility-based selection improves download time</p>
  </div>
  <div class="page">
    <p>Handling Failures</p>
    <p>Replication, state-maintenance  Sonnek et al. [TPDS07]: Reliability-aware dynamic replication</p>
    <p>Dynamic replication improves performance, reliability</p>
  </div>
  <div class="page">
    <p>Other Issues/Challenges</p>
    <p>Incentivizing Nebulas  Market economy, bartering, auctions  How to prevent cheating/freeloading?</p>
    <p>Deployment tools/APIs/client support  Virtualization, Middleware?</p>
    <p>Privacy/security issues  How to secure systems and applications?  We think: Nebulas not suitable for privacy</p>
    <p>sensitive services</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>Current Cloud models:  Well-provisioned, well-managed, centralized</p>
    <p>Some service classes:  Need loose performance, low/no cost, distributed</p>
    <p>data-intensive</p>
    <p>Nebula: Distributed, less-managed clouds  Use voluntary resources</p>
  </div>
</Presentation>
