<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>VoteAgain: A scalable coercion-resistant voting system</p>
    <p>Wouter Lueks  EPFL, Spring Lab Iigo Querejeta-Azurmendi  Universidad Carlos II Madrid &amp; ITEFI, CSIC Carmela Troncoso  EPFL, Spring Lab</p>
  </div>
  <div class="page">
    <p>Coercion resistance</p>
    <p>https://commons.wikimedia.org/wiki/Category:Voting_booths#/media/File:UK_Polling_Booth_2011.JPG</p>
  </div>
  <div class="page">
    <p>Resisting Coercion: Revoting</p>
    <p>Election phase Tally phase</p>
    <p>ballot</p>
    <p>ballot</p>
    <p>Cast Ballot Silently Not Counted</p>
    <p>Counted</p>
    <p>Count only last ballot</p>
  </div>
  <div class="page">
    <p>Assumptions</p>
    <p>Fake Credentials Revoting</p>
    <p>No coercion at pre-election  N/A</p>
    <p>Need to lie convincingly</p>
    <p>Need device to store credentials</p>
    <p>Inalienable means of authentication</p>
    <p>Coercer absent at some point during election phase</p>
    <p>Coercer absent at end of election phase</p>
  </div>
  <div class="page">
    <p>Improving scalability</p>
    <p>Existing revoting schemes [Achenbach et al.]</p>
    <p>O(n2) VoteAgain</p>
    <p>O(n log n)</p>
  </div>
  <div class="page">
    <p>Overview of VoteAgain</p>
    <p>Election Phase Tally Phase</p>
    <p>Polling Authority</p>
    <p>Public Bulletin Board</p>
    <p>Filter by Tally Server</p>
    <p>All Ballots Filtered Ballots</p>
    <p>Proof of</p>
    <p>Correct Filter</p>
    <p>Shuffle and Decrypt</p>
    <p>by Trustees Correct</p>
    <p>Decryption</p>
    <p>Election Result</p>
  </div>
  <div class="page">
    <p>The anatomy of a ballot</p>
    <p>can</p>
    <p>Encrypted candidate</p>
    <p>Proof of correct</p>
    <p>encryption</p>
    <p>Proof of voter</p>
    <p>eligibility</p>
    <p>vid</p>
    <p>Encrypted voter</p>
    <p>identity</p>
    <p>ctr</p>
    <p>Encrypted ballot</p>
    <p>counter</p>
  </div>
  <div class="page">
    <p>A naive public filtering</p>
    <p>can vid ctr</p>
    <p>c1 1 44</p>
    <p>c3 1 45</p>
    <p>c2 2 133</p>
    <p>c2 2 134</p>
    <p>Shuffle Decrypt vid, ctr</p>
    <p>c1 1 44</p>
    <p>c2 2 134</p>
    <p>c2 2 133</p>
    <p>c3 1 45</p>
    <p>Group by voter and sort</p>
    <p>Voter 1</p>
    <p>c1 44</p>
    <p>c3 45</p>
    <p>Voter 2</p>
    <p>c2 133</p>
    <p>c2 134</p>
  </div>
  <div class="page">
    <p>Key Idea: Insert a deterministic amount of dummy ballots to enable coercion resistant filtering in the clear</p>
  </div>
  <div class="page">
    <p>All possible groups</p>
    <p>Public Information</p>
    <p>Number of ballots  Number of voters</p>
  </div>
  <div class="page">
    <p>A simple cover</p>
    <p>Public Information</p>
    <p>Number of ballots  Number of voters</p>
    <p>Cover for all possible groupings</p>
  </div>
  <div class="page">
    <p>A simple cover</p>
    <p>Public Information</p>
    <p>Number of ballots  Number of voters</p>
    <p>Cover for all possible groupings</p>
  </div>
  <div class="page">
    <p>Padding up to 2-powers</p>
  </div>
  <div class="page">
    <p>A better cover</p>
    <p>Cover for all possible padded groupings</p>
  </div>
  <div class="page">
    <p>A better cover</p>
    <p>Cover for all possible padded groupings</p>
  </div>
  <div class="page">
    <p>Ensuring verifiability</p>
    <p>Dummy voters do not change election outcome</p>
    <p>Dummy ballots for real voters do not replace real</p>
    <p>votes</p>
    <p>Proof of correct filtering</p>
  </div>
  <div class="page">
    <p>Security Analysis</p>
    <p>Polling Authority Tally Server Bulletin Board Trustees</p>
    <p>Verifiability Trusted Untrusted Untrusted Untrusted</p>
    <p>Ballot Privacy Untrusted Untrusted Untrusted k-out-of-n</p>
    <p>Coercion Resistance Trusted Trusted Trusted* Untrusted</p>
    <p>Full definitions and proofs in the paper!</p>
    <p>Enables: no need to keep state Enables: fast filtering</p>
  </div>
  <div class="page">
    <p>Performance evaluation</p>
    <p>Cryptographic prototype:  Python implementation using the</p>
    <p>petlib wrapper around OpenSSL  Includes all verifiable shuffles and</p>
    <p>zero-knowledge proofs  Measured single-core</p>
    <p>performance</p>
    <p>Open source: https://github.com/spring-epfl/ voteagain/</p>
    <p>#voters</p>
    <p>T im</p>
    <p>e (s</p>
    <p>)</p>
    <p>Filter</p>
    <p>VerifyFilter</p>
    <p>Achenbach Filter</p>
    <p>Estimate: an 8x28 core machine filters 150M ballots in around an hour</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>VoteAgain  Provides coercion resistance by</p>
    <p>enabling revoting  Adds deterministic dummies to</p>
    <p>enable fast public filtering  Security definitions and proofs in</p>
    <p>the paper  Code online: https://github.com/</p>
    <p>spring-epfl/voteagain/ https://wouterlueks.nl/ wouter.lueks@epfl.ch</p>
  </div>
</Presentation>
