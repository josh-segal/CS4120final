<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>ShadowStream: Performance Evaluation as a Capability in</p>
    <p>Production Internet Live Streaming Networks</p>
    <p>Chen Tian Richard Alimi</p>
    <p>Yang Richard Yang David Zhang</p>
    <p>Aug. 16, 2012</p>
    <p>Chen Tian Richard Alimi</p>
    <p>Yang Richard Yang David Zhang</p>
    <p>Aug. 16, 2012</p>
  </div>
  <div class="page">
    <p>Live Streaming is a Major Internet App</p>
  </div>
  <div class="page">
    <p>Poor Performance After Updates</p>
    <p>Lacking sufficient evaluation before releaseLacking sufficient evaluation before release</p>
  </div>
  <div class="page">
    <p>Dont We Already Have</p>
    <p>Emulab  PlanetLab  .</p>
    <p>Testbeds</p>
    <p>Gradually rolling out</p>
    <p>Testing Channels</p>
    <p>They are not enough !They are not enough !</p>
  </div>
  <div class="page">
    <p>Live Streaming Background</p>
    <p>We focus on hybrid live streaming systems: CDN + P2P</p>
  </div>
  <div class="page">
    <p>Live Streaming Background</p>
    <p>We focus on hybrid live streaming systems: CDN + P2P</p>
  </div>
  <div class="page">
    <p>With Connection Limit</p>
    <p>Testbed: Misleading Results at Small Scale</p>
    <p>Production Default</p>
    <p>Small-Scale Large-Scale Piece Missing Ratio</p>
    <p>Live streaming performance can be highly non-linear.Live streaming performance can be highly non-linear.</p>
  </div>
  <div class="page">
    <p>Testbed: Misleading Results due to Missing Features</p>
    <p>Piece Missing Ratio</p>
    <p># Timed-out Requests</p>
    <p># Received Duplicate Packets</p>
    <p># Received Outdated Packets</p>
    <p>LAN Style (Same BW)</p>
    <p>ADSL Style (Same BW)</p>
    <p>Realistic features can have large performance impacts.Realistic features can have large performance impacts.</p>
  </div>
  <div class="page">
    <p>Testing Channel: Lacking QoE Protection</p>
  </div>
  <div class="page">
    <p>Testing Channel: Lacking Orchestration</p>
    <p>What we want is  What we have is</p>
    <p>Time (Seconds)</p>
    <p>N um</p>
    <p>be r</p>
    <p>of P</p>
    <p>ee rs</p>
    <p>Expected</p>
    <p>Time (Seconds)</p>
    <p>N um</p>
    <p>be r</p>
    <p>of P</p>
    <p>ee rs</p>
    <p>Expected Provided</p>
  </div>
  <div class="page">
    <p>ShadowStream Design Goal</p>
    <p>Protection of real user QoE  Transparent orchestration of testing conditions</p>
    <p>Use production network for testing with</p>
  </div>
  <div class="page">
    <p>Roadmap</p>
    <p>Motivation</p>
    <p>Protection Design</p>
    <p>Orchestration Design</p>
    <p>Evaluations</p>
    <p>Conclusions and Future Work</p>
  </div>
  <div class="page">
    <p>Protection: Basic Scheme</p>
    <p>Note: R denotes Repair, E denotes Experiment</p>
  </div>
  <div class="page">
    <p>Example Illustration: E Success</p>
  </div>
  <div class="page">
    <p>Example Illustration: E Success</p>
  </div>
  <div class="page">
    <p>Example Illustration: E Success</p>
  </div>
  <div class="page">
    <p>Example Illustration: E Fail</p>
  </div>
  <div class="page">
    <p>Example Illustration: E Fail</p>
  </div>
  <div class="page">
    <p>Example Illustration: E Fail</p>
  </div>
  <div class="page">
    <p>Example Illustration: E Fail</p>
  </div>
  <div class="page">
    <p>How to Repair? Choice 1: dedicated CDN resources (R=rCDN)</p>
    <p>Benefit: simple  Limitations</p>
    <p>requires resource reservation, e.g., 100,000 clients x 1 Mbps = 100 Gbps</p>
    <p>may not work well when there is network bottleneck</p>
  </div>
  <div class="page">
    <p>How to Repair?</p>
    <p>Choice 2: production machine (R=production)</p>
    <p>Benefit 1: Larger resource pool</p>
    <p>Benefit 2: Fine-tuned algorithms</p>
    <p>Benefit 3: A unified approach to protection &amp; orchestration (later)</p>
  </div>
  <div class="page">
    <p>R= Production: Resource Competition</p>
    <p>Competition leads to underestimation on</p>
    <p>Experiment performance</p>
    <p>Repair and Experiment compete on client</p>
    <p>upload bandwidth</p>
  </div>
  <div class="page">
    <p>R= Production: Misleading Result</p>
    <p>missing</p>
    <p>ratio</p>
    <p>x+y=0</p>
    <p>accurate</p>
    <p>result</p>
    <p>repair demand</p>
    <p>misleading</p>
    <p>result</p>
  </div>
  <div class="page">
    <p>Putting Together: PCE</p>
  </div>
  <div class="page">
    <p>Putting Together: PCE</p>
  </div>
  <div class="page">
    <p>Implementing PCE</p>
    <p>Streaming machine transparent of testing state  Streaming machines are isolated from each other</p>
    <p>Requirements</p>
  </div>
  <div class="page">
    <p>Implementing PCE: base observation</p>
    <p>A simple partitioned sliding window to partition downloading tasks among PCE automatically</p>
    <p>unavailableunavailable piece missing responsibility transferred</p>
  </div>
  <div class="page">
    <p>Client Components</p>
  </div>
  <div class="page">
    <p>Roadmap</p>
    <p>Motivation</p>
    <p>Protection Design</p>
    <p>Orchestration Design</p>
    <p>Evaluations</p>
    <p>Conclusions and Future Work</p>
  </div>
  <div class="page">
    <p>Orchestration Challenges</p>
    <p>How to start an Experiment streaming machine  Transparent to real viewers</p>
    <p>How to control the arrival/departure of each Experiment machine in a scalable way</p>
  </div>
  <div class="page">
    <p>Transparent Orchestration Idea</p>
  </div>
  <div class="page">
    <p>Transparent Orchestration Idea</p>
  </div>
  <div class="page">
    <p>Transparent Orchestration Idea</p>
  </div>
  <div class="page">
    <p>Distributed Activation of Testing  Orchestrator distributes parameters to clients  Each client independently generates its arrival time</p>
    <p>according to the same distribution function F(t)  Together they achieve global arrival pattern</p>
    <p>Cox and Lewis Theorem</p>
  </div>
  <div class="page">
    <p>Orchestrator Components</p>
  </div>
  <div class="page">
    <p>Roadmap</p>
    <p>Motivation</p>
    <p>Protection Design</p>
    <p>Orchestration Design</p>
    <p>Evaluations</p>
    <p>Conclusions and Future Work</p>
  </div>
  <div class="page">
    <p>Software Implementation  Compositional Runtime</p>
    <p>Modular design, including scheduler, dynamic loading of blocks, etc.</p>
    <p>3400 lines of code  Pre-packaged blocks</p>
    <p>HTTP integration, UDP sockets and debugging  500 lines of code</p>
    <p>Live streaming machine  4200 lines of code</p>
  </div>
  <div class="page">
    <p>Experimental Opportunities</p>
  </div>
  <div class="page">
    <p>Protection and Accuracy</p>
    <p>Virtual Playpoint</p>
    <p>Real Playpoint</p>
    <p>Buggy</p>
    <p>N/A</p>
    <p>R=rCDN</p>
    <p>R=rCDN w/ bottleneck</p>
    <p>Piece Missing Ratio</p>
  </div>
  <div class="page">
    <p>Protection and Accuracy</p>
    <p>Virtual Playpoint</p>
    <p>Real Playpoint</p>
    <p>PCE bottleneck</p>
    <p>PCE w/ higher bottleneck</p>
    <p>Piece Missing Ratio</p>
  </div>
  <div class="page">
    <p>Orchestration: Distributed Activation</p>
  </div>
  <div class="page">
    <p>Utility on Top: Deterministic Replay</p>
    <p>Event  Message  Random seeds</p>
    <p>Control non-deterministic inputs</p>
    <p>Practical per-client log size</p>
    <p>Log Size</p>
  </div>
  <div class="page">
    <p>Roadmap</p>
    <p>Motivation</p>
    <p>Protection Design</p>
    <p>Orchestration Design</p>
    <p>Evaluations</p>
    <p>Conclusions and Future Work</p>
  </div>
  <div class="page">
    <p>Contributions  Design and implementation of a novel live</p>
    <p>streaming network that introduces performance evaluation as an intrinsic capability in production networks  Scalable (PCE) protection of QoE despite large</p>
    <p>scale Experiment failures  Transparent orchestration for flexible testing</p>
  </div>
  <div class="page">
    <p>Future Work</p>
    <p>Large-scale deployment and evaluation</p>
    <p>Apply the Shadow (Experiment-&gt;Validation&gt;Repair) scheme to other applications</p>
    <p>Extend the Shadow (Experiment-&gt;Validation&gt;Repair) scheme  E.g., repair does not mean do the same job as</p>
    <p>Experiment, as long as it masks visible failures</p>
  </div>
  <div class="page">
    <p>Adaptive Rate Streaming Repair</p>
    <p>Accuracy</p>
    <p>Protected QoE</p>
    <p>Protection Overhead</p>
    <p>Follow</p>
    <p>Base</p>
    <p>Adaptive</p>
  </div>
  <div class="page">
    <p>Thank you!</p>
  </div>
  <div class="page">
    <p>Questions?</p>
  </div>
  <div class="page">
    <p>backup</p>
  </div>
  <div class="page">
    <p>Poor Performance After Updates</p>
    <p>Lacking sufficient evaluation before releaseLacking sufficient evaluation before release</p>
  </div>
  <div class="page">
    <p>Related Work  Debugging and evaluation of distributed systems</p>
    <p>e.g., ODR, Friday, DieCast  Based on a key observation  Allows scenarios customization</p>
    <p>FlowVisor  Allocate a fixed portion of tasks and resources</p>
  </div>
  <div class="page">
    <p>Why Not Testing Channel: orchestration</p>
    <p>What we want is  What we have is</p>
  </div>
  <div class="page">
    <p>Experiment Specification &amp; Triggering</p>
    <p>A testing should define:  One or more classes of clients  Client-wide arrival rate functions  Client-wide life duration function</p>
    <p>Triggering Condition: prediction based</p>
  </div>
  <div class="page">
    <p>Experiment Transition  Connectivity Transition  Playbuffer State Transition</p>
    <p>More details in the paper: Replace Early Departed Clients, Independent Departure Control</p>
  </div>
  <div class="page">
    <p>ShadowStream Design Goal Production networks</p>
    <p>By adding protection and orchestration into</p>
    <p>production networks, we have .</p>
    <p>Live Testing !Live Testing !</p>
    <p>Testbeds</p>
  </div>
  <div class="page">
    <p>State of Art: Hybrid Systems</p>
  </div>
  <div class="page">
    <p>Putting Together : ShadowStream  The first system, in the context of live streaming,</p>
    <p>that can perform live testing with both protection and orchestration</p>
    <p>Design the Repair system that can simultaneously provide protection and experiment accuracy</p>
    <p>Fully implemented and evaluated</p>
  </div>
  <div class="page">
    <p>Problem: Resource Competition</p>
    <p>Repair and Experiment compete on key resource (client upload bandwidth)</p>
    <p>Competition may lead to systematic underestimation on Experiment performance</p>
    <p>How to get around ?How to get around ?</p>
  </div>
  <div class="page">
    <p>Experiment Orchestration  list Experiment Specification &amp; Triggering</p>
    <p>Independent Arrivals Control</p>
    <p>Experiment Transition</p>
    <p>Replace Early Departed Clients</p>
    <p>Independent Departure Control</p>
  </div>
  <div class="page">
    <p>Example Illustration</p>
  </div>
  <div class="page">
    <p>From Idea to System</p>
  </div>
  <div class="page">
    <p>Extended Works</p>
    <p>Dynamic Streaming</p>
    <p>Deterministic Replay</p>
  </div>
  <div class="page">
    <p>Example Illustration XX</p>
  </div>
</Presentation>
