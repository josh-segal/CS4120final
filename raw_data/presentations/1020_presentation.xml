<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Scalable NUMA-aware Blocking Synchronization Primitives</p>
    <p>Sanidhya Kashyap, Changwoo Min, Taesoo Kim</p>
  </div>
  <div class="page">
    <p>'i</p>
    <p>The rise of big NUMA machines</p>
  </div>
  <div class="page">
    <p>'i</p>
    <p>The rise of big NUMA machines</p>
  </div>
  <div class="page">
    <p>'i</p>
    <p>The rise of big NUMA machines</p>
  </div>
  <div class="page">
    <p>Importance of NUMA awareness NUMA node 1 NUMA node 2</p>
    <p>W1</p>
    <p>W2</p>
    <p>W3</p>
    <p>W4</p>
    <p>W5W6</p>
    <p>L</p>
    <p>File</p>
    <p>W1 W2 W3 W4 W6 W5</p>
    <p>NUMA oblivious</p>
  </div>
  <div class="page">
    <p>Importance of NUMA awareness NUMA node 1 NUMA node 2</p>
    <p>W1</p>
    <p>W2</p>
    <p>W3</p>
    <p>W4</p>
    <p>W5W6</p>
    <p>L</p>
    <p>File</p>
    <p>W1 W2 W3 W4 W6 W5</p>
    <p>NUMA oblivious</p>
    <p>W1 W6 W2 W3 W4 W5</p>
    <p>NUMA aware/hierarchical</p>
  </div>
  <div class="page">
    <p>Importance of NUMA awareness NUMA node 1 NUMA node 2</p>
    <p>W1</p>
    <p>W2</p>
    <p>W3</p>
    <p>W4</p>
    <p>W5W6</p>
    <p>L</p>
    <p>File</p>
    <p>Idea: Make synchronization primitives NUMA aware!</p>
    <p>W1 W2 W3 W4 W6 W5</p>
    <p>NUMA oblivious</p>
    <p>W1 W6 W2 W3 W4 W5</p>
    <p>NUMA aware/hierarchical</p>
  </div>
  <div class="page">
    <p>Lock's research efforts and their use Linux kernel lock</p>
    <p>adoption / modificationDekker's algorithm (1962) Semaphore (1965)</p>
    <p>Lamport's bakery algorithm (1974) Backoff lock (1989) Ticket lock (1991) MCS lock (1991)</p>
    <p>Hierarchical lock  HCLH (2006) Flat combining NUMA lock (2011)</p>
    <p>Remote Core locking (2012) Cohort lock (2012)</p>
    <p>RW cohort lock (2013) Malthusian lock (2014)</p>
    <p>HMCS lock (2015) AHMCS lock(2016)</p>
    <p>HBO lock (2003)</p>
    <p>Lock's research efforts</p>
  </div>
  <div class="page">
    <p>Lock's research efforts and their use Linux kernel lock</p>
    <p>adoption / modificationDekker's algorithm (1962) Semaphore (1965)</p>
    <p>Lamport's bakery algorithm (1974) Backoff lock (1989) Ticket lock (1991) MCS lock (1991)</p>
    <p>Hierarchical lock  HCLH (2006) Flat combining NUMA lock (2011)</p>
    <p>Remote Core locking (2012) Cohort lock (2012)</p>
    <p>RW cohort lock (2013) Malthusian lock (2014)</p>
    <p>HMCS lock (2015) AHMCS lock(2016)</p>
    <p>HBO lock (2003)</p>
    <p>NUMAaware locks</p>
    <p>Lock's research efforts</p>
  </div>
  <div class="page">
    <p>Lock's research efforts and their use Linux kernel lock</p>
    <p>adoption / modificationDekker's algorithm (1962) Semaphore (1965)</p>
    <p>Lamport's bakery algorithm (1974) Backoff lock (1989) Ticket lock (1991) MCS lock (1991)</p>
    <p>Hierarchical lock  HCLH (2006) Flat combining NUMA lock (2011)</p>
    <p>Remote Core locking (2012) Cohort lock (2012)</p>
    <p>RW cohort lock (2013) Malthusian lock (2014)</p>
    <p>HMCS lock (2015) AHMCS lock(2016)</p>
    <p>HBO lock (2003)</p>
    <p>NUMAaware locks</p>
    <p>Spinlock TTAS Semaphore TTAS + block Rwsem TTAS + block</p>
    <p>Spinlock ticket Mutex TTAS + spin + block Rwsem TTAS + spin + block</p>
    <p>Spinlock ticket Mutex TTAS + block Rwsem TTAS + block</p>
    <p>Spinlock qspinlock Mutex TTAS + spin + block Rwsem TTAS + spin + block</p>
    <p>Lock's research efforts</p>
  </div>
  <div class="page">
    <p>Lock's research efforts and their use Linux kernel lock</p>
    <p>adoption / modificationDekker's algorithm (1962) Semaphore (1965)</p>
    <p>Lamport's bakery algorithm (1974) Backoff lock (1989) Ticket lock (1991) MCS lock (1991)</p>
    <p>Hierarchical lock  HCLH (2006) Flat combining NUMA lock (2011)</p>
    <p>Remote Core locking (2012) Cohort lock (2012)</p>
    <p>RW cohort lock (2013) Malthusian lock (2014)</p>
    <p>HMCS lock (2015) AHMCS lock(2016)</p>
    <p>HBO lock (2003)</p>
    <p>NUMAaware locks</p>
    <p>Spinlock TTAS Semaphore TTAS + block Rwsem TTAS + block</p>
    <p>Spinlock ticket Mutex TTAS + spin + block Rwsem TTAS + spin + block</p>
    <p>Spinlock ticket Mutex TTAS + block Rwsem TTAS + block</p>
    <p>Spinlock qspinlock Mutex TTAS + spin + block Rwsem TTAS + spin + block</p>
    <p>Lock's research efforts</p>
    <p>Adopting NUMA aware locks is not easy</p>
  </div>
  <div class="page">
    <p>Issues with NUMA-aware primitives</p>
    <p>Memory footprint overhead  Cohort lock single instance: 1600 bytes  Example: 14 GB of lock space vs 38 MB of Linuxs</p>
    <p>lock for 10 M inodes</p>
    <p>Does not support blocking/parking behavior</p>
  </div>
  <div class="page">
    <p>Blocking/parking approach  Under subscription</p>
    <p>#threads &lt;= #cores</p>
    <p>Over subscription  #threads &gt; #cores</p>
    <p>Spin-then-park strategy 1) Spin for a certain duration</p>
    <p>under-subscription</p>
    <p>Lo ck</p>
    <p>t hr</p>
    <p>ou gh</p>
    <p>p ut</p>
    <p>#thread</p>
  </div>
  <div class="page">
    <p>Blocking/parking approach  Under subscription</p>
    <p>#threads &lt;= #cores</p>
    <p>Over subscription  #threads &gt; #cores</p>
    <p>Spin-then-park strategy 1) Spin for a certain duration</p>
    <p>under-subscription</p>
    <p>Lo ck</p>
    <p>t hr</p>
    <p>ou gh</p>
    <p>p ut</p>
    <p>#thread</p>
    <p>over-subscription</p>
  </div>
  <div class="page">
    <p>Blocking/parking approach  Under subscription</p>
    <p>#threads &lt;= #cores</p>
    <p>Over subscription  #threads &gt; #cores</p>
    <p>Spin-then-park strategy 1) Spin for a certain duration</p>
    <p>under-subscription</p>
    <p>Lo ck</p>
    <p>t hr</p>
    <p>ou gh</p>
    <p>p ut</p>
    <p>#thread</p>
    <p>over-subscription</p>
    <p>Spinning</p>
  </div>
  <div class="page">
    <p>Blocking/parking approach  Under subscription</p>
    <p>#threads &lt;= #cores</p>
    <p>Over subscription  #threads &gt; #cores</p>
    <p>Spin-then-park strategy 1) Spin for a certain duration</p>
    <p>under-subscription</p>
    <p>Lo ck</p>
    <p>t hr</p>
    <p>ou gh</p>
    <p>p ut</p>
    <p>#thread</p>
    <p>over-subscription</p>
    <p>Spinning</p>
    <p>Parking</p>
  </div>
  <div class="page">
    <p>Blocking/parking approach  Under subscription</p>
    <p>#threads &lt;= #cores</p>
    <p>Over subscription  #threads &gt; #cores</p>
    <p>Spin-then-park strategy 1) Spin for a certain duration</p>
    <p>under-subscription</p>
    <p>Lo ck</p>
    <p>t hr</p>
    <p>ou gh</p>
    <p>p ut</p>
    <p>#thread</p>
    <p>over-subscription</p>
    <p>Spinning</p>
    <p>Parking</p>
    <p>Spin + park</p>
  </div>
  <div class="page">
    <p>Issues with blocking synchronization primitives</p>
    <p>High memory footprint for NUMA-aware locks  Inefficient blocking strategy</p>
    <p>Scheduling overhead in the critical path  Cache-line contention while scheduling out</p>
  </div>
  <div class="page">
    <p>CST lock</p>
    <p>NUMA-aware lock  Low memory footprint</p>
    <p>Allocate socket specific data structure when used  1.510X memory less memory consumption</p>
    <p>Efficient parking/wake-up strategy  Limit the spinning up to a waiters time quantum  Pass the lock to an active waiter  Improves scalability by 1.24.7X</p>
  </div>
  <div class="page">
    <p>CST lock design</p>
    <p>NUMA-aware lock  Cohort lock principle</p>
    <p>+ Mitigates cache-line contention and bouncing</p>
    <p>Memory efficient data structure  Allocate socket structure (snode) when used  Snodes are active until the life-cycle of the lock</p>
    <p>+ Does not stress the memory allocator</p>
  </div>
  <div class="page">
    <p>CST lock design</p>
    <p>NUMA-aware parking list  Maintain separate per-socket parking lists for</p>
    <p>readers and writers</p>
    <p>+ Mitigates cache-line contention in over-subscribed scenario</p>
    <p>+ Allows distributed wake-up of parked readers</p>
  </div>
  <div class="page">
    <p>CST lock design</p>
    <p>Remove scheduler intervention  Pass the lock to a spinning waiter  Waiters park themselves if more than one tasks are</p>
    <p>running on a CPU (system load)</p>
    <p>+ Scheduler not involved in the critical path</p>
    <p>+ Guarantees forward progress of the system</p>
  </div>
  <div class="page">
    <p>Lock instantiation</p>
    <p>socket_listsocket_list</p>
    <p>global_tailglobal_tail</p>
    <p>Threads:  Initially no snodes are allocated</p>
    <p>Thread in a particular socket initiates an allocation</p>
  </div>
  <div class="page">
    <p>Lock instantiation</p>
    <p>socket_listsocket_list</p>
    <p>global_tailglobal_tail</p>
    <p>T1/S1T1/S1Threads:</p>
    <p>Socket 1</p>
    <p>socket_list [S1]socket_list [S1]</p>
    <p>Initially no snodes are allocated</p>
    <p>Thread in a particular socket initiates an allocation</p>
  </div>
  <div class="page">
    <p>Lock instantiation</p>
    <p>socket_listsocket_list</p>
    <p>global_tailglobal_tail</p>
    <p>T1/S1T1/S1Threads:</p>
    <p>Socket 1</p>
    <p>T2/S1T2/S1 T3/S1T3/S1</p>
    <p>socket_list [S1]socket_list [S1]</p>
    <p>Initially no snodes are allocated</p>
    <p>Thread in a particular socket initiates an allocation</p>
  </div>
  <div class="page">
    <p>Lock instantiation</p>
    <p>socket_listsocket_list</p>
    <p>global_tailglobal_tail</p>
    <p>T1/S1T1/S1Threads:</p>
    <p>Socket 1</p>
    <p>Socket 2</p>
    <p>T2/S1T2/S1 T3/S1T3/S1 T4/S2T4/S2</p>
    <p>socket_list [S1]socket_list [S1]socket_list [S1, S2]socket_list [S1, S2]</p>
    <p>Initially no snodes are allocated</p>
    <p>Thread in a particular socket initiates an allocation</p>
  </div>
  <div class="page">
    <p>CST lock phase CST lock instance</p>
    <p>socket_listsocket_list</p>
    <p>Threads:</p>
    <p>global_tailglobal_tail</p>
    <p>Allocate thread specific structure on the stack  Three states for each node</p>
    <p>L locked  UW unparked/spinning waiter  PW parked / blocked / scheduled out waiter</p>
  </div>
  <div class="page">
    <p>CST lock phase CST lock instance</p>
    <p>T1/S1T1/S1</p>
    <p>socket_listsocket_list</p>
    <p>waiting_tailwaiting_tail</p>
    <p>parking_tailparking_tail</p>
    <p>UWUW</p>
    <p>snode_nextsnode_next</p>
    <p>LL</p>
    <p>Threads:</p>
    <p>Socket 1</p>
    <p>socket_list [S1]socket_list [S1]</p>
    <p>global_tailglobal_tail</p>
    <p>Allocate thread specific structure on the stack  Three states for each node</p>
    <p>L locked  UW unparked/spinning waiter  PW parked / blocked / scheduled out waiter</p>
  </div>
  <div class="page">
    <p>CST lock phase CST lock instance</p>
    <p>T1/S1T1/S1</p>
    <p>socket_listsocket_list</p>
    <p>waiting_tailwaiting_tail</p>
    <p>parking_tailparking_tail</p>
    <p>UWUW</p>
    <p>snode_nextsnode_next</p>
    <p>nextnext</p>
    <p>p_nextp_next</p>
    <p>LLLL</p>
    <p>Threads:</p>
    <p>Socket 1</p>
    <p>socket_list [S1]socket_list [S1]</p>
    <p>global_tailglobal_tail</p>
    <p>T1</p>
    <p>Allocate thread specific structure on the stack  Three states for each node</p>
    <p>L locked  UW unparked/spinning waiter  PW parked / blocked / scheduled out waiter</p>
  </div>
  <div class="page">
    <p>CST lock phase CST lock instance</p>
    <p>T1/S1T1/S1</p>
    <p>socket_listsocket_list</p>
    <p>waiting_tailwaiting_tail</p>
    <p>parking_tailparking_tail</p>
    <p>UWUW</p>
    <p>snode_nextsnode_next</p>
    <p>nextnext</p>
    <p>p_nextp_next</p>
    <p>LL</p>
    <p>Acquire global lock</p>
    <p>LL</p>
    <p>Threads:</p>
    <p>Socket 1</p>
    <p>socket_list [S1]socket_list [S1]</p>
    <p>global_tailglobal_tail</p>
    <p>T1</p>
    <p>Allocate thread specific structure on the stack  Three states for each node</p>
    <p>L locked  UW unparked/spinning waiter  PW parked / blocked / scheduled out waiter</p>
  </div>
  <div class="page">
    <p>CST lock phase CST lock instance</p>
    <p>T1/S1T1/S1</p>
    <p>socket_listsocket_list</p>
    <p>waiting_tailwaiting_tail</p>
    <p>parking_tailparking_tail</p>
    <p>UWUW</p>
    <p>snode_nextsnode_next</p>
    <p>nextnext</p>
    <p>p_nextp_next</p>
    <p>LLLL</p>
    <p>Threads:</p>
    <p>nextnext</p>
    <p>p_nextp_next</p>
    <p>UWUW</p>
    <p>T2/S1T2/S1 T3/S1T3/S1</p>
    <p>Socket 1</p>
    <p>socket_list [S1]socket_list [S1]</p>
    <p>global_tailglobal_tail next next</p>
    <p>p_nextp_next</p>
    <p>UWUWT1 T2 T3</p>
    <p>Allocate thread specific structure on the stack  Three states for each node</p>
    <p>L locked  UW unparked/spinning waiter  PW parked / blocked / scheduled out waiter</p>
  </div>
  <div class="page">
    <p>CST lock phase</p>
    <p>nextnext</p>
    <p>p_nextp_next</p>
    <p>LL</p>
    <p>CST lock instance T1/S1T1/S1</p>
    <p>waiting_tailwaiting_tail</p>
    <p>parking_tailparking_tail</p>
    <p>UWUW</p>
    <p>snode_nextsnode_next</p>
    <p>socket_listsocket_list</p>
    <p>waiting_tailwaiting_tail</p>
    <p>parking_tailparking_tail</p>
    <p>UWUW</p>
    <p>snode_nextsnode_next</p>
    <p>nextnext</p>
    <p>p_nextp_next</p>
    <p>LLLL</p>
    <p>Threads:</p>
    <p>nextnext</p>
    <p>p_nextp_next</p>
    <p>UWUW</p>
    <p>T2/S1T2/S1 T3/S1T3/S1</p>
    <p>Socket 1</p>
    <p>Socket 2</p>
    <p>socket_list [S1]socket_list [S1]socket_list [S1, S2]socket_list [S1, S2]</p>
    <p>global_tailglobal_tail</p>
    <p>T4/S2T4/S2</p>
    <p>nextnext</p>
    <p>p_nextp_next</p>
    <p>UWUWT1 T2 T3</p>
    <p>T4</p>
    <p>Allocate thread specific structure on the stack  Three states for each node</p>
    <p>L locked  UW unparked/spinning waiter  PW parked / blocked / scheduled out waiter</p>
  </div>
  <div class="page">
    <p>CST lock phase: blocking/parking</p>
    <p>nextnext</p>
    <p>p_nextp_next</p>
    <p>LL</p>
    <p>CST lock instance T1/S1T1/S1</p>
    <p>waiting_tailwaiting_tail</p>
    <p>parking_tailparking_tail</p>
    <p>UWUW</p>
    <p>snode_nextsnode_next</p>
    <p>socket_list CV</p>
    <p>socket_list CV</p>
    <p>waiting_tailwaiting_tail</p>
    <p>parking_tailparking_tail</p>
    <p>UWUW</p>
    <p>snode_nextsnode_next</p>
    <p>nextnext</p>
    <p>p_nextp_next</p>
    <p>LLLL</p>
    <p>Threads:</p>
    <p>nextnext</p>
    <p>p_nextp_next</p>
    <p>UWUW</p>
    <p>T2/S1T2/S1 T3/S1T3/S1</p>
    <p>Socket 1</p>
    <p>Socket 2</p>
    <p>PWPWsocket_list [S1]CV socket_list [S1]</p>
    <p>CV socket_list [S1, S2]</p>
    <p>CV</p>
    <p>socket_list [S1, S2] CV</p>
    <p>global_tailglobal_tail</p>
    <p>T4/S2T4/S2</p>
    <p>nextnext</p>
    <p>p_nextp_next</p>
    <p>UWUW</p>
    <p>T2/S1T2/S1</p>
    <p>Before scheduling out, waiters atomically  Update the status from UW to PW  Add themselves to the parking list</p>
    <p>T1 T2 T3</p>
    <p>T4</p>
  </div>
  <div class="page">
    <p>CST unlock phase CST lock instance</p>
    <p>T1/S1T1/S1</p>
    <p>socket_list [S1]socket_list [S1]</p>
    <p>global_tailglobal_tail waiting_tailwaiting_tail</p>
    <p>parking_tailparking_tail</p>
    <p>UWUW</p>
    <p>snode_nextsnode_next</p>
    <p>nextnext</p>
    <p>p_nextp_next</p>
    <p>LLLL</p>
    <p>Threads:</p>
    <p>nextnext</p>
    <p>p_nextp_next</p>
    <p>UWUW</p>
    <p>T2/S1T2/S1</p>
    <p>Socket 1</p>
    <p>T1 T2</p>
    <p>T3/S1T3/S1</p>
    <p>nextnext</p>
    <p>p_nextp_next</p>
    <p>UWUWT3</p>
    <p>Pass the lock to a spinning waiter</p>
  </div>
  <div class="page">
    <p>CST unlock phase CST lock instance</p>
    <p>T1/S1T1/S1</p>
    <p>socket_list [S1]socket_list [S1]</p>
    <p>global_tailglobal_tail waiting_tailwaiting_tail</p>
    <p>parking_tailparking_tail</p>
    <p>UWUW</p>
    <p>snode_nextsnode_next</p>
    <p>nextnext</p>
    <p>p_nextp_next</p>
    <p>LLLL</p>
    <p>Threads:</p>
    <p>nextnext</p>
    <p>p_nextp_next</p>
    <p>UWUW</p>
    <p>T2/S1T2/S1</p>
    <p>Socket 1</p>
    <p>T1 T2</p>
    <p>T3/S1T3/S1</p>
    <p>nextnext</p>
    <p>p_nextp_next</p>
    <p>UWUWT3</p>
    <p>Pass the lock to a spinning waiter</p>
    <p>T2/S1T2/S1</p>
  </div>
  <div class="page">
    <p>CST unlock phase CST lock instance</p>
    <p>T1/S1T1/S1</p>
    <p>socket_list [S1]socket_list [S1]</p>
    <p>global_tailglobal_tail waiting_tailwaiting_tail</p>
    <p>parking_tailparking_tail</p>
    <p>UWUW</p>
    <p>snode_nextsnode_next</p>
    <p>nextnext</p>
    <p>p_nextp_next</p>
    <p>LLLL</p>
    <p>Threads:</p>
    <p>nextnext</p>
    <p>p_nextp_next</p>
    <p>UWUW</p>
    <p>T2/S1T2/S1</p>
    <p>Socket 1</p>
    <p>T1 T2</p>
    <p>T3/S1T3/S1</p>
    <p>nextnext</p>
    <p>p_nextp_next</p>
    <p>UWUWT3</p>
    <p>socket_list [S1]socket_list [S1]</p>
    <p>global_tailglobal_tail waiting_tailwaiting_tail</p>
    <p>parking_tailparking_tail</p>
    <p>UWUW</p>
    <p>snode_nextsnode_next</p>
    <p>nextnext</p>
    <p>p_nextp_next</p>
    <p>LLLL nextnext</p>
    <p>p_nextp_next</p>
    <p>UWUW</p>
    <p>Socket 1</p>
    <p>PWPWT1 T2 nextnext</p>
    <p>p_nextp_next</p>
    <p>UWUWT3</p>
    <p>Pass the lock to a spinning waiter</p>
    <p>T2/S1T2/S1</p>
  </div>
  <div class="page">
    <p>CST unlock phase CST lock instance</p>
    <p>T1/S1T1/S1</p>
    <p>socket_list [S1]socket_list [S1]</p>
    <p>global_tailglobal_tail waiting_tailwaiting_tail</p>
    <p>parking_tailparking_tail</p>
    <p>UWUW</p>
    <p>snode_nextsnode_next</p>
    <p>nextnext</p>
    <p>p_nextp_next</p>
    <p>LLLL</p>
    <p>Threads:</p>
    <p>nextnext</p>
    <p>p_nextp_next</p>
    <p>UWUW</p>
    <p>T2/S1T2/S1</p>
    <p>Socket 1</p>
    <p>T1 T2</p>
    <p>T3/S1T3/S1</p>
    <p>nextnext</p>
    <p>p_nextp_next</p>
    <p>UWUWT3</p>
    <p>socket_list [S1]socket_list [S1]</p>
    <p>global_tailglobal_tail waiting_tailwaiting_tail</p>
    <p>parking_tailparking_tail</p>
    <p>UWUW</p>
    <p>snode_nextsnode_next</p>
    <p>nextnext</p>
    <p>p_nextp_next</p>
    <p>LLLL nextnext</p>
    <p>p_nextp_next</p>
    <p>UWUW</p>
    <p>Socket 1</p>
    <p>PWPWT1 T2 nextnext</p>
    <p>p_nextp_next</p>
    <p>UWUWT3</p>
    <p>socket_list [S1]socket_list [S1]</p>
    <p>global_tailglobal_tail waiting_tailwaiting_tail</p>
    <p>parking_tailparking_tail</p>
    <p>UWUW</p>
    <p>snode_nextsnode_next</p>
    <p>LL nextnext</p>
    <p>p_nextp_next</p>
    <p>UWUW</p>
    <p>Socket 1</p>
    <p>PWPWT2 nextnext</p>
    <p>p_nextp_next</p>
    <p>LLT3</p>
    <p>Pass the lock to a spinning waiter</p>
    <p>T2/S1T2/S1</p>
  </div>
  <div class="page">
    <p>Implementation</p>
    <p>Implemented in the Linux kernel  Structures modified</p>
    <p>File system: inode  Memory management: mmap_sem</p>
    <p>Please see our paper  Read-write lock  Pseudo code</p>
    <p>https://github.com/sslab-gatech/cst-locks</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Performance of locks in terms of scalability and memory footprint?</p>
    <p>Blocking/parking strategy effectiveness?</p>
    <p>Setup: 8-socket, 120-core NUMA machine</p>
  </div>
  <div class="page">
    <p>Case study: Psearchy Jo</p>
    <p>b s/</p>
    <p>ho ur</p>
    <p>Overcomes memory footprint and scheduling overhead  Uses 1.59.1X less memory than the Cohort lock  Improves throughput by 1.41.6X</p>
    <p>M em</p>
    <p>or y</p>
    <p>fo ot</p>
    <p>pr in</p>
    <p>t (M</p>
    <p>B )</p>
    <p>Memory utilization</p>
    <p>Vanilla</p>
    <p>Cohort</p>
    <p>CST</p>
    <p>Throughput</p>
  </div>
  <div class="page">
    <p>Effective parking strategy</p>
    <p>Better performance for both under- and oversubscribed scenario</p>
    <p>Improves scalability by 1.33.7X</p>
    <p>Enumerate a directory (rwsem)</p>
    <p>File creation (mutex)</p>
    <p>Vanilla</p>
    <p>Cohort</p>
    <p>CST</p>
    <p>M o</p>
    <p>p s</p>
    <p>/ se</p>
    <p>c</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Two blocking synchronization primitives  NUMA-aware mutex and read-write semaphore</p>
    <p>Dynamically allocated data structure  Resolve NUMA-aware locks footprint issue</p>
    <p>Efficient spin-then-park strategy  Scheduling-aware parking/wake-up strategy  Mitigate scheduler interaction</p>
    <p>Thank you!</p>
  </div>
</Presentation>
