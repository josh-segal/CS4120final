<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Lock-in-Pop: Securing Privileged Operating System Kernels by Keeping</p>
    <p>on the Beaten Path</p>
    <p>Yiwen Li, Brendan Dolan-Gavitt, Sam Weber, Justin Cappos</p>
    <p>New York University Tandon School of Engineering</p>
  </div>
  <div class="page">
    <p>Motivation 1. Many vulnerabilities exist in the host OS kernel 2. These vulnerabilities can be reached and exploited, even with VMs in place</p>
    <p>* Data source: National Vulnerability Database(NVD), https://nvd.nist.gov, July 2017.</p>
    <p>Number of Linux Kernel Vulnerabilities by Year</p>
  </div>
  <div class="page">
    <p>What do we want when building virtual machines? 1. Sufficient functionality 2. Very few zero-day security bugs</p>
    <p>...</p>
  </div>
  <div class="page">
    <p>The metrics we have dont meet our needs 1. Predivtive of where bugs will be found 2. Locate areas that have no/very few bugs</p>
    <p>code age [1]</p>
    <p>code in device drivers [2]</p>
    <p>[1] Ozment, et al. [Usenix Security 06]</p>
    <p>[2] Chou, et al. [SOSP 01]</p>
    <p>code age</p>
    <p>drivers</p>
  </div>
  <div class="page">
    <p>Our metric: the popular paths</p>
    <p>Definition: lines of code in the kernel source files, which are commonly executed in the systems normal workload.</p>
    <p>Key insight: the popular paths contain many fewer bugs!</p>
  </div>
  <div class="page">
    <p>Our experiments to obtain the popular paths</p>
    <p>Ran top 50 most popular packages according to the Debian popularity contest.</p>
    <p>Two students used their Ubuntu systems for five days.</p>
    <p>We used Gcov 4.8.4 in Ubuntu 14.04 to capture the kernel coverage data.</p>
  </div>
  <div class="page">
    <p>Bug density comparison among three security metrics</p>
    <p>code age [1]</p>
    <p>code in device drivers [2]</p>
    <p>code in the popular paths [3]</p>
    <p>[1] Ozment, et al. [Usenix Security 06]</p>
    <p>[2] Chou, et al. [SOSP 01]</p>
    <p>code age</p>
    <p>code in device drivers</p>
    <p>code in the popular paths</p>
    <p>[3] Li, et al. [USENIX ATC 17]</p>
  </div>
  <div class="page">
    <p>popular paths vs. unpopular paths</p>
    <p>popular paths (1 bug)</p>
    <p>unpopular paths (19 bugs)</p>
  </div>
  <div class="page">
    <p>Our metric: the popular paths</p>
    <p>Definition</p>
    <p>How to measure it?</p>
    <p>Is it a good security metric?</p>
    <p>Is it practically useful?</p>
  </div>
  <div class="page">
    <p>Traditional designs: check-and-pass-through</p>
  </div>
  <div class="page">
    <p>Lock-in-Pop design</p>
    <p>TOCTTOU bugs  safely re-create file directories</p>
    <p>with basic calls like open(), read(), write(), close() to avoid using unpopular paths</p>
    <p>the kernel is used infrequently  only the popular paths in the</p>
    <p>kernel is accessed</p>
    <p>lock applications into using only popular paths</p>
  </div>
  <div class="page">
    <p>Our prototype implementation: Lind  Googles Native Client (NaCl) [IEEE S&amp;P 09]: software fault isolation</p>
    <p>Repy Sandbox [CCS 10]  Small sandbox kernel (8K LOC)  33 basic API functions  Accessed only a subset of the popular paths  Real-world deployment in the Seattle project, under security audit for 5+ years</p>
  </div>
  <div class="page">
    <p>Our prototype implementation: Lind</p>
  </div>
  <div class="page">
    <p>Evaluation results: Linux kernel coverage by fuzzing</p>
    <p>Virtualization system</p>
    <p># of bugs Kernel trace (LOC)</p>
    <p>Total coverage In popular paths In risky paths</p>
    <p>LXC 12 127.3K 70.9K 56.4K</p>
    <p>Docker 8 119.0K 69.5K 49.5K</p>
    <p>Graphene 8 95.5K 62.2K 33.3K</p>
    <p>Lind 1 70.3K 70.3K 0</p>
    <p>Repy 1 74.4K 74.4K 0</p>
  </div>
  <div class="page">
    <p>Evaluation results: Linux kernel bugs triggered VM Bugs Triggered</p>
    <p>Native Linux 35/35 (100%)</p>
    <p>LXC 12/35 (34.3%)</p>
    <p>Docker 8/35 (22.9%)</p>
    <p>Graphene 8/35 (22.9%)</p>
    <p>Lind 1/35 (2.9%)</p>
    <p>Example: CVE-2015-5706, a bug triggered everywhere except Lind  A rarely-used flag O_TMPFILE reached unpopular lines of code inside fs/namei.c  Lind is not affacted, because it is avoiding unpopular paths by restricting flags</p>
  </div>
  <div class="page">
    <p>Evaluation results: performance overhead in Lind</p>
  </div>
  <div class="page">
    <p>Limitations  Some bugs are difficult to evaluate using our metric.</p>
    <p>Reaching lines of code may not be sufficient to trigger or exploit a bug.</p>
    <p>Linds performance could be improved.</p>
    <p>Future work  Removing risky lines from the kernel.</p>
    <p>Build a minimal OS kernel for Dockers LinuxKit, etc.</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>The popular paths, contain many fewer bugs.</p>
    <p>Lock-in-Pop design</p>
    <p>Our prototype system, Lind, exposes fewer zero-day kernel bugs.</p>
  </div>
  <div class="page"/>
</Presentation>
