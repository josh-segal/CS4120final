<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Parallelizable StackLSTM</p>
    <p>Shuoyang Ding Philipp Koehn</p>
    <p>NAACL 2019 Structured Prediction Workshop Minneapolis, MN, United States</p>
    <p>June 7th, 2019</p>
  </div>
  <div class="page">
    <p>Parallelizable StackLSTM</p>
    <p>Outline</p>
    <p>What is StackLSTM?</p>
    <p>Parallelization Problem</p>
    <p>Homogenizing Computation</p>
    <p>Experiments</p>
  </div>
  <div class="page">
    <p>What is StackLSTM?</p>
  </div>
  <div class="page">
    <p>Parallelizable StackLSTM</p>
    <p>A Partial Tree</p>
  </div>
  <div class="page">
    <p>Parallelizable StackLSTM</p>
    <p>Good Edge?</p>
  </div>
  <div class="page">
    <p>Parallelizable StackLSTM</p>
    <p>Good Edge?</p>
  </div>
  <div class="page">
    <p>Parallelizable StackLSTM</p>
    <p>LSTM?</p>
  </div>
  <div class="page">
    <p>Parallelizable StackLSTM</p>
    <p>:(</p>
  </div>
  <div class="page">
    <p>Parallelizable StackLSTM</p>
    <p>StackLSTM</p>
    <p>An LSTM whose states are stored in a stack</p>
    <p>Computation is conditioned on the stack operation</p>
    <p>Dyer et al. (2015) Ballesteros et al. (2017)</p>
  </div>
  <div class="page">
    <p>Parallelizable StackLSTM</p>
    <p>StackLSTM</p>
  </div>
  <div class="page">
    <p>Parallelizable StackLSTM</p>
    <p>Push ,</p>
  </div>
  <div class="page">
    <p>Parallelizable StackLSTM</p>
    <p>Pop</p>
  </div>
  <div class="page">
    <p>Parallelizable StackLSTM</p>
    <p>Push 61</p>
  </div>
  <div class="page">
    <p>Parallelizable StackLSTM</p>
    <p>Push years</p>
  </div>
  <div class="page">
    <p>Parallelizable StackLSTM</p>
    <p>Push old</p>
  </div>
  <div class="page">
    <p>Parallelizable StackLSTM</p>
    <p>Pop</p>
  </div>
  <div class="page">
    <p>Parallelizable StackLSTM</p>
    <p>Pop</p>
  </div>
  <div class="page">
    <p>Parallelizable StackLSTM</p>
    <p>Pop</p>
  </div>
  <div class="page">
    <p>Parallelizable StackLSTM</p>
    <p>Push ,</p>
  </div>
  <div class="page">
    <p>Parallelizable StackLSTM</p>
    <p>Pop</p>
  </div>
  <div class="page">
    <p>Parallelizable StackLSTM</p>
    <p>Push will</p>
  </div>
  <div class="page">
    <p>Parallelizable StackLSTM</p>
    <p>Push join</p>
  </div>
  <div class="page">
    <p>Parallelizable StackLSTM</p>
    <p>:)</p>
  </div>
  <div class="page">
    <p>Parallelization Problem</p>
  </div>
  <div class="page">
    <p>Parallelizable StackLSTM</p>
    <p>LSTM</p>
  </div>
  <div class="page">
    <p>Parallelizable StackLSTM</p>
    <p>LSTM</p>
  </div>
  <div class="page">
    <p>Parallelizable StackLSTM</p>
    <p>Batched LSTM</p>
  </div>
  <div class="page">
    <p>Parallelizable StackLSTM</p>
    <p>Batched StackLSTM?</p>
  </div>
  <div class="page">
    <p>Parallelizable StackLSTM</p>
    <p>:(</p>
  </div>
  <div class="page">
    <p>Parallelizable StackLSTM</p>
    <p>Wouldnt it be nice if</p>
  </div>
  <div class="page">
    <p>Homogenizing Computation</p>
  </div>
  <div class="page">
    <p>Parallelizable StackLSTM</p>
    <p>Push</p>
    <p>read the stack top hidden state h_{p(t)};</p>
    <p>perform LSTM forward computation with x(t) and h_{p(t)};</p>
    <p>write new hidden state to h_{p(t) + 1};</p>
    <p>update stack top pointer p(t+1) = p(t) + 1;</p>
  </div>
  <div class="page">
    <p>Parallelizable StackLSTM</p>
    <p>Push</p>
    <p>read the stack top hidden state h_{p(t)};</p>
    <p>perform LSTM forward computation with x(t) and h_{p(t)};</p>
    <p>write new hidden state to h_{p(t) + 1};</p>
    <p>update stack top pointer p(t+1) = p(t) + 1;</p>
  </div>
  <div class="page">
    <p>Parallelizable StackLSTM</p>
    <p>Push</p>
    <p>read the stack top hidden state h_{p(t)};</p>
    <p>perform LSTM forward computation with x(t) and h_{p(t)};</p>
    <p>write new hidden state to h_{p(t) + 1};</p>
    <p>update stack top pointer p(t+1) = p(t) + 1;</p>
  </div>
  <div class="page">
    <p>Parallelizable StackLSTM</p>
    <p>Push</p>
    <p>read the stack top hidden state h_{p(t)};</p>
    <p>perform LSTM forward computation with x(t) and h_{p(t)};</p>
    <p>write new hidden state to h_{p(t) + 1};</p>
    <p>update stack top pointer p(t+1) = p(t) + 1;</p>
  </div>
  <div class="page">
    <p>Parallelizable StackLSTM</p>
    <p>Push</p>
    <p>read the stack top hidden state h_{p(t)};</p>
    <p>perform LSTM forward computation with x(t) and h_{p(t)};</p>
    <p>write new hidden state to h_{p(t) + 1};</p>
    <p>update stack top pointer p(t+1) = p(t) + 1;</p>
  </div>
  <div class="page">
    <p>Parallelizable StackLSTM</p>
    <p>Pop</p>
    <p>update stack top pointer p(t+1) = p(t) - 1;</p>
  </div>
  <div class="page">
    <p>Parallelizable StackLSTM</p>
    <p>Pop</p>
    <p>update stack top pointer p(t+1) = p(t) - 1;</p>
  </div>
  <div class="page">
    <p>Parallelizable StackLSTM</p>
    <p>Observation 1</p>
    <p>read the stack top hidden state h_{p(t)};</p>
    <p>perform LSTM forward computation with x(t) and h_{p(t)};</p>
    <p>write new hidden state to h_{p(t) + 1};</p>
    <p>update stack top pointer p(t+1) = p(t) + 1;</p>
    <p>update stack top pointer p(t+1) = p(t) - 1;</p>
  </div>
  <div class="page">
    <p>Parallelizable StackLSTM</p>
    <p>Observation 1</p>
    <p>read the stack top hidden state h_{p(t)};</p>
    <p>perform LSTM forward computation with x(t) and h_{p(t)};</p>
    <p>write new hidden state to h_{p(t) + 1};</p>
    <p>update stack top pointer p(t+1) = p(t) + op;</p>
    <p>update stack top pointer p(t+1) = p(t) + op;</p>
    <p>Use op = +1 for push and op = -1 for pop</p>
  </div>
  <div class="page">
    <p>Parallelizable StackLSTM</p>
    <p>Observation 1</p>
    <p>The computation performed for Pop operation is a subset of Push operation.</p>
  </div>
  <div class="page">
    <p>Parallelizable StackLSTM</p>
    <p>Observation 2</p>
    <p>Is it safe to do the other computations for push for pop as well?</p>
  </div>
  <div class="page">
    <p>Parallelizable StackLSTM</p>
    <p>Observation 2</p>
    <p>read the stack top hidden state h_{p(t)};</p>
    <p>perform LSTM forward computation with x(t) and h_{p(t)};</p>
    <p>write new hidden state to h_{p(t) + 1};</p>
    <p>update stack top pointer p(t+1) = p(t) + op;</p>
    <p>update stack top pointer p(t+1) = p(t) + op;</p>
  </div>
  <div class="page">
    <p>Parallelizable StackLSTM</p>
    <p>Observation 2</p>
    <p>update stack top pointer p(t+1) = p(t) + op;</p>
    <p>read the stack top hidden state h_{p(t)};</p>
    <p>perform LSTM forward computation with x(t) and h_{p(t)};</p>
    <p>update stack top pointer p(t+1) = p(t) + op;</p>
    <p>write new hidden state to h_{p(t) + 1};</p>
  </div>
  <div class="page">
    <p>Parallelizable StackLSTM</p>
    <p>Observation 2</p>
    <p>A write will always happen before the stack top pointer advances.</p>
  </div>
  <div class="page">
    <p>Parallelizable StackLSTM</p>
    <p>Observation 2</p>
    <p>If one wants to write anything in the higher position than the current stack top pointer</p>
  </div>
  <div class="page">
    <p>Parallelizable StackLSTM</p>
    <p>Observation 2</p>
    <p>If one wants to write anything in the higher position than the current stack top pointer</p>
    <p>Just do it!</p>
  </div>
  <div class="page">
    <p>Parallelizable StackLSTM</p>
    <p>Observation 2</p>
    <p>read the stack top hidden state h_{p(t)};</p>
    <p>perform LSTM forward computation with x(t) and h_{p(t)};</p>
    <p>write new hidden state to h_{p(t) + 1};</p>
    <p>update stack top pointer p(t+1) = p(t) + op;</p>
    <p>update stack top pointer p(t+1) = p(t) + op;</p>
  </div>
  <div class="page">
    <p>Parallelizable StackLSTM</p>
    <p>Observation 2</p>
    <p>read the stack top hidden state h_{p(t)};</p>
    <p>perform LSTM forward computation with x(t) and h_{p(t)};</p>
    <p>write new hidden state to h_{p(t) + 1};</p>
    <p>update stack top pointer p(t+1) = p(t) + op;</p>
    <p>read the stack top hidden state h_{p(t)};</p>
    <p>perform LSTM forward computation with x(t) and h_{p(t)};</p>
    <p>write new hidden state to h_{p(t) + 1};</p>
    <p>update stack top pointer p(t+1) = p(t) + op;</p>
  </div>
  <div class="page">
    <p>Parallelizable StackLSTM</p>
    <p>Done!</p>
    <p>read the stack top hidden state h_{p(t)};</p>
    <p>perform LSTM forward computation with x(t) and h_{p(t)};</p>
    <p>write new hidden state to h_{p(t) + 1};</p>
    <p>update stack top pointer p(t+1) = p(t) + op;</p>
  </div>
  <div class="page">
    <p>Experiments</p>
  </div>
  <div class="page">
    <p>Parallelizable StackLSTM</p>
    <p>Benchmark</p>
    <p>Transition-based dependency parsing on Stanford Dependency Treebank</p>
    <p>PyTorch, Single K80 GPU</p>
  </div>
  <div class="page">
    <p>Parallelizable StackLSTM</p>
    <p>Hyperparameters</p>
    <p>Largely following Dyer et al. (2015); Ballesteros et al. (2017), except:</p>
    <p>Adam w/ ReduceLROnPlateau and warmup</p>
    <p>Arc-Hybrid w/o composition function</p>
    <p>Slightly larger models (200 hidden, 200 state, 48 action embedding) perform better</p>
  </div>
  <div class="page">
    <p>Parallelizable StackLSTM</p>
    <p>Speed</p>
  </div>
  <div class="page">
    <p>Parallelizable StackLSTM</p>
    <p>Speed</p>
  </div>
  <div class="page">
    <p>Parallelizable StackLSTM</p>
    <p>Performance</p>
    <p>batch size</p>
    <p>Ours Ballesteros 2017</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Parallelizable StackLSTM</p>
    <p>Conclusion  We propose a parallelization scheme for StackLSTM</p>
    <p>architecture.</p>
    <p>Together with a different optimizer, we are able to train parsers of comparable performance within 1 hour.</p>
    <p>paper code slides</p>
    <p>https://github.com/shuoyangd/hoolock</p>
  </div>
</Presentation>
