<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Prio: Private, Robust, and Efficient Computation of Aggregate Statistics</p>
    <p>Henry Corrigan-Gibbs and Dan Boneh Stanford University</p>
    <p>NSDI 2017</p>
  </div>
  <div class="page">
    <p>Twitter usage</p>
    <p>B lo</p>
    <p>od p</p>
    <p>re ss</p>
    <p>ur e</p>
    <p>Today: Non-private aggregation</p>
    <p>StressTracker</p>
  </div>
  <div class="page">
    <p>Twitter usage</p>
    <p>B lo</p>
    <p>od p</p>
    <p>re ss</p>
    <p>ur e</p>
    <p>Today: Non-private aggregation</p>
    <p>Each user has a private data point</p>
    <p>StressTracker</p>
  </div>
  <div class="page">
    <p>StressTracker B</p>
    <p>lo od</p>
    <p>p re</p>
    <p>ss ur</p>
    <p>e</p>
    <p>Today: Non-private aggregation</p>
    <p>Twitter usage</p>
  </div>
  <div class="page">
    <p>StressTracker B</p>
    <p>lo od</p>
    <p>p re</p>
    <p>ss ur</p>
    <p>e</p>
    <p>Today: Non-private aggregation</p>
    <p>Twitter usage</p>
  </div>
  <div class="page">
    <p>StressTracker B</p>
    <p>lo od</p>
    <p>p re</p>
    <p>ss ur</p>
    <p>e</p>
    <p>B( T)</p>
    <p>= c1  T</p>
    <p>+ c0</p>
    <p>Today: Non-private aggregation</p>
    <p>Twitter usage</p>
  </div>
  <div class="page">
    <p>StressTracker B</p>
    <p>lo od</p>
    <p>p re</p>
    <p>ss ur</p>
    <p>e</p>
    <p>B( T)</p>
    <p>= c1  T</p>
    <p>+ c0</p>
    <p>Today: Non-private aggregation</p>
    <p>The app provider learned more than it needed</p>
    <p>Twitter usage</p>
  </div>
  <div class="page">
    <p>StressTracker B</p>
    <p>lo od</p>
    <p>p re</p>
    <p>ss ur</p>
    <p>e</p>
    <p>Today: Non-private aggregation</p>
    <p>Twitter usage</p>
  </div>
  <div class="page">
    <p>StressTrackerApp store B</p>
    <p>lo od</p>
    <p>p re</p>
    <p>ss ur</p>
    <p>e</p>
    <p>This paper: Private aggregation</p>
    <p>Twitter usage</p>
  </div>
  <div class="page">
    <p>StressTrackerApp store B</p>
    <p>lo od</p>
    <p>p re</p>
    <p>ss ur</p>
    <p>e</p>
    <p>This paper: Private aggregation</p>
    <p>Clients send an encrypted share of their data to each aggregator</p>
    <p>Twitter usage</p>
  </div>
  <div class="page">
    <p>StressTrackerApp store B</p>
    <p>lo od</p>
    <p>p re</p>
    <p>ss ur</p>
    <p>e</p>
    <p>This paper: Private aggregation</p>
    <p>Clients send an encrypted share of their data to each aggregator</p>
    <p>Twitter usage</p>
  </div>
  <div class="page">
    <p>StressTrackerApp store B</p>
    <p>lo od</p>
    <p>p re</p>
    <p>ss ur</p>
    <p>e</p>
    <p>This paper: Private aggregation</p>
    <p>Clients send an encrypted share of their data to each aggregator</p>
    <p>Twitter usage</p>
  </div>
  <div class="page">
    <p>B lo</p>
    <p>od p</p>
    <p>re ss</p>
    <p>ur e</p>
    <p>The aggregators learn no private client data</p>
    <p>This paper: Private aggregation</p>
    <p>B( T)</p>
    <p>= c1  T</p>
    <p>+ c0</p>
    <p>StressTrackerApp store</p>
    <p>Twitter usage</p>
  </div>
  <div class="page">
    <p>Private aggregation f(x1, , xN)x1 x3</p>
    <p>xNx2</p>
  </div>
  <div class="page">
    <p>B lo</p>
    <p>od p</p>
    <p>re ss</p>
    <p>ur e</p>
    <p>StressTrackerApp store</p>
    <p>Twitter usage</p>
  </div>
  <div class="page">
    <p>B lo</p>
    <p>od p</p>
    <p>re ss</p>
    <p>ur e</p>
    <p>StressTrackerApp store</p>
    <p>Twitter usage</p>
  </div>
  <div class="page">
    <p>Private aggregation f(x1, , xN)x1</p>
    <p>xNx2</p>
    <p>Prio is the first system to achieve all four.</p>
    <p>x3</p>
  </div>
  <div class="page">
    <p>Private aggregation f(x1, , xN)x1</p>
    <p>xNx2</p>
    <p>Prio is the first system to achieve all four.</p>
    <p>and Prio supports a wide range of aggregation</p>
    <p>functions f()</p>
    <p>x3</p>
  </div>
  <div class="page">
    <p>Private aggregation f(x1, , xN)x1</p>
    <p>xNx2</p>
    <p>Prio is the first system to achieve all four.</p>
    <p>x3</p>
  </div>
  <div class="page">
    <p>Contributions</p>
    <p>for many fs of interest</p>
  </div>
  <div class="page">
    <p>Related systems  Additively homomorphic encryption</p>
    <p>P4P (2010), Private stream aggregation (2011), Grid aggregation (2011), PDDP (2012), SplitX (2013), PrivEx (2014), PrivCount (2016), Succinct sketches (2016),</p>
    <p>Multi-party computation [GMW87], [BGW88] FairPlay (2004), Brickell-Shmatikov (2006), FairplayMP (2008), SEPIA (2010), Private matrix factorization (2013), JustGarble (2013),</p>
    <p>Anonymous credentials/tokens VPriv (2009), PrivStats (2011), ANONIZE (2014),</p>
    <p>Randomized response [W65], [DMNS06], [D06] RAPPOR (2014, 2016)</p>
    <p>Prio is the first system to achieve exact correctness, privacy, robustness, efficiency.</p>
  </div>
  <div class="page">
    <p>Outline  Background: The private aggregation problem</p>
    <p>A straw-man solution for private sums</p>
    <p>Providing robustness with SNIPs</p>
    <p>Evaluation</p>
    <p>Encodings for complex aggregates</p>
  </div>
  <div class="page">
    <p>Outline  Background: The private aggregation problem</p>
    <p>A straw-man solution for private sums</p>
    <p>Providing robustness with SNIPs</p>
    <p>Evaluation</p>
    <p>Encodings for complex aggregates</p>
  </div>
  <div class="page">
    <p>Warm-up: Computing private sums</p>
  </div>
  <div class="page">
    <p>Warm-up: Computing private sums  Every device i holds a value xi  We want to compute</p>
    <p>f(x1, , xN) = x1 +  + xN without learning any users private value xi.</p>
  </div>
  <div class="page">
    <p>Warm-up: Computing private sums  Every device i holds a value xi  We want to compute</p>
    <p>f(x1, , xN) = x1 +  + xN without learning any users private value xi.</p>
    <p>Example: Privately measuring traffic congestion.</p>
    <p>xi = 1 if user i is on the Bay Bridge = 0 otherwise</p>
    <p>The sum x1 +  + xN yields the number of app users on the Bay Bridge.</p>
  </div>
  <div class="page">
    <p>Private sums: A straw-man scheme</p>
    <p>Server A Server B Server C</p>
    <p>[Chaum88], [BGW88],  [KDK11] [DFKZ13] [PrivEx14]</p>
  </div>
  <div class="page">
    <p>Private sums: A straw-man scheme</p>
    <p>Server A Server B Server C</p>
    <p>Assume that the servers are non-colluding.</p>
    <p>Equivalently: that at least one server is honest.</p>
    <p>[Chaum88], [BGW88],  [KDK11] [DFKZ13] [PrivEx14]</p>
  </div>
  <div class="page">
    <p>Private sums: A straw-man scheme</p>
    <p>Server A Server B Server C</p>
    <p>Assume that the servers are non-colluding.</p>
    <p>Equivalently: that at least one server is honest.</p>
    <p>[Chaum88], [BGW88],  [KDK11] [DFKZ13] [PrivEx14]</p>
    <p>Imagine: app store and app</p>
    <p>StressTracker</p>
    <p>App store App</p>
  </div>
  <div class="page">
    <p>Private sums: A straw-man scheme</p>
    <p>Server A Server B Server C</p>
    <p>Assume that the servers are non-colluding.</p>
    <p>Equivalently: that at least one server is honest.</p>
    <p>[Chaum88], [BGW88],  [KDK11] [DFKZ13] [PrivEx14]</p>
    <p>Imagine: app store and app</p>
    <p>StressTracker</p>
    <p>App store App</p>
    <p>Imagine: app store and app</p>
  </div>
  <div class="page">
    <p>Private sums: A straw-man scheme</p>
    <p>Server A Server B Server C</p>
    <p>Assume that the servers are non-colluding.</p>
    <p>Equivalently: that at least one server is honest.</p>
    <p>[Chaum88], [BGW88],  [KDK11] [DFKZ13] [PrivEx14]</p>
    <p>Imagine: app store and app</p>
    <p>StressTracker</p>
    <p>App store App</p>
    <p>Imagine: app store and app</p>
    <p>Spain Germany Iceland</p>
  </div>
  <div class="page">
    <p>Private sums: A straw-man scheme</p>
    <p>Server A Server B Server C</p>
    <p>[Chaum88], [BGW88],  [KDK11] [DFKZ13] [PrivEx14]</p>
  </div>
  <div class="page">
    <p>Server A Server B Server C</p>
    <p>Secret sharing Pick three random shares that sum to 1. 1 = 15 + (-12) + (- 2) (mod 31)</p>
    <p>Private sums: A straw-man scheme</p>
    <p>Need all three shares to recover the shared value.</p>
  </div>
  <div class="page">
    <p>Server A Server B Server C</p>
    <p>Secret sharing Pick three random shares that sum to 1. 1 = 15 + (-12) + (- 2) (mod 31)</p>
    <p>Private sums: A straw-man scheme</p>
    <p>In real system, we use a big prime</p>
    <p>Need all three shares to recover the shared value.</p>
  </div>
  <div class="page">
    <p>Server A Server B Server C</p>
    <p>Secret sharing Pick three random shares that sum to 1. 1 = 15 + (-12) + (- 2) (mod 31)</p>
    <p>Private sums: A straw-man scheme</p>
    <p>Need all three shares to recover the shared value.</p>
  </div>
  <div class="page">
    <p>Server A Server B Server C</p>
    <p>Secret sharing Pick three random shares that sum to 1. 1 = 15 + (-12) + (- 2) (mod 31)</p>
    <p>Private sums: A straw-man scheme</p>
    <p>Need all three shares to recover the shared value.</p>
  </div>
  <div class="page">
    <p>Server A Server B Server C</p>
    <p>Secret sharing Pick three random shares that sum to 1. 1 = 15 + (-12) + (- 2) (mod 31)</p>
    <p>Private sums: A straw-man scheme</p>
    <p>Need all three shares to recover the shared value.</p>
  </div>
  <div class="page">
    <p>Server A Server B Server C</p>
    <p>Private sums: A straw-man scheme</p>
  </div>
  <div class="page">
    <p>Server A Server B Server C</p>
    <p>Private sums: A straw-man scheme</p>
  </div>
  <div class="page">
    <p>Server A Server B Server C</p>
    <p>Private sums: A straw-man scheme</p>
  </div>
  <div class="page">
    <p>Server A Server B Server C</p>
    <p>Private sums: A straw-man scheme</p>
    <p>= (-10) + 7 + 3</p>
  </div>
  <div class="page">
    <p>Server A Server B Server C</p>
    <p>Private sums: A straw-man scheme</p>
    <p>= (-10) + 7 + 3</p>
  </div>
  <div class="page">
    <p>Server A Server B Server C</p>
    <p>-10</p>
    <p>Private sums: A straw-man scheme</p>
    <p>= (-10) + 7 + 3</p>
  </div>
  <div class="page">
    <p>Server A Server B Server C</p>
    <p>-10</p>
    <p>Private sums: A straw-man scheme</p>
  </div>
  <div class="page">
    <p>Server A Server B Server CPrivate sums: A straw-man scheme</p>
  </div>
  <div class="page">
    <p>Server A Server B Server CPrivate sums: A straw-man scheme</p>
  </div>
  <div class="page">
    <p>Server A Server B Server C</p>
    <p>Private sums: A straw-man scheme</p>
  </div>
  <div class="page">
    <p>Server A Server B Server C</p>
    <p>SB SCSA</p>
    <p>Private sums: A straw-man scheme</p>
  </div>
  <div class="page">
    <p>Server A Server B Server C</p>
    <p>SB SCSA</p>
    <p>Private sums: A straw-man scheme</p>
    <p>SA + SB + SC = 15 + -10 +</p>
  </div>
  <div class="page">
    <p>Server A Server B Server C</p>
    <p>SB SCSA</p>
    <p>Private sums: A straw-man scheme</p>
    <p>SA + SB + SC = 15 + -10 +</p>
  </div>
  <div class="page">
    <p>Server A Server B Server C</p>
    <p>SB SCSA</p>
    <p>SA + SB + SC = 1 + 0 +  + 1</p>
    <p>Private sums: A straw-man scheme</p>
    <p>SA + SB + SC = 15 + -10 +</p>
  </div>
  <div class="page">
    <p>Server A Server B Server C</p>
    <p>SB SCSA</p>
    <p>SA + SB + SC = 1 + 0 +  + 1</p>
    <p>Servers learn the sum of client values</p>
    <p>and learn nothing else.</p>
    <p>Private sums: A straw-man scheme</p>
    <p>SA + SB + SC = 15 + -10 +</p>
  </div>
  <div class="page">
    <p>Server A Server B Server C</p>
    <p>SB SCSA</p>
    <p>SA + SB + SC = 1 + 0 +  + 1</p>
    <p>Servers learn the sum of client values</p>
    <p>and learn nothing else.</p>
    <p>Private sums: A straw-man scheme</p>
    <p>SA + SB + SC = 15 + -10 +</p>
  </div>
  <div class="page">
    <p>Server A Server B Server C</p>
    <p>SB SCSA</p>
    <p>SA + SB + SC = 1 + 0 +  + 1</p>
    <p>Servers learn the sum of client values</p>
    <p>and learn nothing else.</p>
    <p>Private sums: A straw-man scheme</p>
    <p>SA + SB + SC = 15 + -10 +</p>
    <p>Learn that three phones are on the Bay Bridge dont know which three</p>
  </div>
  <div class="page">
    <p>Computing private sums</p>
  </div>
  <div class="page">
    <p>Computing private sums Exact correctness: If everyone follows the protocol, servers compute the sum of all xis.</p>
    <p>Privacy: Any proper subset of the servers learns nothing but the sum of the xis.</p>
    <p>Efficiency: Follows by inspection.</p>
  </div>
  <div class="page">
    <p>Computing private sums Exact correctness: If everyone follows the protocol, servers compute the sum of all xis.</p>
    <p>Privacy: Any proper subset of the servers learns nothing but the sum of the xis.</p>
    <p>Efficiency: Follows by inspection.</p>
    <p>Robustness: ???</p>
  </div>
  <div class="page">
    <p>Server A Server B Server C</p>
    <p>F</p>
    <p>Private sums: A straw-man scheme</p>
    <p>x</p>
  </div>
  <div class="page">
    <p>Server A Server B Server C</p>
    <p>F</p>
    <p>Private sums: A straw-man scheme</p>
    <p>x x is supposed to be</p>
    <p>a 0/1 value</p>
  </div>
  <div class="page">
    <p>Server A Server B Server C</p>
    <p>F</p>
    <p>Private sums: A straw-man scheme</p>
    <p>x</p>
  </div>
  <div class="page">
    <p>Server A Server B Server CPrivate sums: A straw-man scheme</p>
  </div>
  <div class="page">
    <p>Server A Server B Server CPrivate sums: A straw-man scheme</p>
    <p>An evil client neednt follow the rules!</p>
  </div>
  <div class="page">
    <p>+ + = 21</p>
    <p>Server A Server B Server CPrivate sums: A straw-man scheme</p>
    <p>An evil client neednt follow the rules!</p>
  </div>
  <div class="page">
    <p>Server A Server B Server CPrivate sums: A straw-man scheme</p>
  </div>
  <div class="page">
    <p>Server A Server B Server C</p>
    <p>F</p>
    <p>Private sums: A straw-man scheme</p>
    <p>garbage garbage garbage</p>
  </div>
  <div class="page">
    <p>Server A Server B Server C</p>
    <p>F</p>
    <p>Private sums: A straw-man scheme</p>
    <p>garbage garbage garbage</p>
    <p>Users have incentives to cheat</p>
    <p>Typical defenses (NIZKs) are costly</p>
    <p>A single bad client can undetectably corrupt the sum</p>
  </div>
  <div class="page">
    <p>Outline  Background: The private aggregation problem</p>
    <p>A straw-man solution for private sums</p>
    <p>Providing robustness with SNIPs</p>
    <p>Evaluation</p>
    <p>Encodings for complex aggregates</p>
  </div>
  <div class="page">
    <p>Outline  Background: The private aggregation problem</p>
    <p>A straw-man solution for private sums</p>
    <p>Providing robustness with SNIPs</p>
    <p>Evaluation</p>
    <p>Encodings for complex aggregates</p>
  </div>
  <div class="page">
    <p>Server A Server B Server C</p>
    <p>Contribution 1 Secret-shared non-interactive proofs (SNIPs)</p>
    <p>x = 1</p>
  </div>
  <div class="page">
    <p>Server A Server B Server C</p>
    <p>Contribution 1 Secret-shared non-interactive proofs (SNIPs)</p>
    <p>x = 1</p>
  </div>
  <div class="page">
    <p>+ ( ) + ( ) = 1</p>
    <p>Server A Server B Server C</p>
    <p>Contribution 1 Secret-shared non-interactive proofs (SNIPs)</p>
    <p>x = 1</p>
  </div>
  <div class="page">
    <p>Server A Server B Server C</p>
    <p>Contribution 1 Secret-shared non-interactive proofs (SNIPs)</p>
    <p>x = 1</p>
  </div>
  <div class="page">
    <p>Server A Server B Server C</p>
    <p>Contribution 1 Secret-shared non-interactive proofs (SNIPs)</p>
    <p>x = 1</p>
  </div>
  <div class="page">
    <p>Server A Server B Server C</p>
    <p>Contribution 1 Secret-shared non-interactive proofs (SNIPs)</p>
    <p>The servers want to ensure that their shares sum to 0 or 1</p>
    <p>without learning x.</p>
    <p>x = 1</p>
  </div>
  <div class="page">
    <p>Server A Server B Server C</p>
    <p>hold shares of the clients private value x  hold an arbitrary public predicate Valid()</p>
    <p>expressed as an arithmetic circuit  want to test if Valid(x) holds, without leaking x</p>
    <p>Contribution 1 Secret-shared non-interactive proofs (SNIPs)</p>
    <p>More generally, serversx = 1</p>
    <p>xa xb xc</p>
  </div>
  <div class="page">
    <p>Server A Server B Server C</p>
    <p>hold shares of the clients private value x  hold an arbitrary public predicate Valid()</p>
    <p>expressed as an arithmetic circuit  want to test if Valid(x) holds, without leaking x</p>
    <p>Contribution 1 Secret-shared non-interactive proofs (SNIPs)</p>
    <p>More generally, serversx = 1</p>
    <p>xa xb xc</p>
    <p>For our running example: Valid(x) = x  {0,1}</p>
  </div>
  <div class="page">
    <p>Server A Server B Server C</p>
    <p>hold shares of the clients private value x  hold an arbitrary public predicate Valid()</p>
    <p>expressed as an arithmetic circuit  want to test if Valid(x) holds, without leaking x</p>
    <p>Contribution 1 Secret-shared non-interactive proofs (SNIPs)</p>
    <p>More generally, serversx = 1</p>
    <p>xa xb xc</p>
  </div>
  <div class="page">
    <p>Server A Server B Server C</p>
    <p>Contribution 1 Secret-shared non-interactive proofs (SNIPs)</p>
    <p>x = 1</p>
    <p>xa xb xc</p>
  </div>
  <div class="page">
    <p>Server A Server B Server C</p>
    <p>a</p>
    <p>Contribution 1 Secret-shared non-interactive proofs (SNIPs)</p>
    <p>x = 1</p>
    <p>xa xb xc</p>
  </div>
  <div class="page">
    <p>Server A Server B Server C</p>
    <p>ba</p>
    <p>Contribution 1 Secret-shared non-interactive proofs (SNIPs)</p>
    <p>x = 1</p>
    <p>xa xb xc</p>
  </div>
  <div class="page">
    <p>Server A Server B Server C</p>
    <p>ba c</p>
    <p>Contribution 1 Secret-shared non-interactive proofs (SNIPs)</p>
    <p>x = 1</p>
    <p>xa xb xc</p>
  </div>
  <div class="page">
    <p>xa xb xc</p>
    <p>Server A Server B Server C</p>
    <p>a, b, c,</p>
    <p>Contribution 1 Secret-shared non-interactive proofs (SNIPs)</p>
    <p>x = 1</p>
  </div>
  <div class="page">
    <p>xa xb xc</p>
    <p>Server A Server B Server C</p>
    <p>a, b, c,</p>
    <p>Contribution 1 Secret-shared non-interactive proofs (SNIPs)</p>
    <p>x = 1</p>
  </div>
  <div class="page">
    <p>xa xb xc</p>
    <p>Server A Server B Server C</p>
    <p>a, b, c, Servers gossip</p>
    <p>Contribution 1 Secret-shared non-interactive proofs (SNIPs)</p>
    <p>x = 1</p>
  </div>
  <div class="page">
    <p>xa xb xc</p>
    <p>Server A Server B Server C</p>
    <p>a, b, c,</p>
    <p>Contribution 1 Secret-shared non-interactive proofs (SNIPs)</p>
    <p>x = 1</p>
  </div>
  <div class="page">
    <p>xa xb xc</p>
    <p>Server A Server B Server C</p>
    <p>Contribution 1 Secret-shared non-interactive proofs (SNIPs)</p>
    <p>x = 1</p>
  </div>
  <div class="page">
    <p>xa xb xc</p>
    <p>Server A Server B Server C</p>
    <p>Contribution 1 Secret-shared non-interactive proofs (SNIPs)</p>
    <p>x = 1</p>
  </div>
  <div class="page">
    <p>xa xb xc</p>
    <p>Server A Server B Server C</p>
    <p>Contribution 1 Secret-shared non-interactive proofs (SNIPs)</p>
    <p>x = 1</p>
  </div>
  <div class="page">
    <p>xa xb xc</p>
    <p>Server A Server B Server C</p>
    <p>a, b, c,</p>
    <p>Contribution 1 Secret-shared non-interactive proofs (SNIPs)</p>
    <p>x = 1</p>
  </div>
  <div class="page">
    <p>Server A Server B Server C</p>
    <p>xa xb xc</p>
    <p>Contribution 1 Secret-shared non-interactive proofs (SNIPs)</p>
    <p>x = 1</p>
  </div>
  <div class="page">
    <p>xa xb xc</p>
    <p>Server A Server B Server C</p>
    <p>a, b, c,</p>
    <p>Contribution 1 Secret-shared non-interactive proofs (SNIPs)</p>
    <p>x = 1</p>
  </div>
  <div class="page">
    <p>xa xb xc</p>
    <p>Server A Server B Server C</p>
    <p>Contribution 1 Secret-shared non-interactive proofs (SNIPs)</p>
    <p>x = 1</p>
  </div>
  <div class="page">
    <p>xa xb xc</p>
    <p>Server A Server B Server C</p>
    <p>Contribution 1 Secret-shared non-interactive proofs (SNIPs)</p>
    <p>x = 1</p>
  </div>
  <div class="page">
    <p>xa xb xc</p>
    <p>Server A Server B Server C</p>
    <p>Contribution 1 Secret-shared non-interactive proofs (SNIPs)</p>
    <p>x = 1</p>
  </div>
  <div class="page">
    <p>xa xb xc</p>
    <p>Server A Server B Server C</p>
    <p>a, b, c,</p>
    <p>Contribution 1 Secret-shared non-interactive proofs (SNIPs)</p>
    <p>x = 1</p>
  </div>
  <div class="page">
    <p>xa xb xc</p>
    <p>Server A Server B Server C</p>
    <p>X X X</p>
    <p>Prio servers detect and reject malformed client submissions</p>
    <p>In this example, each client can influence the aggregate statistic by +/- 1, at most</p>
    <p>Contribution 1 Secret-shared non-interactive proofs (SNIPs)</p>
    <p>x = 1</p>
  </div>
  <div class="page">
    <p>Server A Server B Server C</p>
    <p>The servers want to ensure that Valid(x) = Valid(xa+xb+xc) = 1</p>
    <p>without learning x.</p>
    <p>x = 1</p>
    <p>xa xb xc</p>
    <p>How SNIPs work</p>
  </div>
  <div class="page">
    <p>xa xb xc</p>
    <p>Server A Server B Server C How SNIPs work</p>
  </div>
  <div class="page">
    <p>xa xb xc</p>
    <p>Server A Server B Server C How SNIPs work</p>
    <p>Could run secure multiparty computation to check that Valid(x) = 1.</p>
    <p>[GMW87], [BGW88]</p>
  </div>
  <div class="page">
    <p>xa xb xc</p>
    <p>Server A Server B Server C How SNIPs work</p>
    <p>Could run secure multiparty computation to check that Valid(x) = 1.</p>
    <p>[GMW87], [BGW88]</p>
  </div>
  <div class="page">
    <p>xa xb xc</p>
    <p>Server A Server B Server C How SNIPs work</p>
  </div>
  <div class="page">
    <p>Server A Server B Server C How SNIPs work</p>
    <p>x</p>
    <p>xa xb xc</p>
  </div>
  <div class="page">
    <p>Server A Server B Server C How SNIPs work</p>
    <p>x</p>
    <p>Idea: Client generates the transcripts that servers would have observed in a multi-party computation</p>
    <p>See also [IKOS07]</p>
    <p>xa</p>
    <p>xb</p>
    <p>xc</p>
    <p>xa xb xc</p>
  </div>
  <div class="page">
    <p>Server A Server B Server C How SNIPs work</p>
    <p>x</p>
    <p>Idea: Client generates the transcripts that servers would have observed in a multi-party computation</p>
    <p>See also [IKOS07]</p>
    <p>xa</p>
    <p>xb</p>
    <p>xc</p>
    <p>xa xb xc</p>
  </div>
  <div class="page">
    <p>Server A Server B Server C How SNIPs work</p>
    <p>x xa</p>
    <p>xb</p>
    <p>xc</p>
    <p>xa xb xc</p>
  </div>
  <div class="page">
    <p>Server A Server B Server C How SNIPs work</p>
    <p>x</p>
    <p>xa xb xc</p>
  </div>
  <div class="page">
    <p>Server A Server B Server C How SNIPs work</p>
    <p>x</p>
    <p>Servers check that the transcripts are valid and consistent.</p>
    <p>xa xb xc</p>
  </div>
  <div class="page">
    <p>Server A Server B Server C How SNIPs work</p>
    <p>x</p>
    <p>Servers check that the transcripts are valid and consistent.</p>
    <p>a b cxa xb xc</p>
  </div>
  <div class="page">
    <p>Server A Server B Server C How SNIPs work</p>
    <p>x</p>
    <p>Servers check that the transcripts are valid and consistent.</p>
    <p>Checking a transcript is much easier than generating it!</p>
    <p>a b cxa xb xc</p>
  </div>
  <div class="page">
    <p>Server A Server B Server C How SNIPs work</p>
    <p>a b cxa xb xc</p>
  </div>
  <div class="page">
    <p>Server A Server B Server C How SNIPs work</p>
    <p>a b c</p>
    <p>Da Db Dc</p>
    <p>xa xb xc</p>
  </div>
  <div class="page">
    <p>Server A Server B Server C How SNIPs work</p>
    <p>a b c</p>
    <p>Da Db Dc</p>
    <p>xa xb xc</p>
    <p>Randomized digest of the transcript</p>
  </div>
  <div class="page">
    <p>Server A Server B Server C How SNIPs work</p>
    <p>a b c</p>
    <p>Da Db Dc</p>
    <p>xa xb xc</p>
  </div>
  <div class="page">
    <p>Server A Server B Server C How SNIPs work</p>
    <p>Da Db Dc</p>
    <p>[BFO12]</p>
  </div>
  <div class="page">
    <p>Server A Server B Server C How SNIPs work</p>
    <p>Da Db Dc</p>
    <p>[BFO12]</p>
  </div>
  <div class="page">
    <p>If x is valid, Da + Db + Dc = 0  If x is invalid, Da + Db + Dc  0 with high probability Servers run lightweight multi-party computation to check that</p>
    <p>Da + Db + Dc = 0 If so, servers accept x is valid.</p>
    <p>Server A Server B Server C How SNIPs work</p>
    <p>Da Db Dc</p>
    <p>[BFO12]</p>
  </div>
  <div class="page">
    <p>If x is valid, Da + Db + Dc = 0  If x is invalid, Da + Db + Dc  0 with high probability Servers run lightweight multi-party computation to check that</p>
    <p>Da + Db + Dc = 0 If so, servers accept x is valid.</p>
    <p>Server A Server B Server C How SNIPs work</p>
    <p>Da Db Dc</p>
    <p>O(1) O(1)</p>
    <p>O(1)</p>
    <p>[BFO12]</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>M = # of multiplication gates in Valid() circuit</p>
    <p>Public-key ops. Communication SlowdownClient Server C-to-S S-to-S</p>
  </div>
  <div class="page">
    <p>M = # of multiplication gates in Valid() circuit</p>
    <p>Public-key ops. Communication SlowdownClient Server C-to-S S-to-S</p>
    <p>Dishonest-maj. MPC 0 (M) 0 (M) 5,000x at server[CLOS02], [DPSZ12],</p>
  </div>
  <div class="page">
    <p>M = # of multiplication gates in Valid() circuit</p>
    <p>Public-key ops. Communication SlowdownClient Server C-to-S S-to-S</p>
    <p>Dishonest-maj. MPC 0 (M) 0 (M) 5,000x at server</p>
    <p>Commits + NIZKs (M) (M) (M) (M) 50x at server[FS86], [CP92], [CS97],</p>
    <p>[CLOS02], [DPSZ12],</p>
  </div>
  <div class="page">
    <p>M = # of multiplication gates in Valid() circuit</p>
    <p>Public-key ops. Communication SlowdownClient Server C-to-S S-to-S</p>
    <p>Dishonest-maj. MPC 0 (M) 0 (M) 5,000x at server</p>
    <p>Commits + NIZKs (M) (M) (M) (M) 50x at server</p>
    <p>Commits + SNARKs (M) O(1) O(1) O(1) 500x at client</p>
    <p>[FS86], [CP92], [CS97],</p>
    <p>[GGPR13], [BCGTV13],</p>
    <p>[CLOS02], [DPSZ12],</p>
  </div>
  <div class="page">
    <p>M = # of multiplication gates in Valid() circuit</p>
    <p>Public-key ops. Communication SlowdownClient Server C-to-S S-to-S</p>
    <p>Dishonest-maj. MPC 0 (M) 0 (M) 5,000x at server</p>
    <p>Commits + NIZKs (M) (M) (M) (M) 50x at server</p>
    <p>Commits + SNARKs (M) O(1) O(1) O(1) 500x at client</p>
    <p>This work: SNIPs 0 0 (M) O(1) 1x</p>
    <p>[FS86], [CP92], [CS97],</p>
    <p>[GGPR13], [BCGTV13],</p>
    <p>[CLOS02], [DPSZ12],</p>
  </div>
  <div class="page">
    <p>M = # of multiplication gates in Valid() circuit</p>
    <p>Public-key ops. Communication SlowdownClient Server C-to-S S-to-S</p>
    <p>Dishonest-maj. MPC 0 (M) 0 (M) 5,000x at server</p>
    <p>Commits + NIZKs (M) (M) (M) (M) 50x at server</p>
    <p>Commits + SNARKs (M) O(1) O(1) O(1) 500x at client</p>
    <p>This work: SNIPs 0 0 (M) O(1) 1x</p>
    <p>[FS86], [CP92], [CS97],</p>
    <p>[GGPR13], [BCGTV13],</p>
    <p>For specific Valid() circuits, it is possible to eliminate</p>
    <p>this cost [BGI16]</p>
    <p>[CLOS02], [DPSZ12],</p>
  </div>
  <div class="page">
    <p>M = # of multiplication gates in Valid() circuit</p>
    <p>Public-key ops. Communication SlowdownClient Server C-to-S S-to-S</p>
    <p>Dishonest-maj. MPC 0 (M) 0 (M) 5,000x at server</p>
    <p>Commits + NIZKs (M) (M) (M) (M) 50x at server</p>
    <p>Commits + SNARKs (M) O(1) O(1) O(1) 500x at client</p>
    <p>This work: SNIPs 0 0 (M) O(1) 1x</p>
    <p>[FS86], [CP92], [CS97],</p>
    <p>[GGPR13], [BCGTV13],</p>
    <p>[CLOS02], [DPSZ12],</p>
  </div>
  <div class="page">
    <p>Outline  Background: The private aggregation problem</p>
    <p>A straw-man solution for private sums</p>
    <p>Providing robustness with SNIPs</p>
    <p>Evaluation</p>
    <p>Encodings for complex aggregates</p>
  </div>
  <div class="page">
    <p>Outline  Background: The private aggregation problem</p>
    <p>A straw-man solution for private sums</p>
    <p>Providing robustness with SNIPs</p>
    <p>Evaluation</p>
    <p>Encodings for complex aggregates</p>
  </div>
  <div class="page">
    <p>Evaluation  Implemented Prio in Go</p>
    <p>(see optimizations described in paper)</p>
    <p>Five-server cluster in EC2</p>
    <p>System collects the sum of N 0/1 values</p>
    <p>Four variants 1. No privacy 2. No robustness (straw man) 3. Prio (privacy + robustness) 4. NIZK (privacy + robustness)</p>
  </div>
  <div class="page">
    <p>Evaluation  Implemented Prio in Go</p>
    <p>(see optimizations described in paper)</p>
    <p>Five-server cluster in EC2</p>
    <p>System collects the sum of N 0/1 values</p>
    <p>Four variants 1. No privacy 2. No robustness (straw man) 3. Prio (privacy + robustness) 4. NIZK (privacy + robustness)</p>
    <p>E.g., for privately measuring telemetry data.</p>
  </div>
  <div class="page">
    <p>Evaluation  Implemented Prio in Go</p>
    <p>(see optimizations described in paper)</p>
    <p>Five-server cluster in EC2</p>
    <p>System collects the sum of N 0/1 values</p>
    <p>Four variants 1. No privacy 2. No robustness (straw man) 3. Prio (privacy + robustness) 4. NIZK (privacy + robustness)</p>
  </div>
  <div class="page">
    <p>Evaluation  Implemented Prio in Go</p>
    <p>(see optimizations described in paper)</p>
    <p>Five-server cluster in EC2</p>
    <p>System collects the sum of N 0/1 values</p>
    <p>Four variants 1. No privacy 2. No robustness (straw man) 3. Prio (privacy + robustness) 4. NIZK (privacy + robustness)</p>
    <p>one server</p>
  </div>
  <div class="page">
    <p>Evaluation  Implemented Prio in Go</p>
    <p>(see optimizations described in paper)</p>
    <p>Five-server cluster in EC2</p>
    <p>System collects the sum of N 0/1 values</p>
    <p>Four variants 1. No privacy 2. No robustness (straw man) 3. Prio (privacy + robustness) 4. NIZK (privacy + robustness)</p>
    <p>one server</p>
    <p>five servers</p>
  </div>
  <div class="page">
    <p>Five-server cluster in five Amazon data centers</p>
    <p>Submission length (0/1 integers)</p>
    <p>S u b m</p>
    <p>i s s i o n s</p>
    <p>p r o c e s s e d / s</p>
    <p>NIZK</p>
  </div>
  <div class="page">
    <p>Five-server cluster in five Amazon data centers</p>
    <p>Submission length (0/1 integers)</p>
    <p>S u b m</p>
    <p>i s s i o n s</p>
    <p>p r o c e s s e d / s</p>
    <p>Prio</p>
    <p>NIZK</p>
  </div>
  <div class="page">
    <p>Five-server cluster in five Amazon data centers</p>
    <p>Submission length (0/1 integers)</p>
    <p>S u b m</p>
    <p>i s s i o n s</p>
    <p>p r o c e s s e d / s</p>
    <p>Prio</p>
    <p>NIZK</p>
  </div>
  <div class="page">
    <p>Five-server cluster in five Amazon data centers</p>
    <p>Submission length (0/1 integers)</p>
    <p>S u b m</p>
    <p>i s s i o n s</p>
    <p>p r o c e s s e d / s</p>
    <p>Prio</p>
    <p>NIZK</p>
  </div>
  <div class="page">
    <p>Five-server cluster in five Amazon data centers</p>
    <p>Submission length (0/1 integers)</p>
    <p>S u b m</p>
    <p>i s s i o n s</p>
    <p>p r o c e s s e d / s</p>
    <p>No robustness</p>
    <p>Prio</p>
    <p>NIZK</p>
  </div>
  <div class="page">
    <p>Submission length (0/1 integers)</p>
    <p>S u b m</p>
    <p>i s s i o n s</p>
    <p>p r o c e s s e d / s</p>
    <p>No robustness</p>
    <p>Prio</p>
    <p>NIZK</p>
    <p>No privacy</p>
    <p>Five-server cluster in five Amazon data centers</p>
  </div>
  <div class="page">
    <p>Submission length (0/1 integers)</p>
    <p>S u b m</p>
    <p>i s s i o n s</p>
    <p>p r o c e s s e d / s</p>
    <p>No robustness</p>
    <p>Prio</p>
    <p>NIZK</p>
    <p>No privacy</p>
    <p>Five-server cluster in five Amazon data centers</p>
    <p>Within 10x of no privacy</p>
  </div>
  <div class="page">
    <p>Submission length</p>
    <p>(0/1 integers)</p>
    <p>P e r s e r v e r</p>
    <p>d a t a</p>
    <p>t r a n</p>
    <p>s f e r</p>
    <p>N</p>
    <p>I</p>
    <p>Z</p>
    <p>K</p>
    <p>Prio</p>
  </div>
  <div class="page">
    <p>Submission length</p>
    <p>(0/1 integers)</p>
    <p>P e r s e r v e r</p>
    <p>d a t a</p>
    <p>t r a n</p>
    <p>s f e r</p>
    <p>N</p>
    <p>I</p>
    <p>Z</p>
    <p>K</p>
    <p>Prio</p>
  </div>
  <div class="page">
    <p>Submission length</p>
    <p>(0/1 integers)</p>
    <p>P e r s e r v e r</p>
    <p>d a t a</p>
    <p>t r a n</p>
    <p>s f e r</p>
    <p>N</p>
    <p>I</p>
    <p>Z</p>
    <p>K</p>
    <p>Prio</p>
    <p>Servers exchange a constant number</p>
    <p>of bytes</p>
  </div>
  <div class="page">
    <p>Outline  Background: The private aggregation problem</p>
    <p>A straw-man solution for private sums</p>
    <p>Providing robustness with SNIPs</p>
    <p>Evaluation</p>
    <p>Encodings for complex aggregates</p>
  </div>
  <div class="page">
    <p>Outline  Background: The private aggregation problem</p>
    <p>A straw-man solution for private sums</p>
    <p>Providing robustness with SNIPs</p>
    <p>Evaluation</p>
    <p>Encodings for complex aggregates</p>
  </div>
  <div class="page">
    <p>Known techniques: Complex statistics If you can compute private sums, you can compute many other interesting aggregates using known techniques  Average  Variance  Standard deviation  Most popular (approx)  Heavy hitters (approx)  Min and max (approx)  Quality of arbitrary regression model (R2)  Least-squares regression  Stochastic gradient descent [Bonawitz et al. 2016]</p>
    <p>[PrivStats11], [KDK11], [DFKZ13], [PrivEx14], [MDD16],</p>
  </div>
  <div class="page">
    <p>Known techniques: Complex statistics If you can compute private sums, you can compute many other interesting aggregates using known techniques  Average  Variance  Standard deviation  Most popular (approx)  Heavy hitters (approx)  Min and max (approx)  Quality of arbitrary regression model (R2)  Least-squares regression  Stochastic gradient descent [Bonawitz et al. 2016]</p>
    <p>[PrivStats11], [KDK11], [DFKZ13], [PrivEx14], [MDD16],</p>
    <p>Contribution 2: SNIP-friendly encodings</p>
    <p>for these statistics</p>
  </div>
  <div class="page">
    <p>Known techniques: Complex statistics If you can compute private sums, you can compute many other interesting aggregates using known techniques  Average  Variance  Standard deviation  Most popular (approx)  Heavy hitters (approx)  Min and max (approx)  Quality of arbitrary regression model (R2)  Least-squares regression  Stochastic gradient descent [Bonawitz et al. 2016]</p>
    <p>[PrivStats11], [KDK11], [DFKZ13], [PrivEx14], [MDD16],</p>
    <p>Contribution 2: SNIP-friendly encodings</p>
    <p>for these statistics</p>
    <p>Prio cant compute all statistics efficiently</p>
  </div>
  <div class="page">
    <p>Known techniques: Complex statistics If you can compute private sums, you can compute many other interesting aggregates using known techniques  Average  Variance  Standard deviation  Most popular (approx)  Heavy hitters (approx)  Min and max (approx)  Quality of arbitrary regression model (R2)  Least-squares regression  Stochastic gradient descent [Bonawitz et al. 2016]</p>
    <p>[PrivStats11], [KDK11], [DFKZ13], [PrivEx14], [MDD16],</p>
    <p>Contribution 2: SNIP-friendly encodings</p>
    <p>for these statistics</p>
    <p>See the paper for the details</p>
    <p>Prio cant compute all statistics efficiently</p>
  </div>
  <div class="page">
    <p>StressTracker B</p>
    <p>lo od</p>
    <p>p re</p>
    <p>ss ur</p>
    <p>e</p>
    <p>Today</p>
    <p>Twitter usage</p>
  </div>
  <div class="page">
    <p>StressTracker B</p>
    <p>lo od</p>
    <p>p re</p>
    <p>ss ur</p>
    <p>e</p>
    <p>Today</p>
    <p>Twitter usage</p>
  </div>
  <div class="page">
    <p>StressTrackerApp store B</p>
    <p>lo od</p>
    <p>p re</p>
    <p>ss ur</p>
    <p>e</p>
    <p>With Prio</p>
    <p>Twitter usage</p>
  </div>
  <div class="page">
    <p>StressTrackerApp store B</p>
    <p>lo od</p>
    <p>p re</p>
    <p>ss ur</p>
    <p>e</p>
    <p>With Prio</p>
    <p>Twitter usage</p>
  </div>
  <div class="page">
    <p>StressTrackerApp store B</p>
    <p>lo od</p>
    <p>p re</p>
    <p>ss ur</p>
    <p>e</p>
    <p>With Prio</p>
    <p>Twitter usage</p>
  </div>
  <div class="page">
    <p>B lo</p>
    <p>od p</p>
    <p>re ss</p>
    <p>ur e</p>
    <p>With Prio</p>
    <p>B( T)</p>
    <p>= c1  T</p>
    <p>+ c0</p>
    <p>StressTrackerApp store</p>
    <p>Twitter usage</p>
  </div>
  <div class="page">
    <p>Conclusions  Wholesale collection of sensitive user data puts our</p>
    <p>security at risk.  Prio is the first system for aggregation that provides:</p>
    <p>exact correctness,  privacy,  robustness, and  efficiency.</p>
    <p>To do so, Prio uses SNIPs and aggregatable encodings.  These techniques together bring private aggregation</p>
    <p>closer to practical.</p>
    <p>Thank you! Henry Corrigan-Gibbs</p>
    <p>henrycg@cs.stanford.edu https://crypto.stanford.edu/prio/</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Example Encoding: Average and Variance [PrivStats11]</p>
  </div>
  <div class="page">
    <p>Example Encoding: Average and Variance  Each of N clients holds a value xi  Servers want the AVG and VAR of the xis.</p>
    <p>Each client i encodes her value x as the pair (x, y) = (x, x2)</p>
    <p>Simple to check that the encoding is valid: Valid(x, y) = (x2 - y) [outputs zero if valid]</p>
    <p>[PrivStats11]</p>
  </div>
  <div class="page">
    <p>Example Encoding: Average and Variance  Each of N clients holds a value xi  Servers want the AVG and VAR of the xis.</p>
    <p>Each client i encodes her value x as the pair (x, y) = (x, x2)</p>
    <p>Simple to check that the encoding is valid: Valid(x, y) = (x2 - y) [outputs zero if valid]</p>
    <p>Use Prio to compute the sum of encodings i (xi, yi)</p>
    <p>[PrivStats11]</p>
  </div>
  <div class="page">
    <p>Example Encoding: Average and Variance  Each of N clients holds a value xi  Servers want the AVG and VAR of the xis.</p>
    <p>Each client i encodes her value x as the pair (x, y) = (x, x2)</p>
    <p>Simple to check that the encoding is valid: Valid(x, y) = (x2 - y) [outputs zero if valid]</p>
    <p>Use Prio to compute the sum of encodings i (xi, yi)</p>
    <p>Then recover the statistics: AVG(X) = (i xi) / N AVG(X2) = (i yi) / N = (i xi2) / N VAR(X) = AVG(X2) - AVG(X)2</p>
    <p>[PrivStats11]</p>
  </div>
  <div class="page">
    <p>BrCa 30x14-bit ints</p>
    <p>Heart 13 mixed features</p>
  </div>
  <div class="page">
    <p>Using 128-bit integers</p>
  </div>
  <div class="page">
    <p>Submit data</p>
    <p>Using 128-bit integers</p>
  </div>
  <div class="page">
    <p>xa, aSubmit data</p>
    <p>Using 128-bit integers</p>
  </div>
  <div class="page">
    <p>xa, aSubmit data xb, b</p>
    <p>Using 128-bit integers</p>
  </div>
  <div class="page">
    <p>xa, aSubmit data xb, b xc, c</p>
    <p>Using 128-bit integers</p>
  </div>
  <div class="page">
    <p>xa, aSubmit data</p>
    <p>Proportional to length of data submission and</p>
    <p>size of Valid circuit</p>
    <p>xb, b xc, c</p>
    <p>Using 128-bit integers</p>
  </div>
  <div class="page">
    <p>xa, aSubmit data xb, b xc, c</p>
    <p>Using 128-bit integers</p>
  </div>
  <div class="page">
    <p>xa, aSubmit data xb, b xc, c</p>
    <p>Using 128-bit integers</p>
  </div>
  <div class="page">
    <p>AES keyxa, a AES keySubmit data xb, b xc, c</p>
    <p>Using 128-bit integers</p>
  </div>
  <div class="page">
    <p>AES keyxa, a AES keySubmit data</p>
    <p>Check that P(r) =? 0</p>
    <p>xb, b xc, c</p>
    <p>Using 128-bit integers</p>
  </div>
  <div class="page">
    <p>AES keyxa, a AES keySubmit data</p>
    <p>Check that P(r) =? 0</p>
    <p>Accept/reject client data</p>
    <p>xb, b xc, c</p>
    <p>Using 128-bit integers</p>
  </div>
  <div class="page">
    <p>AES keyxa, a AES key</p>
    <p>Ok/fail bit Ok/fail bit</p>
    <p>Submit data</p>
    <p>Check that P(r) =? 0</p>
    <p>Accept/reject client data</p>
    <p>xb, b xc, c</p>
    <p>Using 128-bit integers</p>
  </div>
  <div class="page">
    <p>AES keyxa, a AES key</p>
    <p>Ok/fail bit Ok/fail bit</p>
    <p>Submit data</p>
    <p>Check that P(r) =? 0</p>
    <p>Accept/reject client data</p>
    <p>Does not grow with size of data or Valid circuit</p>
    <p>xb, b xc, c</p>
    <p>Using 128-bit integers</p>
  </div>
  <div class="page">
    <p>AES keyxa, a AES key</p>
    <p>Ok/fail bit Ok/fail bit</p>
    <p>Submit data</p>
    <p>Check that P(r) =? 0</p>
    <p>Accept/reject client data</p>
    <p>xb, b xc, c</p>
    <p>Using 128-bit integers</p>
  </div>
  <div class="page">
    <p>Example Encoding: Average and Variance [PrivStats11]</p>
  </div>
  <div class="page">
    <p>Example Encoding: Average and Variance  Each of N clients holds a 4-bit value xi  Servers want the AVG and VAR of the xis.</p>
    <p>Each client encodes her value x = b3b2b1b0 as the tuple</p>
    <p>(x, y) = (x, x2, b3, b2, b1, b0)</p>
    <p>[PrivStats11]</p>
  </div>
  <div class="page">
    <p>Example Encoding: Average and Variance  Each of N clients holds a 4-bit value xi  Servers want the AVG and VAR of the xis.</p>
    <p>Each client encodes her value x = b3b2b1b0 as the tuple</p>
    <p>(x, y) = (x, x2, b3, b2, b1, b0)</p>
    <p>To test validity of the encoding, check that:</p>
    <p>Valid(x, y) = { (x2 - y) = 0  y is x2 { x - j2j bj = 0  bs are the bits of x { bj (bj 1) = 0  bs are 0/1 values</p>
    <p>[PrivStats11]</p>
  </div>
</Presentation>
