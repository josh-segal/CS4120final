<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>He Xiao Zhenhua Li Ennan Zhai Tianyin Xu</p>
    <p>Practical Web-based Delta Sync for Cloud Storage Services</p>
    <p>xiaoh16@gmail.com July 10, 2017 Hotstorage17</p>
  </div>
  <div class="page">
    <p>Network Traffic is Overwhelming in Cloud Storage</p>
    <p>File Sync</p>
    <p>Cloud Traffic has 30% CAGR (CompoundAverage Growth Rate)</p>
    <p>Sever Client</p>
    <p>Network Traffic Users Vendors</p>
  </div>
  <div class="page">
    <p>Delta Sync Improves Network Efficiency</p>
    <p>Delta Sync is crucial for reducing cloud storage network traffic.</p>
    <p>Delta Sync</p>
    <p>Delta Data</p>
    <p>New File Old File</p>
    <p>Delta sync support in nine state-of-the-art cloud storage services 10 MB</p>
    <p>Full Sync New File Old File</p>
    <p>Full File</p>
  </div>
  <div class="page">
    <p>No Web-based Delta Sync</p>
    <p>Why web-based delta sync is not supported by todays cloud storage services ?</p>
    <p>Web Apps with local storage or log files need web-based Delta Sync</p>
    <p>Web is the most pervasive and OSindependent cloud storage access method</p>
    <p>Web-based delta sync is essential for cloud storage web clients and web apps</p>
  </div>
  <div class="page">
    <p>Contribution</p>
    <p>We quantitatively study why web-based delta sync is not offered by todays cloud storage services.</p>
    <p>We build a practical web-based delta sync solution for cloud storage services.  By reversing traditional delta sync process, we make the overhead affordable at the web client side.  By exploiting the locality of users edits and trading off hash algorithms, we make the computation overhead affordable at the server side.</p>
  </div>
  <div class="page">
    <p>WebRsync: Implement Delta Sync on Web</p>
    <p>Implement rsync on real cloud storage with native web tech: JavaScript + HTML5 + WebSocket  rsync is the de facto solution of delta sync in cloud storage</p>
    <p>JavaScript Implementation of Rsync</p>
    <p>Web Server</p>
    <p>Local File System</p>
    <p>HTML5 FileAPI</p>
    <p>WebSocket</p>
    <p>Storage Backend Aliyun OSS / OpenStack Swift</p>
    <p>High-Speed Internal Network</p>
    <p>Web Browser</p>
    <p>C Implementation of Rsync</p>
  </div>
  <div class="page">
    <p>WebRsync vs. rsync</p>
    <p>Sync time of WebRsync vs rsync</p>
    <p>Average Client CPU utilization</p>
  </div>
  <div class="page">
    <p>Stagnation due to JavaScripts Singlethread Event Loop Model</p>
    <p>//print timestamp every 100ms setInterval(print(timestamp),100) //print the timestamp of every keystone( start or end of a task) on_start(task); print(task.id, timestamp) on_finish(task); print(task.id, timestamp)</p>
    <p>StagMeter</p>
  </div>
  <div class="page">
    <p>High CPU Utilization when computing</p>
    <p>Timestamp Printing is suspended Web is under stagation state</p>
    <p>StagMeter on WebRsync</p>
    <p>Sync Process (Second)</p>
  </div>
  <div class="page">
    <p>WebR2sync: Client-side Optimization Reverse Computation Process</p>
    <p>Client Server</p>
    <p>Request for Syncing File f</p>
    <p>Checksum List of f Segmentation Fingerprinting</p>
    <p>Searching Comparing</p>
    <p>Generate tokens and Literal Bytes Construct</p>
    <p>New File fACK</p>
    <p>WebRsync</p>
  </div>
  <div class="page">
    <p>WebR2sync: Client-side optimization Reverse Computation Process</p>
    <p>Web Reverse Rsync: Reverse complicatedcomputationfrom server to client.</p>
    <p>Client Server</p>
    <p>Request for Syncing File f</p>
    <p>Segmentation Fingerprinting</p>
    <p>Generate Tokens And Literal Bytes</p>
    <p>Construct New File fACK</p>
    <p>Searching Comparing</p>
    <p>Checksum List of f</p>
  </div>
  <div class="page">
    <p>Performance of WebR2sync</p>
    <p>Edit Size (Byte)</p>
    <p>Sy nc</p>
    <p>T im</p>
    <p>e (S</p>
    <p>ec on</p>
    <p>d)</p>
    <p>Edit Size (Byte)</p>
    <p>Sy nc</p>
    <p>T im</p>
    <p>e (S</p>
    <p>ec on</p>
    <p>d)</p>
    <p>Issue: Server takes severely heavy overhead.</p>
  </div>
  <div class="page">
    <p>Server-side Overhead Profiling</p>
    <p>Checksum searching and block comparison occupy 80% of the computing time</p>
    <p>MD5 Computing Checksum Search</p>
    <p>Use faster hash functions to replace MD5  Reduce checksum searching overhead</p>
  </div>
  <div class="page">
    <p>Replacing MD5 with SipHash in Chunk Comparison</p>
    <p>Hash Function Collision Probability</p>
    <p>Cycles per Byte</p>
    <p>MD5 Low 5.58</p>
    <p>Murmur3 High 0.33</p>
    <p>Spooky High 0.14</p>
    <p>SipHash Low 1.13</p>
    <p>SipHash remain low Collision Probability at much faster speed</p>
    <p>A comparison of pseudorandom hash functions</p>
  </div>
  <div class="page">
    <p>Solve Possible Hash Collision</p>
    <p>Replace MD5 with SipHash, may cause potential collisions (Probability p), so does MD5.</p>
    <p>Our Solution: Use Spooky (fastest method, collision probability p).  The probability of collisions is p*p</p>
    <p>Alternative: Use MD5 or other strong hash functions as a global verification.  Compute MD5 over whole file is expensive.</p>
  </div>
  <div class="page">
    <p>Reduce Chunk Searching by Exploiting Locality of File Edits.</p>
    <p>MD5-4</p>
    <p>Hash Table Adler32-1 Adler32-2 Adler32-3 Adler32-4</p>
    <p>MD5-1 MD5-2 MD5-3</p>
    <p>Block1 Block2 Block3 Block4</p>
    <p>Checksum search</p>
    <p>Compare</p>
  </div>
  <div class="page">
    <p>Evaluation Setup</p>
    <p>Basic experiment setup visualized in a map of China</p>
  </div>
  <div class="page">
    <p>Sync Time</p>
    <p>yn c</p>
    <p>Ti m</p>
    <p>e (S</p>
    <p>ec on</p>
    <p>d) WebRsync WebR2sync WebR2sync+ rsync</p>
    <p>WebR2sync+ is 2-3 times faster than WebR2sync and 15-20 times faster than WebRsync</p>
  </div>
  <div class="page">
    <p>Throughput</p>
    <p>NoWebRsync</p>
    <p>WebRsync</p>
    <p>WebR2sync</p>
    <p>WebR2sync+</p>
    <p>rsync</p>
    <p>This throughput is as 4 times as that of WebR2sync/rsync and as 9 times as that of NoWebRsync.</p>
  </div>
  <div class="page">
    <p>Future Work</p>
    <p>Evaluate our approach under different edit modes  delete, insert, append</p>
    <p>Evaluate traffic efficiency  all the methods should have similar traffic efficiency</p>
    <p>Understand the effects of three optimizations  evaluate them separately</p>
  </div>
  <div class="page">
    <p>Discussion</p>
    <p>Probability of collisions of file checksums</p>
    <p>Characteristics of file operations in real-world scenarios from the perspective of sync</p>
    <p>Locality measure for deciding whether to apply locality-based optimization.</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>WebR2sync+ is a practical solution for webbased delta sync  lightweight computation at the client side  optimized overhead at the server side  the server-side optimizations can be adopted in the traditional cloud storage architecture</p>
  </div>
  <div class="page">
    <p>Thanks! discussion</p>
  </div>
  <div class="page">
    <p>WebRsync Detailed Description</p>
    <p>Block1</p>
    <p>Block2</p>
    <p>Block3</p>
    <p>Adler32 MD5</p>
    <p>Adler32 MD5</p>
    <p>Adler32 MD5</p>
    <p>Weak Checksum Search</p>
    <p>Strong Checksum Compare</p>
    <p>YES</p>
    <p>YES</p>
    <p>NO</p>
    <p>NO</p>
    <p>Matched Tokens Literal Bytes Construct New File</p>
    <p>Client Server</p>
    <p>Rolling Adler32 O(1): Adler(i)=&gt;Adler(i+1)</p>
  </div>
  <div class="page">
    <p>WebR2sync: Flowchart and Data structure</p>
    <p>Construct New Files Client Server</p>
    <p>Weak Checksum Search</p>
    <p>Strong Checksum Compare</p>
    <p>YES</p>
    <p>NO</p>
    <p>NO</p>
    <p>YES Block 1 Block 2 Block 3 Block 4</p>
    <p>Block 1 Block 2 Block 3 Block 4</p>
    <p>When find a match, record the associated index</p>
  </div>
  <div class="page">
    <p>Sync Time decomposed</p>
    <p>yn c</p>
    <p>Ti m</p>
    <p>e (S</p>
    <p>ec on</p>
    <p>d) Server Network Client</p>
    <p>WebR2sync+ client takes stable and shorter time. Because of the Server-side optimization, computing time is much shorter both in client and server.</p>
  </div>
</Presentation>
