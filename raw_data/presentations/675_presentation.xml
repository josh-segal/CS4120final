<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Swaminathan Sundararaman, Yupu Zhang, Sriram Subramanian, Andrea C. Arpaci-Dusseau, Remzi H. Arpaci-Dusseau</p>
  </div>
  <div class="page">
    <p>Why do file systems not crash all the time?  Bad things rarely happen</p>
    <p>Common case code: frequently run code  Well tested  run all the time by users  Hardened code  lower failure probability</p>
    <p>Ideal: if everything was common case code  We can significantly reduce the occurrence of bugs</p>
  </div>
  <div class="page">
    <p>Code to handle exceptions/errors/failures</p>
    <p>Worst property: rarely run but when executed must run absolutely correctly</p>
    <p>Prior work uncovered bugs in recovery code  Memory allocation [Engler OSDI 00, Yang OSDI 04, Yang OSDI 06]  Error propagation [Gunawi FAST 08, Rubio-Gonzalez PLDI 09]  Missing recovery code [Engler OSDI 00, Swift SOSP 03]</p>
    <p>Focus on memory allocation failures 3/11/11 FAST '11: Making the Common Case the Only Case with Anticipatory Memory Allocation 3</p>
  </div>
  <div class="page">
    <p>Memory is a limited resource  Virtualization, cloud computing (data centers)  Buggy components slowly leak memory</p>
    <p>Memory is allocated throughout the OS  Core kernel code, file systems, device drivers, etc.  Allocation requests may not succeed</p>
    <p>Memory can be allocated deep inside the stack  Deep recovery is difficult [Gunawi FAST 08, Rubio-Gonzalez PLDI 09]</p>
    <p>FAST '11: Making the Common Case the Only Case with Anticipatory Memory Allocation 3/11/11 4</p>
  </div>
  <div class="page">
    <p>Fault injection during memory allocation calls</p>
    <p>15 runs of benchmark</p>
    <p>.1, .5 failure prob.</p>
    <p>Error - good</p>
    <p>Abort, unusable, or inconsistent - bad</p>
    <p>FSprobabilty Process State File-system State</p>
    <p>Error Abort Unusable Inconsistent</p>
    <p>ext210 10 5 5 0</p>
    <p>ext250 10 5 5 0</p>
    <p>Btrfs10 0 14 15 0</p>
    <p>Btrfs50 0 15 15 0</p>
    <p>jfs10 15 0 2 5</p>
    <p>jfs50 15 0 5 5</p>
    <p>xfs10 13 1 0 3</p>
    <p>xfs50 10 5 0 5</p>
  </div>
  <div class="page">
    <p>Deadlocks  Requests need not make progress</p>
    <p>Not always possible  Critical sections, interrupt handlers</p>
    <p>What about GFP_NOFAIL flag?  GFP_NOFAIL should only be used when we have no way of recovering from failure. ... GFP_NOFAIL is there as a marker which says we really shouldnt be doing this but we dont know how to fix it - Andrew Morton</p>
    <p>FAST '11: Making the Common Case the Only Case with Anticipatory Memory Allocation 3/11/11 6</p>
  </div>
  <div class="page">
    <p>Mantra: Most robust recovery code is recovery code that never runs at all</p>
  </div>
  <div class="page">
    <p>Attempt to make common case the ONLY case  Pre-allocate memory inside OS (context of file systems)</p>
    <p>Memory Allocation</p>
    <p>Application</p>
    <p>K er n el Syscall</p>
    <p>Block Driver</p>
    <p>Pre-allocated Memory</p>
    <p>Application</p>
    <p>K er n el Syscall</p>
    <p>Block Driver</p>
    <p>Vanilla Kernel AMA Kernel</p>
    <p>Cleanup  Recovery code not scattered</p>
    <p>Shallow recovery</p>
    <p>Code naturally written</p>
    <p>Advantages</p>
  </div>
  <div class="page">
    <p>We have evaluated AMA with ext2 file system  ext2-mfr (memory failure robust ext2)</p>
    <p>Robustness  Recovers from all memory allocation failures</p>
    <p>Performance  Low overheads for most user workloads</p>
    <p>Memory overheads  Most cases: we do really well  Few cases: we perform badly</p>
  </div>
  <div class="page">
    <p>Introduction  Challenges  Anticipatory Memory Allocation (AMA)  Reducing memory overheads  Evaluation  Conclusions</p>
  </div>
  <div class="page">
    <p>Different types of memory allocation calls  kmalloc(size, flag)  vmalloc(size, flag)  kmem_cache_alloc(cachep, flag)  alloc_pages(order, flag)</p>
    <p>Need: to handle all memory allocation calls</p>
  </div>
  <div class="page">
    <p>Hard to determine the number of objects allocated inside each function  Simple calls  Parameterized &amp; conditional calls  Loops  Function calls  Recursions</p>
    <p>FAST '11: Making the Common Case the Only Case with Anticipatory Memory Allocation 3/11/11</p>
    <p>struct dentry *d alloc(..., struct qstr *name) { ... if (namelen &gt; DNAME INLINE LEN-1) { dname = kmalloc(namelen + 1, ); if (!dname) return NULL; ... }}</p>
  </div>
  <div class="page">
    <p>Introduction  Challenges  Anticipatory Memory Allocation (AMA)  Reducing memory overheads  Evaluation  Conclusions</p>
  </div>
  <div class="page">
    <p>Application</p>
    <p>System Call</p>
    <p>File System</p>
    <p>Disk</p>
    <p>K er n el</p>
    <p>VFS</p>
    <p>U se</p>
    <p>r</p>
    <p>Vanilla Kernel</p>
    <p>Mem Mgmt</p>
    <p>Input Arguments FS VFS MM</p>
    <p>Memory Allocation Calls</p>
    <p>Application</p>
    <p>System Call</p>
    <p>Disk</p>
    <p>K er n el</p>
    <p>U se</p>
    <p>r AMA Kernel</p>
    <p>Input Arguments Legend</p>
    <p>Pre-allocate Memory</p>
    <p>How to use the pre-allocated objects?</p>
    <p>Static analysis</p>
    <p>Runtime support</p>
    <p>How much to allocate?</p>
  </div>
  <div class="page">
    <p>FAST '11: Making the Common Case the Only Case with Anticipatory Memory Allocation 3/11/11</p>
    <p>If (c==0) { . print (Driver init); } . .</p>
    <p>Kernel code</p>
    <p>CIL [Necula CC 02]</p>
    <p>Nodes: 2k Edges: 7k LOC: 180k</p>
    <p>Syscall</p>
    <p>Memory allocation functions</p>
    <p>Seen Before? Is KMA?</p>
    <p>Generate Allocation Relevant</p>
    <p>Graph</p>
    <p>Nodes: 400 LOC: 9k</p>
    <p>Loops Recursion</p>
    <p>G</p>
  </div>
  <div class="page">
    <p>Function Statements Dependency</p>
    <p>List</p>
    <p>d_alloc size =</p>
    <p>name-&gt;len+1 arg N: name</p>
    <p>If (name-&gt;len &gt; DNAME_INLINE_LEN-1 )</p>
    <p>struct dentry *d alloc(..., struct qstr *name) {... 100 if (namelen &gt; DNAME INLINE LEN-1) { 101 dname = kmalloc(namelen + 1, ); 102 if (!dname) return NULL; }}</p>
    <p>Output of slicing: Function: d_alloc() dname = kmalloc(name-&gt;len +1 , ); kmalloc size = name-&gt;len+1;</p>
  </div>
  <div class="page">
    <p>G</p>
    <p>cache_alloc(inode_cache)</p>
    <p>Function Allocations Dependency</p>
    <p>A kmalloc(name-&gt;len+1) name</p>
    <p>B kmalloc(name-&gt;len+1) name</p>
    <p>C cache_alloc(Inode_cache)</p>
    <p>F kmalloc() + cache_alloc(inode_cache) name</p>
    <p>G kmalloc()+cache_alloc(inode_cache) name</p>
    <p>kmalloc(name-&gt;len+1)</p>
    <p>A</p>
    <p>B C</p>
    <p>F</p>
    <p>Allocation equation for each system call</p>
  </div>
  <div class="page">
    <p>System state</p>
    <p>Input parameters</p>
    <p>Allocation descriptor</p>
    <p>Pre-allocate objects</p>
    <p>Application</p>
    <p>Syscall</p>
    <p>Function c obj = kmalloc(..)</p>
    <p>Function g pg = alloc_page(..)</p>
    <p>Application</p>
    <p>Syscall</p>
    <p>Pre-allocated Objects</p>
    <p>Phase 1: Pre-allocation Phase 2: Using pre-allocated memory Phase 3: Cleanup</p>
    <p>loff t pos = file pos read(file); err = AMA CHECK AND ALLOCATE(file, AMA SYS READ, pos, count); If (err) return err; ret = vfs read(file, buf, count, &amp;pos); file pos write(file, pos); AMA CLEANUP();</p>
    <p>Attached to the process</p>
    <p>VFS read example 18</p>
  </div>
  <div class="page">
    <p>What if pre-allocation fails?  Shallow recovery: beginning of a system call  No actual work gets done inside the file system  Less than 20 lines of code [~Mantra]</p>
    <p>Flexible recovery policies  Fail-immediate  Retry-forever (w/ and w/o back-off)</p>
    <p>FAST '11: Making the Common Case the Only Case with Anticipatory Memory Allocation 3/11/11 19</p>
  </div>
  <div class="page">
    <p>Introduction  Challenges  Anticipatory Memory Allocation (AMA)  Reducing memory overheads  Evaluation  Conclusions</p>
  </div>
  <div class="page">
    <p>Hard to accurately predict memory requirements  Depends on current fs state (e.g., bitmaps)</p>
    <p>Conservative estimate  Results in over allocation  Infeasible under memory pressure</p>
    <p>Need: ways to transform worst case to near exact</p>
  </div>
  <div class="page">
    <p>Static analysis ignores cached objects</p>
    <p>Read: file 1 pages 1 to 4</p>
    <p>Normal Mode</p>
    <p>Page Cache</p>
    <p>File System</p>
    <p>Application</p>
    <p>AMA</p>
    <p>Read: file1 pages 1 to 4</p>
    <p>Page Cache</p>
    <p>File System</p>
    <p>Application</p>
    <p>AMA</p>
    <p>Cache Peeking Pin</p>
  </div>
  <div class="page">
    <p>Data need not always be cached in memory  Upper bound for searching entries are high</p>
    <p>D ir A</p>
    <p>Entry could be in any of the N pages</p>
    <p>We always need to allocate max. pages</p>
    <p>Allocate a page and recycle it inside loop</p>
    <p>P ag</p>
    <p>e</p>
    <p>R ec</p>
    <p>yc lin</p>
    <p>g</p>
    <p>N o rm</p>
    <p>al</p>
  </div>
  <div class="page">
    <p>Introduction  Challenges  Anticipatory Memory Allocation (AMA)  Reducing memory overheads  Evaluation  Conclusions</p>
  </div>
  <div class="page">
    <p>Case study: ext2  AMA version: ext2-mfr (memory failure robust)</p>
    <p>Questions that we want to answer:  How robust is AMA to memory allocation failures?  Space and performance overheads during user workloads?</p>
    <p>Setup:  2.2 GHz Opteron processor &amp; 2 GB RAM  Linux 2.6.32  Two 80 GB western digital disk</p>
  </div>
  <div class="page">
    <p>FSprobabilty Process State File-system State</p>
    <p>Error Abort Unusable Inconsistent</p>
    <p>ext210 10 5 5 0</p>
    <p>ext250 10 5 5 0</p>
    <p>Ext2-mfr10 0 0 0 0</p>
    <p>Ext2-mfr50 0 0 0 0</p>
    <p>Ext2-mfr99 0 0 0 0</p>
    <p>Ext2-mfr10 15 0 0 0</p>
    <p>Ext2-mfr50 15 0 0 0</p>
    <p>Ext2-mfr99 15 0 0 0</p>
    <p>FAST '11: Making the Common Case the Only Case with Anticipatory Memory Allocation 3/11/11</p>
    <p>R et ry</p>
    <p>E rr o r</p>
  </div>
  <div class="page">
    <p>Seq. Write Seq. Read Rnd. Write Rnd. Read Sort OpenSSH PostMark</p>
    <p>ext2 ext2-mfr</p>
    <p>Less than 7% overhead for all workloads</p>
    <p>E la p se</p>
    <p>d T im</p>
    <p>e (s )</p>
  </div>
  <div class="page">
    <p>Workload ext2 (GB)</p>
    <p>ext2-mfr ext2-mfr + peek</p>
    <p>(GB) Overhead (GB) Overhead</p>
    <p>Sequential Read 1.00 6.98 6.87x 1.00 1.00x</p>
    <p>Sequential Write 1.01 1.01 1.00x 1.01 1.00x</p>
    <p>Random Read 0.26 0.63 2.14x 0.39 1.50x</p>
    <p>Random Write 0.10 0.10 1.05x 0.10 1.00x</p>
    <p>PostMark 3.15 5.88 1.87x 3.28 1.04x</p>
    <p>Sort 0.10 0.10 1.00x 0.10 1.00x</p>
    <p>OpenSSH 0.02 1.56 63.29x 0.07 3.50x</p>
    <p>Less than 4% overhead for most workloads</p>
  </div>
  <div class="page">
    <p>Introduction  Challenges  Anticipatory Memory Allocation (AMA)  Reducing memory overheads  Evaluation  Conclusions</p>
  </div>
  <div class="page">
    <p>AMA: pre-allocation to avoid recovery code  All recovery is done inside a function  Unified and flexible recovery policies  Reduce memory overheads  Cache peeking &amp; page recycling</p>
    <p>Evaluation  Handles all memory allocation failures  &lt; 10% (memory &amp; performance) overheads</p>
  </div>
  <div class="page">
    <p>Act as if it were impossible to fail  Dorothea Brande</p>
    <p>Mantra: Most robust recovery code is</p>
    <p>recovery code that never runs at all</p>
  </div>
  <div class="page">
    <p>Advanced Systems Lab (ADSL) University of Wisconsin-Madison h&lt;p://www.cs.wisc.edu/adsl</p>
    <p>FAST '11: Making the Common Case the Only Case with Anticipatory Memory Allocation 3/11/11 32</p>
  </div>
</Presentation>
