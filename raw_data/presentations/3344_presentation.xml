<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>One Bit Flips, One Cloud Flops: Cross-VM Row Hammer Attacks</p>
    <p>and Privilege Escalation Yuan Xiao, Xiaokuan Zhang, Yinqian Zhang,</p>
    <p>Radu Teodorescu The Ohio State University</p>
    <p>Row Hammer</p>
  </div>
  <div class="page">
    <p>Row Hammer Vulnerabilities and Exploits</p>
    <p>Once thought safe, DDR4 memory shown to be vulnerable to Rowhammer, March 17 2016</p>
    <p>Row Hammer DRAM Bug Now Exploitable via JavaScript, Most DDR3 Memory Chips Vulnerable, July 29 2015</p>
    <p>Flipping DRAM bits maliciously, December 29, 2014</p>
    <p>Row Hammer DRAM Bug Exploited, Unlocks Access to Physical Memory, March 9 2015</p>
  </div>
  <div class="page">
    <p>DRAM Architecture</p>
    <p>Data bus 64-bit</p>
    <p>Channel</p>
    <p>DIMM</p>
    <p>Rank 0 (front) Rank 1 (back)</p>
  </div>
  <div class="page">
    <p>Row Buffer and Row Activation</p>
    <p>Bank</p>
    <p>Columns</p>
    <p>Rows</p>
    <p>Row Buffer</p>
    <p>Activation (Charging)</p>
    <p>I/O Bus Read/Write</p>
    <p>A memory block (one byte)</p>
  </div>
  <div class="page">
    <p>Disturbance Errors (1)</p>
    <p>rapid row activation</p>
    <p>[ISCA14] Kim et al.</p>
    <p>Row Buffer</p>
    <p>one bit, not one byte.</p>
  </div>
  <div class="page">
    <p>Disturbance Errors (2)</p>
    <p>bit flips in neighboring rows</p>
    <p>rapid row activation</p>
    <p>[ISCA14] Kim et al.</p>
    <p>Row Buffer</p>
  </div>
  <div class="page">
    <p>Double-sided Row Hammer Attack</p>
    <p>Hammering Rows</p>
    <p>(Upper) Victim Row</p>
    <p>(Middle) High-risk Victim Row</p>
    <p>(Lower) Victim Row</p>
    <p>Row Buffer</p>
  </div>
  <div class="page">
    <p>Related Work</p>
    <p>v Kim, et al. [ISCA 14] v Seaborn (Google), 2015 v R3dF09 (Tencent), 2015</p>
    <p>v Bosman, et al. [SOSP 16] v Gruss, et al. [DIMVA 16]</p>
    <p>Single-sided vs. double-sided row hammer  Exploitation scenarios</p>
  </div>
  <div class="page">
    <p>How to conduct double-sided row hammer attacks?</p>
    <p>How to exploit row hammer vulnerabilities in cross-VM settings?</p>
  </div>
  <div class="page">
    <p>Outline</p>
  </div>
  <div class="page">
    <p>Difficulties in Double-sided Row Hammer</p>
    <p>Physical Address x2</p>
    <p>Physical Address x1Which bank?</p>
    <p>Which row?</p>
    <p>Which bank? Which row?</p>
  </div>
  <div class="page">
    <p>Row Buffer</p>
    <p>x1</p>
    <p>A Basic Timing Channel Primitive</p>
    <p>Column</p>
    <p>Row</p>
    <p>Row Buffer</p>
    <p>x2</p>
    <p>Column</p>
    <p>Row</p>
    <p>Bank b1 Bank b2</p>
    <p>x1</p>
    <p>x2</p>
    <p>Row BufferRow Buffer read x1 read x2</p>
    <p>T1=2*Tactivate +2*n*TreadTactivate</p>
    <p>Tread</p>
  </div>
  <div class="page">
    <p>x1</p>
    <p>x2</p>
    <p>Row Buffer</p>
    <p>Basic timing channel primitive Column</p>
    <p>Row Bank</p>
    <p>x1</p>
    <p>x2</p>
    <p>Row BufferRow Buffer read x1read x2</p>
    <p>T2=2*n*Tactivate +2*n*Tread</p>
    <p>T1=2*Tactivate +2*n*TreadT2-T1=2*(n-1)*Tactivate</p>
    <p>T2 &gt; T1</p>
  </div>
  <div class="page">
    <p>Basic timing channel primitive</p>
    <p>High latency  same bank  different row</p>
    <p>What if the two physical addresses differ only in specific bit positions?</p>
  </div>
  <div class="page">
    <p>Row Bit Detection</p>
    <p>21 20 19 18 17</p>
    <p>0 0 1 0 0</p>
    <p>0 1 1 0 0</p>
    <p>Physical Address x1</p>
    <p>Bit Index of a Physical Address</p>
    <p>Physical Address x2 High latency?</p>
    <p>Bit 20 decides the row, but not the bank.</p>
    <p>Read</p>
    <p>Read</p>
  </div>
  <div class="page">
    <p>Column Bit Detection</p>
    <p>21 20  4 3</p>
    <p>0 0  0 0</p>
    <p>0 1  1 0</p>
    <p>Physical Address y1</p>
    <p>Bit Index of a Physical Address</p>
    <p>Physical Address y2 High latency?</p>
    <p>Bit 20 decides the row, but not the bank.</p>
    <p>Read</p>
    <p>Read</p>
    <p>Bit 4 does not decide the bank. (but decides column)</p>
  </div>
  <div class="page">
    <p>Row/Column Bit Summary</p>
    <p>Bit Index of a Physical Address</p>
    <p>row bits column bitsother bits</p>
    <p>White bits: always show low latency in previous two kinds of tests.</p>
  </div>
  <div class="page">
    <p>XOR Scheme Detection (1)</p>
    <p>19 18 17 16 15</p>
    <p>Row Bit</p>
    <p>Bank Bit +  0 0 1 0 0</p>
    <p>0 1 1 1 0</p>
    <p>Physical Address z1</p>
    <p>Physical Address z2</p>
  </div>
  <div class="page">
    <p>XOR Scheme Detection (2)</p>
    <p>0 0 1 0 0</p>
    <p>0 1 1 1 0  19 18 17 16 15</p>
    <p>Read</p>
    <p>Read</p>
    <p>High latency?</p>
    <p>Physical Address z1</p>
    <p>Physical Address z2</p>
    <p>different row  same bank</p>
    <p>Either 18 or 16 decides the row</p>
    <p>Bit 18 (higher bit) should be row bit</p>
  </div>
  <div class="page">
    <p>XOR Scheme Detection (3)</p>
    <p>test 18 16 18  16 latency bank row</p>
    <p>low different different</p>
    <p>high same different</p>
    <p>high same different</p>
  </div>
  <div class="page">
    <p>XOR Scheme Detection (4)</p>
    <p>different</p>
    <p>same</p>
    <p>same</p>
    <p>19 18 17 16 15</p>
    <p>Row Bit</p>
    <p>Bank Bit +</p>
  </div>
  <div class="page">
    <p>Graph-based Bit Detection Algorithm</p>
    <p>19 18 17 16 15 14 13</p>
    <p>Row Bit</p>
    <p>Bank Bit +</p>
    <p>+ +</p>
  </div>
  <div class="page">
    <p>Graph-based Bit Detection Algorithm</p>
    <p>21 20 19 18 17 16 15</p>
    <p>Row Bit</p>
    <p>Bank Bit + + +</p>
    <p>Row Bit</p>
  </div>
  <div class="page">
    <p>Graph-based Bit Detection Algorithm</p>
    <p>21 20 19 18 17 16 15</p>
    <p>Row Bit</p>
    <p>Bank Bit +</p>
    <p>+</p>
    <p>+</p>
    <p>Row Bit</p>
    <p>+</p>
  </div>
  <div class="page">
    <p>Outline</p>
  </div>
  <div class="page">
    <p>Virtualization and Cloud Computing</p>
    <p>Hardware</p>
    <p>Hypervisor</p>
    <p>Virtual Machines</p>
  </div>
  <div class="page">
    <p>Xen Para-Virtualized instances in Real-world Public Clouds</p>
  </div>
  <div class="page">
    <p>Xen Para-Virtualized Memory Management</p>
    <p>CR3 Virtual Address (Application)</p>
    <p>Pseudo Physical Address (Kernel)</p>
    <p>Machine Address (Hypervisor)</p>
    <p>PGD PUD</p>
    <p>PMD PT Page</p>
    <p>All the page tables are maintained in the guest kernel</p>
    <p>Pointing to machine addresses</p>
  </div>
  <div class="page">
    <p>Page Table Management</p>
    <p>PGD offset PUD offset PMD offset PTE offset Page offset Virtual address</p>
    <p>PGD</p>
    <p>CR3 pgd_t</p>
    <p>PUD</p>
    <p>pud_t</p>
    <p>PMD</p>
    <p>pmd_t</p>
    <p>PT</p>
    <p>pte_t</p>
    <p>Page All the page tables are read-only to the guest kernel</p>
  </div>
  <div class="page">
    <p>Xen PV memory management</p>
    <p>Hypervisor</p>
    <p>Target physical address belonging to VM 1?</p>
    <p>Guest VM 1</p>
    <p>Guest VM 2</p>
    <p>Hypercall</p>
    <p>No</p>
    <p>Yes</p>
    <p>CR3 PGD</p>
    <p>PUD PMD</p>
    <p>PT Page 1</p>
    <p>Page 2</p>
    <p>Change of entry?</p>
  </div>
  <div class="page">
    <p>Page Table Replacement Attack (1) PGD offset PUD offset PMD offset PTE offset Page offset</p>
    <p>PGD</p>
    <p>CR3 pgd_t</p>
    <p>PUD</p>
    <p>pud_t</p>
    <p>PMD</p>
    <p>pmd_t</p>
    <p>PT</p>
    <p>pte_t</p>
    <p>Original state</p>
    <p>Attackercontrolled Page</p>
  </div>
  <div class="page">
    <p>Page Table Replacement Attack (2) PGD offset PUD offset PMD offset PTE offset Page offset</p>
    <p>PGD</p>
    <p>CR3 pgd_t</p>
    <p>PUD</p>
    <p>pud_t</p>
    <p>PMD</p>
    <p>pmd_t</p>
    <p>PT</p>
    <p>pte_t</p>
    <p>Forged PT</p>
    <p>malicious pte_t</p>
    <p>Malicious PT forged</p>
    <p>Attackercontrolled Page</p>
    <p>Arbitrary Page</p>
  </div>
  <div class="page">
    <p>Page Table Replacement Attack (2)</p>
    <p>Forged PT</p>
    <p>0 0 1 0 0   0 1 1 0 0</p>
    <p>PT</p>
    <p>The addresses of PT and Forged PT only differ in one particular bit.</p>
    <p>Machine address of PT Machine address of Forged PT</p>
  </div>
  <div class="page">
    <p>Page Table Replacement Attack (2) PGD offset PUD offset PMD offset PTE offset Page offset</p>
    <p>PGD</p>
    <p>CR3 pgd_t</p>
    <p>PUD</p>
    <p>pud_t</p>
    <p>PMD</p>
    <p>pmd_t</p>
    <p>PT</p>
    <p>pte_t</p>
    <p>Forged PT</p>
    <p>malicious pte_t</p>
    <p>Malicious PT forged</p>
    <p>Attackercontrolled Page</p>
    <p>Arbitrary Page</p>
  </div>
  <div class="page">
    <p>Page Table Replacement Attack (3) PGD offset PUD offset PMD offset PTE offset Page offset</p>
    <p>PGD</p>
    <p>CR3 pgd_t</p>
    <p>PUD</p>
    <p>pud_t</p>
    <p>Vulnerable Page</p>
    <p>pmd_t PT</p>
    <p>pte_t Attacker</p>
    <p>controlled Page</p>
    <p>Forged PT</p>
    <p>pte_t Arbitrary</p>
    <p>Page</p>
    <p>vulnerable pmd_t</p>
    <p>PMD</p>
    <p>pmd_t</p>
    <p>PMD copied to vulnerable page</p>
  </div>
  <div class="page">
    <p>Page Table Replacement Attack (3)</p>
    <p>0 0 1 0 0</p>
    <p>0 0 1 0 0</p>
    <p>Machine address of PT pmd_t</p>
    <p>(Shadow) PMD</p>
    <p>pmd_t</p>
    <p>vulnerable bit  0 1 1 0 0</p>
    <p>Machine address of Forged PT</p>
  </div>
  <div class="page">
    <p>Page Table Replacement Attack (3) PGD offset PUD offset PMD offset PTE offset Page offset</p>
    <p>PGD</p>
    <p>CR3 pgd_t</p>
    <p>PUD</p>
    <p>pud_t</p>
    <p>Shadow PMD</p>
    <p>pmd_t PT</p>
    <p>pte_t Attacker</p>
    <p>controlled Page</p>
    <p>Forged PT</p>
    <p>pte_t Arbitrary</p>
    <p>Page</p>
    <p>vulnerable pmd_t</p>
    <p>PMD</p>
    <p>pmd_t</p>
    <p>PMD copied to vulnerable page</p>
  </div>
  <div class="page">
    <p>Page Table Replacement Attack (4) PGD offset PUD offset PMD offset PTE offset Page offset</p>
    <p>PGD</p>
    <p>CR3 pgd_t</p>
    <p>PUD</p>
    <p>pud_t</p>
    <p>Shadow PMD</p>
    <p>pmd_t PT</p>
    <p>pte_t</p>
    <p>Forged PT</p>
    <p>pte_t Arbitrary</p>
    <p>Page Shadow PMD enabled via hypercall</p>
    <p>Attackercontrolled Page</p>
    <p>0 0 1 0 0  19 18 17 16 15</p>
  </div>
  <div class="page">
    <p>Page Table Replacement Attack (4) PGD offset PUD offset PMD offset PTE offset Page offset</p>
    <p>PGD</p>
    <p>CR3 pgd_t</p>
    <p>PUD</p>
    <p>pud_t</p>
    <p>Shadow PMD</p>
    <p>pmd_t PT</p>
    <p>pte_t</p>
    <p>Forged PT</p>
    <p>pte_t Arbitrary</p>
    <p>Page</p>
    <p>Attackercontrolled Page</p>
    <p>0 0 1 0 0  19 18 17 16 15</p>
    <p>Shadow PMD enabled via hypercall</p>
  </div>
  <div class="page">
    <p>Page Table Replacement Attack (5) PGD offset PUD offset PMD offset PTE offset Page offset</p>
    <p>PGD</p>
    <p>CR3 pgd_t</p>
    <p>PUD</p>
    <p>pud_t</p>
    <p>Shadow PMD</p>
    <p>pmd_t</p>
    <p>Forged PT</p>
    <p>pte_t</p>
    <p>Bit flipped by row hammer</p>
    <p>Arbitrary Page</p>
    <p>0 1 1 0 0  19 18 17 16 15</p>
    <p>writable</p>
  </div>
  <div class="page">
    <p>Outline</p>
  </div>
  <div class="page">
    <p>OpenSSH Server Authentication Bypass</p>
    <p>Attacker VM OpenSSH Server VM</p>
    <p>Hypervisor</p>
    <p>Physical Machine</p>
  </div>
  <div class="page">
    <p>OpenSSH Server: Attack Target</p>
    <p>callq pam_authenticate test %eax, %eax jne &lt;error handling&gt;</p>
    <p>mov $0, %eax test %eax, %eax jne &lt;error handling&gt;</p>
    <p>Machine code: E8 1B 74 FD FF Machine code: B8 00 00 00 00</p>
    <p>Primary goal: code modification eax equals to 0?</p>
  </div>
  <div class="page">
    <p>OpenSSH Authentication Bypass (2)</p>
    <p>Attacker VM OpenSSH Server VM</p>
    <p>Physical Machine</p>
    <p>page table replacement</p>
    <p>arbitrary memory access</p>
    <p>search for pattern E8 1B 74 FD FF (callq pam_authenticate)</p>
    <p>change into B8 00 00 00 00 (mov $0 %eax)</p>
    <p>In the first page: 0.3 s Per extra page: 58 s</p>
  </div>
  <div class="page">
    <p>OpenSSH Authentication Bypass (3)</p>
  </div>
  <div class="page">
    <p>Existing Countermeasures</p>
    <p>ECC (Error Correcting Code)</p>
    <p>DDR4 (TRR - Target Row Refresh)</p>
    <p>HVM (Hardware-assisted Virtualization)</p>
  </div>
  <div class="page">
    <p>Conclusion  We use timing channel to reverse-engineer the</p>
    <p>physical address mapping to the DRAM.  We conduct efficient double-sided row hammer</p>
    <p>attacks.  Xen PV can be exploited by row</p>
    <p>hammer and allow cross-VM access.</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Row Hammer in Safe Mode</p>
    <p>Hammering Rows</p>
    <p>Bank b</p>
    <p>Bit Flip</p>
    <p>Bit Flip</p>
    <p>Bit Flip</p>
    <p>Row n-2</p>
    <p>Row n-1</p>
    <p>Row n</p>
    <p>Row n+1</p>
    <p>Row n+2</p>
    <p>Safe: Row n-2, n, n+2 are mapped in the memory buffer of program</p>
  </div>
  <div class="page">
    <p>Bit Detection Efficiency</p>
  </div>
  <div class="page">
    <p>Flippable Bit Distribution</p>
  </div>
  <div class="page">
    <p>Effectiveness of Different Row Hammer</p>
  </div>
  <div class="page">
    <p>Vulnerability of Test Machines Machine configuration Execution time (hrs) Vulnerable bits</p>
    <p>(Machine A) Sandy Bridge i3-2120 (4GB) 18.37 63</p>
    <p>(Machine B) Sandy Bridge i3-2120 (4GB) 15.85 91</p>
    <p>(Machine C) Sandy Bridge i5-2500 (4GB) 9.08 5622445</p>
    <p>(Machine D) Broadwell i5-5300U (8GB) 42.88 25</p>
  </div>
  <div class="page">
    <p>Usablility</p>
  </div>
  <div class="page">
    <p>Repeatability</p>
  </div>
  <div class="page">
    <p>Flips within 64-bit Block</p>
  </div>
</Presentation>
