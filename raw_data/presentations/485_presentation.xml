<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Osama Khan and Randal Burns, Johns Hopkins University James Plank, University of Tennessee</p>
    <p>Cheng Huang, Microsoft Research</p>
  </div>
  <div class="page">
    <p>How do we ensure data reliability  Replication (easy but inefficient)  Erasure Coding (complex but efficient)</p>
    <p>Storage space was a relatively expensive resource</p>
    <p>MDS codes used to achieve optimal storage efficiency for a given fault tolerance</p>
  </div>
  <div class="page">
    <p>Emergence of workloads/scenarios where recovery dictates overall I/O performance  System updates  Deep archival stores</p>
    <p>A traditional k-of-n MDS code would require k I/Os to recover from a single failure</p>
    <p>Can we do better than k I/Os?</p>
  </div>
  <div class="page">
    <p>Existing approaches use matrix inversion  Represents one possible solution, not necessarily</p>
    <p>the one with the lowest I/O cost</p>
    <p>We have come up with a new way to recover lost data which minimizes the number of I/Os needed for recovery  Its computationally intensive, though all common</p>
    <p>failure scenarios can be computed apriori  Applicable to any matrix based erasure code</p>
  </div>
  <div class="page">
    <p>Collection of bits in the codeword whose corresponding rows in the Generator matrix sum to zero  We can decode any one bit as long as the</p>
    <p>remaining bits in that equation are not lost</p>
    <p>{D0, D2, C0} is a decoding equation</p>
    <p>+</p>
  </div>
  <div class="page">
    <p>Finds a decoding equation for each failed bit while minimizing the number of total elements accessed</p>
    <p>Enumerate all decoding equations and for each fiF, determine set Ei  F is set of failed bits  Ei is set of decoding equations which include fi</p>
    <p>Goal: Select one equation ei from each Ei such that | ei| is minimized</p>
    <p>i=1</p>
    <p>|F|</p>
  </div>
  <div class="page">
    <p>Finding all such ei is NP-Hard but we can convert equations into a directed weighted graph and find the shortest path  Pruning makes it feasible to solve for practical</p>
    <p>values of |F| and |Ei|</p>
    <p>D0</p>
    <p>C0</p>
    <p>D1 D2 D3</p>
    <p>C1 C2 C3</p>
    <p>Bitstring representation of decoding equation {D0, D2, C0}</p>
    <p>Cumulative record of equations applied so far</p>
    <p>Level i</p>
    <p>An edge for each equation in Ei</p>
  </div>
  <div class="page">
    <p>F = {D0, D1}, so f0 = D0 and f1 = D1</p>
    <p>Recovery op*ons for f0</p>
    <p>Recovery op*ons for f1</p>
  </div>
  <div class="page">
    <p>Equations from E0</p>
    <p>Equations from E1</p>
  </div>
  <div class="page">
    <p>*</p>
    <p>*</p>
    <p>* Results similar to existing work</p>
  </div>
  <div class="page">
    <p>So we have found a way to make recovery I/O of matrix based MDS codes optimal  How about non-MDS codes?</p>
    <p>Can we achieve better recovery I/O performance at the cost of lower storage efficiency?</p>
    <p>Replication and MDS codes seem to be the two extrema in this tradeoff</p>
  </div>
  <div class="page">
    <p>GRID codes allow two (or more) erasure codes to be applied to the same data, each in its own dimension</p>
    <p>To achieve low recovery I/O coupled with high fault tolerance, we use  Weaver codes: recovery I/O independent of stripe</p>
    <p>size  STAR codes: builds up redundancy</p>
    <p>All single failures can be recovered in the Weaver dimension</p>
  </div>
  <div class="page">
    <p>STAR</p>
    <p>W e a v e r</p>
    <p>disk with data and paritydisk with parity</p>
    <p>n v</p>
    <p>n h</p>
  </div>
  <div class="page">
    <p>I/Os for recovery</p>
    <p># disks accessed</p>
    <p>Storage efficiency</p>
    <p>Fault tolerance</p>
    <p>GRID(S,W(2,2)) 4 3 31.25% 11</p>
    <p>GRID(S,W(3,3)) 6 3 31.25% 15</p>
    <p>GRID(S,W(2,4)) 7 4 20.8% 19</p>
    <p>I/Os for recovery</p>
    <p># disks accessed</p>
    <p>Storage efficiency</p>
    <p>Fault tolerance</p>
    <p>RS(20,31) 20 20 60.6% 11</p>
    <p>RS(30,45) 30 30 66.6% 15</p>
    <p>RS(30,49) 30 30 61.2% 19</p>
  </div>
  <div class="page">
    <p>We conjecture that there is a fundamental tradeoff between storage efficiency and recovery I/O  Formal relationship?</p>
    <p>Programmatic search of generator matrices with optimal recovery I/O schedules  Large search space but reasonably sized</p>
    <p>systems (100 disks?) may be a feasible option</p>
  </div>
  <div class="page">
    <p>Thank you!</p>
  </div>
</Presentation>
