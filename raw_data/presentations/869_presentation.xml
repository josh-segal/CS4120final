<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>A. Haeberlen</p>
    <p>Differential Privacy Under Fire</p>
    <p>Andreas Haeberlen Benjamin C. Pierce Arjun Narayan</p>
    <p>University of Pennsylvania</p>
  </div>
  <div class="page">
    <p>A. Haeberlen</p>
    <p>Motivation: Protecting privacy</p>
    <p>Lots of potentially useful data exists  But: Releasing it can violate privacy!</p>
    <p>We can try to anonymize/scrub it   but this can go horribly wrong (see Netflix, AOL,</p>
    <p>) 2</p>
    <p>USENIX Security (August 12, 2011)</p>
    <p>Alice (Star Wars, 5) (Alien, 4) Bob (Godfather, 1) (Porn, 5) Cindy (Die Hard, 4) (Toy Story, 2) Dave (Avatar, 5) (Gandhi, 4) Eva (Amlie, 4) (Rocky, 1) ...</p>
    <p>Better recommendations?</p>
    <p>Does Bob watch porn?</p>
    <p>Data</p>
    <p>#1 #2</p>
    <p>#3</p>
    <p>#4</p>
    <p>#5</p>
    <p>I know Bob hates 'Godfather'</p>
  </div>
  <div class="page">
    <p>A. Haeberlen</p>
    <p>Promising approach: Differential privacy</p>
    <p>Idea: Use differential privacy [Dwork et al.]  Only allow queries  [lots of mathematical details omitted]  Result: Strong, provable privacy guarantees  Implemented, e.g., by PINQ [McSherry] and Airavat [Roy</p>
    <p>et al.] 3 USENIX Security (August 12, 2011)</p>
    <p>Alice (Star Wars, 5) (Alien, 4) Bob (Godfather, 1) (Porn, 5) Cindy (Die Hard, 4) (Toy Story, 2) Dave (Avatar, 5) (Gandhi, 4) Eva (Amlie, 4) (Rocky, 1) ...</p>
    <p>Private data</p>
    <p>N(Star Wars&gt;</p>
    <p>N(&quot;Bob&quot;, Porn&gt;3)? 18 700</p>
    <p>Noise</p>
    <p>; add a certain amount of noise to results</p>
    <p>?! ?</p>
  </div>
  <div class="page">
    <p>A. Haeberlen</p>
    <p>Differential Privacy under Fire</p>
    <p>What if the adversary uses a covert channel?</p>
    <p>Devastating effect on privacy guarantees  Usual defenses are not strong enough (can't leak even</p>
    <p>one bit!)</p>
    <p>We show:  Working attacks  An effective (domain-specific) defense</p>
    <p>Alice (Star Wars, 5) (Alien, 4) Bob (Godfather, 1) (Porn, 5) Cindy (Die Hard, 4) (Toy Story, 2) Dave (Avatar, 5) (Gandhi, 4) Eva (Amlie, 4) (Rocky, 1) ...</p>
    <p>Private data</p>
    <p>(special query)</p>
    <p>(noised response)</p>
    <p>YES</p>
    <p>Does Bob watch porn?</p>
  </div>
  <div class="page">
    <p>A. Haeberlen</p>
    <p>Outline</p>
    <p>Motivation  Differential Privacy primer  Attacks on PINQ and Airavat  Our defense  The Fuzz system  Evaluation</p>
    <p>NEXT</p>
  </div>
  <div class="page">
    <p>A. Haeberlen</p>
    <p>?</p>
    <p>Background: Queries</p>
    <p>Queries are programs  PINQ is based on C#, Airavat on MapReduce</p>
    <p>These programs have a specific structure</p>
    <p>Some overall program logic, e.g., aggregation  Some computation on each database row</p>
    <p>(microquery) 6</p>
    <p>USENIX Security (August 12, 2011)</p>
    <p>noisy sum, foreach r in db, of {</p>
    <p>}</p>
    <p>Data</p>
    <p>if (r.score(&quot;Godfather&quot;)&gt;4) then return 1 else return 0</p>
    <p>Microquery</p>
  </div>
  <div class="page">
    <p>A. Haeberlen</p>
    <p>Background: Sensitivity</p>
    <p>How much noise should we add to results?</p>
    <p>Depends on how much the output can change if we add or remove a single row (the sensitivity of the query)</p>
    <p>noisy sum, r in db, of { if (r.score(&quot;Godfather&quot;)&gt;4) then return 1200 else return 200 }</p>
    <p>noisy sum, r in db, of { if (r.score(&quot;Godfather&quot;)&gt;4) then return 1 else return 0 }</p>
    <p>Sensitivity 1 Sensitivity 1,000</p>
  </div>
  <div class="page">
    <p>A. Haeberlen</p>
    <p>Background: Privacy budget</p>
    <p>How many queries should we answer?  Set up a privacy 'budget' for answering queries  Deduct a 'cost' for each query, depending on 'how</p>
    <p>private' it is 8</p>
    <p>USENIX Security (August 12, 2011)</p>
    <p>Data</p>
    <p>Privacy budget</p>
    <p>noisy sum, r in db, of { if (r.score(&quot;Godfather&quot;)&gt;4) then return 1 else return 0 }</p>
    <p>Query</p>
    <p>Answer</p>
  </div>
  <div class="page">
    <p>A. Haeberlen</p>
    <p>Covert-channel attacks</p>
    <p>The above query...  ... is differentially private (sensitivity zero)  ... takes 1 second longer if the database contains Bob's</p>
    <p>data  Result: Adversary can learn private information with</p>
    <p>certainty!</p>
    <p>Other channels we have exploited:  Privacy budget  Global state</p>
    <p>noisy sum, foreach r in db, of { if (r.name==&quot;Bob&quot; &amp;&amp; r.hasRating(&quot;Porn&quot;)) then { loop(1 second); }; return 0 }</p>
    <p>expensive_subquery();b=1;</p>
    <p>b</p>
  </div>
  <div class="page">
    <p>A. Haeberlen</p>
    <p>Our attacks work in practice</p>
    <p>Both PINQ and Airavat are vulnerable</p>
    <p>What went wrong?  The authors were aware of this attack vector  Both papers discuss some ideas for possible</p>
    <p>defenses  But: Neither system has a defense that is fully</p>
    <p>effective</p>
  </div>
  <div class="page">
    <p>A. Haeberlen</p>
    <p>Threat model</p>
    <p>Too many channels!! Is it hopeless?  Reasonable assumption: Querier is</p>
    <p>remote  This leaves just three channels:</p>
    <p>The actual answer to the query  The time until the answer arrives  The decision whether the remaining budget is</p>
    <p>sufficient 11</p>
    <p>USENIX Security (August 12, 2011)</p>
    <p>Memory consumption</p>
    <p>Electromagnetic radiation</p>
    <p>Power</p>
    <p>Cache usage</p>
    <p>Sound</p>
    <p>Light</p>
    <p>Query completion time</p>
    <p>Privacy budget</p>
    <p>Answer Query</p>
    <p>Short-range channels</p>
  </div>
  <div class="page">
    <p>A. Haeberlen</p>
    <p>Our approach</p>
    <p>We can close the remaining channels completely through a combination of systems and PL techniques</p>
    <p>Language design rules out state attacks etc.  Example: Simply don't allow global variables!</p>
    <p>Program analysis closes the budget channel  Idea: Statically determine the 'cost' of a query before running it  Uses a novel type system [Reed and Pierce]</p>
    <p>Special runtime to close the timing channel</p>
    <p>Details in the paper</p>
    <p>NEXT</p>
  </div>
  <div class="page">
    <p>A. Haeberlen</p>
    <p>Plugging the timing channel</p>
    <p>How to avoid leaking information via query completion time?</p>
    <p>Could treat time as an additional output  But: Unclear how to determine sensitivity</p>
    <p>Our approach: Make timing predictable  If time does not depend on the contents of the</p>
    <p>database, it cannot leak information</p>
  </div>
  <div class="page">
    <p>A. Haeberlen</p>
    <p>Timeouts and default values  Querier specifies for each microquery:</p>
    <p>a timeout T, and  a default value d</p>
    <p>Each time the microquery processes a row:</p>
    <p>If completed in less than T, wait  If not yet complete at T, abort and proceed to next</p>
    <p>row</p>
  </div>
  <div class="page">
    <p>A. Haeberlen</p>
    <p>Example: Timeouts and default values</p>
    <p>noisy sum, rdb, of { if r.name==&quot;Bob&quot; then loop(1 sec); return 0 }</p>
    <p>Alice (Star Wars, 5) (Alien, 4) Bob (Godfather, 1) (Porn, 5) Cindy (Die Hard, 4) (Toy Story, 2) Dave (Avatar, 5) (Gandhi, 4) Eva (Amlie, 4) (Rocky, 1)</p>
    <p>, T=20s, d=1</p>
    <p>Bob not in db:</p>
    <p>Bob in db:</p>
    <p>Rob</p>
    <p>Observable</p>
    <p>Time</p>
    <p>Bob not in db:</p>
    <p>Bob in db: 0 0 0 0</p>
    <p>sum=0</p>
    <p>sum=0</p>
    <p>sum=0</p>
    <p>sum=11</p>
  </div>
  <div class="page">
    <p>A. Haeberlen</p>
    <p>Default values do not violate privacy</p>
    <p>Don't default values change the query's answer?</p>
    <p>Yes, but that's okay:  Remember that the answer is still noised before it is</p>
    <p>returned  Noise depends on the sensitivity, which is now 1  It's just as if we had written &quot;If r.name=='Bob', return 1&quot;</p>
    <p>Impact on non-adversarial queriers?  Default value is never included if timeout is sufficiently</p>
    <p>high</p>
    <p>noisy sum, rdb, of { if r.name==&quot;Bob&quot; then loop(1 sec); return 0 }, T=20s, d=1</p>
    <p>Bob not in db:</p>
    <p>Bob in db: 0 0 0 0</p>
  </div>
  <div class="page">
    <p>A. Haeberlen</p>
    <p>Outline</p>
    <p>Motivation  Differential Privacy primer  Attacks on PINQ and Airavat  Our defense  The Fuzz system  Evaluation</p>
    <p>NEXT</p>
  </div>
  <div class="page">
    <p>A. Haeberlen</p>
    <p>The Fuzz system</p>
    <p>Fuzz: A programming language for writing differentially private queries</p>
    <p>Designed from scratch  Easier to secure  Functionality roughly comparable to PINQ/Airavat  Novel type system for statically checking sensitivity</p>
    <p>Runtime supports timeouts + default values</p>
    <p>Turns out to be highly nontrivial  Problem: How to make a potentially adversarial</p>
    <p>computation take exactly a given amount of time?  Uses a new primitive called predictable transactions</p>
  </div>
  <div class="page">
    <p>A. Haeberlen</p>
    <p>Predictable transactions</p>
    <p>Isolation: Microquery must not interfere with the rest of the computation in any way</p>
    <p>Examples: Trigger garbage collector, change runtime state, ...</p>
    <p>Preemptability: Must be able to abort microqueries at any time</p>
    <p>Even in the middle of memory allocation, ...</p>
    <p>Bounded deallocation: Must be able to free any allocated resources within bounded time</p>
    <p>Example: Microquery allocates lots of memory, acquires locks...</p>
    <p>Details are in the paper</p>
  </div>
  <div class="page">
    <p>A. Haeberlen</p>
    <p>Outline</p>
    <p>Motivation  Differential Privacy primer  Attacks on Differential Privacy  Defenses  The Fuzz system  Evaluation</p>
    <p>Is Fuzz expressive enough to handle realistic queries?</p>
    <p>Is Fuzz fast enough to be practical?  Does Fuzz effectively prevent side-channel attacks?  More experiments are described in the paper</p>
    <p>NEXT</p>
  </div>
  <div class="page">
    <p>A. Haeberlen</p>
    <p>Experimental setup</p>
    <p>Implemented three queries from prior work:</p>
    <p>K-means clustering (inspired by Blum et al., PODS'05)  Census query (inspired by Chawla et al., TCC'05)  Web server log analysis (inspired by Dwork et al.,</p>
    <p>TCC'06)  Fuzz is expressive enough to run all three queries</p>
    <p>Also crafted several adversarial queries  Using different variants of our attacks</p>
    <p>Evaluated on a commodity system  3GHz Core 2 Duo running Linux 2.6.38  Synthetic database with 10,000 rows</p>
  </div>
  <div class="page">
    <p>A. Haeberlen</p>
    <p>Performance: Non-adversarial queries</p>
    <p>Query completion time increased by 2.5x-6.8x</p>
    <p>But: Most expensive query took 'only' 12.7s</p>
    <p>Most of the increase was due to time padding</p>
    <p>Timeouts were set conservatively  More detailed results are in the paper</p>
    <p>Original runtime</p>
    <p>Fuzz (no padding)</p>
    <p>Fuzz</p>
    <p>Q u e ry</p>
    <p>c o m</p>
    <p>p le</p>
    <p>ti o n t</p>
    <p>im e (</p>
    <p>s)</p>
    <p>kmeans census weblog</p>
    <p>Due to padding</p>
  </div>
  <div class="page">
    <p>A. Haeberlen</p>
    <p># Attack type</p>
    <p>Protection disabled Hit Miss</p>
    <p>Protected Hit Miss</p>
    <p>Performance: Adversarial queries</p>
    <p>Evaluated five adversarial queries  Unprotected runtime: Attacks cause large timing</p>
    <p>variation  Protected runtime: Completion times are extremely</p>
    <p>stable</p>
    <p>Timing channel now too narrow to be useful!</p>
    <p>Remember: State and budget channels closed by design</p>
    <p>&lt;1s</p>
    <p>&lt;1s &lt;1s &lt;1s &lt;1s</p>
  </div>
  <div class="page">
    <p>A. Haeberlen</p>
    <p>Summary</p>
    <p>Differentially private query processors must be protected against covertchannel attacks</p>
    <p>Leaking even a single bit can destroy the privacy guarantees</p>
    <p>Vulnerabilities exist in PINQ and Airavat</p>
    <p>Proposed defense: Fuzz  Uses static analysis and predictable transactions  Specific to differential privacy, but very strong:</p>
    <p>Closes all remotely measurable channels completely</p>
    <p>More information at: http://privacy.cis.upenn.edu/</p>
  </div>
</Presentation>
