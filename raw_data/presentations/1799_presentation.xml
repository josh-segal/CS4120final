<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Exploiting Hardware Heterogeneity within the Same Instance Type of Amazon EC2</p>
    <p>Zhonghong Ou, Hao Zhuang, Jukka K. Nurminen, Antti Yl-Jski Aalto University, Finland</p>
    <p>Pan Hui Deutsch Telekom Laboratories, Berlin, Germany</p>
    <p>Aalto University Zhonghong Ou 12/06/2012</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Motivation  Experimental configuration  Experimental results</p>
    <p>Micro-benchmark  Application benchmark</p>
    <p>Cost analysis  Conclusion &amp; future work</p>
    <p>Zhonghong Ou 2</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Cloud computing attracts attention because of  Pay-as-you-go  Theoretically unlimited resource  Reduced Capital Expenditure (CAPEX) and Operating Expense (OPEX)  And more</p>
    <p>Amazon EC2  Introduced in 2006  Provisioning various categories of instances, diversified types of instances</p>
    <p>within the same category  Hardware heterogeneity likely from</p>
    <p>Hardware upgrade and replacement  Research problems</p>
    <p>Homogeneous vs. heterogeneous?  Performance variation?</p>
  </div>
  <div class="page">
    <p>Experimental configurations</p>
    <p>CPUID  Non-trapping instruction</p>
    <p>Confirmed with  cat /proc/cpuinfo</p>
    <p>Collected info from Amazon EC2 for two periods of time  Apr.  Jul. 2011  Jan.  Mar. 2012  200 instances collected for each instance type</p>
    <p>Micro-benchmark  CPU performance: UnixBench  Memory performance: Redis  Disk performance: Dbench</p>
    <p>Application benchmark  Httperf</p>
  </div>
  <div class="page">
    <p>Hardware information</p>
    <p>Released: E5507: Q1'10 E5430: Q4'07 E5645: Q1'10 2218HE:Q306</p>
    <p>Newer processor models replace older ones progressively Hardware info varies significantly among different availability zones</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Motivation  Experimental configuration  Experimental results</p>
    <p>Micro-benchmark  CPU performance: UnixBench  Memory performance: Redis  Disk performance: Dbench</p>
    <p>Application benchmark  Httperf</p>
    <p>Cost analysis  Conclusion &amp; future work</p>
    <p>Zhonghong Ou 6</p>
  </div>
  <div class="page">
    <p>CPU performance: UnixBench</p>
    <p>c o</p>
    <p>re</p>
    <p>Instance</p>
    <p>E5645!2</p>
    <p>E5430!2</p>
    <p>E5507!2</p>
    <p>E5645!1</p>
    <p>E5430!1</p>
    <p>E5507!1</p>
  </div>
  <div class="page">
    <p>Memory performance: Redis</p>
    <p>R e</p>
    <p>q u</p>
    <p>e s ts</p>
    <p>p e</p>
    <p>r s e</p>
    <p>c o</p>
    <p>n d</p>
    <p>Number of clients</p>
    <p>E5645</p>
    <p>E5430</p>
    <p>E5507</p>
  </div>
  <div class="page">
    <p>Disk performance: Dbench</p>
    <p>Shows similar results as UnixBench and Redis</p>
    <p>E5645 is approximately 1.25 times better than E5507</p>
    <p>E5430 is comparable to E5507</p>
  </div>
  <div class="page">
    <p>Application performance: Httperf</p>
    <p>E5645 is 1.6 times as efficient as E5507 E5430 is 1.2 times as E5507</p>
    <p>R e s p o n s e /s</p>
    <p>e c</p>
    <p>Request/sec</p>
    <p>E5645</p>
    <p>E5430</p>
    <p>E5507</p>
  </div>
  <div class="page">
    <p>Cost analysis</p>
    <p>Saving money by seeking for better performing instances, simply using trial-and-failure method  Applying for instances randomly;  Checking if performing well;  If not, drop and apply for new ones.</p>
  </div>
  <div class="page">
    <p>Cost analysis (cont.d)</p>
    <p>C o</p>
    <p>s t</p>
    <p>s a</p>
    <p>v in</p>
    <p>g (%</p>
    <p>)</p>
    <p>Performance variation (times)</p>
    <p>p=0.1</p>
    <p>p=0.5</p>
    <p>p=0.9 P: probability of the betterperforming instance in the overall instances</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Amazon EC2 uses diversified hardware to host the same type of instance.</p>
    <p>The hardware diversity results in performance variation.</p>
    <p>In general, the variation between the fast instances and slow instances can reach 40%. In some applications, the variation can even approach up to 60%.</p>
    <p>By selecting fast instances within the same instance type, Amazon EC2 users can acquire up to 30% of cost saving, if the fast instances have a relatively low probability.</p>
  </div>
  <div class="page">
    <p>Future work</p>
    <p>Investigating the scheduling mechanism and analyze its impact on the performance of Amazon EC2 instances.</p>
    <p>Building homogeneous platform from heterogeneous hardware environment, taking into consideration:  Processor  Memory  Disk  Networking</p>
  </div>
</Presentation>
