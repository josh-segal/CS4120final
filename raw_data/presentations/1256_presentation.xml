<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>FAASM: Lightweight Isolation for Efficient Stateful Serverless Computing</p>
    <p>Simon Shillaker and Peter Pietzuch Large-scale Data and Systems Group, Imperial College London</p>
  </div>
  <div class="page">
    <p>Serverless Big Data Vision</p>
    <p>Cheap, highly scalable big data processing</p>
    <p>+</p>
    <p>Big dataApplication</p>
    <p>Serverless functions</p>
  </div>
  <div class="page">
    <p>Serverless Under the Hood</p>
    <p>Function</p>
    <p>State in external storage</p>
    <p>Container</p>
    <p>Local copy of data</p>
    <p>Host</p>
    <p>Problem 2: Inefficient state sharing</p>
    <p>Problem 1: Isolation overhead</p>
  </div>
  <div class="page">
    <p>Problem 1: Isolation Overhead</p>
    <p>Per tenant isolation, i.e. sharing containers E.g. PyWren, Jonas et al., SoCC 17; Crucial, Barcelona et al., Middleware 19</p>
    <p>Spreads isolation overhead  Loses fine-grained scaling</p>
    <p>Software-based Isolation E.g. Micro services, Boucher et. al, ATC 18; Cloudflare Workers; Fastly Terrarium</p>
    <p>Low overheads  No resource isolation</p>
    <p>Snapshots and restore E.g. SOCK, Oakes et al., ATC 18; SEUSS, Cadden et al., Eurosys 20; Catalyzer, Du et al., ASPLOS 20</p>
    <p>Low initialisation time  Same memory footprint</p>
  </div>
  <div class="page">
    <p>Problem 2: Inefficient State Sharing</p>
    <p>Make external storage faster E.g. Pocket, Klimovic et al., OSDI 18</p>
    <p>Reduces latency  Still not sharing</p>
    <p>Add extra services to containers E.g. Cloudburst, Sreekanti et al., arXiv 20; SAND, Akkus et al., ATC 18</p>
    <p>Reduces network overhead  Still duplicates locally, increases isolation overhead</p>
    <p>Execute functions on external storage E.g. Shredder, Zhang et al., SoCC 19</p>
    <p>Moves code to data  Does not replicate across hosts</p>
  </div>
  <div class="page">
    <p>How Do We Efficiently Share State But Maintain Isolation?</p>
    <p>We need an isolation mechanism that gives us fine-grained control over memory</p>
  </div>
  <div class="page">
    <p>WebAssembly</p>
    <p>- Lightweight memory safety - Used by Fastly, Cloudflare, Krustlet</p>
    <p>Software-Fault Isolation with WebAssembly</p>
    <p>Challenges:</p>
    <p>- Relax isolation to share memory at runtime - Virtualisation between functions and host resources</p>
  </div>
  <div class="page">
    <p>Two-Tier State - Distribution and Locally-Shared State</p>
    <p>Challenges:</p>
    <p>- Hide complexity from the user - Minimise synchronisation - Schedule to optimise co-location</p>
    <p>Global tier Cross-host synchronisation</p>
    <p>Local tier Shared memory</p>
    <p>Two-tier state</p>
  </div>
  <div class="page">
    <p>Faasm: Lightweight Isolation for Efficient Stateful Serverless Computing</p>
    <p>Global synchronisation</p>
    <p>Faaslet isolation</p>
    <p>Shared memory regions</p>
    <p>https://github.com/lsds/Faasm</p>
    <p>Proto-Faaslet snapshots</p>
  </div>
  <div class="page">
    <p>Problem 1: Isolation overheads</p>
    <p>Faaslets - lightweight isolation based on WebAssembly</p>
    <p>Host interface - minimal serverless-specific virtualisation</p>
    <p>Proto-Faaslets - 500s initialisation, 90kB memory</p>
    <p>Problem 2: Inefficient state sharing</p>
    <p>Faaslet shared regions - shared memory without breaking isolation</p>
    <p>Two-tier state - global synchronisation</p>
    <p>Faasm: Lightweight Isolation for Efficient Stateful Serverless Computing</p>
  </div>
  <div class="page">
    <p>Problem 1: Isolation overheads</p>
    <p>Faaslets - lightweight isolation based on WebAssembly</p>
    <p>Host interface - minimal serverless-specific virtualisation</p>
    <p>Proto-Faaslets - 500s initialisation, 90kB memory</p>
    <p>Problem 2: Inefficient state sharing</p>
    <p>Faaslet shared regions - shared memory without breaking isolation</p>
    <p>Two-tier state - global synchronisation</p>
    <p>Faasm: Lightweight Isolation for Efficient Stateful Serverless Computing</p>
  </div>
  <div class="page">
    <p>DataStack Heap</p>
    <p>WebAssembly - memory safety with fine-grained control</p>
    <p>std::vector&lt;uint8_t&gt; wasmMemory;</p>
    <p>Offset: +0 +stack_base +heap_base +heap_top +heap_top</p>
    <p>&lt;=4GB</p>
    <p>WebAssembly memory model</p>
  </div>
  <div class="page">
    <p>Memory safety and resource isolation</p>
    <p>Faaslet</p>
    <p>Virtual net interface</p>
    <p>Network namespaceThread + cgroup</p>
    <p>WASI capabilities</p>
    <p>FilesystemHost interface</p>
    <p>Memory safety (WebAssembly)</p>
    <p>Faaslet multi-tenant isolation</p>
  </div>
  <div class="page">
    <p>Minimal Virtualisation for Serverless and POSIX applications</p>
    <p>Category Sub-category API</p>
    <p>Serverless Chaining chain_call(), await_call(), ...</p>
    <p>State get_state(), set_state(), ...</p>
    <p>POSIX</p>
    <p>Dynamic Linking dlopen(), dlsym(), ...</p>
    <p>Memory mmap(), brk(), ...</p>
    <p>Network socket(), connect(), bind(), ...</p>
    <p>File I/O open(), close(), read(), ...</p>
    <p>The Faaslet Host Interface</p>
  </div>
  <div class="page">
    <p>Faasm host A</p>
    <p>Proto-Faaslet cache (copy-on-write memory)</p>
    <p>Proto-Faaslets - Host-Independence, s Restore, kBs Memory Footprint</p>
    <p>Proto-Faaslet store</p>
    <p>Faasm host B</p>
    <p>Stack Data Heap</p>
    <p>Function table</p>
    <p>.wasm .o</p>
    <p>Proto-Faaslet snapshot and restore</p>
    <p>Capture complete execution state Support arbitrarily initialisation code E.g. pre-initialised language runtime CPython in &lt;1ms</p>
  </div>
  <div class="page">
    <p>Problem 1: Isolation overheads</p>
    <p>Faaslets - lightweight isolation based on WebAssembly</p>
    <p>Host interface - minimal serverless-specific virtualisation</p>
    <p>Proto-Faaslets - 500s initialisation, 90kB memory</p>
    <p>Problem 2: Inefficient state sharing</p>
    <p>Faaslet shared regions - shared memory without breaking isolation</p>
    <p>Two-tier state - global synchronisation</p>
    <p>Faasm: Lightweight Isolation for Efficient Stateful Serverless Computing</p>
  </div>
  <div class="page">
    <p>Two-Tier State Architecture Top-Down View</p>
    <p>Global tier</p>
  </div>
  <div class="page">
    <p>t_a = SparseMatrixReadOnly(&quot;training_a&quot;) t_b = MatrixReadOnly(&quot;training_b&quot;) weights = VectorAsync(&quot;weights&quot;)</p>
    <p>@serverless_func def weight_update(idx_a , idx_b):</p>
    <p>for col_idx , col_a in t_a.columns[idx_a:idx_b]: col_b = t_b.columns[col_idx] adj = calc_adjustment(col_a , col_b)</p>
    <p>for val_idx , val in col_a.non_nulls (): weights[val_idx] += val * adj</p>
    <p>if iter_count % threshold == 0: weights.push()</p>
    <p>@serverless_func def sgd_main(n_workers , n_epochs): for e in n_epochs: args = divide_problem(n_workers) c = chain(weight_update, n_workers, args) await_all(c)</p>
    <p>FAASM Programming Model - Distributed Machine Learning (SGD)</p>
    <p>High-level Object-Oriented abstractions Read-only matrices Asynchronous vector Flexible consistency</p>
    <p>Standard Programming constructs Transparent optimisations Direct access to shared memory</p>
    <p>Intuitive mark-up Function annotation Fork-join parallelism</p>
  </div>
  <div class="page">
    <p>BAProc. memory</p>
    <p>Faaslet A</p>
    <p>Faaslet B</p>
    <p>Offset:</p>
    <p>Shared Memory Without Breaking Safety Guarantees</p>
    <p>+B+S</p>
    <p>+A+S</p>
    <p>S</p>
    <p>Faaslet Shared Memory Regions</p>
  </div>
  <div class="page">
    <p>Push-pull - Global Synchronisation with Variable Consistency</p>
    <p>Host A</p>
    <p>F1: F2:</p>
    <p>Host B</p>
    <p>F3:</p>
    <p>state_x: 011100100Local tier</p>
    <p>state_x: 011100100Global tier</p>
    <p>PUSH(state_x)</p>
    <p>state_x: 011100100</p>
    <p>PULL(state_x)</p>
    <p>Two-Tier Push-Pull</p>
  </div>
  <div class="page">
    <p>Serialisation-Free Transfer of Arbitrarily Complex Data Structures</p>
    <p>AkA: kB: B</p>
    <p>A B</p>
    <p>F1 F2</p>
    <p>Byte arrays</p>
    <p>Host A</p>
    <p>B</p>
    <p>F3 Host B</p>
    <p>Faasms serialisation-free state</p>
    <p>Distributed KVS</p>
    <p>Sub-arrays</p>
    <p>kC: C</p>
    <p>C1 C2</p>
    <p>F4</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Questions:</p>
    <p>Image: Knative</p>
    <p>Comparison:</p>
    <p>- Knative running identical code</p>
    <p>- Code compiled natively for Knative</p>
    <p>- Code compiled to WebAssembly for FAASM 22</p>
  </div>
  <div class="page">
    <p>How do Faaslet Overheads Compare to Containers?</p>
    <p>Docker (alpine) Faaslets Proto-Faaslets vs. Docker</p>
    <p>Initialisation 2.8s 5.2ms 0.5ms 5.6K x</p>
    <p>CPU cycles 251M 1.4K 650 385K x</p>
    <p>Memory Footprint 1.3MB 200KB 90KB 15 x</p>
    <p>Density ~8K ~70K &gt;100K 12 x</p>
    <p>Lower overheads mean lower latency and lower costs</p>
  </div>
  <div class="page">
    <p>How do Faaslets Churn Compared to Containers?</p>
    <p>High Churn</p>
    <p>Higher churn means higher utilisation of shared infrastructure</p>
  </div>
  <div class="page">
    <p>Can Faasm Improve Efficiency and Performance of Parallel ML Training?</p>
    <p>Faster training with increasing parallelism</p>
    <p>Parallel processing on co-located data reduces training time</p>
  </div>
  <div class="page">
    <p>Can Faasm Improve Efficiency and Performance of Parallel ML Training?</p>
    <p>Reduced network transfers</p>
    <p>Reduced data shipping reduces costs</p>
  </div>
  <div class="page">
    <p>Can Faasm Improve Throughput and Reduce Latency Serving ML Inference?</p>
    <p>Increased Throughput</p>
    <p>Negligible cold starts with Proto-Faaslets 120% increase in max throughput with 5% cold starts</p>
    <p>Proto-Faaslets increase max throughput and reduce latency</p>
    <p>Decreased tail latency</p>
  </div>
  <div class="page">
    <p>Does Faaslet Isolation Affect Performance of Dynamic Languages?</p>
    <p>Comparable performance</p>
    <p>Faaslet isolation shows no significant overhead Effect persists with increasing matrix size</p>
    <p>Faaslet isolation has negligible impact on a distributed Python application</p>
  </div>
  <div class="page">
    <p>Does Faaslet Isolation Affect Performance of Dynamic Languages?</p>
    <p>Performance overheads increase as applications become more complex</p>
    <p>Mostly native-like performance in C WebAssembly loses certain loop optimisations.</p>
    <p>More pronounced overhead with Python Especially with big integer arithmetic. More instructions, branches and cache misses compounded (Jangda et.al ATC 19). 29</p>
  </div>
  <div class="page">
    <p>FAASM makes serverless faster and cheaper: - Current systems exhibit isolation overhead and inefficient state sharing</p>
    <p>- FAASM reduces overheads with Faaslets and Proto-Faaslets</p>
    <p>- FAASM supports efficient locally shared and globally synchronised state</p>
    <p>- Future work: serverless HPC, trusted hardware, unikernel-based runtime</p>
    <p>Conclusions</p>
    <p>https://github.com/lsds/Faasm</p>
    <p>Thank you</p>
  </div>
</Presentation>
