<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Provenance in the Wild</p>
    <p>Peter Macko, Margo Seltzer June 14, 2012</p>
  </div>
  <div class="page">
    <p>Whats the Problem?</p>
    <p>What does it mean to collect provenance when you dont control:  The data (types, format, organization, structure)  The operators  The environment in which its processed</p>
    <p>June 2011</p>
    <p>Can you impose/ extract any semantic meaning to provenance when its collected by a herd of cats?</p>
    <p>http://www.newsrealblog.com/wp-content/uploads/2011/04/Herding-Cats.jpg</p>
  </div>
  <div class="page">
    <p>What do the Cats do?</p>
    <p>They use data in arbitrary formats  Flat files  Unstructured, semi-structured, badly-structured  Proprietary formats  The cram twelve different kinds of data into a single container.</p>
    <p>Transformations are arbitrary code  Pick your favorite turing-complete language.  Apply said language to data.  Transformations can depend on the environment.  Repeat</p>
    <p>They move data around  Download objects from the web  Copy, rename objects  Replace objects</p>
    <p>They install new software  New programs  New libraries  New compilers</p>
    <p>June 2011</p>
  </div>
  <div class="page">
    <p>A Proposed Architecture</p>
    <p>June 2011</p>
    <p>Hbase MySQL Riak BDB</p>
    <p>Provenance Library C++</p>
    <p>Python Perl Java R C</p>
    <p>DB adapter DB adapter DB adapter DB adapter</p>
    <p>Applications In multiple languages</p>
    <p>Language adapters</p>
    <p>Database adapters</p>
    <p>Provenance Store With multiple implementations</p>
    <p>ODBC driver</p>
    <p>PostgreSQL SPARQL/RDF</p>
    <p>adapter</p>
    <p>Cmd line</p>
  </div>
  <div class="page">
    <p>Why do we think this is a good idea?</p>
    <p>Heterogeneous environments are the norm.  Provenance must span those environments.  Users and/or applications can:</p>
    <p>create connections that are implicit or unobservable by software systems.</p>
    <p>Integrate both static and dynamic dependencies. Bring provenance to the users rather</p>
    <p>than the users to the provenance.</p>
    <p>June 2012</p>
  </div>
  <div class="page">
    <p>Basic Use Model</p>
    <p>Connect to the library: cpl_attach!  Disclose provenance</p>
    <p>Create/lookup objects: cpl_create_object, cpl_lookup_object!</p>
    <p>Disclose data flow: cpl_data_flow!  Disclose control flow: cpl_control_flow!  Add properties to objects: cpl_add_property!</p>
    <p>Disconnect from the library: cpl_detach!</p>
    <p>June 2012</p>
  </div>
  <div class="page">
    <p>Naming</p>
    <p>Goal is to allow interoperability with minimal coordination.</p>
    <p>Objects are identified by three parameters:  Namespace: the application or system component that</p>
    <p>owns the object. Examples: OS, a specific database, workflow engine or application, or a project.</p>
    <p>Name: local name (unique within a namespace)  Type: file, process, or namespace-specific type  Version: cycle avoidance algorithm create versions</p>
    <p>June 2012</p>
  </div>
  <div class="page">
    <p>Additional Automatic Capture</p>
    <p>Capture object creation MAC address so that we can transmit provenance across a network (and still identify it).</p>
    <p>Capture provenance of provenance  Ties provenance to a specific instance of an</p>
    <p>application (e.g., a process).  Results in capture of command line arguments</p>
    <p>(e.g., size of the Java heap).</p>
    <p>June 2012</p>
  </div>
  <div class="page">
    <p>Use Case: GraphDB Bench</p>
    <p>A benchmark suite (and lots of experiments) to evaluate absolute and relative performance of graph databases.</p>
    <p>Instrument flow from the graph database to the benchmark operators to results.</p>
    <p>Modifications: 270 lines of code (out of 7500 total)  Most is cut and paste</p>
    <p>Result: every csv result file has provenance indicating which operations were run, what the source database was, etc.</p>
    <p>Helped us debug benchmark suite, identify missing benchmark results, etc.</p>
    <p>Integration with scripts led us to develop command-line tool to track directory creation, file copies, etc.</p>
    <p>June 2012</p>
  </div>
  <div class="page">
    <p>Discussion</p>
    <p>Wont this free for all lead to semantically meaningless provenance?  Some provenance is better than no provenance.  Users/application developers who care are likely to provide</p>
    <p>more semantically meaningful provenance than is available by less flexible systems.</p>
    <p>What do you do about missing provenance?  Some provenance is better than no provenance.  Downstream applications can connect upstream to bypass</p>
    <p>provenance oblivious applications.  Bottom line: We make rope  make it possible to</p>
    <p>have provenance without requiring that analysts or programmers use specific languages or tools.</p>
    <p>June 2012</p>
  </div>
</Presentation>
