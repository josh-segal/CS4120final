<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Okeanos: Wasteless Journaling for Fast and Reliable Multistream Storage</p>
    <p>Andromachi Hatzieleftheriou, Stergios V. Anastasiadis</p>
    <p>Department of Computer Science University of Ioannina, Greece</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Motivation</p>
    <p>Design</p>
    <p>Implementation</p>
    <p>Evaluation</p>
    <p>Conclusions</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Synchronous small writes  critical for system and application</p>
    <p>reliability</p>
    <p>Multistream concurrency  effectively random I/O</p>
    <p>In page-sized disk accesses  async writes have good performance due to batching in memory</p>
    <p>sync writes result in wasteful traffic due to excessive full-page I/Os</p>
    <p>l Jo</p>
    <p>u rn</p>
    <p>a l</p>
    <p>V o</p>
    <p>lu m</p>
    <p>e (</p>
    <p>M B</p>
    <p>)</p>
    <p>Request Size (KB)</p>
    <p>Write Traffic (Linux ext3)</p>
    <p>Data Journaling</p>
    <p>Ordered</p>
    <p>Page Size=4KB</p>
    <p>data &amp; metadata</p>
    <p>metadata only</p>
    <p>University of Ioannina</p>
  </div>
  <div class="page">
    <p>Design Goals</p>
    <p>sequential disk throughput</p>
    <p>unnecessary writes of unmodified data</p>
    <p>Proposed approach:  batch random small writes in memory</p>
    <p>journal data updates at subpage granularity</p>
  </div>
  <div class="page">
    <p>DISK Filesystem</p>
    <p>Wasteless Journaling</p>
    <p>Idea: 1. Synchronously transfer data deltas from memory to journal</p>
    <p>Still wasteful!</p>
    <p>large writes  disk traffic duplication</p>
    <p>MEMORY</p>
    <p>Journal</p>
    <p>Pages</p>
    <p>data deltas</p>
  </div>
  <div class="page">
    <p>Selective Journaling</p>
    <p>Definition:  write threshold differentiates requests by size</p>
    <p>Idea: 1. Transfer large requests to final location without journaling of data</p>
    <p>MEMORY</p>
    <p>DISK</p>
    <p>Journal</p>
    <p>data deltas</p>
    <p>Pages</p>
    <p>Filesystem</p>
  </div>
  <div class="page">
    <p>Consistency</p>
    <p>Wasteless Journaling:  atomic updates of both data and metadata</p>
    <p>Selective Journaling:  data updates either journaled or not depending on request size</p>
    <p>consistency at least as strict as default ext3 journaling mode (ordered)</p>
  </div>
  <div class="page">
    <p>Prototype Implementation</p>
    <p>Header Tag Tag</p>
    <p>Tag</p>
    <p>Data Delta</p>
    <p>Data Delta</p>
    <p>Data Delta</p>
    <p>Data Copies</p>
    <p>Block Buffer</p>
    <p>Page Cache</p>
    <p>Journal Descriptor Block</p>
    <p>Multiwrite Journal Block</p>
    <p>Modified Data Original Data</p>
    <p>block num of final location  offset in page  length in bytes</p>
    <p>Multiwrite journal block</p>
    <p>accumulates multiple subpage data updates</p>
    <p>During recovery</p>
    <p>apply data deltas to corresponding final disk blocks</p>
  </div>
  <div class="page">
    <p>Experiments</p>
    <p>Implemented in Linux kernel 2.6.18 ext3</p>
    <p>Experimentation Environment:  x86-based servers</p>
    <p>quad-core 2.66GHz processor</p>
    <p>3GB RAM</p>
    <p>Seagate Cheetah SAS 300GB 15KRPM disks</p>
    <p>Workloads:  Microbenchmarks</p>
    <p>Postmark</p>
    <p>MPIO-IO over PVFS2</p>
  </div>
  <div class="page">
    <p>Latency</p>
    <p>Data &amp; wasteless achieve substantially lower write latency  similar to NILFS (stable Linux port of LFS )</p>
    <p>NILFS read latency significantly higher due to poor storage locality!</p>
    <p>W ri</p>
    <p>te L</p>
    <p>a te</p>
    <p>n cy</p>
    <p>( m</p>
    <p>s)</p>
    <p>Number of Streams</p>
    <p>Selective Ordered Wasteless Data NILFS</p>
    <p>R e</p>
    <p>a d</p>
    <p>L a</p>
    <p>te n</p>
    <p>cy (</p>
    <p>u s)</p>
    <p>Number of Streams</p>
    <p>NILFS Selective Ordered Data Wasteless</p>
  </div>
  <div class="page">
    <p>Disk Traffic</p>
    <p>Data journaling expensive in terms of journal traffic</p>
    <p>Ordered journaling incurs increased filesystem traffic</p>
    <p>Wasteless &amp; selective substantially reduce journal and filesystem traffic</p>
    <p>Jo u</p>
    <p>rn a</p>
    <p>l T</p>
    <p>h ro</p>
    <p>u g</p>
    <p>h p</p>
    <p>u t</p>
    <p>(M B</p>
    <p>/s )</p>
    <p>Number of Streams</p>
    <p>Data</p>
    <p>Wasteless</p>
    <p>Selective</p>
    <p>Ordered</p>
    <p>University of Ioannina 11A. Hatzieleftheriou</p>
    <p>e S</p>
    <p>y st</p>
    <p>e m</p>
    <p>T h</p>
    <p>ro u</p>
    <p>g h</p>
    <p>p u</p>
    <p>t (M</p>
    <p>B /s</p>
    <p>)</p>
    <p>Number of Streams</p>
    <p>Ordered</p>
    <p>Data</p>
    <p>Wasteless</p>
    <p>Selective</p>
    <p>Lower is better!</p>
  </div>
  <div class="page">
    <p>Application-Level Workloads</p>
    <p>Small files workload  wasteless increases transaction throughput</p>
    <p>Parallel I/O workload  13 clients, 1 PVFS2 data server, 1 PVFS2 metadata server (15 machines)</p>
    <p>wasteless doubles the throughput of parallel application checkpointing</p>
    <p>Tr a</p>
    <p>n sa</p>
    <p>ct io</p>
    <p>n s/</p>
    <p>s</p>
    <p>Request Size (KB)</p>
    <p>Postmark</p>
    <p>Wasteless</p>
    <p>Data</p>
    <p>Selective</p>
    <p>Ordered</p>
    <p>T h</p>
    <p>ro u</p>
    <p>g h</p>
    <p>p u</p>
    <p>t M</p>
    <p>B /s</p>
    <p>Threads per Client</p>
    <p>MPI-IO over PVFS2 (Write Size 1KB)</p>
    <p>Wasteless</p>
    <p>Data</p>
    <p>Selective</p>
    <p>Ordered</p>
  </div>
  <div class="page">
    <p>Conclusions &amp; Future Work</p>
    <p>Key concept:  apply subpage journaling of data updates to ensure reliability</p>
    <p>Wasteless Journaling  merges subpage writes into page-sized journal blocks</p>
    <p>Selective Journaling  journals only updates below a write threshold</p>
    <p>Performance benefits demonstrated over ext3:  reduced write latency</p>
    <p>improved transaction throughput</p>
    <p>avoided bandwidth waste</p>
    <p>Future Work  extent for virtualization environments and flash memory systems</p>
  </div>
</Presentation>
