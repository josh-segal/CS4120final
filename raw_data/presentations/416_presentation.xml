<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>2010 VMware Inc. All rights reserved</p>
    <p>Cloud Scale Resource Management: Challenges &amp; Techniques Ajay Gulati, Ganesha Shanmuganathan</p>
    <p>Anne Holler, Irfan Ahmad Distributed Resource Management Team</p>
    <p>VMware, Inc.</p>
  </div>
  <div class="page">
    <p>Existing Solutions</p>
    <p>Elasticity</p>
    <p>E ffi</p>
    <p>ci en</p>
    <p>cy</p>
    <p>Amazon EC2</p>
    <p>Small scale solutions i.e. VMware DRS</p>
    <p>Desired</p>
    <p>Goal: EC2s Elasticity + DRS Resource management</p>
  </div>
  <div class="page">
    <p>DRS Resource Controls</p>
    <p>Resource pools: hierarchical resource allocation  Reservation(R), Limit(L), Shares(S) per VM and RP node  Allows statistical multiplexing, fair over-commitment of resources  Very useful for Cloud, each org can own a resource pool</p>
    <p>Resource pool tree (CPU)</p>
    <p>VMs</p>
    <p>Finance &lt;R=3 GHz, L=150, S=10&gt;</p>
    <p>Engineering &lt;R=7 GHz, L=150, S=20&gt;</p>
    <p>&lt;R,L,S&gt;</p>
    <p>&lt;R,L,S&gt;</p>
    <p>&lt;R=10 GHz, L=200GHz, S=1000&gt;</p>
    <p>R=4 R=2</p>
    <p>R=1 R=1 R=1 R=1 R=1</p>
  </div>
  <div class="page">
    <p>DRS Primer</p>
    <p>Computes VM entitlement based on R,L,S  Maps resource pools to hosts  Initial placement of VMs  Load balancing across hosts  Invoked every 5 mins</p>
    <p>Resource pool tree</p>
    <p>VMs</p>
    <p>&lt;R,L,S&gt; &lt;R,L,S&gt;</p>
    <p>&lt;R,L,S&gt;</p>
    <p>ESX hosts</p>
    <p>R: reservation L: limit S: share</p>
  </div>
  <div class="page">
    <p>How DRS works</p>
    <p>Uses dynamic entitlement as load metric for each resource</p>
    <p>Computes host normalized entitlement  CH is host capacity</p>
    <p>Reduces stddev NH using Greedy-hill climbing  Multi-dimensional balancing problem  Does cost-benefit analysis for each move  Finds incremental improvements, complete re-shuffle is not an</p>
    <p>option</p>
    <p>NH = !EVM CH</p>
    <p>EVM = F(R,L,S,demand) R ! EVM ! L</p>
  </div>
  <div class="page">
    <p>Efficient Cloud Scale Resource Management Challenges</p>
    <p>Heterogeneity of resources  VM/Host compatibility matrix needs to be maintained  Islands formed due to storage and network connectivity  Multiple versions of hardware co-exist</p>
    <p>High frequency of operations  Centralized scheme may have high latency due to lock serialization  Distributed scheme may have stale inventory snapshot  Update host &amp; VM stats/states periodically</p>
    <p>Failure tolerance  Failures are common at cloud scale  Need to handle/retry failed operations</p>
  </div>
  <div class="page">
    <p>Techniques</p>
    <p>Three proposals  Hierarchical Scaling  Flat Scaling  Statistical Scaling</p>
  </div>
  <div class="page">
    <p>Hierarchical Scaling</p>
    <p>Build a load balancer on top of clusters  Cluster level metrics dont aggregate well  Scale of certain operations may be limited to a cluster</p>
    <p>DRS Cluster</p>
    <p>DRS Cluster</p>
    <p>DRS Cluster</p>
    <p>Hierarchical scaling</p>
    <p>VMs VM</p>
  </div>
  <div class="page">
    <p>Flat Scaling</p>
    <p>Build a overlay of virtualized hosts  Do initial placement and load balancing using  Distributed aggregation of stats (SDMIS, Sigcomm04)  Queries on the overlay (SAAR, NSDI07)</p>
    <p>Hard and challenging to build, debug  No consistent views</p>
    <p>VM</p>
    <p>VM</p>
    <p>VM VM</p>
    <p>VM VM</p>
    <p>VM VM VM VM</p>
    <p>VM VM</p>
    <p>Trees for stats aggregation and queries</p>
  </div>
  <div class="page">
    <p>Statistical Scaling</p>
    <p>Create small clusters dynamically  Run DRS on this small cluster  Key idea: Obtain large scale resource management by doing small</p>
    <p>scale optimizations  Well known result: Power-of-two choices</p>
    <p>One large cluster</p>
    <p>Cloud placement VM</p>
    <p>VM VM VM VM VM</p>
    <p>VM</p>
    <p>VM VM</p>
    <p>eCluster</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>A cloud solution needs to provide</p>
    <p>Elasticity + Efficient resource management</p>
    <p>Challenges: scale, heterogeneity, rate of operations and failure handling</p>
    <p>Techniques:  Can we break the problem hierarchically?  Can we use completely decentralized approach?  Can we use local optimizations for global efficiency?</p>
  </div>
</Presentation>
