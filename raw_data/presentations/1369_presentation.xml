<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>TestREx: A Testbed for Repeatable Exploits</p>
    <p>Stanislav Dashevskyi(1,2), Daniel Ricardo Dos Santos(1,2) Fabio Massacci(1), Antonino Sabetta(3)</p>
    <p>(1) University of Trento, (2) Fondazione Bruno Kessler. (3) SAP Labs</p>
    <p>http://securitylab.disi.unitn.it</p>
  </div>
  <div class="page">
    <p>Exploits Collections</p>
    <p>Systematic collection of exploits into a knowledge base  Exploit DB, OVSDB, Webgoat, etc.</p>
    <p>Advantages for developers of exploited software  Provide evidence on actual risks of vulnerabilities  Study explicit/implicit causes of vulnerabilities, their</p>
    <p>connections  Insight for software analysis tools and testing</p>
    <p>approaches</p>
    <p>What about developers using that software? 18/Aug/2014 CSET - Usenix Security 2014 - San Diego (USA) 2</p>
  </div>
  <div class="page">
    <p>The 3 Party Developer Perspective</p>
    <p>Exploits, exploits every where. Nor a single script to run  T.S. Coleridge - The Rime of the Ancyent Marinere  (Free adaptation by Fabio Massacci)</p>
    <p>How to actually repeat the exploit in my operational environment?  Applications use different platforms  SQL injection for</p>
    <p>mySQL may not work in MongoDB  Software changes  different exploits work for different</p>
    <p>versions  Software configuration does matter  exploit only works</p>
    <p>if run in a particular OS  Essentially it is a non-constructive existence proof</p>
  </div>
  <div class="page">
    <p>Getting more value out of the corpus!</p>
    <p>Apart from documenting an exploit, what other information do we want?</p>
    <p>Baseline Information  Exploit X successfully subverts a application A that is running in</p>
    <p>environment E  What 3 party developers really want to know is</p>
    <p>Does X work on same A in updated E'?  Does X work on updated A in same E?  Does X work on updated A', in updated E'?</p>
    <p>Deploying and matching all possible software configurations and application versions  .. as automatically as possible</p>
  </div>
  <div class="page">
    <p>TestRex Baseline</p>
    <p>Focus on Web-facing code (Java/JavaScript)  Building on top of the existing approaches</p>
    <p>BugBox by Nilson et al.  MalwareLab by Allodi et al.</p>
    <p>Objectives  Simple and modular architecture to deploy all kind of</p>
    <p>web-based applications  Actionable information on applications, exploits,</p>
    <p>software and execution environments  Report successful and unsuccessful exploits</p>
  </div>
  <div class="page">
    <p>What is TestREx</p>
    <p>10.000 feets view  Management system for software environments  Provide an isolated playground per every application</p>
    <p>version and its corresponding software environment  Birds eye view  Testbed for performing web</p>
    <p>application vulnerability experimentations  Automatically, via scripted exploits  Manually, by giving testers the access to the requested</p>
    <p>application from within its sandbox  Low-level view  Test suite for managing and</p>
    <p>running scripted exploits against corresponding applications</p>
  </div>
  <div class="page">
    <p>TestREx: typical workflow</p>
  </div>
  <div class="page">
    <p>TestREx: Application Container example</p>
  </div>
  <div class="page">
    <p>TestREx: Software Containers hierarchy</p>
  </div>
  <div class="page">
    <p>TestREx: Exploits</p>
    <p>Exploit  TestREx Definition  sequence of [automated] actions required to subvert a</p>
    <p>vulnerability in an application and verify its success  Low Level Technicality</p>
    <p>Self-contained unit test + description metadata  Python script + Selenium driver (automate browser)  Script passes results of its run to Execution Engine</p>
    <p>Which exploits are present?  Adapted corpus of exploits taken from BugBox  Created own example exploits (17) with WebGoat and</p>
    <p>server-side JavaScript</p>
  </div>
  <div class="page">
    <p>Exploit example</p>
  </div>
  <div class="page">
    <p>Running an Experiment</p>
    <p>Modular way to run exploits and applications  All exploits are independent scripts that can be supplied by</p>
    <p>anyone  An application can be started in either clean or infected</p>
    <p>state  Sample scenarios  regression testing and</p>
    <p>configuration testing  Deploy multiple versions of an application and understand</p>
    <p>what was fixed though the version history  Deploy an application on different platforms and see the</p>
    <p>correlation between third-party software and vulnerabilities  Report generation</p>
    <p>A .csv file with exploit run results and exploit metadata 18/Aug/2014 CSET - Usenix Security 2014 - San Diego (USA) 12</p>
  </div>
  <div class="page">
    <p>TestREx Business Applications</p>
    <p>Executable documentation for software companies  document an exploit = write a TestREx script  Automated security + configuration testing  Automated regression testing suite  Penetration testing support tool</p>
    <p>Aid for security-unaware developers  Part of training toolkit for studying web app security  Benchmark for code analysis tools evaluation</p>
    <p>Patent Pending for SAP Labs</p>
  </div>
  <div class="page">
    <p>Future Work</p>
    <p>Engage UNITN students  Extension of the exploit/vulnerability corpus  Implement a number of attack scenarios and</p>
    <p>countermeasures for JavaScript  Use TestREx as a part of a toolchain for scanning Node.js</p>
    <p>Build a hierarchy of exploits similarly to what we did with containers</p>
    <p>Semi-automatic generation of test cases for security vulnerabilities  Use TestREx for JavaScript static analysis tools evaluation</p>
    <p>(to eliminate false positives)</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>We envision a scripted exploit is an executable documentation that can facilitate testing and bug fixing in software development</p>
    <p>Getting TestREx?  http://securitylab.disi.unitn.it/doku.php?id=software  https://github.com/standash/TestREx  Use for research is free but commercially there is a patent pending for</p>
    <p>SAP Labs  Finally</p>
    <p>Farewell, farewell! but this I tell To thee, thou Usenix-Guest! He codeth well, who exploith well Both app, environment and test</p>
    <p>T.S. Coleridge - The Rime of the Ancyent Marinere (Free adaptation by Fabio Massacci)</p>
  </div>
</Presentation>
