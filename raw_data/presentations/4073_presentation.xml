<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Security Analysis of an In-Vehicle-Infotainment</p>
    <p>and App Platform Sahar Mazloom, Mohammad Rezaeirad, Aaron Hunter</p>
    <p>Security Lab, George Mason University</p>
    <p>and Damon McCoy New York University</p>
  </div>
  <div class="page">
    <p>Modern Cars: PCs on wheels</p>
    <p>Image source: munic.io</p>
    <p>ECU (Electronic Control Unit) - Monitor and Control different subsystems of a car  From Engine Control and Braking System</p>
    <p>to Driver Assistance &amp; Multimedia Systems</p>
    <p>CAN (Controller Area Network) - Handles ECUs communications - Message-based protocol - Broadcast Nature - Previous Attacks against it</p>
    <p>- UCSD &amp; UW - Miller &amp; Valasek</p>
  </div>
  <div class="page">
    <p>Modern Cars: PCs on wheels  ECU (Electronic Control Unit)</p>
    <p>- Monitor and Control different subsystems of a car  From Engine Control and Braking System</p>
    <p>to Driver Assistance &amp; Multimedia Systems</p>
    <p>CAN (Controller Area Network) - Handles ECUs communications - Message-based protocol - Broadcast Nature - Previous Attacks against it</p>
    <p>- UCSD &amp; UW - Miller &amp; Valasek</p>
    <p>Image source: munic.io</p>
  </div>
  <div class="page">
    <p>Head Units</p>
    <p>vs User Demands</p>
  </div>
  <div class="page">
    <p>Connected Cars</p>
    <p>Car Connectivity Consortium LLC, 2011 - 2013</p>
    <p>Landscape and Insights</p>
    <p>There is no doubt that cars are getting connected  To infrastructure, other Cars, Machines, Cloud, eCall</p>
    <p>Consumers want to be connected everywhere, being always on-line  People feel disconnected from friends while driving</p>
    <p>Smartphone connectivity solutions are standardized except in cars</p>
    <p>Mini Connected</p>
    <p>Applink</p>
    <p>BMW Connected Drive 5</p>
  </div>
  <div class="page">
    <p>Governed by Car Connectivity</p>
    <p>Consortium (CCC) 2011</p>
  </div>
  <div class="page">
    <p>Cars Lineup</p>
  </div>
  <div class="page">
    <p>Smartphones Lineup</p>
  </div>
  <div class="page">
    <p>Can someone control your car by infecting your smartphone?</p>
  </div>
  <div class="page">
    <p>MirrorLink was disabled!</p>
    <p>Tuners know how to enable it!!</p>
    <p>Starting Our Security Assessment</p>
  </div>
  <div class="page">
    <p>Enabling MirrorLink on IVI</p>
    <p>Activated!</p>
    <p>Credit goes to Car tuners and garage workers</p>
  </div>
  <div class="page">
    <p>MirrorLink Components</p>
  </div>
  <div class="page">
    <p>RE Procedure: Communication Traffic Analysis</p>
  </div>
  <div class="page">
    <p>Architecture</p>
  </div>
  <div class="page">
    <p>Protocol Stack: VNC protocol</p>
    <p>VNC: Virtual Network Computing 15</p>
  </div>
  <div class="page">
    <p>Protocol Stack: UPnP</p>
    <p>UPnP: Universal Plug and Play 16</p>
  </div>
  <div class="page">
    <p>MirrorLink Configuration Files (XML)</p>
    <p>Figure 4.2.3: GET and POST request messages sent by IVI and replies by the smartphone</p>
    <p>To protect against reverse engineering and modification, DriveLink could use DexGuard, which includes additional layers of protection beyond static code obfuscation. It focuses on code protection with additional features, such asstringandclassencryption,tamperdetection and hiding access to sensitive APIs. It directly targetsDalvikbytecodeandstreamlinestheAndroid build process which makes the application harder to reverse engineer. Compared to ProGuard, this tool provides protection against static and dynamic analysis.</p>
    <p>GET &amp; POST requests sent by IVI and replied by Smartphone 17</p>
  </div>
  <div class="page">
    <p>TmApplicationServer.xml</p>
  </div>
  <div class="page">
    <p>Lab Setup</p>
    <p>Hardware RE</p>
  </div>
  <div class="page">
    <p>Entering Development Mode</p>
  </div>
  <div class="page">
    <p>Static Binary Analysis</p>
    <p>Binary Files responsible for MirrorLink in IVI Firmware  TMSControlPoint.DLL  AppTm.EXE</p>
    <p>Protection Mechanisms  /GS  ASLR  DEP  SafeSEH  Heap Guard</p>
    <p>Figure 5: MirrorLink Protocol Stack.</p>
    <p>figuration to smartphone, (2) IVI retrieves a list of available application(s) (e.g, RTP, Bluetooth A2DP), (3) that enables the IVI to launch these available applications, (4) and to communicate application status with IVI.</p>
    <p>From the capture packet traces we found no indication of key exchange, encryption and authentication for these XMLs. None of these XMLs were signed, therefore if the security model of the MirrorLink protocol which largely relies on the security of the link layer, is invalidated by an attacker who controls a device with access to the local link-layer segment, an attacker can control input to the IVI system. If the IVI system is vulnerable to attack from a malicious mobile device, the IVI might be used as a bridge onto the cars internal CAN network.</p>
    <p>The DAP 6 protocol was not used by the IVI to restrict connections to only a set of trusted smartphone manufacturers. This means that any device or smartphone can connect to the IVI and potentially attempt to attack it.</p>
    <p>After the MirrorLink application is launched, requests can be sent to the smartphone. The IVI acted as a</p>
    <p>VNC view client connecting to the VNC server (smartphone). Both the server and client negotiated and agreed on RFB 3.008 as protocol version. The server sent a list of security types that it could support (Security type values can only be 0 [failed], 1 [none], 2 [VNC Authentication], 16 [Tight Security Type] or 19 [VeNCrypt]). Client selected type 1 [none]. This could enable an attacker to hijack the VNC session if they can gain access to the smartphone. In the captured traffic we have collected, there were no Content Attestation Request or Response messages.</p>
    <p>As we mentioned earlier in this section, we managed to extract data from a USB update image and NOR flash. Here, we describe our security analysis of selected MirrorLink and CAN controller related binaries. To examine the presence of standard security protections (e.g, stack and heap protections), and to find out potential exploitable vulnerabilities, we performed static and dynamic analyses.</p>
    <p>Table 1 outlines the memory protection mechanisms [36, 34] used in compiling selected binaries for MirrorLink, the CAN controller API, which contains subroutines to interact with the Micom CAN controller, or both~.</p>
    <p>Table 1: Memory protection mechanisms used in compiling selected binaries. SafeSEH and DEP are FALSE for all because, the compiler used does not support SafeSEH for the target architecture and the target SoC does not support DEP.</p>
    <p>Binary Name ASLR Stack Cookies AppLink.exe~ TRUE TRUE AppMain.exe TRUE TRUE ML CERTIFICATION.dll TRUE TRUE CmnDll.dll~ TRUE TRUE MgrMcm.exe TRUE TRUE MgrSys.exe TRUE TRUE MgrVid.exe FALSE TRUE AppTM.exe TRUE TRUE TMScontrolPoint.dll FALSE TRUE</p>
    <p>Based on our analysis we have identified functions Send2Micom &lt;redacted&gt;Msg(union &lt;redacted&gt; tx msg data type const *,</p>
    <p>unsigned char, int) and SendMsg(union &lt;redacted&gt; tx msg data type const *,</p>
    <p>unsigned char, int) that can accept the ID and data bytes of a CAN message and send this message on the CAN bus using the Micom CAN controller of the IVI.</p>
  </div>
  <div class="page"/>
  <div class="page"/>
  <div class="page">
    <p>UART Debug Messages</p>
  </div>
  <div class="page">
    <p>Static Analysis</p>
    <p>Unsafe libc functions are found!</p>
  </div>
  <div class="page">
    <p>Dynamic Debugging</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Buffer Overflow</p>
  </div>
  <div class="page">
    <p>From Vulnerability to Exploit</p>
    <p>Goal: Overwriting Function Pointer issue: Taking care of Data Pointers (Overwriting with valid addresses)</p>
  </div>
  <div class="page">
    <p>Overflow Buffer on Heap</p>
    <p>Exploit Chain</p>
    <p>Overwrite Function Pointer</p>
  </div>
  <div class="page">
    <p>Same CAN controller used in Jeep Attack  Miller &amp; Valasek modified list of CAN IDs by</p>
    <p>updating that part of the Micom firmware</p>
    <p>Exploit Chain</p>
  </div>
  <div class="page">
    <p>Responsible Disclosure plan</p>
    <p>Initial private disclosure (more than 11 month ago), delayed publication,</p>
    <p>and left out critical details.</p>
    <p>No name/No shame/No details</p>
    <p>Can affect other manufacturers</p>
    <p>Additional time to patch the vulnerabilities</p>
  </div>
  <div class="page">
    <p>What this ALL mean</p>
    <p>Bring to light the current insecurities of these IVI and app platforms before they become widely deployed</p>
    <p>Design &amp; Implement with security in mind  Before integrating automobiles with 3rd party App ecosystem</p>
  </div>
  <div class="page"/>
</Presentation>
