<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>cTPM: A Cloud TPM for Cross-Device Trusted Applications</p>
    <p>Chen Chen (ETH Zurich), Himanshu Raj, Stefan Saroiu, Alec Wolman</p>
    <p>(Microsoft Research)</p>
  </div>
  <div class="page">
    <p>People are using more than one mobile device</p>
    <p>Mobile devices have started to use trusted hardware</p>
    <p>Motivation</p>
    <p>A few examples:  Pasture, Kotla et al. [OSDI12]  Trusted sensors, Liu et al. [Mobisys12]  TLR, Santos et al. [ASPLOS14]</p>
    <p>Chromebook</p>
    <p>Industry Research Prototypes</p>
  </div>
  <div class="page">
    <p>Cross-device Data Sharing is Easy</p>
  </div>
  <div class="page">
    <p>TPM-protected Data Sharing is Hard</p>
  </div>
  <div class="page">
    <p>Challenge: Sharing Keys across TPMs</p>
    <p>TPM root key never leaves the chip  Key migraQon requires PKI + secure execuQon mode</p>
  </div>
  <div class="page">
    <p>Main Research Question</p>
    <p>What is the minimal change to the TPM design to enable data sharing across TPMs?</p>
  </div>
  <div class="page">
    <p>Our Solution: cTPM</p>
    <p>cTPM = TPM + addiQonal root key pre-shared with cloud</p>
    <p>TPM Emulator</p>
    <p>TPM Emulator</p>
    <p>Secure Chan nel</p>
    <p>Sharing TPM-protected data is easy!</p>
  </div>
  <div class="page">
    <p>cTPM: Two Additional Benefits</p>
  </div>
  <div class="page">
    <p>cTPM: Two Additional Benefits</p>
  </div>
  <div class="page">
    <p>Talk Outline</p>
    <p>MoQvaQon  Background &amp; Design alternaQves  Design &amp; ImplementaQon  EvaluaQon  Conclusion</p>
  </div>
  <div class="page">
    <p>Trusted Plaeorm Module (TPM): secure co-processor  Crypto primiQves: SHA1, RSA,   Code measurement and ajestaQon</p>
    <p>Trust CompuQng Group (TCG) defines TPM specificaQons:  TPM 1.2: widely deployed today  TPM 2.0: emerging new standard to replace TPM 1.2</p>
    <p>TPM Background</p>
    <p>cTPM is based on TPM 2.0</p>
  </div>
  <div class="page">
    <p>Threat Model &amp; Trust Assumptions</p>
    <p>Threat model  In-scope: somware-based ajacks: e.g., malware  Out-of-scope: physical hardware ajacks on TPM</p>
    <p>Dual relaQonship with the cloud:  We trust cloud with cTPM shared root key  We do not trust the cloud with existent TPM root keys</p>
    <p>Future work: securing cloud-side of cTPM 4/23/14 12</p>
    <p>Compromised Compromised</p>
    <p>Safe</p>
  </div>
  <div class="page">
    <p>SEM: TPMs extensibility mechanism</p>
    <p>SEM: Secure ExecuQon Mode (aka. Intel TXT)  Implements a CPU-based reboot  Run trusted code in an isolated environment</p>
    <p>Implement addiQonal TPM funcQonality with SEM:  Step 1: Suspend OS, Enter SEM, Run addiQonal trusted code  Step 2: Cleanup, Exit SEM, Resume OS</p>
    <p>Very challenging to use SEM  Performance overhead, engineering issues  Lack of support on mobile devices  No producQon somware today uses SEM</p>
  </div>
  <div class="page">
    <p>Talk Outline</p>
    <p>MoQvaQon  Background &amp; Design alternaQves  Design &amp; ImplementaQon  EvaluaQon  Conclusion</p>
  </div>
  <div class="page">
    <p>cTPM Design Challenges</p>
    <p>Provisioning pre-shared root keys in cTPM</p>
    <p>Secure key sharing across cTPMs</p>
    <p>Secure communicaQon channel</p>
    <p>Cloud-side NV storage</p>
    <p>Trusted clock 4/23/14 15</p>
  </div>
  <div class="page">
    <p>Provision cTPM Root-of-Trust</p>
    <p>We provision each cTPM with a cloud seed: Unique random value pre-shared with cloud</p>
    <p>iPhones, iPads share their seeds with iCloud  Microsom Surfaces share their seeds with Azure</p>
    <p>On boot-up, cTPM determinisQcally generates two keys:  Cloud Root Key (CRK) protects all cross-device secrets  Cloud CommunicaQon Key (CCK) protects all communicaQon</p>
  </div>
  <div class="page">
    <p>Secure Key Sharing</p>
  </div>
  <div class="page">
    <p>Communication Methodology</p>
    <p>Send/Recv = NV_Write/NV_Read  Device-side cache masks transient connecQvity loss</p>
    <p>Uses secure synchronizaQon protocol</p>
    <p>Cloud-side NVRAM Device-side cache</p>
    <p>Sync. NV_Write</p>
    <p>NV_Read</p>
    <p>NV_Read NV_Write</p>
  </div>
  <div class="page">
    <p>Synchronization Protocol</p>
    <p>Pull</p>
    <p>Push</p>
    <p>Cloud-side NVRAM Device-side Cache</p>
    <p>Device-side Cache Cloud-side NVRAM</p>
  </div>
  <div class="page">
    <p>TPM alone cant establish connecQon with cloud</p>
    <p>TPM Usage Model</p>
    <p>TPM Caller App</p>
    <p>cmd</p>
    <p>results</p>
    <p>Block other commands</p>
  </div>
  <div class="page">
    <p>Design asynchronous commands: bejer availability and responsiveness  Establish secure channel out of untrusted enQQes</p>
    <p>Untrusted</p>
    <p>Secure Asynchronous Communication</p>
    <p>cTPM Caller App cmd blob</p>
    <p>Cloud</p>
    <p>blob results</p>
    <p>blob</p>
    <p>blob Phase 2</p>
    <p>Phase 1</p>
    <p>Phase 3</p>
    <p>Trusted blob = TPM2_Sync_Begin(RD, NV42)</p>
    <p>blob = TPM2_Sync_Proc(blob)</p>
    <p>RET_CODE = TPM2_Sync_End(blob)</p>
  </div>
  <div class="page">
    <p>Cloud-backed NV Storage</p>
    <p>Local cached NV entries have TTLs  Once TTL expires, NV entry in the cache becomes invalid  Apps can re-sync with cloud to refresh TTL</p>
    <p>cTPM Qmeout can abort pending cloud commands  Cloud can adjust this Qmeout, default value is 5 minutes</p>
    <p>Trusted clock: special NV entry updated by cloud  Clock accuracy controlled by separate clock Qmeout  Default Qmeout value is 1 second</p>
  </div>
  <div class="page">
    <p>Implementation Details</p>
    <p>3 new commands (TPM 2.0 has 108 commands)  TPM2_Sync_Begin()  TPM2_Sync_End()  TPM2_Sync_Proc()</p>
    <p>cTPM is based on TPM2.0  1,304 lines of code (TPM 2.0 is 23,163 LoC)</p>
    <p>cTPM versions of:  Pasture, Kotla et al. [OSDI12]  TrInc, Levin et al. [NSDI09]</p>
  </div>
  <div class="page">
    <p>Talk Outline</p>
    <p>MoQvaQon  Background &amp; Design alternaQves  Design &amp; ImplementaQon  EvaluaQon  Conclusion</p>
  </div>
  <div class="page">
    <p>Evalution Setup</p>
    <p>Wide-area Network Emulator (NEWT)</p>
    <p>Used 3G and Wi-Fi typical RTTs (reported by J. Huang et al. [Mobisys12])</p>
    <p>TPM Emulator</p>
  </div>
  <div class="page">
    <p>Evaluation Questions</p>
    <p>Are the cTPM protocols secure?</p>
    <p>What is the performance of crypto operaQons?</p>
  </div>
  <div class="page">
    <p>Protocol Verification</p>
    <p>Verified correctness of sync. protocols with ProVerif</p>
    <p>Ajacker model:  Ajacker has unrestricted access to OS, applicaQons &amp; network</p>
    <p>We did not verify the correctness of implementaQon</p>
  </div>
  <div class="page">
    <p>Latency of RSA-2048 key creation</p>
    <p>CreaQng RSA-2048 key in the cloud is 12X faster than on local device</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>cTPM: Shared cloud seed in TPM 2.0  Small design change to support cross-device scenarios</p>
    <p>AddiQonal cTPM benefits:  High performance NV storage  Trusted clock</p>
    <p>Full implementaQon of cTPM in TPM 2.0  Implemented Pasture and TrInc on top of cTPM</p>
  </div>
  <div class="page">
    <p>Thank you</p>
    <p>Chen Chen (ETH Zurich): chen.chen@inf.ethz.ch</p>
    <p>TPM Emulator</p>
    <p>TPM Emulator</p>
    <p>Secure Chan nel</p>
  </div>
  <div class="page">
    <p>Backup #1: Related Work  [Kotla, 2012] R. Kotla, T. Rodeheffer, I. Roy, P. Stuedi, and B. Wester. Pasture: Secure Offline Data</p>
    <p>Access Using Commodity Trusted Hardware. In Proc. of 10th USENIX Symposium on Opera&lt;ng Systems Design and Implementa&lt;on (OSDI), Hollywoood, CA, 2012.</p>
    <p>[Liu, 2012] H. Liu, S. Saroiu, A. Wolman, and H. Raj. Somware AbstracQons for Trusted Sensors. In</p>
    <p>Proc. of 10th Interna&lt;onal Conference on Mobile Systems, Ap- plica&lt;ons, and Services (MobiSys), Lake District, UK, 2012.</p>
    <p>[Santos, 2014] N. Santos, H. Raj, S. Saroiu, and A. Wolman. Trusted Language RunQme (TLR): Enabling Trusted ApplicaQons on Smartphones. In Proc. of 12th Workshop on Mobile Compu&lt;ng Systems and Applica&lt;ons (HotMobile), Phoenix, AZ, 2011.</p>
    <p>[Huang, 2012] J. Huang, F. Qian, A. Gerber, Z. M. Mao, S. Sen, and O. Spatscheck. A Close ExaminaQon of Performance Power CharacterisQcs of 4G LTE Networks. In Proc. of 10th Interna&lt;onal Conference on Mo- bile Systems, Applica&lt;ons, and Services (MobiSys), Lake District, UK, 2012.</p>
    <p>[Levin, 2009] D. Levin, J. R. Douceur, J. R. Lorch, and T. Mosci- broda. TrInc: Small trusted hardware for large dis- tributed systems. In Proc. of 6th USENIX Sympo- sium on Networked Systems Design and Implemen- ta&lt;on (NSDI), Boston, MA, 2009.</p>
  </div>
  <div class="page">
    <p>Backup #2: cTPM Owner Change</p>
    <p>When the mobile device is stolen  Ask the cloud to stop providing service to the device</p>
    <p>When the mobile device is sold to a new owner  Re-keying:</p>
    <p>Hardware method  The merchant use a special device for re-keying</p>
    <p>Somware method  Implement a re-key protocol in cTPM</p>
  </div>
  <div class="page">
    <p>Backup #3: Why not a design alternative</p>
    <p>A shared key with the cloud in current domains</p>
    <p>Problem: no domain to use  Privacy domain is for endorsement key  Owner domain is cleared when the owner takes ownership  Plaeorm domain is used by the manufacturer for tesQng</p>
  </div>
  <div class="page">
    <p>Backup #4: Cloud in Trust Computing Base</p>
    <p>Dual relaQonship with the cloud</p>
    <p>Securing the cloud is an acQve area of research:  Emerging technology (Intel SGX) can help protect secrets in the cloud</p>
    <p>Compromised Compromised</p>
    <p>Safe</p>
  </div>
  <div class="page">
    <p>Backup #5: Pasture with cTPM</p>
    <p>SemanQcs of Pasture with cTPM are complex</p>
    <p>Unmodified Pasture with mulQple devices:  Hard to keep Pasture protocols in lockstep across mulQple devices</p>
    <p>cTPM Pasture with mulQple devices:  Decisions made on one device are automaQcally synced to all other devices</p>
  </div>
  <div class="page">
    <p>Backup #6: TrInc with cTPM</p>
    <p>TrInc requires a counter in NVRAM to solve equivocaQon problem for distributed system  Each counter in NVRAM only supports ~10k writes</p>
    <p>TrInc with cTPM  Provides high performance counter in remote NVRAM  Offers unlimited number of writes</p>
  </div>
  <div class="page">
    <p>Backup #7: TPM 2.0</p>
    <p>Offer Algorithm Agility  Offer three control domains  TPM 2.0 specificaQon == reference implementaQon</p>
    <p>Crypto PrimiQves: SHA1, SHA256, RSA, ECC, RC4,</p>
    <p>Owner Domain</p>
    <p>Plaeorm Domain</p>
    <p>Privacy Domain</p>
  </div>
  <div class="page">
    <p>Cloud-side NV write is 3.5X faster than local-side</p>
    <p>Latency of cloud-side NVRAM accesses</p>
    <p>TPM 2.0 NVRead</p>
    <p>cTPM NVRead (3G)</p>
    <p>cTPM NVRead (WiFi)</p>
    <p>TPM 2.0 NVWrite</p>
    <p>cTPM NVWrite (3G)</p>
    <p>cTPM NVWrite (WiFi)</p>
    <p>La te nc y (m</p>
    <p>se c)</p>
    <p>TPM_NV Command TPM2_Sync_End Xfer + TPM2_Sync_Proc TPM2_Sync_Begin</p>
  </div>
</Presentation>
