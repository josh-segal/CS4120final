<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>The Design and Implementation of the Warp Transactional Filesystem</p>
    <p>Robert Escriva, Emin Gn Sirer</p>
    <p>Cornell University</p>
    <p>Symposium on Networked Systems Design and Implementation March 18, 2016</p>
    <p>The Design and Implementation of WTF 1 / 28</p>
  </div>
  <div class="page">
    <p>Common Trends in Distributed Filesystems</p>
    <p>Compromises or limitations are often introduced in search of higher performance:</p>
    <p>% Weak guarantees: Eventual consistency Consistent, but undefined</p>
    <p>% Narrow interfaces: Writes must be sequential Concurrent writes prohibited</p>
    <p>% Unscalable design: Full-bisection bandwidth Large master server</p>
    <p>The Design and Implementation of WTF Motivation 2 / 28</p>
  </div>
  <div class="page">
    <p>Warp Transactional Filesystem (WTF)</p>
    <p>WTF represents a new design point in the space of distributed filesystems</p>
    <p>WTF employs the file slicing abstraction to provide applications with strong guarantees and zero-copy filesystem interfaces</p>
    <p>! Strong guarantees: transactionally access and modify the filesystem</p>
    <p>! Expanded interface: traditional POSIX APIs and new zero-copy APIs</p>
    <p>! Scalable Design: avoids centralized master or expensive network bottlenecks</p>
    <p>The Design and Implementation of WTF Design 3 / 28</p>
  </div>
  <div class="page">
    <p>Zero-Copy File Slicing APIs</p>
    <p>Traditional APIs transfer bytes back and forth through the filesystem interface File-slicing APIs deal in references to data already in the filesystem</p>
    <p>yank Obtain references to data in the filesystem Analogous to read</p>
    <p>paste Write referenced data back to the filesystem Analogous to write</p>
    <p>append Append referenced data to the end of a file Optimized for concurrency</p>
    <p>concat Merge one or more files to create a new file Does not read or write data from the input files</p>
    <p>The Design and Implementation of WTF Design 4 / 28</p>
  </div>
  <div class="page">
    <p>The File Slicing Abstraction The central abstraction is a slice: an immutable, byte-addressable, arbitrarily sized sequence of bytes A file is represented by a sequence of slices that, when overlaid, comprise the files contents</p>
    <p>Overlaid Slices</p>
    <p>File Contents</p>
    <p>The Design and Implementation of WTF Design 5 / 28</p>
  </div>
  <div class="page">
    <p>WTF Architecture</p>
    <p>End User Application</p>
    <p>Client Library</p>
    <p>Metadata Storage</p>
    <p>Storage Servers</p>
    <p>The Design and Implementation of WTF Design 6 / 28</p>
  </div>
  <div class="page">
    <p>WTF Architecture</p>
    <p>End User Application</p>
    <p>Client Library</p>
    <p>Metadata Storage</p>
    <p>Storage Servers</p>
    <p>The metadata storage provides transactional operations over the metadata</p>
    <p>The Design and Implementation of WTF Design 6 / 28</p>
  </div>
  <div class="page">
    <p>WTF Architecture</p>
    <p>End User Application</p>
    <p>Client Library</p>
    <p>Metadata Storage</p>
    <p>Storage Servers</p>
    <p>The client library extends these transactional guarantees to the end user</p>
    <p>The Design and Implementation of WTF Design 6 / 28</p>
  </div>
  <div class="page">
    <p>Slices and Slice Pointers</p>
    <p>s0</p>
    <p>s1</p>
    <p>c1</p>
    <p>c2</p>
    <p>c3</p>
    <p>c4</p>
    <p>A B</p>
    <p>Slice Pointer A: server: s0 chunk: c1 start: 1,073,816,936 end: 8,589,788,476</p>
    <p>Slice Pointer B: server: s1 chunk: c4 start: 10,737,389,932 end: 13,958,442,063</p>
    <p>Slices reside on storage servers, while pointers to slices reside in HyperDex The Design and Implementation of WTF Design 7 / 28</p>
  </div>
  <div class="page">
    <p>Slices and Slice Pointers</p>
    <p>s0</p>
    <p>s1</p>
    <p>c1</p>
    <p>c2</p>
    <p>c3</p>
    <p>c4</p>
    <p>A BSlice Pointer A: server: s0 chunk: c1 start: 1,073,816,936 end: 8,589,788,476</p>
    <p>Slice Pointer B: server: s1 chunk: c4 start: 10,737,389,932 end: 13,958,442,063</p>
    <p>Slice pointers directly indicate a slices location in the system The Design and Implementation of WTF Design 7 / 28</p>
  </div>
  <div class="page">
    <p>s0</p>
    <p>A BA BC</p>
    <p>A B CA B</p>
    <p>cursor</p>
    <p>cursor</p>
    <p>cursor</p>
    <p>cursor</p>
    <p>cursor</p>
    <p>A @ 0 MB B @ 2 MB C @ 1 MBD @ 0 MB</p>
    <p>Slice Pointer A: server: s0 chunk: c start: 0MB end: 2MB</p>
    <p>Slice Pointer B: server: s0 chunk: c start: 2MB end: 4MB</p>
    <p>Slice Pointer D: server: s0 chunk: c start: 0MB end: 4MB</p>
    <p>An empty file has no metadata and occupies no space on storage servers</p>
    <p>The Design and Implementation of WTF Design 8 / 28</p>
  </div>
  <div class="page">
    <p>s0</p>
    <p>A</p>
    <p>BA BC</p>
    <p>A</p>
    <p>B CA B</p>
    <p>cursor</p>
    <p>cursor</p>
    <p>cursor</p>
    <p>cursor</p>
    <p>cursor</p>
    <p>A @ 0 MB</p>
    <p>B @ 2 MB C @ 1 MBD @ 0 MB</p>
    <p>Slice Pointer A: server: s0 chunk: c start: 0MB end: 2MB</p>
    <p>Slice Pointer B: server: s0 chunk: c start: 2MB end: 4MB</p>
    <p>Slice Pointer D: server: s0 chunk: c start: 0MB end: 4MB</p>
    <p>A 2 MB write writes to the storage servers and metadata</p>
    <p>The Design and Implementation of WTF Design 8 / 28</p>
  </div>
  <div class="page">
    <p>s0</p>
    <p>A B</p>
    <p>A BC</p>
    <p>A B</p>
    <p>CA B</p>
    <p>cursor</p>
    <p>cursor</p>
    <p>cursor</p>
    <p>cursor</p>
    <p>cursor</p>
    <p>A @ 0 MB B @ 2 MB</p>
    <p>C @ 1 MBD @ 0 MB</p>
    <p>Slice Pointer A: server: s0 chunk: c start: 0MB end: 2MB</p>
    <p>Slice Pointer B: server: s0 chunk: c start: 2MB end: 4MB</p>
    <p>Slice Pointer D: server: s0 chunk: c start: 0MB end: 4MB</p>
    <p>Another 2 MB write</p>
    <p>The Design and Implementation of WTF Design 8 / 28</p>
  </div>
  <div class="page">
    <p>s0</p>
    <p>A B</p>
    <p>A BC</p>
    <p>A B</p>
    <p>CA B</p>
    <p>cursor</p>
    <p>cursor</p>
    <p>cursor</p>
    <p>cursor</p>
    <p>cursor</p>
    <p>A @ 0 MB B @ 2 MB</p>
    <p>C @ 1 MBD @ 0 MB</p>
    <p>Slice Pointer A: server: s0 chunk: c start: 0MB end: 2MB</p>
    <p>Slice Pointer B: server: s0 chunk: c start: 2MB end: 4MB</p>
    <p>Slice Pointer D: server: s0 chunk: c start: 0MB end: 4MB</p>
    <p>WTF supports writes at arbitrary offsets within files</p>
    <p>The Design and Implementation of WTF Design 8 / 28</p>
  </div>
  <div class="page">
    <p>s0</p>
    <p>A B</p>
    <p>A BC</p>
    <p>A B C</p>
    <p>A B</p>
    <p>cursor</p>
    <p>cursor</p>
    <p>cursor</p>
    <p>cursor</p>
    <p>cursor</p>
    <p>A @ 0 MB B @ 2 MB C @ 1 MB</p>
    <p>D @ 0 MB</p>
    <p>Slice Pointer A: server: s0 chunk: c start: 0MB end: 2MB</p>
    <p>Slice Pointer B: server: s0 chunk: c start: 2MB end: 4MB</p>
    <p>Slice Pointer D: server: s0 chunk: c start: 0MB end: 4MB</p>
    <p>A 2 MB write that overwrites part of both prior writes</p>
    <p>The Design and Implementation of WTF Design 8 / 28</p>
  </div>
  <div class="page">
    <p>Metadata Compaction</p>
    <p>Compaction reduces the size of the metadata list by removing references to unused portions of slices Because slice pointers directly reference the location of files, they can be modified in the metadata list using local computation Consequently, compaction occurs entirely at the metadata level</p>
    <p>The Design and Implementation of WTF Design 9 / 28</p>
  </div>
  <div class="page">
    <p>s0</p>
    <p>A B</p>
    <p>A BC</p>
    <p>A B C</p>
    <p>A B</p>
    <p>cursor</p>
    <p>cursor</p>
    <p>cursor</p>
    <p>cursor</p>
    <p>cursor</p>
    <p>A @ 0 MB B @ 2 MB C @ 1 MB</p>
    <p>D @ 0 MB</p>
    <p>Slice Pointer A: server: s0 chunk: c start: 0MB end: 2MB</p>
    <p>Slice Pointer B: server: s0 chunk: c start: 2MB end: 4MB</p>
    <p>Slice Pointer D: server: s0 chunk: c start: 0MB end: 4MB</p>
    <p>The Design and Implementation of WTF Design 10 / 28</p>
  </div>
  <div class="page">
    <p>s0</p>
    <p>A B</p>
    <p>A BC</p>
    <p>A B</p>
    <p>CA B</p>
    <p>cursor</p>
    <p>cursor</p>
    <p>cursor</p>
    <p>cursor</p>
    <p>cursor</p>
    <p>A @ 0 MB B @ 2 MB C @ 1 MB</p>
    <p>D @ 0 MB</p>
    <p>Slice Pointer A: server: s0 chunk: c start: 0MB end: 2MB</p>
    <p>Slice Pointer B: server: s0 chunk: c start: 2MB end: 4MB</p>
    <p>Slice Pointer D: server: s0 chunk: c start: 0MB end: 4MB</p>
    <p>Compaction eliminates references to overwritten or erased data</p>
    <p>The Design and Implementation of WTF Design 10 / 28</p>
  </div>
  <div class="page">
    <p>Garbage Collection</p>
    <p>Garbage collection cleans up the slices no longer referenced by any slice pointer WTF periodically scans the filesystem and collects all slice pointers Storage servers use the scan, along with their local data, to determine which data is garbage</p>
    <p>The Design and Implementation of WTF Design 11 / 28</p>
  </div>
  <div class="page">
    <p>s0</p>
    <p>A B</p>
    <p>A BC</p>
    <p>A B</p>
    <p>CA B</p>
    <p>cursor</p>
    <p>cursor</p>
    <p>cursor</p>
    <p>cursor</p>
    <p>cursor</p>
    <p>A @ 0 MB B @ 2 MB C @ 1 MB</p>
    <p>D @ 0 MB</p>
    <p>Slice Pointer A: server: s0 chunk: c start: 0MB end: 2MB</p>
    <p>Slice Pointer B: server: s0 chunk: c start: 2MB end: 4MB</p>
    <p>Slice Pointer D: server: s0 chunk: c start: 0MB end: 4MB</p>
    <p>The Design and Implementation of WTF Design 12 / 28</p>
  </div>
  <div class="page">
    <p>s0</p>
    <p>A B</p>
    <p>A BC</p>
    <p>A B</p>
    <p>CA B</p>
    <p>cursor</p>
    <p>cursor</p>
    <p>cursor</p>
    <p>cursor</p>
    <p>cursor</p>
    <p>A @ 0 MB B @ 2 MB C @ 1 MB</p>
    <p>D @ 0 MB</p>
    <p>Slice Pointer A: server: s0 chunk: c start: 0MB end: 2MB</p>
    <p>Slice Pointer B: server: s0 chunk: c start: 2MB end: 4MB</p>
    <p>Slice Pointer D: server: s0 chunk: c start: 0MB end: 4MB</p>
    <p>Garbage is freed from the underlying filesystem</p>
    <p>The Design and Implementation of WTF Design 12 / 28</p>
  </div>
  <div class="page">
    <p>Locality-Aware Slice Placement</p>
    <p>Locality-aware slice placement prevents fragmentation when writing sequentially</p>
    <p>Slices placed contiguously on storage servers improve locality when reading files Consistent hashing across storage servers in the system on a per-file basis increases probability that sequentially written slices are adjacent The metadata for adjacent slices may be represented in a more compact form</p>
    <p>The Design and Implementation of WTF Design 13 / 28</p>
  </div>
  <div class="page">
    <p>s0</p>
    <p>A B</p>
    <p>A BC</p>
    <p>A B</p>
    <p>CA B</p>
    <p>cursor</p>
    <p>cursor</p>
    <p>cursor</p>
    <p>cursor</p>
    <p>cursor</p>
    <p>A @ 0 MB B @ 2 MB</p>
    <p>C @ 1 MBD @ 0 MB</p>
    <p>Slice Pointer A: server: s0 chunk: c start: 0MB end: 2MB</p>
    <p>Slice Pointer B: server: s0 chunk: c start: 2MB end: 4MB</p>
    <p>Slice Pointer D: server: s0 chunk: c start: 0MB end: 4MB</p>
    <p>Locality-aware slice placement reduces fragmentation</p>
    <p>The Design and Implementation of WTF Design 14 / 28</p>
  </div>
  <div class="page">
    <p>s0</p>
    <p>A B</p>
    <p>A BC</p>
    <p>A B</p>
    <p>CA B</p>
    <p>cursor</p>
    <p>cursor</p>
    <p>cursor</p>
    <p>cursor</p>
    <p>cursor</p>
    <p>A @ 0 MB B @ 2 MB</p>
    <p>C @ 1 MB</p>
    <p>D @ 0 MB</p>
    <p>Slice Pointer A: server: s0 chunk: c start: 0MB end: 2MB</p>
    <p>Slice Pointer B: server: s0 chunk: c start: 2MB end: 4MB</p>
    <p>Slice Pointer D: server: s0 chunk: c start: 0MB end: 4MB</p>
    <p>Adjacent slices may be represented by a new, merged slice pointer</p>
    <p>The Design and Implementation of WTF Design 14 / 28</p>
  </div>
  <div class="page">
    <p>s0</p>
    <p>A BA BC</p>
    <p>A B CA B</p>
    <p>cursor</p>
    <p>cursor</p>
    <p>cursor</p>
    <p>cursor</p>
    <p>cursor</p>
    <p>A @ 0 MB B @ 2 MB C @ 1 MB</p>
    <p>D @ 0 MB</p>
    <p>Slice Pointer A: server: s0 chunk: c start: 0MB end: 2MB</p>
    <p>Slice Pointer B: server: s0 chunk: c start: 2MB end: 4MB</p>
    <p>Slice Pointer D: server: s0 chunk: c start: 0MB end: 4MB</p>
    <p>The new slice pointer represents the contiguous range on the storage servers</p>
    <p>The Design and Implementation of WTF Design 14 / 28</p>
  </div>
  <div class="page">
    <p>WTF Applications</p>
    <p>MapReduce Sort: concat enables an efficient bucket-based merge sort Work Queue: append units of work are appended to the file; all contention</p>
    <p>happens in the metadata layer Video editor: yank and paste enable the editor to reorder scenes without</p>
    <p>rewriting the movie Fuse Bindings: transactional behavior exposed to the user for easy data</p>
    <p>exploration</p>
    <p>The Design and Implementation of WTF Design 15 / 28</p>
  </div>
  <div class="page">
    <p>Application: MapReduce Sort</p>
    <p>... ...</p>
    <p>... ...</p>
    <p>WTF concat</p>
    <p>Input File Buckets Sorted Buckets Output File</p>
    <p>The Design and Implementation of WTF Design 16 / 28</p>
  </div>
  <div class="page">
    <p>Application: MapReduce Sort</p>
    <p>... ...</p>
    <p>... ...</p>
    <p>WTF concat</p>
    <p>Input File Buckets Sorted Buckets Output File</p>
    <p>The Design and Implementation of WTF Design 16 / 28</p>
  </div>
  <div class="page">
    <p>Application: MapReduce Sort</p>
    <p>HDFS WTF</p>
    <p>E xe</p>
    <p>cu ti</p>
    <p>on T</p>
    <p>im e</p>
    <p>(m in</p>
    <p>ut es</p>
    <p>)</p>
    <p>The Design and Implementation of WTF Design 17 / 28</p>
  </div>
  <div class="page">
    <p>Application: MapReduce Sort</p>
    <p>Bucket Sort Merge</p>
    <p>E xe</p>
    <p>cu ti</p>
    <p>on T</p>
    <p>im e</p>
    <p>(s )</p>
    <p>HDFS WTF</p>
    <p>The Design and Implementation of WTF Design 18 / 28</p>
  </div>
  <div class="page">
    <p>Application: Work Queue</p>
    <p>HDFS WTF</p>
    <p>T hr</p>
    <p>ou gh</p>
    <p>pu t(</p>
    <p>op s/</p>
    <p>s)</p>
    <p>The Design and Implementation of WTF Design 19 / 28</p>
  </div>
  <div class="page">
    <p>Application: Video Editor</p>
    <p>Chronological Order</p>
    <p>Final Cut</p>
    <p>The Design and Implementation of WTF Design 20 / 28</p>
  </div>
  <div class="page">
    <p>Application: Video Editor</p>
    <p>HDFS WTF</p>
    <p>E xe</p>
    <p>cu ti</p>
    <p>on T</p>
    <p>im e</p>
    <p>(s )</p>
    <p>WTF can rewrite 377 GB of raw movie footage in 16 s using file slicingeffectively 23 GB/s, as opposed to rewriting the footage using traditional APIs, which requires approximately three hours</p>
    <p>The Design and Implementation of WTF Design 21 / 28</p>
  </div>
  <div class="page">
    <p>Application: Interactive Transactions</p>
    <p># wtf begin-transaction # ls ./data.0000 ./data.0001 ./data.0002 ./data.0003 .... # rm -rf * # ls # wtf abort-transaction # ls ./data.0000 ./data.0001 ./data.0002 ./data.0003 ....</p>
    <p>The Design and Implementation of WTF Design 22 / 28</p>
  </div>
  <div class="page">
    <p>Microbenchmark: Baseline Performance</p>
    <p>Write Read Seq.Read Rand.</p>
    <p>T hr</p>
    <p>ou gh</p>
    <p>pu t(</p>
    <p>M B</p>
    <p>/s )</p>
    <p>POSIX HDFS WTF</p>
    <p>The Design and Implementation of WTF Design 23 / 28</p>
  </div>
  <div class="page">
    <p>Microbenchmark: Write Sequential</p>
    <p>T hr</p>
    <p>ou gh</p>
    <p>pu t(</p>
    <p>M B</p>
    <p>/s )</p>
    <p>Block Size (bytes)</p>
    <p>HDFS WTF</p>
    <p>The Design and Implementation of WTF Design 24 / 28</p>
  </div>
  <div class="page">
    <p>Microbenchmark: Write Sequential</p>
    <p>T hr</p>
    <p>ou gh</p>
    <p>pu t(</p>
    <p>M B</p>
    <p>/s )</p>
    <p>Block Size (bytes)</p>
    <p>HDFS</p>
    <p>The Design and Implementation of WTF Design 25 / 28</p>
  </div>
  <div class="page">
    <p>Microbenchmark: Write Sequential</p>
    <p>T hr</p>
    <p>ou gh</p>
    <p>pu t(</p>
    <p>M B</p>
    <p>/s )</p>
    <p>Block Size (bytes)</p>
    <p>HDFS 10ms metadata</p>
    <p>The Design and Implementation of WTF Design 25 / 28</p>
  </div>
  <div class="page">
    <p>Microbenchmark: Write Sequential</p>
    <p>T hr</p>
    <p>ou gh</p>
    <p>pu t(</p>
    <p>M B</p>
    <p>/s )</p>
    <p>Block Size (bytes)</p>
    <p>HDFS WTF 10ms metadata</p>
    <p>The Design and Implementation of WTF Design 25 / 28</p>
  </div>
  <div class="page">
    <p>Microbenchmark: Write Sequential</p>
    <p>T hr</p>
    <p>ou gh</p>
    <p>pu t(</p>
    <p>M B</p>
    <p>/s )</p>
    <p>Block Size (bytes)</p>
    <p>HDFS WTF 1ms metadata 10ms metadata</p>
    <p>The Design and Implementation of WTF Design 25 / 28</p>
  </div>
  <div class="page">
    <p>Microbenchmark: Fault Tolerance</p>
    <p>T hr</p>
    <p>ou gh</p>
    <p>pu t(</p>
    <p>M B</p>
    <p>/s )</p>
    <p>Time (s)</p>
    <p>WTF</p>
    <p>The Design and Implementation of WTF Design 26 / 28</p>
  </div>
  <div class="page">
    <p>Related Work</p>
    <p>Distributed Filesystems Farsite, AFS, xFS, Swift, Petal, Frangipani, NASD, Panasas</p>
    <p>Data Center Filesystems CalvinFS, GFS, HDFS, Salus, Flat Datacenter Storage, Blizzard, f4, Pelican</p>
    <p>Transactional Filesystems QuickSilver, Transactional LFS, Valor, PerDis FS, KBDBFS, Inversion, Amino</p>
    <p>The Design and Implementation of WTF Design 27 / 28</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>WTF is a new design point in distributed filesystems that leverages the file slicing abstraction to provide:</p>
    <p>Transactional guarantees Expanded APIs Improved performance</p>
    <p>The Design and Implementation of WTF Conclusion 28 / 28</p>
  </div>
</Presentation>
