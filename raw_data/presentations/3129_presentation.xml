<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Securely Outsourcing Garbled Circuit Evaluation</p>
    <p>USENIX Security Symposium 2013</p>
    <p>Henry Hank Carter Patrick Traynor</p>
    <p>Benjamin Mood Kevin Butler</p>
  </div>
  <div class="page">
    <p>SMC on mobile devices</p>
    <p>Mobile devices loaded with private and context-sensitive information and applications that use this information</p>
    <p>Secure Multiparty Computation (SMC) allows computation over encrypted inputs</p>
    <p>Highly constrained system resources (memory, power, processing, communication)</p>
  </div>
  <div class="page">
    <p>Why dont we have mobile SMC?</p>
    <p>The dominant construction, garbled circuits, require too much memory and processing power</p>
    <p>Special purpose protocols can be optimized, but no efficient general purpose techniques</p>
    <p>Wish: an efficient mobile two-party SMC scheme that generalizes to any function</p>
  </div>
  <div class="page">
    <p>Leveraging the cloud?</p>
    <p>Kreuter et al. provide an efficient way to perform maliciously secure SMC in large servers</p>
    <p>Assuming a device has a connection to a cloud service, can the expensive computation associated with garbled circuits be outsourced?</p>
    <p>We cannot simply trust the cloud.</p>
  </div>
  <div class="page">
    <p>Outsourcing Garbled Circuit Evaluation</p>
    <p>Setting: A limited mobile device (Alice) communicating with a web server (Bob). Alice also has access to a cloud service (Cloud).</p>
    <p>Goal: Alice and Bob securely compute a two-party function using garbled circuits. We consider the case where Bob generates the circuit and Alice evaluates.</p>
    <p>Security:  Preserve input and output privacy from both the other party</p>
    <p>and the cloud</p>
    <p>Security in the malicious setting.</p>
  </div>
  <div class="page">
    <p>Our construction</p>
    <p>Begin with malicious secure technique developed by Kreuter et al.</p>
    <p>Adapt consistency checks such that Alice and Bob are assured that all parties are behaving</p>
    <p>Add Outsourced Oblivious Transfer construction to preserve mobile bandwidth</p>
  </div>
  <div class="page">
    <p>The Protocol</p>
    <p>5 stages:  Circuit construction and validity check</p>
    <p>OOT</p>
    <p>Generator input consistency check</p>
    <p>Circuit evaluation in the cloud</p>
    <p>Output check and delivery</p>
  </div>
  <div class="page">
    <p>The Protocol</p>
    <p>cloud (outsourcing agent)</p>
    <p>Alice (evaluator)</p>
    <p>Bob (generator)</p>
  </div>
  <div class="page">
    <p>The Protocol</p>
    <p>cloud (outsourcing agent)</p>
    <p>Alice (evaluator)</p>
    <p>Bob (generator)</p>
  </div>
  <div class="page">
    <p>The Protocol</p>
    <p>cloud (outsourcing agent)</p>
    <p>Alice (evaluator)</p>
    <p>Bob (generator)</p>
  </div>
  <div class="page">
    <p>The Protocol</p>
    <p>cloud (outsourcing agent)</p>
    <p>Alice (evaluator)</p>
    <p>Bob (generator)</p>
  </div>
  <div class="page">
    <p>The Protocol</p>
    <p>cloud (outsourcing agent)</p>
    <p>Alice (evaluator)</p>
    <p>Bob (generator)</p>
  </div>
  <div class="page">
    <p>Security</p>
    <p>We retain all the security checks from Kreuter et al. to preserve security in:</p>
    <p>Garbled circuits  Input consistency between evaluation circuits  Output integrity and majority check  OOT</p>
    <p>Formal proofs of malicious security in our tech report</p>
    <p>Definition 1 A protocol securely computes a function f if there exists a set</p>
    <p>of probabilistic polynomial-time (PPT) simulators {Simi}i2[3] such that for all PPT adversaries (A1, ..., A3), x, z, and for all i 2 [3]:</p>
    <p>{REAL(i)(k, x; r)}k2N c  {IDEAL(i)(k, x; r)}k2N</p>
    <p>Where S = (S1, ..., S3), Si = Simi(Ai), and r is random and uniform.</p>
  </div>
  <div class="page">
    <p>Side note: collusion</p>
    <p>We prohibit collusion between the cloud and either party  Our OT construction breaks if Alice + cloud collude</p>
    <p>The garbled circuit security breaks if Bob + cloud collude</p>
    <p>Kamara et al. notes that an outsourcing scheme with collusion implies an SFE scheme where one party performs sub-linear work w.r.t. circuit size.</p>
    <p>Realistic scenario: cloud service must preserve security and business reputation</p>
  </div>
  <div class="page">
    <p>Implementation</p>
    <p>Testbed  Dell R610 servers, dual 6-core Intel Xeon, 32 GB RAM</p>
    <p>Galaxy Nexus, dual core 1.2 GHz, 1 GB RAM</p>
    <p>802.11n (54 Mbps), Internal VLAN (1 Gbps)</p>
    <p>Test apps  Millionaires Problem</p>
    <p>Edit Distance</p>
    <p>Set Intersection</p>
    <p>AES-128</p>
  </div>
  <div class="page">
    <p>Results: Edit Distance Execution Time</p>
    <p>ED2 ED4 ED8 ED16 ED32 ED64 ED128</p>
    <p>Ti m</p>
    <p>e (m</p>
    <p>s)</p>
    <p>Program Size</p>
    <p>Outsourced Non-Outsourced</p>
    <p>Evaluation</p>
    <p>OUT OUT OUT OUT</p>
    <p>OUT</p>
    <p>OUT</p>
    <p>OUT</p>
    <p>NON</p>
    <p>NON</p>
    <p>NON</p>
    <p>NON</p>
    <p>NON</p>
    <p>NON</p>
    <p>NON</p>
    <p>Checks</p>
    <p>ED2 ED4 ED8 ED16 ED32 ED64 ED128 Ti</p>
    <p>m e</p>
    <p>(m s)</p>
    <p>Progam</p>
    <p>OT</p>
    <p>Total runtime Phase runtimes</p>
  </div>
  <div class="page">
    <p>ED2 ED4 ED8 ED16 ED32 ED64 ED128</p>
    <p>B an</p>
    <p>dw id</p>
    <p>th (b</p>
    <p>yt es</p>
    <p>)</p>
    <p>Program Size</p>
    <p>Outsourced Non-Outsourced</p>
    <p>Results: Edit Distance Bandwidth</p>
    <p>Total bandwidth</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>OUT OUT OUT</p>
    <p>OUT</p>
    <p>OUT</p>
    <p>OUT</p>
    <p>OUT</p>
    <p>OUT</p>
    <p>NON</p>
    <p>NON</p>
    <p>NON</p>
    <p>NON</p>
    <p>NON</p>
    <p>NON Checks</p>
    <p>Ti m</p>
    <p>e (m</p>
    <p>s)</p>
    <p>Circuits Evaluated</p>
    <p>OT</p>
    <p>Results: Edit Distance Over Multiple Circuits</p>
    <p>Phase runtimes</p>
  </div>
  <div class="page">
    <p>Case study: large circuits</p>
    <p>Examined RSA-128 circuit used by Kreuter et al.  Developed privacy-preserving navigation application  Alice inputs a start and end point, Bob inputs outages in a</p>
    <p>road system. The area map is publicly available</p>
    <p>The circuit performs Dijkstras shortest path algorithm to determine the shortest path from start to finish avoiding outages</p>
    <p>The circuit returns the route to Alice.</p>
    <p>Considered graphs of 20, 50, 100 nodes</p>
    <p>Testbed: 64 cores, 1 TB memory 19</p>
  </div>
  <div class="page">
    <p>Privacy-Preserving Navigation</p>
    <p>START POINT</p>
    <p>END POINT</p>
    <p>Optimal Route</p>
    <p>Modified Route</p>
  </div>
  <div class="page">
    <p>Case study: results</p>
    <p>Run some of the largest circuits ever publicly evaluated from a mobile device</p>
    <p>Dijkstras over 100 nodes &gt; 2 billion gates un-optimized  Evaluation times (128 circuits):  100 nodes ~ 42 minutes</p>
    <p>20 nodes ~ 100 seconds</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Costly SMC operations can be outsourced to the cloud securely</p>
    <p>We develop a new OOT protocol to allow outsourced garbled circuit evaluation</p>
    <p>Experimental results show significant performance gains over evaluating directly from the device</p>
  </div>
</Presentation>
