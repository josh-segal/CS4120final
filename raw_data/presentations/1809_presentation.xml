<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Plugging Side-Channel Leaks with Timing Information Flow Control</p>
    <p>Bryan Ford Yale University</p>
    <p>http://dedis.cs.yale.edu/</p>
    <p>USENIX HotCloud, June 13, 2012</p>
  </div>
  <div class="page">
    <p>The Long History of Timing Attacks</p>
    <p>Cooperative attacks  apply to:  Mandatory Access Control (MAC) systems</p>
    <p>[Kemmerer 83, Wray 91]</p>
    <p>Decentralized Information Flow Control (DIFC) [Efstathopoulos 05, Zeldovich 06]</p>
    <p>Non-cooperative attacks  apply to:  Processes/VMs sharing a CPU core</p>
    <p>[Percival 05, Wang 06, Acimez 07, ]  Including VM configurations typical of clouds</p>
    <p>[Ristenpart 09]</p>
  </div>
  <div class="page">
    <p>Cooperative Attacks: Example</p>
    <p>Trojan leaks secret information by modulating a timing channel observable by unclassified app</p>
    <p>Secret Level Trojan App</p>
    <p>MAC/DIFC Protection Boundary</p>
    <p>Unclassified Level Conspiring App</p>
    <p>use a lot, use a little</p>
    <p>how fast am I running?</p>
    <p>Timeshared Host</p>
  </div>
  <div class="page">
    <p>Non-Cooperative Attacks: Example</p>
    <p>Apps unintentionally modulate shared resources to reveal secrets when running standard code</p>
    <p>Acme Data, Inc. Crypto (AES, RSA, ...)</p>
    <p>Discretionary Protection Boundary</p>
    <p>Eviltron Passive Attacker</p>
    <p>key-dependent usage patterns</p>
    <p>watch memory access timing</p>
    <p>Cloud Host</p>
  </div>
  <div class="page">
    <p>Timing Attacks in the Cloud</p>
    <p>The cloud exacerbates timing channel risks:</p>
    <p>Determinating Timing Channels in Compute Clouds [CCSW '10]</p>
  </div>
  <div class="page">
    <p>Leak-Plugging Approaches</p>
    <p>Two broad classes of existing solutions:  Tweak specific algorithms, implementations</p>
    <p>Equalize AES path lengths, cache footprint,</p>
    <p>Demand-insensitive resource partitioning  Requires new or modified hardware in general</p>
    <p>Partition CPU cores, cache, interconnect,</p>
    <p>Can't oversubscribe, stat-mux resources  Not economically feasible in an elastic cloud!</p>
  </div>
  <div class="page">
    <p>Information Flow Control</p>
    <p>Explicitly label information, constrain propagation  Old idea, recently (re-)popularized</p>
    <p>DIFC, Asbestos/HiStar/Flume</p>
    <p>Label variables, processes, messages, etc.</p>
    <p>So far, IFC avoids the timing channel issue  How would one label time?</p>
    <p>What would we do with timing labels?  Hard to prevent programs from taking time!</p>
    <p>But could IFC apply to timing channels too?</p>
  </div>
  <div class="page">
    <p>Adapting IFC to Timing Analysis</p>
    <p>Key idea: we need two kinds of labels  State labels attached to explicit program state</p>
    <p>Represent ownership of information in the bits of a variable, message, process, etc.</p>
    <p>Time Labels attached to event channels  Represent ownership of information affecting</p>
    <p>time or rate events occur in a program</p>
    <p>TIFC  Timing Information Flow Control</p>
    <p>Analyze, constrain both state &amp; timing leaks</p>
  </div>
  <div class="page">
    <p>A Timing-Hardened Cloud</p>
    <p>Internet: Public</p>
    <p>Timing Domain</p>
    <p>Customer A's Private Timing Domain</p>
    <p>Trusted, Shared Timing Domain</p>
    <p>Customer A's Job</p>
    <p>Timing Firewall</p>
    <p>Remote Customer's Job</p>
    <p>Timing Firewall</p>
    <p>Public Infrastructure Cloud Provider's Computing/Network Infrastructure</p>
    <p>unrestricted interaction Physically isolated</p>
    <p>timing domains</p>
  </div>
  <div class="page">
    <p>Flume IFC Model</p>
    <p>Flume IFC model summary:  Tags represent ownership/taint: Alice, Bob  Labels are sets of tags:</p>
    <p>{Alice,Bob}  contains Alice's &amp; Bob's data  Capabilities enable adding/removing tags</p>
    <p>e.g., If process P holds capability {Alice-}, P can declassify (remove) the Alice tag</p>
    <p>P can send data to Q iff (LP \ LQ)  (C-P  C+Q)</p>
  </div>
  <div class="page">
    <p>Adding Timings Labels to IFC</p>
    <p>Timing Tag is a tag with a frequency</p>
    <p>Tag Af indicates a timing channel might leak A's information at up to f bits per second</p>
    <p>Tag A indicates a timing channel might leak A's information at arbitrarily high rate</p>
    <p>Labels can contain both state and timing tags</p>
    <p>Message channel labeled {A/Bf} indicates:</p>
    <p>Message bits tained with A's info  Message arrival events in channel</p>
    <p>tainted by B's info at up to rate f</p>
  </div>
  <div class="page">
    <p>Example 1: Dedicated Resources</p>
    <p>Alice's Gateway {A+,A-}</p>
    <p>Bob's Gateway {B+,B-}</p>
    <p>Alice Bob</p>
    <p>Cloud Provider's Infrastructure</p>
    <p>Job {A/A}</p>
    <p>Result {A/A}</p>
    <p>Alice's Compute</p>
    <p>Server</p>
    <p>Bob's Compute</p>
    <p>Server</p>
    <p>Job {B/B}</p>
    <p>Result {B/B}</p>
    <p>Trivial case: physical partitioning of resources</p>
  </div>
  <div class="page">
    <p>Informal Schedule Analysis</p>
    <p>Bob's (Short) Job</p>
    <p>Time unused capacity</p>
    <p>Alice Submits {A/A}</p>
    <p>C o</p>
    <p>m p</p>
    <p>u te</p>
    <p>C o</p>
    <p>re S</p>
    <p>ch e</p>
    <p>d u</p>
    <p>le s</p>
    <p>Job Done {A/A}</p>
    <p>Alice's Job</p>
    <p>Bob's (Long) Job</p>
    <p>Time unused capacity</p>
    <p>Alice Submits {A/A}</p>
    <p>C o</p>
    <p>m p</p>
    <p>u te</p>
    <p>C o</p>
    <p>re S</p>
    <p>ch e</p>
    <p>d u</p>
    <p>le s</p>
    <p>Job Done {A/A}</p>
    <p>Alice's Job</p>
    <p>Bob's job is long</p>
    <p>Alice's job completion time not dependent</p>
    <p>on Bob's job</p>
    <p>Bob's job is short</p>
  </div>
  <div class="page">
    <p>Demand-Insensitive Timesharing</p>
    <p>Alice's Gateway {A+,A-}</p>
    <p>Bob's Gateway {B+,B-}</p>
    <p>AliceAlice Bob</p>
    <p>Job {A/A}</p>
    <p>Result {A/A}</p>
    <p>Shared Compute Server</p>
    <p>Job {B/B}</p>
    <p>Result {B/B}</p>
    <p>Reservation-Based Scheduler {-/-}</p>
    <p>Control {-/-}</p>
    <p>no demand feedback</p>
  </div>
  <div class="page">
    <p>Informal Schedule Analysis</p>
    <p>Bob's Job</p>
    <p>Time</p>
    <p>unused capacity</p>
    <p>Bob's Job</p>
    <p>Alice's Job</p>
    <p>Time</p>
    <p>Submit {A/A}</p>
    <p>S h</p>
    <p>a re</p>
    <p>d C</p>
    <p>o re</p>
    <p>S ch</p>
    <p>e d</p>
    <p>u le</p>
    <p>Done {A/A}Alice's</p>
    <p>Job</p>
    <p>Submit {A/A}</p>
    <p>Done {A/A}</p>
    <p>Alice's job completion time still not dependent on Bob's job</p>
    <p>Bob's job is short Bob's job is long</p>
  </div>
  <div class="page">
    <p>Timing Control in Elastic Clouds</p>
    <p>Need two additional facilities:  System-enforced deterministic execution</p>
    <p>[OSDI '10]  OS/VMM ensures that a job's outputs depend</p>
    <p>only on job's explicit inputs</p>
    <p>Pacing queues  Input jobs/messages at any rate</p>
    <p>Output jobs/messages on a fixed schedule</p>
  </div>
  <div class="page">
    <p>Elastic Cloud Scenario</p>
    <p>Alice's Gateway {A+,A-,Bf</p>
    <p>-} Bob's Gateway</p>
    <p>{B+,B-,Af-}</p>
    <p>AliceAlice Bob</p>
    <p>Job {A/A}</p>
    <p>Result {A/A,B}</p>
    <p>Shared Deterministic Compute Server</p>
    <p>Job {B/B}</p>
    <p>Result {B/A,B}</p>
    <p>Demand Scheduler {A,B/A,B}</p>
    <p>Control {A,B/A,B}</p>
    <p>Demand {A,B/A,B}</p>
    <p>Pacer freq f</p>
    <p>Pacer freq f</p>
    <p>Result {A/Af,Bf}</p>
    <p>Job {B/B}</p>
    <p>Result {B/Af,Bf}</p>
  </div>
  <div class="page">
    <p>Jobs: In Anytime, Out on a Schedule</p>
    <p>For each customer (e.g., Alice):  Deterministic execution ensures job output bits</p>
    <p>depend only on job input bits: Oj = f(Ij)</p>
    <p>Job outputs produced in same order as inputs  At each clock tick, paced queue releases</p>
    <p>either next job output or says not ready yet  The single bit of information per clock tick</p>
    <p>that might leak other users' information</p>
  </div>
  <div class="page">
    <p>Informal Schedule Analysis</p>
    <p>Bob's (Short) Job</p>
    <p>Time</p>
    <p>Bob's (Long) Job</p>
    <p>Time</p>
    <p>Alice's Job {A/A}</p>
    <p>C o</p>
    <p>m p</p>
    <p>u te</p>
    <p>S ch</p>
    <p>e d</p>
    <p>u le</p>
    <p>Result {A/A,B}</p>
    <p>Alice's Job {A/A}</p>
    <p>Result {A/A,B}</p>
    <p>(b) Schedule: Bob's job short (b) Schedule: Bob's job long</p>
    <p>Paced result at tick 3 {A/Af,Bf}</p>
    <p>P a</p>
    <p>ce r</p>
    <p>S ch</p>
    <p>e d</p>
    <p>u le</p>
    <p>Paced result at tick 4 {A/Af,Bf}</p>
  </div>
  <div class="page">
    <p>Key Challenges/Questions</p>
    <p>Formalize full TIFC model  Potentially applicable at systems or PL levels</p>
    <p>Integrate Myers' predictive mitigation ideas</p>
    <p>Build TIFC-enforcing prototype  Ongoing, based on Determinator [OSDI '10]</p>
    <p>Explore flexibility, applicability of model  Can model support interactive applications?</p>
    <p>Can model support transactional apps?</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>TIFC = IFC extended to timing channels  Several timing-hardening approaches</p>
    <p>Physical partitioning</p>
    <p>Demand-insensitive timesharing</p>
    <p>Elastic computing via deterministic job model</p>
    <p>First general approach that could be both:  Feasible on unmodified hardware</p>
    <p>Suitable for stat-muxed clouds</p>
    <p>Further information: http://dedis.cs.yale.edu</p>
  </div>
</Presentation>
