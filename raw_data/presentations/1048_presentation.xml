<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Graphene-SGX</p>
    <p>A Practical Library OS for Unmodified Applications on SGX</p>
    <p>Chia-Che Tsai Donald E. Porter Mona Vij</p>
  </div>
  <div class="page">
    <p>Intel SGX: Trusted Execution on Untrusted Hosts</p>
    <p>App confidentiality &amp; integrity on machines you have no control</p>
    <p>Processing Sensitive Data (Ex: Medical Records)</p>
    <p>Client Machines</p>
    <p>Public Cloud</p>
  </div>
  <div class="page">
    <p>Porting Apps to SGX is Not Exactly Painless</p>
    <p>An effortless option for wide-ranged Ubuntu apps?</p>
    <p>Crypto Functions (Ex: WolfSSL)</p>
    <p>Microservices (Ex: lighttpd)</p>
    <p>Language Runtimes (Ex: OpenJDK)</p>
    <p>OS functionality available but not trusted</p>
    <p>Porting: novice  hell</p>
    <p>Some SGX frameworks (SCONE/Panoply) target here</p>
    <p>Still some porting effort (Ex: recompiling)</p>
  </div>
  <div class="page">
    <p>Open SGX framework for Unmodified Linux Apps</p>
    <p>Graphene-SGX:</p>
    <p>No reprogramming or recompiling</p>
    <p>Servers / Command-line apps / Runtimes (Apache, NGINX, GCC, R, Python, OpenJDK, Memcached, )</p>
    <p>Multi-process APIs (fork, IPC, )</p>
    <p>Not meant to be perfect, but a quick, practical option (or to avoid app changes)</p>
  </div>
  <div class="page">
    <p>Talk Outline</p>
    <p>How does Graphene-SGX protect unmodified applications?</p>
    <p>Why should you try Graphene-SGX?</p>
    <p>What is the right way for porting applications to SGX?</p>
  </div>
  <div class="page">
    <p>The Graphene LibOS Project [Eurosys14]</p>
    <p>An open libOS for reusing Linux applications</p>
    <p>(github.com/oscarlab/graphene)</p>
    <p>Inspired by Drawbridge[ASPLOS11] and Haven[OSDI14]</p>
    <p>Gradually adopted by labs / industry</p>
    <p>Active development &amp; tech support (doing our best!)</p>
    <p>Unmodified Application</p>
    <p>Process Process</p>
    <p>LibOS LibOS</p>
    <p>Easy to port to new OS/platform</p>
  </div>
  <div class="page">
    <p>Intel SGX (Software Guard Extensions)</p>
    <p>Untrusted OS</p>
    <p>App Process</p>
    <p>SGX instructions (ECREATE/EINIT)</p>
    <p>Enclave</p>
    <p>Signed App</p>
    <p>Sensitive Data</p>
    <p>Completely isolated from OS</p>
  </div>
  <div class="page">
    <p>Intel SGX (Software Guard Extensions)</p>
    <p>Untrusted OS</p>
    <p>Enclave</p>
    <p>Signed App</p>
    <p>Sensitive Data</p>
    <p>Secret Key</p>
    <p>Encrypted &amp; signed in DRAM App</p>
    <p>Process</p>
  </div>
  <div class="page">
    <p>Intel SGX (Software Guard Extensions)</p>
    <p>Enclave app requirements:</p>
    <p>Untrusted OS</p>
    <p>Enclave</p>
    <p>Signed App</p>
    <p>Sensitive Data App</p>
    <p>Process</p>
    <p>Unmodified Linux app: (1) Dynamic linked (2) Built with syscall usage</p>
  </div>
  <div class="page">
    <p>Running Unmodified App with Graphene-SGX</p>
    <p>Graphene Loader</p>
    <p>Untrusted OS</p>
    <p>$ SGX=1 ./pal_loader httpd [args]</p>
  </div>
  <div class="page">
    <p>Running Unmodified App with Graphene-SGX</p>
    <p>Untrusted OS</p>
    <p>Graphene LibOS</p>
    <p>GNU libc</p>
    <p>httpd User Libs</p>
    <p>Linux syscalls</p>
    <p>Enclave Interface (28 calls)</p>
    <p>Signed by developers as a CPU-verifiable signature (Signing tool provided)</p>
  </div>
  <div class="page">
    <p>Running Unmodified App with Graphene-SGX</p>
    <p>Enclave app requirements:</p>
    <p>Untrusted OS</p>
    <p>Graphene LibOS</p>
    <p>GNU libc</p>
    <p>httpd User Libs</p>
    <p>Linux syscalls</p>
    <p>Enclave Interface (28 calls)</p>
    <p>key research problem</p>
  </div>
  <div class="page">
    <p>Checking Untrusted Inputs from the OS</p>
    <p>Checking untrusted syscalls is subtle [Checkoway, 2013]</p>
    <p>Graphene-SGX:</p>
    <p>Narrowing to a fixed interface (28 calls)</p>
    <p>Redefining an interface suitable for checking</p>
    <p>Examples:</p>
    <p>Reading an integrity-sensitive file (Ex: library/script/config)</p>
    <p>See paper: multi-process APIs</p>
  </div>
  <div class="page">
    <p>Ex: Reading an Integrity-Sensitive File</p>
    <p>Ask for explicit inputs</p>
    <p>Checksums given</p>
    <p>in a signed manifest</p>
    <p>Copy &amp; verify in enclave</p>
    <p>Untrusted OS</p>
    <p>LibOS</p>
    <p>Enclave Interface</p>
    <p>GNU libc</p>
    <p>httpd User Libs</p>
    <p>read mmap dlopen</p>
    <p>FileMap(file,off,size)</p>
    <p>File Chunk</p>
    <p>Checksums</p>
    <p>ManifestLinux syscalls</p>
  </div>
  <div class="page">
    <p>Checking All 28 Enclave Calls</p>
    <p>Examples # Result Explanation</p>
    <p>(1) Reading a file (2) Inter-proc</p>
    <p>coordination 18</p>
    <p>Fully Checked</p>
    <p>(1) File checksums (2) CPU attest. + crypto:</p>
    <p>inter-proc TLS connection</p>
    <p>Yielding a thread 6 Benign Nothing to check</p>
    <p>(1) Polling handles (2) File attributes</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>Graphene-SGX turns an unmodified app into enclave app</p>
    <p>A app-specific signature authenticating all binaries</p>
    <p>Syscalls implemented inside enclaves</p>
    <p>Narrowing &amp; redefining untrusted OS inputs to checkable values</p>
  </div>
  <div class="page">
    <p>Why (and When) You Should Try Graphene-SGX</p>
    <p>Unmodified apps / needs dynamic loading</p>
    <p>When alternatives dont offer OS functionality you want</p>
    <p>Graphene-SGX:</p>
    <p>Rich OS functionality (145 syscalls so far)</p>
    <p>Blow up enclave size &amp; TCB (trusted computing base)?</p>
    <p>Performance?</p>
  </div>
  <div class="page">
    <p>Comparison with Other SGX Frameworks</p>
    <p>Graphene-SGX SCONE [OSDI16]</p>
    <p>Panoply [NDSS17]</p>
    <p>Approach LibOS Shim Layers: redirect &amp;</p>
    <p>check system APIs</p>
    <p>Functionality vs</p>
    <p>checks</p>
    <p>Can grow without extending checks</p>
    <p>Using more system APIs = more checks</p>
  </div>
  <div class="page">
    <p>Trusted Computing Base</p>
    <p>Not fundamental to libOS, but more by the choice of libc</p>
    <p>LibOS/shim 53 kLoC 97 kLoC 10kLoC</p>
    <p>Choice of libc</p>
    <p>GNU libC (1.1 MLoC)</p>
    <p>musl (88 kLoC)</p>
    <p>No libc in enclave</p>
    <p>Graphene-SGX SCONE [OSDI16]</p>
    <p>Panoply [NDSS17]</p>
  </div>
  <div class="page">
    <p>Graphene-SGX Performance</p>
    <p>Baselines: Linux, Graphene (without SGX)</p>
    <p>Workloads:</p>
    <p>Server: Apache with 5 worker processes</p>
    <p>Command-line: R benchmarks</p>
    <p>Evaluation Setup:</p>
  </div>
  <div class="page">
    <p>Apache with 5 Processes (w/ IPC Semaphore)</p>
    <p>A v</p>
    <p>e ra</p>
    <p>g e</p>
    <p>R e</p>
    <p>sp o</p>
    <p>n se</p>
    <p>T</p>
    <p>im e</p>
    <p>( S</p>
    <p>)</p>
    <p>Throughput (k.req/S)</p>
    <p>Linux Graphene (without SGX) Graphene-SGX</p>
    <p>better</p>
    <p>better</p>
    <p>Graphene: little effect (~5%)</p>
    <p>on top throughput</p>
    <p>Graphene-SGX: Impact by enclave exits &amp; checking OS inputs</p>
  </div>
  <div class="page">
    <p>R Benchmarks O</p>
    <p>v e</p>
    <p>rh e</p>
    <p>a d</p>
    <p>t o</p>
    <p>L in</p>
    <p>u x</p>
    <p>Workloads</p>
    <p>Linux Graphene (without SGX) Graphene-SGX 10x</p>
    <p>~1x overhead</p>
    <p>better</p>
    <p>Graphene: ~0% overhead</p>
    <p>Graphene-SGX: Memory-intensive impact</p>
    <p>(app behavior)</p>
  </div>
  <div class="page">
    <p>Graphene-SGX Performance Discussion</p>
    <p>Latency overhead less than ~1x unless memory-intensive</p>
    <p>LibOS memory cost only 5-15 MB</p>
    <p>Cause:</p>
    <p>Enclave exits &amp; checks (can improve)</p>
    <p>App memory usage (reduce with configuration / partitioning)</p>
  </div>
  <div class="page">
    <p>In the End: A Developers Guide for SGX Porting</p>
    <p>Keep safe interface to OS</p>
    <p>Reduce memory footprint &amp; enclave exits</p>
    <p>Take care of vulnerabilities (side channels!)</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Graphene-SGX  quick, practical Linux-to-SGX porting option</p>
    <p>Usability: Rich Linux functionality with multi-process</p>
    <p>Performance: Less than ~1x overheads (normal cases)</p>
    <p>Security: (1) Reduce OS interaction to checkable services (2) LibOS TCB comparable to other options</p>
    <p>Graphene library OS: github.com/oscarlab/graphene (chitsai@cs.stonybrook.edu)</p>
  </div>
</Presentation>
