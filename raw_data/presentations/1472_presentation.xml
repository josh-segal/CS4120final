<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>LDPC-in-SSD:</p>
    <p>Making Advanced Error Correction Codes Work</p>
    <p>Effectively in Solid State Drives</p>
    <p>Kai Zhao*, Wenzhe Zhao, Hongbin Sun, Tong Zhang*, Xiaodong Zhang, and Nanning Zheng</p>
    <p>* ECSE Department, Rensselaer Polytechnic Institute, USA  Xian Jiaotong University, P.R.China</p>
    <p>Department of CSE, The Ohio State University, USA</p>
  </div>
  <div class="page">
    <p>NAND Flash Memory</p>
    <p>NAND Flash</p>
    <p>consumer client enterprise</p>
    <p>Increasing Adoptions and Decreasing Cost of NAND Flash Memory</p>
    <p>Increasingly wide adoption</p>
    <p>Bit cost reduction$10/GB $1/GB</p>
    <p>$0.35/GB</p>
  </div>
  <div class="page">
    <p>Noise in NAND flash memory increases as chip technology scaling continues</p>
    <p>NAND Flash Memory</p>
    <p>Floating gate</p>
    <p>Oxide</p>
    <p>Charge trap, caused by P/E cycling</p>
    <p>Electrons</p>
    <p>Cell</p>
    <p>Cell Cell</p>
    <p>Cell Cell</p>
    <p>Cell</p>
    <p>Bit Line</p>
    <p>Word Line</p>
    <p>BL BL</p>
    <p>WL Flash Block</p>
    <p>Cell size and distance between cells shrink</p>
    <p>Oxide layer becomes thinner  Number of electrons held in</p>
    <p>floating gate reduced</p>
  </div>
  <div class="page">
    <p>Smaller cell, thinner oxide layer and fewer electrons make the flash memory increasingly noisy</p>
    <p>NAND Flash Memory</p>
    <p>Victim cell</p>
    <p>Cell</p>
    <p>Cell Cell</p>
    <p>Cell Cell</p>
    <p>Cell</p>
    <p>BL WL</p>
    <p>BL BL</p>
    <p>WL</p>
    <p>Cell-to-cell interference Random telegraph noise (RTN)</p>
    <p>Retention noise Electrons leaks from the floating gate</p>
    <p>Higher raw bit error rate</p>
  </div>
  <div class="page">
    <p>Error Correction Codes in Storage Systems</p>
    <p>Bose-Chaudhuri-Hocquengham (BCH) code  A class of cyclic error-correcting codes, invented in 1959, hard</p>
    <p>decision decoding, adopted in all SSDs</p>
    <p>Low-density parity-check (LDPC) code  A linear error-correcting code, invented by Robert.G.Gallager in</p>
    <p>Soft-decision LDPC code has a much stronger error correction capability</p>
  </div>
  <div class="page">
    <p>Error Correction Codes in Storage Systems</p>
    <p>BCH codes relatively weak error correction capability becomes inadequate</p>
    <p>LDPC code can significantly improve the reliability of SSDs compared to BCH code</p>
    <p>Challenges for adopting LDPC codes in SSDs  Designing LDPC codes of good performance</p>
    <p>Techniques to address the LDPC decoder input initialization problem</p>
    <p>Minimizing LDPC-induced latency increase in SSDs</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>LDPC code and soft-decision sensing</p>
    <p>Proposed techniques</p>
    <p>Experiment Setup and Preparation</p>
    <p>Experimental Results</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>LDPC Code and Soft Sensing</p>
    <p>Hard-decision decoding (BCH, LDPC)  Inputs are in binary form</p>
    <p>Simple hardware implementation</p>
    <p>Relatively weak error correction capability</p>
    <p>Soft-decision decoding (LDPC)  Inputs are quantized to integers</p>
    <p>Complicated hardware design</p>
    <p>Strong error correction capability</p>
    <p>For LDPC code, its error correction strength strongly depends on the accuracy of the input information which presents the probability information of the data stored in NAND flash memory</p>
  </div>
  <div class="page">
    <p>LDPC Code and Soft Sensing</p>
    <p>Noisy channel yn1,, y1, y0011 ,,, xxxn  Data encoded</p>
    <p>LDPC Decoder</p>
    <p>Input Init.</p>
    <p>= =</p>
    <p>)1|(</p>
    <p>)0|( log</p>
    <p>ii</p>
    <p>ii</p>
    <p>xyP</p>
    <p>xyP</p>
    <p>Log-likelihood ratio (LLR)</p>
    <p>-4,+2,-1,-1,+3,-2,+2,+3,+2,-4,-3,+1 Soft-decision</p>
    <p>Positive: 0 Negative: 1 Magnitude presents the probability</p>
  </div>
  <div class="page">
    <p>LDPC Code and Soft-sensing</p>
    <p>Quantization 1 bit 2 bits 3 bits</p>
    <p>Times of Sensing 1 3 7</p>
    <p>Hard sensing vs. Soft sensing</p>
    <p>data 1 data 2</p>
    <p>-4,-1</p>
    <p>Soft-decision decoding suffers from a huge latency</p>
    <p>Hard-sensing results</p>
    <p>Soft-sensing results</p>
  </div>
  <div class="page">
    <p>LDPC Code and Soft Sensing</p>
    <p>Large latency of soft-decision sensing and corresponding data transfer to SSD controller is destructive to read performance</p>
    <p>A basic two-step read strategy  Hard-decision decoding still works in most of the times</p>
    <p>No</p>
    <p>Hard-decision memory sensing (fast)</p>
    <p>Hard-decision LDPC decoding (weak error correction)</p>
    <p>Success?</p>
    <p>Flash-to-controller data transfer (fast)</p>
    <p>Yes</p>
    <p>No Success?</p>
    <p>Yes</p>
    <p>Soft-decision memory sensing (slow)</p>
    <p>Soft-decision LDPC decoding (strong error correction)</p>
    <p>Flash-to-controller data transfer (slow)</p>
    <p>Unrecovered corruption</p>
  </div>
  <div class="page">
    <p>Financial1 Financial2 Postmark WebSearch Synthetic1 Synthetic2 0.0</p>
    <p>N or</p>
    <p>m al</p>
    <p>iz ed</p>
    <p>R ea</p>
    <p>d R</p>
    <p>es po</p>
    <p>ns e</p>
    <p>T im</p>
    <p>e</p>
    <p>Hard-Decision Decoding Failure Probability 1% Hard-Decision Decoding Failure Probability 10% Hard-Decision Decoding Failure Probability 30% Read latency doubles</p>
    <p>LDPC and Soft Sensing</p>
    <p>Trace-based simulation shows that further improvement is necessary</p>
  </div>
  <div class="page">
    <p>Proposed Techniques</p>
    <p>Two orthogonal aspects to improve read performance</p>
    <p>Minimize the latency of soft-decision sensing and data transfer</p>
    <p>Minimize the unnecessary number of high-precision soft-decision sensing</p>
    <p>Our approaches  Look-Ahead Memory Sensing</p>
    <p>Fine-Grained Progressive Sensing and Decoding</p>
    <p>Data Placement Interleaving</p>
  </div>
  <div class="page">
    <p>Look-ahead Memory Sensing</p>
    <p>Start soft-decision sensing in advance</p>
    <p>Hard-decision Memory sensing</p>
    <p>Data transfer</p>
    <p>LDPC decoding</p>
    <p>Soft-decision memory sensing &amp; data transfer</p>
    <p>LDPC decoding</p>
    <p>Hard-decision Memory sensing</p>
    <p>Data transfer</p>
    <p>LDPC decoding</p>
    <p>Soft-decision memory sensing &amp; data transfer</p>
    <p>LDPC decoding</p>
    <p>Decoding fails</p>
  </div>
  <div class="page">
    <p>Fine-Grained Progressive Sensing and Decoding</p>
    <p>Why not exploit the trade-off space between latency and error correction capability</p>
  </div>
  <div class="page">
    <p>Fine-Grained Progressive Sensing and Decoding</p>
    <p>Fully exploit LDPCs error correction capability</p>
  </div>
  <div class="page">
    <p>Fine-Grained Progressive Sensing and Decoding</p>
    <p>Hard-decision memory sensing</p>
    <p>LDPC code decoding</p>
    <p>Success?</p>
    <p>Highest sensing precision?</p>
    <p>Higher precision memory sensing</p>
    <p>Success Failure</p>
    <p>No</p>
    <p>Yes</p>
    <p>Yes</p>
    <p>No</p>
    <p>Flash-to-controller data transfer</p>
    <p>Can be combined with look-ahead memory sensing design strategy</p>
  </div>
  <div class="page">
    <p>Noticeable reliability variance among different NAND flash memory chips</p>
    <p>Average to avoid invoking high precision LDPC decoding</p>
    <p>Data Placement Interleaving</p>
    <p>Chip 2</p>
  </div>
  <div class="page">
    <p>Experiment Setup and Preparation</p>
    <p>SSD Simulator: SSD module in DiskSim  Workload traces: Fiancial1&amp;2, Postmark, WebSearch,</p>
    <p>Synthetic workload1&amp;2  MLC NAND flash memory chip configuration</p>
    <p>4KB per page, 64 pages per block, 2048 blocks per plane, 4 planes per die, and 2 dies per chip.</p>
    <p>8 chips X 8 channels  200 MBps chip I/O bandwidth</p>
    <p>Separate parameters for upper/lower pages  Read/write/erasure latency  Page raw bit error rate</p>
  </div>
  <div class="page">
    <p>Experiment Setup and Preparation</p>
    <p>Our measurement results are based on 25 nm MLC NAND flash chips</p>
    <p>Latency of sensing one extra level is set to 14 s</p>
    <p>10k PE cycles and 1 month retention time</p>
    <p>Read Write</p>
    <p>Upper page 55 s 1.45 ms</p>
    <p>Lower page 41 s 121 s</p>
  </div>
  <div class="page">
    <p>Experiment Setup and Preparation</p>
    <p>Experiment flow to get the BER statistics</p>
    <p>Use Arrhenius law to determine the baking time</p>
    <p>Continuous P/E cycling over a short time</p>
    <p>Baking to emulate wear-out recovery</p>
    <p>Program once</p>
    <p>Baking to emulate data retention</p>
    <p>Bit error rate statistics 21</p>
    <p>=   (   ) =  (   )</p>
  </div>
  <div class="page">
    <p>Experiment Setup and Preparation</p>
    <p>Page raw BER distribution</p>
  </div>
  <div class="page">
    <p>Experimental Results</p>
    <p>Baseline: two-step sensing and decoding strategy</p>
    <p>Financial1 Financial2 Postmark WebSearch Synthetic1 Synthetic2 0.0</p>
    <p>N or</p>
    <p>m al</p>
    <p>iz ed</p>
    <p>R ea</p>
    <p>d R</p>
    <p>es po</p>
    <p>ns e</p>
    <p>T im</p>
    <p>e</p>
  </div>
  <div class="page">
    <p>Experimental Results</p>
    <p>Look-ahead memory sensing</p>
    <p>Financial1 Financial2 Postmark WebSearch Synthetic1 Synthetic2 0.0</p>
    <p>N or</p>
    <p>m al</p>
    <p>iz ed</p>
    <p>R ea</p>
    <p>d R</p>
    <p>es po</p>
    <p>ns e</p>
    <p>T im</p>
    <p>e</p>
    <p>Baseline Look-ahead Sensing</p>
  </div>
  <div class="page">
    <p>Experimental Results</p>
    <p>Fine-grained progressive sensing</p>
    <p>Financial1 Financial2 Postmark WebSearch Synthetic1 Synthetic2 0.0</p>
    <p>N or</p>
    <p>m al</p>
    <p>iz ed</p>
    <p>R ea</p>
    <p>d R</p>
    <p>es po</p>
    <p>ns e</p>
    <p>T im</p>
    <p>e</p>
    <p>Baseline Progressive Sensing</p>
  </div>
  <div class="page">
    <p>Experimental Results</p>
    <p>Combined look-ahead and progressive sensing</p>
    <p>Financial1 Financial2 Postmark WebSearch Synthetic1 Synthetic2 0.0</p>
    <p>N or</p>
    <p>m al</p>
    <p>iz ed</p>
    <p>R ea</p>
    <p>d R</p>
    <p>es po</p>
    <p>ns e</p>
    <p>T im</p>
    <p>e</p>
    <p>Baseline Look-ahead + Progressive Sensing</p>
  </div>
  <div class="page">
    <p>Experimental Results</p>
    <p>Data placement interleaving</p>
    <p>Financial1 Financial2 Postmark WebSearch Synthetic1 Synthetic2 0.0</p>
    <p>N or</p>
    <p>m al</p>
    <p>iz ed</p>
    <p>R ea</p>
    <p>d R</p>
    <p>es po</p>
    <p>ns e</p>
    <p>T im</p>
    <p>e</p>
    <p>Baseline 2-way Interleaving 4-way Interleaving</p>
  </div>
  <div class="page">
    <p>Experimental Results</p>
    <p>Aggregated read response time latency reduction</p>
    <p>Financial1 Financial2 Postmark WebSearch Synthetic1 Synthetic2 0.0</p>
    <p>N or</p>
    <p>m al</p>
    <p>iz ed</p>
    <p>R ea</p>
    <p>d R</p>
    <p>es po</p>
    <p>ns e</p>
    <p>T im</p>
    <p>e</p>
    <p>Baseline Look-ahead + Progressive Sensing + 2-way Interleaving Look-ahead + Progressive Sensing + 4-way Interleaving</p>
  </div>
  <div class="page">
    <p>Experimental Results</p>
    <p>Overhead</p>
    <p>Higher read energy consumption</p>
    <p>Complicating the controller design</p>
    <p>Write amplification caused by interleaving</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Increased noise in NAND flash memory caused by technology scaling is a main reason for increasingly high error rates in SSD</p>
    <p>Conventional ECC, such as BCH, does not have sufficient ability to make error code corrections</p>
    <p>LDPC is a strong ECC candidate for future SSDs to address its reliability issues under high noises</p>
    <p>We proposed three techniques to make LDPC work effectively in SSDs</p>
    <p>With LDPC-in-SSD, SSD can continue to increase its capacity, retain a high reliability, and reduce its prices.</p>
  </div>
</Presentation>
