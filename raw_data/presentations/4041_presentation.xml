<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Lowering the USB Fuzzing Barrier by Transparent</p>
    <p>Two-Way Emulation Rijnard van Tonder</p>
    <p>Herman Engelbrecht</p>
    <p>Stellenbosch University</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>High-impact security bugs reside in the USB attack surface</p>
    <p>Challenging to explore due to  limited pure software solutions  hardware acquisition  inflexible hardware for security testing  knowledge requirement of USB</p>
    <p>Can we do better?</p>
  </div>
  <div class="page">
    <p>Existing Solutions</p>
    <p>Software:  Qemu emulation (MWR Labs, 11)  Frisbee Lite (Davis, 12)</p>
    <p>Hardware:  USB Analyzer, Frisbee and</p>
    <p>GraphicUSB (Davis, 11)  Arduino (Ose, 11, Davis, 11)</p>
    <p>Facedancer (Goodspeed, Bratus, 12), umap (Davis, 13)</p>
    <p>BeagleBone and USBProxy (Spill 14)</p>
  </div>
  <div class="page">
    <p>Fast</p>
    <p>Read and Write ability</p>
    <p>Man-in-the-middle</p>
    <p>Knowledge requirement</p>
    <p>Cost</p>
    <p>Flexible</p>
    <p>Fast</p>
    <p>Read and Write ability</p>
    <p>Man-in-the-middle</p>
    <p>Knowledge requirement</p>
    <p>Cost</p>
    <p>Flexible</p>
  </div>
  <div class="page">
    <p>Contributions  The TTWE USB fuzzing framework that</p>
    <p>Is flexible,  Is cost-effective, and  Lowers the knowledge requirement</p>
    <p>Initial results and analysis of bug-hunting with TTWE</p>
    <p>New possibilities for USB fuzzing and attacks</p>
  </div>
  <div class="page">
    <p>USB Protocol Primer</p>
    <p>Consists of requests and descriptors exchanged between host and peripheral</p>
    <p>USB defines device classes for peripherals  Endpoints designate data direction and address  Control transfers and Non-control transfers  Packets</p>
    <p>Token  Data  Handshake</p>
  </div>
  <div class="page">
    <p>TTWE</p>
    <p>Tap into the communication between host and peripheral</p>
    <p>Modify communication  The Facedancer can emulate host or peripheral</p>
    <p>devices</p>
    <p>Emulate both simultaneously</p>
  </div>
  <div class="page">
    <p>Design</p>
    <p>Peripheral Host</p>
    <p>Host Emulation Peripheral Emulation</p>
    <p>Mediating Computer EP1OUTEP2OUT</p>
    <p>EP3INEP1IN</p>
    <p>EP0 EP0</p>
  </div>
  <div class="page">
    <p>Hardware Implementation</p>
    <p>USB/Serial adapter</p>
    <p>USB controller</p>
    <p>Target MC</p>
  </div>
  <div class="page">
    <p>Software Implementation</p>
    <p>Emulation drivers  Host and Peripheral mode  Communicate via named pipes</p>
    <p>Two challenges:  Endpoint Hijacking  Handshake emulation</p>
  </div>
  <div class="page">
    <p>Endpoint Hijacking</p>
    <p>EP1: IN EP2: OUT</p>
    <p>EP3: IN EP1: OUT</p>
    <p>Problem: hardcoded endpoint descriptors</p>
  </div>
  <div class="page">
    <p>Design</p>
    <p>Peripheral Host</p>
    <p>Host Emulation Peripheral Emulation</p>
    <p>Mediating Computer EP1OUTEP2OUT</p>
    <p>EP3INEP1IN</p>
    <p>EP0 EP0</p>
  </div>
  <div class="page">
    <p>Transparent Emulation Results</p>
    <p>Mass storage device  Enumeration  SCSI data</p>
    <p>Mount, read, and write ability</p>
  </div>
  <div class="page">
    <p>Fuzzing Results</p>
    <p>Dumb fuzzing setup  Printer Driver bug</p>
    <p>Memory corruption</p>
    <p>Application DoS on print  Waits for ACK</p>
    <p>WiFi dongle  Invalid response to clear_feature</p>
    <p>Mass storage driver bug in printer  Malformed SCSI response</p>
  </div>
  <div class="page">
    <p>Limitations</p>
    <p>Slow  Device timeouts  Number of endpoints</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Flexible and inexpensive way to explore the USB attack surface</p>
    <p>Record and replay when fuzzing</p>
    <p>Further avenues:  TOCTTOU RIT attack (Mulliner, 12)  Devices-as-seed-files</p>
  </div>
  <div class="page">
    <p>Questions</p>
    <p>@rvtond</p>
    <p>https://github.com/rvantonder/ttwe-proto</p>
    <p>? rvantonder@ml.sun.ac.za</p>
  </div>
</Presentation>
