<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Immediate Multi-Threaded Dynamic Software Updates Using Stack Reconstruction</p>
    <p>Kristis Makris Rida A. Bazzi</p>
    <p>{makristis,bazzi}@asu.edu</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Software update problem: replace old version with new version</p>
    <p>Traditional approach is static:  stop, update, restart</p>
    <p>Impairs high-availability</p>
    <p>Dynamic software update (DSU) can help minimize downtime</p>
  </div>
  <div class="page">
    <p>main</p>
    <p>f</p>
    <p>g</p>
    <p>h</p>
    <p>main f</p>
    <p>StackExecution trace</p>
    <p>g request update</p>
    <p>h g</p>
  </div>
  <div class="page">
    <p>main</p>
    <p>f</p>
    <p>g</p>
    <p>h</p>
    <p>main f</p>
    <p>StackExecution trace</p>
    <p>g request update</p>
    <p>h g</p>
    <p>h g</p>
    <p>f</p>
    <p>?g g</p>
  </div>
  <div class="page">
    <p>Type-safety: No old code executed on new data; and vice versa</p>
    <p>typedef struct {</p>
    <p>char name[64];</p>
    <p>float balance;</p>
    <p>} customer_record_v1_t;</p>
    <p>old version</p>
    <p>typedef struct {</p>
    <p>char name[64];</p>
    <p>int number_of_accesses;</p>
    <p>float balance;</p>
    <p>} customer_record_v2_t;</p>
    <p>new version</p>
    <p>John</p>
    <p>memory alignment</p>
    <p>f() writes balance = 145.0 145.0 0</p>
    <p>John</p>
    <p>memory alignment</p>
    <p>g() is called data are transformed</p>
    <p>g() writes balance = 160.0 160</p>
    <p>g() returns; f() executes</p>
    <p>f() reads incorrect balance = 0</p>
  </div>
  <div class="page">
    <p>main</p>
    <p>f</p>
    <p>g</p>
    <p>h</p>
    <p>main f</p>
    <p>StackExecution trace</p>
    <p>g request update</p>
    <p>h g</p>
    <p>h g</p>
    <p>f g h g</p>
    <p>f main</p>
    <p>Is old version in valid state ?</p>
    <p>Is there a valid mapping ? Undecidable problem</p>
    <p>Need user input</p>
    <p>Should provide useful</p>
    <p>safety guarantees</p>
  </div>
  <div class="page">
    <p>main</p>
    <p>f</p>
    <p>g</p>
    <p>h</p>
    <p>main f</p>
    <p>StackExecution trace</p>
    <p>g request update</p>
    <p>h g</p>
    <p>h g</p>
    <p>f g h g</p>
    <p>f main f g hupdate</p>
    <p>finished</p>
    <p>Undecidable problem</p>
    <p>Need user input</p>
    <p>Should provide useful</p>
    <p>safety guarantees</p>
  </div>
  <div class="page">
    <p>Useful DSU Safety Guarantees</p>
    <p>Atomic update (subsumes type-safety)</p>
    <p>Transaction-safety</p>
    <p>Thread-safety</p>
  </div>
  <div class="page">
    <p>Atomic Update</p>
    <p>At no time does the executing application expect different representations of state</p>
    <p>After the update only new code executes over the new state; no old code ever executes again</p>
    <p>hybrid execution</p>
    <p>new version</p>
    <p>resume</p>
    <p>map state pause</p>
    <p>old version</p>
  </div>
  <div class="page">
    <p>Transaction-safety  Some code executes only in old or only in new version</p>
    <p>Requires user annotations</p>
    <p>f() { ... while(condition) { i(); j(); k(); } ... }</p>
    <p>do not update inside region</p>
  </div>
  <div class="page">
    <p>Thread-safety</p>
    <p>while (condition) {</p>
    <p>recv(&amp;data);</p>
    <p>process(&amp;data);</p>
    <p>}</p>
    <p>server clients</p>
    <p>active connectionsnew</p>
    <p>connections</p>
    <p>active connectionsnew</p>
    <p>connections</p>
    <p>old code</p>
    <p>active connections</p>
    <p>new connections</p>
    <p>new code</p>
  </div>
  <div class="page">
    <p>Providing thread-safety requires</p>
    <p>immediate updates  Atomic update</p>
    <p>Bounded delay</p>
    <p>Existing DSU mechanisms do not provide</p>
    <p>support for immediate updates</p>
  </div>
  <div class="page">
    <p>Our Results</p>
    <p>First general DSU mechanism that supports  Immediate updates</p>
    <p>Atomic update</p>
    <p>Bounded delay</p>
    <p>Multi-threaded</p>
    <p>Update active code and data</p>
    <p>Low data-access overhead</p>
  </div>
  <div class="page">
    <p>Our Approach: UpStare</p>
    <p>Compiler, patch-generator, runtime  Insert update points</p>
    <p>Source-to-source transformations of C programs</p>
    <p>Architecture and OS independent</p>
    <p>Immediate multi-threaded updates  Atomic update: using stack reconstruction</p>
    <p>Bounded delay: converting blocking calls to nonblocking</p>
    <p>Multithreaded: safely blocking all threads</p>
  </div>
  <div class="page">
    <p>block until unroll finishes</p>
    <p>Stack Reconstruction: unrolling</p>
    <p>main()</p>
    <p>_main()</p>
    <p>a()</p>
    <p>b()</p>
    <p>c()</p>
    <p>e()</p>
    <p>f()</p>
    <p>g()</p>
    <p>main()</p>
    <p>_main()</p>
    <p>a()</p>
    <p>b()</p>
    <p>c()</p>
    <p>d()</p>
    <p>i()</p>
    <p>_i()</p>
    <p>k()</p>
    <p>m()</p>
    <p>Thread 1 Thread 2 Thread 3 g() f() e() c() b() a() _main()</p>
    <p>m() k() _i()</p>
    <p>d() c() b() a() _main()</p>
    <p>saved frames saved frames saved frames</p>
    <p>block all threads</p>
    <p>map global variables</p>
  </div>
  <div class="page">
    <p>Stack Reconstruction: restoring</p>
    <p>main()</p>
    <p>_main()</p>
    <p>a()</p>
    <p>b()</p>
    <p>c()</p>
    <p>e()</p>
    <p>d()</p>
    <p>main()</p>
    <p>_main()</p>
    <p>a()</p>
    <p>b()</p>
    <p>c()</p>
    <p>d()</p>
    <p>i()</p>
    <p>_i_new()</p>
    <p>k()</p>
    <p>m()</p>
    <p>Thread 1 Thread 2 Thread 3 g() f() e() c() b() a() _main()</p>
    <p>m() k() _i()</p>
    <p>d() c() b() a() _main()</p>
    <p>saved frames saved frames saved frames</p>
    <p>p()</p>
    <p>copy</p>
    <p>copy map</p>
    <p>Can update: local variables formal parameters return addresses Program Counterapply stack transformers</p>
    <p>- split functions - map continuation</p>
    <p>- merge functions together</p>
  </div>
  <div class="page">
    <p>Continuation Pointsmain() { UPDATE_POINT();</p>
    <p>a();</p>
    <p>c();</p>
    <p>g();</p>
    <p>}</p>
    <p>a() {</p>
    <p>UPDATE_POINT();</p>
    <p>b();</p>
    <p>}</p>
    <p>b() {</p>
    <p>UPDATE_POINT();</p>
    <p>d();</p>
    <p>while(condition) {</p>
    <p>UPDATE_POINT();</p>
    <p>e();</p>
    <p>}</p>
    <p>}</p>
    <p>main()</p>
    <p>_main()</p>
    <p>old version</p>
  </div>
  <div class="page">
    <p>Continuation Pointsmain() { UPDATE_POINT();</p>
    <p>a();</p>
    <p>c();</p>
    <p>g();</p>
    <p>}</p>
    <p>a() {</p>
    <p>UPDATE_POINT();</p>
    <p>b();</p>
    <p>}</p>
    <p>b() {</p>
    <p>UPDATE_POINT();</p>
    <p>d();</p>
    <p>while(condition) {</p>
    <p>UPDATE_POINT();</p>
    <p>e();</p>
    <p>}</p>
    <p>}</p>
    <p>main()</p>
    <p>_main()</p>
    <p>old version</p>
  </div>
  <div class="page">
    <p>Continuation Pointsmain() { UPDATE_POINT();</p>
    <p>a();</p>
    <p>c();</p>
    <p>g();</p>
    <p>}</p>
    <p>a() {</p>
    <p>UPDATE_POINT();</p>
    <p>b();</p>
    <p>}</p>
    <p>b() {</p>
    <p>UPDATE_POINT();</p>
    <p>d();</p>
    <p>while(condition) {</p>
    <p>UPDATE_POINT();</p>
    <p>e();</p>
    <p>}</p>
    <p>}</p>
    <p>main()</p>
    <p>_main()</p>
    <p>a()</p>
    <p>old version</p>
  </div>
  <div class="page">
    <p>Continuation Pointsmain() { UPDATE_POINT();</p>
    <p>a();</p>
    <p>c();</p>
    <p>g();</p>
    <p>}</p>
    <p>a() {</p>
    <p>UPDATE_POINT();</p>
    <p>b();</p>
    <p>}</p>
    <p>b() {</p>
    <p>UPDATE_POINT();</p>
    <p>d();</p>
    <p>while(condition) {</p>
    <p>UPDATE_POINT();</p>
    <p>e();</p>
    <p>}</p>
    <p>}</p>
    <p>main()</p>
    <p>_main()</p>
    <p>a()</p>
    <p>old version</p>
  </div>
  <div class="page">
    <p>Continuation Pointsmain() { UPDATE_POINT();</p>
    <p>a();</p>
    <p>c();</p>
    <p>g();</p>
    <p>}</p>
    <p>a() {</p>
    <p>UPDATE_POINT();</p>
    <p>b();</p>
    <p>}</p>
    <p>b() {</p>
    <p>UPDATE_POINT();</p>
    <p>d();</p>
    <p>while(condition) {</p>
    <p>UPDATE_POINT();</p>
    <p>e();</p>
    <p>}</p>
    <p>}</p>
    <p>main()</p>
    <p>_main()</p>
    <p>a()</p>
    <p>b()</p>
    <p>old version</p>
  </div>
  <div class="page">
    <p>Continuation Pointsmain() { UPDATE_POINT();</p>
    <p>a();</p>
    <p>c();</p>
    <p>g();</p>
    <p>}</p>
    <p>a() {</p>
    <p>UPDATE_POINT();</p>
    <p>b();</p>
    <p>}</p>
    <p>b() {</p>
    <p>UPDATE_POINT();</p>
    <p>d();</p>
    <p>while(condition) {</p>
    <p>UPDATE_POINT();</p>
    <p>e();</p>
    <p>}</p>
    <p>}</p>
    <p>main()</p>
    <p>_main()</p>
    <p>a()</p>
    <p>b()</p>
    <p>d()</p>
    <p>old version</p>
  </div>
  <div class="page">
    <p>Continuation Pointsmain() { UPDATE_POINT();</p>
    <p>a();</p>
    <p>c();</p>
    <p>g();</p>
    <p>}</p>
    <p>a() {</p>
    <p>UPDATE_POINT();</p>
    <p>b();</p>
    <p>}</p>
    <p>b() {</p>
    <p>UPDATE_POINT();</p>
    <p>d();</p>
    <p>while(condition) {</p>
    <p>UPDATE_POINT();</p>
    <p>e();</p>
    <p>}</p>
    <p>}</p>
    <p>main()</p>
    <p>_main()</p>
    <p>a()</p>
    <p>b()</p>
    <p>old version</p>
  </div>
  <div class="page">
    <p>Continuation Pointsmain() { UPDATE_POINT();</p>
    <p>a();</p>
    <p>c();</p>
    <p>g();</p>
    <p>}</p>
    <p>a() {</p>
    <p>UPDATE_POINT();</p>
    <p>b();</p>
    <p>}</p>
    <p>b() {</p>
    <p>UPDATE_POINT(); // CP 1</p>
    <p>d(); // CP 2</p>
    <p>while(condition) {</p>
    <p>UPDATE_POINT(); // CP 3</p>
    <p>e(); // CP 4</p>
    <p>}</p>
    <p>}</p>
    <p>main()</p>
    <p>_main()</p>
    <p>a()</p>
    <p>b()</p>
    <p>Saved continuation points:</p>
    <p>b_CP_3</p>
    <p>initiate an update</p>
    <p>old version</p>
  </div>
  <div class="page">
    <p>Continuation Pointsmain() { UPDATE_POINT();</p>
    <p>a();</p>
    <p>c();</p>
    <p>g();</p>
    <p>}</p>
    <p>a() {</p>
    <p>UPDATE_POINT(); // CP 1</p>
    <p>b(); // CP 2</p>
    <p>}</p>
    <p>main()</p>
    <p>_main()</p>
    <p>a()</p>
    <p>Saved continuation points:</p>
    <p>b_CP_3</p>
    <p>a_CP_2</p>
  </div>
  <div class="page">
    <p>Continuation Pointsmain() { UPDATE_POINT(); // CP 1</p>
    <p>a(); // CP 2</p>
    <p>c(); // CP 3</p>
    <p>g(); // CP 4</p>
    <p>}</p>
    <p>main()</p>
    <p>_main()</p>
    <p>Saved continuation points:</p>
    <p>b_CP_3</p>
    <p>a_CP_2</p>
    <p>_main_CP_2</p>
  </div>
  <div class="page">
    <p>Continuation Points</p>
    <p>main()</p>
    <p>_main()</p>
    <p>Saved continuation points:</p>
    <p>b_CP_3</p>
    <p>a_CP_2</p>
    <p>_main_CP_2</p>
    <p>Restored continuation points:</p>
    <p>_main_CP_2</p>
    <p>main() {</p>
    <p>UPDATE_POINT();</p>
    <p>a(); // CP 2</p>
    <p>c();</p>
    <p>g();</p>
    <p>}</p>
    <p>new version</p>
  </div>
  <div class="page">
    <p>Continuation Points</p>
    <p>main()</p>
    <p>_main()</p>
    <p>Saved continuation points:</p>
    <p>b_CP_3</p>
    <p>a_CP_2</p>
    <p>_main_CP_2</p>
    <p>Restored continuation points:</p>
    <p>_main_CP_2</p>
    <p>new version</p>
    <p>main() {</p>
    <p>UPDATE_POINT();</p>
    <p>a(); // CP 2</p>
    <p>c();</p>
    <p>g();</p>
    <p>}</p>
    <p>a() {</p>
    <p>UPDATE_POINT();</p>
    <p>b(); // CP 2</p>
    <p>}</p>
    <p>a()</p>
    <p>a_CP_2</p>
  </div>
  <div class="page">
    <p>main() {</p>
    <p>UPDATE_POINT();</p>
    <p>a();</p>
    <p>c();</p>
    <p>g();</p>
    <p>}</p>
    <p>a() {</p>
    <p>UPDATE_POINT();</p>
    <p>b();</p>
    <p>}</p>
    <p>b() {</p>
    <p>UPDATE_POINT(); // CP 1</p>
    <p>d(); // CP 2</p>
    <p>f(); // CP 3</p>
    <p>while(condition) {</p>
    <p>UPDATE_POINT(); // CP 4</p>
    <p>e(); // CP 5</p>
    <p>}</p>
    <p>}</p>
    <p>Continuation Points</p>
    <p>main()</p>
    <p>_main()</p>
    <p>a()</p>
    <p>Saved continuation points:</p>
    <p>b_CP_3</p>
    <p>a_CP_2</p>
    <p>_main_CP_2</p>
    <p>Restored continuation points:</p>
    <p>_main_CP_2</p>
    <p>a_CP_2</p>
    <p>b_CP_4</p>
    <p>b()</p>
    <p>new version</p>
  </div>
  <div class="page">
    <p>Multi-Threaded Updates</p>
    <p>HAS lock L</p>
    <p>WANTS lock L</p>
    <p>voluntarily blocked</p>
    <p>blocked</p>
    <p>Thread 1 Thread 2</p>
    <p>LOCK(L);</p>
    <p>UPDATE_POINT();</p>
    <p>LOCK(L);</p>
    <p>Detect if all threads are blocked Treat locks as update points</p>
    <p>Multi-Process Updates wrap fork(), wait(), waitpid() coordinate atomic reconstruction</p>
  </div>
  <div class="page">
    <p>Bounded Delay</p>
    <p>SOME DATA 0000000000 0000000000 0000000000</p>
    <p>stack</p>
    <p>data buffer</p>
    <p>YYYYYYYYYYY ZZZZZZZZZZ</p>
    <p>other data</p>
    <p>functionA() {</p>
    <p>char data[SIZE];</p>
    <p>...</p>
    <p>recv(FD, &amp;data);</p>
    <p>...</p>
    <p>}</p>
    <p>heap</p>
    <p>SOME DATA 0000000000 0000000000 0000000000</p>
    <p>save</p>
    <p>issue non-blocking</p>
    <p>XXXXXXXXX XXXXXXXXX XXXXXXXXX XXXXXXXXX</p>
    <p>SOME DATA MORE DATA 0000000000 0000000000</p>
    <p>voluntarily block</p>
    <p>restore</p>
    <p>SOME DATA MORE DATA 0000000000 0000000000</p>
    <p>RECV(FD,&amp;data);</p>
    <p>SELECT(FD);</p>
    <p>UPDATE_POINT();</p>
    <p>RECV_FINISH(FD,&amp;data);</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>KissFFT  Small, data-intensive application (2,000 LoC)</p>
    <p>Very Secure FTP Daemon  Medium-sized application (12,000 LoC)  Forks non-communicating connection handlers</p>
    <p>PostgreSQL DBMS  Large application (postmaster: 225,000 LoC)</p>
    <p>Forks communicating connection handlers  Shared Memory</p>
  </div>
  <div class="page">
    <p>KissFFT v1.2.0</p>
    <p>Overhead  Execution time: 38%; faster than Ginseng (150%)</p>
    <p>functionA</p>
    <p>functionB</p>
    <p>uninstrumented version</p>
    <p>desired optimization</p>
    <p>outside .text segment</p>
    <p>code for restoring</p>
    <p>instrumented version</p>
    <p>code for unrolling</p>
    <p>code for update points</p>
  </div>
  <div class="page">
    <p>Very Secure FTP Daemon</p>
    <p>Updates  Under two use cases: idle client, file transfer  13 updates (5.5 years-worth)  11 manual continuation mappings  Latency 60ms (50ms to block all threads)</p>
    <p>Overhead  Latency: retrieve a 32-byte file 1000 times  Throughput: retrieve a 300MB file  In-memory and on-disk, over cross-over cable</p>
  </div>
  <div class="page">
    <p>vsFTPd Overhead</p>
    <p>Latency: 16-17% (1.6ms); throughput: 0%</p>
  </div>
  <div class="page">
    <p>PostgreSQL DBMS</p>
    <p>Updates  1 update: v7.4.16 to v7.4.17</p>
    <p>No manual continuation points; latency 60ms</p>
    <p>Overhead  Latency: run 1 transaction 1000 times</p>
    <p>Throughput: TPC-B like pgbench; 100,000 txs</p>
    <p>In-memory and on-disk, over cross-over cable</p>
  </div>
  <div class="page">
    <p>PostgreSQL Latency</p>
    <p>Latency: 89-97% (22.5ms)</p>
  </div>
  <div class="page">
    <p>PostgreSQL Throughput</p>
    <p>Throughput: 41% in-memory; 26% on-disk</p>
  </div>
  <div class="page">
    <p>Related Work</p>
    <p>Application DSU  OPUS: Small, isolated, feature-less updates</p>
    <p>POLUS: Cannot update local variables</p>
    <p>Ginseng: Data-access indirection</p>
    <p>Kernel DSU  DynAMOS,KSplice</p>
    <p>Data-access indirection; limited safety</p>
    <p>K42: Immediate updates; specially crafted</p>
  </div>
  <div class="page">
    <p>On-going and Future Work</p>
    <p>Move cold code at end of process image</p>
    <p>Automatically map pointers  Developed in previous work; not integrated yet</p>
    <p>Runtime safety checking  Transaction-safety through dynamic stack tracing</p>
    <p>Temporary overhead 10-12%</p>
    <p>Semantic analysis  Identify nature of updates and prove correctness</p>
    <p>Reduce user input</p>
    <p>Update in-transit data and files</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>UpStare: Dynamic Software Updating  Source-to-source transformation of C applications  Useful safety guarantees</p>
    <p>Stack reconstruction  Update active code and data atomically  No data-access indirection</p>
    <p>Multi-threaded and multi-process updates  Immediate updates</p>
    <p>Convert blocking calls to non-blocking</p>
    <p>Demonstrated updates  vsFTPd: 13 updates (5.5 years-worth); 12,000 LOC  PostgreSQL v7.4.16; over 200,000 LOC</p>
    <p>Low overhead (0-26%); unoptimized</p>
  </div>
  <div class="page">
    <p>Questions ?</p>
  </div>
</Presentation>
