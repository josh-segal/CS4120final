<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>IMPLEMENTING A LEADING LOADS PERFORMANCE PREDICTOR ON COMMODITY PROCESSORS</p>
    <p>BO SU JOSEPH L. GREATHOUSE JUNLI GU</p>
    <p>MICHAEL BOYER LI SHEN ZHIYING WANG</p>
    <p>NUDT AMD RESEARCH JUNE 19, 2014</p>
  </div>
  <div class="page">
    <p>| IMPLEMENTING A LEADING LOADS PERFORMANCE PREDICTOR ON COMMODITY PROCESSORS | JUNE 19, 2014 2</p>
    <p>How fast is your application at different CPU frequencies?</p>
  </div>
  <div class="page">
    <p>| IMPLEMENTING A LEADING LOADS PERFORMANCE PREDICTOR ON COMMODITY PROCESSORS | JUNE 19, 2014 3</p>
    <p>WHAT HAPPENS WHEN YOU CHANGE FREQUENCY?</p>
    <p>Estimate #1 Nothing. Who cares about frequency?</p>
    <p>Estimate #2 Performance difference is equal to frequency change.</p>
    <p>Estimate #3 Something in between.</p>
    <p>N o</p>
    <p>rm a</p>
    <p>li ze</p>
    <p>d P</p>
    <p>e rf</p>
    <p>o rm</p>
    <p>a n</p>
    <p>ce</p>
    <p>Normalized Frequency</p>
    <p>N o</p>
    <p>rm a</p>
    <p>li ze</p>
    <p>d P</p>
    <p>e rf</p>
    <p>o rm</p>
    <p>a n</p>
    <p>ce</p>
    <p>Normalized Frequency</p>
    <p>N o</p>
    <p>rm a</p>
    <p>li ze</p>
    <p>d P</p>
    <p>e rf</p>
    <p>o rm</p>
    <p>a n</p>
    <p>ce</p>
    <p>Normalized Frequency</p>
    <p>N o</p>
    <p>rm a</p>
    <p>li ze</p>
    <p>d P</p>
    <p>e rf</p>
    <p>o rm</p>
    <p>a n</p>
    <p>ce</p>
    <p>Normalized Frequency</p>
    <p>Rare</p>
    <p>bzip2</p>
    <p>milc</p>
  </div>
  <div class="page">
    <p>| IMPLEMENTING A LEADING LOADS PERFORMANCE PREDICTOR ON COMMODITY PROCESSORS | JUNE 19, 2014 4</p>
    <p>WHY DONT NAVE ESTIMATES ALWAYS WORK?</p>
    <p>bzip2</p>
    <p>CPU</p>
    <p>DRAM</p>
    <p>Time</p>
    <p>Working in the CPU core. Scales with frequency.</p>
    <p>milc</p>
    <p>CPU</p>
    <p>DRAM</p>
    <p>Stalled on Memory. Core Frequency doesnt matter.</p>
    <p>Core and memory time both matter</p>
  </div>
  <div class="page">
    <p>| IMPLEMENTING A LEADING LOADS PERFORMANCE PREDICTOR ON COMMODITY PROCESSORS | JUNE 19, 2014 5</p>
    <p>HOW DO YOU ESTIMATE MEMORY TIME? MODERN CORES MAKE THIS DIFFICULT</p>
    <p>CPU Work</p>
    <p>DRAM</p>
    <p>Count the amount of time with an outstanding load?</p>
    <p>Count last-level cache misses?</p>
    <p>Multiple Parallel</p>
    <p>Accesses Accesses Overlap</p>
    <p>Computation</p>
    <p>Variable Latencies</p>
  </div>
  <div class="page">
    <p>| IMPLEMENTING A LEADING LOADS PERFORMANCE PREDICTOR ON COMMODITY PROCESSORS | JUNE 19, 2014 6</p>
    <p>LEADING LOADS MEMORY TIME ESTIMATION</p>
    <p>Described by 3 separate groups in CF 2010, IEEE TOC, and IGCC 2011</p>
    <p>Simulation: ~0.2% estimation error across 2x change in frequency</p>
    <p>CPU Work</p>
    <p>DRAM</p>
    <p>Leading Load</p>
    <p>Not Leading</p>
    <p>Leading Load</p>
    <p>Memory time approximately time that a leading loads is active</p>
    <p>Memory Time Memory Time</p>
  </div>
  <div class="page">
    <p>| IMPLEMENTING A LEADING LOADS PERFORMANCE PREDICTOR ON COMMODITY PROCESSORS | JUNE 19, 2014 7</p>
    <p>LEADING LOADS ON AMD PROCESSORS</p>
    <p>L2 cache misses held in Miss Address Buffer (MAB)  MAB entries have a static priority (e.g. MAB0 is highest priority)</p>
    <p>Highest priority empty MAB holds the miss until it returns from memory</p>
    <p>Performance event 0x69 allows SW to count # of cycles with filled MABs</p>
    <p>CPU Core</p>
    <p>&amp; L1</p>
    <p>Cache</p>
    <p>L2 Cache</p>
    <p>L3 Cache &amp; DRAM</p>
    <p>Core Clock Domain NB and Memory Clock Domains</p>
    <p>Miss Address Buffers</p>
    <p>MAB0</p>
    <p>MAB1</p>
    <p>MAB2</p>
    <p>MABn</p>
    <p>MAB0</p>
  </div>
  <div class="page">
    <p>| IMPLEMENTING A LEADING LOADS PERFORMANCE PREDICTOR ON COMMODITY PROCESSORS | JUNE 19, 2014 8</p>
    <p>LEADING LOADS ON AMD PROCESSORS</p>
    <p>L2 cache misses held in Miss Address Buffer (MAB)  MAB entries have a static priority (e.g. MAB0 is highest priority)</p>
    <p>Highest priority empty MAB holds the miss until it returns from memory</p>
    <p>Performance event 0x69 allows SW to count # of cycles with filled MABs</p>
    <p>CPU Core</p>
    <p>&amp; L1</p>
    <p>Cache</p>
    <p>L2 Cache</p>
    <p>L3 Cache &amp; DRAM</p>
    <p>Core Clock Domain NB and Memory Clock Domains</p>
    <p>Miss Address Buffers</p>
    <p>MAB0</p>
    <p>MAB1</p>
    <p>MAB2</p>
    <p>MABn</p>
    <p>MAB0</p>
    <p>MAB1</p>
  </div>
  <div class="page">
    <p>| IMPLEMENTING A LEADING LOADS PERFORMANCE PREDICTOR ON COMMODITY PROCESSORS | JUNE 19, 2014 9</p>
    <p>LEADING LOADS ON AMD PROCESSORS</p>
    <p>L2 cache misses held in Miss Address Buffer (MAB)  MAB entries have a static priority (e.g. MAB0 is highest priority)</p>
    <p>Highest priority empty MAB holds the miss until it returns from memory</p>
    <p>Performance event 0x69 allows SW to count # of cycles with filled MABs</p>
    <p>CPU Core</p>
    <p>&amp; L1</p>
    <p>Cache</p>
    <p>L2 Cache</p>
    <p>L3 Cache &amp; DRAM</p>
    <p>Core Clock Domain NB and Memory Clock Domains</p>
    <p>Miss Address Buffers</p>
    <p>MAB0</p>
    <p>MAB1</p>
    <p>MAB2</p>
    <p>MABn</p>
    <p>MAB0</p>
    <p>MAB1</p>
    <p>MAB2</p>
  </div>
  <div class="page">
    <p>| IMPLEMENTING A LEADING LOADS PERFORMANCE PREDICTOR ON COMMODITY PROCESSORS | JUNE 19, 2014 10</p>
    <p>LEADING LOADS ON AMD PROCESSORS</p>
    <p>L2 cache misses held in Miss Address Buffer (MAB)  MAB entries have a static priority (e.g. MAB0 is highest priority)</p>
    <p>Highest priority empty MAB holds the miss until it returns from memory</p>
    <p>Performance event 0x69 allows SW to count # of cycles with filled MABs</p>
    <p>CPU Core</p>
    <p>&amp; L1</p>
    <p>Cache</p>
    <p>L2 Cache</p>
    <p>L3 Cache &amp; DRAM</p>
    <p>Core Clock Domain NB and Memory Clock Domains</p>
    <p>Miss Address Buffers</p>
    <p>MAB0</p>
    <p>MAB1</p>
    <p>MAB2</p>
    <p>MABn</p>
    <p>MAB1</p>
    <p>MAB2</p>
  </div>
  <div class="page">
    <p>| IMPLEMENTING A LEADING LOADS PERFORMANCE PREDICTOR ON COMMODITY PROCESSORS | JUNE 19, 2014 11</p>
    <p>LEADING LOADS ON AMD PROCESSORS</p>
    <p>L2 cache misses held in Miss Address Buffer (MAB)  MAB entries have a static priority (e.g. MAB0 is highest priority)</p>
    <p>Highest priority empty MAB holds the miss until it returns from memory</p>
    <p>Performance event 0x69 allows SW to count # of cycles with filled MABs</p>
    <p>CPU Core</p>
    <p>&amp; L1</p>
    <p>Cache</p>
    <p>L2 Cache</p>
    <p>L3 Cache &amp; DRAM</p>
    <p>Core Clock Domain NB and Memory Clock Domains</p>
    <p>Miss Address Buffers</p>
    <p>MAB0</p>
    <p>MAB1</p>
    <p>MAB2</p>
    <p>MABn</p>
    <p>MAB1</p>
    <p>MAB2</p>
  </div>
  <div class="page">
    <p>| IMPLEMENTING A LEADING LOADS PERFORMANCE PREDICTOR ON COMMODITY PROCESSORS | JUNE 19, 2014 12</p>
    <p>PERFORMANCE ESTIMATION MODEL: LL-MAB</p>
    <p>Measure occupancy time of the highest-priority MAB  HW event 1: CPU Clocks not Halted (for Execution Time)</p>
    <p>Performance Event 0x76</p>
    <p>HW event 2: MAB Wait Cycles (for Memory Time)  Performance Event 0x69</p>
    <p>Family 15h Processors: Unit Mask 0</p>
    <p>1 =   (1)/(1)</p>
    <p>2 =   1  1/2 +  (1)</p>
    <p>1 =   1 -  1</p>
  </div>
  <div class="page">
    <p>| IMPLEMENTING A LEADING LOADS PERFORMANCE PREDICTOR ON COMMODITY PROCESSORS | JUNE 19, 2014 13</p>
    <p>EVALUATING PERFORMANCE PREDICTORS</p>
    <p>Run benchmarks at frequency 1, estimate runtime at frequency 2</p>
    <p>Run benchmark at frequency 2.  Difference between observed and estimated is estimation error.</p>
    <p>Estimation mechanisms:  Linear: Performance scales exactly with frequency (like bzip2)</p>
    <p>Green Governor:  Count L3 cache misses</p>
    <p>Assign delay to each cache miss</p>
    <p># Cache Misses * delay = memory time</p>
    <p>LL-MAB: Count MAB0 cycles at memory time</p>
  </div>
  <div class="page">
    <p>| IMPLEMENTING A LEADING LOADS PERFORMANCE PREDICTOR ON COMMODITY PROCESSORS | JUNE 19, 2014 14</p>
    <p>EXPERIMENTAL SETUP</p>
    <p>AMD Opteron 4386 Processor  2nd Generation Family 15h Piledriver CPU</p>
    <p>Minimum Frequency: 1.4 GHz, Maximum non-boost frequency: 3.1 GHz</p>
    <p>Fedora 19 Desktop (kernel version 3.10.6-200)  Locked benchmarks to single core with numactl</p>
    <p>Used msr-tools to read performance counters around benchmark runs.</p>
    <p>CPUFreq userspace governor to manually control DVFS state. Boosting disabled.</p>
    <p>NAS Parallel Benchmarks</p>
    <p>PARSEC</p>
    <p>Rodinia</p>
    <p>OTHER PROCESSORS TESTED IN THE PAPER</p>
  </div>
  <div class="page">
    <p>| IMPLEMENTING A LEADING LOADS PERFORMANCE PREDICTOR ON COMMODITY PROCESSORS | JUNE 19, 2014 15</p>
    <p>MEASURE AT 3.1 GHZ, ESTIMATE 1.4 GHZ RUNTIME (LOWER IS BETTER)</p>
    <p>NPB PARSEC SPEC INT SPEC FP Rodinia ALL</p>
    <p>M e</p>
    <p>a n</p>
    <p>P re</p>
    <p>d ic</p>
    <p>ti o</p>
    <p>n E</p>
    <p>rr o</p>
    <p>r (%</p>
    <p>)</p>
    <p>Linear GG-L3 LL-MAB</p>
  </div>
  <div class="page">
    <p>| IMPLEMENTING A LEADING LOADS PERFORMANCE PREDICTOR ON COMMODITY PROCESSORS | JUNE 19, 2014 16</p>
    <p>STANDARD DEVIATION IS IMPORTANT FOR PREDICTIONS (LOWER IS STILL BETTER)</p>
    <p>NPB PARSEC SPEC INT SPEC FP Rodinia ALL</p>
    <p>S ta</p>
    <p>n d</p>
    <p>a rd</p>
    <p>D e</p>
    <p>v ia</p>
    <p>ti o</p>
    <p>n (</p>
    <p>% )</p>
    <p>Linear GG-L3 LL-MAB</p>
  </div>
  <div class="page">
    <p>| IMPLEMENTING A LEADING LOADS PERFORMANCE PREDICTOR ON COMMODITY PROCESSORS | JUNE 19, 2014 17</p>
    <p>DISCLAIMER &amp; ATTRIBUTION</p>
    <p>The information presented in this document is for informational purposes only and may contain technical inaccuracies, omissions and typographical errors.</p>
    <p>The information contained herein is subject to change and may be rendered inaccurate for many reasons, including but not limited to product and roadmap changes, component and motherboard version changes, new model and/or product releases, product differences between differing manufacturers, software changes, BIOS flashes, firmware upgrades, or the like. AMD assumes no obligation to update or otherwise correct or revise this information. However, AMD reserves the right to revise this information and to make changes from time to time to the content hereof without obligation of AMD to notify any person of such revisions or changes.</p>
    <p>AMD MAKES NO REPRESENTATIONS OR WARRANTIES WITH RESPECT TO THE CONTENTS HEREOF AND ASSUMES NO RESPONSIBILITY FOR ANY INACCURACIES, ERRORS OR OMISSIONS THAT MAY APPEAR IN THIS INFORMATION.</p>
    <p>AMD SPECIFICALLY DISCLAIMS ANY IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE. IN NO EVENT WILL AMD BE LIABLE TO ANY PERSON FOR ANY DIRECT, INDIRECT, SPECIAL OR OTHER CONSEQUENTIAL DAMAGES ARISING FROM THE USE OF ANY INFORMATION CONTAINED HEREIN, EVEN IF AMD IS EXPRESSLY ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.</p>
    <p>ATTRIBUTION</p>
    <p>2014 Advanced Micro Devices, Inc. All rights reserved. AMD, the AMD Arrow logo and combinations thereof are trademarks of Advanced Micro Devices, Inc. in the United States and/or other jurisdictions. Other names are for informational purposes only and may be trademarks of their respective owners.</p>
  </div>
  <div class="page">
    <p>Backup Slides</p>
  </div>
  <div class="page">
    <p>| IMPLEMENTING A LEADING LOADS PERFORMANCE PREDICTOR ON COMMODITY PROCESSORS | JUNE 19, 2014 19</p>
    <p>PREDICTION ACCURACY PER BENCHMARK</p>
    <p>A b</p>
    <p>so lu</p>
    <p>te P</p>
    <p>re d</p>
    <p>ic ti</p>
    <p>o n</p>
    <p>E rr</p>
    <p>o r</p>
    <p>(% )</p>
    <p>Memory Boundedness</p>
    <p>Linear</p>
    <p>Stall</p>
    <p>GG-L2</p>
    <p>GG-L3</p>
    <p>LL-MAB</p>
    <p>Memory Boundedness = Ratio of execution cycles at two frequencies</p>
    <p>1.0 = no change in cycles (completely compute bound, e.g. bzip2)</p>
  </div>
  <div class="page">
    <p>| IMPLEMENTING A LEADING LOADS PERFORMANCE PREDICTOR ON COMMODITY PROCESSORS | JUNE 19, 2014 20</p>
    <p>CONCLUSION</p>
    <p>First leading loads implementation on real processors</p>
    <p>Higher accuracy than existing predictors</p>
    <p>Lower accuracy than simulation due to HW complexity</p>
    <p>Lightweight estimation mechanism (only requires 2 counters)  Path to better performance and power prediction</p>
  </div>
</Presentation>
