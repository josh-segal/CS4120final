<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Computing Pure Strategy Nash Equilibria in Compact Symmetric Games</p>
    <p>Christopher Thomas Ryan, Albert Xin Jiang, Kevin Leyton-Brown</p>
    <p>University of British Columbia, Vancouver, Canada</p>
  </div>
  <div class="page">
    <p>Computing Pure Strategy Nash Equilibria (PSNE)</p>
  </div>
  <div class="page">
    <p>Computing Pure Strategy Nash Equilibria (PSNE)</p>
    <p>Computational questions: How hard is it to decide if a game has a PSNE? How hard is it to find one? etc.</p>
  </div>
  <div class="page">
    <p>Computing Pure Strategy Nash Equilibria (PSNE)</p>
    <p>Computational questions: How hard is it to decide if a game has a PSNE? How hard is it to find one? etc.</p>
    <p>Answer: depends on the input.  Polynomial time when input is in normal form.</p>
    <p>size exponential in the number of players</p>
  </div>
  <div class="page">
    <p>Computing Pure Strategy Nash Equilibria (PSNE)</p>
    <p>Computational questions: How hard is it to decide if a game has a PSNE? How hard is it to find one? etc.</p>
    <p>Answer: depends on the input.  Polynomial time when input is in normal form.</p>
    <p>size exponential in the number of players</p>
    <p>Potentially difficult (NP-complete, PLS-complete) when input is compact.</p>
    <p>Congestion games [Fabrikant, Papadimitriou &amp; Talwar, 2004; Ieong et al., 2005]</p>
    <p>Graphical games [Gottlob, Greco &amp; Scarcello 2005]  Action graph games [Jiang &amp; Leyton-Brown, 2007;</p>
    <p>Daskalakis, Schoenebeck, Valiant &amp; Valiant 2009]</p>
  </div>
  <div class="page">
    <p>Symmetric Games</p>
    <p>We focus on  Symmetric games: all players are identical and</p>
    <p>indistinguishable.  Fixed number of actions m, varying number of players n.  Utilities are integers.</p>
  </div>
  <div class="page">
    <p>Symmetric Games</p>
    <p>We focus on  Symmetric games: all players are identical and</p>
    <p>indistinguishable.  Fixed number of actions m, varying number of players n.  Utilities are integers.</p>
    <p>Define configuration:</p>
    <p>x = (xa : a  A)</p>
    <p>where xa is the number of players playing action a.</p>
  </div>
  <div class="page">
    <p>Symmetric Games</p>
    <p>We focus on  Symmetric games: all players are identical and</p>
    <p>indistinguishable.  Fixed number of actions m, varying number of players n.  Utilities are integers.</p>
    <p>Define configuration:</p>
    <p>x = (xa : a  A)</p>
    <p>where xa is the number of players playing action a.</p>
    <p>Sufficient to specify utility function ua(x) for each action a and each configuration x.</p>
    <p>There are (</p>
    <p>n+m1 m1</p>
    <p>)</p>
    <p>= (nm1) distinct configurations.</p>
  </div>
  <div class="page">
    <p>Symmetric Games</p>
    <p>We focus on  Symmetric games: all players are identical and</p>
    <p>indistinguishable.  Fixed number of actions m, varying number of players n.  Utilities are integers.</p>
    <p>Define configuration:</p>
    <p>x = (xa : a  A)</p>
    <p>where xa is the number of players playing action a.</p>
    <p>Sufficient to specify utility function ua(x) for each action a and each configuration x.</p>
    <p>There are (</p>
    <p>n+m1 m1</p>
    <p>)</p>
    <p>= (nm1) distinct configurations.  In previous studies [e.g. Brandt, Fischer &amp; Holzer, 2009;</p>
    <p>Roughgarden &amp; Papadimitriou, 2005], utility values are given explicitly.</p>
  </div>
  <div class="page">
    <p>Symmetric Games</p>
    <p>We focus on  Symmetric games: all players are identical and</p>
    <p>indistinguishable.  Fixed number of actions m, varying number of players n.  Utilities are integers.</p>
    <p>Define configuration:</p>
    <p>x = (xa : a  A)</p>
    <p>where xa is the number of players playing action a.</p>
    <p>Sufficient to specify utility function ua(x) for each action a and each configuration x.</p>
    <p>There are (</p>
    <p>n+m1 m1</p>
    <p>)</p>
    <p>= (nm1) distinct configurations.  In previous studies [e.g. Brandt, Fischer &amp; Holzer, 2009;</p>
    <p>Roughgarden &amp; Papadimitriou, 2005], utility values are given explicitly.</p>
    <p>Compute PSNE in poly time by enumerating configurations</p>
  </div>
  <div class="page">
    <p>More compact representations of ua</p>
    <p>We focus on compact representations of ua: those requiring only poly(log n) bits.</p>
  </div>
  <div class="page">
    <p>More compact representations of ua</p>
    <p>We focus on compact representations of ua: those requiring only poly(log n) bits.</p>
    <p>Sanity check:  Specifying input: need only m log n bits.</p>
    <p>Specifying output: can map utilities to {</p>
    <p>n+m1 m1</p>
    <p>)</p>
    <p>}</p>
    <p>while preserving PSNE, thus need only O(log n) bits.</p>
  </div>
  <div class="page">
    <p>More compact representations of ua</p>
    <p>We focus on compact representations of ua: those requiring only poly(log n) bits.</p>
    <p>Sanity check:  Specifying input: need only m log n bits.</p>
    <p>Specifying output: can map utilities to {</p>
    <p>n+m1 m1</p>
    <p>)</p>
    <p>}</p>
    <p>while preserving PSNE, thus need only O(log n) bits.</p>
    <p>Computing PSNE: with such a compact representation, is it even in NP?</p>
  </div>
  <div class="page">
    <p>More compact representations of ua</p>
    <p>We focus on compact representations of ua: those requiring only poly(log n) bits.</p>
    <p>Sanity check:  Specifying input: need only m log n bits.</p>
    <p>Specifying output: can map utilities to {</p>
    <p>n+m1 m1</p>
    <p>)</p>
    <p>}</p>
    <p>while preserving PSNE, thus need only O(log n) bits.</p>
    <p>Computing PSNE: with such a compact representation, is it even in NP?</p>
    <p>To check if x is in N, the set of of PSNE configurations, only need to check for each pair of actions a and a, whether there is a profitable deviation from playing a to playing a.</p>
    <p>Checking whether x  N is in P (thus computing PSNE in NP) if the utility functions can be evaluated in poly time.</p>
  </div>
  <div class="page">
    <p>Circuit Symmetric Games</p>
    <p>How hard can it get?  Represent each ua by a Boolean circuit</p>
    <p>general method for representing utility functions; complexity for other circuit-based models studied in e.g. [Schoenebeck &amp; Vadhan, 2006]</p>
    <p>Compact when number of gates is poly(log n)</p>
  </div>
  <div class="page">
    <p>Circuit Symmetric Games</p>
    <p>How hard can it get?  Represent each ua by a Boolean circuit</p>
    <p>general method for representing utility functions; complexity for other circuit-based models studied in e.g. [Schoenebeck &amp; Vadhan, 2006]</p>
    <p>Compact when number of gates is poly(log n)</p>
    <p>Theorem (Circuit symmetric games)</p>
    <p>When utilities are represented by Boolean circuits, and m  3, deciding if a PSNE exists is NP-complete.</p>
    <p>When m = 2, there exists at least one PSNE and a sample PSNE can be found in poly time.</p>
    <p>existence of PSNE for the m = 2 case was proved by [Cheng, Reeves, Vorobeychik &amp; Wellman 2004]; also follows from the fact that such a game is a potential game.</p>
  </div>
  <div class="page">
    <p>Piecewise-linear symmetric games</p>
    <p>We can do better by considering a natural subclass: piecewise-linear functions.</p>
  </div>
  <div class="page">
    <p>Piecewise-linear symmetric games</p>
    <p>We can do better by considering a natural subclass: piecewise-linear functions.</p>
    <p>Theorem (Informal version)</p>
    <p>When utilities are expressed as piecewise-linear functions, there</p>
    <p>exist polynomial time algorithms to decide if a PSNE exists and</p>
    <p>find a sample equilibrium.</p>
  </div>
  <div class="page">
    <p>PWL symmetric game</p>
  </div>
  <div class="page">
    <p>PWL symmetric game</p>
    <p>Domain of utility functions: configurations</p>
    <p>D =</p>
    <p>{</p>
    <p>x  Z m :</p>
    <p>aA</p>
    <p>xa = n, x  0</p>
    <p>}</p>
    <p>D</p>
    <p>x3</p>
    <p>x1</p>
    <p>x2</p>
    <p>n</p>
    <p>n</p>
    <p>n</p>
  </div>
  <div class="page">
    <p>PWL symmetric game</p>
    <p>Domain of utility functions: configurations</p>
    <p>D =</p>
    <p>{</p>
    <p>x  Z m :</p>
    <p>aA</p>
    <p>xa = n, x  0</p>
    <p>}</p>
    <p>D</p>
  </div>
  <div class="page">
    <p>PWL symmetric game</p>
    <p>Domain of utility functions: configurations</p>
    <p>D =</p>
    <p>{</p>
    <p>x  Z m :</p>
    <p>aA</p>
    <p>xa = n, x  0</p>
    <p>}</p>
    <p>Piecewise linear utilities: For each a  A:</p>
    <p>D =</p>
    <p>Pa,j Pa</p>
    <p>(Pa,j  Z m )</p>
    <p>Paj</p>
  </div>
  <div class="page">
    <p>PWL symmetric game</p>
    <p>Domain of utility functions: configurations</p>
    <p>D =</p>
    <p>{</p>
    <p>x  Z m :</p>
    <p>aA</p>
    <p>xa = n, x  0</p>
    <p>}</p>
    <p>Piecewise linear utilities: For each a  A:</p>
    <p>D =</p>
    <p>Pa,j Pa</p>
    <p>(Pa,j  Z m )</p>
    <p>Over each cell Pa,j  Z m there</p>
    <p>is an affine function fa,j (x) = a,j  x + a,j .</p>
    <p>faj(x)</p>
    <p>Paj</p>
  </div>
  <div class="page">
    <p>PWL symmetric game</p>
    <p>Domain of utility functions: configurations</p>
    <p>D =</p>
    <p>{</p>
    <p>x  Z m :</p>
    <p>aA</p>
    <p>xa = n, x  0</p>
    <p>}</p>
    <p>Piecewise linear utilities: For each a  A:</p>
    <p>D =</p>
    <p>Pa,j Pa</p>
    <p>(Pa,j  Z m )</p>
    <p>Over each cell Pa,j  Z m there</p>
    <p>is an affine function fa,j (x) = a,j  x + a,j .</p>
    <p>Piecing them together:</p>
    <p>ua(x) = fa,j (x) for x  Pa,j  Z m</p>
    <p>Compact when number of pieces |Pa| is poly(log n).</p>
    <p>ua(x)</p>
  </div>
  <div class="page">
    <p>Theorem (Formal version)</p>
    <p>Consider a symmetric game with PWL utilities</p>
    <p>given by the following input:</p>
    <p>the binary encoding of the number n of</p>
    <p>players;</p>
    <p>for each a  A, the utility function ua(x) represented as the binary encoding of the</p>
    <p>inequality description of each Paj and</p>
    <p>affine functions faj .</p>
    <p>ua(x)</p>
  </div>
  <div class="page">
    <p>Theorem (Formal version)</p>
    <p>Consider a symmetric game with PWL utilities</p>
    <p>given by the following input:</p>
    <p>the binary encoding of the number n of</p>
    <p>players;</p>
    <p>for each a  A, the utility function ua(x) represented as the binary encoding of the</p>
    <p>inequality description of each Paj and</p>
    <p>affine functions faj .</p>
    <p>Then, when the number of actions m is fixed,</p>
    <p>and even when the number of pieces are</p>
    <p>poly(log n), there exists</p>
    <p>PSNE.</p>
    <p>ua(x)</p>
  </div>
  <div class="page">
    <p>Tool of analysis  Encode the set of PSNE by a rational generating function.</p>
    <p>Leverage theory from encoding sets of polytopal lattice points.</p>
    <p>previously applied in combinatorics, optimization, compiler design [e.g. De Loera et al. 2007]</p>
  </div>
  <div class="page">
    <p>Tool of analysis  Encode the set of PSNE by a rational generating function.</p>
    <p>Leverage theory from encoding sets of polytopal lattice points.</p>
    <p>previously applied in combinatorics, optimization, compiler design [e.g. De Loera et al. 2007]</p>
    <p>D</p>
    <p>x3</p>
    <p>x1</p>
    <p>x2</p>
    <p>n</p>
    <p>n</p>
    <p>n</p>
  </div>
  <div class="page">
    <p>Generating function encoding</p>
    <p>Given S  Zn we represent the points as a generating function:</p>
    <p>g(S, w) =</p>
    <p>aS</p>
    <p>w a1 1 w</p>
    <p>a2 2    w</p>
    <p>an n</p>
  </div>
  <div class="page">
    <p>Generating function encoding</p>
    <p>Given S  Zn we represent the points as a generating function:</p>
    <p>g(S, w) =</p>
    <p>aS</p>
    <p>w a1 1 w</p>
    <p>a2 2    w</p>
    <p>an n</p>
    <p>wi are complex variables</p>
    <p>Point (2, 3) is encoded as monomial w21 w 3 2 .</p>
  </div>
  <div class="page">
    <p>Generating function encoding</p>
    <p>Given S  Zn we represent the points as a generating function:</p>
    <p>g(S, w) =</p>
    <p>aS</p>
    <p>w a1 1 w</p>
    <p>a2 2    w</p>
    <p>an n</p>
    <p>wi are complex variables</p>
    <p>Point (2, 3) is encoded as monomial w21 w 3 2 .</p>
    <p>Example</p>
    <p>S = {0, 1, . . . , 1000}</p>
  </div>
  <div class="page">
    <p>Generating function encoding</p>
    <p>Given S  Zn we represent the points as a generating function:</p>
    <p>g(S, w) =</p>
    <p>aS</p>
    <p>w a1 1 w</p>
    <p>a2 2    w</p>
    <p>an n</p>
    <p>wi are complex variables</p>
    <p>Point (2, 3) is encoded as monomial w21 w 3 2 .</p>
    <p>Example</p>
    <p>S = {0, 1, . . . , 1000}</p>
    <p>g(S, w) = 1 + w + w2 +    + w1000</p>
  </div>
  <div class="page">
    <p>Generating function encoding</p>
    <p>Given S  Zn we represent the points as a generating function:</p>
    <p>g(S, w) =</p>
    <p>aS</p>
    <p>w a1 1 w</p>
    <p>a2 2    w</p>
    <p>an n</p>
    <p>wi are complex variables</p>
    <p>Point (2, 3) is encoded as monomial w21 w 3 2 .</p>
    <p>Example</p>
    <p>S = {0, 1, . . . , 1000}</p>
    <p>g(S, w) = 1 + w + w2 +    + w1000</p>
    <p>g(S, w) = 1 1w</p>
    <p>w 1001</p>
  </div>
  <div class="page">
    <p>Barvinoks result (1994)</p>
    <p>Theorem</p>
    <p>Let P be a rational convex polytope, i.e. P = {x  Rm : Ax  b}. There is a polynomial time algorithm which computes a short</p>
    <p>rational generating function:</p>
    <p>g(P  Zm; w) =</p>
    <p>jJ</p>
    <p>j wcj</p>
    <p>(1  wdj1)(1  wdj2) . . . (1  wdjm) ,</p>
    <p>of the lattice points inside P when the dimension m is fixed. The</p>
    <p>number of terms in the sum is polynomially bounded and</p>
    <p>j  {1, 1}.</p>
  </div>
  <div class="page">
    <p>A Tale of Two Representations</p>
    <p>Lattice points: S</p>
  </div>
  <div class="page">
    <p>A Tale of Two Representations</p>
    <p>Inequality</p>
    <p>representation:</p>
    <p>{x : Ax  b, x  Zn}</p>
    <p>Data: A, b</p>
    <p>Lattice points: S</p>
  </div>
  <div class="page">
    <p>A Tale of Two Representations</p>
    <p>Inequality</p>
    <p>representation:</p>
    <p>{x : Ax  b, x  Zn}</p>
    <p>Data: A, b</p>
    <p>Lattice points: S</p>
    <p>Gen. Function Representation:</p>
    <p>jJ</p>
    <p>j</p>
    <p>wcj</p>
    <p>n k=1(1  w</p>
    <p>djk )</p>
    <p>Data: cj, djk</p>
  </div>
  <div class="page">
    <p>Accessing the points in a generating function encoding</p>
  </div>
  <div class="page">
    <p>Accessing the points in a generating function encoding</p>
    <p>Count the number of integer points in S in polynomial time. [Barvinok, 1994]</p>
  </div>
  <div class="page">
    <p>Accessing the points in a generating function encoding</p>
    <p>Count the number of integer points in S in polynomial time. [Barvinok, 1994]</p>
    <p>Example</p>
    <p>S = {0, 1, . . . , 1000}</p>
  </div>
  <div class="page">
    <p>Accessing the points in a generating function encoding</p>
    <p>Count the number of integer points in S in polynomial time. [Barvinok, 1994]</p>
    <p>Example</p>
    <p>S = {0, 1, . . . , 1000}  g(S, w) = 1 + w + w2 +    + w1000.</p>
    <p>Count: substitute w = 1, get g(S, 1) = 1001.</p>
  </div>
  <div class="page">
    <p>Accessing the points in a generating function encoding</p>
    <p>Count the number of integer points in S in polynomial time. [Barvinok, 1994]</p>
    <p>Example</p>
    <p>S = {0, 1, . . . , 1000}  g(S, w) = 1 + w + w2 +    + w1000.</p>
    <p>Count: substitute w = 1, get g(S, 1) = 1001.  g(S, w) = 1</p>
    <p>Count: take limit as w  1, get limw1 g(S, w) = 1001.</p>
  </div>
  <div class="page">
    <p>Accessing the points in a generating function encoding</p>
    <p>Count the number of integer points in S in polynomial time. [Barvinok, 1994]</p>
    <p>Example</p>
    <p>S = {0, 1, . . . , 1000}  g(S, w) = 1 + w + w2 +    + w1000.</p>
    <p>Count: substitute w = 1, get g(S, 1) = 1001.  g(S, w) = 1</p>
    <p>Count: take limit as w  1, get limw1 g(S, w) = 1001.</p>
    <p>Enumerate the elements of S: There exists a polynomial-delay enumeration algorithm which outputs the elements of S. [De Loera et al. 2007]</p>
  </div>
  <div class="page">
    <p>More ways to encode (Barvinok-Woods, 2003)</p>
  </div>
  <div class="page">
    <p>More ways to encode (Barvinok-Woods, 2003)</p>
    <p>Boolean combinations:</p>
    <p>S2</p>
    <p>S1</p>
  </div>
  <div class="page">
    <p>More ways to encode (Barvinok-Woods, 2003)</p>
    <p>Boolean combinations:</p>
    <p>S1 \ S2</p>
  </div>
  <div class="page">
    <p>More ways to encode (Barvinok-Woods, 2003)</p>
    <p>Boolean combinations:</p>
    <p>S1 \ S2</p>
    <p>Disjoint unions:</p>
    <p>g(S1  S2, w) = g(S1, w) + g(S2, w)</p>
    <p>S1 S2</p>
  </div>
  <div class="page">
    <p>Key insight into proof: Express PSNE via polytopes</p>
    <p>Want to encode N, the set of PSNE configurations</p>
    <p>x  N  a  A : (xa = 0) OR (a   A, ua(x)  ua (x+ea ea))</p>
    <p>D is the set of configurations and candidate equilibria:</p>
    <p>D =</p>
    <p>{</p>
    <p>x  Zm :</p>
    <p>aA</p>
    <p>xa = n, x  0</p>
    <p>}</p>
    <p>D</p>
    <p>x1</p>
    <p>x2</p>
  </div>
  <div class="page">
    <p>Key insight into proof: Express PSNE via polytopes</p>
    <p>Want to encode N, the set of PSNE configurations</p>
    <p>x  N  a  A : (xa = 0) OR (a   A, ua(x)  ua (x+ea ea))</p>
    <p>D is the set of configurations and candidate equilibria:</p>
    <p>D =</p>
    <p>{</p>
    <p>x  Zm :</p>
    <p>aA</p>
    <p>xa = n, x  0</p>
    <p>}</p>
    <p>Da,a those configurations where it is profitable for a player playing action a to deviate.</p>
    <p>Da,a</p>
    <p>x1</p>
    <p>x2</p>
  </div>
  <div class="page">
    <p>Key insight into proof: Express PSNE via polytopes</p>
    <p>Want to encode N, the set of PSNE configurations</p>
    <p>x  N  a  A : (xa = 0) OR (a   A, ua(x)  ua (x+ea ea))</p>
    <p>D is the set of configurations and candidate equilibria:</p>
    <p>D =</p>
    <p>{</p>
    <p>x  Zm :</p>
    <p>aA</p>
    <p>xa = n, x  0</p>
    <p>}</p>
    <p>Da,a those configurations where it is profitable for a player playing action a to deviate.</p>
    <p>N = D \</p>
    <p>a,aA</p>
    <p>Da,a</p>
    <p>N</p>
    <p>x1</p>
    <p>x2</p>
  </div>
  <div class="page">
    <p>Expressing Da,a</p>
    <p>Da,a =</p>
    <p>Pa,j Pa</p>
    <p>Pa,j Pa</p>
    <p>x  D : xa  1, x  Pa,j, x = x + ea  ea  Pa,j</p>
    <p>fa,j(x)  fa,j(x )  1</p>
  </div>
  <div class="page">
    <p>Expressing Da,a</p>
    <p>Da,a =</p>
    <p>Pa,j Pa</p>
    <p>Pa,j Pa</p>
    <p>x  D : xa  1, x  Pa,j, x = x + ea  ea  Pa,j</p>
    <p>fa,j(x)  fa,j(x )  1</p>
    <p>Polynomial number of disjoint unions</p>
    <p>Once the pieces Pa,j and Pa,j fixed, can formulate profitable deviation as a set of linear constraints</p>
  </div>
  <div class="page">
    <p>Expressing Da,a</p>
    <p>Da,a =</p>
    <p>Pa,j Pa</p>
    <p>Pa,j Pa</p>
    <p>x  D : xa  1, x  Pa,j, x = x + ea  ea  Pa,j</p>
    <p>fa,j(x)  fa,j(x )  1</p>
    <p>Polynomial number of disjoint unions</p>
    <p>Once the pieces Pa,j and Pa,j fixed, can formulate profitable deviation as a set of linear constraints</p>
    <p>xa  1: at least one player chose a</p>
  </div>
  <div class="page">
    <p>Expressing Da,a</p>
    <p>Da,a =</p>
    <p>Pa,j Pa</p>
    <p>Pa,j Pa</p>
    <p>x  D : xa  1, x  Pa,j, x = x + ea  ea  Pa,j</p>
    <p>fa,j(x)  fa,j(x )  1</p>
    <p>Polynomial number of disjoint unions</p>
    <p>Once the pieces Pa,j and Pa,j fixed, can formulate profitable deviation as a set of linear constraints</p>
    <p>xa  1: at least one player chose a  x = x + ea  ea: result of deviating from a to a</p>
  </div>
  <div class="page">
    <p>Expressing Da,a</p>
    <p>Da,a =</p>
    <p>Pa,j Pa</p>
    <p>Pa,j Pa</p>
    <p>x  D : xa  1, x  Pa,j, x = x + ea  ea  Pa,j</p>
    <p>fa,j(x)  fa,j(x )  1</p>
    <p>Polynomial number of disjoint unions</p>
    <p>Once the pieces Pa,j and Pa,j fixed, can formulate profitable deviation as a set of linear constraints</p>
    <p>xa  1: at least one player chose a  x = x + ea  ea: result of deviating from a to a</p>
    <p>fa,j(x)  fa,j(x )  1: since utilities are integers, equivalent to</p>
    <p>fa,j(x) &lt; fa,j(x )</p>
  </div>
  <div class="page">
    <p>Expressing Da,a</p>
    <p>Da,a =</p>
    <p>Pa,j Pa</p>
    <p>Pa,j Pa</p>
    <p>x  D : xa  1, x  Pa,j, x = x + ea  ea  Pa,j</p>
    <p>fa,j(x)  fa,j(x )  1</p>
    <p>Polynomial number of disjoint unions</p>
    <p>Once the pieces Pa,j and Pa,j fixed, can formulate profitable deviation as a set of linear constraints</p>
    <p>xa  1: at least one player chose a  x = x + ea  ea: result of deviating from a to a</p>
    <p>fa,j(x)  fa,j(x )  1: since utilities are integers, equivalent to</p>
    <p>fa,j(x) &lt; fa,j(x )</p>
    <p>Therefore N can be expressed as a short rational generating function</p>
  </div>
  <div class="page">
    <p>Expressing Da,a</p>
    <p>Da,a =</p>
    <p>Pa,j Pa</p>
    <p>Pa,j Pa</p>
    <p>x  D : xa  1, x  Pa,j, x = x + ea  ea  Pa,j</p>
    <p>fa,j(x)  fa,j(x )  1</p>
    <p>Polynomial number of disjoint unions</p>
    <p>Once the pieces Pa,j and Pa,j fixed, can formulate profitable deviation as a set of linear constraints</p>
    <p>xa  1: at least one player chose a  x = x + ea  ea: result of deviating from a to a</p>
    <p>fa,j(x)  fa,j(x )  1: since utilities are integers, equivalent to</p>
    <p>fa,j(x) &lt; fa,j(x )</p>
    <p>Therefore N can be expressed as a short rational generating function</p>
    <p>Can check existence of PSNE via counting operation; find a sample PSNE via enumeration operation.</p>
  </div>
  <div class="page">
    <p>Other results</p>
    <p>Find a PSNE that approximately optimizes the sum of the utilities (FPTAS).</p>
    <p>Encode the PSNEs of a parameterized family of symmetric games with utility pieces:</p>
    <p>fa,j(x, p) = a,j  x + a,j  p,</p>
    <p>where p is a fixed dimensional integer vector of parameters inside a polytope.</p>
  </div>
  <div class="page">
    <p>Other results</p>
    <p>Find a PSNE that approximately optimizes the sum of the utilities (FPTAS).</p>
    <p>Encode the PSNEs of a parameterized family of symmetric games with utility pieces:</p>
    <p>fa,j(x, p) = a,j  x + a,j  p,</p>
    <p>where p is a fixed dimensional integer vector of parameters inside a polytope.</p>
    <p>Answer questions about PSNEs of the family of games without solving each game</p>
    <p>e.g. finding parameter p that optimizes some objective.</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>computing PSNE for symmetric games with fixed number of actions, focusing on compact representations of utility: poly(log n) bits</p>
    <p>circuit symmetric games: NP-complete when at least 3 actions</p>
    <p>symmetric games with piecewise-linear utility: polynomial-time algorithms</p>
    <p>encode set of PSNE as a rational generating function</p>
    <p>Thanks!</p>
  </div>
</Presentation>
