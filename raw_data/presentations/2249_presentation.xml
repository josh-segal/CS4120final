<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Towards an Unwritten Contract of Intel Optane SSD</p>
    <p>Kan Wu, Andrea Arpaci-Dusseau, and Remzi Arpaci-Dusseau</p>
  </div>
  <div class="page">
    <p>HotStorage 19</p>
    <p>Outline Background &amp; Motivation</p>
    <p>An Unwritten Contract of Intel Optane SSD</p>
    <p>Implications from the Contract</p>
    <p>Discussion</p>
  </div>
  <div class="page">
    <p>HotStorage 19</p>
    <p>Background</p>
    <p>New Non-volatile Memory technologies provide unprecedented performance for persistent storage</p>
    <p>Intel Optane Memory Intel Optane SSD Intel Optane DC Persistent Memory</p>
  </div>
  <div class="page">
    <p>HotStorage 19</p>
    <p>Background: Intel Optane SSD</p>
    <p>The most cost-effective and widely available option</p>
    <p>Intel Optane SSD</p>
  </div>
  <div class="page">
    <p>HotStorage 19</p>
    <p>Motivation</p>
    <p>How to use it effectively? Intel Optane SSD</p>
  </div>
  <div class="page">
    <p>HotStorage 19</p>
    <p>How to use a device effectively?</p>
    <p>The Written Contract</p>
    <p>HDD: (Steven et al.) Sequential accesses are the best,</p>
    <p>much better than non-sequential.</p>
    <p>Intel Optane SSD</p>
    <p>The Unwritten Contract</p>
    <p>SSD : (Jun et al.) - Large Request Scale - Locality - Grouping by Death Time -</p>
  </div>
  <div class="page">
    <p>An Unwritten Contract of Intel Optane SSD</p>
  </div>
  <div class="page">
    <p>HotStorage 19</p>
    <p>An Unwritten Contract of Intel Optane SSD Immediate performance: (6)</p>
    <p>Access with Low Request Scale Rule Random Access is OK Rule Avoid Crowded Accesses Rule Control Overall Load Rule Avoid Tiny Accesses Rule Issue 4KB Aligned Requests Rule</p>
    <p>Sustainable performance: (1) Forget Garbage Collection Rule</p>
  </div>
  <div class="page">
    <p>HotStorage 19</p>
    <p>An Unwritten Contract of Intel Optane SSD Rule 1:Access with Low Request Scale Rule 4: Control Overall Load</p>
    <p>DRAM Persistent Memory</p>
    <p>Intel Optane SSD</p>
    <p>Flash SSD</p>
    <p>DRAM Persistent Memory</p>
    <p>Intel Optane SSD</p>
    <p>Flash SSD</p>
    <p>Storage Hierarchy Expected Real</p>
  </div>
  <div class="page">
    <p>HotStorage 19</p>
    <p>Rule 1:Access with Low Request Scale Motivation:</p>
    <p>What is the rule? To obtain low latency, Optane SSD users should issue small requests and maintain a small number of outstanding IOs</p>
  </div>
  <div class="page">
    <p>HotStorage 19</p>
    <p>Rule 1:Access with Low Request Scale Optane SSD vs. Samsung 970 Pro:</p>
    <p>What we do: Random read-only / write-only workloads Each workload has two variables: Request Size and Queue Depth</p>
  </div>
  <div class="page">
    <p>HotStorage 19</p>
    <p>Rule 1:Access with Low Request Scale Optane SSD vs. Samsung 970 Pro:</p>
    <p>What we observe: Similar Write Results (in paper) Optane SSD &gt; / = / &lt; Flash SSD</p>
    <p>eq ue</p>
    <p>st S</p>
    <p>iz e</p>
    <p>(K B</p>
    <p>)</p>
    <p>optane better</p>
    <p>flash better</p>
    <p>5.0</p>
    <p>2.5</p>
    <p>|T| = &quot;#$%#&amp;' ( &quot;)*+&amp;'</p>
    <p>&quot;)*+&amp;' T &gt; 0 when Optane has smaller latency T &lt; 0 when Flash has smaller latency</p>
    <p>Read</p>
    <p>Avg Latency of random workloads, Optane vs. Flash Real</p>
  </div>
  <div class="page">
    <p>HotStorage 19</p>
    <p>Rule 1:Access with Low Request Scale Uncover the internals of the Optane SSD</p>
    <p>Internal parallelism dictates its behavior when serving workloads with high request scale</p>
    <p>Optane SSD: RAID-like organization of memory dies The interleaving degree (#channels)</p>
    <p>Channel #2Channel #7 Channel #1</p>
    <p>Controller</p>
    <p>RAID-like Architecture in Optane SSD</p>
  </div>
  <div class="page">
    <p>HotStorage 19</p>
    <p>Rule 1:Access with Low Request Scale Detecting Interleaving Degree of Optane SSD:</p>
    <p>What we do: (Feng et al.(HPCA 11),Timothy et al.(ASPLOS 04)) Precondition: sequential writes =&gt; evenly distribute 4KB (chunk) read stream with stride S ( S = distance between consecutive chunks)</p>
    <p>Different S =&gt; Different throughput</p>
    <p>Chunk 1</p>
    <p>Channel #1</p>
    <p>Chunk 5 Chunk 9 Chunk 13</p>
    <p>Chunk</p>
    <p>Chunk 2</p>
    <p>Channel #2</p>
    <p>Chunk 6 Chunk 10</p>
    <p>Chunk 14</p>
    <p>Chunk</p>
    <p>Chunk 3</p>
    <p>Channel #3</p>
    <p>Chunk 7 Chunk 11</p>
    <p>Chunk 15</p>
    <p>Chunk</p>
    <p>Chunk 4</p>
    <p>Channel #4</p>
    <p>Chunk 8 Chunk 12</p>
    <p>Chunk 16</p>
    <p>Chunk</p>
    <p>Chunk Layout</p>
  </div>
  <div class="page">
    <p>HotStorage 19</p>
    <p>Rule 1:Access with Low Request Scale Detecting Interleaving Degree of Optane SSD:</p>
    <p>What we do: Precondition: sequential writes 4KB (chunk) read stream with stride S ( S = distance between consecutive chunks)</p>
    <p>Chunk 1</p>
    <p>Channel #1</p>
    <p>Chunk 5 Chunk 9 Chunk 13</p>
    <p>Chunk</p>
    <p>Chunk 2</p>
    <p>Channel #2</p>
    <p>Chunk 6 Chunk 10</p>
    <p>Chunk 14</p>
    <p>Chunk</p>
    <p>Chunk 3</p>
    <p>Channel #3</p>
    <p>Chunk 7 Chunk 11</p>
    <p>Chunk 15</p>
    <p>Chunk</p>
    <p>Chunk 4</p>
    <p>Channel #4</p>
    <p>Chunk 8 Chunk 12</p>
    <p>Chunk 16</p>
    <p>Chunk</p>
    <p>Chunk Layout</p>
    <p>S = 0 (chunk), QD = 4 Performance</p>
  </div>
  <div class="page">
    <p>HotStorage 19</p>
    <p>Rule 1:Access with Low Request Scale Detecting Interleaving Degree of Optane SSD:</p>
    <p>What we do: Precondition: sequential writes 4KB (chunk) read stream with stride S ( S = distance between consecutive chunks)</p>
    <p>Chunk 1</p>
    <p>Channel #1</p>
    <p>Chunk 5 Chunk 9 Chunk 13</p>
    <p>Chunk</p>
    <p>Chunk 2</p>
    <p>Channel #2</p>
    <p>Chunk 6 Chunk 10</p>
    <p>Chunk 14</p>
    <p>Chunk</p>
    <p>Chunk 3</p>
    <p>Channel #3</p>
    <p>Chunk 7 Chunk 11</p>
    <p>Chunk 15</p>
    <p>Chunk</p>
    <p>Chunk 4</p>
    <p>Channel #4</p>
    <p>Chunk 8 Chunk 12</p>
    <p>Chunk 16</p>
    <p>Chunk</p>
    <p>Chunk Layout</p>
    <p>S = 1 (chunk), QD = 4 Performance</p>
  </div>
  <div class="page">
    <p>HotStorage 19</p>
    <p>Rule 1:Access with Low Request Scale Detecting Interleaving Degree of Optane SSD:</p>
    <p>What we do: Precondition: sequential writes 4KB (chunk) read stream with stride S ( S = distance between consecutive chunks)</p>
    <p>Chunk 1</p>
    <p>Channel #1</p>
    <p>Chunk 5 Chunk 9 Chunk 13</p>
    <p>Chunk</p>
    <p>Chunk 2</p>
    <p>Channel #2</p>
    <p>Chunk 6 Chunk 10</p>
    <p>Chunk 14</p>
    <p>Chunk</p>
    <p>Chunk 3</p>
    <p>Channel #3</p>
    <p>Chunk 7 Chunk 11</p>
    <p>Chunk 15</p>
    <p>Chunk</p>
    <p>Chunk 4</p>
    <p>Channel #4</p>
    <p>Chunk 8 Chunk 12</p>
    <p>Chunk 16</p>
    <p>Chunk</p>
    <p>Chunk Layout</p>
    <p>S = 3 (chunk), QD = 4 Performance</p>
  </div>
  <div class="page">
    <p>HotStorage 19</p>
    <p>Rule 1:Access with Low Request Scale Detecting Interleaving Degree of Optane SSD:</p>
    <p>What we observe: Intuition:</p>
    <p>Distance between the lowest dips in each line =&gt; the interleaving degree</p>
    <p>Optane SSD Flash SSD</p>
  </div>
  <div class="page">
    <p>HotStorage 19</p>
    <p>Rule 1:Access with Low Request Scale Detecting Interleaving Degree of Optane SSD:</p>
    <p>What we observe: Internal parallelism: Optane SSD (7) &lt;&lt; Flash SSD (128) Explains Optane SSDs worse behavior serving workloads with high request scale</p>
    <p>Optane SSD Flash SSD</p>
  </div>
  <div class="page">
    <p>HotStorage 19</p>
    <p>Rule 4: Control Overall Load Motivation:</p>
    <p>Optane SSD facing mixed (read and write) workloads?</p>
    <p>What is the rule? Distinctive from Flash SSD! To achieve optimal latency from Optane SSD, the client must control the overall load of both reads and writes.</p>
  </div>
  <div class="page">
    <p>HotStorage 19</p>
    <p>Rule 4: Control Overall Load Experiments: Optane SSD serving mixed workloads</p>
    <p>What we do? Random 4KB requests (reads + writes, QD=64), varying write%</p>
  </div>
  <div class="page">
    <p>HotStorage 19</p>
    <p>Rule 4: Control Overall Load Experiments: Optane SSD serving mixed workloads</p>
    <p>What we observe? Optane SSD (throughput yield similar results)</p>
    <p>Reads = Writes; Latency is related to the overall load, not to write%</p>
  </div>
  <div class="page">
    <p>HotStorage 19</p>
    <p>Rule 4: Control Overall Load Experiments: Optane SSD serving mixed workloads</p>
    <p>What we observe? Optane SSD vs. Flash SSD: distinctive behavior</p>
  </div>
  <div class="page">
    <p>HotStorage 19</p>
    <p>An Unwritten Contract of Intel Optane SSD Rule 1:Access with Low Request Scale Rule 4: Control Overall Load</p>
    <p>DRAM Persistent Memory</p>
    <p>Intel Optane SSD</p>
    <p>Flash SSD</p>
    <p>DRAM Persistent Memory</p>
    <p>Intel Optane SSD</p>
    <p>Flash SSD</p>
    <p>Storage Hierarchy Expected Real</p>
  </div>
  <div class="page">
    <p>Other Rules</p>
  </div>
  <div class="page">
    <p>HotStorage 19</p>
    <p>Rule 2: Random Access is OK Motivation:</p>
    <p>Optane SSD: Random vs. Sequential?</p>
    <p>What is the rule? Optane SSD is a random access block device, where clients can observe the same performance for random and sequential workloads</p>
  </div>
  <div class="page">
    <p>HotStorage 19</p>
    <p>Rule 3, Rule 5, Rule 6 Motivation:</p>
    <p>Byte-addressability of 3D XPoint Memory =&gt; Efficient tiny accesses to Optane SSD?</p>
    <p>What is the rule? Rule 3:Avoid Crowded Accesses (4.6x)</p>
    <p>Clients of Optane SSD should never issue parallel accesses to a single chunk (4KB)</p>
    <p>Rule 5:Avoid Tiny Accesses (5x) To exploit bandwidth of the SSD, the client must not issue requests less than 4KB.</p>
    <p>Rule 6: Issue 4KB Aligned Requests (1.2x) To achieve the best latency, requests issued to Optane SSD should always align to eight sectors.</p>
  </div>
  <div class="page">
    <p>HotStorage 19</p>
    <p>Rule 7: Forget Garbage Collection Motivation:</p>
    <p>Optane SSD maintains MAX throughput for sustained writes Insights of this? Optane: LBA-based mapping vs. Flash : written-order based</p>
    <p>What is the rule? There is no need to worry about garbage collection in Optane SSD.</p>
  </div>
  <div class="page">
    <p>HotStorage 19</p>
    <p>An Unwritten Contract of Intel Optane SSD Immediate performance: (6)</p>
    <p>Access with Low Request Scale Rule Random Access is OK Rule Avoid Crowded Accesses Rule Control Overall Load Rule Avoid Tiny Accesses Rule Issue 4KB Aligned Requests Rule</p>
    <p>Sustainable performance: (1) Forget Garbage Collection Rule</p>
    <p>(Feedback) More interesting questions to answer?</p>
  </div>
  <div class="page">
    <p>HotStorage 19</p>
    <p>Implications from the Contract Users design systems for Optane SSD</p>
    <p>Random Access is Okay. Restructuring of external data structures</p>
    <p>Much effort: random -&gt; sequential accesses ; Less necessary E.g. Single Machine Graph Processing Systems (Nima Elyasi et al. FAST19)</p>
    <p>Applications which behave poorly on Flash thus become potential consumers</p>
    <p>No Crowded Accesses, No Tiny Access, and Alignment rule Pitfalls that fine-grained external data structure must be aware</p>
  </div>
  <div class="page">
    <p>HotStorage 19</p>
    <p>Implications from the Contract Users who combine Flash and Optane in a hybrid setting</p>
    <p>Access with Low Request Scale Rule Control Overall Load Rule Forget Garbage Collection Rule</p>
    <p>Classic concept of hierarchy need to be reconsidered</p>
    <p>How to split accesses?</p>
    <p>DRAM Persistent Memory</p>
    <p>Intel Optane SSD</p>
    <p>Flash SSD</p>
    <p>Real</p>
  </div>
  <div class="page">
    <p>HotStorage 19</p>
    <p>Conclusion</p>
    <p>We analyze a NVM-based block device: the Intel Optane SSD We formalize the rules that Optane SSD users should follow Implications from this Contract</p>
    <p>Interesting thing we can do with the contract?</p>
  </div>
  <div class="page">
    <p>HotStorage 19</p>
    <p>Acknowledgement</p>
  </div>
  <div class="page">
    <p>Thanks! Questions?</p>
  </div>
</Presentation>
