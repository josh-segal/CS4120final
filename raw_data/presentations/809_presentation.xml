<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Teaching with angr: A Symbolic Execution Curriculum and CTF</p>
    <p>Jacob M. Springer1,2, Wu-chang Feng1</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>What is symbolic execution?  How do we teach it?</p>
  </div>
  <div class="page">
    <p>Symbolic execution: why should you care?</p>
  </div>
  <div class="page">
    <p>Symbolic execution: why should you care?  Program analysis and testing</p>
  </div>
  <div class="page">
    <p>Symbolic execution: why should you care?  Program analysis and testing  Microsoft applications (PowerPoint, Word, etc.)</p>
  </div>
  <div class="page">
    <p>Symbolic execution: why should you care?  Program analysis and testing  Microsoft applications (PowerPoint, Word, etc.)  DARPA's Cyber-Grand Challenge</p>
  </div>
  <div class="page">
    <p>Symbolic execution: why should you care?  Program analysis and testing  Microsoft applications (PowerPoint, Word, etc.)  DARPA's Cyber-Grand Challenge  Important for students to understand and apply</p>
  </div>
  <div class="page">
    <p>What is symbolic execution?</p>
  </div>
  <div class="page">
    <p>Find input to print Good Job.</p>
  </div>
  <div class="page">
    <p>#define SECRET 100 int check_code(int input) { if (input &gt;= SECRET+88) return 0; if (input &gt; SECRET+100) return 0; if (input == SECRET+68) return 0; if (input &lt; SECRET) return 0; if (input &lt;= SECRET+78) return 0; if (input &amp; 0x1) return 0; if (input &amp; 0x2) return 0; if (input &amp; 0x4) return 0; return 1; }</p>
    <p>Execution paths can be represented as a tree.</p>
    <p>if (input &gt; SECRET+100)</p>
    <p>if (input == SECRET+68)</p>
    <p>if (input &lt; SECRET)</p>
    <p>if (input &lt;= SECRET+78)</p>
    <p>if (input &amp; 0x1)</p>
    <p>if (input &amp; 0x2)</p>
    <p>if (input &amp; 0x4)</p>
    <p>return 0;</p>
    <p>return 0;</p>
    <p>return 0;</p>
    <p>return 0;</p>
    <p>return 0;</p>
    <p>return 0;</p>
    <p>return 0;</p>
    <p>return 0; return 1;</p>
    <p>if (input &gt;= SECRET+88)</p>
  </div>
  <div class="page">
    <p>Animation: Building a Set of Paths</p>
    <p>if (input &gt;= SECRET+88)</p>
    <p>Legend: Blue = already executed Yellow = active Red = terminated</p>
  </div>
  <div class="page">
    <p>Animation: Building a Set of Paths</p>
    <p>if (input &gt;= SECRET+88)</p>
    <p>if (input &gt; SECRET+100)return 0;</p>
    <p>Legend: Blue = already executed Yellow = active Red = terminated</p>
  </div>
  <div class="page">
    <p>Animation: Building a Set of Paths</p>
    <p>if (input &gt;= SECRET+88)</p>
    <p>if (input &gt; SECRET+100)</p>
    <p>if (input == SECRET+68)</p>
    <p>return 0;</p>
    <p>return 0;</p>
    <p>Legend: Blue = already executed Yellow = active Red = terminated</p>
  </div>
  <div class="page">
    <p>Animation: Building a Set of Paths</p>
    <p>if (input &gt;= SECRET+88)</p>
    <p>if (input &gt; SECRET+100)</p>
    <p>if (input == SECRET+68)</p>
    <p>if (input &lt; SECRET)</p>
    <p>if (input &lt;= SECRET+78)</p>
    <p>if (input &amp; 0x1)</p>
    <p>if (input &amp; 0x2)</p>
    <p>if (input &amp; 0x4)</p>
    <p>return 0;</p>
    <p>return 0;</p>
    <p>return 0;</p>
    <p>return 0;</p>
    <p>return 0;</p>
    <p>return 0;</p>
    <p>return 0;</p>
    <p>return 0;</p>
    <p>Legend: Blue = already executed Yellow = active Red = terminated</p>
    <p>return 1;</p>
    <p>We found what we wanted!</p>
  </div>
  <div class="page">
    <p>Applying symbolic execution</p>
    <p>if (input &gt;= SECRET+88)</p>
    <p>if (input &gt; SECRET+100)</p>
    <p>if (input == SECRET+68)</p>
    <p>if (input &lt; SECRET)</p>
    <p>if (input &lt;= SECRET+78)</p>
    <p>if (input &amp; 0x1)</p>
    <p>if (input &amp; 0x2)</p>
    <p>if (input &amp; 0x4)</p>
    <p>return 1;</p>
    <p>Once we have a path, we can build an equation that can be solved by the computer:</p>
    <p>input &gt;= SECRET+88  input &gt; SECRET+100  input == SECRET+68  input &lt; SECRET  input &lt;= SECRET+78  input &amp; 0x1  input &amp; 0x2  input &amp; 0x4</p>
  </div>
  <div class="page">
    <p>Angr-y CTF</p>
    <p>Goal: Build a curriculum and a set of capture-the-flag (CTF) levels to introduce students to symbolic execution</p>
  </div>
  <div class="page">
    <p>Our Approach</p>
  </div>
  <div class="page">
    <p>Our Approach Modeled after MetaCTF (USENIX 3GSE 2015)</p>
    <p>Find a password that causes a program to print &quot;Good Job.&quot;</p>
  </div>
  <div class="page">
    <p>Our Approach Modeled after MetaCTF (USENIX 3GSE 2015)</p>
    <p>Find a password that causes a program to print &quot;Good Job.&quot;</p>
    <p>Requires symbolic execution to solve</p>
  </div>
  <div class="page">
    <p>Our Approach Modeled after MetaCTF (USENIX 3GSE 2015)</p>
    <p>Find a password that causes a program to print &quot;Good Job.&quot;</p>
    <p>Requires symbolic execution to solve</p>
    <p>Uses angr (angr.io)</p>
  </div>
  <div class="page">
    <p>A typical level</p>
  </div>
  <div class="page">
    <p>A typical level  Student receives a binary and a template angr script</p>
  </div>
  <div class="page">
    <p>A typical level  Student receives a binary and a template angr script  Student edits the template to analyze the binary</p>
  </div>
  <div class="page">
    <p>A typical level  Student receives a binary and a template angr script  Student edits the template to analyze the binary  Student runs the script which prints a password</p>
  </div>
  <div class="page">
    <p>A typical level  Student receives a binary and a template angr script  Student edits the template to analyze the binary  Student runs the script which prints a password  Student runs the binary and types in the password to confirm their work</p>
  </div>
  <div class="page">
    <p>The levels are scaffolded</p>
  </div>
  <div class="page">
    <p>What does scaffolding mean?  Support structure, just like a</p>
    <p>scaffold  Guided, incremental introduction</p>
    <p>of concepts</p>
  </div>
  <div class="page">
    <p>CTF Modules  Basic symbolic execution  Symbol injection  Handling complexity  Automated exploitation</p>
  </div>
  <div class="page">
    <p>Scaffolding for pedagogy: not frustrating  Level 1  Well documented  Only need to change two lines</p>
  </div>
  <div class="page">
    <p>Scaffolding for pedagogy: guided  Tells student</p>
    <p>how to get started</p>
  </div>
  <div class="page">
    <p>Scaffolding: simple</p>
  </div>
  <div class="page">
    <p>MetaCTF Example</p>
  </div>
  <div class="page">
    <p>Scaffolding: builds on previous concepts</p>
  </div>
  <div class="page">
    <p>Scaffolding: incremental and reinforcing  Level 02 (find_condition)</p>
    <p>Level 03 (symbolic_registers)</p>
  </div>
  <div class="page">
    <p>Scaffolding: incremental and reinforcing  Level 02 (find_condition)</p>
    <p>1. Load binary  2. Define the termination condition (Has the program printed Good</p>
    <p>Job.?)  3. Search binary for condition</p>
    <p>Level 03 (symbolic_registers)</p>
  </div>
  <div class="page">
    <p>Scaffolding: incremental and reinforcing  Level 02 (find_condition)</p>
    <p>1. Load binary  2. Define the termination condition (Has the program printed Good</p>
    <p>Job.?)  3. Search binary for condition</p>
    <p>Level 03 (symbolic_registers)  1. Load binary  2. Inject symbols  3. Define the termination condition (Has the program printed Good</p>
    <p>Job.?)  4. Search binary for condition</p>
  </div>
  <div class="page">
    <p>Scaffolding: conceptual  First glance:</p>
    <p>seems complicated</p>
  </div>
  <div class="page">
    <p>Scaffolding: conceptual, part 2</p>
  </div>
  <div class="page">
    <p>What does metamorphic mean?  Different SECRET for</p>
    <p>every student  Can generate arbitrary</p>
    <p>C code</p>
  </div>
  <div class="page">
    <p>Metamorphic levels  Reduce cheating  Allow reuse  Maintain consistency of difficulty across students</p>
  </div>
  <div class="page">
    <p>Evaluation  Offered Winter 2018 in Portland State University's CS 492/592: Malware</p>
    <p>course  Last 2 weeks focused on symbolic execution</p>
    <p>Survey given at the end of two weeks  33 of 42 responded</p>
  </div>
  <div class="page">
    <p>Results Curriculum and scaffolding allow students to complete most levels</p>
    <p>Completion percentage Number of students</p>
    <p>Below 75% 7</p>
  </div>
  <div class="page">
    <p>Survey  Ratings evaluate helpfulness of curriculum and CTF</p>
    <p>Very Unhelpful = 1  Very Helpful = 5</p>
    <p>Q1: Rate the lecture material for understanding the concepts</p>
    <p>Q2: Rate the CTF exercises for understanding the concepts</p>
    <p>Rating 1 2 3 4 5 Mean</p>
    <p>Q1 1 1 2 17 12 4.15</p>
    <p>Rating 1 2 3 4 5 Mean</p>
    <p>Q2 2 1 3 18 9 3.94</p>
  </div>
  <div class="page">
    <p>Survey  Q3: Rate the CTF exercises for developing skills in using symbolic execution</p>
    <p>techniques</p>
    <p>Rating 1 2 3 4 5 Mean</p>
    <p>Q3 1 3 3 16 10 3.94</p>
  </div>
  <div class="page">
    <p>Try the CTF!</p>
    <p>https://malware.oregonctf.org</p>
    <p>Also on GitHub http://github.com/jakespringer/angr_ctf</p>
  </div>
</Presentation>
