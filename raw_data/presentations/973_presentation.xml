<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Subversive-C: Abusing and Protecting Dynamic Message</p>
    <p>Dispatch</p>
    <p>Julian Lettner, Benjamin Kollenda, Andrei Homescu,</p>
    <p>Per Larsen, Felix Schuster, Lucas Davi,</p>
    <p>Ahmad-Reza Sadeghi, Thorsten Holz, Michael Franz</p>
  </div>
  <div class="page">
    <p>Control Flows</p>
    <p>return jump icall vcall msgSend</p>
    <p>canaries</p>
    <p>shadow stacks</p>
    <p>safestack control-flow integrity</p>
    <p>virtual table randomization</p>
  </div>
  <div class="page">
    <p>Control Flow Hijacking</p>
    <p>addr = Load(A);</p>
    <p>Goto(addr);</p>
    <p>fn ptr</p>
    <p>variable A function foo</p>
  </div>
  <div class="page">
    <p>Control Flow Hijacking</p>
    <p>addr = Load(A);</p>
    <p>Goto(addr);</p>
    <p>fn ptr</p>
    <p>variable A function foo</p>
    <p>system(/bin/sh)</p>
  </div>
  <div class="page">
    <p>Objective-C Good ol C</p>
    <p>Smalltalk-style object orientation</p>
  </div>
  <div class="page">
    <p>Message Dispatch</p>
    <p>C++</p>
    <p>A *obj = new A;</p>
    <p>obj-&gt;foo();</p>
    <p>Caller calls a method in object</p>
    <p>Resolved using vtables</p>
    <p>Static class structure</p>
    <p>Objective-C</p>
    <p>A *obj = [[A alloc] init];</p>
    <p>[obj foo];</p>
    <p>Caller sends a message to object</p>
    <p>Resolved dynamically at run-time</p>
    <p>Dynamic class structure</p>
  </div>
  <div class="page">
    <p>Class Mutability</p>
    <p>void fooIMP(id self, SEL _cmd) {}</p>
    <p>A *obj = [[A alloc] init];</p>
    <p>class_addMethod([obj class], @selector(foo),</p>
    <p>(IMP) fooIMP, v@:);</p>
    <p>[obj foo];</p>
  </div>
  <div class="page">
    <p>Fast</p>
    <p>Path</p>
    <p>Slow</p>
    <p>Path</p>
  </div>
  <div class="page">
    <p>Object Layout</p>
  </div>
  <div class="page">
    <p>Attacker Model</p>
    <p>Arbitrary memory read (information disclosure)</p>
    <p>Arbitrary memory write</p>
    <p>No other control flow hijacking  No code injection</p>
    <p>No code reuse (ROP, COOP, etc.)</p>
  </div>
  <div class="page">
    <p>Previously: COOP</p>
    <p>COOP: Counterfeit Object-Oriented Programming</p>
    <p>Counterfeit objects attack for C++</p>
    <p>Reuses existing vtables (fully or partially)</p>
    <p>Reuses whole C++ functions</p>
    <p>F. Schuster, Th. Tendyck, Ch. Liebchen, L. Davi, A.-R. Sadeghi, Th. Holz. Counterfeit Object-oriented Programming: On the Difficulty of Preventing Code Reuse Attacks in C++ Applications. IEEE S&amp;P 2015.</p>
    <p>Read-only memory</p>
    <p>vptr</p>
    <p>object</p>
    <p>var 1</p>
    <p>var 2</p>
    <p>vfptr 1</p>
    <p>vtable</p>
    <p>vfptr 2</p>
    <p>vfptr 3</p>
    <p>vfptr 4</p>
  </div>
  <div class="page">
    <p>Subversive-C fake</p>
    <p>fake</p>
    <p>gadget 1</p>
    <p>gadget</p>
    <p>gadget N</p>
    <p>gadget</p>
  </div>
  <div class="page">
    <p>Subversive-C</p>
    <p>What we have  Arbitrary counterfeit Objective-C objects  Control flow hijacking</p>
    <p>What we want  Call malicious system call, e.g., system(/bin/sh)</p>
  </div>
  <div class="page">
    <p>Calling system(/bin/sh)</p>
    <p>Set up argument registers/stack</p>
  </div>
  <div class="page">
    <p>Gadgets</p>
    <p>Gadget Description</p>
    <p>ML-G Dispatch execution to other gadgets</p>
    <p>LOAD-R64-G Load register from Objective-C object</p>
    <p>R-G Load register from memory</p>
    <p>ARITH-G Add two registers</p>
    <p>W-G Write result to Objective-C object</p>
    <p>INV-G Call function pointer from object</p>
  </div>
  <div class="page">
    <p>Example: Main Loop Gadget</p>
    <p>Used to invoke other gadgets repeatedly (gadget loops)</p>
    <p>Code from dealloc in NSTextReplacementNode</p>
    <p>children = self-&gt;children;</p>
    <p>counter = 0;</p>
    <p>while (children[counter] != 0 &amp;&amp; counter &lt; 28) {</p>
    <p>[children[counter] release];</p>
    <p>counter++;</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>Results</p>
    <p>Successfully applied attack to AppKit on vulnerable PoC program</p>
    <p>AppKit is used by many popular Mac OS X apps</p>
  </div>
  <div class="page">
    <p>Defense: Object Layout Integrity</p>
    <p>no slow path attack no fast path attack</p>
    <p>class</p>
    <p>var 1</p>
    <p>var n</p>
    <p>object class</p>
    <p>super</p>
    <p>cache</p>
    <p>methods</p>
    <p>super class</p>
    <p>isa</p>
    <p>flags</p>
    <p>nil nil</p>
    <p>sel impl</p>
    <p>class hmac</p>
    <p>hmac</p>
    <p>nil</p>
    <p>cache</p>
    <p>methodsuser forwarder fwd</p>
    <p>fwd hmac</p>
    <p>no forwarder attack</p>
    <p>sel impl</p>
    <p>sel impl</p>
  </div>
  <div class="page">
    <p>Securing the Slow Path</p>
    <p>, = -5 ,</p>
    <p>Checked on every slow path lookup</p>
    <p>is a random 64-bit key stored in execute-only memory</p>
    <p>= &amp;</p>
  </div>
  <div class="page">
    <p>Securing the Fast Path</p>
    <p>1 , = =0</p>
    <p>&lt;3   +      +</p>
    <p>is a 192-bit random number stored in execute-only memory</p>
    <p>= &amp;</p>
  </div>
  <div class="page">
    <p>eXecute-only Memory</p>
    <p>Crucial defense against information leaks</p>
    <p>Store HMAC keys in XoM (write-once or constant data)</p>
    <p>Access via execution</p>
    <p>Can be implemented in hardware or software  mprotect()-based mechanism</p>
    <p>TLB splitting</p>
    <p>EPT on x86</p>
    <p>ARMv8 native support</p>
  </div>
  <div class="page">
    <p>Performance Evaluation</p>
    <p>Drop-in replacement for Objective-C runtime shipped by Apple!  Micro-benchmarks</p>
    <p>iTunes, Pages, etc.</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>Control flow hijacking attack on Objective-C message dispatch</p>
    <p>HMAC-based object integrity defense for Apple Objective-C runtime</p>
    <p>Low performance overhead (1.54% on real-world applications)</p>
  </div>
  <div class="page">
    <p>Questions?</p>
    <p>Previous joint work open sourced and released into</p>
    <p>Hardened Tor Browser for Linux</p>
    <p>https://github.com/immunant/selfrando</p>
  </div>
</Presentation>
