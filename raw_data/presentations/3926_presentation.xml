<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Composition and Substitution in Provenance and Workflows</p>
    <p>~ or ~ Basic Boxology for Provenance</p>
    <p>Peter Buneman Adri Gascn</p>
    <p>Dave Murray-Rust University of Edinburgh</p>
    <p>Funded by: NSF Data Citation Project and EPSRC SOCIAM Project</p>
  </div>
  <div class="page">
    <p>The Old Chestnut: fine-grain vs coarse-grain provenance</p>
    <p>Claimed for the PROV model, but no details given</p>
    <p>[Amsterdamer, Davidson, Deutch, Milo, Stoyanovich and Tannen. VLDB 2011] ties together data and workflow model and allows one to view provenance at various levels of granularity.</p>
    <p>[Buneman, Cheney and Kostylev TAPP 2011] Form of graph homomorphism to explain granularity.</p>
    <p>But ...</p>
    <p>How does one compose/combine provenance graphs?</p>
    <p>How does one create a subroutine in a workflow?</p>
    <p>Can we define a notion of substitution for provenance graphs?</p>
    <p>Can we build a semantic compressor for provenance graphs with repetitive substructures?</p>
  </div>
  <div class="page">
    <p>PROV. Any restriction on how activities can be grouped into larger activities?</p>
    <p>Could this be an activity?</p>
    <p>Roughly speaking: none (thanks to Paolo Missier)</p>
  </div>
  <div class="page">
    <p>We want to define some kind of graph substitution.</p>
    <p>But theres a rather obvious plumbing problem if we stick to conventional (binary relation) graphs.</p>
    <p>PROV substitution  perhaps for compression</p>
  </div>
  <div class="page">
    <p>Graph substitution? Computer scientists must have thought about this!</p>
    <p>[A] Alur, R., Benedikt, M., Etessami, K., Godefroid, P., Reps, T.W., Yannakakis, M.: Analysis of recursive state machines. ACM Trans. Program. Lang. Syst. 27(4) (2005)</p>
    <p>Drewes, F., Kreowski, H.J., Habel, A.: Hyperedge replacement, graph grammars. In: Handbook of Graph Grammars. (1997) 95162</p>
    <p>Variations on a model in which the nodes are boxes with labeled input and output ports Somewhat unsurprisingly this model is used for provenance in</p>
    <p>[D] Davidson, S.B., Khanna, S., Milo, T., Panigrahi, D., Roy, S.: Provenance views for module privacy. PODS 2011</p>
    <p>Both [A] and [D] prove results about dependency or connectivity under substitution</p>
  </div>
  <div class="page">
    <p>A 3-2 box</p>
    <p>A network consists of  boxes, with numbered input and output ports  edges, that connect input to output ports</p>
    <p>Model:</p>
    <p>This is a big abstraction. We are assuming just one box shape and no box or edge labels.</p>
  </div>
  <div class="page">
    <p>p</p>
    <p>b</p>
    <p>c</p>
    <p>N</p>
    <p>d</p>
    <p>e</p>
    <p>f</p>
    <p>N</p>
    <p>d</p>
    <p>e</p>
    <p>b</p>
    <p>c</p>
    <p>N[fN]</p>
    <p>But we need two kinds of box!</p>
    <p>Substitution:</p>
  </div>
  <div class="page">
    <p>d</p>
    <p>e</p>
    <p>f</p>
    <p>d</p>
    <p>p</p>
    <p>b</p>
    <p>c</p>
    <p>e</p>
    <p>b</p>
    <p>c</p>
    <p>Two pictures of N N N[fN]</p>
    <p>p</p>
    <p>b</p>
    <p>c</p>
    <p>Eversion</p>
    <p>Now substitution looks different:</p>
    <p>Join the inputs of p to the corresponding outputs of f</p>
    <p>Join the inputs of f to the corresponding outputs of p</p>
    <p>Cause f and p to disappear Its a symmetrical operation: N[p, f ]N  a join of an (m,n)-box to an (n,m) box (In fact the definition is a bit more subtle  need to deal with self edges.)</p>
    <p>=</p>
  </div>
  <div class="page">
    <p>Do we need a join? A represents a process that anonymizes and exports clinical data in response to queries from</p>
    <p>B, which represents the activity of a scientific research program</p>
    <p>Neither A nor B can look inside each other.</p>
    <p>A represents B as an (external) activity VB and B represents A in as VA</p>
    <p>At some point Bs research indicates that there is a patient at risk in As database. Someone needs to combine the two provenance graphs!</p>
    <p>VB</p>
    <p>A</p>
    <p>queries</p>
    <p>B</p>
    <p>VA</p>
    <p>queries</p>
    <p>answers</p>
    <p>answers</p>
    <p>Representing this in PROV is subject of ongoing work with Luc Moreau</p>
    <p>The combined graph is A[VB,VA]B</p>
  </div>
  <div class="page">
    <p>A simple result</p>
    <p>Let M=(BM,EM) be a sub-network of N=(BN,EN). There are networks R=(BM{a}, EM) and S = (BN - BM  {b}, ES) such that N = R[a,b]S</p>
    <p>In other words: any subnetwork of a network can be treated as single box (b) and recovered with a join.</p>
    <p>Moreover the recovery is on the nose: it preserves the identity of the boxes</p>
    <p>Is join fundamental or are there other more basic operations on networks?</p>
  </div>
  <div class="page">
    <p>Parallel and serial composition</p>
    <p>a</p>
    <p>p</p>
    <p>p</p>
    <p>a</p>
    <p>b</p>
    <p>q</p>
    <p>c</p>
    <p>c</p>
    <p>p||q</p>
    <p>a b</p>
    <p>pq</p>
    <p>b</p>
    <p>pq</p>
    <p>a</p>
    <p>b c</p>
    <p>q</p>
    <p>b</p>
    <p>c</p>
  </div>
  <div class="page">
    <p>But theres a subtlety:</p>
    <p>For substitution, N[fN], we may expect the new nodes from N to be disjoint from those in N (we may explicitly copy them to ensure this)</p>
    <p>In join N[a, b ]N we do not want to assume that NN =  for in any realistic situation (back-channels etc.)</p>
    <p>For example:</p>
    <p>If N and N are strongly connected then so is N[a,b]N provided NN =</p>
    <p>Similar observations apply to parallel and serial composition</p>
  </div>
  <div class="page">
    <p>Further observations</p>
    <p>A network is  terminal free if every box has at least one input and at least one</p>
    <p>output port  full if every port has an incident edge  strongly connected if theres a directed path from any box to any</p>
    <p>other</p>
    <p>The first two are preserved under join, parallel composition and serial composition. The third is preserved if the networks are disjoint</p>
    <p>We will normally assume that our networks are full</p>
    <p>Interesting fact (cf series parallel graphs): any network can be constructed with series and parallel composition</p>
  </div>
  <div class="page">
    <p>Legoland Basic building block</p>
    <p>Multiple ports</p>
    <p>p q p||q</p>
    <p>Incident edges</p>
    <p>pqp</p>
    <p>q</p>
    <p>Paths and cycles pq</p>
    <p>pq</p>
    <p>p</p>
    <p>q</p>
    <p>q</p>
    <p>p</p>
    <p>Arbitrary full (= surjective both ways) binary relations</p>
    <p>pq</p>
    <p>p</p>
    <p>p||q</p>
    <p>q</p>
    <p>q</p>
    <p>q</p>
    <p>p</p>
    <p>p</p>
    <p>p</p>
    <p>pq</p>
    <p>pq</p>
    <p>q</p>
    <p>Any network can be constructed from (copies of) the basic building block with parallel and serial composition.</p>
  </div>
  <div class="page">
    <p>Join can be implemented on the nose with serial composition</p>
    <p>...</p>
    <p>...</p>
    <p>...</p>
    <p>... p q</p>
    <p>(n,m) box (m,n) box</p>
    <p>...</p>
    <p>...  pq</p>
    <p>(m,m) box</p>
    <p>=... f</p>
    <p>... g</p>
    <p>(0,m) box</p>
    <p>(m,0) box</p>
    <p>...</p>
    <p>... pq</p>
    <p>(m,m) box</p>
    <p>a</p>
    <p>b</p>
    <p>gpq ...</p>
    <p>a</p>
    <p>...</p>
    <p>f</p>
    <p>b</p>
    <p>gpq ...</p>
    <p>a</p>
    <p>...</p>
    <p>f</p>
    <p>b</p>
    <p>= a</p>
    <p>b</p>
    <p>... gpqf</p>
    <p>(0,0) box</p>
    <p>=</p>
    <p>b</p>
    <p>a a</p>
    <p>b</p>
  </div>
  <div class="page">
    <p>Back to PROV and the problem of combining the provenance of communicating processes</p>
    <p>VB</p>
    <p>A</p>
    <p>queries</p>
    <p>B</p>
    <p>VA</p>
    <p>queries</p>
    <p>answers</p>
    <p>answers</p>
    <p>We require</p>
    <p>Instead of (1) we can identify messages by URIs</p>
    <p>But we still need a way for each party to identify the other (where did the message go to / come from?)</p>
    <p>Taken together, its not so easy to represent a satisfactory join in PROV</p>
  </div>
  <div class="page">
    <p>Conclusions (minimal)</p>
    <p>Non-disjoint composition (parallel and serial) and join are needed at least for combining provenance graphs</p>
    <p>Relationship with series-parallel graphs? (Sarah-Cohen Boulakias work on workflows)</p>
    <p>Bao, Z., Cohen-Boulakia, S., Davidson, S. B., Eyal, A., &amp; Khanna, S. (2009, March). Differencing provenance in scientific workflows. ICDE'09.</p>
    <p>A (non-trivial) network is rooted at r if there is a path from every box to r</p>
    <p>Rooted (parallel and serial) composition produce rooted graphs</p>
    <p>Is there a legoland for rooted networks?</p>
    <p>A (linear) syntax for building networks (something like -terms)</p>
    <p>Language for graph substitution</p>
    <p>Reasoning about dependency and causality</p>
  </div>
  <div class="page">
    <p>The computer scientists have only interpreted provenance,</p>
    <p>in various ways. The point, however, is to construct it.</p>
    <p>Thank you</p>
  </div>
</Presentation>
