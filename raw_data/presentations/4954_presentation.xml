<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>On Abstraction and Informatics</p>
    <p>Presented at ISSEP 2011</p>
    <p>Tom Verhoeff Eindhoven University of Technology</p>
    <p>Dept. of Mathematics &amp; Computer Science Software Engineering &amp; Technology</p>
    <p>www.win.tue.nl/~wstomv</p>
    <p>T.Verhoeff@tue.nl</p>
    <p>c 2011, T. Verhoeff @ TUE.NL 1/16 Abstraction &amp; Informatics</p>
  </div>
  <div class="page">
    <p>My Goal</p>
    <p>Get</p>
    <p>more, better, and explicit attention for</p>
    <p>abstraction itself,</p>
    <p>in the informatics curriculum.</p>
    <p>c 2011, T. Verhoeff @ TUE.NL 2/16 Abstraction &amp; Informatics</p>
  </div>
  <div class="page">
    <p>Inspiration: Teaching Formal Methods 2009, Eindhoven</p>
    <p>Kramer TFM 09 1</p>
    <p>Jeff Kramer</p>
    <p>Imperial College</p>
    <p>London</p>
    <p>Abstraction and Modelling a complementary partnership</p>
    <p>Is Abstraction the key to Computing? CACM April 2007</p>
    <p>c 2011, T. Verhoeff @ TUE.NL 3/16 Abstraction &amp; Informatics</p>
  </div>
  <div class="page">
    <p>Jeff Kramer believes . . .</p>
    <p>Kramer TFM 09 6</p>
    <p>I believe ..</p>
    <p>that the heart of the problem lies in a difficulty in dealing with</p>
    <p>c 2011, T. Verhoeff @ TUE.NL 4/16 Abstraction &amp; Informatics</p>
  </div>
  <div class="page">
    <p>Why is Abstraction Important in Informatics?</p>
    <p>Kramer TFM 09 18</p>
    <p>Why is abstraction important in Software Engineering?</p>
    <p>Once you realize that computing is all about constructing, manipulating, and reasoning about abstractions, it becomes clear that an important prerequisite for writing (good) computer programs is the ability to handle abstractions in a precise manner.</p>
    <p>Keith Devlin CACM Sept.2003</p>
    <p>Software is abstract!</p>
    <p>c 2011, T. Verhoeff @ TUE.NL 5/16 Abstraction &amp; Informatics</p>
  </div>
  <div class="page">
    <p>Jeannette Wing on Computational Thinking (2008)</p>
    <p>The essence of computational thinking is abstraction.</p>
    <p>In computing, we abstract notions beyond the physical dimensions of</p>
    <p>time and space.</p>
    <p>Our abstractions are extremely general because they are symbolic,</p>
    <p>where numeric abstractions are just a special case.</p>
    <p>. . . [O]ur abstractions tend to be richer and more complex than those</p>
    <p>in the mathematical and physical sciences.</p>
    <p>c 2011, T. Verhoeff @ TUE.NL 6/16 Abstraction &amp; Informatics</p>
  </div>
  <div class="page">
    <p>Abstraction in Informatics Curriculum</p>
    <p>Underexposed</p>
    <p>Not treated well enough</p>
    <p>Implicit</p>
    <p>Students sometimes (often?) get the (mistaken) impression that</p>
    <p>abstraction = vagueness and imprecision</p>
    <p>Informatics teachers often do not know either . . .</p>
    <p>c 2011, T. Verhoeff @ TUE.NL 7/16 Abstraction &amp; Informatics</p>
  </div>
  <div class="page">
    <p>Abstraction in Mathematics</p>
    <p>How to explain what a fraction is to someone who does not know?</p>
    <p>Start overspecific: a pair of integers (a, b) with b &gt; 0</p>
    <p>Equivalence relation abstracts from unintended distinctions:</p>
    <p>(a, b)  (c, d)  ad = bc</p>
    <p>Define fractions by dividing out the equivalence:</p>
    <p>Q = ( Z  Z+</p>
    <p>) /</p>
    <p>A fraction, in the abstract, is an equivalence class in ( Z  Z+</p>
    <p>) under the equivalence relation</p>
    <p>c 2011, T. Verhoeff @ TUE.NL 8/16 Abstraction &amp; Informatics</p>
  </div>
  <div class="page">
    <p>Abstractions in Programming: Client-Server Contracts</p>
    <p>Procedural abstraction applied to compute 100th Fibonacci number:</p>
    <p>{ Contract: precondition 0 &lt;= n; return n-th Fibonacci number }</p>
    <p>function fib ( n : integer ) : integer;</p>
    <p>begin ... { implementation omitted } ... end;</p>
    <p>begin</p>
    <p>writeln ( fib ( 100 ) )</p>
    <p>end.</p>
    <p>Client calls (invokes) the function</p>
    <p>Server implements the function</p>
    <p>Contract is the abstraction: binds/(de)couples client and server</p>
    <p>c 2011, T. Verhoeff @ TUE.NL 9/16 Abstraction &amp; Informatics</p>
  </div>
  <div class="page">
    <p>Procedure Abstraction involves multiple abstractions</p>
    <p>Implementation details hidden from client</p>
    <p>To use the abstraction (at design time), the client designer does</p>
    <p>not need to know about the implementation.</p>
    <p>Identity/value of things operated on hidden from server</p>
    <p>To implement the abstraction (at design time), the server imple</p>
    <p>menter does not need to know where the data is and what its</p>
    <p>value is; the parameters abstract from that.</p>
    <p>Context of usage hidden from server</p>
    <p>Neither does the server implementer need to know in what context</p>
    <p>the facility is used.</p>
    <p>c 2011, T. Verhoeff @ TUE.NL 10/16 Abstraction &amp; Informatics</p>
  </div>
  <div class="page">
    <p>Reasoning through contracts is central to Divide and Conquer</p>
    <p>contract</p>
    <p>invocation  implementation</p>
    <p>Reason about invocation (call) in terms of contract, and</p>
    <p>reason about implementation in terms of (same) contract.</p>
    <p>Never reason about invocation and implementation together.</p>
    <p>Thus, divide fails, leading to complexity, and not to conquer.</p>
    <p>Also applies to Data Abstraction, Iteration Abstraction, . . .</p>
    <p>Recursion is hard to master without contractual reasoning.</p>
    <p>c 2011, T. Verhoeff @ TUE.NL 11/16 Abstraction &amp; Informatics</p>
  </div>
  <div class="page">
    <p>Musical Intermezzo</p>
    <p>Jacob van Eyck (approx. 1590  1657)</p>
    <p>Dutch carilloneur (church bell player) and recorder player/composer</p>
    <p>Prelude for recorder</p>
    <p>c 2011, T. Verhoeff @ TUE.NL 12/16 Abstraction &amp; Informatics</p>
  </div>
  <div class="page">
    <p>Teaching Abstraction: Forward Chaining</p>
    <p>In the development process and in forward-chaining, you (learn to)</p>
    <p>c 2011, T. Verhoeff @ TUE.NL 13/16 Abstraction &amp; Informatics</p>
  </div>
  <div class="page">
    <p>Teaching Abstraction: Backward Chaining</p>
    <p>In backward-chaining, you learn to</p>
    <p>c 2011, T. Verhoeff @ TUE.NL 14/16 Abstraction &amp; Informatics</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Abstraction needs explicit attention in informatics curriculum</p>
    <p>Abstraction has many facets, requiring appropriate terminology and teaching methods</p>
    <p>Backward chaining can be used for teaching abstraction</p>
    <p>Needs follow-up research, e.g. definition of TRUCs for abstraction</p>
    <p>TRUC = Testable, Reusable Unit of Cognition (Meyer, 2006)</p>
    <p>For details, see my article in the proceedings (on CD-ROM), or at</p>
    <p>www.win.tue.nl/~wstomv/publications/issep-2011-on-abstraction.pdf</p>
    <p>c 2011, T. Verhoeff @ TUE.NL 15/16 Abstraction &amp; Informatics</p>
  </div>
</Presentation>
