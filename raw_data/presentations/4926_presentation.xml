<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>MetaTM &amp; TxLinux</p>
    <p>Hany Ramadan, Christopher Rossbach, Donald Porter, Owen Hofmann, Aditya Bhandari, Emmett</p>
    <p>Witchel</p>
    <p>University of Texas at Austin</p>
  </div>
  <div class="page">
    <p>TM Background</p>
    <p>Transactional programming is an emerging alternative to locks  Avoids problems such as deadlock  Avoids performance-complexity tradeoffs</p>
    <p>HTM holds the promise of  simpler programming and  good performance</p>
  </div>
  <div class="page">
    <p>TM: Whats the OS got to do with it?</p>
    <p>Lack of realistic workloads (counter, splash-2)</p>
    <p>Will current results hold on real programs?  Unclear design tradeoffs; Feature set unsettled</p>
    <p>OS is a real-life, parallel workload  OS will benefit from transactions</p>
    <p>Reduces synchronization complexity  System-call and interrupt control paths will benefit</p>
    <p>Architectural support is needed for OS</p>
  </div>
  <div class="page">
    <p>Average Transaction Count</p>
    <p>Other TMs Nearest TM MetaTM</p>
    <p>A v e ra</p>
    <p>g e T</p>
    <p>x /B</p>
    <p>e n</p>
    <p>c h</p>
    <p>m a rk</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>TxLinux  MetaTM</p>
    <p>Goals  Features  Interrupt handling</p>
    <p>Issue: Stack memory  Experimental results</p>
  </div>
  <div class="page">
    <p>TxLinux 2.6.16.1</p>
    <p>Slab allocator</p>
    <p>Zone allocator</p>
    <p>IP routing</p>
    <p>Socket locking</p>
    <p>Various MM structures</p>
    <p>Directory cache</p>
    <p>Pathname translation</p>
    <p>Memory managementNetworkingFile system</p>
    <p>Spin-locks Sequence locks</p>
    <p>RCU (read-copyupdate)</p>
    <p>Converted ~30% of dynamic synchronization to transactions</p>
  </div>
  <div class="page">
    <p>MetaTM: Design goals</p>
    <p>HTM model co-designed with TxLinux  Extensions to x86 ISA  Architectural support for OS  Execution-driven simulation</p>
    <p>A platform for TM research  Multiple HTM design points  Eager &amp; lazy version management  Eager conflict detection</p>
  </div>
  <div class="page">
    <p>MetaTM: Model features</p>
    <p>commit cost (lazy)</p>
    <p>abort cost (eager)</p>
    <p>polite karma</p>
    <p>exponential linear</p>
    <p>eruption</p>
    <p>Version management</p>
    <p>Contention management (eager)</p>
    <p>Backoff policy</p>
    <p>Tx demarcation</p>
    <p>random</p>
    <p>timestamp polka sizematters</p>
    <p>xbegin xend</p>
    <p>xpush xpopMultiple Tx</p>
  </div>
  <div class="page">
    <p>TxLinux: Interrupt handling</p>
    <p>Question: What happens to active tx on an interrupt?</p>
    <p>Interrupt handlers allowed to use transactions</p>
    <p>Factors weighing against abort  Transaction length growing  Interrupt frequency</p>
    <p>Answer: Active transactions are suspended on interrupt</p>
  </div>
  <div class="page">
    <p>MetaTM: Multiple Tx support</p>
    <p>Multiple active transactions on a processor  At most one running, all others are suspended</p>
    <p>Interface  xpush suspends current transaction  xpop resumes suspended transaction  Suspended transactions maintained in LIFO order</p>
    <p>New execution context is unrelated to old one  Same conflict semantics with all other transactions</p>
    <p>May start new transactions</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>TxLinux  MetaTM</p>
    <p>Goals  Features  Interrupt handling</p>
    <p>Issue: Stack memory  Experimental results</p>
  </div>
  <div class="page">
    <p>Issue: Stack memory</p>
    <p>Transactions can span stack frames  Why: Retain same flexibility as locks  Problem: Live stack overwrite (correctness)</p>
    <p>Solution: Stack Pointer Checkpoint foo()</p>
    <p>{</p>
    <p>atomic</p>
    <p>{</p>
    <p>}</p>
    <p>}</p>
    <p>foo()</p>
    <p>{</p>
    <p>bar()</p>
    <p>baz()</p>
    <p>}</p>
    <p>bar() { xbegin }</p>
    <p>baz() { xend }</p>
  </div>
  <div class="page">
    <p>intr state do_IRQ</p>
    <p>foo+8 bar</p>
    <p>Live stack overwrite</p>
    <p>StkPtr</p>
    <p>locals foo</p>
    <p>Error: invalid return address</p>
    <p>Tx Reg. Checkpoint</p>
    <p>PC: bar+4</p>
    <p>StkPtr: 0x40</p>
    <p>(other regs..)</p>
    <p>foo+4: call bar foo+8: &lt;work&gt; foo+12:xend</p>
    <p>bar+0: xbegin bar+4: ret</p>
    <p>do_irq: iret</p>
    <p>Conflict</p>
    <p>locals foo</p>
    <p>Only interrupts that arrive in kernel mode have this problem</p>
  </div>
  <div class="page">
    <p>intr state do_irq</p>
    <p>foo+8 bar</p>
    <p>Live stack overwrite, fixed</p>
    <p>StkPtr</p>
    <p>locals foo</p>
    <p>PC: bar+4</p>
    <p>StkPtr: 0x40</p>
    <p>(other regs..)</p>
    <p>foo+4: call bar foo+8: &lt;work&gt; foo+12:xend</p>
    <p>bar+0: xbegin bar+4: ret</p>
    <p>do_irq: iret</p>
    <p>locals foo</p>
    <p>Conflict</p>
    <p>Fixed by setting ESP to Checkpointed ESP on interrupt</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>TxLinux  MetaTM</p>
    <p>Goals  Features  Interrupt handling</p>
    <p>Issue: Stack memory  Experimental results</p>
  </div>
  <div class="page">
    <p>Experiments</p>
    <p>Setup  Workloads  System characteristics</p>
    <p>Execution time  Transaction rates  Transaction origins</p>
    <p>Studies  Contention management  Commit &amp; Abort penalties</p>
  </div>
  <div class="page">
    <p>Setup</p>
    <p>Simics 3.0.17  8-processor, x86 system (1 Ghz)  Memory hierarchy</p>
    <p>L1: sep D/I, 16KB, 4-way, 1-cycle hit  L2: 4MB, 8-way, 16-cycle hit, MESI protocol</p>
    <p>Main memory: 1GB, 200-cycle hit  Other devices</p>
    <p>Disk device (DMA, 5.5ms latency)  Tigon3 gigabit nic (DMA,0.1ms latency)</p>
  </div>
  <div class="page">
    <p>Workloads to exercise TxLinux</p>
    <p>counter  shared counter micro- benchmark (8 threads)</p>
    <p>pmake  Runs make -j 8 to compile files from libFLAC 1.1.2</p>
    <p>netcat  streams data over TCP network conn.</p>
    <p>MAB  simulates software development file system workloads</p>
    <p>configure  8 instances of configure for tetex</p>
    <p>find  8 instances of find on a 78MB directory searching for text</p>
    <p>Note: Only TxLinux creates transactions</p>
  </div>
  <div class="page">
    <p>Kernel Execution Time</p>
    <p>counter</p>
    <p>%Kern. time 91% 13% 54% 57% 43% 50%</p>
    <p>High kernel time justifies transactions in the OS</p>
  </div>
  <div class="page">
    <p>Transaction Rates</p>
    <p>Restart Rate 2.6% 3.1% 1.7% 2.1% 10.2%</p>
    <p>Find workload has highest contention in TxLinux</p>
  </div>
  <div class="page">
    <p>Transaction Origins</p>
    <p>Kernel locks accessed from both system call and interrupt handling contexts</p>
  </div>
  <div class="page">
    <p>Contention Management Study</p>
    <p>Polka best performer, but complex to implement; SizeMatters viable</p>
    <p>Stall-on-conflict  reduces conflicts, but not always performance</p>
    <p>counter</p>
  </div>
  <div class="page">
    <p>Commit &amp; Abort Study</p>
    <p>Performance sensitive to commit penalty, not abort</p>
    <p>Confirms benefit of eager version management (fast commits)</p>
    <p>N o</p>
    <p>rm a</p>
    <p>liz e</p>
    <p>d K</p>
    <p>e rn</p>
    <p>e l T</p>
    <p>im e</p>
    <p>N o</p>
    <p>rm a</p>
    <p>liz e</p>
    <p>d K</p>
    <p>e rn</p>
    <p>e l T</p>
    <p>im e</p>
    <p>Commit Cost</p>
    <p>Abort Cost</p>
  </div>
  <div class="page">
    <p>Related Work</p>
    <p>TM Models  TCC [Hammond04], UTM [Anaian05], LogTM [Moore06], VTM [Rajwar05]</p>
    <p>Suspension techniques  Escape actions [Zilles06]  cant start tx</p>
    <p>Interrupt handling  XTM [Chung06]  also tries to avoid aborts</p>
    <p>Contention management  Scherer &amp; Scott [PODC05]  in STM context</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>TM needs realistic workloads  TxLinux the largest TM benchmark</p>
    <p>OS needs TM  Complex synchronization; large % of runtime</p>
    <p>Building &amp; running TxLinux reveals much  Architectural support needed (Tx suspension)</p>
    <p>Contention management is important  Cost studies confirm fast commits</p>
    <p>more in the paper</p>
  </div>
</Presentation>
