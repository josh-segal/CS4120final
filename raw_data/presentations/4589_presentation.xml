<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Optimal Top-k Generation of Attribute Combinations based on</p>
    <p>Ranked Lists</p>
    <p>Jiaheng Lu, Renmin University of China</p>
    <p>Joint work with Pierre Senellart, Chunbin Lin, Xiaoyong Du, Shan Wang, and Xinxing Chen</p>
  </div>
  <div class="page">
    <p>Motivation &amp; Problem Statement</p>
    <p>Goal: Select a combination of three players including forward, center, and guard positions.</p>
    <p>Methods</p>
    <p>select players with the highest score in each group</p>
    <p>calculate the average scores of players across all games</p>
    <p>Limitation: overlook team spirit</p>
    <p>Game IDScore</p>
  </div>
  <div class="page">
    <p>Motivation &amp; Problem Statement</p>
    <p>consider their combined scores in the same game</p>
    <p>Select the top-k combinations according to top-m aggregate scores</p>
    <p>Top-k,m Problem</p>
    <p>Tuple aggregation functionInstance aggregation</p>
    <p>function</p>
  </div>
  <div class="page">
    <p>Motivation &amp; Problem Statement Top-1,2: select the top-1 combination of players according to top-2 aggregate scores for games where they played together.</p>
    <p>F2C1G1 is the best combination, since (21.51 + 18.76) is the highest overall score.</p>
  </div>
  <div class="page">
    <p>Difference between top-k queries and top-k,m queries</p>
    <p>Top-k Top-k,m</p>
    <p>Return the top-k tuples Return the top-k</p>
    <p>combinations of attributes</p>
    <p>Can be transformed into a SQL</p>
    <p>Cannot be transformed into a SQL</p>
  </div>
  <div class="page">
    <p>Application XML keyword refinement</p>
    <p>ExampleExample</p>
    <p>Q = {DB;UC Irvine; 2002} Groups: G1 = {&quot;DB&quot;; &quot;database&quot;}, G2={&quot;UCI&quot;;&quot;UC Irvine&quot;} G3 = {&quot;2002&quot;}.</p>
    <p>Answer:</p>
    <p>Q={DB, UCI, 2002}</p>
    <p>Consider a top-1,2 query</p>
  </div>
  <div class="page">
    <p>Application (Cont.)</p>
    <p>Evidence combination mining in medical databases</p>
    <p>Package recommendation systems</p>
  </div>
  <div class="page">
    <p>Motivation &amp; Problem Statement</p>
    <p>Top-k,m Query Processing</p>
    <p>Experimental Results</p>
    <p>Conclusion</p>
    <p>Outline</p>
  </div>
  <div class="page">
    <p>Top-k,m Query Processing Access Model: Sorted Accesses</p>
    <p>(a, 9.0)</p>
    <p>(b, 8.7)(c, 8.7)</p>
    <p>(d, 7.4)</p>
    <p>(i, 5.3)</p>
    <p>(i, 8.8)</p>
    <p>(f, 6.9)</p>
    <p>(a, 7.5)</p>
    <p>(d, 4.7)</p>
    <p>(c, 7.9)</p>
  </div>
  <div class="page">
    <p>Top-k,m Query Processing Access Model: Random Accesses</p>
    <p>(a, 9.0)</p>
    <p>(b, 8.7)(c, 8.7)</p>
    <p>(d, 7.4)</p>
    <p>(i, 5.3)</p>
    <p>(i, 8.8)</p>
    <p>(f, 6.9)</p>
    <p>(a, 7.5)</p>
    <p>(d, 4.7)</p>
    <p>(c, 7.9)</p>
  </div>
  <div class="page">
    <p>Top-k,m Query Processing Baseline Method: ETA</p>
    <p>Compute top-m tuples for each</p>
    <p>combination Threshold Algorithm</p>
    <p>(TA)</p>
    <p>Calculate aggregate score for each combination</p>
    <p>Return the top-k combinations</p>
  </div>
  <div class="page">
    <p>Top-k,m Query Processing Upper and Lower bounds Algorithm: ULA</p>
    <p>Consider top-m seen match instances</p>
    <p>Lower Bound</p>
    <p>Consider threshold value and top-m match instances</p>
    <p>Upper Bound</p>
    <p>Compute the upper and lower bounds for</p>
    <p>each combination</p>
    <p>Termination condition:</p>
    <p>k combinations meet the hit-condition</p>
  </div>
  <div class="page">
    <p>(G1, 9.3)</p>
    <p>(G2, 8.3)</p>
    <p>(G5,7.8)</p>
    <p>(G11,7.3)</p>
    <p>(G2, 7.9)</p>
    <p>(G1,7.0)</p>
    <p>(G4,8.0)</p>
    <p>(G8,7.3)</p>
    <p>(G8, 3.0)</p>
    <p>(G4, 2.6)</p>
    <p>(G4, 1.8)</p>
    <p>(G2, 1.5)</p>
    <p>(G11, 4.2)</p>
    <p>(G5, 3.3)</p>
    <p>(G2, 4.4)</p>
    <p>(G1, 2.3)</p>
    <p>Upper and Lower bounds Algorithm: ULA</p>
    <p>A1B1</p>
  </div>
  <div class="page">
    <p>(G1, 9.3)</p>
    <p>(G2, 8.3)</p>
    <p>(G5,7.8)</p>
    <p>(G11,7.3)</p>
    <p>(G2, 7.9)</p>
    <p>(G1,7.0)</p>
    <p>(G4,8.0)</p>
    <p>(G8,7.3)</p>
    <p>(G8, 3.0)</p>
    <p>(G4, 2.6)</p>
    <p>(G4, 1.8)</p>
    <p>(G2, 1.5)</p>
    <p>(G11, 4.2)</p>
    <p>(G5, 3.3)</p>
    <p>(G2, 4.4)</p>
    <p>(G1, 2.3)</p>
    <p>Upper and Lower bounds Algorithm: ULA</p>
    <p>A1B1 U: 34.4</p>
    <p>L: 32.5</p>
    <p>A1B2 U: 34.6</p>
    <p>L: 22.2</p>
    <p>A2B1 U: 31.4</p>
    <p>L: 20.5</p>
    <p>A2B2 U: 31.6</p>
    <p>L: 9.8</p>
    <p>L: 32.5A1B1  G1, 9.3+7.0  ,  G2, 7.9+8.3</p>
    <p>U: 31.4A2B1 Threshold value=7.8+7.9=15.7, 15.7*2=31.4</p>
  </div>
  <div class="page">
    <p>(G1, 9.3)</p>
    <p>(G2, 8.3)</p>
    <p>(G5,7.8)</p>
    <p>(G11,7.3)</p>
    <p>(G2, 7.9)</p>
    <p>(G1,7.0)</p>
    <p>(G4,8.0)</p>
    <p>(G8,7.3)</p>
    <p>(G8, 3.0)</p>
    <p>(G4, 2.6)</p>
    <p>(G4, 1.8)</p>
    <p>(G2, 1.5)</p>
    <p>(G11, 4.2)</p>
    <p>(G5, 3.3)</p>
    <p>(G2, 4.4)</p>
    <p>(G1, 2.3)</p>
    <p>Upper and Lower bounds Algorithm: ULA</p>
    <p>A1B1 U: 32.5</p>
    <p>L: 32.5</p>
    <p>A1B2 U: 31.2</p>
    <p>L: 22.2</p>
    <p>A1B1</p>
  </div>
  <div class="page">
    <p>Can we run fast?</p>
  </div>
  <div class="page">
    <p>Optimization heuristics (1) Pruning combinations without computing the bounds</p>
    <p>(A3,B2) is dominated by (A2,B1)</p>
  </div>
  <div class="page">
    <p>Optimization heuristics (2) Reducing the number of accesses</p>
    <p>Avoiding both sorted and random accesses for specific lists</p>
    <p>(A1,B1)and(A1,B2) cannot be part of answers, all sorted accesses and random accesses on list A1 are unnecessary.</p>
  </div>
  <div class="page">
    <p>Optimization heuristics (3) Reducing the number of accesses</p>
    <p>Reducing random accesses across two lists</p>
    <p>(A1,B1,C1)and(A1,B1,C2) cannot be part of answers, random accesses between A1 and B1 are unnecessary.</p>
  </div>
  <div class="page">
    <p>Optimization heuristics (4) Reducing the number of accesses</p>
    <p>Eliminating random accesses for specific tuples</p>
    <p>Random access from Le to Lt for tuple x is useless</p>
  </div>
  <div class="page">
    <p>Prune dominated</p>
    <p>combinations</p>
    <p>Compute upper and lower bounds for unterminated combinations</p>
    <p>Terminate combinations by reducing number of accesses</p>
    <p>Until k combinations meet hitcondition</p>
    <p>Top-k,m Query Processing</p>
    <p>ULA+</p>
  </div>
  <div class="page">
    <p>Interesting theoretical results Optimality properties</p>
    <p>Instance OptimalityInstance Optimality</p>
    <p>If wild guesses are not allowed, and the size of each group is treated as a constant, then ULA and ULA+ are instance-optimal.</p>
    <p>The upper bound of the optimality ratio is tightThe upper bound of the optimality ratio is tight</p>
    <p>for every instance there exist two constants a and b such that cost(A) &lt;= a*cost(A) + b</p>
  </div>
  <div class="page">
    <p>Interesting theoretical results (Cont.) Optimality properties</p>
    <p>No Instance Optimal AlgorithmsNo Instance Optimal Algorithms</p>
    <p>If wild guesses are allowed, Then there is no deterministic algorithm that is instance-optimal.</p>
  </div>
  <div class="page">
    <p>Motivation &amp; Problem Statement</p>
    <p>Top-k,m Query Processing</p>
    <p>Experimental Results</p>
    <p>Conclusion</p>
    <p>Outline</p>
  </div>
  <div class="page">
    <p>Experimental Results</p>
    <p>Experimental Setup</p>
    <p>Language: Java; OS: Windows XP; CPU: 2.0GHz; Disk:320GB</p>
    <p>Data sets</p>
  </div>
  <div class="page">
    <p>Experimental Results Experimental results on NBA and YQL datasets</p>
    <p>ULA+ outperforms ETA by 1-2 orders of magnitude both in running time and access number.</p>
  </div>
  <div class="page">
    <p>Experimental Results Performance of optimization to reduce combinations</p>
    <p>More than 60% combinations are pruned without computing their bounds</p>
  </div>
  <div class="page">
    <p>Experimental Results Performance of different optimizations</p>
    <p>Combination of all optimizations has the most powerful pruning capability.</p>
  </div>
  <div class="page">
    <p>Experimental Results Experimental results on XML DBLP dataset</p>
    <p>XULA and XULA+ perform better than XETA and scale well in both running time and number of accesses.</p>
  </div>
  <div class="page">
    <p>U. Gntzer etc, VLDB2000 S. Nepal etc, ICDE1999</p>
    <p>Fagin etc, PODS 2001</p>
    <p>Top-k with both random and</p>
    <p>sorted accesses</p>
    <p>R. Fagin etc, JCSS2003 N. Mamoulis etc, TDS2007</p>
    <p>Fagin etc, PODS 2001</p>
    <p>Top-k with only sorted accesses</p>
    <p>Related Works</p>
  </div>
  <div class="page">
    <p>I. F. Ilya etc, VLDB2002 Top-k with no need for exact</p>
    <p>aggregate score</p>
    <p>C. Li etc, SIGMOD2006 M. L. Yiu etc, DKE2008</p>
    <p>Ad-hoc top-k queries</p>
    <p>Related Works</p>
    <p>N. Bruno etc, ICDE2002 K. C. C. Chang etc, SIGMOD2002</p>
    <p>Top-k with sorted access on</p>
    <p>restricted lists</p>
  </div>
  <div class="page">
    <p>Related Works</p>
    <p>T. Deng, W, Fan and F. Geerts, On the Complexity of Package</p>
    <p>Recommendation Problems PODS 2012</p>
    <p>Top-k Package recommendation</p>
  </div>
  <div class="page">
    <p>Motivation &amp; Problem Statement</p>
    <p>Top-k,m Query Processing</p>
    <p>Experimental Results</p>
    <p>Conclusion</p>
    <p>Outline</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Propose a new problem called top-k,m query evaluation</p>
    <p>Developed a family of efficient algorithms, including ULA and ULA+</p>
    <p>Study the optimality properties of our algorithms</p>
    <p>Apply top-k,m query to the context of XML keyword query refinement</p>
  </div>
  <div class="page">
    <p>Optimal Top-k Generation of Attribute Combinations based on</p>
    <p>Ranked Lists</p>
  </div>
</Presentation>
