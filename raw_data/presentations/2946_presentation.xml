<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Apollo</p>
  </div>
  <div class="page">
    <p>High level SQL-Like language</p>
    <p>The job query plan is represented as a DAG</p>
    <p>Tasks are the basic unit of computation</p>
    <p>Tasks are grouped in Stages</p>
    <p>Execution is driven by a scheduler</p>
    <p>Job sample: SCOPE (VLDBJ, 2012)</p>
    <p>Tasks Stage</p>
  </div>
  <div class="page">
    <p>Minimize job latency while maximizing cluster utilization Challenges 1. Scale 2. Heterogeneous workload 3. Maximize utilization 4</p>
  </div>
  <div class="page">
    <p>Jobs process gigabytes to petabytes of data and issue peaks of 100,000 scheduling requests/ seconds Clusters run up to 170,000 tasks in parallel and each contains over 20,000 servers</p>
    <p>Challenging Scale</p>
    <p>Challenge: How to make optimal scheduling decisions at full production scale</p>
  </div>
  <div class="page">
    <p>Tasks runs from seconds to hours</p>
    <p>Tasks can be IO bound or CPU bound</p>
    <p>Tasks can require from 100MB to more than 10GB of memory</p>
    <p>Short tasks are sensitive to scheduling latency</p>
    <p>Long IO bound tasks are sensitive to locality</p>
    <p>Challenge: Make optimal scheduling decisions for a complex workload</p>
  </div>
  <div class="page">
    <p>We need to effectively use resources and maintain performance guarantees but the workload constantly fluctuates</p>
    <p>S at</p>
    <p>S</p>
    <p>un</p>
    <p>M on</p>
    <p>Tu</p>
    <p>e W</p>
    <p>ed</p>
    <p>T hu</p>
    <p>F</p>
    <p>ri S</p>
    <p>at</p>
    <p>S un</p>
    <p>M</p>
    <p>on</p>
    <p>Tu e</p>
    <p>W ed</p>
    <p>T</p>
    <p>hu</p>
    <p>F ri</p>
    <p>S at</p>
    <p>S</p>
    <p>un</p>
    <p>M on</p>
    <p>Tu</p>
    <p>e W</p>
    <p>ed</p>
    <p>Jo b</p>
    <p>C on</p>
    <p>cu rr</p>
    <p>en cy</p>
    <p>Number of concurrent jobs drops by 40% on weekends</p>
    <p>Challenge: Maximize utilization while maintaining performance guarantees with a dynamic workload</p>
  </div>
  <div class="page">
    <p>Background Challenges Overview  Distributed and coordinated architecture  Estimation-based scheduling  Conflict resolution  Opportunistic scheduling Evaluation at scale Related work Conclusion</p>
  </div>
  <div class="page">
    <p>To scale, Apollo adopts a distributed and coordinated architecture There is one scheduler per job each making high quality decisions independently, informed by global information .</p>
  </div>
  <div class="page">
    <p>Queue allows to reason about future resource availability and to defer conflict resolution</p>
    <p>The distributed architectures scales by allowing schedulers to make independent decisions with global coordination</p>
  </div>
  <div class="page">
    <p>The server load representation must  Be hardware independent  Be lightweight  Supports heterogeneous workload</p>
    <p>Apollo represents the load  Using a wait-time matrix  It represents the expected wait time to</p>
    <p>obtain resource of a certain size</p>
    <p>The wait time matrix allows to reason about future resource availability</p>
  </div>
  <div class="page">
    <p>To optimize performance, the scheduler needs to simultaneously consider many conflicting factors</p>
  </div>
  <div class="page">
    <p>Apollo minimizes the estimated task completion time</p>
    <p>E = I + W + R E: Estimated task completion time I: Initialization time W: Wait time R: Runtime (including locality impact)</p>
    <p>Apollo minimize the task completion time by considering relevant factors holistically</p>
  </div>
  <div class="page">
    <p>Cluster is dynamic  Schedulers can have conflicts  Apollo defers the correction of</p>
    <p>conflict Apollo re-evaluates prior decisions  Triggers a duplicate if the decision</p>
    <p>isnt optimal with up to date information</p>
    <p>The correction mechanisms allows Apollo to handle cluster dynamics</p>
  </div>
  <div class="page">
    <p>Maximize utilization  Use the remaining capacity  Dispatch more than the resource</p>
    <p>allocation  Tasks only consume otherwise idle</p>
    <p>resources  Tasks can be preempted or</p>
    <p>terminated  Tasks can be upgraded Additional techniques  Limit capacity share of each job  Random queuing</p>
    <p>Opportunistic scheduling allows Apollo to maximize utilization</p>
  </div>
  <div class="page">
    <p>Background Challenges Overview  Distributed and coordinated architecture  Estimation-based scheduling  Conflict resolution  Opportunistic scheduling Evaluation at scale Related work Conclusion</p>
  </div>
  <div class="page">
    <p>Incrementally rolled out from September to December 2013</p>
    <p>Each containing over 20,000 servers In one cluster, Apollo  Runs 170,000 tasks in parallel  Tracks 14,000,000 pending tasks</p>
  </div>
  <div class="page">
    <p>Sun Mon Tue Wed Thu Fri Sat</p>
    <p>Jo b</p>
    <p>La te</p>
    <p>nc y</p>
    <p>Apollo Baseline Ideal</p>
    <p>Apollo: Consistent performance despite variation in load</p>
    <p>&gt;1.5x speedup over baseline</p>
    <p>Baseline: 40% slowdown under load</p>
  </div>
  <div class="page">
    <p>Regular tasks &lt; 1 second queue time at the 95th percentile</p>
    <p>Opportunistic tasks increase their share of utilization on weekends</p>
    <p>S un</p>
    <p>Tu e</p>
    <p>T hu</p>
    <p>S at</p>
    <p>M on</p>
    <p>W ed</p>
    <p>F ri</p>
    <p>S un</p>
    <p>Tu e</p>
    <p>S ha</p>
    <p>re o</p>
    <p>f u til</p>
    <p>iz at</p>
    <p>io n</p>
    <p>Regular tasks Opportunistic tasks</p>
    <p>M on</p>
    <p>W ed</p>
    <p>F ri</p>
    <p>S un</p>
    <p>Tu e</p>
    <p>T hu</p>
    <p>S at</p>
    <p>M on</p>
    <p>C P</p>
    <p>U U</p>
    <p>til iz</p>
    <p>at io</p>
    <p>n</p>
  </div>
  <div class="page">
    <p>Background Challenges Overview  Distributed and coordinated architecture  Estimation-based scheduling  Conflict resolution  Opportunistic scheduling Evaluation at scale Related work Conclusion</p>
  </div>
  <div class="page">
    <p>Decentralize d Schedulers</p>
    <p>Hierchical Scheduler s</p>
    <p>Centralized Schedulers</p>
  </div>
  <div class="page">
    <p>Loosely Coordinated Distributed architecture Deployed to clusters with over 20,000 servers</p>
    <p>High Quality Scheduling Minimize task completion time Consistent performance</p>
    <p>Maximize resource utilization Opportunistic scheduling 90% median CPU utilization</p>
  </div>
</Presentation>
