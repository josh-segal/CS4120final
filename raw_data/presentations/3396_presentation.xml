<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Digtool: A Virtualization-Based Framework for Detecting Kernel Vulnerabilities</p>
    <p>Jianfeng Pan, Guanglu Yan, Xiaocao Fan</p>
    <p>USENIX Security 2017 - VANCOUVER, BC, CANADA</p>
    <p>IceSword Lab, 360 Internet Security Center</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>PART ONE Contributions 1 PART TWO Related Work 2 PART THREE Architecture 3 PART FOUR Implementation &amp; Detecting Vulnerabilities 4 PART FIVE Advantages 5 PART SIX Future work 6</p>
  </div>
  <div class="page">
    <p>Contributions</p>
    <p>Digtool is a bug checking framework Based on virtualization No compile-time requirement For Windows kernel and device driver Detecting UNPROBE, TOCTTOU, UAF, OOB and some other</p>
    <p>types of vulnerabilities</p>
    <p>45 kernel-level zero-day vulnerabilities (four types) were found MS16-090/CVE-2016-3252 MS16-123/CVE-2016-7211  Some third-partys driver programs.</p>
  </div>
  <div class="page">
    <p>Related Work</p>
    <p>Virtualization/emulator-based methods Xenpwn - BlackHat 2016</p>
    <p>Bochspwn - SyScan 2013</p>
    <p>Kernel-Level Analysis Tools Driver verifier - Microsoft</p>
    <p>Kmemcheck &amp; Kmemleak</p>
    <p>KEDR  ICST 2011</p>
    <p>Other Tools AddressSanitizer - Usenix ATC 2012</p>
    <p>Valgrind - PLDI 2007</p>
    <p>Dr. Memory - CGO 2011</p>
    <p>DieHarder - CCS 2010</p>
  </div>
  <div class="page">
    <p>Overall Architecture</p>
  </div>
  <div class="page">
    <p>Architecture</p>
    <p>Hardware (CPU + virtualization extensions)</p>
    <p>Guest OS</p>
    <p>Middleware</p>
    <p>Loader Fuzzer Logs Log</p>
    <p>Analyzer User Space</p>
    <p>Kernel Space</p>
    <p>Interface Detection</p>
    <p>VMM Infrastructure</p>
    <p>Memory Detection</p>
    <p>Hypervisor</p>
  </div>
  <div class="page">
    <p>Hypervisor</p>
    <p>VMM Infrastructure</p>
    <p>Initializing hypervisor Providing basic facilities</p>
    <p>Interface Detection</p>
    <p>Detecting UNPROBE Vulnerabilities Detecting TOCTTOU Vulnerabilities</p>
    <p>Memory Detection</p>
    <p>Detecting UAF Vulnerabilities Detecting OOB Vulnerabilities</p>
  </div>
  <div class="page">
    <p>Middleware</p>
    <p>Connecting the hypervisor and user mode programs  For Interface Detection  Recording behavior events into log files  Helping to limit the scope of system calls  Helping to set strategies &amp; configuration information</p>
    <p>For Memory Detection  Calibrating monitored memory  Limiting monitored memory areas and kernel code  Interrupting guest OS</p>
  </div>
  <div class="page">
    <p>Loader  Loading target process  Distilling information from configuration file</p>
    <p>Fuzzer  Testing system calls in the detection scope  Exploring code branches</p>
    <p>Log Analyzer  Extracting valuable information from log files</p>
    <p>User-Space Components</p>
  </div>
  <div class="page">
    <p>Implementation Details &amp;</p>
    <p>Detecting Vulnerabilities</p>
  </div>
  <div class="page">
    <p>Hypervisor</p>
    <p>VMM Infrastructure</p>
    <p>Initializing hypervisor Providing basic facilities</p>
    <p>Interface Detection</p>
    <p>Detecting UNPROBE Vulnerabilities Detecting TOCTTOU Vulnerabilities</p>
    <p>Memory Detection</p>
    <p>Detecting UAF Vulnerabilities Detecting OOB Vulnerabilities</p>
  </div>
  <div class="page">
    <p>VMM Infrastructure</p>
    <p>Initialization</p>
    <p>Driver  hypervisor OS  guest OS</p>
    <p>Components Virtual Pages Monitor Thread Scheduling Monitor Communication between Kernel and Hypervisor CPU emulator Events monitor</p>
  </div>
  <div class="page">
    <p>Virtual Page Monitor</p>
    <p>Shadow Page Table</p>
    <p>BitMap</p>
    <p>Recording pages #PF handler  Logging  Private interruption  Setting MTF/TF  Updating SPT</p>
    <p>MTF/TF handler  re-monitoring page</p>
    <p>Bitmap</p>
    <p>VA PA</p>
    <p>#PF</p>
    <p>Not Match</p>
    <p>VA MA</p>
    <p>Propagate</p>
    <p>GPT</p>
    <p>SPT</p>
    <p>CR3</p>
    <p>Handle</p>
    <p>Log Inject Interruption</p>
    <p>MTF/TF Handler</p>
    <p>Match</p>
    <p>Clear P</p>
    <p>Set MTF/TF</p>
    <p>Update #VMEXIT</p>
  </div>
  <div class="page">
    <p>Virtual Page Monitor</p>
    <p>Shadow Page Table</p>
    <p>BitMap</p>
    <p>Recording pages #PF handler  Logging  Private interruption  Setting MTF/TF  Updating SPT</p>
    <p>MTF/TF handler  re-monitoring page</p>
    <p>Bitmap</p>
    <p>VA PA</p>
    <p>#PF</p>
    <p>Not Match</p>
    <p>VA MA</p>
    <p>Propagate</p>
    <p>GPT</p>
    <p>SPT</p>
    <p>CR3</p>
    <p>Handle</p>
    <p>Log Inject Interruption</p>
    <p>MTF/TF Handler</p>
    <p>Match</p>
    <p>Clear P</p>
    <p>Set MTF/TF</p>
    <p>Update #VMEXIT</p>
  </div>
  <div class="page">
    <p>Virtual Page Monitor</p>
    <p>Shadow Page Table</p>
    <p>BitMap</p>
    <p>Recording pages #PF handler  Logging  Private interruption  Setting MTF/TF  Updating SPT</p>
    <p>MTF/TF handler  re-monitoring page</p>
    <p>Bitmap</p>
    <p>VA PA</p>
    <p>#PF</p>
    <p>Not Match</p>
    <p>VA MA</p>
    <p>Propagate</p>
    <p>GPT</p>
    <p>SPT</p>
    <p>CR3</p>
    <p>Handle</p>
    <p>Log Inject Interruption</p>
    <p>MTF/TF Handler</p>
    <p>Match</p>
    <p>Clear P</p>
    <p>Set MTF/TF</p>
    <p>Update #VMEXIT</p>
  </div>
  <div class="page">
    <p>Virtual Page Monitor</p>
    <p>Shadow Page Table</p>
    <p>BitMap</p>
    <p>Recording pages #PF handler  Logging  Private interruption  Setting MTF/TF  Updating SPT</p>
    <p>MTF/TF handler  re-monitoring page  Canceling MTF/TF</p>
    <p>Memory region VS Memory page</p>
    <p>Bitmap</p>
    <p>VA PA</p>
    <p>#PF</p>
    <p>Not Match</p>
    <p>VA MA</p>
    <p>Propagate</p>
    <p>GPT</p>
    <p>SPT</p>
    <p>CR3</p>
    <p>Handle</p>
    <p>Log Inject Interruption</p>
    <p>MTF/TF Handler</p>
    <p>Match</p>
    <p>Clear P</p>
    <p>Set MTF/TF</p>
    <p>Update #VMEXIT</p>
  </div>
  <div class="page">
    <p>Thread Scheduling Monitor</p>
    <p>Target threads VS Non-monitored threads</p>
    <p>SPT or GPT  Performance cost</p>
    <p>FS-&gt;_KPCR-&gt;_KPRCB-&gt;CurrentThread Monitoring _KPRCB</p>
  </div>
  <div class="page">
    <p>Communication between Kernel and Hypervisor</p>
    <p>K2H</p>
    <p>Service Interfaces H2K</p>
    <p>Shared Memory</p>
    <p>User Space Kernel Space</p>
    <p>Hypervisor</p>
    <p>Hypervisor Components</p>
    <p>Target Module</p>
    <p>Work Thread</p>
    <p>Log</p>
    <p>Shared Memory Shared Memory Shared Memory Shared Memory Shared Memory Shared Memory Shared Memory 3</p>
  </div>
  <div class="page">
    <p>Hypervisor</p>
    <p>VMM Infrastructure</p>
    <p>Initializing hypervisor Providing basic facilities</p>
    <p>Interface Detection</p>
    <p>Detecting UNPROBE Vulnerabilities Detecting TOCTTOU Vulnerabilities</p>
    <p>Memory Detection</p>
    <p>Detecting UAF Vulnerabilities Detecting OOB Vulnerabilities</p>
  </div>
  <div class="page">
    <p>Interface Detection  Detecting Vulnerabilities at System Call Interface</p>
    <p>Events monitor  Syscall/Trap2b/Trap2e  RetUser  MemAccess  ProbeRead/ProbeWrite/ProbeAccess  AllocVirtualMemory/GetPebTeb</p>
  </div>
  <div class="page">
    <p>CPU emulator</p>
    <p>ProbeAccess event</p>
    <p>Target memory  nt!MmUserProbeAddress  win32k!W32UserProbeAddress</p>
    <p>Interpreting and executing  N cmp  Fixed number of instructions</p>
    <p>DR Handler Memory #DR</p>
    <p>Update EAX EBX  EIP</p>
    <p>Guest CPU</p>
    <p>EAX EBX  EIP</p>
    <p>Virtual CPU</p>
    <p>Emulator</p>
    <p>N UVA-1</p>
    <p>UVA-2</p>
    <p>UVA-N</p>
    <p>cmp</p>
  </div>
  <div class="page">
    <p>Detecting UNPROBE Vulnerabilities</p>
    <p>Checking a user pointer:  ProbeRead/ProbeWrite/ProbeAccess -&gt; MemAccess</p>
    <p>Accessing user memory deliberately:  AllocVirtualMemory/GetPebTeb -&gt; MemAccess</p>
    <p>NtAllocateVirtualMemory : Eip : 89993f3d, Address : 0023f304, rw: R Eip : 84082ed9, Address : 0023f304, PROBE ! KiFastSystemCallRet</p>
  </div>
  <div class="page">
    <p>Detecting TOCTTOU Vulnerabilities</p>
    <p>Fetching an input value from user mode memory only once  No consecutive MemAccess events</p>
    <p>NtCreateSection : Count :3 ==============  Eip : 89370d54 Address :3b963c Sequence :399 rw: R Eip : 89370d7b Address :3b963c Sequence :401 rw: R KiFastSystemCallRet</p>
  </div>
  <div class="page">
    <p>Hypervisor</p>
    <p>VMM Infrastructure</p>
    <p>Initializing hypervisor Providing basic facilities</p>
    <p>Interface Detection</p>
    <p>Detecting UNPROBE Vulnerabilities Detecting TOCTTOU Vulnerabilities</p>
    <p>Memory Detection</p>
    <p>Detecting UAF Vulnerabilities Detecting OOB Vulnerabilities</p>
  </div>
  <div class="page">
    <p>Memory Detection  Detecting Vulnerabilities via Memory Footprints</p>
    <p>Tracing memory allocation, release and access  Hooking allocation and free functions  Not wrapper functions  Memory pool &amp; lookaside lists</p>
    <p>Virtual Page Monitor  kernel memory Referencing to freed memory Accessing beyond the bounds of allocated heaps</p>
  </div>
  <div class="page">
    <p>Detecting UAF Vulnerabilities</p>
    <p>Tracing freed memory Capturing use instruction through virtual page monitor Recording free instruction when it invoked Delayed release</p>
    <p>MS16-123/CVE-2016-7211: Single step exception - code 80000004 win32k ! _ScrollDC+0x21 : 96b50f3e 83ff01 cmp edi ,1 ub 96b50f3e 96b50f3b 8b7e68 mov edi , dword ptr [esi+68h] 96b50f3e 83ff01 cmp edi ,1// win32k !_ScrollDC+0x21</p>
  </div>
  <div class="page">
    <p>Detecting OOB Vulnerabilities</p>
    <p>Tracing unallocated memory  Initialing unallocated memory areas  Adjusting the unallocated memory areas dynamically</p>
    <p>AVL tree Extra block</p>
    <p>MS16-090/CVE-2016-3252: Single step exception - code 80000004 win32kbase ! RGNMEMOBJ :: bFastFill +0x385 : 93e34bf9 895304 mov dword ptr [ebx +4] , edx</p>
  </div>
  <div class="page">
    <p>Advantages</p>
    <p>Crash resilient  No need of a BSOD.</p>
    <p>Providing an exact context  Stop the OS at the moment a program error occurs.</p>
    <p>More vulnerabilities  UNPROBE, TOCTTOU, UAF(MS16-123/CVE-2016-7211), OOB</p>
    <p>Better performance  Only affect monitored threads and system calls.</p>
  </div>
  <div class="page">
    <p>Future work</p>
    <p>Performance optimization  Reduce switches between the hypervisor and guest OS</p>
    <p>Other detection algorithms  double-free, information leakage, race conditions,   CVE-2017-8470, CVE-2017-8474, CVE-2017-8476,</p>
    <p>Other platforms (MacOS)</p>
  </div>
  <div class="page">
    <p>THANK YOU</p>
    <p>IceSwordLab@360.cn</p>
  </div>
</Presentation>
