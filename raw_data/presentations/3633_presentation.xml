<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Datalog Disassembly</p>
    <p>Antonio Flores Montoya and Eric Schulte GrammaTech, Inc. August 13, 2020</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Binary</p>
    <p>vulnerability</p>
    <p>Assembler</p>
    <p>Disassembler</p>
    <p>Assembly code</p>
    <p>patch</p>
    <p>Sometimes the source code is not available</p>
    <p>Disassembly is the first step in:</p>
    <p>I Binary analysis</p>
    <p>I Binary rewriting/hardening</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Binary</p>
    <p>vulnerability</p>
    <p>Assembler</p>
    <p>Disassembler</p>
    <p>Assembly code</p>
    <p>patch</p>
    <p>Sometimes the source code is not available Disassembly is the first step in:</p>
    <p>I Binary analysis</p>
    <p>I Binary rewriting/hardening</p>
  </div>
  <div class="page">
    <p>Reassembleable Disassembly</p>
    <p>We want to obtain reassembleable assembly</p>
    <p>I Assembly code with cross references</p>
    <p>I We can modify it without breaking it</p>
    <p>This involves two tasks:</p>
    <p>I Instruction Boundary Identification</p>
    <p>I Symbolization</p>
  </div>
  <div class="page">
    <p>Instruction Boundary Identification</p>
    <p>A binary looks like this:</p>
    <p>ba 08 3b 44 00 31 c9 0f 1f 80 00 00 00 00 48 39 3a ... 48 83 c2 20 48 83 f9 3a 7e ee</p>
    <p>... 40c808: add RDX, 32 40c80c: cmp RCX, 58 40c810: jle 40c800</p>
    <p>Instruction Boundary Identification amounts to finding which addresses correspond to which instructions.</p>
  </div>
  <div class="page">
    <p>Instruction Boundary Identification</p>
    <p>A binary looks like this:</p>
    <p>ba 08 3b 44 00 | 31 c9 | 0f 1f 80 00 00 00 00 | 48 39 3a | ... | 48 83 c2 20 | 48 83 f9 3a | 7e ee |</p>
    <p>... 40c808: add RDX, 32 40c80c: cmp RCX, 58 40c810: jle 40c800</p>
    <p>Instruction Boundary Identification amounts to finding which addresses correspond to which instructions.</p>
  </div>
  <div class="page">
    <p>Instruction Boundary Identification</p>
    <p>Challenging because:</p>
    <p>I X64 instructions have variable sizes</p>
    <p>I Data interleaves with instructions</p>
  </div>
  <div class="page">
    <p>Symbolization</p>
    <p>Symbolization: Which numbers are references vs. literals</p>
    <p>... ...</p>
    <p>... ...</p>
    <p>Symbolic references allow us to move and modify the code without breaking it</p>
    <p>Relocation information is NOT enough (even for PIE)</p>
  </div>
  <div class="page">
    <p>Symbolization</p>
    <p>Symbolization: Which numbers are references vs. literals</p>
    <p>... ...</p>
    <p>... ...</p>
    <p>Symbolic references allow us to move and modify the code without breaking it</p>
    <p>Relocation information is NOT enough (even for PIE)</p>
  </div>
  <div class="page">
    <p>Symbolization</p>
    <p>Symbolization: Which numbers are references vs. literals</p>
    <p>... ...</p>
    <p>... ...</p>
    <p>Symbolic references allow us to move and modify the code without breaking it</p>
    <p>Relocation information is NOT enough (even for PIE)</p>
  </div>
  <div class="page">
    <p>Our approach: Use Datalog</p>
    <p>Both instruction boundary identification and symbolization are hard problems We want to:</p>
    <p>I Combine different heuristics easily</p>
    <p>I Use simple static analyses to inform our decisions</p>
    <p>I Run it quickly</p>
  </div>
  <div class="page">
    <p>Binary Disassembly with Datalog</p>
    <p>Binaries are encoded as facts (our initial knowledge of the binary)</p>
    <p>I We decode every possible offset in code sections (obtaining a superset of all possible instructions in the code)</p>
    <p>Instruction: 4000A0: mov RAX, 420020</p>
    <p>Becomes: instruction (4000A0 ,5,,MOV ,1,2,0,0)</p>
    <p>op_regdirect(1,RAX )</p>
    <p>op_immediate (2 ,420020)</p>
    <p>If the decoding fails at address A, we generate invalid(A)</p>
  </div>
  <div class="page">
    <p>Binary Disassembly with Datalog</p>
    <p>Analyses and heuristics are expressed as Datalog rules:</p>
    <p>Backward traversal that propagates invalid instructions</p>
    <p>invalid(From):</p>
    <p>(</p>
    <p>must_fallthrough(From ,To);</p>
    <p>direct_jump(From ,To);</p>
    <p>direct_call(From ,To)</p>
    <p>),(</p>
    <p>invalid(To);</p>
    <p>!instruction(To ,_,_,_,_,_,_,_)</p>
    <p>).</p>
    <p>If there is an instruction at address From that must fallthrough, or jumps, or calls an address To that contains an invalid instruction or no instruction at all, then the instruction at From is also invalid.</p>
  </div>
  <div class="page">
    <p>Instruction Boundary Identification</p>
    <p>. Entry point: +20</p>
    <p>. Address appears in data section: +1</p>
    <p>. Direct jump: +6</p>
    <p>. . . .</p>
  </div>
  <div class="page">
    <p>Symbolization</p>
    <p>Naive approach</p>
    <p>I Numbers in the binary address range  symbols I Numbers outside the range  literals</p>
    <p>I False positives: A literal coincides with the binary address range</p>
    <p>I False negatives: (see paper)</p>
  </div>
  <div class="page">
    <p>Symbolization: Reducing false positives</p>
    <p>I Collect additional evidence (how the number is used) using supporting analyses and heuristics</p>
    <p>I Assign points to candidates: . Symbol . Symbol-Symbol . Strings . Other (data elements with different size)</p>
    <p>I Aggregate points to make a decision</p>
  </div>
  <div class="page">
    <p>Supporting Analyses: Def-Uses</p>
    <p>Predicate: def_used(Adef,Reg,Ause) Register Reg is defined in Adef and used in Ause</p>
    <p>... 40c808: add RDX,32 40c80c: cmp RCX,58 40c810: jle 40c800 ...</p>
    <p>... 443b28:</p>
    <p>RDX</p>
  </div>
  <div class="page">
    <p>Supporting Analyses: Register value analysis</p>
    <p>Predicate: reg_val(A1,Reg1,A2,Reg2,Mult,Disp) value(Reg1@A1) = value(Reg2@A2)  Mult + Disp</p>
    <p>... 40c808: add RDX,32 40c80c: cmp RCX,58 40c810: jle 40c800 ...</p>
    <p>... 443b28:</p>
    <p>RDX=443b08</p>
    <p>RDX=?*32+443b28</p>
  </div>
  <div class="page">
    <p>Supporting Analyses: Register value analysis</p>
    <p>Predicate: reg_val(A1,Reg1,A2,Reg2,Mult,Disp) value(Reg1@A1) = value(Reg2@A2)  Mult + Disp</p>
    <p>... 40c808: add RDX,32 40c80c: cmp RCX,58 40c810: jle 40c800 ...</p>
    <p>... 443b28:</p>
    <p>RDX=443b08</p>
    <p>RDX=?*32+443b28</p>
  </div>
  <div class="page">
    <p>Supporting Analyses: Data access patterns</p>
    <p>Predicate: data_access_pattern(Addr,Size,Mult,Addr2) Addr is accessed with size Size and multiplier Mult from Addr2</p>
    <p>... 40c808: add RDX,32 40c80c: cmp RCX,58 40c810: jle 40c800 ...</p>
    <p>... 443b28:</p>
    <p>RDX=?*32+443b28</p>
    <p>access Qword with x32 multiplier</p>
  </div>
  <div class="page">
    <p>Assigning points</p>
    <p>Use supporting analyses to enhance confidence</p>
    <p>Candidates in data section</p>
    <p>I Pointer to instruction beginning</p>
    <p>I Data access match</p>
    <p>I Data access conflict ,</p>
    <p>I ...</p>
  </div>
  <div class="page">
    <p>Experimental Evaluation</p>
    <p>I Our tool Ddisasm supports x64 Linux ELF binaries I We test our disassembler Ddisasm with:</p>
    <p>. 3 benchmark sets</p>
    <p>. 7 compiler versions (GCC, Clang and ICC).</p>
    <p>. 6 compiler optimization flags</p>
    <p>I A total of 7658 binaries</p>
    <p>I Compare to Ramblr state-of-the-art tool in reassembleable disassembly</p>
  </div>
  <div class="page">
    <p>Results</p>
    <p>symbolization information</p>
    <p>functionality of reassembled binary</p>
    <p>% co</p>
    <p>rr ec</p>
    <p>tl y</p>
    <p>d is</p>
    <p>a ss</p>
    <p>em b</p>
    <p>le d</p>
    <p>b in</p>
    <p>ar ie</p>
    <p>s</p>
    <p>Ddisasm Ramblr</p>
  </div>
  <div class="page">
    <p>Disassembly Time in Seconds</p>
    <p>Ramblr</p>
    <p>D d i s a s m</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>I Reassembleable disassembly is undecidable</p>
    <p>I Practical solutions benefit from analysis and heuristics I Datalog works for both:</p>
    <p>. Express analysis concisely: less error-prone, fast development</p>
    <p>. Easy to experiment with heuristics expressed as Datalog rules</p>
    <p>I Ddisasm is faster and achieves better precision than the state-of-the-art.</p>
  </div>
  <div class="page">
    <p>Questions?</p>
    <p>I Contact: afloresmontoya@grammatech.com</p>
    <p>I Tool: https://github.com/GrammaTech/ddisasm</p>
    <p>I Experimental evaluation: https://zenodo.org/record/3691736</p>
    <p>I Rewriting tutorial using Ddisasm : https://grammatech.github.io/gtirb/md_stack-stamp.html</p>
  </div>
</Presentation>
