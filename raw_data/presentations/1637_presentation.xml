<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Fast Erasure Coding for Data Storage:</p>
    <p>A Comprehensive Study of</p>
    <p>the Acceleration Techniques</p>
    <p>Tianli Zhou &amp; Chao Tian Texas A&amp;M University</p>
  </div>
  <div class="page">
    <p>Contents</p>
    <p>Motivation</p>
    <p>Background and Review</p>
    <p>Evaluating Individual Techniques</p>
    <p>Find the Best Strategy under Optimized Bitmatrix</p>
    <p>Proposed Coding Procedure and Evaluation</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Contents</p>
    <p>Motivation</p>
    <p>Background and Review</p>
    <p>Evaluating Individual Techniques</p>
    <p>Find the Best Strategy under Optimized Bitmatrix</p>
    <p>Proposed Coding Procedure and Evaluation</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Data Reliability</p>
  </div>
  <div class="page">
    <p>Data Reliability</p>
    <p>Disaster happens</p>
  </div>
  <div class="page">
    <p>Data Reliability</p>
    <p>Disaster happens</p>
    <p>Disk failure  Server malfunction  and more....</p>
  </div>
  <div class="page">
    <p>Replication - Erasure Code</p>
    <p>Computational</p>
    <p>Overhead</p>
    <p>Space Overhead</p>
    <p>Erasure Code</p>
    <p>Replication</p>
  </div>
  <div class="page">
    <p>Replication - Erasure Code</p>
    <p>Minimum space overhead</p>
    <p>Much more computational load</p>
    <p>Erasure code relies on Galois Field (finite field) ops</p>
    <p>Computational</p>
    <p>Overhead</p>
    <p>Space Overhead</p>
    <p>Erasure Code</p>
    <p>Replication</p>
  </div>
  <div class="page">
    <p>Replication - Erasure Code</p>
    <p>Minimum space overhead</p>
    <p>Much more computational load</p>
    <p>Erasure code relies on Galois Field (finite field) ops</p>
    <p>Computational</p>
    <p>Overhead</p>
    <p>Space Overhead</p>
    <p>Erasure Code</p>
    <p>Replication</p>
    <p>How to reduce it</p>
  </div>
  <div class="page">
    <p>Acceleration Techniques</p>
    <p>Covert to XOR</p>
    <p>operations</p>
    <p>Schedule</p>
    <p>Computing</p>
    <p>Order</p>
    <p>Specially</p>
    <p>Designed Code</p>
    <p>Apply SIMD</p>
    <p>Optimize for</p>
    <p>CPU Cache</p>
    <p>Optimize</p>
    <p>Coding Matrix</p>
  </div>
  <div class="page">
    <p>Acceleration Techniques</p>
    <p>Fast GF</p>
    <p>Coding</p>
    <p>Coding</p>
    <p>Theory</p>
    <p>Computation</p>
    <p>Resource</p>
    <p>Covert to XOR</p>
    <p>operations</p>
    <p>Schedule</p>
    <p>Computing</p>
    <p>Order</p>
    <p>Specially</p>
    <p>Designed Code</p>
    <p>Apply SIMD Optimize for</p>
    <p>CPU Cache</p>
    <p>Optimize</p>
    <p>Coding Matrix</p>
  </div>
  <div class="page">
    <p>Acceleration Techniques</p>
    <p>Fast GF</p>
    <p>Coding</p>
    <p>Coding</p>
    <p>Theory</p>
    <p>Computation</p>
    <p>Resource</p>
    <p>Covert to XOR</p>
    <p>operations</p>
    <p>Schedule</p>
    <p>Computing</p>
    <p>Order</p>
    <p>Specially</p>
    <p>Designed Code</p>
    <p>Apply SIMD Optimize for</p>
    <p>CPU Cache</p>
    <p>? Optimize</p>
    <p>Coding Matrix</p>
  </div>
  <div class="page">
    <p>Question to Answer</p>
    <p>Most effective technique(s)?</p>
    <p>Utilize together?</p>
    <p>Components to be optimized?</p>
    <p>Problem is still important  Reduce energy consumption</p>
    <p>Virtualized environment</p>
    <p>Mobile / embedded system</p>
    <p>Future I/O technology</p>
  </div>
  <div class="page">
    <p>Contents</p>
    <p>Motivation</p>
    <p>Background and Review</p>
    <p>Evaluating Individual Techniques</p>
    <p>Find the Best Strategy under Optimized Bitmatrix</p>
    <p>Proposed Coding Procedure and Evaluation</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Erasure Code</p>
    <p>storage nodes</p>
    <p>Store coded data to multiple nodes</p>
  </div>
  <div class="page">
    <p>Erasure Code</p>
    <p>storage nodes</p>
    <p>Recover even nodes failures happen</p>
  </div>
  <div class="page">
    <p>Erasure Code</p>
    <p>storage nodes</p>
    <p>k=3</p>
    <p>segments</p>
    <p>n=5</p>
    <p>coded nodes</p>
    <p>Encode</p>
  </div>
  <div class="page">
    <p>Erasure Code</p>
    <p>storage nodes</p>
    <p>k=3</p>
    <p>segments</p>
    <p>n=5</p>
    <p>coded nodes</p>
    <p>Encode</p>
  </div>
  <div class="page">
    <p>Erasure Code</p>
    <p>storage nodes</p>
    <p>k=3</p>
    <p>segments</p>
    <p>MDS code: recover data</p>
    <p>from any k surviving nodes</p>
  </div>
  <div class="page">
    <p>Erasure Code</p>
    <p>storage nodes</p>
    <p>k=3</p>
    <p>segments</p>
    <p>MDS code: recover data</p>
    <p>from any k surviving nodes</p>
  </div>
  <div class="page">
    <p>Erasure Code</p>
    <p>storage nodes</p>
    <p>k=3</p>
    <p>segments</p>
    <p>k=3</p>
    <p>systematic nodes</p>
    <p>m=2</p>
    <p>parity nodes</p>
  </div>
  <div class="page">
    <p>Erasure Code</p>
    <p>storage nodes</p>
    <p>k=3</p>
    <p>segments</p>
    <p>k=3</p>
    <p>systematic nodes</p>
    <p>m=2</p>
    <p>parity nodes</p>
  </div>
  <div class="page">
    <p>Matrix multiplication on finite field</p>
    <p>Encoding</p>
    <p>I PX =</p>
  </div>
  <div class="page">
    <p>Matrix multiplication on finite field</p>
    <p>Encoding</p>
    <p>I PX =</p>
    <p>All elements and ops in GF(2w)</p>
    <p>Galois Field (GF)</p>
    <p>Finite field</p>
  </div>
  <div class="page">
    <p>Decoding</p>
    <p>I P</p>
  </div>
  <div class="page">
    <p>Decoding</p>
    <p>I P</p>
  </div>
  <div class="page">
    <p>Submatrix corresponding to surviving data</p>
    <p>Decoding</p>
    <p>I P</p>
  </div>
  <div class="page">
    <p>Submatrix corresponding to surviving data</p>
    <p>Invert</p>
    <p>Decoding</p>
    <p>-1</p>
    <p>I P</p>
  </div>
  <div class="page">
    <p>Submatrix corresponding to surviving data</p>
    <p>Invert</p>
    <p>Multiplication</p>
    <p>Decoding</p>
    <p>X =</p>
    <p>-1</p>
    <p>I P</p>
  </div>
  <div class="page">
    <p>Direct assign P to Cauchy matrix</p>
    <p>Cauchy Reed-Solomon Codes</p>
    <p>I P</p>
  </div>
  <div class="page">
    <p>Cauchy Reed-Solomon Codes</p>
  </div>
  <div class="page">
    <p>Cauchy Reed-Solomon Codes</p>
    <p>All elements and ops in GF(2w)</p>
  </div>
  <div class="page">
    <p>Direct assign P to Cauchy matrix</p>
    <p>Cauchy Reed-Solomon Codes</p>
    <p>I</p>
    <p>P</p>
  </div>
  <div class="page">
    <p>Fast GF Ops  Binary Representation</p>
    <p>Binary representation of GF elements</p>
    <p>P</p>
    <p>All coefficients</p>
    <p>and messages</p>
    <p>are in GF(2w)</p>
  </div>
  <div class="page">
    <p>Fast GF Ops  Binary Representation</p>
    <p>Message bit-vector representation</p>
    <p>P</p>
  </div>
  <div class="page">
    <p>Fast GF Ops  Binary Representation</p>
    <p>Message bit-vector representation</p>
    <p>P</p>
  </div>
  <div class="page">
    <p>Fast GF Ops  Binary Representation</p>
    <p>Message bit-vector representation</p>
    <p>P 1 by w bit-vector</p>
  </div>
  <div class="page">
    <p>Fast GF Ops  Binary Representation</p>
    <p>Bitmatrix representation</p>
    <p>P</p>
  </div>
  <div class="page">
    <p>Fast GF Ops  Binary Representation</p>
    <p>Bitmatrix representation</p>
    <p>P</p>
  </div>
  <div class="page">
    <p>Fast GF Ops  Binary Representation</p>
    <p>Bitmatrix representation</p>
    <p>w by w bitmatrix P</p>
  </div>
  <div class="page">
    <p>Fast GF Ops  Binary Representation</p>
    <p>Matrix multiplication on GF -&gt; XORs</p>
    <p>P</p>
  </div>
  <div class="page">
    <p>Fast GF Ops  Binary Representation</p>
    <p>Matrix multiplication on GF -&gt; XORs</p>
    <p>P</p>
  </div>
  <div class="page">
    <p>Fast GF Ops  Binary Representation</p>
    <p>Matrix multiplication on GF -&gt; XORs</p>
    <p>P</p>
  </div>
  <div class="page">
    <p>Fast GF Ops  Binary Representation</p>
    <p>Matrix multiplication on GF -&gt; XORs</p>
    <p>P</p>
  </div>
  <div class="page">
    <p>Contents</p>
    <p>Motivation</p>
    <p>Background and Review</p>
    <p>Evaluating Individual Techniques</p>
    <p>Find the Best Strategy under Optimized Bitmatrix</p>
    <p>Proposed Coding Procedure and Evaluation</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Techniques Tiers</p>
  </div>
  <div class="page">
    <p>Bitmatrix Normalization (BN)</p>
    <p>Normalize by each element, find less bit 1s</p>
    <p>James S. Plank, Scott Simmerman, and Catherine D. Schuman. Jerasure: A library in C/C++ facilitating erasure</p>
    <p>coding for storage applications-version 1.2. Technical Report CS-08-627, University of Tennessee, 2008.</p>
  </div>
  <div class="page">
    <p>Bitmatrix Normalization (BN)</p>
    <p>Normalize by each element, find less bit 1s</p>
    <p>James S. Plank, Scott Simmerman, and Catherine D. Schuman. Jerasure: A library in C/C++ facilitating erasure</p>
    <p>coding for storage applications-version 1.2. Technical Report CS-08-627, University of Tennessee, 2008.</p>
    <p>I P</p>
  </div>
  <div class="page">
    <p>Bitmatrix Normalization (BN)</p>
    <p>Normalize by each element, find less bit 1s</p>
    <p>James S. Plank, Scott Simmerman, and Catherine D. Schuman. Jerasure: A library in C/C++ facilitating erasure</p>
    <p>coding for storage applications-version 1.2. Technical Report CS-08-627, University of Tennessee, 2008.</p>
    <p>I P</p>
  </div>
  <div class="page">
    <p>Bitmatrix Normalization (BN)</p>
    <p>Normalize by each element, find less bit 1s</p>
    <p>James S. Plank, Scott Simmerman, and Catherine D. Schuman. Jerasure: A library in C/C++ facilitating erasure</p>
    <p>coding for storage applications-version 1.2. Technical Report CS-08-627, University of Tennessee, 2008.</p>
    <p>I P</p>
  </div>
  <div class="page">
    <p>Bitmatrix Normalization (BN)</p>
    <p>Normalize by each element, find less bit 1s</p>
    <p>James S. Plank, Scott Simmerman, and Catherine D. Schuman. Jerasure: A library in C/C++ facilitating erasure</p>
    <p>coding for storage applications-version 1.2. Technical Report CS-08-627, University of Tennessee, 2008.</p>
    <p>I P</p>
  </div>
  <div class="page">
    <p>Bitmatrix Normalization (BN)</p>
    <p>Normalize by each element, find less bit 1s</p>
    <p>James S. Plank, Scott Simmerman, and Catherine D. Schuman. Jerasure: A library in C/C++ facilitating erasure</p>
    <p>coding for storage applications-version 1.2. Technical Report CS-08-627, University of Tennessee, 2008.</p>
    <p>I P</p>
  </div>
  <div class="page">
    <p>Bitmatrix Normalization (BN)</p>
    <p>Normalize by each element, find less bit 1s</p>
    <p>James S. Plank, Scott Simmerman, and Catherine D. Schuman. Jerasure: A library in C/C++ facilitating erasure</p>
    <p>coding for storage applications-version 1.2. Technical Report CS-08-627, University of Tennessee, 2008.</p>
    <p>I P</p>
  </div>
  <div class="page">
    <p>Bitmatrix Normalization (BN)</p>
    <p>Normalize by each element, find less bit 1s</p>
    <p>James S. Plank, Scott Simmerman, and Catherine D. Schuman. Jerasure: A library in C/C++ facilitating erasure</p>
    <p>coding for storage applications-version 1.2. Technical Report CS-08-627, University of Tennessee, 2008.</p>
    <p>I P</p>
  </div>
  <div class="page">
    <p>Bitmatrix Normalization (BN)</p>
    <p>Normalize by each element, find less bit 1s</p>
    <p>James S. Plank, Scott Simmerman, and Catherine D. Schuman. Jerasure: A library in C/C++ facilitating erasure</p>
    <p>coding for storage applications-version 1.2. Technical Report CS-08-627, University of Tennessee, 2008.</p>
    <p>I P</p>
  </div>
  <div class="page">
    <p>Smart Scheduling (SS)</p>
    <p>Utilize both message and computed parities</p>
    <p>James S. Plank. The RAID-6 liberation code. In Proceedings of the 6th Usenix Conference on</p>
    <p>File and Storage Technologies, pages 97110, 2008.</p>
  </div>
  <div class="page">
    <p>Smart Scheduling (SS)</p>
    <p>Utilize both message and computed parities</p>
    <p>James S. Plank. The RAID-6 liberation code. In Proceedings of the 6th Usenix Conference on</p>
    <p>File and Storage Technologies, pages 97110, 2008.</p>
  </div>
  <div class="page">
    <p>Smart Scheduling (SS)</p>
    <p>Utilize both message and computed parities</p>
    <p>James S. Plank. The RAID-6 liberation code. In Proceedings of the 6th Usenix Conference on</p>
    <p>File and Storage Technologies, pages 97110, 2008.</p>
  </div>
  <div class="page">
    <p>Smart Scheduling (SS)</p>
    <p>Utilize both message and computed parities</p>
    <p>James S. Plank. The RAID-6 liberation code. In Proceedings of the 6th Usenix Conference on</p>
    <p>File and Storage Technologies, pages 97110, 2008.</p>
  </div>
  <div class="page">
    <p>Smart Scheduling (SS)</p>
    <p>Utilize both message and computed parities</p>
    <p>James S. Plank. The RAID-6 liberation code. In Proceedings of the 6th Usenix Conference on</p>
    <p>File and Storage Technologies, pages 97110, 2008.</p>
  </div>
  <div class="page">
    <p>Smart Scheduling (SS)</p>
    <p>Utilize both message and computed parities</p>
    <p>James S. Plank. The RAID-6 liberation code. In Proceedings of the 6th Usenix Conference on</p>
    <p>File and Storage Technologies, pages 97110, 2008.</p>
  </div>
  <div class="page">
    <p>Smart Scheduling (SS)</p>
    <p>Utilize both message and computed parities</p>
    <p>James S. Plank. The RAID-6 liberation code. In Proceedings of the 6th Usenix Conference on</p>
    <p>File and Storage Technologies, pages 97110, 2008.</p>
  </div>
  <div class="page">
    <p>Matching (UM, WM)</p>
    <p>Common XORs of pair message bits</p>
    <p>Unweighted/weighted greedy algorithm</p>
    <p>Cheng Huang, Jin Li, and Minghua Chen. On optimizing XOR-based codes for fault-tolerant</p>
    <p>storage applications. In Proceedings of Information Theory Workshop, pages 218223, 2007.</p>
    <p>P</p>
  </div>
  <div class="page">
    <p>Matching (UM, WM)</p>
    <p>Common XORs of pair message bits</p>
    <p>Unweighted/weighted greedy algorithm</p>
    <p>Cheng Huang, Jin Li, and Minghua Chen. On optimizing XOR-based codes for fault-tolerant</p>
    <p>storage applications. In Proceedings of Information Theory Workshop, pages 218223, 2007.</p>
    <p>P</p>
  </div>
  <div class="page">
    <p>Matching (UM, WM)</p>
    <p>Common XORs of pair message bits</p>
    <p>Unweighted/weighted greedy algorithm</p>
    <p>Cheng Huang, Jin Li, and Minghua Chen. On optimizing XOR-based codes for fault-tolerant</p>
    <p>storage applications. In Proceedings of Information Theory Workshop, pages 218223, 2007.</p>
    <p>P</p>
  </div>
  <div class="page">
    <p>Matching (UM, WM)</p>
    <p>Common XORs of pair message bits</p>
    <p>Unweighted/weighted greedy algorithm</p>
    <p>Cheng Huang, Jin Li, and Minghua Chen. On optimizing XOR-based codes for fault-tolerant</p>
    <p>storage applications. In Proceedings of Information Theory Workshop, pages 218223, 2007.</p>
    <p>P</p>
  </div>
  <div class="page">
    <p>Scheduling - Cache Optimization (S-CO)</p>
    <p>Cache</p>
    <p>Memory</p>
    <p>Jianqiang Luo, Mochan Shrestha, Lihao Xu, and James S. Plank. Efficient encoding schedules for</p>
    <p>XOR-based erasure codes. IEEE Transactions on Computers, 63(9):22592272, 2014.</p>
    <p>Reduce cache miss penalty</p>
  </div>
  <div class="page">
    <p>Scheduling - Cache Optimization (S-CO)</p>
    <p>Cache</p>
    <p>Memory</p>
    <p>Jianqiang Luo, Mochan Shrestha, Lihao Xu, and James S. Plank. Efficient encoding schedules for</p>
    <p>XOR-based erasure codes. IEEE Transactions on Computers, 63(9):22592272, 2014.</p>
    <p>Reduce cache miss penalty</p>
  </div>
  <div class="page">
    <p>Scheduling - Cache Optimization (S-CO)</p>
    <p>Cache</p>
    <p>Memory</p>
    <p>Jianqiang Luo, Mochan Shrestha, Lihao Xu, and James S. Plank. Efficient encoding schedules for</p>
    <p>XOR-based erasure codes. IEEE Transactions on Computers, 63(9):22592272, 2014.</p>
    <p>Reduce cache miss penalty</p>
  </div>
  <div class="page">
    <p>Scheduling - Cache Optimization (S-CO)</p>
    <p>Cache</p>
    <p>Memory</p>
    <p>Jianqiang Luo, Mochan Shrestha, Lihao Xu, and James S. Plank. Efficient encoding schedules for</p>
    <p>XOR-based erasure codes. IEEE Transactions on Computers, 63(9):22592272, 2014.</p>
    <p>Reduce cache miss penalty</p>
  </div>
  <div class="page">
    <p>Vectorization</p>
    <p>Using SIMD ISA perform multiple bits operation  SSE: 128 bits</p>
    <p>AVX2: 256 bits</p>
    <p>AVX512: 512 bits</p>
  </div>
  <div class="page">
    <p>Vectorization</p>
    <p>Using SIMD ISA perform multiple bits operation  SSE: 128 bits</p>
    <p>AVX2: 256 bits</p>
    <p>AVX512: 512 bits</p>
    <p>V-XOR</p>
  </div>
  <div class="page">
    <p>Vectorization</p>
    <p>Using SIMD ISA perform multiple bits operation  SSE: 128 bits</p>
    <p>AVX2: 256 bits</p>
    <p>AVX512: 512 bits</p>
    <p>V-XOR</p>
    <p>X</p>
    <p>V-GF</p>
    <p>X</p>
  </div>
  <div class="page">
    <p>Vectorization</p>
    <p>Using SIMD ISA perform multiple bits operation  SSE: 128 bits</p>
    <p>AVX2: 256 bits</p>
    <p>AVX512: 512 bits</p>
    <p>V-XOR</p>
    <p>X</p>
    <p>V-GF</p>
    <p>X</p>
    <p>Jerasure 2.0</p>
  </div>
  <div class="page">
    <p>Vectorization</p>
    <p>Using SIMD ISA perform multiple bits operation  SSE: 128 bits</p>
    <p>AVX2: 256 bits</p>
    <p>AVX512: 512 bits</p>
    <p>V-XOR</p>
    <p>X</p>
    <p>V-GF</p>
    <p>X</p>
    <p>Jerasure 2.0</p>
    <p>v.s.</p>
  </div>
  <div class="page">
    <p>Vectorization</p>
    <p>Using SIMD ISA perform multiple bits operation  SSE: 128 bits</p>
    <p>AVX2: 256 bits</p>
    <p>AVX512: 512 bits</p>
    <p>V-XOR</p>
    <p>X</p>
    <p>V-GF</p>
    <p>X</p>
    <p>Jerasure 2.0</p>
    <p>v.s.</p>
  </div>
  <div class="page">
    <p>Scheduling - Cache Optimization (S-CO)</p>
    <p>Jianqiang Luo, Mochan Shrestha, Lihao Xu, and James S. Plank. Efficient encoding schedules for</p>
    <p>XOR-based erasure codes. IEEE Transactions on Computers, 63(9):22592272, 2014.</p>
    <p>Reduce cache miss penalty</p>
    <p>Cache</p>
    <p>Memory</p>
  </div>
  <div class="page">
    <p>Scheduling - Cache Optimization (S-CO)</p>
    <p>u2  p0 ,p1 ,p4...</p>
    <p>u0  p0 ,p1 ,p2...</p>
    <p>u1  p2 ,p3 ,p5...</p>
    <p>u3  p2 ,p6 ,p8...</p>
    <p>Jianqiang Luo, Mochan Shrestha, Lihao Xu, and James S. Plank. Efficient encoding schedules for</p>
    <p>XOR-based erasure codes. IEEE Transactions on Computers, 63(9):22592272, 2014.</p>
    <p>Reduce cache miss penalty</p>
    <p>Cache</p>
    <p>Memory</p>
  </div>
  <div class="page">
    <p>Question to Answer</p>
    <p>Most effective technique(s)?</p>
    <p>Utilize together?</p>
    <p>Components to be optimized?</p>
  </div>
  <div class="page">
    <p>Individual Techniques</p>
  </div>
  <div class="page">
    <p>Individual Techniques</p>
    <p>XOR-based</p>
    <p>Vectorization</p>
  </div>
  <div class="page">
    <p>Individual Techniques</p>
    <p>XOR-based</p>
    <p>Vectorization</p>
    <p>Bitmatrix</p>
    <p>Normalization</p>
    <p>Unweighted</p>
    <p>Matching</p>
    <p>Weighted</p>
    <p>Matching</p>
  </div>
  <div class="page">
    <p>Individual Techniques</p>
    <p>XOR-based</p>
    <p>Vectorization</p>
    <p>Bitmatrix</p>
    <p>Normalization</p>
    <p>Smart</p>
    <p>Scheduling</p>
    <p>Unweighted</p>
    <p>Matching</p>
    <p>Weighted</p>
    <p>Matching</p>
  </div>
  <div class="page">
    <p>Individual Techniques</p>
    <p>XOR-based</p>
    <p>Vectorization</p>
    <p>Bitmatrix</p>
    <p>Normalization</p>
    <p>Smart</p>
    <p>Scheduling</p>
    <p>Unweighted</p>
    <p>Matching</p>
    <p>Weighted</p>
    <p>Matching</p>
    <p>Cache</p>
    <p>Optimization</p>
  </div>
  <div class="page">
    <p>Optimization Tiers</p>
  </div>
  <div class="page">
    <p>Optimization Tiers</p>
  </div>
  <div class="page">
    <p>Optimization Tiers</p>
    <p>Generate Coding</p>
    <p>Schedule</p>
    <p>Run</p>
    <p>Coding Schedule</p>
  </div>
  <div class="page">
    <p>Optimization Tiers</p>
    <p>Generate Coding</p>
    <p>Schedule</p>
    <p>Run</p>
    <p>Coding Schedule</p>
  </div>
  <div class="page">
    <p>Optimization Tiers</p>
    <p>Generate Coding</p>
    <p>Schedule</p>
    <p>Run</p>
    <p>Coding Schedule</p>
    <p>By-pass</p>
    <p>By-pass</p>
  </div>
  <div class="page">
    <p>Optimization Tiers</p>
    <p>Generate Coding</p>
    <p>Schedule</p>
    <p>Run</p>
    <p>Coding Schedule</p>
    <p>By-pass</p>
    <p>By-pass Unweighted</p>
    <p>Matching</p>
    <p>(UM)</p>
    <p>Weighted</p>
    <p>Matching</p>
    <p>(WM)</p>
  </div>
  <div class="page">
    <p>Question to Answer</p>
    <p>Most effective technique(s)?</p>
    <p>Utilize together?</p>
    <p>Components to be optimized?</p>
  </div>
  <div class="page">
    <p>Combinations (i,j)-strategy</p>
    <p>By-pass</p>
    <p>Smart</p>
    <p>Scheduling</p>
    <p>(SS)</p>
    <p>By-pass</p>
    <p>Unweighted</p>
    <p>Matching</p>
    <p>(UM)</p>
    <p>Weighted</p>
    <p>Matching</p>
    <p>(WM)</p>
    <p>Normalization (BN)</p>
  </div>
  <div class="page">
    <p>Combinations (i,j)-strategy</p>
    <p>By-pass</p>
    <p>Smart</p>
    <p>Scheduling</p>
    <p>(SS)</p>
    <p>By-pass</p>
    <p>Unweighted</p>
    <p>Matching</p>
    <p>(UM)</p>
    <p>Weighted</p>
    <p>Matching</p>
    <p>(WM)</p>
    <p>Normalization (BN)   0,1</p>
    <p>0,3</p>
  </div>
  <div class="page">
    <p>Combinations (i,j)-strategy</p>
    <p>By-pass</p>
    <p>Smart</p>
    <p>Scheduling</p>
    <p>(SS)</p>
    <p>By-pass</p>
    <p>Unweighted</p>
    <p>Matching</p>
    <p>(UM)</p>
    <p>Weighted</p>
    <p>Matching</p>
    <p>(WM)</p>
    <p>Example:</p>
    <p>strategy-(1,1)</p>
    <p>Normalization (BN)   0,1</p>
    <p>0,3</p>
  </div>
  <div class="page">
    <p>Combinations (i,j)-strategy</p>
    <p>By-pass</p>
    <p>Smart</p>
    <p>Scheduling</p>
    <p>(SS)</p>
    <p>By-pass</p>
    <p>Unweighted</p>
    <p>Matching</p>
    <p>(UM)</p>
    <p>Weighted</p>
    <p>Matching</p>
    <p>(WM)</p>
    <p>Example:</p>
    <p>strategy-(1,1)</p>
    <p>Normalization (BN)   0,1</p>
    <p>0,3</p>
  </div>
  <div class="page">
    <p>Contents</p>
    <p>Motivation</p>
    <p>Background and Review</p>
    <p>Evaluating Individual Techniques</p>
    <p>Find the Best Strategy under Optimized Bitmatrix</p>
    <p>Proposed Coding Procedure and Evaluation</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Question to Answer</p>
    <p>Most effective technique(s)?</p>
    <p>Utilize together?</p>
    <p>Components to be optimized?</p>
  </div>
  <div class="page">
    <p>Choice of Cauchy Matrix</p>
    <p>Different X,Y array yields different Cauchy Matrix</p>
  </div>
  <div class="page">
    <p>Choice of Cauchy Matrix</p>
    <p>Different X,Y array yields different Cauchy Matrix</p>
  </div>
  <div class="page">
    <p>Choice of Cauchy Matrix</p>
    <p>Different X,Y array yields different Cauchy Matrix</p>
  </div>
  <div class="page">
    <p>Choice of Cauchy Matrix</p>
    <p>Different X,Y array yields different Cauchy Matrix</p>
  </div>
  <div class="page">
    <p>Choice of Cauchy Matrix</p>
    <p>Different Cauchy Matrix affect coding chain</p>
    <p>By-pass</p>
    <p>Smart</p>
    <p>Scheduling</p>
    <p>(SS)</p>
    <p>By-pass</p>
    <p>Unweighted</p>
    <p>Matching</p>
    <p>(UM)</p>
    <p>Weighted</p>
    <p>Matching</p>
    <p>(WM)</p>
    <p>Normalization (BN)</p>
    <p>X,Y array</p>
    <p>Coding schedule, (memcpy, XOR)</p>
  </div>
  <div class="page">
    <p>Choice of Cauchy Matrix</p>
    <p>Different Cauchy Matrix affect coding chain</p>
    <p>By-pass</p>
    <p>Smart</p>
    <p>Scheduling</p>
    <p>(SS)</p>
    <p>By-pass</p>
    <p>Unweighted</p>
    <p>Matching</p>
    <p>(UM)</p>
    <p>Weighted</p>
    <p>Matching</p>
    <p>(WM)</p>
    <p>Normalization (BN)</p>
    <p>X,Y array</p>
    <p>Coding schedule, (memcpy, XOR)</p>
    <p>Cost of given X,Y array</p>
  </div>
  <div class="page">
    <p>Bitmatrix Optimization</p>
    <p>Individual bitmatrix optimization for all (i,j)-strategies</p>
    <p>Simulated Annealing and Genetic Algorithm</p>
    <p># of operations as cost</p>
  </div>
  <div class="page">
    <p>[no_opt by SA by GA ], # of ops in schedule</p>
  </div>
  <div class="page">
    <p>[no_opt by SA by GA ], # of ops in schedule</p>
  </div>
  <div class="page">
    <p>[no_opt by SA by GA ], # of ops in schedule</p>
  </div>
  <div class="page">
    <p>Strategies-(i,j) with Optimized Bitmatrices</p>
    <p>strategy-(1,3) is</p>
    <p>the best strategy</p>
  </div>
  <div class="page">
    <p>Optimized Bitmatrix Reduced Costs</p>
  </div>
  <div class="page">
    <p>Memcpy is 1.5x faster than XOR</p>
    <p>Cost functions:</p>
    <p>Total # of XORs in schedule</p>
    <p>Total # of ops in schedule</p>
    <p>Weighted sum of ops in schedule</p>
    <p>Cost Function Improvement</p>
    <p>Table 4: Encoding throughput (GB/s) using bitmatrices</p>
    <p>obtained by the genetic algorithm under different cost functions</p>
  </div>
  <div class="page">
    <p>Contents</p>
    <p>Motivation</p>
    <p>Background and Review</p>
    <p>Evaluating Individual Techniques</p>
    <p>Find the Best Strategy under Optimized Bitmatrix</p>
    <p>Proposed Coding Procedure and Evaluation</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Proposed Coding Procedure</p>
    <p>WM</p>
    <p>Pre-optimized Bitmatrix</p>
  </div>
  <div class="page">
    <p>Proposed Coding Procedure</p>
    <p>WM</p>
    <p>Pre-optimized Bitmatrix</p>
    <p>Coding Schedule</p>
  </div>
  <div class="page">
    <p>Testing Setup</p>
    <p>Ryzen 1700X @ 3.4Ghz (8C/16T)</p>
    <p>16GB DDR4</p>
    <p>Ubuntu 18.04 64-bit, GCC 7.3.0</p>
    <p>Jerasure 1.2A/ Jerasure 2.0:</p>
    <p>XOR-based Cauchy RS code (BN, SS applied)</p>
    <p>GF-based RS code</p>
    <p>Raid-6</p>
    <p>Other codes:</p>
    <p>EVENODD</p>
    <p>RDP</p>
    <p>STAR</p>
  </div>
  <div class="page">
    <p>Encoding v.s. Efficient RS/CRS code</p>
    <p>Outperform vectorized XOR-based</p>
    <p>CRS code for m&gt;2</p>
    <p>Table 5: Encoding throughput (GB/s) for methods that allow</p>
    <p>general (n, k) parameters and w = 8</p>
  </div>
  <div class="page">
    <p>Encoding v.s. Efficient RS/CRS code</p>
    <p>Outperform vectorized XOR-based</p>
    <p>CRS code for m&gt;2</p>
    <p>Outperform vectorized GF-based RS</p>
    <p>code with big margin (~ 2x faster)</p>
    <p>Table 5: Encoding throughput (GB/s) for methods that allow</p>
    <p>general (n, k) parameters and w = 8</p>
  </div>
  <div class="page">
    <p>Encoding v.s. Three Parities Codes</p>
    <p>Similar or better</p>
    <p>performance than</p>
    <p>specially designed codes</p>
  </div>
  <div class="page">
    <p>Encoding v.s. Two Parities Codes</p>
    <p>Similar or better</p>
    <p>performance than</p>
    <p>specially designed codes</p>
  </div>
  <div class="page">
    <p>Overall Encoding Improvement</p>
  </div>
  <div class="page">
    <p>Decoding</p>
  </div>
  <div class="page">
    <p>Decoding</p>
    <p>Direct read in most cases</p>
  </div>
  <div class="page">
    <p>Decoding</p>
    <p>Direct read in most cases</p>
    <p>Degraded read (decoding) only if systematic nodes fail</p>
  </div>
  <div class="page">
    <p>Decoding</p>
    <p>Direct read in most cases</p>
    <p>Degraded read (decoding) only if systematic nodes fail  Single disk failure rate : 1%</p>
    <p>In (10,6) erasure code storage system  1 systematic node failure: ~ 0.055</p>
    <p>2 systematic node failure: ~ 0.0014</p>
    <p>3 systematic node failure: ~ 1.8x10-5</p>
    <p>4 systematic node failure: ~ 1.4x10-7</p>
  </div>
  <div class="page">
    <p>Decoding</p>
    <p>Direct read in most cases</p>
    <p>Degraded read (decoding) only if systematic nodes fail  Single disk failure rate : 1%</p>
    <p>In (10,6) erasure code storage system  1 systematic node failure: ~ 0.055</p>
    <p>2 systematic node failure: ~ 0.0014</p>
    <p>3 systematic node failure: ~ 1.8x10-5</p>
    <p>4 systematic node failure: ~ 1.4x10-7</p>
    <p>Decoding performance should be viewed as secondary importance</p>
  </div>
  <div class="page">
    <p>Decoding Throughput</p>
  </div>
  <div class="page">
    <p>Contents</p>
    <p>Motivation</p>
    <p>Background and Review</p>
    <p>Individual Techniques and Combinations</p>
    <p>Bitmatrix Optimization</p>
    <p>Proposed Coding Procedure and Evaluation</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Comprehensive study of acceleration techniques</p>
    <p>Combine existing techniques and jointly optimize the bitmatrix</p>
    <p>Proposed approach outperforms most existing approaches in encoding throughput.</p>
  </div>
  <div class="page">
    <p>Conclusion : Key Finding</p>
    <p>Vectorization at XOR-level is much better choice than vectorization of finite field operations</p>
    <p>Higher throughput (~ 2x faster)</p>
    <p>Easy migration to newer SIMD ISA</p>
    <p>SSE: 128 bit AVX2: 256 bit AVX-512: 512 bit</p>
  </div>
  <div class="page">
    <p>Thank you!</p>
    <p>Questions?</p>
    <p>Tianli Zhou: zhoutl1106@tamu.edu</p>
    <p>Chao Tian: chao.tian@tamu.edu</p>
    <p>Source code:</p>
    <p>https://bitbucket.org/zhoutl1106/zerasure.git</p>
    <p>https://github.com/zhoutl1106/zerasure.git</p>
  </div>
</Presentation>
