<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Mohamed Hefeeda 1</p>
    <p>School of Computing Science Simon Fraser University, Canada</p>
    <p>ISP-Friendly Peer Matching without ISP Collaboration</p>
    <p>Mohamed Hefeeda</p>
    <p>(Joint work with ChengHsin Hsu)</p>
  </div>
  <div class="page">
    <p>Mohamed Hefeeda 2</p>
    <p>P2P Systems (file sharing, live streaming, VoD, ...) are very popular nowadays - Generating a major fraction of Internet traffic</p>
    <p>In most of these systems, peers offer limited capacity and reliability</p>
    <p>Client peer typically served by multiple senders  Choosing good senders is important for</p>
    <p>- Clients: better performance</p>
    <p>- P2P System: more capacity, better scalability</p>
    <p>- Network (ISPs): reduced load on inter- /intra-ISP links</p>
    <p>Introduction</p>
  </div>
  <div class="page">
    <p>Mohamed Hefeeda 3</p>
    <p>Given set of potential senders for a receiver, find subset of them that minimize the load on ISPs - Load = traffic on inter-ISP links (expensive) and on</p>
    <p>intra-ISP links</p>
    <p>General formulation/solution  can be used in different Systems - BitTorrent-like: use in tracker</p>
    <p>- Gnutella-like: use in peers</p>
    <p>- Peer-assisted CDN: use in managing servers</p>
    <p>Our Work: Peer Matching Problem</p>
  </div>
  <div class="page">
    <p>Mohamed Hefeeda 4</p>
    <p>Find nearby peers in terms of - AS hops  reduce inter-ISP load - PoP (Point of Presence) distance  reduce intra-ISP</p>
    <p>load</p>
    <p>Efficiently estimate AS paths &amp; PoP distances - Small memory/CPU requirements</p>
    <p>- Use public data (BGP tables, GeoIP, ), no probing</p>
    <p>No infrastructure need to be deployed  No need for cooperation from ISPs  No need to modify client software</p>
    <p>Our Approach</p>
  </div>
  <div class="page">
    <p>Mohamed Hefeeda 5</p>
    <p>Provider Portal for P2P (P4P) [Xie 08] - ISPs deploy servers (iTrackers) to guide peer matching</p>
    <p>- Require cooperation from ISPs and infrastructure</p>
    <p>Using DNS redirections [Choffnes 08] - Peers observe similar delay to CDN replicas close to each</p>
    <p>other</p>
    <p>- Require modifying clients</p>
    <p>Match peers within the same AS [Bindal 06] - Specific to BitTorrent</p>
    <p>- Peers outside AS are chosen randomly</p>
    <p>Related Work</p>
  </div>
  <div class="page">
    <p>Mohamed Hefeeda 6</p>
    <p>Large ISP: PoPs at many locations  S3 is better for R than S2, though same AS distance</p>
    <p>Overview</p>
  </div>
  <div class="page">
    <p>Mohamed Hefeeda 7</p>
    <p>We need to estimate AS hops between peers - Need AS path inference algorithm (valley-free policy)</p>
    <p>- Modified Dijkstra Algorithm [Mao 05]  very expensive, took ~2 days of running time, huge memory footprint</p>
    <p>- Our optimization: runs 1-3 hours, &lt; 1% memory</p>
    <p>We also need to infer PoP topology - Propose simple method to cluster IP prefixes</p>
    <p>- Use GeoIP databases to map clusters to PoPs</p>
    <p>Overview</p>
  </div>
  <div class="page">
    <p>Mohamed Hefeeda 8</p>
    <p>Distance oracle: concise data structure, enables online matching in O(1) steps</p>
    <p>Peer Matching</p>
    <p>Distance Inference</p>
    <p>Offline Pre-processing</p>
    <p>Online Matching</p>
    <p>BGP Info</p>
    <p>AS graph</p>
    <p>IP-Geo</p>
    <p>Peer Matching</p>
    <p>Distance Oracle</p>
  </div>
  <div class="page">
    <p>Mohamed Hefeeda 9</p>
    <p>Original algorithm [Mao 05] - O(V3), V number of ASes</p>
    <p>- Currently, there are 28,000+ ASes [CAIDA]</p>
    <p>- Very expensive</p>
    <p>Observation - Many ASes have small degree (client/stub ASes)</p>
    <p>- 83% of ASes have 1 or very few C2P links [CAIDA]</p>
    <p>-  their AS paths can be inferred using their providers paths</p>
    <p>-  stub ASes can be removed from the AS graph</p>
    <p>AS Path Inference</p>
  </div>
  <div class="page">
    <p>Mohamed Hefeeda 10</p>
    <p>T: transit AS, S: stub AS</p>
    <p>Given T0 T1 &amp; T0T2  T0S can be computed</p>
    <p>We can recursively remove ASes - Stub AS first</p>
    <p>- Transit ASes that are customers of larger ASes, and so on</p>
    <p>AS Path Inference</p>
  </div>
  <div class="page">
    <p>Mohamed Hefeeda 11</p>
    <p>Estimate AS paths for core ASes first</p>
    <p>- Using any algorithm</p>
    <p>Then paths starting/end at a transit AS</p>
    <p>Then, the rest</p>
    <p>Time Complexity: O(T3 + T S + S2)</p>
    <p>- T small fraction (&lt;18%) of ASes  much faster</p>
    <p>- 3 hours (instead of 2 days) for whole matrix</p>
    <p>AS Path Inference</p>
  </div>
  <div class="page">
    <p>Mohamed Hefeeda 12</p>
    <p>Maintaining the whole distance matrix is costly - Assume each entry takes 1 byte</p>
    <p>- #of ASes = 28,594  817 MB for distance matrix</p>
    <p>Idea: Maintain only the core matrix, other entries can be computed online</p>
    <p>Tradeoff: small core vs. more online computations</p>
    <p>Distance Oracle</p>
  </div>
  <div class="page">
    <p>Mohamed Hefeeda 13</p>
    <p>We can use a distance oracle of size 8 MB, and perform &lt; 13 operations online on average - #operations depends on AS degree, not size of AS graph</p>
    <p>Distance Oracle: Tradeoff</p>
    <p>Level Core Size (#ASes)</p>
    <p>Memory (MB) Online Computations (Average)</p>
  </div>
  <div class="page">
    <p>Mohamed Hefeeda 14</p>
    <p>Infer approximate PoP topology of ASes  Algorithm overview:</p>
    <p>- Collect all IP prefixes from BGP tables and map them to their ASes</p>
    <p>- For each AS, cluster IP prefixes into one or more PoPs</p>
    <p>- Analyze BGP updates to infer connectivity among PoP in same AS</p>
    <p>- Combine PoP topology with AS graph</p>
    <p>PoP Distance: Overview</p>
  </div>
  <div class="page">
    <p>Mohamed Hefeeda 15</p>
    <p>Trace-based simulations  Use real IPs from</p>
    <p>- BitTorrent tracker: ~150,000</p>
    <p>- Online content provider (CBC -- Canadian Broadcasting Corporation); ~ 160,000</p>
    <p>BGP tables from RouteViews &amp; RIPE  AS relationship data from CAIDA  Use GeoIP [maxmind.com] for IP/AS/location</p>
    <p>mapping</p>
    <p>Evaluation</p>
  </div>
  <div class="page">
    <p>Mohamed Hefeeda 16</p>
    <p>Simulate multi-sender sessions for objects with different popularities: 1% -- 10%</p>
    <p>Change number of chosen senders: 10  100  Implement</p>
    <p>- ISPF: ISP-Friendly Matching</p>
    <p>- ISPF-Lite: ISP-Friendly Matching, without PoP info</p>
    <p>- AS: Match based on AS distance only</p>
    <p>- Prefix: Match based on longest common IP prefix  Uses IPs of peers  almost free</p>
    <p>- Random: currently used in many systems</p>
    <p>Evaluation</p>
  </div>
  <div class="page">
    <p>Mohamed Hefeeda 17</p>
    <p>Some gain from (the free) Prefix  Significant gain from ISPF/ISPF-Lite</p>
    <p>Sample Results: Vary #Senders</p>
  </div>
  <div class="page">
    <p>Mohamed Hefeeda 18</p>
    <p>Even more gain for rare objects</p>
    <p>Sample Results: Vary Object Popularity</p>
  </div>
  <div class="page">
    <p>Mohamed Hefeeda 19</p>
    <p>ISPF achieves shorter distances</p>
    <p>Sample Results: PoP Distance</p>
  </div>
  <div class="page">
    <p>Mohamed Hefeeda 20</p>
    <p>Dynamics of AS Graph</p>
    <p>CAIDA AS relationship data for a full year   run AS inference algorithm once a month or so</p>
  </div>
  <div class="page">
    <p>Mohamed Hefeeda 21</p>
    <p>Peer matching is important in multi-sender systems - P2P systems, distributed streaming, CDN, pCDN,</p>
    <p>Peer matching algorithms based on - AS distance</p>
    <p>- PoP distance</p>
    <p>Do not need infrastructure, modifying peers, ISP cooperation</p>
    <p>Efficient computation and storage of AS distance - ~ 8 MB (&lt;1% of whole matrix) for 28,000+ ASes</p>
    <p>Conclusions and Future Work</p>
  </div>
  <div class="page">
    <p>Mohamed Hefeeda 22</p>
    <p>Currently implementing in pCDN (for CBC) and in BitTorrent tracker</p>
    <p>Exploring link cost model - Assign weights to inter-AS links</p>
    <p>Exploring more efficient methods for discovering &amp; storing PoP topology</p>
    <p>Conclusions and Future Work</p>
  </div>
  <div class="page">
    <p>Mohamed Hefeeda 23</p>
    <p>Thank You!</p>
    <p>Questions??</p>
    <p>More info at:</p>
    <p>http://nsl.cs.sfu.ca/</p>
  </div>
</Presentation>
