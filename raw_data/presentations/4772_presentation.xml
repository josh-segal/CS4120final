<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>L C S</p>
    <p>AEGIS: Architecture for Tamper-Evident and Tamper-Resistant Processing</p>
    <p>G. Edward Suh, Dwaine Clarke, Blaise Gassend, Marten van Dijk, Srinivas Devadas</p>
    <p>Massachusetts Institute of Technology</p>
  </div>
  <div class="page">
    <p>International Conference on Supercomputing  June 23-26, 2003G. Edward Suh  MIT Lab for Computer Science</p>
    <p>Cases for Physical Security</p>
    <p>Applications on untrusted hosts with untrusted owners  Digital Rights Management (DRM), Software licensing  Distributed computation on Internet  Mobile agents</p>
    <p>New challenges  Untrusted OS  Physical attacks</p>
    <p>Make Illegal Copies Incorrect Results;</p>
    <p>Break the System</p>
    <p>Music/Movie</p>
    <p>Software</p>
    <p>Program</p>
    <p>Distributed Computing, Peer-to-Peer Network</p>
  </div>
  <div class="page">
    <p>International Conference on Supercomputing  June 23-26, 2003G. Edward Suh  MIT Lab for Computer Science</p>
    <p>Conventional Tamper-Proof Packages</p>
    <p>Processing system in a tamper-proof package (IBM 4758)  Expensive: many detecting sensors  Needs to be continuously powered: battery-backed RAM</p>
    <p>$2,690 in 2001</p>
    <p>Memory</p>
    <p>Source: IBM website</p>
  </div>
  <div class="page">
    <p>International Conference on Supercomputing  June 23-26, 2003G. Edward Suh  MIT Lab for Computer Science</p>
    <p>Single-Chip Secure Processors</p>
    <p>Trusted Environment</p>
    <p>Memory</p>
    <p>I/O</p>
    <p>Check Integrity, Encrypt</p>
    <p>Only trust a single chip: tamper-resistant  Off-chip memory: verify the integrity and encrypt  Untrusted OS: identify a core part or protect against OS attacks</p>
    <p>Cheap, Flexible, High Performance</p>
    <p>Identify or Protect against</p>
    <p>Untrusted OS</p>
  </div>
  <div class="page">
    <p>International Conference on Supercomputing  June 23-26, 2003G. Edward Suh  MIT Lab for Computer Science</p>
    <p>Related Research</p>
    <p>XOM (eXecution Only Memory): David Lie et al  Stated goal: Protect integrity and privacy of code and data  Operating system is completed untrusted  Memory integrity checking does not prevent replay attacks  Privacy is expensive but not necessary for all applications</p>
    <p>Palladium/NGSCB: Microsoft  Stated goal: Protect from software attacks  Combination of hardware and software mechanisms  Adds &quot;curtained&quot; memory to avoid DMA attacks  Uses a security kernel (Nexus)  Memory integrity and privacy are assumed (only software attacks).</p>
  </div>
  <div class="page">
    <p>L C S</p>
    <p>AEGIS: High-Level Architecture</p>
  </div>
  <div class="page">
    <p>International Conference on Supercomputing  June 23-26, 2003G. Edward Suh  MIT Lab for Computer Science</p>
    <p>Secure Execution Environments</p>
    <p>Tamper-Evident (TE) environment  Guarantees a valid execution and the identity of a program; no</p>
    <p>privacy  Any software or physical tampering to alter the program behavior</p>
    <p>should be detected</p>
    <p>Private Tamper-Resistant (PTR) environment  TE environment + privacy  Encrypt instructions and data  Assume programs do not leak information via memory access</p>
    <p>patterns</p>
    <p>Implementation  Either have a trusted part of the OS or completely untrust the OS  Secure context manager, encryption and integrity verification</p>
  </div>
  <div class="page">
    <p>International Conference on Supercomputing  June 23-26, 2003G. Edward Suh  MIT Lab for Computer Science</p>
    <p>Secure Context Manager (SCM)</p>
    <p>A specialized module in the processor</p>
    <p>Assign a secure process ID (SPID) for each secure process</p>
    <p>Implements new instructions  enter_aegis  set_aegis_mode  random  sign_msg</p>
    <p>Maintains a secure table  Even operating system</p>
    <p>cannot modify</p>
    <p>Standard Processor SCM</p>
    <p>L1 Instruction</p>
    <p>cache</p>
    <p>On-Chip L2 Cache</p>
    <p>Processor Core</p>
    <p>L1 Data cache</p>
    <p>Regs</p>
    <p>SPID</p>
    <p>Off-Chip Memory</p>
  </div>
  <div class="page">
    <p>International Conference on Supercomputing  June 23-26, 2003G. Edward Suh  MIT Lab for Computer Science</p>
    <p>SCM: Program Start-Up</p>
    <p>enter_aegis: TE mode  Start protecting the</p>
    <p>integrity of a program  Compute and store the</p>
    <p>hash of the stub code: H(Prog)</p>
    <p>Tampering of a program results in a different hash</p>
    <p>Stub code verifies the rest of the code and data</p>
    <p>set_aegis_mode  Start PTR mode on top of</p>
    <p>the TE mode</p>
    <p>.text enter_aegis EKey1 = 0xA4523BC2E435D; EKey2 = 0xB034D2C654F32; E1Msg =  Secret=GetSecret(Challenge); Key1=Decrypt(EKey1, Secret); Key2=Decrypt(EKey2, Secret); CheckMAC(Key1, Key2, MAC); Msg = Decrypt(E1Msg, Key1); E2Msg = Encrypt(Msg, Key2); Output(E2Msg);</p>
    <p>Secret=GetSecret(Challenge); Key1=Decrypt(EKey1, Secret); Key2=Decrypt(EKey2, Secret); CheckMAC(Key1, Key2, MAC); Msg = Decrypt(E1Msg, Key1); E2Msg = Encrypt(Msg, Key2); Output(E2Msg);</p>
    <p>enter_aegis code_end</p>
    <p>H(Prog)</p>
    <p>Protected Table</p>
    <p>SHA-1</p>
    <p>Stub Segment</p>
    <p>Program</p>
  </div>
  <div class="page">
    <p>International Conference on Supercomputing  June 23-26, 2003G. Edward Suh  MIT Lab for Computer Science</p>
    <p>SCM: On-Chip Protection</p>
    <p>Registers on interrupts  SCM saves Regs on</p>
    <p>interrupts, and restore on resume</p>
    <p>On-chip caches  Need to protect against</p>
    <p>software attacks  Use SPID tags and virtual</p>
    <p>memory address  Allow accesses from the</p>
    <p>cache only if both SPID and the virtual address match</p>
    <p>Standard Processor</p>
    <p>L1 Instruction</p>
    <p>cache</p>
    <p>On-Chip L2 Cache</p>
    <p>Processor Core</p>
    <p>L1 Data cache</p>
    <p>Regs</p>
    <p>Regs</p>
    <p>H(Prog)</p>
    <p>SPID SPID</p>
    <p>T ags</p>
    <p>SPID T</p>
    <p>ags</p>
    <p>SPID T</p>
    <p>ags Interrupt</p>
    <p>Resume</p>
    <p>SCM</p>
    <p>Off-Chip Memory</p>
  </div>
  <div class="page">
    <p>International Conference on Supercomputing  June 23-26, 2003G. Edward Suh  MIT Lab for Computer Science</p>
    <p>Memory Encryption</p>
    <p>Untrusted RAM</p>
    <p>Trusted State</p>
    <p>Processor</p>
    <p>ENCRYPT</p>
    <p>DECRYPT</p>
    <p>Program write</p>
    <p>read</p>
    <p>Encrypt on an L2 cache block granularity  Use symmetric key algorithms with CBC mode  Randomize initial vectors</p>
  </div>
  <div class="page">
    <p>International Conference on Supercomputing  June 23-26, 2003G. Edward Suh  MIT Lab for Computer Science</p>
    <p>Integrity Verification</p>
    <p>Untrusted RAM</p>
    <p>Trusted State</p>
    <p>Processor</p>
    <p>ENCRYPT</p>
    <p>DECRYPT</p>
    <p>Program</p>
    <p>V E R I F Y</p>
    <p>E(124), MAC(0x45, 124)</p>
    <p>Address 0x45</p>
    <p>E(120), MAC(0x45, 120)IGNORE</p>
    <p>write</p>
    <p>read</p>
    <p>Cannot simply MAC on writes and check the MAC on reads Replay attacks</p>
    <p>Hash trees for integrity verification</p>
  </div>
  <div class="page">
    <p>International Conference on Supercomputing  June 23-26, 2003G. Edward Suh  MIT Lab for Computer Science</p>
    <p>Hash Trees</p>
    <p>Processor</p>
    <p>V1 V3 V4</p>
    <p>L2 block</p>
    <p>Data Values</p>
    <p>Logarithmic overhead for every cache miss</p>
    <p>Low performance</p>
    <p>Cached hash trees</p>
    <p>MISS V2READ</p>
    <p>VERIFY</p>
    <p>h1=h(V1.V2) h2=h(V3.V4)</p>
    <p>root = h(h1.h2)</p>
    <p>VERIFY</p>
    <p>Untrusted Memory</p>
  </div>
  <div class="page">
    <p>International Conference on Supercomputing  June 23-26, 2003G. Edward Suh  MIT Lab for Computer Science</p>
    <p>Cached Hash Trees (HPCA03)</p>
    <p>Processor</p>
    <p>V1 V2 V3 V4</p>
    <p>Cache hashes in L2</p>
    <p>L2 is trusted Stop checking earlier</p>
    <p>Less overheadIn L2 MISS</p>
    <p>In L2</p>
    <p>h1=h(V1.V2) h2=h(V3.V4)</p>
    <p>root = h(h1.h2)</p>
    <p>VERIFY</p>
    <p>VERIFY</p>
    <p>MISS</p>
    <p>VERIFY</p>
    <p>DONE!!!</p>
    <p>Untrusted Memory</p>
  </div>
  <div class="page">
    <p>International Conference on Supercomputing  June 23-26, 2003G. Edward Suh  MIT Lab for Computer Science</p>
    <p>Message Authentication</p>
    <p>Processor Other systems  The processor signs a message for a program</p>
    <p>sign_msg M: {H(Prog), M}SKproc  Unique for each program because H(Prog) is always included</p>
    <p>Other systems Processor  Embed the users public key in a program  Incoming messages are signed with the users private key</p>
    <p>Program with Puser</p>
    <p>{Message}Suser</p>
    <p>{H(Prog), Message}Sproc</p>
  </div>
  <div class="page">
    <p>L C S</p>
    <p>Applications</p>
  </div>
  <div class="page">
    <p>International Conference on Supercomputing  June 23-26, 2003G. Edward Suh  MIT Lab for Computer Science</p>
    <p>Certified Execution</p>
    <p>Execution certified by the secure processor  Dispatcher provides a program and data  Processor returns the results with the signature</p>
    <p>Requires the TE environment</p>
    <p>Job Dispatcher</p>
    <p>Processors Private Key</p>
    <p>Secure Processor</p>
    <p>RESULT</p>
    <p>RESULT</p>
    <p>enter_aegis</p>
    <p>Execute</p>
    <p>Get results</p>
    <p>Verify results</p>
    <p>- H(Prog)</p>
    <p>- signature</p>
    <p>Program, Data</p>
    <p>Processors Public Key</p>
  </div>
  <div class="page">
    <p>International Conference on Supercomputing  June 23-26, 2003G. Edward Suh  MIT Lab for Computer Science</p>
    <p>Digital Rights Management</p>
    <p>Protects digital contents from illegal copying  Trusted software (player) on untrusted host  Content provider only gives contents to the trusted player</p>
    <p>Requires the PTR environment</p>
    <p>Processors Private Key</p>
    <p>Authenticated &amp; Encrypted Channel (SSL)</p>
    <p>Player</p>
    <p>Random nonceSigned nonce</p>
    <p>Verify</p>
    <p>- H(Player) - nonce - signature</p>
    <p>Run Player</p>
    <p>- enter_aegis - enter PTR</p>
    <p>Content</p>
    <p>Processors Public Key</p>
    <p>Content Provider Secure Processor</p>
  </div>
  <div class="page">
    <p>L C S</p>
    <p>Performance</p>
  </div>
  <div class="page">
    <p>International Conference on Supercomputing  June 23-26, 2003G. Edward Suh  MIT Lab for Computer Science</p>
    <p>Performance Implication: TE processing</p>
    <p>Major performance degradation is from off-chip integrity checking  Start-up and context switches are infrequent  no performance overhead for on-chip tagging</p>
    <p>gcc gzip mcf twolf vortex vpr applu art swim 0</p>
    <p>(a) 64B</p>
    <p>N o rm</p>
    <p>a liz</p>
    <p>e d I P</p>
    <p>C</p>
    <p>Worst case 50% degradation Most cases &lt; 25% degradation</p>
    <p>L2 Caches with 64B blocks</p>
  </div>
  <div class="page">
    <p>International Conference on Supercomputing  June 23-26, 2003G. Edward Suh  MIT Lab for Computer Science</p>
    <p>Performance Implication: PTR processing</p>
    <p>Major performance degradation is from off-chip integrity checking and encryption</p>
    <p>gcc gzip mcf twolf vortex vpr applu art swim 0</p>
    <p>N o rm</p>
    <p>a liz</p>
    <p>e d I P</p>
    <p>C</p>
    <p>Worst case 60% degradation Most cases &lt; 40% degradation</p>
    <p>L2 Caches with 64B blocks</p>
  </div>
  <div class="page">
    <p>International Conference on Supercomputing  June 23-26, 2003G. Edward Suh  MIT Lab for Computer Science</p>
    <p>Summary</p>
    <p>Physical attacks are becoming more prevalent  DRM, software licensing, distributed computing, etc.</p>
    <p>Single-chip secure processors provide trusted execution environments with acceptable overhead  Tamper-Evident environment, Private Tamper-Resistant</p>
    <p>environment  Simulation results show 25-50% overhead for TE, 40-60%</p>
    <p>overhead for PTR processing  New mechanisms can reduce the overhead to 5-15% for TE,</p>
    <p>and 10-25% for PTR processing (CSG Memo 465)</p>
    <p>Significant development effort underway  FPGA/ASIC implementation of AEGIS processor</p>
  </div>
  <div class="page">
    <p>International Conference on Supercomputing  June 23-26, 2003G. Edward Suh  MIT Lab for Computer Science</p>
    <p>Questions?</p>
    <p>More Information at www.csg.lcs.mit.edu</p>
  </div>
</Presentation>
