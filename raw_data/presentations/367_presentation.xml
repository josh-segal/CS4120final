<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>CONTENT AWARE LOAD CONTENT-AWARE LOAD BALANCING FOR DISTRIBUTED BACKUP</p>
    <p>Fred Douglis1, Deepti Bhardwaj1, Hangwei Qian2, and Philip Shilane1</p>
  </div>
  <div class="page">
    <p>Starting PointStarting Point</p>
    <p>Deduplicating disk-based backup storage  Variable, content-defined chunks</p>
    <p>Strong hashes of content to find duplicates</p>
  </div>
  <div class="page">
    <p>Starting PointStarting Point</p>
    <p>Deduplicating disk-based backup storage  Variable, content-defined chunks</p>
    <p>Strong hashes of content to find duplicates  Focused on making full backups after the first one use Focused on making full backups after the first one use</p>
    <p>minimal extra disk space  Internal deduplication  duplicates from multiple copies of the</p>
    <p>same file from the same sourcesame file from the same source  Unchanged files dedupe trivially, while chunk-level deduplication</p>
    <p>catches changes scattered within large regions of unchanged contentcontent</p>
  </div>
  <div class="page">
    <p>Starting PointStarting Point</p>
    <p>Deduplicating disk-based backup storage  Variable, content-defined chunks</p>
    <p>Strong hashes of content to find duplicates  Focused on making full backups after the first one use Focused on making full backups after the first one use</p>
    <p>minimal extra disk space  Internal deduplication  duplicates from multiple copies of the</p>
    <p>same file from the same sourcesame file from the same source  Unchanged files dedupe trivially, while chunk-level deduplication</p>
    <p>catches changes scattered within large regions of unchanged contentcontent</p>
    <p>Deduplication can avoid sending the data at all  Send the hashes and then only send new chunks</p>
  </div>
  <div class="page">
    <p>Starting PointStarting Point</p>
    <p>Deduplicating disk-based backup storage V i bl t t d fi d h k Variable, content-defined chunks</p>
    <p>Strong hashes of content to find duplicates  Focused on making full backups after the first one use</p>
    <p>i i l di k minimal extra disk space  Internal deduplication  duplicates from multiple copies of the</p>
    <p>same file from the same source Unchanged files dedupe trivially while chunk level deduplication  Unchanged files dedupe trivially, while chunk-level deduplication catches changes scattered within large regions of unchanged content</p>
    <p>Deduplication can avoid sending the data at allDeduplication can avoid sending the data at all  Send the hashes and then only send new chunks</p>
    <p>Technology now common in backup products</p>
  </div>
  <div class="page">
    <p>Problem StatementProblem Statement</p>
    <p>Large-scale IT environment H d d th d f t ( li t )  Hundreds or thousands of systems (clients) to backup</p>
    <p>Many backup appliances to send the data</p>
  </div>
  <div class="page">
    <p>Problem StatementProblem Statement</p>
    <p>Large-scale IT environment H d d th d f t ( li t )  Hundreds or thousands of systems (clients) to backup</p>
    <p>Many backup appliances to send the data</p>
    <p>Impact of deduplication  Affinity: send the same client to the same</p>
    <p>appliance so it will deduplicate wellpp p  Moving it to a new system will cause everything to be</p>
    <p>written again</p>
    <p>Overlap: benefit from sending similar systems to the same backup appliance  External deduplication, spanning clients</p>
  </div>
  <div class="page">
    <p>Problem StatementProblem Statement</p>
    <p>Large-scale IT environment H d d th d f t ( li t )  Hundreds or thousands of systems (clients) to backup</p>
    <p>Many backup appliances to send the data</p>
    <p>Backup Server</p>
    <p>Assignment</p>
    <p>Impact of deduplication  Affinity: send the same client to the same</p>
    <p>appliance so it will deduplicate well Dedupe Storage</p>
    <p>Dedupe Storage</p>
    <p>Dedupe Storage</p>
    <p>Assignment</p>
    <p>pp p  Moving it to a new system will cause everything to be</p>
    <p>written again</p>
    <p>Overlap: benefit from sending similar systems</p>
    <p>Storage</p>
    <p>Storage Storage</p>
    <p>to the same backup appliance  External deduplication, spanning clients Simple approach: cluster</p>
    <p>clients by type</p>
  </div>
  <div class="page">
    <p>Benefits of OverlapBenefits of Overlap  Co-locating duplicate content</p>
    <p>Reduces capacity requirementsp y q  May take a host from being overloaded to highly loaded, or highly loaded to</p>
    <p>moderately</p>
    <p>Reduces throughput requirements D li t i i l t li t  fi t f ll ki d Duplicate copies in later clients first full are skipped</p>
    <p>Ongoing transfers benefit only if identical content being written to multiple hosts during a backup interval</p>
    <p>Deduplication changes traditional backup administration Deduplication changes traditional backup administration  Backup devices are not all created equal</p>
    <p>Theyre not all identical tapes  There is a stickiness to the assignment in order to benefit from savingsThere is a stickiness to the assignment in order to benefit from savings  But sometimes data migration benefits outweigh costs</p>
  </div>
  <div class="page">
    <p>Benefits of OverlapBenefits of Overlap  Co-locating duplicate content</p>
    <p>Reduces capacity requirementsp y q  May take a host from being overloaded to highly loaded, or highly loaded to</p>
    <p>moderately</p>
    <p>Reduces throughput requirements D li t i i l t li t  fi t f ll ki d Duplicate copies in later clients first full are skipped</p>
    <p>Ongoing transfers benefit only if identical content being written to multiple hosts during a backup interval</p>
    <p>Deduplication changes traditional backup administration Deduplication changes traditional backup administration  Backup devices are not all created equal</p>
    <p>Theyre not all identical tapes  There is a stickiness to the assignment in order to benefit from savingsThere is a stickiness to the assignment in order to benefit from savings  But sometimes data migration benefits outweigh costs</p>
    <p>Where do we put clients and when do we h t i i d th ?</p>
    <p>have to give in and move them?</p>
  </div>
  <div class="page">
    <p>GoalsGoals</p>
    <p>Capacity allocation Send data to backup appliances in the best way to fit them  Send data to backup appliances in the best way to fit them within constraints</p>
    <p>Balanced load  Content-aware for best deduplication</p>
  </div>
  <div class="page">
    <p>GoalsGoals</p>
    <p>Capacity allocation Send data to backup appliances in the best way to fit them  Send data to backup appliances in the best way to fit them within constraints</p>
    <p>Balanced load  Content-aware for best deduplication</p>
    <p>Performance (throughput)g p  Support many backup streams simultaneously</p>
    <p>Avoid overloading any individual appliances Increased deduplication reduces overhead on network and  Increased deduplication reduces overhead on network and appliance</p>
  </div>
  <div class="page">
    <p>Use CasesUse Cases</p>
    <p>Sizing and deployment Figure out requirements (and assignments) from clean slate Figure out requirements (and assignments) from clean slate</p>
    <p>First assignment  Given a set of clients and appliances determine best Given a set of clients and appliances, determine best</p>
    <p>assignments</p>
    <p>Reconfiguration  Adjust when clients or appliances are added or removed, or load</p>
    <p>shifts</p>
    <p>Di &amp; li i Disaster recovery &amp; replication  Select mappings of appliances onto other appliances for off-site</p>
    <p>replication</p>
    <p>p</p>
  </div>
  <div class="page">
    <p>ApproachApproach</p>
    <p>Minimize a utility function Cost of a configuration is a function of capacity utili ation  Cost of a configuration is a function of capacity utilization and performance requirements</p>
    <p>Compare costs directly to identify best configuration  Lots of tradeoffs</p>
    <p>E.g., migrate a client to a new appliance to reduce capacity overload, but pay a penalty for data movement, p y p y</p>
    <p>Identify overlap  Sample fingerprints for each clientp g p  Find cases of significant overlap</p>
    <p>Ignore the rest</p>
  </div>
  <div class="page">
    <p>How Much Overlap is There?How Much Overlap is There?  Many systems will have little or</p>
    <p>no overlap</p>
    <p>S ill h i il</p>
    <p>Some systems will have similar overlap with many other systems, so picking one in particular has no advantage</p>
    <p>o n</p>
    <p>( %</p>
    <p>)</p>
    <p>Available deduplication h 21</p>
    <p>host16</p>
    <p>Want to identify special affinity in cases of high overlap among 2, or few, hosts</p>
    <p>Studied 21 hosts from saved De d</p>
    <p>u p</p>
    <p>li ca</p>
    <p>ti o</p>
    <p>Best Match</p>
    <p>Widely deduped</p>
    <p>host21</p>
    <p>h 16</p>
    <p>host20</p>
    <p>host20Studied 21 hosts from saved workstation backups and live systems</p>
    <p>One host with 50% overlap with another and almost 25%</p>
    <p>dditi l l ith thi d</p>
    <p>D</p>
    <p>additional overlap with a third</p>
    <p>Virtual machine images particularly likely to have high overlap</p>
    <p>h o st 1</p>
    <p>h o st 2</p>
    <p>h o st 3</p>
    <p>h o st 4</p>
    <p>h o st 5</p>
    <p>h o st 6</p>
    <p>h o st 7</p>
    <p>h o st 8</p>
    <p>h o st 9</p>
    <p>h o st 1 0</p>
    <p>h o st 1 1</p>
    <p>h o st 1 2</p>
    <p>h o st 1 3</p>
    <p>h o st 1 4</p>
    <p>h o st 1 5</p>
    <p>h o st 1 6</p>
    <p>h o st 1 7</p>
    <p>h o st 1 8</p>
    <p>h o st 1 9</p>
    <p>h o st 2 0</p>
    <p>h o st 2 1</p>
  </div>
  <div class="page">
    <p>Cost Calculation Dedupe Storage</p>
    <p>Dedupe Storage</p>
    <p>Dedupe Storage</p>
    <p>Cost Calculation  In total, the cost for a given</p>
    <p>configuration is the sum of:configuration is the sum of:  A small, weighted penalty for</p>
    <p>imbalance in capacity or</p>
    <p>Dedupe Storage</p>
    <p>Dedupe Storage</p>
    <p>Dedupe Storage</p>
    <p>throughput</p>
  </div>
  <div class="page">
    <p>Cost CalculationCost Calculation  In total, the cost for a given</p>
    <p>configuration is the sum of: Thresholdsconfiguration is the sum of:  A small, weighted penalty for</p>
    <p>imbalance in capacity or High cost for everything above this point</p>
    <p>Overload region</p>
    <p>Thresholds</p>
    <p>throughput  A stepped penalty for exceeding</p>
    <p>thresholds in capacity or</p>
    <p>Moderate cost for everything from here to the overload region</p>
    <p>this point Warning region</p>
    <p>Low</p>
    <p>overload region region</p>
  </div>
  <div class="page">
    <p>Cost CalculationCost Calculation  In total, the cost for a given</p>
    <p>configuration is the sum of:configuration is the sum of:  A small, weighted penalty for</p>
    <p>imbalance in capacity or throughput</p>
    <p>A stepped penalty for exceeding thresholds in capacity or thresholds in capacity or throughput</p>
    <p>A small penalty for migrating off an lexisting appliance</p>
  </div>
  <div class="page">
    <p>Cost CalculationCost Calculation  In total, the cost for a given</p>
    <p>configuration is the sum of: A ll i ht d lt f i b l  A small, weighted penalty for imbalance in capacity or throughput</p>
    <p>A stepped penalty for exceeding thresholds in capacity or throughput</p>
    <p>A small penalty for migrating off an existing appliance</p>
    <p>A very large penalty for each client that does not fit on its appliancedoes not fit on its appliance</p>
    <p>In our experiments presented today, this penalty is the dominant cost. Above 1000 means overload and below it means fit</p>
    <p>Smaller penalties are used to pick among l ibl h iplausible choices</p>
    <p>(A more formal definition appears in the paper)</p>
  </div>
  <div class="page">
    <p>AlgorithmsAlgorithms  Compare intelligent assignment</p>
    <p>to brute force such as round-robin  Bin packing</p>
    <p>Assign based on size from largest to</p>
    <p>or random  All the brute force approaches quite</p>
    <p>fast</p>
    <p>smallest (less likely to overflow)</p>
    <p>Simulated annealing  Shuffles assignments from the current</p>
    <p>Random  Pick arbitrary assignments. If random</p>
    <p>selection is full, iterate to find new appliance</p>
    <p>best position to try and improve the cost</p>
    <p>The first three take any existing</p>
    <p>appliance.  Compute cost of configuration  Repeat N times and take best result</p>
    <p>Round robin</p>
    <p>assignments as a given; only annealing will migrate a client</p>
    <p>Generally, all work well under low  Round-robin  Assign to each appliance in turn  Skip a full appliance to find one</p>
    <p>with available capacity if possible</p>
    <p>y, load; annealing can adapt better to overload</p>
  </div>
  <div class="page">
    <p>Annealing Example utilization</p>
    <p>Annealing Example</p>
    <p>swap</p>
    <p>move</p>
  </div>
  <div class="page">
    <p>Evaluation (Simulations)</p>
  </div>
  <div class="page">
    <p>Incremental Assignment ExperimentIncremental Assignment Experiment</p>
    <p>Define a number of clients of fixed size: small, medium large 20 per iterationmedium, large, 20 per iteration</p>
  </div>
  <div class="page">
    <p>Incremental Assignment ExperimentIncremental Assignment Experiment</p>
    <p>Define a number of clients of fixed size: small, medium large 20 per iterationmedium, large, 20 per iteration</p>
    <p>Repeatedly put a set of clients into system and assign t lito appliances  Better dedupe within a class than across</p>
  </div>
  <div class="page">
    <p>Incremental Assignment ExperimentIncremental Assignment Experiment</p>
    <p>Periodically add a new appliance to increase capacity  At the same time, forget 1/3 of existing assignments (so some</p>
    <p>assignments have a penalty for movement and some dont)assignments have a penalty for movement and some dont)  Especially high dedupe with the corresponding client from other</p>
    <p>iterations  stress overlap affinity</p>
    <p>If new load outpaces capacity, high cost. If the new appliance is added to keep up with added load, low cost.</p>
  </div>
  <div class="page">
    <p>Incremental Assignment ExperimentIncremental Assignment Experiment  Define a number of clients of fixed size: small, medium,</p>
    <p>large, 20 per iterationlarge, 20 per iteration</p>
    <p>Repeatedly put a set of clients into system and assign to appliances  Better dedupe within a class than across</p>
    <p>Periodically add a new appliance to increase capacity At the same time forget 1/3 of existing assignments (so some  At the same time, forget 1/3 of existing assignments (so some assignments have a penalty for movement and some dont)</p>
    <p>Especially high dedupe with the corresponding client from other iterations stress overlap affinityiterations  stress overlap affinity</p>
    <p>If new load outpaces capacity, high cost. If the new appliance is added to keep up with added load, low cost.</p>
    <p>pp p p ,</p>
  </div>
  <div class="page">
    <p>When Capacity is ExceededWhen Capacity is Exceeded</p>
    <p>U se</p>
    <p>d</p>
    <p>os t</p>
    <p>ap ac</p>
    <p>ity U</p>
    <p>ct io</p>
    <p>na l C</p>
    <p>ra c</p>
    <p>Clients</p>
    <p>Cap w/o Dedupe Cap w/Dedupe</p>
  </div>
  <div class="page">
    <p>When Capacity is ExceededWhen Capacity is Exceeded</p>
    <p>U se</p>
    <p>d</p>
    <p>os t</p>
    <p>ap ac</p>
    <p>ity U</p>
    <p>ct io</p>
    <p>na l C</p>
    <p>ra c</p>
    <p>Clients</p>
    <p>Cap w/o Dedupe Cap w/Dedupe</p>
    <p>Add appliance</p>
  </div>
  <div class="page">
    <p>When Capacity is ExceededWhen Capacity is Exceeded</p>
    <p>U se</p>
    <p>d</p>
    <p>Offered load above 1.0 indicates overflow</p>
    <p>os t</p>
    <p>ap ac</p>
    <p>ity U</p>
    <p>ct io</p>
    <p>na l C</p>
    <p>ra c</p>
    <p>Clients</p>
    <p>Cap w/o Dedupe Cap w/Dedupe</p>
    <p>Add appliance</p>
  </div>
  <div class="page">
    <p>When Capacity is Exceeded</p>
    <p>U se</p>
    <p>d</p>
    <p>When Capacity is Exceeded</p>
    <p>os t</p>
    <p>ap ac</p>
    <p>ity U</p>
    <p>ct io</p>
    <p>na l C</p>
    <p>ra c</p>
    <p>Clients</p>
    <p>Cap w/o Dedupe Cap w/Dedupe</p>
    <p>Random</p>
  </div>
  <div class="page">
    <p>When Capacity is Exceeded</p>
    <p>U se</p>
    <p>d</p>
    <p>When Capacity is Exceeded</p>
    <p>os t</p>
    <p>ap ac</p>
    <p>ity U</p>
    <p>ct io</p>
    <p>na l C</p>
    <p>ra c</p>
    <p>Clients</p>
    <p>Cap w/o Dedupe Cap w/Dedupe</p>
    <p>Random</p>
  </div>
  <div class="page">
    <p>When Capacity is Exceeded</p>
    <p>U se</p>
    <p>d</p>
    <p>When Capacity is Exceeded</p>
    <p>os t</p>
    <p>ap ac</p>
    <p>ity U</p>
    <p>ct io</p>
    <p>na l C</p>
    <p>ra c</p>
    <p>Clients</p>
    <p>Cap w/o Dedupe Cap w/Dedupe</p>
    <p>Random</p>
  </div>
  <div class="page">
    <p>When Capacity is Exceeded</p>
    <p>U se</p>
    <p>d</p>
    <p>When Capacity is Exceeded</p>
    <p>os t</p>
    <p>ap ac</p>
    <p>ity U</p>
    <p>ct io</p>
    <p>na l C</p>
    <p>ra c</p>
    <p>Clients</p>
    <p>Cap w/o Dedupe Cap w/Dedupe</p>
    <p>Random Round Robin</p>
  </div>
  <div class="page">
    <p>When Capacity is Exceeded</p>
    <p>U se</p>
    <p>d</p>
    <p>When Capacity is Exceeded</p>
    <p>os t</p>
    <p>ap ac</p>
    <p>ity U</p>
    <p>ct io</p>
    <p>na l C</p>
    <p>ra c</p>
    <p>Clients Cap w/o Dedupe</p>
    <p>Cap w/Dedupe Random</p>
    <p>Round Robin Bin Packing</p>
  </div>
  <div class="page">
    <p>When Capacity is Exceeded</p>
    <p>U se</p>
    <p>d</p>
    <p>When Capacity is Exceeded</p>
    <p>os t</p>
    <p>ap ac</p>
    <p>ity U</p>
    <p>ct io</p>
    <p>na l C</p>
    <p>ra c</p>
    <p>Clients Cap w/o Dedupe</p>
    <p>Cap w/Dedupe Random</p>
    <p>Round Robin Bin Packing</p>
    <p>Sim. Annealing</p>
  </div>
  <div class="page">
    <p>When Capacity is Exceeded A few cases where</p>
    <p>U se</p>
    <p>d</p>
    <p>When Capacity is Exceeded annealing is the only</p>
    <p>approach with an acceptable cost</p>
    <p>os t</p>
    <p>ap ac</p>
    <p>ity U</p>
    <p>ct io</p>
    <p>na l C</p>
    <p>ra c</p>
    <p>Clients Cap w/o Dedupe</p>
    <p>Cap w/Dedupe Random</p>
    <p>Round Robin Bin Packing</p>
    <p>Sim. Annealing</p>
  </div>
  <div class="page">
    <p>When Capacity is Exceeded Annealing is an order of magnitude lower cost, but its still a very high</p>
    <p>U se</p>
    <p>d</p>
    <p>When Capacity is Exceeded cost</p>
    <p>os t</p>
    <p>ap ac</p>
    <p>ity U</p>
    <p>ct io</p>
    <p>na l C</p>
    <p>ra c</p>
    <p>Clients Cap w/o Dedupe</p>
    <p>Cap w/Dedupe Random</p>
    <p>Round Robin Bin Packing</p>
    <p>Sim. Annealing</p>
  </div>
  <div class="page">
    <p>Roughly Fitting Within CapacityRoughly Fitting Within Capacity</p>
  </div>
  <div class="page">
    <p>Roughly Fitting Within CapacityRoughly Fitting Within Capacity Several cases where bin packing and annealing improve on the others when cost already low</p>
  </div>
  <div class="page">
    <p>Roughly Fitting Within Capacity Costs only</p>
    <p>occasionally very highRoughly Fitting Within Capacity very high</p>
  </div>
  <div class="page">
    <p>What Else?What Else?</p>
    <p>Refer to the paper for: A more detailed discussion of overlap computation A more detailed discussion of overlap computation</p>
    <p>Some other examples of using the assignment tool  Overhead analysis y</p>
    <p>Simulated annealing often works much better but is dramatically slower</p>
    <p>VariantsVariants  Ignoring previous assignments  How to penalize for each client that doesnt fit</p>
    <p>I t f t t Impact of content-awareness</p>
    <p>Backup slides for Q&amp;A</p>
  </div>
  <div class="page">
    <p>SummarySummary  In a large IT environment, important to automate</p>
    <p>assignment of clients to backup appliances to assignment of clients to backup appliances to optimize for capacity and throughput</p>
    <p>Taking content overlap into account can reduce  Taking content overlap into account can reduce capacity requirements and may improve throughput due to duplicate suppressiondue to duplicate suppression</p>
    <p>Many options for how to balance load  All work well if not overloadedAll work well if not overloaded  Bin Packing somewhat better than the other simple</p>
    <p>techniques as limits approached i l d li h dl l d</p>
    <p>Simulated Annealing can handle some extra overload cases</p>
  </div>
  <div class="page">
    <p>THANK YOUTHANK YOU</p>
  </div>
</Presentation>
