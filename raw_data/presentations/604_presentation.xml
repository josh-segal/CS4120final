<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Transactional Consistency and Automatic Management</p>
    <p>in an Application Data Cache</p>
    <p>Dan Ports Austin Clements Irene Zhang</p>
    <p>Samuel Madden Barbara Liskov</p>
    <p>MIT CSAIL</p>
    <p>Tuesday, October 5, 2010</p>
  </div>
  <div class="page">
    <p>Modern web applications face immense scaling challenges</p>
    <p>increasingly complex, personalized content</p>
    <p>e.g. Facebook, MediaWiki, LiveJournal...</p>
    <p>Existing caching techniques are less useful</p>
    <p>whole-page caches: foiled by personalization</p>
    <p>database caches: more processing is being done in the application layer</p>
    <p>Tuesday, October 5, 2010</p>
  </div>
  <div class="page">
    <p>Application-Level Caching</p>
    <p>Application</p>
    <p>DatabaseCache</p>
    <p>Tuesday, October 5, 2010</p>
  </div>
  <div class="page">
    <p>e.g. memcached, Java object caches</p>
    <p>Application-Level Caching</p>
    <p>Application</p>
    <p>DatabaseCache</p>
    <p>Tuesday, October 5, 2010</p>
  </div>
  <div class="page">
    <p>e.g. memcached, Java object caches</p>
    <p>very lightweight in-memory caches</p>
    <p>stores application objects (computations), i.e.: not a database replica not a query cache</p>
    <p>Application-Level Caching</p>
    <p>Application</p>
    <p>DatabaseCache</p>
    <p>Tuesday, October 5, 2010</p>
  </div>
  <div class="page">
    <p>Why Cache Application Data?</p>
    <p>Cache higher-level data closer to app needs: DB queries, complex structures, HTML fragments</p>
    <p>Can separate common and customized content</p>
    <p>Reduces database load Reduces application server load  this matters too (application servers arent cheap!)</p>
    <p>Tuesday, October 5, 2010</p>
  </div>
  <div class="page">
    <p>Existing Caches Add To Application Complexity</p>
    <p>No transactional consistency</p>
    <p>violates guarantees of the underlying DB  app. code must deal with transient anomalies</p>
    <p>Hash table interface leaves apps responsible for:</p>
    <p>naming and retrieving cache entries  keeping cache up-to-date (invalidations)</p>
    <p>Tuesday, October 5, 2010</p>
  </div>
  <div class="page">
    <p>Harder Than You Think!</p>
    <p>Naming: cache key must uniquely identify value</p>
    <p>MediaWiki stored list of recent changes with same key regardless of # days requested (#7541)</p>
    <p>Invalidations: require reasoning globally about entire application</p>
    <p>After editing wiki page, what to invalidate?</p>
    <p>Tuesday, October 5, 2010</p>
  </div>
  <div class="page">
    <p>Harder Than You Think!</p>
    <p>Naming: cache key must uniquely identify value</p>
    <p>MediaWiki stored list of recent changes with same key regardless of # days requested (#7541)</p>
    <p>Invalidations: require reasoning globally about entire application</p>
    <p>After editing wiki page, what to invalidate?  Forgot editors User object  contains edit count</p>
    <p>(#8391)</p>
    <p>Tuesday, October 5, 2010</p>
  </div>
  <div class="page">
    <p>Introducing TxCache</p>
    <p>Our cache provides:</p>
    <p>transactional consistency: serializable, point-intime view of data, whether from cache or DB</p>
    <p>bounded staleness: improves hit rate for applications that accept old (but consistent) data</p>
    <p>simpler interface: applications mark functions cacheable; TxCache caches their results, including naming and invalidations</p>
    <p>Tuesday, October 5, 2010</p>
  </div>
  <div class="page">
    <p>Application</p>
    <p>Database</p>
    <p>TxCache Library</p>
    <p>Cache</p>
    <p>TxCache library hides complexity of cache management</p>
    <p>Integrates with new cache server, minor DB modifications (Postgres; &lt;2K lines changed)</p>
    <p>Together, ensure whole-system transactional consistency</p>
    <p>Tuesday, October 5, 2010</p>
  </div>
  <div class="page">
    <p>beginRO(staleness), commit(), beginRW(), abort()</p>
    <p>make-cacheable(fn) where fn is a side-effect-free function that depends only on its arguments and the database state  fn returns cached result of previous call with same inputs if still consistent w/ DB</p>
    <p>TxCache Interface</p>
    <p>Tuesday, October 5, 2010</p>
  </div>
  <div class="page">
    <p>beginRO(staleness), commit(), beginRW(), abort()</p>
    <p>make-cacheable(fn) where fn is a side-effect-free function that depends only on its arguments and the database state  fn returns cached result of previous call with same inputs if still consistent w/ DB</p>
    <p>TxCache Interface</p>
    <p>Thats it.</p>
    <p>Tuesday, October 5, 2010</p>
  </div>
  <div class="page">
    <p>beginRO(staleness), commit(), beginRW(), abort()</p>
    <p>make-cacheable(fn) where fn is a side-effect-free function that depends only on its arguments and the database state  fn returns cached result of previous call with same inputs if still consistent w/ DB</p>
    <p>TxCache Interface</p>
    <p>Thats it. Really!</p>
    <p>Tuesday, October 5, 2010</p>
  </div>
  <div class="page">
    <p>TxCache Library</p>
    <p>Application</p>
    <p>Tuesday, October 5, 2010</p>
  </div>
  <div class="page">
    <p>CALL</p>
    <p>TxCache Library</p>
    <p>Application</p>
    <p>Tuesday, October 5, 2010</p>
  </div>
  <div class="page">
    <p>LOOKUP</p>
    <p>CALL</p>
    <p>TxCache Library</p>
    <p>Application</p>
    <p>Tuesday, October 5, 2010</p>
  </div>
  <div class="page">
    <p>HIT</p>
    <p>LOOKUP</p>
    <p>CALL</p>
    <p>TxCache Library</p>
    <p>Application</p>
    <p>Tuesday, October 5, 2010</p>
  </div>
  <div class="page">
    <p>MISS</p>
    <p>LOOKUP</p>
    <p>CALL</p>
    <p>TxCache Library</p>
    <p>Application</p>
    <p>Tuesday, October 5, 2010</p>
  </div>
  <div class="page">
    <p>MISS</p>
    <p>LOOKUP</p>
    <p>UPCALLCALL</p>
    <p>TxCache Library</p>
    <p>Application</p>
    <p>Tuesday, October 5, 2010</p>
  </div>
  <div class="page">
    <p>MISS</p>
    <p>LOOKUP</p>
    <p>UPCALLCALL</p>
    <p>TxCache Library</p>
    <p>QUERIES</p>
    <p>Application</p>
    <p>Tuesday, October 5, 2010</p>
  </div>
  <div class="page">
    <p>MISS</p>
    <p>LOOKUP</p>
    <p>UPCALLCALL</p>
    <p>INSERT</p>
    <p>TxCache Library</p>
    <p>QUERIES</p>
    <p>Application</p>
    <p>Tuesday, October 5, 2010</p>
  </div>
  <div class="page">
    <p>MISS</p>
    <p>LOOKUP</p>
    <p>UPCALLCALL</p>
    <p>INSERT</p>
    <p>TxCache Library</p>
    <p>QUERIES</p>
    <p>Application</p>
    <p>Tuesday, October 5, 2010</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Tuesday, October 5, 2010</p>
  </div>
  <div class="page">
    <p>Consistency Approach Goal: all data seen in a transaction reflects single point-in-time snapshot</p>
    <p>Assign timestamp to transaction</p>
    <p>Know the validity interval of each object in cache or database: set of timestamps when it was valid</p>
    <p>Then: transaction can read data if datas validity interval contains txns timestamp</p>
    <p>Tuesday, October 5, 2010</p>
  </div>
  <div class="page">
    <p>A Versioned Cache Cache entries tagged with validity intervals</p>
    <p>each entry one immutable version of an object</p>
    <p>allows lookup for value valid at certain time</p>
    <p>K1</p>
    <p>K2</p>
    <p>time</p>
    <p>K3</p>
    <p>K4</p>
    <p>Tuesday, October 5, 2010</p>
  </div>
  <div class="page">
    <p>A Versioned Cache Cache entries tagged with validity intervals</p>
    <p>each entry one immutable version of an object</p>
    <p>allows lookup for value valid at certain time</p>
    <p>K1</p>
    <p>K2</p>
    <p>time</p>
    <p>K3</p>
    <p>K4</p>
    <p>Tuesday, October 5, 2010</p>
  </div>
  <div class="page">
    <p>Staleness Assign transaction an earlier timestamp</p>
    <p>if consistent with application requirements  allows cached data to be used longer</p>
    <p>K1</p>
    <p>K2</p>
    <p>time</p>
    <p>K3</p>
    <p>K4</p>
    <p>Tuesday, October 5, 2010</p>
  </div>
  <div class="page">
    <p>Staleness Assign transaction an earlier timestamp</p>
    <p>if consistent with application requirements  allows cached data to be used longer</p>
    <p>K1</p>
    <p>K2</p>
    <p>time</p>
    <p>K3</p>
    <p>K4</p>
    <p>Tuesday, October 5, 2010</p>
  </div>
  <div class="page">
    <p>Staleness Assign transaction an earlier timestamp</p>
    <p>if consistent with application requirements  allows cached data to be used longer</p>
    <p>K1</p>
    <p>K2</p>
    <p>time</p>
    <p>K3</p>
    <p>K4</p>
    <p>Tuesday, October 5, 2010</p>
  </div>
  <div class="page">
    <p>Requires starting a DB transaction at same timestamp</p>
    <p>internally, snapshot isolation supports this  added interface to expose this to cache library</p>
    <p>Staleness Assign transaction an earlier timestamp</p>
    <p>if consistent with application requirements  allows cached data to be used longer</p>
    <p>Tuesday, October 5, 2010</p>
  </div>
  <div class="page">
    <p>Where Do Validity Intervals Come From?</p>
    <p>Tuesday, October 5, 2010</p>
  </div>
  <div class="page">
    <p>Where Do Validity Intervals Come From?</p>
    <p>Validity of an application object = validity of the DB queries used to generate it  library tracks query dependencies</p>
    <p>Tuesday, October 5, 2010</p>
  </div>
  <div class="page">
    <p>Where Do Validity Intervals Come From?</p>
    <p>Validity of an application object = validity of the DB queries used to generate it  library tracks query dependencies</p>
    <p>Validity of a DB query = validity of the tuples accessed to compute it  we modify the DB to report this</p>
    <p>Tuesday, October 5, 2010</p>
  </div>
  <div class="page">
    <p>Where Do Validity Intervals Come From?</p>
    <p>Validity of an application object = validity of the DB queries used to generate it  library tracks query dependencies</p>
    <p>Validity of a DB query = validity of the tuples accessed to compute it  we modify the DB to report this</p>
    <p>Validity of a tuple = timestamps of creating, deleting transactions  multiversion DBs already track this</p>
    <p>Tuesday, October 5, 2010</p>
  </div>
  <div class="page">
    <p>Computing Query Validity</p>
    <p>x</p>
    <p>y</p>
    <p>time</p>
    <p>z</p>
    <p>q</p>
    <p>Tuesday, October 5, 2010</p>
  </div>
  <div class="page">
    <p>Computing Query Validity</p>
    <p>inserted by txn #41</p>
    <p>x</p>
    <p>y</p>
    <p>time</p>
    <p>z</p>
    <p>q</p>
    <p>Tuesday, October 5, 2010</p>
  </div>
  <div class="page">
    <p>Computing Query Validity</p>
    <p>inserted by txn #41</p>
    <p>deleted by txn #50</p>
    <p>x</p>
    <p>y</p>
    <p>time</p>
    <p>z</p>
    <p>q</p>
    <p>Tuesday, October 5, 2010</p>
  </div>
  <div class="page">
    <p>Computing Query Validity</p>
    <p>SELECT * FROM ...; x</p>
    <p>y</p>
    <p>time</p>
    <p>z</p>
    <p>q</p>
    <p>Tuesday, October 5, 2010</p>
  </div>
  <div class="page">
    <p>Computing Query Validity</p>
    <p>SELECT * FROM ...; result = {x, y}</p>
    <p>x</p>
    <p>y</p>
    <p>time</p>
    <p>z</p>
    <p>q</p>
    <p>Tuesday, October 5, 2010</p>
  </div>
  <div class="page">
    <p>Computing Query Validity Intersect validity intervals of tuples accessed</p>
    <p>SELECT * FROM ...; result = {x, y} VALIDITY [41, 48)</p>
    <p>x</p>
    <p>y</p>
    <p>time</p>
    <p>z</p>
    <p>q</p>
    <p>Tuesday, October 5, 2010</p>
  </div>
  <div class="page">
    <p>Computing Query Validity Intersect validity intervals of tuples accessed</p>
    <p>SELECT * FROM ...; result = {x, y} VALIDITY [41, 48)</p>
    <p>x</p>
    <p>y</p>
    <p>time</p>
    <p>z</p>
    <p>q</p>
    <p>Tuesday, October 5, 2010</p>
  </div>
  <div class="page">
    <p>Lazy Timestamp Selection Hard to choose timestamp a priori</p>
    <p>Dont know access pattern or cache contents  Insight: dont have to choose right away!</p>
    <p>K1</p>
    <p>K2</p>
    <p>time</p>
    <p>K3</p>
    <p>K4</p>
    <p>Tuesday, October 5, 2010</p>
  </div>
  <div class="page">
    <p>Lazy Timestamp Selection Hard to choose timestamp a priori</p>
    <p>Dont know access pattern or cache contents  Insight: dont have to choose right away!</p>
    <p>K1</p>
    <p>K2</p>
    <p>time</p>
    <p>K3</p>
    <p>K4</p>
    <p>Tuesday, October 5, 2010</p>
  </div>
  <div class="page">
    <p>Lazy Timestamp Selection Hard to choose timestamp a priori</p>
    <p>Dont know access pattern or cache contents  Insight: dont have to choose right away!</p>
    <p>K1</p>
    <p>K2</p>
    <p>time</p>
    <p>K3</p>
    <p>K4</p>
    <p>Tuesday, October 5, 2010</p>
  </div>
  <div class="page">
    <p>Lazy Timestamp Selection Hard to choose timestamp a priori</p>
    <p>Dont know access pattern or cache contents  Insight: dont have to choose right away!</p>
    <p>K1</p>
    <p>K2</p>
    <p>time</p>
    <p>K3</p>
    <p>K4</p>
    <p>Tuesday, October 5, 2010</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Tuesday, October 5, 2010</p>
  </div>
  <div class="page">
    <p>Invalidations What about objects that are still valid?</p>
    <p>dont know their upper validity bound yet!  represent as open-ended validity intervals</p>
    <p>Later, database notifies cache if object changes; cache truncates interval</p>
    <p>K 1</p>
    <p>K 2</p>
    <p>time now</p>
    <p>Tuesday, October 5, 2010</p>
  </div>
  <div class="page">
    <p>Invalidation Tags</p>
    <p>How to identify which objects changed?  DB doesnt know which app-level objects are cached</p>
    <p>Objects in cache have invalidation tags</p>
    <p>Modified DB to assign invalidation tags to each query</p>
    <p>DB generates list of tags affected by each update</p>
    <p>Cache finds affected objects and updates interval</p>
    <p>Tuesday, October 5, 2010</p>
  </div>
  <div class="page">
    <p>Invalidation Tags</p>
    <p>Inval. tags come from querys access methods</p>
    <p>TABLE:KEY=VALUE for queries that use index lookups</p>
    <p>TABLE:* for non-indexed queries (rare)</p>
    <p>SELECT * FROM users WHERE name = floyd;</p>
    <p>[result]</p>
    <p>INVALIDATION TAGS users:name=floyd</p>
    <p>Tuesday, October 5, 2010</p>
  </div>
  <div class="page">
    <p>Invalidation Stream</p>
    <p>On each update, DB generates affected tags:</p>
    <p>for each tuple affected, one tag per index key</p>
    <p>Broadcasts to all cache nodes</p>
    <p>ordered stream, with transaction timestamps</p>
    <p>Cache lookups treat unbounded intervals as bounded at last timestamp received</p>
    <p>avoids invalidate &amp; lookup race conditions</p>
    <p>Tuesday, October 5, 2010</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Tuesday, October 5, 2010</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>How much benefit from adding caching?</p>
    <p>Does using stale data help?</p>
    <p>Does consistency hurt performance?</p>
    <p>Tuesday, October 5, 2010</p>
  </div>
  <div class="page">
    <p>RUBiS Benchmarks RUBiS: simulated eBay-like auction site</p>
    <p>standard browsing &amp; bidding workload; 85% read-only</p>
    <p>two datasets: 850 MB (in-memory), 6 GB (disk-bound)</p>
    <p>All servers 2x 3.20 GHz Xeon, 2 GB RAM</p>
    <p>1 DB server (modified Postgres 8.2.11)</p>
    <p>9 frontend/cache servers (Apache 2 / PHP 5)</p>
    <p>Tuesday, October 5, 2010</p>
  </div>
  <div class="page">
    <p>Cache Performance (in-memory DB; 2 cache nodes)</p>
    <p>Cache size</p>
    <p>Max throughput (requests/sec)</p>
    <p>Cache hit rate</p>
    <p>Tuesday, October 5, 2010</p>
  </div>
  <div class="page">
    <p>Cache Performance (disk-bound DB; 8 shared web/cache nodes)</p>
    <p>Max throughput (requests/sec)</p>
    <p>Cache hit rate</p>
    <p>Cache size</p>
    <p>Tuesday, October 5, 2010</p>
  </div>
  <div class="page">
    <p>Even A Little Staleness Helps</p>
    <p>R e</p>
    <p>la ti v e</p>
    <p>t h</p>
    <p>ro u</p>
    <p>g h</p>
    <p>p u</p>
    <p>t</p>
    <p>Staleness limit in seconds</p>
    <p>no caching (baseline)</p>
    <p>TxCache (in-memory DB)</p>
    <p>TxCache (disk-bound DB)</p>
    <p>Tuesday, October 5, 2010</p>
  </div>
  <div class="page">
    <p>Costs of Consistency Cache misses classified as:  compulsory: data never seen  staleness: data invalidated &amp; too old to use  capacity: data was evicted  consistency: data available but inconsistent w/ prior reads</p>
    <p>consistency misses configuration (% of total misses)</p>
    <p>in-memory, 512 MB, 30 s stale 7.8%</p>
    <p>in-memory, 512 MB, 15 s stale 5.4%</p>
    <p>in-memory, 64 MB, 30 s stale 0.2%</p>
    <p>disk-bound, 9 GB, 30 s stale 0.7%</p>
    <p>Tuesday, October 5, 2010</p>
  </div>
  <div class="page">
    <p>Costs of Consistency Cache misses classified as:  compulsory: data never seen  staleness: data invalidated &amp; too old to use  capacity: data was evicted  consistency: data available but inconsistent w/ prior reads</p>
    <p>consistency misses configuration (% of total misses)</p>
    <p>in-memory, 512 MB, 30 s stale 7.8%</p>
    <p>in-memory, 512 MB, 15 s stale 5.4%</p>
    <p>in-memory, 64 MB, 30 s stale 0.2%</p>
    <p>disk-bound, 9 GB, 30 s stale 0.7%</p>
    <p>common to other caches}</p>
    <p>Tuesday, October 5, 2010</p>
  </div>
  <div class="page">
    <p>Costs of Consistency Verified experimentally by disabling consistency: transaction can read any data valid in last 30 sec</p>
    <p>P e a k r</p>
    <p>e q</p>
    <p>u e s ts</p>
    <p>/s e c</p>
    <p>Cache size</p>
    <p>no caching</p>
    <p>TxCache</p>
    <p>no consistency</p>
    <p>Tuesday, October 5, 2010</p>
  </div>
  <div class="page">
    <p>Related Work</p>
    <p>Application-level caches:  more flexible than whole-page caches: partial results  require explicit management by application  no transactional support (e.g. memcached)</p>
    <p>or transactions only within cache (e.g. JBoss, AppFabric)</p>
    <p>Database replication:  FAS, Ganymed: keep stale replicas with batched updates  cant apply methods to app-level caching</p>
    <p>Tuesday, October 5, 2010</p>
  </div>
  <div class="page">
    <p>Conclusion TxCache: application-layer caching with a simpler programming model</p>
    <p>provides transactional consistency across both cache and database</p>
    <p>automatic management: applications not responsible for lookups, updates, invalidations</p>
    <p>New mechanisms:</p>
    <p>consistency ensured by tracking object validity intervals  automatic database-generated invalidations</p>
    <p>Consistency imposes little performance cost</p>
    <p>Tuesday, October 5, 2010</p>
  </div>
</Presentation>
