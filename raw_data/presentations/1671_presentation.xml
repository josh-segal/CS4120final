<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>From the Outside Looking In: Probing Web APIs to Build Detailed Workload Profile</p>
    <p>Nan Deng, Zichen Xu, Christopher Stewart and Xiaorui Wang</p>
    <p>The Ohio State University</p>
  </div>
  <div class="page">
    <p>Google Maps</p>
    <p>Facebook</p>
    <p>Amazon S3</p>
    <p>Web APIsInternet Service</p>
    <p>In 2013, the number of indexed APIs grew By 32% year over year [PW, 2013]</p>
    <p>ProgrammableWeb, 2014</p>
    <p>The typical web page loads data from 7-25 third party providers [Everts, 2013]</p>
    <p>From the Outside Looking In</p>
  </div>
  <div class="page">
    <p>Using Web APIs  Improve content</p>
    <p>without programming</p>
    <p>Published interfaces provide well defined, often RESTful, output</p>
    <p>Data is centralized, managed by experts</p>
    <p>Benefits  Salaries are 20% of</p>
    <p>expenses [tripAdvisor]</p>
    <p>Failures, dynamic workloads, corner cases covered</p>
    <p>Efficient to move compute to big data</p>
    <p>From the Outside Looking In</p>
  </div>
  <div class="page">
    <p>Everyone has bad days, and third-party content providers are no exception. Tammy Everts</p>
    <p>Somtimes web APIs perform poorly because the were implemented poorly</p>
    <p>...a bug [affected] people from third party sites integrated with Facebook on Feb 7, 2013</p>
    <p>Took down CNN &amp; WaPost</p>
    <p>CDN Planet Homepage reported that Facebook took 796 ms to load, 2X longer than any other critical content</p>
    <p>Slow responses cost 3.5B/y [Everts, 2013]</p>
    <p>Using web APIs risks availability &amp; performance</p>
    <p>From the Outside Looking In</p>
  </div>
  <div class="page">
    <p>Google Maps</p>
    <p>Web APIs</p>
    <p>Captured Response Times</p>
    <p>Web API Probes</p>
    <p>Models of Cloud Design</p>
    <p>Profile Extraction</p>
    <p>Workload Profiles</p>
    <p>Is the web API well implemented?</p>
    <p>How will it respond under extreme operating conditions?</p>
    <p>Challenge: Create useful profiles faster than trial-and-error approach</p>
    <p>serv. time per request</p>
    <p>C D</p>
    <p>F</p>
    <p>Hypothesis: Given cloud design, response times carry a lot of valuable information.</p>
    <p>energyC D</p>
    <p>F</p>
    <p>From the Outside Looking In</p>
  </div>
  <div class="page">
    <p>Use Case: Planning web API Usage</p>
    <p>Google Maps versus Bing Maps</p>
    <p>Same avg. resp. time &amp; availability</p>
    <p>Which has heavier tail?</p>
    <p>Should we use both (Replication for predictability [Fast 10])</p>
    <p>Use case: Model Resource Needs of Third Parties</p>
    <p>DataGreening and Ecosia are green hosts [ICAC 2012]</p>
    <p>DataGreening offsets the carbon footprint of email users that route through its servers</p>
    <p>Must model carbon footprint of IMAP web APIs</p>
    <p>From the Outside Looking In</p>
  </div>
  <div class="page">
    <p>Related work and alternative approaches  Controlled offline tests yield workload profiles</p>
    <p>[ugaonkar,2005][stewart,2005]</p>
    <p>Tracing online execution of requests</p>
    <p>[isaacs,2004][shen,2008][PowerTracer,ICAC]</p>
    <p>Use logs from online execution to infer profiles</p>
    <p>[stewart,2008]</p>
    <p>More inside access than web API permit  web API encouraged to hide details and provide false data</p>
    <p>From the Outside Looking In</p>
  </div>
  <div class="page">
    <p>Widely used cloud computing practices</p>
    <p>Structure of cloud-based web API  Hierarchical tiered design</p>
    <p>Elastic scaling</p>
    <p>Make the common case fast</p>
    <p>Independent component Analysis  Application to workload profiling</p>
    <p>Early results</p>
    <p>Extracting Workload Profiles</p>
  </div>
  <div class="page">
    <p>Elastic scaling: When resource demands increase, provision more resources. When demands decrease, release resources.</p>
    <p>Active research: React to metrics other than response time to better stabilize performance without using too many resources</p>
    <p>[Ghandi,TOC 2012] [Nguyen,ICAC 2013]</p>
    <p>Response time is less sensitive to workload changes</p>
    <p>High response</p>
    <p>time</p>
    <p>Stable response</p>
    <p>time Images from GoGrid blog, 2013</p>
    <p>Extracting Workload Profiles</p>
  </div>
  <div class="page">
    <p>Make the common case fast [P &amp; H]</p>
    <p>In software design: Data processing in background</p>
    <p>In platform design: Garbage collection not on critical path</p>
    <p>In hardware design: Guard band prevents 99.99% of timing errors that would otherwise trigger ECC in processor cache</p>
    <p>Response times follow skewed multi-modal distributions</p>
    <p>Access time (ms)</p>
    <p>Graph and data from Stewart et al. ICAC 13</p>
    <p>Extracting Workload Profiles</p>
  </div>
  <div class="page">
    <p>Blind source separation techniques infer source signals from output signals</p>
    <p>Given F(X,Y,Z) infer X, Y and/or Z</p>
    <p>Independent Component Analysis (ICA) is an established approach [Herault &amp; Jutton, 1986] provided sources are Independent &amp; Non-Gaussian</p>
    <p>Extracting Workload Profiles</p>
  </div>
  <div class="page">
    <p>ICA is famously used to recover audio signals</p>
    <p>Example: 3 people sing their favorite song at the same time. They stand still in the same room. 3 microphones record output.</p>
    <p>timeS ig</p>
    <p>n a l</p>
    <p>timeS ig</p>
    <p>n a</p>
    <p>l</p>
    <p>timeS ig</p>
    <p>n a l</p>
    <p>Extracting Workload Profiles</p>
  </div>
  <div class="page">
    <p>ICA is famously used to recover audio signals</p>
    <p>timeS ig</p>
    <p>n a l</p>
    <p>timeS ig</p>
    <p>n a</p>
    <p>l</p>
    <p>timeS ig</p>
    <p>n a l</p>
    <p>Let It Go Menzel Happy</p>
    <p>Williams</p>
    <p>Roar Perry</p>
    <p>Let It Go Menzel</p>
    <p>time</p>
    <p>N o</p>
    <p>rm a</p>
    <p>liz e d</p>
    <p>S ig</p>
    <p>n a</p>
    <p>l Time Mic #1 Mic #2 Mic #3 1 3 4 10 2 4 5 11 3 7 2 6</p>
    <p>What is the least Gaussian signal that could have produced this data?</p>
    <p>Extracting Workload Profiles</p>
  </div>
  <div class="page">
    <p>Key insight: Use ICA to infer web API components - Transform spatial dimension into concurrency</p>
    <p>timeS ig</p>
    <p>n a l</p>
    <p>timeS ig</p>
    <p>n a</p>
    <p>l</p>
    <p>timeS ig</p>
    <p>n a l</p>
    <p>Resp. Time Concurrent</p>
    <p>Query #1 Resp. Time Concurrent</p>
    <p>Query #2</p>
    <p>Resp. Time Concurrent Query # 3</p>
    <p>Response time is the sum of service time and queuing delay of comp. on the critical path</p>
    <p>Extracting Workload Profiles</p>
  </div>
  <div class="page">
    <p>Key insight: Use ICA to infer web API components - Transform spatial dimension into concurrency - Audio sources to component service times</p>
    <p>timeS ig</p>
    <p>n a l</p>
    <p>timeS ig</p>
    <p>n a</p>
    <p>l</p>
    <p>timeS ig</p>
    <p>n a l</p>
    <p>Resp. Time Concurrent</p>
    <p>Query #1 Resp. Time Concurrent</p>
    <p>Query #2</p>
    <p>Resp. Time Concurrent Query # 3</p>
    <p>Apache Httpd</p>
    <p>Memcached</p>
    <p>MySQL</p>
    <p>Extracting Workload Profiles</p>
  </div>
  <div class="page">
    <p>ICA captures service time distribution of web API components provided</p>
    <p>Service times are non-Gaussian (Common case fast)</p>
    <p>Service times are independent (Elastic scaling)</p>
    <p>Final output is normalized CDF for each component</p>
    <p>Extracting Workload Profiles</p>
  </div>
  <div class="page">
    <p>Auto Scale</p>
    <p>Load Balance Cluster</p>
    <p>Zookeeper Cluster</p>
    <p>Controller Redis Cluster</p>
    <p>Partitioned Database</p>
    <p>User</p>
    <p>Cache hit</p>
    <p>Cache miss</p>
    <p>Auto scale control</p>
    <p>Benchmark comprised of widely used components</p>
    <p>Serving non-stationary request arrivals [stewart, 2007]</p>
    <p>3 components on the critical path</p>
    <p>Extracting Workload Profiles</p>
  </div>
  <div class="page">
    <p>Hand matched normalized CDF to source components</p>
    <p>Less than 5% prediction error  Setup the same benchmark using Zookeeper as a cache</p>
    <p>instead of Redis</p>
    <p>Zookeeper is a poor choice because each insert involves Paxos and capacity per cluster is lower than Redis</p>
    <p>Zookeeper setup had the fatter tail.</p>
    <p>This could be a warning sign</p>
    <p>Extracting Workload Profiles</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Web API hide workload details that could help Internet services plan for performance</p>
    <p>Programming practices in cloud computing allow new inferences about workloads</p>
    <p>Blind source separation techniques yield useful workload profiles within the web API model  From the outside looking in, we can infer a lot</p>
  </div>
</Presentation>
