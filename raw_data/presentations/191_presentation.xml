<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Continuous Intersection Joins Over Moving Objects</p>
    <p>Rui Zhang University of Melbourne</p>
    <p>Dan Lin Purdue University</p>
    <p>Kotagiri Ramamohanarao University of Melbourne</p>
    <p>Elisa Bertino Purdue University</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Backgrounds  Intersection Joins on moving objects  Indexes for moving objects</p>
    <p>Algorithms  Adapting existing algorithms  Our approach</p>
    <p>Time constrained processing  Improvement techniques</p>
    <p>Experiments</p>
  </div>
  <div class="page">
    <p>Motivation  (Traditional) Intersection join</p>
    <p>Given two sets of spatial objects A and B, find all object pair s i,j, where iA, j B, such that i intersects j.</p>
    <p>Intersection join on moving objects  Moving  Continuous</p>
  </div>
  <div class="page">
    <p>Join Algorithms</p>
    <p>Nested loops join  Basic  Expensive</p>
    <p>Block nested loops join  Efficient  Dependent on buffer size</p>
    <p>Index nested loops join  Efficient and robust</p>
    <p>Sort-merge join  Efficient  Difficult for spatial objects</p>
  </div>
  <div class="page">
    <p>Indexing Moving Objects  Monitoring moving objects</p>
    <p>Sampling-based  Trajectory-based</p>
    <p>p = p ( t ref ) + v (t - t ref )  TM : maximum update inter</p>
    <p>val</p>
    <p>R-tree [SIGMOD84]  Minimum bounding rectang</p>
    <p>le (MBR)</p>
    <p>TPR-tree [SIGMOD00]  Add time parameters to the</p>
    <p>R-tree</p>
    <p>Other indexes: Bx-tree [VLD B04], STRIPES [SIGMOD 04]  Only for points</p>
    <p>u u u</p>
    <p>u u</p>
    <p>u</p>
    <p>u</p>
    <p>N2N1N1</p>
    <p>N2</p>
    <p>N1</p>
    <p>A C D</p>
    <p>N1</p>
    <p>B E</p>
    <p>N2</p>
    <p>F</p>
    <p>N3 N3</p>
    <p>A</p>
    <p>B</p>
    <p>C</p>
    <p>D</p>
    <p>E</p>
    <p>F</p>
  </div>
  <div class="page">
    <p>Naive Algorithm (NaiveJoin)</p>
    <p>Join nodes from two TPR-trees recursively  If intersected, check on children  Otherwise, disregard it  For an update, compute its join pairs and update the answer</p>
    <p>Join result</p>
    <p>a1,b1, [0,3]</p>
    <p>a2,b2, [1,4]</p>
    <p>a3,b4, [6,8]</p>
    <p>Node access (IO)</p>
    <p>roots, N1, N2, N3, N4</p>
    <p>Comparison (CPU)</p>
    <p>root A vs root B, N1 vs N3, N2 vs N4</p>
  </div>
  <div class="page">
    <p>Extended TP-Join Algorithm (ETP-Join)</p>
    <p>Time Parameterized Join (TP-Join) [SIGMOD02]  Current result a1,b1  Expiry time 1  Event that causes the change a2,b2</p>
    <p>Join result</p>
    <p>a1,b1, [0,3]</p>
    <p>a2,b2, [1,4]</p>
    <p>a3,b4, [6,8]</p>
    <p>root A vs root B, N1 vs N3</p>
    <p>Comparison (CPU)</p>
    <p>roots, N1, N3</p>
    <p>Node access (IO)</p>
    <p>For the 1st TP-Join</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>NaiveJoin  One tree traversal per upd</p>
    <p>ate, but expensive travers al</p>
    <p>ETP-Join  Cheaper traversal, but</p>
    <p>too frequent traversals</p>
    <p>Node access (IO)</p>
    <p>roots, N1, N2, N3, N4</p>
    <p>Comparison (CPU)</p>
    <p>root A vs root B, N1 vs N3, N2 vs N4</p>
    <p>Node access (IO)</p>
    <p>roots, N1, N3</p>
    <p>Comparison (CPU)</p>
    <p>root A vs root B, N1 vs N3</p>
    <p>For the 1st TP-Join</p>
    <p>Too long Too short</p>
  </div>
  <div class="page">
    <p>Key Problem</p>
    <p>Find a good time range for computing the join pairs</p>
    <p>Observation</p>
    <p>Consider object a and b  Let the next update time for them be ta and tb  Perfect time range for computing their join result is [tc, min(ta,tb)]</p>
    <p>How do we know ta or tb?</p>
    <p>TM gives a bound for them  Time range is cut from [tc, ] to [tc, tc+TM]</p>
    <p>Is this correct for all objects?</p>
    <p>Yes. Proof in technical report: http:// www.cs.mu.oz.au/~rui/publication/TR_mj.pdf</p>
  </div>
  <div class="page">
    <p>Time Constrained Processing (TC-Join)</p>
    <p>NaiveJoin with constrained processing time rang e [tc, tc+TM]</p>
    <p>Join result</p>
    <p>a1,b1, [0,3]</p>
    <p>a2,b2, [1,4]</p>
    <p>a3,b4, [6,8]</p>
    <p>Node access (IO)</p>
    <p>roots, N1, N3</p>
    <p>Comparison (CPU)</p>
    <p>root A vs root B, N1 vs N3</p>
  </div>
  <div class="page">
    <p>Further Optimization (MTB-Join)</p>
    <p>Many objects will not update at the time bound</p>
    <p>Put objects in time buckets</p>
    <p>Each time bucket has an associated TPR-tree  An object is inserted into the tree whose time</p>
    <p>bucket contains the objects latest update time</p>
    <p>tc is in [TM, 3/2TM]</p>
  </div>
  <div class="page">
    <p>Improvement on the Basic Join Algorithm</p>
    <p>Plane Sweep</p>
    <p>Sorting based on the lower left corner in dimension x  Two sequences: Sa = a3, a4, a5; Sb =  b1, b2, b3, b4</p>
    <p>Two essential components for PS</p>
    <p>Lower bound  Upper bound</p>
  </div>
  <div class="page">
    <p>Other Improvements</p>
    <p>Sorting dimension selection  Smaller average speed</p>
    <p>Intersection check  First intersection check and then plane sweep</p>
  </div>
  <div class="page">
    <p>Experiments: setting</p>
    <p>Computer: 2.6G Pentium IV CPU, 1G RAM</p>
    <p>Datasets: Uniform, Gaussian, Battlefield</p>
    <p>Measure: IO and Time</p>
    <p>Parameter Value</p>
    <p>Node capacity 113</p>
    <p>Maximum update interval (TM) 60, 120, 240</p>
    <p>Maximum object speed 1, 2, 3, 4, 5</p>
    <p>Object size (% of space) 0.5, 0.1, 0.2, 0.4, 0.8</p>
    <p>Dataset size 1K, 10K, 50K, 100K</p>
    <p>Dataset Uniform, Gaussian, Battlefield</p>
  </div>
  <div class="page">
    <p>Experiments: TC processing</p>
    <p>Up to 15 times improvement</p>
  </div>
  <div class="page">
    <p>Experiments: Improvement techniques</p>
    <p>Up to 6 times improvement</p>
  </div>
  <div class="page">
    <p>Comparison: Initial Join</p>
    <p>MTB-Join outperforms others</p>
    <p>Half an hour for NaiveJoin</p>
  </div>
  <div class="page">
    <p>Comparison: Maintenance</p>
    <p>Up to 104 times improvement</p>
    <p>Time for processing the join for one second</p>
    <p>MTB-Join 0.03 millisecs 0.05 secs 6 secs</p>
    <p>ETP-Join 6.3 secs 15 mins hours</p>
  </div>
  <div class="page">
    <p>Conclusion and future work</p>
    <p>Conclusion</p>
    <p>Time Constrained processing</p>
    <p>Further optimization by bucketing in time</p>
    <p>Improvement techniques</p>
    <p>Several orders of magnitude performance improvement</p>
    <p>Future work</p>
    <p>Applying TC processing to other queries</p>
  </div>
  <div class="page">
    <p>References  R-tree [SIGMOD04]</p>
    <p>Antonin Guttman. R-Trees: A Dynamic Index Structure for Spatial Search ing . ACM SIGMOD Conference 1984.</p>
    <p>TPR-tree [SIGMOD00]  S. Saltenis, C. S.Jensen, S. T. Leutenegger, and M. A. Lopez. Indexing the</p>
    <p>positions of continuously moving objects. ACM SIGMOD Conference 20 00.</p>
    <p>Bx-tree [VLDB04]  C. Jensen, D. Lin, and B.C.Ooi. Query and update efficient B+-tree based</p>
    <p>indexing of moving objects. International conference on Very Large Datab ases, 2004.</p>
    <p>STRIPES [SIGMOD04]  J. M. Patel, Y. Chen, and V. P. Chakka. STRIPES: An efficient index for pre</p>
    <p>dicted trajectories. ACM SIGMOD Conference 2004.</p>
    <p>TP-Join [SIGMOD02]  Y. Tao and D. Papadias. Time-parameterized queries in spatio-temporal d</p>
    <p>atabases. ACM SIGMOD Conference 2002.</p>
  </div>
  <div class="page">
    <p>Questions</p>
    <p>Please send your questions to</p>
    <p>Rui Zhang</p>
    <p>rui@csse.unimelb.edu.au</p>
  </div>
</Presentation>
