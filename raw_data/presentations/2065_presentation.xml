<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>The Case for Less Predictable Opera5ng System Behavior</p>
    <p>Ruimin Sun, Donald Porter, Daniela Oliveira, Ma@ Bishop</p>
  </div>
  <div class="page">
    <p>Any vulnerability is automa5cally widespread  W32/Blaster infected 1.4 million systems in a month.  Code-Red worm 2001</p>
    <p>The Monoculture Problem</p>
  </div>
  <div class="page">
    <p>Malware Sizes are Small</p>
    <p>Peiter Mudge: DARPA Framework for Cyber Security 2011 Similar arguments in S. Forrest. (WEIS 2015)</p>
    <p>Lots of effort to get into a system</p>
    <p>Once malware on, easy to remain</p>
    <p>How robust can 125 lines be?</p>
  </div>
  <div class="page">
    <p>AZer breaking into a system, malware almost always works as expected</p>
    <p>Ex: Configura5on files always in /etc</p>
    <p>We Blame Predictability</p>
  </div>
  <div class="page">
    <p>What if the OS behaved adversarially toward dodgy soZware?</p>
    <p>Ex.: Doing the wrong thing for some system calls</p>
    <p>Robust malware would get a lot harder to write</p>
    <p>Maybe Unpredictability is the SoluCon?</p>
  </div>
  <div class="page">
    <p>Portable, robust soZware already includes a ton of error-handling code and end-to-end checks</p>
    <p>E.g., lots of varia5on among UNIX variants</p>
    <p>And applica5ons increasingly distrust the OS</p>
    <p>Intel SGX, Haven, Inktag, Virtual Ghost, etc.</p>
    <p>Protec5ng against Iago a@acks amounts to even more careful system call checking</p>
    <p>Good SoGware is Hard to Write</p>
    <p>Malware should have to do at least this much work</p>
  </div>
  <div class="page">
    <p>Our prototype: Chameleon</p>
    <p>Focus on unpredictable system call behavior  No bug-for-bug compa5bility  Non-determinis5c system call errors</p>
    <p>Applica5ons run in one of three environments  Can move over 5me</p>
    <p>Toward An Unpredictable OS</p>
  </div>
  <div class="page">
    <p>Example: Downloaded game, maybe trojan?</p>
    <p>Raise engineering effort for anything to run  Dispropor5onate harm to malware?</p>
    <p>Approach: Perturb system calls in kernel  Arguments, return values, drop call altogether</p>
    <p>Monitor soZware, possibly transi5on to other environments</p>
    <p>Unpredictable: Unknown SoGware</p>
  </div>
  <div class="page">
    <p>Fewer instances of same exploit  Restrict unpredictability to specifica5on</p>
    <p>Trend to push func5onality out of kernel  Easier to implement N versions of each piece</p>
    <p>Randomly combine implementa,ons at run5me</p>
    <p>More in paper</p>
    <p>Diverse: Known-Good SoGware</p>
  </div>
  <div class="page">
    <p>Similar to a honeypot  Monitor and report to CERT</p>
    <p>System behaves consistently, but falsely</p>
    <p>E.g., bogus files, fakes ac5ons taken as root</p>
    <p>More in paper</p>
    <p>DecepCve: Known Malware</p>
  </div>
  <div class="page">
    <p>Working Scenario</p>
    <p>Bob, 78 living in a re5rement community in Florida</p>
    <p>not computer savvy  clicks in links from phishing email  installs malware engage in later DDoS a@acks  Bob never no5ces as malware is ac5ve aZer 1am.</p>
  </div>
  <div class="page">
    <p>Chameleon Scenario</p>
    <p>Who knows?</p>
    <p>Signed by Mozilla</p>
    <p>Matches malware signature</p>
    <p>Looks ok Looks malicious</p>
  </div>
  <div class="page">
    <p>Preliminary Study</p>
    <p>Hypothesis  Malware are more sensi5ve to unpredictable behavior</p>
    <p>Methodology [more in paper]  Interfere with common malware system calls</p>
    <p>Example Strategies 1. Ignore the system call 2. Change buffer bytes (read, write, send) 3. Increase wait 5me 4. Change file pointer (inject a seek)</p>
  </div>
  <div class="page">
    <p>Keylogger with Unpredictability</p>
    <p>Strategies on Keylogger  Change write( fd, *buf, size) buffer;  Change lseek( fd, offset, whence) pointer;</p>
  </div>
  <div class="page">
    <p>Botnet with Unpredictability</p>
    <p>Strategies on Botnet  Silence read(fd, *buf, size);  Silence or reduce len in sendto(sockfd,*buf,len,);</p>
  </div>
  <div class="page">
    <p>What About Benign SoGware?</p>
    <p>Firefox,Thunderbird and Skype work(ish)</p>
    <p>Works normally most of the 5me  Occasional warnings (click ok)  Some func5onality temporarily unavailable  Example: webpage or contacts wont load  Usually fixed by retrying</p>
    <p>Unpredictability can disproporConately</p>
    <p>harm malware!</p>
  </div>
  <div class="page">
    <p>Lots to Figure Out</p>
    <p>More precise strategies for unpredictability  Malware-specific system call sequences?  Other rules or policies for unpredictability  Experiment with more soZware and malware</p>
    <p>User studies with real Bobs (and Alices)  Abuse OS classes to implement 50+ lib. instances</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Ruimin Sun: gracesrm@ufl.edu</p>
    <p>Unpredictability can thwart a@acker with less effort than genera5ng a@acks</p>
    <p>Chameleons three environments:  Diverse: reduce monoculture of benign soZware</p>
    <p>Unpredictable: raise engineering effort for malware to at least match other soZware</p>
    <p>Decep5ve: lures adversaries into revealing strategies</p>
  </div>
</Presentation>
