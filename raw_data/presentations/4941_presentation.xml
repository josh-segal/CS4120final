<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>WayFinder:Navigating and Sharing Information in a Decentralized World</p>
    <p>Christopher Peery, Matias Cuenca, Richard P. Martin, Thu D. Nguyen</p>
    <p>Department of Computer Science, Rutgers University</p>
    <p>http://www.panic-lab.rutgers.edu/Research/planetp</p>
  </div>
  <div class="page">
    <p>WayFinder2</p>
    <p>Background</p>
    <p>Different goals for information-storage systems: A store of binary objects for general purpose use:</p>
    <p>E.g. Unix FFS, LFS, NetApps</p>
    <p>Records &amp; relations describable using relational algebra:</p>
    <p>E.g., Oracle, DB2, MySQL, Illustra</p>
    <p>Global publishing and sharing:</p>
    <p>E.g, Web, Napster (P2P),</p>
    <p>Group-level sharing:</p>
    <p>E.g. Wayfinder, Notes, groove</p>
    <p>Range of operations: consistency, durability, atomicity semantics.</p>
    <p>Wayfinder initially targeting group-level sharing Migration path to a more generally usable storage service.</p>
    <p>Technology trends increasing importance of sharing &amp; publishing</p>
  </div>
  <div class="page">
    <p>WayFinder3</p>
    <p>Motivation</p>
    <p>Two technology trends are fundamentally changing the computing landscape</p>
    <p>Increasing network connectivity (my dad is on the net)</p>
    <p>Complex and dynamic sharing patterns</p>
    <p>Increasing performance/cost-size ratio</p>
    <p>Multiple computing devices per person</p>
    <p>Users must manage information across multiple domains of sharing across multiple devices</p>
    <p>Network connectivity increasing but not ubiquitous</p>
    <p>Also unreliable: Isabel knocked out Thus cable connection from home for 3 days</p>
    <p>Invariably, devices are used as caches of data for disconnected operation</p>
  </div>
  <div class="page">
    <p>WayFinder4</p>
    <p>Goals</p>
    <p>Explore a file system that will ease the emerging data management problem in a medium-sized (100s-1000s) group context</p>
    <p>Want to: share information (publish)</p>
    <p>Read the paper I put out there</p>
    <p>Want to find information published by others</p>
    <p>Wheres the paper by so-and-so on topic X?</p>
    <p>Want storage function too! (I want my cake and eat it too)</p>
    <p>E.g., dont manage local HTTP space separately from FS space</p>
    <p>Want to remove the burden of information management across devices</p>
    <p>Dont force users to remember where the latest is</p>
    <p>Additional constraints:</p>
    <p>Users have multiple devices</p>
    <p>Highly variance in connectivity and bandwidth, but huge local storage</p>
  </div>
  <div class="page">
    <p>WayFinder5</p>
    <p>Lessons from the Web</p>
    <p>Decentralized control for sharing</p>
    <p>Complex and dynamic sharing patterns  impossible to impose centralized control</p>
    <p>Relax semantics to allow scale</p>
    <p>Give up strict atomicity, durability, high availability.</p>
    <p>E.g. namespace is partitioned: normal FS =&gt; stop, FSCK</p>
    <p>Web =&gt; view whatever portion of namespace is currently reachable</p>
    <p>Need both directory-based and content-based addressing</p>
    <p>Directories: Yahoo, Dmoz, etc.</p>
    <p>Content search: Google, Ask Jeeves, etc.</p>
  </div>
  <div class="page">
    <p>WayFinder6</p>
    <p>WayFinder Abstractions</p>
    <p>Merged local FS trees into a single global namespace</p>
    <p>Compare to Web, NFS graft model</p>
    <p>First class content addressing</p>
    <p>Semantic directories</p>
    <p>Probabilistic durability and availability of files</p>
    <p>Allows system to scale back junk as function of free space</p>
    <p>When you have too much space, you keep lots of junk</p>
    <p>Group-Wise Hoarding Model</p>
    <p>Allow users to specify a set of devices and content</p>
    <p>This content is actively synchronized across the set devices</p>
  </div>
  <div class="page">
    <p>WayFinder7</p>
    <p>Group Sharing</p>
    <p>A</p>
    <p>B C</p>
    <p>Hoard 1</p>
    <p>A B</p>
    <p>C</p>
    <p>A</p>
    <p>D E</p>
    <p>Hoard 2</p>
    <p>D</p>
    <p>E</p>
    <p>F</p>
    <p>B G</p>
    <p>Hoard 3</p>
    <p>E</p>
    <p>F G</p>
    <p>Shared Universe</p>
  </div>
  <div class="page">
    <p>WayFinder8</p>
    <p>Namespace Model</p>
    <p>/</p>
    <p>A B</p>
    <p>C D</p>
    <p>H1 H2 H3</p>
    <p>B</p>
    <p>C E</p>
    <p>/</p>
    <p>F</p>
    <p>/</p>
    <p>G</p>
    <p>G</p>
    <p>/</p>
    <p>A B</p>
    <p>C D</p>
    <p>F</p>
    <p>E</p>
    <p>Global Namespace H1+H2+H3</p>
    <p>Merge</p>
  </div>
  <div class="page">
    <p>WayFinder9</p>
    <p>Automatic Content-Based Organization</p>
    <p>E</p>
    <p>/</p>
    <p>A B</p>
    <p>C D</p>
    <p>F</p>
    <p>E</p>
    <p>E</p>
  </div>
  <div class="page">
    <p>WayFinder10</p>
    <p>Motivating Example</p>
    <p>/ /</p>
    <p>computers</p>
    <p>File System</p>
    <p>P2P</p>
    <p>Chord: A scalable Peer</p>
    <p>Pastry A substrate for peer</p>
    <p>Wide-area coop. Storage w CFS</p>
    <p>The Coda Distributed File System</p>
    <p>H1</p>
    <p>H2</p>
    <p>H3</p>
    <p>H4 H5File 1 File 2 PC Laptop</p>
    <p>File 1 File 2</p>
    <p>Publication Repository</p>
  </div>
  <div class="page">
    <p>WayFinder11</p>
    <p>Motivating Example</p>
    <p>/ /</p>
    <p>computers</p>
    <p>File System</p>
    <p>P2P</p>
    <p>Chord: A scalable Peer</p>
    <p>Pastry A substrate for peer</p>
    <p>Wide-area coop. Storage w CFS</p>
    <p>The Coda Distributed File System</p>
    <p>H1</p>
    <p>H2</p>
    <p>H3</p>
    <p>Peer replication with Selective Control Implementation of the Ficus Repl. FS Perspectives on Optimist. Repl. P2P Filing</p>
    <p>H6</p>
    <p>Peer replication with Selective Control</p>
    <p>Perspectives on Optimist. Repl. P2P Filing</p>
    <p>Implementation of the Ficus Repl. FS</p>
    <p>Perspectives on Optimist. Repl. P2P Filing</p>
    <p>H4 H5PC Laptop</p>
  </div>
  <div class="page">
    <p>WayFinder12</p>
    <p>Motivating Example</p>
    <p>/ /</p>
    <p>computers</p>
    <p>File System</p>
    <p>P2P</p>
    <p>Chord: A scalable Peer</p>
    <p>Pastry A substrate for peer</p>
    <p>Wide-area coop. Storage w CFS</p>
    <p>The Coda Distributed File System</p>
    <p>H1</p>
    <p>H2</p>
    <p>H3</p>
    <p>H6 Peer replication with Selective Control Implementation of the Ficus Repl. FS</p>
    <p>Perspectives on Optimist. Repl. P2P Filing</p>
    <p>Peer replication with Selective Control</p>
    <p>Implementation of the Ficus Repl. FS</p>
    <p>Ficus</p>
    <p>H4 H5File 1 File 2 PC Laptop</p>
    <p>File 1 File 2</p>
    <p>Peer replication with Selective Control Peer replication with Selective Control</p>
  </div>
  <div class="page">
    <p>WayFinder13</p>
    <p>Motivating Example</p>
    <p>H1</p>
    <p>H2</p>
    <p>H3</p>
    <p>H6</p>
    <p>H4 File 1 File 2 PC</p>
    <p>Peer replication with Selective Control</p>
    <p>H5 Laptop</p>
    <p>File 1 File 2</p>
    <p>Peer replication with Selective Control</p>
  </div>
  <div class="page">
    <p>WayFinder14</p>
    <p>High-Level Architecture</p>
    <p>Distributed Meta-data Store</p>
    <p>Local Data Store</p>
    <p>Namespace &amp; File Management</p>
  </div>
  <div class="page">
    <p>WayFinder15</p>
    <p>High-Level Architecture</p>
    <p>Network</p>
    <p>Unreliable DHT</p>
    <p>Content Addressing</p>
    <p>Membership</p>
    <p>Gossiping</p>
    <p>File System API + Extended API</p>
    <p>Meta-Data Management</p>
    <p>Consistency Local File Cache</p>
    <p>WayFinder</p>
    <p>PlanetP</p>
    <p>Local OS Local File System</p>
  </div>
  <div class="page">
    <p>WayFinder16</p>
    <p>PlanetP</p>
    <p>Infrastructure for building content addressable information sharing P2P systems</p>
    <p>Major components DHT: key-based distributed object look-up similar to CHORD</p>
    <p>Global Membership directory: whos currently on-line</p>
    <p>Global/local index: efficient content search</p>
    <p>Global index: 1 Bloom filter for each hoard giving an approximate th mapping</p>
    <p>Local index: normal inverted index</p>
    <p>Global data structures kept loosely synchronized using gossiping</p>
    <p>Publish/subscribe usage model Shared objects mostly take form of XML snippets</p>
  </div>
  <div class="page">
    <p>WayFinder17</p>
    <p>Wayfinder  Node1</p>
    <p>/</p>
    <p>A B</p>
    <p>C D</p>
    <p>B</p>
    <p>C E</p>
    <p>/</p>
    <p>&lt;Dir name=/ Type=Hierarchy&gt; &lt;file name=B ID=432&gt; &lt;file name=A ID=22&gt; &lt;Dir/&gt;</p>
    <p>{12, horse, race}{22, cats} {/}</p>
    <p>Wayfinder  Node1 Http Server Http Server</p>
    <p>&lt;File name=E size=6 URL=/&gt;</p>
    <p>User Requests User Requests</p>
    <p>Remote File Request</p>
    <p>Node 1 Local Hoard</p>
    <p>Node 2 Local Hoard</p>
    <p>&lt;Dir name=/ Type=Hierarchy&gt; &lt;file name=B ID=151&gt; &lt;Dir/&gt;</p>
    <p>&lt;File name=A size=6 URL=abc Version=1.0/&gt;</p>
  </div>
  <div class="page">
    <p>WayFinder18</p>
    <p>Namespace Construction</p>
    <p>Creating a accurate directory or file state may be expensive Worst case you may need to contact the entire community</p>
    <p>E.g., constructing the view for / or a the state of popular file</p>
    <p>Cache views and file in PlanetPs DHT The first node that browses a directory will create a view the hard way but caches the view for fast subsequent accesses</p>
    <p>Same for files</p>
    <p>Processed state is stored</p>
    <p>Cached views are discarded periodically</p>
    <p>DHT only used to store soft state DHT impossible to maintain in face of unreliable nodes &amp; network</p>
    <p>E.g., group of 1000 sharing 100 GB stored in DHT with Gnutella observed availability =&gt; 4GB data movement per node per day</p>
  </div>
  <div class="page">
    <p>WayFinder19</p>
    <p>Semantic Directories</p>
    <p>Semantic Directories provide content-based organization They are directories whose names are treated as content queries</p>
    <p>Populated by files whose waynodes are returned as results</p>
    <p>The scope of a query is defined as the files located in the parent directory</p>
    <p>May be nested to provide a simple conjunctive query language</p>
    <p>e.g. /computer/P2P  computer AND P2P</p>
    <p>They may be used as normal directories The contents may be altered by removing or adding files</p>
    <p>Semantic directories are re-evaluated periodically (or when requested explicitly by the user)</p>
    <p>Provide an easy means for adding and removing structure based on incoming/outgoing content</p>
  </div>
  <div class="page">
    <p>WayFinder20</p>
    <p>File Access</p>
    <p>Accessing a file F requires a local copy of F</p>
    <p>Find a replica of the latest version and make a local copy</p>
    <p>Querying PlanetP for waynode using file ID</p>
    <p>Choose a waynode with latest version and retrieve using URL</p>
    <p>The files location is mirrored in local namespace (hoard)</p>
    <p>The local copy is republished as an additional replica</p>
    <p>Updates</p>
    <p>Open-for-write/close creates a new version</p>
    <p>Unique version identified by &lt;node id, number&gt;</p>
    <p>Writes encoded as diffs for efficient propagation</p>
    <p>Can roll forward and backward</p>
  </div>
  <div class="page">
    <p>WayFinder21</p>
    <p>Partitioned &amp; Disconnected Operation</p>
    <p>/</p>
    <p>A B</p>
    <p>C D</p>
    <p>B</p>
    <p>C E</p>
    <p>/</p>
    <p>F</p>
    <p>/</p>
    <p>G</p>
    <p>G</p>
    <p>/</p>
    <p>A B</p>
    <p>C D</p>
    <p>F</p>
    <p>G</p>
    <p>/</p>
    <p>A B</p>
    <p>C D</p>
    <p>F</p>
    <p>E</p>
    <p>B</p>
    <p>C E</p>
    <p>/</p>
    <p>H1 H2 H3</p>
    <p>Global Namespace H1+H2+H3 H1+H3 H2</p>
    <p>Partitioned Operation</p>
  </div>
  <div class="page">
    <p>WayFinder22</p>
    <p>Consistency Model</p>
    <p>Single copy availability / Eventual Consistency</p>
    <p>Wayfinder can not ensure that the latest version can be found</p>
    <p>Information maybe off-line</p>
    <p>Notification may be delayed by gossiping/rumoring</p>
    <p>Can even happen during when the full community is on-line</p>
    <p>This is a problem for any system supporting partitioned operation</p>
    <p>Wayfinder will attempt to find most to up-to-date data</p>
    <p>Cached data can reduce window of vulnerability</p>
    <p>Will warn user if conflict detected at creation time</p>
    <p>Update cached views on changes if they exist</p>
  </div>
  <div class="page">
    <p>WayFinder23</p>
    <p>Consistency Model - Files</p>
    <p>Files</p>
    <p>Concurrent writes will lead to version conflict</p>
    <p>Automatically resolved using a deterministic (but arbitrary) order of conflicting versions</p>
    <p>User can choose to unroll and resolve conflict</p>
    <p>The resolved version of the conflict becomes a new version</p>
    <p>Directories</p>
    <p>Name collisions are ok: each file uniquely identified by file ID</p>
    <p>When hoarding an existing file, the hoard replica will inherit the existing ID</p>
    <p>When creating a new file, assign new ID</p>
    <p>Name conflicts resolved by differentiating on the IDs</p>
  </div>
  <div class="page">
    <p>WayFinder24</p>
    <p>Availability Model</p>
    <p>Probabilistic availability model</p>
    <p>Each Node may independently make decision concerning files</p>
    <p>Allow user to specify desired availability for files</p>
    <p>Try to achieve desired availability using autonomous replication (SRDS 2003)</p>
    <p>Envision specifying coarse availability levels for directory trees</p>
    <p>Can increase availability by introducing server-like hoards</p>
    <p>Content may be unavailable because</p>
    <p>Hoards holding the desired content is off-line</p>
    <p>The last replica of a file is evicted</p>
    <p>Warn user when there is not enough space for desired availability</p>
  </div>
  <div class="page">
    <p>WayFinder25</p>
    <p>Current Availability Model</p>
    <p>The ultimate goal is to have as much the namespace, as possible, visible at all times</p>
    <p>The current model is based on an approach presented in SRDS</p>
    <p>Assumes connectivity to a single large community</p>
    <p>Node availability being with respect to this community</p>
    <p>Wayfinder may not have this single large community</p>
    <p>Designate a subset of the community as a Core</p>
    <p>Track nodes availability with respect to this core, and replicate accordingly</p>
    <p>There are problems with this approach</p>
    <p>The idea of the Core is counter-intuitive to wayfinder</p>
    <p>Availability measures will be may be very pessimistic</p>
    <p>Really does not get at the point of availability in wayfinder</p>
  </div>
  <div class="page">
    <p>WayFinder26</p>
    <p>Availability Model</p>
    <p>Wayfinder Community</p>
    <p>B C</p>
    <p>D</p>
    <p>E A</p>
    <p>G F</p>
    <p>We want to consider partitioned operation</p>
    <p>Availability has been traditionally been achieve through hoarding/replication</p>
    <p>Challenges:</p>
    <p>Mobility between clusters</p>
    <p>Insufficient Space</p>
    <p>Node-Centric Availability measure</p>
    <p>Unified Availability Model</p>
  </div>
  <div class="page">
    <p>WayFinder27</p>
    <p>Evaluation Plan</p>
    <p>Weve currently have a finished a working prototype</p>
    <p>Exports the NFS v2.0 interface + extended RMI API</p>
    <p>Evaluation:</p>
    <p>The cost of browsing using the global index and the DHT</p>
    <p>The DHT should provide a relatively constant cost for directories as the community grows</p>
    <p>Determine the cost of running Wayfinder to access local files</p>
    <p>Measure the effect of DHT failures on performance</p>
    <p>The additional amount of network traffic sent because we use PlanetP</p>
  </div>
  <div class="page">
    <p>WayFinder28</p>
    <p>MAB</p>
  </div>
  <div class="page">
    <p>WayFinder29</p>
    <p>Scan Time</p>
  </div>
  <div class="page">
    <p>WayFinder30</p>
    <p>DHT Robustness</p>
  </div>
  <div class="page">
    <p>WayFinder31</p>
    <p>Diff Network Volume</p>
  </div>
  <div class="page">
    <p>WayFinder32</p>
    <p>Future Work</p>
    <p>Group-based hoarding</p>
    <p>Availability Model</p>
    <p>Actually use WayFinder</p>
    <p>PANIC publication repository</p>
    <p>PANIC workgroup sharing</p>
    <p>Attempt to answer following questions:</p>
  </div>
  <div class="page">
    <p>WayFinder33</p>
    <p>Security</p>
    <p>The security model will seek to control writes Read access means you have a hoarded file</p>
    <p>Very hard to do revocation for read access</p>
    <p>For same reason, once write permission is given, granted for life</p>
    <p>Attempt to control the application of diffs Any node can publish a diff</p>
    <p>Only diffs from permitted nodes will be applied to files</p>
    <p>Security Framework Based on ACL and signatures.</p>
    <p>Files are owned by a users key or a group key</p>
    <p>All diffs are signed and verfied against ACL.</p>
    <p>Anyone with write permission may alter ACL</p>
  </div>
  <div class="page">
    <p>WayFinder34</p>
    <p>Directories REMOVE???????</p>
    <p>/</p>
    <p>A B</p>
    <p>C D</p>
    <p>H1 H2 H3</p>
    <p>B</p>
    <p>C E</p>
    <p>/</p>
    <p>F</p>
    <p>/</p>
    <p>G</p>
    <p>G</p>
    <p>/</p>
    <p>A B</p>
    <p>C D</p>
    <p>F</p>
    <p>E</p>
    <p>Global Namespace H1+H2+H3</p>
    <p>Directory grafting is done by querying PlanetP for all waynodes containing the directorys pathname</p>
  </div>
  <div class="page">
    <p>WayFinder35</p>
    <p>W1</p>
    <p>{k1,k2}</p>
    <p>W2 W3 W4 W5 W6</p>
    <p>{k3,k4, k5} {k6} {k7,k8} {k9}</p>
    <p>F2F1 F4F3 F5 F6F7</p>
  </div>
  <div class="page">
    <p>WayFinder36</p>
    <p>Local File SystemNetwork</p>
    <p>Light Weight DHT Content Addressing</p>
    <p>Membership</p>
    <p>Gossiping</p>
    <p>SystemX</p>
    <p>File System API + Extended API</p>
    <p>Light Weight</p>
    <p>Http Server</p>
    <p>Hoard Mngt.</p>
    <p>WayFinder</p>
  </div>
  <div class="page">
    <p>WayFinder37</p>
    <p>A</p>
    <p>/ H1</p>
    <p>F</p>
    <p>G</p>
    <p>/ H4</p>
    <p>B</p>
    <p>D E</p>
    <p>/ H5</p>
    <p>G</p>
    <p>/</p>
    <p>A B</p>
    <p>C D</p>
    <p>F</p>
    <p>E</p>
    <p>B</p>
    <p>C E</p>
    <p>/ H2</p>
    <p>B</p>
    <p>D</p>
    <p>/ H3</p>
    <p>G</p>
    <p>/</p>
    <p>B</p>
    <p>D</p>
    <p>F</p>
    <p>B</p>
    <p>D</p>
    <p>/ H3</p>
    <p>F</p>
    <p>G</p>
    <p>/ H4</p>
    <p>B</p>
    <p>D E</p>
    <p>/</p>
    <p>B</p>
    <p>D E</p>
    <p>/ H5</p>
    <p>/</p>
    <p>A B</p>
    <p>C E</p>
    <p>A</p>
    <p>/ H1</p>
    <p>B</p>
    <p>C E</p>
    <p>/ H2</p>
  </div>
  <div class="page">
    <p>WayFinder38</p>
    <p>Availability Model</p>
    <p>A</p>
    <p>A</p>
    <p>A</p>
    <p>A</p>
    <p>A</p>
    <p>B</p>
    <p>B</p>
    <p>B</p>
    <p>C</p>
    <p>E</p>
    <p>D F</p>
    <p>G</p>
    <p>C</p>
    <p>Critically important Important Junk</p>
    <p>Almost Trash</p>
    <p>H</p>
    <p>F</p>
  </div>
  <div class="page">
    <p>WayFinder39</p>
    <p>Files</p>
    <p>Each file replica is described by a unique meta-inode (called a waynode)</p>
    <p>Contains a globally unique file ID, version vector, content hash, and location (and an ACL)</p>
    <p>Version vectors used to to keep track of changes</p>
    <p>Encoded in XML for portability and ease of debugging</p>
    <p>Waynodes are then published to PlanetP</p>
    <p>Unique keys of the file are also published for content addressing</p>
    <p>Can locate file either by content-based or id-based querying</p>
    <p>The current state of a file is determined by collecting all the necessary waynodes</p>
    <p>Example file waynode</p>
    <p>&lt; File name=t3.txt type=&quot;File&quot; version=&quot;1.0:initial&quot; size=&quot;72&quot; location=URL&quot; version_history=&quot;1.0:initial&quot; fileID=id1&quot; source=node1&quot; cotentHash=123&quot;/&gt;</p>
  </div>
  <div class="page">
    <p>WayFinder40</p>
    <p>Directories</p>
    <p>Directories are also represented by waynodes Each users directory waynodes represent only locally hoarded files</p>
    <p>Directories are identified by their name alone</p>
    <p>Directories are constructed by collecting these waynodes</p>
    <p>All waynodes for a directory are collected</p>
    <p>The sets of files are then merged into a single view for the user</p>
    <p>Example Directory Waynode</p>
    <p>&lt;dir name=foobar type=hierarchical&gt; &lt;file name=t1.txt ID=123&gt; &lt;file name=t2.txt ID=413&gt;</p>
    <p>&lt;dir/&gt;</p>
  </div>
  <div class="page">
    <p>WayFinder41</p>
    <p>Consistency Model</p>
    <p>File consistency</p>
    <p>May not be able to locate latest version</p>
    <p>May or may not know about the existence of the latest version</p>
    <p>May modify an old version</p>
    <p>Same conflict resolution mechanism works</p>
    <p>Determinism of automatic resolution allows pairwise reconciliation</p>
    <p>Directory consistency</p>
    <p>Nothing new except  deletes</p>
  </div>
</Presentation>
