<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Paruj Ratanaworabhan Kasetsart University, Thailand</p>
    <p>Ben Livshits and Ben Zorn Microsoft Research, Redmond</p>
    <p>JSMeter: Characterizing the Behavior of JavaScript Web Applications</p>
    <p>in collaboration with</p>
    <p>David Simmons, Corneliu Barsan, and Allen Wirfs-Brock</p>
  </div>
  <div class="page">
    <p>Why Measure JavaScript?</p>
    <p>Standardized, de facto language for the web</p>
    <p>Support in every browser, much existing code</p>
    <p>Browser and JavaScript performance is important</p>
    <p>Are current JavaScript benchmarks representative?</p>
    <p>Limited understanding of JavaScript behavior in real sites</p>
    <p>Who cares?</p>
    <p>Users, web application developers, JavaScript engine developers</p>
  </div>
  <div class="page">
    <p>ZDNet 29 May 2008</p>
    <p>ghacks.net Dec. 2008</p>
    <p>Browser</p>
    <p>Wars!</p>
  </div>
  <div class="page">
    <p>Artificial Benchmarks versus Real World Sites</p>
    <p>Maps Maps</p>
    <p>richards</p>
    <p>deltablue</p>
    <p>crypto</p>
    <p>raytrace</p>
    <p>earleyboyer</p>
    <p>regexp</p>
    <p>splay</p>
    <p>3-draytrace</p>
    <p>access-nbody</p>
    <p>bitops-nsieve</p>
    <p>controlflow</p>
    <p>crypto-aes</p>
    <p>date-xparb</p>
    <p>math-cordic</p>
    <p>string-tagcloud</p>
    <p>JSMeter 11 real sites:</p>
    <p>Goals of JSMeter Project</p>
    <p>Instrument JavaScript execution and measure behavior</p>
    <p>Compare behavior of JavaScript benchmarks against real sites</p>
    <p>Consider how benchmarks can mislead design decisions</p>
  </div>
  <div class="page">
    <p>How We Measured JavaScript</p>
    <p>\ie\jscript\*.cpp</p>
    <p>Source-level instrumentation</p>
    <p>custom jscript.dll</p>
    <p>custom trace files website visits</p>
    <p>Offline analyzers</p>
    <p>custom trace files</p>
    <p>Constant</p>
    <p>Other Str Ops</p>
    <p>Concat Op</p>
  </div>
  <div class="page">
    <p>Visiting the Real Sites</p>
    <p>Getting past page load performance</p>
    <p>Attempted to use each site in normal way:</p>
    <p>amazon Search a book, add to shopping cart, sign in, and sign out bing Type in a search query and also look for images and news bingmap Search for a direction from one city to another cnn Read front page news ebay Search for a notebook, bid, sing in, and sign out economist Read front page news, view comments facebook Log in, visit a friend pages, browse through photos and comments gmail Sign in, check inbox, delete a mail, and sign out google Type in a search query and also look for images and news googlemap Search for a direction from one city to another hotmail Sign in, check inbox, delete a mail, and sign out</p>
  </div>
  <div class="page">
    <p>Understanding JavaScript Behavior</p>
    <p>Code</p>
    <p>Events</p>
    <p>JavaScript</p>
    <p>Objects</p>
  </div>
  <div class="page">
    <p>Code Behavior</p>
    <p>Code</p>
    <p>Events</p>
    <p>JavaScript</p>
    <p>Objects</p>
    <p>Function size</p>
    <p>Instructions/call</p>
    <p>Code locality</p>
    <p>Instruction mix</p>
  </div>
  <div class="page">
    <p>Total Bytes of JavaScript Source</p>
    <p>a m</p>
    <p>a z o n</p>
    <p>b in</p>
    <p>g</p>
    <p>b in</p>
    <p>g m</p>
    <p>a p</p>
    <p>c n n</p>
    <p>e b a y</p>
    <p>e c o n o m</p>
    <p>is t</p>
    <p>fa c e b o o k</p>
    <p>g m</p>
    <p>a il</p>
    <p>g o o g le</p>
    <p>g o o g le</p>
    <p>m a p</p>
    <p>h o tm</p>
    <p>a il</p>
    <p>ri c h a rd</p>
    <p>s</p>
    <p>d e lt</p>
    <p>a b lu</p>
    <p>e</p>
    <p>c ry</p>
    <p>p to</p>
    <p>ra y tr</p>
    <p>a c e</p>
    <p>e a rl</p>
    <p>e y</p>
    <p>re g e x p</p>
    <p>s p la</p>
    <p>y</p>
    <p>y tr</p>
    <p>a c e</p>
    <p>a c c e s s n b o d y</p>
    <p>b it</p>
    <p>o p s n s ie</p>
    <p>v e</p>
    <p>c o n tr</p>
    <p>o lf</p>
    <p>lo w</p>
    <p>c ry</p>
    <p>p to</p>
    <p>a e s</p>
    <p>d a te</p>
    <p>x p a rb</p>
    <p>m a th</p>
    <p>c o rd</p>
    <p>ic</p>
    <p>re g e x p d n a</p>
    <p>s tr</p>
    <p>in g ta</p>
    <p>g c lo</p>
    <p>u d</p>
    <p>S o u rc</p>
    <p>e s</p>
    <p>iz e ( k il o b y te</p>
    <p>s )</p>
    <p>Real Sites V8 SunSpider</p>
    <p>Code|Objects|Events</p>
  </div>
  <div class="page">
    <p>Static Unique Functions Executed</p>
    <p>a z o n</p>
    <p>b in</p>
    <p>g</p>
    <p>b in</p>
    <p>g m</p>
    <p>a p</p>
    <p>c n n</p>
    <p>e b a y</p>
    <p>e c o n o m</p>
    <p>is t</p>
    <p>fa c e b o o k</p>
    <p>g m</p>
    <p>a il</p>
    <p>g o o g le</p>
    <p>g o o g le</p>
    <p>m a p</p>
    <p>h o tm</p>
    <p>a il</p>
    <p>ri c h a rd</p>
    <p>s</p>
    <p>d e lt</p>
    <p>a b lu</p>
    <p>e</p>
    <p>c ry</p>
    <p>p to</p>
    <p>ra y tr</p>
    <p>a c e</p>
    <p>e a rl</p>
    <p>e y</p>
    <p>re g e x p</p>
    <p>s p la</p>
    <p>y</p>
    <p>y tr</p>
    <p>a c e</p>
    <p>a c c e s s n b o d y</p>
    <p>b it</p>
    <p>o p s n s ie</p>
    <p>v e</p>
    <p>c o n tr</p>
    <p>o lf</p>
    <p>lo w</p>
    <p>c ry</p>
    <p>p to</p>
    <p>a e s</p>
    <p>d a te</p>
    <p>x p a rb</p>
    <p>m a th</p>
    <p>c o rd</p>
    <p>ic</p>
    <p>re g e x p d n a</p>
    <p>s tr</p>
    <p>in g ta</p>
    <p>g c lo</p>
    <p>u d</p>
    <p>U n iq</p>
    <p>u e F</p>
    <p>u n c ti</p>
    <p>o n s E</p>
    <p>x e c u te</p>
    <p>d</p>
    <p>Real Sites V8 SunSpider</p>
    <p>Code|Objects|Events</p>
  </div>
  <div class="page">
    <p>Bytecodes / Call</p>
    <p>a m</p>
    <p>a z o n</p>
    <p>b in</p>
    <p>g</p>
    <p>b in</p>
    <p>g m</p>
    <p>a p</p>
    <p>c n n</p>
    <p>e b a y</p>
    <p>e c o n o m</p>
    <p>is t</p>
    <p>fa c e b o o k</p>
    <p>g m</p>
    <p>a il</p>
    <p>g o o g le</p>
    <p>g o o g le</p>
    <p>m a p</p>
    <p>h o tm</p>
    <p>a il</p>
    <p>ri c h a rd</p>
    <p>s</p>
    <p>d e lt</p>
    <p>a b lu</p>
    <p>e</p>
    <p>c ry</p>
    <p>p to</p>
    <p>ra y tr</p>
    <p>a c e</p>
    <p>e a rl</p>
    <p>e y</p>
    <p>re g e x p</p>
    <p>s p la</p>
    <p>y</p>
    <p>y tr</p>
    <p>a c e</p>
    <p>a c c e s s n b o d y</p>
    <p>b it</p>
    <p>o p s n s ie</p>
    <p>v e</p>
    <p>c o n tr</p>
    <p>o lf</p>
    <p>lo w</p>
    <p>c ry</p>
    <p>p to</p>
    <p>a e s</p>
    <p>d a te</p>
    <p>x p a rb</p>
    <p>m a th</p>
    <p>c o rd</p>
    <p>ic</p>
    <p>re g e x p d n a</p>
    <p>s tr</p>
    <p>in g ta</p>
    <p>g c lo</p>
    <p>u d</p>
    <p>B y te</p>
    <p>c o d e s /</p>
    <p>C a ll</p>
    <p>function(a,b) { var i=0,elem,pos=a.length; if(D.browser.msie) { while(elem=b[i++]) if(elem.nodeType!=8) a[pos++]=elem; } else while(elem=b[i++]) a[pos++]=elem; return a }</p>
    <p>Real Sites V8 SunSpider</p>
    <p>Code|Objects|Events</p>
  </div>
  <div class="page">
    <p>Fraction of Code Executed</p>
    <p>a m</p>
    <p>a z o n</p>
    <p>b in</p>
    <p>g</p>
    <p>b in</p>
    <p>g m</p>
    <p>a p</p>
    <p>c n n</p>
    <p>e b a y</p>
    <p>e c o n o m</p>
    <p>is t</p>
    <p>fa c e b o o k</p>
    <p>g m</p>
    <p>a il</p>
    <p>g o o g le</p>
    <p>g o o g le</p>
    <p>m a p</p>
    <p>h o tm</p>
    <p>a il</p>
    <p>ri c h a rd</p>
    <p>s d e lt</p>
    <p>a b lu</p>
    <p>e</p>
    <p>c ry</p>
    <p>p to</p>
    <p>ra y tr</p>
    <p>a c e</p>
    <p>e a rl</p>
    <p>e y</p>
    <p>re g e x p</p>
    <p>s p la</p>
    <p>y</p>
    <p>y tr</p>
    <p>a c e</p>
    <p>a c c e s s n b o d y</p>
    <p>b it</p>
    <p>o p s n s ie</p>
    <p>v e</p>
    <p>c o n tr</p>
    <p>o lf</p>
    <p>lo w</p>
    <p>c ry</p>
    <p>p to</p>
    <p>a e s</p>
    <p>d a te</p>
    <p>x p a rb</p>
    <p>m a th</p>
    <p>c o rd</p>
    <p>ic</p>
    <p>re g e x p d n a</p>
    <p>s tr</p>
    <p>in g ta</p>
    <p>g c lo</p>
    <p>u d</p>
    <p>F ra</p>
    <p>c ti</p>
    <p>o n o</p>
    <p>f C</p>
    <p>o d e E</p>
    <p>x e c u te</p>
    <p>d</p>
    <p>Most code</p>
    <p>not executed</p>
    <p>Real Sites V8 SunSpider</p>
    <p>Code|Objects|Events</p>
  </div>
  <div class="page">
    <p>Object Allocation Behavior</p>
    <p>Code</p>
    <p>Events</p>
    <p>JavaScript</p>
    <p>Objects</p>
    <p>Allocation by types</p>
    <p>Live heap composition</p>
    <p>Lifetime distribution</p>
  </div>
  <div class="page">
    <p>Total Bytes Allocated</p>
    <p>a m</p>
    <p>a z o n</p>
    <p>b in</p>
    <p>g</p>
    <p>b in</p>
    <p>g m</p>
    <p>a p</p>
    <p>c n n</p>
    <p>e b a y</p>
    <p>e c o n o m</p>
    <p>is t</p>
    <p>fa c e b o o k</p>
    <p>g m</p>
    <p>a il</p>
    <p>g o o g le</p>
    <p>g o o g le</p>
    <p>m a p</p>
    <p>h o tm</p>
    <p>a il</p>
    <p>ri c h a rd</p>
    <p>s</p>
    <p>d e lt</p>
    <p>a b lu</p>
    <p>e</p>
    <p>c ry</p>
    <p>p to</p>
    <p>ra y tr</p>
    <p>a c e</p>
    <p>e a rl</p>
    <p>e y</p>
    <p>re g e x p</p>
    <p>s p la</p>
    <p>y</p>
    <p>y tr</p>
    <p>a c e</p>
    <p>a c c e s s n b o d y</p>
    <p>b it</p>
    <p>o p s n s ie</p>
    <p>v e</p>
    <p>c o n tr</p>
    <p>o lf</p>
    <p>lo w</p>
    <p>c ry</p>
    <p>p to</p>
    <p>a e s</p>
    <p>d a te</p>
    <p>x p a rb</p>
    <p>m a th</p>
    <p>c o rd</p>
    <p>ic</p>
    <p>re g e x p d n a</p>
    <p>s tr</p>
    <p>in g ta</p>
    <p>g c lo</p>
    <p>u d</p>
    <p>T o ta</p>
    <p>l h e a p</p>
    <p>d a ta</p>
    <p>( k il o b y te</p>
    <p>s )</p>
    <p>Real Sites V8 SunSpider</p>
    <p>Code|Objects|Events</p>
  </div>
  <div class="page">
    <p>Heap Data by Type</p>
    <p>a m</p>
    <p>a zo</p>
    <p>n b</p>
    <p>in g</p>
    <p>b in</p>
    <p>g m</p>
    <p>a p</p>
    <p>cn n</p>
    <p>e b</p>
    <p>a y</p>
    <p>e co</p>
    <p>n o</p>
    <p>m is</p>
    <p>t fa</p>
    <p>ce b</p>
    <p>o o</p>
    <p>k g</p>
    <p>m a</p>
    <p>il g</p>
    <p>o o</p>
    <p>g le</p>
    <p>g o</p>
    <p>o g</p>
    <p>le m</p>
    <p>a p</p>
    <p>h o</p>
    <p>tm a</p>
    <p>il</p>
    <p>ri ch</p>
    <p>a rd</p>
    <p>s d</p>
    <p>e lt</p>
    <p>a b</p>
    <p>lu e</p>
    <p>cr y</p>
    <p>p to</p>
    <p>ra yt</p>
    <p>ra ce</p>
    <p>e a</p>
    <p>rl e</p>
    <p>y re</p>
    <p>g e</p>
    <p>xp sp</p>
    <p>la y</p>
    <p>V 8</p>
    <p>a g</p>
    <p>g ra</p>
    <p>g a</p>
    <p>te</p>
    <p>-r a</p>
    <p>yt ra</p>
    <p>ce a</p>
    <p>cc e</p>
    <p>ss -n</p>
    <p>b o</p>
    <p>d y</p>
    <p>b it</p>
    <p>o p</p>
    <p>sn</p>
    <p>si e</p>
    <p>v e</p>
    <p>co n</p>
    <p>tr o</p>
    <p>lf lo</p>
    <p>w cr</p>
    <p>y p</p>
    <p>to -a</p>
    <p>e s</p>
    <p>d a</p>
    <p>te -x</p>
    <p>p a</p>
    <p>rb m</p>
    <p>a th</p>
    <p>-c o</p>
    <p>rd ic</p>
    <p>re g</p>
    <p>e xp</p>
    <p>-d n</p>
    <p>a st</p>
    <p>ri n</p>
    <p>g -t</p>
    <p>a g</p>
    <p>cl o</p>
    <p>u d</p>
    <p>a g</p>
    <p>g re</p>
    <p>g a</p>
    <p>te</p>
    <p>H e</p>
    <p>a p</p>
    <p>D a</p>
    <p>ta b</p>
    <p>y T</p>
    <p>y p</p>
    <p>e</p>
    <p>Objects</p>
    <p>Enumarator</p>
    <p>RegExp</p>
    <p>Math</p>
    <p>Error</p>
    <p>Date</p>
    <p>Native Func</p>
    <p>String</p>
    <p>Arrays</p>
    <p>Script Func</p>
    <p>Real Sites V8 SunSpider</p>
    <p>Many functions</p>
    <p>Rest are strings</p>
    <p>Few benchmarks</p>
    <p>allocate much data</p>
    <p>Code|Objects|Events</p>
  </div>
  <div class="page">
    <p>Live Heap Over Time (gmail)</p>
    <p>Functions grow</p>
    <p>steadily</p>
    <p>Code|Objects|Events</p>
    <p>GC reduces</p>
    <p>size of heap</p>
    <p>Objects grow</p>
    <p>steadily too</p>
  </div>
  <div class="page">
    <p>Live Heap over Time (ebay)</p>
    <p>Heaps</p>
    <p>repeatedly</p>
    <p>created,</p>
    <p>discarded</p>
    <p>Heap contains</p>
    <p>mostly functions</p>
    <p>Code|Objects|Events</p>
    <p>Heap drops to 0</p>
    <p>on page load</p>
  </div>
  <div class="page">
    <p>Bing Google</p>
    <p>Code|Objects|Events</p>
    <p>You stay on the same page</p>
    <p>during your entire visit</p>
    <p>Code loaded once</p>
    <p>Heap is bigger</p>
    <p>Every transition loads a</p>
    <p>new page</p>
    <p>Code loaded repeatedly</p>
    <p>Heap is smaller</p>
  </div>
  <div class="page">
    <p>Event Handlers in JavaScript</p>
    <p>Code</p>
    <p>Events</p>
    <p>JavaScript</p>
    <p>Objects</p>
    <p>Number of events  Sizes of handlers</p>
  </div>
  <div class="page">
    <p>Event-driven Programming Model</p>
    <p>Single-threaded, non-preemptive event handlers</p>
    <p>Example handlers: onabort, onclick, etc.</p>
    <p>Very different from batch processing of benchmarks</p>
    <p>Handler responsiveness critical to user experience</p>
    <p>Code|Objects|Events</p>
  </div>
  <div class="page">
    <p>Total Events Handled</p>
    <p>o ta</p>
    <p>l E v e n ts</p>
    <p>H a n d le</p>
    <p>d</p>
    <p>Real Sites V8</p>
    <p>Almost no events</p>
    <p>Code|Objects|Events</p>
  </div>
  <div class="page">
    <p>Median Bytecodes / Event Handled</p>
    <p>e d ia</p>
    <p>n B</p>
    <p>y te</p>
    <p>c o d e s /</p>
    <p>E v e n t</p>
    <p>H a n d</p>
    <p>le d</p>
    <p>Code|Objects|Events</p>
  </div>
  <div class="page">
    <p>Sure, this is all good, but</p>
    <p>Everyone knows benchmarks are unrepresentative</p>
    <p>How much difference does it make, anyway?</p>
    <p>Wouldnt any benchmarks have similar issues?</p>
  </div>
  <div class="page">
    <p>Cold-code Experiment</p>
    <p>Observation</p>
    <p>Real web apps have lots of code (much of it cold)</p>
    <p>Benchmarks do not</p>
    <p>Question: What happens if the benchmarks have more code?</p>
    <p>We added extra, unused to code to 7 SunSpider benchmarks</p>
    <p>We measured the impact on the benchmark performance</p>
  </div>
  <div class="page">
    <p>Performance Impact of Cold Code</p>
    <p>T im</p>
    <p>e (</p>
    <p>m se</p>
    <p>c)</p>
    <p>T im</p>
    <p>e (</p>
    <p>m se</p>
    <p>c)</p>
    <p>Chrome</p>
    <p>IE 8</p>
    <p>non-uniform impact</p>
    <p>on execution time</p>
    <p>Cold code makes</p>
    <p>SunSpider on Chrome</p>
    <p>up to 4.5x slower</p>
  </div>
  <div class="page">
    <p>Impact of Benchmarks</p>
    <p>What gets emphasis</p>
    <p>Making tight loops fast</p>
    <p>Optimizing small amounts of code</p>
    <p>Important issues ignored</p>
    <p>Garbage collection (especially of strings)</p>
    <p>Managing large amounts of code</p>
    <p>Optimizing event handling</p>
    <p>Considering JavaScript context between page loads</p>
  </div>
  <div class="page">
    <p>Conclusions  JSMeter is an instrumentation framework</p>
    <p>Used to measure and compare JavaScript applications</p>
    <p>High-level views of behavior promote understanding</p>
    <p>Benchmarks differ significantly from real sites</p>
    <p>Misleads designers, skews implementations</p>
    <p>Next steps</p>
    <p>Develop and promote better benchmarks</p>
    <p>Design and evaluate better JavaScript runtimes</p>
    <p>Promote better performance tools for JavaScript developers</p>
  </div>
  <div class="page">
    <p>Additional Resources</p>
    <p>Project: http://research.microsoft.com/en-us/projects/jsmeter/</p>
    <p>Video: Project JSMeter: JavaScript Performance Analysis in the Real World&quot; - MSDN Channel 9 interview with Erik Meier, Ben Livshits, and Ben Zorn</p>
    <p>Paper:</p>
    <p>JSMeter: Comparing the Behavior of JavaScript Benchmarks with Real Web Applications, Paruj Ratanaworabhan, Benjamin Livshits and Benjamin G. Zorn, USENIX 2010 Conference on Web Application Development (WebApps10), June 2010.</p>
    <p>Additional measurements:  &quot;JSMeter: Characterizing Real-World Behavior of JavaScript Programs&quot;, Paruj</p>
    <p>Ratanaworabhan, Benjamin Livshits, David Simmons, and Benjamin Zorn, MSR-TR-2009-173, December 2009 (49 pages), November 2009.</p>
  </div>
  <div class="page">
    <p>Additional Slides</p>
  </div>
  <div class="page">
    <p>Hot Function Distribution</p>
    <p>Real Sites V8 Benchmarks</p>
    <p>Code|Objects|Events</p>
  </div>
  <div class="page">
    <p>Opcode Distribution</p>
    <p>Real Apps</p>
    <p>Outliers</p>
    <p>Code|Objects|Events</p>
  </div>
  <div class="page">
    <p>Object Type Distribution</p>
    <p>Real Apps</p>
    <p>Code|Objects|Events</p>
    <p>economist</p>
    <p>is an outlier</p>
    <p>(arrays)</p>
    <p>Green = SunSpider | Blue= Real Web Apps | Red = V8</p>
  </div>
  <div class="page">
    <p>Distribution of Time in Handlers</p>
    <p>Code|Objects|Events</p>
  </div>
  <div class="page">
    <p>Related Work  JavaScript</p>
    <p>Richards, Lebresne, Burg, and Vitek (PLDI10)</p>
    <p>Draw similar conclusions</p>
    <p>Java</p>
    <p>Doufour et al. (OOPSLA03), Dieckmann and U. Hlzle (ECOOP99)</p>
    <p>Other languages</p>
    <p>C++: Calder et al. (JPL95)</p>
    <p>Interpreted languages: Romer et al. (ASPLOS96)</p>
  </div>
</Presentation>
