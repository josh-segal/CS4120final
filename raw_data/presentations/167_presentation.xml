<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Making argument systems for outsourced computation practical</p>
    <p>(sometimes)</p>
    <p>Srinath Setty, Richard McPherson, Andrew J. Blumberg, and Michael Walfish</p>
    <p>The University of Texas at Austin</p>
  </div>
  <div class="page">
    <p>The motivation is 3rd party computing: cloud, volunteers, etc.</p>
    <p>We desire the following properties in the above exchange:</p>
    <p>f , x</p>
    <p>y, aux. client server</p>
    <p>check whether y = f(x), without computing f(x)</p>
    <p>By verified outsourced computation, we mean the following:</p>
  </div>
  <div class="page">
    <p>REJECT ACCEPT</p>
    <p>Unfortunately, the constants and proof length are outrageous.</p>
    <p>f , x y</p>
    <p>client server y</p>
    <p>...</p>
    <p>...</p>
    <p>Theory can supposedly help. Consider the theory of Probabilistically Checkable Proofs (PCPs). [ALMSS JACM98, AS JACM98]</p>
    <p>Using a naive PCP implementation, verifying multiplication of 400400 matrices would take 500 trillion CPU years (seriously).</p>
  </div>
  <div class="page">
    <p>For example, I can beat Michael Jordan in one-on-one basketball only one time out of 500 trillion.</p>
  </div>
  <div class="page">
    <p>REJECT</p>
    <p>Unfortunately, the constants and proof length are outrageous.</p>
    <p>f , x client server</p>
    <p>y</p>
    <p>...</p>
    <p>...</p>
    <p>Theory can supposedly help. Consider the theory of Probabilistically Checkable Proofs (PCPs). [ALMSS JACM98, AS JACM98]</p>
    <p>Using a naive PCP implementation, verifying multiplication of 400400 matrices would take 500 trillion CPU years (seriously).</p>
  </div>
  <div class="page">
    <p>We have reduced the costs of a PCP-based argument system by Ishai et al. [CCC07] by 20 orders of magnitude, with proof.</p>
    <p>We have implemented the refinements in a system, PEPPER, that is not ready for prime time but is practical in some cases.</p>
    <p>Our conclusion is that PCPs are a potentially promising tool for building secure systems.</p>
  </div>
  <div class="page">
    <p>(1) The design of PEPPER</p>
    <p>(2) Experimental results, limitations, and outlook</p>
  </div>
  <div class="page">
    <p>ACCEPT/ REJECT</p>
    <p>f , x client server</p>
    <p>y</p>
    <p>...</p>
    <p>...</p>
    <p>The proof is not drawn to scale: it is far too long to be transferred.</p>
    <p>Pepper incorporates PCPs but not like this:</p>
    <p>(Even the asymptotically short PCPs [BGHSV CCC05, BGHSV SIJC06, Dinur JACM07, BS SIJC08] have prohibitive constants.)</p>
  </div>
  <div class="page">
    <p>client server ...</p>
    <p>[IKO CCC07]</p>
    <p>...</p>
    <p>server client commit request</p>
    <p>commit response</p>
    <p>q1w q2 w q3w</p>
    <p>Pepper uses an efficient argument [Kilian CRYPTO 92,95]:</p>
    <p>Instead of transferring the PCP</p>
    <p>queries q1, q2, q3,</p>
    <p>PCPQuery(q){ return &lt;q,w&gt;; }</p>
    <p>ACCEPT/ REJECT</p>
  </div>
  <div class="page">
    <p>The servers vector w encodes an execution trace of f(x).</p>
    <p>w</p>
    <p>f ( )</p>
    <p>What is in w? (1) An entry for each wire; and (2) An entry for the product of each pair of wires.</p>
    <p>x</p>
    <p>x0</p>
    <p>x1</p>
    <p>xn</p>
    <p>A N D</p>
    <p>O R</p>
    <p>A N D</p>
    <p>y0</p>
    <p>y1</p>
    <p>N O T</p>
    <p>N O T 0</p>
  </div>
  <div class="page">
    <p>client server ...</p>
    <p>[IKO CCC07]</p>
    <p>This is still too costly (by a factor of 1022), but it is promising.</p>
    <p>...</p>
    <p>server</p>
    <p>Pepper uses an efficient argument [Kilian CRYPTO 92,95]:</p>
    <p>Instead of transferring the PCP</p>
    <p>PCPQuery(q){ return &lt;q,w&gt;; }</p>
    <p>client commit request</p>
    <p>queries</p>
    <p>ACCEPT/ REJECT</p>
    <p>q1w q2 w q3w</p>
    <p>q1, q2, q3,</p>
    <p>commit response</p>
  </div>
  <div class="page">
    <p>PEPPER incorporates four refinements to [IKO CCC07], with proof.</p>
    <p>f  y</p>
    <p>client server</p>
    <p>response scalars: q1w, q2w , q3w,</p>
    <p>w commit request</p>
    <p>commit response</p>
    <p>, x</p>
    <p>query vectors: q1, q2, q3,</p>
    <p>ACCEPT/ REJECT</p>
  </div>
  <div class="page">
    <p>Boolean circuit</p>
    <p>Arithmetic circuit</p>
    <p>Arithmetic circuit with concise gates</p>
    <p>This refinement works best for a restricted class of computations: straight-line, parallelizable, numerical.</p>
    <p>Consider m  m matrix multiplication as our computation f:</p>
    <p>+</p>
    <p>+</p>
    <p>+ ab  ab ab</p>
    <p>something gross</p>
    <p>w has O(m6) entries</p>
    <p>w has O(m4) entries</p>
    <p>w</p>
    <p>The Boolean circuit has O(m3) gates  The new representation has m2 gates</p>
  </div>
  <div class="page">
    <p>f  y</p>
    <p>client server</p>
    <p>w commit request</p>
    <p>commit response</p>
    <p>, x</p>
    <p>query vectors: q1, q2, q3,</p>
    <p>response scalars: q1w, q2w , q3w,</p>
    <p>ACCEPT/ REJECT</p>
  </div>
  <div class="page">
    <p>w</p>
    <p>server</p>
    <p>We can sometimes exploit the structure of a computation.</p>
    <p>This eliminates the servers PCP-based overhead, and may apply to PCPs more broadly.</p>
    <p>before: O(m4) entries after: m3 entries</p>
    <p>Consider m  m matrix multiplication as our computation f:</p>
  </div>
  <div class="page">
    <p>f  y</p>
    <p>client server</p>
    <p>w commit request</p>
    <p>commit response</p>
    <p>, x</p>
    <p>query vectors: q1, q2, q3,</p>
    <p>response scalars: q1w, q2w , q3w,</p>
    <p>ACCEPT/ REJECT</p>
  </div>
  <div class="page">
    <p>query vectors: q1, q2, q3,</p>
    <p>w1 w2 w3</p>
    <p>client server</p>
    <p>The client amortizes its overhead by reusing queries over multiple runs. Each run has the same f but different input x.</p>
  </div>
  <div class="page">
    <p>PEPPER generalizes the commitment primitive of Ishai et al. [CCC07].</p>
    <p>With the new primitive, the client can issue multiple queries for the price of encrypting only a single query.</p>
    <p>f , x y client</p>
    <p>server</p>
    <p>commit request</p>
    <p>commit response</p>
    <p>query vectors: q1, q2, q3,  w</p>
    <p>response scalars: q1w, q2w , q3w,</p>
    <p>ACCEPT/ REJECT</p>
  </div>
  <div class="page">
    <p>(1) The design of PEPPER</p>
    <p>(2) Experimental results, limitations, and outlook</p>
  </div>
  <div class="page">
    <p>Consider amortized costs for multiplication of 400400 matrices:</p>
    <p>Under the theory, naively applied Under PEPPER</p>
    <p>client CPU time &gt;100 trillion years 1.1 seconds</p>
    <p>server CPU time &gt;100 trillion years 1.6 hours</p>
    <p>(assumes 2.4 Ghz CPU)</p>
    <p>However, the batch size is large, so these numbers are not ideal.</p>
  </div>
  <div class="page">
    <p>PEPPER is not ready for prime time, for several reasons:</p>
  </div>
  <div class="page">
    <p>We relate PEPPER to prior work in terms of our three goals.</p>
    <p>Replication ([Castro &amp; Liskov TOCS02]), trusted hardware ([Chiesa &amp; Tromer ICS10, SSW TRUST10]), auditing ([DJMM ICDCS04, HKD SOSP07, Kissner &amp; Song ACNS04, MWR NDSS99])</p>
    <p>VLDB05, THHSY PET09, WRW INFOCOM11, Atallah &amp; Frikken ASIACCS10, Freivalds MFCS79]</p>
    <p>Toward practical Interactive Proofs [CMT ITCS12, GKR STOC08]</p>
    <p>Fully homomorphic encryption, secure multi-party computation [CKV CRYPTO10, GGP CRYPTO10, AIK ICALP10]</p>
  </div>
  <div class="page">
    <p>We have reduced the costs of a PCP-based argument system by Ishai et al. [CCC07] by 20 orders of magnitude, with proof.</p>
    <p>We have implemented the refinements in a system, PEPPER, that is not ready for prime time but is practical in some cases.</p>
    <p>Our conclusions are that PCPs are a potentially useful tool for real systems, and that the research area is promising.</p>
  </div>
</Presentation>
