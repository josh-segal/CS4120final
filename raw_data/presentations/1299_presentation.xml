<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Storing Trees on Disk Drives</p>
    <p>Medha Bhadkamkar, Fernando Farfan, Vagelis Hristidis, Raju</p>
    <p>Rangaswami FLORIDA INTERNATIONAL UNIVERSITY</p>
  </div>
  <div class="page">
    <p>Introduction</p>
    <p>Tree data are becoming commonplace:  Offer an intuitive, natural way for organizing information.</p>
    <p>Examples: XML, multi-res video, natural sciences data (e.g. Bioinformatics), even traditional directory-file hierarchies.</p>
    <p>Disk drives are ubiquitous and seem irreplaceable</p>
    <p>Current approaches:  Use relational databases</p>
    <p>Use flat files</p>
    <p>Our contributions  Examine the tree storage problem</p>
    <p>Propose native data layout strategies for tree data</p>
  </div>
  <div class="page">
    <p>Tree Structured Placement</p>
    <p>Idea: Optimize common accesses  Parent to child  Node to sibling</p>
    <p>Assumptions:  Each node occupies an entire disk block  Semi-sequential access information available</p>
  </div>
  <div class="page">
    <p>Optimized Tree-Structured Placement</p>
    <p>Problems with basic tree placement:  Significant fragmentation.</p>
    <p>Large random seeks</p>
    <p>Solution:  Use non-free tracks</p>
    <p>Use rotationally-optimal track-regions</p>
  </div>
  <div class="page">
    <p>Grouping</p>
    <p>Sequential  Add nodes to supernode until its capacity allows.</p>
    <p>Use depth-first traversal to get next node</p>
    <p>Low fragmentation</p>
    <p>Tree-preserving  Groups adjacent nodes</p>
    <p>Avoids cycles in original tree</p>
    <p>Preserves original tree structure in grouping</p>
    <p>Greater fragmentation</p>
  </div>
  <div class="page">
    <p>Grouping Examples</p>
    <p>Sequential Tree-preserving</p>
    <p>Assumption: Supernode can fit 5 nodes</p>
  </div>
  <div class="page">
    <p>Building Supernode Trees Sequential Supernode List</p>
    <p>Tree-Preserving Supernode Tree</p>
    <p>Sequential Supernode Tree</p>
    <p>Uses sequential grouping</p>
    <p>Nodes linked in the order they are created</p>
    <p>Uses tree-preserving grouping</p>
    <p>Edges according to original tree</p>
    <p>Uses sequential grouping</p>
    <p>Several possibilities for edge creation</p>
    <p>Avoid cycles</p>
  </div>
  <div class="page">
    <p>Performance Evaluation</p>
  </div>
  <div class="page">
    <p>Future Work</p>
    <p>Multiple drives</p>
    <p>Modeling more complex data and access patterns  Allows data and application directed layout  Requires detailed model for the disk-drive</p>
    <p>Storing graphs on disk drives  More generic than trees!  Can use directed and weighted  Can model several data-types and access patterns  Can model relational data as well!</p>
  </div>
</Presentation>
