<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>MIRAGE: Succinct Arguments for Randomized Algorithms with Applications to Universal zk-SNARKs</p>
    <p>Ahmed Kosba (Alexandria University)</p>
    <p>Dimitrios Papadopoulos (Hong Kong University of Science and Technology)</p>
    <p>Charalampos Papamanthou (University of Maryland)</p>
    <p>Dawn Song (UC Berkeley)</p>
    <p>USENIX Security 2020</p>
  </div>
  <div class="page">
    <p>Zero-Knowledge Proofs [GMR85]</p>
    <p>The zero knowledge proof  should be convincing without leaking any information about w.</p>
    <p>Input x</p>
    <p>Output y , ZK Proof</p>
    <p>Verifier</p>
    <p>Prover</p>
    <p>y = F(x, w)</p>
    <p>F</p>
    <p>w (known only to the prover)x</p>
  </div>
  <div class="page">
    <p>zk-SNARKs</p>
    <p>Zero knowledge succinct non-interactive arguments of knowledge  Main advantage: Very short proofs and fast verification</p>
    <p>In this talk, we consider QAP-based zk-SNARKs [GGPR13, PGHR13, Groth16], which provide succinct constant-size proofs.  This was attractive for many applications.</p>
    <p>PinocchioCoin [DFKP]</p>
    <p>ZeroCash [BCGGMTV]</p>
    <p>ALITHEIA [ZPK] VerDP [NFPH]</p>
    <p>Mining Puzzles [MKKS] Cinderella [DFKP]</p>
    <p>PhotoProof [NT]</p>
    <p>Hawk [KMSWP]</p>
    <p>Support for zk-SNARKs added for Ethereum</p>
  </div>
  <div class="page">
    <p>Challenges of zk-SNARKs in Practice</p>
    <p>Challenge 1: High proof computation cost  This led to several works on efficient circuit representations, SNARK-friendly</p>
    <p>cryptography, back end optimizations, distributed zk-SNARK proof computation, etc.</p>
    <p>Examples include: Pantry [BFR+13], libsnark [BCTV14a], Scalable SNARKs [BCTV14b], TrueSet [KPP+14], Buffet[WSH+15], Ad-SNARK [BBFR15], Geppetto [CFH+15], C0C0 [KZM+16], [FFG+16], xJsnark [KPS18], DIZK [WZC+18]</p>
    <p>Challenge 2: Trusted setup per computation  The prover and verifier need access to a common reference string that is</p>
    <p>generated in a trusted manner.</p>
    <p>If done insecurely, the prover can cheat.</p>
  </div>
  <div class="page">
    <p>ZK Proof Systems</p>
    <p>Trusted setup per computation</p>
    <p>[GGPR13], Pinocchio [PGHR13], [Groth16]  Succinct proofs (128 to 288 bytes)  Efficient verification</p>
    <p>No trusted setup</p>
    <p>Ligero [AHIV17], zk-STARKs [BBHR18], Bulletproofs [BBBPWM18], Hyrax [WTSTW18], Aurora [BCRSVW18], Virgo [ZXZS20], ..</p>
    <p>The proof size and/or the verification effort are increased.</p>
    <p>Universal trusted Setup</p>
    <p>Approach 1: Universal Circuits vnTinyRAM [BCTV14]</p>
    <p>Maintains succinct proofs and efficient verification</p>
    <p>However, it has quasilinear circuits.  Very high proof computation cost.</p>
    <p>Approach 2: Universal Updatable CRS [GKMMM18], Sonic [MBKM19] Concurrent: PLONK [GWC19], MARLIN [CHMMVW19]</p>
    <p>In Sonic (unhelped) mode, proof is 1.1 KB.  Concurrent work: 448 bytes  1 KB.</p>
    <p>A middle ground?</p>
  </div>
  <div class="page">
    <p>Our Contributions</p>
    <p>We address the previous two challenges via  Enabling randomized verification in zk-SNARK circuits.</p>
    <p>Making universal circuits more efficient.</p>
    <p>In comparison with other universal ZK proof systems,  Universal circuit is linear instead of vnTinyRAM's quasilinear circuit.</p>
    <p>Succinct proofs and efficient verification (Proof size = 160 bytes)</p>
    <p>Proof size is 7x less than Sonic (unhelped), and 2.8x less than concurrent work.</p>
    <p>Limitations:  CRS is not updatable</p>
    <p>Proof computation overhead is high in comparison with per-circuit preprocessing zkSNARKs</p>
  </div>
  <div class="page">
    <p>c5 = c3.c4 c6 = c5.(c1 + c2)  ..</p>
    <p>Constraints</p>
    <p>..</p>
    <p>int compute(int[] input, int[] witness){</p>
    <p>.</p>
    <p>.</p>
    <p>return result;</p>
    <p>}</p>
    <p>How to support randomized algorithms?</p>
    <p>QAP-based zk-SNARK Circuits</p>
    <p>+ x</p>
    <p>x</p>
    <p>c1 c2 c3 c4</p>
    <p>c5</p>
    <p>c6</p>
  </div>
  <div class="page">
    <p>Why Randomized Algorithms?</p>
    <p>Many problems can be solved more efficiently using randomized algorithms. Examples include:  Polynomial identity testing</p>
    <p>Primality testing</p>
    <p>In the case of universal zk-SNARK circuits, randomization can help with verifying permutations efficiently.</p>
  </div>
  <div class="page">
    <p>Randomized Verification in the Circuit</p>
    <p>Randomized Verification Circuit</p>
    <p>Yes/No</p>
    <p>RandomnessProblem Solution</p>
    <p>If we allow the prover to choose the randomness, or if the prover knows it before computing the solution, the prover can cheat.</p>
  </div>
  <div class="page">
    <p>Randomized Verification in the Circuit</p>
    <p>Nave solution:</p>
    <p>Random Oracle (Hash function)</p>
    <p>Problem Solution</p>
    <p>Randomized Verification Circuit</p>
    <p>Yes/No</p>
    <p>Modified circuit</p>
    <p>Randomness</p>
    <p>This solution will have a very high cost, due to calling the hash function in the circuit.</p>
    <p>Question: Can we support randomized verification without having to pay this cost?</p>
  </div>
  <div class="page">
    <p>Randomized Verification in the Circuit</p>
    <p>We modify the Groth16 zk-SNARK protocol to support randomization  The prover adds one group element to the zk-SNARK proof. (Total proof size:</p>
    <p>The verifier will do one extra pairing, and apply hash function calls on part of the zk-SNARK proof.</p>
    <p>Intuition (simplified):  In a zk-SNARK protocol, the prover computes group elements as functions of all wires in the</p>
    <p>circuit.</p>
    <p>These group elements can act as commitments.</p>
    <p>We force the prover to do the computation of the proof over two stages.</p>
    <p>We utilize the first part of the zk-SNARK proof to produce the randomness needed for the rest of the circuit.</p>
  </div>
  <div class="page">
    <p>How to make Universal Circuits more efficient?</p>
  </div>
  <div class="page">
    <p>Universal zk-SNARK Circuits</p>
    <p>Universal Circuit</p>
    <p>Program Description</p>
    <p>Assignment (Values of all variables)</p>
    <p>Valid?</p>
    <p>(id1, v1), (id2, v2), (id3, v3)</p>
    <p>(id4, v4), (id5, v5), (id6, v6)</p>
    <p>(id7, v7), (id8, v8), (id9, v9)</p>
    <p>(id10, v10), (id11, v11), (id12, v12)</p>
    <p>MUL</p>
    <p>MUL</p>
    <p>ADD</p>
    <p>ADD</p>
    <p>Example: A simple universal circuit that supports two multiplication operations and two addition operations.</p>
    <p>What is a universal circuit?</p>
  </div>
  <div class="page">
    <p>Universal zk-SNARK Circuits</p>
    <p>Example: assert (v1*v2 = v3)</p>
    <p>The circuit must</p>
    <p>Example: If (id1 = id8), assert (v1 = v8)</p>
    <p>To implement (2) efficiently, this requires checking permutations in the circuit.</p>
    <p>(id1, v1), (id2, v2), (id3, v3)</p>
    <p>(id4, v4), (id5, v5), (id6, v6)</p>
    <p>(id7, v7), (id8, v8), (id9, v9)</p>
    <p>(id10, v10), (id11, v11), (id12, v12)</p>
    <p>MUL</p>
    <p>MUL</p>
    <p>ADD</p>
    <p>ADD</p>
  </div>
  <div class="page">
    <p>Universal zk-SNARK Circuits</p>
    <p>To verify permutations, previous approaches, e.g., vnTinyRAM, use a permutation network. This has an O(n log n) overhead, where n is the number of operations.</p>
    <p>Using our modified zk-SNARK, we reduce this cost to O(n).</p>
    <p>We explore other issues related to universal circuit design in the paper.</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Comparison with custom zk-SNARK circuits and vnTinyRAM  We use vnTinyRAM results from [WSH+15]</p>
    <p>Scale of supported applications under nearly similar circuit costs:</p>
    <p>Universal circuit? Supported Scale</p>
    <p>Matrix multiplication O(m3) operations</p>
    <p>Buffet, xJsnark  m = 188</p>
    <p>vnTinyRAM  m = 7</p>
    <p>MIRAGE  m = 41</p>
    <p>Merge sort O(m log m) operations</p>
    <p>xJsnark  m = 600</p>
    <p>vnTinyRAM  m = 32</p>
    <p>MIRAGE  m = 200</p>
    <p>We reduce the gap between the universal circuit approaches and the custom circuits.</p>
  </div>
  <div class="page">
    <p>Evaluation  Privacy-preserving smart contracts.</p>
    <p>In HAWK [KMS+16], a trusted setup is needed per smart contract.</p>
    <p>Instead, MIRAGE's universal circuit can be used.  Cryptographic keys will be generated once in a trusted manner.</p>
    <p>For any new computation, a publicly verifiable custom verification key (32 bytes) will be pushed to the blockchain. (This does not require a trusted setup)</p>
    <p>Auction (6 parties)</p>
    <p>Universal Setup</p>
    <p>Universal PK</p>
    <p>Universal VK</p>
    <p>Custom PK</p>
    <p>Custom VK</p>
    <p>Proof time</p>
    <p>Proof size</p>
    <p>Verification time</p>
    <p>HAWK  N/A 57.8 MB 3.9 KB 10.3 sec 128 B 1.5 ms</p>
    <p>This work  1.8 GB 473 KB N/A 322 sec 160 B 2.1 ms</p>
    <p>Needs a trusted setup per app</p>
    <p>Cost of universality Succinct proof and minimal verification overhead</p>
  </div>
  <div class="page">
    <p>Conclusions and Future Directions</p>
    <p>We presented MIRAGE, which enables  Verification of randomized algorithms in zk-SNARK circuits</p>
    <p>Linear-sized universal circuits</p>
    <p>Future directions:  More optimization for universal circuits</p>
    <p>Explore scalability options</p>
    <p>Integrate randomization in zk-SNARK compilers (for non-universal circuits)</p>
  </div>
  <div class="page">
    <p>Thank you!</p>
    <p>ahmed.kosba@alexu.edu.eg</p>
  </div>
</Presentation>
