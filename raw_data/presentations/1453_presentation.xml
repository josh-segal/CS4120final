<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>AlpineAlpine: A User: A User--Level Level Infrastructure for Network Infrastructure for Network</p>
    <p>Protocol DevelopmentProtocol Development</p>
    <p>David Ely, Stefan Savage, and David Wetherall University of Washington</p>
  </div>
  <div class="page">
    <p>AlpineAlpine ProblemProblem</p>
    <p>I. Kernel Development is a Pain II. Network Protocols are in the Kernel</p>
    <p>Network Protocol Development is a Pain</p>
  </div>
  <div class="page">
    <p>AlpineAlpine SolutionSolution</p>
    <p>Alpine moves the networking stack into user-space for development  Changes are easily moved</p>
    <p>back to the kernel  Works for any transport</p>
    <p>protocol</p>
    <p>TCP/IP</p>
    <p>KERNEL</p>
    <p>TCP/IP</p>
    <p>LIBRARY</p>
  </div>
  <div class="page">
    <p>AlpineAlpine Previous ApproachesPrevious Approaches</p>
    <p>Many systems have moved the networking stack out of the kernel for development  Entrapid, OSKit, x-Kernel</p>
    <p>This has always come at a price  Modifications were required in either</p>
    <p>- the operating system - the applications using the stack - the networking stack</p>
    <p>Administrative barriers - a second IP address or network card - root access</p>
  </div>
  <div class="page">
    <p>AlpineAlpine Alpine's GoalAlpine's Goal</p>
    <p>Alpine runs a FreeBSD 3.3 stack in a userspace library  No modifications to  the operating system  the applications using the stack  the networking stack  No administrative barriers  uses the same IP address as the kernel  doesn't require root access</p>
  </div>
  <div class="page">
    <p>AlpineAlpine Traditional StackTraditional Stack</p>
    <p>System Calls</p>
    <p>Socket</p>
    <p>TCP/UDP</p>
    <p>IP</p>
    <p>Ethernet Driver</p>
    <p>Application</p>
    <p>Ethernet</p>
    <p>User Space</p>
    <p>Kernel Space</p>
    <p>Operating System</p>
  </div>
  <div class="page">
    <p>AlpineAlpine Alpine's StackAlpine's Stack</p>
    <p>Faux-Ethernet Driver  send/receive packets</p>
    <p>Pseudo-System Calls  interface between</p>
    <p>application &amp; sockets</p>
    <p>Support Functions  convince the stack it's</p>
    <p>in the kernel</p>
    <p>Ethernet</p>
    <p>Kernel Space</p>
    <p>Pseudo-System Calls</p>
    <p>Faux-Ethernet</p>
    <p>New Code S u p p o rt Fu</p>
    <p>n ctio</p>
    <p>n s</p>
    <p>Operating System</p>
    <p>Socket</p>
    <p>TCP/UDP</p>
    <p>IP</p>
    <p>Application Unmodified</p>
  </div>
  <div class="page">
    <p>AlpineAlpine PseudoPseudo--System CallsSystem Calls</p>
    <p>Overrides the socket API  send, receive, connect, bind, accept  read, write, close, select</p>
    <p>Alpine mirrors the kernel's file descriptor table  multiplex between different types of &quot;files&quot;</p>
    <p>Applications use Alpine's sockets by either  linking with libAlpine.a before libc.a  LD_PRELOAD=libAlpine.so</p>
  </div>
  <div class="page">
    <p>AlpineAlpine Support FunctionsSupport Functions</p>
    <p>Calls stack initialization code at startup  Kernel timer functions  timeout and tsleep/wakeup  Synchronization functions  splnet, splx, etc.  Memory allocation routines  kmem_malloc, zalloci, zfreei  copyin/copyout</p>
  </div>
  <div class="page">
    <p>AlpineAlpine FauxFaux--Ethernet ChallengesEthernet Challenges</p>
    <p>Sending packets from user-level  Receiving packets from user-level  Gracefully sharing state with the kernel</p>
  </div>
  <div class="page">
    <p>AlpineAlpine</p>
    <p>Open raw socket to bypass protocol stack</p>
    <p>IP is not modified because it already sends raw packets</p>
    <p>Sending PacketsSending Packets</p>
    <p>Message</p>
    <p>TCP HDR</p>
    <p>IP HDR</p>
    <p>Raw: send( )MessageNormal: send( )</p>
  </div>
  <div class="page">
    <p>AlpineAlpine Receiving PacketsReceiving Packets</p>
    <p>Problem: Alpine can't directly access the interface to receive packets  Solution: use packet capture library</p>
    <p>(libpcap) to get packets</p>
    <p>IP</p>
    <p>libpcap</p>
    <p>Ethernet Driver</p>
    <p>Ethernet</p>
    <p>tcpdump</p>
    <p>. . .copies of all packets are available to applications</p>
  </div>
  <div class="page">
    <p>AlpineAlpine Allocating PortsAllocating Ports</p>
    <p>Problem: Alpine and the kernel cannot allocate the same ports  Solution: bind a dummy socket to each</p>
    <p>port Alpine allocates  success  kernel will not reallocate the port  failure  kernel has already allocated port</p>
  </div>
  <div class="page">
    <p>AlpineAlpine Filtering the Kernel's PacketsFiltering the Kernel's Packets</p>
    <p>Problem: Alpine must not receive the kernels packets  Solution: only capture Alpine's packets  dynamically install a filter in libpcap to only</p>
    <p>capture Alpine's packets</p>
    <p>IP</p>
    <p>libpcap</p>
    <p>Ethernet Driver</p>
    <p>only buffer Alpine's packets</p>
    <p>Ethernet</p>
  </div>
  <div class="page">
    <p>AlpineAlpine Filtering Alpine's PacketsFiltering Alpine's Packets</p>
    <p>Problem: he kernel must not receive Alpines packets  Solution: install a software firewall to</p>
    <p>filter out Alpine's packets</p>
    <p>Firewall</p>
    <p>libpcap</p>
    <p>Ethernet Driver</p>
    <p>IP</p>
    <p>BPF program only buffers</p>
    <p>Alpine's packets</p>
    <p>discard Alpine's packets</p>
    <p>Ethernet</p>
  </div>
  <div class="page">
    <p>AlpineAlpine Privileged OperationsPrivileged Operations</p>
    <p>Problem: many operations are privileged</p>
    <p>Alpine</p>
    <p>telnet ftp</p>
    <p>Kernel's stack</p>
    <p>Alpine Send raw packets</p>
    <p>libpcap</p>
    <p>Firewall Update firewall</p>
    <p>Capture packets</p>
    <p>Privileged Operations</p>
  </div>
  <div class="page">
    <p>AlpineAlpine Central ProxyCentral Proxy</p>
    <p>Solution: central proxy running as root  central proxy performs access control  individual users don't need root access</p>
    <p>Kernel's stack Send raw packets</p>
    <p>Central Alpine Proxy</p>
    <p>libpcap</p>
    <p>Firewall Update firewall</p>
    <p>Capture packets</p>
    <p>Alpine Alpine telnet ftp</p>
  </div>
  <div class="page">
    <p>AlpineAlpine bind()bind()</p>
    <p>Application calls pseudo-system call bind()  Validate that the file descriptor is valid  Create &amp; bind a dummy socket to the port  ensures port is not in use  prevents kernel from allocating the port  Contact the central proxy  updates the libpcap filter  updates the firewall</p>
  </div>
  <div class="page">
    <p>AlpineAlpine FreeBSD ImplementationFreeBSD Implementation</p>
    <p>Alpine runs an unmodified FreeBSD 3.3 stack  No modifications to kernel, applications, or stack  3043 Non-commenting source statements  1188 Support functions + miscellaneous  785 Pseudo-system calls  285 Faux-Ethernet  786 Central proxy</p>
    <p>Experience: makes protocol development easier  no reboots, easier debugging  running client and server on same machine</p>
  </div>
  <div class="page">
    <p>AlpineAlpine Current LimitationsCurrent Limitations</p>
    <p>Alpine only runs on FreeBSD 3.X  porting to FreeBSD 4.X and Linux mainly</p>
    <p>requires sorting out header files  TCP and UDP  Maximum sockets used by Alpine ~100  limit of 512 instructions in BPF program  fork() is currently not supported  parent and child stacks interfere for shared</p>
    <p>open connections</p>
  </div>
  <div class="page">
    <p>AlpineAlpine Uses of AlpineUses of Alpine</p>
    <p>Easier development  Environment for class projects  Application specific protocol extensions  User level overlay networks</p>
  </div>
  <div class="page">
    <p>AlpineAlpine PerformancePerformance</p>
    <p>Alpine keeps up until 10 Mbit/s  too many copies</p>
    <p>Latency increases by 2ms</p>
    <p>300 MHz P-Pro, 100 Mbit/s Ethernet</p>
    <p>T h</p>
    <p>ro u</p>
    <p>g h</p>
    <p>p u</p>
    <p>t (M</p>
    <p>b it s/</p>
    <p>se c)</p>
    <p>Kernel Throughput</p>
    <p>Alpine Throughput</p>
  </div>
  <div class="page">
    <p>AlpineAlpine Demo of Alpine's UsefulnessDemo of Alpine's Usefulness</p>
    <p>We downloaded the same file using three different networking stacks  Alpine running a normal TCP receiver  Alpine running an accelerated TCP receiver  the kernel running an accelerated TCP receiver</p>
  </div>
  <div class="page">
    <p>AlpineAlpine Demo of Alpine's UsefulnessDemo of Alpine's Usefulness</p>
    <p>Seconds since starting experiment</p>
    <p>S e</p>
    <p>q u</p>
    <p>e n</p>
    <p>ce N</p>
    <p>u m</p>
    <p>b e</p>
    <p>r (b</p>
    <p>yt e</p>
    <p>s)</p>
    <p>Alpine Normal TCP Alpine Accelerated TCP</p>
    <p>Kernel Accelerated TCP</p>
  </div>
  <div class="page">
    <p>AlpineAlpine Current WorkCurrent Work</p>
    <p>Porting FreeBSD 3.3 version to Linux</p>
  </div>
  <div class="page">
    <p>AlpineAlpine Future WorkFuture Work</p>
    <p>Porting Alpine to FreeBSD 4.x and Linux  Support applications that fork</p>
    <p>New release in about a month</p>
  </div>
  <div class="page">
    <p>AlpineAlpine ConclusionConclusion</p>
    <p>Alpine is a tool that lowers the barrier of protocol development  Requires no modifications to  operating system  applications  networking stack  http://alpine.cs.washington.edu</p>
  </div>
</Presentation>
