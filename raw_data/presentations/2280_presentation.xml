<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>A file system for safely interacting with untrusted USB flash drives</p>
    <p>Ke Zhong, Zhihao Jiang, Ke Ma, and Sebastian Angel University of Pennsylvania Shanghai Jiao Tong University</p>
  </div>
  <div class="page">
    <p>Most Storage has moved to cloud!</p>
  </div>
  <div class="page">
    <p>USB flash drives remain popular</p>
    <p>u Legacy data</p>
    <p>u No network connections</p>
    <p>u Store confidential data  Bitcoin keys  Medical records  ID photos</p>
  </div>
  <div class="page">
    <p>USB stack has several issues</p>
    <p>u Trust-by-default design principle</p>
    <p>u Devices can bypass kernel and access memory (DMA)</p>
    <p>u Driver code tends to be buggy  There are many drivers by third party producers</p>
    <p>u Masquerade as other devices  A device could declare to be a keyboard</p>
  </div>
  <div class="page">
    <p>u Trust-by-default design principle</p>
    <p>u Devices can bypass kernel and access memory (DMA)</p>
    <p>u Driver code tends to be buggy  There are many drivers by third party producers</p>
    <p>u Masquerade as other devices  A device could declare to be a keyboard</p>
    <p>USB stack has several issues</p>
    <p>Could be exploited by a malicious flash drive</p>
  </div>
  <div class="page">
    <p>u Trust-by-default design principle</p>
    <p>u Devices can bypass kernel and access memory (DMA)</p>
    <p>u Driver code tends to be buggy  There are many drivers by third party producers</p>
    <p>u Masquerade as other devices  A device could declare to be a keyboard</p>
    <p>USB stack has several issues</p>
  </div>
  <div class="page">
    <p>Previous work</p>
    <p>u Packet filtering  Cinch: Security16  USBFilter: Security16</p>
    <p>u Device authentication  ProvUSB: CCS16</p>
    <p>u Sandbox the device  GoodUSB: ACSAS15</p>
  </div>
  <div class="page">
    <p>Limitation</p>
    <p>u Packet filtering  Malicious payload that changes dynamically avoids rule-based detection</p>
    <p>u Device authentication  Require new hardware/kernel modifications</p>
    <p>u Sandbox the device  False negative (i.e., a device is malicious but sandbox says it's ok)</p>
  </div>
  <div class="page">
    <p>We propose RBFuse, which is a file system that accesses flash drives without interacting</p>
    <p>with the USB stack on the host machine</p>
  </div>
  <div class="page">
    <p>Key idea</p>
    <p>RBFuse remaps memory space of host controller to a virtual machine,</p>
    <p>and exports file system of flash drives as a mountable virtual file system</p>
  </div>
  <div class="page">
    <p>System overview</p>
    <p>IOMMU</p>
  </div>
  <div class="page">
    <p>System overview</p>
    <p>IOMMU</p>
    <p>VFS Server</p>
    <p>Virtual machine</p>
  </div>
  <div class="page">
    <p>System overview</p>
    <p>IOMMU</p>
    <p>VFS Server</p>
    <p>Virtual machine</p>
    <p>VFS Client</p>
    <p>USB Directory</p>
  </div>
  <div class="page">
    <p>System overview</p>
    <p>IOMMU</p>
    <p>VFS Server</p>
    <p>Virtual machine</p>
    <p>VFS Client</p>
    <p>USB Directory</p>
    <p>User space daemon</p>
  </div>
  <div class="page">
    <p>System overview</p>
    <p>IOMMU</p>
    <p>VFS Server</p>
    <p>Virtual machine</p>
    <p>VFS Client</p>
    <p>USB Directory</p>
    <p>User space daemon</p>
    <p>Fuse kernel driver</p>
  </div>
  <div class="page">
    <p>How RBFuse runs</p>
    <p>IOMMU</p>
    <p>VFS Server</p>
    <p>Virtual machine</p>
    <p>VFS Client</p>
    <p>USB Directory</p>
    <p>Create a file foo!</p>
  </div>
  <div class="page">
    <p>How RBFuse runs</p>
    <p>IOMMU</p>
    <p>VFS Server</p>
    <p>Virtual machine</p>
    <p>VFS Client</p>
    <p>USB Directory</p>
    <p>Create a file foo!</p>
    <p>getattr</p>
  </div>
  <div class="page">
    <p>How RBFuse runs</p>
    <p>IOMMU</p>
    <p>VFS Server</p>
    <p>Virtual machine</p>
    <p>VFS Client</p>
    <p>USB Directory</p>
    <p>Create a file foo!</p>
    <p>getattr</p>
    <p>Execute  getattr</p>
  </div>
  <div class="page">
    <p>How RBFuse runs</p>
    <p>IOMMU</p>
    <p>VFS Server</p>
    <p>Virtual machine</p>
    <p>VFS Client</p>
    <p>USB Directory</p>
    <p>Create a file foo!</p>
    <p>No such file No such file</p>
  </div>
  <div class="page">
    <p>How RBFuse runs</p>
    <p>IOMMU</p>
    <p>VFS Server</p>
    <p>Virtual machine</p>
    <p>VFS Client</p>
    <p>USB Directory</p>
    <p>Create a file foo!</p>
    <p>getattr  mknod</p>
    <p>Execute  getattr</p>
  </div>
  <div class="page">
    <p>How RBFuse runs</p>
    <p>IOMMU</p>
    <p>VFS Server</p>
    <p>Virtual machine</p>
    <p>VFS Client</p>
    <p>USB Directory</p>
    <p>Create a file foo!</p>
    <p>getattr  mknod</p>
    <p>Execute  getattr  mknod</p>
  </div>
  <div class="page">
    <p>How RBFuse runs</p>
    <p>IOMMU</p>
    <p>VFS Server</p>
    <p>Virtual machine</p>
    <p>VFS Client</p>
    <p>USB Directory</p>
    <p>Create a file foo!</p>
    <p>Succeed!</p>
    <p>Succeed!</p>
  </div>
  <div class="page">
    <p>How RBFuse runs</p>
    <p>IOMMU</p>
    <p>VFS Server</p>
    <p>Virtual machine</p>
    <p>VFS Client</p>
    <p>USB Directory</p>
    <p>Create a file foo!</p>
    <p>getattr  mknod  getattrExecute</p>
    <p>getattr  mknod</p>
  </div>
  <div class="page">
    <p>How RBFuse runs</p>
    <p>IOMMU</p>
    <p>VFS Server</p>
    <p>Virtual machine</p>
    <p>VFS Client</p>
    <p>USB Directory</p>
    <p>Create a file foo!</p>
    <p>getattr  mknod  getattrExecute</p>
    <p>getattr  mknod  getattr</p>
  </div>
  <div class="page">
    <p>How RBFuse runs</p>
    <p>IOMMU</p>
    <p>VFS Server</p>
    <p>Virtual machine</p>
    <p>VFS Client</p>
    <p>USB Directory</p>
    <p>Create a file foo!</p>
    <p>foo exists!</p>
    <p>foo exists!</p>
  </div>
  <div class="page">
    <p>How RBFuse runs</p>
    <p>IOMMU</p>
    <p>VFS Server</p>
    <p>Virtual machine</p>
    <p>VFS Client</p>
    <p>USB Directory</p>
    <p>Create a file foo!</p>
    <p>Done!</p>
    <p>Execute  getattr  mknod  getattr</p>
    <p>getattr  mknod  getattr</p>
  </div>
  <div class="page">
    <p>Performance issues</p>
    <p>IOMMU</p>
    <p>VFS Server</p>
    <p>Virtual machine</p>
    <p>VFS Client</p>
    <p>USB Directory</p>
    <p>Create a file foo!</p>
    <p>Execute  getattr  mknod  getattr</p>
    <p>getattr  mknod  getattr</p>
  </div>
  <div class="page">
    <p>Performance issues</p>
    <p>IOMMU</p>
    <p>VFS Server</p>
    <p>Virtual machine</p>
    <p>VFS Client</p>
    <p>USB Directory</p>
    <p>Create a file foo!</p>
    <p>Execute  getattr  mknod  getattr</p>
    <p>getattr  mknod  getattr</p>
    <p>Too many requests for accessing metadata 3,000 getattr calls are issued when reading 1,000 files</p>
  </div>
  <div class="page">
    <p>Performance issues</p>
    <p>IOMMU</p>
    <p>VFS Server</p>
    <p>Virtual machine</p>
    <p>VFS Client</p>
    <p>USB Directory</p>
    <p>Write 1024KB to foo!</p>
    <p>Execute write 128KB write 128KB</p>
    <p>write 128KB</p>
    <p>write 128KB write 128KB</p>
    <p>write 128KB</p>
    <p>Write requests are split into smaller chunks</p>
  </div>
  <div class="page">
    <p>Performance issues</p>
    <p>IOMMU</p>
    <p>VFS Server</p>
    <p>Virtual machine</p>
    <p>VFS Client</p>
    <p>USB Directory</p>
    <p>Read 1024KB from foo!</p>
    <p>Execute read 128KB read 128KB</p>
    <p>read 128KB</p>
    <p>read 128KB read 128KB</p>
    <p>read 128KB</p>
    <p>Read requests are split into smaller chunks</p>
  </div>
  <div class="page">
    <p>Compromised virtual machine</p>
    <p>IOMMU</p>
    <p>VFS Server</p>
    <p>Virtual machine</p>
    <p>VFS Client</p>
    <p>USB Directory</p>
    <p>Malicious</p>
  </div>
  <div class="page">
    <p>Compromised virtual machine</p>
    <p>IOMMU</p>
    <p>VFS Server</p>
    <p>Virtual machine</p>
    <p>VFS Client</p>
    <p>USB Directory</p>
    <p>Compromised</p>
    <p>Malicious</p>
  </div>
  <div class="page">
    <p>Compromised virtual machine</p>
    <p>IOMMU</p>
    <p>VFS Server</p>
    <p>Virtual machine</p>
    <p>VFS Client</p>
    <p>USB Directory</p>
    <p>Confidential data might be stolen Files transferred might be tampered Issue malformed file system responses</p>
    <p>Compromised</p>
    <p>Malicious</p>
  </div>
  <div class="page">
    <p>Parsing errors</p>
    <p>IOMMU</p>
    <p>VFS Server</p>
    <p>Virtual machine</p>
    <p>VFS Client</p>
    <p>USB Directory</p>
    <p>Requests</p>
    <p>Serialize requests</p>
    <p>Parse responses</p>
  </div>
  <div class="page">
    <p>Parsing errors</p>
    <p>IOMMU</p>
    <p>VFS Server</p>
    <p>Virtual machine</p>
    <p>VFS Client</p>
    <p>USB Directory</p>
    <p>Requests</p>
    <p>Serialize requests</p>
    <p>Parse responses</p>
    <p>Parsers, if not designed correctly, can be easily compromised to exploit memory errors and integer overflow.</p>
  </div>
  <div class="page">
    <p>Agenda</p>
    <p>u How to address those challenges  Optimizations  Encrypted communication  Formally verified serializer and parser</p>
    <p>u Preliminary evaluation</p>
    <p>u Discussion &amp; Conclusion</p>
  </div>
  <div class="page">
    <p>Agenda</p>
    <p>u How to address those challenges  Optimizations  Encrypted communication  Formally verified serializer and parser</p>
    <p>u Preliminary evaluation</p>
    <p>u Discussion &amp; Conclusion</p>
  </div>
  <div class="page">
    <p>Caching metadata</p>
    <p>IOMMU</p>
    <p>VFS Server</p>
    <p>Virtual machine</p>
    <p>VFS Client</p>
    <p>USB Directory</p>
    <p>Create a file foo!</p>
    <p>Execute  getattr  mknod  getattr</p>
    <p>getattr  mknod  getattr</p>
  </div>
  <div class="page">
    <p>Caching metadata</p>
    <p>IOMMU</p>
    <p>VFS Server</p>
    <p>Virtual machine</p>
    <p>VFS Client</p>
    <p>USB Directory</p>
    <p>Create a file foo!</p>
    <p>Execute  getattr  mknod  getattr</p>
    <p>getattr  mknod  getattr</p>
    <p>u Cache during initialization  RBFuse fetches and caches the metadata of all files</p>
    <p>and directories during initialization</p>
    <p>getattr could be done locally at the VFS Client</p>
  </div>
  <div class="page">
    <p>Caching metadata</p>
    <p>IOMMU</p>
    <p>VFS Server</p>
    <p>Virtual machine</p>
    <p>VFS Client</p>
    <p>USB Directory</p>
    <p>Create a file foo!</p>
    <p>Execute  getattr  mknod  getattr</p>
    <p>getattr  mknod  getattr</p>
    <p>u Cache during initialization  RBFuse fetches and caches the metadata of all files</p>
    <p>and directories during initialization u Update metadata accordingly</p>
    <p>Mknod, write, etc.</p>
  </div>
  <div class="page">
    <p>Prefetching</p>
    <p>IOMMU</p>
    <p>VFS Server</p>
    <p>Virtual machine</p>
    <p>VFS Client</p>
    <p>USB Directory</p>
    <p>Read 1024KB from foo!</p>
    <p>Execute read 128KB read 128KB</p>
    <p>read 128KB</p>
    <p>read 128KB read 128KB</p>
    <p>read 128KB</p>
  </div>
  <div class="page">
    <p>Prefetching</p>
    <p>IOMMU</p>
    <p>VFS Server</p>
    <p>Virtual machine</p>
    <p>VFS Client</p>
    <p>USB Directory</p>
    <p>Read 1024KB from foo!</p>
    <p>Execute read 128KB + 896KB</p>
    <p>read 128KB read 128KB</p>
    <p>read 128KB</p>
    <p>Read subsequent chunks for large file</p>
  </div>
  <div class="page">
    <p>Prefetching</p>
    <p>IOMMU</p>
    <p>VFS Server</p>
    <p>Virtual machine</p>
    <p>VFS Client</p>
    <p>USB Directory</p>
    <p>Read all files in dir</p>
    <p>Execute read f1 read f2</p>
    <p>read f8</p>
    <p>read f1 read f2</p>
    <p>read f8</p>
  </div>
  <div class="page">
    <p>Prefetching</p>
    <p>IOMMU</p>
    <p>VFS Server</p>
    <p>Virtual machine</p>
    <p>VFS Client</p>
    <p>USB Directory</p>
    <p>Read all files in dir</p>
    <p>Execute read f1 + f2 ~ f8</p>
    <p>read f1 read f2</p>
    <p>read f8</p>
    <p>Read other small files in the same directory</p>
  </div>
  <div class="page">
    <p>Batching operations</p>
    <p>IOMMU</p>
    <p>VFS Server</p>
    <p>Virtual machine</p>
    <p>VFS Client</p>
    <p>USB Directory</p>
    <p>Write 1024KB to foo!</p>
    <p>Execute write 128KB write 128KB</p>
    <p>write 128KB</p>
    <p>write 128KB write 128KB</p>
    <p>write 128KB</p>
  </div>
  <div class="page">
    <p>Batching operations</p>
    <p>IOMMU</p>
    <p>VFS Server</p>
    <p>Virtual machine</p>
    <p>VFS Client</p>
    <p>USB Directory</p>
    <p>Write 1024KB to foo!</p>
    <p>Execute write 128KB</p>
    <p>+ write 128KB +  + write 128KB</p>
    <p>write 128KB + write 128KB +  + write 128KB</p>
    <p>u Multiple write are combined into one</p>
  </div>
  <div class="page">
    <p>Batching operations</p>
    <p>IOMMU</p>
    <p>VFS Server</p>
    <p>Virtual machine</p>
    <p>VFS Client</p>
    <p>USB Directory</p>
    <p>Write 1024KB to foo!</p>
    <p>Execute write 128KB</p>
    <p>+ write 128KB +  + write 128KB</p>
    <p>write 128KB + write 128KB +  + write 128KB</p>
    <p>u Multiple write are combined into one u Other requests related to write can also be merged</p>
    <p>getattr, mknod, getattr, open, write, close u Speculatively respond to requests first</p>
    <p>By monitoring remaining size of flash drives, if size permitted, then responds succeed</p>
  </div>
  <div class="page">
    <p>Agenda</p>
    <p>u How to address those challenges  Optimizations  Encrypted communication  Formally verified serializer and parser</p>
    <p>u Preliminary evaluation</p>
    <p>u Conclusion &amp; Discussion</p>
  </div>
  <div class="page">
    <p>Encrypted communication</p>
    <p>IOMMU</p>
    <p>VFS Server</p>
    <p>Virtual machine</p>
    <p>VFS Client</p>
    <p>USB Directory</p>
    <p>Adapter Optional hardware adapter can be used</p>
    <p>which could encrypt all read/write contents</p>
    <p>Malicious</p>
  </div>
  <div class="page">
    <p>Encrypted communication</p>
    <p>IOMMU</p>
    <p>VFS Server</p>
    <p>Virtual machine</p>
    <p>VFS Client</p>
    <p>USB Directory</p>
    <p>Adapter Optional hardware adapter can be used</p>
    <p>which could encrypt all read/write contents Only two endpoints would see unencrypted contents</p>
    <p>Endpoint 1</p>
    <p>Endpoint 2</p>
    <p>Malicious</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Agenda</p>
    <p>u How to address those challenges  Optimizations  Encrypted communication  Formally verified serializer and parser</p>
    <p>u Preliminary evaluation</p>
    <p>u Conclusion &amp; Discussion</p>
  </div>
  <div class="page">
    <p>Formally verified serializer and parser</p>
    <p>IOMMU</p>
    <p>VFS Server</p>
    <p>Virtual machine</p>
    <p>VFS Client</p>
    <p>USB Directory</p>
    <p>Requests</p>
    <p>Serialize requests</p>
    <p>Parse responses</p>
    <p>Our parser and serializer are based on EverParse(Security19), which has been formally verified. This avoid vulnerabilities, such as memory errors.</p>
  </div>
  <div class="page">
    <p>Agenda</p>
    <p>u How to address those challenges  Optimizations  Encrypted communication  Formally verified serializer and parser</p>
    <p>u Preliminary evaluation</p>
    <p>u Discussion &amp; Conclusion</p>
  </div>
  <div class="page">
    <p>Experiment setup</p>
    <p>u For virtual machine we run Ubuntu 16.04 (Linux 4.15.0-45) on QEMU. Host machine is also Ubuntu 16.04 with KVM.</p>
    <p>u Adapter for authentication and data encryption is built on a BeagleBone Black which runs Debian 9.1 (Linux 4.4.88-ti-r125).</p>
    <p>u We used filebench to run our experiments.</p>
    <p>u Our baseline is flash drive connected to the host without any of our mechanisms.</p>
  </div>
  <div class="page">
    <p>One large file (500MB)</p>
    <p>Write Read</p>
    <p>C om</p>
    <p>pl et</p>
    <p>io n</p>
    <p>Ti m</p>
    <p>e (s</p>
    <p>)</p>
    <p>Host Adapter RBFuse</p>
    <p>RBFuse+Adapter</p>
    <p>Takeaway:  RBFuse itself brings little overhead</p>
  </div>
  <div class="page">
    <p>One large file (500MB)</p>
    <p>Write Read</p>
    <p>C om</p>
    <p>pl et</p>
    <p>io n</p>
    <p>Ti m</p>
    <p>e (s</p>
    <p>)</p>
    <p>Host Adapter RBFuse</p>
    <p>RBFuse+Adapter</p>
    <p>Takeaway:  RBFuse itself brings little overhead  RBFuse + adapter brings about 3x-10x overhead, due to the bad performance of adapter and increased roundtrips between flash drive and host</p>
  </div>
  <div class="page">
    <p>Takeaway:  RBFuse itself brings 2x-4x overhead</p>
    <p>Write Read</p>
    <p>C om</p>
    <p>pl et</p>
    <p>io n</p>
    <p>Ti m</p>
    <p>e (s</p>
    <p>)</p>
    <p>Host Adapter RBFuse</p>
    <p>RBFuse+Adapter</p>
  </div>
  <div class="page">
    <p>Takeaway:  RBFuse itself brings 2x-4x overhead  For write, RBFuse + adapter outperforms directly accessing due to better performance of adapter on this task</p>
    <p>Write Read</p>
    <p>C om</p>
    <p>pl et</p>
    <p>io n</p>
    <p>Ti m</p>
    <p>e (s</p>
    <p>)</p>
    <p>Host Adapter RBFuse</p>
    <p>RBFuse+Adapter</p>
  </div>
  <div class="page">
    <p>Takeaway:  RBFuse itself brings 2x-4x overhead  For write, RBFuse + adapter outperforms directly accessing due to better performance of adapter on this task</p>
    <p>Write Read</p>
    <p>C om</p>
    <p>pl et</p>
    <p>io n</p>
    <p>Ti m</p>
    <p>e (s</p>
    <p>)</p>
    <p>Host Adapter RBFuse</p>
    <p>RBFuse+Adapter</p>
    <p>Note: adapter could be viewed as another machine with Debian</p>
  </div>
  <div class="page">
    <p>Takeaway:  RBFuse itself brings 2x-4x overhead  For write, RBFuse + adapter outperforms directly accessing due to better performance of adapter on this task  For read, RBFuse + adapter brings 8.8x overhead, due to that adapter itself would bring about 2x overhead 0</p>
    <p>Write Read</p>
    <p>C om</p>
    <p>pl et</p>
    <p>io n</p>
    <p>Ti m</p>
    <p>e (s</p>
    <p>)</p>
    <p>Host Adapter RBFuse</p>
    <p>RBFuse+Adapter</p>
    <p>Note: adapter could be viewed as another machine with Debian</p>
  </div>
  <div class="page">
    <p>Agenda</p>
    <p>u How to address those challenges  Optimizations  Encrypted communication  Formally verified serializer and parser</p>
    <p>u Preliminary evaluation</p>
    <p>u Discussion &amp; Conclusion</p>
  </div>
  <div class="page">
    <p>Crash consistency test</p>
    <p>u We modified and ran crashmonkey (OSDI18) on RBFuse  ext4  vfat</p>
  </div>
  <div class="page">
    <p>Crash consistency test</p>
    <p>u We modified and ran crashmonkey (OSDI18) on RBFuse  ext4  vfat</p>
    <p>open foo O_RDWR|O_CREAT 0777 fsync foo checkpoint 1 close foo</p>
  </div>
  <div class="page">
    <p>Crash consistency test</p>
    <p>u We modified and ran crashmonkey (OSDI18) on RBFuse  ext4  vfat</p>
    <p>open foo O_RDWR|O_CREAT 0777 fsync foo checkpoint 1 close foo</p>
    <p>vfat and RBFuse on vfat would fail!</p>
  </div>
  <div class="page">
    <p>Crash consistency test</p>
    <p>u We modified and ran crashmonkey (OSDI18) on RBFuse  ext4  vfat</p>
    <p>open foo O_RDWR|O_CREAT 0777 fsync foo checkpoint 1 close foo</p>
    <p>vfat and RBFuse on vfat would fail!</p>
    <p>Hydra (SOSP19): Parent directory of foo need to be sync</p>
  </div>
  <div class="page">
    <p>Previous file system fuzzing</p>
    <p>File system User(Client)</p>
    <p>u Janus (S&amp;P19): two-dimensional input fuzzing</p>
  </div>
  <div class="page">
    <p>Previous file system fuzzing</p>
    <p>File system User(Client)</p>
    <p>u Janus (S&amp;P19): two-dimensional input fuzzing</p>
    <p>Image fuzzing</p>
  </div>
  <div class="page">
    <p>Previous file system fuzzing</p>
    <p>File system User(Client)</p>
    <p>u Janus (S&amp;P19): two-dimensional input fuzzing</p>
    <p>Image fuzzing Client program fuzzing</p>
  </div>
  <div class="page">
    <p>Server side fuzzing</p>
    <p>File system Server</p>
    <p>(flash drive) User(Client)</p>
    <p>u We assume the (file system) server is malicious</p>
  </div>
  <div class="page">
    <p>Server side fuzzing</p>
    <p>File system Server</p>
    <p>(flash drive) User(Client)</p>
    <p>u We assume the (file system) server is malicious</p>
    <p>Malicious messages fuzzing</p>
  </div>
  <div class="page">
    <p>Formal verification</p>
    <p>u VFS interface is small, has better-defined semantics than USB</p>
    <p>u Formal verification on our system  Getting the virtual file system interface right</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>u We propose RBFuse, which is a file system that accesses flash drives without interacting with the USB stack on the host machine with reasonable overhead</p>
    <p>u Discussion  Crash consistency test for RBFuse  Server side fuzzing  Formal verification</p>
  </div>
  <div class="page">
    <p>Thank you! Any questions or suggestions?</p>
    <p>u We propose RBFuse, which is a file system that accesses flash drives without interacting with the USB stack on the host machine with reasonable overhead</p>
    <p>u Discussion  Crash consistency test for RBFuse  Server side fuzzing  Formal verification</p>
  </div>
</Presentation>
