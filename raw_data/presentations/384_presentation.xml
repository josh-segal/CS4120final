<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Fault-Tolerance in the Borealis Distributed Stream Processing System</p>
    <p>Magdalena Balazinska, Hari Balakrishnan,</p>
    <p>Samuel Madden, and Michael Stonebraker MIT computer science &amp; Artificial Intelligence Lab.</p>
    <p>Presenter: Youngki Lee</p>
  </div>
  <div class="page">
    <p>KAIST</p>
    <p>Contents</p>
    <p>One-line comments</p>
    <p>Motivation scenario</p>
    <p>Technical challenges</p>
    <p>Fault-Tolerance Approach</p>
    <p>Experimental Results</p>
    <p>Critics</p>
    <p>New ideas</p>
  </div>
  <div class="page">
    <p>KAIST</p>
    <p>One line comment</p>
    <p>The paper present a replication-based approach to fault-tolerant distributed stream processing in the face of node failures, network failures, and network partitions.</p>
  </div>
  <div class="page">
    <p>KAIST</p>
    <p>Motivation scenario</p>
    <p>SPE</p>
    <p>SPE</p>
    <p>SPE</p>
    <p>FAILURE</p>
    <p>X: 3 seconds</p>
    <p>SPE</p>
    <p>X: 60 seconds</p>
    <p>X: 1 second</p>
    <p>Downstream neighbors want 1. new tuples to be processed within time threshold X 2. to get eventual correct result</p>
    <p>X: 3 seconds</p>
    <p>Upstream neighbor</p>
    <p>Downstream neighbor</p>
  </div>
  <div class="page">
    <p>KAIST</p>
    <p>Technical challenges</p>
    <p>Provide user-defined availability</p>
    <p>Keep consistency among replicas</p>
    <p>Provide eventual correct result</p>
  </div>
  <div class="page">
    <p>KAIST</p>
    <p>Fault-Tolerance Approach</p>
    <p>If an input stream fails, find another replica</p>
    <p>No replica available, produce tentative tuples</p>
    <p>Correct tentative results after failures</p>
    <p>STABLE UPSTREAM</p>
    <p>FAILURE</p>
    <p>STABILIZING</p>
    <p>Missing or tentative inputs</p>
    <p>Fa ilu</p>
    <p>re h</p>
    <p>ea ls</p>
    <p>An ot</p>
    <p>he r u</p>
    <p>ps tre</p>
    <p>am</p>
    <p>fa ilu</p>
    <p>re in</p>
    <p>p ro</p>
    <p>gr es</p>
    <p>s R econcile state</p>
    <p>C orrected output</p>
  </div>
  <div class="page">
    <p>KAIST</p>
    <p>Fault-Tolerance Approach : STABLE</p>
    <p>Only need to keep consistency among replicas  Deterministic operators  SUNION</p>
    <p>s1 s2</p>
    <p>Node 1</p>
    <p>SUNION</p>
    <p>TCP connection</p>
    <p>Node 1</p>
    <p>SUNION</p>
    <p>s3</p>
  </div>
  <div class="page">
    <p>KAIST</p>
    <p>Fault-Tolerance Approach : UPSTREAM FAILIRE  If an upstream neighbor is no longer in the</p>
    <p>STABLE state or is unreachable  Switch to another STABLE replica</p>
    <p>If no STABLE replica exists, it continues with d ata from a replica in the UP_FAILURE state  Delay new tuples as much as possible(X-P) and proc</p>
    <p>ess</p>
    <p>Or just process without any delay</p>
  </div>
  <div class="page">
    <p>KAIST</p>
    <p>Fault-Tolerance Approach : STABILIZATION  State reconciliation</p>
    <p>Checkpoint/redo</p>
    <p>Undo/redo</p>
    <p>Stabilizing output streams</p>
    <p>Processing new tuples during reconciliation  If (Reconciliation time &lt; X-P) then suspend</p>
    <p>else delay, or process</p>
    <p>Failed node recovery</p>
  </div>
  <div class="page">
    <p>KAIST</p>
    <p>Experimental results(1/2)</p>
  </div>
  <div class="page">
    <p>KAIST</p>
    <p>Experimental results(1/2)</p>
    <p>Reconciliation (performance &amp; overhead)</p>
  </div>
  <div class="page">
    <p>KAIST</p>
    <p>Critiques</p>
    <p>Strong points  Their method reduce the degree of inconsistency while</p>
    <p>guaranteeing high availability using the characteristics of data streams</p>
    <p>Actually implement their scheme in Borealis system</p>
    <p>Weak points  Only support deterministic operator</p>
    <p>Solving consistency problems only serializing input streams  Time window -&gt; not exact consistency</p>
    <p>Too much overhead  Processing overhead by replications  Memory overhead</p>
    <p>Buffering tentative input streams  Buffering output streams which might used by other downstream neighbors</p>
    <p>Is result modification actually necessary?</p>
  </div>
  <div class="page">
    <p>KAIST</p>
    <p>New ideas</p>
    <p>Put replicas in regionally distributed area and construct content distribution stream network.  Downstream users are distributed</p>
    <p>Scalability and fast response time  Also provides fault-tolerance and high availability</p>
    <p>overlay multicasting of source streams, service discovery might be necessary</p>
    <p>What if different users pose all the different queries  Fine-granularity stabilization is necessary.  User must be able to specify the eventual correct result is</p>
    <p>necessary or not</p>
    <p>Communication between replicas could reduce the computations and might support non-deterministic operators  K out of N replicas process</p>
  </div>
  <div class="page">
    <p>KAIST</p>
    <p>Questions?</p>
  </div>
  <div class="page">
    <p>KAIST</p>
    <p>Operator-level scenario</p>
    <p>U</p>
    <p>Node 1</p>
    <p>Node 2</p>
    <p>Node 3</p>
    <p>U</p>
    <p>s1</p>
    <p>s2</p>
    <p>Node 1</p>
    <p>U</p>
    <p>Node 3</p>
    <p>U  Node 2</p>
    <p>s3</p>
    <p>s4</p>
    <p>s3</p>
  </div>
</Presentation>
