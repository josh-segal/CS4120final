<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>CMPE 521: PRINCIPLES OF DATABASE SYSTEMS</p>
    <p>AGILE: Adaptive Indexing for Context-Aware AGILE: Adaptive Indexing for Context-Aware Information FiltresInformation Filtres</p>
    <p>by Jens-Peter Dittrich Peter M. Fischer Donald Kossmann</p>
    <p>Fall 2005</p>
    <p>Presented by erif BAHTYAR</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction  Problem Statement  Context-Aware Information Filters  State-of-the-Art  Adaptive Indexing: AGILE  Performance Experiments and Results  Conclusion</p>
  </div>
  <div class="page">
    <p>Introduction  Information filtering has become a key technology for</p>
    <p>modern information systems</p>
    <p>The goal of an information filter is to route messages to the right recipients (possibly none) according to declarative rules called profiles.</p>
    <p>This paper presents AGILE, a way to extend existing index structures so that the indexes adapt to the message/update workload and show good performance in all situations.</p>
    <p>The focus of all that work was on the development of scalable index structures in order to group and index profiles.</p>
  </div>
  <div class="page">
    <p>Introduction</p>
    <p>A major shortcoming of the existing approaches is that they are very inefficient if profiles refer to values in a database that are subject to change.</p>
    <p>This paper presents Context-aware Information Filters (CIF)</p>
    <p>Differences of CIF  Has two input streams</p>
    <p>a stream of messages,</p>
    <p>a stream of context updates</p>
    <p>Provides a unified solution to tailor information delivery</p>
    <p>The challenge of building a CIF is to route messages and record contex updates efficiently</p>
  </div>
  <div class="page">
    <p>Introduction Use Cases for CIF  Message broker with state: A message broker routes</p>
    <p>messages to a specific application and location.</p>
    <p>Generalized location-based services: With an increased availability of mobile, yet network-connected devices, the possibilities for personalized information delivery have multiplied.</p>
    <p>Stock brokering: Financial information systems require sending only the relevant market updates to specific applications or brokers.</p>
  </div>
  <div class="page">
    <p>Introduction Contribution Summary  Introduce the concept of a Context-Aware Information Filter</p>
    <p>Introduce a CIF-architecture in which intermediary filter stages are allowed to generate false positives as trade-in for higher update rates. To ensure correctness, false positives are eliminated in a separate post-filtering step</p>
    <p>Presents the generic algorithm AGILE. This algorithm extends best-of-breed index structures to automatically adapt to high update rates</p>
    <p>The results of comprehensive performance experiments</p>
  </div>
  <div class="page">
    <p>Problem Statement</p>
    <p>Given a large set of profiles, high message rates and varying</p>
    <p>rates of context updates, provide the best possible throughput</p>
    <p>of messages. No message must be dropped or sent to the wrong</p>
    <p>user because a change in context has not yet been considered</p>
    <p>by the filter. This constraint rules out methods that update the</p>
    <p>context only periodically.</p>
  </div>
  <div class="page">
    <p>Problem Statement  Context: a set of attributes associated with an entity; the</p>
    <p>values of those attributes can change at varying rates.  The only assumption that is made in this work is that the</p>
    <p>values of an attribute of a context can change and that these changes are triggered by a stream of context updates.</p>
  </div>
  <div class="page">
    <p>Problem Statement  Messages: A message is a set of attributes associated to</p>
    <p>values.</p>
  </div>
  <div class="page">
    <p>Problem Statement  Profiles: A profile is a continuous query specifying the</p>
    <p>information interests of a subscriber. Expressions in profiles can refer to a static condition or a dynamic context. Static conditions change relatively seldom In contrast, context information can change frequently.</p>
  </div>
  <div class="page">
    <p>Context-Aware Information Filters CIF Processing Model</p>
    <p>The CIF keeps profiles of subscribers and context information. The CIF receives two input streams: a message stream and a context update stream. These two streams are serialized so that at each point in time either one message or one update is processed.</p>
    <p>handle_message(Message m): Find all profiles that match the given message m, considering the current context state.</p>
    <p>update_context(Context c,Attribute a,Value v): Set the attribute a of context c to the new value v, i.e. c.a := v. All profiles referencing this context must consider this new value.</p>
  </div>
  <div class="page">
    <p>Context-Aware Information Filters CIF Architecture</p>
    <p>A CIF has four main components.</p>
  </div>
  <div class="page">
    <p>Context-Aware Information Filters CIF Architecture</p>
    <p>Context management: manages context information.  stores the values of static attributes and values of context attributes</p>
    <p>which are used in predicates of profiles</p>
    <p>any context change is recorded by this component</p>
    <p>interacts heavily with indexes and postfiltering</p>
  </div>
  <div class="page">
    <p>Context-Aware Information Filters CIF Architecture  Indexes: filtering can be accelerated by indexing the profiles or</p>
    <p>predicates of the profiles.  The most important method supported by an index is probe, which is</p>
    <p>invoked by the CIFs handle_message method. probe takes a message as input and returns a set of profiles that potentially match that message.</p>
    <p>An index can be classified by four different aspects:</p>
    <p>is to control the accuracy and scope of indexes.</p>
  </div>
  <div class="page">
    <p>Context-Aware Information Filters CIF Architecture</p>
    <p>Merge: takes several intermediate result sets of profiles as input and carries out conjunctions and disjunctions on those sets of predicates</p>
  </div>
  <div class="page">
    <p>Context-Aware Information Filters CIF Architecture</p>
    <p>Postfilter: eleminates false positives. In other words, it takes a set of profiles as input and checks which profiles match the message by reevaluating the predicates of the profiles based on the current state of the context.</p>
  </div>
  <div class="page">
    <p>State-Of-the-Art No Index</p>
    <p>The brute-force approach is to use no index at all.  All the work is carried out in the postfilter operation.</p>
    <p>The main advantage is the update_context operation is cheap.</p>
    <p>Negative side, the handle_message operation is expensive because the postfilter operation is applied to all profiles.</p>
  </div>
  <div class="page">
    <p>State-Of-the-Art Eager Full Indexing</p>
    <p>The opposite to the NOINDEX approach is an approach that makes aggressive use of indexes and keeps all indexes uptodate and 100 percent accurate.</p>
    <p>The big advantage of EAGER is that the handle_message operation is as cheap.</p>
    <p>The big disadvantage of the EAGER approach is that the update_context operation is expensive because it involves maintaining indexes, potentially with every context update.</p>
  </div>
  <div class="page">
    <p>State-Of-the-Art Eager Full Indexing</p>
  </div>
  <div class="page">
    <p>State-Of-the-Art Partial Indexing</p>
    <p>The idea of partial indexes is to reduce the cost of the update_context operation by reducing the scope of an index.</p>
    <p>If an update is outside the scope of an index, then the index need not be updated.</p>
    <p>All non-indexed values must be processed in a brute-force manner.</p>
    <p>The most important issue is how to define the scope of a partial index.</p>
  </div>
  <div class="page">
    <p>State-Of-the-Art Lazy Updates, GBU</p>
    <p>Lately, there has been work on moving object databases and the basic insight of that work is that updates often exhibit a high degree of locality.</p>
    <p>The idea is that updates that remain within the bounding box of a leaf node of an index are not propagated to nonleaf nodes of the index; propagation only occurs if the new value is outside of the bounding box of the old value. If propagation is necessary, then locality is also exploited as much as possible.</p>
  </div>
  <div class="page">
    <p>Adaptive Indexing:AGILE General Idea</p>
    <p>The key idea of AGILE is to dynamically reduce the accuracy and scope of an index if context updates are frequent and to increase the accuracy and scope of an index if context updates are seldom and handle_message calls are frequent.</p>
    <p>The operation to reduce the accuracy is called escalation</p>
    <p>The operation that increases the accuracy of an index is called deescalation</p>
  </div>
  <div class="page">
    <p>Adaptive Indexing:AGILE General Idea - Example  In order to implement AGILE on a binary tree, the structure</p>
    <p>of a node is extended. In addition to the key k, every node has three sets of identifiers:  left: this is a set of escalated identifiers (i.e., profiles) which are</p>
    <p>associated with the key range ]  , k[</p>
    <p>right: this is a set of escalated identifiers (i.e., profiles) which are associated with the key range ]k,+ [</p>
    <p>exact: the set of non-escalated identifiers which are associated with k</p>
  </div>
  <div class="page">
    <p>Adaptive Indexing:AGILE General Idea  Example Escalation</p>
    <p>Figure 5 shows how an identifier, A, is escalated. This operation is triggered by increasing the stock of Warehouse A by one; i.e., a context update from two to three.</p>
  </div>
  <div class="page">
    <p>Adaptive Indexing:AGILE General Idea  Example Cheap Update</p>
    <p>The index need not be adjusted at all in order to reflect this change and, thus, the update_context operation is as cheap as for the NOINDEX approach in this case.</p>
  </div>
  <div class="page">
    <p>Adaptive Indexing:AGILE General Idea  Example Deescalation  It is triggered if the handle_message operation is called</p>
    <p>several times for orders and Warehouse A was returned by the index as a potential candidate and had to be filtered out by the postfilter step.</p>
    <p>Deescalating from a left or right set of a leaf node involves inserting a new leaf node and moving the identifier into the exact set of this new node.</p>
  </div>
  <div class="page">
    <p>Adaptive Indexing:AGILE Properties of AGILE Indexes  Formally, every index maps each key k to a set of identifiers</p>
    <p>{i}. This mapping is returned by the probe operation of an index, i.e. probe(k) -&gt;{i}.</p>
  </div>
  <div class="page">
    <p>Adaptive Indexing:AGILE AGILE Algorithm</p>
  </div>
  <div class="page">
    <p>Adaptive Indexing:AGILE AGILE Indexes  AGILE Interval Skip Lists (ISL)</p>
    <p>An ISL is a hierarchical index structure that is applicable to</p>
    <p>all ordered domains (e.g., numerical values, dates).</p>
    <p>Each identifier of a profile is associated with one or more</p>
    <p>ranges of values. Furthermore, each range is associated with</p>
    <p>a set of identifiers. Ranges are organized hierarchically so</p>
    <p>that all ranges covering a given value can be found more</p>
    <p>quickly (logarithmic complexity in the average case)</p>
  </div>
  <div class="page">
    <p>Adaptive Indexing:AGILE AGILE Indexes  AGILE Interval Skip Lists (ISL)</p>
  </div>
  <div class="page">
    <p>Adaptive Indexing:AGILE AGILE Indexes  Other AGILE Index Structures</p>
    <p>Hash Table: An escalation is implemented by associating an</p>
    <p>identifier with the whole domain of values. Effectively, this</p>
    <p>means deleting the identifier from the hash table and keeping it</p>
    <p>in a separate list of identifiers that are returned for every probe.</p>
    <p>Deescalations are implemented by re-inserting the identifier</p>
    <p>into the hash table and deleting it from the escalate list.</p>
    <p>B-Tree, B+-Tree,R-Tree: Logically, an escalation is</p>
    <p>implemented by moving an identifier into the buffer of its</p>
    <p>parent. Deescalations are implemented by moving an identifier</p>
    <p>to a child node.</p>
  </div>
  <div class="page">
    <p>Adaptive Indexing:AGILE AGILE Indexes  Deescalation Policies</p>
    <p>Ideally, an index should be deescalated if the cost for the deescalation is lower than the cost of eliminating false positives in the postfilter step of future handle message operations.</p>
    <p>Some simple heuristics  Always : Every false positive encountered by the postfilter triggers a</p>
    <p>deescalation.</p>
    <p>Fixed: A fixed number of false positives FP is ignored until a deescalation is performed.</p>
    <p>Auto : auto operates like fixed and ignores a certain number of false positives FP before a deescalation is triggered.</p>
  </div>
  <div class="page">
    <p>Performance Experiments and Results Software and Hardware used</p>
    <p>In order to implement the individual components, the following design choices were made:  Context Management</p>
    <p>Indexes</p>
    <p>Merge</p>
    <p>Postfilter</p>
    <p>All software was implemented in C++. All experiments were performed on a 3.2 GHz Pentium 4 machine with 2 GB of RAM running Linux 2.4.</p>
  </div>
  <div class="page">
    <p>Performance Experiments and Results Workload  When selecting the workloads to test the different methods,</p>
    <p>researchers followed the requirements derived from the Use Cases. The number of profiles is high, most profiles refer to contexts. Low, high and varying context update rates are studied.</p>
  </div>
  <div class="page">
    <p>Performance Experiments and Results Experiment 1:Throughput in Steady State</p>
    <p>Figure 11 shows the relative throughput, normalized to the throughput of AGILE. Table 3 shows the absolute throughput results.</p>
  </div>
  <div class="page">
    <p>Performance Experiments and Results Experiment 1:Throughput in Steady State</p>
    <p>A more detailed understanding of these results can be gained by looking at the number of executed index updates (Table 4) and the number of profiles that need to be inspected in the postfilter operation (Table 5).</p>
  </div>
  <div class="page">
    <p>Performance Experiments and Results Experiment 2: Vary UpdAtt</p>
    <p>The experiment studies the impact of varying the distribution of updates to indexed and non-indexed attributes (UpdAtt). Figure 12 shows the total time used to execute a workload of 10.000 messages and 500 Mio. updates (UP=1000).</p>
  </div>
  <div class="page">
    <p>Performance Experiments and Results Experiment 3: Vary U</p>
    <p>Both GBU and AGILE take advantage of the locality of context updates.</p>
    <p>Figure 13 shows the completion time for varying U from very high update locality ( U close to 0) to very low update locality ( U = 2,500 which is 25 percent of the whole scope of possible attribute values).</p>
  </div>
  <div class="page">
    <p>Performance Experiments and Results Experiment 4:Update Burst</p>
    <p>Figure 14 shows the throughput at different moments in time; the throughput is computed for every batch of 100 messages. It can be seen that the message throughput drops during the update burst (between Message 1,000 and Message 2,000)</p>
  </div>
  <div class="page">
    <p>Performance Experiments and Results Experiment 4:Update Burst</p>
    <p>Figure 15 and Table 6 show how alternative deescalation strategies fare in this experiment. Indeed, auto outperforms fixed in this experiment, but the differences are not large.</p>
  </div>
  <div class="page">
    <p>Conclusion  Information filtering has matured to a key information</p>
    <p>processing technology.</p>
    <p>This work provides simple extensions to existing index structures for information filtering systems.</p>
    <p>The key idea is to adapt the accuracy and scope of an index to the workload of a context-aware information filter.</p>
    <p>Improve the message throughput of a context-aware information filter</p>
    <p>Robust to poor physical design</p>
    <p>Can gradually adjust to changes in the locality of updates</p>
    <p>Is able to deal with workloads with bursts</p>
  </div>
  <div class="page">
    <p>QUESTIONS ?</p>
  </div>
</Presentation>
