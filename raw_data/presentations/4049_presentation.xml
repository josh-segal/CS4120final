<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Clemens Hlauschek,</p>
    <p>Markus Gruber,</p>
    <p>Florian Fankhauser,</p>
    <p>Christian Schanes</p>
    <p>USENIX WOOT 2015</p>
  </div>
  <div class="page">
    <p>Outline of this Talk</p>
    <p>Authenticated Key Agreement and KCI</p>
    <p>TLS is vulnerable to KCI</p>
    <p>KCI and TLS in practice</p>
    <p>Conclusion and Mitigation</p>
  </div>
  <div class="page">
    <p>Key Compromise Impersonation (KCI)</p>
    <p>Weakness of Authenticated Key Agreement protocol</p>
  </div>
  <div class="page">
    <p>Key Compromise Impersonation (KCI)</p>
    <p>Weakness of Authenticated Key Agreement protocol</p>
    <p>Authenticated Key Agreement</p>
    <p>2 parties exchange messages</p>
    <p>Over an adversarial network</p>
    <p>To derive a shared secret</p>
    <p>(session key)</p>
  </div>
  <div class="page">
    <p>Key Compromise Impersonation (KCI)</p>
    <p>Weakness of Authenticated Key Agreement protocol</p>
    <p>Compromise of long-term secret al</p>
    <p>lows to trivially impersonate the</p>
    <p>compromised party</p>
    <p>KCI  reverse situation: Imperson</p>
    <p>ate an uncompromised party to the</p>
    <p>compromised party</p>
    <p>KCI allows for MitM attacks</p>
  </div>
  <div class="page">
    <p>Key Compromise Impersonation (KCI)</p>
    <p>Weakness of Authenticated Key Agreement protocol</p>
    <p>Compromise of long-term secret al</p>
    <p>lows to trivially impersonate the</p>
    <p>compromised party</p>
    <p>KCI  reverse situation: Imperson</p>
    <p>ate an uncompromised party to the</p>
    <p>compromised party</p>
    <p>KCI allows for MitM attacks</p>
  </div>
  <div class="page">
    <p>Key Compromise Impersonation (KCI)</p>
    <p>Weakness of Authenticated Key Agreement protocol</p>
    <p>Compromise of long-term secret al</p>
    <p>lows to trivially impersonate the</p>
    <p>compromised party</p>
    <p>KCI  reverse situation: Imperson</p>
    <p>ate an uncompromised party to the</p>
    <p>compromised party</p>
    <p>KCI allows for MitM attacks</p>
  </div>
  <div class="page">
    <p>TLS protocol is vulnerable to KCI</p>
    <p>Non-ephemeral Diffie-Hellman key exchange with fixed Diffie-Hellman client authentication</p>
    <p>Zp as well as EC</p>
    <p>In all TLS versions</p>
    <p>Client indicates support in</p>
    <p>ClientHello message</p>
    <p>Server requests fixed_(ec)dh au</p>
    <p>thentication</p>
    <p>Session key is derived from static DH</p>
    <p>values:</p>
    <p>client: PRF((gs)c, randc||rands)</p>
    <p>server: PRF((gc)s, randc||rands)</p>
  </div>
  <div class="page">
    <p>TLS protocol is vulnerable to KCI</p>
    <p>Non-ephemeral Diffie-Hellman key exchange with fixed Diffie-Hellman client authentication</p>
    <p>Zp as well as EC</p>
    <p>In all TLS versions</p>
    <p>Client indicates support in</p>
    <p>ClientHello message</p>
    <p>Server requests fixed_(ec)dh au</p>
    <p>thentication</p>
    <p>Session key is derived from static DH</p>
    <p>values:</p>
    <p>client: PRF((gs)c, randc||rands)</p>
    <p>server: PRF((gc)s, randc||rands)</p>
  </div>
  <div class="page">
    <p>TLS protocol is vulnerable to KCI</p>
    <p>Non-ephemeral Diffie-Hellman key exchange with fixed Diffie-Hellman client authentication</p>
    <p>Zp as well as EC</p>
    <p>In all TLS versions</p>
    <p>Client indicates support in</p>
    <p>ClientHello message</p>
    <p>Server requests fixed_(ec)dh au</p>
    <p>thentication</p>
    <p>Session key is derived from static DH</p>
    <p>values:</p>
    <p>client: PRF((gs)c, randc||rands)</p>
    <p>server: PRF((gc)s, randc||rands)</p>
  </div>
  <div class="page">
    <p>TLS protocol is vulnerable to KCI</p>
    <p>Non-ephemeral Diffie-Hellman key exchange with fixed Diffie-Hellman client authentication</p>
    <p>Zp as well as EC</p>
    <p>In all TLS versions</p>
    <p>Client indicates support in</p>
    <p>ClientHello message</p>
    <p>Server requests fixed_(ec)dh au</p>
    <p>thentication</p>
    <p>Session key is derived from static DH</p>
    <p>values:</p>
    <p>client: PRF((gs)c, randc||rands)</p>
    <p>server: PRF((gc)s, randc||rands)</p>
  </div>
  <div class="page">
    <p>TLS protocol is vulnerable to KCI</p>
    <p>Non-ephemeral Diffie-Hellman key exchange with fixed Diffie-Hellman client authentication</p>
    <p>Zp as well as EC</p>
    <p>In all TLS versions</p>
    <p>Client indicates support in</p>
    <p>ClientHello message</p>
    <p>Server requests fixed_(ec)dh au</p>
    <p>thentication</p>
    <p>Session key is derived from static DH</p>
    <p>values:</p>
    <p>client: PRF((gs)c, randc||rands)</p>
    <p>server: PRF((gc)s, randc||rands)</p>
  </div>
  <div class="page">
    <p>TLS protocol is vulnerable to KCI</p>
    <p>Man-in-the-Middle attack against TLS using KCI</p>
    <p>Block connection to server</p>
    <p>Send server cert</p>
    <p>Request fixed (EC)DH</p>
    <p>Request compromised cert via Dis</p>
    <p>tinguished Name in CertRequest</p>
    <p>Both attacker and client do the</p>
    <p>same session key computation:</p>
    <p>PRF((gs)c, randc||rands)</p>
    <p>Connect to server</p>
  </div>
  <div class="page">
    <p>TLS protocol is vulnerable to KCI</p>
    <p>Man-in-the-Middle attack against TLS using KCI</p>
    <p>Block connection to server</p>
    <p>Send server cert</p>
    <p>Request fixed (EC)DH</p>
    <p>Request compromised cert via Dis</p>
    <p>tinguished Name in CertRequest</p>
    <p>Both attacker and client do the</p>
    <p>same session key computation:</p>
    <p>PRF((gs)c, randc||rands)</p>
    <p>Connect to server</p>
  </div>
  <div class="page">
    <p>TLS protocol is vulnerable to KCI</p>
    <p>Man-in-the-Middle attack against TLS using KCI</p>
    <p>Block connection to server</p>
    <p>Send server cert</p>
    <p>Request fixed (EC)DH</p>
    <p>Request compromised cert via Dis</p>
    <p>tinguished Name in CertRequest</p>
    <p>Both attacker and client do the</p>
    <p>same session key computation:</p>
    <p>PRF((gs)c, randc||rands)</p>
    <p>Connect to server</p>
  </div>
  <div class="page">
    <p>TLS protocol is vulnerable to KCI</p>
    <p>Man-in-the-Middle attack against TLS using KCI</p>
    <p>Block connection to server</p>
    <p>Send server cert</p>
    <p>Request fixed (EC)DH</p>
    <p>Request compromised cert via Dis</p>
    <p>tinguished Name in CertRequest</p>
    <p>Both attacker and client do the</p>
    <p>same session key computation:</p>
    <p>PRF((gs)c, randc||rands)</p>
    <p>Connect to server</p>
  </div>
  <div class="page">
    <p>TLS protocol is vulnerable to KCI</p>
    <p>Man-in-the-Middle attack against TLS using KCI</p>
    <p>Block connection to server</p>
    <p>Send server cert</p>
    <p>Request fixed (EC)DH</p>
    <p>Request compromised cert via Dis</p>
    <p>tinguished Name in CertRequest</p>
    <p>Both attacker and client do the</p>
    <p>same session key computation:</p>
    <p>PRF((gs)c, randc||rands)</p>
    <p>Connect to server</p>
  </div>
  <div class="page">
    <p>Prerequisites KCI attacks against TLS</p>
    <p>authentication handshake</p>
    <p>rsa_fixed_dh</p>
    <p>dss_fixed_dh</p>
    <p>rsa_fixed_ecdh</p>
    <p>ecdsa_fixed_ecdh</p>
    <p>Stolen private key</p>
    <p>Client cert foisted on victim (various vectors)</p>
  </div>
  <div class="page">
    <p>Foisting client cert on victim: Social engineering</p>
    <p>Secure ways for generating client</p>
    <p>certs exist</p>
    <p>Common practice: send pre</p>
    <p>generated client certs with secret</p>
    <p>key to user</p>
    <p>Insecure OS mechanisms to install</p>
    <p>client certs</p>
    <p>Attacker / malicious admin coax vic</p>
    <p>tim to install client certificate for</p>
    <p>network X, then use it to exploit con</p>
    <p>nections to all vulnerable servers</p>
  </div>
  <div class="page">
    <p>Foisting client cert on victim: Social engineering</p>
    <p>Secure ways for generating client</p>
    <p>certs exist</p>
    <p>Common practice: send pre</p>
    <p>generated client certs with secret</p>
    <p>key to user</p>
    <p>Insecure OS mechanisms to install</p>
    <p>client certs</p>
    <p>Attacker / malicious admin coax vic</p>
    <p>tim to install client certificate for</p>
    <p>network X, then use it to exploit con</p>
    <p>nections to all vulnerable servers</p>
  </div>
  <div class="page">
    <p>Foisting client cert on victim: Social engineering</p>
    <p>Secure ways for generating client</p>
    <p>certs exist</p>
    <p>Common practice: send pre</p>
    <p>generated client certs with secret</p>
    <p>key to user</p>
    <p>Insecure OS mechanisms to install</p>
    <p>client certs</p>
    <p>Attacker / malicious admin coax vic</p>
    <p>tim to install client certificate for</p>
    <p>network X, then use it to exploit con</p>
    <p>nections to all vulnerable servers</p>
  </div>
  <div class="page">
    <p>Foisting client cert on victim: Social engineering</p>
    <p>Secure ways for generating client</p>
    <p>certs exist</p>
    <p>Common practice: send pre</p>
    <p>generated client certs with secret</p>
    <p>key to user</p>
    <p>Insecure OS mechanisms to install</p>
    <p>client certs</p>
    <p>Attacker / malicious admin coax vic</p>
    <p>tim to install client certificate for</p>
    <p>network X, then use it to exploit con</p>
    <p>nections to all vulnerable servers</p>
  </div>
  <div class="page">
    <p>Foisting client cert on victim: Social engineering</p>
    <p>Secure ways for generating client</p>
    <p>certs exist</p>
    <p>Common practice: send pre</p>
    <p>generated client certs with secret</p>
    <p>key to user</p>
    <p>Insecure OS mechanisms to install</p>
    <p>client certs</p>
    <p>Attacker / malicious admin coax vic</p>
    <p>tim to install client certificate for</p>
    <p>network X, then use it to exploit con</p>
    <p>nections to all vulnerable servers</p>
  </div>
  <div class="page">
    <p>Foisting client cert on victim: Social engineering</p>
    <p>Secure ways for generating client</p>
    <p>certs exist</p>
    <p>Common practice: send pre</p>
    <p>generated client certs with secret</p>
    <p>key to user</p>
    <p>Insecure OS mechanisms to install</p>
    <p>client certs</p>
    <p>Attacker / malicious admin coax vic</p>
    <p>tim to install client certificate for</p>
    <p>network X, then use it to exploit con</p>
    <p>nections to all vulnerable servers</p>
  </div>
  <div class="page">
    <p>Foisting client cert on victim: Install in certificate store</p>
    <p>For example (hypothetically): Abusing the trustStore on Android devices</p>
    <p>A user installs a malicious, but be</p>
    <p>nign looking app</p>
    <p>Malicious app installs client certifi</p>
    <p>cate in system trustStore</p>
    <p>Targeted app makes TLS connection</p>
    <p>MitM forces targeted app to use</p>
    <p>client authentication, using the pre</p>
    <p>viously installed cert</p>
    <p>User confirms client authentication</p>
  </div>
  <div class="page">
    <p>Foisting client cert on victim: Vendor backdoor</p>
    <p>A malicious vendor or distributor might install a backdoor in form of a client certificate</p>
    <p>Superfish-MitM: Inject own CA certificate</p>
    <p>KCI-Backdoor:</p>
    <p>Implementation fully spec-conform</p>
    <p>Server certs do not change</p>
  </div>
  <div class="page">
    <p>Victim server support: Matching Certificate</p>
    <p>Server must either</p>
    <p>Support a non-ephemeral (EC)DH handshake</p>
    <p>Have an ECDSA certificate ( &lt; 10% )</p>
    <p>ECDH and ECDSA cert same structure</p>
    <p>If X509 KeyUsage extension is used</p>
    <p>- KeyAgreement Bit must be set</p>
    <p>- But client may not check KeyUsage extension</p>
    <p>KeyUsage extension not mandatory</p>
    <p>CERTIFICATE</p>
    <p>g s</p>
  </div>
  <div class="page">
    <p>Victim client support</p>
    <p>Vulnerable client software</p>
    <p>Programs using BouncyCastle might be vulnerable</p>
    <p>Apple SecureTransport on older versions of Mac OS X (Safari)</p>
    <p>OpenSSL</p>
    <p>Recently added support (1.0.2 branch) for fixed DH (Zp) client authentication</p>
    <p>TODOs in the source code for fixed ECDH client authentication</p>
    <p>RSA Bsafe(?): support for non-ephemeral ECDH (according to API documentation)</p>
  </div>
  <div class="page">
    <p>Conclusion and Mitigation</p>
    <p>Clients should disable KCI-vulnerable cipher suites</p>
    <p>ECDSA server certificates should not set KeyAgreement bit in X509 KeyUsage extension</p>
    <p>Industry best-practice guides (e.g., RFC 7572) should warn against KCI-vulnerable cipher suites</p>
    <p>Secure generation of client certificates (private key does not leave users computer) should become</p>
    <p>common practice</p>
    <p>Although we managed to attack prestigious targets (Safari  Facebook), both client and server support</p>
    <p>are rather rare, currently. Hopefully, this work prevents the issue from ever becoming more widespread:</p>
    <p>OpenSSL only very recently added support for fixed DH client authentication</p>
    <p>ECDSA certificates are probably becoming more widespread in the future</p>
  </div>
</Presentation>
