<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>RobinHood: Tail Latency-Aware Caching Dynamically Reallocating from Cache-Rich to Cache-Poor</p>
    <p>Daniel S. Berger Benjamin Berg Timothy Zhu Carnegie Mellon University Pennsylvania State University</p>
    <p>USENIX OSDI, 10/8/18.</p>
    <p>Siddhartha Sen Mor Harchol-Balter Microsoft Research Carnegie Mellon University</p>
  </div>
  <div class="page">
    <p>Typical Web Architecture</p>
    <p>Aggregation server</p>
    <p>R ecom</p>
    <p>.</p>
    <p>P roducts</p>
    <p>A ds</p>
    <p>User request</p>
    <p>... Backend queries</p>
    <p>Request latency = max of query latencies</p>
    <p>Q u</p>
    <p>e ry</p>
    <p>la te</p>
    <p>n cy</p>
  </div>
  <div class="page">
    <p>Typical Web Architecture</p>
    <p>Goal: minimize 99-th percentile</p>
    <p>(P99) request latency</p>
    <p>Aggregation server</p>
    <p>R ecom</p>
    <p>.</p>
    <p>P roducts</p>
    <p>A ds</p>
    <p>User request</p>
    <p>...</p>
    <p>Request latency = max of query latencies</p>
    <p>Q u</p>
    <p>e ry</p>
    <p>la te</p>
    <p>n cy</p>
    <p>Backend queries</p>
  </div>
  <div class="page">
    <p>What Causes High P99 Request Latency?</p>
    <p>Aggregation server</p>
    <p>R ecom</p>
    <p>.</p>
    <p>P roducts</p>
    <p>A ds</p>
    <p>User request</p>
    <p>... Backend queries</p>
    <p>Observations at xbox.com (3/2018):</p>
    <p>Better load balancing? Elastically scale backends?</p>
    <p>Partially implemented</p>
    <p>Q u</p>
    <p>e ry</p>
    <p>la te</p>
    <p>n cy</p>
    <p>Request latency</p>
  </div>
  <div class="page">
    <p>What Else Can We Do?</p>
    <p>Aggregation server</p>
    <p>R ecom</p>
    <p>.</p>
    <p>P roducts</p>
    <p>A ds</p>
    <p>User request</p>
    <p>... Backend queries</p>
    <p>Cache</p>
    <p>Can we use the aggregation cache to reduce the P99 request latency?</p>
    <p>Observations at xbox.com (3/2018):</p>
    <p>Aggregation Cache: Currently shared among queries to all backends</p>
    <p>Q u</p>
    <p>e ry</p>
    <p>la te</p>
    <p>n cy</p>
    <p>Request latency</p>
  </div>
  <div class="page">
    <p>Can We Use Caching to Reduce the P99?</p>
    <p>State-of-the-art caching systems focus on hit ratio, fairness  not the P99</p>
    <p>Caching layers do not directly address tail latency, aside from configurations where the entire working set can reside in a cache.</p>
    <p>Belief: No Cache</p>
    <p>B</p>
    <p>P99= 100ms</p>
  </div>
  <div class="page">
    <p>Can We Use Caching to Reduce the P99?</p>
    <p>But: latency is not a constant</p>
    <p>Caching can reduce P99 request latency!</p>
    <p>Effectiveness in web architecture?</p>
    <p>Belief: No 1ms 90%</p>
    <p>Cache</p>
    <p>B</p>
    <p>P99= 500ms</p>
  </div>
  <div class="page">
    <p>RobinHood: Key Idea</p>
    <p>During load spike:Observations for xbox.com (3/2018):</p>
    <p>Aggregation server</p>
    <p>R ecom</p>
    <p>.</p>
    <p>P roduct</p>
    <p>s</p>
    <p>A ds</p>
    <p>User request</p>
    <p>... Backend queries</p>
    <p>Cache</p>
    <p>RobinHood: more cache  less load  much lower P99</p>
  </div>
  <div class="page">
    <p>RobinHood: Key Idea</p>
    <p>During load spike:Observations for xbox.com (3/2018):</p>
    <p>Aggregation server</p>
    <p>R ecom</p>
    <p>.</p>
    <p>P roduct</p>
    <p>s</p>
    <p>A ds</p>
    <p>User request</p>
    <p>... Backend queries</p>
    <p>Cache</p>
    <p>Products Recom. Ads</p>
    <p>Dynamic Cache Partitions</p>
  </div>
  <div class="page">
    <p>During load spike:Observations for xbox.com (3/2018):</p>
    <p>Aggregation server</p>
    <p>R ecom</p>
    <p>.</p>
    <p>P roduct</p>
    <p>s</p>
    <p>A ds</p>
    <p>User request</p>
    <p>... Backend queries</p>
    <p>Cache</p>
    <p>Recom. AdsProducts</p>
    <p>RobinHood: Key Idea</p>
    <p>Dynamic Cache Partitions</p>
  </div>
  <div class="page">
    <p>During load spike:Observations for xbox.com (3/2018):</p>
    <p>Aggregation server</p>
    <p>R ecom</p>
    <p>.</p>
    <p>P roduct</p>
    <p>s</p>
    <p>A ds</p>
    <p>User request</p>
    <p>... Backend queries</p>
    <p>Cache</p>
    <p>Recom. AdsProducts</p>
    <p>RobinHood: Key Idea</p>
    <p>Dynamic Cache Partitions</p>
  </div>
  <div class="page">
    <p>During load spike:Observations for xbox.com (3/2018):</p>
    <p>Aggregation server</p>
    <p>R ecom</p>
    <p>.</p>
    <p>P roduct</p>
    <p>s</p>
    <p>A ds</p>
    <p>User request</p>
    <p>... Backend queries</p>
    <p>Cache</p>
    <p>Recom. AdsProducts</p>
    <p>RobinHood: Key Idea</p>
    <p>Dynamic Cache Partitions</p>
  </div>
  <div class="page">
    <p>During load spike:Observations for xbox.com (3/2018):</p>
    <p>Aggregation server</p>
    <p>R ecom</p>
    <p>.</p>
    <p>P roduct</p>
    <p>s</p>
    <p>A ds</p>
    <p>User request</p>
    <p>... Backend queries</p>
    <p>Cache</p>
    <p>Recom. AdsProducts</p>
    <p>RobinHood: Key Idea</p>
    <p>Dynamic Cache Partitions</p>
  </div>
  <div class="page">
    <p>During load spike:Observations for xbox.com (3/2018):</p>
    <p>Aggregation server</p>
    <p>R ecom</p>
    <p>.</p>
    <p>P roduct</p>
    <p>s</p>
    <p>A ds</p>
    <p>User request</p>
    <p>... Backend queries</p>
    <p>Cache</p>
    <p>Recom. AdsProducts</p>
    <p>RobinHood: Key Idea</p>
    <p>Dynamic Cache Partitions</p>
  </div>
  <div class="page">
    <p>RobinHood Cache</p>
    <p>The RobinHood Caching System</p>
    <p>Scala ble in</p>
    <p># ba cken</p>
    <p>ds,</p>
    <p># agg regat</p>
    <p>ion se rvers</p>
    <p>Dynam ically</p>
    <p>partit ion</p>
    <p>the ag grega</p>
    <p>tion ca che</p>
    <p>First caching system to</p>
    <p>minimize request P99</p>
    <p>Deployable on off-the</p>
    <p>shelf software stack</p>
  </div>
  <div class="page">
    <p>High latency</p>
    <p>User requests 99.5% 0.5%</p>
    <p>Cache</p>
    <p>How to Repartition the Cache?</p>
    <p>How to redistribute the tax?</p>
    <p>Every 5 seconds: RobinHood taxes everyone 1%</p>
    <p>First idea: give cache to high-latency backends</p>
    <p>Recall: not all requests are the same</p>
    <p>Small effect on request P99</p>
  </div>
  <div class="page">
    <p>RobinHood: find the cause of high request P99</p>
    <p>P0 P100P99</p>
    <p>Who blocked this request?</p>
    <p>How to Repartition the Cache?</p>
    <p>How to redistribute the tax?</p>
    <p>Every 5 seconds: RobinHood taxes everyone 1%</p>
  </div>
  <div class="page">
    <p>P0 P100P99</p>
    <p>Who blocked these requests?</p>
    <p>How to Repartition the Cache?</p>
    <p>Track request blocking count (RBC) for each backend</p>
    <p>RobinHood: find the cause of high request P99</p>
    <p>How to redistribute the tax?</p>
    <p>Every 5 seconds: RobinHood taxes everyone 1%</p>
  </div>
  <div class="page">
    <p>RobinHood Architecture</p>
    <p>Aggregation server</p>
    <p>... ...</p>
    <p>Cache</p>
    <p>RobinHood Controller</p>
    <p>- ingests RBC</p>
    <p>- calculates / enforces cache</p>
    <p>allocation</p>
    <p>- not on request path</p>
    <p>RH-control</p>
    <p>Backends</p>
  </div>
  <div class="page">
    <p>RobinHood Architecture</p>
    <p>... ...</p>
    <p>Cache Cache Cache</p>
    <p>RH-control / Ag. server</p>
    <p>In practice many Ag. servers</p>
    <p>... ...</p>
    <p>- Local decisions</p>
    <p>- Local measurements- Pooled measurements</p>
    <p>Challenge: insufficient # tail data points</p>
    <p>RH-control RH-control RH-control Ag. servers</p>
    <p>Backends</p>
    <p>Distributed RobinHood:</p>
  </div>
  <div class="page">
    <p>Experimental Setup</p>
    <p>Request generator</p>
    <p>MySQL (I/O Bound)</p>
    <p>Matrix Multiply (CPU Bound)</p>
    <p>K-V Store (CPU Bound)</p>
    <p>Replay production trace</p>
    <p>For 4 hours, 200k queries/second</p>
    <p>Emulate query latency spikes</p>
    <p>A B C D</p>
    <p>Ag. servers</p>
    <p>... ...</p>
    <p>Cache Cache Cache... ...</p>
    <p>Backends</p>
    <p>RH-control RH-control RH-control 16x</p>
  </div>
  <div class="page">
    <p>Evaluation Results: P99 Request Latency</p>
    <p>RobinHood [our proposal]</p>
    <p>Balance Query Latencies [Hyberbolic, ATC17]</p>
    <p>Original MS System [OneRF]</p>
    <p>Maximize Overall Hit Ratio [Cliffhanger, NSDI16]</p>
    <p>R eq</p>
    <p>ue st</p>
    <p>P 99</p>
    <p>L at</p>
    <p>en cy</p>
    <p>[m s]</p>
    <p>&gt;</p>
  </div>
  <div class="page">
    <p>What Makes RobinHood so Effective?</p>
    <p>RobinHood [our proposal]</p>
    <p>Original MS System [OneRF]</p>
    <p>R eq</p>
    <p>ue st</p>
    <p>P 99</p>
    <p>L at</p>
    <p>en cy</p>
    <p>[m s]</p>
    <p>&gt;</p>
    <p>The RobinHood tradeoff:  up to 2.5x higher latency  typically 4x lower latency</p>
    <p>- Sacrifice performance of some backends - Reduce latency of bottleneck backends</p>
    <p>Reduced request latency</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>Yes! Huge reduction in P99 spikes and SLO violations.  Use cache as load balancers: RBC load metric.</p>
    <p>Yes! Built using off-the-shelf software stack. Works orthogonally to existing load balancing and data/quality tradeoffs.</p>
    <p>Feasibility in production systems?</p>
    <p>Is it possible to use caches to improve the request P99?</p>
    <p>No! Theres a lot to do. Need to consider the effect of other request structures.</p>
    <p>Is this the optimal solution? End of this project?</p>
    <p>Poster #31</p>
  </div>
</Presentation>
