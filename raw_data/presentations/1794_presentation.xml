<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>2012 IBM Corporation</p>
    <p>Functionally Partitioned File Caching in Virtualized Environments</p>
    <p>Zhe Zhang, Han Chen, Hui Lei</p>
  </div>
  <div class="page">
    <p>2012 IBM Corporation2</p>
    <p>I/O Caching in the Cloud</p>
    <p>Important Large performance gap b/w memory and disk Disk head throttling caused by the sharing of a single host by a large number of VM guests</p>
    <p>Challenging Vertical dimension:</p>
    <p>More complex software stack; multiple levels of memory cache  Memory wastage and compounded prefetching</p>
    <p>Horizontal dimension:  VM guests often contain same/similar OS/middleware/application files  The content similarity may not be easily exploited</p>
  </div>
  <div class="page">
    <p>2012 IBM Corporation3</p>
    <p>Virtual Machine Data Access Path</p>
    <p>Guest&amp;page&amp; cache&amp;</p>
    <p>Guest&amp;page&amp; cache&amp;</p>
    <p>Guest&amp; disk&amp;</p>
    <p>Host&amp;page&amp;cache&amp;</p>
    <p>Host&amp;disk&amp;</p>
    <p>Read&amp; request&amp;</p>
    <p>Guest&amp; disk&amp;</p>
    <p>Control flow Data flow</p>
  </div>
  <div class="page">
    <p>2012 IBM Corporation</p>
    <p>Possible Cache Configurations</p>
  </div>
  <div class="page">
    <p>2012 IBM Corporation</p>
    <p>Possible Cache Configurations</p>
    <p>Host=on, Guest=on</p>
    <p>Best caching effect when memory is abundant</p>
    <p>Memory wastage due to duplicated caching</p>
    <p>Overly aggressive prefetching</p>
  </div>
  <div class="page">
    <p>2012 IBM Corporation</p>
    <p>Possible Cache Configurations</p>
    <p>Host=off, Guest=on Host=on, Guest=on</p>
    <p>Guests have the most accurate knowledge about what blocks to cache</p>
    <p>Loses chances of content-based deduplication</p>
    <p>The host cannot help its guests in caching even when it has abundant memory</p>
    <p>Best caching effect when memory is abundant</p>
    <p>Memory wastage due to duplicated caching</p>
    <p>Overly aggressive prefetching</p>
  </div>
  <div class="page">
    <p>2012 IBM Corporation</p>
    <p>Possible Cache Configurations</p>
    <p>Host=off, Guest=on Host=on, Guest=on</p>
    <p>Host=on, Guest=off</p>
    <p>Guests have the most accurate knowledge about what blocks to cache</p>
    <p>Loses chances of content-based deduplication</p>
    <p>The host cannot help its guests in caching even when it has abundant memory</p>
    <p>Best caching effect when memory is abundant</p>
    <p>Memory wastage due to duplicated caching</p>
    <p>Overly aggressive prefetching</p>
    <p>Best chance for cache deduplication  High overhead of context switching</p>
  </div>
  <div class="page">
    <p>2012 IBM Corporation</p>
    <p>Possible Cache Configurations</p>
    <p>Host=off, Guest=on</p>
    <p>Host=off, Guest=off</p>
    <p>Host=on, Guest=on</p>
    <p>Host=on, Guest=off</p>
    <p>Guests have the most accurate knowledge about what blocks to cache</p>
    <p>Loses chances of content-based deduplication</p>
    <p>The host cannot help its guests in caching even when it has abundant memory</p>
    <p>Best caching effect when memory is abundant</p>
    <p>Memory wastage due to duplicated caching</p>
    <p>Overly aggressive prefetching</p>
    <p>No memory usage for caching at all  All data accesses directly go to disk</p>
    <p>Best chance for cache deduplication  High overhead of context switching</p>
  </div>
  <div class="page">
    <p>2012 IBM Corporation</p>
    <p>Possible Cache Configurations</p>
    <p>Host=off, Guest=on</p>
    <p>Host=off, Guest=off</p>
    <p>Host=on, Guest=on</p>
    <p>Host=on, Guest=off</p>
    <p>Guests have the most accurate knowledge about what blocks to cache</p>
    <p>Loses chances of content-based deduplication</p>
    <p>The host cannot help its guests in caching even when it has abundant memory</p>
    <p>Best caching effect when memory is abundant</p>
    <p>Memory wastage due to duplicated caching</p>
    <p>Overly aggressive prefetching</p>
    <p>No memory usage for caching at all  All data accesses directly go to disk</p>
    <p>Best chance for cache deduplication  High overhead of context switching</p>
    <p>None of them is a good exclusive caching solution</p>
  </div>
  <div class="page">
    <p>2012 IBM Corporation</p>
    <p>Related Work on VM Memory Optimization</p>
    <p>Memory ballooning  Guests which underutilize allocated memory put unused memory pages into balloons, which</p>
    <p>are returned to the host and allocated to other guests under memory pressure  Balances memory allocation rather than saving overall memory usage; can be used together</p>
    <p>with our approach  Waldspurger, Memory resource management in VMware ESX server, OSDI 02</p>
    <p>Content-aware page sharing  Separate processes scan the entire memory space, hash each memory page, and merge all</p>
    <p>identical pages  Introduces high CPU overhead, and misses short-lived sharing opportunities; can be used</p>
    <p>together with our approach  Waldspurger, Memory resource management in VMware ESX server, OSDI 02  Mis et. al., Satori: Enlightened page sharing, USENIX ATC 09  Wood et. al., Memory buddies: exploiting page sharing for smart colocation in virtualized data</p>
    <p>centers, ACM VEE 09</p>
    <p>Exclusive / Cooperative caching  Avoid duplicated caching through exchanging hints or eviction information  Not widely used due to high overhead of knowledge exchange  Wong et. al., My cache or yours? Making storage more exclusive, USENIX ATC 02</p>
  </div>
  <div class="page">
    <p>2012 IBM Corporation</p>
    <p>Design Rationale</p>
    <p>Observation Fundamental difficulty of</p>
    <p>memory optimization is the need for frequent knowledge collection and exchange</p>
    <p>Use functional partitioning? Define a simple rule that all cache</p>
    <p>components can understand and follow</p>
    <p>The partitioning rule needs to consider characteristics of guest and host caches</p>
  </div>
  <div class="page">
    <p>2012 IBM Corporation</p>
    <p>Main Ideas</p>
    <p>Let the host cache keep the base image data  Multiple VM guests starting from the same image can naturally share the cached image data  High similarity among different VM images (~70% with 4KB chunks and ~50% with 16KB</p>
    <p>chunks)</p>
    <p>C om</p>
    <p>pr es</p>
    <p>si on</p>
    <p>ra tio</p>
    <p>Number of generated images</p>
    <p>Let each guest cache keep its own private data (newly generated after launching)  Much lower opportunity of content-based sharing  Better suited for individual guest caches for performance isolation</p>
  </div>
  <div class="page">
    <p>2012 IBM Corporation</p>
    <p>System Architecture</p>
    <p>Guest Cache</p>
    <p>Guest Disk (Virtual)</p>
    <p>Host Cache</p>
    <p>Host Disk (Hard Disk Drive)</p>
    <p>Guest Cache</p>
    <p>Guest Disk (Virtual)</p>
    <p>I/O Virtualization Driver</p>
    <p>Image or Private?</p>
    <p>Read Requests</p>
    <p>Guest-level</p>
    <p>Host-level</p>
    <p>P</p>
    <p>I</p>
    <p>Read Requests Image or Private?</p>
    <p>I P</p>
    <p>normal I/O path direct I/O path</p>
  </div>
  <div class="page">
    <p>2012 IBM Corporation</p>
    <p>Small Is Big</p>
    <p>Responsibility of each cache: Smaller</p>
    <p>Overall effective cache size: Bigger</p>
    <p>Other advantages  Instant memory saving  No need for scanning or additional</p>
    <p>guest/host communication</p>
    <p>Required change to existing software: Small  15 lines of new/modified code</p>
    <p>Achieved performance improvements: Big  More than 40% performance gains in high</p>
    <p>memory pressure settings</p>
  </div>
  <div class="page">
    <p>2012 IBM Corporation</p>
    <p>Implementation</p>
    <p>Caching Private Data on Guest  Current implementation for PoC</p>
    <p>Determine wether a request is for private data by checking the m_time of the file  For a private data request, follow the POSIX O_DIRECT path to issue a direct I/O request to the</p>
    <p>guest disk  When data is ready, it is directly transferred from the host cache to the application</p>
    <p>Saves space in the guest cache Avoids an unnecessary memory copy</p>
    <p>Issues and potential upgrades  m_time is on the granularity of entire files</p>
    <p>Need more fine-grained determination based on the modification time of each page</p>
    <p>O_DIRECT requires an I/O requests offset and size to be aligned with filesystem block size Need mitigations to the alignment restrictions</p>
    <p>Current implementation for PoC  Base image files are opened in normal mode  Guest private data files (e.g., qcow2) are opened in direct I/O mode, using the O_DIRECT flag</p>
  </div>
  <div class="page">
    <p>2012 IBM Corporation</p>
    <p>Preliminary Results -- Transaction Processing Workload</p>
    <p>R e q u e s t s / S e c o n d</p>
    <p>Number and Configuration of VMs</p>
    <p>VM=ON, Host=OFF VM=ON, Host=ON VM=ON, Host=I VM=P, Host=ON VM=P, Host=I</p>
    <p>Throughput of IBM DayTrader benchmark</p>
  </div>
  <div class="page">
    <p>2012 IBM Corporation</p>
    <p>Preliminary Results -- Big Data</p>
    <p>Ru n</p>
    <p>Ti me</p>
    <p>( Se</p>
    <p>co nd</p>
    <p>s)</p>
    <p>Number and Configuration of VMs</p>
    <p>VM=A, Host=N VM=A, Host=A VM=A, Host=I VM=P, Host=A VM=P, Host=I</p>
    <p>Runtime of Hadoop sort benchmark</p>
  </div>
  <div class="page">
    <p>2012 IBM Corporation</p>
    <p>More Future Directions</p>
    <p>I/O profiling for cloud applications  How much % of I/O is for base image and private data respectively?  Different access patterns for base image and private data?</p>
    <p>Adaptive caching policies based on memory availability  When guest memory is abundant, its better to cache all data for faster access  When host memory is abundant, its better to help guests cache their private data</p>
    <p>Policy customization  Per-guest caching policies when facing a mixed I/O workload</p>
    <p>I/O signature based on history data</p>
    <p>Performance isolation on the host  Upper limit for the amount of memory to be used by a single guest/image</p>
  </div>
  <div class="page">
    <p>2012 IBM Corporation</p>
    <p>Summary</p>
    <p>Addressing the problem of efficient VM I/O caching</p>
    <p>Using the functional partitioning principle The physical host uses more memory to cache base image data</p>
    <p>Each VM guest uses more memory to cache its private data</p>
    <p>Big performance gains from simple changes</p>
    <p>Questions? Please send email to Zhe Zhang</p>
    <p>(zhezhang@us.ibm.com)</p>
  </div>
</Presentation>
