<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>IPAPI: Designing an Improved Provenance API</p>
    <p>Lucian Carata</p>
    <p>Lucian Carata, Ripduman Sohan, Andrew Rice, Andy Hopper</p>
  </div>
  <div class="page">
    <p>Why do we need provenance APIs?</p>
    <p>* 108</p>
    <p>Application semantics</p>
    <p>System semantics</p>
    <p>Bottom up</p>
    <p>Top down</p>
    <p>Observed Provenance Disclosed Provenance (APIs)</p>
  </div>
  <div class="page">
    <p>Why do we need better provenance APIs?</p>
    <p>Current approaches: CPL, DPAPI*</p>
    <p>Centralized philosophy: provenance far away from data</p>
    <p>Do not really consider:</p>
    <p>Sub-file granularities  Automation  Pre-existing provenance data (e.g. logs)</p>
  </div>
  <div class="page">
    <p>Why do we need better provenance APIs?</p>
    <p>We need flexibility/generality to drive adoption</p>
    <p>less infrastructure requirements (e.g db services)  more clear guarantees (completeness, durability,</p>
    <p>overheads); explicit tradeoffs</p>
  </div>
  <div class="page">
    <p>Overview: IPAPI</p>
    <p>A C++ library that you link into your application, some tools to manage provenance.</p>
    <p>Not dependent on any existing system services</p>
  </div>
  <div class="page">
    <p>Overview: IPAPI</p>
    <p>Decentralized (distributed provenance repositories)  Provenance is closer to data (and can move</p>
    <p>together with it)</p>
    <p>Developed with automation in mind:  how can other applications use the provenance disclosed</p>
    <p>by my application?</p>
  </div>
  <div class="page">
    <p>IPAPI Structure</p>
    <p>App</p>
    <p>libIPAPI Storage driver</p>
    <p>.prov</p>
    <p>data input output</p>
    <p>context</p>
    <p>plugins</p>
    <p>Link with lipapi and include ipapi.h in one of your source files.</p>
    <p>You are now tracking (basic) process provenance  Almost no overhead (minimal increase in startup time)  Need more? Actually call the API functions.</p>
  </div>
  <div class="page">
    <p>IPAPI Structure</p>
    <p>App</p>
    <p>libIPAPI Storage driver</p>
    <p>.prov</p>
    <p>data input output</p>
    <p>context</p>
    <p>App</p>
    <p>libIPAPI</p>
    <p>Focusing in on the interface offered by the API</p>
    <p>Application calling IPAPI</p>
  </div>
  <div class="page">
    <p>IPAPI Structure</p>
    <p>App</p>
    <p>libIPAPI</p>
    <p>input</p>
    <p>context</p>
    <p>ping</p>
    <p>libIPAPI</p>
    <p>Active Passive</p>
    <p>Create Namespace: OS::ping</p>
    <p>Linux debian 2.6.24-1-686 #1 SMP :: 7853 ID</p>
    <p>An entity model that maps to system objects (processes, files, pipes, sockets)</p>
    <p>standalone, dependent, persistent, transient</p>
    <p>Abstractly tracks granularity</p>
  </div>
  <div class="page">
    <p>IPAPI Structure</p>
    <p>App</p>
    <p>libIPAPI</p>
    <p>input</p>
    <p>context</p>
    <p>ping</p>
    <p>libIPAPI</p>
    <p>Annotate</p>
    <p>k/v k/v</p>
    <p>Relate</p>
    <p>k/v k/v</p>
    <p>k/v k/v</p>
    <p>foreign key</p>
    <p>depends_on</p>
    <p>Active Passive</p>
    <p>Namespace: OS::ping</p>
  </div>
  <div class="page">
    <p>Example</p>
    <p>Namespace: OS::myapp</p>
    <p>k/v k/v</p>
    <p>ifstream cfgin(config.in); cfgin&gt;&gt;fname; ifstream in(fname); // process in and write to out ofstream out(out.dat);</p>
    <p>This program gets the name of its input from a configuration file</p>
    <p>configp inputp outputp</p>
    <p>pk: conf.in k/v k/v</p>
    <p>pk: file.in</p>
    <p>foreign key</p>
    <p>causal control</p>
    <p>Applications are able to create their own provenance-aware objects. They need to respect the is_prov_aware trait</p>
    <p>Pobject&lt;ifstream&gt; configp, inputp; Pobject&lt;ofstream&gt; outputp;</p>
    <p>outputp.obj_relation(CAUSAL, inputp);</p>
    <p>configp.addkv(inputf,file.in); inputp.pk.key_relation(configp,inputf);</p>
    <p>inputf: file.in</p>
    <p>myapp</p>
  </div>
  <div class="page">
    <p>Some Design Decisions</p>
    <p>App</p>
    <p>libIPAPI Storage driver</p>
    <p>.prov</p>
    <p>data input output</p>
    <p>context</p>
    <p>.prov</p>
    <p>Repository format Extensibility</p>
    <p>plugins</p>
    <p>+ flat object structure, identified by hashes</p>
    <p>+ multiple hierarchical views on top (namespaces)</p>
  </div>
  <div class="page">
    <p>Some Design Decisions - Persistence</p>
    <p>App</p>
    <p>libIPAPI Storage driver</p>
    <p>.prov</p>
    <p>data input output</p>
    <p>context</p>
    <p>plugins Storage driver</p>
    <p>Persistence</p>
    <p>shm</p>
    <p>Transaction log</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>IPAPI is developed in order to experiment with alternative provenance systems: ones which are flexible, extensible and work in distributed environments</p>
    <p>Clear understanding of granularity boundaries</p>
    <p>You only pay for what you get overheads</p>
    <p>Provenance-awareness at object level</p>
  </div>
  <div class="page">
    <p>Thank you! lucian.carata@cl.cam.ac.uk</p>
  </div>
</Presentation>
