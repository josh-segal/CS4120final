<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>An Evolutionary Study of Linux</p>
    <p>Memory Management for Fun and Profit</p>
    <p>Jian Huang</p>
    <p>Moinuddin K. Qureshi Karsten Schwan</p>
  </div>
  <div class="page">
    <p>Virtual Memory: A Long History</p>
    <p>DRAM Disk</p>
    <p>Physical Hardware</p>
  </div>
  <div class="page">
    <p>Virtual Memory: A Long History</p>
    <p>Virtual Memory</p>
    <p>(per process)</p>
    <p>DRAM Disk</p>
    <p>Physical Hardware</p>
  </div>
  <div class="page">
    <p>Virtual Memory: A Long History</p>
    <p>Virtual Memory</p>
    <p>(per process)</p>
    <p>DRAM Disk</p>
    <p>Physical Hardware</p>
  </div>
  <div class="page">
    <p>Virtual Memory: A Long History</p>
    <p>Virtual Memory</p>
    <p>(per process)</p>
    <p>DRAM Disk</p>
    <p>Physical Hardware</p>
    <p>DevelopmentOS Core Component</p>
    <p>+</p>
  </div>
  <div class="page">
    <p>Virtual Memory: A Long History</p>
    <p>Virtual Memory</p>
    <p>(per process)</p>
    <p>DRAM Disk</p>
    <p>Physical Hardware</p>
    <p>Pervasively UsedDevelopmentOS Core Component</p>
    <p>+</p>
  </div>
  <div class="page">
    <p>Why Memory Manager Study Matters?</p>
    <p>Features &amp; Functions</p>
  </div>
  <div class="page">
    <p>Why Memory Manager Study Matters?</p>
    <p>Features &amp; Functions Hardware Support</p>
  </div>
  <div class="page">
    <p>Why Memory Manager Study Matters?</p>
    <p>Features &amp; Functions Hardware Support System Reliability</p>
  </div>
  <div class="page">
    <p>Why Memory Manager Study Matters?</p>
    <p>Features &amp; Functions Hardware Support System Reliability</p>
    <p>Study on Memory Manager</p>
  </div>
  <div class="page">
    <p>Why Memory Manager Study Matters?</p>
    <p>Features &amp; Functions Hardware Support System Reliability</p>
    <p>Study on Memory Manager Building Better Memory Manager</p>
  </div>
  <div class="page">
    <p>On the Study of Memory Management</p>
    <p>Understanding the Linux Virtual Memory Manager [Mel Gorman, July 9, 2007]</p>
  </div>
  <div class="page">
    <p>On the Study of Memory Management</p>
    <p>Understanding the Linux Virtual Memory Manager [Mel Gorman, July 9, 2007]</p>
    <p>Approach: Source code analysis, Linux 2.4, 2.6</p>
  </div>
  <div class="page">
    <p>Milestone</p>
    <p>On the Study of Memory Management</p>
    <p>Understanding the Linux Virtual Memory Manager [Mel Gorman, July 9, 2007]</p>
    <p>Approach: Source code analysis, Linux 2.4, 2.6</p>
  </div>
  <div class="page">
    <p>Milestone</p>
    <p>On the Study of Memory Management</p>
    <p>Understanding the Linux Virtual Memory Manager [Mel Gorman, July 9, 2007]</p>
    <p>Approach: Source code analysis, Linux 2.4, 2.6</p>
    <p>Our Focus: Patch study, Linux 2.6  4.0</p>
  </div>
  <div class="page">
    <p>Milestone</p>
    <p>On the Study of Memory Management</p>
    <p>Understanding the Linux Virtual Memory Manager [Mel Gorman, July 9, 2007]</p>
    <p>Approach: Source code analysis, Linux 2.4, 2.6</p>
    <p>Our Focus: Patch study, Linux 2.6  4.0</p>
    <p>Pattern Memory Bug</p>
    <p>+ Optimization</p>
    <p>+ Semantic</p>
    <p>+</p>
  </div>
  <div class="page">
    <p>Preview of Our Findings</p>
    <p>Code changes are highly concentrated around the key functions</p>
    <p>80% of patches  25% of its source code</p>
    <p>......</p>
  </div>
  <div class="page">
    <p>Preview of Our Findings</p>
    <p>Code changes are highly concentrated around the key functions</p>
    <p>80% of patches  25% of its source code</p>
    <p>......</p>
    <p>Memory error  Checking  Concurrency  Logic  Programming</p>
    <p>Memory errors: Null pointer &amp; page alignment</p>
    <p>Complex page states  Checking &amp; logic bugs</p>
    <p>......</p>
  </div>
  <div class="page">
    <p>Preview of Our Findings</p>
    <p>Code changes are highly concentrated around the key functions</p>
    <p>80% of patches  25% of its source code</p>
    <p>......</p>
    <p>Memory error  Checking  Concurrency  Logic  Programming</p>
    <p>Memory errors: Null pointer &amp; page alignment</p>
    <p>Complex page states  Checking &amp; logic bugs</p>
    <p>......</p>
    <p>Data structures -- Policy trade-off -- Fast path</p>
    <p>4 data structures, 5 design trade-offs, 8 types of fast paths</p>
    <p>......</p>
  </div>
  <div class="page">
    <p>Preview of Our Findings</p>
    <p>Code changes are highly concentrated around the key functions</p>
    <p>80% of patches  25% of its source code</p>
    <p>......</p>
    <p>Memory error  Checking  Concurrency  Logic  Programming</p>
    <p>Memory errors: Null pointer &amp; page alignment</p>
    <p>Complex page states  Checking &amp; logic bugs</p>
    <p>......</p>
    <p>Data structures -- Policy trade-off -- Fast path</p>
    <p>4 data structures, 5 design trade-offs, 8 types of fast paths</p>
    <p>......</p>
    <p>35 key functionalities in 13 hot files</p>
    <p>The well-developed memory allocators still have many checking &amp; lock bugs</p>
    <p>......</p>
  </div>
  <div class="page">
    <p>Methodology Used in Our Study</p>
    <p>Memory Allocation</p>
    <p>Virtual Memory Management</p>
    <p>Resource Controller Garbage Collection</p>
    <p>Swapping</p>
    <p>Page Cache &amp; Write-back</p>
    <p>Exception Handling Misc (e.g., data structure)</p>
  </div>
  <div class="page">
    <p>Methodology Used in Our Study</p>
    <p>Memory Allocation</p>
    <p>Virtual Memory Management</p>
    <p>Resource Controller Garbage Collection</p>
    <p>Swapping</p>
    <p>Page Cache &amp; Write-back</p>
    <p>Exception Handling Misc (e.g., data structure)</p>
  </div>
  <div class="page">
    <p>Methodology Used in Our Study</p>
    <p>Patches</p>
    <p>Description Follow-up</p>
    <p>Discussions Source Code</p>
    <p>Analysis</p>
  </div>
  <div class="page">
    <p>Methodology Used in Our Study</p>
    <p>Patches</p>
    <p>Description Follow-up</p>
    <p>Discussions Source Code</p>
    <p>Analysis</p>
    <p>BugID</p>
    <p>Commit Time</p>
    <p>Component Type Causes</p>
    <p>Involved Functions</p>
    <p>MPatch</p>
    <p>Labeling &amp; MChecker</p>
  </div>
  <div class="page">
    <p>How Is the Memory Manager Changed?</p>
    <p>L in</p>
    <p>e s</p>
    <p>o f</p>
    <p>C o</p>
    <p>d e (</p>
    <p>x1 0</p>
    <p>)</p>
    <p>Linux version (released year)</p>
  </div>
  <div class="page">
    <p>How Is the Memory Manager Changed?</p>
    <p>L in</p>
    <p>e s</p>
    <p>o f</p>
    <p>C o</p>
    <p>d e (</p>
    <p>x1 0</p>
    <p>)</p>
    <p>Linux version (released year)</p>
    <p>The LoC has increased by 60% since Linux 2.6.32.</p>
  </div>
  <div class="page">
    <p>Where Is the Memory Manager Changing?</p>
  </div>
  <div class="page">
    <p>Where Is the Memory Manager Changing?</p>
    <p>Memory Manager Components</p>
  </div>
  <div class="page">
    <p>Where Is the Memory Manager Changing?</p>
    <p>Linux Version</p>
  </div>
  <div class="page">
    <p>Where Is the Memory Manager Changing?</p>
    <p>Number of Committed Patches</p>
  </div>
  <div class="page">
    <p>Where Is the Memory Manager Changing?</p>
  </div>
  <div class="page">
    <p>Where Is the Memory Manager Changing?</p>
  </div>
  <div class="page">
    <p>Where Is the Memory Manager Changing?</p>
  </div>
  <div class="page">
    <p>Where Is the Memory Manager Changing?</p>
  </div>
  <div class="page">
    <p>Where Is the Memory Manager Changing?</p>
  </div>
  <div class="page">
    <p>Where Is the Memory Manager Changing?</p>
  </div>
  <div class="page">
    <p>Where Is the Memory Manager Changing?</p>
  </div>
  <div class="page">
    <p>P e rc</p>
    <p>e n</p>
    <p>ta g</p>
    <p>e (</p>
    <p>% )</p>
    <p>Linux version (released year)</p>
    <p>Bug Code Maintenance Optimization New Feature</p>
    <p>Why Is the Memory Manager Changed?</p>
  </div>
  <div class="page">
    <p>P e rc</p>
    <p>e n</p>
    <p>ta g</p>
    <p>e (</p>
    <p>% )</p>
    <p>Linux version (released year)</p>
    <p>Code Maintenance New Feature</p>
    <p>Why Is the Memory Manager Changed?</p>
  </div>
  <div class="page">
    <p>P e rc</p>
    <p>e n ta</p>
    <p>g e</p>
    <p>( %</p>
    <p>)</p>
    <p>Linux version (released year)</p>
    <p>Bug Optimization</p>
    <p>Why Is the Memory Manager Changed?</p>
  </div>
  <div class="page">
    <p>On the Bugs in Memory Manager</p>
  </div>
  <div class="page">
    <p>On the Bugs in Memory Manager</p>
    <p>Types of Memory Bugs</p>
  </div>
  <div class="page">
    <p>On the Bugs in Memory Manager</p>
    <p>Memory Manager Component</p>
  </div>
  <div class="page">
    <p>On the Bugs in Memory Manager</p>
    <p>Memory Allocation: 26%, Virtual Memory Management: 22%, GC: 14%</p>
  </div>
  <div class="page">
    <p>On the Bugs in Memory Manager</p>
  </div>
  <div class="page">
    <p>On the Bugs in Memory Manager</p>
    <p>Page alignment</p>
    <p>Null pointer</p>
  </div>
  <div class="page">
    <p>On the Bugs in Memory Manager</p>
    <p>Page alignment</p>
    <p>Null pointer</p>
    <p>Inappropriate check</p>
    <p>Missing check</p>
    <p>Wrong check</p>
  </div>
  <div class="page">
    <p>On the Bugs in Memory Manager</p>
    <p>Page alignment</p>
    <p>Null pointer</p>
    <p>Inappropriate check</p>
    <p>Missing check</p>
    <p>Wrong check</p>
    <p>Lock contention</p>
    <p>Missing lock</p>
  </div>
  <div class="page">
    <p>On the Bugs in Memory Manager</p>
    <p>Page alignment</p>
    <p>Null pointer</p>
    <p>Inappropriate check</p>
    <p>Missing check</p>
    <p>Wrong check</p>
    <p>Lock contention</p>
    <p>Missing lock</p>
    <p>Fault handler</p>
    <p>State update</p>
    <p>Case-by-case</p>
  </div>
  <div class="page">
    <p>On the Bugs in Memory Manager</p>
    <p>Page alignment</p>
    <p>Null pointer</p>
    <p>Inappropriate check</p>
    <p>Missing check</p>
    <p>Wrong check</p>
    <p>Lock contention</p>
    <p>Missing lock</p>
    <p>Fault handler</p>
    <p>State update</p>
    <p>Case-by-case</p>
    <p>API</p>
    <p>Misc</p>
  </div>
  <div class="page">
    <p>Memory Bugs: Case Studies</p>
    <p>Page Alignment</p>
    <p>mm/nommu.c</p>
    <p>@@ -1762,6 +1765,8 @@ unsigned long do_mremap(unsigned long addr,</p>
    <p>struct vm_area_struct *vma;</p>
    <p>/* insanity checks first */</p>
    <p>if (old_len == 0 || new_len == 0)</p>
    <p>return (unsigned long) -EINVAL;</p>
  </div>
  <div class="page">
    <p>Memory Bugs: Case Studies</p>
    <p>Page Alignment</p>
    <p>mm/nommu.c</p>
    <p>@@ -1762,6 +1765,8 @@ unsigned long do_mremap(unsigned long addr,</p>
    <p>struct vm_area_struct *vma;</p>
    <p>/* insanity checks first */</p>
    <p>if (old_len == 0 || new_len == 0)</p>
    <p>return (unsigned long) -EINVAL;</p>
    <p>Bug: device drivers mmap() failed.</p>
    <p>Cause: NOMMU does not do page_align(), which is inconsistent with MMU arch.</p>
  </div>
  <div class="page">
    <p>Memory Bugs: Case Studies</p>
    <p>Page Alignment</p>
    <p>mm/nommu.c</p>
    <p>@@ -1762,6 +1765,8 @@ unsigned long do_mremap(unsigned long addr,</p>
    <p>struct vm_area_struct *vma;</p>
    <p>/* insanity checks first */</p>
    <p>+ old_len = PAGE_ALIGN(old_len);</p>
    <p>+ new_len = PAGE_ALIGN(new_len); if (old_len == 0 || new_len == 0)</p>
    <p>return (unsigned long) -EINVAL;</p>
    <p>Bug: device drivers mmap() failed.</p>
    <p>Cause: NOMMU does not do page_align(), which is inconsistent with MMU arch.</p>
  </div>
  <div class="page">
    <p>Memory Bugs: Case Studies</p>
    <p>Checking</p>
    <p>mm/bootmem.c</p>
    <p>@@ -156,21 +157,31 @@ static void __init</p>
    <p>free_bootmem_core(bootmem_data_t *bdata, unsigned long addr,</p>
  </div>
  <div class="page">
    <p>Memory Bugs: Case Studies</p>
    <p>Checking</p>
    <p>mm/bootmem.c</p>
    <p>@@ -156,21 +157,31 @@ static void __init</p>
    <p>free_bootmem_core(bootmem_data_t *bdata, unsigned long addr,</p>
    <p>Bug: free pages wrongly.</p>
    <p>Cause: miss boundary checking.</p>
  </div>
  <div class="page">
    <p>Memory Bugs: Case Studies</p>
    <p>Checking</p>
    <p>mm/bootmem.c</p>
    <p>@@ -156,21 +157,31 @@ static void __init</p>
    <p>free_bootmem_core(bootmem_data_t *bdata, unsigned long addr,</p>
    <p>+ BUG_ON(!size);</p>
    <p>+</p>
    <p>+ /* out range */</p>
    <p>+ if (addr + size &lt; bdata-&gt;node_boot_start ||</p>
    <p>+ PFN_DOWN(addr) &gt; bdata-&gt;node_low_pfn)</p>
    <p>+ return;</p>
    <p>Bug: free pages wrongly.</p>
    <p>Cause: miss boundary checking.</p>
  </div>
  <div class="page">
    <p>Memory Optimizations</p>
    <p>Radix Tree Red-black Tree Bitmap List</p>
    <p>Data Structures</p>
  </div>
  <div class="page">
    <p>Memory Optimizations</p>
    <p>Radix Tree Red-black Tree Bitmap List</p>
    <p>Data Structures</p>
    <p>Decentralize data structures: per-core/per-node/per-device approaches.</p>
  </div>
  <div class="page">
    <p>Memory Optimizations</p>
    <p>Radix Tree Red-black Tree Bitmap List</p>
    <p>Data Structures</p>
    <p>Latency Vs. Throughput Synchronous Vs. Asynchronous</p>
    <p>Lazy Vs. Non-lazy Local Vs. Global Fairness Vs. Performance</p>
  </div>
  <div class="page">
    <p>Memory Optimizations</p>
    <p>Radix Tree Red-black Tree Bitmap List</p>
    <p>Data Structures</p>
    <p>Latency Vs. Throughput Synchronous Vs. Asynchronous</p>
    <p>Lazy Vs. Non-lazy Local Vs. Global Fairness Vs. Performance</p>
    <p>Code Reduction Lockless Optimization Inline</p>
    <p>Code Shifting</p>
    <p>New Function</p>
    <p>State Caching Group Execution Optimistic Barrier</p>
  </div>
  <div class="page">
    <p>Memory Optimizations: Policy Trade-offs</p>
    <p>Fairness Vs. Performance</p>
    <p>Lazy Vs. Non-lazy</p>
    <p>Synchronous Vs. Asynchronous</p>
    <p>Local Vs. Global</p>
  </div>
  <div class="page">
    <p>Memory Optimizations: Policy Trade-offs</p>
    <p>Fairness Vs. Performance</p>
    <p>Lazy Vs. Non-lazy</p>
    <p>Synchronous Vs. Asynchronous</p>
    <p>Local Vs. Global</p>
    <p>the latencies of memory operations.</p>
  </div>
  <div class="page">
    <p>Memory Optimizations: Policy Trade-offs</p>
    <p>Fairness Vs. Performance</p>
    <p>Lazy Vs. Non-lazy</p>
    <p>Synchronous Vs. Asynchronous</p>
    <p>Local Vs. Global</p>
    <p>Lazy policy: delay expensive operations.</p>
    <p>May change the execution order of functions.</p>
  </div>
  <div class="page">
    <p>Memory Optimizations: Policy Trade-offs</p>
    <p>Fairness Vs. Performance</p>
    <p>Lazy Vs. Non-lazy</p>
    <p>Synchronous Vs. Asynchronous</p>
    <p>Local Vs. Global</p>
    <p>Lazy policy: delay expensive operations.</p>
    <p>May change the execution order of functions.</p>
    <p>vmalloc Lazy TLB flush, lazy unmapping</p>
    <p>mempolicy Lazy page migration between nodes</p>
    <p>huge_memory Lazy huge zero page allocation</p>
  </div>
  <div class="page">
    <p>Memory Optimizations: Policy Trade-offs</p>
    <p>Fairness Vs. Performance</p>
    <p>Lazy Vs. Non-lazy</p>
    <p>Synchronous Vs. Asynchronous</p>
    <p>Local Vs. Global</p>
    <p>Mostly considered in</p>
    <p>memory allocation &amp; GC</p>
  </div>
  <div class="page">
    <p>Memory Optimizations: Policy Trade-offs</p>
    <p>Fairness Vs. Performance</p>
    <p>Lazy Vs. Non-lazy</p>
    <p>Synchronous Vs. Asynchronous</p>
    <p>Local Vs. Global</p>
    <p>Async is popular,</p>
    <p>but be careful to its fault handlers!</p>
  </div>
  <div class="page">
    <p>Memory Optimizations: Policy Trade-offs</p>
    <p>Fairness Vs. Performance</p>
    <p>Lazy Vs. Non-lazy</p>
    <p>Synchronous Vs. Asynchronous</p>
    <p>Local Vs. Global</p>
    <p>Async is popular,</p>
    <p>but be careful to its fault handlers!</p>
    <p>E.g., early termination</p>
  </div>
  <div class="page">
    <p>Memory Optimizations: Policy Trade-offs</p>
    <p>Fairness Vs. Performance</p>
    <p>Lazy Vs. Non-lazy</p>
    <p>Synchronous Vs. Asynchronous</p>
    <p>Local Vs. Global Decentralizing global structures</p>
    <p>for better scalability</p>
  </div>
  <div class="page">
    <p>Memory Optimizations: Policy Trade-offs</p>
    <p>Fairness Vs. Performance</p>
    <p>Lazy Vs. Non-lazy</p>
    <p>Synchronous Vs. Asynchronous</p>
    <p>Local Vs. Global Decentralizing global structures</p>
    <p>for better scalability</p>
    <p>E.g., dynamic per-cpu allocator.</p>
  </div>
  <div class="page">
    <p>Memory Optimizations: Fast Path</p>
    <p>New Function</p>
    <p>Lockless Optimization</p>
    <p>State Caching</p>
    <p>Inline Code Shifting</p>
    <p>Group Execution Optimistic Barrier</p>
  </div>
  <div class="page">
    <p>Memory Optimizations: Fast Path</p>
    <p>New Function</p>
    <p>Lockless Optimization</p>
    <p>State Caching</p>
    <p>Inline Code Shifting</p>
    <p>Group Execution Optimistic Barrier</p>
    <p>Simplify the slow path logic</p>
  </div>
  <div class="page">
    <p>mm/memory.c</p>
    <p>@@ -303,8 +303,10 @@ static void __munlock_pagevec(</p>
    <p>if (PageLRU(page)) {</p>
    <p>lruvec = mem_cgroup_page_lruvec(page, zone);</p>
    <p>lru = page_lru(page);</p>
    <p>- get_page(page);</p>
    <p>+ /*</p>
    <p>+ * We already have pin from follow_page_mask()</p>
    <p>+ * so we can spare the get_page() here.</p>
    <p>+ */</p>
    <p>Memory Optimizations: Fast Path</p>
    <p>New Function</p>
    <p>Lockless Optimization</p>
    <p>State Caching</p>
    <p>Inline Code Shifting</p>
    <p>Group Execution Optimistic Barrier</p>
    <p>Simplify the slow path logic</p>
    <p>E.g., Avoid redundant get/put_page in munlock_vma_range as</p>
    <p>pages will not be referred anymore.</p>
  </div>
  <div class="page">
    <p>Memory Optimizations: Fast Path</p>
    <p>New Function</p>
    <p>Lockless Optimization</p>
    <p>State Caching</p>
    <p>Inline Code Shifting</p>
    <p>Group Execution Optimistic Barrier</p>
    <p>Reduce the usage of lock and atomic operations</p>
  </div>
  <div class="page">
    <p>Memory Optimizations: Fast Path</p>
    <p>New Function</p>
    <p>Lockless Optimization</p>
    <p>State Caching</p>
    <p>Inline Code Shifting</p>
    <p>Group Execution Optimistic Barrier</p>
    <p>Reduce the usage of lock and atomic operations</p>
    <p>E.g., lockless memory allocator in SLUB</p>
  </div>
  <div class="page">
    <p>Memory Optimizations: Fast Path</p>
    <p>New Function</p>
    <p>Lockless Optimization</p>
    <p>State Caching</p>
    <p>Inline Code Shifting</p>
    <p>Group Execution Optimistic Barrier</p>
    <p>Cache states to avoid expensive operations</p>
  </div>
  <div class="page">
    <p>Memory Optimizations: Fast Path</p>
    <p>New Function</p>
    <p>Lockless Optimization</p>
    <p>State Caching</p>
    <p>Inline Code Shifting</p>
    <p>Group Execution Optimistic Barrier</p>
    <p>Cache states to avoid expensive operations</p>
    <p>E.g., pre-calculate the number of online nodes vs. always</p>
    <p>calling expensive num_online_nodes</p>
  </div>
  <div class="page">
    <p>Memory Optimizations: Fast Path</p>
    <p>New Function</p>
    <p>Lockless Optimization</p>
    <p>State Caching</p>
    <p>Inline Code Shifting</p>
    <p>Group Execution Optimistic Barrier</p>
    <p>Move infrequently executed code from</p>
    <p>fast path to slow path</p>
  </div>
  <div class="page">
    <p>Memory Optimizations: Fast Path</p>
    <p>New Function</p>
    <p>Lockless Optimization</p>
    <p>State Caching</p>
    <p>Inline Code Shifting</p>
    <p>Group Execution Optimistic Barrier</p>
    <p>Move infrequently executed code from</p>
    <p>fast path to slow path</p>
    <p>E.g., in SLUB allocator, slow path executes the interrupt</p>
    <p>enable/disable handlers, fast path executes them only at fallback</p>
  </div>
  <div class="page">
    <p>Memory Semantics</p>
    <p>Memory Resource Controller</p>
    <p>memory cgroup</p>
    <p>charge/uncharge</p>
    <p>cgroup management</p>
    <p>memcontrol.c</p>
  </div>
  <div class="page">
    <p>Memory Semantics</p>
    <p>Memory Resource Controller</p>
    <p>memory cgroup</p>
    <p>charge/uncharge</p>
    <p>cgroup management</p>
    <p>memcontrol.c</p>
    <p>Bug: Concurrency issues</p>
  </div>
  <div class="page">
    <p>Memory Semantics</p>
    <p>Memory Resource Controller</p>
    <p>memory cgroup</p>
    <p>charge/uncharge</p>
    <p>cgroup management</p>
    <p>memcontrol.c</p>
    <p>Bug: Concurrency issues</p>
    <p>Cause: missing locks in charging &amp; uncharging pages (truncation, reclaim, swapout and migration)</p>
  </div>
  <div class="page">
    <p>Memory Semantics</p>
    <p>Virtual Memory Management</p>
    <p>memory policy</p>
  </div>
  <div class="page">
    <p>Memory Semantics</p>
    <p>Virtual Memory Management</p>
    <p>memory policy</p>
    <p>policy definition</p>
    <p>policy enforcement</p>
    <p>mempolicy.c</p>
  </div>
  <div class="page">
    <p>Memory Semantics</p>
    <p>Virtual Memory Management</p>
    <p>memory policy</p>
    <p>policy definition</p>
    <p>policy enforcement</p>
    <p>mempolicy.c</p>
    <p>Bug: policy enforcement failure</p>
  </div>
  <div class="page">
    <p>Memory Semantics</p>
    <p>Virtual Memory Management</p>
    <p>memory policy</p>
    <p>policy definition</p>
    <p>policy enforcement</p>
    <p>mempolicy.c</p>
    <p>Bug: policy enforcement failure</p>
    <p>Cause: missing check on page states &amp; statistics, e.g., whether a page is dirty, cache hit/miss rate</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Pattern Memory Bug</p>
    <p>+ Optimization</p>
    <p>+ Semantic</p>
    <p>+</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Pattern Memory Bug</p>
    <p>+ Optimization</p>
    <p>+ Semantic</p>
    <p>+</p>
    <p>Complex page states  Concurrency bugs  Simplified page management</p>
    <p>Fast path  Introduce new errors  Fast path verification</p>
    <p>Bugs in checking  Model checking for memory manager</p>
    <p>......</p>
  </div>
  <div class="page">
    <p>Jian Huang</p>
    <p>jian.huang@gatech.edu</p>
    <p>Moinuddin K. Qureshi Karsten Schwan</p>
    <p>Thanks!</p>
    <p>Q&amp;A</p>
  </div>
</Presentation>
