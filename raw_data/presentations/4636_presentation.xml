<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Characterization of TCC on Chip-Multiprocessors</p>
    <p>Austen McDonald, JaeWoongChung, HassanChafi,</p>
    <p>Chi CaoMinh, Brian D. Carlstrom, Lance Hammond,</p>
    <p>ChristosKozyrakis, and KunleOlukotun</p>
    <p>Stanford University</p>
    <p>http://tcc.stanford.edu/</p>
  </div>
  <div class="page">
    <p>September 19, 2005 2</p>
    <p>Take Away Points</p>
    <p>Parallel programming is hard</p>
    <p>Transactions make parallel programming easier  Knight 86, Herlihy 93Ananian 05, Moore 05, Rajwar 05</p>
    <p>Transactional Coherence and Consistency</p>
    <p>Contributions:</p>
    <p>Address basic challenges and explore design options.</p>
    <p>Gain the ease of TCC without significant loss of performance.</p>
    <p>or, Why are you sitting through this talk?</p>
  </div>
  <div class="page">
    <p>September 19, 2005 3</p>
    <p>The Problems of Parallel Programming</p>
    <p>Critical sections make programming hard  Coarse-grained locks: serialization</p>
    <p>Fine-grained locks: deadlocks</p>
    <p>Poor composability, not fault tolerant</p>
    <p>Parallel programming environment complex  Consistency models are complex</p>
    <p>Performance tuning requires detailed and difficultto-acquire data</p>
  </div>
  <div class="page">
    <p>September 19, 2005 4</p>
    <p>Enter Transactions</p>
    <p>Transactions provide non-blocking synchronization Large, programmer-definedatomic regions.</p>
    <p>Transactions simplify programming environment  Simplify reasoning about consistency</p>
    <p>Performance tuning is easier (Chafi 05 at ICS)</p>
    <p>Transactions enable speculative parallelism  Programmers identify suspected parallel regions</p>
    <p>Have you heard the gospel?</p>
  </div>
  <div class="page">
    <p>September 19, 2005 5</p>
    <p>TCC Execution Model All transactions, all the time.</p>
    <p>CPU 0 CPU 1 CPU 2</p>
    <p>Commit</p>
    <p>Arbitrate</p>
    <p>Execute</p>
    <p>Code</p>
    <p>Commit</p>
    <p>Arbitrate</p>
    <p>Execute</p>
    <p>Code</p>
    <p>Violate</p>
    <p>Execute</p>
    <p>Code</p>
    <p>ld 0xbeef Re</p>
    <p>Execute</p>
    <p>Code</p>
    <p>...</p>
    <p>ld 0xaaaa</p>
    <p>ld 0xbbbb</p>
    <p>...</p>
    <p>ld 0xbeef</p>
    <p>...</p>
    <p>...</p>
    <p>st 0xbeef</p>
    <p>...</p>
    <p>ld 0xdddd</p>
    <p>ld 0xeeee</p>
    <p>...</p>
  </div>
  <div class="page">
    <p>September 19, 2005 6</p>
    <p>CMP Environment</p>
    <p>CMP with simple CPUs</p>
    <p>write-back L1</p>
    <p>shared L2</p>
    <p>two wide, pipelined logical buses  16B bus, 3 cyc pipelined arbitration, 3 cycpipelined transfer</p>
    <p>Same CMP setup for TCC and MESI</p>
    <p>Changes for TCC support</p>
  </div>
  <div class="page">
    <p>September 19, 2005 7</p>
    <p>An Architecture for TCC</p>
    <p>Speculative state stored in caches</p>
    <p>Speculatively-Read Bits:</p>
    <p>ld 0xdeadbeef</p>
    <p>Speculatively-ModifiedBits:</p>
    <p>st 0xcafebabe</p>
    <p>Violation Detection:</p>
    <p>Compare incoming address to SR bits</p>
    <p>Commit:</p>
    <p>Read pointers from Store Address FIFO, flush data with SM bits set</p>
  </div>
  <div class="page">
    <p>September 19, 2005 8</p>
    <p>Other Implementations</p>
    <p>Speculative state in lower-level caches</p>
    <p>L2 and main memory</p>
    <p>Parallel commit</p>
    <p>More than one transaction commits at once</p>
    <p>Commit in place</p>
    <p>Flush writes only when needed</p>
    <p>Options may be useful for large-scale TCC.</p>
    <p>Simple is good enough in CMPs.</p>
  </div>
  <div class="page">
    <p>September 19, 2005 9</p>
    <p>Architectural Options</p>
    <p>We explored some architectural options</p>
    <p>Double buffering</p>
    <p>Simple, single buffering is sufficient</p>
    <p>Invalidate vs. update</p>
    <p>Doesnt matter for our applications</p>
    <p>Word-vs. line-level granularity</p>
    <p>Word-level is better due to false sharing</p>
    <p>Associative Overflows</p>
  </div>
  <div class="page">
    <p>September 19, 2005 10</p>
    <p>Associative Overflows</p>
    <p>Limited speculative state tracking</p>
    <p>Capacity overflows rare (Rajwar 05 handles them)</p>
    <p>Associative overflows the common case  Cant afford an expensive mechanism</p>
    <p>Simple victim cache</p>
    <p>N o rm a li z e d O v e rf lo w P e rc e n ta g e</p>
    <p>A-8 VC-0 A-16 VC-0 A-4 VC-4 A-4 VC-8 A-4 VC-16</p>
    <p>barnes equake tomcatv</p>
  </div>
  <div class="page">
    <p>September 19, 2005 11</p>
    <p>The Rest of the Talk</p>
    <p>Differences between TCC and MESI</p>
    <p>Performance Comparison</p>
    <p>Bandwidth Usage</p>
    <p>Speedup Summary</p>
    <p>In depth: MP3D</p>
    <p>The advantages of TCC on a difficult-to-parallelize program</p>
    <p>Staying awake?</p>
  </div>
  <div class="page">
    <p>September 19, 2005 12</p>
    <p>Differences between TCC and MESI</p>
    <p>Blocking, small regions</p>
    <p>Non-blocking, large, multi-object regions</p>
    <p>Synchronization</p>
    <p>Word-level</p>
    <p>Communicates often and more large chunks</p>
    <p>Speculatively parallel</p>
    <p>TCC</p>
    <p>Line-levelfalse sharing</p>
    <p>Coherence Granularity</p>
    <p>Communicates only when needed</p>
    <p>Coherence Frequency</p>
    <p>None in basic form</p>
    <p>Speculation</p>
    <p>MESI</p>
  </div>
  <div class="page">
    <p>September 19, 2005 13</p>
    <p>Performance Comparison</p>
    <p>Comparing TCC to MESI</p>
    <p>Scalability on applications tuned for MESI  Execution-driven simulation of SPECfp, SPLASH, SPLASH-2, SPECjbb</p>
    <p>Measures sustained performance vs. ease of parallelizing</p>
  </div>
  <div class="page">
    <p>September 19, 2005 14</p>
    <p>Bandwidth Usage</p>
    <p>Broadcasting commits does not hinder performance in a CMP</p>
    <p>On-chip bandwidth sufficient</p>
    <p>T C C</p>
    <p>S C C</p>
    <p>T C C</p>
    <p>S C C</p>
    <p>T C C</p>
    <p>S C C</p>
    <p>T C C</p>
    <p>S C C</p>
    <p>T C C</p>
    <p>S C C</p>
    <p>T C C</p>
    <p>S C C</p>
    <p>T C C</p>
    <p>S C C</p>
    <p>T C C</p>
    <p>S C C</p>
    <p>Idle</p>
    <p>Sending</p>
    <p>Arbitrating</p>
    <p>barnes equake mp3d ocean radix swim tomcatv water</p>
    <p>B u s U ti li z a ti o n</p>
    <p>M E S I</p>
    <p>M E S I</p>
    <p>M E S I</p>
    <p>M E S I</p>
    <p>M E S I</p>
    <p>M E S I</p>
    <p>M E S I</p>
    <p>M E S I</p>
  </div>
  <div class="page">
    <p>S e p te m b e r 19 , 2 0 0 5</p>
    <p>TCC-2 MESI-2</p>
    <p>TCC-4 MESI-4</p>
    <p>TCC-8 MESI-8</p>
    <p>TCC-16 MESI-16</p>
    <p>TCC-2 MESI-2</p>
    <p>TCC-4 MESI-4</p>
    <p>TCC-8 MESI-8</p>
    <p>TCC-16 MESI-16</p>
    <p>TCC-2 MESI-2</p>
    <p>TCC-4 MESI-4</p>
    <p>TCC-8 MESI-8</p>
    <p>TCC-16 MESI-16</p>
    <p>b a rn e s</p>
    <p>m p 3 d</p>
    <p>S P E C jb b</p>
    <p>P e rfo rm a n c e C o m p a riso n</p>
    <p>C o m p a rin g T C C to M E S I</p>
    <p>A p p lic a tio n a n d P ro c e s s o r C o u n t</p>
    <p>Speedup</p>
    <p>T C C</p>
    <p>M E S I</p>
  </div>
  <div class="page">
    <p>September 19, 2005 16</p>
    <p>In Depth: MP3D</p>
    <p>Rarefiedhypersonic flowsimulator</p>
    <p>Monte Carlo</p>
    <p>Molecules statically allocated to processors</p>
    <p>Causes false sharing</p>
    <p>Barrier-based synchronization (not many locks)</p>
    <p>N o t a c tu a l m p 3 d o u tp u t.</p>
  </div>
  <div class="page">
    <p>September 19, 2005 17</p>
    <p>T C C -2</p>
    <p>M E S I2</p>
    <p>T C C -4</p>
    <p>M E S I4</p>
    <p>T C C -8</p>
    <p>M E S I8</p>
    <p>T C C -1 6</p>
    <p>M E S I1 6</p>
    <p>Useful L1Miss Idle/Sync Commit/Communication Violation</p>
    <p>MP3D Results</p>
    <p>Execution time in MP3D.</p>
    <p>P e rc e n ta g e o f N o rm a li z e d</p>
    <p>E x e c u ti o n T im e</p>
  </div>
  <div class="page">
    <p>September 19, 2005 18</p>
    <p>Conclusions</p>
    <p>Transactions simplify parallel programming</p>
    <p>Contributions:</p>
    <p>We evaluated TCC for CMP systems</p>
    <p>TCC can be efficiently implemented in a simple manner</p>
    <p>Associative overflowshandled with a simple victim cache</p>
    <p>Compared performance against a MESI-based CMP</p>
    <p>TCC performs similarly</p>
    <p>Bandwidth requirements are not excessive</p>
    <p>TCC enables the ease of transactions without hindering performance</p>
  </div>
  <div class="page">
    <p>Questions?</p>
    <p>(whew!)</p>
  </div>
</Presentation>
