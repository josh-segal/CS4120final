<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Tryst: The Case for Confidential Service Discovery</p>
    <p>Jeffrey Pang CMU</p>
    <p>Ben Greenstein Intel Research</p>
    <p>Srinivasan Seshan CMU</p>
    <p>David Wetherall University of Washington, Intel Research</p>
    <p>Damon McCoy University of Colorado</p>
  </div>
  <div class="page">
    <p>Local service discovery (SD)</p>
    <p>Used to find:  802.11 networks  consumer electronics  local services  other applications</p>
  </div>
  <div class="page">
    <p>How SD is done today</p>
    <p>Services send announcements and/or clients send probes (typically via unencrypted broadcast)</p>
    <p>Important properties:  Plug-and-play networking</p>
    <p>Can proceed automatically without user input</p>
    <p>Disconnected operation  Requires only communication medium between client and service</p>
    <p>iTunes Bob is here Is iTunes Bob here?</p>
    <p>Bob is hereConnect to Bob</p>
  </div>
  <div class="page">
    <p>Problem 1: SD reveals inventory  The devices I have</p>
    <p>Problem: Phone pirates in seek and steal mission [Cambridge Evening News 2005]</p>
    <p>The applications I am running Problem: Apple Mac OS X mDNSResponder buffer overflow vulnerability [CERT 2007]</p>
    <p>Phone here</p>
    <p>iTunes here exploit</p>
  </div>
  <div class="page">
    <p>Problem 2: SD reveals identity  Announcements expose explicit identifiers</p>
    <p>Problem: Some services are private and want to be hidden</p>
    <p>Problem: Mobile services vulnerable to tracking</p>
    <p>iTunes Intel Bob is here</p>
    <p>Why is Bob over there?</p>
    <p>iTunes Intel Bob is here</p>
  </div>
  <div class="page">
    <p>Problem 3: SD reveals history  Probes can reveal services you have used</p>
    <p>Problem: Network names can be correlated with location (e.g., using a wardriving database)</p>
    <p>http://www.wigle.net Is 802.11 network</p>
    <p>djw here?</p>
  </div>
  <div class="page">
    <p>Prove I am Alice (e.g., credential)</p>
    <p>Prove I am Alices Network</p>
    <p>Association succeeded</p>
    <p>Problem 4: SD is not authenticated</p>
    <p>Authentication occurs only after SD  Problem: Anyone can elicit a response, even if they</p>
    <p>are not trusted to access the service</p>
    <p>Is Alices Network here?</p>
    <p>Alices Network is here</p>
    <p>Associate</p>
    <p>Association denied</p>
  </div>
  <div class="page">
    <p>Solution requirements</p>
    <p>Desired properties:  Confidentiality</p>
    <p>Hide contents that reveals type  Hide sender  Hide intended recipients</p>
    <p>Authenticity  Offer proof of identity</p>
    <p>Challenges:  Exposing information only to</p>
    <p>trusted clients/services  Clients and services may want</p>
    <p>to hide from third parties</p>
    <p>Plug-and-play networking, disconnected operation</p>
    <p>identityinventory history Is iTunes Bob here?</p>
    <p>Bob is hereConnect to Bob</p>
    <p>iTunes Bob is here</p>
  </div>
  <div class="page">
    <p>A public key protocol</p>
    <p>Probe Alice</p>
    <p>Client Service</p>
    <p>Key-private encryption (e.g., ElGamal but not RSA)</p>
    <p>KAlice</p>
    <p>Check signature:</p>
    <p>Try to decrypt</p>
    <p>K-1Alice</p>
    <p>KBob</p>
    <p>Based on [Abadi 04]</p>
    <p>K-1BobSign: timestamp</p>
  </div>
  <div class="page">
    <p>Problems</p>
    <p>Must obtain public keys for new services/clients  May be disconnected during discovery  Dont want to involve extra user action</p>
    <p>Must try to decrypt every message  Public key decryption is slow (&gt;100ms on typical AP)  adds jitter to relaying of other messages</p>
    <p>168x slower than 802.11 line-rate even on laptops  susceptible to low-rate denial-of-service attacks</p>
  </div>
  <div class="page">
    <p>Observations</p>
    <p>Must obtain public keys for new services/clients  Will have some relationship with those we trust  Can trust new services/clients in trusted domains</p>
    <p>Must try to decrypt every message</p>
  </div>
  <div class="page">
    <p>?</p>
    <p>Tryst: key establishment</p>
    <p>Trusted</p>
    <p>Trusts: alice@mac.com</p>
    <p>alice@mac.com/ds</p>
    <p>alice@mac.com/laptop</p>
    <p>bob@gmail.com/zune</p>
    <p>bob@gmail.com/psp</p>
    <p>bob@gmail.com/laptop</p>
    <p>Anonymous Identity Based Encryption</p>
    <p>Encrypt(public key=alice@mac.com/ipod, message)Key provider preloads devices=</p>
    <p>private key</p>
  </div>
  <div class="page">
    <p>Observations</p>
    <p>Must obtain public keys for new services/clients  Will have some relationship with those we trust  Can trust new services/clients in trusted domains</p>
    <p>Must try to decrypt every message  Common case is to rediscover known services  Can negotiate a secret symmetric key the first time</p>
  </div>
  <div class="page">
    <p>Tryst: a symmetric key protocol</p>
    <p>Probe Alice</p>
    <p>Client Service</p>
    <p>Symmetric encryption (e.g., AES)</p>
    <p>Check MAC:</p>
    <p>MAC: KShared</p>
    <p>KShared</p>
    <p>KShared</p>
    <p>timestamp</p>
    <p>Try to decrypt</p>
    <p>with each shared key</p>
    <p>KShared1 KShared2 KShared3</p>
  </div>
  <div class="page">
    <p>Observations</p>
    <p>Must obtain public keys for new services/clients  Will have some relationship with those we trust  Can trust new services/clients in trusted domains</p>
    <p>Must try to decrypt every message  Common case is to rediscover known services  Can negotiate a secret symmetric key the first time  Linkability at short timescales is usually OK  Can use temporary unlinkable addresses</p>
  </div>
  <div class="page">
    <p>Tryst: a symmetric key protocol</p>
    <p>Probe Alice</p>
    <p>Client Service</p>
    <p>Symmetric encryption (e.g., AES)</p>
    <p>Check MAC:</p>
    <p>MAC:</p>
    <p>AT-1A0 ATHash()</p>
    <p>KShared</p>
    <p>AT+1Hash()</p>
    <p>KShared</p>
    <p>secret</p>
    <p>KShared</p>
    <p>KShared</p>
    <p>KShared</p>
    <p>AT AT</p>
    <p>KShared</p>
    <p>Lookup AT in a table to get KShared</p>
    <p>timestamp</p>
    <p>Try to decrypt</p>
    <p>with each shared key</p>
    <p>KShared1 KShared2 KShared3</p>
  </div>
  <div class="page">
    <p>Ubiquitous clients and services may want privacy</p>
    <p>Service discovery exposes inventory, identity, and history</p>
    <p>Tryst helps enable confidential service discovery</p>
    <p>Outstanding challenges  Hiding other side channels (physical layer, message timing, size)</p>
    <p>Other mechanisms to automatically establish keys</p>
    <p>More efficient broadcast probes</p>
    <p>Conclusions</p>
  </div>
  <div class="page">
    <p>Backup Slides</p>
  </div>
  <div class="page">
    <p>Other key establishment methods</p>
    <p>Certificates (e.g., secure websites)  Neither client nor service can offer certificate first!</p>
    <p>Pairing (e.g., Bluetooth peripherals)  Can not always physically identify service  User must perform discovery before device does!</p>
    <p>Discovery is also used to find unknown services  We want to automatically expand the trust horizon  Tryst mechanisms:</p>
    <p>New services in trusted domains  New services trusted transitively</p>
  </div>
  <div class="page">
    <p>PublicParams, MasterSecret = Setup ()</p>
    <p>ciphertext = Encrypt (KAliceiPod, PublicParams, plaintext)</p>
    <p>plaintext = Decrypt (K-1AliceiPod, PublicParams, ciphertext)</p>
    <p>Anonymous identity based encryption</p>
    <p>publicly published known only by key provider</p>
    <p>alice@mac.com/ipod</p>
    <p>Extract(alice@mac.com/ipod, MasterSecret) =</p>
    <p>=</p>
    <p>Some assumptions over traditional public key crypto  Alice and Bob trust key provider not to reveal secret keys to third parties</p>
    <p>Can instead trust that no t of n providers collude (use threshold crypto)</p>
    <p>May also be able act as their own key providers (anonymity unproven)</p>
    <p>Revoking my public key implies changing my identity since identity = key</p>
    <p>Can instead use temporary identities (alice@mac.com/ipod.nov.2007)</p>
    <p>Only need to use protocol until first discovery</p>
    <p>[Boneh &amp; Franklin 01]</p>
  </div>
  <div class="page">
    <p>Tryst: key establishment</p>
    <p>Trusted</p>
    <p>?</p>
    <p>Strawman Solution</p>
    <p>x</p>
    <p>To alice</p>
    <p>x</p>
    <p>x</p>
  </div>
  <div class="page">
    <p>Projected probe processing delay</p>
    <p>Rough simulation based on:</p>
    <p>SIGCOMM 2004 (wifi probes)</p>
    <p>Soekris AP (265Mhz Geode)</p>
    <p>GnuPG crypto (~150ms/pkt)</p>
  </div>
  <div class="page">
    <p>Protocol message volume</p>
    <p>Each message encrypted for one recipient</p>
    <p>As many messages as intended recipients  Typically OK: E.G., 90% of WiFi clients probe for fewer</p>
    <p>than 12 unique network names [OSDI 2006 WiFi trace]</p>
    <p>Future work:  Efficient protocol to broadcast probes to many recipients</p>
  </div>
  <div class="page">
    <p>Key problem: messages can be linked</p>
    <p>Consistent naming enable correlation of SD messages  Opaque names prevent some problems but not all:</p>
    <p>Example: location can be correlated with other databases</p>
    <p>Is Juvenile Detention Classroom here?Is 010294859 here?</p>
  </div>
  <div class="page">
    <p>Related work</p>
    <p>SmokeScreen [Cox 07]  access control for discovering friends  Similar to symmetric key protocol  Uses online social network to exchange secret keys</p>
    <p>SSDS [Czerwinski 00]  secure service discovery architecture  Relies on trusted infrastructure  Not necessarily confidential</p>
    <p>Broadcast Encryption [Fiat 93]  encrypt message to many users  Making this private is an open problem</p>
    <p>JFK [Aiello 93]  efficient Internet key exchange  No service privacy    or not resilient to man-in-the-middle attacks</p>
  </div>
  <div class="page">
    <p>SD is widely used</p>
    <p>Example 1: Application Protocols (OSDI 2006)</p>
    <p>Example 2: 85% devices send WiFi discovery probes (SIGCOMM 2004)</p>
  </div>
  <div class="page">
    <p>Problem 3: SD reveals history  Probes can reveal services you have used</p>
    <p>Problem: Network names can be correlated with location (e.g., using a wardriving database)</p>
    <p>All 4 known home networks located to within 2 blocks</p>
  </div>
  <div class="page">
    <p>Problem 5: SD reveals location</p>
    <p>The fact that my service is present  Problem: Common practice to</p>
    <p>disable WiFi annoucements to (try to) hide access points [OReilly 802.11 Guide]</p>
    <p>Where my service is located  Problem: Knowledge of network</p>
    <p>name at one site can tell you where other sites are [WiGLE Wardriving Database]</p>
    <p>IR_Guest</p>
    <p>Pittsburgh</p>
    <p>Seattle</p>
    <p>Berkeley</p>
    <p>Cambridge</p>
    <p>x</p>
  </div>
  <div class="page">
    <p>Problem 6: SD reveals social contacts</p>
    <p>Emerging social devices also offer services  Microsoft Zune: music sharing service  PSP, Nintendo DS: multiplayer gaming service</p>
    <p>Service discovery exposes social contacts</p>
  </div>
  <div class="page">
    <p>New services transitively trusted Alices Home</p>
    <p>Trust</p>
    <p>Transitive Trust</p>
    <p>Alice trusts bob.laptop</p>
    <p>Alices secret</p>
    <p>Alice trusts Alices Home</p>
    <p>Alices secret</p>
    <p>Find networks that Alice trusts</p>
    <p>Attestation</p>
  </div>
  <div class="page">
    <p>Old Slides</p>
  </div>
  <div class="page">
    <p>?</p>
    <p>Tryst: key establishment</p>
    <p>Trusted</p>
    <p>Trusts: alice@mac.com</p>
    <p>alice.ds</p>
    <p>alice.laptop</p>
    <p>bob.zune</p>
    <p>bob.psp bob.laptop</p>
    <p>Anonymous Identity Based Encryption</p>
    <p>Encrypt(paramsmac.com, key=alice.ipod, message)Provider mac.com preloads devices=</p>
    <p>paramsmac.com</p>
    <p>paramsmac.com paramsmac.com</p>
    <p>paramsmac.com</p>
  </div>
  <div class="page">
    <p>KAlice</p>
    <p>Identity-hiding encryption with Alices public key (e.g., ElGamal)</p>
    <p>Public Key Protocol</p>
    <p>Existing theoretical public key protocol [Abadi 04]</p>
    <p>K-1Bob Bob to Alice at time T</p>
    <p>Digital signature with Bobs private key (e.g., RSA, DSA)</p>
    <p>Service Discovery Message</p>
    <p>Is Alices Laptop here?</p>
  </div>
  <div class="page">
    <p>???</p>
    <p>Public Key Protocol</p>
    <p>KBob</p>
    <p>K-1Bob Bob to Alice at time T</p>
    <p>Service Discovery Message</p>
    <p>K-1Alice Decrypt with Alices private key</p>
    <p>Verify with Bobs public key</p>
    <p>Existing theoretical public key protocol [Abadi 04]</p>
  </div>
  <div class="page">
    <p>KShared</p>
    <p>Identity-hiding encryption Alice and Bobs shared key (e.g., AES)</p>
    <p>Symmetric Key Protocol</p>
    <p>KShared Bob to Alice at time T</p>
    <p>Message authentication code with Alice and Bobs shared key (e.g., AES-CMAC)</p>
    <p>Service Discovery Message</p>
  </div>
  <div class="page">
    <p>KShared</p>
    <p>Symmetric Key Protocol</p>
    <p>KShared Bob to Alice at time T</p>
    <p>Service Discovery Message</p>
    <p>AT = address at time T</p>
    <p>AT-1A0 ATHash()</p>
    <p>KShared</p>
    <p>AT+1Hash()</p>
    <p>KShared</p>
    <p>Random hash function (e.g., HMAC-SHA1)</p>
    <p>secret</p>
  </div>
</Presentation>
