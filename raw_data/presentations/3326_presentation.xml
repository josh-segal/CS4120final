<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>fTPM: A Software-only Implementation of a TPM Chip</p>
    <p>Himanshu Raj, Stefan Saroiu, Alec Wolman, Ronald Aigner, Jeremiah Cox, Paul England, Chris Fenner,</p>
    <p>Kinshuman Kinshumann, Jork Loeser, Dennis Mattoon, Magnus Nystrom, David Robinson, Rob Spiger, Stefan Thom, David Wooten</p>
    <p>Microsoft</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>Many systems in industry &amp; research rely on TPMs  Bitlocker, trusted sensors, Chrome OS, etc</p>
    <p>Challenge: Smartphones &amp; tablets lack TPMs today  TPM: never designed to meet space, cost, power constraints</p>
    <p>Observation: }?</p>
  </div>
  <div class="page">
    <p>Big Problem</p>
    <p>These CPU features omit several secure resources found on trusted hardware</p>
  </div>
  <div class="page">
    <p>Research Question</p>
    <p>Can we overcome these limitations to build systems whose security ~trusted hardware?</p>
    <p>Answer: Yes Contributions:  3 approaches to overcome TrustZoneslimitations</p>
    <p>(lessons relevant to SGX also)  Security analysis of fTPM vs TPM chips  fTPM shipped millions of Microsoft Surface &amp; WP</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Motivation</p>
    <p>Background on TPM</p>
    <p>ARM TrustZone and its shortcomings</p>
    <p>High-level architecture &amp; threat model</p>
    <p>Overcoming TrustZone limitations: three approaches</p>
    <p>Performance evaluation</p>
    <p>Conclusions</p>
  </div>
  <div class="page">
    <p>What are TPMs?</p>
    <p>Hardware root of trust offering:  Strong machine identity  Software rollback prevention  Secure credentials store  Software attestation</p>
  </div>
  <div class="page">
    <p>What are TPMs good for?</p>
    <p>Shipped Products by Industry:  Protects data-at-rest (Google, Microsoft)  Prevents rollback (Google)  Virtual smart cards (Microsoft)  Early-Launch Anti-Malware (Microsoft)</p>
    <p>Research:  Secure VMs for the cloud [SOSP11]  Secure offline data access [OSDI 12]  Trusted sensors for mobile devices [MobiSys 11, SenSys 11]  Cloaking malware [Sec 11]</p>
  </div>
  <div class="page">
    <p>TPM: 1.0  1.1  1.2  2.0</p>
    <p>Late 1999: TCPA is formed (IBM, HP, Intel, Microsoft, )  2001: TPM specification 1.0 is released</p>
    <p>Never adopted by any hardware AFAIK  Late 2001: TPM 1.1 is released  2002: IBM Thinkpad T30 uses first discrete TPM chip  2003: TCPA morphs into TCG  2007: pin reset attack  2008: TPM 1.2</p>
    <p>Very popular, many hardware vendors built chips  2014: TPM 2.0</p>
  </div>
  <div class="page">
    <p>New in TPM 2.0</p>
    <p>Newer cryptography  TPM 1.2: SHA-1, RSA  TPM 2.0: SHA-1, RSA, SHA-256, ECC</p>
    <p>TPM 2.0 provides a reference implementation  the code is the spec</p>
    <p>Much more flexible policy support  Read this as more (useful) bells and whistles</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Motivation</p>
    <p>Background on TPM</p>
    <p>ARM TrustZone and its shortcomings</p>
    <p>High-level architecture &amp; threat model</p>
    <p>Overcoming TrustZone limitations: three approaches</p>
    <p>Performance evaluation</p>
    <p>Conclusions</p>
  </div>
  <div class="page">
    <p>Secure Monitor Layer (software)</p>
    <p>Normal World (NW) Secure World (SW)</p>
    <p>ARM Hardware</p>
  </div>
  <div class="page">
    <p>ARM Hardware</p>
    <p>Booting Up</p>
  </div>
  <div class="page">
    <p>Secure Monitor Layer (software)</p>
    <p>ARM Hardware</p>
    <p>Booting Up</p>
  </div>
  <div class="page">
    <p>Secure Monitor Layer</p>
    <p>ARM Hardware</p>
    <p>Booting Up</p>
    <p>Allocates memory Restricts its access to Secure World-only More setup</p>
  </div>
  <div class="page">
    <p>Secure Monitor Layer</p>
    <p>ARM Hardware</p>
    <p>Booting Up Secure World (SW)</p>
  </div>
  <div class="page">
    <p>Secure Monitor Layer</p>
    <p>ARM Hardware</p>
    <p>Booting Up Secure World (SW)</p>
  </div>
  <div class="page">
    <p>Secure Monitor Layer</p>
    <p>Normal World (NW)</p>
    <p>ARM Hardware</p>
    <p>Secure World (SW)</p>
  </div>
  <div class="page">
    <p>ARM TrustZone Properties</p>
    <p>Isolated runtime that boots first</p>
    <p>Curtained memory</p>
    <p>Ability to map interrupts delivered to Secure World  Secure monitor dispatches interrupts</p>
  </div>
  <div class="page">
    <p>ARM TrustZone Limitations</p>
    <p>Lack of virtualization Lack of accessibility</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Motivation</p>
    <p>Background on TPM</p>
    <p>ARM TrustZone and its shortcomings</p>
    <p>High-level architecture &amp; threat model</p>
    <p>Overcoming TrustZone limitations: three approaches</p>
    <p>Performance evaluation</p>
    <p>Conclusions</p>
  </div>
  <div class="page">
    <p>High-Level architecture</p>
    <p>ARM SoC Hardware</p>
    <p>Commodity OS Linux/Windows</p>
    <p>fTPM</p>
    <p>TEE Monitor</p>
    <p>Normal World Secure World</p>
    <p>TEE Dispatcher</p>
    <p>Other secure services TEE Runtime</p>
    <p>TEE: trusted execution environment (small codebase)  Monitor, dispatcher, runtime</p>
    <p>Most hardware resources mapped to Normal World  For better perf.</p>
  </div>
  <div class="page">
    <p>Threat Model: What Threats are In-Scope?</p>
    <p>Goals fTPM TPM chip</p>
    <p>Malicious software (e.g., malware, compromised OS)</p>
    <p>Time-based side-channel</p>
    <p>Cache-based side-channel</p>
    <p>Denial-of-Service</p>
    <p>Power analysis-based side-channel</p>
    <p>Memory attacks (e.g., coldboot, bus sniffing, JTAG)</p>
    <p>See Memory Attacks (ASPLOS 2015)</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Motivation</p>
    <p>Background on TPM</p>
    <p>ARM TrustZone and its shortcomings</p>
    <p>High-level architecture &amp; threat model</p>
    <p>Overcoming TrustZone limitations: three approaches</p>
    <p>Performance evaluation</p>
    <p>Conclusions</p>
  </div>
  <div class="page">
    <p>ARM TrustZone Limitations</p>
    <p>Helpful observation: huge ARM eco-system out there  eMMC controller present on many ARM SoCs</p>
    <p>Has provisions for trusted storage</p>
    <p>Secure fuses: write-once, read-always registers  Can act as seed for deriving crypto keys</p>
    <p>Entropy for TrustZone can be added easily</p>
  </div>
  <div class="page">
    <p>ARM Eco-system Offers eMMC</p>
    <p>eMMC controllers can setup one partition as Replay-Protected Memory Block (RPMB)</p>
    <p>RPMB primitives:  One-time programmable authentication keys:</p>
    <p>fTPM uses seed from secure fuse to generate auth. keys  fTPM writes auth. keys to eMMC controller upon provisioning</p>
    <p>Authenticated reads and writes (uses internal counters)  Nonces</p>
  </div>
  <div class="page">
    <p>ARM TrustZone Limitations</p>
    <p>eMMC &amp; Secure fuses Entropy</p>
    <p>Timer &amp; changed semantics of TPM commands</p>
  </div>
  <div class="page">
    <p>Three Approaches</p>
    <p>Do not affect TPMs security!</p>
  </div>
  <div class="page">
    <p>Problem: Long-Running Commands</p>
    <p>Design requirements:  Code running in secure world must be minimal</p>
    <p>e.g., TEE lacks pre-emptive scheduler</p>
    <p>fTPM commands cannot be long-lived  Commodity OS freezes during fTPM command</p>
    <p>Creating RSA keys can take 10+ seconds on slow mobile devices!!!</p>
  </div>
  <div class="page">
    <p>Solution: Cooperative Checkpointing</p>
    <p>Oops, its been a long time</p>
    <p>Secure WorldNormal World</p>
  </div>
  <div class="page">
    <p>Three Approaches</p>
    <p>Do not affect TPMs security!</p>
  </div>
  <div class="page">
    <p>Background: TPM Unseal</p>
    <p>Guess PIN 1st time</p>
    <p>Failed Attempts++</p>
    <p>Guess PIN 2nd time</p>
    <p>Failed Attempts++</p>
    <p>Guess PIN 3rd time</p>
    <p>Failed Attempts++</p>
    <p>Lockout Period</p>
    <p>TPM w/ storage</p>
  </div>
  <div class="page">
    <p>Problem: Dark Periods</p>
    <p>During dark periods:  Problem: storage unavailable  Danger: TPM Unseal commands not safe</p>
    <p>Example of dark period: During boot:  Firmware (UEFI) finished running and unloaded  OS loader is running (OS not fully loaded)</p>
  </div>
  <div class="page">
    <p>Possible Attack during Dark Period</p>
    <p>Guess PIN 1st time</p>
    <p>Failed Attempts++</p>
    <p>Guess PIN 2nd time</p>
    <p>Failed Attempts++</p>
    <p>Guess PIN 3rd time</p>
    <p>Failed Attempts++</p>
    <p>TPM without storage</p>
    <p>Guess PIN 4th timeReboot</p>
    <p>Dark period entered here</p>
  </div>
  <div class="page">
    <p>Solution: Dirty Bit</p>
    <p>Write dirty bit to storage before enter dark period  If dark period exited, dirty bit is cleared</p>
    <p>If machine reboots during dark period, bit remains dirty  Possibility #1: Legitimate user reboots machine  Possibility #2: Attacker attempts to guess PIN</p>
    <p>Solution: Upon fTPM bootup, if bit dirty enter lockout</p>
  </div>
  <div class="page">
    <p>Dirty Bit Stops Attack</p>
    <p>Guess PIN 1st time</p>
    <p>Failed Attempts++</p>
    <p>Guess PIN 2nd time</p>
    <p>Failed Attempts++</p>
    <p>Guess PIN 3rd time</p>
    <p>Failed Attempts++</p>
    <p>fTPM</p>
    <p>Reboot</p>
    <p>Lockout Period</p>
    <p>Set Dirty Bit</p>
    <p>Dark period entered here</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Motivation</p>
    <p>Background on TPM</p>
    <p>ARM TrustZone and its shortcomings</p>
    <p>High-level architecture &amp; threat model</p>
    <p>Overcoming TrustZone limitations: three approaches</p>
    <p>Performance evaluation</p>
    <p>Conclusions</p>
  </div>
  <div class="page">
    <p>Methodology fTPM1 1.2 GHz Cortex-A7 fTPM2 1.3 GHz Cortex-A9 fTPM3 2 GHz Cortex-A57 fTPM4 2.2 GHz Cortex-A57 dTPM1 dTPM2 dTPM3</p>
    <p>Instrumented and measured various TPM commands  Create RSA keys, seal, unseal, sign, verify, encrypt, decrypt</p>
  </div>
  <div class="page">
    <p>Result: fTPMs much faster than dTPMs RSA-2048 (w/ OAEP &amp; SHA-256)</p>
    <p>fTPM1 fTPM2 fTPM3 fTPM4 dTPM1 dTPM2 dTPM3</p>
    <p>Co m m an</p>
    <p>d D ur at io n</p>
    <p>(m ill is ec on</p>
    <p>ds ) Encrypt</p>
    <p>Decrypt</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>fTPM leverages ARM TrustZoneto build TPM 2.0 running in-firmware</p>
    <p>Three approaches to build fTPM:  Additional hardware requirements  Design compromises  Modify TPM semantics</p>
    <p>fTPMs offer much better performance than dTPMs</p>
  </div>
  <div class="page">
    <p>Discussion of SGX Limitations</p>
    <p>Lack of trusted storage, secure counters, and clock  Due to fundamental process limitations</p>
    <p>Lack of Intel eco-system (unlike ARM):  Intel needs to decide to equip their devices with eMMC</p>
    <p>One plus: SGX encrypts memory  No need to worry about memory attacks</p>
    <p>One minus: SGX can only run ring-3 code  No secure interrupts available  More concerns about side-channel attacks</p>
  </div>
  <div class="page">
    <p>Questions?</p>
    <p>ssaroiu@microsoft.com</p>
  </div>
</Presentation>
