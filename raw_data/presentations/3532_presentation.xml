<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Erays: Reverse Engineering Ethereums Opaque Smart Contracts</p>
    <p>Yi Zhou, Deepak Kumar, Surya Bakshi, Joshua Mason, Andrew Miller, Michael Bailey University of Illinois Urbana-Champaign</p>
  </div>
  <div class="page">
    <p>Introduction: Ethereum</p>
  </div>
  <div class="page">
    <p>Introduction: Ethereum Smart Contracts</p>
    <p>Computer programs on the blockchain</p>
    <p>Written in high level language (Solidity)</p>
    <p>Executed in the Ethereum Virtual Machine (EVM)</p>
  </div>
  <div class="page">
    <p>Solidity Code</p>
    <p>contract dummy { uint s;</p>
    <p>function foo(uint a) public returns (uint) { while (a &lt; s) {</p>
    <p>if (a &gt; 10) { a += 1;</p>
    <p>} else { a += 2;</p>
    <p>} } return a;</p>
    <p>} } 4</p>
  </div>
  <div class="page">
    <p>Compiled Contract</p>
  </div>
  <div class="page">
    <p>EVM Bytecode</p>
    <p>PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x04 CALLDATASIZE LT PUSH1 0x3e JUMPI PUSH4 0xffffffff PUSH29 0x0100000000000000000000000000000000000000000000000000000000 PUSH1 0x00 CALLDATALOAD ... 6</p>
  </div>
  <div class="page">
    <p>EVM bytecode is not easily understandable</p>
    <p>High level source code is not always available</p>
    <p>Contract functionality remains opaque/proprietary</p>
    <p>Problem: Opaque/proprietary contracts</p>
  </div>
  <div class="page">
    <p>Total Count: 1,024,886</p>
    <p>Unique Count: 34,328 Ecosystem: How many contracts are there?</p>
  </div>
  <div class="page">
    <p>10,387 Solidity Source Files Collected (from Etherscan)</p>
    <p>35 Versions (v0.1.3 to v0.4.19) of Solidity Compilers Used</p>
    <p>88,426 Unique Binaries Compiled</p>
    <p>How many contracts are opaque/proprietary?</p>
    <p>Ecosystem:</p>
  </div>
  <div class="page">
    <p>Ecosystem: Measuring Opacity</p>
    <p>Contracts</p>
    <p>Total 1,024,886</p>
    <p>Unique 34,328 (100.0%)</p>
    <p>Unique Transparent 7,734 (22.5%)</p>
    <p>Unique Opaque 26,594 (77.5%)</p>
  </div>
  <div class="page">
    <p>Ecosystem: Measuring Opacity</p>
    <p>Contracts</p>
    <p>Total 1,024,886</p>
    <p>Unique 34,328 (100.0%)</p>
    <p>Unique Transparent 7,734 (22.5%)</p>
    <p>Unique Opaque 26,594 (77.5%)</p>
  </div>
  <div class="page">
    <p>Erays</p>
  </div>
  <div class="page">
    <p>Erays: System Design</p>
    <p>Control Flow Graph</p>
    <p>Recovery</p>
    <p>Lifting</p>
    <p>Optimization</p>
    <p>Aggregation</p>
    <p>Control Flow Structure Recovery</p>
  </div>
  <div class="page">
    <p>Identify basic block boundaries ... JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x0 SLOAD DUP3 LT ISZERO PUSH1 0x93 JUMPI ...</p>
    <p>Control Flow Graph Recovery</p>
  </div>
  <div class="page">
    <p>Identify basic block boundaries</p>
    <p>Control Flow Graph Recovery</p>
    <p>... JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x0 SLOAD DUP3 LT ISZERO PUSH1 0x93 JUMPI ...</p>
  </div>
  <div class="page">
    <p>Identify basic block boundaries</p>
    <p>Organize basic blocks into a CFG</p>
    <p>Emulate the contract using a stack model</p>
    <p>Explore the contract in a manner similar to Depth First Search</p>
    <p>Record stack images at each block entrance</p>
    <p>Control Flow Graph Recovery</p>
  </div>
  <div class="page">
    <p>JUMPDEST ...</p>
    <p>... PUSH1 0x88 JUMPI</p>
    <p>Control Flow Graph Recovery</p>
    <p>... PUSH1 0x8f JUMP</p>
    <p>... PUSH1 0x93 JUMPI</p>
    <p>... return</p>
    <p>...</p>
    <p>... PUSH1 0x6d JUMP</p>
  </div>
  <div class="page">
    <p>JUMPDEST ...</p>
    <p>... PUSH1 0x88 JUMPI</p>
    <p>Control Flow Graph Recovery</p>
    <p>... PUSH1 0x8f JUMP</p>
    <p>... PUSH1 0x93 JUMPI</p>
    <p>... return</p>
    <p>...</p>
    <p>... PUSH1 0x6d JUMP</p>
  </div>
  <div class="page">
    <p>JUMPDEST ...</p>
    <p>... PUSH1 0x88 JUMPI</p>
    <p>Control Flow Graph Recovery</p>
    <p>... PUSH1 0x8f JUMP</p>
    <p>... PUSH1 0x93 JUMPI</p>
    <p>... return</p>
    <p>...</p>
    <p>... PUSH1 0x6d JUMP</p>
  </div>
  <div class="page">
    <p>JUMPDEST ...</p>
    <p>... PUSH1 0x88 JUMPI</p>
    <p>Control Flow Graph Recovery</p>
    <p>... PUSH1 0x8f JUMP</p>
    <p>... PUSH1 0x93 JUMPI</p>
    <p>... return</p>
    <p>...</p>
    <p>... PUSH1 0x6d JUMP</p>
  </div>
  <div class="page">
    <p>JUMPDEST ...</p>
    <p>... PUSH1 0x88 JUMPI</p>
    <p>Control Flow Graph Recovery</p>
    <p>... PUSH1 0x8f JUMP</p>
    <p>... PUSH1 0x93 JUMPI</p>
    <p>... return</p>
    <p>...</p>
    <p>... PUSH1 0x6d JUMP</p>
  </div>
  <div class="page">
    <p>JUMPDEST ...</p>
    <p>... PUSH1 0x88 JUMPI</p>
    <p>Control Flow Graph Recovery</p>
    <p>... PUSH1 0x8f JUMP</p>
    <p>... PUSH1 0x93 JUMPI</p>
    <p>... return</p>
    <p>...</p>
    <p>... PUSH1 0x6d JUMP</p>
  </div>
  <div class="page">
    <p>JUMPDEST ...</p>
    <p>... PUSH1 0x88 JUMPI</p>
    <p>Control Flow Graph Recovery</p>
    <p>... PUSH1 0x8f JUMP</p>
    <p>... PUSH1 0x93 JUMPI</p>
    <p>... return</p>
    <p>...</p>
    <p>... PUSH1 0x6d JUMP</p>
  </div>
  <div class="page">
    <p>JUMPDEST ...</p>
    <p>... PUSH1 0x88 JUMPI</p>
    <p>Control Flow Graph Recovery</p>
    <p>... PUSH1 0x8f JUMP</p>
    <p>... PUSH1 0x93 JUMPI</p>
    <p>... return</p>
    <p>...</p>
    <p>... PUSH1 0x6d JUMP</p>
  </div>
  <div class="page">
    <p>JUMPDEST ...</p>
    <p>... PUSH1 0x88 JUMPI</p>
    <p>Control Flow Graph Recovery</p>
    <p>... PUSH1 0x8f JUMP</p>
    <p>... PUSH1 0x93 JUMPI</p>
    <p>... return</p>
    <p>...</p>
    <p>... PUSH1 0x6d JUMP</p>
  </div>
  <div class="page">
    <p>Convert stack-based operations into register-based representation (R. Vallee-Rai 1999)</p>
    <p>Map stack slots to registers</p>
    <p>Lifting: Stack-based to Register-based</p>
    <p>...</p>
    <p>$s2</p>
    <p>$s1</p>
    <p>$s0</p>
  </div>
  <div class="page">
    <p>Convert stack-based operations into register-based representation (R. Vallee-Rai 1999)</p>
    <p>Map stack slots to registers</p>
    <p>Assign registers to each bytecode (using stack height)</p>
    <p>Lifting: Stack-based to Register-based</p>
    <p>ADD</p>
    <p>$s2 0x2</p>
    <p>$s1 0x3</p>
    <p>$s0 0xb2</p>
  </div>
  <div class="page">
    <p>Convert stack-based operations into register-based representation (R. Vallee-Rai 1999)</p>
    <p>Map stack slots to registers</p>
    <p>Assign registers to each bytecode (using stack height)</p>
    <p>Lifting: Stack-based to Register-based</p>
    <p>ADD</p>
    <p>$s2 0x2</p>
    <p>$s1 0x3</p>
    <p>$s0 0xb2</p>
  </div>
  <div class="page">
    <p>Convert stack-based operations into register-based representation (R. Vallee-Rai 1999)</p>
    <p>Map stack slots to registers</p>
    <p>Assign registers to each bytecode (using stack height)</p>
    <p>Lifting: Stack-based to Register-based</p>
    <p>ADD</p>
    <p>$s2 0x2 + 0x3</p>
    <p>$s1</p>
    <p>$s0 0xb2</p>
  </div>
  <div class="page">
    <p>Convert stack-based operations into register-based representation (R. Vallee-Rai 1999)</p>
    <p>Map stack slots to registers</p>
    <p>Assign registers to each bytecode (using stack height)</p>
    <p>Lifting: Stack-based to Register-based</p>
    <p>ADD</p>
    <p>$s2 0x5</p>
    <p>$s1</p>
    <p>$s0 0xb2</p>
  </div>
  <div class="page">
    <p>Convert stack-based operations into register-based representation (R. Vallee-Rai 1999)</p>
    <p>Map stack slots to registers</p>
    <p>Assign registers to each bytecode (using stack height)</p>
    <p>Lifting: Stack-based to Register-based</p>
    <p>ADD</p>
    <p>$s2</p>
    <p>$s1 0x5</p>
    <p>$s0 0xb2</p>
  </div>
  <div class="page">
    <p>Convert stack-based operations into register-based representation (R. Vallee-Rai 1999)</p>
    <p>Map stack slots to registers</p>
    <p>Assign registers to each bytecode (using stack height)</p>
    <p>Lifting: Stack-based to Register-based</p>
    <p>ADD $s1, $s2, $s1</p>
    <p>$s2</p>
    <p>$s1 0x5</p>
    <p>$s0 0xb2</p>
  </div>
  <div class="page">
    <p>Convert stack-based operations into register-based representation (R. Vallee-Rai 1999)</p>
    <p>Map stack slots to registers</p>
    <p>Assign registers to each bytecode (using stack height)</p>
    <p>Lifting: Stack-based to Register-based</p>
    <p>PUSH1 0x0 SLOAD DUP3 LT ISZERO PUSH1 0x93 JUMPI</p>
  </div>
  <div class="page">
    <p>Convert stack-based operations into register-based representation (R. Vallee-Rai 1999)</p>
    <p>Map stack slots to registers</p>
    <p>Assign registers to each bytecode (using stack height)</p>
    <p>Lifting: Stack-based to Register-based</p>
    <p>MOVE $s4, 0x0 SLOAD $s4, [$s4] MOVE $s5, $s2 LT $s4, $s5, $s4 ISZERO $s4, $s4 MOVE $s5, 0x93 JUMPI $s5, $s4</p>
  </div>
  <div class="page">
    <p>Convert stack-based operations into register-based representation (R. Vallee-Rai 1999)</p>
    <p>Introduce new instructions</p>
    <p>Lifting: Stack-based to Register-based</p>
  </div>
  <div class="page">
    <p>Convert stack-based operations into register-based representation (R. Vallee-Rai 1999)</p>
    <p>Introduce new instructions</p>
    <p>INTCALL, INTRET</p>
    <p>MOVE</p>
    <p>ASSERT</p>
    <p>NEQ, GEQ, LEQ, SL, SR</p>
    <p>Lifting: Stack-based to Register-based</p>
  </div>
  <div class="page">
    <p>Global optimizations (1973 G. Kildall)</p>
    <p>Optimization: Removing Redundancy</p>
    <p>MOVE $s4, 0x0 SLOAD $s4, [$s4] MOVE $s5, $s2 LT $s4, $s5, $s4 ISZERO $s4, $s4 MOVE $s5, 0x93 JUMPI $s5, $s4</p>
  </div>
  <div class="page">
    <p>Global optimizations (1973 G. Kildall)</p>
    <p>Constant propagation</p>
    <p>Optimization: Removing Redundancy</p>
    <p>MOVE $s4, 0x0 SLOAD $s4, [0x0] MOVE $s5, $s2 LT $s4, $s5, $s4 ISZERO $s4, $s4 MOVE $s5, 0x93 JUMPI 0x93, $s4</p>
  </div>
  <div class="page">
    <p>Global optimizations (1973 G. Kildall)</p>
    <p>Constant propagation</p>
    <p>Copy propagation</p>
    <p>Optimization: Removing Redundancy</p>
    <p>MOVE $s4, 0x0 SLOAD $s4, [0x0] MOVE $s5, $s2 LT $s4, $s2, $s4 ISZERO $s4, $s4 MOVE $s5, 0x93 JUMPI 0x93, $s4</p>
  </div>
  <div class="page">
    <p>Global optimizations (1973 G. Kildall)</p>
    <p>Constant propagation</p>
    <p>Copy propagation</p>
    <p>Dead code elimination</p>
    <p>Optimization: Removing Redundancy</p>
    <p>-SLOAD $s4, [0x0] -LT $s4, $s2, $s4 ISZERO $s4, $s4 -JUMPI 0x93, $s4</p>
  </div>
  <div class="page">
    <p>Global optimizations (1973 G. Kildall)</p>
    <p>Constant propagation</p>
    <p>Copy propagation</p>
    <p>Dead code elimination</p>
    <p>Local optimizations</p>
    <p>Optimization: Removing Redundancy</p>
    <p>-SLOAD $s4, [0x0] -LT $s4, $s2, $s4 ISZERO $s4, $s4 -JUMPI 0x93, $s4</p>
  </div>
  <div class="page">
    <p>Global optimizations (1973 G. Kildall)</p>
    <p>Constant propagation</p>
    <p>Copy propagation</p>
    <p>Dead code elimination</p>
    <p>Local optimizations</p>
    <p>Optimization: Removing Redundancy</p>
    <p>-SLOAD $s4, [0x0] --GEQ $s4, $s2, $s4 -JUMPI 0x93, $s4</p>
  </div>
  <div class="page">
    <p>Global optimizations (1973 G. Kildall)</p>
    <p>Constant propagation</p>
    <p>Copy propagation</p>
    <p>Dead code elimination</p>
    <p>Local optimizations</p>
    <p>Optimization: Removing Redundancy</p>
    <p>SLOAD $s4, [0x0] GEQ $s4, $s2, $s4 JUMPI 0x93, $s4</p>
  </div>
  <div class="page">
    <p>Convert register-based instructions into three address form</p>
    <p>Aggregation: Condensing the Output</p>
    <p>SLOAD $s4, [0x0] GEQ $s4, $s2, $s4 JUMPI 0x93, $s4</p>
  </div>
  <div class="page">
    <p>Convert register-based instructions into three address form</p>
    <p>Aggregation: Condensing the Output</p>
    <p>$s4 = S[0x0] $s4 = $s2  $s4 if ($s4) goto 0x93</p>
  </div>
  <div class="page">
    <p>Convert register-based instructions into three address form</p>
    <p>Aggregate instructions into nested expressions (R. Vallee-Rai 1999)</p>
    <p>Aggregation: Condensing the Output</p>
    <p>$s4 = S[0x0] $s4 = $s2  $s4 if ($s4) goto 0x93</p>
  </div>
  <div class="page">
    <p>Convert register-based instructions into three address form</p>
    <p>Aggregate instructions into nested expressions (R. Vallee-Rai 1999)</p>
    <p>Aggregation: Condensing the Output</p>
    <p>-$s4 = $s2  S[0x0] if ($s4) goto 0x93</p>
  </div>
  <div class="page">
    <p>Convert register-based instructions into three address form</p>
    <p>Aggregate instructions into nested expressions (R. Vallee-Rai 1999)</p>
    <p>Aggregation: Condensing the Output</p>
    <p>--if ($s2  S[0x0]) goto 0x93</p>
  </div>
  <div class="page">
    <p>Convert register-based instructions into three address form</p>
    <p>Aggregate instructions into nested expressions (R. Vallee-Rai 1999)</p>
    <p>Aggregation: Condensing the Output</p>
    <p>if ($s2  S[0x0]) goto 0x93</p>
  </div>
  <div class="page">
    <p>Control Flow Structure Recovery</p>
    <p>Separate each public function subgraph</p>
    <p>Use structural analysis (M. Sharir 1980)</p>
    <p>Match subgraphs to control constructs (while, if then else)</p>
    <p>Collapse matched subgraphs</p>
  </div>
  <div class="page">
    <p>ASSERT(0 == msg.value) $s2 = C[0x4]</p>
    <p>if ($s2 &lt;= 0xa) goto 0x88</p>
    <p>Control Flow Structure Recovery</p>
    <p>$s2 = 0x1 + $s2 goto 0x8f</p>
    <p>if ($s2 &gt;= S[0x0]) goto 0x93</p>
    <p>M[$m] = $s2 RETURN($m, 0x20)</p>
    <p>$s2 = 0x2 + $s2</p>
    <p>goto 0x6d</p>
  </div>
  <div class="page">
    <p>ASSERT(0 == msg.value) $s2 = C[0x4]</p>
    <p>if ($s2 &lt;= 0xa) { $s2 = 0x2 + $s2</p>
    <p>} else { $s2 = 0x1 + $s2</p>
    <p>}</p>
    <p>Control Flow Structure Recovery</p>
    <p>if ($s2 &gt;= S[0x0]) goto 0x93</p>
    <p>M[$m] = $s2 RETURN($m, 0x20)</p>
    <p>goto 0x6d</p>
  </div>
  <div class="page">
    <p>ASSERT(0 == msg.value) $s2 = C[0x4]</p>
    <p>if ($s2 &lt;= 0xa) { $s2 = 0x2 + $s2</p>
    <p>} else { $s2 = 0x1 + $s2</p>
    <p>} goto 0x6d</p>
    <p>Control Flow Structure Recovery</p>
    <p>if ($s2 &gt;= S[0x0]) goto 0x93</p>
    <p>M[$m] = $s2 RETURN($m, 0x20)</p>
  </div>
  <div class="page">
    <p>ASSERT(0 == msg.value) $s2 = C[0x4]</p>
    <p>Control Flow Structure Recovery</p>
    <p>while (0x1) { if ($s2 &gt;= S[0x0])</p>
    <p>break if ($s2 &lt;= 0xa) {</p>
    <p>$s2 = 0x2 + $s2 } else {</p>
    <p>$s2 = 0x1 + $s2 }</p>
    <p>}</p>
    <p>M[$m] = $s2 RETURN($m, 0x20)</p>
  </div>
  <div class="page">
    <p>Control Flow Structure Recovery</p>
    <p>ASSERT(0 == msg.value) $s2 = C[0x4] while (0x1) {</p>
    <p>if ($s2 &gt;= S[0x0]) break</p>
    <p>if ($s2 &lt;= 0xa) { $s2 = 0x2 + $s2</p>
    <p>} else { $s2 = 0x1 + $s2</p>
    <p>} } M[$m] = $s2 RETURN($m, 0x20)</p>
  </div>
  <div class="page">
    <p>Construct test cases using historical transactions</p>
    <p>Leverage Geth to generate the expected transaction output</p>
    <p>Execute our representation and compare the output</p>
    <p>Validation</p>
  </div>
  <div class="page">
    <p>Construct test cases using historical transactions</p>
    <p>Leverage Geth to generate the expected transaction output</p>
    <p>Execute our representation and compare the output</p>
    <p>Validation</p>
    <p>Transactions</p>
    <p>Total 15,855 (100.0 %)</p>
  </div>
  <div class="page">
    <p>Construct test cases using historical transactions</p>
    <p>Leverage Geth to generate the expected transaction output</p>
    <p>Execute our representation and compare the output</p>
    <p>Validation</p>
    <p>Transactions</p>
    <p>Total 15,855 (100.0 %)</p>
    <p>Success 15,345 (96.8%)</p>
  </div>
  <div class="page">
    <p>Construct test cases using historical transactions</p>
    <p>Leverage Geth to generate the expected transaction output</p>
    <p>Execute our representation and compare the output</p>
    <p>Validation</p>
    <p>Transactions</p>
    <p>Total 15,855 (100.0 %)</p>
    <p>Success 15,345 (96.8%)</p>
    <p>Failures 510 (3.2%)</p>
  </div>
  <div class="page">
    <p>Construct test cases using historical transactions</p>
    <p>Leverage Geth to generate the expected transaction output</p>
    <p>Execute our representation and compare the output</p>
    <p>Validation</p>
    <p>Transactions</p>
    <p>Total 15,855 (100.0 %)</p>
    <p>Success 15,345 (96.8%)</p>
    <p>Failures 510 (3.2%)</p>
    <p>Construction Failures 196 (1.2%)</p>
  </div>
  <div class="page">
    <p>Construct test cases using historical transactions</p>
    <p>Leverage Geth to generate the expected transaction output</p>
    <p>Execute our representation and compare the output</p>
    <p>Validation</p>
    <p>Transactions</p>
    <p>Total 15,855 (100.0 %)</p>
    <p>Success 15,345 (96.8%)</p>
    <p>Failures 510 (3.2%)</p>
    <p>Construction Failures 196 (1.2%)</p>
    <p>Comparison Failures 314 (2.0%)</p>
  </div>
  <div class="page">
    <p>Use Case</p>
  </div>
  <div class="page">
    <p>Erays: Function Fuzzy Hash</p>
    <p>Binary X</p>
    <p>Function A</p>
    <p>Function B</p>
    <p>Function C</p>
  </div>
  <div class="page">
    <p>Erays: Function Fuzzy Hash</p>
    <p>Binary X</p>
    <p>Function A</p>
    <p>Hash A 0x746f7563...</p>
    <p>Function B</p>
    <p>Function C</p>
    <p>Compute Fuzzy Hash</p>
  </div>
  <div class="page">
    <p>Erays: Function Fuzzy Hash</p>
    <p>Binary X</p>
    <p>Function A</p>
    <p>Hash A 0x746f7563...</p>
    <p>Function B</p>
    <p>Function C</p>
    <p>Hash B 0x6865646d...</p>
    <p>Hash C 0x79737061...</p>
  </div>
  <div class="page">
    <p>Erays: Code Sharing</p>
    <p>Binary X</p>
    <p>Function A</p>
    <p>Hash A 0x746f7563...</p>
    <p>Function B</p>
    <p>Function C</p>
    <p>Hash B 0x6865646d...</p>
    <p>Hash C 0x79737061...</p>
    <p>Hash D 0x67686574...</p>
    <p>Binary Y</p>
    <p>Function B</p>
    <p>Function D</p>
  </div>
  <div class="page">
    <p>Case Studies</p>
  </div>
  <div class="page">
    <p>Case Study: High Value Contracts</p>
    <p>Look for opaque contracts with large Ether balance ~ $590M</p>
    <p>Multi-signature wallets likely used by the Gemini exchange</p>
    <p>Multi-Signature Wallet: signature scheme requiring k-of-N signatures.</p>
    <p>Security best practice for large sums of money</p>
  </div>
  <div class="page">
    <p>Case Study: High Value Contracts</p>
    <p>Look for opaque contracts with large Ether balance ~ $590M / 3 contracts</p>
    <p>Multi-signature wallets likely used by the Gemini exchange</p>
    <p>Interesting, time-dependent withdrawal policies</p>
    <p>Multi-Signature Wallet: signature scheme requiring k-of-N signatures.</p>
    <p>Security best practice for large sums of money</p>
  </div>
  <div class="page">
    <p>Time Dependency Hazard</p>
    <p>Found block.timestamp used in contract</p>
    <p>Erays reveals it is used to control the delay of withdrawal requests</p>
    <p>Useful auditing tool, even for opaque contracts</p>
  </div>
  <div class="page">
    <p>Case Study: Duplicate Contracts</p>
    <p>Look for opaque contracts with the most instances</p>
    <p>Exchange user wallets  Poloniex: ~350,000 contracts  Yunbi: ~90,000 contracts</p>
    <p>A different approach to handling user funds</p>
  </div>
  <div class="page">
    <p>Case Study: EtherDelta Arbitrage</p>
    <p>Decentralized token exchanges (DEX) operate entirely on-chain  Etherdelta</p>
  </div>
  <div class="page">
    <p>Case Study: EtherDelta Arbitrage</p>
    <p>Decentralized token exchanges (DEX) operate entirely on-chain  Etherdelta</p>
    <p>Evidence of arbitrageurs</p>
    <p>Arbitrageur Behavior</p>
    <p>DEX</p>
  </div>
  <div class="page">
    <p>Case Study: EtherDelta Arbitrage</p>
    <p>Decentralized token exchanges (DEX) operate entirely on-chain  Etherdelta</p>
    <p>Evidence of arbitrageurs</p>
    <p>Executing a buy/sell mismatch for a profit</p>
    <p>Arbitrageur Behavior</p>
    <p>DEX</p>
  </div>
  <div class="page">
    <p>Case Study: EtherDelta Arbitrage Bots</p>
    <p>Arbitrageurs must publish gadgets to facilitate arbitrage</p>
    <p>Create functions to validate the order and new trade</p>
    <p>Implement atomic batch trades (or fail)</p>
    <p>Arbitrageur Behavior</p>
    <p>Gadg. DEX</p>
    <p>Buy/Sell Trades</p>
    <p>Assert or revert both</p>
    <p>trades</p>
  </div>
  <div class="page">
    <p>Case Study: CryptoKitties</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Case Study: CryptoKitties</p>
    <p>On-chain game code is published with source code</p>
    <p>Game mechanism well understood</p>
  </div>
  <div class="page">
    <p>Case Study: CryptoKitties</p>
    <p>Developers who know the algorithm arent allowed to play the game!</p>
  </div>
  <div class="page">
    <p>Case Study: CryptoKitties</p>
    <p>Developers who know the algorithm arent allowed to play the game!</p>
    <p>So obviously we had to target this function</p>
  </div>
  <div class="page">
    <p>Case Study: CryptoKitties</p>
    <p>The block hash is used to inject random mutations into genes and to select a parent for a gene</p>
    <p>. 1234</p>
    <p>Randomness(block hash)</p>
    <p>Matron Sire</p>
    <p>Child 2345</p>
  </div>
  <div class="page">
    <p>Case Study: CryptoKitties</p>
    <p>The block hash is used to inject random mutations into genes and to select a parent for a gene</p>
    <p>Found a more effective breeding strategy</p>
    <p>. 1234</p>
    <p>Randomness(block hash)</p>
    <p>Matron Sire</p>
    <p>Child 2345</p>
  </div>
  <div class="page">
    <p>Case Study: CryptoKitties</p>
    <p>The block hash is used to inject random mutations into genes and to select a parent for a gene</p>
    <p>Found a more effective breeding strategy</p>
    <p>Dont rely on security through obscurity!</p>
    <p>. 1234</p>
    <p>Randomness(block hash)</p>
    <p>Matron Sire</p>
    <p>Child 2345</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Ethereum smart contract ecosystem is largely opaque  ~ 1M contracts, 34K unique, 77.5% unique opaque</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Ethereum smart contract ecosystem is largely opaque  ~ 1M contracts, 34K unique, 77.5% unique opaque</p>
    <p>Erays converts EVM bytecode into higher level representations  https://github.com/teamnsrg/erays  yizhou7@illinois.edu</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Ethereum smart contract ecosystem is largely opaque  ~ 1M contracts, 34K unique, 77.5% unique opaque</p>
    <p>Erays converts EVM bytecode into higher level representations  https://github.com/teamnsrg/erays  yizhou7@illinois.edu</p>
    <p>The utility of Erays is demonstrated in several case studies  High value wallets, exchange user wallets, arbitrage bots, CryptoKitties secret</p>
    <p>algorithm</p>
  </div>
</Presentation>
