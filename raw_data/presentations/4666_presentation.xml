<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>SEARCHING SUBSTRUCTURES WITH SUPERIMPOSED DISTANCE</p>
    <p>Xifeng Yan, Feida Zhu Jiawei Han, Philip S. Yu University of Illinois at Urbana-Champaign</p>
    <p>IBM T. J Watson Research Center</p>
  </div>
  <div class="page">
    <p>GRAPHS ARE EVERYWHERE</p>
    <p>Aspirin Yeast Protein Interaction Network</p>
    <p>fr om</p>
    <p>H . Je</p>
    <p>on g</p>
    <p>et a</p>
    <p>l N at</p>
    <p>u re</p>
    <p>, 41</p>
    <p>( 20</p>
    <p>Metabolic Network Dependency Graph</p>
  </div>
  <div class="page">
    <p>GRAPH DATA</p>
    <p>Chem-informatics: chemical compounds Bioinformatics: protein structures, protein interaction networks, biological pathways, metabolic networks,  Computer Vision: object models Software: program dependency graph, flow graph, Social network</p>
    <p>Workflow</p>
  </div>
  <div class="page">
    <p>GRAPH INFORMATION SYSTEM</p>
    <p>processing graph queries</p>
    <p>Graph Search</p>
    <p>finding hidden patterns</p>
    <p>Graph Mining</p>
    <p>Characterize graph objects  Build indices for graph search  Extract biologically conserved modules  Discriminate drug complexes  Classify protein structures  Cluster gene networks  Detect anomaly in program flows  Graph registration system</p>
    <p>Applications</p>
  </div>
  <div class="page">
    <p>GRAPH SEARCH</p>
    <p>(a) 1H-Indene (b) Omephine (c) Digitoxigenin</p>
    <p>Chemical Compounds</p>
    <p>Query Graph</p>
    <p>O</p>
    <p>O</p>
    <p>OH</p>
    <p>N</p>
    <p>N S</p>
    <p>O O</p>
    <p>N</p>
    <p>N N</p>
    <p>N</p>
    <p>O</p>
    <p>O</p>
  </div>
  <div class="page">
    <p>VARIETY OF GRAPH SEARCH</p>
    <p>Full structure search Substructure search [Shasha et al. PODS02, Yan et al. SIGMOD04]</p>
    <p>Approximate substructure search [Yan et al. SIGMOD05]</p>
    <p>Substructure search with constraints Superimposed distance [this work, ICDE06] Other varieties</p>
  </div>
  <div class="page">
    <p>SUPERIMPOSED DISTANCE</p>
    <p>Same Topological Structure But different Labels</p>
  </div>
  <div class="page">
    <p>SUPERIMPOSED DISTANCE</p>
    <p>Chemical Compounds</p>
    <p>Query Graph</p>
    <p>O</p>
    <p>O</p>
    <p>OH</p>
    <p>N</p>
    <p>N S</p>
    <p>O O</p>
    <p>N</p>
    <p>N N</p>
    <p>N</p>
    <p>O</p>
    <p>O</p>
  </div>
  <div class="page">
    <p>MINIMUM SUPERIMPOSED DISTANCE</p>
    <p>Given two graphs, Q and G, let M be the set of subgraphs in G that are isomorphic to Q. The minimum superimposed distance between Q and G is the minimum distance between Q and Q' in M.</p>
  </div>
  <div class="page">
    <p>SUBSTRUCTURE SEARCH WITH SUPERIMPOSED DISTANCE (SSSD)</p>
    <p>Given a set of graphs D={G1, G2, , Gn} and a query graph Q,</p>
    <p>SSSD is to find all Gi in D such that</p>
  </div>
  <div class="page">
    <p>INDEXING GRAPHS</p>
    <p>Indexing is crucial</p>
    <p>index</p>
    <p>answer</p>
    <p>answer</p>
    <p>without index</p>
  </div>
  <div class="page">
    <p>FEATURE-BASED INDEX</p>
    <p>O</p>
    <p>O</p>
    <p>OH</p>
    <p>Feature: 1. Paths (Shasha et al. PODS02) 2. Discriminative Frequent Substructures</p>
    <p>(Yan et al. SIGMOD04)</p>
  </div>
  <div class="page">
    <p>STRUCTURAL EQUIVALENCE CLASS</p>
    <p>Graphs G and G belong to the same equivalence class if and only if G is isomorphic to G. The structural equivalence class of G is written [G]</p>
  </div>
  <div class="page">
    <p>THE INDEX STRUCTURE</p>
  </div>
  <div class="page">
    <p>INDEX CONSTRUCTION</p>
  </div>
  <div class="page">
    <p>PARTITION-BASED SEARCH</p>
    <p>We partition a query graph Q into nonoverlapping indexed features f1, f2, ..., fm, and use them to do pruning. If the distance function satisfies the following inequality,</p>
    <p>we can get the lower bound of the superimposed distance between Q and G by adding up the superimposed distance between fi and G.</p>
  </div>
  <div class="page">
    <p>MULTIPLE PARTITIONS</p>
    <p>O</p>
    <p>O</p>
    <p>OH</p>
    <p>O</p>
    <p>O</p>
    <p>OH</p>
    <p>Partition I</p>
    <p>Partition II</p>
    <p>Target graph G Query graph Q</p>
    <p>G Q</p>
    <p>Hexagon + Path</p>
    <p>Pentagon + Path</p>
  </div>
  <div class="page">
    <p>OVERLAPPING RELATION GRAPH</p>
    <p>node: feature edge: overlapping node weight: minimum distance between fi and G,</p>
    <p>f1 f2</p>
    <p>f3 f1</p>
    <p>f2 f3</p>
    <p>f4</p>
    <p>f4</p>
    <p>Query graph Q</p>
  </div>
  <div class="page">
    <p>SEARCH OPTIMIZATION</p>
    <p>Given a graph Q=(V, E), a partition of G is a set of subgraphs {f1, f2, , fm} such that</p>
    <p>for any i!= j.</p>
    <p>GIVEN A GRAPH G, OPTIMIZE</p>
  </div>
  <div class="page">
    <p>FROM ONE TO MULTIPLE</p>
    <p>GIVEN A GRAPH G, OPTIMIZE</p>
    <p>For one graph G, select one partition</p>
    <p>For another graph G, select another partition?</p>
    <p>GIVEN A SET OF GRAPHS , OPTIMIZE</p>
  </div>
  <div class="page">
    <p>ACROSS MULTIPLE GRAPHS</p>
    <p>node weight is redefined</p>
    <p>Using average minimum distance between a feature f and the graphs Gi in the database, written as</p>
    <p>f1</p>
    <p>f2 f3</p>
    <p>f4</p>
  </div>
  <div class="page">
    <p>MAXIMUM WEIGHTED INDEPENDENT SET</p>
    <p>[THEOREM] Index-based Partition Optimization is NP-hard.</p>
    <p>W1</p>
    <p>W2 W3</p>
    <p>W4</p>
  </div>
  <div class="page">
    <p>GREEDY SOLUTION w 1</p>
    <p>w 2</p>
    <p>w 3 w 5</p>
    <p>w 7</p>
    <p>w 6</p>
    <p>w 4</p>
    <p>w 1 w 3w 5 w 7w 6w 4 w 2</p>
    <p>w4  w6  w5  w1  w7  w2  w3</p>
  </div>
  <div class="page">
    <p>Experiment Dataset</p>
    <p>The real dataset is from an AIDS antiviral screen database containing the structures of chemical compounds. This dataset is available on the website of the Developmental Therapeutics Program (NCI/NIH). In this dataset, thousands of compounds have been checked for evidence of anti-HIV activity. The dataset has around 44,000 structures.</p>
  </div>
  <div class="page">
    <p>Experiment Setting</p>
    <p>We build topoPrune and PIS based on the gIndex (SIGMOD04). gIndex first mines frequent structures and then retains discriminative ones as indexing features. topoPrune and PIS are implemented in C++ with standard template library. All of the experiments are done on a 2.5GHZ, 1GB memory, Intel Xeon PC running Fedora 2.0.</p>
  </div>
  <div class="page">
    <p>Pruning Efficiency</p>
    <p># of</p>
    <p>c an</p>
    <p>di da</p>
    <p>te g</p>
    <p>ra ph</p>
    <p>s</p>
    <p>query subset</p>
    <p>topoPrune PIS =4 PIS =2 PIS =1</p>
  </div>
  <div class="page">
    <p>Efficiency vs. Fragment Size</p>
    <p>re du</p>
    <p>ct io</p>
    <p>n ra</p>
    <p>ti o</p>
    <p>query subset</p>
    <p>PIS size=4 PIS size=5 PIS size=6</p>
  </div>
  <div class="page">
    <p>CONCLUSIONS</p>
    <p>A substructure search problem with additional similarity requirements A problem as a component in our graph information system Approach: feature-based index and partition-based search HIGHLIGHT: select discriminative features in a query space for search efficiency</p>
  </div>
  <div class="page">
    <p>THANK YOU</p>
  </div>
</Presentation>
