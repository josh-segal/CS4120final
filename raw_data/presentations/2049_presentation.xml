<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Kevin Chen, Warren He, Devdatta Akhawe, Vijay DSilva, Prateek Mittal, Dawn Song</p>
    <p>University of California, Berkeley Princeton University</p>
  </div>
  <div class="page">
    <p>Security Analysis of Software Systems</p>
    <p>Abstract: From programs to models</p>
    <p>Check: Security properties on the models</p>
    <p>Specifications = +</p>
  </div>
  <div class="page">
    <p>The Spectrum of Security Analyses</p>
    <p>Completely manual</p>
    <p>Fully automatic</p>
    <p>BitBlaze</p>
    <p>address-sanitizer</p>
  </div>
  <div class="page">
    <p>Manual Specification Creation</p>
    <p>Steep learning curve  Model remains error prone  Process has to be repeated for</p>
    <p>different applications</p>
  </div>
  <div class="page">
    <p>Automatic Program Analysis (Bottom-up)</p>
    <p>Unable to efficiently recognize high-level semantics (bad at throwing away details)</p>
    <p>Typically requires full code visibility or complex environment models</p>
    <p>Properties often hard-coded into the analyzers</p>
    <p>BitBlaze</p>
    <p>address-sanitizer</p>
  </div>
  <div class="page">
    <p>Is there a middle ground?</p>
  </div>
  <div class="page">
    <p>Insight: Build from Common Blocks</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Web Applications</p>
    <p>Hard to implement the protocols correctly  Customized APIs and undocumented behaviors  Subtleties of the webs security model</p>
    <p>Hard to check the protocol implementation  Hard to generate models  Hard to specify security properties  Dont have all parties code</p>
  </div>
  <div class="page">
    <p>Problem Definition</p>
    <p>Do the following: a. construct a model that is consistent with the application</p>
    <p>behavior (i.e. the execution traces) b. check the model against the security policy.</p>
    <p>Given reasonable resources: i. a web application consisting of multiple parties ii. execution traces of the web application iii. a security policy</p>
  </div>
  <div class="page">
    <p>Session integrity:  Any action that an honest server takes should not be directly/indirectly</p>
    <p>caused by a dishonest/untrusted party  e.g. A request caused by robber.com shouldnt reduce money in my</p>
    <p>bank account  e.g. A request caused by sessionrider.com shouldnt change my login</p>
    <p>status on facebook.com  Information secrecy:</p>
    <p>Secrets shared by the client and the server should not be learned or inferred by any unauthorized third-party</p>
  </div>
  <div class="page">
    <p>Modeling: Observations</p>
    <p>Common web application logics  Web applications use similar mechanisms to</p>
    <p>maintain web sessions  Single sign-on services use similar concepts</p>
    <p>regardless of the protocols (e.g Facebook Connect, Google Login, CAS Login, ...)</p>
    <p>E-commerce protocols user similar concepts and steps to process payments (e.g. Paypal, Amazon payment, )</p>
  </div>
  <div class="page">
    <p>Modeling: Our approach</p>
    <p>Middle ground  Manually construct the basic blocks once</p>
    <p>Application independent  Use these basic blocks to describe many protocols</p>
    <p>Application dependent  Representation:</p>
    <p>a domain specific language (DSL)  Use DSL in program synthesis</p>
    <p>programmatically search for program that passes test cases</p>
    <p>high-level helps search efficiently</p>
  </div>
  <div class="page">
    <p>ASPIRE Workflow</p>
    <p>Synthesizer Domain</p>
    <p>Knowledge and DSL</p>
    <p>Validator</p>
    <p>Model</p>
    <p>Policy</p>
    <p>(i)</p>
    <p>(iii)</p>
    <p>Application</p>
  </div>
  <div class="page">
    <p>ASPIRE Workflow</p>
    <p>Synthesizer Domain</p>
    <p>Knowledge and DSL</p>
    <p>System Demonstration</p>
    <p>Validator</p>
    <p>Model</p>
    <p>Policy</p>
    <p>(iii)</p>
    <p>(ii)Application(i)</p>
  </div>
  <div class="page">
    <p>ASPIRE Workflow</p>
    <p>Synthesizer Domain</p>
    <p>Knowledge and DSL</p>
    <p>System Demonstration</p>
    <p>Analyst Feedback</p>
    <p>Validator</p>
    <p>Model</p>
    <p>Policy</p>
    <p>(iii)</p>
    <p>(ii)Application(i)</p>
  </div>
  <div class="page">
    <p>Running Example: Synthesis ~GET /login HTTP/1.1</p>
    <p>Host: bodgeitstore.com</p>
    <p>HTTP/1.1 200 OK</p>
    <p>Content-Type: text/html</p>
    <p>Set-Cookie: session=7ffa4512</p>
    <p>&lt;form method=&quot;post&quot; action=&quot;/login&quot;&gt;</p>
    <p>&lt;input type=&quot;hidden&quot; name=&quot;csrftoken&quot; value=&quot;3eff8527&quot;&gt;</p>
    <p>&lt;input type=&quot;text&quot; name=&quot;username&quot;&gt;</p>
    <p>&lt;input type=&quot;password&quot; name=&quot;password&quot;&gt;</p>
    <p>&lt;input type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;login&quot;&gt;</p>
    <p>&lt;/form&gt;</p>
    <p>~POST /login HTTP/1.1</p>
    <p>Content-Type: application/x-www-form-urlencoded</p>
    <p>Cookie: session=7ffa4512</p>
    <p>Host: bodgeitstore.com</p>
    <p>csrftoken=3eff8527&amp;username=user1&amp;password=secretpwd&amp;submit=login</p>
    <p>HTTP/1.1 200 OK</p>
    <p>Content-Type: text/html</p>
    <p>&lt;b&gt;Welcome!&lt;/b&gt;</p>
    <p>servers: bodgeit;</p>
    <p>init:</p>
    <p>bodgeit knows t1,t2;</p>
    <p>client knows t3,t4;</p>
    <p>messages:</p>
    <p>request(server=bodgeit, type=req-helo),</p>
    <p>response(server=bodgeit, type=resp-helo,</p>
    <p>fields=(jsid in setcookie, csrf in body)),</p>
    <p>request(server=bodgeit, type=req-login,</p>
    <p>fields=(rcsrf in urlparam, rjsid in cookie,</p>
    <p>username in urlparam, password in urlparam)),</p>
    <p>response(server=bodgeit, type=resp-login);</p>
    <p>invariants:</p>
    <p>resp-helo.jsid isa t1;</p>
    <p>resp-helo.csrf isa t2;</p>
    <p>req-login.username isa t3;</p>
    <p>req-login.password isa t4;</p>
    <p>forall m1:resp-helo, m2:req-helo {</p>
    <p>m1.jsid == m2.rjsid &lt;=&gt; m1.csrf == m2.rcsrf;</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>Running Example: Synthesis ~GET /login HTTP/1.1</p>
    <p>Host: bodgeitstore.com</p>
    <p>HTTP/1.1 200 OK</p>
    <p>Content-Type: text/html</p>
    <p>Set-Cookie: session=7ffa4512</p>
    <p>&lt;form method=&quot;post&quot; action=&quot;/login&quot;&gt;</p>
    <p>&lt;input type=&quot;hidden&quot; name=&quot;csrftoken&quot; value=&quot;3eff8527&quot;&gt;</p>
    <p>&lt;input type=&quot;text&quot; name=&quot;username&quot;&gt;</p>
    <p>&lt;input type=&quot;password&quot; name=&quot;password&quot;&gt;</p>
    <p>&lt;input type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;login&quot;&gt;</p>
    <p>&lt;/form&gt;</p>
    <p>~POST /login HTTP/1.1</p>
    <p>Content-Type: application/x-www-form-urlencoded</p>
    <p>Cookie: session=7ffa4512</p>
    <p>Host: bodgeitstore.com</p>
    <p>csrftoken=3eff8527&amp;username=user1&amp;password=secretpwd&amp;submit=login</p>
    <p>HTTP/1.1 200 OK</p>
    <p>Content-Type: text/html</p>
    <p>&lt;b&gt;Welcome!&lt;/b&gt;</p>
    <p>servers: bodgeit;</p>
    <p>init:</p>
    <p>bodgeit knows t1,t2;</p>
    <p>client knows t3,t4;</p>
    <p>messages:</p>
    <p>request(server=bodgeit, type=req-helo),</p>
    <p>response(server=bodgeit, type=resp-helo,</p>
    <p>fields=(jsid in setcookie, csrf in body)),</p>
    <p>request(server=bodgeit, type=req-login,</p>
    <p>fields=(rcsrf in urlparam, rjsid in cookie,</p>
    <p>username in urlparam, password in urlparam)),</p>
    <p>response(server=bodgeit, type=resp-login);</p>
    <p>invariants:</p>
    <p>resp-helo.jsid isa t1;</p>
    <p>resp-helo.csrf isa t2;</p>
    <p>req-login.username isa t3;</p>
    <p>req-login.password isa t4;</p>
    <p>forall m1:resp-helo, m2:req-helo {</p>
    <p>m1.jsid == m2.rjsid &lt;=&gt; m1.csrf == m2.rcsrf;</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>Running Example: Synthesis ~GET /login HTTP/1.1</p>
    <p>Host: bodgeitstore.com</p>
    <p>HTTP/1.1 200 OK</p>
    <p>Content-Type: text/html</p>
    <p>Set-Cookie: session=7ffa4512</p>
    <p>&lt;form method=&quot;post&quot; action=&quot;/login&quot;&gt;</p>
    <p>&lt;input type=&quot;hidden&quot; name=&quot;csrftoken&quot; value=&quot;3eff8527&quot;&gt;</p>
    <p>&lt;input type=&quot;text&quot; name=&quot;username&quot;&gt;</p>
    <p>&lt;input type=&quot;password&quot; name=&quot;password&quot;&gt;</p>
    <p>&lt;input type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;login&quot;&gt;</p>
    <p>&lt;/form&gt;</p>
    <p>~POST /login HTTP/1.1</p>
    <p>Content-Type: application/x-www-form-urlencoded</p>
    <p>Cookie: session=7ffa4512</p>
    <p>Host: bodgeitstore.com</p>
    <p>csrftoken=3eff8527&amp;username=user1&amp;password=secretpwd&amp;submit=login</p>
    <p>HTTP/1.1 200 OK</p>
    <p>Content-Type: text/html</p>
    <p>&lt;b&gt;Welcome!&lt;/b&gt;</p>
    <p>servers: bodgeit;</p>
    <p>init:</p>
    <p>bodgeit knows t1,t2;</p>
    <p>client knows t3,t4;</p>
    <p>messages:</p>
    <p>request(server=bodgeit, type=req-helo),</p>
    <p>response(server=bodgeit, type=resp-helo,</p>
    <p>fields=(jsid in setcookie, csrf in body)),</p>
    <p>request(server=bodgeit, type=req-login,</p>
    <p>fields=(rcsrf in urlparam, rjsid in cookie,</p>
    <p>username in urlparam, password in urlparam)),</p>
    <p>response(server=bodgeit, type=resp-login);</p>
    <p>invariants:</p>
    <p>resp-helo.jsid isa t1;</p>
    <p>resp-helo.csrf isa t2;</p>
    <p>req-login.username isa t3;</p>
    <p>req-login.password isa t4;</p>
    <p>forall m1:resp-helo, m2:req-helo {</p>
    <p>m1.jsid == m2.rjsid &lt;=&gt; m1.csrf == m2.rcsrf;</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>Running Example: Synthesis ~GET /login HTTP/1.1</p>
    <p>Host: bodgeitstore.com</p>
    <p>HTTP/1.1 200 OK</p>
    <p>Content-Type: text/html</p>
    <p>Set-Cookie: session=7ffa4512</p>
    <p>&lt;form method=&quot;post&quot; action=&quot;/login&quot;&gt;</p>
    <p>&lt;input type=&quot;hidden&quot; name=&quot;csrftoken&quot; value=&quot;3eff8527&quot;&gt;</p>
    <p>&lt;input type=&quot;text&quot; name=&quot;username&quot;&gt;</p>
    <p>&lt;input type=&quot;password&quot; name=&quot;password&quot;&gt;</p>
    <p>&lt;input type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;login&quot;&gt;</p>
    <p>&lt;/form&gt;</p>
    <p>~POST /login HTTP/1.1</p>
    <p>Content-Type: application/x-www-form-urlencoded</p>
    <p>Cookie: session=7ffa4512</p>
    <p>Host: bodgeitstore.com</p>
    <p>csrftoken=3eff8527&amp;username=user1&amp;password=secretpwd&amp;submit=login</p>
    <p>HTTP/1.1 200 OK</p>
    <p>Content-Type: text/html</p>
    <p>&lt;b&gt;Welcome!&lt;/b&gt;</p>
    <p>servers: bodgeit;</p>
    <p>init:</p>
    <p>bodgeit knows t1,t2;</p>
    <p>client knows t3,t4;</p>
    <p>messages:</p>
    <p>request(server=bodgeit, type=req-helo),</p>
    <p>response(server=bodgeit, type=resp-helo,</p>
    <p>fields=(jsid in setcookie, csrf in body)),</p>
    <p>request(server=bodgeit, type=req-login,</p>
    <p>fields=(rcsrf in urlparam, rjsid in cookie,</p>
    <p>username in urlparam, password in urlparam)),</p>
    <p>response(server=bodgeit, type=resp-login);</p>
    <p>invariants:</p>
    <p>resp-helo.jsid isa t1;</p>
    <p>resp-helo.csrf isa t2;</p>
    <p>req-login.username isa t3;</p>
    <p>req-login.password isa t4;</p>
    <p>forall m1:resp-helo, m2:req-helo {</p>
    <p>m1.jsid == m2.rjsid &lt;=&gt; m1.csrf == m2.rcsrf;</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>Running Example: Synthesis ~GET /login HTTP/1.1</p>
    <p>Host: bodgeitstore.com</p>
    <p>HTTP/1.1 200 OK</p>
    <p>Content-Type: text/html</p>
    <p>Set-Cookie: session=7ffa4512</p>
    <p>&lt;form method=&quot;post&quot; action=&quot;/login&quot;&gt;</p>
    <p>&lt;input type=&quot;hidden&quot; name=&quot;csrftoken&quot; value=&quot;3eff8527&quot;&gt;</p>
    <p>&lt;input type=&quot;text&quot; name=&quot;username&quot;&gt;</p>
    <p>&lt;input type=&quot;password&quot; name=&quot;password&quot;&gt;</p>
    <p>&lt;input type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;login&quot;&gt;</p>
    <p>&lt;/form&gt;</p>
    <p>~POST /login HTTP/1.1</p>
    <p>Content-Type: application/x-www-form-urlencoded</p>
    <p>Cookie: session=7ffa4512</p>
    <p>Host: bodgeitstore.com</p>
    <p>csrftoken=3eff8527&amp;username=user1&amp;password=secretpwd&amp;submit=login</p>
    <p>HTTP/1.1 200 OK</p>
    <p>Content-Type: text/html</p>
    <p>&lt;b&gt;Welcome!&lt;/b&gt;</p>
    <p>servers: bodgeit;</p>
    <p>init:</p>
    <p>bodgeit knows t1,t2;</p>
    <p>client knows t3,t4;</p>
    <p>messages:</p>
    <p>request(server=bodgeit, type=req-helo),</p>
    <p>response(server=bodgeit, type=resp-helo,</p>
    <p>fields=(jsid in setcookie, csrf in body)),</p>
    <p>request(server=bodgeit, type=req-login,</p>
    <p>fields=(rcsrf in urlparam, rjsid in cookie,</p>
    <p>username in urlparam, password in urlparam)),</p>
    <p>response(server=bodgeit, type=resp-login);</p>
    <p>invariants:</p>
    <p>resp-helo.jsid isa t1;</p>
    <p>resp-helo.csrf isa t2;</p>
    <p>req-login.username isa t3;</p>
    <p>req-login.password isa t4;</p>
    <p>forall m1:resp-helo, m2:req-helo {</p>
    <p>m1.jsid == m2.rjsid &lt;=&gt; m1.csrf == m2.rcsrf;</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>Running Example: Synthesis ~GET /login HTTP/1.1</p>
    <p>Host: bodgeitstore.com</p>
    <p>HTTP/1.1 200 OK</p>
    <p>Content-Type: text/html</p>
    <p>Set-Cookie: session=7ffa4512</p>
    <p>&lt;form method=&quot;post&quot; action=&quot;/login&quot;&gt;</p>
    <p>&lt;input type=&quot;hidden&quot; name=&quot;csrftoken&quot; value=&quot;3eff8527&quot;&gt;</p>
    <p>&lt;input type=&quot;text&quot; name=&quot;username&quot;&gt;</p>
    <p>&lt;input type=&quot;password&quot; name=&quot;password&quot;&gt;</p>
    <p>&lt;input type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;login&quot;&gt;</p>
    <p>&lt;/form&gt;</p>
    <p>~POST /login HTTP/1.1</p>
    <p>Content-Type: application/x-www-form-urlencoded</p>
    <p>Cookie: session=7ffa4512</p>
    <p>Host: bodgeitstore.com</p>
    <p>csrftoken=3eff8527&amp;username=user1&amp;password=secretpwd&amp;submit=login</p>
    <p>HTTP/1.1 200 OK</p>
    <p>Content-Type: text/html</p>
    <p>&lt;b&gt;Welcome!&lt;/b&gt;</p>
    <p>servers: bodgeit;</p>
    <p>init:</p>
    <p>bodgeit knows t1,t2;</p>
    <p>client knows t3,t4;</p>
    <p>messages:</p>
    <p>request(server=bodgeit, type=req-helo),</p>
    <p>response(server=bodgeit, type=resp-helo,</p>
    <p>fields=(jsid in setcookie, csrf in body)),</p>
    <p>request(server=bodgeit, type=req-login,</p>
    <p>fields=(rcsrf in urlparam, rjsid in cookie,</p>
    <p>username in urlparam, password in urlparam)),</p>
    <p>response(server=bodgeit, type=resp-login);</p>
    <p>invariants:</p>
    <p>resp-helo.jsid isa t1;</p>
    <p>resp-helo.csrf isa t2;</p>
    <p>req-login.username isa t3;</p>
    <p>req-login.password isa t4;</p>
    <p>forall m1:resp-helo, m2:req-helo {</p>
    <p>m1.jsid == m2.rjsid &lt;=&gt; m1.csrf == m2.rcsrf;</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>Running Example: Checking</p>
    <p>pred isCSRF[r: HTTPRequest] {</p>
    <p>(some r.prev and r.prev in MaliciousRedirectionResponse)</p>
    <p>(r.from = VictimClient)</p>
    <p>(r.to in VictimServer))</p>
    <p>some (r.payload  r.cookies)</p>
    <p>attackerCanLearn(r.payload  r.cookies)</p>
    <p>}</p>
    <p>CSRF:</p>
  </div>
  <div class="page">
    <p>Running Example: Checking</p>
    <p>pred isCSRF[r: HTTPRequest] {</p>
    <p>(some r.prev and r.prev in MaliciousRedirectionResponse)</p>
    <p>(r.from = VictimClient)</p>
    <p>(r.to in VictimServer))</p>
    <p>some (r.payload  r.cookies)</p>
    <p>attackerCanLearn(r.payload  r.cookies)</p>
    <p>}</p>
    <p>CSRF: 1. Malicious server serves</p>
    <p>malicious web page to victim client</p>
  </div>
  <div class="page">
    <p>Running Example: Checking</p>
    <p>pred isCSRF[r: HTTPRequest] {</p>
    <p>(some r.prev and r.prev in MaliciousRedirectionResponse)</p>
    <p>(r.from = VictimClient)</p>
    <p>(r.to in VictimServer))</p>
    <p>some (r.payload  r.cookies)</p>
    <p>attackerCanLearn(r.payload  r.cookies)</p>
    <p>}</p>
    <p>CSRF: 1. Malicious server serves</p>
    <p>malicious web page to victim client</p>
    <p>other parameters</p>
  </div>
  <div class="page">
    <p>Running Example: Checking</p>
    <p>pred isCSRF[r: HTTPRequest] {</p>
    <p>(some r.prev and r.prev in MaliciousRedirectionResponse)</p>
    <p>(r.from = VictimClient)</p>
    <p>(r.to in VictimServer))</p>
    <p>some (r.payload  r.cookies)</p>
    <p>attackerCanLearn(r.payload  r.cookies)</p>
    <p>}</p>
    <p>CSRF: 1. Malicious server serves</p>
    <p>malicious web page to victim client</p>
  </div>
  <div class="page">
    <p>Running Example: Checking</p>
    <p>pred isCSRF[r: HTTPRequest] {</p>
    <p>(some r.prev and r.prev in MaliciousRedirectionResponse)</p>
    <p>(r.from = VictimClient)</p>
    <p>(r.to in VictimServer))</p>
    <p>some (r.payload  r.cookies)</p>
    <p>attackerCanLearn(r.payload  r.cookies)</p>
    <p>}</p>
    <p>CSRF: 1. Malicious server serves</p>
    <p>malicious web page to victim client</p>
    <p>Rule encoding:  Request caused by</p>
    <p>malicious page</p>
    <p>CSRF?</p>
  </div>
  <div class="page">
    <p>Running Example: Checking</p>
    <p>pred isCSRF[r: HTTPRequest] {</p>
    <p>(some r.prev and r.prev in MaliciousRedirectionResponse)</p>
    <p>(r.from = VictimClient)</p>
    <p>(r.to in VictimServer))</p>
    <p>some (r.payload  r.cookies)</p>
    <p>attackerCanLearn(r.payload  r.cookies)</p>
    <p>}</p>
    <p>CSRF: 1. Malicious server serves</p>
    <p>malicious web page to victim client</p>
    <p>Rule encoding:  Request caused by</p>
    <p>malicious page  The victim client sent it to the</p>
    <p>victim server</p>
    <p>CSRF?</p>
  </div>
  <div class="page">
    <p>Running Example: Checking</p>
    <p>pred isCSRF[r: HTTPRequest] {</p>
    <p>(some r.prev and r.prev in MaliciousRedirectionResponse)</p>
    <p>(r.from = VictimClient)</p>
    <p>(r.to in VictimServer))</p>
    <p>some (r.payload  r.cookies)</p>
    <p>attackerCanLearn(r.payload  r.cookies)</p>
    <p>}</p>
    <p>CSRF: 1. Malicious server serves</p>
    <p>malicious web page to victim client</p>
    <p>Rule encoding:  Request caused by</p>
    <p>malicious page  The victim client sent it to the</p>
    <p>victim server</p>
    <p>CSRF?</p>
  </div>
  <div class="page">
    <p>Running Example: CSRF Token servers: bodgeit;</p>
    <p>init:</p>
    <p>bodgeit knows t1,t2;</p>
    <p>client knows t3,t4;</p>
    <p>messages:</p>
    <p>request(server=bodgeit, type=req-helo),</p>
    <p>response(server=bodgeit, type=resp-helo,</p>
    <p>fields=(jsid in setcookie, csrf in body)),</p>
    <p>request(server=bodgeit, type=req-login,</p>
    <p>fields=(rcsrf in urlparam, rjsid in cookie,</p>
    <p>username in urlparam, password in urlparam)),</p>
    <p>response(server=bodgeit, type=resp-login);</p>
    <p>invariants:</p>
    <p>resp-helo.jsid isa t1;</p>
    <p>resp-helo.csrf isa t2;</p>
    <p>req-login.username isa t3;</p>
    <p>req-login.password isa t4;</p>
    <p>forall m1:resp-helo, m2:req-helo {</p>
    <p>m1.jsid == m2.rjsid &lt;=&gt; m1.csrf == m2.rcsrf;</p>
    <p>}</p>
    <p>pred isCSRF[r: HTTPRequest] {</p>
    <p>(some r.prev and r.prev in MaliciousRedirectionResponse)</p>
    <p>(r.from = VictimClient)</p>
    <p>(r.to in VictimServer))</p>
    <p>some (r.payload  r.cookies)</p>
    <p>attackerCanLearn(r.payload  r.cookies)</p>
    <p>}</p>
    <p>UNSAT</p>
  </div>
  <div class="page">
    <p>Case Study: the CAS Protocol</p>
    <p>User Identity Provider</p>
    <p>Services (Relying party)</p>
  </div>
  <div class="page">
    <p>The Synthesized Model</p>
    <p>/home</p>
    <p>redirect, sid</p>
  </div>
  <div class="page">
    <p>The Synthesized Model</p>
    <p>/home</p>
    <p>login form, sid&amp;csrf setcookie:c1</p>
    <p>/login?sid</p>
    <p>redirect, sid</p>
  </div>
  <div class="page">
    <p>The Synthesized Model</p>
    <p>/home</p>
    <p>login form, sid&amp;csrf setcookie:c1</p>
    <p>/login?sid</p>
    <p>/auth?user&amp;pwd&amp;sid&amp;csrf cookie:c1</p>
    <p>redirect, sid&amp;ticket setcookie:c2,c3</p>
    <p>redirect, sid</p>
  </div>
  <div class="page">
    <p>The Synthesized Model</p>
    <p>/home</p>
    <p>login form, sid&amp;csrf setcookie:c1</p>
    <p>/login?sid</p>
    <p>/check?sid&amp;ticket</p>
    <p>redirect, setcookie:sid</p>
    <p>/auth?user&amp;pwd&amp;sid&amp;csrf cookie:c1</p>
    <p>redirect, sid&amp;ticket setcookie:c2,c3</p>
    <p>redirect, sid</p>
  </div>
  <div class="page">
    <p>The Vulnerability</p>
    <p>/check?sid&amp;ticket</p>
    <p>redirect, setcookie:sid</p>
    <p>/home</p>
    <p>login form, sid&amp;csrf setcookie:c1</p>
    <p>/login?sid</p>
    <p>/auth?user&amp;pwd&amp;sid&amp;csrf cookie:c1</p>
    <p>redirect, sid&amp;ticket setcookie:c2,c3</p>
    <p>redirect, sid</p>
  </div>
  <div class="page">
    <p>Preliminary Results Name #Servers New Hints #Msgs Verif. Time (s) Vuln.?</p>
    <p>CAS 2 None</p>
    <p>Ignore msg. (-) None</p>
    <p>Y (New) Y (Known)</p>
    <p>N</p>
    <p>NeedMy Password.com 1</p>
    <p>None Ignore msg. (-) Input value (+)</p>
    <p>Y (New) N</p>
    <p>Y (Known)</p>
    <p>Govtrak.us 2 None</p>
    <p>Ignore URLs (-) Ignore msg. (-)</p>
    <p>&gt;7200 699.91</p>
    <p>N Y (New) Y (New)</p>
  </div>
  <div class="page">
    <p>ASPIREs Architecture</p>
    <p>Core: the encoding of the domain knowledge for a class of applications</p>
    <p>The analyst starts by using examples to demonstrate how the application works</p>
    <p>The synthesizer generates one or more candidate models that  conform to the DSL syntax  conform to the examples</p>
    <p>The specifications will be inspected and the results will feedback to the synthesizer</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Synthesize models of applications from highlevel building blocks  Constructing the build blocks: manually from</p>
    <p>observation of common patterns  Constructing the model: automatically using</p>
    <p>synthesizers  Key elements</p>
    <p>The input: execution traces and feedback  The representation: domain specific languages  The algorithm: specification synthesis</p>
  </div>
  <div class="page">
    <p>End of presentation. Backup slides and graphical resources follow.</p>
  </div>
  <div class="page">
    <p>, security_policy( , ) = True</p>
    <p>Security Policy + Model</p>
    <p>Session integrity  Information secrecy</p>
  </div>
  <div class="page">
    <p>ASPIRE Workflow</p>
    <p>Synthesizer Domain</p>
    <p>Knowledge and DSL</p>
    <p>System Demonstration</p>
    <p>Analyst Feedback</p>
    <p>Validator Results</p>
    <p>Model and Policy</p>
    <p>Backend Solver</p>
  </div>
  <div class="page">
    <p>Use cases for the generated spec</p>
    <p>Run classic analysis and verification tools  Translate spec to implementation  Help better understand the existing systems</p>
  </div>
  <div class="page">
    <p>ASPIRE for the Web</p>
    <p>Given a multiparty web application and its execution traces</p>
    <p>Generate the specification of the web protocol used by the servers and the client</p>
    <p>Check for session integrity (CSRF) vulnerabilities on the specification</p>
    <p>Return attack traces or refine the specification to reduce false positives and false negatives</p>
  </div>
  <div class="page">
    <p>Components</p>
    <p>The DSL  The synthesizer  The validator</p>
  </div>
  <div class="page"/>
  <div class="page"/>
  <div class="page"/>
</Presentation>
