<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Unobservable communication over fully untrusted infrastructure</p>
    <p>Sebastian Angel Srinath Setty</p>
    <p>UT Austin and NYU Microsoft Research</p>
  </div>
  <div class="page">
    <p>Communication is possible because of many service providers</p>
    <p>A</p>
    <p>B</p>
    <p>Service providers</p>
  </div>
  <div class="page">
    <p>These providers can observe all communication</p>
    <p>zMessi  B: How serious is my injury?A</p>
    <p>B</p>
  </div>
  <div class="page">
    <p>Encryption can hide the message</p>
    <p>A</p>
    <p>B</p>
    <p>Content of the message is hidden</p>
    <p>zMessi  B: NTluEM2f8j6dMLeL9V0=</p>
  </div>
  <div class="page">
    <p>But metadata remains</p>
    <p>A</p>
    <p>B</p>
    <p>zMessi  B: NTluEM2f8j6dMLeL9V0=</p>
    <p>Metadata is still visible to service providers</p>
  </div>
  <div class="page">
    <p>But metadata remains</p>
    <p>A</p>
    <p>B</p>
    <p>zMessi  B: NTluEM2f8j6dMLeL9V0=</p>
    <p>Metadata is still visible to service providers</p>
  </div>
  <div class="page">
    <p>Metadata can be as sensitive as data</p>
    <p>telephone metadata can be used to determine highly</p>
    <p>sensitive traits. [Mayer, Mutchler, and Mitchell, PNAS 2016]</p>
    <p>General Hayden: We kill people based on metadata. (former NSA and CIA director)</p>
    <p>[David Cole, NYR Daily 2014]</p>
  </div>
  <div class="page">
    <p>Objective: adversary cannot determine who is talking to whom, or if anybody is talking at all</p>
    <p>A B</p>
    <p>C</p>
    <p>A B</p>
    <p>C</p>
    <p>A B</p>
    <p>C</p>
    <p>A talks to BA talks to C A talks to nobody ()</p>
  </div>
  <div class="page">
    <p>Objective: adversary cannot determine who is talking to whom, or if anybody is talking at all</p>
    <p>A B</p>
    <p>C</p>
    <p>A B</p>
    <p>C</p>
    <p>A B</p>
    <p>C</p>
    <p>A talks to BA talks to C A talks to nobody ()</p>
    <p>Variants of this objective date back to the 80s [Chaum, CACM 81]</p>
  </div>
  <div class="page">
    <p>Many systems already meet this objective!</p>
    <p>Onion routing (e.g., Tor [USENIX Sec 04])</p>
    <p>Servers remove one layer of encryption</p>
    <p>and forward messages to the next hop</p>
  </div>
  <div class="page">
    <p>Many systems already meet this objective!</p>
    <p>Onion routing (e.g., Tor [USENIX Sec 04])</p>
    <p>Strong assumptions on which parts of the infrastructure can be compromised</p>
    <p>Servers remove one layer of encryption</p>
    <p>and forward messages to the next hop</p>
  </div>
  <div class="page">
    <p>Many systems already meet this objective!</p>
    <p>Onion routing (e.g., Tor [USENIX Sec 04])</p>
    <p>Supports millions of users but tolerates few compromises</p>
  </div>
  <div class="page">
    <p>Many systems already meet this objective!</p>
    <p>Onion routing (e.g., Tor [USENIX Sec 04])</p>
    <p>Supports millions of users but tolerates few compromises</p>
    <p>Mix networks (e.g., Vuvuzela [SOSP 15])</p>
    <p>Servers shuffle traffic, add noise (cover traffic), remove layers of encryption, etc.</p>
    <p>Requires at least one correct server</p>
  </div>
  <div class="page">
    <p>Many systems already meet this objective!</p>
    <p>Onion routing (e.g., Tor [USENIX Sec 04])</p>
    <p>Supports millions of users but tolerates few compromises</p>
    <p>Mix networks (e.g., Vuvuzela [SOSP 15])</p>
    <p>Supports 2 million users but requires one correct server</p>
  </div>
  <div class="page">
    <p>Many systems already meet this objective!</p>
    <p>Onion routing (e.g., Tor [USENIX Sec 04])</p>
    <p>Supports millions of users but tolerates few compromises</p>
    <p>Mix networks (e.g., Vuvuzela [SOSP 15])</p>
    <p>Supports 2 million users but requires one correct server</p>
    <p>DC Networks (e.g., Dissent [CCS 10])</p>
    <p>Peer-to-peer network</p>
  </div>
  <div class="page">
    <p>Many systems already meet this objective!</p>
    <p>Onion routing (e.g., Tor [USENIX Sec 04])</p>
    <p>Supports millions of users but tolerates few compromises</p>
    <p>Mix networks (e.g., Vuvuzela [SOSP 15])</p>
    <p>Supports 2 million users but requires one correct server</p>
    <p>DC Networks (e.g., Dissent [CCS 10])</p>
    <p>Supports dozens of users but tolerates full infrastructure compromise</p>
  </div>
  <div class="page">
    <p>Many systems already meet this objective!</p>
    <p>Onion routing (e.g., Tor [USENIX Sec 04])</p>
    <p>Supports millions of users but tolerates few compromises</p>
    <p>Mix networks (e.g., Vuvuzela [SOSP 15])</p>
    <p>Supports 2 million users but requires one correct server</p>
    <p>DC Networks (e.g., Dissent [CCS 10])</p>
    <p>Supports dozens of users but tolerates full infrastructure compromise</p>
  </div>
  <div class="page">
    <p>We propose Pung</p>
    <p>Provably hides metadata even if all infrastructure is compromised</p>
    <p>Supports point-to-point and group communication</p>
    <p>A B</p>
    <p>C Point-to-point</p>
    <p>A B</p>
    <p>C Group communication</p>
    <p>Processes &gt;100K messages/min with 4 servers (scales linearly with # servers)</p>
  </div>
  <div class="page">
    <p>In the rest of this talk we answer</p>
    <p>How does Pung work?</p>
    <p>What is the performance of Pung?</p>
  </div>
  <div class="page">
    <p>Clients use a key value store to communicate</p>
    <p>A</p>
    <p>B</p>
    <p>Untrusted key value store</p>
  </div>
  <div class="page">
    <p>Clients use a key value store to communicate</p>
    <p>A</p>
    <p>B</p>
    <p>Untrusted key value store Put(B, Encrypted Msg)</p>
  </div>
  <div class="page">
    <p>Clients use a key value store to communicate</p>
    <p>A</p>
    <p>B</p>
    <p>Get(B)</p>
    <p>Encrypted Msg</p>
    <p>Untrusted key value store Put(B, Encrypted Msg)</p>
  </div>
  <div class="page">
    <p>Pung must hide a lot of metadata</p>
    <p>Participants of a conversation</p>
    <p>Message size</p>
    <p>Time of a message being sent</p>
    <p>Time of message delivery</p>
    <p>Frequency of communication</p>
  </div>
  <div class="page">
    <p>Pung must hide a lot of metadata</p>
    <p>Participants of a conversation</p>
    <p>Message size</p>
    <p>Time of a message being sent</p>
    <p>Time of message delivery</p>
    <p>Frequency of communication</p>
  </div>
  <div class="page">
    <p>Put request parameter leaks recipient</p>
    <p>A</p>
    <p>B</p>
    <p>Key leaks the recipients identity</p>
    <p>Put(B, Encrypted Msg)</p>
    <p>Get(B)</p>
    <p>Encrypted Msg</p>
  </div>
  <div class="page">
    <p>Put request parameter leaks recipient</p>
    <p>A</p>
    <p>B</p>
    <p>Put( , Encrypted Msg)</p>
    <p>Get( )</p>
    <p>Opaque label no longer leak recipients identity!</p>
    <p>Encrypted Msg</p>
  </div>
  <div class="page">
    <p>Put + Get in combination leak metadata!</p>
    <p>A</p>
    <p>B</p>
    <p>Put( , Encrypted Msg)</p>
    <p>Get( )</p>
    <p>Encrypted Msg</p>
    <p>Put from A and Get from B can</p>
    <p>be associated because they</p>
    <p>have the same inputs/outputs</p>
    <p>A is talking to B</p>
  </div>
  <div class="page">
    <p>A</p>
    <p>B</p>
    <p>Put( , Encrypted Msg)</p>
    <p>Get( )Q</p>
    <p>Solution: break association of Put and Get</p>
    <p>encodes Q</p>
  </div>
  <div class="page">
    <p>A</p>
    <p>B</p>
    <p>Put( , Encrypted Msg)</p>
    <p>Get( )Q</p>
    <p>A encodes Encrypted MsgA</p>
    <p>Solution: break association of Put and Get</p>
    <p>encodes Q</p>
  </div>
  <div class="page">
    <p>A</p>
    <p>B</p>
    <p>Put( , Encrypted Msg)</p>
    <p>Put and Get cannot be</p>
    <p>associated since they dont</p>
    <p>share anything distinguishable</p>
    <p>Get( )Q</p>
    <p>A encodes Encrypted MsgA</p>
    <p>Solution: break association of Put and Get</p>
    <p>encodes Q</p>
  </div>
  <div class="page">
    <p>Server can answer the Query obliviously</p>
    <p>B</p>
    <p>Encrypted Msg</p>
    <p>D+6KvjStEhaV0g=</p>
    <p>DH72Eytqk14dtQ=</p>
    <p>encodes Q</p>
    <p>encodes Encrypted MsgA</p>
    <p>Get( )Q</p>
    <p>A</p>
    <p>A</p>
    <p>Q</p>
  </div>
  <div class="page">
    <p>Server can answer the Query obliviously</p>
    <p>B</p>
    <p>Encrypted Msg</p>
    <p>D+6KvjStEhaV0g=</p>
    <p>DH72Eytqk14dtQ=</p>
    <p>Private information retrieval (PIR) hides the access pattern by requiring the</p>
    <p>server to perform cryptographic operations over every single entry</p>
    <p>encodes Q</p>
    <p>encodes Encrypted MsgA</p>
    <p>Get( )Q</p>
    <p>A</p>
    <p>A</p>
    <p>Q</p>
  </div>
  <div class="page">
    <p>Many applications benefit from clients retrieving messages in a batch</p>
  </div>
  <div class="page">
    <p>Clients can get k elements by issuing k queries</p>
    <p>Msg 3</p>
    <p>Msg 1</p>
    <p>Msg 2</p>
    <p>Want:</p>
    <p>Msg 4</p>
  </div>
  <div class="page">
    <p>Clients can get k elements by issuing k queries</p>
    <p>Msg 3</p>
    <p>Msg 1</p>
    <p>Msg 2</p>
    <p>Q</p>
    <p>Q</p>
    <p>Want:</p>
    <p>Msg 4</p>
    <p>Q</p>
  </div>
  <div class="page">
    <p>Clients can get k elements by issuing k queries</p>
    <p>Msg 3</p>
    <p>Msg 1</p>
    <p>Msg 2</p>
    <p>Q</p>
    <p>Q</p>
    <p>Q Q</p>
    <p>Want:</p>
    <p>Msg 4</p>
    <p>Q</p>
    <p>Q</p>
  </div>
  <div class="page">
    <p>Clients can get k elements by issuing k queries</p>
    <p>Msg 3</p>
    <p>Msg 1</p>
    <p>Msg 2</p>
    <p>Q</p>
    <p>Q</p>
    <p>Q Q</p>
    <p>Q Q</p>
    <p>Want:</p>
    <p>Msg 4</p>
    <p>Q</p>
    <p>Q</p>
    <p>Q</p>
  </div>
  <div class="page">
    <p>Clients can get k elements by issuing k queries</p>
    <p>Elements processed: kn = 12 (4 per query)</p>
    <p>Msg 3</p>
    <p>Msg 1</p>
    <p>Msg 2 Server processes each</p>
    <p>query independently</p>
    <p>Q</p>
    <p>A</p>
    <p>Q</p>
    <p>Q Q</p>
    <p>A</p>
    <p>A</p>
    <p>Q Q</p>
    <p>A</p>
    <p>Want:</p>
    <p>Msg 4</p>
    <p>Q</p>
    <p>Q</p>
    <p>A</p>
    <p>A</p>
    <p>Q</p>
  </div>
  <div class="page">
    <p>Can we amortize the cost of answering k Get requests?</p>
  </div>
  <div class="page">
    <p>Idea 1: Partition the database into k buckets</p>
    <p>Split database into k buckets with a static partitioning scheme</p>
    <p>Msg 3</p>
    <p>Msg 1</p>
    <p>Msg 2</p>
    <p>Msg 4</p>
  </div>
  <div class="page">
    <p>Idea 1: Partition the database into k buckets</p>
    <p>Msg 1</p>
    <p>Msg 3</p>
    <p>Msg 2</p>
    <p>Bucket 1 Bucket 2</p>
    <p>Want:</p>
    <p>Msg 4</p>
    <p>Bucket 3</p>
  </div>
  <div class="page">
    <p>Idea 1: Partition the database into k buckets</p>
    <p>Msg 1</p>
    <p>Msg 3</p>
    <p>Msg 2</p>
    <p>Bucket 1 Bucket 2 Q</p>
    <p>Want:</p>
    <p>Msg 4</p>
    <p>Bucket 3</p>
  </div>
  <div class="page">
    <p>Idea 1: Partition the database into k buckets</p>
    <p>Msg 1</p>
    <p>Msg 3</p>
    <p>Msg 2</p>
    <p>Bucket 1 Bucket 2</p>
    <p>Q Q</p>
    <p>Q</p>
    <p>Want:</p>
    <p>Msg 4</p>
    <p>Bucket 3</p>
    <p>Q</p>
  </div>
  <div class="page">
    <p>Idea 1: Partition the database into k buckets</p>
    <p>Elements processed: n = 4 (8 fewer than before)</p>
    <p>Msg 1</p>
    <p>Msg 3</p>
    <p>Msg 2</p>
    <p>Bucket 1 Bucket 2</p>
    <p>Q Q</p>
    <p>Q</p>
    <p>Want:</p>
    <p>Msg 4</p>
    <p>Bucket 3</p>
    <p>A A A</p>
    <p>Q</p>
    <p>A A A</p>
  </div>
  <div class="page">
    <p>Issue: how does a client get &gt;1 message from the same bucket?</p>
    <p>Msg 1</p>
    <p>Msg 3</p>
    <p>Msg 2</p>
    <p>Bucket 1 Bucket 2</p>
    <p>Want:</p>
    <p>Msg 4</p>
    <p>Bucket 3</p>
  </div>
  <div class="page">
    <p>Issue: how does a client get &gt;1 message from the same bucket?</p>
    <p>Q Q Msg 1</p>
    <p>Msg 3</p>
    <p>Msg 2</p>
    <p>Bucket 1 Bucket 2</p>
    <p>Want:</p>
    <p>Msg 4</p>
    <p>Bucket 3</p>
  </div>
  <div class="page">
    <p>Issue: how does a client get &gt;1 message from the same bucket?</p>
    <p>Q Q Msg 1</p>
    <p>Msg 3</p>
    <p>Msg 2</p>
    <p>Bucket 1 Bucket 2</p>
    <p>Want:</p>
    <p>Msg 4</p>
    <p>Bucket 3</p>
    <p>Q Q Q Q Q Q</p>
  </div>
  <div class="page">
    <p>Issue: how does a client get &gt;1 message from the same bucket?</p>
    <p>Elements processed: 8 (4 fewer than before )</p>
    <p>Q Q</p>
    <p>A A</p>
    <p>A</p>
    <p>Msg 1</p>
    <p>Msg 3</p>
    <p>Msg 2</p>
    <p>Bucket 1 Bucket 2</p>
    <p>Want:</p>
    <p>Msg 4</p>
    <p>Bucket 3</p>
    <p>A A A</p>
    <p>A A</p>
    <p>A</p>
    <p>Q Q Q Q Q Q</p>
    <p>A A A</p>
  </div>
  <div class="page">
    <p>Issue: how does a client get &gt;1 message from the same bucket?</p>
    <p>Elements processed: 8 (4 fewer than before )</p>
    <p>Q Q</p>
    <p>A A</p>
    <p>A</p>
    <p>Msg 1</p>
    <p>Msg 3</p>
    <p>Msg 2</p>
    <p>Bucket 1 Bucket 2</p>
    <p>Want:</p>
    <p>Msg 4</p>
    <p>Bucket 3</p>
    <p>A A A</p>
    <p>A A</p>
    <p>A</p>
    <p>Q Q Q Q Q Q</p>
    <p>A A A Lots of useless</p>
    <p>answers (overhead)</p>
  </div>
  <div class="page">
    <p>Idea 2: Alias messages under two labels</p>
    <p>Msg 1</p>
    <p>Msg 3</p>
    <p>Msg 2</p>
    <p>Bucket 1 Bucket 2</p>
    <p>Msg 4</p>
    <p>Bucket 3</p>
  </div>
  <div class="page">
    <p>Idea 2: Alias messages under two labels</p>
    <p>Msg 1</p>
    <p>Msg 3</p>
    <p>Msg 2</p>
    <p>Bucket 1 Bucket 2</p>
    <p>Msg 1</p>
    <p>Bucket 3</p>
    <p>Msg 2</p>
    <p>Msg 4</p>
    <p>Msg 3</p>
    <p>Msg 4</p>
  </div>
  <div class="page">
    <p>Idea 2: Alias messages under two labels</p>
    <p>Any message can be found in 2 different buckets</p>
    <p>doubles the cost of processing each query</p>
    <p>Msg 1</p>
    <p>Msg 3</p>
    <p>Msg 2</p>
    <p>Bucket 1 Bucket 2</p>
    <p>Msg 1</p>
    <p>Bucket 3</p>
    <p>Msg 2</p>
    <p>Msg 4</p>
    <p>Msg 3</p>
    <p>Msg 4</p>
  </div>
  <div class="page">
    <p>With aliasing, clients have multiple buckets from which to get a message</p>
    <p>Clients can leverage the power of 2 choices [Azar, Broder, Karlin, and Upfal, STOC 94]</p>
    <p>[Mitzenmacher, Ph.D. Thesis 96]</p>
  </div>
  <div class="page">
    <p>Idea 2: Alias messages under two labels</p>
    <p>Msg 1</p>
    <p>Msg 3</p>
    <p>Msg 2</p>
    <p>Table 1 Table 2</p>
    <p>Msg 1</p>
    <p>Table 3</p>
    <p>Msg 2</p>
    <p>Msg 4</p>
    <p>Msg 3</p>
    <p>Msg 4 Want:</p>
  </div>
  <div class="page">
    <p>Idea 2: Alias messages under two labels</p>
    <p>Msg 1</p>
    <p>Msg 3</p>
    <p>Msg 2</p>
    <p>Table 1 Table 2</p>
    <p>Msg 1</p>
    <p>Table 3</p>
    <p>Msg 2</p>
    <p>Msg 4</p>
    <p>Msg 3</p>
    <p>Msg 4 Want:</p>
    <p>Q</p>
    <p>Q Q Q</p>
  </div>
  <div class="page">
    <p>Idea 2: Alias messages under two labels</p>
    <p>Msg 1</p>
    <p>Msg 3</p>
    <p>Msg 2</p>
    <p>Table 1 Table 2</p>
    <p>Msg 1</p>
    <p>Table 3</p>
    <p>Msg 2</p>
    <p>Msg 4</p>
    <p>Msg 3</p>
    <p>Msg 4 Want:</p>
    <p>Q</p>
    <p>Q</p>
    <p>A</p>
    <p>Q Q</p>
    <p>AA</p>
    <p>AA A</p>
    <p>Elements processed: 8 (4 fewer than before)</p>
  </div>
  <div class="page">
    <p>Idea 2: Alias messages under two labels</p>
    <p>Msg 1</p>
    <p>Msg 3</p>
    <p>Msg 2</p>
    <p>Table 1 Table 2</p>
    <p>Msg 1</p>
    <p>Table 3</p>
    <p>Msg 2</p>
    <p>Msg 4</p>
    <p>Msg 3</p>
    <p>Msg 4 Want:</p>
    <p>Q</p>
    <p>Q</p>
    <p>A</p>
    <p>Q Q</p>
    <p>AA</p>
    <p>AA A</p>
    <p>Elements processed: 8 (4 fewer than before)</p>
    <p>No useless answers</p>
  </div>
  <div class="page">
    <p>Queries required to get any k messages</p>
    <p>Single requests</p>
  </div>
  <div class="page">
    <p>Queries required to get any k messages</p>
    <p># q</p>
    <p>u e ri e s</p>
    <p># buckets = # messages to get = k</p>
    <p>Partitioning</p>
    <p>&gt;5X</p>
    <p>Single requests</p>
  </div>
  <div class="page">
    <p>Queries required to get any k messages</p>
    <p># q</p>
    <p>u e ri e s</p>
    <p># buckets = # messages to get = k</p>
    <p>Partitioning</p>
    <p>Partitioning + Aliasing &gt;2X</p>
    <p>&gt;5X</p>
    <p>Single requests</p>
  </div>
  <div class="page">
    <p>In the paper we also discuss</p>
    <p>How to encode buckets so that one query is sufficient</p>
    <p>How to construct queries if clients do not know the layout of the servers database</p>
  </div>
  <div class="page">
    <p>In the rest of this talk we answer</p>
    <p>How does Pung work?</p>
    <p>What is the performance of Pung?</p>
  </div>
  <div class="page">
    <p>Pungs prototype</p>
    <p>5K source lines of Rust</p>
    <p>PIR library is XPIR [Aguilar-Melchor et al., PETS 2016]</p>
    <p>Pungs server-side computation expressed as a dataflow graph</p>
    <p>Runs on a Naiad cluster (using the timely dataflow library)</p>
  </div>
  <div class="page">
    <p>How many users and messages can Pung support?</p>
    <p>What is the throughput of Pung when batching?</p>
    <p>Evaluation questions</p>
  </div>
  <div class="page">
    <p>Evaluation setup</p>
    <p>Server is 64 dataflow workers across 4 VMs</p>
    <p>Put</p>
    <p>Get</p>
    <p>Put</p>
    <p>Get</p>
  </div>
  <div class="page">
    <p>Evaluation setup</p>
    <p>Server is 64 dataflow workers across 4 VMs</p>
    <p>Put</p>
    <p>Get</p>
    <p>Put</p>
    <p>Get</p>
    <p>Dissent [CCS 10] Vuvuzela [SOSP 15]</p>
  </div>
  <div class="page">
    <p>How many users and messages can Pung support?</p>
  </div>
  <div class="page">
    <p>Number of users supported with 1 min latency</p>
    <p>Dissent: ~64</p>
    <p>Pung: ~65K</p>
    <p>Vuvuzela: ~2M</p>
  </div>
  <div class="page">
    <p>Number of users supported with 1 min latency</p>
    <p>Dissent: ~64</p>
    <p>Pung: ~65K</p>
    <p>Vuvuzela: ~2M</p>
    <p>Dissent provides a stronger</p>
    <p>property than Pung and</p>
    <p>Vuvuzela</p>
  </div>
  <div class="page">
    <p>Number of users supported with 1 min latency</p>
    <p>Dissent: ~64</p>
    <p>Pung: ~65K</p>
    <p>Vuvuzela: ~2M</p>
    <p>Dissent provides a stronger</p>
    <p>property than Pung and</p>
    <p>Vuvuzela</p>
    <p>Pung withstands a stronger</p>
    <p>adversary than Vuvuzela</p>
  </div>
  <div class="page">
    <p>What is the throughput of Pung when batching?</p>
  </div>
  <div class="page">
    <p>Pungs throughput is 6X lower than Vuvuzela</p>
    <p>Pung Vuvuzela</p>
    <p>T h ro</p>
    <p>u g</p>
    <p>h p</p>
    <p>u t</p>
    <p>(m e</p>
    <p>s s a</p>
    <p>g e s /</p>
    <p>m in</p>
    <p>)</p>
    <p>Number of active users (sending and receiving 64 messages)</p>
    <p>Better</p>
  </div>
  <div class="page">
    <p>Pungs throughput is 6X lower than Vuvuzela</p>
    <p>Pung Vuvuzela</p>
    <p>T h ro</p>
    <p>u g</p>
    <p>h p</p>
    <p>u t</p>
    <p>(m e</p>
    <p>s s a</p>
    <p>g e s /</p>
    <p>m in</p>
    <p>)</p>
    <p>Number of active users (sending and receiving 64 messages)</p>
    <p>Better</p>
  </div>
  <div class="page">
    <p>Limitations</p>
    <p>High network costs for large batches</p>
    <p>Requires users to know a shared secret (topic of the next talk!)</p>
    <p>No known efficient dialing protocol (also in the next talk!)</p>
    <p>Denial of service is still a problem</p>
  </div>
  <div class="page">
    <p>In summary, Pung</p>
    <p>Allows users to communicate privately even if all infrastructure is compromised</p>
    <p>Supports tens of thousands of users</p>
    <p>Introduces a batch procedure that improves efficiency</p>
    <p>Code will be available at: https://github.com/sga001/pung</p>
    <p>Pung = ROT13(Chat)</p>
  </div>
</Presentation>
