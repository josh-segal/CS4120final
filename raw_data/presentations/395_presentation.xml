<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Provenance Query Patterns for Many-Task</p>
    <p>Scientific Computing</p>
    <p>Luiz Gadelha, Marta Mattoso Federal University of Rio de Janeiro</p>
    <p>Michael Wilde, Ian Foster University of Chicago/Argonne National Laboratory</p>
    <p>June 20, 2011</p>
  </div>
  <div class="page">
    <p>Introduction</p>
    <p>Problem definition: provenance modeling, gathering and querying for many-task computing (MTC).</p>
    <p>Data model for MTC provenance (OPM specialization).  Identification of query patterns for MTC provenance.  Creating support for the identified query patterns.  Implemented in the Swift parallel scripting system.</p>
  </div>
  <div class="page">
    <p>Provenance Model</p>
    <p>Requirements:</p>
    <p>annotations. 4. Gather versioning information about scientific workflows and</p>
    <p>their component applications. 5. Gather runtime information about external applications</p>
    <p>invoked from a Swift script. 6. Provide a usable and useful query interface for provenance.</p>
  </div>
  <div class="page">
    <p>Provenance Model</p>
    <p>The following entities are part of this data model:  Process. Can take artifacts as input, perform some</p>
    <p>computation, and produce artifacts as output.  Data set. Are given by artifacts that are consumed or</p>
    <p>produced by processes.  Application invocation. A type of process that is given by an</p>
    <p>invocation of a component applications of a scientific workflow.  Application execution. Are given by execution attempts of an</p>
    <p>external application.  Script run. Refers to the execution (successful or unsuccessful)</p>
    <p>of a Swift script.  Annotation. A name-value pair associated with either a</p>
    <p>dataset, process, or workflow.</p>
  </div>
  <div class="page">
    <p>Provenance Query Patterns</p>
    <p>Queries patterns identified in the Provenance Challenge series and in Swifts provenance system usage:</p>
    <p>Entity Attribute (EA). Attributes of an entity of the data model.</p>
    <p>One-step Relationship (R). Entities involved in a relationship of the data model.</p>
    <p>Multiple-step Relationship (R). Entities involved in the transitive closure of a relationship of the data model.</p>
    <p>Lineage Graph Matching (LGM). Similarity between lineage graphs.</p>
  </div>
  <div class="page">
    <p>Provenance Query Patterns</p>
    <p>Run summary (RS). Application specific attributes.  Run resource-level performance (RRP). Runtime behavior of</p>
    <p>scientific computations.  Run science-level performance (RSP). Input and output</p>
    <p>scientific parameters.</p>
    <p>Run comparisons (RCp). Comparisons between multiple runs with respect to some attribute.</p>
    <p>Run correlations (RCr). Correlation between multiple runs with respect to a set of attributes.</p>
  </div>
  <div class="page">
    <p>Provenance Query Patterns</p>
    <p>Table: Provenance Challenge Query Patterns.</p>
    <p>Pattern PC1/PC2 PC3 PC3 (Optional Queries)</p>
    <p>EA                             R                           R                  LGM</p>
    <p>RS                RCp             RCr</p>
  </div>
  <div class="page">
    <p>Implementation</p>
    <p>Provenance extracted from Swifts log files and stored in a relational database.</p>
    <p>To abstract common provenance query patterns, we wrote SQL functions and stored procedures to hide the complexity of the database schema by encapsulating frequently used relational joins.</p>
    <p>RCp and RCr query patterns are abstracted with stored procedures:</p>
    <p>compare run( list of parameters and annotation keys) returns a table with the values of the annotations and parameters per run.</p>
    <p>R query pattern can be abstracted with functions that use WITH RECURSIVE recursive queries.</p>
  </div>
  <div class="page">
    <p>Case Study: Open Protein Simulator</p>
  </div>
  <div class="page">
    <p>Case Study: Open Protein Simulator</p>
    <p>What was the correlation between root mean square distance (RMSD) and the number of simulation (loopModel) steps for a given protein? (RCr pattern)</p>
    <p>SELECT run_id, r.value as nSim, t.value as rmsd</p>
    <p>FROM compare_run_by_param(proteinId) as r</p>
    <p>INNER JOIN</p>
    <p>compare_run_by_param(nSim) as s USING (run_id)</p>
    <p>INNER JOIN</p>
    <p>compare_run_by_annot(rmsd) as t USING (run_id)</p>
    <p>WHERE r.value=TR567 and run.id LIKE psim.loops%;</p>
    <p>run_id | nSim | rmsd</p>
    <p>-----------------------------------+------+--------</p>
    <p>psim.loops-20100604-2215-cdifsnb3 | 256 | 3.33123</p>
    <p>psim.loops-20100613-0125-keyyyc35 | 512 | 0.76274</p>
    <p>psim.loops-20100616-1512-h6q4g4ja | 1024 | 0.68426</p>
    <p>...</p>
  </div>
  <div class="page">
    <p>Case Study: Open Protein Simulator</p>
    <p>Common Table Expressions can be used to define functions supporting the R pattern:</p>
    <p>CREATE OR REPLACE FUNCTION ancestors(varchar)</p>
    <p>RETURNS SETOF varchar AS $$</p>
    <p>WITH RECURSIVE anc(ancestor,descendant) AS</p>
    <p>(</p>
    <p>SELECT parent AS ancestor, child AS descendant</p>
    <p>FROM prov_graph</p>
    <p>WHERE child=$1</p>
    <p>UNION</p>
    <p>SELECT prov_graph.parent AS ancestor,</p>
    <p>anc.descendant AS descendant</p>
    <p>FROM anc, prov_graph</p>
    <p>WHERE anc.ancestor=prov_graph.child</p>
    <p>)</p>
    <p>SELECT ancestor FROM anc</p>
    <p>$$ LANGUAGE SQL;</p>
    <p>Where prov graph is a database view that defines the edges of the provenance graphs stored in the database.</p>
  </div>
  <div class="page">
    <p>Case Study: Open Protein Simulator</p>
    <p>An invocation of the previous function returns:</p>
    <p>SELECT *</p>
    <p>FROM ancestors(dataset:20100618-0402-ia0bqb73:72000045);</p>
    <p>ancestor</p>
    <p>-------------------------------------------------</p>
    <p>execute:psim.loops-20100618-0402-qhm9ugg4:451006</p>
    <p>dataset:20100618-0402-ia0bqb73:72000039</p>
    <p>...</p>
  </div>
  <div class="page">
    <p>Concluding Remarks</p>
    <p>We identified provenance query patterns from:  Provenance Challenge series.  Users of the Swift parallel scripting system.</p>
    <p>We implemented functions and stored procedures to support query patterns in Swifts provenance management system.</p>
    <p>Future work:  Compare how different data/storage models perform for</p>
    <p>provenance queries.  Provenance query language.</p>
  </div>
  <div class="page">
    <p>Concluding Remarks</p>
    <p>Thank you!</p>
  </div>
</Presentation>
