<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>NetHide: Secure and Practical Network Topology Obfuscation</p>
    <p>Roland Meier(1), Petar Tsankov(1), Vincent Lenders(2), Laurent Vanbever(1), Martin Vechev(1)</p>
    <p>nethide.ethz.ch</p>
    <p>USENIX Security 2018</p>
    <p>(2)(1)</p>
  </div>
  <div class="page">
    <p>Public serversBotnet</p>
  </div>
  <div class="page">
    <p>Link-flooding attacks (LFAs) target the infrastructure</p>
    <p>Public serversBotnet</p>
    <p>Low-rate, legitimate flows spread over many endpoints</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Link-flooding attacks (LFAs) target the infrastructure</p>
    <p>Public serversBotnet</p>
    <p>Low-rate, legitimate flows spread over many endpoints</p>
  </div>
  <div class="page">
    <p>Link-flooding attacks (LFAs) require knowing the topology</p>
    <p>Public serversBotnet</p>
    <p>?</p>
  </div>
  <div class="page">
    <p>Public serversBotnet</p>
  </div>
  <div class="page">
    <p>Public serversBotnet</p>
    <p>$ traceroute X</p>
    <p>X</p>
  </div>
  <div class="page">
    <p>Public serversBotnet</p>
    <p>$ traceroute X</p>
    <p>X</p>
    <p>UDP</p>
    <p>dst = X</p>
    <p>TTL = 1</p>
  </div>
  <div class="page">
    <p>Public serversBotnet</p>
    <p>$ traceroute X</p>
    <p>A</p>
    <p>ICMP</p>
    <p>TTL Exceeded</p>
    <p>src = A</p>
    <p>X</p>
    <p>UDP</p>
    <p>dst = X</p>
    <p>TTL = 1</p>
  </div>
  <div class="page">
    <p>Public serversBotnet</p>
    <p>$ traceroute X</p>
    <p>A X</p>
    <p>UDP</p>
    <p>dst = X</p>
    <p>TTL = 2</p>
  </div>
  <div class="page">
    <p>Public serversBotnet</p>
    <p>$ traceroute X</p>
    <p>A X</p>
    <p>UDP</p>
    <p>dst = X</p>
    <p>TTL = 2</p>
    <p>UDP</p>
    <p>dst = X</p>
    <p>TTL = 1</p>
  </div>
  <div class="page">
    <p>Public serversBotnet</p>
    <p>$ traceroute X</p>
    <p>A</p>
    <p>ICMP</p>
    <p>TTL Exceeded</p>
    <p>src = B</p>
    <p>X</p>
    <p>UDP</p>
    <p>dst = X</p>
    <p>TTL = 2</p>
    <p>UDP</p>
    <p>dst = X</p>
    <p>TTL = 1</p>
    <p>B</p>
  </div>
  <div class="page">
    <p>Public serversBotnet</p>
    <p>$ traceroute X</p>
    <p>A</p>
    <p>B</p>
    <p>C</p>
    <p>ICMP</p>
    <p>TTL Exceeded</p>
    <p>src = C</p>
    <p>X</p>
    <p>UDP</p>
    <p>dst = X</p>
    <p>TTL = 3</p>
  </div>
  <div class="page">
    <p>Public serversBotnet</p>
    <p>$ traceroute X</p>
    <p>A</p>
    <p>B</p>
    <p>C</p>
    <p>D ICMP</p>
    <p>TTL Exceeded</p>
    <p>src = D</p>
    <p>X</p>
    <p>UDP</p>
    <p>dst = X</p>
    <p>TTL = 4</p>
  </div>
  <div class="page">
    <p>Public serversBotnet</p>
    <p>$ traceroute X</p>
    <p>A</p>
    <p>B</p>
    <p>C</p>
    <p>D E</p>
    <p>ICMP</p>
    <p>TTL Exceeded</p>
    <p>src = E</p>
    <p>X</p>
    <p>UDP</p>
    <p>dst = X</p>
    <p>TTL = 5</p>
  </div>
  <div class="page">
    <p>Public serversBotnet</p>
    <p>$ traceroute X</p>
    <p>B</p>
    <p>C</p>
    <p>D E</p>
    <p>ICMP</p>
    <p>TTL Exceeded</p>
    <p>src = X</p>
    <p>X</p>
    <p>UDP</p>
    <p>dst = X</p>
    <p>TTL = 6</p>
  </div>
  <div class="page">
    <p>Learning large topologies by combining many path measurements</p>
    <p>Measuring ISP Topologies with Rocketfuel</p>
    <p>Neil Spring Ratul Mahajan David Wetherall</p>
    <p>{nspring,ratul,djw}@cs.washington.edu Computer Science and Engineering</p>
    <p>University of Washington Seattle, WA 98195-2350</p>
    <p>ABSTRACT To date, realistic ISP topologies have not been accessible to the research community, leaving work that depends on topology on an uncertain footing. In this paper, we present new Internet mapping techniques thathaveenabledus todirectlymeasure router-level ISP topologies. Our techniques reduce the number of required traces compared to a brute-force, all-to-all approach by three orders of magnitude without a significant loss in accuracy. They include the use of BGP routing tables to focus the measurements, exploiting properties of IP routing to eliminate redundant measurements, better alias resolution, and the use of DNS to divide each map into POPs and backbone. We collect maps from ten diverse ISPs using our techniques, and find that our maps are substantially more complete than those of earlier Internet mapping efforts. We also report on properties of these maps, including the size of POPs, distribution of router outdegree, and the inter-domain peering structure. As part of this work, we release our maps to the community.</p>
    <p>Categories and Subject Descriptors C.2.1 [Communication Networks]: Architecture and Design topology</p>
    <p>General Terms Measurement</p>
    <p>network researchers. Topology influences the dynamics of routing protocols [2, 10], the scalability of multicast [17], the efficacy of proposals for denial-of-service tracing and response [16, 11, 21, 22], and other aspects of protocol performance [18]. Sadly, real topologies are not publicly available because ISPs</p>
    <p>generally regard their router-level topologies as confidential. Some ISPspublishsimplified topologieson theWeb,but these lackrouterlevel connectivity and POP structure and may be optimistic or out of date. There is enough uncertainty in the properties of real ISP topologies (such as whether router outdegree distribution follows a power law as suggested in [7]) that it is unclear whether synthetic</p>
    <p>Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. To copy otherwise, to republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee. SIGCOMM02, August 19-23, 2002, Pittsburgh, Pennsylvania, USA. Copyright 2002 ACM 1-58113-570-X/02/0008 ...$5.00.</p>
    <p>topologies generated by tools such as GT-ITM [26] or Brite [12] are representative [25]. The main contribution of this paper is to present new measure</p>
    <p>ment techniques to infer high quality ISP maps while using as few measurements as possible. Our insight is that routing information can be exploited to select the measurements that are most valuable. One technique, directed probing, uses BGP routing information to choose only those traceroutes that are likely to transit the ISP being mapped. A second technique, path reductions, suppresses traceroutes that are likely to follow redundant paths through the ISP network. These two techniques reduce the number of traces required to map an ISP by three orders of magnitude compared to a bruteforce, all-to-all approach, andweshowthat thesavingsdonotcome at a high cost in terms of accuracy. We also describe a new solution to the alias resolution problem of clustering the interface IP addresses listed in a traceroute into their corresponding routers. Our new, pair-wise alias resolution procedure finds three times as many aliases as prior techniques. Additionally, we use DNS information to break the ISP maps into backbone and POP components, complete with their geographical location. We used our techniques to map ten diverse ISPs  Abovenet,</p>
    <p>AT&amp;T, Ebone, Exodus, Level3, Sprint, Telstra, Tiscali (Europe), Verio, and VSNL (India)  by using over 750 publicly available traceroute sources as measurement vantage points. These maps are summarized in the paper. Three ISPs, out of the ten we measured, helped to validate our</p>
    <p>maps. We also estimate the completeness of our maps by scanning ISP IP address ranges for routers that we might have missed, and by comparing the peering links we find with those present in BGP routing tables. Our maps reveal more complete ISP topologies compared to earlier efforts; we find roughly seven times more routers and links in our area of focus than Skitter [6]. As a second contribution, we examine several properties of the</p>
    <p>maps that are both of interest to researchers and likely to be useful for generating synthetic Internet maps. We report new results for the distribution of of POP sizes and the number of times that an ISP connects with other networks. Both distributions have significant tails. We also characterize the distribution of router outdegree, repeating some of the analysis in [7] with richer data. Finally, as one goal of our work and part of our ongoing valida</p>
    <p>tion effort, we are publicly releasing the ISP network maps inferred from our measurements. We are also making the entire raw measurementdata available to researchers; all ourmapsareconstructed with end-to-end measurements and without the benefit of confidential information. The maps and data are available at [20]. The rest of this paper is organized as follows. In Sections 2</p>
    <p>and 3, we describe our approach and the mapping techniques respectively. The implementation of our mapping engine, Rocket</p>
  </div>
  <div class="page">
    <p>So the solution is to hide the topology?</p>
    <p>yes, but</p>
  </div>
  <div class="page">
    <p>traceroute is an essential debugging tool</p>
  </div>
  <div class="page">
    <p>So the solution is to hide the topology?</p>
    <p>parts of</p>
  </div>
  <div class="page">
    <p>So the solution is to hide the topology?</p>
    <p>which parts?</p>
    <p>how?</p>
    <p>parts of</p>
  </div>
  <div class="page">
    <p>NetHide: Secure and Practical Network Topology Obfuscation</p>
    <p>NetHide deploys the virtual topology using programmable networks</p>
    <p>NetHide works for realistic topologies and maintains the utility of debugging tools</p>
    <p>NetHide computes a secure virtual topology that is similar to the physical topology</p>
  </div>
  <div class="page">
    <p>Reactive and proactive strategies</p>
    <p>to mitigate link-flooding attacks</p>
    <p>Reactive</p>
    <p>Proactive</p>
  </div>
  <div class="page">
    <p>Reactive and proactive strategies</p>
    <p>to mitigate link-flooding attacks</p>
    <p>Reactive act upon detecting a LFA</p>
    <p>Proactive</p>
    <p>[CoDef, Liaskos, SPIFFY]</p>
    <p>cannot prevent LFAs  impact on production traffic</p>
  </div>
  <div class="page">
    <p>Reactive and proactive strategies</p>
    <p>to mitigate link-flooding attacks</p>
    <p>Reactive act upon detecting a LFA</p>
    <p>Proactive Aim at preventing LFAs</p>
    <p>[CoDef, Liaskos, SPIFFY]</p>
    <p>[HoneyNet, Linkbait, Trassare]</p>
    <p>cannot prevent LFAs  impact on production traffic</p>
    <p>make debugging tools unusable</p>
  </div>
  <div class="page">
    <p>Reactive and proactive strategies</p>
    <p>to mitigate link-flooding attacks</p>
    <p>Reactive act upon detecting a LFA</p>
    <p>Proactive Aim at preventing LFAs</p>
    <p>[CoDef, Liaskos, SPIFFY]</p>
    <p>[HoneyNet, Linkbait, Trassare]</p>
    <p>[NetHide]</p>
    <p>cannot prevent LFAs  impact on production traffic</p>
    <p>make debugging tools unusable</p>
  </div>
  <div class="page">
    <p>NetHide: Secure and Practical Network Topology Obfuscation</p>
    <p>NetHide deploys the virtual topology using programmable networks</p>
    <p>NetHide works for realistic topologies and maintains the utility of debugging tools</p>
    <p>NetHide computes a secure virtual topology that is similar to the physical topology</p>
  </div>
  <div class="page">
    <p>Topology obfuscation as an optimization problem</p>
    <p>Given the physical topology P,</p>
    <p>compute a virtual topology V, such that</p>
    <p>V is robust against link-flooding attacks</p>
    <p>V has maximal practicality</p>
  </div>
  <div class="page">
    <p>Given the physical topology P,</p>
    <p>compute a virtual topology V, such that</p>
    <p>V is robust against link-flooding attacks</p>
    <p>V has maximal practicality</p>
    <p>Topology obfuscation as an optimization problem</p>
  </div>
  <div class="page">
    <p>Attacker can run flows between pairs of routers</p>
    <p>controls a set of hosts i.e. a botnet</p>
    <p>has a budget of flows to run flows between nodes (routers)</p>
    <p>has no prior knowledge about topology learns topology e.g. through traceroute</p>
    <p>Attacker</p>
  </div>
  <div class="page">
    <p>A topology is robust against LFAs, if the flow density of each link does not exceed its capacity</p>
    <p>Links in V Capacity of the link (max # of flows)</p>
    <p>Flow density of the link (# of flows using it)</p>
    <p>l  L : fd(l)  c(l)</p>
  </div>
  <div class="page">
    <p>A topology is robust against LFAs, if the flow density of each link does not exceed its capacity</p>
    <p>Links in V Capacity of the link (max # of flows)</p>
    <p>Flow density of the link (# of flows using it)</p>
    <p>l  L : fd(l)  c(l)</p>
  </div>
  <div class="page">
    <p>A topology is robust against LFAs, if the flow density of each link does not exceed its capacity</p>
    <p>Links in V Capacity of the link (max # of flows)</p>
    <p>Flow density of the link (# of flows using it)</p>
    <p>l  L : fd(l)  c(l)</p>
  </div>
  <div class="page">
    <p>Two basic strategies for attacking the virtual topology despite obfuscation</p>
    <p>Invert obfuscation and attack based on physical topology</p>
    <p>guess a promising attack based on the virtual topology</p>
    <p>Infeasible (more later)</p>
    <p>Incurs high overhead for attacker (see paper)</p>
  </div>
  <div class="page">
    <p>Given the physical topology P,</p>
    <p>compute a virtual topology V, such that</p>
    <p>V is robust against link-flooding attacks</p>
    <p>V has maximal practicality</p>
    <p>Topology obfuscation as an optimization problem</p>
  </div>
  <div class="page">
    <p>Accuracy and utility measure the closeness of P and V</p>
    <p>Virtual paths are similar to physical paths</p>
    <p>Failures in P are reflected in V</p>
  </div>
  <div class="page">
    <p>Accuracy and utility measure the closeness of P and V</p>
    <p>Virtual paths are similar to physical paths</p>
    <p>Accuracy</p>
    <p>Failures in P are reflected in V</p>
    <p>A B C D</p>
    <p>A B X D X Y Z</p>
  </div>
  <div class="page">
    <p>Accuracy and utility measure the closeness of P and V</p>
    <p>Virtual paths are similar to physical paths</p>
    <p>Utility</p>
    <p>Accuracy</p>
    <p>Failures in P are reflected in V</p>
    <p>A B C D</p>
    <p>A B X D X Y Z</p>
    <p>A B C DX</p>
    <p>A C B DX X Y ZX X</p>
  </div>
  <div class="page">
    <p>Given the physical topology P,</p>
    <p>compute a virtual topology V, such that</p>
    <p>V is robust against link-flooding attacks</p>
    <p>V has maximal practicality</p>
    <p>Topology obfuscation as an optimization problem</p>
  </div>
  <div class="page">
    <p>NetHide optimizes over a random sample of solutions</p>
    <p>to improve performance and security</p>
    <p>(NN)</p>
    <p>topology size (# of routers)</p>
    <p>all possible solutions</p>
    <p>(N) random sample</p>
    <p>better performance harder to invert obfuscation still high accuracy and utility</p>
  </div>
  <div class="page">
    <p>NetHide: Secure and Practical Network Topology Obfuscation</p>
    <p>NetHide deploys the virtual topology using programmable networks</p>
    <p>NetHide works for realistic topologies and maintains the utility of debugging tools</p>
    <p>NetHide computes a secure virtual topology that is similar to the physical topology</p>
  </div>
  <div class="page">
    <p>Deploy the virtual topology V, such that</p>
    <p>debugging tools still work</p>
    <p>network performance is not impacted</p>
    <p>Utility-preserving topology deployment</p>
    <p>it scales to large networks</p>
  </div>
  <div class="page">
    <p>Deploy the virtual topology V, such that</p>
    <p>debugging tools still work</p>
    <p>network performance is not impacted</p>
    <p>Utility-preserving topology deployment</p>
    <p>it scales to large networks</p>
  </div>
  <div class="page">
    <p>Maintaining the utility of debugging tools requires sending packets through the actual network</p>
    <p>Answer from a central controller</p>
    <p>Answer at the edge</p>
    <p>Answer in a virtual clone of the network</p>
    <p>Answer from the correct device that appears on the path</p>
  </div>
  <div class="page">
    <p>Deploy the virtual topology V, such that</p>
    <p>debugging tools still work</p>
    <p>network performance is not impacted</p>
    <p>Utility-preserving topology deployment</p>
    <p>it scales to large networks</p>
  </div>
  <div class="page">
    <p>Programmable network devices allow modifying tracing packets at line rate</p>
    <p>Read &amp; modify packet headers e.g. the TTL value</p>
    <p>Basic operations e.g. hash functions and checksums</p>
    <p>Add or remove custom headers to store information</p>
  </div>
  <div class="page">
    <p>Programmable network devices are configured through match+action tables</p>
    <p>X</p>
    <p>Y</p>
    <p>If I receive a packet to X with TTL = i, I should send it to Y with TTL = j</p>
  </div>
  <div class="page">
    <p>Deploy the virtual topology V, such that</p>
    <p>debugging tools still work</p>
    <p>network performance is not impacted</p>
    <p>Utility-preserving topology deployment</p>
    <p>it scales to large networks</p>
  </div>
  <div class="page">
    <p>Encoding state in packets instead of storing it in devices</p>
    <p>src IP dst IP TTL</p>
    <p>src port dst port</p>
    <p>payload</p>
    <p>IP</p>
    <p>UDP</p>
    <p>src IP dst IP TTL</p>
    <p>src port dst port</p>
    <p>payload</p>
    <p>IP</p>
    <p>Y src IP TTL</p>
    <p>TTL exceeded</p>
    <p>IP</p>
    <p>ICMP</p>
    <p>UDP</p>
    <p>D Y 1</p>
    <p>src port 9999</p>
    <p>payload</p>
    <p>IP</p>
    <p>UDP</p>
    <p>src IP dst IP TTL</p>
    <p>src port dst port</p>
    <p>signature</p>
    <p>meta</p>
    <p>UDP</p>
    <p>D Y 1</p>
    <p>src port 9999</p>
    <p>payload</p>
    <p>IP</p>
    <p>UDP</p>
    <p>src IP dst IP TTL</p>
    <p>src port dst port</p>
    <p>signature</p>
    <p>meta</p>
    <p>Y D TTL</p>
    <p>TTL exceeded</p>
    <p>IP</p>
    <p>ICMP</p>
    <p>UDP</p>
    <p>D Y</p>
  </div>
  <div class="page">
    <p>NetHide: Secure and Practical Network Topology Obfuscation</p>
    <p>NetHide deploys the virtual topology using programmable networks</p>
    <p>NetHide works for realistic topologies and maintains the utility of debugging tools</p>
    <p>NetHide computes a secure virtual topology that is similar to the physical topology</p>
  </div>
  <div class="page">
    <p>We evaluated various aspects of NetHide based on 3 real topologies</p>
    <p>Abilene</p>
    <p>Switch</p>
    <p>US Carrier</p>
    <p>Accuracy and utility</p>
    <p>Performance</p>
    <p>Timing</p>
    <p>Partial deployment</p>
    <p>Security</p>
  </div>
  <div class="page">
    <p>We evaluated various aspects of NetHide based on 3 real topologies</p>
    <p>Abilene</p>
    <p>Switch</p>
    <p>US Carrier</p>
    <p>Accuracy and utility</p>
    <p>Performance</p>
    <p>Timing</p>
    <p>Partial deployment</p>
    <p>Security</p>
  </div>
  <div class="page">
    <p>Accuracy</p>
    <p>Flow density reduction</p>
    <p>Utility</p>
    <p>Flow density reduction</p>
    <p>Ratio between the flow density in the physical and the virtual topology</p>
  </div>
  <div class="page">
    <p>ve ra</p>
    <p>ge a</p>
    <p>cc ur</p>
    <p>ac y</p>
    <p>A ve</p>
    <p>ra ge</p>
    <p>u til</p>
    <p>ity</p>
    <p>% o</p>
    <p>f p at</p>
    <p>hs w</p>
    <p>ith a</p>
    <p>cc =1</p>
    <p>High protection with small impact on accuracy and utility</p>
    <p>A ve</p>
    <p>ra ge</p>
    <p>a cc</p>
    <p>ur ac</p>
    <p>y</p>
    <p>A ve</p>
    <p>ra ge</p>
    <p>u til</p>
    <p>ity 0.0 0.2 0.4 0.6 0.8 1.0 Flow density reduction factor</p>
    <p>% o</p>
    <p>f p at</p>
    <p>hs w</p>
    <p>ith a</p>
    <p>cc =1</p>
    <p>Accuracy</p>
    <p>Flow density reduction</p>
    <p>Utility</p>
    <p>Flow density reduction</p>
    <p>be tt er</p>
    <p>be tt er</p>
    <p>NetHide</p>
    <p>Random</p>
  </div>
  <div class="page">
    <p>NetHide: Secure and Practical Network Topology Obfuscation</p>
    <p>NetHide deploys the virtual topology using programmable networks</p>
    <p>NetHide works for realistic topologies and maintains the utility of debugging tools</p>
    <p>NetHide computes a secure virtual topology that is similar to the physical topology</p>
    <p>nethide.ethz.ch</p>
    <p>NetHide: Secure and Practical Network Topology Obfuscation</p>
    <p>Roland Meier  , Petar Tsankov</p>
    <p>, Vincent Lenders</p>
    <p>, Laurent Vanbever</p>
    <p>, Martin Vechev</p>
    <p>ETH Zrich,</p>
    <p>armasuisse</p>
    <p>nethide.ethz.ch</p>
    <p>NetHide: Secure and Practical Network Topology Obfuscation</p>
    <p>Roland Meier  , Petar Tsankov</p>
    <p>, Vincent Lenders</p>
    <p>, Laurent Vanbever</p>
    <p>, Martin Vechev</p>
    <p>ETH Zrich,</p>
    <p>armasuisse</p>
    <p>nethide.ethz.ch</p>
    <p>Link-Flooding Attacks: DDoS against network core</p>
    <p>Botnet Public servers  Low-rate, legitimate flows spread over many endpoints</p>
    <p>Flows concentrate at target link and lead to congestion</p>
    <p>Require knowledge about the topology &amp; forwarding behavior</p>
    <p>NetHide: Proactive LFA defense</p>
    <p>NetHide obfuscates a network topology such</p>
    <p>that an attacker does not see attackable links.</p>
    <p>Challenge: Trade-off between</p>
    <p>Security: Hide enough such that an attacker can not perform the attack</p>
    <p>Practicality: Do not hide too much for legitimate use of diagnostic tools</p>
    <p>NetHide hides the vulnerable physical topology and shows a secure virtual topology</p>
    <p>Input Topology obfuscation</p>
    <p>Physical topology</p>
    <p>A</p>
    <p>B</p>
    <p>E</p>
    <p>FC D Accuracy</p>
    <p>Accuracy</p>
    <p>compare ( , )</p>
    <p>compare ( , )</p>
    <p>Utility for failure of link (D,E)________</p>
    <p>compare ( , )</p>
    <p>compare ( , )</p>
    <p>Utility for failure of link (D,E)________</p>
    <p>Topology deployment</p>
    <p>using programmable network devices</p>
    <p>Virtual topology</p>
    <p>A</p>
    <p>B</p>
    <p>E</p>
    <p>FC D</p>
    <p>dst TTL actions</p>
    <p>E 2 TTL=3, dst=D</p>
    <p>Random sample of candidate solutions</p>
    <p>Select topology with maximal accuracy and utility (V2)</p>
    <p>bottleneck link (C,D)</p>
    <p>virtual link = 2 common</p>
    <p>= 2 common</p>
    <p>observe failure (A,E)</p>
    <p>observe no failure P</p>
    <p>O</p>
    <p>= 3 common</p>
    <p>= 3 common</p>
    <p>observe failure (D,E)</p>
    <p>observe no failure P</p>
    <p>P</p>
    <p>dst TTL actions</p>
    <p>A 3 TTL=4</p>
    <p>dst TTL actions</p>
    <p>F 3 TTL=4</p>
    <p>dst TTL actions</p>
    <p>B 3 TTL=4</p>
    <p>c(C,D) &lt; fd(C,D)</p>
    <p>Physical topology</p>
    <p>Routing behavior</p>
    <p>Set of flows</p>
    <p>Capacity of each link</p>
    <p>Input:</p>
    <p>V1</p>
    <p>V2</p>
    <p>Deriving a secure and practical topology</p>
    <p>Given a physical topology P, NetHide computes a virtual topology V with the following properties:  V is secure (no LFA possible);  Path that a packet takes in V is similar to P;  Link failures in P are accurately observed in V.</p>
    <p>Network users only see the virtual topology</p>
    <p>NetHide uses programmable network devices to rewrite</p>
    <p>probing packets (e.g. from traceroute) such that:</p>
    <p>The observed paths match the virtual topology;</p>
    <p>Link failures can be detected;</p>
    <p>There is no impact on the network performance.</p>
    <p>NetHide works in practice</p>
    <p>Evaluation with 3 real topologies: Abilene (11 nodes), Switch (42), US Carrier (158)</p>
    <p>Increasing the security by 80% changes &lt; 20% of the paths (Switch)</p>
    <p>&gt; 90% of the link failures can be precisely tracked back</p>
    <p>This work was partly supported by armasuisse Science and Technology (S+T) under the Zurich Information Security and Privacy (ZISC) grant.</p>
    <p>Join me at the poster session</p>
  </div>
</Presentation>
