<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Between Mutual Trust and Mutual Distrust: Practical Fine-grained Privilege Separation in</p>
    <p>Multithreaded Applications</p>
    <p>Jun Wang, Xi Xiong, Peng Liu</p>
    <p>Penn State Cyber Security Lab 1</p>
  </div>
  <div class="page">
    <p>An inherent security limitation in multithreaded programming model</p>
    <p>All the threads inside a process (implicitly) assumed to be mutually trusted:  Same address space</p>
    <p>Same privilege to access recourses, especially data</p>
    <p>Penn State Cyber Security Lab 2</p>
    <p>Thread 1 Thread 2 Thread 3</p>
    <p>R W</p>
    <p>Virtual</p>
    <p>Physical</p>
    <p>Process</p>
  </div>
  <div class="page">
    <p>In reality</p>
    <p>A multithreaded application can concurrently serve different principals (users or clients) that usually do not fully trust each other.</p>
    <p>Penn State Cyber Security Lab 3</p>
    <p>Thread 1 Thread 2 Thread 3</p>
    <p>R W</p>
    <p>Virtual</p>
    <p>Physical</p>
  </div>
  <div class="page">
    <p>One thread attacking another is a real world threat</p>
    <p>Memcached</p>
    <p>Insufficient user authentication</p>
    <p>Buffer overrun CVE-2009-2415</p>
    <p>FUSE</p>
    <p>Logic bug</p>
    <p>Especially critical for encrypted file systems built upon FUSE</p>
    <p>Penn State Cyber Security Lab 4</p>
    <p>Cherokee</p>
    <p>Format string CVE-2004-1097</p>
    <p>Logic bug CVE-2014-0160</p>
    <p>A compromised (worker) thread can arbitrarily access data privately owned by other threads.</p>
  </div>
  <div class="page">
    <p>In a programmers perspective</p>
    <p>Both intended privilege separation and intended sharing of data objects when writing programs</p>
    <p>Only the intention in category 3 is attainable</p>
    <p>Penn State Cyber Security Lab 5</p>
    <p>Category Programmers Intention on data Possible</p>
  </div>
  <div class="page">
    <p>process_active_connections(cherokee_thread_t *thd) { ... buf = (char *) malloc (size); ... len = recv (SOCKET_FD(socket), buf, buf_size, 0); ...</p>
    <p>}</p>
    <p>In a programmers perspective</p>
    <p>Category 1  Privately owned/accessed</p>
    <p>Category 2  Shared by a subset of threads</p>
    <p>Penn State Cyber Security Lab 6</p>
    <p>Cherokee-1.2.2</p>
    <p>Memcached-1.4.13 Main thread Memcached-1.4.13 Worker thread</p>
    <p>void dispatch_conn_new(...) { ... CQ_ITEM *item = malloc(sizeof(CQ_ITEM)); ... cq_push(thread-&gt;new_conn_queue, item); ...</p>
    <p>}</p>
    <p>static void *worker_libevent(...) { ... item = cq_pop(me-&gt;new_conn_queue); ...</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>Our goal</p>
    <p>How to develop a generic data object-level privilege separation mechanism so that all of the three categories of how a data object is intended to be accessed by threads can be achieved?</p>
    <p>Penn State Cyber Security Lab 7</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Motivation</p>
    <p>Challenges and Our Approach</p>
    <p>Design and Implementation</p>
    <p>Evaluation</p>
    <p>Discussion and Limitations</p>
    <p>Conclusion</p>
    <p>Penn State Cyber Security Lab 8</p>
  </div>
  <div class="page">
    <p>Approach I  Process Isolation</p>
    <p>Put threads into separate processes  Complex IPC design and implementation</p>
    <p>process synchronization, policy handling and checking</p>
    <p>Multi-process architecture  Unpractical for legacy applications</p>
    <p>80% web servers are multithreaded</p>
    <p>Penn State Cyber Security Lab 9</p>
    <p>Process 1 Process 2 Process 3</p>
    <p>sendto()recvfrom()</p>
    <p>mmap() shm_open()</p>
  </div>
  <div class="page">
    <p>Approach II  Software Fault Isolation</p>
    <p>Approach  Programmer annotates source code  Compiler translates annotations to runtime checks of</p>
    <p>memory reads and writes</p>
    <p>However, performance is a serious concern</p>
    <p>Penn State Cyber Security Lab 10</p>
    <p>Thread 1 Thread 2 Thread 3</p>
    <p>Check Pass! Check Deny!</p>
  </div>
  <div class="page">
    <p>Our Idea</p>
    <p>Key Observation:  Page table protection bits can be leveraged to do</p>
    <p>efficient reference monitoring, if the privilege separation policy can be mapped to those protection bits.</p>
    <p>Penn State Cyber Security Lab 11</p>
    <p>Thread 1 Thread 2 Thread 3</p>
    <p>R</p>
    <p>Virtual</p>
    <p>Physical</p>
    <p>Virtual R W</p>
    <p>Virtual</p>
  </div>
  <div class="page">
    <p>Challenges</p>
    <p>Mapping Challenge  Shared (single) page table vs policy-to-protection-bits</p>
    <p>mapping</p>
    <p>Allocation Challenge  Data objects demanding distinct privileges cannot be</p>
    <p>simply allocated onto the same page</p>
    <p>Existing memory management algorithms not applicable</p>
    <p>Retrofitting challenge  Minimize programmers porting effort</p>
    <p>Policy specification, source code change, etc.</p>
    <p>Penn State Cyber Security Lab 12</p>
  </div>
  <div class="page">
    <p>Our Approach: Arbiter</p>
    <p>Associate a separate page table to each thread</p>
    <p>A new dynamic memory segment: ASMS  Map shared data objects onto the same set of physical</p>
    <p>pages and set the page table permission bits according to the privilege separation policy.</p>
    <p>A new memory allocation mechanism to achieve privilege separation at data-object granularity</p>
    <p>A label-based security model and a set of APIs</p>
    <p>Penn State Cyber Security Lab 13</p>
  </div>
  <div class="page">
    <p>An Example Thread A {pr, pw}</p>
    <p>Thread B {pr}</p>
    <p>Thread C {}</p>
    <p>passwd {pr, pw}</p>
    <p>RW R</p>
    <p>Penn State Cyber Security Lab 14</p>
    <p>int main() { //thread A</p>
    <p>...//initialization</p>
    <p>//create thread B and C</p>
    <p>pthread_create(&amp;threadB,...,L_B,{})</p>
    <p>pthread_create(&amp;threadC,...,L_C,{})</p>
    <p>//allocation memory for passwd</p>
    <p>passwd=malloc(256);</p>
    <p>...</p>
    <p>} Original code</p>
    <p>int main() { //thread A</p>
    <p>...//initialization</p>
    <p>//create thread B and C</p>
    <p>label_t L_B={pr}, L_C={};</p>
    <p>ab_pthread_create(&amp;threadB,...,L_B,{})</p>
    <p>ab_pthread_create(&amp;threadC,...,L_C,{})</p>
    <p>//allocation memory for passwd</p>
    <p>label_t L_passwd={pr,pw};</p>
    <p>passwd=ab_malloc(256,L_passwd);</p>
    <p>...</p>
    <p>} Ported code</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Motivation</p>
    <p>Challenges and Our Approach</p>
    <p>Design and Implementation</p>
    <p>Evaluation</p>
    <p>Discussion and Limitations</p>
    <p>Conclusion</p>
    <p>Penn State Cyber Security Lab 15</p>
  </div>
  <div class="page">
    <p>Design and Implementation</p>
    <p>Arbiter threads  Resemble traditional threads in almost every aspect</p>
    <p>Shared code seg (.text), data seg (.data, .bss), open files</p>
    <p>A new dynamically allocated memory segment ASMS</p>
    <p>Major system components  Kernel memory region management</p>
    <p>Page fault handling</p>
    <p>User space memory allocation</p>
    <p>Label model and APIs</p>
    <p>Penn State Cyber Security Lab 16</p>
  </div>
  <div class="page">
    <p>System Architecture</p>
    <p>Penn State Cyber Security Lab 17</p>
    <p>Security Manager</p>
    <p>RPC ...</p>
    <p>User Space Kernel Space</p>
    <p>ASMS Management</p>
    <p>Page Fault Handler</p>
    <p>Arbiter API</p>
    <p>Arbiter Th read 1</p>
    <p>Arbiter Th read K</p>
    <p>ASMS Library</p>
    <p>R W</p>
    <p>R</p>
    <p>...Page Table</p>
    <p>Physical Memory</p>
    <p>Annotations Annotations</p>
    <p>ASMS</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Motivation</p>
    <p>Challenges and Our Approach</p>
    <p>Design and Implementation</p>
    <p>Evaluation</p>
    <p>Discussion and Limitations</p>
    <p>Conclusion</p>
    <p>Penn State Cyber Security Lab 18</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Port three applications  Memcached</p>
    <p>Cherokee</p>
    <p>FUSE</p>
    <p>Porting effort</p>
    <p>Penn State Cyber Security Lab 19</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Protection effectiveness  Arbiter can defeat all the simulated attacks and</p>
    <p>counterattacks.</p>
    <p>Penn State Cyber Security Lab 20</p>
    <p>Application Simulated Attack Arbiter Protection</p>
    <p>Memcached Lack of user auth</p>
    <p>Buffer overflow</p>
    <p>Cherokee Format string</p>
    <p>Logic bug</p>
    <p>FUSE Logic bug</p>
    <p>Code injection</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Performance  microbenchmarks</p>
    <p>Penn State Cyber Security Lab 21</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Application performance  Memcached  Average throughput decrease ~5.6%</p>
    <p>Penn State Cyber Security Lab 22</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Application performance  Cherokee  Average slowdown ~1.8% (file size), ~3.0% (# threads)</p>
    <p>Penn State Cyber Security Lab 23</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Application performance  FUSE  Average slowdown ~7.4%</p>
    <p>Penn State Cyber Security Lab 24</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Application performance much better than microbenchmarks  Extra cost of Arbiter API is amortized by other</p>
    <p>operations of the application.</p>
    <p>RSS Memory overhead</p>
    <p>Penn State Cyber Security Lab 25</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Motivation</p>
    <p>Challenges and Our Approach</p>
    <p>Design and Implementation</p>
    <p>Evaluation</p>
    <p>Discussion and Limitations</p>
    <p>Conclusion</p>
    <p>Penn State Cyber Security Lab 26</p>
  </div>
  <div class="page">
    <p>Discussion and Limitations</p>
    <p>Two users served by the same thread  Per-user virtual thread?</p>
    <p>Lock granularity of malloc()  Potential to adopt per-label lock</p>
    <p>Annotation effort  How to ensure policy correctness and avoid</p>
    <p>misconfiguration?</p>
    <p>Penn State Cyber Security Lab 27</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Threads not always mutually trusted: needs privilege separation</p>
    <p>Page table protection bits to achieve efficient finegrained reference monitoring with proper memory management</p>
    <p>Design and implementation of Arbiter system</p>
    <p>Retrofitting and evaluation of three real world applications</p>
    <p>Ease of adoption, effectiveness of protection, and reasonable performance overhead</p>
    <p>Penn State Cyber Security Lab 28</p>
  </div>
  <div class="page">
    <p>Penn State Cyber Security Lab 29</p>
  </div>
</Presentation>
