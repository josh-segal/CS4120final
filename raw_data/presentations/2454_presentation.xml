<?xml version="1.0" ?>
<Presentation>
  <div class="page"/>
  <div class="page">
    <p>Challenge: Dynamically Reorganizing Data</p>
    <p>/dev/sda1</p>
  </div>
  <div class="page">
    <p>Challenge: Dynamically Reorganizing Data</p>
    <p>/dev/sda1 Reasons to move blocks:</p>
    <p>Consolidate free space  Data migration  Resize a partition  Defragmentation</p>
  </div>
  <div class="page">
    <p>Challenge: Dynamically Reorganizing Data</p>
    <p>/dev/sda1 /home/peter/projects</p>
    <p>gpl_program.c (inode 23)</p>
  </div>
  <div class="page">
    <p>Solution: Back References</p>
    <p>/dev/sda1 /home/peter/projects</p>
    <p>gpl_program.c (inode 23)</p>
    <p>Back Reference 100100010100101011 111110010101111010 101010010100001011</p>
  </div>
  <div class="page">
    <p>Outline</p>
  </div>
  <div class="page">
    <p>Challenges</p>
    <p>Requirements  Low overhead  Performance does not decrease over time  Stable space overhead (not necessarily</p>
    <p>minimal)</p>
    <p>In the presence of:  Snapshots  Writable clones  Deduplication (block sharing)</p>
  </div>
  <div class="page">
    <p>Challenge: Read-Only Snapshots</p>
    <p>/dev/sda1 /home/peter/projects (9:00am)</p>
    <p>gpl_program.c (inode 23)</p>
  </div>
  <div class="page">
    <p>Challenge: Read-Only Snapshots</p>
    <p>/dev/sda1 /home/peter/projects (9:00am)</p>
    <p>gpl_program.c (inode 23)</p>
    <p>/home/peter/projects (10:00am)</p>
    <p>gpl_program.c (inode 23)</p>
  </div>
  <div class="page">
    <p>Challenge: Read-Only Snapshots</p>
    <p>/dev/sda1 /home/peter/projects (9:00am)</p>
    <p>gpl_program.c (inode 23)</p>
    <p>/home/peter/projects (10:00am)</p>
    <p>gpl_program.c (inode 23)</p>
    <p>/home/peter/projects (11:00am)</p>
    <p>gpl_program.c (inode 23)</p>
  </div>
  <div class="page">
    <p>Challenge: Writable Clones</p>
    <p>/dev/sda1 /home/peter/projects (current)</p>
    <p>gpl_program.c (inode 23)</p>
  </div>
  <div class="page">
    <p>Challenge: Writable Clones</p>
    <p>/dev/sda1 /home/peter/projects (current)</p>
    <p>gpl_program.c (inode 23)</p>
    <p>/home/peter/projects_clone1 (clone)</p>
    <p>gpl_program.c (inode 23)</p>
    <p>clone</p>
  </div>
  <div class="page">
    <p>Challenge: Writable Clones</p>
    <p>/dev/sda1 /home/peter/projects (current)</p>
    <p>gpl_program.c (inode 23)</p>
    <p>/home/peter/projects_clone1 (clone)</p>
    <p>gpl_program.c (inode 23)</p>
    <p>clone</p>
  </div>
  <div class="page">
    <p>Challenge: Deduplication (Block Sharing)</p>
    <p>/dev/sda1 /home/peter/projects</p>
    <p>gpl_program.c (inode 23)</p>
    <p>proprietary_program.c (inode 67)</p>
  </div>
  <div class="page">
    <p>Two Ways to Implement Back References</p>
    <p>BTRFS</p>
    <p>Very specific to btrfs  Tightly-coupled with</p>
    <p>the extent allocator</p>
    <p>Theoretically the best you can do</p>
    <p>Backlog</p>
    <p>General approach  Not specific to any</p>
    <p>particular file system</p>
    <p>Implemented in:  btrfs  ext3 (not in the paper)</p>
  </div>
  <div class="page">
    <p>Backlog</p>
  </div>
  <div class="page">
    <p>Outline</p>
  </div>
  <div class="page">
    <p>Conceptually</p>
    <p>Assume:  A write-anywhere file system  No support for writable clones (for now)</p>
    <p>Block Inode # Offset Time-Alloc Time-Dealloc</p>
    <p>The time the block was deallocated from the inode (or )</p>
    <p>Back References</p>
    <p>The time the block was allocated to the inode</p>
  </div>
  <div class="page">
    <p>Conceptually</p>
    <p>Assume:  A write-anywhere file system  No support for writable clones (for now)</p>
    <p>Block Inode # Offset Time-Alloc Time-Dealloc</p>
    <p>The time the block was allocated to the inode</p>
    <p>The time the block was deallocated from the inode (or )</p>
    <p>Back References</p>
  </div>
  <div class="page">
    <p>The way we do it</p>
    <p>Keep logs for allocating and deallocating blocks (avoid read-modify-write):</p>
    <p>Block Inode # Offset Time</p>
    <p>Block Inode # Offset Time</p>
    <p>T=100 Allocate 2301</p>
    <p>Operations:</p>
    <p>Deallocation Records</p>
    <p>Allocation Records</p>
    <p>T=100 Allocate 2302</p>
    <p>T=120 Free 2302</p>
  </div>
  <div class="page">
    <p>The way we do it</p>
    <p>The conceptual view of back references can be efficiently reconstructed by comparing the two logs</p>
    <p>Block Inode # Offset Time</p>
    <p>Block Inode # Offset Time</p>
    <p>Deallocation Records</p>
    <p>Allocation Records</p>
  </div>
  <div class="page">
    <p>Data Structures</p>
    <p>Build a B+Tree in memory, keyed by block no.  Periodically flush to disk and start new tree  Bloom filter per tree to speed up point queries</p>
    <p>Time</p>
    <p>Alloc.</p>
    <p>Dealloc.</p>
    <p>Alloc.</p>
    <p>Dealloc.</p>
    <p>Memory Disk</p>
    <p>CP</p>
    <p>Alloc.</p>
    <p>Dealloc.</p>
    <p>Alloc.</p>
    <p>Dealloc.</p>
    <p>CP</p>
    <p>Alloc.</p>
    <p>Dealloc.</p>
    <p>Alloc.</p>
    <p>Dealloc.</p>
    <p>CP</p>
    <p>Alloc.</p>
    <p>Dealloc.</p>
    <p>Bloom Bloom Bloom</p>
    <p>Bloom Bloom Bloom</p>
  </div>
  <div class="page">
    <p>Periodic Maintenance</p>
    <p>Merge the small trees into a single large tree  Combine matching alloc. and dealloc. records  Purge unneeded records</p>
    <p>Time</p>
    <p>Alloc.</p>
    <p>Dealloc.</p>
    <p>Memory Disk</p>
    <p>CP</p>
    <p>Alloc.</p>
    <p>Dealloc.</p>
    <p>CP</p>
    <p>Alloc.</p>
    <p>Dealloc.</p>
    <p>CP</p>
    <p>Bloom Bloom Bloom</p>
    <p>Combined</p>
    <p>Bloom</p>
    <p>Bloom Bloom Bloom</p>
  </div>
  <div class="page">
    <p>Outline</p>
  </div>
  <div class="page">
    <p>Writable Clones</p>
    <p>Snapshots can be organized into a tree:</p>
    <p>T im</p>
    <p>e E</p>
    <p>p o ch</p>
    <p>Branch 1 Br. 2 Br. 3</p>
  </div>
  <div class="page">
    <p>Writable Clones</p>
    <p>Just add a Branch # field:</p>
    <p>Block Inode # Offset Branch # Time</p>
    <p>Block Inode # Offset Branch # Time</p>
    <p>Deallocation Records</p>
    <p>Allocation Records</p>
  </div>
  <div class="page">
    <p>Writable Clones</p>
    <p>Structural Inheritance</p>
    <p>Branch 1 Br. 2 Br. 3</p>
    <p>T im</p>
    <p>e E</p>
    <p>p o ch</p>
    <p>Block Inode # Offset Br. # Time</p>
    <p>Allocation Records</p>
    <p>In which snapshot is this block alive?</p>
    <p>Start at the snapshot identified by the record</p>
    <p>Just follow the arrows</p>
  </div>
  <div class="page">
    <p>Writable Clones</p>
    <p>Structural Inheritance</p>
    <p>Branch 1 Br. 2 Br. 3</p>
    <p>T im</p>
    <p>e E</p>
    <p>p o ch</p>
    <p>Block Inode # Offset Br. # Time</p>
    <p>Allocation Records</p>
    <p>In which snapshot is this block alive?</p>
    <p>Follow the arrows until you reach a deallocation record</p>
    <p>Block Inode # Offset Br. # Time</p>
    <p>Deallocation Records</p>
  </div>
  <div class="page">
    <p>Outline</p>
  </div>
  <div class="page">
    <p>Evaluation: Key Metrics</p>
    <p>Time overhead  Space overhead  Comparison with BTRFS-specific</p>
    <p>implementation</p>
  </div>
  <div class="page">
    <p>Evaluation: Benchmarks</p>
    <p>File System Simulator  Synthetic Workloads  NFS Trace (EECS03, home directories)</p>
    <p>Customized BTRFS (where we replaced its file-system-specific back references by our implementation)  Microbenchmarks  Application Benchmarks</p>
  </div>
  <div class="page">
    <p>NFS Trace: Overhead over Time</p>
    <p>No performance degradation over time  Spikes correspond to the periods of low file system activity</p>
  </div>
  <div class="page">
    <p>NFS Trace: Overhead vs. File System Load</p>
    <p>Time overhead per block operation is inversely proportional to the file system load</p>
    <p>O v e rh</p>
    <p>e a d</p>
    <p>p e r</p>
    <p>B lo</p>
    <p>c k O</p>
    <p>p . (</p>
    <p>s )</p>
    <p>File System Load (ops/s)</p>
  </div>
  <div class="page">
    <p>NFS Trace: Overhead vs. File System Load</p>
    <p>Time overhead per block operation is inversely proportional to the file system load</p>
    <p>O v e rh</p>
    <p>e a d</p>
    <p>p e r</p>
    <p>B lo</p>
    <p>c k O</p>
    <p>p . (</p>
    <p>s )</p>
    <p>File System Load (ops/s)</p>
  </div>
  <div class="page">
    <p>NFS Trace: Space Overhead</p>
    <p>Space overhead: 6.3%, stable over time  Maintenance: at most 24.1 seconds</p>
  </div>
  <div class="page">
    <p>BTRFS: Microbenchmarks</p>
    <p>Creation of 4 KB files Deletion of 4 KB files</p>
    <p>T im</p>
    <p>e (</p>
    <p>m s )</p>
    <p>No Backref</p>
    <p>Original BTRFS</p>
    <p>Backlog</p>
    <p>(8192 Operations per CP)</p>
  </div>
  <div class="page">
    <p>BTRFS: Application Benchmarks</p>
    <p>FileBench /var/mail</p>
    <p>PostMark</p>
    <p>Dbench CIFS (MB/s)</p>
    <p>(ops/s)</p>
    <p>(ops/s)</p>
    <p>No Back References Original BTRFS Backlog</p>
  </div>
  <div class="page">
    <p>Now that we have back references</p>
    <p>Back references do not cost much  What is the cost to use them?</p>
    <p>Find all owners of a block  Find owners of all blocks in a region</p>
  </div>
  <div class="page">
    <p>Query Performance</p>
  </div>
  <div class="page">
    <p>Outline</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>Back references are feasible  Minimal overhead  Fast query performance</p>
    <p>Backlog, a general approach  Write-optimized allocation and deallocation logs  Updates performed by large sequential writes  Using structural inheritance to represent</p>
    <p>writable clones</p>
  </div>
  <div class="page">
    <p>{pmacko, margo}@eecs.harvard.edu, keith.smith@netapp.com</p>
  </div>
  <div class="page">
    <p>BACKUP SLIDES</p>
  </div>
  <div class="page">
    <p>Challenge: Context-Aware Defragmentation</p>
    <p>/dev/sda1 /home/peter/projects</p>
    <p>gpl_program.c (inode 23)</p>
    <p>proprietary_program.c (inode 67)</p>
  </div>
  <div class="page">
    <p>Extent-Based File Systems</p>
    <p>Just add a Length field!</p>
    <p>Block Length Inode # Offset Branch # Time</p>
    <p>Block Length Inode # Offset Branch # Time</p>
    <p>Deallocation Records</p>
    <p>Allocation Records</p>
  </div>
  <div class="page">
    <p>Evaluation: Platform</p>
    <p>Simulator:  Intel Xeon 3.0 GHz  10 GB of RAM  60 MB/s disk throughput</p>
    <p>BTRFS:  Intel Pentium 4, 3.0 GHz  512 MB of RAM  50 MB/s disk throughput</p>
  </div>
  <div class="page">
    <p>Query Performance</p>
  </div>
  <div class="page">
    <p>Keeping Track of Allocated Blocks</p>
    <p>Typical file system  Block allocation bitmap</p>
    <p>BTRFS  Each allocated extent is described by a</p>
    <p>variable-length record</p>
    <p>Back references are stored as a part of the record</p>
  </div>
</Presentation>
