<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Secure Software Lab.</p>
    <p>RGBDroid: A Novel Response-based</p>
    <p>Approach to Android Privilege</p>
    <p>Escalation Attacks</p>
    <p>Dankook University,</p>
    <p>Massachusetts Institute of Technology, Konkuk University</p>
    <p>Park Yeongung santapark5 at gmail.com</p>
  </div>
  <div class="page">
    <p>Secure Software Lab.</p>
    <p>Privilege escalation attack is dangerous especially on Android</p>
    <p>Difference between prevention-oriented security and response-oriented security</p>
    <p>Since Android is a single user system and its native mechanism is static, we are able to predict its operations</p>
    <p>What I will talk about..</p>
  </div>
  <div class="page">
    <p>Secure Software Lab.</p>
    <p>DroidKungFu</p>
    <p>Danger of privilege escalation attacks</p>
    <p>imei</p>
    <p>ostype</p>
    <p>osapi</p>
    <p>model</p>
    <p>SDKVersion</p>
    <p>SDcard info</p>
    <p>internal Memory Size</p>
    <p>Net operator</p>
    <p>phone number</p>
    <p>running service</p>
    <p>http://www.xinh*****.com:8111/GetCert/DevInfo?</p>
    <p>http://search.go**********id.com:8511/search/getty.php</p>
    <p>http://search.go**********id.com:8511/search/rpty.php</p>
  </div>
  <div class="page">
    <p>Secure Software Lab.</p>
    <p>DroidKungFu</p>
    <p>Danger of privilege escalation attacks</p>
    <p>This function performs a privilege escalation attack!</p>
    <p>DroidKungFu is an embedded exploit code, which</p>
    <p>is called RageAgainstTheCage and developed by C-SKILLS</p>
    <p>DroidKungFu installs additional malicious app in asset directory</p>
    <p>After the privilege escalation attack!</p>
  </div>
  <div class="page">
    <p>Secure Software Lab.</p>
    <p>DroidKungFu</p>
    <p>Danger of privilege escalation attacks</p>
    <p>Im a bot!</p>
    <p>C&amp;C Server</p>
    <p>execHomepage : Opens specific Homepages</p>
    <p>execInstall : Downloads apps by specific URLs,</p>
    <p>Installs downloaded apps</p>
    <p>execStartApp : Executes specific Apps</p>
    <p>execOpenUrl : Opens specific URLs</p>
    <p>execDelete : Removes specific files</p>
    <p>attacker Your device</p>
  </div>
  <div class="page">
    <p>Secure Software Lab.</p>
    <p>Analyzed file access patterns hooking system calls in Android</p>
    <p>Also identified processes which run with root privileges</p>
    <p>Android works statically and predictably</p>
    <p>ppidpid process name uid euid file to access</p>
  </div>
  <div class="page">
    <p>Secure Software Lab.</p>
    <p>Prevention-oriented security may cause high overhead</p>
    <p>Prevention vs. Response</p>
  </div>
  <div class="page">
    <p>Secure Software Lab.</p>
    <p>Prevention-oriented security solutions must predict all potential attacks and vulnerabilities  To do so, the overall threat and risk analysis is required</p>
    <p>This can cause high overhead  It is almost impossible</p>
    <p>Moreover, these solutions may not explicitly describe what they prevent.</p>
    <p>Therefore, these solutions are not perfect</p>
    <p>Prevention vs. Response</p>
  </div>
  <div class="page">
    <p>Secure Software Lab.</p>
    <p>Our response-oriented security first defines critical malicious behaviors to be potential dangers under the assumption that Android system was compromised by attacker</p>
    <p>We then make a response policy for each defined malicious behavior considering features of the Android system  We apply this response policy to our security approach</p>
    <p>We have designed and implemented RGBDroid system for the response-oriented security approach</p>
    <p>Prevention vs. Response</p>
  </div>
  <div class="page">
    <p>Secure Software Lab.</p>
    <p>Android statically works with following the standard policy</p>
    <p>The root privileges are used only by specific processes</p>
    <p>There are critical system resources which can be modified by a designated process</p>
    <p>RGBDroid overview</p>
  </div>
  <div class="page">
    <p>Secure Software Lab.</p>
    <p>User layer resources are owned by the accounts whose UID is greater than or equal to 10000</p>
    <p>System layer resources are owned by the accounts whose UID is less than 10000</p>
    <p>RGBDroid overview</p>
  </div>
  <div class="page">
    <p>Secure Software Lab.</p>
    <p>pWhitelist is the list of programs that can run with root privileges</p>
    <p>Root privilege in Android is only used by specific processes (ex. daemons)</p>
    <p>RGBDroid denies any resources access request made by a program which is not a member of pWhitelist</p>
    <p>pWhitelist in RGBDroid</p>
  </div>
  <div class="page">
    <p>Secure Software Lab.</p>
    <p>Criticallist is a list of system layer resources that even a process with root privilege cannot modify.</p>
    <p>Criticallist in RGBDroid</p>
  </div>
  <div class="page">
    <p>Secure Software Lab.</p>
    <p>After apply RGBDroid</p>
    <p>Shell acquisition: Many attacks try to get a root shell</p>
    <p>pWhitelist in RGBDroid prevents illegal access to the root shell and disallows the attempt</p>
    <p>What we can response..</p>
  </div>
  <div class="page">
    <p>Secure Software Lab.</p>
    <p>Restrict illegal modification of critical system resources</p>
    <p>Attacker can do various malicious things by manipulating the resources</p>
    <p>(ex. /system/framework/core.jar, framework.jar, hosts, etc.)</p>
    <p>What we can response..</p>
    <p>DNS Spoofing:</p>
    <p>Request: www.victim.com</p>
    <p>Redirection : www.naver.com</p>
    <p>After apply RGBDroid</p>
    <p>Manipulation of critical system resource will fail</p>
  </div>
  <div class="page">
    <p>Secure Software Lab.</p>
    <p>After applying RGBDroid, I/O throughput diminishes by 6.2%, 6.7%, 8.1% for insertion, update, and deletion operation respectively</p>
    <p>The overall average I/O throughput decreases by 7%</p>
    <p>Performance Evaluation</p>
  </div>
  <div class="page">
    <p>Secure Software Lab.</p>
    <p>Processing time increases by 6.2%, 6.7%, and 8.4% for each operation after RGBDroid is applied.</p>
    <p>Average processing time for all three operations increases by 7% overall, which can be considered small processing overhead</p>
    <p>Performance Evaluation</p>
  </div>
  <div class="page">
    <p>Secure Software Lab.</p>
    <p>Predicting all possible vulnerabilities is unrealistic both in principle as well as in practice.</p>
    <p>Response-based approach does not have to consider how vulnerabilities can be exploited</p>
    <p>Response-based approach also explicitly specify what the security system responses</p>
    <p>It does not need to monitor and trace all accesses to critical resources.</p>
    <p>It does not require monitoring numerous parts of the system (does need a few additional operations)</p>
    <p>It causes only a small performance overhead unlike the prevention approach.</p>
    <p>Analysis of Our Approach</p>
  </div>
  <div class="page">
    <p>Secure Software Lab.</p>
    <p>In the Android, recent malware illegally manipulates system resources or turns the system into a bot by privilege escalation attacks</p>
    <p>This paper presented RGBDroid system for response-based security approach  It does not require monitoring or predicting all the</p>
    <p>potential vulnerabilities but just requires blocking possible malicious acts after attacks</p>
    <p>It is very suitable for Android environment</p>
    <p>We have plan to evolve our response-based security approach into malicious behavior-oriented security one</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Any questions?</p>
    <p>THANK YOU FOR YOUR ATTENTION!</p>
  </div>
</Presentation>
