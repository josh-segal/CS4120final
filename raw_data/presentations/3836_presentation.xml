<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Dictionary Matching and Indexing with Edits and Dont</p>
    <p>Cares</p>
    <p>Richard Cole NYU</p>
    <p>Lee-Ad Gottlieb NYU</p>
    <p>Moshe Lewenstein Bar-Ilan</p>
  </div>
  <div class="page">
    <p>Pattern Matching</p>
    <p>Various problems of the following flavor:</p>
    <p>Preprocess a text t, or a collection of strings d1,,dx,</p>
    <p>so that given a query string p, all matches with the text can be found quickly.</p>
    <p>Indexing Dictionary queries</p>
    <p>Dictionary matching All-to-all matching</p>
  </div>
  <div class="page">
    <p>Pattern Matching</p>
    <p>Dictionary queries.</p>
    <p>Bate Beat Boat Boot</p>
    <p>Beta</p>
  </div>
  <div class="page">
    <p>Pattern Matching</p>
    <p>Dictionary matching.</p>
    <p>Bate Beat Boat Boot</p>
    <p>The fish beat my boot.</p>
  </div>
  <div class="page">
    <p>Pattern Matching</p>
    <p>Text indexing.</p>
    <p>abracadabra</p>
    <p>ra ra</p>
  </div>
  <div class="page">
    <p>Pattern Matching</p>
    <p>All-to-all matching.</p>
    <p>Bate Beat Boat Boot</p>
    <p>bat boots be</p>
  </div>
  <div class="page">
    <p>Previous Work</p>
    <p>a</p>
    <p>t</p>
    <p>e o</p>
    <p>o</p>
    <p>t</p>
    <p>Bate Beat Boat Boot</p>
    <p>aa</p>
    <p>e</p>
    <p>t</p>
    <p>b</p>
    <p>t</p>
    <p>Beta</p>
    <p>Dictionary Queries</p>
  </div>
  <div class="page">
    <p>Previous Work</p>
    <p>a</p>
    <p>t</p>
    <p>e o</p>
    <p>o</p>
    <p>t</p>
    <p>Bate Beat Boat Boot</p>
    <p>aa</p>
    <p>e</p>
    <p>t</p>
    <p>b</p>
    <p>t</p>
    <p>Beta</p>
    <p>Dictionary Queries</p>
  </div>
  <div class="page">
    <p>Suffix Tree g o</p>
    <p>o</p>
    <p>g</p>
    <p>Oogog oogog ogog gog og g</p>
    <p>g</p>
    <p>oog o</p>
    <p>g</p>
    <p>o</p>
    <p>g</p>
    <p>o</p>
    <p>g</p>
    <p>Text Indexing</p>
  </div>
  <div class="page">
    <p>Suffix Tree g o</p>
    <p>o</p>
    <p>g</p>
    <p>Oogog oogog ogog gog og g</p>
    <p>g</p>
    <p>oog o</p>
    <p>g</p>
    <p>o</p>
    <p>g</p>
    <p>o</p>
    <p>g</p>
    <p>Text Indexing</p>
  </div>
  <div class="page">
    <p>Suffix Tree g o</p>
    <p>o</p>
    <p>g</p>
    <p>Oogog oogog ogog gog og g</p>
    <p>g</p>
    <p>oog o</p>
    <p>g</p>
    <p>o</p>
    <p>g</p>
    <p>o</p>
    <p>g</p>
    <p>Text Indexing</p>
  </div>
  <div class="page">
    <p>Suffix Tree g o</p>
    <p>o</p>
    <p>g</p>
    <p>Oogog oogog ogog gog og g</p>
    <p>g</p>
    <p>oog o</p>
    <p>g</p>
    <p>o</p>
    <p>g</p>
    <p>o</p>
    <p>g</p>
    <p>Text Indexing</p>
  </div>
  <div class="page">
    <p>Approximate Matches</p>
    <p>Wildcards (dont cares) Boat Bo*t</p>
    <p>Substitutions Boat Boot</p>
    <p>Edits  insertions and deletions Boat B_at</p>
  </div>
  <div class="page">
    <p>Previous Work  Best Results</p>
    <p>Indexing and Dictionary Matching (edits)  Buchsbaum, Goodrich, Westbrook.</p>
    <p>k=1 p log log n + occ query time n log n space</p>
    <p>Dictionary Queries (substitutions)  Brodal, Gasieniec.</p>
    <p>k=1 p + occ query time n space</p>
  </div>
  <div class="page">
    <p>Previous Work  Basic Intuition</p>
    <p>abracadabra  Build a suffix tree for</p>
    <p>abracadab  abracada  abracad  abraca  abrac  abra  abr  ab  a</p>
    <p>abracadabra  And for</p>
    <p>a  ar  arb  arba  arbad  arbada  arbadac  arbadaca  arbadacar</p>
    <p>abrac*dabra</p>
  </div>
  <div class="page">
    <p>New Results</p>
    <p>Indexing, Dictionary Queries, Dictionary Matches  Substitutions</p>
    <p>k &lt; log n p + [(c1log n)k log log n] / k! + occ query time n(c2log n)k / k! space</p>
    <p>Edits k &lt; log n p + [(c3log n)k log log n] / k! + 3kocc query time n(c4log n)k / k! space</p>
    <p>Wildcards in pattern k &lt; log n p + 2klog log n / k! + occ query time n + (k+log n)k / k! space</p>
  </div>
  <div class="page">
    <p>Dictionary Wildcard Queries</p>
    <p>Three data structures for dictionary wildcard queries</p>
    <p>Nave:  O(n) space kp query time</p>
    <p>Less-nave:  O(n1+k) p</p>
    <p>New data structure:  O(n logkn) 2kp</p>
  </div>
  <div class="page">
    <p>Nave Approach</p>
    <p>f</p>
    <p>a</p>
    <p>r t</p>
    <p>i</p>
    <p>t</p>
    <p>p</p>
    <p>i</p>
    <p>n</p>
    <p>a</p>
    <p>y</p>
    <p>s</p>
    <p>i</p>
    <p>t</p>
    <p>Query string: *it</p>
  </div>
  <div class="page">
    <p>Nave Approach</p>
    <p>f</p>
    <p>a</p>
    <p>r t</p>
    <p>i</p>
    <p>t</p>
    <p>p</p>
    <p>i</p>
    <p>n</p>
    <p>a</p>
    <p>y</p>
    <p>s</p>
    <p>i</p>
    <p>t</p>
    <p>Query string: *it</p>
  </div>
  <div class="page">
    <p>Nave Approach</p>
    <p>f</p>
    <p>a</p>
    <p>r t</p>
    <p>i</p>
    <p>t</p>
    <p>p</p>
    <p>i</p>
    <p>n</p>
    <p>a</p>
    <p>y</p>
    <p>s</p>
    <p>i</p>
    <p>t</p>
    <p>Query string: *it</p>
  </div>
  <div class="page">
    <p>Nave Approach</p>
    <p>f</p>
    <p>a</p>
    <p>r t</p>
    <p>i</p>
    <p>t</p>
    <p>p</p>
    <p>i</p>
    <p>n</p>
    <p>a</p>
    <p>y</p>
    <p>s</p>
    <p>i</p>
    <p>t</p>
    <p>Query string: *it</p>
  </div>
  <div class="page">
    <p>Nave Approach</p>
    <p>f</p>
    <p>a</p>
    <p>r t</p>
    <p>i</p>
    <p>t</p>
    <p>p</p>
    <p>i</p>
    <p>n</p>
    <p>a</p>
    <p>y</p>
    <p>s</p>
    <p>i</p>
    <p>t</p>
    <p>Query string: *it</p>
  </div>
  <div class="page">
    <p>Nave Approach</p>
    <p>f</p>
    <p>a</p>
    <p>r t</p>
    <p>i</p>
    <p>t</p>
    <p>p</p>
    <p>i</p>
    <p>n</p>
    <p>a</p>
    <p>y</p>
    <p>s</p>
    <p>i</p>
    <p>t</p>
    <p>Query string: *it</p>
  </div>
  <div class="page">
    <p>Nave Approach</p>
    <p>f</p>
    <p>a</p>
    <p>r t</p>
    <p>i</p>
    <p>t</p>
    <p>p</p>
    <p>i</p>
    <p>n</p>
    <p>a</p>
    <p>y</p>
    <p>s</p>
    <p>i</p>
    <p>t</p>
    <p>Query string: *it</p>
    <p>Query time: k p</p>
  </div>
  <div class="page">
    <p>Less-Nave Approach</p>
    <p>f</p>
    <p>a</p>
    <p>r t</p>
    <p>i</p>
    <p>t</p>
    <p>p</p>
    <p>i</p>
    <p>n</p>
    <p>a</p>
    <p>y</p>
    <p>s</p>
    <p>i</p>
    <p>t</p>
  </div>
  <div class="page">
    <p>Less-Nave Approach</p>
    <p>f</p>
    <p>a</p>
    <p>r t</p>
    <p>i</p>
    <p>t</p>
    <p>p</p>
    <p>i</p>
    <p>n</p>
    <p>a</p>
    <p>y</p>
    <p>s</p>
    <p>i</p>
    <p>t</p>
    <p>i</p>
    <p>n</p>
    <p>a</p>
    <p>y</p>
    <p>*</p>
    <p>t r t</p>
  </div>
  <div class="page">
    <p>Less-Nave Approach</p>
    <p>f</p>
    <p>a</p>
    <p>r t</p>
    <p>i</p>
    <p>t</p>
    <p>p</p>
    <p>i</p>
    <p>n</p>
    <p>a</p>
    <p>y</p>
    <p>s</p>
    <p>i</p>
    <p>t</p>
    <p>i</p>
    <p>n</p>
    <p>a</p>
    <p>y</p>
    <p>*</p>
    <p>t r t</p>
    <p>Query string: *it</p>
  </div>
  <div class="page">
    <p>Less-Nave Approach</p>
    <p>f</p>
    <p>a</p>
    <p>r t</p>
    <p>i</p>
    <p>t</p>
    <p>p</p>
    <p>i</p>
    <p>n</p>
    <p>a</p>
    <p>y</p>
    <p>s</p>
    <p>i</p>
    <p>t</p>
    <p>Query string: *it</p>
    <p>i</p>
    <p>n</p>
    <p>a</p>
    <p>y</p>
    <p>*</p>
    <p>t r t</p>
  </div>
  <div class="page">
    <p>Less-Nave Approach</p>
    <p>f</p>
    <p>a</p>
    <p>r t</p>
    <p>i</p>
    <p>t</p>
    <p>p</p>
    <p>i</p>
    <p>n</p>
    <p>a</p>
    <p>y</p>
    <p>s</p>
    <p>i</p>
    <p>t</p>
    <p>Query string: *it</p>
    <p>i</p>
    <p>n</p>
    <p>a</p>
    <p>y</p>
    <p>*</p>
    <p>t r t</p>
  </div>
  <div class="page">
    <p>Less-Nave Approach</p>
    <p>f</p>
    <p>a</p>
    <p>r t</p>
    <p>i</p>
    <p>t</p>
    <p>p</p>
    <p>i</p>
    <p>n</p>
    <p>a</p>
    <p>y</p>
    <p>s</p>
    <p>i</p>
    <p>t</p>
    <p>Query string: *it</p>
    <p>i</p>
    <p>n</p>
    <p>a</p>
    <p>y</p>
    <p>*</p>
    <p>t r t</p>
    <p>Query time: p</p>
  </div>
  <div class="page">
    <p>Less-Nave Approach</p>
    <p>f</p>
    <p>a</p>
    <p>r t</p>
    <p>i</p>
    <p>t</p>
    <p>p</p>
    <p>i</p>
    <p>n</p>
    <p>a</p>
    <p>y</p>
    <p>s</p>
    <p>i</p>
    <p>t</p>
    <p>*</p>
    <p>*</p>
    <p>*</p>
    <p>Space: O(n1+k)</p>
    <p>*</p>
  </div>
  <div class="page">
    <p>New Approach</p>
    <p>f</p>
    <p>a</p>
    <p>r t</p>
    <p>i</p>
    <p>t</p>
    <p>p</p>
    <p>i</p>
    <p>n</p>
    <p>a</p>
    <p>y</p>
    <p>s</p>
    <p>i</p>
    <p>t</p>
  </div>
  <div class="page">
    <p>New Approach</p>
    <p>f</p>
    <p>a</p>
    <p>r t</p>
    <p>i</p>
    <p>t</p>
    <p>p</p>
    <p>i</p>
    <p>n</p>
    <p>a</p>
    <p>y</p>
    <p>s</p>
    <p>i</p>
    <p>t</p>
    <p>i</p>
    <p>n</p>
    <p>a</p>
    <p>y</p>
    <p>*</p>
    <p>t</p>
  </div>
  <div class="page">
    <p>New Approach</p>
    <p>f</p>
    <p>a</p>
    <p>r t</p>
    <p>i</p>
    <p>t</p>
    <p>p</p>
    <p>i</p>
    <p>n</p>
    <p>a</p>
    <p>y</p>
    <p>s</p>
    <p>i</p>
    <p>t</p>
    <p>Query string: *it</p>
    <p>i</p>
    <p>n</p>
    <p>a</p>
    <p>y</p>
    <p>*</p>
    <p>t</p>
  </div>
  <div class="page">
    <p>New Approach</p>
    <p>f</p>
    <p>a</p>
    <p>r t</p>
    <p>i</p>
    <p>t</p>
    <p>p</p>
    <p>i</p>
    <p>n</p>
    <p>a</p>
    <p>y</p>
    <p>s</p>
    <p>i</p>
    <p>t</p>
    <p>Query string: *it</p>
    <p>i</p>
    <p>n</p>
    <p>a</p>
    <p>y</p>
    <p>*</p>
    <p>t</p>
  </div>
  <div class="page">
    <p>New Approach</p>
    <p>f</p>
    <p>a</p>
    <p>r t</p>
    <p>i</p>
    <p>t</p>
    <p>p</p>
    <p>i</p>
    <p>n</p>
    <p>a</p>
    <p>y</p>
    <p>s</p>
    <p>i</p>
    <p>t</p>
    <p>Query string: *it</p>
    <p>i</p>
    <p>n</p>
    <p>a</p>
    <p>y</p>
    <p>*</p>
    <p>t</p>
  </div>
  <div class="page">
    <p>New Approach</p>
    <p>f</p>
    <p>a</p>
    <p>r t</p>
    <p>i</p>
    <p>t</p>
    <p>p</p>
    <p>i</p>
    <p>n</p>
    <p>a</p>
    <p>y</p>
    <p>s</p>
    <p>i</p>
    <p>t</p>
    <p>Query string: *it</p>
    <p>i</p>
    <p>n</p>
    <p>a</p>
    <p>y</p>
    <p>*</p>
    <p>t</p>
  </div>
  <div class="page">
    <p>New Approach</p>
    <p>f</p>
    <p>a</p>
    <p>r t</p>
    <p>i</p>
    <p>t</p>
    <p>p</p>
    <p>i</p>
    <p>n</p>
    <p>a</p>
    <p>y</p>
    <p>s</p>
    <p>i</p>
    <p>t</p>
    <p>Query string: *it</p>
    <p>i</p>
    <p>n</p>
    <p>a</p>
    <p>y</p>
    <p>*</p>
    <p>t</p>
  </div>
  <div class="page">
    <p>New Approach</p>
    <p>f</p>
    <p>a</p>
    <p>r t</p>
    <p>i</p>
    <p>t</p>
    <p>p</p>
    <p>i</p>
    <p>n</p>
    <p>a</p>
    <p>y</p>
    <p>s</p>
    <p>i</p>
    <p>t</p>
    <p>Query string: *it</p>
    <p>i</p>
    <p>n</p>
    <p>a</p>
    <p>y</p>
    <p>*</p>
    <p>t</p>
    <p>Query time: 2kp</p>
  </div>
  <div class="page">
    <p>Space Analysis</p>
    <p>Create a wildcard subtree at each node in the original trie.  heaviest child is not in the wildcard tree.</p>
    <p>Look at any leaf of the trie  How many of its ancestors were not the heaviest child?</p>
    <p>log2n  So it appears in at most log n wildcard trees.</p>
    <p>Space: n log n n logkn</p>
  </div>
  <div class="page">
    <p>Edit Distance</p>
    <p>Wildcards is (algorithmically) the simplest type of approximate search.</p>
    <p>What issues come up when dealing with substitutions, insertions and deletions?</p>
  </div>
  <div class="page">
    <p>Substitution Search</p>
    <p>a</p>
    <p>a</p>
    <p>a</p>
    <p>b</p>
    <p>b</p>
    <p>b</p>
    <p>a</p>
    <p>a</p>
    <p>Query string: aab</p>
  </div>
  <div class="page">
    <p>Substitution Search</p>
    <p>a</p>
    <p>a</p>
    <p>a</p>
    <p>b</p>
    <p>b</p>
    <p>b</p>
    <p>a</p>
    <p>a</p>
    <p>Query string: aab</p>
  </div>
  <div class="page">
    <p>Substitution Search</p>
    <p>a</p>
    <p>a</p>
    <p>a</p>
    <p>b</p>
    <p>b</p>
    <p>b</p>
    <p>a</p>
    <p>a</p>
    <p>Query string: aab</p>
  </div>
  <div class="page">
    <p>Substitution Search</p>
    <p>a</p>
    <p>a</p>
    <p>a</p>
    <p>b</p>
    <p>b</p>
    <p>b</p>
    <p>a</p>
    <p>a</p>
    <p>Query string: aab</p>
  </div>
  <div class="page">
    <p>Substitution Search</p>
    <p>a</p>
    <p>a</p>
    <p>a</p>
    <p>b</p>
    <p>b</p>
    <p>b</p>
    <p>a</p>
    <p>a</p>
    <p>Query string: aab</p>
  </div>
  <div class="page">
    <p>Substitution Search</p>
    <p>a</p>
    <p>a</p>
    <p>a</p>
    <p>b</p>
    <p>b</p>
    <p>b</p>
    <p>a</p>
    <p>a</p>
    <p>Query string: aab</p>
  </div>
  <div class="page">
    <p>Substitution Search</p>
    <p>a</p>
    <p>a</p>
    <p>a</p>
    <p>b</p>
    <p>b</p>
    <p>b</p>
    <p>a</p>
    <p>a</p>
    <p>Query string: aab</p>
  </div>
  <div class="page">
    <p>Substitution Search</p>
    <p>a</p>
    <p>a</p>
    <p>a</p>
    <p>b</p>
    <p>b</p>
    <p>b</p>
    <p>a</p>
    <p>a</p>
    <p>Query string: aab</p>
  </div>
  <div class="page">
    <p>Substitution Tree</p>
    <p>a</p>
    <p>a</p>
    <p>a</p>
    <p>b</p>
    <p>b</p>
    <p>b</p>
    <p>a</p>
    <p>a</p>
    <p>Query string: aab</p>
  </div>
  <div class="page">
    <p>Substitution Tree</p>
    <p>a</p>
    <p>a</p>
    <p>a</p>
    <p>b</p>
    <p>b</p>
    <p>b</p>
    <p>a</p>
    <p>a a</p>
    <p>a</p>
    <p>a</p>
    <p>Query string: aab</p>
  </div>
  <div class="page">
    <p>Deletion Tree</p>
    <p>a</p>
    <p>a</p>
    <p>a</p>
    <p>b</p>
    <p>b</p>
    <p>c</p>
    <p>a</p>
    <p>a</p>
    <p>Deletion tree</p>
  </div>
  <div class="page">
    <p>Deletion Tree</p>
    <p>a</p>
    <p>a</p>
    <p>a</p>
    <p>b</p>
    <p>b</p>
    <p>c</p>
    <p>a</p>
    <p>a</p>
    <p>c</p>
    <p>b Deletion tree!</p>
  </div>
  <div class="page">
    <p>Insertion Tree</p>
    <p>a</p>
    <p>a</p>
    <p>a</p>
    <p>b</p>
    <p>b</p>
    <p>c</p>
    <p>a</p>
    <p>a</p>
    <p>Insertion tree</p>
  </div>
  <div class="page">
    <p>Insertion Tree</p>
    <p>a</p>
    <p>a</p>
    <p>a</p>
    <p>b</p>
    <p>b</p>
    <p>c</p>
    <p>a</p>
    <p>a</p>
    <p>a</p>
    <p>c</p>
    <p>b</p>
    <p>Insertion tree!</p>
  </div>
  <div class="page">
    <p>Grouping</p>
    <p>a</p>
    <p>a</p>
    <p>a</p>
    <p>b</p>
    <p>b</p>
    <p>b</p>
    <p>a</p>
    <p>a a</p>
    <p>a</p>
    <p>a</p>
    <p>Query string: aab</p>
  </div>
  <div class="page">
    <p>Grouping</p>
    <p>a</p>
    <p>a</p>
    <p>a</p>
    <p>b</p>
    <p>b</p>
    <p>b</p>
    <p>a</p>
    <p>a a</p>
    <p>a</p>
    <p>a</p>
    <p>Query string: aab</p>
    <p>b</p>
    <p>a</p>
  </div>
  <div class="page">
    <p>Grouping</p>
    <p>a</p>
    <p>a</p>
    <p>a</p>
    <p>b</p>
    <p>b</p>
    <p>b</p>
    <p>a</p>
    <p>a a</p>
    <p>a</p>
    <p>a</p>
    <p>Query string: aab</p>
    <p>b</p>
    <p>a</p>
    <p>a</p>
  </div>
  <div class="page">
    <p>Grouping</p>
    <p>a</p>
    <p>a</p>
    <p>a</p>
    <p>b</p>
    <p>b</p>
    <p>b</p>
    <p>a</p>
    <p>a a</p>
    <p>a</p>
    <p>a</p>
    <p>Query string: aab</p>
    <p>b Grouping!</p>
  </div>
  <div class="page">
    <p>Analysis</p>
    <p>Cant merge along all possible paths of original trie  too expensive.</p>
    <p>Merge along centroid paths.  Centroid paths always follow the heaviest child.</p>
    <p>Any path from root to leaf traverses at most log n centroid paths.</p>
  </div>
  <div class="page">
    <p>Analysis</p>
  </div>
  <div class="page">
    <p>Analysis</p>
  </div>
  <div class="page">
    <p>Analysis</p>
  </div>
  <div class="page">
    <p>Analysis</p>
  </div>
  <div class="page">
    <p>Grouping</p>
  </div>
  <div class="page">
    <p>Grouping</p>
  </div>
  <div class="page">
    <p>Grouping</p>
  </div>
  <div class="page">
    <p>Grouping</p>
  </div>
  <div class="page">
    <p>Grouping</p>
  </div>
  <div class="page">
    <p>Grouping</p>
    <p>Suppose a search reached up to the 7th edge with no</p>
    <p>substitutions.</p>
  </div>
  <div class="page">
    <p>Grouping</p>
    <p>Suppose a search reached up to the 7th edge with no</p>
    <p>substitutions.</p>
  </div>
  <div class="page">
    <p>Grouping</p>
    <p>Suppose a search reached up to the 7th edge with no</p>
    <p>substitutions.</p>
  </div>
  <div class="page">
    <p>Grouping</p>
    <p>then we search only three</p>
    <p>substitution trees.</p>
    <p>Space increase: log n factor</p>
    <p>Suppose a search reached up to the 7th edge with no</p>
    <p>substitutions.</p>
  </div>
  <div class="page">
    <p>Analysis w1</p>
    <p>w2</p>
    <p>w3</p>
    <p>w4</p>
    <p>log n searches</p>
    <p>log n searches</p>
    <p>log n searches</p>
    <p>Total number of searches: log n * log n = log2 n</p>
  </div>
  <div class="page">
    <p>Analysis</p>
    <p>For k=1  For each centroid path traversed, log n substitution</p>
    <p>subtree searches.  A path to a leaf traverses at most log n centroid</p>
    <p>paths.  log2n searches log n searches using balanced</p>
    <p>grouping.</p>
    <p>More generally  logkn searches  Using a Y-fast trie, each search takes log log n time</p>
    <p>logkn log log n</p>
  </div>
  <div class="page">
    <p>More Rigorous Analysis</p>
    <p>Balanced Search Tree</p>
  </div>
  <div class="page">
    <p>More Rigorous Analysis</p>
    <p>Weight Balanced Search Tree</p>
  </div>
  <div class="page">
    <p>More Rigorous Analysis</p>
    <p>Weight Balanced Search Tree</p>
  </div>
  <div class="page">
    <p>More Rigorous Analysis</p>
    <p>Weight Balanced Search Tree</p>
  </div>
  <div class="page">
    <p>More Rigorous Analysis</p>
    <p>Weight Balanced Search Tree</p>
  </div>
  <div class="page">
    <p>More Rigorous Analysis</p>
    <p>Weight Balanced Search Tree</p>
    <p>O(log(W/w)) levels</p>
  </div>
  <div class="page">
    <p>More Rigorous Analysis</p>
    <p>For a segment of a centroid path whose top has weight W and bottom has weight w  we do about log (W/w) searches</p>
  </div>
  <div class="page">
    <p>Analysis w1</p>
    <p>w2</p>
    <p>w3</p>
    <p>w4</p>
    <p>log(w1/w2) searches</p>
    <p>log(w2/w3) searches</p>
    <p>log(w3/w4) searches</p>
    <p>Total number of searches: log(w1/w2) + log(w2/w3) log(w3/w4) = log(w1/w4)</p>
  </div>
  <div class="page">
    <p>More Rigorous Analysis</p>
    <p>Time for one match:  logkn log log n / k!</p>
    <p>Space: n(c log n)k / k!  for some constant c</p>
  </div>
  <div class="page">
    <p>Open Problem</p>
    <p>Dynamic search structure.  Requires a less strict notion of centroid path?</p>
  </div>
</Presentation>
