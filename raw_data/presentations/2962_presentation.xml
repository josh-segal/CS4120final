<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Pydron Semi-Automatic Parallelization</p>
    <p>for Astronomy Data Processing</p>
    <p>Stefan C. Mller</p>
    <p>Gustavo Alonso</p>
    <p>Adam Amara</p>
    <p>Andr Csillaghy</p>
  </div>
  <div class="page">
    <p>Gustavo Alonso</p>
    <p>Systems Group ETHZ</p>
    <p>Adam Amara</p>
    <p>Institute of Astronomy ETHZ</p>
    <p>Andr Csillaghy</p>
    <p>Institute of 4D Technologies FHNW Solar Orbiter</p>
    <p>Stefan C. Mller</p>
    <p>Systems Group ETHZ</p>
    <p>Institute of 4D Technologies FHNW</p>
    <p>RHESSI</p>
    <p>RHESSI: NASA/Goddard Space Flight Center Conceptual Image Lab</p>
    <p>Solar Orbiter: ESA / AOES</p>
    <p>Dark Energy Survey: T. Abbott and NOAO/AURA/NSF</p>
    <p>Euclid: ESA/C. Carreau</p>
    <p>Euclid Dark Energy</p>
    <p>Survey</p>
  </div>
  <div class="page">
    <p>Overview</p>
    <p>Pydron</p>
    <p>Amazon</p>
    <p>EC2</p>
    <p>Astronomy Processing</p>
    <p>Codes</p>
    <p>Cloud, Cluster,</p>
    <p>Multicore</p>
    <p>Semi-Automatic Parallelization</p>
    <p>def main(raw_images):</p>
    <p>calibrated_files = []</p>
    <p>for raw_image in raw_images:</p>
    <p>bias = measure_bias(raw_image)</p>
    <p>ft= measure_flat(raw_image)</p>
    <p>cal_file = calib(raw_image,bias,ft)</p>
    <p>calibrated_files.append(cal_file)</p>
    <p>Python</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Pydron</p>
    <p>Amazon</p>
    <p>EC2</p>
    <p>Astronomy Data</p>
    <p>Processing</p>
    <p>Results</p>
    <p>Using Pydron</p>
    <p>def main(raw_images):</p>
    <p>calibrated_files = []</p>
    <p>for raw_image in raw_images:</p>
    <p>bias = measure_bias(raw_image)</p>
    <p>ft= measure_flat(raw_image)</p>
    <p>cal_file = calib(raw_image,bias,ft)</p>
    <p>calibrated_files.append(cal_file)</p>
    <p>Python</p>
    <p>How it works</p>
  </div>
  <div class="page">
    <p>Why is Astronomy Data Processing Different?</p>
    <p>Lack of Economies of Scale</p>
  </div>
  <div class="page">
    <p># of Users One of a Kind</p>
    <p>Commercial Systems:  Thousands of</p>
    <p>deployments</p>
    <p>Millions of users</p>
    <p>Astronomy Projects:  Single Deployment</p>
    <p>Hundreds of Researchers</p>
    <p>&lt; 10 that run jobs</p>
    <p>Innovative</p>
    <p>Instrument</p>
    <p>Experiment</p>
    <p>...</p>
    <p>Never seen before ..</p>
    <p>Kind of data</p>
    <p>Data volume</p>
    <p>Data Processing</p>
    <p>Analysis</p>
    <p>...</p>
    <p>Code Reusability is very limited</p>
  </div>
  <div class="page">
    <p>Code changes constantly</p>
    <p>Idea Write</p>
    <p>Code Study</p>
    <p>Results</p>
    <p>Write</p>
    <p>Paper</p>
    <p>Unproductive Time</p>
    <p>Run</p>
    <p>never run again</p>
    <p>Astronomers are Developers, not Users</p>
  </div>
  <div class="page">
    <p>Write</p>
    <p>Code Run</p>
    <p>Write</p>
    <p>Code Run</p>
    <p>Write</p>
    <p>Code Run</p>
    <p>Time</p>
    <p>Sequential Script</p>
    <p>Explain to</p>
    <p>Developer</p>
    <p>Parallel Code</p>
    <p>Pydron</p>
    <p>Sequential Script + Scaling</p>
  </div>
  <div class="page">
    <p>How is Pydron used?</p>
  </div>
  <div class="page">
    <p>def main(raw_images):</p>
    <p>calibrated_files = []</p>
    <p>for raw_image in raw_images:</p>
    <p>bias = measure_bias(raw_image)</p>
    <p>flat = measure_flat(raw_image)</p>
    <p>cal_file = calibrate(raw_image,bias,flat)</p>
    <p>calibrated_files.append(cal_file)</p>
    <p>def measure_bias(raw_image):</p>
    <p>...</p>
    <p>def measure_flat(raw_image):</p>
    <p>...</p>
    <p>def calibrate(raw_image,bias,bg):</p>
    <p>...</p>
    <p>Sequential</p>
    <p>Python</p>
    <p>Code</p>
  </div>
  <div class="page">
    <p>@schedule</p>
    <p>def main(raw_images):</p>
    <p>calibrated_files = []</p>
    <p>for raw_image in raw_images:</p>
    <p>bias = measure_bias(raw_image)</p>
    <p>flat = measure_flat(raw_image)</p>
    <p>cal_file = calibrate(raw_image,bias,flat)</p>
    <p>calibrated_files.append(cal_file)</p>
    <p>@functional</p>
    <p>def measure_bias(raw_image):</p>
    <p>...</p>
    <p>@functional</p>
    <p>def measure_flat(raw_image):</p>
    <p>...</p>
    <p>@functional</p>
    <p>def calibrate(raw_image,bias,bg):</p>
    <p>...</p>
    <p>Minimal</p>
    <p>code</p>
    <p>changes</p>
    <p>required</p>
    <p>Look for</p>
    <p>parallelism in</p>
    <p>here</p>
    <p>no</p>
    <p>side-effects</p>
  </div>
  <div class="page">
    <p>Just run it</p>
    <p>Once the @schedule function is invoked, Pydron will ...</p>
    <p>For the cloud:</p>
    <p>Start cloud nodes &amp; Start Python processes</p>
    <p>Transfer code (and libraries) to nodes</p>
    <p>Schedule tasks</p>
    <p>Send results back to workstation</p>
    <p>Shutdown nodes</p>
    <p>The @schedule function returns with the result.</p>
  </div>
  <div class="page">
    <p>Machine Learning</p>
    <p>Random Forest Training</p>
    <p>Uses scipy native library</p>
    <p>Multi-Core Cluster</p>
  </div>
  <div class="page">
    <p>How does it work?</p>
  </div>
  <div class="page">
    <p>@schedule</p>
    <p>def main(raw_images):</p>
    <p>cal_files = []</p>
    <p>for raw_image in raw_images:</p>
    <p>bias = measure_bias(raw_image)</p>
    <p>ft = measure_flat(raw_image)</p>
    <p>cal_file = cal(raw_image,bias,ft)</p>
    <p>cal_files.append(cal_file)</p>
    <p>for-each</p>
    <p>raw_image</p>
    <p>bias flat</p>
    <p>cal_file</p>
    <p>measure_bias measure_flat</p>
    <p>cal</p>
    <p>raw_images</p>
    <p>cal_files</p>
    <p>Expressions Task nodes</p>
    <p>Variables  Value nodes</p>
    <p>Static Single Assignment Form</p>
    <p>Sub-Graphs for compounds</p>
    <p>Data-flow Graph</p>
    <p>Pydron</p>
  </div>
  <div class="page">
    <p>Python Challenges</p>
    <p>Data-dependent control-flow</p>
    <p>No static type information</p>
    <p>Invoked functions unknown</p>
    <p>Decorators unknown</p>
    <p>Adapt Graph with Runtime Information</p>
    <p>Change graph depending on data</p>
    <p>Use dynamic type information</p>
    <p>Detect function decorators</p>
    <p>Dynamically adapt granularity</p>
  </div>
  <div class="page">
    <p>while f(x):</p>
    <p>x = g(x)</p>
    <p>s += h(x)</p>
    <p>Data dependent Control-Flow</p>
    <p>Pydron</p>
  </div>
  <div class="page">
    <p>while f(x):</p>
    <p>x = g(x)</p>
    <p>s += h(x)</p>
    <p>while-task x</p>
    <p>f x g x</p>
    <p>f</p>
    <p>h</p>
    <p>s + s</p>
    <p>while x</p>
    <p>s</p>
    <p>x</p>
    <p>s</p>
    <p>s</p>
    <p>translate</p>
    <p>Data dependent Control-Flow</p>
    <p>x</p>
    <p>f</p>
    <p>Pydron</p>
  </div>
  <div class="page">
    <p>while f(x):</p>
    <p>x = g(x)</p>
    <p>s += h(x)</p>
    <p>x</p>
    <p>f x g x</p>
    <p>f</p>
    <p>h</p>
    <p>s + s</p>
    <p>while x</p>
    <p>s</p>
    <p>x</p>
    <p>s</p>
    <p>s</p>
    <p>translate</p>
    <p>Data dependent Control-Flow</p>
    <p>g x</p>
    <p>f</p>
    <p>Pydron</p>
  </div>
  <div class="page">
    <p>x g x</p>
    <p>h</p>
    <p>s + s</p>
    <p>g x</p>
    <p>h</p>
    <p>+ s</p>
    <p>g x</p>
    <p>h</p>
    <p>+ s</p>
    <p>translate &amp; replace while-task (3x)</p>
    <p>f while</p>
    <p>s</p>
    <p>x</p>
    <p>while f(x):</p>
    <p>x = g(x)</p>
    <p>s += h(x)</p>
    <p>Data dependent Control-Flow</p>
    <p>Pydron</p>
  </div>
  <div class="page">
    <p>x g x</p>
    <p>h</p>
    <p>s + s</p>
    <p>g x</p>
    <p>h</p>
    <p>+ s</p>
    <p>g x</p>
    <p>h</p>
    <p>+ s</p>
    <p>translate &amp; replace while-task (3x)</p>
    <p>f while</p>
    <p>s</p>
    <p>x</p>
    <p>while f(x):</p>
    <p>x = g(x)</p>
    <p>s += h(x)</p>
    <p>Data dependent Control-Flow</p>
    <p>Pydron</p>
  </div>
  <div class="page">
    <p>x g x</p>
    <p>h</p>
    <p>s + s</p>
    <p>g x</p>
    <p>h</p>
    <p>+ s</p>
    <p>g x</p>
    <p>h</p>
    <p>+ s</p>
    <p>translate &amp; replace while-task (3x)</p>
    <p>f while</p>
    <p>s</p>
    <p>x</p>
    <p>while f(x):</p>
    <p>x = g(x)</p>
    <p>s += h(x)</p>
    <p>Data dependent Control-Flow</p>
    <p>Pydron</p>
  </div>
  <div class="page">
    <p>Results</p>
  </div>
  <div class="page">
    <p>Exo-Planet Detection</p>
    <p>Execution Time Overhead</p>
  </div>
  <div class="page">
    <p>Future Optimizations</p>
    <p>Scheduling algorithm</p>
    <p>Data specific optimizations</p>
    <p>Pre-fetching</p>
    <p>Dynamic Resource Allocation</p>
  </div>
  <div class="page">
    <p>Conclusions</p>
    <p>Pydron lowers the boundary to use parallel</p>
    <p>infrastructure</p>
    <p>Non-intrusiveness &amp; low learning curve</p>
    <p>over ideal performance</p>
  </div>
  <div class="page">
    <p>Q &amp; A</p>
    <p>www.pydron.org</p>
  </div>
</Presentation>
