<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Nemesis: Preventing Web Authentication</p>
    <p>&amp; Access Control Vulnerabilities</p>
    <p>Michael Dalton, Christos Kozyrakis</p>
    <p>Stanford University</p>
    <p>Nickolai Zeldovich</p>
    <p>Massachusetts Institute of Technology</p>
  </div>
  <div class="page">
    <p>Web Application Overview</p>
    <p>FS</p>
    <p>User: Bob</p>
    <p>Op: Upload pic1.jpg</p>
    <p>DB</p>
    <p>User: httpd</p>
    <p>Op: Write pic1.jpg</p>
    <p>User: webdb</p>
    <p>Op: INSERT pictbl</p>
    <p>FS/DB access executed with full app privileges!</p>
  </div>
  <div class="page">
    <p>Web Authentication is Broken</p>
    <p>Semantic Gap  independent auth sys</p>
    <p>Web Authentication vs. DB, FS, LDAP,</p>
    <p>Webapps are effectively setuid progs</p>
    <p>All FS, DB ops have privs of webapp</p>
    <p>Not privs of webapp user (Confused Deputy)</p>
    <p>Programmer must insert auth checks</p>
    <p>Check web app user before all FS/DB op</p>
    <p>Safe only if programmer is perfect 3</p>
  </div>
  <div class="page">
    <p>And in the real world</p>
    <p>Programmers forget auth/ACL checks</p>
    <p>Authentication/Authorization OWASP Top 10</p>
    <p>Difficult to prevent automatically</p>
    <p>Each app has its own authentication system</p>
    <p>Apps have different privilege/ACL systems</p>
    <p>Widespread, highly damaging</p>
    <p>Vulns usually result in admin access to app</p>
  </div>
  <div class="page">
    <p>Authorization Bypass Vulns</p>
    <p>Resource access without authorization</p>
    <p>Missing authorization check</p>
    <p>Incorrect authorization check</p>
    <p>if(client_authorized($_GET['fileName'])</p>
    <p>openFile($_GET['filename']))</p>
    <p>Add URL parameter: filename=/etc/passwd</p>
  </div>
  <div class="page">
    <p>Authentication Bypass Vulns</p>
    <p>Authentication without valid credentials</p>
    <p>URL/Cookie Validation Error</p>
    <p>Weak Crypto</p>
    <p>Ruby on Rails</p>
    <p>http://n8.tumblr.com/post/117477059/ security-hole-found-in-rails-2-3s</p>
    <p>if (isset($_COOKIE['user']))</p>
    <p>$userName = $_COOKIE['user'];</p>
    <p>Edit cookie, add name/value pair: 'user=admin</p>
  </div>
  <div class="page">
    <p>Ideal Auth/ACL System</p>
    <p>Only authenticates correctly/safely</p>
    <p>No authentication bypass attacks</p>
    <p>Always enforces ACLs correctly</p>
    <p>No authorization bypass attacks</p>
    <p>Existing systems fail on both counts May authenticate unsafely if vulnerable</p>
    <p>Do not enforce ACLs automatically</p>
  </div>
  <div class="page">
    <p>Nemesis Overview</p>
    <p>Stops authentication, authorization atks</p>
    <p>Without requiring app auth code rewrites</p>
    <p>Infers when authentication done safely</p>
    <p>Use DIFT to track auth credentials</p>
    <p>Enforces ACLs automatically on file/DB ACLs specify privs for web clients</p>
  </div>
  <div class="page">
    <p>Nemesis System Overview</p>
    <p>Language Interpreter DIFT</p>
    <p>Core Library ACL</p>
    <p>Enforce</p>
    <p>Web</p>
    <p>App 1</p>
    <p>Automatic auth inference</p>
    <p>Tag prop on all object ops</p>
    <p>Web</p>
    <p>App 2</p>
    <p>Intercept I/O ops for File ACLs</p>
    <p>Intercept SQL ops for DB ACLs</p>
    <p>Web</p>
    <p>App 3</p>
  </div>
  <div class="page">
    <p>Safe Authentication Inference</p>
    <p>Propagate user credential, taint bits</p>
    <p>Infer when auth occurs safely</p>
    <p>Tainted info compared equal to auth cred</p>
    <p>Add check to string or array comparison op</p>
    <p>Record authentication inferred user</p>
    <p>Auth bypass attacks do not change this user</p>
  </div>
  <div class="page">
    <p>Authentication Example</p>
    <p>$user = $_GET['username']</p>
    <p>$user = mysql_real_escape_string($user)</p>
    <p>$pw = md5sum($_GET['password'])</p>
    <p>$realpw = $db-&gt;query(SELECT pw FROM users WHERE userName = + $user +</p>
    <p>;</p>
    <p>if ($pw == $realpw) {</p>
    <p>$realpw</p>
    <p>Variable T</p>
    <p>$user</p>
    <p>$pw</p>
    <p>Authenticated!</p>
    <p>P</p>
  </div>
  <div class="page">
    <p>Authorization Enforcement</p>
    <p>Enforce ACLs on FS, DB access</p>
    <p>Apply to authentication inferred user</p>
    <p>Restrict DB table/row, file access</p>
    <p>Many tables store per-user rows</p>
    <p>Taint information used in some rules New user registration</p>
    <p>Password change</p>
  </div>
  <div class="page">
    <p>Attack Prevention</p>
    <p>Authorization Bypass</p>
    <p>Nemesis ACLs enforced automatically</p>
    <p>Not dependent on any app-enforced checks</p>
    <p>Authentication Bypass Auth inference not affected by attack</p>
    <p>Inference requires user input == password</p>
    <p>ACLs check inferred user</p>
    <p>Prevents access to any privileged resource!</p>
  </div>
  <div class="page">
    <p>Configuration Requirements</p>
    <p>Authentication inference</p>
    <p>Table/column info for auth credentials</p>
    <p>ACL enforcement</p>
    <p>ACL from sysadmin for DB, File access</p>
    <p>Future work Current configuration provided by admin</p>
    <p>Log DB, File ops along with inferred user</p>
    <p>Auto-generate ACLs from logs 14</p>
  </div>
  <div class="page">
    <p>Nemesis Prototype</p>
    <p>Added DIFT support to PHP interpreter</p>
    <p>Password, Taint bits for String, int, etc</p>
    <p>Assume Raksha checking OS &amp; PHP interpreter for low-level attacks</p>
    <p>Auth inference on string comparison ==, != operators</p>
    <p>Dont have a full SQL query rewriter</p>
    <p>Had to manually insert DB checks 15</p>
  </div>
  <div class="page">
    <p>Experimental Results</p>
    <p>No discernible performance overhead</p>
    <p>Application Size (Lines) Auth Lines Added</p>
    <p>ACL Check Lines Added</p>
    <p>Attack Prevented</p>
    <p>Php iCalendar 13,500 3 22 Auth Bypass</p>
    <p>PhpStat 12,700 3 17 Missing ACL Check</p>
    <p>Bilboblog 2,000 3 11 Incorrect ACL Check</p>
    <p>phpFastNews 500 5 17 Auth Bypass</p>
    <p>Linpha Gallery 50,000 15 49 SQL Injection in Password Check</p>
    <p>DeluxeBB 22,000 6 143 Missing ACL Check</p>
  </div>
  <div class="page">
    <p>Authenticatication Bypass: Bilboblog</p>
    <p>Internal login script internet accessible</p>
    <p>Admin username and password undefined</p>
    <p>PHP + Register Globals = Fail</p>
    <p>Undefined vars initialized by URL params</p>
    <p>Attacker supplies the admin password! Ensures the submitted password is equal</p>
  </div>
  <div class="page">
    <p>Protecting Bilboblog</p>
    <p>Vulnerable app does not perform auth</p>
    <p>Compares user input to user input</p>
    <p>Attack has no effect on shadow auth</p>
    <p>Attacker-supplied admin password is tainted</p>
    <p>Does not have user credential bit set</p>
    <p>Access to privileged resources denied</p>
    <p>ACL checks use shadow authenticated user</p>
  </div>
  <div class="page">
    <p>Authorization Bypass: DeluxeBB</p>
    <p>Forum supports private messages</p>
    <p>Stored in DB, restricted to sender/receiver</p>
    <p>Invalid access control check</p>
    <p>Malformed cookies bypass check entirely</p>
    <p>Attacker forges cookies Can read arbitrary users private messages</p>
  </div>
  <div class="page">
    <p>Protecting DeluxeBB</p>
    <p>Nemesis does not parse app cookies</p>
    <p>Maintains its own shadow auth cookies</p>
    <p>DeluxeBB has row ACL for pm table</p>
    <p>From or To field = shadow auth user</p>
    <p>Exploit rendered harmless Only read row if From/To shadow auth user</p>
    <p>No information leaks can occur</p>
  </div>
  <div class="page">
    <p>Future Work</p>
    <p>Develop full language for ACLs</p>
    <p>Automate SQL query rewriting for ACLs Database views/triggers (see related work)</p>
    <p>MySQL Proxy</p>
    <p>Automate ACL generation</p>
    <p>Parse DB, File access logs</p>
    <p>Infer authentication rules</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Web authentication is broken Semantic gap between Web App, DB &amp; FS</p>
    <p>Nemesis infers safe authentication When user input compared equal to password</p>
    <p>Nemesis enforces authorization ACLs apply to authentication inferred user</p>
    <p>Validated using real-world PHP Apps Prevented authentication &amp; authorization bypass</p>
  </div>
</Presentation>
