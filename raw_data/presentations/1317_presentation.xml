<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Fido: Fast Inter-Virtual-Machine Communication for Enterprise</p>
    <p>Appliances</p>
    <p>Anton Burtsev, Kiran Srinivasan, Prashanth Radhakrishnan, Lakshmi N. Bairavasundaram,</p>
    <p>Kaladhar Voruganti, Garth R. Goodson</p>
    <p>University of Utah, School of Computing</p>
    <p>NetApp, Inc</p>
  </div>
  <div class="page">
    <p>Enterprise appliances</p>
    <p>High performance  Scalable and highly-available access</p>
    <p>Network attached storage, routers, etc.</p>
  </div>
  <div class="page">
    <p>Example Appliance</p>
    <p>Monolithic kernel  Kernel components</p>
    <p>Problems:</p>
    <p>Fault isolation  Performance isolation  Resource provisioning</p>
  </div>
  <div class="page">
    <p>Split architecture</p>
  </div>
  <div class="page">
    <p>Benefits of virtualization  High availability</p>
    <p>Fault-isolation  Micro-reboots  Partial functionality in case of failure</p>
    <p>Performance isolation</p>
    <p>Resource allocation  Consolidation and load balancing, VM migration</p>
    <p>Non-disruptive updates  Hardware upgrades via VM migration  Software updates as micro-reboots</p>
    <p>Computation to data migration</p>
  </div>
  <div class="page">
    <p>Main Problem: Performance Is it possible to match performance of a monolithic</p>
    <p>environment?</p>
    <p>Large amount of data movement between components  Mostly cross-core</p>
    <p>Connection oriented (established once)</p>
    <p>Throughput optimized (asynchronous)</p>
    <p>Coarse grained (no one-word messages)</p>
    <p>Multi-stage data processing</p>
    <p>Main cost contributors  Transitions to hypervisor</p>
    <p>Memory map/copy operations</p>
    <p>Not VM context switches (multi-cores)</p>
    <p>Not IPC marshaling</p>
  </div>
  <div class="page">
    <p>Main Insight: Relaxed Trust Model</p>
    <p>Appliance is built by a single organization  Components:</p>
    <p>Pre-tested and qualified</p>
    <p>Collaborative and non-malicious</p>
    <p>Share memory read-only across VMs!</p>
    <p>Fast inter-VM communication  Exchange only pointers to data</p>
    <p>No hypervisor calls (only cross-core notification)  No memory map/copy operations</p>
    <p>Zero-copy across entire appliance</p>
  </div>
  <div class="page">
    <p>Contributions</p>
    <p>Fast inter-VM communication mechanism</p>
    <p>Abstraction of a single address space for traditional systems</p>
    <p>Case study  Realistic microkernelized network attached storage</p>
  </div>
  <div class="page">
    <p>Design</p>
  </div>
  <div class="page">
    <p>Design Goals</p>
    <p>Performance  High-throughput</p>
    <p>Practicality  Minimal guest system and hypervisor dependencies</p>
    <p>No intrusive guest kernel changes</p>
    <p>Generality  Support for different communication mechanisms in the</p>
    <p>guest system</p>
  </div>
  <div class="page">
    <p>Transitive Zero Copy</p>
    <p>Goal  Zero-copy across entire appliance  No changes to guest kernel</p>
    <p>Observation  Multi-stage data processing</p>
  </div>
  <div class="page">
    <p>Pseudo Global Virtual Address Space</p>
    <p>Insight:  CPUs support 64-bit address space  Individual VMs have no need in it</p>
  </div>
  <div class="page">
    <p>Pseudo Global Virtual Address Space</p>
  </div>
  <div class="page">
    <p>Pseudo Global Virtual Address Space</p>
  </div>
  <div class="page">
    <p>Transitive Zero Copy</p>
  </div>
  <div class="page">
    <p>Fido: High-level View</p>
  </div>
  <div class="page">
    <p>Fido: High-level View</p>
    <p>c  connection management  m  memory mapping  s  cross-VM signaling</p>
  </div>
  <div class="page">
    <p>IPC Organization</p>
    <p>Shared memory ring  Pointers to data</p>
  </div>
  <div class="page">
    <p>IPC Organization</p>
    <p>Shared memory ring  Pointers to data</p>
    <p>For complex data structures  Scatter-gather array</p>
  </div>
  <div class="page">
    <p>IPC Organization</p>
    <p>Shared memory ring  Pointers to data</p>
    <p>For complex data structures  Scatter-gather array</p>
    <p>Translate pointers</p>
  </div>
  <div class="page">
    <p>IPC Organization</p>
    <p>Shared memory ring  Pointers to data</p>
    <p>For complex data structures  Scatter-gather array</p>
    <p>Translate pointers</p>
    <p>Signaling:  Cross-core interrupts (event channels)  Batching and in-ring polling</p>
  </div>
  <div class="page">
    <p>Fast device-level communication</p>
    <p>MMNet  Link-level</p>
    <p>Standard network device interface</p>
    <p>Supports full transitive zero-copy</p>
    <p>MMBlk  Block-level</p>
    <p>Standard block device interface</p>
    <p>Zero-copy on write</p>
    <p>Incurs one copy on read</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
  </div>
  <div class="page">
    <p>MMNet Evaluation</p>
    <p>AMD Opteron with 2 2.1GHz 4-core CPUs (8 cores total)</p>
    <p>16GB RAM  NVidia 1Gbps NICs  64-bit Xen (3.2), 64-bit Linux (2.6.18.8)  Netperf benchmark (2.4.4)</p>
    <p>Loop NetFront MMNetXenLoop</p>
  </div>
  <div class="page">
    <p>MMNet: TCP Throughput</p>
    <p>T h</p>
    <p>ro u</p>
    <p>g h</p>
    <p>p u</p>
    <p>t (M</p>
    <p>b p</p>
    <p>s)</p>
    <p>Message Size (KB)</p>
    <p>Monolithic</p>
    <p>Netfront</p>
    <p>XenLoop</p>
    <p>MMNet</p>
  </div>
  <div class="page">
    <p>MMBlk Evaluation</p>
    <p>Same hardware  AMD Opteron with 2 2.1GHz 4-core CPUs (8 cores total)  16GB Ram  NVidia 1Gbps NICs</p>
    <p>VMs are configured with 4GB and 1GB RAM  3 GB in-memory file system (TMPFS)  IOZone benchmark</p>
    <p>MMNetXenBlkMonolithic</p>
  </div>
  <div class="page">
    <p>MMBlk Sequential Writes</p>
    <p>T h</p>
    <p>ro u</p>
    <p>g h</p>
    <p>p u</p>
    <p>t (M</p>
    <p>B /s</p>
    <p>)</p>
    <p>Record Size (KB)</p>
    <p>Monolithic</p>
    <p>XenBlk</p>
    <p>MMBlk</p>
  </div>
  <div class="page">
    <p>Case Study</p>
  </div>
  <div class="page">
    <p>Network-attached Storage</p>
  </div>
  <div class="page">
    <p>Network-attached Storage</p>
    <p>RAM  VMs have 1GB each, except FS VM (4GB)  Monolithic system has 7GB RAM</p>
    <p>Disks :  RAID5 over 3 64MB/s disks</p>
    <p>Benchmark  IOZone reads/writes 8GB file over NFS (async)</p>
  </div>
  <div class="page">
    <p>Sequential Writes</p>
    <p>T h</p>
    <p>ro u</p>
    <p>g h</p>
    <p>p u</p>
    <p>t (M</p>
    <p>B /s</p>
    <p>)</p>
    <p>Record Size (KB)</p>
    <p>Monolithic</p>
    <p>Native-Xen</p>
    <p>MM-Xen</p>
  </div>
  <div class="page">
    <p>Sequential Reads</p>
    <p>T h</p>
    <p>ro u</p>
    <p>g h</p>
    <p>p u</p>
    <p>t (M</p>
    <p>B /s</p>
    <p>)</p>
    <p>Record Size (KB)</p>
    <p>Monolithic</p>
    <p>Native-Xen</p>
    <p>MM-Xen</p>
  </div>
  <div class="page">
    <p>TPC-C (On-Line Transactional Processing)</p>
    <p>Tr a</p>
    <p>n sa</p>
    <p>ct io</p>
    <p>n s/</p>
    <p>m in</p>
    <p>u te</p>
    <p>( tp</p>
    <p>m C</p>
    <p>)</p>
    <p>Monolithic</p>
    <p>MMXen</p>
    <p>Native-Xen</p>
  </div>
  <div class="page">
    <p>Conclusions  We match monolithic performance</p>
    <p>Microkernelization of traditional systems is possible!</p>
    <p>Fast inter-VM communication  The search for VM communication mechanisms is not over</p>
    <p>Important aspects of design  Trust model</p>
    <p>VM as a library (for example, FSVA)</p>
    <p>End-to-end zero copy  Pseudo Global Virtual Address Space</p>
    <p>There are still problems to solve  Full end-to-end zero copy  Cross-VM memory management  Full utilization of pipelined parallelism</p>
  </div>
  <div class="page">
    <p>Thank you.</p>
    <p>aburtsev@flux.utah.edu</p>
  </div>
  <div class="page">
    <p>Backup Slides</p>
  </div>
  <div class="page">
    <p>Related Work</p>
    <p>Traditional microkernels [L4, Eros, CoyotOS]  Synchronous (effectively thread migration)  Optimized for single-CPU, fast context switch, small</p>
    <p>messages (often in registers), efficient marshaling (IDL)  Buffer management [Fbufs, IOLite, Beltway Buffers]</p>
    <p>Shared buffer is a unit of protection  Fast-forward  fast cache-to-cache data transfer</p>
    <p>VMs [Xen split drivers, XWay, XenSocket, XenLoop]  Page flipping, later buffer sharing  IVC, VMCI</p>
    <p>Language-based protection [Singularity]  Shared heap, zero-copy (only pointer transfer)</p>
    <p>Hardware acceleration [Solarflare]  Multi-core OSes [Barrelfish, Corey, FOS]</p>
  </div>
</Presentation>
