<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Poor Man's Social Network Consistently Trade Freshness For Scalability Zhiwu Xie, Jinyang Liu, Herbert Van de Sompel, Johann van Reenen and Ramiro Jordan</p>
  </div>
  <div class="page">
    <p>Outline  Scaling feed following  Algorithm  Experiment and results  Conclusions</p>
  </div>
  <div class="page">
    <p>B</p>
    <p>F</p>
    <p>A</p>
    <p>C</p>
    <p>H J</p>
    <p>I</p>
    <p>D</p>
    <p>K</p>
    <p>GE</p>
    <p>Feed Following</p>
    <p>blah</p>
    <p>blah blah</p>
    <p>consumer</p>
    <p>producer</p>
    <p>consumer producer</p>
    <p>blah</p>
    <p>Feed Following:</p>
    <p>blah blah blah blah</p>
  </div>
  <div class="page">
    <p>Feed Following Scalability Give me the 20 most recent tweets sent by all the people I follow  Individualized queries  Fast changing global state  Partitioning, replication, and caching  NoSQL: trade consistency for scalability</p>
  </div>
  <div class="page">
    <p>Consistency  Atomicity, Linearizability, or One-copy</p>
    <p>Serializability (1SR)</p>
    <p>blah blah blah blah Feed Following:</p>
    <p>blah blah blah blah</p>
    <p>Feed Following:</p>
    <p>blah blah blah blah</p>
    <p>Time</p>
  </div>
  <div class="page">
    <p>Retweet Anomaly</p>
    <p>B</p>
    <p>A C</p>
    <p>blah</p>
    <p>Feed Following:</p>
    <p>blah Retweet: blah</p>
    <p>Feed Following:</p>
    <p>Retweet: blah</p>
  </div>
  <div class="page">
    <p>New Approach: TimeMap Query Who have created new tweets during the past scheduled release periods?  Global time across partitions  Schedule releasing  Client-side processing and caching  Consistently trade freshness for scalability</p>
  </div>
  <div class="page">
    <p>CAP Theorem  Preconditioned on the asynchronous network model:</p>
    <p>the only way to coordinate the distributed nodes is to pass messages</p>
    <p>In the partially synchronous model, where global time is assumed to be available, CAP may indeed be simultaneously achievable most of the time</p>
  </div>
  <div class="page">
    <p>Global Time  One of the mysteries of the universe is that it is</p>
    <p>possible to construct a system of physical clocks which, running quite independently of one another, will satisfy the Strong Clock Condition.  Time, Clocks and the Ordering of Events in a Distributed System, by Leslie Lamport</p>
  </div>
  <div class="page">
    <p>Scheduled Release Algorithm</p>
    <p>Who have created new tweets during the past scheduled release periods?</p>
  </div>
  <div class="page">
    <p>Partitioning: Send A New Tweet</p>
    <p>User_id: 0, 5, 10, 15,</p>
    <p>User_id: 1, 6, 11, 16,</p>
    <p>User_id: 2, 7, 12, 17,</p>
    <p>User_id: 3, 8, 13, 18,</p>
    <p>User_id: 4 9, 14, 19,</p>
  </div>
  <div class="page">
    <p>Partitioning: TimeMap</p>
  </div>
  <div class="page">
    <p>Client Side Processing</p>
    <p>A</p>
    <p>If the current time is 1:05:37PM, please tell me who (no matter if I follow any of them or not) have sent new tweets from 1:05:30PM to 1:05:35PM. Ill figure out by myself if any of these new tweets are relevant to me, and if so, Ill retrieve these tweets separately by myself.</p>
    <p>B</p>
    <p>If the current time is 1:05:39PM, please tell me who (no matter if I follow any of them or not) have sent new tweets from 1:05:30PM to 1:05:35PM. Ill figure out by myself if any of these new tweets are relevant to me, and if so, Ill retrieve these tweets separately by myself.</p>
    <p>Cache!</p>
  </div>
  <div class="page">
    <p>Staleness vs. Latency</p>
    <p>Time</p>
    <p>How are you? Im fine (as of 2:00)</p>
    <p>Time</p>
    <p>How were you at 12:55?</p>
    <p>I was fine (as of 12:55)</p>
    <p>Fresh, but 1 hour latency</p>
  </div>
  <div class="page">
    <p>Trade Freshness For Scalability  Mass transit system vs. private car  Lose flexibility, but gain overall</p>
    <p>efficiency by sharing resources  Stale up to the length of the schedule</p>
    <p>release period, e.g., 5 seconds.</p>
  </div>
  <div class="page">
    <p>Experiment  Implemented on AWS  A Twitter like feed following application  Server side: Python/Django,</p>
    <p>PostgreSQL, PL/pgSQL  Client side: emulated browser,</p>
    <p>implemented in Python/Django and PostgreSQL</p>
  </div>
  <div class="page">
    <p>Experiment: Configurations  Used ~ 100 cloud instances from Amazon  Most are used for emulated browsers  3 to 6 c1.medium as servers  Use memcached to simulate</p>
    <p>caches</p>
  </div>
  <div class="page">
    <p>Experiment: Workload  Work load similar to the Yahoo! PNUTS experiment  A following network of ~ 200,000 users  Synthetic workload generated by Yahoo! Cloud</p>
    <p>Serving Benchmark</p>
  </div>
  <div class="page">
    <p>Experiment Result: Query Rate</p>
  </div>
  <div class="page">
    <p>Experiment Result: Latency</p>
  </div>
  <div class="page">
    <p>Experiment Results: Caching</p>
  </div>
  <div class="page">
    <p>Experiment Results: CPU Load</p>
    <p>Server</p>
    <p>Client</p>
  </div>
  <div class="page">
    <p>Conclusions  Consistently scale feed following  Linear scalability  Practical low cost solution</p>
  </div>
  <div class="page">
    <p>Thank You  Questions?</p>
  </div>
</Presentation>
