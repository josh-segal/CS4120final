<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Phoenix: Rebirth of a Cryptographic Password-Hardening Service</p>
    <p>Russell W.F. Lai 1,2</p>
    <p>Christoph Egger 1</p>
    <p>Dominique Schroder 1</p>
    <p>Sherman S.M. Chow 2</p>
    <p>August 17, 2017</p>
  </div>
  <div class="page">
    <p>Phoenix: Rebirth of a Cryptographic Password-Hardening Service Russell W. F. Lai</p>
    <p>Scheme Design</p>
  </div>
  <div class="page">
    <p>Phoenix: Rebirth of a Cryptographic Password-Hardening Service Russell W. F. Lai</p>
    <p>Password Authentication - before 1976</p>
    <p>User Username Alice Password 123456</p>
    <p>Database Username Alice Password pw</p>
    <p>Salt aqZcSP</p>
    <p>I am Alice.</p>
    <p>My password is 123456.</p>
    <p>Validation Algorithm</p>
    <p>pw ? = 123456</p>
    <p>OK!</p>
  </div>
  <div class="page">
    <p>Phoenix: Rebirth of a Cryptographic Password-Hardening Service Russell W. F. Lai</p>
    <p>Password Authentication - before 1976</p>
    <p>User Username Alice Password 123456</p>
    <p>Database Username Alice Password pw</p>
    <p>Salt aqZcSP</p>
    <p>I am Alice.</p>
    <p>My password is 123456.</p>
    <p>Validation Algorithm</p>
    <p>pw ? = 123456</p>
    <p>OK!</p>
  </div>
  <div class="page">
    <p>Phoenix: Rebirth of a Cryptographic Password-Hardening Service Russell W. F. Lai</p>
    <p>Password Authentication - before 1976</p>
    <p>User Username Alice Password 123456</p>
    <p>Database Username Alice Password pw</p>
    <p>Salt aqZcSP</p>
    <p>I am Alice.</p>
    <p>My password is 123456.</p>
    <p>Validation Algorithm</p>
    <p>pw ? = 123456</p>
    <p>OK!</p>
  </div>
  <div class="page">
    <p>Phoenix: Rebirth of a Cryptographic Password-Hardening Service Russell W. F. Lai</p>
    <p>Password Authentication - after 1976</p>
    <p>User Username Alice Password 123456</p>
    <p>Database Username Alice</p>
    <p>Hash h Salt aqZcSP</p>
    <p>I am Alice.</p>
    <p>My password is 123456.</p>
    <p>Validation Algorithm</p>
    <p>h ? = H(123456,aqZcSP)</p>
    <p>OK!</p>
  </div>
  <div class="page">
    <p>Phoenix: Rebirth of a Cryptographic Password-Hardening Service Russell W. F. Lai</p>
    <p>Problem I - Weak Passwords</p>
    <p>Worst Passwords of 2016 by TeamsID</p>
    <p>4% of users use 123456 as password  25% of users use the top 25 worst passwords  Users are stubborn  Choose stronger passwords  Use crypto</p>
  </div>
  <div class="page">
    <p>Phoenix: Rebirth of a Cryptographic Password-Hardening Service Russell W. F. Lai</p>
    <p>Problem II - Stolen Passwords</p>
    <p>Data breaches in 20042017 (Wikipedia)</p>
    <p>Cost of Data Breach (IBM - 2017 Study)</p>
    <p>Average Cost per Data Breach: $3.62 million</p>
    <p>Average Cost per Stolen Record $141</p>
    <p>Service providers have incentives to change!</p>
  </div>
  <div class="page">
    <p>Phoenix: Rebirth of a Cryptographic Password-Hardening Service Russell W. F. Lai</p>
    <p>Problem II - Stolen Passwords</p>
    <p>Data breaches in 20042017 (Wikipedia)</p>
    <p>Cost of Data Breach (IBM - 2017 Study)</p>
    <p>Average Cost per Data Breach: $3.62 million</p>
    <p>Average Cost per Stolen Record $141</p>
    <p>Service providers have incentives to change!</p>
  </div>
  <div class="page">
    <p>Phoenix: Rebirth of a Cryptographic Password-Hardening Service Russell W. F. Lai</p>
    <p>Problem II - Stolen Passwords</p>
    <p>Data breaches in 20042017 (Wikipedia)</p>
    <p>Cost of Data Breach (IBM - 2017 Study)</p>
    <p>Average Cost per Data Breach: $3.62 million</p>
    <p>Average Cost per Stolen Record $141</p>
    <p>Service providers have incentives to change!</p>
  </div>
  <div class="page">
    <p>Phoenix: Rebirth of a Cryptographic Password-Hardening Service Russell W. F. Lai</p>
    <p>Password Hardening Services (Facebook, Pythia)</p>
    <p>Alice</p>
    <p>123456</p>
    <p>OK! Database</p>
    <p>Username Alice Ciphertext c</p>
    <p>Verification Algorithm Protocol</p>
    <p>Alice</p>
    <p>C(skC,c,Alice,123456),S(skS,Alice)val Crypto Server (Server)</p>
  </div>
  <div class="page">
    <p>Phoenix: Rebirth of a Cryptographic Password-Hardening Service Russell W. F. Lai</p>
    <p>Password Hardening Services (Facebook, Pythia)</p>
    <p>Alice</p>
    <p>123456</p>
    <p>OK! Database (Client) Username Alice Ciphertext c</p>
    <p>Verification Algorithm Protocol</p>
    <p>Alice</p>
    <p>C(skC,c,Alice,123456),S(skS,Alice)val Crypto Server (Server)</p>
  </div>
  <div class="page">
    <p>Phoenix: Rebirth of a Cryptographic Password-Hardening Service Russell W. F. Lai</p>
    <p>Password Hardening Services (Facebook, Pythia)</p>
    <p>Alice</p>
    <p>123456</p>
    <p>OK! Database (Client) Username Alice Ciphertext c</p>
    <p>Verification Algorithm Protocol</p>
    <p>Alice</p>
    <p>C(skC,c,Alice,123456),S(skS,Alice)val Crypto Server (Server)</p>
    <p>Key Features</p>
    <p>Seamless to end user (Alice)</p>
    <p>Obliviousness: (Malicious) server does not learn password  Hiding: (Compromised) client cannot verify password by itself</p>
    <p>eliminate offline attacks</p>
    <p>Rate-Limiting (per Username): (Compromised) client cannot submit too many requests</p>
    <p>mitigate online attacks</p>
  </div>
  <div class="page">
    <p>Phoenix: Rebirth of a Cryptographic Password-Hardening Service Russell W. F. Lai</p>
    <p>Password Hardening Services (Facebook, Pythia)</p>
    <p>Alice</p>
    <p>123456</p>
    <p>OK! Database (Client) Username Alice Ciphertext c</p>
    <p>Messages from client are independent of passwords!</p>
    <p>Verification Algorithm Protocol</p>
    <p>Alice</p>
    <p>C(skC,c,Alice,123456),S(skS,Alice)val Crypto Server (Server)</p>
    <p>Key Features</p>
    <p>Seamless to end user (Alice)  Obliviousness: (Malicious) server does not learn password</p>
    <p>Hiding: (Compromised) client cannot verify password by itself  eliminate offline attacks</p>
    <p>Rate-Limiting (per Username): (Compromised) client cannot submit too many requests</p>
    <p>mitigate online attacks</p>
  </div>
  <div class="page">
    <p>Phoenix: Rebirth of a Cryptographic Password-Hardening Service Russell W. F. Lai</p>
    <p>Password Hardening Services (Facebook, Pythia)</p>
    <p>Alice</p>
    <p>123456</p>
    <p>OK! Database (Client) Username Alice Ciphertext c</p>
    <p>Verification Algorithm Protocol</p>
    <p>Alice</p>
    <p>C(skC,c,Alice,123456),S(skS,Alice)val Crypto Server (Server)</p>
    <p>Key Features</p>
    <p>Seamless to end user (Alice)  Obliviousness: (Malicious) server does not learn password  Hiding: (Compromised) client cannot verify password by itself</p>
    <p>eliminate offline attacks</p>
    <p>Rate-Limiting (per Username): (Compromised) client cannot submit too many requests</p>
    <p>mitigate online attacks</p>
  </div>
  <div class="page">
    <p>Phoenix: Rebirth of a Cryptographic Password-Hardening Service Russell W. F. Lai</p>
    <p>Password Hardening Services (Facebook, Pythia)</p>
    <p>Alice</p>
    <p>123456</p>
    <p>OK!</p>
    <p>??</p>
    <p>Database (Client) Username Alice Ciphertext c</p>
    <p>Verification Algorithm Protocol</p>
    <p>Alice</p>
    <p>C(skC,c,Alice,123456),S(skS,Alice)val Crypto Server (Server)</p>
    <p>Key Features</p>
    <p>Seamless to end user (Alice)  Obliviousness: (Malicious) server does not learn password  Hiding: (Compromised) client cannot verify password by itself</p>
    <p>eliminate offline attacks</p>
    <p>Rate-Limiting (per Username): (Compromised) client cannot submit too many requests</p>
    <p>mitigate online attacks</p>
  </div>
  <div class="page">
    <p>Phoenix: Rebirth of a Cryptographic Password-Hardening Service Russell W. F. Lai</p>
    <p>Password Hardening Services (Facebook, Pythia)</p>
    <p>Alice</p>
    <p>123456</p>
    <p>OK! Database (Client) Username Alice Ciphertext c</p>
    <p>Verification Algorithm Protocol</p>
    <p>Alice</p>
    <p>C(skC,c,Alice, 000000),S(skS,Alice)val Crypto Server (Server)</p>
    <p>Key Features</p>
    <p>Seamless to end user (Alice)  Obliviousness: (Malicious) server does not learn password  Hiding: (Compromised) client cannot verify password by itself</p>
    <p>eliminate offline attacks</p>
    <p>Rate-Limiting (per Username): (Compromised) client cannot submit too many requests</p>
    <p>mitigate online attacks 6 of 26</p>
  </div>
  <div class="page">
    <p>Phoenix: Rebirth of a Cryptographic Password-Hardening Service Russell W. F. Lai</p>
    <p>Password Hardening Services (Facebook, Pythia)</p>
    <p>Alice</p>
    <p>123456</p>
    <p>OK! Database (Client) Username Alice Ciphertext c</p>
    <p>Verification Algorithm Protocol</p>
    <p>Alice</p>
    <p>C(skC,c,Alice, qwerty),S(skS,Alice)val Crypto Server (Server)</p>
    <p>Key Features</p>
    <p>Seamless to end user (Alice)  Obliviousness: (Malicious) server does not learn password  Hiding: (Compromised) client cannot verify password by itself</p>
    <p>eliminate offline attacks</p>
    <p>Rate-Limiting (per Username): (Compromised) client cannot submit too many requests</p>
    <p>mitigate online attacks 6 of 26</p>
  </div>
  <div class="page">
    <p>Phoenix: Rebirth of a Cryptographic Password-Hardening Service Russell W. F. Lai</p>
    <p>Password Hardening Services (Facebook, Pythia)</p>
    <p>Alice</p>
    <p>123456</p>
    <p>OK! Database (Client) Username Alice Ciphertext c</p>
    <p>Verification Algorithm Protocol</p>
    <p>Alice</p>
    <p>C(skC,c,Alice, asdfgh),S(skS,Alice)val Crypto Server (Server)</p>
    <p>Key Features</p>
    <p>Seamless to end user (Alice)  Obliviousness: (Malicious) server does not learn password  Hiding: (Compromised) client cannot verify password by itself</p>
    <p>eliminate offline attacks</p>
    <p>Rate-Limiting (per Username): (Compromised) client cannot submit too many requests</p>
    <p>mitigate online attacks 6 of 26</p>
  </div>
  <div class="page">
    <p>Phoenix: Rebirth of a Cryptographic Password-Hardening Service Russell W. F. Lai</p>
    <p>Password Hardening Services (Facebook, Pythia)</p>
    <p>Alice</p>
    <p>123456</p>
    <p>OK! Database (Client) Username Alice Ciphertext c</p>
    <p>Verification Algorithm Protocol</p>
    <p>Alice</p>
    <p>Too many requests! Crypto Server (Server)</p>
    <p>Key Features</p>
    <p>Seamless to end user (Alice)  Obliviousness: (Malicious) server does not learn password  Hiding: (Compromised) client cannot verify password by itself</p>
    <p>eliminate offline attacks</p>
    <p>Rate-Limiting (per Username): (Compromised) client cannot submit too many requests</p>
    <p>mitigate online attacks 6 of 26</p>
  </div>
  <div class="page">
    <p>Phoenix: Rebirth of a Cryptographic Password-Hardening Service Russell W. F. Lai</p>
    <p>Password Hardening Services (Facebook, Pythia)</p>
    <p>Alice</p>
    <p>123456</p>
    <p>OK! Database (Client) Username Alice Ciphertext c</p>
    <p>Verification Algorithm Protocol</p>
    <p>Alice</p>
    <p>C(skC,c,Alice,123456),S(skS,Alice)val Crypto Server (Server)</p>
    <p>Key Features</p>
    <p>Key-Rotation  Update both keys if either party is compromised  Bring the entire system to a fresh state  Update ciphertexts without knowing passwords (seamless to end user)</p>
  </div>
  <div class="page">
    <p>Phoenix: Rebirth of a Cryptographic Password-Hardening Service Russell W. F. Lai</p>
    <p>Password Hardening Services (Facebook, Pythia)</p>
    <p>Alice</p>
    <p>123456</p>
    <p>OK! Database (Client) Username Alice Ciphertext c</p>
    <p>Verification Algorithm Protocol</p>
    <p>Alice</p>
    <p>C(skC,c,Alice,123456),S(skS,Alice)val Crypto Server (Server)</p>
    <p>Key Features</p>
    <p>Key-Rotation  Update both keys if either party is compromised  Bring the entire system to a fresh state  Update ciphertexts without knowing passwords (seamless to end user)</p>
  </div>
  <div class="page">
    <p>Phoenix: Rebirth of a Cryptographic Password-Hardening Service Russell W. F. Lai</p>
    <p>The Crypto Server</p>
    <p>Crypto Server</p>
    <p>Key generation independent of client  Can be set up by any third party company / organization  One server can serve multiple clients</p>
    <p>Only stores:  One secret key per client  One counter per end user for rate-limiting</p>
    <p>(deleted after the current time interval)</p>
    <p>Can be split into multiple servers (future work)</p>
  </div>
  <div class="page">
    <p>Phoenix: Rebirth of a Cryptographic Password-Hardening Service Russell W. F. Lai</p>
    <p>The Crypto Server</p>
    <p>Crypto Server</p>
    <p>Key generation independent of client  Can be set up by any third party company / organization  One server can serve multiple clients</p>
    <p>Only stores:  One secret key per client  One counter per end user for rate-limiting</p>
    <p>(deleted after the current time interval)</p>
    <p>Can be split into multiple servers (future work)</p>
  </div>
  <div class="page">
    <p>Phoenix: Rebirth of a Cryptographic Password-Hardening Service Russell W. F. Lai</p>
    <p>The Crypto Server</p>
    <p>Crypto Server</p>
    <p>Key generation independent of client  Can be set up by any third party company / organization  One server can serve multiple clients</p>
    <p>Only stores:  One secret key per client  One counter per end user for rate-limiting</p>
    <p>(deleted after the current time interval)</p>
    <p>Can be split into multiple servers (future work)</p>
  </div>
  <div class="page">
    <p>Phoenix: Rebirth of a Cryptographic Password-Hardening Service Russell W. F. Lai</p>
    <p>False Friends (Similar but different notions)</p>
    <p>Common Feature</p>
    <p>To distribute the task of verifying passwords to multiple servers</p>
    <p>Distributed Password Verification (CCS15) Camenisch, Lehmann, and Neven</p>
    <p>Joint key generation between client and server  Rate-limiting at client only</p>
    <p>Password-Authenticated Key Exchange (PAKE) / Password-Protected Secret Sharing (PPSS)</p>
    <p>Crypto servers need to store a secret share per end user  No / inefficient key rotations</p>
  </div>
  <div class="page">
    <p>Phoenix: Rebirth of a Cryptographic Password-Hardening Service Russell W. F. Lai</p>
    <p>False Friends (Similar but different notions)</p>
    <p>Common Feature</p>
    <p>To distribute the task of verifying passwords to multiple servers</p>
    <p>Distributed Password Verification (CCS15) Camenisch, Lehmann, and Neven</p>
    <p>Joint key generation between client and server  Rate-limiting at client only</p>
    <p>Password-Authenticated Key Exchange (PAKE) / Password-Protected Secret Sharing (PPSS)</p>
    <p>Crypto servers need to store a secret share per end user  No / inefficient key rotations</p>
  </div>
  <div class="page">
    <p>Phoenix: Rebirth of a Cryptographic Password-Hardening Service Russell W. F. Lai</p>
    <p>False Friends (Similar but different notions)</p>
    <p>Common Feature</p>
    <p>To distribute the task of verifying passwords to multiple servers</p>
    <p>Distributed Password Verification (CCS15) Camenisch, Lehmann, and Neven</p>
    <p>Joint key generation between client and server  Rate-limiting at client only</p>
    <p>Password-Authenticated Key Exchange (PAKE) / Password-Protected Secret Sharing (PPSS)</p>
    <p>Crypto servers need to store a secret share per end user  No / inefficient key rotations 8 of 26</p>
  </div>
  <div class="page">
    <p>Phoenix: Rebirth of a Cryptographic Password-Hardening Service Russell W. F. Lai</p>
    <p>Literature on Password Hardening (PH)</p>
    <p>Partially-Oblivious Pseudorandom Functions (PO-PRF) (USENIX15) Everspaugh, Chatterjee, Scott, Juels, and Ristenpart</p>
    <p>Formalized PO-PRF  Construction (Pythia) based on pairing</p>
    <p>Partially-Oblivious Commitments (PO-Com) (CCS16) Schneider, Fleischhacker, Schroder, and Backes</p>
    <p>Formalized PO-Com  Security definitions too weak for PH (not covering online attacks)</p>
    <p>Construction without pairing  2 faster than Pythia when used for PH</p>
  </div>
  <div class="page">
    <p>Phoenix: Rebirth of a Cryptographic Password-Hardening Service Russell W. F. Lai</p>
    <p>Literature on Password Hardening (PH)</p>
    <p>Partially-Oblivious Pseudorandom Functions (PO-PRF) (USENIX15) Everspaugh, Chatterjee, Scott, Juels, and Ristenpart</p>
    <p>Formalized PO-PRF  Construction (Pythia) based on pairing</p>
    <p>Partially-Oblivious Commitments (PO-Com) (CCS16) Schneider, Fleischhacker, Schroder, and Backes</p>
    <p>Formalized PO-Com  Security definitions too weak for PH (not covering online attacks)</p>
    <p>Construction without pairing  2 faster than Pythia when used for PH</p>
  </div>
  <div class="page">
    <p>Phoenix: Rebirth of a Cryptographic Password-Hardening Service Russell W. F. Lai</p>
    <p>This Work</p>
    <p>Finally, formalized PH  Revisit and strengthen model of Schneider et al.</p>
    <p>Formalized key-rotation  Devastating online attacks against scheme of Schneider et al.  Attack 1: Enable offline-dictionary attack after one validation request  Attack 2: Extract password after one validation request  The attacks defeat the purpose of external crypto server  The attacks are outside of their security model</p>
    <p>Extremely simple construction (still without pairing)  Simple enough for real-world use  easy to understand and implement  Proven secure under strengthened security model  1.5 faster than scheme of Schneider et al.  3 faster than Pythia</p>
  </div>
  <div class="page">
    <p>Phoenix: Rebirth of a Cryptographic Password-Hardening Service Russell W. F. Lai</p>
    <p>This Work</p>
    <p>Finally, formalized PH  Revisit and strengthen model of Schneider et al.</p>
    <p>Formalized key-rotation</p>
    <p>Devastating online attacks against scheme of Schneider et al.  Attack 1: Enable offline-dictionary attack after one validation request  Attack 2: Extract password after one validation request  The attacks defeat the purpose of external crypto server  The attacks are outside of their security model</p>
    <p>Extremely simple construction (still without pairing)  Simple enough for real-world use  easy to understand and implement  Proven secure under strengthened security model  1.5 faster than scheme of Schneider et al.  3 faster than Pythia</p>
  </div>
  <div class="page">
    <p>Phoenix: Rebirth of a Cryptographic Password-Hardening Service Russell W. F. Lai</p>
    <p>This Work</p>
    <p>Finally, formalized PH  Revisit and strengthen model of Schneider et al.</p>
    <p>Formalized key-rotation  Devastating online attacks against scheme of Schneider et al.  Attack 1: Enable offline-dictionary attack after one validation request  Attack 2: Extract password after one validation request  The attacks defeat the purpose of external crypto server  The attacks are outside of their security model</p>
    <p>Extremely simple construction (still without pairing)  Simple enough for real-world use  easy to understand and implement  Proven secure under strengthened security model  1.5 faster than scheme of Schneider et al.  3 faster than Pythia</p>
  </div>
  <div class="page">
    <p>Phoenix: Rebirth of a Cryptographic Password-Hardening Service Russell W. F. Lai</p>
    <p>This Work</p>
    <p>Finally, formalized PH  Revisit and strengthen model of Schneider et al.</p>
    <p>Formalized key-rotation  Devastating online attacks against scheme of Schneider et al.  Attack 1: Enable offline-dictionary attack after one validation request  Attack 2: Extract password after one validation request  The attacks defeat the purpose of external crypto server  The attacks are outside of their security model</p>
    <p>Extremely simple construction (still without pairing)  Simple enough for real-world use  easy to understand and implement  Proven secure under strengthened security model  1.5 faster than scheme of Schneider et al.  3 faster than Pythia</p>
  </div>
  <div class="page">
    <p>Phoenix: Rebirth of a Cryptographic Password-Hardening Service Russell W. F. Lai</p>
    <p>From Salted Hash to Phoenix (Intuitive Description)</p>
    <p>Database (Client) Username un</p>
    <p>Hash H(un,pw,nC) Client Nonce nC</p>
    <p>Server Nonce</p>
    <p>Enrollment Protocol</p>
    <p>Username un</p>
    <p>PRF Value</p>
    <p>Server Nonce nS</p>
    <p>Crypto Server (Server)</p>
  </div>
  <div class="page">
    <p>Phoenix: Rebirth of a Cryptographic Password-Hardening Service Russell W. F. Lai</p>
    <p>From Salted Hash to Phoenix (Intuitive Description)</p>
    <p>Database (Client) Username un PRF Value PRFsk(un,pw,nC)</p>
    <p>Client Nonce nC</p>
    <p>Server Nonce</p>
    <p>Enrollment Protocol</p>
    <p>Username un</p>
    <p>PRF Value</p>
    <p>Server Nonce nS</p>
    <p>Crypto Server (Server)</p>
  </div>
  <div class="page">
    <p>Phoenix: Rebirth of a Cryptographic Password-Hardening Service Russell W. F. Lai</p>
    <p>From Salted Hash to Phoenix (Intuitive Description)</p>
    <p>Database (Client) Username un</p>
    <p>Product PRF Value PRFskS (un,nS)</p>
    <p>PRFskC (un,pw,nC) Client Nonce nC Server Nonce nS</p>
    <p>Enrollment Protocol</p>
    <p>Username un</p>
    <p>PRF Value PRFskS (un,nS)</p>
    <p>Server Nonce nS</p>
    <p>Crypto Server (Server)</p>
  </div>
  <div class="page">
    <p>Phoenix: Rebirth of a Cryptographic Password-Hardening Service Russell W. F. Lai</p>
    <p>From Salted Hash to Phoenix (Intuitive Description)</p>
    <p>Database (Client) Username un</p>
    <p>Ciphertext Enc</p>
    <p>( pkS,</p>
    <p>PRFskS (un,nS) PRFskC (un,pw,nC)</p>
    <p>) Client Nonce nC Server Nonce nS</p>
    <p>Enrollment Protocol</p>
    <p>Username un</p>
    <p>PRF Value PRFskS (un,nS)</p>
    <p>Server Nonce nS</p>
    <p>Crypto Server (Server)</p>
  </div>
  <div class="page">
    <p>Phoenix: Rebirth of a Cryptographic Password-Hardening Service Russell W. F. Lai</p>
    <p>From Salted Hash to Phoenix (Intuitive Description)</p>
    <p>Database (Client) Username un</p>
    <p>Ciphertext Enc</p>
    <p>( pkS,</p>
    <p>PRFskS (un,nS) PRFskC (un,pw,nC)</p>
    <p>) Client Nonce nC Server Nonce nS</p>
    <p>Enrollment Protocol</p>
    <p>Username un</p>
    <p>PRF Value HS(un,nS) kS</p>
    <p>Server Nonce nS</p>
    <p>Crypto Server (Server)</p>
    <p>Homomorphic Encryption</p>
    <p>Enc(pk, m m)  Enc(pk, m)  Enc(pk, m)</p>
    <p>Key-Homomorphic PRF</p>
    <p>PRFsksk (m) = PRFsk(m)  PRFsk (m)</p>
  </div>
  <div class="page">
    <p>Phoenix: Rebirth of a Cryptographic Password-Hardening Service Russell W. F. Lai</p>
    <p>From Salted Hash to Phoenix (Intuitive Description)</p>
    <p>Database (Client) Username un</p>
    <p>(gr,hr HS(un,nS)kS HC(un,pw,nC)kC ) Client Nonce nC Server Nonce nS</p>
    <p>Enrollment Protocol</p>
    <p>Username un</p>
    <p>PRF Value</p>
    <p>Server Nonce nS</p>
    <p>Crypto Server (Server)</p>
    <p>e.g., ElGamal (and variants)</p>
    <p>sk = s, pk = h = gs</p>
    <p>c = (gr, hr m)</p>
    <p>(gr+r  , hr+r</p>
    <p>m m) =</p>
    <p>(gr, hr m)  (gr  , hr</p>
    <p>m)</p>
    <p>e.g., Naor-Pinkas-Reingold</p>
    <p>sk = k y = H(m)k</p>
    <p>H(m)k+k</p>
    <p>= H(m)k H(m)k</p>
  </div>
  <div class="page">
    <p>Phoenix: Rebirth of a Cryptographic Password-Hardening Service Russell W. F. Lai</p>
    <p>Phoenix Validation (Intuitive Description)</p>
    <p>Database (Client) Username un Ciphertext (gr, hr HS(un, nS)kS HC(un, pw, nC)kC )</p>
    <p>Client Nonce nC Server Nonce nS</p>
    <p>Crypto Server (Server)</p>
    <p>Validation Protocol</p>
    <p>hr HS(un, nS)kS = hr HS(un, nS)kS HC(un, pw, nC)kC</p>
    <p>HC(un, pw, nC)kC</p>
    <p>(gr, hr HS(un, nS)kS ), un, nS</p>
    <p>Is un requested too many times?</p>
    <p>Is the ciphertext valid?</p>
    <p>Prove(The ciphertext is valid!)</p>
  </div>
  <div class="page">
    <p>Phoenix: Rebirth of a Cryptographic Password-Hardening Service Russell W. F. Lai</p>
    <p>Phoenix Validation (Intuitive Description)</p>
    <p>Database (Client) Username un Ciphertext (gr, hr HS(un, nS)kS HC(un, pw, nC)kC )</p>
    <p>Client Nonce nC Server Nonce nS</p>
    <p>Crypto Server (Server)</p>
    <p>Validation Protocol</p>
    <p>hr HS(un, nS)kS = hr HS(un, nS)kS HC(un, pw, nC)kC</p>
    <p>HC(un, pw, nC)kC</p>
    <p>(gr, hr HS(un, nS)kS ), un, nS</p>
    <p>Is un requested too many times?</p>
    <p>Is the ciphertext valid?</p>
    <p>Prove(The ciphertext is valid!)</p>
  </div>
  <div class="page">
    <p>Phoenix: Rebirth of a Cryptographic Password-Hardening Service Russell W. F. Lai</p>
    <p>Phoenix Validation (Intuitive Description)</p>
    <p>Database (Client) Username un Ciphertext (gr, hr HS(un, nS)kS HC(un, pw, nC)kC )</p>
    <p>Client Nonce nC Server Nonce nS</p>
    <p>Crypto Server (Server)</p>
    <p>Validation Protocol</p>
    <p>hr HS(un, nS)kS = hr HS(un, nS)kS HC(un, pw, nC)kC</p>
    <p>HC(un, pw, nC)kC</p>
    <p>(gr, hr HS(un, nS)kS ), un, nS</p>
    <p>Is un requested too many times?</p>
    <p>Is the ciphertext valid?</p>
    <p>Prove(The ciphertext is valid!)</p>
  </div>
  <div class="page">
    <p>Phoenix: Rebirth of a Cryptographic Password-Hardening Service Russell W. F. Lai</p>
    <p>Phoenix Validation (Intuitive Description)</p>
    <p>Database (Client) Username un Ciphertext (gr, hr HS(un, nS)kS HC(un, pw, nC)kC )</p>
    <p>Client Nonce nC Server Nonce nS</p>
    <p>Crypto Server (Server)</p>
    <p>Validation Protocol</p>
    <p>hr HS(un, nS)kS = hr HS(un, nS)kS HC(un, pw, nC)kC</p>
    <p>HC(un, pw, nC)kC</p>
    <p>(gr, hr HS(un, nS)kS ), un, nS</p>
    <p>Is un requested too many times?</p>
    <p>Is the ciphertext valid?</p>
    <p>Prove(The ciphertext is valid!)</p>
  </div>
  <div class="page">
    <p>Phoenix: Rebirth of a Cryptographic Password-Hardening Service Russell W. F. Lai</p>
    <p>Phoenix Validation (Intuitive Description)</p>
    <p>Database (Client) Username un Ciphertext (gr, hr HS(un, nS)kS HC(un, pw, nC)kC )</p>
    <p>Client Nonce nC Server Nonce nS</p>
    <p>Crypto Server (Server)</p>
    <p>Validation Protocol</p>
    <p>hr HS(un, nS)kS = hr HS(un, nS)kS HC(un, pw, nC)kC</p>
    <p>HC(un, pw, nC)kC</p>
    <p>(gr, hr HS(un, nS)kS ), un, nS</p>
    <p>Is un requested too many times?</p>
    <p>Is the ciphertext valid?</p>
    <p>Prove(The ciphertext is valid!)</p>
  </div>
  <div class="page">
    <p>Phoenix: Rebirth of a Cryptographic Password-Hardening Service Russell W. F. Lai</p>
    <p>Why it works?</p>
    <p>Obliviousness:  Nothing about the password is sent to the server</p>
    <p>(gr, hr HS(un, nS)kS ), un, nS</p>
    <p>Hiding:  PRF values of the passwords are encrypted to the server  Client cannot decrypt by itself  Validity check binds (un, nS) with HS(un, nS)kS in c  Online attacks require guessing pw to remove HC(pw, nC)kC from c</p>
  </div>
  <div class="page">
    <p>Phoenix: Rebirth of a Cryptographic Password-Hardening Service Russell W. F. Lai</p>
    <p>Why it works?</p>
    <p>Obliviousness:  Nothing about the password is sent to the server</p>
    <p>(gr, hr HS(un, nS)kS ), un, nS</p>
    <p>Hiding:  PRF values of the passwords are encrypted to the server  Client cannot decrypt by itself  Validity check binds (un, nS) with HS(un, nS)kS in c  Online attacks require guessing pw to remove HC(pw, nC)kC from c</p>
  </div>
  <div class="page">
    <p>Phoenix: Rebirth of a Cryptographic Password-Hardening Service Russell W. F. Lai</p>
    <p>Phoenix Key-Rotation (Intuitive Description)</p>
    <p>Database (Client) Crypto Server (Server)</p>
    <p>gsr HS(un, nS)kS HC(un, pw, nC)kC</p>
    <p>gsr HS(un, nS)kS HC(un, pw, nC)kC</p>
    <p>(gr ) HS(un,nS)</p>
    <p>g(s+)r HS(un, nS)kS+ HC(un, pw, nC)kC</p>
    <p>=</p>
    <p>gs r HS(un, nS)k</p>
    <p>S HC(un, pw, nC)k</p>
    <p>C</p>
  </div>
  <div class="page">
    <p>Phoenix: Rebirth of a Cryptographic Password-Hardening Service Russell W. F. Lai</p>
    <p>Phoenix Key-Rotation (Intuitive Description)</p>
    <p>Database (Client) Crypto Server (Server)</p>
    <p>gsr HS(un, nS)kS HC(un, pw, nC)kC</p>
    <p>gsr HS(un, nS)kS HC(un, pw, nC)kC</p>
    <p>(gr ) HS(un,nS)</p>
    <p>g(s+)r HS(un, nS)kS+ HC(un, pw, nC)kC</p>
    <p>=</p>
    <p>gs r HS(un, nS)k</p>
    <p>S HC(un, pw, nC)k</p>
    <p>C</p>
  </div>
  <div class="page">
    <p>Phoenix: Rebirth of a Cryptographic Password-Hardening Service Christoph Egger</p>
    <p>Evaluation and Deployment</p>
  </div>
  <div class="page">
    <p>Phoenix: Rebirth of a Cryptographic Password-Hardening Service Christoph Egger</p>
    <p>Evaluation</p>
    <p>In Comparison</p>
    <p>Current password hashing recommendations suggest up to one second single-core computing time</p>
    <p>Context We have all three (python based) implementations running on Amazon AWS single-core instances</p>
    <p>Questions</p>
    <p>How long does the user have to wait for password verification  Do we need many servers to support Password-Hardening  What are the practical implications</p>
  </div>
  <div class="page">
    <p>Phoenix: Rebirth of a Cryptographic Password-Hardening Service Christoph Egger</p>
    <p>Evaluation</p>
    <p>How long must the end user wait for to log in?</p>
    <p>8 ms! (+ round trip time)</p>
    <p>Frankfurt Ireland HTTP HTTPS HTTPS HTTP HTTPS HTTPS</p>
    <p>keep-alive keep-alive</p>
    <p>RTT (64 bytes) 1.2 23</p>
    <p>Pythia enroll/validate 17.93 25.28 16.01 62.03 113.79 38.56</p>
    <p>Schneider et al. enroll 9.80 22.86 8.14 53.72 111.40 30.89 Schneider et al. validate 12.30 25.65 10.73 56.32 115.32 33.49</p>
    <p>Phoenix enroll 5.43 17.93 3.89 50.30 107.25 26.52 Phoenix validate 9.74 22.78 8.06 53.92 113.02 30.73</p>
    <p>Latency in millisecond (ms)</p>
  </div>
  <div class="page">
    <p>Phoenix: Rebirth of a Cryptographic Password-Hardening Service Christoph Egger</p>
    <p>Evaluation</p>
    <p>How long must the end user wait for to log in?</p>
    <p>8 ms! (+ round trip time)</p>
    <p>Frankfurt Ireland HTTP HTTPS HTTPS HTTP HTTPS HTTPS</p>
    <p>keep-alive keep-alive</p>
    <p>RTT (64 bytes) 1.2 23</p>
    <p>Pythia enroll/validate 17.93 25.28 16.01 62.03 113.79 38.56</p>
    <p>Schneider et al. enroll 9.80 22.86 8.14 53.72 111.40 30.89 Schneider et al. validate 12.30 25.65 10.73 56.32 115.32 33.49</p>
    <p>Phoenix enroll 5.43 17.93 3.89 50.30 107.25 26.52 Phoenix validate 9.74 22.78 8.06 53.92 113.02 30.73</p>
    <p>Latency in millisecond (ms)</p>
  </div>
  <div class="page">
    <p>Phoenix: Rebirth of a Cryptographic Password-Hardening Service Christoph Egger</p>
    <p>Evaluation</p>
    <p>How many requests can the server entertain in one second?</p>
    <p>Over 370!</p>
    <p>HTTPS HTTPS keep-alive</p>
    <p>parameter 2, 607.16 807.50</p>
    <p>Pythia enroll/validate 128.50 125.75</p>
    <p>Schneider et al. enroll 380.37 278.51 Schneider et al. validate 221.75 183.92</p>
    <p>Phoenix enroll 1, 557.81 697.66 Phoenix validate 371.34 275.42</p>
    <p>Requests per second</p>
  </div>
  <div class="page">
    <p>Phoenix: Rebirth of a Cryptographic Password-Hardening Service Christoph Egger</p>
    <p>Evaluation</p>
    <p>How many requests can the server entertain in one second?</p>
    <p>Over 370!</p>
    <p>HTTPS HTTPS keep-alive</p>
    <p>parameter 2, 607.16 807.50</p>
    <p>Pythia enroll/validate 128.50 125.75</p>
    <p>Schneider et al. enroll 380.37 278.51 Schneider et al. validate 221.75 183.92</p>
    <p>Phoenix enroll 1, 557.81 697.66 Phoenix validate 371.34 275.42</p>
    <p>Requests per second</p>
  </div>
  <div class="page">
    <p>Phoenix: Rebirth of a Cryptographic Password-Hardening Service Christoph Egger</p>
    <p>Practical Deployment</p>
    <p>Hybrid Scheme</p>
    <p>Can we make use of memory-hard functions like Argon2 or scrypt?</p>
    <p>Use a memory-hard function instead of a traditional hash function for the PRF</p>
    <p>Even if the attacker has compromised both Client and Server, she has to use the memory-hard function for dictionary attacks</p>
    <p>Naor-Pinkas-Reingold</p>
    <p>sk = k PRF value</p>
  </div>
  <div class="page">
    <p>Phoenix: Rebirth of a Cryptographic Password-Hardening Service Christoph Egger</p>
    <p>Practical Deployment</p>
    <p>Hybrid Scheme</p>
    <p>Can we make use of memory-hard functions like Argon2 or scrypt?</p>
    <p>Use a memory-hard function instead of a traditional hash function for the PRF</p>
    <p>Even if the attacker has compromised both Client and Server, she has to use the memory-hard function for dictionary attacks</p>
    <p>Naor-Pinkas-Reingold</p>
    <p>sk = k PRF value H(x)k</p>
  </div>
  <div class="page">
    <p>Phoenix: Rebirth of a Cryptographic Password-Hardening Service Christoph Egger</p>
    <p>Practical Deployment</p>
    <p>Hybrid Scheme</p>
    <p>Can we make use of memory-hard functions like Argon2 or scrypt?</p>
    <p>Use a memory-hard function instead of a traditional hash function for the PRF</p>
    <p>Even if the attacker has compromised both Client and Server, she has to use the memory-hard function for dictionary attacks</p>
    <p>Naor-Pinkas-Reingold</p>
    <p>sk = k PRF value Sha256(x)k</p>
  </div>
  <div class="page">
    <p>Phoenix: Rebirth of a Cryptographic Password-Hardening Service Christoph Egger</p>
    <p>Practical Deployment</p>
    <p>Hybrid Scheme</p>
    <p>Can we make use of memory-hard functions like Argon2 or scrypt?</p>
    <p>Use a memory-hard function instead of a traditional hash function for the PRF</p>
    <p>Even if the attacker has compromised both Client and Server, she has to use the memory-hard function for dictionary attacks</p>
    <p>Naor-Pinkas-Reingold</p>
    <p>sk = k PRF value Argon2(x)k</p>
  </div>
  <div class="page">
    <p>Phoenix: Rebirth of a Cryptographic Password-Hardening Service Christoph Egger</p>
    <p>Practical Deployment</p>
    <p>Availability</p>
    <p>What happens when the Crypto Server is unavailable?</p>
    <p>Server only holds key-pair per Client and Rate-Limiting information  Several Crypto Servers can host the key-pair for availability but</p>
    <p>keys are then located on several machines</p>
  </div>
  <div class="page">
    <p>Phoenix: Rebirth of a Cryptographic Password-Hardening Service Christoph Egger</p>
    <p>Practical Deployment</p>
    <p>Availability</p>
    <p>What happens when the Crypto Server is unavailable?</p>
    <p>Server only holds key-pair per Client and Rate-Limiting information  Several Crypto Servers can host the key-pair for availability but</p>
    <p>keys are then located on several machines</p>
    <p>sk</p>
  </div>
  <div class="page">
    <p>Phoenix: Rebirth of a Cryptographic Password-Hardening Service Christoph Egger</p>
    <p>Practical Deployment</p>
    <p>Availability</p>
    <p>What happens when the Crypto Server is unavailable?</p>
    <p>Server only holds key-pair per Client and Rate-Limiting information  Several Crypto Servers can host the key-pair for availability but</p>
    <p>keys are then located on several machines</p>
    <p>sk</p>
    <p>sk</p>
  </div>
  <div class="page">
    <p>Phoenix: Rebirth of a Cryptographic Password-Hardening Service Christoph Egger</p>
    <p>Practical Deployment</p>
    <p>Availability</p>
    <p>What happens when the Crypto Server is unavailable?</p>
    <p>Server only holds key-pair per Client and Rate-Limiting information  Several Crypto Servers can host the key-pair for availability but</p>
    <p>keys are then located on several machines</p>
    <p>sk</p>
    <p>sk</p>
  </div>
  <div class="page">
    <p>Phoenix: Rebirth of a Cryptographic Password-Hardening Service Christoph Egger</p>
    <p>DDoS and Rate-Limiting</p>
    <p>There are two scenarios where Rate-Limiting might be triggered:</p>
    <p>Client has been compromised</p>
    <p>It is acceptable when users fail to log in</p>
    <p>Alice 123456</p>
  </div>
  <div class="page">
    <p>Phoenix: Rebirth of a Cryptographic Password-Hardening Service Christoph Egger</p>
    <p>DDoS and Rate-Limiting</p>
    <p>There are two scenarios where Rate-Limiting might be triggered:</p>
    <p>Client has been compromised</p>
    <p>It is acceptable when users fail to log in</p>
    <p>Alice 123456</p>
  </div>
  <div class="page">
    <p>Phoenix: Rebirth of a Cryptographic Password-Hardening Service Christoph Egger</p>
    <p>DDoS and Rate-Limiting</p>
    <p>There are two scenarios where Rate-Limiting might be triggered:</p>
    <p>External Attacker</p>
    <p>Honest users should only be slightly inconvenienced  Crypto Server has little information to distinguish users  Client is honest and can therefore help</p>
    <p>Alice 123456</p>
  </div>
  <div class="page">
    <p>Phoenix: Rebirth of a Cryptographic Password-Hardening Service Christoph Egger</p>
    <p>DDoS and Rate-Limiting</p>
    <p>There are two scenarios where Rate-Limiting might be triggered:</p>
    <p>External Attacker</p>
    <p>Honest users should only be slightly inconvenienced  Crypto Server has little information to distinguish users  Client is honest and can therefore help</p>
    <p>Alice 123456</p>
    <p>Alice password</p>
  </div>
  <div class="page">
    <p>Phoenix: Rebirth of a Cryptographic Password-Hardening Service Christoph Egger</p>
    <p>Rate-Limiting external clients</p>
    <p>Warn the Client about upcoming Rate-Limiting: once a soft limit is exceeded there is a limited number of additional tries available the client needs to make sure only the honest user gets to use these</p>
    <p>Client then takes extra measures, for example  Send an E-Mail / SMS / . . . with an one-time code to the user  Add Puzzles to the login screen</p>
  </div>
  <div class="page">
    <p>Phoenix: Rebirth of a Cryptographic Password-Hardening Service Christoph Egger</p>
    <p>Rate-Limiting external clients</p>
    <p>Alice password</p>
  </div>
  <div class="page">
    <p>Phoenix: Rebirth of a Cryptographic Password-Hardening Service Christoph Egger</p>
    <p>Rate-Limiting external clients</p>
    <p>Alice 000000</p>
  </div>
  <div class="page">
    <p>Phoenix: Rebirth of a Cryptographic Password-Hardening Service Christoph Egger</p>
    <p>Rate-Limiting external clients</p>
    <p>Alice querty</p>
  </div>
  <div class="page">
    <p>Phoenix: Rebirth of a Cryptographic Password-Hardening Service Christoph Egger</p>
    <p>Rate-Limiting external clients</p>
    <p>Alice asdfgh</p>
  </div>
  <div class="page">
    <p>Phoenix: Rebirth of a Cryptographic Password-Hardening Service Christoph Egger</p>
    <p>Rate-Limiting external clients</p>
    <p>S lo</p>
    <p>w d</p>
    <p>o w</p>
    <p>n !</p>
  </div>
  <div class="page">
    <p>Phoenix: Rebirth of a Cryptographic Password-Hardening Service Christoph Egger</p>
    <p>Rate-Limiting external clients</p>
    <p>SMS: Token=SECRET</p>
  </div>
  <div class="page">
    <p>Phoenix: Rebirth of a Cryptographic Password-Hardening Service Christoph Egger</p>
    <p>Rate-Limiting external clients</p>
    <p>Alice 098765</p>
  </div>
  <div class="page">
    <p>Phoenix: Rebirth of a Cryptographic Password-Hardening Service Christoph Egger</p>
    <p>Rate-Limiting external clients</p>
    <p>Missing Token</p>
  </div>
  <div class="page">
    <p>Phoenix: Rebirth of a Cryptographic Password-Hardening Service Christoph Egger</p>
    <p>Rate-Limiting external clients</p>
    <p>Alice password SECRET</p>
  </div>
  <div class="page">
    <p>Phoenix: Rebirth of a Cryptographic Password-Hardening Service Christoph Egger</p>
    <p>Upgrade Path</p>
    <p>Both, salted hash and Phoenix need a database field to store data  Algorithm-ID often already stored alongside the salt and hash  Upgrade users once they log in</p>
    <p>Username Password Data</p>
    <p>Alice 12:PeADRGbk:gaG4s[...]2BwM= . . . Bob 12:q79JVDSo:IIRBz[...]/9L4= . . . Carol 5:3V+ToDHL:FCozKw/gxP/9YZ+Pdr7pcg== . . .</p>
  </div>
  <div class="page">
    <p>Phoenix: Rebirth of a Cryptographic Password-Hardening Service Christoph Egger</p>
    <p>Upgrade Path</p>
    <p>Both, salted hash and Phoenix need a database field to store data  Algorithm-ID often already stored alongside the salt and hash  Upgrade users once they log in</p>
    <p>Username Password Data</p>
    <p>Alice 12:PeADRGbk:gaG4s[...]2BwM= . . . Bob 13:MxTfsL[...]phh+8i3DU== . . . Carol 5:3V+ToDHL:FCozKw/gxP/9YZ+Pdr7pcg== . . .</p>
  </div>
  <div class="page">
    <p>Phoenix: Rebirth of a Cryptographic Password-Hardening Service Christoph Egger</p>
    <p>Concluding Remark</p>
    <p>Summary</p>
    <p>Strengthened model of password-hardening  Formal treatment to key-rotation  Devastating attack to an existing scheme  Phoenix: The most efficient scheme to date</p>
    <p>On Going Projects</p>
    <p>Extended functionality  Derive key upon successful validation  Anonymize end user while retaining rate-limiting  Deployment by start-up company</p>
  </div>
  <div class="page">
    <p>Phoenix: Rebirth of a Cryptographic Password-Hardening Service Christoph Egger</p>
    <p>Concluding Remark</p>
    <p>Summary</p>
    <p>Strengthened model of password-hardening  Formal treatment to key-rotation  Devastating attack to an existing scheme  Phoenix: The most efficient scheme to date</p>
    <p>On Going Projects</p>
    <p>Extended functionality  Derive key upon successful validation  Anonymize end user while retaining rate-limiting  Deployment by start-up company</p>
  </div>
  <div class="page">
    <p>Phoenix: Rebirth of a Cryptographic Password-Hardening Service Christoph Egger</p>
    <p>Russell W. F. Lai FAU Nuremberg  Chinese U. Hong Kong</p>
    <p>Christoph Egger FAU Nuremberg</p>
    <p>Dominique Schroder FAU Nuremberg</p>
    <p>Sherman S. M. Chow Chinese U. Hong Kong</p>
  </div>
</Presentation>
