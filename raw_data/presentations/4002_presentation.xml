<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Multicast Routing in the Internet</p>
  </div>
  <div class="page">
    <p>Small groups  Teleconferencing (audio, video, shared whiteboard,</p>
    <p>text editor)  Multi-player games</p>
    <p>Medium size groups  Software distribution  Web-cache updates  Push-based systems  Server/service location</p>
    <p>Large groups  Broadcast audio/video</p>
    <p>Multicast Applications</p>
  </div>
  <div class="page">
    <p>Elimination of duplicate copy over some networks links</p>
    <p>Decreases load on sender</p>
    <p>Multicast Main Benefits</p>
    <p>Src Src</p>
  </div>
  <div class="page">
    <p>Single name/address maps to logically related set of destinations  Destination set = multicast group</p>
    <p>Members are the intended receivers  Senders may or may not be members  Hosts may belong to many groups  Hosts may send to many groups  Support:</p>
    <p>dynamic creation of groups  dynamic membership  dynamic sources</p>
    <p>Multicast Model</p>
  </div>
  <div class="page">
    <p>IP Multicast Concepts</p>
    <p>Host-to-router Protocol (IGMP): keep router up-to-date with group membership of</p>
    <p>entire LAN</p>
    <p>Multicast routing protocols (various): build distribution tree for multicast packets</p>
    <p>sender receivers</p>
    <p>On-Tree Link</p>
    <p>Branching router</p>
    <p>On-Tree router</p>
    <p>Designated Router</p>
  </div>
  <div class="page">
    <p>SPT vs. Steiner Tree</p>
    <p>R2</p>
    <p>R5</p>
    <p>R4</p>
    <p>R1</p>
    <p>S1</p>
    <p>R3</p>
    <p>R2</p>
    <p>R5</p>
    <p>R4</p>
    <p>R1</p>
    <p>S1</p>
    <p>R3</p>
    <p>SPT (Shortest Path Tree) Steiner</p>
    <p>Router Source Receiver</p>
    <p>S</p>
    <p>R</p>
  </div>
  <div class="page">
    <p>Shared vs. Source-Based Trees</p>
    <p>Router Source</p>
    <p>Receiver</p>
    <p>S</p>
    <p>R</p>
    <p>R</p>
    <p>R</p>
    <p>R</p>
    <p>S</p>
    <p>S</p>
    <p>R</p>
    <p>S</p>
    <p>R</p>
    <p>R</p>
    <p>R</p>
    <p>R</p>
    <p>S</p>
    <p>RP</p>
    <p>Source-Based Tree Shared Tree</p>
  </div>
  <div class="page">
    <p>Tree types</p>
    <p>Shortest Path Tree  Simplicity of construction method  Distributed solutions  High cost  Source Based Tree</p>
    <p>low delay, better load distribution,  Per-source state at routers</p>
    <p>Shared trees  Higher delay, traffic concentration,  Per-group state at routers</p>
    <p>Steiner trees  Lowest cost, highest delay  NP-complete,  Centralized solutions</p>
  </div>
  <div class="page">
    <p>Basic Routing Techniques</p>
    <p>Flood &amp; prune: DVMRP, PIM-DM  RSPT, Periodic Flooding, inter-domain routing</p>
    <p>difficulties,</p>
    <p>Link-state multicast protocols: MOSPF  SPT, High memory consumption, tree calculation in</p>
    <p>every node.</p>
    <p>Core based protocols: CBT, PIM-SM  Comply well with the basic model, Sub-optimal tree,</p>
    <p>inter-domain routing difficulties, traffic concentration, sensitivity to core selection method, RSPT,</p>
  </div>
  <div class="page">
    <p>Alternative Routing Techniques</p>
    <p>Explicit Multicast: Xcast, Bcast  Deployment, stateless, scalable, waste of data space,</p>
    <p>processing overhead, small groups only.  Application Level Multicast: ESM, NICE</p>
    <p>Deployment, stateless, no control burden on network, scalable, overlay construction difficulties, stress, suboptimal trees, stretch, high failure rate of host, cheating</p>
    <p>Branching Point Based: NHBH , REUNITE, HBH  SPT, low memory requirement, incremental</p>
    <p>deployment, using unicast forwarding, high availability, Superfluous lookups.</p>
  </div>
  <div class="page">
    <p>Two Main Problems of IP multicast</p>
    <p>State maintenance  Memory shortage when number of groups</p>
    <p>increase significantly  State invalidation due to routes changes</p>
    <p>Need for complex inter-domain routing and management (PIM-SM/MSDP/MBGP)</p>
  </div>
  <div class="page">
    <p>NBM</p>
  </div>
  <div class="page">
    <p>Branching Point Idea</p>
    <p>Node types:  Member nodes  Relay nodes  Branching points</p>
    <p>More than 80% of tree nodes are relay nodes.</p>
  </div>
  <div class="page">
    <p>Problems with current methods</p>
    <p>Unnecessary lookups for unicast and multicast packets</p>
  </div>
  <div class="page">
    <p>Problems with current methods</p>
    <p>REUNITE  Asymmetries may result in creation of duplicate packets  The departure of one receiver may change the route for others  Route changes invalidate MCT  Route change may disconnect a subset of receivers from the tree even</p>
    <p>though all nodes and links work properly  HBH</p>
    <p>All relay nodes between every two adjacent BPs must keep MFT  Duplicate packets creation duo to asymmetries  Route changes invalidate MCT</p>
    <p>SEM  The whole multicast tree must be constructed again if:</p>
    <p>a new member joins the multicast session  one of the existing members leaves the session</p>
    <p>The number of receivers is inherently limited due to packet size limit</p>
  </div>
  <div class="page">
    <p>NBM Principals</p>
    <p>NBM main ideas:  Build message contains IP addresses of:</p>
    <p>the new receiver  the next BP in the tree</p>
    <p>Children of a failed BP detect failure of their parent and repair it locally by asking their grandpa to find a new parent for them.</p>
  </div>
  <div class="page">
    <p>NBM Principals</p>
    <p>Seven Messages Type:  Join</p>
    <p>to announce receiver desire to join the tree  Leave</p>
    <p>to announce receiver desire to leave tree  Build</p>
    <p>to find associated BP of the new receiver  Replace</p>
    <p>To inform parent BP about creation of a new BP in the tree  Parent</p>
    <p>to inform a receiver or a BP about its parent and grandpa  Repair</p>
    <p>to locally repair the tree  Unlock</p>
    <p>To unlock parent BP</p>
  </div>
  <div class="page">
    <p>Tree construction: r1 join</p>
    <p>s</p>
    <p>B2</p>
    <p>rn2rn3 Join Build Parent Replace</p>
    <p>rn1</p>
    <p>B1</p>
    <p>rn4</p>
    <p>r3</p>
    <p>r1</p>
    <p>r2</p>
    <p>rn6</p>
    <p>rn5</p>
    <p>MFT</p>
    <p>r1</p>
  </div>
  <div class="page">
    <p>Tree construction: r2 join</p>
    <p>s</p>
    <p>B2</p>
    <p>rn2rn3 Join Build Parent Replace</p>
    <p>rn1</p>
    <p>B1</p>
    <p>rn4</p>
    <p>r3</p>
    <p>r1</p>
    <p>r2</p>
    <p>rn6</p>
    <p>rn5</p>
    <p>MFT</p>
    <p>r1 r2</p>
    <p>MFT</p>
    <p>r1 r2</p>
    <p>B1</p>
  </div>
  <div class="page">
    <p>Tree construction: r3 join</p>
    <p>s</p>
    <p>B2</p>
    <p>rn2rn3 Join Build Parent Replace</p>
    <p>rn1</p>
    <p>B1</p>
    <p>rn4</p>
    <p>r3</p>
    <p>r1</p>
    <p>r2</p>
    <p>rn6</p>
    <p>rn5</p>
    <p>MFT</p>
    <p>MFT</p>
    <p>r2 r1</p>
    <p>B1</p>
    <p>MFT</p>
    <p>r2 r3</p>
    <p>B2</p>
  </div>
  <div class="page">
    <p>Tree Maintenance</p>
    <p>Each BP refresh its children periodically.  Refresh message contains IP address of grandpa  Refresh rates of higher level BPs increase linearly</p>
    <p>If a BP or a receiver misses three consecutive refresh (parent) messages:  it sends a repair message toward the grandpa</p>
    <p>Grandpa deal with repair requests in the same way as source do with receiver join messages:  It sends a Build message toward the orphaned node  or adds it to its MFT</p>
  </div>
  <div class="page">
    <p>Tree Maintenance</p>
    <p>s</p>
    <p>B3</p>
    <p>rn2rn3</p>
    <p>Repiar Build Parent Replace</p>
    <p>rn1</p>
    <p>rn4</p>
    <p>r3</p>
    <p>r1</p>
    <p>r2</p>
    <p>B2</p>
    <p>rn5</p>
    <p>MFT</p>
    <p>MFT</p>
    <p>r1</p>
    <p>B1</p>
    <p>MFT</p>
    <p>r2 r3</p>
    <p>rn7 r4</p>
    <p>B2</p>
    <p>B1</p>
    <p>rn6 rn9</p>
    <p>rn8</p>
    <p>B3</p>
  </div>
  <div class="page">
    <p>Tree Maintenance</p>
    <p>s</p>
    <p>B3</p>
    <p>rn2rn3</p>
    <p>Join Build Parent Replace</p>
    <p>rn1</p>
    <p>rn4</p>
    <p>r3</p>
    <p>r1</p>
    <p>r2</p>
    <p>B2</p>
    <p>rn5</p>
    <p>MFT</p>
    <p>MFT</p>
    <p>r1</p>
    <p>B1</p>
    <p>MFT</p>
    <p>r2 r3</p>
    <p>rn7 r4</p>
    <p>B3</p>
    <p>B1</p>
    <p>rn6 rn9</p>
    <p>rn8</p>
    <p>MFT</p>
    <p>B2 r4</p>
    <p>rn6</p>
  </div>
  <div class="page">
    <p>Height estimation</p>
    <p>Dependent Receivers (DR)  A BP can estimate DR of a branch by counting the</p>
    <p>number of Build messages passing through it.  Height of the branch (in reduced tree) is</p>
    <p>approximately logXDR.  Each branch has a different refresh rate</p>
    <p>Refresh period = MTI/logXDR  Higher level BPs refresh their children more</p>
    <p>frequently.  NMTI=NMEM*X2/(X-1)2</p>
  </div>
  <div class="page">
    <p>Packet Forwarding in NBM</p>
    <p>Node B received a packet with unicast destination Hi</p>
  </div>
  <div class="page">
    <p>Simulation Setup</p>
    <p>myns: large-scale simulations  GT-ITM: graph generation</p>
    <p>Transit-Stub model (10100 nodes)  10 transit domains  Each transit domain has 10 nodes  Each transit domain has 5 stub domains  Each stub domain has 20 nodes</p>
    <p>Average node degree: 3.5</p>
    <p>50 simulation runs for each point</p>
  </div>
  <div class="page">
    <p>Simulation Metrics</p>
    <p>Number of required table lookups  Multicast Forwarding Gain (MFG): the ratio between the number</p>
    <p>of required lookups in OBP and NBM  Overall Forwarding Gain (OFG): OFG takes unicast traffic into</p>
    <p>consideration as well  Number of required MFT entries</p>
    <p>SPT: NBP+NRN+NMEM  RT: NBP+NMEM.  MFT Reduction Gain (MRG): the ratio between SPT and RT</p>
    <p>values.  Tree availability</p>
    <p>Tree Availability Gain (TAG): the ratio of non-leaf components of SPT to non-leaf components of RT or: NBP+NRN/NBP</p>
    <p>Stress</p>
  </div>
  <div class="page">
    <p>Table Lookups</p>
  </div>
  <div class="page">
    <p>Stress</p>
  </div>
  <div class="page">
    <p>Tree Characteristics</p>
  </div>
  <div class="page">
    <p>Branching Factor</p>
  </div>
  <div class="page">
    <p>TAG &amp; MRG</p>
  </div>
  <div class="page">
    <p>Control Overhead</p>
  </div>
  <div class="page">
    <p>Thanks</p>
  </div>
</Presentation>
