<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>http://comsys.rwth-aachen.de/</p>
    <p>Communication and! Distributed Systems</p>
    <p>SliceTime A platform for accurate and scalable network emulation</p>
    <p>NSDI 2011, Boston, MA</p>
    <p>Elias Weingrtner Florian Schmidt Hendrik vom Lehn Tobias Heer Klaus Wehrle</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>How to evaluate networking software at large scale?</p>
    <p>Network Testbeds Drawbacks: Scalability and Cost</p>
    <p>Network Simulation Models instead of software, no operating system</p>
    <p>Network Emulation Requires real-time capable simulations</p>
  </div>
  <div class="page">
    <p>Network Emulation</p>
    <p>Real-World clients  Execute communications software &amp; operating system</p>
    <p>Discrete event-based network simulator  Models interconnecting network  Examples: ns-2, OMNeT++  Also provides simulated hosts  scalability  Simulated environment: virtual mobility, radio propagation</p>
    <p>Real-World Clients</p>
    <p>Discrete event-based network simulation</p>
    <p>G</p>
    <p>Gateway Nodes</p>
  </div>
  <div class="page">
    <p>Network Emulation: Timing</p>
    <p>Different timing concepts  Network simulation: series of discrete events  Real-world clients: continuous wall-clock time</p>
    <p>Current common solution  Pin simulation events to wall-clock time  Wait between events</p>
    <p>Event 1 Event 2 Event 3 Event 4 Waiting</p>
    <p>Time Axis</p>
  </div>
  <div class="page">
    <p>Time Drifting Issue</p>
    <p>Problem: Many Simulations are not real-time capable  Computationally complex models  Many simulated nodes</p>
    <p>Simulation is overloaded  time drift  Incorrect Results</p>
    <p>Expiration of timers, different throughput, packet loss</p>
  </div>
  <div class="page">
    <p>How can time drifting be prevented to enable large-scale and complex network emulation scenarios? Two options: 1. Make the simulation fast enough</p>
  </div>
  <div class="page">
    <p>provision of virtual time</p>
    <p>Requirements</p>
  </div>
  <div class="page">
    <p>SliceTime: A Synchronized Network Emulation platform</p>
    <p>Synchronizer  Synchronization algorithm aligns execution of clients and simulation</p>
    <p>Virtual machines provide needed level of control  Control over run-time behavior  Full control over system context/timers  provision of virtual</p>
    <p>continuous time</p>
    <p>Virtual Machines</p>
    <p>Synchronizer</p>
  </div>
  <div class="page">
    <p>Synchronization Algorithm</p>
    <p>Goal: Limit time drifting  No assumptions about future run-time behavior  No snapshotting &amp; rollbacks</p>
    <p>Barrier Algorithm  Assign slices of run-time  Blocking at end of time slice  Clients notify synchronizer after they have finished</p>
    <p>Synchronization accuracy corresponds to time slice size</p>
  </div>
  <div class="page">
    <p>Hardware</p>
    <p>Xen Hypervisor</p>
    <p>Control Domain (dom0)</p>
    <p>Virtual Machine</p>
    <p>Virtual Machine</p>
    <p>SliceTime Implementation</p>
    <p>ns-3</p>
    <p>Data Communication Flow  Tunneled EtherNet Frames  802.11 Frame Tunnel</p>
    <p>Sync. Client (LKM)</p>
    <p>Sync. Event Scheduler</p>
    <p>Synchronizer</p>
    <p>User Space Application</p>
    <p>Modified sEDF Scheduler</p>
  </div>
  <div class="page">
    <p>Synchronizer</p>
    <p>Implements barrier synchronization algorithm  Assignment of time slices  Synchronizes multiple VMs with multiple simulations</p>
    <p>User-space application  Can run on VM, simulation slave or dedicated host  Lightweight signaling protocol</p>
    <p>VMs and simulations may join sync. dynamically  Allows VM bootstrapping out of synchronization</p>
    <p>Synchronizer</p>
  </div>
  <div class="page">
    <p>Implementation: Modified Xen environment</p>
    <p>Synchronization Client  Linux Kernel Module  save context switches</p>
    <p>Modified sEDF scheduler  Execute Xen domains for time slice duration</p>
    <p>Extra scheduling queue for synchronized domains  Self-correction mechanism to overcome misattribution of run-time</p>
    <p>Virtualizes time progression for synchronized domains  Calculates delta values for timers</p>
    <p>and clock sources</p>
    <p>Control Domain (dom0)</p>
    <p>Hardware</p>
    <p>Xen Hypervisor</p>
    <p>Virtual Machine</p>
    <p>Sync. Client (LKM)</p>
    <p>Modified sEDF Scheduler</p>
  </div>
  <div class="page">
    <p>Network Simulation</p>
    <p>Synchronized Event scheduler  Synchronizes any ns-3 simulation with synchronizer/VMs  Checks if next event in queue resides in current time slice</p>
    <p>Different ns-3 extensions  Tunnel protocol  data exchange with VMs  WiFi emulation extensions</p>
    <p>Provides VMs with wireless networking interface  Interface is intergrated with 802.11 model of ns-3 Sync. Event Scheduler</p>
    <p>ns-3</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>How accurate is SliceTime? How much overhead is caused by the synchronization? Is it applicable to complex network emulation scenarios?</p>
  </div>
  <div class="page">
    <p>Higher Sync. Accuracy</p>
    <p>Network Throughput</p>
    <p>How is network throughput affected by time slice size?</p>
    <p>Synchronizer</p>
    <p>Measurement: netperf TCP_STREAM benchmark Different levels of sync. accuracy</p>
    <p>Perceived bandwidth is invariant to time slice size</p>
  </div>
  <div class="page">
    <p>Evaluation: SliceTime Timing</p>
    <p>If no simulation delay is present  RTTs around ~ 0.2ms  Base delay: Time needed for data exchange between VM &amp; sync</p>
    <p>RTT distributions shifted by twice simulation delay</p>
    <p>Synchronizer</p>
    <p>Measurement: 1500 RTTs (ICMP Echo Replies) Simulated Link Delays between: 0,0  5ms Static time slice size of 0.1ms</p>
    <p>How accurate is the time integration of VMs and the simulation?</p>
  </div>
  <div class="page">
    <p>Evaluation: SliceTime Timing</p>
    <p>How do different time slice sizes influence the results?</p>
    <p>Synchronizer</p>
    <p>Measurement: 1500 RTTs (ICMP Echo Replies) Variation: Time Slice Sizes</p>
    <p>RTT distributions converge to base delay for smaller time slices (higher accuracies)</p>
    <p>H ig he r S yn c. A cc ur ac y</p>
  </div>
  <div class="page">
    <p>Higher Sync. Accuracy</p>
    <p>Le ss O ve rh ea d (b et te r)</p>
    <p>Synchronization Overhead</p>
    <p>Synchronization introduces additional run-time overhead  Less than 5% for time slices &gt; 0,5ms  Linear in the number of VMs</p>
    <p>How long does it take to execute 1s of virtual time?</p>
  </div>
  <div class="page">
    <p>Evaluation: Applicability</p>
    <p>Can SliceTime ease the evaluation of networking software?</p>
    <p>AODV Experiment (Gray et al, 2003)  33 laptops running AODV  40 people carrying them around</p>
    <p>(on an athletic field)  Random UDP traffic  Laptops log traffic + position (GPS)</p>
    <p>Logs available at CRAWDAD</p>
    <p>The SliceTime equivalent  33 Xen HVM domains / AODV  SliceTime 802.11 extensions  1 physical PC  Ns-3 mobility model based</p>
    <p>on GPS traces  Traffic generator</p>
  </div>
  <div class="page">
    <p>Reproducing the AODV experiment by Gray</p>
    <p>SliceTime produces results close to real-world measurements</p>
    <p>Always differences due to real-world/simulation disparity</p>
    <p>How do the results compare?</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>SliceTime allows network emulation scenarios with network simulations of any complexity</p>
    <p>SliceTime is accurate regarding timing and throughput  SliceTime is resource efficient</p>
    <p>Low overhead even for time slices less 1ms  Saves physical hardware resources in comparison to real test beds</p>
    <p>SliceTime is open source  Get it at http://www.comsys.rwth-aachen.de/projects/slicetime</p>
    <p>SliceTime extends the applicability of network emulation</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>CPU Performance Impact</p>
    <p>CoreMark score decreases for small time slices  Almost no impact for slices greater than 0.1ms  Explanation: More L2 cache misses</p>
    <p>H ig he r P er fo rm an ce</p>
    <p>Higher Sync. Accuracy</p>
    <p>How about the CPU performance? Doesnt the synchronization cause artifacts?</p>
  </div>
  <div class="page">
    <p>SliceTime Simulation scalability</p>
    <p>Setup: 15000 simulated nodes (60 stars with 250 nodes)  Exchange data blocks among each other using HTTP  Executes~15 times slower than real-time  1 VM attached to backbone</p>
    <p>HTTP perormance measured with curl  Expected result</p>
  </div>
  <div class="page">
    <p>How do round trip times compare to real world 802.11?</p>
    <p>Emulated RTTs are lower than real world measurements  ns-3 only approximations for link-level delays; no system delays</p>
  </div>
  <div class="page">
    <p>Real Operating System Discrete Event-based Simulation</p>
    <p>Device Driver-enabled Wireless Network Emulation</p>
    <p>Legacy Routing Layer</p>
    <p>Legacy Transport Layer</p>
    <p>(Legacy) Application</p>
    <p>MAC Layer</p>
    <p>PHY Model</p>
    <p>Gateway Node Emulated WiFi Device</p>
    <p>Device Driver</p>
    <p>Any application, transport or routing protocol implementation  No changes to code required</p>
    <p>Emulated Wifi Device: Mimics interface as provided by real hardware  Device driver: Exchange of data and status information with gateway node</p>
    <p>Feeds data from real systems into simulated network  Exchanges simulation properties (e.g. RSSI) with driver  Acknowledgements/low-level 802.11 operations remain in simulation domain</p>
  </div>
  <div class="page">
    <p>SliceTime WiFi extensions</p>
  </div>
  <div class="page">
    <p>Legacy Applications</p>
    <p>Wireshark for live monitoring of simulated WiFi networks  Inspection of low-level 802.11 properties using Radiotap headers</p>
  </div>
  <div class="page">
    <p>Legacy Applications</p>
    <p>Kismet being executed in simulated network  Allows the execution of unmodified legacy applications that make</p>
    <p>use of Linux Wireless Extensions</p>
  </div>
</Presentation>
