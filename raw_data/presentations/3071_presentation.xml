<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>RStream:Marrying Relational Algebra with Streaming for Efficient Graph Mining on A Single Machine</p>
    <p>Kai Wang, Zhiqiang Zuo, John Thorpe, Tien Quang Nguyen, Guoqing Harry Xu 1 1 12 3</p>
    <p>UCLA Nanjing University Facebook 1 2 3</p>
  </div>
  <div class="page">
    <p>Big Graph</p>
  </div>
  <div class="page">
    <p>Graph Datasets</p>
    <p>Big Graph</p>
  </div>
  <div class="page">
    <p>Graph Datasets</p>
    <p>GraphChi</p>
    <p>Graph Systems</p>
    <p>GridGraphBig Graph</p>
  </div>
  <div class="page">
    <p>Graph Analytical Problems</p>
  </div>
  <div class="page">
    <p>Graph Analytical Problems</p>
    <p>Graph Computation</p>
  </div>
  <div class="page">
    <p>Graph Analytical Problems</p>
    <p>Graph Computation</p>
    <p>PageRank</p>
    <p>Connected Component</p>
  </div>
  <div class="page">
    <p>Graph Analytical Problems</p>
    <p>Graph Computation</p>
    <p>PageRank</p>
    <p>Connected Component</p>
    <p>Iterative value computation</p>
  </div>
  <div class="page">
    <p>Graph Analytical Problems</p>
    <p>Graph Computation</p>
    <p>PageRank</p>
    <p>Connected Component</p>
    <p>Iterative value computation</p>
    <p>GraphChi</p>
    <p>Think Like a Vertex</p>
  </div>
  <div class="page">
    <p>Graph Analytical Problems</p>
    <p>Graph Computation</p>
    <p>Graph Mining</p>
    <p>PageRank</p>
    <p>Connected Component</p>
    <p>Iterative value computation</p>
    <p>GraphChi</p>
    <p>Think Like a Vertex</p>
  </div>
  <div class="page">
    <p>Graph Analytical Problems</p>
    <p>Graph Computation</p>
    <p>Graph Mining</p>
    <p>PageRank</p>
    <p>Connected Component</p>
    <p>Frequent Subgraph Mining</p>
    <p>Clique Finding</p>
    <p>Iterative value computation</p>
    <p>GraphChi</p>
    <p>Think Like a Vertex</p>
  </div>
  <div class="page">
    <p>Graph Analytical Problems</p>
    <p>Graph Computation</p>
    <p>Graph Mining</p>
    <p>PageRank</p>
    <p>Connected Component</p>
    <p>Frequent Subgraph Mining</p>
    <p>Clique Finding</p>
    <p>Iterative value computation</p>
    <p>Discover structural patterns</p>
    <p>GraphChi</p>
    <p>Think Like a Vertex</p>
  </div>
  <div class="page">
    <p>Graph Analytical Problems</p>
    <p>Graph Computation</p>
    <p>Graph Mining</p>
    <p>PageRank</p>
    <p>Connected Component</p>
    <p>Frequent Subgraph Mining</p>
    <p>Clique Finding</p>
    <p>Iterative value computation</p>
    <p>Discover structural patterns</p>
    <p>GraphChi</p>
    <p>?</p>
    <p>Think Like a Vertex</p>
  </div>
  <div class="page">
    <p>Existing Mining Systems</p>
    <p>Enumerate all possible subgraphs</p>
    <p>For each subgraph, check if it matches the pattern</p>
    <p>Pattern is application-specific (Clique finding, motif counting, frequent subgraph mining)</p>
  </div>
  <div class="page">
    <p>Existing Datalog Systems</p>
    <p>Relational predicates</p>
    <p>- TC(a, b, c) R(a, b), a &lt; b, R(b, c), b &lt; c, R(c, a)</p>
    <p>- count TC(a, b, c)</p>
    <p>Relation algebra enables composition of small structures into big structures</p>
  </div>
  <div class="page">
    <p>Challenges in Graph Mining</p>
    <p>Ex pon</p>
    <p>ent iall</p>
    <p>y</p>
    <p>size of subgraphs</p>
    <p># of</p>
    <p>s ub</p>
    <p>gr ap</p>
    <p>hs</p>
    <p># of subgraphs grows exponentially with the size of subgraphs</p>
    <p>Arabesque [CHC Teixeira et al. , SOSP15]</p>
  </div>
  <div class="page">
    <p>Problems with Distributed Mining Systems</p>
    <p>Suffer from large startup and communication overhead</p>
    <p>- Arabesque on 10-node cluster, 35s startup, 3s execution</p>
    <p>- DistGraph on 128-node cluster, 32,768GB memory</p>
    <p>Need enterprise clusters with large amounts of memory</p>
    <p>- some nodes out of memory, other nodes with memory usage &lt; 10%</p>
    <p>Poor load balancing due to dynamic working sets</p>
  </div>
  <div class="page">
    <p>Problems with Datalog Systems</p>
    <p>Programming model is not expressive enough for complex graph mining algorithms</p>
  </div>
  <div class="page">
    <p>Thoughts and Insight</p>
    <p>Not all users have access to enterprise cluster</p>
    <p>Many users are domain experts with limited background in hosting a cluster</p>
    <p>Distributed mining systems drawbacks: large startup, underutilized cpus, poor load balancing</p>
  </div>
  <div class="page">
    <p>Thoughts and Insight</p>
    <p>Not all users have access to enterprise cluster</p>
    <p>Many users are domain experts with limited background in hosting a cluster</p>
    <p>Distributed mining systems drawbacks: large startup, underutilized cpus, poor load balancing</p>
    <p>Increasingly large SSDs</p>
  </div>
  <div class="page">
    <p>Our Proposal: RStream A single machine, out-of-core graph mining system</p>
    <p>A simple and expressive API</p>
    <p>Gather-Apply-Scatter + Relational Algebra =&gt; GRAS</p>
    <p>An efficient runtime engine</p>
    <p>implements relational algebra with streaming</p>
  </div>
  <div class="page">
    <p>GAS</p>
    <p>Gather information from neighbor vertices</p>
  </div>
  <div class="page">
    <p>GAS</p>
    <p>Apply and update the vertex property</p>
  </div>
  <div class="page">
    <p>GAS</p>
    <p>Scatter information to neighbor vertices</p>
  </div>
  <div class="page">
    <p>GRAS</p>
  </div>
  <div class="page">
    <p>GRAS</p>
    <p>GAS</p>
    <p>supports iterative graph processing</p>
  </div>
  <div class="page">
    <p>GRAS</p>
    <p>GAS</p>
    <p>Relational Algebra</p>
    <p>supports iterative graph processing</p>
    <p>enables composition of structures</p>
  </div>
  <div class="page">
    <p>GRAS</p>
    <p>GAS</p>
    <p>Relational Algebra</p>
    <p>GRAS</p>
    <p>supports iterative graph processing</p>
    <p>enables composition of structures</p>
    <p>iteratively composition of structures</p>
  </div>
  <div class="page">
    <p>GRAS</p>
    <p>GAS</p>
    <p>Relational Algebra</p>
    <p>GRAS</p>
    <p>supports iterative graph processing</p>
    <p>enables composition of structures</p>
    <p>iteratively composition of structures</p>
  </div>
  <div class="page">
    <p>Edge Streaming</p>
    <p>Use streaming to reduce I/O costs</p>
    <p>Sequentially access (larger) datasets from disk, randomly access (smaller) datasets held in memory</p>
    <p>X-Stream [A Roy et al. , SOSP13]</p>
  </div>
  <div class="page">
    <p>Edge Streaming</p>
    <p>VID Value</p>
    <p>Src Dest</p>
    <p>Value Dest</p>
    <p>Vertex Table Edge Table Update Table</p>
    <p>A graph is partitioned into streaming partitions. Each streaming partition contains</p>
  </div>
  <div class="page">
    <p>Streaming for Scatter/Gather</p>
    <p>Update Table</p>
    <p>src dest</p>
    <p>Edge Table</p>
    <p>ID value</p>
    <p>Update Table</p>
    <p>Streaming Partition 1</p>
    <p>Streaming Partition 2</p>
    <p>Vertex Table</p>
    <p>Update Table value dest</p>
    <p>a 2 b 5</p>
    <p>a 2</p>
    <p>b 5</p>
    <p>Scatter</p>
    <p>Update Table value dest</p>
    <p>a 2</p>
    <p>Update Table</p>
    <p>ID value</p>
    <p>Update TableVertex Table</p>
    <p>Update Table value dest</p>
    <p>a+b 2</p>
    <p>Gather/Apply</p>
    <p>Streaming Load Shuffle</p>
    <p>Streaming Load</p>
  </div>
  <div class="page">
    <p>RStream API</p>
    <p>Scatter</p>
    <p>Relational</p>
    <p>Relational</p>
    <p>GatherApply</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>Scatter</p>
    <p>GatherApply</p>
    <p>Relational</p>
  </div>
  <div class="page">
    <p>Example:Triangle Counting</p>
    <p>Scatter R1 R2</p>
  </div>
  <div class="page">
    <p>Example:Triangle Counting</p>
    <p>edge table</p>
    <p>src dest 1 4 2 5</p>
    <p>Scatter</p>
    <p>Scatter R1 R2</p>
    <p>VID value 1 4 2 5</p>
    <p>vertex table</p>
  </div>
  <div class="page">
    <p>Example:Triangle Counting</p>
    <p>edge table</p>
    <p>update table1</p>
    <p>src dest 1 4 2 5</p>
    <p>c1 c2 1 4 2 5</p>
    <p>src dest 4 9 5 8</p>
    <p>edge table</p>
    <p>Scatter</p>
    <p>R1</p>
    <p>(a, b)  (b, c) (a, b, c)</p>
    <p>Scatter R1 R2</p>
    <p>VID value 1 4 2 5</p>
    <p>vertex table</p>
  </div>
  <div class="page">
    <p>Example:Triangle Counting</p>
    <p>edge table</p>
    <p>update table1</p>
    <p>src dest 1 4 2 5</p>
    <p>c1 c2 1 4 2 5</p>
    <p>src dest 4 9 5 8</p>
    <p>edge table</p>
    <p>c1 c2 c3 1 4 9 2 5 8</p>
    <p>src dest 9 1 8 2</p>
    <p>update table2 edge table</p>
    <p>Scatter</p>
    <p>R1</p>
    <p>(a, b)  (b, c) (a, b, c)</p>
    <p>(a, b, c)  (c, a) (a, b, c, a) R2</p>
    <p>Scatter R1 R2</p>
    <p>VID value 1 4 2 5</p>
    <p>vertex table</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>How to provide a general programming interface for graph mining algorithms?</p>
    <p>How to implement relational operators efficiently for graphs?</p>
  </div>
  <div class="page">
    <p>Load</p>
    <p>Streaming for Join Operator</p>
    <p>Update Table</p>
    <p>Src Dest</p>
    <p>Edge Table</p>
    <p>C1 C2</p>
    <p>Update Table</p>
    <p>C1 C2 C3</p>
    <p>Streaming Partition 1</p>
    <p>Streaming Partition 2</p>
    <p>Streaming Shuffle</p>
  </div>
  <div class="page">
    <p>Load</p>
    <p>Streaming for Join Operator</p>
    <p>Update Table</p>
    <p>Src Dest</p>
    <p>Edge Table</p>
    <p>C1 C2</p>
    <p>Update Table</p>
    <p>C1 C2 C3</p>
    <p>Streaming Partition 1</p>
    <p>Streaming Partition 2</p>
    <p>Locality-Aware Join</p>
    <p>Streaming Shuffle</p>
  </div>
  <div class="page">
    <p>Structural Information</p>
    <p>3 4 1</p>
    <p>4 1</p>
  </div>
  <div class="page">
    <p>Structural Information</p>
    <p>3 4 1</p>
    <p>4 1</p>
  </div>
  <div class="page">
    <p>Structural Information</p>
    <p>3 4 1</p>
    <p>4 1</p>
  </div>
  <div class="page">
    <p>Structural Information</p>
    <p>3 4 1</p>
    <p>4 1</p>
  </div>
  <div class="page">
    <p>Structural Information</p>
    <p>3 4 1</p>
    <p>4 1</p>
  </div>
  <div class="page">
    <p>Structural Information</p>
    <p>same update tuples</p>
    <p>different subgraphs</p>
    <p>3 4 1</p>
    <p>4 1</p>
  </div>
  <div class="page">
    <p>Structural Information</p>
    <p>same update tuples</p>
    <p>different subgraphs</p>
    <p>3 4 1</p>
    <p>4 1</p>
  </div>
  <div class="page">
    <p>Structural Information</p>
    <p>same update tuples</p>
    <p>different subgraphs</p>
    <p>3 4 1</p>
    <p>4 1</p>
    <p>Structural info is missing!</p>
  </div>
  <div class="page">
    <p>Missing Structural Information</p>
    <p>Identical tuples may represent different structures</p>
    <p>Different tuples may represent identical structures</p>
  </div>
  <div class="page">
    <p>Adding Structural Info  Encodes the history of joins in update tuples</p>
    <p>sub graph update tuples index 0 1</p>
    <p>8</p>
    <p>8</p>
    <p>index 0 1</p>
    <p>index 0 1 2 3</p>
  </div>
  <div class="page">
    <p>Is Join Enough?</p>
    <p>Join grows a subgraph from one of its vertices</p>
    <p>For Frequent Subgraph Mining, we need to explore all possibilities of existing subgraphs</p>
    <p>A different way of joining to grow a subgraph from all of its vertices</p>
  </div>
  <div class="page">
    <p>Join on All Columns</p>
    <p>Joins update table with edge table on every column</p>
  </div>
  <div class="page">
    <p>Join on All Columns</p>
    <p>Joins update table with edge table on every column</p>
  </div>
  <div class="page">
    <p>Join on All Columns</p>
    <p>Joins update table with edge table on every column</p>
  </div>
  <div class="page">
    <p>Join on All Columns</p>
    <p>Joins update table with edge table on every column</p>
  </div>
  <div class="page">
    <p>Join on All Columns</p>
    <p>Joins update table with edge table on every column</p>
  </div>
  <div class="page">
    <p>Automorphism and Isomorphism</p>
    <p>thread 1</p>
    <p>thread 2</p>
    <p>Different threads can generate identical(automorphic) update tuples</p>
    <p>Select and keep one, remove all the other duplicates</p>
    <p>Aggregation( )2,</p>
    <p>Different tuples may belong to same isomorphism class</p>
    <p>Aggregate to count number of each distinct shape</p>
    <p>Arabesque [CHC Teixeira et al. , SOSP15]</p>
  </div>
  <div class="page">
    <p>Evaluation  Platform</p>
    <p>- 10-node cluster, 5TB SSD</p>
    <p>- Each node: 2 Xeon(R) CPU E5-2640 v3 processors,32GB memory</p>
    <p>Application</p>
    <p>- Triangle Counting</p>
    <p>- Transitive Closure</p>
    <p>- N-Clique Finding</p>
    <p>- N-Motif Counting</p>
    <p>- Frequent Subgraph Mining</p>
    <p>Graphs #Edges #Vertices Citeseer 4,732 3,312</p>
    <p>Mico 1.1M 100K</p>
    <p>Patents 14M 2.7M</p>
    <p>LiverJournal 69M 4.8M</p>
    <p>Orkut 117M 3M</p>
    <p>UK-2005 936M 39.5M</p>
    <p>Input graphs</p>
  </div>
  <div class="page">
    <p>Comparisons with Mining Systems</p>
    <p>Citese er</p>
    <p>Mico Patent</p>
    <p>Triangle Counting</p>
    <p>RStream 0.04 15.8 6.7 Arabesque-10 38.1 43.1 114.9</p>
    <p>Arabesque-10 42.8 132 174.5</p>
    <p>RStream 0.06 351.7 383.7 Arabesque-10 35.6 5790.1 ScaleMine-10 1.2 802.6 DistGraph-10 0.4 -</p>
    <p>RStream outperforms Arabesque by 60.9x ScaleMine by 12.1x DistGraph by 7.2x</p>
  </div>
  <div class="page">
    <p>Comparisons with Mining Systems</p>
    <p>Rstream</p>
    <p>ScaleMine</p>
    <p>Arabesque</p>
    <p>FSM on patent graph</p>
    <p>subgraph size - support</p>
    <p>ru nn</p>
    <p>in g</p>
    <p>tim e(</p>
    <p>se co</p>
    <p>nd s)</p>
  </div>
  <div class="page">
    <p>Comparisons with Datalog Systems</p>
    <p>LiveJo urnal Orkut</p>
    <p>Triangle Counting</p>
    <p>RStream 87 827.4</p>
    <p>BigDatlog-10 94.8 1205.3</p>
    <p>BigDatalog-5 109.6 1850.3</p>
    <p>BigDatalog-1 567.3</p>
    <p>SociaLite 896.1 - 0 100</p>
    <p>BD-1 BD-5 BD-10 SL RS Ti</p>
    <p>m e(</p>
    <p>se co</p>
    <p>nd s)</p>
    <p>Transitive Closure</p>
  </div>
  <div class="page">
    <p>Size of Intermediate Data</p>
    <p>Phase #MB</p>
    <p>Mico</p>
    <p>Total 1.49TB</p>
  </div>
  <div class="page">
    <p>Size of Intermediate Data</p>
    <p>Phase #MB</p>
    <p>Mico</p>
    <p>Total 1.49TB</p>
  </div>
  <div class="page">
    <p>Conclusions RStream: A single machine, out-of-core graph mining system</p>
    <p>A simple and expressive API</p>
    <p>GAS + Relational Algebra =&gt; GRAS</p>
    <p>An efficient runtime engine</p>
    <p>implements relational algebra with tuple streaming</p>
    <p>https://github.com/rstream-system</p>
  </div>
</Presentation>
