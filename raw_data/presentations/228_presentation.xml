<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Adaptive XML Storage</p>
    <p>Adaptive XML Storage or The Importance Of Being Lazy</p>
    <p>Nihan ZMAN 26.10.2005 Instructor: Prof. Taflan Gndem</p>
  </div>
  <div class="page">
    <p>XML Data</p>
    <p>Building an XML store means finding solutions to the problems of representing, accessing, querying and updating XML data.</p>
    <p>Relational Database Systems rely on a fixedschema of records to represent and manage data.</p>
    <p>Being irregular in structure and content, XML Data does not seem to allow this approach.</p>
  </div>
  <div class="page">
    <p>This Paper...</p>
    <p>Describes  how the notion of database record has been extended</p>
    <p>and applied to XML storage  how the resulted store abstracts the structure of the</p>
    <p>XML data from the actual storage format  The contributions of the paper are:</p>
    <p>(a) the problem definition for XML stores  (b) an adaptive XML store and flexible index</p>
    <p>structures based on the existence of the XML store  (c) an evaluation of lazy/partial index</p>
  </div>
  <div class="page">
    <p>Overview</p>
    <p>Problem: The irregularity of the structure and usage of XML becomes a big obstacle in achieving good performance during accesing, querying and updating XML data.</p>
    <p>New challanges 1. Efficient query evaluation. 2. Efficient access and retrieval of XML data. 3. Maintainment of document order. 4. Optimizing XML updates.</p>
  </div>
  <div class="page">
    <p>Overview - 2</p>
    <p>Existing approaches  lack a uniform way of representing and thinking of</p>
    <p>XML.  focus on one aspect of XML storage and assume that</p>
    <p>the application will adapt to a particular usage pattern.</p>
    <p>function as all-or-nothing as regards indexing, where advantages gained by knowing all node information is lost in poor performance updates.</p>
    <p>So, one can not achieve everything at once, but should focus on what it can achieve at a given moment, in a given usage context.</p>
  </div>
  <div class="page">
    <p>Overview - 3</p>
    <p>This paper presents Ranges as a flat representation of desiderata for an XML store.</p>
    <p>Ranges are logical units similar to tuples in relational databases, whose size and existence is defined by the application usage patterns</p>
    <p>Ranges provides a lazy approach to storing, accessing and indexing XML data.</p>
    <p>Ranges offer enough flexibility to have application-dependent indexing units.</p>
  </div>
  <div class="page">
    <p>XML Store Desiderata - 1</p>
    <p>Requirements for an XML Store  Store and access any instances of the XQuery Data</p>
    <p>Model  Support for XML Update  Allow optimization of reads and/or updates  Indexes  Support different Node Identifer schemas (support for</p>
    <p>stable and comparable identifies)  Low storage overhead  Support PSVI (Post Schema Validation Infoset)</p>
  </div>
  <div class="page">
    <p>XML Store Desiderata - 2</p>
    <p>The XQuery Data Model supports a wide range of XML applications, either read-oriented or heavyupdate scenarios.</p>
    <p>PSVI avoids repeated evaluation of XML schema.  Low storage overhead incurs by minimizing the</p>
    <p>quantity of data actually stored.  Node identifiers are assigned, according to the</p>
    <p>XQueryModel to each node in the data instance.</p>
  </div>
  <div class="page">
    <p>XML Store Desiderata - 3</p>
    <p>The store should support read operations, entire data source or a single node</p>
    <p>The store should support update operations that specify a node and allow insertions of the data relative to this node (as previous siblings, next sibling, first child or last child of the node)</p>
  </div>
  <div class="page">
    <p>Optimizing Reads vs. Optimizing Updates</p>
    <p>Typical storage systems are faced with challenges of optimizing read operations or update operations required by the application</p>
    <p>A store that achieves both optimality is a utopia. (Ex: The structures required to support read operations, fast indexes, negatively influence the performance of update operations)</p>
    <p>In the paper, a middle approach is taken for optimizing one or the other depending on the application load.</p>
  </div>
  <div class="page">
    <p>XML Representation</p>
    <p>The requirements for XML store have been fulfilled in the particular case of an XML store.</p>
    <p>There are 3 important choices:  the XML representation  the definition of an arbitrarily granular unit Range  the flexible index structures based on the existence of</p>
    <p>Range</p>
  </div>
  <div class="page">
    <p>Choosing an XML Representation</p>
    <p>For representing or storing, XML Data is either shredded on a relational database, special index structures or the combination of the two</p>
    <p>There is usually a strong relationship between storing and representing XML on one side, indexing and querying it on the other side.</p>
    <p>Current approaches do not seperate them.  The adaptivity requirement in this papers</p>
    <p>approach provides both data independence and flexible granularity.</p>
  </div>
  <div class="page">
    <p>A Flexible Representation - 1</p>
    <p>To denote each part of the XQuery Data Model, Tokens, that are a materialization of enriched SAX (Simple API for XML) events, are used.</p>
    <p>Nodes in the XQuery Data Model, who must have an associated identifier, are also represented by a sequence of tokens</p>
  </div>
  <div class="page">
    <p>A Flexible Representation - 2</p>
    <p>This representation of the XQuery Data Model offers :  Complete representation of the XQuery Data Model  Independence of the API used in the actual application</p>
    <p>(flat model as opposed to tree-based or event-based representation)</p>
    <p>Allows flexible data granularity (Token is the most granular unit and tokens can be grouped in more specific units)</p>
    <p>Post schema validation info set (Token sequence can also be associated to the XML schema type derived after a schema validation)</p>
  </div>
  <div class="page">
    <p>Storage Model - 1</p>
    <p>The storage model of the XML data in the store presented consists of token sequences serialized in sequential blocks/pages in document order.</p>
    <p>Tokens offer a flat representation of the XML data, independent of the actual data model of the application that uses the store.</p>
  </div>
  <div class="page">
    <p>Storage Model - 2</p>
    <p>For example, each time data is inserted in the store:  the corresponding tokens are generated and stored in</p>
    <p>the corresponding positions in the storage.  blocks are allocated accordingly.  Node Ids, requested in the XQuery DataModel are</p>
    <p>generated.</p>
  </div>
  <div class="page">
    <p>Implementing Database Records for XML</p>
    <p>The interface to the store defines read, insert and update operations.</p>
    <p>All operations are defined relative to a target node identifier. So, it is nodes corresponding to these identifiers that need to be quickly located.</p>
    <p>Existing approaches to XML data storage take the options of full data indexing in order to optimize queries and accelerate access to specific parts of XML data.</p>
    <p>In this way, updates are too expensive.</p>
  </div>
  <div class="page">
    <p>Discarding the Option of A Full Index</p>
    <p>The advantage of a full index is the ability to quickly locate nodes.</p>
    <p>On the other hand, it has main disadvantages:  inserts and updates are more expensive  storage requirements are very high  the index grows in size for data-intensive applications</p>
    <p>and the vast majority of the entries will not even be used.</p>
  </div>
  <div class="page">
    <p>The Notion of Range</p>
    <p>Range is a sequence of tokens.  Each sequence of tokens can constitute a range.  In presented model, a Range is implemented as a</p>
    <p>sequence of variable-sized tokens, where in relational database systems, a Record is implemented as a sequence of variable-sized fields.</p>
    <p>Range is defined by the usage pattern of the application, not by a fixed schema.</p>
    <p>An order between Ranges is needed to preserve document order of tokens.</p>
  </div>
  <div class="page">
    <p>The Range Index (Coarse-Grained Index)</p>
    <p>The Range index is for locating the range corresponding to an ID specified in an update operation.</p>
    <p>Ranges represents insert units where full index would have contained all IDs individually.</p>
    <p>Range index contains less entries, it refers to an interval of identifiers.</p>
    <p>Node identifiers need not to be stored together with the tokens they refer to. The advantage is better space utilization (low storage overhead).</p>
  </div>
  <div class="page">
    <p>The Storage Model</p>
    <p>Ranges are the logical storage units.  Storage level comprises chained blocks, which, at</p>
    <p>their turn, contain ordered ranges.  Document order is preserved through the chaining</p>
    <p>of blocks and through the ordering of ranges inside blocks.</p>
  </div>
  <div class="page">
    <p>Functionality of the Range Index A Simple Usage Scenario - 1</p>
    <p>There is an initially empty Data Source.  The operations performed:</p>
    <p>(1) insert 2 sibling Nodes (contains 100 nodes in total)  (2) insert a child (40 nodes) as the last child of the node</p>
    <p>which is identified by 60: insertIntoLast(60,&lt;&lt;new data&gt;&gt;)</p>
    <p>Tokens are created for the inserted data, and they are stored sequentially on the pages.</p>
    <p>Node IDs are created, but only the ranges are inserted in the Range Index.</p>
  </div>
  <div class="page">
    <p>Functionality of the Range Index A Simple Usage Scenario - 2</p>
    <p>Effects of each step on the Range Index:  (1) Allocate 100 identifiers for the inserted nodes, create</p>
    <p>range 1 with Ids 1-100 and store it in Block 1.  (2) insertion of the child:  (2a) Locate second node using the Range Index (id is in</p>
    <p>range 1)  (2b) Locate range and offset of the end token of the</p>
    <p>node with the Id 60  (2c) Split range number 1 in two (create range 3)  (2d) Create a new range corresponding to the inserted</p>
    <p>data (2) and allocate 40 unique identifiers.</p>
  </div>
  <div class="page">
    <p>Functionality of the Range Index A Simple Usage Scenario - 3</p>
    <p>(2e) Store the new range (Block 1) and insert the split range in the storage (Blocks 2)</p>
  </div>
  <div class="page">
    <p>The Lazy/Partial Index - 1</p>
    <p>The notion of Range and Range Index allows to optimize update operations (fewer entries are inserted to the range index).</p>
    <p>By the way, reads become more expensive. Nodes can not be accessed directly and additional lookups need to be performed.</p>
    <p>The solution is the notion of Partial Index: using the advantages of the full index, but only when needed.</p>
  </div>
  <div class="page">
    <p>The Lazy/Partial Index - 2</p>
    <p>The result of lookup operations, performed during updates, is inserted in the partial index, either:  the range of a token  the offset of a token inside its range  the location (range, offset) of the end token of the node</p>
    <p>inside the range  the position of the end token of the node inside.</p>
    <p>The partial index stores information on the individual nodes: their exact ranges and offset inside the range.</p>
  </div>
  <div class="page">
    <p>The Lazy/Partial Index - 3</p>
    <p>The partial index is actually a combination between a real index and a cache.</p>
    <p>The combination of the Range Index and the Partial Index achieves the goal of being adaptive, flexible and lazy in XML world</p>
    <p>The aim is not to index everything, but only if and when needed.</p>
  </div>
  <div class="page">
    <p>The Lazy/Partial Index - 4</p>
    <p>Referring to the previous example:  (1) Considered empty at the beginning, inserting on</p>
    <p>empty data source does not create entries in partial index  (2) Inserting a new node  (2a) Locating node with Id 60 using the range index in</p>
    <p>range 1: a new entry is inserted in the partial index to indicate the range</p>
    <p>(2b) Locating the end token of the id 60,means that after the insert, the location of the end token is the range 3.</p>
  </div>
  <div class="page">
    <p>Orthogonality of ID Schemes</p>
    <p>Indexing XML data relies heavily on the fact that nodes in an XML document are assigned an identifier  update operations are expressed based on these</p>
    <p>identifiers  indexes can be build on top of them.</p>
    <p>Proposed model provides a separation from the API of the application:  a range can span over several nodes, or over parts of a</p>
    <p>node (represented as a sequence of tokens)  Ids of nodes are, orthogonal to the way of indexing.</p>
  </div>
  <div class="page">
    <p>Low Storage Overhead - 1</p>
    <p>The Range Index is a coarse-grained index (lower storage overhead over full index)</p>
    <p>The Range Index uses properties of Ids for locating the range of a node with the given id</p>
    <p>{ID} is the set of Node identifiers in the store  {R} is the set of all ranges in the Range Index</p>
  </div>
  <div class="page">
    <p>Low Storage Overhead - 2</p>
    <p>A Range is defined as a sequence of tokens in document order. By only storing the Identifiers of the first node inside a range, further decrease storage overhead can be obtained.</p>
    <p>The Id schemes with this property generate the Id of the next token ID using a simple factory function:</p>
  </div>
  <div class="page">
    <p>Stable and Comparable Identifiers</p>
    <p>Stable identifiers are the way to build indexes on the store:  external and based on logical node identifiers.</p>
    <p>Stable identifiers can be obtained by assigning unique integer number to nodes at insert times</p>
    <p>This approach allows to define actual ranges of Ids  Ids inside ranges are comparable Ids inside ranges  A semi-stable document order at read time can be</p>
    <p>obtained (tokens are stored in document order and read sequentially)</p>
    <p>The combination of order between ranges and order of ranges in the storage, can also be put in connection to partially-stable identifier schemes.</p>
  </div>
  <div class="page">
    <p>Experiments</p>
    <p>Experimental Setup:  Based-on relational database,  Java and JDBC used  Pentium 4 2,8Ghz/512MB RAM, running SuSe Linux9.0,</p>
    <p>and using a MySQL</p>
  </div>
  <div class="page">
    <p>Predictions</p>
    <p>The identifier scheme associates unique integer values to each node, at insert time.</p>
    <p>Only ranges become entries in the index.  A memory-based partial index adds information</p>
    <p>on the location of tokens inside ranges (begin and end token)</p>
  </div>
  <div class="page">
    <p>Parameters</p>
    <p>The parameters that influence the results of benchmark:  size of the ranges  number of the ranges</p>
    <p>A course-grained index means low update overhead but large overhead at read and lookup.</p>
    <p>An index containing many entries leads to performance decrease at insert time.</p>
    <p>The partial index improves reads especially in the case of more coarse-granular range sizes, as it builds entries lazily (cache-like)</p>
  </div>
  <div class="page">
    <p>Micro Benchmarks</p>
    <p>inserts,  sequential reads  random reads of small pieces of data in the</p>
    <p>presence of a  full index,  range index,  respectively the combination of range index +</p>
    <p>partial index  The metric is kilobytes/second (read speed,</p>
    <p>relative to data size).</p>
  </div>
  <div class="page">
    <p>Experimental results: Lazy indexing in XML storage</p>
  </div>
  <div class="page">
    <p>Results</p>
    <p>The results reflect the expected behavior  The Range Index clearly brings advantages in what</p>
    <p>regards update speed: less entries are entered the index</p>
    <p>As the number of entries increases,  the advantages diminish (many,granular entries)</p>
    <p>The Partial Index helps to achieve cheaper reads and lookups  (especially when the range index is coarse)</p>
    <p>More optimizations of the read/update/storage overhead is considered.</p>
  </div>
  <div class="page">
    <p>Related Work</p>
    <p>Abstraction of tree model of the XML data is used to define partial indexes.</p>
    <p>Usage of variable-size range and varying granularity are not entirely contained.</p>
    <p>Logic identifiers have not been studied</p>
  </div>
  <div class="page">
    <p>Conclusions And Future Work</p>
    <p>The paper describes a data representation and model of an XML store, inspired by the notion of records in relational databases.</p>
  </div>
  <div class="page">
    <p>Advantages</p>
    <p>Independence of proposed data format from the API used by the XML application</p>
    <p>The possibility to adapt to the application pattern  The store achieves this by</p>
    <p>lazily creating its storage and index structures optimizes for reads or updates according to how the application focuses on one or the other.</p>
    <p>the process is transparent to the application.</p>
  </div>
  <div class="page">
    <p>Aspects To Explore</p>
    <p>The effect of functionality of the partial index  Structural properties of the actual elements of</p>
    <p>the XQuery DataModel  Concurrency  Non-relational world</p>
    <p>the principles of storage already defined in the context by relational database systems,</p>
    <p>The issue that differs from the relational world is the necessity to always maintain the order between ranges</p>
  </div>
</Presentation>
