<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>The Case for the Vector Operating System</p>
    <p>Vijay Vasudevan, David G. Andersen, Michael Kaminsky</p>
    <p>Carnegie Mellon University and Intel Labs</p>
  </div>
  <div class="page">
    <p>A webserver</p>
    <p>accept(...) stat(...) open(f1) fcntl(...) fcntl(...) ...</p>
    <p>Req1</p>
    <p>accept(...) stat(f2) open(f2) fcntl(...) fcntl(...) ...</p>
    <p>Req2</p>
  </div>
  <div class="page">
    <p>A webserver</p>
    <p>accept(...) stat(...) open(f1) fcntl(...) fcntl(...) ...</p>
    <p>Req1</p>
    <p>accept(...) stat(f2) open(f2) fcntl(...) fcntl(...) ...</p>
    <p>Req2</p>
  </div>
  <div class="page">
    <p>accept(...) stat(...) open(f1) fcntl(...) fcntl(...) ...</p>
    <p>Req1</p>
    <p>accept(...) stat(f2) open(f2) fcntl(...) fcntl(...) ...</p>
    <p>Req2</p>
    <p>accept(...) stat(f3) open(f3) fcntl(...) fcntl(...) ...</p>
    <p>Req3</p>
    <p>A scalable, parallel webserver</p>
  </div>
  <div class="page">
    <p>Req1 Req3 .........</p>
    <p>Req2</p>
    <p>accept(...) stat(f3) open(f3)</p>
    <p>accept(...) stat(f2) open(f2)</p>
    <p>accept(...) stat(f1) open(f1)</p>
    <p>A scalable, parallel webserver</p>
  </div>
  <div class="page">
    <p>Req1 Req3 .........</p>
    <p>Req2</p>
    <p>accept(...) stat(f3) open(f3)</p>
    <p>accept(...) stat(f2) open(f2)</p>
    <p>accept(...) stat(f1) open(f1)</p>
    <p>A scalable, parallel webserver</p>
  </div>
  <div class="page">
    <p>Req1 Req3 .........</p>
    <p>Req2</p>
    <p>accept(...) stat(f3) open(f3)</p>
    <p>accept(...) stat(f2) open(f2)</p>
    <p>accept(...) stat(f1) open(f1)</p>
    <p>A scalable, parallel webserver</p>
  </div>
  <div class="page">
    <p>accept(...) stat(f3) open(f3)</p>
    <p>accept(...) stat(f2) open(f2)</p>
    <p>accept(...) stat(f1) open(f1)</p>
    <p>vec_</p>
    <p>A scalable, parallel webserver</p>
  </div>
  <div class="page">
    <p>accept(...) stat(f3)</p>
    <p>open(f3)</p>
    <p>accept(...) stat(f2) open(f2)</p>
    <p>accept(...) stat(f1)</p>
    <p>open(f1)</p>
    <p>vec_ vec_stat([f1,f2,f3])</p>
    <p>A scalable, parallel webserver</p>
  </div>
  <div class="page">
    <p>accept(...) stat(f3)</p>
    <p>open(f3)</p>
    <p>accept(...) stat(f2) open(f2)</p>
    <p>accept(...) stat(f1)</p>
    <p>{ context switch alloc() copy(f1) path_resolve(f1) acl_check(f1) h = hash(f1) lookup(h) read(f1) dealloc() context switch }</p>
    <p>open(f1)</p>
    <p>vec_ vec_stat([f1,f2,f3])</p>
    <p>A scalable, parallel webserver</p>
  </div>
  <div class="page">
    <p>{ context switch alloc() copy(f3) path_resolve(f3) acl_check(f3) h = hash(f3) lookup(h) read(f3) dealloc() context switch }</p>
    <p>{ context switch alloc() copy(f2) path_resolve(f2) acl_check(f2) h = hash(f2) lookup(h) read(f2) dealloc() context switch }</p>
    <p>accept(...) stat(f3)</p>
    <p>open(f3)</p>
    <p>accept(...) stat(f2) open(f2)</p>
    <p>accept(...) stat(f1)</p>
    <p>{ context switch alloc() copy(f1) path_resolve(f1) acl_check(f1) h = hash(f1) lookup(h) read(f1) dealloc() context switch }</p>
    <p>open(f1)</p>
    <p>vec_ vec_stat([f1,f2,f3])</p>
    <p>A scalable, parallel webserver</p>
  </div>
  <div class="page">
    <p>context switch vec_alloc() vec_copy([f1,f2,f3]) vec_path_resolve([f1,f2,f3]) acl_check([f1,f2,f3]) h = hash([f1,f2,f3]) lookup(h) vec_read([f1,f2,f3]) dealloc() context switch</p>
    <p>accept(...) stat(f3) open(f3)</p>
    <p>accept(...) stat(f2) open(f2)</p>
    <p>accept(...) stat(f1) open(f1)</p>
    <p>vec_ vec_stat([f1,f2,f3]) vec_open([f1,f2,f3]) {</p>
    <p>A scalable, parallel webserver</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>context switch vec_alloc() vec_copy([f1,f2,f3]) vec_path_resolve([f1,f2,f3]) acl_check([f1,f2,f3]) h = hash([f1,f2,f3]) lookup(h) vec_read([f1,f2,f3]) dealloc() context switch</p>
    <p>accept(...) stat([f1,f2,f3]) open(f2)</p>
    <p>vec_ vec_ vec_open([f1,f2,f3]) {</p>
    <p>A vectored webserver</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>context switch vec_alloc() vec_copy([f1,f2,f3]) vec_path_resolve([f1,f2,f3]) acl_check([f1,f2,f3]) h = hash([f1,f2,f3]) lookup(h) vec_read([f1,f2,f3]) dealloc() context switch</p>
    <p>accept(...) stat([f1,f2,f3]) open(f2)</p>
    <p>vec_ vec_ vec_open([f1,f2,f3]) {</p>
    <p>Eliminate N-1 context switches</p>
    <p>A vectored webserver</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>context switch vec_alloc() vec_copy([f1,f2,f3]) vec_path_resolve([f1,f2,f3]) acl_check([f1,f2,f3]) h = hash([f1,f2,f3]) lookup(h) vec_read([f1,f2,f3]) dealloc() context switch</p>
    <p>accept(...) stat([f1,f2,f3]) open(f2)</p>
    <p>vec_ vec_ vec_open([f1,f2,f3]) {</p>
    <p>A vectored webserver</p>
    <p>Reduce path resolutions</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>context switch vec_alloc() vec_copy([f1,f2,f3]) vec_path_resolve([f1,f2,f3]) acl_check([f1,f2,f3]) h = hash([f1,f2,f3]) lookup(h) vec_read([f1,f2,f3]) dealloc() context switch</p>
    <p>accept(...) stat([f1,f2,f3]) open(f2)</p>
    <p>vec_ vec_ vec_open([f1,f2,f3]) {</p>
    <p>A vectored webserver</p>
    <p>Use SSE to hash !lenames</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>context switch vec_alloc() vec_copy([f1,f2,f3]) vec_path_resolve([f1,f2,f3]) acl_check([f1,f2,f3]) h = hash([f1,f2,f3]) lookup(h) vec_read([f1,f2,f3]) dealloc() context switch</p>
    <p>accept(...) stat([f1,f2,f3]) open(f2)</p>
    <p>vec_ vec_ vec_open([f1,f2,f3]) {</p>
    <p>A vectored webserver</p>
    <p>Search dentry list once</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>VOS core ideas Known: Batching syscalls improves throughput  Amortizes per-execution cost  Applies regardless of similarity of batched work</p>
    <p>SIMD vectorization improves efficiency  Eliminates redundant instructions in || execution  Frees up resources to allow more work to be done  Enables algorithmic optimizations</p>
  </div>
  <div class="page">
    <p>VOS core ideas Known: Batching syscalls improves throughput  Amortizes per-execution cost  Applies regardless of similarity of batched work</p>
    <p>SIMD vectorization improves efficiency  Eliminates redundant instructions in || execution  Frees up resources to allow more work to be done  Enables algorithmic optimizations</p>
    <p>One concrete example: mprotect One difficult challenge: managing divergence</p>
    <p>One possible implementation path</p>
  </div>
  <div class="page">
    <p>Speeding up memory protection</p>
    <p>mprotect vec_mprotect</p>
    <p>page protections sec</p>
    <p>Data courtesy of Iulian Moraru</p>
  </div>
  <div class="page">
    <p>Speeding up memory protection</p>
    <p>vec_mprotect techniques:</p>
    <p>mprotect vec_mprotect</p>
    <p>page protections sec</p>
    <p>Data courtesy of Iulian Moraru</p>
  </div>
  <div class="page">
    <p>Speeding up memory protection</p>
    <p>vec_mprotect techniques:  Amortize context switches (async batching)</p>
    <p>mprotect vec_mprotect</p>
    <p>page protections sec</p>
    <p>Data courtesy of Iulian Moraru</p>
  </div>
  <div class="page">
    <p>Speeding up memory protection</p>
    <p>vec_mprotect techniques:  Amortize context switches (async batching)  Optimized data structure allocation (sorting)</p>
    <p>mprotect vec_mprotect</p>
    <p>page protections sec</p>
    <p>Data courtesy of Iulian Moraru</p>
  </div>
  <div class="page">
    <p>Speeding up memory protection</p>
    <p>vec_mprotect techniques:  Amortize context switches (async batching)  Optimized data structure allocation (sorting)  Eliminate TLB !ush per individual call</p>
    <p>mprotect vec_mprotect</p>
    <p>page protections sec</p>
    <p>Data courtesy of Iulian Moraru</p>
  </div>
  <div class="page">
    <p>Speeding up memory protection</p>
    <p>vec_mprotect techniques:  Amortize context switches (async batching)  Optimized data structure allocation (sorting)  Eliminate TLB !ush per individual call</p>
    <p>mprotect vec_mprotect 0</p>
    <p>page protections sec 3x performance</p>
    <p>improvement</p>
    <p>Data courtesy of Iulian Moraru</p>
  </div>
  <div class="page">
    <p>Speeding up memory protection</p>
    <p>vec_mprotect techniques:  Amortize context switches (async batching)  Optimized data structure allocation (sorting)  Eliminate TLB !ush per individual call</p>
    <p>mprotect vec_mprotect 0</p>
    <p>page protections sec 3x performance</p>
    <p>improvement</p>
    <p>Data courtesy of Iulian Moraru</p>
  </div>
  <div class="page">
    <p>One difficult challenge</p>
    <p>open(f2)vec_open([f1,f2,f3])</p>
    <p>Handling convergence and divergence</p>
    <p>vec_path_resolve([f2,f3]) acl_check([f2,f3])</p>
    <p>lookup(h[1..2]) read([f2,f3])</p>
    <p>context switch vec_alloc() vec_copy([f1,f2,f3])</p>
    <p>vec_path_resolve([f1]) acl_check([f1])</p>
    <p>h = hash([f1,f2,f3])</p>
    <p>lookup(h[0]) read([f1])</p>
    <p>dealloc() context switch</p>
  </div>
  <div class="page">
    <p>One difficult challenge</p>
    <p>open(f2)vec_open([f1,f2,f3])</p>
    <p>fork() ?</p>
    <p>join() ?</p>
    <p>Handling convergence and divergence</p>
    <p>vec_path_resolve([f2,f3]) acl_check([f2,f3])</p>
    <p>lookup(h[1..2]) read([f2,f3])</p>
    <p>context switch vec_alloc() vec_copy([f1,f2,f3])</p>
    <p>vec_path_resolve([f1]) acl_check([f1])</p>
    <p>h = hash([f1,f2,f3])</p>
    <p>lookup(h[0]) read([f1])</p>
    <p>dealloc() context switch</p>
  </div>
  <div class="page">
    <p>One difficult challenge</p>
    <p>open(f2)vec_open([f1,f2,f3])</p>
    <p>fork() ?</p>
    <p>join() ?</p>
    <p>messages?</p>
    <p>Handling convergence and divergence</p>
    <p>vec_path_resolve([f2,f3]) acl_check([f2,f3])</p>
    <p>lookup(h[1..2]) read([f2,f3])</p>
    <p>context switch vec_alloc() vec_copy([f1,f2,f3])</p>
    <p>vec_path_resolve([f1]) acl_check([f1])</p>
    <p>h = hash([f1,f2,f3])</p>
    <p>lookup(h[0]) read([f1])</p>
    <p>dealloc() context switch</p>
  </div>
  <div class="page">
    <p>One difficult challenge</p>
    <p>open(f2)vec_open([f1,f2,f3])</p>
    <p>fork() ?</p>
    <p>join() ?</p>
    <p>messages?</p>
    <p>Handling convergence and divergence</p>
    <p>Is this worth joining for?</p>
    <p>vec_path_resolve([f2,f3]) acl_check([f2,f3])</p>
    <p>lookup(h[1..2]) read([f2,f3])</p>
    <p>context switch vec_alloc() vec_copy([f1,f2,f3])</p>
    <p>vec_path_resolve([f1]) acl_check([f1])</p>
    <p>h = hash([f1,f2,f3])</p>
    <p>lookup(h[0]) read([f1])</p>
    <p>dealloc() context switch</p>
  </div>
  <div class="page">
    <p>OS as staged event system Ideal interface for vectorization  Use message passing as underlying primitive</p>
    <p>accept</p>
    <p>on packet</p>
    <p>process</p>
    <p>is_new_connection</p>
  </div>
  <div class="page">
    <p>OS as staged event system Ideal interface for vectorization  Use message passing as underlying primitive</p>
    <p>accept</p>
    <p>on packet</p>
    <p>process</p>
    <p>is_new_connection</p>
    <p>Programming interface? Event abstraction is nice</p>
    <p>Who vectorizes? Static analysis, compiler OS or App developer?</p>
    <p>Efficiency vs. Latency</p>
  </div>
  <div class="page">
    <p>Summary of VOS</p>
    <p>Vectors fundamentally improve efficiency by  Collecting similar requests  Eliminating redundant work  Remaining parallel when code diverges</p>
    <p>Challenges  Programming vector abstractions  Identifying what to coalesce and how to diverge</p>
  </div>
  <div class="page">
    <p>Summary of VOS</p>
    <p>Vectors fundamentally improve efficiency by  Collecting similar requests  Eliminating redundant work  Remaining parallel when code diverges</p>
    <p>Challenges  Programming vector abstractions  Identifying what to coalesce and how to diverge</p>
    <p>Dont let embarrassingly parallel become embarrassingly wasteful</p>
  </div>
  <div class="page">
    <p>Related ideas</p>
    <p>Community Idea Reason</p>
    <p>HPC Multicollective I/O</p>
    <p>readx/writex group open</p>
    <p>I/O coalescing Reduced synch</p>
    <p>Databases Work Sharing</p>
    <p>Query Optimization Reuse results, better I/O sched</p>
    <p>OS FlexSC</p>
    <p>Cassyopia, Cosy Batching (all) system calls</p>
  </div>
</Presentation>
