<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>2006 Andreas Haeberlen, MPI-SWS 1</p>
    <p>The Case for Byzantine Fault Detection</p>
    <p>Andreas Haeberlen</p>
    <p>MPI-SWS / Rice University</p>
    <p>Petr Kouznetsov MPI-SWS</p>
    <p>Peter Druschel MPI-SWS</p>
  </div>
  <div class="page">
    <p>Challenge: Byzantine faults  Distributed systems are subject to</p>
    <p>a variety of failures and attacks  Hacker break-in  Freeloading  Censorship  Data corruption  Software/hardware failure</p>
    <p>Byzantine failure model: Faulty nodes may exhibit arbitrary behavior</p>
    <p>Dependable systems must be protected against Byzantine faults</p>
  </div>
  <div class="page">
    <p>Existing approach: Fault tolerance</p>
    <p>Byzantine fault tolerance (BFT) can mask a limited number of Byzantine faults</p>
    <p>Example: Castro and Liskov [OSDI'99]</p>
    <p>Client</p>
    <p>Server replicas</p>
  </div>
  <div class="page">
    <p>Alternative approach: Fault detection  Nodes monitor each other for faulty behavior  When a fault occurs, the correct nodes</p>
    <p>identify the faulty node(s)  distribute evidence of the fault</p>
    <p>Nodes can isolate the faulty node + initiate recovery</p>
    <p>Byzantine Fault Detection</p>
  </div>
  <div class="page">
    <p>Byzantine Fault Detection</p>
    <p>Alternative approach: Fault detection  Nodes monitor each other for faulty behavior  When a fault occurs, the correct nodes</p>
    <p>identify the faulty node(s)  distribute evidence of the fault</p>
    <p>Nodes can isolate the faulty node + initiate recovery</p>
    <p>D C</p>
    <p>B</p>
    <p>A</p>
    <p>E Set X=5</p>
    <p>D C</p>
    <p>A</p>
    <p>E</p>
    <p>D C</p>
    <p>B</p>
    <p>A</p>
    <p>E OK</p>
    <p>X=?X=7 E: X</p>
    <p>=5 7</p>
    <p>! B</p>
  </div>
  <div class="page">
    <p>Level3</p>
    <p>Best approach depends on the application</p>
    <p>Best-effort service  Goal: Find faulty components  Wide-area delays, limited</p>
    <p>bandwidth, many nodes</p>
    <p>Air traffic control Inter-domain routing</p>
    <p>Failures may be fatal!  Goal: Mask fault symptoms  Delays negligible, bandwidth</p>
    <p>plentiful, few nodes</p>
    <p>Machine room AT&amp;T</p>
    <p>Sprint</p>
    <p>Typical application for Fault DetectionTypical application for Fault Tolerance</p>
  </div>
  <div class="page">
    <p>Detection can provide accountability  In an accountable system:</p>
    <p>Actions are undeniable  State is tamper-evident  Correctness can be certified</p>
    <p>Good nodes can provide evidence that they are good</p>
    <p>Bad nodes cannot hide evidence of misbehavior</p>
    <p>Proven concept in society  Banking, administration ...</p>
    <p>Desirable for distributed systems [Yumerefendi05]  Example: Building trust in federated systems</p>
  </div>
  <div class="page">
    <p>What about performance?</p>
    <p>If up to f nodes can be faulty, we need f+1 replicas to guarantee detection (fault tolerance: 3f+1)</p>
    <p>More throughput using the same resources  Works even when &gt;33% of the nodes can become faulty</p>
    <p>Detection can defer overhead to periods of low load</p>
    <p>System can deliver high peak throughput</p>
    <p>Detection does not require consensus  Potentially less expensive than BFT</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction  BFD abstraction  PeerReview algorithm  Conclusion</p>
  </div>
  <div class="page">
    <p>How is BFD used?</p>
    <p>Each correct node has state machine + detector  Detector can inspect all messages at its local node  When detector observes a fault on another node,</p>
    <p>it informs its local application, and  it provides evidence of the fault to other detectors</p>
    <p>?</p>
    <p>Application</p>
    <p>State machine Detector</p>
    <p>Network</p>
    <p>Node X is</p>
    <p>faulty!</p>
    <p>No assumptions about faulty nodes</p>
  </div>
  <div class="page">
    <p>Only observable faults can be detected</p>
    <p>Two classes of observable faults:  Detectable faultiness: Node breaks the protocol  Detectable ignorance: Node refuses to respond</p>
    <p>As long as the faulty node continues to follow the protocol, BFD cannot detect this!</p>
    <p>Set X=5</p>
    <p>OK Get X</p>
    <p>A B C</p>
    <p>Correct</p>
    <p>Set X=5</p>
    <p>OK Get X</p>
    <p>A B C Set X=5</p>
    <p>OK Get X</p>
    <p>A B C</p>
    <p>Detectably ignorantDetectably faulty</p>
  </div>
  <div class="page">
    <p>BFD can give strong guarantees  Three types of detector output</p>
    <p>Trusted, suspected, exposed</p>
    <p>Strong completeness  &quot;No false negatives&quot;</p>
    <p>Strong accuracy  &quot;No false positives&quot;</p>
    <p>Precise definitions are in the paper</p>
    <p>Trusted</p>
    <p>Suspected Exposed</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction  BFD abstraction  PeerReview algorithm  Conclusion</p>
  </div>
  <div class="page">
    <p>Assumptions</p>
  </div>
  <div class="page">
    <p>Secure logging</p>
    <p>All messages are signed and acknowledged  Each node keeps a log of all local inputs and outputs  Nodes must commit to the contents of their log</p>
    <p>Log is tamper-evident [Maniatis02]</p>
    <p>Rcv(A, &quot;Set X=5&quot;) Send(A, &quot;Okay&quot;) Rcv(C, &quot;Get X&quot;) Send(C, &quot;5&quot;)</p>
    <p>Snd(B, &quot;Set X=5&quot;) Rcv(B, &quot;Okay&quot;)</p>
    <p>Snd(B, &quot;Get X&quot;) Rcv(B, &quot;5&quot;)</p>
    <p>B's log</p>
    <p>A</p>
    <p>B</p>
    <p>C</p>
  </div>
  <div class="page">
    <p>Detecting ignorance</p>
    <p>If a node refuses to acknowledge a message  Send message as evidence to other nodes  Correct nodes will challenge the ignorant node to prove</p>
    <p>that its log contains a 'Rcv' entry for that message  A correct node can always respond</p>
    <p>Rcv(A, &quot;Set X=5&quot;) Send(A, &quot;Okay&quot;) Recv(C, &quot;Get X&quot;)</p>
    <p>A</p>
    <p>B</p>
    <p>C</p>
  </div>
  <div class="page">
    <p>Detecting faultiness</p>
    <p>Nodes can audit each other's log at any time  Auditors replay input in the log, compare output  If a divergence is detected</p>
    <p>Send log as evidence to other nodes  Other nodes can repeat the same procedure to check</p>
    <p>whether the node is really faulty (no he-said-she-said!)</p>
    <p>Rcv(A, &quot;Set X=5&quot;) Send(A, &quot;Okay&quot;) Rcv(B, &quot;Get X&quot;) Send(B, &quot;7&quot;)</p>
    <p>A</p>
    <p>B</p>
    <p>C</p>
    <p>B'</p>
    <p>Rcv(A, &quot;Set X=5&quot;) Send(A, &quot;Okay&quot;) Rcv(B, &quot;Get X&quot;) Send(B, &quot;5&quot;)</p>
    <p>State machine B is expected to run</p>
    <p>Rcv(A, &quot;Set X=5&quot;) Send(A, &quot;Okay&quot;) Rcv(B, &quot;Get X&quot;) Send(B, &quot;7&quot;)</p>
    <p>Snapshots</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>New approach: Byzantine Fault Detection  Alternative to fault tolerance  Provides accountability</p>
    <p>Fault Detection can give strong guarantees  Eventual strong accuracy and completeness</p>
    <p>Early results indicate Fault Detection is practical  Example: PeerReview algorithm</p>
    <p>Thank you!</p>
  </div>
</Presentation>
