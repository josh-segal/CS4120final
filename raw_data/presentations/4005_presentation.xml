<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>On the fragility and limitations of current Browserprovided Clickjacking protection schemes</p>
    <p>Sebastian Lekies, Mario Heiderich, Dennis Appelt, Thorsten Holz and Martin Johns August 06th, 2012</p>
  </div>
  <div class="page">
    <p>2012 SAP AG. All rights reserved. 2</p>
    <p>Agenda</p>
    <p>Technical Background  What is Clickjacking?</p>
    <p>Current Defense Techniques  Client-side approaches  Server-side approaches</p>
    <p>Open Issues  Non-applicability of defense techniques  Vulnerabilities</p>
    <p>Empirical Study  Methodology  Results</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>2012 SAP AG. All rights reserved. 3</p>
    <p>Technical Background What is Clickjacking?</p>
    <p>Clickjacking (also called UI redressing) is an attack that lures an unsuspicious user into clicking on an element that is different to what the user perceives to click on.</p>
  </div>
  <div class="page">
    <p>2012 SAP AG. All rights reserved. 4</p>
    <p>Browser</p>
    <p>mybank.org</p>
    <p>http://attacker.org</p>
    <p>Hello &lt;User&gt;, you are logged in</p>
    <p>Click here to get a free iPod!!!!</p>
    <p>Technical Background What is Clickjacking?</p>
    <p>User</p>
    <p>mybank.org</p>
    <p>Controllable Container  Frames  Object, Embed  Popup windows</p>
    <p>Disguising the UI  Covering it with other</p>
    <p>elements  Reducing its size  Displaying it only for a very</p>
    <p>short amount of time  Making it transparent</p>
  </div>
  <div class="page">
    <p>2012 SAP AG. All rights reserved. 5</p>
    <p>Agenda</p>
    <p>Technical Background  What is Clickjacking?</p>
    <p>Current Defense Techniques  Client-side approaches  Server-side approaches</p>
    <p>Open Issues  Non-applicability of defense techniques  Vulnerabilities</p>
    <p>Empirical Study  Methodology  Results</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>2012 SAP AG. All rights reserved. 6</p>
    <p>Current Defense Techniques Overview</p>
    <p>Client-side approaches:  Protect a single user against attacks on all web applications  Deployed within the users browser</p>
    <p>E.g.: NoScript Clearclick  Further countermeasures: GuardedId, Gazelle, OP, Secure Web Browser</p>
    <p>Server-side approaches:  Protect all users of single web application against attacks  Deployed on the server-side, but enforcement happens on the client-side</p>
    <p>Frame Busting  X-Frame-Options Header  Earlier versions of Content-Security Policy</p>
  </div>
  <div class="page">
    <p>2012 SAP AG. All rights reserved. 7</p>
    <p>Current Defense Techniques Client-Side</p>
    <p>No-Script Clearclick  Basic Idea: Prevent clicks on obfuscated cross-domain iframes, objects, embeds  Malicious Situation:</p>
    <p>frame, object or embed element overlaps with elements that could potentially receive mouse or keyboard events</p>
    <p>Opacity of the frame, object or embed element reaches a value below 0.3  When detecting such a potentially malicious situation a warning is shown to the user  Two confirmations needed to carry out the potentially malicious action</p>
    <p>Alternative Approaches  GuardedID  Gazelle  OP Web browser, Secure Web browser</p>
  </div>
  <div class="page">
    <p>2012 SAP AG. All rights reserved. 8</p>
    <p>Current Defense Techniques Server-Side</p>
    <p>Frame Busting  Basic Idea: Avoid unauthorized framing of a web page  Implementation: A small snippet of JavaScript code checks if page is framed. If so, it</p>
    <p>navigates the top frame towards the framed page Several ways exist to circumvent this protection:  Prevent JavaScript execution</p>
    <p>Misusing modern XSS filters  Using sandboxed iframes</p>
    <p>Prevent redirect  204 flushing  Double framing  By asking the user nicely (onbeforeunload event)</p>
    <p>It is possible to build secure frame busters. However, the knowledge about it is not widely spread</p>
    <p>&lt;script&gt; if (parent!= self) parent.location = self.location; &lt;/script&gt;</p>
  </div>
  <div class="page">
    <p>2012 SAP AG. All rights reserved. 9</p>
    <p>Current Defense Techniques Server-Side</p>
    <p>X-Frame-Options Header  Approach introduced by Microsoft to counter Clickjacking attacks  Similar to frame busting: Avoid unauthorized framing of a page  Implementation:</p>
    <p>Non-JavaScript solution  Based on an HTTP Response header  Browser enforces the Web servers desired behavior</p>
    <p>The X-Frame-Options header values:  SAMEORIGIN: Same-Origin framing only  DENY: Framing is forbidden  (IE only: FROMORIGIN: Allows one specific origin to frame the marked page)</p>
  </div>
  <div class="page">
    <p>2012 SAP AG. All rights reserved. 10</p>
    <p>Current Defense Techniques Server-Side</p>
    <p>Content-Security Policy  Earlier revisions of CSP contained a directive called frame-ancestors</p>
    <p>Allows to control framing behavior similar to X-Frame-Options: ALLOWFROM origin  Not present anymore in the current revision</p>
  </div>
  <div class="page">
    <p>2012 SAP AG. All rights reserved. 11</p>
    <p>Agenda</p>
    <p>Technical Background  What is Clickjacking?</p>
    <p>Current Defense Techniques  Client-side approaches  Server-side approaches</p>
    <p>Open Issues  Non-applicability of defense techniques  Vulnerabilities</p>
    <p>Empirical Study  Methodology  Results</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>2012 SAP AG. All rights reserved. 12</p>
    <p>Open Issues Non-applicability of defense techniques</p>
    <p>The current defense mechanisms have one thing in common  Focus on Framing: prevent unauthorized framing to protect against Clickjacking  Authorized framing = same-domain framing  Unauthorized framing = cross-domain framing</p>
    <p>How to protect against Clickjacking if cross-domain framing is required?  No possibility to protect against Clickjacking in this case  E.g. in Corporate-Portal environments  E.g. Ad providers</p>
    <p>Clickjacking is not limited to frames  Double Clickjacking  Clickjacking via History navigation</p>
  </div>
  <div class="page">
    <p>2012 SAP AG. All rights reserved. 13</p>
    <p>Open Issues Non-applicability of defense techniques</p>
    <p>Double Clickjacking</p>
    <p>Technique developed by Huang and Jackson  Based on popups instead of frames</p>
    <p>Procedure</p>
    <p>E.g. Google OAuth authentication popup was vulnerable to this attack</p>
  </div>
  <div class="page">
    <p>2012 SAP AG. All rights reserved. 14</p>
    <p>Open Issues Non-applicability of defense techniques</p>
    <p>Clickjacking via History Navigation (Caching)</p>
    <p>Technique developed by Michael Zalewski  Also based on popups instead of frames</p>
    <p>Procedure</p>
  </div>
  <div class="page">
    <p>2012 SAP AG. All rights reserved. 15</p>
    <p>Open Issues Vulnerabilities</p>
    <p>NoScript Clearclick  Clearclick uses two basic rules to detect a Clickjacking attack</p>
    <p>The user clicks on an embedded cross-domain element that is 1. (almost) invisible 2. and overlaps with clickable elements</p>
    <p>By circumventing one of these rules, an attack can be conducted</p>
  </div>
  <div class="page">
    <p>2012 SAP AG. All rights reserved. 16</p>
    <p>Open Issues Vulnerabilities</p>
    <p>Circumventing NoScript Clearclick 1. Cursor jacking (Avoid overlapping of elements)</p>
    <p>Developed by Kotowicz et al.  The real cursor is hidden via CSS (cursor:none)  A fake cursor is shown somewhere else</p>
  </div>
  <div class="page">
    <p>2012 SAP AG. All rights reserved. 17</p>
    <p>Open Issues Vulnerabilities</p>
    <p>Removing HTTP response headers in Safari  Vulnerability within the HTML5 Offline Application Cache  Offline App Cache allows to store HTML documents for offline usage  Websites are always retrieved from Cache first (even if a connection is available)  The App Cache does not store HTTP response headers</p>
    <p>Hence web pages stored/read from cache cannot be protected via X-Frame-Options</p>
    <p>Risk Assessment</p>
    <p>HTML5 Offline Applications are often used in mobile environments  Mobile version of GMAIL  Mobile version of Hotmail</p>
    <p>Given Apples (and therewith Safaris) market leadership this is a serious vulnerability for iOS users</p>
  </div>
  <div class="page">
    <p>2012 SAP AG. All rights reserved. 18</p>
    <p>Open Issues Vulnerabilities</p>
    <p>Nested Clickjacking</p>
    <p>X-FrameOptions:</p>
    <p>SAMEORIGIN</p>
  </div>
  <div class="page">
    <p>2012 SAP AG. All rights reserved. 19</p>
    <p>Open Issues Vulnerabilities</p>
    <p>Nested Clickjacking</p>
  </div>
  <div class="page">
    <p>2012 SAP AG. All rights reserved. 20</p>
    <p>Agenda</p>
    <p>Technical Background  What is Clickjacking?</p>
    <p>Current Defense Techniques  Client-side approaches  Server-side approaches</p>
    <p>Open Issues  Non-applicability of defense techniques  Vulnerabilities</p>
    <p>Empirical Study  Methodology  Results</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>2012 SAP AG. All rights reserved. 21</p>
    <p>Empirical Study Methodology</p>
    <p>Scope  Crawl of the Alexa 20.000 + first level subpages  2,039,679 million web pages (1,900,463 successful)</p>
    <p>Research Questions 1. How many websites make use of frame busters, X-Frame-Options, CSP 2. How many websites have cross-domain frames (and hence are potentially</p>
    <p>vulnerable to Nested Clickjacking) 3. How many websites are framed by cross-domain websites and are thus not able</p>
    <p>to deploy X-Frame-Options headers</p>
  </div>
  <div class="page">
    <p>2012 SAP AG. All rights reserved. 22</p>
    <p>Empirical Study Results</p>
    <p>General Overview  2,975 Web sites (14.88 %) utilized a protection mechanism</p>
    <p>Interesting Observation:  Clickjacking protection is often deployed only on subpages:</p>
    <p>Frame-Busting: o 4.61% of all pages are protected while in total 11.15 % of all Web sites utilize frame busting o 899 Web sites use frame busting on the main page + subpages o 1,331 Web sites use frame busting only on some subpages</p>
    <p>X-Frame-Options: o 265 Web sites utilize X-Frame-Options on the main page + subpages o 707 Web sites only on some subpages</p>
  </div>
  <div class="page">
    <p>2012 SAP AG. All rights reserved. 23</p>
    <p>Empirical Study Results</p>
    <p>Framing Behavior  14.449 (72.25 %) of the investigated Web sites make use of frames</p>
    <p>4,007,176 iFrame elements  On average o 200.35 frames per Web sites o 2.1 frames per Web page</p>
    <p>2,812,274 (~ 70%) pointing to cross-domain resources  Potentially vulnerable to nested Clickjacking  Nested Clickjacking only applies to X-Frame-Options: Same-Origin</p>
  </div>
  <div class="page">
    <p>2012 SAP AG. All rights reserved. 24</p>
    <p>Empirical Study Results</p>
    <p>Applicability of frame-based countermeasures  17,496 unique domains are framed across-domain boundaries</p>
    <p>not able to deploy frame-based anti-clickjacking solutions</p>
  </div>
  <div class="page">
    <p>2012 SAP AG. All rights reserved. 25</p>
    <p>Agenda</p>
    <p>Technical Background  What is Clickjacking?</p>
    <p>Current Defense Techniques  Client-side approaches  Server-side approaches</p>
    <p>Open Issues  Non-applicability of defense techniques  Vulnerabilities</p>
    <p>Empirical Study  Methodology  Results</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>2012 SAP AG. All rights reserved. 26</p>
    <p>Conclusion</p>
    <p>Clickjacking  Attack that hijacks clicks from an unsuspicious user</p>
    <p>Protection Approaches  Client-side: Clearclick or alternative browser designs  Server-side: X-Frame-Options, Frame busting, CSP  All techniques focus on preventing framing  Techniques are not applicable in many cases  There are vulnerabilities: Nested Clickjacking, Clearclick circumvention</p>
    <p>Empirical Study  Clickjacking protection is only applied to neuralgic points</p>
    <p>Possible interpretation: Current mechanisms are not flexible enough</p>
    <p>The nature of Clickjacking is complex  Frame-based solutions do not solve all problems  Instead of an X-Frame-Options-Header we rather need X-Viewport-Options</p>
  </div>
  <div class="page">
    <p>Thank you</p>
    <p>Contact Information: Sebastian Lekies SAP Research Sebastian.lekies@sap.com Twitter: @sebastianlekies</p>
  </div>
</Presentation>
