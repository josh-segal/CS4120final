<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>TROPIC: Transactional Resource Orchestration Platform In the Cloud</p>
    <p>Changbin Liu, Yun Mao*, Xu Chen*, Mary Fernandez*, Boon Thau Loo, Jacobus Van der Merwe*</p>
    <p>netdb.cis.upenn.edu/dmf 1</p>
    <p>*</p>
  </div>
  <div class="page">
    <p>Motivation</p>
    <p>InfrastructureasaService (IaaS) Cloud  Provide cloud infrastructure services: virtual machines</p>
    <p>(VMs), virtual block devices, VPNs  Widely adopted, e.g. Amazon Elastic Compute Cloud (EC2)</p>
    <p>Cloud resource orchestration  Provision, configure, manage, decommission</p>
    <p>Compute: VM spawn / start / stop / migrate / destroy  Storage: replicate, deallocate  Network: allocate IP, create VPN</p>
  </div>
  <div class="page">
    <p>Key Challenges  Robustness: volatile environment</p>
    <p>Buggy software, unstable hardware, transient network disconnections, power outage</p>
    <p>Safety: enforce service and engineering rules  Prevent misconfigurations / misoperations  Tightly coupled resources  dependencies across various</p>
    <p>subsystems</p>
    <p>Concurrency: simultaneous operations  Large scale datacenters  Fast resource acquisition and release</p>
    <p>Allocate IP Create Config</p>
    <p>Start VM Clone Image</p>
    <p>Storage host VM hostRouter</p>
    <p>Fail-stop  unused image, config file, IP</p>
    <p>Amazon EC2 outage in April 2011: a router misconfiguration</p>
  </div>
  <div class="page">
    <p>Key idea: Orchestration  Transactions</p>
    <p>Wellunderstood ACID properties (similar to database)  Atomicity and Durability for robustness  Consistency for safety  Isolation for concurrency</p>
    <p>Our Approach: TROPIC</p>
    <p>No worry about the complexities of accessing and managing underlying volatile resources!</p>
  </div>
  <div class="page">
    <p>TROPIC Architecture</p>
    <p>Logical / physical layer  Replica: weak, eventual</p>
    <p>consistency  Transaction scheduling,</p>
    <p>concurrency control, simulation, reconcile crosslayer inconsistency</p>
    <p>Replicated components  Multiple controllers  Distributed queues  Persistent storage</p>
    <p>Lo gi ca l l ay er</p>
    <p>Ph ys ic al</p>
    <p>la ye r</p>
    <p>TR O PI C</p>
    <p>inputQ</p>
    <p>Orchestration requests</p>
    <p>Controllers (leader + followers)</p>
    <p>Replicated persistent storage</p>
    <p>phyQ</p>
    <p>Logical data model</p>
  </div>
  <div class="page">
    <p>Robustness (Atomicity, Durability)</p>
    <p>Allocate IP Create Config</p>
    <p>Start VM Clone Image</p>
    <p>Storage host VM hostRouter</p>
    <p>Txn.begin()  Execute physical orchestration operations  If error: abort and rollback via logging and undo actions Txn.commit()</p>
    <p>Atomicity</p>
  </div>
  <div class="page">
    <p>Safety (Consistency) Txn.begin()  Logical layer simulation to check for constraint violations  Execute physical orchestration operations  If failure: abort and rollback via logging and undo actions Txn.commit()</p>
    <p>@constraint def nextHopConstraint(self): if self.nextHop in backupRouters: yield (Amazon EC2 outage!, self)</p>
    <p>Constraint examples  Aggregate VM memory &lt;= Host memory capacity  EC2: next hops of primary routers can not be backup routers</p>
  </div>
  <div class="page">
    <p>Implementation</p>
    <p>System prototype  Implemented in 11K LOC Python  1K LOC as core transaction logic</p>
    <p>Cloud resources modeling  Compute: Xen VMs, libvirt APIs  Storage: DRBD, GNBD, LVM  Network: Juniper routers</p>
    <p>ZooKeeper for coordination and storage  Distributed queues, leader election, keyvalue store</p>
  </div>
  <div class="page">
    <p>Cloud Services  Adaptive Cloud</p>
    <p>A mini Amazon EC2, plus VM migration in LAN  Deployment on 18 hosts in 3 data centers (CA, IL, TX)  Manage 1,000+ CentOS VMs</p>
    <p>FollowtheSun  Widearea live VM migration across data centers</p>
  </div>
  <div class="page">
    <p>Evaluation  Scalability</p>
    <p>Scales up to 5X Amazon EC2 traces (collected in USeast region in July 2011), median transaction latency &lt; 1s</p>
    <p>Manage up to 225K servers, 1.8 million VMs  Constant transaction throughput (5585 /s) as load scales up</p>
    <p>Low overhead  Robustness: transaction rollback upon failure  Safety: enforcing constraints  &lt; 0.01s per transaction</p>
    <p>High availability  Transactional semantics are always guaranteed even</p>
    <p>during controller failure and recovery 10</p>
  </div>
  <div class="page">
    <p>Summary  TROPIC: transactional orchestration</p>
    <p>Robustness, safety, concurrency, high availability  System prototype with testbed deployment  Rapidly build reliable and sophisticated IaaS cloud services</p>
    <p>Opensource code release  Integration with OpenStack</p>
    <p>Automated cloud orchestration [SOCC11, VLDB12]  Provider operational objectives  Customer service level agreements  Declarative constraint optimization</p>
  </div>
  <div class="page">
    <p>Thank you</p>
    <p>netdb.cis.upenn.edu/dmf</p>
  </div>
</Presentation>
