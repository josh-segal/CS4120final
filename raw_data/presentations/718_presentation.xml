<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Department of Computer Science Institute of Systems Architecture, Operating Systems Group</p>
    <p>Carsten Weinhold, Hermann Hrtig</p>
    <p>jVPFS: Adding Robustness to a Secure Stacked File System with Untrusted Local Storage Components</p>
  </div>
  <div class="page">
    <p>TU Dresden jVPFS</p>
    <p>INTRODUCTION</p>
    <p>Secure NetSecure Net</p>
    <p>Confidentiality, Integrity, AvailabilityVPN:</p>
    <p>Internet</p>
  </div>
  <div class="page">
    <p>TU Dresden jVPFS</p>
    <p>Linux Kernel</p>
    <p>TCB</p>
    <p>INTRODUCTION</p>
    <p>Microkernel / Micro!Hypervisor</p>
    <p>App</p>
    <p>VPFS: Confidentiality, Integrity, Availability</p>
    <p>[1] Weinhold, Hrtig: VPFS: Building a Virtual Private File System With a Small Trusted Computing Base, EuroSys08</p>
    <p>Secure File System</p>
  </div>
  <div class="page">
    <p>TU Dresden jVPFS</p>
    <p>INTRODUCTION</p>
    <p>VPFS: Confidentiality, Integrity, Availability</p>
    <p>[1] Weinhold, Hrtig: VPFS: Building a Virtual Private File System With a Small Trusted Computing Base, EuroSys08</p>
    <p>Secure File System</p>
    <p>Commodity File System</p>
    <p>Secure File System Proxy</p>
  </div>
  <div class="page">
    <p>TU Dresden jVPFS</p>
    <p>OUTLINE</p>
    <p>Introduction  VPFS: Virtual Private File System  jVPFS: Adding robustness securely  Evaluation  Lessons learned</p>
  </div>
  <div class="page">
    <p>TU Dresden jVPFS</p>
    <p>VPFS STACK</p>
    <p>Secure File System Proxy</p>
    <p>Commodity File System</p>
    <p>Secure File System</p>
  </div>
  <div class="page">
    <p>TU Dresden jVPFS</p>
    <p>FILES &amp; FILE CONTAINERS</p>
    <p>D D D</p>
    <p>Virtual Private File System (TCB)</p>
    <p>M M M</p>
    <p>H</p>
    <p>H H</p>
    <p>H</p>
    <p>Reused Commodity File System (Untrusted)</p>
    <p>Encrypted files in commodity file system  Merkle hash tree to detect tampering</p>
    <p>D D</p>
  </div>
  <div class="page">
    <p>TU Dresden jVPFS</p>
    <p>UPDATING HASH TREE</p>
    <p>H</p>
    <p>H</p>
    <p>D D D</p>
    <p>H</p>
    <p>D D</p>
    <p>M M M</p>
    <p>H</p>
    <p>High overhead: many writes + crypto ops  Hash tree updates must be atomic</p>
  </div>
  <div class="page">
    <p>TU Dresden jVPFS</p>
    <p>CONSISTENCY PROBLEM</p>
    <p>File!system consistency is complex problem:  Correct implementation is difficult[2,3]  Bugs often in corner cases, error checking[4]  Widely used file systems affected, too</p>
    <p>Goal: keep complexity out of the TCB</p>
    <p>[3] Prabhakaran et al.: Model!Based Failure Analysis of Journaling File Systems, DSN05</p>
    <p>[2] Yang et al.: Using Model Checking to Find Serious File System Errors, ACM TOCS Vol.24 Issue 4, 2006</p>
    <p>[4] Gunawi et al.: EIO: Error Handling is Occasionally Correct, FAST08</p>
  </div>
  <div class="page">
    <p>TU Dresden jVPFS</p>
    <p>HASH TREE + JOURNAL</p>
    <p>H</p>
    <p>H</p>
    <p>D D D</p>
    <p>M M M</p>
    <p>H</p>
    <p>H</p>
    <p>Record new hash sums in journal  Recovery: valid hash either in tree or journal</p>
    <p>H H H</p>
  </div>
  <div class="page">
    <p>TU Dresden jVPFS</p>
    <p>Security critical</p>
    <p>Critical only for Availability</p>
    <p>BLOCK WRITE BACK</p>
    <p>Calculate hash + encrypt block  Put ciphertext + hash into shared ring buffer</p>
    <p>Do ordered write to legacy file system  Append hash sums to journal  Write blocks afterwards</p>
    <p>Optimizations</p>
  </div>
  <div class="page">
    <p>TU Dresden jVPFS</p>
    <p>JOURNALING METADATA</p>
    <p>Approach: log operations, not blocks  Code reuse: replay during recovery via API  Simple dependency tracking  Non!intrusive implementation</p>
    <p>Dependencies:  New files: inode, name, parent dir  Updated files: file size, hash sums  Unlinked / moved files: name, parent dir</p>
  </div>
  <div class="page">
    <p>TU Dresden jVPFS</p>
    <p>TRACKING NEW FILES</p>
    <p>fd</p>
    <p>...</p>
    <p>p_fd p_inode name</p>
    <p>...</p>
    <p>file table new!file table</p>
    <p>file42dir/.../Pathname elements to log:</p>
  </div>
  <div class="page">
    <p>TU Dresden jVPFS</p>
    <p>JOURNAL CONTENT</p>
    <p>H</p>
    <p>H</p>
    <p>D D D</p>
    <p>M M</p>
    <p>M M M</p>
    <p>H</p>
    <p>File_create</p>
    <p>dir</p>
    <p>File_create</p>
    <p>file42</p>
    <p>Update_block</p>
    <p>H(block), file size</p>
    <p>Update_block</p>
    <p>H(block), file size</p>
    <p>Update_block</p>
    <p>H(block), file size</p>
    <p>H</p>
  </div>
  <div class="page">
    <p>TU Dresden jVPFS</p>
    <p>JOURNAL SECURITY</p>
    <p>Confidentiality:  Filenames, inodes, etc.: encrypted  Block offset, type: plaintext</p>
    <p>Tamper detection:  Anchor of journal in Sealed Memory  Journal is continuously MACd</p>
    <p>Record groups:  All records between two MACs</p>
    <p>Record</p>
    <p>Root</p>
    <p>Record</p>
    <p>Record</p>
    <p>Record</p>
    <p>Record</p>
    <p>Record</p>
    <p>MAC</p>
    <p>MAC</p>
    <p>MAC</p>
  </div>
  <div class="page">
    <p>TU Dresden jVPFS</p>
    <p>Security critical</p>
    <p>Critical only for Availability</p>
    <p>RECOVERY PROCEDURE</p>
    <p>a) Get complete record groups</p>
    <p>b) Check integrity + decrypt</p>
    <p>c) Re-execute operations:</p>
    <p>open(), unlink(), ...</p>
    <p>d) Repeat from a)</p>
    <p>Record</p>
    <p>Root</p>
    <p>Record</p>
    <p>Record</p>
    <p>Record</p>
    <p>Record</p>
    <p>Record</p>
    <p>Record</p>
    <p>Record</p>
    <p>MAC</p>
    <p>MAC</p>
    <p>MAC</p>
  </div>
  <div class="page">
    <p>TU Dresden jVPFS</p>
    <p>COOPERATION</p>
    <p>Extensive Reuse:  Complete commodity file system  Existing consistency primitives:  Journaling, copy!on!write, ...  Write ordering, snapshots</p>
    <p>More details in paper:  Checkpoints + journal truncation  Flushing metadata blocks</p>
  </div>
  <div class="page">
    <p>TU Dresden jVPFS</p>
    <p>SOURCE COMPLEXITY</p>
    <p>SLOCSLOC</p>
    <p>Subsystem ReiserFS Ext4 jVPFS</p>
    <p>Journal + replay ~3,200 ~5,000 325</p>
    <p>Basic persistency 16,500+ 24,000+</p>
    <p>Core functionality 16,500+ 24,000+</p>
    <p>Crypto algorithms 667</p>
  </div>
  <div class="page">
    <p>TU Dresden jVPFS</p>
    <p>TESTING RECOVERY</p>
    <p>Testcase for recovery:  Unpack tar archive (3,000+ files, 70 MB)  Power!cycle machine, interrupt write back  Recover jVPFS + try to open + read all files:  NILFS+Flash: successful  ReiserFS+HDD: successful</p>
    <p>Example run: replay 1.2 MB journal in 5.1s  Restored: 2,710 files, 40 MB user data</p>
  </div>
  <div class="page">
    <p>TU Dresden jVPFS</p>
    <p>PM!2 ReiserFS HDD</p>
    <p>PM!2 NILFS Flash</p>
    <p>untar ReiserFS HDD</p>
    <p>untar NILFS Flash</p>
    <p>PERFORMANCE</p>
    <p>Native Linux jVPFS, no journal jVPFS, journal</p>
  </div>
  <div class="page">
    <p>TU Dresden jVPFS</p>
    <p>LESSONS LEARNED</p>
    <p>jVPFS: Less than 350 SLOC in TCB to make secure file system robust</p>
    <p>Security!critical core for journaling + replay:  Log API!level operations, replay via API  Code reuse, simple dependency tracking</p>
    <p>Move complexity to untrusted file system  Reuse existing consistency primitives</p>
  </div>
</Presentation>
