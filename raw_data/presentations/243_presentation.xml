<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Towards proving security in the presence of large untrusted components</p>
    <p>June Andronick David Greenaway Kevin Elphinstone</p>
  </div>
  <div class="page">
    <p>Computers and Trust</p>
  </div>
  <div class="page">
    <p>Computers and Trust</p>
  </div>
  <div class="page">
    <p>Computers and Trust</p>
  </div>
  <div class="page">
    <p>Computers and Trust</p>
  </div>
  <div class="page">
    <p>Computers and Trust</p>
  </div>
  <div class="page">
    <p>Computers and Trust</p>
    <p>Advances in formal methods techniques give us hope</p>
    <p>The seL4 microkernel is one such example: around 10 thousand lines of code formally proven</p>
    <p>approximately 25 person years of effort</p>
  </div>
  <div class="page">
    <p>A typical smartphone consists of over 10 million lines of code</p>
    <p>Computers and Trust</p>
    <p>Advances in formal methods techniques give us hope</p>
    <p>The seL4 microkernel is one such example: around 10 thousand lines of code formally proven</p>
    <p>approximately 25 person years of effort</p>
  </div>
  <div class="page">
    <p>A typical smartphone consists of over 10 million lines of code</p>
    <p>Computers and Trust</p>
    <p>Advances in formal methods techniques give us hope</p>
    <p>The seL4 microkernel is one such example: around 10 thousand lines of code formally proven</p>
    <p>approximately 25 person years of effort</p>
  </div>
  <div class="page">
    <p>A typical smartphone consists of over 10 million lines of code</p>
    <p>Computers and Trust</p>
    <p>Advances in formal methods techniques give us hope</p>
    <p>The seL4 microkernel is one such example: around 10 thousand lines of code formally proven</p>
    <p>approximately 25 person years of effort</p>
    <p>How can we provide any formal assurance to real-world systems of such size?</p>
  </div>
  <div class="page">
    <p>Our Vision</p>
    <p>Provide full system guarantees for targeted properties</p>
    <p>Isolate the software parts that are not critical to the target property</p>
    <p>And then prove that nothing more needs to be said about it</p>
    <p>Formally prove that the remaining parts satisfy the target property</p>
  </div>
  <div class="page">
    <p>Case Study: Secure Access Controller</p>
    <p>Classified Networks</p>
    <p>D</p>
    <p>User Terminal</p>
  </div>
  <div class="page">
    <p>Case Study: Secure Access Controller</p>
    <p>Classified Networks</p>
    <p>D</p>
    <p>User Terminal</p>
  </div>
  <div class="page">
    <p>Case Study: Secure Access Controller</p>
    <p>C</p>
    <p>SAC Control</p>
    <p>SAC</p>
    <p>Classified Networks</p>
    <p>D</p>
    <p>User Terminal</p>
  </div>
  <div class="page">
    <p>Case Study: Secure Access Controller</p>
    <p>Data from one classified network must not reach another</p>
    <p>Assumptions:  User terminal will not</p>
    <p>leak data  Only verify overt</p>
    <p>communication channels  All networks are otherwise</p>
    <p>malicious</p>
    <p>C</p>
    <p>SAC Control</p>
    <p>SAC</p>
    <p>Classified Networks</p>
    <p>D</p>
    <p>User Terminal</p>
  </div>
  <div class="page">
    <p>Case Study: Secure Access Controller</p>
    <p>SAC</p>
  </div>
  <div class="page">
    <p>Case Study: Secure Access Controller</p>
    <p>SAC</p>
    <p>Gigabit Network Card</p>
    <p>Drivers</p>
    <p>oC</p>
  </div>
  <div class="page">
    <p>Case Study: Secure Access Controller</p>
    <p>SAC</p>
    <p>Gigabit Network Card</p>
    <p>Drivers</p>
    <p>oC</p>
    <p>TCP/IP Stack</p>
    <p>oC</p>
  </div>
  <div class="page">
    <p>Case Study: Secure Access Controller</p>
    <p>SAC</p>
    <p>Gigabit Network Card</p>
    <p>Drivers</p>
    <p>oC</p>
    <p>Network Address</p>
    <p>Translation</p>
    <p>oC</p>
    <p>TCP/IP Stack</p>
    <p>oC</p>
  </div>
  <div class="page">
    <p>Case Study: Secure Access Controller</p>
    <p>SAC</p>
    <p>Gigabit Network Card</p>
    <p>Drivers</p>
    <p>oC</p>
    <p>Network Address</p>
    <p>Translation</p>
    <p>oC</p>
    <p>Web Server</p>
    <p>C</p>
    <p>TCP/IP Stack</p>
    <p>oC</p>
  </div>
  <div class="page">
    <p>Case Study: Secure Access Controller</p>
    <p>SAC</p>
    <p>Gigabit Network Card</p>
    <p>Drivers</p>
    <p>oC</p>
    <p>Network Address</p>
    <p>Translation</p>
    <p>oC</p>
    <p>Web Server</p>
    <p>C</p>
    <p>SSL Support</p>
    <p>oC</p>
    <p>TCP/IP Stack</p>
    <p>oC</p>
  </div>
  <div class="page">
    <p>Case Study: Secure Access Controller</p>
    <p>SAC</p>
    <p>Gigabit Network Card</p>
    <p>Drivers</p>
    <p>oC</p>
    <p>DHCP</p>
    <p>C</p>
    <p>Network Address</p>
    <p>Translation</p>
    <p>oC</p>
    <p>Web Server</p>
    <p>C</p>
    <p>SSL Support</p>
    <p>oC</p>
    <p>TCP/IP Stack</p>
    <p>oC</p>
  </div>
  <div class="page">
    <p>Case Study: Secure Access Controller</p>
  </div>
  <div class="page">
    <p>Case Study: Secure Access Controller</p>
  </div>
  <div class="page">
    <p>Case Study: Secure Access Controller</p>
  </div>
  <div class="page">
    <p>Case Study: Secure Access Controller</p>
    <p>X</p>
  </div>
  <div class="page">
    <p>Case Study: Secure Access Controller</p>
    <p>Verification of all code in the system is infeasible</p>
    <p>Instead, split up code into components  Trusted / untrusted components  Only give components access to resources they need  Principle of least privilege</p>
    <p>To do this, we need some mechanism to enforce this split</p>
  </div>
  <div class="page">
    <p>seL4 Microkernel</p>
    <p>Small operating system kernel  Threads  Address Spaces  Communication primitives</p>
    <p>Capability based  All system resources require a cap to be accessed  Provides access control, allowing threads to be isolated</p>
    <p>by using an appropriate cap distribution</p>
    <p>Proven functionally correct  seL4s C code shown to correctly implement its specification</p>
    <p>Assumes correctness of hardware, compiler, initialisation code, assembly paths</p>
  </div>
  <div class="page">
    <p>SAC Security Architecture</p>
  </div>
  <div class="page">
    <p>SAC Security Architecture</p>
  </div>
  <div class="page">
    <p>SAC Security Architecture</p>
  </div>
  <div class="page">
    <p>SAC Security Architecture</p>
  </div>
  <div class="page">
    <p>SAC Security Architecture</p>
  </div>
  <div class="page">
    <p>SAC Security Architecture</p>
  </div>
  <div class="page">
    <p>SAC Security Architecture</p>
  </div>
  <div class="page">
    <p>SAC Security Architecture</p>
  </div>
  <div class="page">
    <p>SAC Security Architecture</p>
  </div>
  <div class="page">
    <p>SAC Prototype</p>
  </div>
  <div class="page">
    <p>SAC Prototype</p>
    <p>Router  Virtualised Linux  Routing Code / NAT</p>
    <p>SAC Controller  Virtualised Linux  mini-httpd / OpenSSL</p>
    <p>Timer  Hand-written C</p>
    <p>Router Manager  Hand-written C</p>
    <p>seL4 Kernel  Hand-written C</p>
  </div>
  <div class="page">
    <p>SAC Prototype</p>
    <p>Router  Virtualised Linux  Routing Code / NAT</p>
    <p>SAC Controller  Virtualised Linux  mini-httpd / OpenSSL</p>
    <p>Timer  Hand-written C</p>
    <p>Router Manager  Hand-written C</p>
    <p>seL4 Kernel  Hand-written C</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>Router  Virtualised Linux  Routing Code / NAT</p>
    <p>SAC Controller  Virtualised Linux  mini-httpd / OpenSSL</p>
    <p>Timer  Hand-written C</p>
    <p>Router Manager  Hand-written C</p>
    <p>seL4 Kernel  Hand-written C</p>
    <p>SAC Prototype</p>
    <p>~20,000,000 lines of code</p>
    <p>~10,000 lines of code</p>
  </div>
  <div class="page">
    <p>Full System Verification</p>
    <p>Merely reducing the amount of code isnt sufficient to provide any security guarantee</p>
    <p>Our goal is to provide a formal guarantee</p>
    <p>How can we achieve this?</p>
  </div>
  <div class="page">
    <p>Hardware</p>
    <p>Full System Verification</p>
  </div>
  <div class="page">
    <p>Hardware</p>
    <p>seL4 kernel</p>
    <p>Hardware</p>
    <p>Full System Verification</p>
  </div>
  <div class="page">
    <p>Hardware</p>
    <p>seL4 kernel</p>
    <p>Hardware</p>
    <p>seL4 kernel</p>
    <p>Hardware</p>
    <p>Components</p>
    <p>seL4 kernel</p>
    <p>Hardware</p>
    <p>Components</p>
    <p>Component Code</p>
    <p>Trusted Component</p>
    <p>Full System Verification</p>
  </div>
  <div class="page">
    <p>Hardware</p>
    <p>seL4 kernel</p>
    <p>Hardware</p>
    <p>seL4 kernel</p>
    <p>Hardware</p>
    <p>Components</p>
    <p>seL4 kernel</p>
    <p>Hardware</p>
    <p>Components</p>
    <p>Component Code</p>
    <p>Trusted Component</p>
    <p>Formal Cap</p>
    <p>Distribution</p>
    <p>Full System Verification</p>
  </div>
  <div class="page">
    <p>Hardware</p>
    <p>seL4 kernel</p>
    <p>Hardware</p>
    <p>seL4 kernel</p>
    <p>Hardware</p>
    <p>Components</p>
    <p>seL4 kernel</p>
    <p>Hardware</p>
    <p>Components</p>
    <p>Component Code</p>
    <p>Trusted Component</p>
    <p>Formal Cap</p>
    <p>Distribution</p>
    <p>Security</p>
    <p>Architecture</p>
    <p>Full System Verification</p>
    <p>Security Architecture</p>
  </div>
  <div class="page">
    <p>Hardware</p>
    <p>seL4 kernel</p>
    <p>Hardware</p>
    <p>seL4 kernel</p>
    <p>Hardware</p>
    <p>Components</p>
    <p>seL4 kernel</p>
    <p>Hardware</p>
    <p>Components</p>
    <p>Component Code</p>
    <p>Trusted Component</p>
    <p>Formal Cap</p>
    <p>Distribution</p>
    <p>Security</p>
    <p>Architecture</p>
    <p>Trusted</p>
    <p>Component</p>
    <p>Behaviour</p>
    <p>Full System Verification</p>
    <p>Trusted Component Behaviour</p>
    <p>Security Architecture</p>
  </div>
  <div class="page">
    <p>Hardware</p>
    <p>seL4 kernel</p>
    <p>Hardware</p>
    <p>seL4 kernel</p>
    <p>Hardware</p>
    <p>Components</p>
    <p>seL4 kernel</p>
    <p>Hardware</p>
    <p>Components</p>
    <p>Component Code</p>
    <p>Trusted Component</p>
    <p>Formal Cap</p>
    <p>Distribution</p>
    <p>Security</p>
    <p>Architecture</p>
    <p>Trusted</p>
    <p>Component</p>
    <p>Behaviour</p>
    <p>Kernel</p>
    <p>Security</p>
    <p>Model</p>
    <p>Full System Verification</p>
    <p>Trusted Component Behaviour</p>
    <p>Security Architecture</p>
    <p>Kernel Security Model</p>
  </div>
  <div class="page">
    <p>Hardware</p>
    <p>seL4 kernel</p>
    <p>Hardware</p>
    <p>seL4 kernel</p>
    <p>Hardware</p>
    <p>Components</p>
    <p>seL4 kernel</p>
    <p>Hardware</p>
    <p>Components</p>
    <p>Component Code</p>
    <p>Trusted Component</p>
    <p>Formal Cap</p>
    <p>Distribution</p>
    <p>Security</p>
    <p>Architecture</p>
    <p>Trusted</p>
    <p>Component</p>
    <p>Behaviour</p>
    <p>Kernel</p>
    <p>Security</p>
    <p>Model</p>
    <p>Formal</p>
    <p>Security</p>
    <p>Property</p>
    <p>Trusted Component Behaviour</p>
    <p>Security Architecture</p>
    <p>Kernel Security Model</p>
    <p>Full System Verification</p>
    <p>Formal Security Property</p>
  </div>
  <div class="page">
    <p>Trusted Component Behaviour</p>
    <p>Security Architecture</p>
    <p>Kernel Security Model</p>
    <p>High Level System Model</p>
    <p>Formal Security Property</p>
    <p>RM_id -&gt; Some ({rw_to_NIC_A, rw_to_NIC_B, ...}, not_contamin ated)</p>
    <p>SAC_C_id -&gt; Some ({rw_to_NIC_C, w_to_RM, ...}, not_contaminated )</p>
    <p>TIMER_id -&gt; Some ({w_to_SAC_C, w_to_RM, ...}, not_contaminated)</p>
    <p>ROUTER_id -&gt; None NIC_A_id -&gt; Some ({}, not_contaminated)</p>
    <p>NIC_B_id -&gt; Some ({}, contaminated)</p>
    <p>NIC_C_id -&gt; Some ({}, not_contaminated)</p>
    <p>NIC_D_id -&gt; Some ({}, not_contaminated)</p>
  </div>
  <div class="page">
    <p>Trusted Component Behaviour</p>
    <p>Security Architecture</p>
    <p>Kernel Security Model</p>
    <p>High Level System Model</p>
    <p>Formal Security Property</p>
    <p>RM_id -&gt; Some ({rw_to_NIC_A, rw_to_NIC_B, ...}, not_contamin ated)</p>
    <p>SAC_C_id -&gt; Some ({rw_to_NIC_C, w_to_RM, ...}, not_contaminated )</p>
    <p>TIMER_id -&gt; Some ({w_to_SAC_C, w_to_RM, ...}, not_contaminated)</p>
    <p>ROUTER_id -&gt; None NIC_A_id -&gt; Some ({}, not_contaminated)</p>
    <p>NIC_B_id -&gt; Some ({}, contaminated)</p>
    <p>NIC_C_id -&gt; Some ({}, not_contaminated)</p>
    <p>NIC_D_id -&gt; Some ({}, not_contaminated)</p>
  </div>
  <div class="page">
    <p>Trusted Component Behaviour</p>
    <p>Security Architecture</p>
    <p>Kernel Security Model</p>
    <p>High Level System Model</p>
    <p>Formal Security Property</p>
    <p>RM_id -&gt; Some ({rw_to_NIC_A, rw_to_NIC_B, ...}, not_contamin ated)</p>
    <p>SAC_C_id -&gt; Some ({rw_to_NIC_C, w_to_RM, ...}, not_contaminated )</p>
    <p>TIMER_id -&gt; Some ({w_to_SAC_C, w_to_RM, ...}, not_contaminated)</p>
    <p>ROUTER_id -&gt; None NIC_A_id -&gt; Some ({}, not_contaminated)</p>
    <p>NIC_B_id -&gt; Some ({}, contaminated)</p>
    <p>NIC_C_id -&gt; Some ({}, not_contaminated)</p>
    <p>NIC_D_id -&gt; Some ({}, not_contaminated)</p>
  </div>
  <div class="page">
    <p>Trusted Component Behaviour</p>
    <p>Security Architecture</p>
    <p>Kernel Security Model</p>
    <p>High Level System Model</p>
    <p>Formal Security Property</p>
    <p>RM_prg  [ (* 00: Wait for command, delete Router. *) SysOp (SysRead cap_R_to_SAC_C), SysOp (SysRemoveAll cap_C_to_R), SysOp (SysDelete cap_C_to_R), SysOp (SysWriteZero cap_RW_to_NIC_D). ... (* 09: Non-deterministic goto *) Jump [0, 10, 19],</p>
    <p>(* 10: Setup Router between NIC-A and NIC-D *) SysOp (SysCreate cap_C_to_R), SysOp (SysNormalWrite cap_RWGC_to_R), ... ]</p>
    <p>UNTRUSTED_prg  [ Any LegalOperation ]</p>
  </div>
  <div class="page">
    <p>write_operation source target ss</p>
    <p>(case (ss target) of Some target_entity</p>
    <p>ss(target &quot; target_entity(</p>
    <p>contaminated :=</p>
    <p>is_contaminated ss target</p>
    <p>is_contaminated ss source)</p>
    <p>| _  ss)</p>
    <p>Trusted Component Behaviour</p>
    <p>Security Architecture</p>
    <p>Kernel Security Model</p>
    <p>High Level System Model</p>
    <p>Formal Security Property</p>
    <p>step state e (SysRead c) =</p>
    <p>write_operation (entity c) e s tate</p>
    <p>legal s e (SysRead cap) = (is_entity s e  is_entity s (entity cap)  cap  entity_caps_in_state s e  Read  rights cap)</p>
    <p>What operations do user system calls perform?</p>
    <p>When is a system call allowed by the kernel?</p>
    <p>What effect do system calls have?</p>
  </div>
  <div class="page">
    <p>Trusted Component Behaviour</p>
    <p>Security Architecture</p>
    <p>Kernel Security Model</p>
    <p>High Level System Model</p>
    <p>Formal Security Property</p>
  </div>
  <div class="page">
    <p>High Level System Model</p>
    <p>Trusted Component Behaviour</p>
    <p>Security Architecture</p>
    <p>Kernel Security Model</p>
    <p>Formal Security Property</p>
  </div>
  <div class="page">
    <p>High Level System Model</p>
    <p>Trusted Component Behaviour</p>
    <p>Security Architecture</p>
    <p>Kernel Security Model</p>
    <p>Formal Security Property</p>
  </div>
  <div class="page">
    <p>High Level System Model</p>
    <p>Trusted Component Behaviour</p>
    <p>Security Architecture</p>
    <p>Kernel Security Model</p>
    <p>Formal Security Property</p>
  </div>
  <div class="page">
    <p>High Level System Model</p>
    <p>Trusted Component Behaviour</p>
    <p>Security Architecture</p>
    <p>Kernel Security Model</p>
    <p>Formal Security Property</p>
  </div>
  <div class="page">
    <p>High Level System Model</p>
    <p>Trusted Component Behaviour</p>
    <p>Security Architecture</p>
    <p>Kernel Security Model</p>
    <p>Formal Security Property</p>
  </div>
  <div class="page">
    <p>Trusted Component Behaviour</p>
    <p>Security Architecture</p>
    <p>Kernel Security Model</p>
    <p>High Level System Model</p>
    <p>Formal Security Property</p>
    <p>theorem sac_is_secure:</p>
    <p>(SAC-startup &quot;* ss)   is_contaminated (sac-entity-ss) NicA</p>
  </div>
  <div class="page">
    <p>Trusted Component Behaviour</p>
    <p>Security Architecture</p>
    <p>Kernel Security Model</p>
    <p>High Level System Model</p>
    <p>Formal Security Property</p>
    <p>theorem sac_is_secure:</p>
    <p>(SAC-startup &quot;* ss)   is_contaminated (sac-entity-ss) NicA</p>
  </div>
  <div class="page">
    <p>Trusted Component Behaviour</p>
    <p>Security Architecture</p>
    <p>Kernel Security Model</p>
    <p>High Level System Model</p>
    <p>Formal Security Property</p>
    <p>theorem sac_is_secure:</p>
    <p>(SAC-startup &quot;* ss)   is_contaminated (sac-entity-ss) NicA</p>
  </div>
  <div class="page">
    <p>seL4 kernel</p>
    <p>Hardware</p>
    <p>Components</p>
    <p>Formal Cap</p>
    <p>Distribution</p>
    <p>Security</p>
    <p>Architecture</p>
    <p>Trusted</p>
    <p>Component</p>
    <p>Behaviour</p>
    <p>Kernel</p>
    <p>Security</p>
    <p>Model</p>
    <p>Formal</p>
    <p>Security</p>
    <p>Property</p>
    <p>Progress</p>
  </div>
  <div class="page">
    <p>seL4 kernel</p>
    <p>Hardware</p>
    <p>Components</p>
    <p>Formal Cap</p>
    <p>Distribution</p>
    <p>Security</p>
    <p>Architecture</p>
    <p>Trusted</p>
    <p>Component</p>
    <p>Behaviour</p>
    <p>Kernel</p>
    <p>Security</p>
    <p>Model</p>
    <p>Formal</p>
    <p>Security</p>
    <p>Property</p>
    <p>Progress</p>
  </div>
  <div class="page">
    <p>seL4 kernel</p>
    <p>Hardware</p>
    <p>Components</p>
    <p>Formal Cap</p>
    <p>Distribution</p>
    <p>Security</p>
    <p>Architecture</p>
    <p>Trusted</p>
    <p>Component</p>
    <p>Behaviour</p>
    <p>Kernel</p>
    <p>Security</p>
    <p>Model</p>
    <p>Formal</p>
    <p>Security</p>
    <p>Property</p>
    <p>Progress</p>
  </div>
  <div class="page">
    <p>seL4 kernel</p>
    <p>Hardware</p>
    <p>Components</p>
    <p>Formal Cap</p>
    <p>Distribution</p>
    <p>Security</p>
    <p>Architecture</p>
    <p>Trusted</p>
    <p>Component</p>
    <p>Behaviour</p>
    <p>Kernel</p>
    <p>Security</p>
    <p>Model</p>
    <p>Formal</p>
    <p>Security</p>
    <p>Property</p>
    <p>Progress</p>
  </div>
  <div class="page">
    <p>seL4 kernel</p>
    <p>Hardware</p>
    <p>Components</p>
    <p>Formal Cap</p>
    <p>Distribution</p>
    <p>Formal Cap</p>
    <p>Distribution</p>
    <p>Security</p>
    <p>Architecture</p>
    <p>Trusted</p>
    <p>Component</p>
    <p>Behaviour</p>
    <p>Kernel</p>
    <p>Security</p>
    <p>Model</p>
    <p>Formal</p>
    <p>Security</p>
    <p>Property</p>
    <p>Progress</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Full system verification of modern systems infeasible  But verification of specific, targeted properties feasible</p>
    <p>Presented a framework for proving security  Break code into components, avoid needing to</p>
    <p>trust the bulk of our functionality  Formally verify components capable of violating desired</p>
    <p>property</p>
    <p>Built SAC as a case-study  Uses seL4 microkernel as a secure foundation  Showed a model of the system is secure</p>
    <p>Ongoing work is to join security model with existing seL4 proof</p>
  </div>
  <div class="page">
    <p>Thank You</p>
  </div>
</Presentation>
