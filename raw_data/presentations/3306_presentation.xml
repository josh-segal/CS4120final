<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Dancing on the Lip of the Volcano: Chosen Ciphertext Attacks on Apple iMessage</p>
    <p>Christina Garman Matthew Green Gabriel Kaptchuk Ian Miers Michael Rushanan</p>
  </div>
  <div class="page">
    <p>iMessage</p>
    <p>Created in 2011  1 billion deployed devices  200,000 messages per second peak  First major deployment of end-to-end encrypted chat</p>
    <p>Used in other things:  Handoff  Other undisclosed products</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>All encryption is not equal</p>
  </div>
  <div class="page">
    <p>Reducing iMessage Security</p>
  </div>
  <div class="page">
    <p>Server can be very complex and insecure</p>
  </div>
  <div class="page">
    <p>And have skilled attackers</p>
  </div>
  <div class="page">
    <p>iMessage</p>
  </div>
  <div class="page">
    <p>iMessage</p>
    <p>RSA encryption of K</p>
    <p>ECDSA Signature by sender</p>
    <p>Message, AES-CTR encrypted with K</p>
  </div>
  <div class="page">
    <p>RSA encryption of K</p>
    <p>ECDSA Signature by sender</p>
    <p>Message, AES-CTR encrypted with K</p>
    <p>RSA encryption of K</p>
    <p>ECDSA Signature by ATTACKER</p>
    <p>Mutated Ciphertext</p>
    <p>Identity Misbinding Attack</p>
  </div>
  <div class="page">
    <p>RSA encryption of K</p>
    <p>ECDSA Signature by sender</p>
    <p>Message, AES-CTR encrypted with K</p>
    <p>RSA encryption of K</p>
    <p>RSA encryption of K</p>
    <p>ECDSA Signature by ATTACKER</p>
    <p>Mutated Ciphertext</p>
    <p>Flip bits in AES ciphertext</p>
    <p>Ciphertext malleability</p>
  </div>
  <div class="page">
    <p>Chosen Ciphertext Attack</p>
    <p>From Modern Cryptography Katz and Lindell</p>
    <p>Attacker can query on any ciphertext but challenged one</p>
    <p>Who would build such a system?</p>
  </div>
  <div class="page">
    <p>Format Oracles</p>
    <p>Suppose instead of decrypting the message, the server tells us if it is valid?</p>
    <p>E.g. Is the message the right length  Or if it is encoded/serialized incorrectly</p>
  </div>
  <div class="page">
    <p>Does happen in the real world</p>
  </div>
  <div class="page">
    <p>iMessage: No padding, No XML, etc.</p>
    <p>RSA encryption of K</p>
    <p>ECDSA Signature by sender</p>
    <p>Message, AES-CTR encrypted with K</p>
  </div>
  <div class="page">
    <p>Over the lip of the Volcano Finding a new format oracle</p>
  </div>
  <div class="page">
    <p>RSA encryption of K</p>
    <p>ECDSA Signature by sender</p>
    <p>Message, AES-CTR encrypted with K</p>
    <p>RSA encryption of K</p>
    <p>FLIP Bits</p>
    <p>Exploit some format</p>
    <p>RSA encryption of K</p>
    <p>ECDSA Signature by ATTACKER</p>
    <p>Mutated Ciphertext</p>
    <p>Check if mutated ciphertext decrypts and validates</p>
  </div>
  <div class="page">
    <p>iMessage Format: Whats in the box?  Builds on a partial RE by Quarks Lab  Ciphertext is a GZIP compressed binary plist  Part of the message is put in the RSA ciphertext to save space</p>
  </div>
  <div class="page">
    <p>Countermeasure  The sender ID is stored in the ciphertext  Client rejects if internal sender ID does not match external ID  Luckily, the ciphertext is malleable!!</p>
  </div>
  <div class="page">
    <p>GZIP: another catch  HEADER + compressed message + CRC32  CRC checksum of decompressed message  Decompression fails if the checksum is wrong!</p>
  </div>
  <div class="page">
    <p>Fun with CRC32</p>
    <p>Interesting mathematical fact: CRC(a)CRC(b)=CRC(ab)  {slightly different for non-zero IVs}</p>
  </div>
  <div class="page">
    <p>? ? ? ? ?M:</p>
    <p>CRC(B)B:</p>
    <p>? ? ? ? ?M:</p>
    <p>Correcting CRCs for bit flips</p>
    <p>CRC(B)</p>
    <p>CRC(M)</p>
    <p>CRC(M)</p>
  </div>
  <div class="page">
    <p>? ? ? ? ?M:</p>
    <p>B:</p>
    <p>? ? ? ? ?M:</p>
    <p>Theres a catch</p>
    <p>Decrypt decompress</p>
    <p>CRC(M)</p>
    <p>CRC(B)CRC(M)</p>
    <p>CRC(B)</p>
  </div>
  <div class="page">
    <p>? ? ? ? ?M:</p>
    <p>B:</p>
    <p>? ? ? ? ?M:</p>
    <p>Theres a catch</p>
    <p>Decrypt decompress</p>
    <p>CRC(B)CRC(M)</p>
    <p>CRC(B)</p>
    <p>CRC(M)</p>
  </div>
  <div class="page">
    <p>? ? ? ? ?M:</p>
    <p>B:</p>
    <p>? ? ? ? ?M:</p>
    <p>Theres a catch</p>
    <p>Decrypt decompress</p>
    <p>CRC(M)</p>
    <p>CRC(B)CRC(M)</p>
    <p>CRC(B)</p>
  </div>
  <div class="page">
    <p>DEFLATE</p>
    <p>GZIP uses DEFLATE for compression  DEFLATE is  Lempel  Ziv encoding for repeated strings  Huffman coding of the resulting stream</p>
    <p>Flipping a bit in a Huffman symbol MAY NOT flip the same bit in the decoded character</p>
    <p>Huffman Symbol</p>
    <p>ASCII</p>
    <p>E 11 01000101</p>
    <p>H 10 01001000</p>
    <p>I 101 01001001</p>
  </div>
  <div class="page">
    <p>A ? ? ? ? CRC(M)</p>
    <p>Message</p>
    <p>B ? ? ? ?</p>
    <p>Decompressed message M</p>
    <p>CRC32(M)</p>
    <p>M:</p>
    <p>M:</p>
    <p>Decrypt decompress</p>
    <p>Compress Encrypt</p>
    <p>Compressed and encrypted message</p>
    <p>CRC(M)CRC(AB 0 4)</p>
  </div>
  <div class="page">
    <p>A ? ? ? ? CRC(M)</p>
    <p>Message</p>
    <p>C ? ? ? ?</p>
    <p>Decompressed message M</p>
    <p>CRC32(M)</p>
    <p>M:</p>
    <p>M:</p>
    <p>Decrypt decompress</p>
    <p>Compress Encrypt</p>
    <p>Compressed and encrypted message</p>
    <p>CRC(M)CRC(AC 0 4)</p>
  </div>
  <div class="page">
    <p>H ? ? ? ? CRC(M)</p>
    <p>Message</p>
    <p>E ? ? ? ?</p>
    <p>Decompressed message M</p>
    <p>CRC32(M)</p>
    <p>M:</p>
    <p>M:</p>
    <p>Decrypt decompress</p>
    <p>Compress Encrypt</p>
    <p>Compressed and encrypted message</p>
    <p>CRC(M)CRC(HE 04)</p>
  </div>
  <div class="page">
    <p>H E ? ? ? CRC(M)</p>
    <p>Message</p>
    <p>H D ? ? ?</p>
    <p>Decompressed message M</p>
    <p>CRC(M)CRC(01 ED 03)</p>
    <p>CRC32(M)</p>
    <p>M:</p>
    <p>M:</p>
    <p>Decrypt decompress</p>
    <p>Compress Encrypt</p>
    <p>Compressed and encrypted message</p>
  </div>
  <div class="page">
    <p>H E L ? ? CRC(M)</p>
    <p>Message</p>
    <p>H E T ? ?</p>
    <p>Decompressed message M</p>
    <p>CRC(M)CRC(02 LT 02)</p>
    <p>CRC32(M)</p>
    <p>M:</p>
    <p>M:</p>
    <p>Decrypt decompress</p>
    <p>Compress Encrypt</p>
    <p>Compressed and encrypted message</p>
  </div>
  <div class="page">
    <p>H E L L ? CRC(M)</p>
    <p>Message</p>
    <p>H E L K ?</p>
    <p>Decompressed message M</p>
    <p>CRC(M)CRC(03 LK 0)</p>
    <p>CRC32(M)</p>
    <p>M:</p>
    <p>M:</p>
    <p>Decrypt decompress</p>
    <p>Compress Encrypt</p>
    <p>Compressed and encrypted message</p>
  </div>
  <div class="page">
    <p>H E L L O CRC(M)</p>
    <p>Message</p>
    <p>H E L L N</p>
    <p>Decompressed message M</p>
    <p>CRC(M)CRC(04 ON )</p>
    <p>CRC32(M)</p>
    <p>M:</p>
    <p>M:</p>
    <p>Decrypt decompress</p>
    <p>Compress Encrypt</p>
    <p>Compressed and encrypted message</p>
  </div>
  <div class="page">
    <p>Compression oracle</p>
  </div>
  <div class="page">
    <p>RSA encryption of K</p>
    <p>ECDSA Signature by sender</p>
    <p>Message, AES-CTR encrypted with K</p>
    <p>RSA encryption of K</p>
    <p>GZIP oracle</p>
    <p>RSA encryption of K</p>
    <p>ECDSA Signature by ATTACKER</p>
    <p>Mutated Ciphertext</p>
    <p>Check if mutated ciphertext decrypts and validates</p>
  </div>
  <div class="page">
    <p>Observing the oracle</p>
    <p>We need to see if when a message is received, it decompresses successfully</p>
    <p>iMessage does not report errors to the sender  Read receipts require someone to see the message</p>
  </div>
  <div class="page">
    <p>iMessage</p>
  </div>
  <div class="page">
    <p>Attachment messages</p>
    <p>Can see if message decompresses  Requests block download response to hide message  Can mutate message to point download request to attacker controlled server (e.g. i8loud.com)</p>
  </div>
  <div class="page">
    <p>Attachment message payload  {'gv': '8', 'pv': 0, 'p': ['mailto:alice.jhuisi@gmail.com', 'mailto:jhuisiscratch@gmail.com'], 'gid': 'A9CD06B6-6198-4289-A2C1678B4E43ED77', 't': u'\ufffc', 'v': '1', 'x': '&lt;html&gt;&lt;body&gt;&lt;FILE name=&quot;04duck.png&quot; width=&quot;480&quot; height=&quot;673&quot; datasize=&quot;489847&quot; mimetype=&quot;image/png&quot; uti-type=&quot;public.png&quot; mmcsowner=&quot;MAB49B97D4B303E44942B4D05829B4F68012E577BBF0242A03E 714F4B3F9D69CD.C01USN00&quot; mmcs-url=&quot;https://p10content.icloud.com/MAB49B97D4B303E44942B4D05829B4F68012E577BB F0242A03E714F4B3F9D69CD.C01USN00&quot; mmcs-signaturehex=&quot;01AB6ED842CC96A19C19D1CF3FECA0CB37CE17B07D&quot; filesize=&quot;489847&quot; decryptionkey=&quot;00F49B0E7388F578592FBB1618052675079DE82F0ABDE4BD5C4B2F5 AF1426061DC&quot;/&gt; [ OPTIONAL MESSAGE] &lt;/body&gt;&lt;/html&gt;'}</p>
  </div>
  <div class="page">
    <p>Attack gets harder</p>
    <p>Attachment messages use a dynamic Huffman table which we dont know</p>
    <p>We must recover the table  We basically have to edit known plaintext in the message</p>
    <p>Variable length symbols, so we dont know which decompressed byte we are affecting</p>
    <p>Detect symbol edges (with high probability) with double bit flips</p>
  </div>
  <div class="page">
    <p>Complete Attack</p>
    <p>Get message  Change sender ID  Use CRCs guess and check for chosen ciphertext attack to:  Recover Huffman table  Read attachment key</p>
    <p>Decrypt attachment with recovered key</p>
  </div>
  <div class="page">
    <p>Real attack</p>
    <p>Requires 2^18 oracle queries  Long tail on message processing times with an upper bound of 1 second, average of 390 ms</p>
    <p>Takes 73 hours to execute attack (reducible to 35 hours via backtracking)</p>
    <p>Recovered 232 of 256 bits in the encryption key for the attachment</p>
  </div>
  <div class="page">
    <p>Recovers all but 40 bits of the key for 34% of messages (brute force &lt; 24 hour)</p>
    <p>Recovers all but 24 bits of key for 23% of messages (brute force &lt; 1 hours)</p>
    <p>Simulating larger numbers of attacks</p>
  </div>
  <div class="page">
    <p>Ideal world solutions:</p>
    <p>Use Axolotl/Signal  Just use authenticated encryption  AES-GCM/OCB  Include an HMAC</p>
    <p>Breaks backward compatibility  Hard to do with 1 billion deployed devices</p>
  </div>
  <div class="page">
    <p>Real World Mitigations</p>
  </div>
  <div class="page">
    <p>Without breaking existing devices</p>
    <p>Recommended backward-compatible mitigations  Prevent the identity misbinding attack by moving sender ID to nonmalleable RSA-OAEP ciphertext</p>
    <p>Prevent chosen ciphertext attack by blacklisting RSA-OAEP ciphertexts that fail to decrypt</p>
    <p>RSA blacklisting deployed in IOS 9.3+ and OSX 10.11.4+  Took Apple 4 months and 30 engineers to deploy  Released on March 21, 2016</p>
  </div>
  <div class="page"/>
  <div class="page"/>
  <div class="page">
    <p>This shaky edifice could crumble at</p>
    <p>any moment</p>
    <p>Questions?</p>
  </div>
</Presentation>
