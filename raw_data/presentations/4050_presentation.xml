<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Karl Koscher, Tadayoshi Kohno, David Molnar</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Many potential reasons for vulnerabilities</p>
    <p>Time-to-market pressures</p>
    <p>Limited patching abilities</p>
    <p>Historic lack of adversarial pressure</p>
    <p>Limited visibility of the whole system</p>
    <p>Limited tools for security analysis</p>
  </div>
  <div class="page">
    <p>Many potential reasons for vulnerabilities</p>
    <p>Time-to-market pressures</p>
    <p>Limited patching abilities</p>
    <p>Historic lack of adversarial pressure</p>
    <p>Limited visibility of the whole system</p>
    <p>Limited tools for security analysis</p>
  </div>
  <div class="page">
    <p>For traditional software, we have many</p>
    <p>Memory checkers (e.g., valgrind)</p>
    <p>Fuzzers (e.g., Peach, SAGE, etc.)</p>
    <p>For embedded systems, not so much</p>
  </div>
  <div class="page">
    <p>Hard to add instrumentation to real systems  Limited resources</p>
    <p>Lack of standard abstractions (e.g., OS APIs)</p>
    <p>Hard to emulate  Heterogeneity</p>
    <p>Systems are tightly coupled with their environment</p>
  </div>
  <div class="page"/>
  <div class="page"/>
  <div class="page">
    <p>QEMU</p>
  </div>
  <div class="page">
    <p>QEMU</p>
    <p>JTAG</p>
  </div>
  <div class="page">
    <p>This is not easy</p>
    <p>We are not the first to propose this approach</p>
    <p>Prior work is limited by I/O performance</p>
    <p>A substantial amount of effort is needed to make this work in practice</p>
  </div>
  <div class="page">
    <p>We demonstrate the feasibility of near-realtime whole system emulation</p>
    <p>We discuss the engineering challenges and tradeoffs</p>
    <p>We identify and overcome new challenges when running a whole system under this type of emulation</p>
  </div>
  <div class="page">
    <p>Our design decisions are driven by our failures</p>
    <p>First approach: Connect QEMU to OpenOCD and issue memory reads/writes over JTAG</p>
    <p>This is extremely slow</p>
  </div>
  <div class="page">
    <p>Most JTAG debuggers implement memory operations by modifying the CPU state  Read CPU state (i.e., registers)</p>
    <p>Update registers for operation (address, data)</p>
    <p>Inject instruction to perform the operation</p>
    <p>Single-step the CPU</p>
    <p>Read out the result from a register</p>
    <p>Restore CPU state</p>
  </div>
  <div class="page">
    <p>To overcome this performance bottleneck, a dedicated debug channel is provided</p>
    <p>Load small stub into cache/RAM</p>
    <p>Begin executing the stub</p>
    <p>Send commands/data over the dedicated debug channel</p>
  </div>
  <div class="page">
    <p>Next approach: A stub that accepts commands over ARMs DDC</p>
    <p>Stub is 768 bytes (small enough to lock in cache)</p>
    <p>Multiple commands:</p>
    <p>Single byte/word/dword write</p>
    <p>Multiple byte/word/dword read/write</p>
    <p>Set processor flags (e.g., interrupt enable flag)</p>
  </div>
  <div class="page">
    <p>Much faster!  but still not fast enough</p>
    <p>Devices with coprocessors or watchdogs can be very sensitive to timing</p>
    <p>Bottleneck? USB</p>
    <p>USB 2 polls devices up to once every millisecond</p>
    <p>=&gt; Under the best conditions, 500 ops/second</p>
    <p>Execution depends on the environment, so this limits total performance</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Idea: memory map the target device into the hosts address space using an FPGA connected to the PCIe bus  No OS overhead  its just (uncached) memory</p>
    <p>Can map entire 32-bit address spaces into 64-bit emulator processes</p>
    <p>Great idea in theory.</p>
  </div>
  <div class="page">
    <p>Problem: PCIe requires that all 64-bit mappings are prefetchable</p>
    <p>Side effect free</p>
    <p>This is fundamentally incompatible with MMIO</p>
    <p>So just ask for a 32-bit mapping and have everything else move above 4 GB?</p>
  </div>
  <div class="page">
    <p>Problem: Address space below 4 GB is scarce</p>
    <p>You cant map more than 128  256 MB</p>
    <p>MMIO shouldnt use that much space</p>
    <p>Problem: MMIO often does use that much</p>
    <p>Sparse memory layout for easy address decoding</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Memory-map FPGA registers to initiate I/O requests over JTAG</p>
    <p>e.g., writing an address to the read address register will initiate a read over JTAG</p>
    <p>Read the result out of the read result register</p>
    <p>PCIe stalls can be used to avoid polling for the result</p>
    <p>unless your system is buggy</p>
  </div>
  <div class="page">
    <p>MMIOs are now limited by JTAG speed</p>
    <p>For a 4 MHz JTAG clock, we can do ~16000 read ops/sec and ~17000 write ops/sec</p>
    <p>v.s. 5 ops/sec in Avatar</p>
    <p>Now we have several more issues to address</p>
  </div>
  <div class="page">
    <p>When an IRQ is raised on the target, the stub disables IRQs and sends a notification to the host</p>
    <p>The FPGA converts this to a host interrupt, which is passed as a signal to qemu</p>
  </div>
  <div class="page">
    <p>Emulated IRQ handler runs</p>
    <p>Acknowledges the IRQ</p>
    <p>Re-enables interrupts</p>
    <p>This sends a command to the stub to do so as well</p>
    <p>What if a second interrupt occurs?</p>
  </div>
  <div class="page">
    <p>Multiple interrupts can occur on real hardware, so systems are designed for it</p>
    <p>e.g. an interrupt controller which tracks unacknowledged IRQs</p>
  </div>
  <div class="page">
    <p>Some SoCs use plain ARM IRQs/FIQs, and some use vectored IRQs</p>
    <p>Vectored IRQs are often implemented in ROM as they are unsupported in the ISA</p>
    <p>This ROM can be emulated as well, so we only have to handle IRQ/FIQ!</p>
  </div>
  <div class="page">
    <p>For performance, RAM is not mirrored on the target</p>
    <p>This breaks DMA</p>
    <p>No standard DMA interface</p>
  </div>
  <div class="page">
    <p>Two approaches:</p>
    <p>Add a small amount of logic to qemu to emulate DMA controller(s) of the SoC</p>
    <p>Exploit the fact that DMA buffers cant be cached</p>
  </div>
  <div class="page">
    <p>Watchdogs should generally be disabled</p>
    <p>Changing the SoCs clock generator will cause the JTAG adapter to lose sync</p>
    <p>Use Surrogates to find the write that causes it to crash and refuse to pass that write</p>
  </div>
  <div class="page">
    <p>Pico Computing E17 PCIe card</p>
    <p>Xilinx Virtex5 FX70T</p>
    <p>~14% utilization</p>
    <p>~1100 lines of Verilog</p>
    <p>~1000 lines of tests</p>
    <p>FriendlyARM 2440 dev board (S3C2440)</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Full integration with dynamic analyses tools (e.g., S2E)</p>
    <p>Learn approximate models of hardware  Can search for bugs in parallel</p>
    <p>Verify potential bugs against real hardware</p>
    <p>Cheaper hardware (USB 3?) / Open Source</p>
  </div>
  <div class="page">
    <p>We demonstrate the feasibility of near-real-time whole system emulation</p>
    <p>We discuss the engineering challenges and tradeoffs</p>
    <p>We identify and overcome new challenges when running a whole system under this type of emulation</p>
  </div>
  <div class="page"/>
</Presentation>
