<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Ji-Yong Shin</p>
    <p>Cornell University</p>
    <p>In collabora8on with Mahesh Balakrishnan (Yale), Tudor Marian (Google), and</p>
    <p>Hakim Weatherspoon (Cornell)</p>
    <p>Isotope: Transac8onal Isola8on for Block Storage</p>
    <p>FAST 2016</p>
  </div>
  <div class="page">
    <p>Mul8core and Concurrency  Concurrent access to storage is the norm</p>
    <p>For safe data access, concurrency control is a must</p>
  </div>
  <div class="page">
    <p>Concurrency Control in Storage Stacks</p>
    <p>Most modern apps support concurrency control  App-specific implementa8on  Typically, locking</p>
    <p>Key-Value Store</p>
    <p>Filesystem / DB</p>
    <p>Block I/O</p>
    <p>Device Driver</p>
    <p>H/W Device</p>
    <p>Applica&gt;ons</p>
    <p>Concurrency Control (+ Atomicity/Durability) Is</p>
    <p>Difficult Transac8onal Block Store (Isola&gt;on + Atomicity +</p>
    <p>Durability)</p>
  </div>
  <div class="page">
    <p>Why Transac8onal Block Store?</p>
    <p>Simpler applica8ons  One common implementa8on for isola8on (and atomicity/durability)</p>
    <p>TX APIs decouple policy/mechanism  TX over applica8on-level constructs (e.g. file, directories, key-value pairs)</p>
    <p>TX across different applica8ons (e.g. read from file and write to KV store)</p>
    <p>Key-Value Store</p>
    <p>Filesystem / DB</p>
    <p>Block I/O</p>
    <p>Device Driver</p>
    <p>H/W Device</p>
    <p>Applica&gt;ons</p>
    <p>TX TX</p>
    <p>TX</p>
    <p>TX</p>
    <p>TX TX APIs</p>
    <p>Impl. a Impl. b</p>
  </div>
  <div class="page">
    <p>End-To-End Argument? Applica8on specific func8ons should be in end-hosts  Transac8onal isola8on is general Pushed down func8on should not incur unnecessary overheads  Isola8on can be implemented efficiently</p>
    <p>Key-Value Store</p>
    <p>Filesystem / DB</p>
    <p>Block I/O</p>
    <p>Device Driver</p>
    <p>H/W Device</p>
    <p>Applica&gt;ons</p>
    <p>TX</p>
    <p>Many block-level func8ons, e.g. atomicity, block layer indirec8on,</p>
    <p>are already implemented</p>
    <p>TX using op8mis8c concurrency control yields</p>
    <p>low overhead</p>
  </div>
  <div class="page">
    <p>How do we design a transac8onal block store?</p>
    <p>Isotope</p>
    <p>Is a transac8onal block store useful? IsoBT, IsoHT, IsoFS, and ImgStore</p>
  </div>
  <div class="page">
    <p>Rest of the Talk  Isotope  Overview  Design and APIs  Applica8ons</p>
    <p>Performance Evalua8on</p>
    <p>Conclusion 7</p>
  </div>
  <div class="page">
    <p>Isotope  The first block store to support TX isola8on  MARS and TxFlash only supported TX atomicity</p>
    <p>Mul8-version op8mis8c concurrency control  Keeps mul8ple versions of block data  Specula8vely executes TX un8l commit 8me</p>
    <p>One of two seman8cs supported  Strict serializability  Snapshot isola8on</p>
    <p>Simple APIs  BeginTX/EndTX/AbortTX and more</p>
  </div>
  <div class="page">
    <p>Isotope Design</p>
    <p>Yes.</p>
    <p>Timestamp Counter: T53</p>
    <p>Write Buffer</p>
    <p>Temporary Mul&gt;-version Index</p>
    <p>Version:Linear Addr</p>
    <p>Physical data in a Log (linear address space)</p>
    <p>N</p>
    <p>BeginTX(); foo=Read(0); Write(1,boo); Write(3,baz); EndTX();</p>
    <p>TX Contexts Thread Id: ? Begin Time: ? End Time: ? Write ?</p>
    <p>Thread Id: ? Begin Time: ? End Time: ? Write ?</p>
    <p>Thread Id: ? Begin Time: ? End Time: ? Write ?</p>
    <p>V55:L5</p>
    <p>V55:L4</p>
    <p>Tx Decision Engine</p>
    <p>Thread Id: 1 Start Time: 50 End Time: 51 Write 3</p>
    <p>Thread Id: 1 BeginTime: T50 End Time: T52 Write 0</p>
    <p>Thread Id: 2 Begin Time: T50 End Time: T53 Write 1</p>
    <p>Thread Id: 0 Begin Time: T53 End Time: T54 Write 0</p>
    <p>Queued context (sorted by end 8me)</p>
    <p>T52 T53 T54</p>
    <p>Thread Id: 1 BeginTime: T53 End Time: ? Write 1 Write 3</p>
    <p>V54: L2</p>
    <p>V53: L3 V52: L1</p>
    <p>Timestamp Counter: T55</p>
    <p>Applica&gt;on</p>
    <p>Isotope Virtual (Logical) Address Space</p>
  </div>
  <div class="page">
    <p>Deciding Transac8ons  Strict serializability based  Checks for read/write conflicts</p>
    <p>W 17 W 33</p>
    <p>W 88 W 22</p>
    <p>W 33</p>
    <p>Queued contexts (sorted by end 8me)</p>
    <p>T52 T53 T53</p>
    <p>TX Decision Engine</p>
    <p>W40</p>
    <p>T54</p>
    <p>R 33 W 25 W 33</p>
    <p>BeginTX(); // @ T53 foo=Read(33); Write(25, bar); Write(33, baz); EndTX(); // @ T55</p>
    <p>Commit  Abort</p>
    <p>Begin Time End Time Conflict Window</p>
    <p>Conflict</p>
    <p>T55</p>
  </div>
  <div class="page">
    <p>Isotope Challenges and Addi8onal APIs 1. Applica8on must be stateless (no caches)  PleaseCache(): caches a data block in internal memory cache</p>
    <p>Yes.</p>
    <p>False Conflict</p>
    <p>metadata block</p>
    <p>TX A Write (0, foo); // modified 1st bit</p>
    <p>TX B Write (0, bar); // modified last bit</p>
  </div>
  <div class="page">
    <p>Implementa8on  Built as device mapper in Linux kernel  Logical block device similar to solware RAID or LVM  Can run on any block device (Disk, SSD, etc.)</p>
    <p>Log implemented based on Gecko  Chain logging design (Logs to mul8ple drives in round robin)</p>
    <p>APIs supported using IOCTL calls  BeginTX/EndTX/AbortTX  MarkAccessed/PleaseCache  ReleaseTX/TakeoverTX</p>
  </div>
  <div class="page">
    <p>Isotope Applica8ons  IsoBT and IsoHT  C++ library key-value stores  Based on persistent B-tree and hashtable  ACID Put, Get, Delete, etc.</p>
    <p>IsoFS  FUSE based transac8onal filesystem  Executes arbitrary filesystem ops (read, write, rename, etc.) ACIDly</p>
    <p>PleaseCache to handle metadata</p>
    <p>Isotope Device Driver H/W Device</p>
    <p>IsoBT IsoHT IsoFS</p>
  </div>
  <div class="page">
    <p>Ease of Programming</p>
    <p>Lines of code</p>
    <p>Simple replacement of locks to BeginTX/EndTX/AbortTX  Only few lines of code to add op8miza8ons</p>
    <p>Applica&gt;on Nave Lock-Based</p>
    <p>Isola&gt;on</p>
    <p>Isotope TX APIs</p>
    <p>(lines modified)</p>
    <p>Isotope Op&gt;onal APIs (lines added)</p>
    <p>IsoHT 591 591 (15) 617 (26)</p>
    <p>IsoBT 1,229 1,229 (12) 1,246 (17)</p>
    <p>IsoFS 997 997 (19) 1,022 (25)</p>
    <p>Very easy to build transac&gt;onal applica&gt;ons using Isotope APIs</p>
    <p>Lock(); If(!ReadMetadata()) { Unlock(); return failure; } ReadData(); Unlock();</p>
    <p>Example: Get() BeginTX(); If(!ReadMetadata()) { AbortTX(); return failure; } ReadData(); EndTX();</p>
  </div>
  <div class="page">
    <p>Composing Applica8ons  ImgStore  Transac8onal storage with two subsystems  IsoBT for metadata and IsoHT for images</p>
    <p>Case 1. Library</p>
    <p>ImgStore Library Model</p>
    <p>IsoBT IsoHT</p>
    <p>IsoBT IsoHT</p>
    <p>IsoBT IsoHT</p>
    <p>IsoBT IsoHT</p>
    <p>BeginTX</p>
    <p>EndTX</p>
    <p>BeginTX</p>
    <p>EndTX</p>
    <p>BeginTX</p>
    <p>EndTX</p>
    <p>BeginTX</p>
    <p>EndTX</p>
    <p>ImgStore Library Model</p>
    <p>ImgStore</p>
    <p>Isotope Device Driver H/W Device</p>
    <p>IsoBT IsoHT</p>
  </div>
  <div class="page">
    <p>ImgStore  Transac8onal storage with two subsystems  IsoBT for metadata and IsoHT for images</p>
    <p>Case 1. Library 2. Process</p>
    <p>Composing Applica8ons</p>
    <p>ImgStore Process Model</p>
    <p>IsoBT IsoBT IsoHT IsoHT</p>
    <p>BeginTX</p>
    <p>ReleaseTX</p>
    <p>BeginTX</p>
    <p>ReleaseTX</p>
    <p>TakeoverTX</p>
    <p>EndTX</p>
    <p>TakeoverTX</p>
    <p>EndTX</p>
    <p>TX Handles through IPC</p>
    <p>ImgStore</p>
    <p>Isotope Device Driver H/W Device</p>
    <p>IsoBT IsoHT</p>
    <p>Con8nues on a transac8on given the handle</p>
    <p>Returns a transac8on handle</p>
    <p>Thread Id: X</p>
  </div>
  <div class="page">
    <p>Composing Applica8ons  ImgStore  Transac8onal storage with two subsystems  IsoBT for metadata and IsoHT for images</p>
    <p>Case 1. Library 2. Process 3. Thread pools</p>
    <p>ImgStore Thread Pool Model</p>
    <p>IsoBT IsoBT IsoHT IsoHT</p>
    <p>BeginTX</p>
    <p>ReleaseTX</p>
    <p>BeginTX</p>
    <p>ReleaseTX</p>
    <p>TakeoverTX</p>
    <p>EndTX</p>
    <p>TakeoverTX</p>
    <p>EndTX</p>
    <p>ImgStore Thread Pool Model</p>
    <p>ImgStore</p>
    <p>Isotope Device Driver H/W Device</p>
    <p>IsoBT IsoHT</p>
  </div>
  <div class="page">
    <p>Performance Evalua8on 1. Micro benchmark  Base performance of Isotope?</p>
  </div>
  <div class="page">
    <p>Micro Benchmark (Base Performance of Isotope)</p>
    <p>Random 3-4KB-reads-3-4KB-writes TXes from 64 threads  Increasing address space (decreasing Tx conflicts)  Ran on 3-SSD chain</p>
    <p>Th ro ug hp</p>
    <p>ut (M</p>
    <p>B/ s)</p>
    <p>Address Space</p>
    <p>Block (4KB) TX Throughput</p>
    <p>Throughtput Goodput</p>
    <p>Th ro ug hp</p>
    <p>ut (M</p>
    <p>B/ s)</p>
    <p>Address Space</p>
    <p>Subblock (16B) TX Throughput</p>
    <p>Throughput Goodput</p>
  </div>
  <div class="page">
    <p>Key-Value Stores  LevelDB: on RAID0 volume, Sync/Async mode  Increasing number of threads on 2 SSDs  8KB data using YCSB workload-a</p>
    <p>G oo</p>
    <p>dp ut (K</p>
    <p>O ps /S ec )</p>
    <p># of Threads</p>
    <p>LvlDB-s LvlDB IsoHT IsoBT</p>
    <p>Isotope-based applica8ons perform comparable to exis8ng applica8ons and guarantee strong seman8cs</p>
  </div>
  <div class="page">
    <p>Filesystems  Ext2 and Ext3 on top of Isotope on SSDs</p>
    <p>Logging benefit  All I/Os as singleton transac8ons</p>
    <p>IOZone benchmark write/rewrite phase with 8 threads</p>
    <p>seq-write seq-rewrite rand-rewrite</p>
    <p>Th ro ug hp</p>
    <p>ut (M</p>
    <p>B/ s)</p>
    <p>ext2 ext3 IsoFS-lib</p>
  </div>
  <div class="page">
    <p>ImgStore Composi8ons  Different composi8ons of ImgStore  YCSB Workload-a</p>
    <p>16KB image to/from IsoHT and metadata to/from IsoBT in a TX</p>
    <p>G oo</p>
    <p>dp ut (K</p>
    <p>O ps /s ec )</p>
    <p># of Threads</p>
    <p>Cross-library Cross-thread Cross-process</p>
  </div>
  <div class="page">
    <p>Conclusion  First block storage with TX isola8on</p>
    <p>Simple API: BeginTX, EndTX, AbortTX  Low overhead design</p>
    <p>(nearly free abort and MVCC)  Op8miza8ons for fine grained TX and caching</p>
    <p>Facilitates TX applica8on design  1K LoC transac8onal KV-stores and filesystem  Easy support for composi8on of TX applica8ons</p>
    <p>Right 8me to consider pushing Isola8on down the I/O stack</p>
  </div>
  <div class="page">
    <p>Thank you Ques8ons?</p>
  </div>
</Presentation>
