<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Reconstructive Software Archaeology</p>
    <p>Warren Toomey School of IT, Bond University</p>
    <p>This is a case study in restoring the 1st Edition of UNIX from 1971.</p>
    <p>The restoration is interesting in itself, but it also raises issues that are relevant to</p>
    <p>other software fields.</p>
  </div>
  <div class="page">
    <p>NO</p>
    <p>Mythbusters</p>
  </div>
  <div class="page">
    <p>Happy 40th Birthday, UNIX!</p>
    <p>www.cakes-you-can-bake.com</p>
  </div>
  <div class="page">
    <p>Issues in Restoring A Computing Artifact</p>
    <p>Computing artifact: hardware, software</p>
    <p>Other resources: documentation, blueprints, schematics, configuration files, notes, written and oral anecdotes, contemporary publications</p>
    <p>What issues need to be considered when restoring a computing artifact to working order?</p>
  </div>
  <div class="page">
    <p>What if the artifact's purpose is unknown?</p>
  </div>
  <div class="page">
    <p>What if the documentation is missing?</p>
  </div>
  <div class="page">
    <p>What if the documentation is incomplete?</p>
  </div>
  <div class="page">
    <p>Is the artifact a blueprint? Can it be rebuilt?</p>
  </div>
  <div class="page">
    <p>Do we have the tools to rebuild it?</p>
  </div>
  <div class="page">
    <p>Do we have to replace some of the parts of the artifact?</p>
  </div>
  <div class="page">
    <p>Do we have to make significant changes to make it work?</p>
  </div>
  <div class="page">
    <p>Software Restoration Issues</p>
    <p>Unlike physical hardware, software does not decay (at least, not while pristine copies exist)</p>
    <p>But in practice, software tends to exhibit what is commonly known as bit rot</p>
    <p>If software does not decay, then what causes the bit rot?</p>
    <p>Bit rot is a function of the software's environment, and not the software itself</p>
  </div>
  <div class="page">
    <p>The UNIX Heritage Society</p>
    <p>I'm a founding member of the Unix Heritage Society. Our aim is to preserve the knowledge and artifacts of early UNIX</p>
    <p>Where possible, we try to keep old systems working. Past successes:  Restoration of earliest C version of UNIX: 1973  Restoration of earliest C compiler: also 1973  Creation of executable environment for UNIX user</p>
    <p>mode binaries, assembled in 1972</p>
    <p>The 1st Edition of UNIX, from 1971, was lost</p>
  </div>
  <div class="page">
    <p>Hierarchical filesystem: files, directories, subdirectories</p>
    <p>Pre-emptive multitasking &amp; processes  A flexible command-line interpreter  Multiuser, including e-mail  Mountable storage making a single filesystem</p>
    <p>tree  Hard links: a file can have multiple names  Multiple languages: assembly, FORTRAN, Basic, TMG, shell scripting</p>
  </div>
  <div class="page">
    <p>Dennis &amp; Ken at the PDP-11/20 console</p>
  </div>
  <div class="page">
    <p>And then...</p>
    <p>A paper document containing a listing of the 1st Edition UNIX kernel was found</p>
  </div>
  <div class="page">
    <p>Can It Be Restored?</p>
    <p>Needs to be OCR'd and eyeballed  Contradictory typed &amp; handwritten comments  No 1st Edition assembler, only later ones  No bootstrap code in any form  No filesystem or creation tool, just the docs  Need a PDP-11/20 simulator: one exists, but not</p>
    <p>all the required hardware  Not sure if existing executables are from 1st</p>
    <p>Edition or 2nd Ed: will they be compatible?</p>
  </div>
  <div class="page">
    <p>What was Done, Part 1</p>
    <p>Document scanned, OCR'd, manually checked &amp; cross-checked by ~10 people</p>
    <p>Tool written to modify output from 7th Edition assembler to be compatible with 1st Edition assembler</p>
    <p>Existing Apout tool allows 7th Ed assembler to run without a full PDP-11 simulator</p>
    <p>Several logic errors and missing lines found in the paper listing: fixed</p>
    <p>KE11A support added to PDP-11 simulator  Result: kernel runs to a point, then hangs</p>
  </div>
  <div class="page">
    <p>What was Done, Part 2</p>
    <p>Cold kernel fixed, builds near-empty filesystem.  Warm kernel boots, init, login &amp; shell work!  mkfs tool written to build and fully populate the root and /usr filesystems  Result: Now we can run user-mode programs  Simulator further modified to emulate DC-11  Result: multiuser UNIX system  Kernel modified to deal with 0407 executables  Result: all old executables run; C compiler runs</p>
    <p>and can recompile itself</p>
  </div>
  <div class="page">
    <p>Software Reconstruction</p>
    <p>Software suffers from bit rot. We had to:  Fix typos, missing lines, logic mistakes in the source</p>
    <p>code  Build tools which could assemble the source code,</p>
    <p>and construct suitable filesystems  Modify an existing PDP-11 simulator to provide an</p>
    <p>executable environment for the system  Interpret old documentation: on the whole, it was</p>
    <p>excellent, but it was vague or omitted details in places</p>
    <p>Luck played a role: documentation, preserved executables, existing tools</p>
  </div>
  <div class="page">
    <p>Lessons Learned for Now</p>
    <p>Write good documentation  Keep software current on new platforms  If necessary, write simulators now while the</p>
    <p>hardware details still exist  Moore's Law helps here</p>
    <p>All software requires an environment. Take a crucial component away &amp; it stops working:  Hardware, compilation tools, user manual,</p>
    <p>filesystem, even configuration files  As system complexity increases, the work</p>
    <p>needed to resurrect/restore increases</p>
  </div>
  <div class="page">
    <p>Questions?</p>
  </div>
  <div class="page">
    <p>Old &amp; New System Calls 1st Edition Linux 2.6 1st Edition Linux 2.6</p>
  </div>
</Presentation>
