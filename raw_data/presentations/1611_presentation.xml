<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Optimizing Systems for Byte-Addressable NVM by Reducing Bit Flipping</p>
    <p>Daniel Bittman Peter Alvaro Darrell D. E. Long Ethan L. Miller</p>
    <p>FAST 19 2019-02-26</p>
  </div>
  <div class="page">
    <p>CRSS Confidential</p>
    <p>Byte-addressable Non-volatile Memory</p>
    <p>BNVM is coming, and with it, new optimization targets</p>
  </div>
  <div class="page">
    <p>CRSS Confidential</p>
    <p>Byte-addressable Non-volatile Memory</p>
    <p>Its not just writes... ...its the bits flipped by those writes</p>
  </div>
  <div class="page">
    <p>BNVM power usage</p>
  </div>
  <div class="page">
    <p>Can we take advantage of this?</p>
    <p>Software vs. hardware?</p>
  </div>
  <div class="page">
    <p>Can we take advantage of this?</p>
    <p>Software vs. hardware?</p>
    <p>How hard is it to reason about bit flips?</p>
  </div>
  <div class="page">
    <p>Can we take advantage of this?</p>
    <p>Software vs. hardware?</p>
    <p>How hard is it to reason about bit flips?</p>
    <p>How do we design data structures to reduce bit flips?</p>
  </div>
  <div class="page"/>
  <div class="page">
    <p>Reducing Bit Flips in Software</p>
  </div>
  <div class="page">
    <p>XOR linked lists</p>
    <p>value</p>
    <p>prev next</p>
    <p>value</p>
    <p>prev next</p>
    <p>value</p>
    <p>prev next</p>
    <p>value xptr</p>
    <p>value xptr</p>
    <p>value xptr</p>
    <p>xptr = next  prev</p>
    <p>Traditional doubly linked list</p>
    <p>XOR linked list</p>
  </div>
  <div class="page">
    <p>Pointers!</p>
    <p>Some actual pointers A = 0x000055b7bda8f260 B = 0x000055b7bda8f6a0</p>
    <p>A  B = 0x4C0 = 0b10011000000</p>
  </div>
  <div class="page">
    <p>Using XOR in hash tables</p>
    <p>key</p>
    <p>value</p>
    <p>xnext</p>
    <p>key</p>
    <p>value</p>
    <p>xnext</p>
    <p>key</p>
    <p>value</p>
    <p>xnext</p>
    <p>key</p>
    <p>value</p>
    <p>xnext</p>
    <p>...</p>
    <p>...</p>
  </div>
  <div class="page">
    <p>Using XOR in hash tables</p>
    <p>key</p>
    <p>value</p>
    <p>xnext D</p>
    <p>key</p>
    <p>value</p>
    <p>key</p>
    <p>value</p>
    <p>xxxxx 1</p>
    <p>Both indicate entry is empty</p>
  </div>
  <div class="page">
    <p>From XOR linked lists to Red Black Trees</p>
    <p>L RP</p>
    <p>Standard 3-pointer red-black tree design</p>
  </div>
  <div class="page">
    <p>From XOR linked lists to Red Black Trees</p>
    <p>L RP LX RX LX = L  P</p>
    <p>RX = R  P</p>
    <p>Now 2-pointer, and XOR pointers</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
  </div>
  <div class="page">
    <p>Experimental framework</p>
    <p>, at the memory controller</p>
    <p>Test different data structures, with different cache parameters, over a varying number of operations</p>
  </div>
  <div class="page">
    <p>Bit flips: calling malloc()</p>
    <p>Cross-over point between 40 and 48 bytes</p>
  </div>
  <div class="page">
    <p>Bit flips: XOR Linked Lists</p>
    <p>XOR linked lists reduce bit flips dramatically</p>
    <p>better</p>
  </div>
  <div class="page">
    <p>Bit flips: Hash table</p>
    <p>better</p>
    <p>Hash table already had few flips to save:</p>
    <p>chains should be short</p>
  </div>
  <div class="page">
    <p>Bit flips: Red-black Trees</p>
    <p>better</p>
    <p>Significant savings</p>
  </div>
  <div class="page">
    <p>Bit flips: L2 Cache Behavior</p>
    <p>better</p>
    <p>L2 cache has ultimately little effect!</p>
  </div>
  <div class="page">
    <p>Bit flips: L2 Cache Behavior</p>
    <p>better</p>
    <p>L2 cache has ultimately little effect!</p>
    <p>...even when increasing in size</p>
  </div>
  <div class="page">
    <p>Performance: RBT insert</p>
    <p>better</p>
    <p>Performance is not significantly affected!</p>
    <p>a) Performance cost of XORs b) Performance benefit of smaller node size</p>
  </div>
  <div class="page">
    <p>Performance: hash table</p>
    <p>better</p>
    <p>Almost no effect on performance</p>
  </div>
  <div class="page">
    <p>CRSS Confidential</p>
    <p>Conclusions</p>
    <p>Savings are significant with little performance impact.</p>
    <p>We can design around bit flips, and we should.</p>
    <p>Bit flip/write inversion</p>
  </div>
  <div class="page">
    <p>Data structures</p>
    <p>System simulation Caching</p>
    <p>effects Pointer</p>
    <p>distance</p>
    <p>Power and wear estimates</p>
    <p>Full systems</p>
    <p>Real hardware</p>
    <p>More data structuresAdditional</p>
    <p>techniques</p>
    <p>Bitflips from algorithms</p>
    <p>ABI modifications</p>
  </div>
  <div class="page">
    <p>Thank You! Questions? Daniel Bittman</p>
    <p>darrell@ucsc.edu elm@ucsc.edupalvaro@ucsc.edu</p>
    <p>https://gitlab.soe.ucsc.edu/gitlab/crss/opensource-bitflipping-fast19</p>
  </div>
  <div class="page">
    <p>Backup slides</p>
  </div>
  <div class="page">
    <p>Bit flips: instrumentation</p>
    <p>better</p>
  </div>
  <div class="page">
    <p>Performance: RBT lookup</p>
    <p>better</p>
  </div>
  <div class="page">
    <p>Performance: XOR Linked List</p>
    <p>Operation XOR Linked List Doubly Linked List</p>
  </div>
  <div class="page">
    <p>Stack frames</p>
    <p>arg0 pc</p>
    <p>csr0 sp</p>
    <p>csr1</p>
    <p>arg0 pc</p>
    <p>csr1 sp</p>
    <p>fn0 fn1</p>
  </div>
  <div class="page">
    <p>Stack frames</p>
    <p>arg0 pc</p>
    <p>csr0 sp</p>
    <p>csr1</p>
    <p>arg0 pc sp</p>
    <p>fn0 fn1</p>
    <p>csr1</p>
    <p>Wasted space</p>
  </div>
  <div class="page">
    <p>Bit flips: stack frames</p>
  </div>
</Presentation>
