<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Not-quite-so-broken TLS Lessons in re-engineering a security protocol specification and</p>
    <p>implementation</p>
    <p>David Kaloper Merinjak Hannes Mehnert</p>
    <p>Peter Sewell Anil Madhavapeddy</p>
    <p>University of Cambridge, Computer Labs Usenix Security, Washington DC, 12 August 2015</p>
  </div>
  <div class="page">
    <p>i n t s s l 2 3 _ g e t _ c l i e n t _ h e l l o ( S S L * s ) { c h a r b u f _ s p a c e [ 1 1 ] ; / * R e q u e s t t h i s m a n y b y t e s i n i n i t i a l r e a d . * W e c a n d e t e c t S S L 3 . 0 / T L S 1 . 0 C l i e n t H e l l o s * ( ' t y p e = = 3 ' ) c o r r e c t l y o n l y w h e n t h e f o l l o w i n g * i s i n a s i n g l e r e c o r d , w h i c h i s n o t g u a r a n t e e d b y * t h e p r o t o c o l s p e c i f i c a t i o n : * B y t e C o n t e n t * 0 t y p e \ * 1 / 2 v e r s i o n &gt; r e c o r d h e a d e r * 3 / 4 l e n g t h / * 5 m s g _ t y p e \ * 6 - 8 l e n g t h &gt; C l i e n t H e l l o m e s s a g e</p>
  </div>
  <div class="page">
    <p>Common CVE sources in 2014 Class #</p>
    <p>Memory safety 15</p>
    <p>State-machine errors 10</p>
    <p>Certificate validation 5</p>
    <p>ASN.1 parsing 3 (OpenSSL, GnuTLS, SecureTransport, Secure Channel, NSS, JSSE)</p>
  </div>
  <div class="page">
    <p>Root causes Error-prone languages Lack of separation Ambiguous and untestable specification</p>
  </div>
  <div class="page">
    <p>nqsb approach Choice of language and idioms Separation and modular structure A precise and testable specification of TLS Reuse between specification and implementation</p>
  </div>
  <div class="page">
    <p>Choice of language and idioms OCaml: a memory-safe language with expressive static type system</p>
    <p>Well contained side-effects Explicit flows of data Value-based Explicit error handling</p>
    <p>We leverage it for abstraction and automated resource management.</p>
  </div>
  <div class="page">
    <p>Formal approaches Either reason about a simplified model of the protocol;</p>
    <p>or reason about small parts of OpenSSL.</p>
    <p>In contrast, we are engineering a deployable implementation.</p>
  </div>
  <div class="page">
    <p>nqsb-tls A TLS stack, developed from scratch, with dual goals:</p>
    <p>Executable specification Usable TLS implementation</p>
  </div>
  <div class="page">
    <p>ML module layout</p>
    <p>Structure</p>
    <p>nqsb-TLS</p>
  </div>
  <div class="page">
    <p>Core Is purely functional:</p>
    <p>v a l h a n d l e _ t l s : s t a t e - &gt; b u f f e r - &gt; [ ` O k o f s t a t e * b u f f e r o p t i o n * b u f f e r o p t i o n | ` F a i l o f f a i l u r e ]</p>
  </div>
  <div class="page">
    <p>Core OCaml helps to enforce state-machine invariants.</p>
    <p>l e t h a n d l e _ h a n d s h a k e s s n h s b u f = m a t c h p a r s e _ h a n d s h a k e b u f w i t h E r r o r - &gt; f a i l ( ` F a t a l ` R e a d e r E r r o r ) | O k h a n d s h a k e - &gt; m a t c h ( s s n , h a n d s h a k e ) w i t h ( A w a i t C l i e n t H e l l o , C l i e n t H e l l o c h ) - &gt; a n s w e r _ c l i e n t _ h e l l o h s c h b u f | ( A w a i t C l i e n t F i n i s h e d ( s e s s n , l o g ) , F i n i s h e d f i n ) - &gt; a n s w e r _ c l i e n t _ f i n i s h e d h s s e s s n f i n b u f l o g ( * . . . * ) | _ - &gt; f a i l ( ` F a t a l ` U n e x p e c t e d H a n d s h a k e )</p>
  </div>
  <div class="page">
    <p>ASN.1 T B S C e r t i f i c a t e : : = S E Q U E N C E { v e r s i o n [ 0 ] V e r s i o n , s e r i a l N u m b e r C e r t i f i c a t e S e r i a l N u m b e r , s i g n a t u r e A l g o r i t h m I d e n t i f i e r , i s s u e r N a m e , v a l i d i t y V a l i d i t y , s u b j e c t N a m e , s u b j e c t P K I n f o S u b j e c t P u b l i c K e y I n f o , i s s u e r U n i q u e I D [ 1 ] I M P L I C I T U n i q u e I d O P T I O N A L , s u b j e c t U n i q u e I D [ 2 ] I M P L I C I T U n i q u e I d O P T I O N A L , e x t e n s i o n s [ 3 ] E x t e n s i o n s O P T I O N A L }</p>
  </div>
  <div class="page">
    <p>ASN.1 in OCaml l e t t b s C e r t i f i c a t e = s e q u e n c e ( ( o p t &quot; v e r s i o n &quot; ( e 0 v e r s i o n ) ) @ ( r e q &quot; s e r i a l N u m b e r &quot; c e r t i f i c a t e _ s n ) @ ( r e q &quot; s i g n a t u r e &quot; A l g o r i t h m . i d e n t i f i e r ) @ ( r e q &quot; i s s u e r &quot; N a m e . n a m e ) @ ( r e q &quot; v a l i d i t y &quot; v a l i d i t y ) @ ( r e q &quot; s u b j e c t &quot; N a m e . n a m e ) @ ( r e q &quot; s u b j e c t P K I n f o &quot; P K . p k _ i n f o _ d e r ) @ ( o p t &quot; i s s u e r U I D &quot; ( i 1 u n i q u e I d ) ) @ ( o p t &quot; s u b j e c t U I D &quot; ( i 2 u n i q u e I d ) ) - @ ( o p t &quot; e x t e n s i o n s &quot; ( e 3 E x t e n s i o n . e x t e n s i o n s _ d e r ) ) )</p>
  </div>
  <div class="page">
    <p>X.509 l e t i s _ s e r v e r _ c e r t _ v a l i d h o s t t i m e c e r t = m a t c h v a l i d a t e _ t i m e t i m e c e r t , m a y b e _ v a l i d a t e _ h o s t n a m e c e r t h o s t , v e r s i o n _ m a t c h e s _ e x t e n s i o n s c e r t , v a l i d a t e _ s e r v e r _ e x t e n s i o n s c e r t w i t h | ( t r u e , t r u e , t r u e , t r u e ) - &gt; s u c c e s s | ( f a l s e , _ , _ , _ ) - &gt; f a i l ` C e r t i f i c a t e E x p i r e d | ( _ , f a l s e , _ , _ ) - &gt; f a i l ` I n v a l i d S e r v e r N a m e | ( _ , _ , f a l s e , _ ) - &gt; f a i l ` I n v a l i d V e r s i o n | ( _ , _ , _ , f a l s e ) - &gt; f a i l ` I n v a l i d S e r v e r E x t e n s i o n s</p>
  </div>
  <div class="page">
    <p>Cryptography Cipher and hash cores in C Cipher modes (CTR, CBC, GCM, CCM) in OCaml Public-key cryptography in OCaml using GMP</p>
  </div>
  <div class="page">
    <p>Timing side channels Symmetric ciphers: AES-NI MODP public-key: blinding PKCS, Protocol: deploying widely accepted mitigations lucky13: no mitigation in place yet</p>
  </div>
  <div class="page">
    <p>Live handshake visualisation Analysed 30000 recorded TLS sessions</p>
  </div>
  <div class="page">
    <p>Trace checker Live demo here</p>
  </div>
  <div class="page">
    <p>BTC Piata Transparent Bitcoin bait Both client and server side are exposed Private BTC key when successfully authenticated</p>
  </div>
  <div class="page">
    <p>Results: BTC Piata Since February 2015 Attacks included exploits in other stacks 20000 traces from 1000 IPs</p>
    <p>(We can't infer security from the Piata.)</p>
  </div>
  <div class="page">
    <p>Trusted Computing Base Subsystem Linux/OpenSSL nqsb Unikernel</p>
    <p>Kernel 1600 48</p>
    <p>Runtime 689 25</p>
    <p>Crypto 230 23</p>
    <p>TLS 41 6</p>
    <p>Total 2560 102 (numbers in kloc)</p>
    <p>The code size of Piata is 1/25 of OpenSSL on Linux.</p>
  </div>
  <div class="page">
    <p>Handshake performance nqsb OpenSSL PolarSSL</p>
    <p>RSA 698 hs/s 723 hs/s 672 hs/s</p>
    <p>DHE-RSA 601 hs/s 515 hs/s 367 hs/s</p>
  </div>
  <div class="page">
    <p>Throughput</p>
  </div>
  <div class="page">
    <p>Various rollouts Moving OCaml Labs infrastructure to nqsb-TLS.</p>
    <p>a TLS tunnel (stud/stunnel) an XMPP chat client</p>
    <p>a TLS validator using packet traces a CA tool</p>
    <p>tlstunnel jackline trace-checker certify</p>
  </div>
  <div class="page">
    <p>nqsb TLS conclusion Engineered using a radical approach for the systems community Purely functional, designed for clarity Usable both as specification and implementation Small TCB, reasonable performance, concise code Avoids root causes of common flaws</p>
    <p>https://nqsb.io</p>
  </div>
</Presentation>
