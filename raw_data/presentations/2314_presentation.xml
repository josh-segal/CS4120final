<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>QoPS: A QoS based Scheme for Parallel Job Scheduling</p>
    <p>M. Islam P. Balaji</p>
    <p>P. Sadayappan and D. K. Panda</p>
    <p>Computer and Information Science</p>
    <p>The Ohio State University</p>
    <p>Presented by Gerald Sabin</p>
  </div>
  <div class="page">
    <p>Independent Parallel Job Scheduling Model  Dynamically arriving Independent Parallel Jobs</p>
    <p>Resource mapping: Submitted Jobs to Resources present</p>
    <p>Number of Techniques studied over the years  Backfilling (Ex: Conservative, EASY, No Guarantee)</p>
    <p>Priority based scheduling  Differentiated service to different classes of jobs</p>
    <p>Soft Real-time or Best Effort guarantees to the completion time</p>
    <p>Hard Real-Time or Deadline-based scheduling  Allow Users to specify the deadline they desire</p>
    <p>Cost model based on Resources Used AND Deadline Specified</p>
    <p>Requires a deadline-based scheduling algorithm: LONG OVERDUE !</p>
    <p>Job Schedulers Today</p>
  </div>
  <div class="page">
    <p>QoS for Job Scheduling</p>
    <p>Two Components in providing QoS  Cost Model Component</p>
    <p>Based on Resources Used AND Deadline Specified</p>
    <p>More urgent jobs are charged more</p>
    <p>Guarantees the service requested</p>
    <p>Job Scheduling Component</p>
    <p>Admission Control  Can we meet the specified deadline?</p>
    <p>Once admitted, cannot miss the specified deadline</p>
    <p>We only deal with the Job Scheduling Component</p>
  </div>
  <div class="page">
    <p>Overview</p>
    <p>Related Work</p>
    <p>The QoPS Algorithm</p>
    <p>Simulation Approach</p>
    <p>Experimental Results</p>
    <p>Conclusions and Future Work</p>
  </div>
  <div class="page">
    <p>Related Work  Feitelsons Slack-Based (SB) Scheduling [feit97]</p>
    <p>Focused on improving Utilization and Turnaround time</p>
    <p>Jobs have an associated slack, based on their priority</p>
    <p>This determines how much they can be delayed</p>
    <p>Ramamrithams Real-Time (RT) Scheduling [krithi90]  Deadline-based scheduling algorithm</p>
    <p>Non-periodic Single Processor Jobs</p>
    <p>Statically available at start time</p>
    <p>[feit97]: Supporting Priorities and Improving Utilization of the IBM SP2 Scheduler using Slack based Backfilling, D. Talby, D. G. Feitelson, IPPS, Apr 97</p>
    <p>[krithi90]: Efficient Scheduling Algorithms for Real-Time Multiprocessor Systems, K. Ramamritham, J. A. Stankovic, P-F. Shiah, TPDS, Apr 90</p>
  </div>
  <div class="page">
    <p>Slack-Based (SB) Scheduling Algorithm</p>
    <p>When a job (JN+1) arrives</p>
    <p>Calculate its slack (based on its priority)</p>
    <p>If J1, J2, , JN are already present and scheduled in that order</p>
    <p>Try placing the job (JN+1) in each possible position in this list</p>
    <p>For each of the N+1 schedules feasible, calculate a cost function f  A schedule is feasible if no job exceeds the slack given to it</p>
    <p>Choose the schedule with the best cost function value</p>
    <p>J1J2J3J4J5J6</p>
    <p>J7</p>
    <p>J1J2J3J4J5J6 J7J1J2J3J4J5J6 J7 J1J2J3J4J5J6 J7Cost Function EvaluationCost Function EvaluationCost Function Evaluation</p>
    <p>f0 f1 f2 f3 f4 f5 f6 fbest</p>
  </div>
  <div class="page">
    <p>Real-Time (RT) Scheduling Algorithm</p>
    <p>Static Scheme, so theres no concept of new jobs arriving</p>
    <p>Sort jobs based on a heuristic function</p>
    <p>Start from a NULL schedule</p>
    <p>For each of the jobs  If placing the job in the current schedule misses its deadline</p>
    <p>Backtrack to the last known feasible schedule</p>
    <p>If (number of backtracks &gt; p) Discard the Schedule</p>
    <p>If all jobs have been placed within their deadlines  Accept the Schedule</p>
  </div>
  <div class="page">
    <p>J4J4</p>
    <p>J2J2 J4J4J3J3</p>
    <p>J2J2</p>
    <p>J1J1</p>
    <p>Working of the RT Algorithm JN JN-1 JN-2 . . . J3 J2 J1</p>
    <p>Sorted by Earliest Deadline first (EDF)</p>
    <p>NULLNULL</p>
    <p>J3J3</p>
  </div>
  <div class="page">
    <p>Modified Slack-Based (MSB) Algorithm</p>
    <p>Modified Slack-Based (MSB) Algorithm</p>
    <p>Motivation of SB: To improve Utilization and Response Time</p>
    <p>SB assigns slack to jobs based on job priorities</p>
    <p>MSB assigns slack to jobs based on the deadline specified</p>
    <p>Rest of the algorithm is unchanged</p>
  </div>
  <div class="page">
    <p>Modified Real-Time (MRT) Algorithm</p>
    <p>Modified Real-Time (MRT) Algorithm</p>
    <p>RT was designed for non-periodic uni-processor jobs</p>
    <p>All jobs are Statically available at the start of the execution</p>
    <p>MRT involves two modifications to RT</p>
    <p>To allow dynamically arriving jobs</p>
    <p>Run the algorithm every time a job arrives</p>
    <p>To allow scheduling of parallel jobs</p>
    <p>Allowing backfilling of jobs</p>
  </div>
  <div class="page">
    <p>Overview</p>
    <p>Related Work</p>
    <p>The QoPS Algorithm</p>
    <p>Simulation Approach</p>
    <p>Experimental Results</p>
    <p>Conclusions and Future Work</p>
  </div>
  <div class="page">
    <p>The Basic QoPS Algorithm  Similar to the MSB algorithm, but</p>
    <p>Provides more flexibility in reordering scheduled jobs</p>
    <p>When a job (JN+1) arrives</p>
    <p>If J1, J2, , JN are already present and scheduled in that order</p>
    <p>Place the job (JN+1) at the start of all jobs  Try scheduling the jobs in that order</p>
    <p>If all jobs are able to meet their deadlines, Great ! Admit it !  If some job fails, we have two options:  Option1:</p>
    <p>Consider the failed job as a critical job  Push the failed job to the start of the schedule and retry  k number of such re-orderings of existing jobs are allowed  If (number of re-orderings &gt; k) switch to option 2</p>
    <p>Option2:  Back off exponentially in the position at which you try placing job (JN+1) and retry</p>
  </div>
  <div class="page">
    <p>J3 J2J2 J1</p>
    <p>Working of the QoPS Algorithm</p>
    <p>J12 J11 J7J8 J6 J5J10 J9 J4 J1</p>
    <p>J13</p>
    <p>J13</p>
    <p>J13</p>
    <p>J1</p>
    <p>J2</p>
    <p>J3</p>
    <p>J3J13</p>
    <p>J13</p>
    <p>J1</p>
    <p>J2</p>
    <p>J3</p>
    <p>J1 J13 J2J3</p>
    <p>J13</p>
    <p>J1</p>
    <p>J4</p>
    <p>J3</p>
    <p>J2</p>
    <p>J6 J5 J4J1J13 J2J3</p>
    <p>Max. Violations Allowed = 2</p>
    <p>Current Violations = 0Current Violations = 1Current Violations = 2Current Violations = 0</p>
  </div>
  <div class="page">
    <p>Overview</p>
    <p>Related Work</p>
    <p>The QoPS Algorithm</p>
    <p>Simulation Approach</p>
    <p>Experimental Results</p>
    <p>Conclusions and Future Work</p>
  </div>
  <div class="page">
    <p>Simulation Approach</p>
    <p>CTC/SDSC Trace</p>
    <p>Load Variation</p>
    <p>Deadline Calculator</p>
    <p>Deadline-based Trace</p>
    <p>QoPS Simulation</p>
    <p>MSB Simulation</p>
    <p>MRT Simulation</p>
    <p>EASY Simulation</p>
    <p>Duplication/Expansion</p>
  </div>
  <div class="page">
    <p>Trace Generation  Many job logs available, but no associated deadlines</p>
    <p>Synthetic Deadline Generation</p>
    <p>Generate a schedule for the job trace using EASY</p>
    <p>For any job J, if the Turnaround time in this schedule is T</p>
    <p>Deadline for J = Arrival Time + max (runtime, (1-SF) x T)</p>
    <p>SF is the Stringency factor (0 &lt; SF &lt; 1)  0 would give the least stringent deadlines and 1 the most stringent</p>
    <p>Some jobs might not come with deadlines</p>
    <p>Very lax deadlines to prevent starvation</p>
    <p>If T is the current expected Turnaround time,  Deadline = Arrival Time + max (24hrs, R x T)</p>
    <p>R is the Relaxation Factor of the schedule</p>
  </div>
  <div class="page">
    <p>Overview</p>
    <p>Related Work</p>
    <p>The QoPS Algorithm</p>
    <p>Simulation Approach</p>
    <p>Experimental Results</p>
    <p>Conclusions and Future Work</p>
  </div>
  <div class="page">
    <p>Experimental Results  Two evaluation scenarios</p>
    <p>Scenario1:</p>
    <p>All jobs have deadlines</p>
    <p>Pure comparison of the three algorithms</p>
    <p>Scenario2:</p>
    <p>Mixed jobs: Some have deadlines, others are artificially provided</p>
    <p>More realistic</p>
    <p>Tests Conducted:  Job Acceptance rate</p>
    <p>Impact on Non-deadline Jobs</p>
    <p>Utilization Variation, etc</p>
  </div>
  <div class="page">
    <p>Admittance Capacity Comparison</p>
    <p>All jobs have deadlines; Stringency Factor = 0.2; CTC Trace</p>
    <p>QoPS admits the most number of jobs (and Processor Seconds)</p>
  </div>
  <div class="page">
    <p>Utilization Comparison</p>
    <p>All jobs have deadlines; CTC Trace</p>
    <p>Deadline-based schemes lose about 10% Utilization</p>
  </div>
  <div class="page">
    <p>Admittance Capacity Comparison (Mixed Jobs)</p>
    <p>20% jobs have deadlines; Stringency Factor = 0.2; CTC Trace</p>
    <p>QoPS admits the most number of jobs (and Processor Seconds)</p>
  </div>
  <div class="page">
    <p>Response Time and Slow Down Vs Load</p>
    <p>20% jobs have deadlines; Stringency Factor = 0.2; CTC Trace</p>
    <p>QoPS gives the best slow-down in spite of accepting more jobs; Unfair to EASY</p>
  </div>
  <div class="page">
    <p>Utilization Vs Load (Mixed Jobs)</p>
    <p>EASY has a higher Utilization</p>
    <p>Accepts more (all) jobs; Unfair to the deadline-based schemes</p>
  </div>
  <div class="page">
    <p>Response Time and Slow Down Vs Utilization</p>
    <p>20% jobs have deadlines; Stringency Factor = 0.2; CTC Trace</p>
    <p>Fairer Comparison; QoPS still performs better in most cases, especially Slow Down</p>
  </div>
  <div class="page">
    <p>Overview</p>
    <p>Related Work</p>
    <p>The QoPS Algorithm</p>
    <p>Simulation Approach</p>
    <p>Experimental Results</p>
    <p>Conclusions and Future Work</p>
  </div>
  <div class="page">
    <p>Conclusions  Deadline-based scheduling is desirable</p>
    <p>No such scheme for parallel jobs</p>
    <p>Previous schemes can be extended, but</p>
    <p>Not proposed for this kind of scheduling</p>
    <p>Might not fit in perfectly</p>
    <p>Proposed the QoPS algorithm</p>
    <p>Allows jobs to specify required deadlines  Admission control checks admissibility</p>
    <p>Job Scheduler schedules admitted jobs</p>
    <p>Outperforms extended previous schemes (MSB and MRT)  But, the main idea is not performance</p>
    <p>Deadline Scheduling is a necessity and QoPS is an effort to meet it</p>
  </div>
  <div class="page">
    <p>Future Work</p>
    <p>Cost Metric component in QoS</p>
    <p>Currently using a first fit mechanism  Best fit is expected to do much better</p>
    <p>Job Shedding Vs Non Job Shedding  If deadline cant be met</p>
    <p>Should we reject the job (will the user try again?)</p>
    <p>Should we give it the best available deadline</p>
    <p>Grid based extensions to QoPS</p>
  </div>
  <div class="page">
    <p>Thank You !</p>
  </div>
  <div class="page">
    <p>Backup Slides</p>
  </div>
  <div class="page">
    <p>Admittance Capacity for SDSC trace</p>
    <p>All jobs have deadlines; Stringency Factor = 0.2; CTC Trace</p>
    <p>QoPS admits the most number of jobs (and Processor Seconds)</p>
  </div>
  <div class="page">
    <p>Admittance Capacity with Job Expansion</p>
    <p>All jobs have deadlines; Stringency Factor = 0.2; CTC Trace</p>
    <p>QoPS admits the most number of jobs (and Processor Seconds)</p>
  </div>
  <div class="page">
    <p>Impact of Relaxation Factor</p>
    <p>80% jobs have deadlines; Stringency Factor = 0.2; CTC Trace</p>
    <p>With low R, Longer jobs perform better (reflects in Resp. Time)</p>
  </div>
</Presentation>
