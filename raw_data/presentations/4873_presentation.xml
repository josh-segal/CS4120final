<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>iSAX: Indexing and Mining Terabyte Sized Time Series</p>
    <p>Jin Shieh, Eamonn Keogh</p>
    <p>Computer Science &amp; Eng. Dept.</p>
    <p>University of California, Riverside</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction  Motivating example</p>
    <p>iSAX representation  Indexing time series</p>
    <p>Experimental evaluation</p>
    <p>Conclusion</p>
  </div>
  <div class="page">
    <p>Introduction</p>
    <p>Our work extends a popular symbolic representation of time series to allow for the indexing and retrieval of millions of time series</p>
    <p>Symbolic Aggregate approXimation (SAX)  Represent a time series T of length n in w</p>
    <p>dimensional space using PAA  Where the ith element of is:</p>
    <p>Then discretize into a vector of symbols  Breakpoints map to a small alphabet a of symbols</p>
    <p>i</p>
    <p>ij jn</p>
    <p>w i</p>
    <p>w n</p>
    <p>w n</p>
    <p>Tt 1)1(</p>
    <p>-3</p>
    <p>-2</p>
    <p>-1</p>
    <p>iSAX(T,4,4)</p>
    <p>-3</p>
    <p>-2</p>
    <p>-1</p>
    <p>A time series T PAA(T,4)</p>
    <p>-3</p>
    <p>-2</p>
    <p>-1</p>
  </div>
  <div class="page">
    <p>Introduction (cont.)</p>
    <p>SAX is lower bounding</p>
    <p>Given a SAX representations Ta, Sa a lower bound to the Euclidean distance is:</p>
    <p>MINDIST(Ta, Sa)</p>
    <p>dist(ti,si) is the smallest distance between the breakpoints that characterize each symbol, 0 if they overlap</p>
    <p>w</p>
    <p>i iiw n stdist</p>
  </div>
  <div class="page">
    <p>Motivating Example</p>
    <p>Why not just index using SAX?</p>
    <p>For example: index 1,000,000 time series using SAX  Choose SAX parameters</p>
    <p>cardinality = 8, wordlength = 4  84 = 4,096 possible SAX word labels</p>
    <p>Place time series which map to the same label in the same file on disk</p>
    <p>Compute label for query and retrieve matching file  Time series in file likely to be good approximate</p>
    <p>matches</p>
    <p>Average label occupancy 1,000,000/4,096 = ~244 (reasonable)</p>
  </div>
  <div class="page">
    <p>Motivating Example (cont.)</p>
    <p>In practice, the distribution of time series to SAX word labels is not uniform!  Empty  Disproportionate percentage of the dataset</p>
    <p>Ideal condition: We want to give a threshold th, and have the number of entries n mapped to a label to be 1  n  th  Favor larger n</p>
    <p>How can we achieve this? We need to make SAX more flexible</p>
  </div>
  <div class="page">
    <p>iSAX Representation</p>
    <p>SAX uses a single hard-coded cardinality  Unable to differentiate only on dimensions of</p>
    <p>interest</p>
    <p>We will show that the indexing problem can be solved if we extend SAX to allow:  Different cardinalities within a single word  Comparison of words with different</p>
    <p>cardinalities</p>
    <p>We call this extension indexable SAX (iSAX)</p>
  </div>
  <div class="page">
    <p>iSAX Representation (cont.)</p>
    <p>Multi-resolution property  Readily convert to any lower resolution that differs</p>
    <p>by a power of two</p>
    <p>Lower bounding distance between iSAX words enforced through examination of both sets of breakpoints</p>
    <p>iSAX offers a bit aware, quantized, multi-resolution representation with variable granularity</p>
    <p>{12,13, 6, 1} = {1100,1101,0110,0001} { 6, 6, 3, 0} = {110 ,110 ,011 ,000 } { 3, 3, 1, 0} = {11 ,11 ,01 ,00 } { 1, 1, 0, 0} = {1 ,1 ,0 ,0 }</p>
  </div>
  <div class="page">
    <p>Indexing with iSAX</p>
    <p>Split a set of time series represented by a common iSAX word into mutually exclusive subsets (using multi-resolution property):  Increase cardinality along dimensions d, word length w,</p>
    <p>Iterative doubling  Given a base cardinality b, cardinality at i-th increase is</p>
    <p>b*2i</p>
    <p>Alignment of breakpoints overlap</p>
    <p>Allows for index structures which are hierarchical, with non-overlapping regions, and a controlled fan-out rate</p>
  </div>
  <div class="page">
    <p>Indexing with iSAX (cont.)  Simple tree-based index (base cardinality b, word length w, threshold th)</p>
    <p>Hierarchically subdivides SAX space until entries in each subspace falls within th</p>
    <p>Leaf nodes point to index files on disk  Internal nodes designate a split in SAX space</p>
    <p>Approximate Search  Similar time series often represented by same iSAX word  Traverse index until leaf</p>
    <p>Match iSAX representation at each level  Apply heuristics if no match</p>
    <p>Exact Search  Leverage approximate search  Prune search space</p>
    <p>Lower bounding distance</p>
  </div>
  <div class="page">
    <p>Experimental Evaluation</p>
    <p>We conduct experiments to identify characteristics of the iSAX representation:</p>
    <p>Tightness of the lower bound</p>
    <p>Indexing performance on massive datasets</p>
    <p>Applicability to data-mining algorithms</p>
  </div>
  <div class="page">
    <p>Tightness of Lower Bounds</p>
    <p>TLB = LowerBoundDist(T,S) / EuclideanDist(T,S)</p>
    <p>For a given dataset  Time series length [480, 960, 1440, 1920]  Bytes available for representation [16, 24,</p>
    <p>iSAX, DCT, ACPA, DFT, PAA/DWT, CHEB, IPLA</p>
    <p>Koski ECG</p>
    <p>T L</p>
    <p>B</p>
    <p>Koski ECG dataset</p>
    <p>Time series Length</p>
    <p>B yt</p>
    <p>es A</p>
    <p>va ila</p>
    <p>bl e</p>
  </div>
  <div class="page">
    <p>Indexing Performance on Massive Datasets</p>
    <p>Indexed random walk datasets of [1, 2, 4, 8] million time series of length 256  Parameters: b = 4, w = 8, th = 100  Generated [39,255, 57,365, 92,209, 162,340] index files</p>
    <p>Approximate Search (1000 queries):</p>
    <p>Exact Search (100 queries):</p>
    <p>At least 1 from top 100</p>
    <p>At least 1 from top 10</p>
    <p>Size of Random Walk Database</p>
    <p>Percentage of Queries</p>
    <p>Avg. Time/Query (min)</p>
    <p>Exact Search 3.8 5.8 9.0 14.1</p>
    <p>Sequential Scan</p>
    <p>Avg. Disk Accesses/Query</p>
    <p>Exact Search 2115.3 3172. 5</p>
    <p>Sequential Scan 39255 57365 92209 16234 0</p>
  </div>
  <div class="page">
    <p>Data Mining</p>
    <p>Definition: Time Series Set Difference (TSSD) (A,B). Given two collections of time series A and B, the time series set difference is the subsequence in A whose distance from its nearest neighbor in B is maximal</p>
    <p>Electrocardiogram dataset from a 45 year old male subject with suspected sleep-disordered breathing  7.2 hours as reference set B (1,000,000 time series)  8 minutes 39 seconds as novel set A (20,000 time</p>
    <p>series) where the patient woke up</p>
    <p>-4</p>
    <p>The Time Series Set Difference discovered between ECGs recorded during a waking cycle and the previous 7.2 hours (respiration pattern change in accordance with change in sleep stages)</p>
  </div>
  <div class="page">
    <p>Data Mining (cont.)  Solutions:</p>
    <p>Order A by approximate search distance in a queue  Perform exact search using index on B in descending</p>
    <p>distance  Suspend if distance becomes lower than next entry in</p>
    <p>the queue  If search completes, return as TSSD</p>
    <p>Distance Computations Disk Accesses Est. Time</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Introduced the iSAX representation and shown how it can be used for indexing time series</p>
    <p>Demonstrated scalability and efficacy on massive datasets</p>
    <p>Showed how approximate and exact search can be used in conjunction to produce exact results on data mining problems</p>
  </div>
  <div class="page">
    <p>THANK YOU!</p>
  </div>
</Presentation>
