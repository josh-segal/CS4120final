<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Auto-sizing for Stream Processing Applications at LinkedIn</p>
    <p>Rayman Preet Singh, Bharath Kumarasubramanian, Prateek Maheshwari, and Samarth Shetty Stream Processing @ LinkedIn</p>
  </div>
  <div class="page">
    <p>Stream Processing</p>
    <p>Streaming input, nearline processing</p>
    <p>App</p>
    <p>Skills</p>
    <p>Jobs</p>
    <p>Top Skills</p>
  </div>
  <div class="page">
    <p>John Doe</p>
    <p>Samza: Stateful Scalable Stream Processing at LinkedIn Proc. VLDB  17</p>
    <p>Stream Processing App Example</p>
  </div>
  <div class="page">
    <p>Real-time distributed tracing for web performance and efficiency optimizations LinkedIn Engineering Blog</p>
    <p>Front-end Feed Service</p>
    <p>URN Resolution Service</p>
    <p>Profile Service</p>
    <p>Notification Service</p>
    <p>Profile Service</p>
    <p>DB Service</p>
    <p>Mini-profile Service</p>
    <p>Graph Service</p>
    <p>Stream Processing App Example</p>
  </div>
  <div class="page">
    <p>LinkedIn Sales and EMEA Blog</p>
    <p>Stream Processing App Example</p>
  </div>
  <div class="page">
    <p>Stream Processing at LinkedIn</p>
    <p>At LinkedIn, thousands of apps Notification, monitoring, recommendation, fraud-detection, search,</p>
    <p>Millions of messages/s, 100s of GBs/s,</p>
    <p>App</p>
    <p>Skills</p>
    <p>Jobs</p>
    <p>Top Skills</p>
  </div>
  <div class="page">
    <p>Stream Processing at LinkedIn</p>
    <p>App-1</p>
    <p>Stream Processing as a Service</p>
    <p>App-2 App-3</p>
    <p>App developers Data scientists</p>
    <p>APIs Capacity provisioning Security &amp; privacy Operational ease</p>
    <p>Scalability Fault-tolerance Efficiency Performance</p>
  </div>
  <div class="page">
    <p>Problem</p>
    <p>Throughput, Latency</p>
    <p>Parallelism CPU-cores, #threads,</p>
    <p>Memory Heap, native,</p>
    <p>Specialized hardware GPUs, RDMA,</p>
    <p>Over-provisioning 50% of users by approx. 50%, Google-Autopilot [EuroSys20],</p>
    <p>Under-provisioning OOMs, stalls, failures, under-performing, ...</p>
  </div>
  <div class="page">
    <p>Solution</p>
    <p>App Controller</p>
    <p>Throughput, Latency goals Input load App internals Environmental conditions</p>
    <p>Dependency-service, network latencies,  Hardware, software evolution</p>
    <p>Sizing parameters</p>
  </div>
  <div class="page">
    <p>Existing Solutions</p>
    <p>Apps are DAGs of cataloged operators SoCC 17, VLDB 17, ToN 17, OSDI 18, ICDE 15, ICDE 20, IC2E 16,</p>
    <p>Tune parallelism</p>
    <p>Optimize throughput, latency, utilization, time-taken</p>
    <p>Arrival rates, service-times follow specific distributions ToN 17, ICDE 15,</p>
    <p>Poisson, exponential,</p>
    <p>Tune parallelism  queuing theory, hill-climb,</p>
    <p>Map</p>
    <p>Join</p>
    <p>Filter</p>
    <p>FilterFilterFilter</p>
  </div>
  <div class="page">
    <p>Apps use remote services</p>
    <p>Op1</p>
    <p>Op3</p>
    <p>UDF</p>
    <p>Op2</p>
    <p>Web Service</p>
    <p>Blob Storage</p>
    <p>KV Store</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>Service time (in ms)</p>
    <p>CDF of service time (ms)</p>
    <p>App 1 App 2 App 3 App 4</p>
    <p>Service time depends on remote services latencies, error-rates &amp; retries, network latencies,  No specific distribution of service-times</p>
  </div>
  <div class="page">
    <p>Apps use remote services</p>
    <p>Time-series of input load for sample apps</p>
    <p>Throughput depends on input load variation and remote services throughput</p>
    <p>Op1</p>
    <p>Op3</p>
    <p>UDF</p>
    <p>Op2</p>
    <p>Web Service</p>
    <p>Blob Storage</p>
    <p>KV Store</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>In pu</p>
    <p>tl oa</p>
    <p>d (m</p>
    <p>es sa</p>
    <p>ge s</p>
    <p>pe r</p>
    <p>se c)</p>
  </div>
  <div class="page">
    <p>No specific distributions of arrival-rates</p>
    <p>Arrival rate (messages/sec)</p>
    <p>CDF of arrival-rate (messages/sec)</p>
    <p>App 1 App 2 App 3 App 4</p>
  </div>
  <div class="page">
    <p>Apps go beyond a DAG of operators</p>
    <p>Additional functionalities External frameworks</p>
    <p>TensorFlow, DL4j,  Out-of-order processing Input priorities State User-defined functions (UDFs) Customized input checkpointing</p>
    <p>Op1</p>
    <p>Op3</p>
    <p>UDF</p>
    <p>Op2</p>
    <p>Periodic UDF</p>
    <p>Client Cache</p>
    <p>State</p>
    <p>Web Service</p>
    <p>Blob Storage</p>
    <p>KV Store</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>External Frameworks</p>
  </div>
  <div class="page">
    <p>Apps go beyond a DAG of operators</p>
    <p>Heterogenous combinations of functionalities</p>
    <p>DAG-only based models are insufficient</p>
  </div>
  <div class="page">
    <p>Apps exhibit correlations in resource use</p>
    <p>CPU bottleneck  Input buffering  Memory use Lowered throughput</p>
    <p>Java-based apps Apache Flink, Samza,  Memory bottleneck  GC overhead  Low throughput, High latency &amp; CPU utilization</p>
  </div>
  <div class="page">
    <p>Long-tail distributions of app characteristics</p>
    <p>c ti</p>
    <p>o n</p>
    <p>o f</p>
    <p>a p</p>
    <p>p li</p>
    <p>c a ti</p>
    <p>o n</p>
    <p>s</p>
    <p>Application p50 service time (ms)</p>
    <p>CDF of application p50 service time (ms)</p>
  </div>
  <div class="page">
    <p>Long-tail distributions of app characteristics</p>
    <p>c ti</p>
    <p>o n o</p>
    <p>f a p p li</p>
    <p>c a ti</p>
    <p>o n s</p>
    <p>Number of input streams</p>
    <p>CDF of number of input streams (per application)</p>
  </div>
  <div class="page">
    <p>Long-tail distributions of app characteristics</p>
    <p>F ra</p>
    <p>c ti</p>
    <p>o n o</p>
    <p>f a p p li</p>
    <p>c a ti</p>
    <p>o n s</p>
    <p>Application state (in MB)</p>
    <p>CDF of application state size (MB)</p>
  </div>
  <div class="page">
    <p>Requirements</p>
    <p>App Controller</p>
    <p>Right size vs. optimal size Operational ease</p>
    <p>Interpretable Safe-trajectory</p>
    <p>Minimize time-taken Scalable, fault-tolerant, efficient,</p>
    <p>Sizing parameters</p>
  </div>
  <div class="page">
    <p>Approach</p>
    <p>Black-box approaches Azure-VMSS, AWS-EC2 autoscale, Dhalion VLDB 17, .. Interpretable Right sizing Time-taken, oscillations [DS2 OSDI18, Turbine ICDE 20]</p>
    <p>Undo, redo, refine,</p>
  </div>
  <div class="page">
    <p>Approach</p>
    <p>Optimization approaches Bilal et al. SoCC 17, Gencer et al. Middleware 15,  Training data (trial runs), parameter &amp; criteria tuning, assumptions,  Optimal sizing, minimize time-taken</p>
    <p>Operability (interpretable actions), service dependencies, network, ..</p>
  </div>
  <div class="page">
    <p>Sage Design</p>
    <p>Feedback control system Policies encapsulate strategies for sizing a single resource</p>
    <p>Priority order Periodically on all apps Only if, no inflight action on app</p>
  </div>
  <div class="page">
    <p>Sage Design</p>
    <p>Policy priority order Deterministic -- interpretable, modifiable, .. Programmability for policies</p>
    <p>Tailored to continuous-operator systems like Apache Samza, Flink,  P1: Memory scale-up P2: CPU scale-up P3: Parallelism tuning</p>
  </div>
  <div class="page">
    <p>Sage Design</p>
    <p>Straggling app Increase memory? CPU? Parallelism?</p>
    <p>Bounded buffers Tuning memory before CPU</p>
    <p>Tuning parallelism Triggered by backlog increases (after P1, P2) Correlation with remote service metrics?</p>
    <p>TLCC (time-lagged cross-correlation)</p>
    <p>P1: Memory scale-up P2: CPU scale-up P3: Parallelism tuning</p>
    <p>Op1</p>
    <p>Op3</p>
    <p>UDF</p>
    <p>Op2</p>
    <p>Periodic UDF</p>
    <p>Client Cache</p>
    <p>State</p>
    <p>Web Service</p>
    <p>Blob Storage</p>
    <p>KV Store</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>External Frameworks</p>
  </div>
  <div class="page">
    <p>Implementation</p>
    <p>Work in progress</p>
    <p>Implemented as a stream processing app</p>
    <p>Used for hundreds of production mix of apps Avg. approx. 30 mins for new apps 14% larger size vs. hand-tuned optimal (selected apps) At-most one scale-down for each resource</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Resource sizing is crucial for any services performance, usability, operability, ...</p>
    <p>Streaming apps go beyond DAG of operators Use remote services Customize functionalities, heterogeneous Widely varying workloads</p>
    <p>Multiple resource-use, performance, cost, operability trade-offs Sage: a rule-based solution to navigate them in production</p>
  </div>
  <div class="page">
    <p>Backup slides</p>
  </div>
  <div class="page">
    <p>Long-tail distributions of app characteristics</p>
  </div>
  <div class="page">
    <p>Apps use remote services</p>
    <p>Op1</p>
    <p>Op3</p>
    <p>UDF</p>
    <p>Op2</p>
    <p>Web Service</p>
    <p>Blob Storage</p>
    <p>KV Store</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>Service time (in ms)</p>
    <p>CDF of service time (ms)</p>
    <p>App 1 App 2 App 3 App 4</p>
    <p>Service time depends on remote services latencies, error-rates &amp; retries, network latencies,  No specific distribution</p>
    <p>Throughput depends on input load variation and remote services throughput No specific distribution</p>
    <p>Arrival rate (messages/sec)</p>
    <p>CDF of arrival-rate (messages/sec)</p>
    <p>App 1 App 2 App 3 App 4</p>
  </div>
  <div class="page">
    <p>Apps go beyond a DAG of operators</p>
    <p>Additional functionalities External frameworks</p>
    <p>TensorFlow, DL4j,  Out-of-order processing Input priorities State User-defined functions (UDFs) Customized input checkpointing</p>
    <p>Apps combine operators and functionalities in different ways Heterogenous mix</p>
    <p>Op1</p>
    <p>Op3</p>
    <p>UDF</p>
    <p>Op2</p>
    <p>Periodic UDF</p>
    <p>Client Cache</p>
    <p>State</p>
    <p>Web Service</p>
    <p>Blob Storage</p>
    <p>KV Store</p>
    <p>.</p>
    <p>.</p>
    <p>.</p>
    <p>External Frameworks</p>
  </div>
  <div class="page">
    <p>Apps exhibit correlations in resource use</p>
    <p>CPU bottleneck  Input buffering  Memory use Lowered throughput</p>
    <p>Java-based apps Apache Flink, Samza,  Memory bottleneck  GC overhead  Low throughput, High latency &amp; CPU utilization</p>
  </div>
  <div class="page">
    <p>Sage Design</p>
    <p>Feedback control system Policies encapsulate strategies for sizing a single resource</p>
    <p>Priority order Periodically on all apps Only if, no inflight action on app</p>
  </div>
  <div class="page">
    <p>Sage Design</p>
    <p>Policy priority order Deterministic -- interpretable, modifiable, .. Programmability for policies</p>
    <p>Tailored to continuous-operator systems like Apache Samza, Flink,  P1: Memory scale-up P2: CPU scale-up P3: Parallelism tuning</p>
  </div>
  <div class="page">
    <p>Used for hundreds of production mix of apps Avg. approx. 30 mins for new apps 14% larger size vs. hand-tuned optimal (selected apps) At-most one scale-down for each resource</p>
    <p>Work in Progress</p>
  </div>
  <div class="page">
    <p>Resource sizing is crucial for any services performance, usability, operability, ...</p>
    <p>Streaming apps go beyond DAG of operators Use remote services Customize functionalities, heterogeneous Widely varying workloads</p>
    <p>Multiple resource-use, performance, cost, operability trade-offs Sage: a rule-based solution to navigate them in production</p>
    <p>Summary</p>
  </div>
  <div class="page">
    <p>Long-tail distributions of app characteristics</p>
    <p>c ti</p>
    <p>o n</p>
    <p>o f</p>
    <p>a p</p>
    <p>p li</p>
    <p>c a ti</p>
    <p>o n</p>
    <p>s</p>
    <p>Application p50 service time (ms)</p>
    <p>CDF of application p50 service time (ms)</p>
    <p>c ti</p>
    <p>o n o</p>
    <p>f a p p li</p>
    <p>c a ti</p>
    <p>o n s</p>
    <p>Number of input streams</p>
    <p>CDF of number of input streams (per application)</p>
    <p>F ra</p>
    <p>c ti</p>
    <p>o n o</p>
    <p>f a p p li</p>
    <p>c a ti</p>
    <p>o n s</p>
    <p>Application state (in MB)</p>
    <p>CDF of application state size (MB)</p>
  </div>
</Presentation>
