<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Boundary Recognition in Sensor Networks by Topological Methods</p>
    <p>Yue Wang, Jie Gao, Joseph S.B. Mitchell Stony Brook University</p>
    <p>MobiCom 2006 Sep. 26 - 28, Los Angeles, USA</p>
  </div>
  <div class="page">
    <p>The Problem: Boundary Detection in Sensor Networks</p>
    <p>Input: Communication graph  no knowledge of the node</p>
    <p>locations  not require the unit disk</p>
    <p>graph model</p>
    <p>Output: The boundary nodes  outer boundary and inner boundaries (holes)  connects them into meaningful boundary cycles</p>
  </div>
  <div class="page">
    <p>Applications of boundary detection I</p>
    <p>Monitor the physical environment  Sensors with readings &gt; a threshold</p>
    <p>considered dead.</p>
    <p>Find the contour of abnormal chemical contamination, or overheated sensors.</p>
    <p>Indicate the health of sensor network  Detect the breakdown of network</p>
    <p>Insufficient coverage or connectivity</p>
  </div>
  <div class="page">
    <p>Applications of boundary detection II</p>
    <p>Aid sensor deployment  Guarantee the newly added sensors in the</p>
    <p>expected region</p>
    <p>Help to design topology-adaptive network protocols  Virtual coordinates for routing (e.g., medial</p>
    <p>axis).</p>
  </div>
  <div class="page">
    <p>Quasi-Voronoi diagram and the medial axis diagram</p>
    <p>Medial axis can be used to construct virtual coordinates for efficient point-to-point routing.</p>
  </div>
  <div class="page">
    <p>Related Work  Geometric methods [FGG06]</p>
    <p>Assume nodes know their locations.</p>
    <p>Statistical methods [FKPFB04][FKKL05]  Assume a probabilistic distribution of sensor</p>
    <p>deployment, e.g., Poisson distribution.  Typically requires a high node density.</p>
    <p>Topological methods [GM05][KFPF06][F05]  Use connectivity only.  [GM05] homology centralized approach.  [KFPF06] Quasi-Unit disk graph model.  [F05] Discover the breaking of flooding contours.</p>
  </div>
  <div class="page">
    <p>Our contribution</p>
    <p>A practical algorithm that  No location information.</p>
    <p>Not assume unit disk graph model (that is too idealistic).</p>
    <p>Works well in low-density network (average degree 6~7).</p>
    <p>Scenario: network initialization.</p>
  </div>
  <div class="page">
    <p>Our Contribution, cont.</p>
    <p>We output boundary nodes connected into cycles.</p>
    <p>Provide numerous topological and geometric features  E.g., # holes (genus), the nearest hole to</p>
    <p>any given sensor, medial axis</p>
    <p>Theoretical guarantee:  prove the algorithm correctly finds all</p>
    <p>boundaries in the continuous case</p>
  </div>
  <div class="page">
    <p>Our Contribution, cont.</p>
  </div>
  <div class="page">
    <p>Topological Boundary Recognition</p>
    <p>Basic Idea:  Exploit special structure of the shortest path tree</p>
    <p>to detect the existence of holes.</p>
    <p>Step 1: Build a shortest path tree by flooding  Step 2: Find cuts in the shortest path tree  Step 3: Detect a coarse inner boundary  Step 4: Find extremal nodes  Step 5: Find the outer boundary and refine</p>
    <p>the coarse inner boundary  Step 6: Restore the inner boundary</p>
  </div>
  <div class="page">
    <p>flood the network from an arbitrary root node.</p>
    <p>Step 1: Build a shortest path tree by flooding</p>
  </div>
  <div class="page">
    <p>Step 2: Find cuts in the shortest path tree</p>
    <p>The flow of the shortest path tree forks near a hole, continues along opposite sides of the hole and then meets again past the hole.</p>
  </div>
  <div class="page">
    <p>A cut pair (p, q) is two neighboring nodes, s.t.,  The (hop) distance between p or q and LCA is</p>
    <p>above a threshold 1  The maximum (hop) distance between a node on the</p>
    <p>path from p to y and the path from q to y in the shortest path tree is above a threshold 2</p>
    <p>Step 2: Find cuts in the shortest path tree  cont.</p>
    <p>Least common ancestor</p>
  </div>
  <div class="page">
    <p>Step 2: Find cuts in the shortest path tree  cont.</p>
    <p>The cut pair will locally connect themselves into connected components  Each cut branch corresponds to a cut connected component</p>
    <p>cut branch</p>
  </div>
  <div class="page">
    <p>Step 2: Find cuts in the shortest path tree  cont.</p>
    <p>Relation between #The cut branches and # holes</p>
    <p>Multiple holes and multiple cut branches: merge the holes into a single hole</p>
    <p>remove nodes on cut branches, until there is only one composite hole left.</p>
  </div>
  <div class="page">
    <p>Step 3: Detect a coarse inner boundary R</p>
    <p>A coarse inner boundary R is a shortest cycle enclosing the interior hole in the sensor field.</p>
    <p>Not tight for concave hole.</p>
  </div>
  <div class="page">
    <p>An extremal node: hop count to nodes in R is locally maximal.  on the outer boundary or the ridges of the</p>
    <p>real inner boundary of a concave hole</p>
    <p>Step 4: Find extremal nodes Differentiate</p>
    <p>extremal nodes on different sides of R: details in the paper.</p>
  </div>
  <div class="page">
    <p>Force (inner and outer) boundaries to go through extremal nodes.</p>
    <p>Step 5: Find the outer boundary and refine the coarse inner boundary</p>
  </div>
  <div class="page">
    <p>Undelete the cut nodes we removed earlier and restore the correct boundary</p>
    <p>Step 6: Restore the boundary</p>
  </div>
  <div class="page">
    <p>Thm: Alg is Correct in the Continuous Case</p>
    <p>In a continuous domain with polygon holes, our algorithm finds the correct boundaries.</p>
    <p>Any shape can be approximated by polygons.A shortest path map SPM(r)</p>
    <p>SPM-vertex</p>
  </div>
  <div class="page">
    <p>Effect of Node Distribution and Density</p>
    <p>Random distribution  Very good results for graphs with avg deg &gt;= 10</p>
    <p>For very low deg (&lt; 10), take 2-hop / 3-hop neighbors as fake 1-hop neighbors</p>
    <p>Grid with random perturbation  Gives good results for graphs with avg deg &gt;=6</p>
    <p>Low density, sparse graph  Performs well even in such cases</p>
  </div>
  <div class="page">
    <p>Avg deg = 7 1-hop</p>
    <p>Avg deg = 7 3-hop (12)</p>
    <p>Avg deg = 13 Avg deg = 16Avg deg = 10</p>
    <p>Random Distribution of Sensors</p>
    <p>Avg deg = 7 2-hop (9)</p>
  </div>
  <div class="page">
    <p>Avg deg = 6 Avg deg = 8 Avg deg = 12</p>
    <p>Grid with Random Perturbation</p>
    <p>Low Density, Sparse Deployment</p>
  </div>
  <div class="page">
    <p>Complexity of the algorithm</p>
    <p>2 rounds of flooding.  Step 1, flooding for a shortest path tree.</p>
    <p>Step 4, flood from coarse inner boundary.</p>
    <p>Most other operations are local shortcutting.</p>
  </div>
  <div class="page">
    <p>Discussion</p>
    <p>The precision of our method  There may be more than one shortest paths</p>
    <p>between two nodes based only on the hop-count  lower deg nodes are more likely to be on the boundary  use iterative method to find more extremal nodes</p>
    <p>the correct orderings of the extremal nodes</p>
    <p>Incorporate partial location, location or angular information.</p>
    <p>no hole case?  Algorithm will output no hole.  Artificially cut a hole to find outer boundary.</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>A practical algorithm for boundary detection with only connectivity information.</p>
    <p>Future work:  topology-adaptive algorithms by using</p>
    <p>boundaries for localization, routing, etc.</p>
  </div>
</Presentation>
