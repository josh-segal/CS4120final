<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>NightWatch: Integrating Transparent Cache Pollution Control</p>
    <p>into Dynamic Memory Allocation Systems</p>
    <p>Rentong Guo1, Xiaofei Liao1, Hai Jin1, Jianhui Yue2, Guang Tan3</p>
  </div>
  <div class="page">
    <p>Malloc System</p>
    <p>DRAM</p>
    <p>int* chunk = malloc(size);</p>
    <p>Malloc System</p>
    <p>A system managing main memory</p>
    <p>User Program Malloc System</p>
    <p>Malloc Request</p>
    <p>Free Memory</p>
  </div>
  <div class="page">
    <p>The Whole Picture</p>
    <p>A system allocating resources across multiple hardware layers</p>
    <p>Malloc System DRAM</p>
    <p>CPU Cache</p>
    <p>Memory Bank</p>
    <p>Page frame</p>
    <p>Virtual addr</p>
    <p>Cache set</p>
    <p>Memory Bank</p>
    <p>Physically Indexed</p>
  </div>
  <div class="page">
    <p>Cache Resource Allocation</p>
    <p>Virtual Page Chunk A</p>
    <p>Page Frame</p>
  </div>
  <div class="page">
    <p>Cache Resource Allocation A A A ACPU Cache</p>
    <p>Virtual Page Chunk A</p>
    <p>(Normal chunk)</p>
    <p>Page Frame</p>
  </div>
  <div class="page">
    <p>Data Chunks Have Different Access Locality Pattern</p>
  </div>
  <div class="page">
    <p>Cache Resource Allocation A B</p>
    <p>A B</p>
    <p>A A B B</p>
    <p>CPU Cache</p>
    <p>Virtual Page Chunk A</p>
    <p>(Normal chunk) Chunk B</p>
    <p>(polluter chunk)</p>
    <p>Page Frame</p>
    <p>Maximize Pollution</p>
  </div>
  <div class="page">
    <p>Cache Resource Allocation</p>
    <p>CPU Cache</p>
    <p>Virtual Page Chunk A</p>
    <p>(Normal chunk) Chunk B</p>
    <p>(polluter chunk)</p>
    <p>Page Frame</p>
  </div>
  <div class="page">
    <p>Cache Resource Allocation A A A ACPU Cache</p>
    <p>Virtual Page Chunk A</p>
    <p>(Normal chunk) Chunk B</p>
    <p>(polluter chunk)</p>
    <p>Page Frame</p>
    <p>Open Mapping: For normal chunk</p>
  </div>
  <div class="page">
    <p>Cache Resource Allocation A A A A</p>
    <p>B B B</p>
    <p>B CPU Cache</p>
    <p>Virtual Page Chunk A</p>
    <p>(Normal chunk) Chunk B</p>
    <p>(polluter chunk)</p>
    <p>Page Frame</p>
    <p>Open Mapping: For normal chunk</p>
    <p>Restrictive Mapping: For polluter chunk</p>
    <p>Cache Jail</p>
  </div>
  <div class="page">
    <p>The Big Picture</p>
    <p>Operating System</p>
    <p>Malloc System</p>
    <p>Free Memory under Open Mapping</p>
    <p>Free Memory under Restrictive Mapping</p>
    <p>Chunk Classification ?</p>
    <p>User Program chunk</p>
  </div>
  <div class="page">
    <p>Chunk Classification</p>
    <p>int* chunk = malloc(size); ?</p>
    <p>Polluter Chunk</p>
    <p>Normal Chunk</p>
    <p>The sampling should be Lightweight, and should be built upon commodity hardware support</p>
    <p>Virtual Address</p>
    <p>chunk</p>
    <p>size</p>
    <p>Sampling data access of this region, and estimate locality</p>
  </div>
  <div class="page">
    <p>Sampling Chunk Access</p>
    <p>CPU Cache</p>
    <p>#jail block #cache blockchunk size</p>
    <p>Sampled page</p>
    <p>time</p>
    <p>Skip burst access period: Stop page access detection until cache access == #jail block</p>
    <p>if cache miss &gt; #cache block then 2nd page access is cache miss</p>
  </div>
  <div class="page">
    <p>Sampling Chunk Access</p>
    <p>Cache miss estimation false rate</p>
    <p>if cache miss &gt; #cache block then 2nd page access is cache miss is conservative estimation for cache miss.</p>
    <p>Cache Miss  Cache Hit</p>
  </div>
  <div class="page">
    <p>Intra-Chunk Locality Similarity</p>
    <p>chunk size</p>
    <p>Do we need to sample every page of a chunk? only if pages differ significantly in their locality properties</p>
    <p>img-&gt;mb_data = calloc(img-&gt;FrameSizeInMbs, sizeof(Macroblock)); ...... /* encode a picture */ while (NumberOfCodedMBs &lt; img-&gt;total_number_mb){ ...... /* encode a macroblock in img-&gt;mb_data */ encode_one_macroblock (); NumberOfCodedMBs++; }</p>
  </div>
  <div class="page">
    <p>For the 27 programs tested: Within chunks, 99% pages have a similar cache miss rate.</p>
    <p>Intra-Chunk Locality Similarity</p>
  </div>
  <div class="page">
    <p>Intra-Chunk Locality Similarity</p>
    <p>For a chunk with N pages, only N0.65 pages need to be sampled to guarantee &gt;95% monitoring accuracy</p>
  </div>
  <div class="page">
    <p>Is An Efficient Monitor Enough?</p>
    <p>Operating System</p>
    <p>Malloc System</p>
    <p>Free Memory under Open Mapping</p>
    <p>Free Memory under Restrictive Mapping</p>
    <p>User Program</p>
    <p>Locality Monitor</p>
    <p>chunk</p>
    <p>Default Mapping</p>
    <p>(1)</p>
    <p>Default Mapping Mismatch Locality? (Not Fast Enough)</p>
    <p>Call Remapping (Cost)(2)</p>
    <p>(3)</p>
  </div>
  <div class="page">
    <p>Chunk Type Prediction Can we know the Chunks type BEFORE it is used?</p>
    <p>for (img-&gt;number=0; img-&gt;number &lt; input-&gt;no_frames; img-&gt;number++) {  buf = malloc (xs * ys * symbol_size_in_bytes); /* read one frame */ read(p_in, buf, bytes_y); /* convert file read buffer to source picture structure */ buf2img(imgY_org_frm, buf, xs, ys, symbol_size_in_bytes);  free (buf); }</p>
    <p>malloc() 0x3FF..2E ld_frame() 0x80A3633  main() 0x8048757 _start() 0xAF9C37</p>
    <p>Call stack</p>
  </div>
  <div class="page">
    <p>Enough Opportunity for Prediction</p>
    <p># of chunks per call stack Chunks that do not share</p>
    <p>call stack</p>
  </div>
  <div class="page">
    <p>Inter-Chunk Locality Similarity</p>
    <p>Over 90% of the chunks have a same miss rate with other chunks that share the same call stack</p>
  </div>
  <div class="page">
    <p>Chunk Type Prediction Accuracy</p>
    <p>Average Prediction Success Rate: 95.5%</p>
  </div>
  <div class="page">
    <p>Put Everything Together</p>
    <p>Operating System</p>
    <p>Malloc System</p>
    <p>Free Memory under Open Mapping</p>
    <p>Free Memory under Restrictive Mapping</p>
    <p>User Program Old chunkNew chunk</p>
    <p>Locality Monitor</p>
    <p>Locality Profile</p>
    <p>(1) Chunk Type Predictor</p>
    <p>(2)</p>
    <p>(3)</p>
  </div>
  <div class="page">
    <p>Experiment Setup Benchmark Program Classifications</p>
    <p>Category Cache sensitivity(Slowdown with 1/8 Cache ) cache access rate</p>
    <p>(#access per 1k cycle) Programs</p>
    <p>Polluter &lt; 10% &gt; 5 410.bwaves 433.milc 459.GemsFDTD 462.libquantum 481.wrf</p>
    <p>Victim &gt; 20% -401.bzip2 403.gcc 429.mcf 447.dealII 450.soplex 470.lbm 471.omnetpp 473.astar 482.sphinx3 483.xalancbmk</p>
    <p>Neutral [10%, 20%] &lt; 5</p>
  </div>
  <div class="page">
    <p>Performance Evaluations</p>
    <p>Victim Polluter Neutral</p>
    <p>Polluter + Victim Victims average speedup 1.18, highest speedup 1.45</p>
    <p>NightWatch retains system performance when it cannot bring improvement</p>
    <p>NightWatch+tcmalloc vs. tcmalloc</p>
  </div>
  <div class="page">
    <p>Overhead = TNightWatch / TTotal Average overhead 0.57%, Maximum overhead 3.02%</p>
    <p>Monitors time cost as Sum(Chunk size) increases</p>
    <p>System Overhead</p>
    <p>Predictors time cost as Sum(Chunk number) increases</p>
    <p>Scalability is guaranteed by the Intra-Chunk Locality Similarity And the Inter-Chunk Locality Similarity</p>
  </div>
  <div class="page">
    <p>Conclusions 1. It is not only the memory matters in Malloc</p>
    <p>systems.</p>
  </div>
  <div class="page">
    <p>Why the Name NightWatch?</p>
    <p>Jon Snow and his brothers have contribution for this work.</p>
    <p>The system helps the program protect the cache from being polluted.</p>
  </div>
  <div class="page">
    <p>Questions?</p>
  </div>
</Presentation>
