<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Deterministic Process Groups in</p>
    <p>Tom Bergan Nicholas Hunt, Luis Ceze, Steven D. Gribble</p>
    <p>University of Washington UNIVERSITY OF WASHINGTON HUSKIESPAGE 1JANUARY 6, 2009</p>
    <p>UNIVERSITY OF WASHINGTON HUSKIESPAGE 2JANUARY 6, 2009</p>
    <p>PURPLE</p>
    <p>GOLD</p>
    <p>GRAY</p>
    <p>INSTITUTIONAL PURPLE</p>
    <p>METALLIC GOLD</p>
    <p>WHITE</p>
    <p>PANTONE 5265</p>
    <p>PANTONE 7502</p>
    <p>PANTONE COOL GRAY 11</p>
    <p>PANTONE 273</p>
    <p>PANTONE 871</p>
    <p>WHITE</p>
    <p>NOTE: The marks of The University of Washington are controlled under a licensing program administered by The Collegiate Licensing Company. Any use of these marks will require written approval from The Collegiate Licensing Company.</p>
    <p>For a complete standards manual, please contact the University of</p>
    <p>Washington Licensing Program: 206.685.8600 LOCATION:</p>
    <p>SEATTLE, WA</p>
    <p>MASCOT:</p>
    <p>HUSKY</p>
    <p>MASCOT NICKNAME:</p>
    <p>HARRY</p>
    <p>ESTABLISHED DATE:</p>
    <p>CONFERENCE:</p>
    <p>PAC 10</p>
    <p>University of Washington</p>
    <p>Washington</p>
    <p>Dawgs</p>
    <p>Real Dawgs Wear Purple</p>
    <p>U of W</p>
    <p>U Dub</p>
    <p>U of W Huskies</p>
    <p>UW Huskies</p>
    <p>Husky</p>
    <p>Huskies</p>
    <p>Woof</p>
    <p>Helmet Logo</p>
    <p>Apple Cup</p>
    <p>Opening Day Regatta</p>
    <p>Yes No Restrictions  University seal permitted on products for resale:</p>
    <p>Alterations to seal permitted:</p>
    <p>Overlaying / intersecting graphics permitted with seal:</p>
    <p>University licenses consumables:</p>
    <p>University licenses health &amp; beauty products:</p>
    <p>University permits numbers on products for resale:</p>
    <p>Mascot caricatures permitted:</p>
    <p>Cross licensing with other marks permitted:</p>
    <p>NO USE of current player's name, image, or likeness is permitted on commercial products in violation of NCAA rules and</p>
    <p>regulations.</p>
    <p>NO REFERENCES to alcohol, drugs, or tobacco related products may be used in conjunction with University marks.</p>
    <p>University seal cannot be used on stationary or letterheads by anyone other than Official University departments.</p>
    <p>We encourage the use of our seal on licensed products, but we monitor the approval of items licensed. We want to see it on</p>
    <p>shirts, etc.</p>
    <p>Any other use is approved only with special approval from the University Licensing Office.</p>
    <p>Yes No Restrictions  University seal permitted on products for resale:</p>
    <p>Alterations to seal permitted:</p>
    <p>Overlaying / intersecting graphics permitted with seal:</p>
    <p>University licenses consumables:</p>
    <p>University licenses health &amp; beauty products:</p>
    <p>University permits numbers on products for resale:</p>
    <p>Mascot caricatures permitted:</p>
    <p>Cross licensing with other marks permitted:</p>
    <p>NO USE of current player's name, image, or likeness is permitted on commercial products in violation of NCAA rules and</p>
    <p>regulations.</p>
    <p>NO REFERENCES to alcohol, drugs, or tobacco related products may be used in conjunction with University marks.</p>
    <p>University seal cannot be used on stationary or letterheads by anyone other than Official University departments.</p>
    <p>We encourage the use of our seal on licensed products, but we monitor the approval of items licensed. We want to see it on</p>
    <p>shirts, etc.</p>
    <p>Any other use is approved only with special approval from the University Licensing Office.</p>
    <p>LOCATION:</p>
    <p>SEATTLE, WA</p>
    <p>MASCOT:</p>
    <p>HUSKY</p>
    <p>MASCOT NICKNAME:</p>
    <p>HARRY</p>
    <p>ESTABLISHED DATE:</p>
    <p>CONFERENCE:</p>
    <p>PAC 10</p>
    <p>University of Washington</p>
    <p>Washington</p>
    <p>Dawgs</p>
    <p>Real Dawgs Wear Purple</p>
    <p>U of W</p>
    <p>U Dub</p>
    <p>U of W Huskies</p>
    <p>UW Huskies</p>
    <p>Husky</p>
    <p>Huskies</p>
    <p>Woof</p>
    <p>Helmet Logo</p>
    <p>Apple Cup</p>
    <p>Opening Day Regatta</p>
    <p>PURPLE GOLD GRAY METALLIC GOLDINSTITUTIONAL PURPLE</p>
    <p>MADEIRA 1233</p>
    <p>MADEIRA 1138</p>
    <p>WHITE</p>
    <p>POLY-NEON 1634</p>
    <p>POLY-NEON 1738</p>
    <p>WHITE</p>
    <p>NOTE: The marks of The University of Washington are controlled under a licensing program administered by The Collegiate Licensing Company. Any use of these marks will require written approval from The Collegiate Licensing Company.</p>
    <p>PURPLE</p>
    <p>GOLD</p>
    <p>GRAY</p>
    <p>INSTITUTIONAL PURPLE</p>
    <p>METALLIC GOLD</p>
    <p>WHITE</p>
    <p>PANTONE 5265</p>
    <p>PANTONE 7502</p>
    <p>PANTONE COOL GRAY 11</p>
    <p>PANTONE 273</p>
    <p>PANTONE 871</p>
    <p>WHITE</p>
    <p>PURPLE GOLD GRAY METALLIC GOLDINSTITUTIONAL PURPLE</p>
    <p>MADEIRA 1233</p>
    <p>MADEIRA 1138</p>
    <p>WHITE</p>
    <p>POLY-NEON 1634</p>
    <p>POLY-NEON 1738</p>
    <p>WHITE</p>
  </div>
  <div class="page">
    <p>A Nondeterministic Program global x=0</p>
    <p>t := x x := t + 1</p>
    <p>t := x x := t + 1</p>
    <p>Thread 1 Thread 2</p>
    <p>What is x?</p>
    <p>x == 2 x == 2 x == 1 2</p>
  </div>
  <div class="page">
    <p>Nondeterministic IPC</p>
    <p>recv(..) recv(..)</p>
    <p>Process 1 Process 2</p>
    <p>Who gets msg A?</p>
    <p>send(msg=A) send(msg=B)</p>
    <p>Process 0</p>
    <p>recv(msg=A)</p>
    <p>recv(msg=B) recv(msg=B)</p>
    <p>recv(msg=A)</p>
  </div>
  <div class="page">
    <p>why nondeterministic: multiprocessor hardware is unpredictable</p>
    <p>Nondeterminism In Real Systems</p>
    <p>shared-memory</p>
    <p>IPC (e.g. pipes)</p>
    <p>disks</p>
    <p>why nondeterministic: multiprocessor hardware is unpredictable</p>
    <p>network why nondeterministic: packets arrive from external sources</p>
    <p>posix signals why nondeterministic: unpredictable scheduling, also can be triggered by users</p>
    <p>. . .</p>
    <p>why nondeterministic: drive latency is unpredictable</p>
  </div>
  <div class="page">
    <p>The Problem</p>
    <p>same input, different outputs</p>
    <p>Nondeterminism makes programs . . .  hard to test</p>
    <p>hard to replicate for fault-tolerance</p>
    <p>hard to debug  leads to heisenbugs</p>
    <p>replicas get out of sync</p>
    <p>Multiprocessors make this problem much worse!</p>
  </div>
  <div class="page">
    <p>Our Solution</p>
    <p>New OS abstraction: Deterministic Process Group (DPG)</p>
    <p>Thread1</p>
    <p>Process A</p>
    <p>deterministic box</p>
    <p>OS support for deterministic execution  of arbitrary programs  attack all sources of nondeterminism (not just shared-memory)  even on multiprocessors</p>
    <p>Thread2 Process B</p>
    <p>Thread3</p>
  </div>
  <div class="page">
    <p>Key Questions</p>
  </div>
  <div class="page">
    <p>Key Questions</p>
    <p>- distinguish internal vs. external nondeterminism</p>
  </div>
  <div class="page">
    <p>Internal nondeterminism</p>
    <p>External nondeterminism</p>
    <p>arises from scheduling artifacts (hw timing, etc)</p>
    <p>arises from interactions with the external world (networks, users, etc)</p>
    <p>Fundamental can not be eliminated</p>
    <p>NOT Fundamental can be eliminated!</p>
  </div>
  <div class="page">
    <p>Internal Determinism</p>
    <p>External Nondeterminism</p>
    <p>network</p>
    <p>deterministic box</p>
    <p>users real time</p>
  </div>
  <div class="page">
    <p>Internal Determinism</p>
    <p>External Nondeterminism</p>
    <p>network</p>
    <p>deterministic box</p>
    <p>usersshared memory</p>
    <p>a programmer-defined process group</p>
    <p>pipes</p>
    <p>private files</p>
    <p>real time</p>
    <p>Process 1</p>
    <p>Process 2</p>
    <p>Process 3</p>
  </div>
  <div class="page">
    <p>Internal Determinism</p>
    <p>External Nondeterminism</p>
    <p>network</p>
    <p>deterministic box</p>
    <p>users</p>
    <p>pipe</p>
    <p>shared file</p>
    <p>Process 4</p>
    <p>shared memory</p>
    <p>pipes</p>
    <p>private files</p>
    <p>? real time</p>
    <p>Process 1</p>
    <p>Process 2</p>
    <p>Process 3</p>
  </div>
  <div class="page">
    <p>Internal Determinism</p>
    <p>External Nondeterminism</p>
    <p>network</p>
    <p>deterministic box</p>
    <p>users</p>
    <p>pipe</p>
    <p>shared file</p>
    <p>Process 4</p>
    <p>shared memory</p>
    <p>pipes</p>
    <p>private files</p>
    <p>shim pro</p>
    <p>gram Precisely controls all external inputs</p>
    <p>value of input data  time input data arrives</p>
    <p>real time</p>
    <p>Process 1</p>
    <p>Process 2</p>
    <p>Process 3</p>
  </div>
  <div class="page">
    <p>Internal Determinism</p>
    <p>External Nondeterminism</p>
    <p>network</p>
    <p>deterministic box</p>
    <p>users real time</p>
    <p>(virtual machine)</p>
    <p>operating system</p>
    <p>user-space apps</p>
    <p>An entire virtual machine could go inside the deterministic box!</p>
    <p>- too inflexible - too costly</p>
  </div>
  <div class="page">
    <p>Deterministic Process Groups</p>
    <p>Thread1</p>
    <p>Process A</p>
    <p>deterministic box</p>
    <p>Shim Program:</p>
    <p>shim pro</p>
    <p>gram</p>
    <p>network</p>
    <p>Thread2 Thread3</p>
    <p>Process B</p>
    <p>OS ensures:  internal nondeterminism is eliminated</p>
    <p>(for shared-memory, pipes, signals, local files, ...)</p>
    <p>external nondeterminism funneled through shim program</p>
    <p>user-space program that precisely controls all external nondeterministic inputs</p>
    <p>user I/O</p>
  </div>
  <div class="page">
    <p>Contributions</p>
    <p>Conceptual: - identify internal vs. external nondeterminism - key: internal nondeterminism can be eliminated!</p>
    <p>Abstraction: - Deterministic Process Groups (DPGs) - control external nondeterminism via a shim program</p>
    <p>Implementation: - dOS, a modified version of Linux - supports arbitrary, unmodified binaries</p>
    <p>Applications: - deterministic parallel execution - record/replay - replicated execution</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Deterministic Process Groups</p>
    <p>dOS: our Linux-Based Implementation</p>
    <p>Evaluation</p>
    <p>Example Uses  a parallel computation  a webserver</p>
    <p>system interface  conceptual model</p>
  </div>
  <div class="page">
    <p>A Parallel Computation</p>
    <p>parallel program</p>
    <p>deterministic box</p>
    <p>local input files</p>
    <p>This program executes deterministically!</p>
    <p>even on a multiprocessor  supports parallel programs written in any language</p>
    <p>no heisenbugs!  test input files, not interleavings</p>
  </div>
  <div class="page">
    <p>A Webserver</p>
    <p>webserver (many threads/processes)</p>
    <p>deterministic box</p>
    <p>network, etc</p>
    <p>Deterministic Record/Replay</p>
    <p>implement in shim program  requires no webserver modification</p>
    <p>significantly less to log (internal nondeterminism is eliminated)  log sizes 1,000x smaller!</p>
    <p>shim</p>
    <p>Advantages</p>
  </div>
  <div class="page">
    <p>A Webserver</p>
    <p>webserver</p>
    <p>deterministic box network, etc</p>
    <p>Fault-tolerant Replication</p>
    <p>implement replication protocol in shim programs (paxos, virtual synchrony, etc)</p>
    <p>easy to replicate multithreaded servers (internal nondeterminism is eliminated)</p>
    <p>shim Advantage</p>
    <p>webserver</p>
    <p>deterministic box</p>
    <p>shim</p>
  </div>
  <div class="page">
    <p>A Webserver</p>
    <p>Using DPGs to construct applications</p>
    <p>webserver</p>
    <p>deterministic part (in a DPG)</p>
    <p>nondeterministic part (in a shim)</p>
    <p>request processing</p>
    <p>low-level network I/O</p>
    <p>(bundle into requests)</p>
    <p>Shim program defines the nondeterministic interface</p>
    <p>behaves deterministically w.r.t. requests rather than packets</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Deterministic Process Groups</p>
    <p>dOS: our Linux-Based Implementation</p>
    <p>Evaluation</p>
    <p>Example Uses  a parallel computation  a webserver</p>
    <p>system interface  conceptual model</p>
  </div>
  <div class="page">
    <p>Deterministic Process Groups</p>
    <p>Thread1</p>
    <p>Process A</p>
    <p>deterministic box shim</p>
    <p>pro gram</p>
    <p>network</p>
    <p>Thread2 Thread3</p>
    <p>Process B</p>
    <p>System Interface</p>
    <p>Just like ordinary linux processes</p>
    <p>user I/O</p>
    <p>New system call creates a new DPG: sys_makedet()  DPG expands to include all child processes</p>
    <p>same system calls, signals, and hw instruction set  can be multithreaded</p>
  </div>
  <div class="page">
    <p>Deterministic Process Groups</p>
    <p>Thread1</p>
    <p>Process A</p>
    <p>deterministic box shim</p>
    <p>pro gram</p>
    <p>network</p>
    <p>Thread2 Thread3</p>
    <p>Process B</p>
    <p>Two questions:</p>
    <p>What are the semantics of internal determinism?</p>
    <p>user I/O</p>
    <p>How do shim programs work?</p>
  </div>
  <div class="page">
    <p>Deterministic Process Groups</p>
    <p>Thread1</p>
    <p>Process A</p>
    <p>deterministic box</p>
    <p>Thread2 Thread3</p>
    <p>Process B</p>
    <p>Internal Determinism</p>
    <p>Conceptually: executes as if serialized onto a logical timeline</p>
    <p>OS guarantees internal communication is scheduled deterministically</p>
    <p>implementation is parallel</p>
    <p>shim pro</p>
    <p>gram</p>
    <p>network</p>
    <p>user I/O</p>
  </div>
  <div class="page">
    <p>Internal Determinism</p>
    <p>Thread1 Thread2 Logical</p>
    <p>Timeline</p>
    <p>t=1 t=2 t=3 t=4 t=5 t=6 t=7</p>
    <p>wr x rd x</p>
    <p>Each DPG has a logical timeline  instructions execute as if serialized onto the logical timeline  internal events are deterministic</p>
    <p>wr y</p>
    <p>rd y read(pipe)</p>
    <p>read(pipe) rd z</p>
    <p>blocking call</p>
    <p>always reads same value of x</p>
    <p>always blocks for 3 time steps always returns same data</p>
  </div>
  <div class="page">
    <p>Internal Determinism</p>
    <p>Thread1 Thread2 Logical</p>
    <p>Timeline</p>
    <p>t=1 t=2</p>
    <p>t=3 t=4 t=5 t=6</p>
    <p>t=7</p>
    <p>wr x rd x</p>
    <p>wr y</p>
    <p>rd y read(pipe)</p>
    <p>read(pipe) rd z</p>
    <p>blocking call</p>
    <p>arbitrary delays in physical time are possible</p>
    <p>Physical time is not deterministic  deterministic results, but not deterministic performance</p>
  </div>
  <div class="page">
    <p>External Nondeterminism</p>
    <p>Thread1 Thread2 Logical</p>
    <p>Timeline</p>
    <p>t=1 t=2 t=3 t=4 t=5 t=6 t=7</p>
    <p>wr x rd x</p>
    <p>wr y</p>
    <p>rd y read(socket)</p>
    <p>read(socket) rd z</p>
    <p>blocking call</p>
    <p>external channel</p>
    <p>Physical Time</p>
    <p>packet arrival</p>
    <p>Two sources of nondeterminism:  data returned by read()  blocking time of read()</p>
  </div>
  <div class="page">
    <p>External Nondeterminism</p>
    <p>Thread1 Thread2 Logical</p>
    <p>Timeline</p>
    <p>t=1 t=2 t=3 t=4 t=5 t=6 t=7</p>
    <p>wr x rd x</p>
    <p>wr y</p>
    <p>rd y read(socket)</p>
    <p>read(socket)</p>
    <p>rd z</p>
    <p>blocking call</p>
    <p>Physical Time</p>
    <p>packet arrival</p>
    <p>external channel</p>
    <p>Two sources of nondeterminism:  data returned by read()  blocking time of read()</p>
  </div>
  <div class="page">
    <p>External Nondeterminism</p>
    <p>Thread1 Thread2 Logical</p>
    <p>Timeline</p>
    <p>t=1 t=2 t=3 t=4 t=5 t=6 t=7</p>
    <p>wr x rd x</p>
    <p>wr y rd y</p>
    <p>read(socket) read(socket)</p>
    <p>rd z</p>
    <p>blocking call</p>
    <p>Physical Time</p>
    <p>packet arrival</p>
    <p>external channel</p>
    <p>Two sources of nondeterminism:  data returned by read()  blocking time of read()</p>
  </div>
  <div class="page">
    <p>External Nondeterminism</p>
    <p>Thread1 Thread2 Logical</p>
    <p>Timeline</p>
    <p>t=1 t=2 t=3 t=4 t=5 t=6 t=7</p>
    <p>wr x rd x</p>
    <p>wr y</p>
    <p>rd y read(socket)</p>
    <p>read(socket) rd z</p>
    <p>blocking call</p>
    <p>Physical Time</p>
    <p>packet arrival</p>
    <p>Two sources of nondeterminism:  data returned by read()  blocking time of read()</p>
    <p>the what  the when</p>
    <p>shim pro</p>
    <p>gram</p>
  </div>
  <div class="page">
    <p>Shim Example: Read Syscall</p>
    <p>Logical Timeline</p>
    <p>t=3</p>
    <p>DPG Thread</p>
    <p>Shim Program OS</p>
    <p>read()</p>
    <p>t=2</p>
    <p>t=4</p>
    <p>hello</p>
    <p>return(hello)</p>
    <p>t=11</p>
    <p>t=10</p>
    <p>Shim can either . . .</p>
  </div>
  <div class="page">
    <p>Shim Example: Read Syscall</p>
    <p>Logical Timeline</p>
    <p>t=3</p>
    <p>DPG Thread</p>
    <p>Shim Program OS</p>
    <p>t=2</p>
    <p>t=4</p>
    <p>return(hello)</p>
    <p>t=11</p>
    <p>t=10</p>
    <p>hello</p>
    <p>Shim can either . . .</p>
    <p>t=10</p>
    <p>hello</p>
  </div>
  <div class="page">
    <p>Shim Example: Replication</p>
    <p>replication protocol</p>
    <p>DPG Replica 1</p>
    <p>shim</p>
    <p>multithreaded server</p>
    <p>DPG Replica 2</p>
    <p>shim</p>
    <p>multithreaded server</p>
    <p>DPG Replica 3</p>
    <p>shim</p>
    <p>multithreaded server</p>
    <p>We have implemented this idea (see paper)</p>
    <p>Key idea:</p>
    <p>protocol delivers (time,msg) pairs to replicas</p>
    <p>ensure replicas see same input at same logical time</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Deterministic Process Groups</p>
    <p>dOS: our Linux-Based Implementation</p>
    <p>Evaluation</p>
    <p>Example Uses  a parallel computation  a webserver</p>
    <p>system interface  conceptual model</p>
  </div>
  <div class="page">
    <p>dOS Overview</p>
    <p>~8,000 lines of code added or modified  ~50 files changed or modified  transparently supports unmodified binaries</p>
    <p>Modified version of Linux 2.6.24/x86_64</p>
    <p>Support for DPGs:</p>
    <p>subsystems modified: - thread scheduling - virtual memory - system call entry/exit</p>
    <p>Paper describes challenges in depth</p>
    <p>implement a deterministic scheduler  implement an API for writing shim programs</p>
    <p>talk focus</p>
  </div>
  <div class="page">
    <p>dOS: Deterministic Scheduler</p>
    <p>Which deterministic execution algorithm?  DMP-O, from prior work [Asplos09, Asplos10]</p>
    <p>- other algorithms have better scalability, but - . . . Dmp-O is easiest to implement</p>
    <p>How does DMP-O work?</p>
    <p>How does dOS implement DMP-O?</p>
  </div>
  <div class="page">
    <p>Deterministic Execution with DMP-O</p>
    <p>Thread1 Thread2 Thread3</p>
    <p>Key idea:</p>
    <p>serialize all communication deterministically</p>
  </div>
  <div class="page">
    <p>Deterministic Execution with DMP-O</p>
    <p>Thread1 Thread2 Thread3 parallelize</p>
    <p>until there is communication</p>
  </div>
  <div class="page">
    <p>Deterministic Execution with DMP-O</p>
    <p>Thread1 Thread2 Thread3 parallelize</p>
    <p>until there is communication</p>
    <p>x=..</p>
    <p>x=..</p>
    <p>x=..</p>
    <p>serialize communication</p>
    <p>Ownership table</p>
    <p>assigns ownership of data to threads  communication: thread wants data it doesnt own</p>
    <p>Logical Timeline</p>
    <p>t=1</p>
    <p>t=2</p>
    <p>t=3</p>
    <p>t=4</p>
  </div>
  <div class="page">
    <p>dOS: Changes for DMP-O</p>
    <p>Thread1 Thread2 Thread3</p>
    <p>must instrument the system interface</p>
    <p>loads/stores - for shared-memory</p>
    <p>system calls - for in-kernel channels - explicit: pipes, files, signals, ... - implicit: address space, file descriptor</p>
    <p>table, ...</p>
    <p>Ownership Table</p>
  </div>
  <div class="page">
    <p>dOS: Changes for DMP-O</p>
    <p>Thread1 Thread2 Thread3</p>
    <p>for shared-memory</p>
    <p>must instrument loads/stores - use page-protection hw</p>
    <p>each thread has a shadow page table - permission bits denote ownership - page faults denote communication - page granularity ownership</p>
    <p>Ownership Table</p>
  </div>
  <div class="page">
    <p>dOS: Changes for DMP-O</p>
    <p>Thread1 Thread2 Thread3</p>
    <p>for in-kernel channels (pipes, etc.)</p>
    <p>must instrument system calls  on syscall entry:</p>
    <p>- decide what channels are used read(): pipe or file being read mmap(): the threads address space</p>
    <p>- acquire ownership ownership table is just a hash-table</p>
    <p>- any external channels? if yes: forward to shim program</p>
    <p>Ownership Table</p>
    <p>Many challenges</p>
    <p>and complexities</p>
    <p>(see paper)</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Deterministic Process Groups</p>
    <p>dOS: our Linux-Based Implementation</p>
    <p>Evaluation</p>
    <p>Example Uses  a parallel computation  a webserver</p>
    <p>system interface  conceptual model</p>
  </div>
  <div class="page">
    <p>Evaluation Overview</p>
    <p>8-core 2.8GHz Intel Xeon, 10GB RAM  Each application ran in its own DPG</p>
    <p>Setup</p>
    <p>Key questions  How much internal nondeterminism is eliminated?</p>
    <p>(log sizes for record/replay)  How much overhead does dOS impose?  How much does dOS affect parallel scalability?</p>
    <p>Verifying determinism  used the racey deterministic stress test [ISCA02, MarkHill]</p>
  </div>
  <div class="page">
    <p>Eval: Record Log Sizes</p>
    <p>dOS  implemented an execution recorder shim</p>
    <p>also uses page-level ownership-tracking  . . . but has to record internal nondeterminism</p>
    <p>fmm lu ocean radix water</p>
    <p>dOS SMP-ReVirt</p>
    <p>(log size per day)</p>
    <p>SMP-ReVirt (a hypervisor) [VEE 08]</p>
    <p>Log size comparison</p>
  </div>
  <div class="page">
    <p>Eval: dOS Overheads</p>
    <p>Possible sources of overhead  deterministic scheduling  shim program interposition</p>
    <p>Ran each benchmark in three ways:  without a DPG (ordinary, nondeterministic)</p>
    <p>with a DPG only</p>
    <p>with a DPG and an execution recorder shim program</p>
    <p>scheduling overheads</p>
    <p>shim overheads</p>
  </div>
  <div class="page">
    <p>Eval: dOS Overheads</p>
    <p>Apache  16 worker threads  serving 100KB static pages</p>
    <p>Nondet (no DPG) DPG (no shim): DPG (with record shim):</p>
    <p>saturates 1 gigabit network 26% throughput drop 78% throughput drop (over Nondet)</p>
    <p>Chromium  process per tab  scripted user session (5 tabs, 12 urls)</p>
    <p>DPG (no shim): DPG (with record shim):</p>
    <p>serving 10 KB static pages DPGs saturate 1 gigabit network</p>
  </div>
  <div class="page">
    <p>Eval: dOS Overheads</p>
    <p>blackscholes lu pbzip dedup fmm make</p>
    <p>D PG</p>
    <p>s lo</p>
    <p>w do</p>
    <p>w n</p>
    <p>Parallel application slowdowns  DPG only  relative to nondeterministic execution</p>
    <p>preserves scalability</p>
    <p>fine-grained sharingloses scalability</p>
  </div>
  <div class="page">
    <p>Wrap Up</p>
    <p>new OS abstraction  eliminate or control sources of nondeterminism</p>
    <p>Deterministic Process Groups</p>
    <p>Linux-Based implementation of DPGs  use cases demonstrated: deterministic execution, record/</p>
    <p>replay, and replicated execution</p>
    <p>dOS</p>
    <p>Also in the paper . . .  many more implementation details  a more thorough evaluation  thoughts on a from scratch implementation</p>
  </div>
  <div class="page">
    <p>Thank you!</p>
    <p>Questions?</p>
    <p>http://sampa.cs.washington.edu</p>
    <p>C:\DOS C:\DOS\RUN C:\DOS\RUN\DETERM~1.EXE</p>
  </div>
  <div class="page">
    <p>(backup slides)</p>
  </div>
  <div class="page">
    <p>Performance?</p>
    <p>Already good enough for some workloads!</p>
    <p>Improvements possible:</p>
    <p>Research question:</p>
    <p>infrequent system calls  infrequent fine-grained sharing</p>
    <p>- examples: Apache 100KB static pages, blackscholes, pbzip, etc.</p>
    <p>better scheduling algorithm (DMP-TM, DMP-B) [Asplos09, Asplos10]  binary instrumentation (to support arbitrary data granularity)  implement shims as kernel modules (lower context switch overhead)</p>
    <p>how much does determinism fundamentally impact performance?</p>
  </div>
  <div class="page">
    <p>Overheads Breakdown</p>
    <p>Shim context-switching</p>
    <p>Deterministic scheduler</p>
    <p>microbenchmark: 5x overhead on system call traps</p>
    <p>Apache 100KB Apache 10KB Chromium blackscholes fmm dedup</p>
    <p>% serialization 26% 60% 25% 3% 54% 90%</p>
    <p>% single-stepping 0% 0% 13% 27% 18% 12%</p>
  </div>
  <div class="page">
    <p>Why are DPGs awesome?</p>
    <p>testing  debugging  fault-tolerant replication  security</p>
    <p>- can eliminate internal timing channels [Aviram et al, CCSW10]</p>
    <p>DPGs give you determinism, which helps:</p>
    <p>DPGs give you determinism flexibly:  user-defined process group</p>
    <p>- keeps separate apps isolated in their own determinism domain  shim programs can customize:</p>
    <p>- the interface to the nondeterministic external world - the set of deterministic services</p>
    <p>(more details in paper)</p>
  </div>
  <div class="page">
    <p>Internal Determinism Design Choices</p>
    <p>A single thread - current systems - massively nondeterministic on multiprocessors</p>
    <p>A single multithreaded process</p>
    <p>A group of multithreaded processes - our choice - most flexible</p>
    <p>A virtual machine - too costly, too inflexible</p>
    <p>A local area network cluster?</p>
    <p>D P</p>
    <p>G S</p>
  </div>
  <div class="page">
    <p>Right Place For Determinism?</p>
    <p>Language?  more robust determinism, enables static analysis (lower cost)  must rewrite program with specialized constructs</p>
    <p>Hardware?  low-overhead shared-memory determinism  must build custom hardware</p>
    <p>Operating System?  support arbitrary, unmodified binaries  high overheads for some workloads</p>
    <p>Compiler?  lower overheads than OS for some workloads (finer-grained tracking)  cant resolve communication via the kernel</p>
  </div>
  <div class="page">
    <p>SMP-ReVirt?</p>
    <p>Advantages of dOS process level</p>
    <p>- cheaper than full-system? - dont need to resolve kernel-level shared-memory</p>
    <p>(up to 50% of sharing for some benchmarks [VEE 08])</p>
    <p>no internal nondeterminism - smaller logs (by 1,000x)</p>
    <p>Advantages of SMP-ReVirt full-system record/replay</p>
    <p>- includes OS code - via a hypervisor implementation</p>
  </div>
  <div class="page">
    <p>Prior Work: Record/Replay</p>
    <p>Advantages of dOS small logs (no internal nondeterminism) replay is guaranteed</p>
    <p>Record internal nondeterminism  in software [SMP-ReVirt, Scribe, DejaVu, ...]</p>
    <p>in hardware [FDR, DeLorean, ...]</p>
    <p>big logs, high runtime overheads for software</p>
    <p>Search execution space during replay  record a few bits of internal nondeterminism [PRES, ODR]</p>
    <p>record nothing [ESD]</p>
    <p>cannot guarantee replay (might fail to find an execution)</p>
  </div>
  <div class="page">
    <p>Prior Work: Deterministic Execution</p>
    <p>References  DMP  Kendo  CoreDet  Grace</p>
    <p>[ASPLOS 09]</p>
    <p>[ASPLOS 09]</p>
    <p>[ASPLOS 10]</p>
    <p>[OOPSLA 10]</p>
    <p>custom hardware custom runtime (race-free programs only) custom compiler/runtime custom runtime (fork-join programs only)</p>
    <p>Advantages of dOS supports:</p>
    <p>- multiple processes - communication other than shared-memory (pipes, etc.) - arbitrary binaries</p>
    <p>does not require: - custom hardware - recompilation</p>
    <p>shims for external nondeterminism</p>
  </div>
</Presentation>
