<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>The Cut-and-Choose Game and its Application to Cryptographic</p>
    <p>Protocols Ruiyu Zhu, Yan Huang, Jonathan Katz, abhi shelat</p>
    <p>Indiana University Northeastern UniversityU. Maryland</p>
  </div>
  <div class="page">
    <p>What is Cut-and-Choose</p>
  </div>
  <div class="page">
    <p>What is Cut-and-Choose</p>
  </div>
  <div class="page">
    <p>Applications of Cut-and-Choose</p>
    <p>Secure Computation</p>
    <p>Zero-knowledge-proof</p>
    <p>Fair exchange of digital currency</p>
    <p>Secure delegation of computation</p>
    <p>BBSU, FC 12</p>
    <p>Blum, ICM 86</p>
    <p>CKV, Crypto 10</p>
    <p>Lindell, Crypto 13 HKE, Crypto13</p>
    <p>AMPR, Crypto14Brando, AsiaCrypt 13SS, EuroCrypt 11LP, Eurocrypt 07</p>
  </div>
  <div class="page">
    <p>Applications of Cut-and-Choose</p>
    <p>Secure Computation</p>
    <p>Zero-knowledge-proof</p>
    <p>Fair exchange of digital currency</p>
    <p>Secure delegation of computation</p>
    <p>BBSU, FC 12</p>
    <p>Blum, ICM 86</p>
    <p>CKV, Crypto 10</p>
    <p>Lindell, Crypto 13 HKE, Crypto13</p>
    <p>AMPR, Crypto14Brando, AsiaCrypt 13SS, EuroCrypt 11LP, Eurocrypt 07</p>
  </div>
  <div class="page">
    <p>Cut-and-Choose in Secure Computation</p>
    <p>EvalChk</p>
    <p>Garbled Circuits</p>
    <p>Garbled Circuits</p>
    <p>Garbled Circuits</p>
    <p>Garbled Circuits</p>
    <p>Garbled Circuits</p>
  </div>
  <div class="page">
    <p>Three Flavors of Cut-and-choose</p>
    <p>SingleCut  Secure if at least one evaluation-circuit is correct.</p>
    <p>MajorityCut PR,  Secure if the majority of evaluation-circuits are correct.</p>
    <p>BatchedCut  Amortizing cost over multiple executions.</p>
    <p>Lindell, Crypto 13 HKE, Crypto 13 AMPR, Crypto 14Brando, AsiaCrypt 13</p>
    <p>LR, Crypto 14 NO, TCC09 FJN+, EuroCrypt13</p>
    <p>LP, EuroCrypt07 LP, JoP12LP, SCN 08Woodruff, EuroCrypt 07SS EuriCrypto 11</p>
  </div>
  <div class="page">
    <p>Three Flavors of Cut-and-choose</p>
    <p>SingleCut  Secure if at least one evaluation-circuit is correct.</p>
    <p>MajorityCut  Secure if the majority of evaluation-circuits are correct.</p>
    <p>BatchedCut  Amortizing cost over multiple executions.</p>
    <p>Lindell, Crypto 13 HKE, Crypto 13 AMPR, Crypto 14Brando, AsiaCrypt 13</p>
    <p>LR, Crypto 14 NO, TCC09 FJN+, EuroCrypt13</p>
    <p>LP, EuroCrypt07 LP, JoP12LP, SCN 08Woodruff, EuroCrypt 07SS EuriCrypto 11</p>
  </div>
  <div class="page">
    <p>Garbled Circuits</p>
    <p>Garbled Circuits</p>
    <p>Garbled Circuits</p>
    <p>Garbled Circuits</p>
    <p>Garbled Circuits</p>
    <p>Existing SingleCut Strategy</p>
    <p>Expected cost:</p>
    <p>checking cost   2 + evaluation cost</p>
    <p>2</p>
    <p>Lindell, Crypto 13</p>
    <p>Eval Chk EvalChk Eval</p>
    <p>:the security parameter</p>
  </div>
  <div class="page">
    <p>Garbled Circuit</p>
    <p>Garbled Circuit</p>
    <p>The Cost Gap</p>
    <p>Seed Hash</p>
    <p>Checking Evaluation</p>
    <p>Time Cost Ratio 2 ~ 30</p>
    <p>Bandwidth Cost Ratio 107~108</p>
  </div>
  <div class="page">
    <p>Our Key Intuition</p>
    <p>Evaluate less and check more.</p>
    <p>Use mixed-strategies: determine the number of evaluation-circuits probabilistically from a custom distribution.</p>
    <p>Use linear programming to find optimal parameters.</p>
  </div>
  <div class="page">
    <p>Problem Formulation</p>
    <p>Want to minimize</p>
    <p>Upper-bound on the security failure rate  Cost ratio</p>
    <p>&lt;=&gt; Generators strategy</p>
    <p>=?@A Evaluators strategy</p>
    <p>[cost(,=?@A)]</p>
    <p>Subject to:</p>
    <p>Prfailure =?@A,&lt;=&gt;  , &lt;=&gt;</p>
    <p>For all cheating strategies</p>
  </div>
  <div class="page">
    <p>Prfailure =?@A,&lt;=&gt;  , &lt;=&gt;</p>
    <p>Problem Formulation</p>
    <p>Subject to:</p>
    <p>Want to minimize</p>
    <p>Upper-bound on the security failure rate  Cost ratio</p>
    <p>Generators strategy</p>
    <p>Evaluators strategy</p>
    <p>[cost(,=?@A)]</p>
    <p>For all cheating strategies</p>
  </div>
  <div class="page">
    <p>&lt;=&gt; and =?@A in SingleCut</p>
    <p>The total number of circuits</p>
    <p>&lt;=&gt; A random variable over {0,1}&gt;</p>
    <p>=?@A A random variable over {0,1}&gt;</p>
  </div>
  <div class="page">
    <p>&lt;=&gt; and =?@A in SingleCut</p>
    <p>Garbled Circuits</p>
    <p>Garbled Circuits</p>
    <p>Garbled Circuits</p>
    <p>Garbled Circuits</p>
    <p>Garbled Circuits</p>
    <p>Eval Chk EvalChk Eval</p>
    <p>My only choices are which circuits to form improperly.</p>
    <p>I could map between binary</p>
    <p>string and strategy</p>
    <p>So could IFailure: &lt;=&gt; = =?@A</p>
  </div>
  <div class="page">
    <p>[cost ,=?@A ] = U( +    X 1)Z</p>
    <p>&gt;</p>
    <p>Z[\</p>
    <p>Expected Cost of SingleCut</p>
    <p>Total number of circuits Z Probability of evaluating  circuits</p>
    <p>[cost ,=?@A ] = U( +    X 1)Z</p>
    <p>&gt;</p>
    <p>Z[\</p>
    <p>[cost ,=?@A ] = U( +    X 1)Z</p>
    <p>&gt;</p>
    <p>Z[\</p>
    <p>[cost ,=?@A ] = U( +    X 1)Z</p>
    <p>&gt;</p>
    <p>Z[\</p>
    <p>[cost ,=?@A ] = U( +    X 1)Z</p>
    <p>&gt;</p>
    <p>Z[\</p>
    <p># of circuits to evaluate</p>
    <p>Total # of circuits</p>
  </div>
  <div class="page">
    <p>Z  0</p>
    <p>Constraints on Z (because its a probability distribution)</p>
    <p>UZ</p>
    <p>&gt;</p>
    <p>Z[\</p>
    <p>= 1</p>
    <p>Total number of circuits Z Probability of evaluating  circuits</p>
  </div>
  <div class="page">
    <p>Prfailure =?@A,&lt;=&gt;</p>
    <p>Security Holds</p>
    <p>&lt;=&gt;, Pr =?@A = &lt;=&gt;</p>
    <p>0,1 &gt;,Pr(=?@A = )   Probability that evaluator picks any SPECIFIC strategy a is bounded by .</p>
  </div>
  <div class="page">
    <p>There are &gt;Z pure strategies that evaluate  circuits.</p>
    <p>0,1 &gt;,Pr (=?@A = )</p>
    <p>Z     Z</p>
    <p>Z</p>
    <p>Z</p>
    <p>Z</p>
    <p>Each pure strategy can be picked with</p>
    <p>probability at most .</p>
  </div>
  <div class="page">
    <p>Recap</p>
    <p>Subject to:</p>
    <p>U( +   )Z &gt;</p>
    <p>Z[\</p>
    <p>Z</p>
    <p>Z  0</p>
    <p>UZ</p>
    <p>&gt;</p>
    <p>Z[\</p>
    <p>= 1</p>
    <p>Minimize:</p>
  </div>
  <div class="page">
    <p>Fractional Knapsack Problem</p>
    <p>Capacity: 1/ units</p>
    <p>Unit Cost:   +   1 2 +   2</p>
    <p>Units  0</p>
    <p>1</p>
    <p>2</p>
    <p>A greedy algorithm solves it in linear time.</p>
  </div>
  <div class="page">
    <p>Find the Best</p>
    <p>Exhaustively search every</p>
    <p>to find the one with minimal cost.</p>
    <p>Limitation:  is publicly fixed. Followup at: https://github.com/Opt-Cut-N-Choose</p>
    <p>Required by the security parameter</p>
    <p>Achievable with the SingleCut strategy of [Lindell, Crypto13].</p>
    <p>logd 1</p>
    <p>+ 1 2</p>
    <p>logd 1</p>
    <p>Range of</p>
  </div>
  <div class="page">
    <p>Sample SingleCut Strategy for AES</p>
    <p>O ur te</p>
    <p>ch ni qu</p>
    <p>e</p>
    <p>=    as % 0 9.09 X 10lmm</p>
    <p>Save 77.5% b/w</p>
    <p>Cl as si ca lS tr at eg y</p>
    <p>=    as % 0 9.09 X 10lmm</p>
    <p>19 11.9 X 10\</p>
    <p>40 9.09 X 10lmm</p>
    <p>Bandwidth cost ratio:  = 4533 For AES</p>
  </div>
  <div class="page">
    <p>Improvements on SingleCut</p>
    <p>Cost Ratio r</p>
    <p>Savings=1 costthis work</p>
    <p>cost best prior work</p>
  </div>
  <div class="page">
    <p>Improvements on SingleCut</p>
    <p>Sa vi ng s</p>
    <p>Cost Ratio r 100 101 102 103 104</p>
    <p>AES</p>
    <p>fp-multiply</p>
  </div>
  <div class="page">
    <p>Formulation for MajorityCut</p>
    <p>See the paper for details.</p>
    <p>Subject to:</p>
    <p>U( +   )Z &gt;</p>
    <p>Z[\</p>
    <p>U Z X</p>
    <p>/</p>
    <p>}~ (&gt;,d)</p>
    <p>Z[</p>
    <p>Z  0</p>
    <p>UZ</p>
    <p>&gt;</p>
    <p>Z[\</p>
    <p>= 1</p>
    <p>Minimize:</p>
  </div>
  <div class="page">
    <p>Sample MajorityCut Strategy</p>
    <p>O ur te</p>
    <p>ch ni qu</p>
    <p>e</p>
    <p>=    as %   as % 7 1 X 10l7 17 1.23 9 9 X 10l7 19 5.36 11 7 X 10l 21 20.9 13 4.54 X 10ld 23 72.2 15 0.25</p>
    <p>Save 26.6% time</p>
    <p>Time cost ratio:  = 10</p>
    <p>Cl as si ca l S tr at eg y  =</p>
    <p>as %</p>
  </div>
  <div class="page">
    <p>Improvements on MajorityCut</p>
    <p>Savings=1 costthis work</p>
    <p>cost best prior work</p>
    <p>Sa vi ng s</p>
    <p>Cost ratio r 100 102 104 106 108</p>
  </div>
  <div class="page">
    <p>Improvements on MajorityCut Sa vi ng s</p>
    <p>Cost ratio r 100 102 104 106 108</p>
    <p>fp-multiply AES</p>
  </div>
  <div class="page">
    <p>Improvements on BatchedCut</p>
    <p>Savings=1 costthis work</p>
    <p>cost best prior work</p>
    <p>Sa vi ng s</p>
    <p>Cost ratio r</p>
    <p>N=100 N=200 N=10000</p>
    <p>N is the size of the circuit.</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>The game solvers are available at https://github.com/cut-n-choose.</p>
    <p>Cut-and-choose protocols should be appropriately configured based on the security requirement and the cost ratio benchmarked at run-time.</p>
    <p>Ruiyu Zhu: zhu52@indiana.edu</p>
  </div>
</Presentation>
