<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Improving File System Performance</p>
    <p>of Mobile Storage Systems</p>
    <p>Using a Decoupled Defragmenter</p>
    <p>USENIX Annual Technical Conference, 2017</p>
    <p>Sangwook Shane Hahn*, Sungjin Lee, Cheng Ji, Li-Pin Chang+,</p>
    <p>Inhyuk Yee*, Liang Shi#, Chun Jason Xue and Jihong Kim*</p>
    <p>*Seoul National University Daegu Gyeongbuk Institute of Science and Technology (DGIST)</p>
    <p>City University of Hong Kong +National Chiao-Tung University</p>
    <p>#Chongqing University</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Impact of File Fragmentation/Defragmentation</p>
    <p>Key Observations on Flash-based File Fragmentation</p>
    <p>Decoupled Fragmentation</p>
    <p>Dominant Impact of Logical Fragmentation</p>
    <p>Janusd: a Decoupled Defragmenter</p>
    <p>Experimental Results</p>
    <p>Conclusions</p>
  </div>
  <div class="page">
    <p>Gradual Performance Degradation on Smartphones</p>
    <p>Application launching times increase up</p>
    <p>to 3 times on 2-year used smartphones</p>
    <p>Performance of Android smartphones</p>
    <p>gradually degrades as smartphones age</p>
    <p>Galaxy S6</p>
    <p>(new)</p>
    <p>Galaxy S6</p>
    <p>(6 months used)</p>
    <p>Galaxy S6</p>
    <p>(1 year used)</p>
    <p>Galaxy S6</p>
    <p>(2 years used)</p>
    <p>Application</p>
    <p>launching time</p>
  </div>
  <div class="page">
    <p>Root Cause: File Fragmentation</p>
    <p>Defragmentation can improve the</p>
    <p>degraded performance by fragmentation</p>
    <p>Q: Why does</p>
    <p>performance</p>
    <p>degrade ?</p>
    <p>Nexus 6 G5 Galaxy S6 Xperia Z3</p>
    <p>Application launching time</p>
    <p>A: File</p>
    <p>fragmentation</p>
    <p>fragmented</p>
    <p>fragmented</p>
    <p>fragmented</p>
    <p>fragmented</p>
  </div>
  <div class="page">
    <p>File Fragmentation Recurrence on Smartphones</p>
    <p>File fragmentation recurs even in a week</p>
    <p>S6 (92%)</p>
    <p>N6 (83%)</p>
    <p>N5 (74%)</p>
    <p>S3 (63%)</p>
    <p>Xperia Z3</p>
    <p>Galaxy S6</p>
    <p>G5</p>
    <p>Nexus 6</p>
    <p>Q: How often should we</p>
    <p>defrag smartphones ?</p>
    <p>Average</p>
    <p># of fragments</p>
    <p>per file</p>
    <p>Degree of</p>
    <p>file fragmentation</p>
    <p>Days since defragmentation</p>
    <p>User begins</p>
    <p>to experience</p>
    <p>performance</p>
    <p>degradation</p>
  </div>
  <div class="page">
    <p>Lifetime Impact of Frequent Defragmentation</p>
    <p>Q: Are there any side effects from</p>
    <p>frequent defragmentation?</p>
    <p>The amount of</p>
    <p>data copies by</p>
    <p>defragmentation</p>
    <p>(GB)</p>
    <p>N5 (74%) N6 (83%) S6 (92%) Z3</p>
    <p>Galaxy S6Nexus 6 G5 Xperia Z3</p>
    <p>Weekly defragmentation can reduce the storage lifetime by more than 10%</p>
  </div>
  <div class="page">
    <p>Summary: Impact of File Fragmentation/Defragmentation</p>
    <p>File fragmentation in NAND flash-based storage</p>
    <p>is quite different from conventional one in HDD</p>
    <p>Short Lifetime</p>
    <p>High Performance</p>
    <p>Long Lifetime</p>
    <p>Low Performance</p>
    <p>High Performance</p>
    <p>Long Lifetime Decoupled Defragmenter</p>
    <p>Defragmentation</p>
    <p>with near zero</p>
    <p>data copies</p>
    <p>is needed</p>
    <p>NAND Flash-based</p>
    <p>Storage</p>
  </div>
  <div class="page">
    <p>Observation 1: Decoupled Fragmentation</p>
    <p>Logical address space</p>
    <p>Contiguous File A</p>
    <p>Logical address space</p>
    <p>Physical address space</p>
    <p>NAND flash-based storage</p>
    <p>Fragmented File B</p>
    <p>HDD</p>
    <p>Physical address space</p>
    <p>Contiguous Sectors</p>
    <p>Fragmented Sectors</p>
    <p>Contiguous</p>
    <p>File A</p>
    <p>Fragmented</p>
    <p>File B</p>
    <p>Contiguous File A</p>
    <p>Address indirection</p>
    <p>Physical</p>
    <p>fragmentation</p>
    <p>Low degree of</p>
    <p>I/O parallelism</p>
    <p>High degree of</p>
    <p>I/O parallelism</p>
    <p>Evenly</p>
    <p>distributed data</p>
    <p>Unevenly</p>
    <p>distributed data</p>
    <p>Fragmentation at logical</p>
    <p>space and physical space</p>
    <p>All data are stored using</p>
    <p>address indirection</p>
  </div>
  <div class="page">
    <p>Percentage</p>
    <p>(%)</p>
    <p>Logically contiguous</p>
    <p>but,</p>
    <p>physically fragmentedLogically fragmented</p>
    <p>but,</p>
    <p>physically contiguous</p>
    <p>Observation 1: Decoupled Fragmentation</p>
    <p>None</p>
    <p>Low</p>
    <p>Medium</p>
    <p>High</p>
    <p>Less than 1%</p>
  </div>
  <div class="page">
    <p>Observation 2: High Overhead of Logical Fragmentation</p>
    <p>File System</p>
    <p>Block Layer</p>
    <p>Device Driver</p>
    <p>Logical fragmentation overhead overwhelms physical fragmentation overhead</p>
    <p>Degree of Logical Fragmentation</p>
    <p>Android Platform</p>
    <p>File System</p>
    <p>Block I/O Layer</p>
    <p>Device Driver</p>
    <p>Mobile Storage</p>
    <p>Q: How much the impact of logical/physical</p>
    <p>fragmentation on performance?</p>
    <p>I/O Execution Time (us)</p>
    <p>Logical</p>
    <p>fragmentation</p>
    <p>Logical</p>
    <p>fragmentation</p>
    <p># of block I/Os</p>
    <p>increases</p>
    <p>HighMediumLowNone 0</p>
    <p>Mobile Storage</p>
    <p>Degree of Physical Fragmentation</p>
    <p>I/O Execution Time (us)</p>
    <p>Physical</p>
    <p>fragmentation</p>
    <p>HighMediumLowNone</p>
  </div>
  <div class="page">
    <p>Logical</p>
    <p>fragmentation</p>
    <p>Solution for Decoupled Fragmentation</p>
    <p>Physical</p>
    <p>fragmentation</p>
    <p>Janus Defragmenter</p>
    <p>Physical</p>
    <p>Defragmenter</p>
    <p>Logical</p>
    <p>Defragmenter</p>
    <p>Defrag logical fragmentation</p>
    <p>using address remapping</p>
    <p>without data copies</p>
    <p>Improve the low degree</p>
    <p>of I/O parallelism</p>
    <p>Janusd</p>
    <p>Contiguous File</p>
    <p>Fragmented File</p>
    <p>Logical</p>
    <p>fragmentation</p>
    <p>Application Launching Time</p>
    <p>Contiguous File</p>
    <p>Fragmented File</p>
    <p>Physical</p>
    <p>fragmentation Common</p>
    <p>case</p>
    <p>Rare</p>
    <p>case</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Impact of File Fragmentation/Defragmentation</p>
    <p>Key Observations on Flash-based File Fragmentation</p>
    <p>Decoupled Fragmentation</p>
    <p>Dominant Impact of Logical Fragmentation</p>
    <p>Janusd: a Decoupled Defragmenter</p>
    <p>Experimental Results</p>
    <p>Conclusions</p>
  </div>
  <div class="page">
    <p>Overview of Decoupled Defragmenter</p>
    <p>Decoupled Defragmenter (Janusd)</p>
    <p>Improves I/O performance of mobile storage</p>
    <p>while minimizing lifetime degradation</p>
    <p>Disperse</p>
    <p>physical</p>
    <p>fragments</p>
    <p>Detect</p>
    <p>physical</p>
    <p>fragmentation</p>
    <p>Firmware</p>
    <p>(FTL)</p>
    <p>Use new custom interface</p>
    <p>Physical</p>
    <p>Defragmenter Maintain log for reverse mapping</p>
    <p>Detect</p>
    <p>logical</p>
    <p>fragmentation</p>
    <p>Detect</p>
    <p>logical</p>
    <p>fragmentation</p>
    <p>Remap</p>
    <p>LBAs of logical</p>
    <p>fragments</p>
    <p>Remap</p>
    <p>LBAs of logical</p>
    <p>fragments</p>
    <p>Deliver</p>
    <p>modified LBAs</p>
    <p>Deliver</p>
    <p>modified LBAsLogical</p>
    <p>Defragmenter</p>
    <p>Update FTLs</p>
    <p>mapping table</p>
    <p>Update FTLs</p>
    <p>mapping table</p>
    <p>e4defrag</p>
  </div>
  <div class="page">
    <p>Logical Defragmenter (JanusdL)</p>
    <p>File A</p>
    <p>Logical Block Address Space</p>
    <p>e4defrag</p>
    <p>Logical</p>
    <p>Defragmenter</p>
    <p>Modified LBAs</p>
    <p>LBA 8  LBA 3</p>
    <p>LBA 9  LBA 4</p>
    <p>Logical Block Address Space</p>
    <p>File A File A</p>
    <p>triggers</p>
    <p>e4defrag</p>
    <p>logical</p>
    <p>fragments</p>
    <p>modified LBAs</p>
    <p>defragmentation</p>
    <p>without data</p>
    <p>copies</p>
  </div>
  <div class="page">
    <p>Logical Defragmenter (JanusdL)</p>
    <p>Mobile Storage</p>
    <p>L2P Mapping Table</p>
    <p>NAND Flash Memory</p>
    <p>A B C D</p>
    <p>E</p>
    <p>NAND Page</p>
    <p>space</p>
    <p>OOB area</p>
    <p>(LBA)</p>
    <p>L2P Mapping Table</p>
    <p>NAND PAGE A</p>
    <p>NAND PAGE B</p>
    <p>NAND PAGE C</p>
    <p>NAND PAGE D</p>
    <p>NAND PAGE E</p>
    <p>NAND PAGE A</p>
    <p>NAND PAGE B</p>
    <p>NAND PAGE C</p>
    <p>NAND PAGE D</p>
    <p>NAND PAGE E</p>
    <p>L2P Mapping Table</p>
    <p>Defrag log</p>
    <p>remapping</p>
    <p>history</p>
    <p>Logical</p>
    <p>Defragmenter</p>
  </div>
  <div class="page">
    <p>Evaluation Scenarios</p>
    <p>We collected six different application usage traces</p>
    <p>Application launching scenarios</p>
    <p>Interactive application usage scenario (10 minutes)</p>
    <p>Scenario Scenario Description</p>
    <p>Chrome Launching app  Viewing webpages</p>
    <p>Messenger Launching app  Viewing chat records</p>
    <p>Gmail Launching app  Viewing emails</p>
    <p>Facebook Launching app  Viewing online news</p>
    <p>Twitter Launching app  Viewing online news</p>
    <p>Game Launching Pokemon Go  Playing game</p>
  </div>
  <div class="page">
    <p>Experimental Settings</p>
    <p>Emulation at</p>
    <p>Host-level FTL +</p>
    <p>Customized SSD</p>
    <p>Application</p>
    <p>Launch/</p>
    <p>Usage</p>
    <p>Trace</p>
    <p>Collector System call</p>
    <p>trace</p>
    <p>Trace</p>
    <p>Replayer</p>
    <p>Android</p>
    <p>smartphone</p>
  </div>
  <div class="page">
    <p>Result 1: Application Launching Time</p>
    <p>baseline</p>
    <p>e4defrag</p>
    <p>janusdL</p>
    <p>janusd2.55</p>
    <p>Degree of Logical</p>
    <p>Fragmentation Application Launching Time (sec)</p>
    <p>-18%</p>
    <p>-22%</p>
    <p>-36%</p>
    <p>-33%</p>
    <p>-28%</p>
    <p>-53%</p>
  </div>
  <div class="page">
    <p>Result 2: I/O Throughput</p>
    <p>Time (Week)</p>
    <p>Baseline e4defrag (4 weeks) e4defrag (2 weeks)</p>
    <p>e4defrag (1 week) JanusdL (1 week) Janusd (1 week)</p>
    <p>Normalized</p>
    <p>I/O throughput</p>
    <p>usage</p>
    <p>scenario</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>We have presented a decoupled defragmenter for improving the file system performance</p>
    <p>JanusdL defrags logical fragmentation without data copies by</p>
    <p>remapping LBAs with FTLs mapping table</p>
    <p>JanusdP defrags physical fragmentation by improving</p>
    <p>I/O parallelism of files</p>
    <p>Improved application launching times by 32% on average</p>
    <p>Reduced the amount of data copies by 99.99% on average</p>
    <p>Future expends  Free space defragmentation tool</p>
    <p>Defrag-on-write() which triggers JanusdL right before write()</p>
  </div>
  <div class="page">
    <p>/ 2021</p>
  </div>
</Presentation>
