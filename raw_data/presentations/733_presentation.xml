<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Vulnerability Extrapolation</p>
    <p>USENIX WOOT 2011</p>
    <p>Fabian fabs Yamaguchi</p>
    <p>Recurity Labs GmbH, Germany</p>
  </div>
  <div class="page">
    <p>Agenda</p>
    <p>Patterns you find when auditing code</p>
    <p>Exploiting these patterns:</p>
    <p>Vulnerability Extrapolation</p>
    <p>Using machine learning to get there</p>
    <p>A method to assist in manual code audits</p>
    <p>based on this idea</p>
    <p>The method in practice</p>
    <p>A showcase</p>
  </div>
  <div class="page">
    <p>Exploring a new code base</p>
    <p>Like an area of mathematics you dont yet know.</p>
    <p>Its not completely different from the</p>
    <p>mathematics you already know.</p>
    <p>But there are secrets specific to this area:</p>
    <p>Vocabulary</p>
    <p>Reoccurring patterns in argumentation</p>
    <p>Weird tricks used in proofs</p>
    <p>Understanding the specifics of the area makes it</p>
    <p>a lot easier to reason about it.</p>
  </div>
  <div class="page">
    <p>Another Example: libTIFF</p>
    <p>CVE-2006-3459 | CVE-2010-2067</p>
    <p>s t a t ic in t</p>
    <p>T I F F F e tc h S h o r tP a ir ( T I F F * tif, T I F F D ir E n tr y * d ir )</p>
    <p>{</p>
    <p>s w it c h ( d ir - &gt; td ir _ ty p e ) {</p>
    <p>c a s e T I F F _ B Y T E :</p>
    <p>c a s e T I F F _ S B Y T E :</p>
    <p>{</p>
    <p>u in t8 v [ 4 ] ;</p>
    <p>r e t u r n T I F F F e tc h B y te A r r a y ( tif, d ir , v )</p>
    <p>&amp; &amp; T I F F S e tF ie ld ( tif, d ir - &gt; td ir _ ta g , v [ 0 ] , v [ 1 ] ) ;</p>
    <p>}</p>
    <p>c a s e T I F F _ S H O R T :</p>
    <p>c a s e T I F F _ S S H O R T :</p>
    <p>{</p>
    <p>u in t1 6 v [ 2 ] ;</p>
    <p>r e t u r n T I F F F e tc h S h o r tA r r a y ( tif, d ir , v )</p>
    <p>&amp; &amp; T I F F S e tF ie ld ( tif, d ir - &gt; td ir _ ta g , v [ 0 ] , v [ 1 ] ) ;</p>
    <p>}</p>
    <p>d e f a u lt :</p>
    <p>r e t u r n 0 ;</p>
    <p>}</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>Another Example: libTIFF</p>
    <p>CVE-2006-3459 | CVE-2010-2067</p>
    <p>s t a t ic in t</p>
    <p>T I F F F e tc h S h o r tP a ir ( T I F F * tif, T I F F D ir E n tr y * d ir )</p>
    <p>{</p>
    <p>s w it c h ( d ir - &gt; td ir _ ty p e ) {</p>
    <p>c a s e T I F F _ B Y T E :</p>
    <p>c a s e T I F F _ S B Y T E :</p>
    <p>{</p>
    <p>u in t8 v [ 4 ] ;</p>
    <p>r e t u r n T I F F F e tc h B y te A r r a y ( tif, d ir , v )</p>
    <p>&amp; &amp; T I F F S e tF ie ld ( tif, d ir - &gt; td ir _ ta g , v [ 0 ] , v [ 1 ] ) ;</p>
    <p>}</p>
    <p>c a s e T I F F _ S H O R T :</p>
    <p>c a s e T I F F _ S S H O R T :</p>
    <p>{</p>
    <p>u in t1 6 v [ 2 ] ;</p>
    <p>r e t u r n T I F F F e tc h S h o r tA r r a y ( tif, d ir , v )</p>
    <p>&amp; &amp; T I F F S e tF ie ld ( tif, d ir - &gt; td ir _ ta g , v [ 0 ] , v [ 1 ] ) ;</p>
    <p>}</p>
    <p>d e f a u lt :</p>
    <p>r e t u r n 0 ;</p>
    <p>}</p>
    <p>}</p>
    <p>s t a t ic in t</p>
    <p>T I F F F e t c h S u b je c t D is t a n c e ( T I F F * t if, T I F F D ir E n t r y * d ir )</p>
    <p>{</p>
    <p>u in t 3 2 l[ 2 ] ;</p>
    <p>f lo a t v ;</p>
    <p>in t o k = 0 ;</p>
    <p>if ( T I F F F e t c h D a t a ( t if, d ir , ( c h a r * ) l)</p>
    <p>&amp; &amp; c v t R a t io n a l( t if, d ir , l[ 0 ] , l[ 1 ] , &amp; v ) ) {</p>
    <p>/ *</p>
    <p>* X X X : N u m e r a t o r 0 x F F F F F F F F m e a n s t h a t w e h a v e in f in it e</p>
    <p>* d is t a n c e . I n d ic a t e t h a t w it h a n e g a t iv e f lo a t in g p o in t</p>
    <p>* S u b j e c t D is t a n c e v a lu e .</p>
    <p>* /</p>
    <p>o k = T I F F S e t F ie ld ( t if, d ir - &gt; t d ir _ t a g ,</p>
    <p>( l[ 0 ] ! = 0 x F F F F F F F F ) ? v : - v ) ;</p>
    <p>}</p>
    <p>r e t u r n o k ;</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>LibTIFF: Bug Analysis</p>
    <p>TIFFFetchShortArray is actually a wrapper around TIFFFetchData.</p>
    <p>The two are pretty much synonyms.</p>
    <p>These functions are part of an API local to libTIFF.</p>
    <p>Badly designed API: the amount of data to be copied into the buffer is passed in one of the fields of the dir-structure and not explicitly!</p>
    <p>Developers missed this in both cases and its hard to blame them.</p>
  </div>
  <div class="page">
    <p>The times of grep memcpy ./*.c may be</p>
    <p>over. But that does not mean patterns of</p>
    <p>API use that lead to vulnerabilities no</p>
    <p>longer exist!</p>
  </div>
  <div class="page">
    <p>Vulnerability Extrapolation</p>
    <p>Given a function known to be vulnerable,</p>
    <p>determine functions similar to this one in</p>
    <p>terms of application-specific API usage</p>
    <p>patterns.</p>
    <p>Vulnerability Extrapolation exploits the</p>
    <p>information leak you get every time a</p>
    <p>vulnerability is disclosed!</p>
  </div>
  <div class="page">
    <p>What needs to be done</p>
    <p>We need to be able to determine how</p>
    <p>similar functions are in terms of dominant</p>
    <p>programming patterns.</p>
    <p>We need to find a way to extract these</p>
    <p>programming patterns from a code-base in</p>
    <p>the first place.</p>
    <p>How do we do that?</p>
  </div>
  <div class="page">
    <p>Similarity  A decomposition</p>
    <p>Signal Processing: Decomposition into</p>
    <p>components of different frequencies: Noise is</p>
    <p>suspected to be of high frequency while the</p>
    <p>signal is of lower frequency.</p>
    <p>Decomposition into</p>
    <p>shape and rotation:</p>
    <p>If rotation is just a</p>
    <p>detail, these are</p>
    <p>pretty similar. In Face-Recognition,</p>
    <p>faces are decomposed</p>
    <p>into weighted sums of</p>
    <p>commonly found patterns</p>
    <p>+ a noise-term.</p>
  </div>
  <div class="page">
    <p>Think of it as</p>
    <p>zooming out</p>
    <p>Decreasing dominance of pattern</p>
    <p>Increasing level of detail/frequency</p>
    <p>s t a t ic in t</p>
    <p>T I F F F e t c h S u b je c t D is t a n c e ( T I F F * t if, T I F F D ir E n t r y * d ir )</p>
    <p>{</p>
    <p>u in t 3 2 l[ 2 ] ;</p>
    <p>f lo a t v ;</p>
    <p>in t o k = 0 ;</p>
    <p>if ( T I F F F e t c h D a t a ( t if, d ir , ( c h a r * ) l)</p>
    <p>&amp; &amp; c v t R a t io n a l( t if, d ir , l[ 0 ] , l[ 1 ] , &amp; v ) ) {</p>
    <p>/ *</p>
    <p>* X X X : N u m e r a t o r 0 x F F F F F F F F m e a n s t h a t w e h a v e in f in it e</p>
    <p>* d is t a n c e . I n d ic a t e t h a t w it h a n e g a t iv e f lo a t in g p o in t</p>
    <p>* S u b j e c t D is t a n c e v a lu e .</p>
    <p>* /</p>
    <p>o k = T I F F S e t F ie ld ( t if, d ir - &gt; t d ir _ t a g ,</p>
    <p>( l[ 0 ] ! = 0 x F F F F F F F F ) ? v : - v ) ;</p>
    <p>}</p>
    <p>r e t u r n o k ;</p>
    <p>}</p>
    <p>Usage</p>
    <p>Pattern</p>
    <p>Usage</p>
    <p>Pattern</p>
    <p>Usage</p>
    <p>Pattern</p>
    <p>Linear approximation of each function by the most dominant API usage</p>
    <p>patterns of the code-base it is contained in!</p>
  </div>
  <div class="page">
    <p>Extracting dominant patterns</p>
    <p>How do we identify the most dominant API</p>
    <p>usage patterns of a code-base?</p>
    <p>In Face Recognition, a standard technique</p>
    <p>is Principal Component Analysis.</p>
  </div>
  <div class="page">
    <p>Mapping code to</p>
    <p>the vector space</p>
    <p>Describe functions by the API-symbols they contain.</p>
    <p>API-symbols are extracted using a fuzzy parser.</p>
    <p>Each API-symbol is associated with a dimension.</p>
    <p>func1(){</p>
    <p>int *ptr = malloc(64);</p>
    <p>fetchArray(pb, ptr);</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>Principal Component Analysis</p>
    <p>Data Matrix (Contains all function-vectors)</p>
    <p>Representation of functions in terms</p>
    <p>of the most dominant patterns</p>
    <p>Each row is a representation</p>
    <p>of an API-symbol in terms of</p>
    <p>the most dominant patterns</p>
    <p>Each column of U</p>
    <p>is a dominant</p>
    <p>pattern.</p>
    <p>Strength of pattern</p>
  </div>
  <div class="page">
    <p>In summary</p>
  </div>
  <div class="page">
    <p>A toy problem to gain an intuition</p>
    <p>Group 1</p>
    <p>v o id g u iF u n c 1 ( G tk W id g e t * w id g e t )</p>
    <p>{</p>
    <p>in t j;</p>
    <p>g u i_ m a k e _ w in d o w ( w id g e t) ;</p>
    <p>G tk B u tto n * b u tto n ;</p>
    <p>b u tto n = g u i_ n e w _ b u tto n ( ) ;</p>
    <p>g u i_ s h o w _ w in d o w ( ) ;</p>
    <p>}</p>
    <p>v o id g u iF u n c 2 ( G tk W id g e t * w id g e t )</p>
    <p>{</p>
    <p>g u i_ m a k e _ w in d o w ( w id g e t ) ;</p>
    <p>G tk B u tto n * m y B u tto n ;</p>
    <p>b u tto n 1 = g u i_ n e w _ b u tto n ( ) ;</p>
    <p>b u tto n 2 = g u i_ n e w _ b u tto n ( ) ;</p>
    <p>b u tto n 3 = g u i_ n e w _ b u tto n ( ) ;</p>
    <p>f o r ( in t i = 1 0 ; i ! = i; i+ + )</p>
    <p>d o _ g u i_ s tu ff( ) ;</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>Group2</p>
    <p>v o id n e t F u n c 1 ( )</p>
    <p>{</p>
    <p>in t fd ;</p>
    <p>in t i = 0 ;</p>
    <p>s t r u c t s o c k a d d r _ in in ;</p>
    <p>fd = s o c k e t ( a r g u m e n t s ) ;</p>
    <p>r e c v ( fd , m o r e A r g u m e n t s ) ;</p>
    <p>if ( c o n d it io n ) {</p>
    <p>i+ + ;</p>
    <p>s e n d ( fd , i, a r g ) ;</p>
    <p>}</p>
    <p>s e n d ( fd , i, a r g ) ;</p>
    <p>c lo s e ( fd ) ;</p>
    <p>}</p>
    <p>v o id n e t F u n c 2 ( )</p>
    <p>{</p>
    <p>in t fd ;</p>
    <p>s t r u c t s o c k a d d r _ in in ;</p>
    <p>h o s t e n t h o s t ;</p>
    <p>fd = s o c k e t ( a r g u m e n t s ) ;</p>
    <p>r e c v ( fd , m o r e A r g u m e n t s ) ;</p>
    <p>g e t h o s t b y n a m e ( h o s t )</p>
    <p>if ( c o n d it io n ) {</p>
    <p>in t i = 0 ;</p>
    <p>i+ + ;</p>
    <p>s e n d ( fd , i, a r g ) ;</p>
    <p>}</p>
    <p>c lo s e ( fd ) ;</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>Group 3</p>
    <p>v o id lis t F u n c 1 ( in t e le m )</p>
    <p>{</p>
    <p>G L is t m y L is t ;</p>
    <p>if ( ! lis t _ c h e c k ( m y L is t ) ) {</p>
    <p>d o _ lis t _ e r r o r _ s t u ff ( ) ;</p>
    <p>r e t u r n ;</p>
    <p>}</p>
    <p>lis t _ a d d ( m y L is t , e le m ) ;</p>
    <p>}</p>
    <p>v o id lis tF u n c 2 ( in t e le m )</p>
    <p>{</p>
    <p>G L is t m y L is t ;</p>
    <p>if ( ! lis t_ c h e c k ( m y L is t ) ) {</p>
    <p>d o _ lis t_ e r r o r _ s tu ff ( ) ;</p>
    <p>r e t u r n ;</p>
    <p>}</p>
    <p>lis t_ r e m o v e ( m y L is t , e le m ) ;</p>
    <p>lis t_ d e le te ( m y L is t ) ;</p>
    <p>}</p>
  </div>
  <div class="page">
    <p>Projection onto the first</p>
    <p>two principal componentsCore API</p>
    <p>Occurs in this context</p>
    <p>but does not constitute</p>
    <p>the pattern</p>
    <p>Functions</p>
  </div>
  <div class="page">
    <p>Vulnerability Extrapolation</p>
    <p>Take a function that used to be vulnerable</p>
    <p>as an input.</p>
    <p>Measure distances to other functions to</p>
    <p>determine those functions, which are most</p>
    <p>similar.</p>
    <p>Lets try that for FFmpeg.</p>
  </div>
  <div class="page">
    <p>Original bug: CVE-2010-3429</p>
    <p>s t a t ic in t flic _ d e c o d e _ fr a m e _ 8 B P P ( A V C o d e c C o n te x t * a v c tx ,</p>
    <p>v o id * d a t a , in t * d a t a _ s iz e ,</p>
    <p>c o n s t u in t 8 _ t * b u f, in t b u f_ s iz e )</p>
    <p>{ [ ..]</p>
    <p>p ix e ls = s - &gt; f r a m e .d a t a [ 0 ] ; [ ..]</p>
    <p>c a s e F L I _ D E L T A :</p>
    <p>y _ p t r = 0 ;</p>
    <p>c o m p r e s s e d _ lin e s = A V _ R L 1 6 ( &amp; b u f[ s t r e a m _ p t r ] ) ;</p>
    <p>s t r e a m _ p t r + = 2 ;</p>
    <p>w h ile ( c o m p r e s s e d _ lin e s &gt; 0 ) {</p>
    <p>lin e _ p a c k e t s = A V _ R L 1 6 ( &amp; b u f [ s t r e a m _ p t r ] ) ;</p>
    <p>s t r e a m _ p t r + = 2 ;</p>
    <p>if ( ( lin e _ p a c k e t s &amp; 0 x C 0 0 0 ) = = 0 x C 0 0 0 ) {</p>
    <p>/ / lin e s k ip o p c o d e</p>
    <p>lin e _ p a c k e t s = - lin e _ p a c k e t s ;</p>
    <p>y _ p t r + = lin e _ p a c k e t s * s - &gt; f r a m e .lin e s iz e [ 0 ] ;</p>
    <p>} e ls e if ( ( lin e _ p a c k e t s &amp; 0 x C 0 0 0 ) = = 0 x 4 0 0 0 ) {</p>
    <p>[ ..]</p>
    <p>} e ls e if ( ( lin e _ p a c k e t s &amp; 0 x C 0 0 0 ) = = 0 x 8 0 0 0 ) {</p>
    <p>/ / &quot; la s t b y t e &quot; o p c o d e</p>
    <p>p ix e ls [ y _ p t r + s - &gt; f r a m e .lin e s iz e [ 0 ] - 1 ] = lin e _ p a c k e t s &amp; 0 x f f ;</p>
    <p>} e ls e {</p>
    <p>[ ..]</p>
    <p>y _ p t r + = s - &gt; f r a m e .lin e s iz e [ 0 ] ;</p>
    <p>}</p>
    <p>}</p>
    <p>b r e a k ;</p>
    <p>[ ..]</p>
    <p>}</p>
    <p>unchecked index,</p>
    <p>Write to arbitrary</p>
    <p>location in memory.</p>
    <p>Decoder-Pattern:</p>
    <p>Usually a variable of</p>
    <p>type AvCodecContext</p>
    <p>AV_RL*-Functions</p>
    <p>used as sources.</p>
    <p>Lots of primitive types</p>
    <p>with specified width</p>
    <p>used.</p>
    <p>Use of memcpy,</p>
    <p>memset, etc.</p>
  </div>
  <div class="page">
    <p>Extrapolation</p>
    <p>The closest match</p>
    <p>contained the</p>
    <p>same vulnerability</p>
    <p>but it was fixed</p>
    <p>when the initial</p>
    <p>function was fixed.</p>
  </div>
  <div class="page">
    <p>s t a t ic v o id v m d _ d e c o d e ( V m d V id e o C o n t e x t * s )</p>
    <p>{</p>
    <p>[ ...]</p>
    <p>in t fr a m e _ x , fr a m e _ y ;</p>
    <p>in t fr a m e _ w id t h , fr a m e _ h e ig h t ;</p>
    <p>in t d p _ s iz e ;</p>
    <p>f r a m e _ x = A V _ R L 1 6 ( &amp; s - &gt; b u f [ 6 ] ) ;</p>
    <p>f r a m e _ y = A V _ R L 1 6 ( &amp; s - &gt; b u f [ 8 ] ) ;</p>
    <p>f r a m e _ w id t h = A V _ R L 1 6 ( &amp; s - &gt; b u f [ 1 0 ] ) - f r a m e _ x + 1 ;</p>
    <p>f r a m e _ h e ig h t = A V _ R L 1 6 ( &amp; s - &gt; b u f [ 1 2 ] ) - f r a m e _ y + 1 ;</p>
    <p>[ ...]</p>
    <p>if ( s - &gt; s iz e &gt; = 0 ) {</p>
    <p>/ * o r ig in a lly U n p a c k F r a m e in V A G ' s c o d e * /</p>
    <p>p b = p ;</p>
    <p>m e t h = * p b + + ;</p>
    <p>[ ...]</p>
    <p>d p = &amp; s - &gt; f r a m e .d a t a [ 0 ] [ f r a m e _ y * s - &gt; f r a m e .lin e s iz e [ 0 ] + f r a m e _ x ] ;</p>
    <p>d p _ s iz e = s - &gt; fr a m e .lin e s iz e [ 0 ] * s - &gt; a v c t x - &gt; h e ig h t ;</p>
    <p>p p = &amp; s - &gt; p r e v _ fr a m e .d a t a [ 0 ] [ fr a m e _ y * s - &gt; p r e v _ fr a m e .lin e s iz e [ 0 ] + fr a m e _ x ] ;</p>
    <p>s w it c h ( m e t h ) {</p>
    <p>[ ...]</p>
    <p>c a s e 2 :</p>
    <p>f o r ( i = 0 ; i &lt; fr a m e _ h e ig h t ; i+ + ) {</p>
    <p>m e m c p y ( d p , p b , f r a m e _ w id t h ) ;</p>
    <p>p b + = fr a m e _ w id t h ;</p>
    <p>d p + = s - &gt; fr a m e .lin e s iz e [ 0 ] ;</p>
    <p>p p + = s - &gt; p r e v _ fr a m e .lin e s iz e [ 0 ] ;</p>
    <p>}</p>
    <p>b r e a k ;</p>
    <p>[ ...]</p>
    <p>}</p>
    <p>}</p>
    <p>}</p>
    <p>Decoder-Pattern:</p>
    <p>Usually a variable of</p>
    <p>type AvCodecContext</p>
    <p>AV_RL*-Functions</p>
    <p>used as sources.</p>
    <p>Lots of primitive types</p>
    <p>with specified width</p>
    <p>used.</p>
    <p>Use of memcpy,</p>
    <p>memset, etc.</p>
    <p>Again an unchecked</p>
    <p>index into the pixel</p>
    <p>buffer!</p>
  </div>
  <div class="page">
    <p>Summary</p>
    <p>Often inherent link between vulnerabilities</p>
    <p>and API usage patterns</p>
    <p>Application of machine learning for</p>
    <p>automatic identification of these patterns</p>
    <p>Extrapolation of known vulnerabilities</p>
    <p>using dominant API usage patterns</p>
    <p>Discovery of a 0-day vulnerability in a</p>
    <p>widely used application</p>
  </div>
  <div class="page">
    <p>Questions?</p>
    <p>Recurity Labs GmbH, Berlin, Germany http://www.recurity-labs.com</p>
    <p>Fabian Yamaguchi Vulnerability Researcher</p>
    <p>fabs@recurity-labs.com</p>
  </div>
</Presentation>
