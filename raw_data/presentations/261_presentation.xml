<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>HotOS - XIII Napa, California May 9-11, 2011</p>
    <p>Operating System Implications of Fast, Cheap, Non-Volatile Memory</p>
    <p>Katelin Bailey, Luis Ceze, Steven D. Gribble, Henry M. Levy Department of Computer Science</p>
    <p>University of Washington</p>
  </div>
  <div class="page">
    <p>NVRAM: a disruptive technology</p>
    <p>*photos from www.gizmodo.com and Assessment of the Potential &amp; Maturity of Selected Emerging Research Memory Technologies Workshop &amp; ERD/ERM Working Group Meeting</p>
    <p>Viable NVRAM is just around the corner:</p>
    <p>phase change memory  memristors</p>
    <p>Persistent memory could be disruptive to OS</p>
    <p>main memory  persistent storage</p>
    <p>This is a great opportunity to reimagine OS design</p>
  </div>
  <div class="page">
    <p>DiskDRAM persistencevolatility</p>
    <p>Fast Dense, cheap Byte addressable Volatile High refresh power</p>
    <p>A reminder about the world we're living in...</p>
    <p>Slow Denser per bit Sector-oriented Persistent Lower power</p>
  </div>
  <div class="page">
    <p>Fast Dense, cheap Byte addressable Volatile High refresh power</p>
    <p>Wouldn't you like to have the best of both worlds?</p>
    <p>Slow Denser per bit Sector-oriented Persistent Lower power</p>
    <p>DiskDRAM persistencevolatility</p>
  </div>
  <div class="page">
    <p>Fast Dense, cheap Byte addressable Volatile High refresh power</p>
    <p>Memory technologies that bridge the gap</p>
    <p>Slow Denser per bit Sector-oriented Persistent Lower power</p>
    <p>Phase-Change Memory Memristors</p>
    <p>FeRAM Spin-transfer Torque MRAM</p>
    <p>DiskDRAM persistencevolatility</p>
  </div>
  <div class="page">
    <p>Fast Dense, cheap</p>
    <p>Byte addressable Persistent</p>
    <p>Lower power</p>
    <p>Memory technologies that bridge the gap</p>
    <p>NVM or NVRAM Non-volatile memory</p>
    <p>(a general term for these technologies)</p>
    <p>DiskDRAM persistencevolatility</p>
  </div>
  <div class="page">
    <p>Alternatives for hardware technology</p>
  </div>
  <div class="page">
    <p>Filesystems: maintains current semantics on NVM with smoother NVM implementation [Condit 2009]</p>
    <p>Closing the gap: architecture solution to write endurance and latency: NVM for main memory [Qureshi et al.]</p>
    <p>Persistent data structures: with limited semantics for application access [NVheaps, Mnemosyne, and Moneta]</p>
    <p>While these approaches are essentially evolutionary, we'd like to look for something a bit more revolutionary.</p>
    <p>Related work</p>
  </div>
  <div class="page">
    <p>Alternatives for hardware technology</p>
    <p>We're discussing only this last option: entirely NVRAM</p>
    <p>The most extreme option offers the widest array of research and design opportunities</p>
  </div>
  <div class="page">
    <p>New technology can serve as a jumping point for new OS research opportunities</p>
    <p>Processes could be eternally long lived</p>
    <p>...but how do we reinitialize structures or state?</p>
    <p>Systems could keep very long logs of execution</p>
    <p>....but what to forget? when?</p>
    <p>Reduce the cost of startup, reboot, and hibernation.</p>
    <p>This talk shows you some (of a great many) examples in filesystems, virtual memory, processes. More in the paper.</p>
    <p>Long-term opportunities in OS design</p>
  </div>
  <div class="page">
    <p>Every piece of data is now persistent, increasing reliability.</p>
    <p>Every piece of data in the stack and heap is persistent whether consistent or not.</p>
    <p>But what if there are bugs?</p>
    <p>Where is it safe to roll back to?</p>
    <p>How does corruption show up?</p>
    <p>What are the consistency guarantees?</p>
    <p>Reliability built on persistence</p>
  </div>
  <div class="page">
    <p>Any data in the stack, heap, or elsewhere is durable.</p>
    <p>Sensitive data is therefore also durable and must be explicitly removed.</p>
    <p>How is data scrubbed or verified?</p>
    <p>How many places do we rely on volatility to clean up for us?</p>
    <p>How do we deal with things like the cold boot attack?</p>
    <p>Security benefits and concerns</p>
  </div>
  <div class="page">
    <p>Virtual memory is a bridge between main memory and storage. With a single level, this bridge is no longer needed.</p>
    <p>Swapping is clearly not needed, but we still need naming and protection.</p>
    <p>Does page granularity still make sense?</p>
    <p>In a single-level system what protection systems make sense? What naming system?</p>
    <p>What does the address space look like?</p>
    <p>Virtual memory, naming, and addressing</p>
  </div>
  <div class="page">
    <p>Current process models...</p>
    <p>Applications today have a number of distinct, well-defined states.</p>
    <p>Is there really a need for so many different states?</p>
    <p>Why do we have 3 different process formats?</p>
  </div>
  <div class="page">
    <p>At every moment in time a process is persistent: a sequence of checkpoints.</p>
    <p>How do we handle faults? updates?</p>
    <p>What does a &quot;reboot&quot; imply?</p>
    <p>... New process models</p>
  </div>
  <div class="page">
    <p>Non-volatile main memory affects nearly every area of OS design:</p>
    <p>virtual memory, filesystems, processes, reliability, security, etc.</p>
    <p>Many questions to be answered</p>
    <p>Many opportunities for new designs</p>
    <p>We dont know what the right answer is</p>
    <p>Conclusions</p>
  </div>
  <div class="page">
    <p>Questions?</p>
    <p>Contact at katelin@cs.washington.edu http://www.cs.washington.edu/homes/katelin</p>
  </div>
  <div class="page"/>
</Presentation>
