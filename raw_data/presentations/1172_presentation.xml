<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Pre-Select Static Caching and Neighborhood Ordering for</p>
    <p>BFS-like Algorithms on Disk-based Graph Engines</p>
    <p>Eunjae Lee, Junghyun Kim, Keunhak Lim, Sam H. Noh, Jiwon Seo UNIST, Hanyang University</p>
    <p>Pre-Select Static Caching and</p>
    <p>Neighborhood Ordering for</p>
    <p>BFS-like Algorithms on Disk-based Graph Engines</p>
    <p>Eunjae Lee, Junghyun Kim, Keunhak Lim, Sam H. Noh, Jiwon Seo</p>
    <p>UNIST, Hanyang University</p>
  </div>
  <div class="page">
    <p>BFS-like Algorithms in Disk-based Graph Engine</p>
    <p>requested vertices</p>
    <p>SSD DRAM</p>
    <p>page B</p>
    <p>page A</p>
    <p>Page Cache</p>
    <p>page C</p>
    <p>page A</p>
    <p>page B</p>
    <p>BFS-like Algorithms: recursive graph traversal  Eg. BFS, Shortest Paths, Betweenness Centrality, ...</p>
    <p>Disk-based Graph Engine  Graph (edge lists) is stored on disk  When vertices are visited, their edge lists are loaded to page cache</p>
  </div>
  <div class="page">
    <p>BFS-like Algorithms in Disk-based Graph Engine</p>
    <p>H it</p>
    <p>R at</p>
    <p>io</p>
    <p>Page Cache Size</p>
    <p>BFS DIAM BC SP APSP WCC</p>
    <p>Page cache is inefficient for BFS-like algorithm 1. Increasing size of page cache does not help performance</p>
  </div>
  <div class="page">
    <p>BFS-like Algorithms in Disk-based Graph Engine</p>
    <p>requested vertices</p>
    <p>SSD DRAM</p>
    <p>page B</p>
    <p>page A</p>
    <p>Page Cache</p>
    <p>page C</p>
    <p>page B</p>
    <p>page C</p>
    <p>Page cache is inefficient for BFS-like algorithm 1. Increasing size of page cache does not help performance 2. Utilization of page cache is low</p>
    <p>=</p>
    <p>=</p>
  </div>
  <div class="page">
    <p>BFS-Aware Static Cache (BASC)  Keep separate cache for selected edge lists  Pre-loaded: edges pre-selected through pre-analysis  Static: contents of cache does not change</p>
    <p>Neighborhood Ordering (Norder)  Graph ordering optimization for better memory utilization</p>
    <p>Our Optimization</p>
  </div>
  <div class="page">
    <p>Page Cache BASC</p>
    <p>requested vertices</p>
    <p>SSD DRAM</p>
    <p>page B</p>
    <p>page A</p>
    <p>page C</p>
    <p>page A</p>
    <p>Preload</p>
  </div>
  <div class="page">
    <p>Optimize with</p>
    <p>Norder</p>
    <p>requested vertices</p>
    <p>SSD DRAM</p>
    <p>page B</p>
    <p>page A</p>
    <p>Page Cache</p>
    <p>page C</p>
    <p>page A</p>
    <p>page B</p>
    <p>requested vertices</p>
    <p>SSD DRAM</p>
    <p>page Bpage A</p>
    <p>Page Cache</p>
    <p>page C</p>
    <p>page A</p>
  </div>
  <div class="page">
    <p>Performance Improvement</p>
    <p>G N G N G N G N G N G N G N G N G N BFS</p>
    <p>(2.40) DIAM (6.40)</p>
    <p>BC (521)</p>
    <p>BFS (4.89)</p>
    <p>DIAM (11.3)</p>
    <p>BC (664)</p>
    <p>BFS (34.4)</p>
    <p>DIAM (98.1)</p>
    <p>BC (6271)</p>
    <p>(a) LiveJournal (b) Wikipedia (c) Twitter</p>
    <p>N or</p>
    <p>m al</p>
    <p>iz ed</p>
    <p>E xe</p>
    <p>cu tio</p>
    <p>n Ti</p>
    <p>m e</p>
    <p>page cache BASC-GVS</p>
    <p>BASC + Norder: 54% faster than Gorder* + Page Cache  Tested with 7 BFS-like algorithms &amp; 5 data sets</p>
    <p>Total cache size is 25% of graph file size  Gorder is state-of-the-art ordering method [H. Wei, SIGMOD16]</p>
  </div>
  <div class="page">
    <p>Presentation</p>
    <p>Time  Thursday, July 11, 2019  Track 2: Graph Processing Frameworks  11:15 AM  12:35 PM, 4th presentation</p>
    <p>Authors attending ATC 19</p>
    <p>Eunjae Lee Jiwon Seo Sam H. Noh</p>
  </div>
</Presentation>
