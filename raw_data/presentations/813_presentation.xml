<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Building a Power-Proportional Software Router</p>
    <p>Luca Niccolini, Gianluca Iannaccone, Sylvia Ratnasamy, Jaideep Chandrashekar, Luigi Rizzo</p>
  </div>
  <div class="page">
    <p>Motivation Networking devices</p>
    <p>Provisioned for peak load  Underutilized on average</p>
    <p>~5% in enterprise networks 30-40% for ISPs 5X variability in ADSL networks</p>
    <p>Highly inefficient at low load 80-90% with no traffic</p>
    <p>Large deployments of network appliances (x86 based)  WAN optimizer, Firewall   Approximately 2 appliances for 3 routers in</p>
    <p>enterprises [Sekar  HotNets11]</p>
  </div>
  <div class="page">
    <p>Challenge</p>
    <p>How to build an energy-efficient software router?</p>
    <p>Can adapt dynamically to the incoming rate Consumes power in proportion to the incoming rate Still achieves peak packet forwarding performance</p>
    <p>Our solution: Reduce energy by up to 50%, Latency increase of 10us</p>
  </div>
  <div class="page">
    <p>HW/SW Platform</p>
    <p>General Purpose x86 servers Linux + Click modular router (kernel mode) 10Gbps network  Fast enough</p>
    <p>Routebricks, PacketShader, Netmap</p>
    <p>Open Platform  Can use OS primitives for low-power 4</p>
  </div>
  <div class="page">
    <p>Multiqueue operation</p>
    <p>RSS hash</p>
    <p>...</p>
    <p>C1</p>
    <p>C2</p>
    <p>Cn</p>
    <p>RX queue 1</p>
    <p>demux</p>
    <p>queue number</p>
    <p>packets</p>
    <p>} }</p>
    <p>active cores</p>
    <p>idle cores (C6)</p>
    <p>RX queue 2</p>
    <p>RX queue n</p>
    <p>redirect table</p>
    <p>Traffic is split among multiple HW queues Receive Side Scaling  Each queue is managed by one core</p>
    <p>(no contention)  How many queues/cores to use?</p>
    <p>Router</p>
  </div>
  <div class="page">
    <p>Primitives for low power Sleep States / C-States</p>
    <p>Co  Active, executing instructions  C1  Active, not executing instructions (clock-gated)</p>
    <p>Cn  Deepest Sleep State (power-gated)</p>
    <p>Idle Power vs. Exit Latency tradeoff</p>
    <p>DVFS / P-States</p>
    <p>P0  Max Operating Frequency  P1, P2, P3   Pn  Min Operating Frequency</p>
  </div>
  <div class="page">
    <p>Outline Power consumption breakdown Power-saving algorithms guidelines Online algorithm implementation Performance Evaluation</p>
  </div>
  <div class="page">
    <p>Power Consumption Breakdown</p>
    <p>High IDLE power</p>
    <p>Memory, NICs contribute little</p>
    <p>CPUs are the most power-hungry components, with a high dynamic range 8</p>
    <p>Idle, w/out Click Click, zero traffic Click, 40 Gbps 0</p>
    <p>y s te</p>
    <p>m p</p>
    <p>o w</p>
    <p>e r</p>
    <p>(W )</p>
    <p>Motherboard Fans NICs Memory CPUs</p>
  </div>
  <div class="page">
    <p>System Idle Power Trend Id</p>
    <p>le P</p>
    <p>ow er</p>
    <p>Single Processor Dual Processor</p>
  </div>
  <div class="page">
    <p>Addressing SW inefficiency with NAPI</p>
    <p>Packet rate (pps)</p>
    <p>L a te</p>
    <p>n c y (</p>
    <p>u s )</p>
    <p>NAPI!Click Click (unmodified)</p>
    <p>introduced a modest increase in latency</p>
    <p>Enables power savings</p>
    <p>Idle 40Gbps @ 1024B 29Mpps @ 64B 0</p>
    <p>S y s te</p>
    <p>m p</p>
    <p>o w</p>
    <p>e r</p>
    <p>(W )</p>
    <p>NAPI!Click Click (unmodified)</p>
  </div>
  <div class="page">
    <p>Outline Power consumption breakdown Power-saving algorithms guidelines Online algorithm implementation Performance Evaluation</p>
  </div>
  <div class="page">
    <p>Power Saving algorithms Design space</p>
  </div>
  <div class="page">
    <p>Power Saving algorithms Design space</p>
    <p>Single Core  Race-to-idle</p>
    <p>Process packets as fast as possible  Maximize sleep time</p>
    <p>Just-in-time</p>
    <p>Process packets as slow as we can  Never sleep</p>
    <p>Multi Core  #cores vs. operating frequency tradeoff</p>
  </div>
  <div class="page">
    <p>Single Core Case</p>
    <p>S y s te</p>
    <p>m p</p>
    <p>o w</p>
    <p>e r</p>
    <p>(W )</p>
    <p>Just-in-time vs Race-to-idle  I/O bound workload  Doubling the frequency does not halves the time  Race-to-idle drawbacks (idle power, exit-latency)</p>
  </div>
  <div class="page">
    <p>Single Core Case</p>
    <p>S y s te</p>
    <p>m p</p>
    <p>o w</p>
    <p>e r</p>
    <p>(W )</p>
    <p>Just-in-time vs Race-to-idle  I/O bound workload  Doubling the frequency does not halves the time  Race-to-idle drawbacks (idle power, exit-latency)</p>
    <p>Run at the minimum frequency that keep up with the incoming rate</p>
  </div>
  <div class="page">
    <p>Multicore case - # cores Use k cores at frequency f Use n*k cores at frequency f/n</p>
    <p>k</p>
    <p>E n</p>
    <p>e rg</p>
    <p>y E</p>
    <p>ff ic</p>
    <p>ie n</p>
    <p>c y (</p>
    <p>M p</p>
    <p>k ts</p>
    <p>/J )</p>
    <p>k cores f=3.2 GHz</p>
    <p>Higher is better</p>
  </div>
  <div class="page">
    <p>Multicore case - # cores</p>
    <p>Why not run all the cores all the time?</p>
    <p>Limited number of frequency levels available</p>
    <p>The lower frequency level is typically high  Half the maximum in our case (1.6GHz  3.3Ghz)</p>
  </div>
  <div class="page">
    <p>Multicore case - # cores</p>
    <p>Why not run all the cores all the time?</p>
    <p>Limited number of frequency levels available</p>
    <p>The lower frequency level is typically high  Half the maximum in our case (1.6GHz  3.3Ghz)</p>
    <p>Run the maximum number of cores that can be kept fully utilized</p>
  </div>
  <div class="page">
    <p>Multicore case  Sleep states How to operate inactive and underutilized cores?</p>
    <p>C-State System Power (12 cores)</p>
    <p>Exit Latency</p>
    <p>C1 133 W &lt; 1 us</p>
    <p>C3 120 W ~ 60 us</p>
    <p>C6 115 W ~ 87 us</p>
    <p>Best for inactive Cores</p>
  </div>
  <div class="page">
    <p>Multicore case  Sleep states How to operate inactive and underutilized cores?</p>
    <p>C-State System Power (12 cores)</p>
    <p>Exit Latency</p>
    <p>C1 133 W &lt; 1 us</p>
    <p>C3 120 W ~ 60 us</p>
    <p>C6 115 W ~ 87 us</p>
    <p>Let underutilized cores take quick and light naps (C1)</p>
    <p>Best for inactive Cores</p>
  </div>
  <div class="page">
    <p>Outline Power consumption breakdown Power-saving algorithms guidelines Online algorithm implementation Performance Evaluation</p>
  </div>
  <div class="page">
    <p>Offered Load (Mpps)</p>
    <p>S y s te</p>
    <p>m P</p>
    <p>o w</p>
    <p>e r</p>
    <p>(W )</p>
    <p>Power envelope</p>
    <p>&gt;&gt;&gt; Load increase &gt;&gt;&gt;</p>
  </div>
  <div class="page">
    <p>Offered Load (Mpps)</p>
    <p>S y s te</p>
    <p>m P</p>
    <p>o w</p>
    <p>e r</p>
    <p>(W )</p>
    <p>Power envelope</p>
    <p>&gt;&gt;&gt; Load increase &gt;&gt;&gt;</p>
  </div>
  <div class="page">
    <p>Offered Load (Mpps)</p>
    <p>S y s te</p>
    <p>m P</p>
    <p>o w</p>
    <p>e r</p>
    <p>(W )</p>
    <p>Power envelope</p>
    <p>&gt;&gt;&gt; Load increase &gt;&gt;&gt;</p>
  </div>
  <div class="page">
    <p>Offered Load (Mpps)</p>
    <p>S y s te</p>
    <p>m P</p>
    <p>o w</p>
    <p>e r</p>
    <p>(W )</p>
    <p>Power envelope</p>
    <p>&lt;&lt;&lt; Load decrease &lt;&lt;&lt;</p>
  </div>
  <div class="page">
    <p>Offered Load (Mpps)</p>
    <p>S y s te</p>
    <p>m P</p>
    <p>o w</p>
    <p>e r</p>
    <p>(W )</p>
    <p>Power envelope</p>
    <p>&lt;&lt;&lt; Load decrease &lt;&lt;&lt;</p>
  </div>
  <div class="page">
    <p>Offered Load (Mpps)</p>
    <p>S y s te</p>
    <p>m P</p>
    <p>o w</p>
    <p>e r</p>
    <p>(W )</p>
    <p>Power envelope</p>
    <p>&lt;&lt;&lt; Load decrease &lt;&lt;&lt;</p>
  </div>
  <div class="page">
    <p>RSS hash</p>
    <p>...</p>
    <p>C1</p>
    <p>C2</p>
    <p>Cn</p>
    <p>RX queue 1</p>
    <p>demux</p>
    <p>queue number</p>
    <p>packets</p>
    <p>} }</p>
    <p>active cores</p>
    <p>idle cores (C6)</p>
    <p>RX queue 2</p>
    <p>RX queue n</p>
    <p>redirect table</p>
    <p>Implementation</p>
    <p>Router</p>
  </div>
  <div class="page">
    <p>RSS hash</p>
    <p>...</p>
    <p>C1</p>
    <p>C2</p>
    <p>Cn</p>
    <p>RX queue 1</p>
    <p>demux</p>
    <p>queue number</p>
    <p>packets</p>
    <p>} }</p>
    <p>active cores</p>
    <p>idle cores (C6)</p>
    <p>RX queue 2</p>
    <p>RX queue n</p>
    <p>redirect table</p>
    <p>Implementation</p>
    <p>Controller</p>
    <p>Router</p>
  </div>
  <div class="page">
    <p>RSS hash</p>
    <p>...</p>
    <p>C1</p>
    <p>C2</p>
    <p>Cn</p>
    <p>RX queue 1</p>
    <p>demux</p>
    <p>queue number</p>
    <p>packets</p>
    <p>} }</p>
    <p>active cores</p>
    <p>idle cores (C6)</p>
    <p>RX queue 2</p>
    <p>RX queue n</p>
    <p>redirect table</p>
    <p>Implementation</p>
    <p>Controller</p>
    <p>Router</p>
  </div>
  <div class="page">
    <p>RSS hash</p>
    <p>...</p>
    <p>C1</p>
    <p>C2</p>
    <p>Cn</p>
    <p>RX queue 1</p>
    <p>demux</p>
    <p>queue number</p>
    <p>packets</p>
    <p>} }</p>
    <p>active cores</p>
    <p>idle cores (C6)</p>
    <p>RX queue 2</p>
    <p>RX queue n</p>
    <p>redirect table</p>
    <p>Implementation</p>
    <p>Controller</p>
    <p>Router</p>
  </div>
  <div class="page">
    <p>RSS hash</p>
    <p>...</p>
    <p>C1</p>
    <p>C2</p>
    <p>Cn</p>
    <p>RX queue 1</p>
    <p>demux</p>
    <p>queue number</p>
    <p>packets</p>
    <p>} }</p>
    <p>active cores</p>
    <p>idle cores (C6)</p>
    <p>RX queue 2</p>
    <p>RX queue n</p>
    <p>redirect table</p>
    <p>Implementation</p>
    <p>Controller</p>
    <p>Router</p>
  </div>
  <div class="page">
    <p>RSS hash</p>
    <p>...</p>
    <p>C1</p>
    <p>C2</p>
    <p>Cn</p>
    <p>RX queue 1</p>
    <p>demux</p>
    <p>queue number</p>
    <p>packets</p>
    <p>} }</p>
    <p>active cores</p>
    <p>idle cores (C6)</p>
    <p>RX queue 2</p>
    <p>RX queue n</p>
    <p>redirect table</p>
    <p>Implementation</p>
    <p>Controller</p>
    <p>Router</p>
  </div>
  <div class="page">
    <p>Outline Power consumption breakdown Power-saving algorithms guidelines Online algorithm implementation Performance Evaluation</p>
  </div>
  <div class="page">
    <p>Power consumption</p>
    <p>Idle</p>
    <p>Time (s)</p>
    <p>S y</p>
    <p>s te</p>
    <p>m P</p>
    <p>o w</p>
    <p>e r</p>
    <p>(W )</p>
    <p>Idle</p>
    <p>Time (s)</p>
    <p>S y</p>
    <p>s te</p>
    <p>m P</p>
    <p>o w</p>
    <p>e r</p>
    <p>(W )</p>
    <p>Idle</p>
    <p>Time (s)</p>
    <p>S y</p>
    <p>s te</p>
    <p>m P</p>
    <p>o w</p>
    <p>e r</p>
    <p>(W )</p>
    <p>Idle</p>
    <p>Time (s)</p>
    <p>S y</p>
    <p>s te</p>
    <p>m P</p>
    <p>o w</p>
    <p>e r</p>
    <p>(W )S y s te</p>
    <p>m P</p>
    <p>o w e r (W</p>
    <p>)</p>
    <p>T i m e ( s )</p>
    <p>IPv4 Routing</p>
    <p>NetFlow</p>
    <p>IPSEC</p>
    <p>WAN Optimizer</p>
    <p>Savings, compared to NAPI-Click</p>
    <p>Idle</p>
    <p>Time (s)</p>
    <p>S y s te</p>
    <p>m P</p>
    <p>o w</p>
    <p>e r</p>
    <p>(W )</p>
    <p>Click NAPI!Click PowerSave</p>
  </div>
  <div class="page">
    <p>Latency / Loss / Reordering Latency  ~10s increase</p>
    <p>on average compared to polling</p>
    <p>No Packet Loss No Reordering  could happen when waking up a queue</p>
    <p>Time (s)</p>
    <p>L a</p>
    <p>te n</p>
    <p>c y</p>
    <p>( u</p>
    <p>s )</p>
    <p>Click Powersave</p>
    <p>Time (s)</p>
    <p>In p</p>
    <p>u t</p>
    <p>R a te</p>
    <p>( G</p>
    <p>b p</p>
    <p>s )</p>
    <p>traffic profile</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>Algorithm guidelines  Run the smallest number of cores at the minimum</p>
    <p>frequency  Increase number of cores before increasing the frequency</p>
    <p>Make the best use of power-hungry resources</p>
    <p>On-Line algorithm implementation  Monitor queue length and react quickly</p>
    <p>Make sure that queues can absorb traffic during sleep states transitions</p>
    <p>Up to 50% savings are possible  Depending on the application</p>
  </div>
</Presentation>
