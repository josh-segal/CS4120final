<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Measuring the Insecurity of Mobile Deep Links of Android</p>
    <p>Fang Liu, Chun Wang, Andres Pico, Danfeng Yao, Gang Wang</p>
  </div>
  <div class="page">
    <p>Web Browsing is Going Mobile  Users spend more time on mobile devices1</p>
    <p>Mobile devices ~ 3.1 hours  Laptops/Desktops ~ 2.2 hours</p>
    <p>Native apps: the new web interface  Shorter loading time  Customized design  5+ Million apps (Android + iOS)</p>
    <p>Apps are the future of the web?</p>
  </div>
  <div class="page">
    <p>Apps vs. Mobile Websites  Apps cannot replace websites yet</p>
    <p>Apps sit in a walled garden  Difficult to navigate across apps  Difficult to search and access in-app</p>
    <p>content globally</p>
    <p>Apps + mobile websites eco-system  Complementary to each other  Likely to co-exist (for a long time)</p>
    <p>?</p>
  </div>
  <div class="page">
    <p>Web-App Communication via Deep Links</p>
    <p>Deeper integration of websites and apps  Mobile deep links: URIs pointing to pages inside apps</p>
    <p>(604) 331-1000</p>
    <p>Greatly improve user experience!</p>
  </div>
  <div class="page">
    <p>Scheme URL: mobile deep link v1.0  Designed for functionality, no security features  Apps can register their own scheme to the OS  Android and iOS since 2009</p>
    <p>Hijacking URL schemes  Phishing  Stealing sensitive data in the URL</p>
    <p>[Mobisys11][CCS14][CCS15]</p>
    <p>Hijacking Risks of Deep Links</p>
    <p>OS</p>
    <p>Manifest.xml Intent filters fb://share/*</p>
    <p>fb://share/ Manifest.xml Intent filters fb://share/*</p>
    <p>Any app can register</p>
    <p>other apps schemes</p>
    <p>Phishing page</p>
    <p>fb://share?data=1&amp;sessionID=123</p>
  </div>
  <div class="page">
    <p>Defense Relying on Users  Prompt users when multiple apps have the same scheme</p>
    <p>But, user prompting can be skipped  If the malicious app installed before the real app  If the malicious app tricked users to set preference</p>
    <p>User as the only defense = bad defense</p>
  </div>
  <div class="page">
    <p>App links  HTTP/HTTPS links only, no custom schemes  Requires app link association fb://  https://facebook.com/</p>
    <p>Intent URL  Explicitly specify the target app by package name fb://  intent://p#Intent;scheme=fb;package=com.facebook;end</p>
    <p>Deep Link v2.0 Prevents Link Hijacking</p>
    <p>Uniqueness guaranteed by the app market</p>
  </div>
  <div class="page">
    <p>This Study  Research questions</p>
    <p>How are different mobile deep links used in practice?  How likely is an apps scheme hijacked by another app?  How effective are the new deep link mechanisms in mitigating the</p>
    <p>hijacking threats?</p>
    <p>Large-scale empirical measurements  Deep links across web and apps  Primarily focus on Android (&gt;80% market share)</p>
    <p>Let the DATA speak</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction</p>
    <p>The Adoption of Mobile Deep Links  Scheme URL vs. App Link</p>
    <p>App Links: Vulnerabilities &amp; Misconfigurations</p>
    <p>Characterizing Hijacking Attacks</p>
    <p>Hijacking Threats on the Web</p>
  </div>
  <div class="page">
    <p>Datasets  Android apps (25 app categories)</p>
    <p>164,322 most popular apps, December 2014  164,963 most popular apps, August 2016  115,399 apps in both snapshots</p>
    <p>Popular websites  Alexa top 1 million domains index page, October 2016  Dynamic crawler to mimic Chrome mobile browser (OpenWPM1)  Lower bound of mobile deep links on the web</p>
    <p>Register the same link?</p>
    <p>Hijacked links on the web pages?</p>
  </div>
  <div class="page">
    <p>Deep Link Usage in Apps Dataset Total Apps Apps register</p>
    <p>Scheme URLs Apps register App Links</p>
    <p>Apps register either Links</p>
    <p>Key observations  Mobile deep links are getting popular among apps  The vulnerable scheme URLs are still increasinly used</p>
    <p>~90% growth rate in deep link adoption</p>
    <p>Are App links properly verified?</p>
  </div>
  <div class="page">
    <p>App Link Verification  App link association to prevent link hijacking</p>
    <p>Only HTTP/HTTPS links are allowed  Establish the association between the App link and the web domain  iOS has a similar mechanism called universal link</p>
    <p>facebook.com</p>
    <p>OS</p>
    <p>App link: https://facebook.com</p>
    <p>Authorized app to open https://facebook.com? Assetlinks.json</p>
    <p>Unverified links  Android: still works, but trigger user prompt  iOS: cannot open the link in the app</p>
    <p>Path=/*Assetlinks.json</p>
  </div>
  <div class="page">
    <p>App Link Verification in Practice</p>
    <p>Common Errors (221 apps)  No associate files (177)  Under HTTP (11)  Invalid associate file (10)  Invalid app manifest (26)</p>
    <p>Rarely do apps verify their App links correctly - A lack of incentives: unverified App links can still open apps</p>
    <p>Configuration errors are not identified and mitigated quickly</p>
  </div>
  <div class="page">
    <p>App Link Vulnerability: Over-permission</p>
    <p>Allows unverified app links to skip user prompting  always using this app preference  Preference applies to all the https:// links that an app registered</p>
    <p>https://recipe.com/cupcake</p>
    <p>Recipe App (malicious)</p>
    <p>Manifest.xml Intent filters</p>
    <p>https://recipe.com  https://bank.com/login  https://bank.com/transfer</p>
    <p>Hijack password without user knowledge!  HTTPS does not help</p>
    <p>Bounce users back to browser quickly (&lt;0.5 second validated by experiment)</p>
    <p>Root cause: the preference setting is too excessive  Reported to Google in Feb 2017, case established in May 2017</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction</p>
    <p>The Adoption of Mobile Deep Links</p>
    <p>Characterizing Hijacking Attacks  Hijacking Detection</p>
    <p>Case Studies</p>
    <p>Hijacking Threats on the Web</p>
    <p>Scheme URLs are still widely used  App links are rarely verified correctly  App links introduce a new vulnerability</p>
  </div>
  <div class="page">
    <p>Identifying Potential Hijacking Apps</p>
    <p>F (%</p>
    <p>) # of Apps per Web Host</p>
    <p>CD F (%</p>
    <p>)</p>
    <p># of Apps per Schemes</p>
    <p>App2016 App2014</p>
    <p>Link collision: multiple apps that registered the same Link  18,839 unique schemes (e.g., fb://)  18,561 unique App link hosts (e.g., facebook.com)</p>
  </div>
  <div class="page">
    <p>Classifying Link Collisions Not all link collisions are malicious</p>
    <p>Scheme URL Functional scheme Represents a common functionality e.g. geo://, tel://, file://</p>
    <p>Third-party scheme Used by 3rd-party library and APIs e.g., x-oauthflow-twitter://</p>
    <p>Per-app scheme Represents individual apps e.g., fb://, twitter://</p>
    <p>App Link Functional web host N/A</p>
    <p>Third-party web host e.g., zxing.appspot.com</p>
    <p>Per-app web host e.g., facebook.com, twitter.com</p>
    <p>Potentially Malicious Hijacking</p>
  </div>
  <div class="page">
    <p>Classifying Per-App Hijacking  Manual examination by 3 judges</p>
    <p>Automated classifiers for per-app hijacking  54% accuracy overall, 84% accuracy for link collisions of 4+ apps</p>
    <p>Functional 3rd-party Per-app</p>
    <p># Schemes (# Apps) 30 (2,135) 197 (3,972) 149 (893)</p>
    <p># Hosts (# Apps) N/A 137 (999) 2,314 (1,593)</p>
    <p>Standardized URI schemes by Internet Assigned Numbers</p>
    <p>Authority (IANA) Search for online tutorials for the 3rd-party libs and APIs</p>
    <p>Not from the same developer</p>
    <p>Link Collisions</p>
  </div>
  <div class="page">
    <p>Hijacking Case Studies  Traffic hijacking</p>
    <p>google.com registered by 480 apps (305 non-Google developers)  google.navigation:// registered by 79 apps (32 developers)  Other popular targets</p>
    <p>Competing Apps  Careem (5M downloads)</p>
    <p>QatarTaxi (10K downloads)</p>
    <p>widely integrated with hotel websites/apps</p>
    <p>also registered careem://*</p>
  </div>
  <div class="page">
    <p>Case Studies (Cont.)  Redirection apps and MITM</p>
    <p>Resolve deep links and redirect users to target apps  Hard-coded mapping, without permission of the target app  Log URL and parameters to files</p>
    <p>Example: URLLander  Registered payments.ebay.com while the official eBay app did not  Registered www.paypal.com (SESSIONID parameter)</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction</p>
    <p>The Adoption of Mobile Deep Links</p>
    <p>Characterizing Hijacking Attacks</p>
    <p>Hijacking Threats on the Web</p>
    <p>Usage of Intent URL</p>
    <p>Hijacked App Links vs. Scheme URLs</p>
  </div>
  <div class="page">
    <p>intent:// ;package=x; end</p>
    <p>Extracting deep links from web pages  Regular expression matching with scheme URLs/App links  Intent URL has clear patterns:</p>
    <p>Deep Links on Alexa Top 1M Websites</p>
    <p>Scheme URL App Link Intent URL</p>
    <p>N um</p>
    <p>be r of D ee p Li nk s</p>
    <p>Intent URLs are rarely used!</p>
  </div>
  <div class="page">
    <p>Hijacked Deep Links on the Web</p>
    <p>Deep links on the web that may take users to the wrong app  Deep links registered by multiple apps vs. links on the web pages</p>
    <p>Scheme URL AppLink# o f H</p>
    <p>ija ck ed</p>
    <p>D ee p Li nk</p>
    <p>s</p>
    <p>Functional Third-party Per-app</p>
    <p>App links introduce more hijacked links than Scheme URLs to the web</p>
    <p>Massive HTTP/HTTPS links already exist on the web  Hijackable</p>
  </div>
  <div class="page">
    <p>Discussion  Scheme URLs are still widely used by apps and websites</p>
    <p>The new App link not only fails to improve security, but significantly increases hijacking risks  App links are rarely verified (2.2% apps did it correctly)  A new over-permission vulnerability  More hijacked App links on the web than scheme URLs</p>
    <p>Intent URLs are rarely used on the web</p>
    <p>iOS App links: 1,925 out of 12,570 (15%) apps have misconfigured the verification</p>
  </div>
  <div class="page">
    <p>Countermeasures  Disable per-app scheme</p>
    <p>Whitelist functional schemes</p>
    <p>Enforce App link verification</p>
    <p>Fix App link over-permission  Set it to the link/domain level</p>
    <p>Break legacy links on the web  Cripple apps of older versions</p>
    <p>Apps will need a web front</p>
    <p>J</p>
  </div>
  <div class="page">
    <p>Thank You</p>
  </div>
</Presentation>
