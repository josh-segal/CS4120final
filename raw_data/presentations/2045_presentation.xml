<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>BEYOND STORAGE APIS: PROVABLE SEMANTICS FOR STORAGE STACKS</p>
    <p>UNIVERSITY OF WISCONSIN-MADISON</p>
    <p>RAMNATTHAN ALAGAPPAN</p>
    <p>VIJAY CHIDAMBARAM</p>
    <p>THANUMALAYAN PILLAI</p>
    <p>REMZI ARPACI-DUSSEAU</p>
    <p>ANDREA ARPACI-DUSSEAU</p>
    <p>AWS ALBARGHOUTHI</p>
  </div>
  <div class="page">
    <p>Application</p>
    <p>Laptops</p>
  </div>
  <div class="page">
    <p>Application</p>
    <p>Laptops Desktops</p>
  </div>
  <div class="page">
    <p>Application</p>
    <p>Laptops Desktops</p>
    <p>Mobile Devices</p>
  </div>
  <div class="page">
    <p>Application</p>
    <p>Laptops Desktops</p>
    <p>Mobile Devices</p>
    <p>Private and Public Clouds</p>
  </div>
  <div class="page">
    <p>Application</p>
    <p>Laptops Desktops</p>
    <p>Mobile Devices</p>
    <p>Private and Public Clouds</p>
    <p>Heterogeneity of environments is increasing</p>
  </div>
  <div class="page">
    <p>STORAGE STACKS: DEEP AND DIVERSE</p>
    <p>Windows IO stack has 18 layers! [ThereskaSOSP13]</p>
  </div>
  <div class="page">
    <p>STORAGE STACKS: DEEP AND DIVERSE</p>
    <p>Application</p>
    <p>SSTF</p>
    <p>Disk</p>
    <p>ext4</p>
    <p>Workstation</p>
    <p>Application</p>
    <p>CFQ</p>
    <p>SSD</p>
    <p>btrfs</p>
    <p>Laptop</p>
    <p>Application</p>
    <p>CFQ</p>
    <p>SSD</p>
    <p>F2FS</p>
    <p>Mobile</p>
    <p>Windows IO stack has 18 layers! [ThereskaSOSP13]</p>
  </div>
  <div class="page">
    <p>APPLICATION PORTABILITY</p>
    <p>Applications should be portable between environments</p>
    <p>- Reduce development effort and bugs - Avoid vendor lock-in</p>
    <p>Amazon EC2 OpenStack Nova</p>
    <p>Application 1 Application 2</p>
    <p>Common API</p>
  </div>
  <div class="page">
    <p>API Compatibility is not enough!</p>
  </div>
  <div class="page">
    <p>API Compatibility is not enough!</p>
    <p>Application correctness depends upon unspecified properties</p>
    <p>of the storage stack</p>
  </div>
  <div class="page">
    <p>API Compatibility is not enough!</p>
    <p>Application correctness depends upon unspecified properties</p>
    <p>of the storage stack</p>
    <p>Results: data corruption, data loss, unavailability [PillaiOSDI14]</p>
  </div>
  <div class="page">
    <p>THE VISION</p>
    <p>Application</p>
    <p>Disk</p>
    <p>ext4</p>
    <p>Node 1</p>
    <p>SSD</p>
    <p>btrfs</p>
    <p>Node 1</p>
    <p>CFQ</p>
    <p>SSD</p>
    <p>F2FS</p>
    <p>Mobile</p>
    <p>D at</p>
    <p>ac en</p>
    <p>te r</p>
  </div>
  <div class="page">
    <p>THE VISION</p>
    <p>Application</p>
    <p>Disk</p>
    <p>ext4</p>
    <p>Node 1</p>
    <p>SSD</p>
    <p>btrfs</p>
    <p>Node 1</p>
    <p>CFQ</p>
    <p>SSD</p>
    <p>F2FS</p>
    <p>Mobile</p>
    <p>D at</p>
    <p>ac en</p>
    <p>te r</p>
    <p>?</p>
    <p>? ?</p>
    <p>Quick, automated check at deployment</p>
  </div>
  <div class="page">
    <p>THE VISION</p>
    <p>Application</p>
    <p>Disk</p>
    <p>ext4</p>
    <p>Node 1</p>
    <p>SSD</p>
    <p>btrfs</p>
    <p>Node 1</p>
    <p>CFQ</p>
    <p>SSD</p>
    <p>F2FS</p>
    <p>Mobile</p>
    <p>D at</p>
    <p>ac en</p>
    <p>te r</p>
    <p>?</p>
    <p>? ?</p>
    <p>Quick, automated check at deployment</p>
  </div>
  <div class="page">
    <p>THE VISION</p>
    <p>Application</p>
    <p>Disk</p>
    <p>ext4</p>
    <p>Node 1</p>
    <p>SSD</p>
    <p>btrfs</p>
    <p>Node 1</p>
    <p>D at</p>
    <p>ac en</p>
    <p>te r</p>
  </div>
  <div class="page">
    <p>THE VISION</p>
    <p>Application</p>
    <p>Disk</p>
    <p>ext4</p>
    <p>Node 1</p>
    <p>SSD</p>
    <p>btrfs</p>
    <p>Node 1</p>
    <p>D at</p>
    <p>ac en</p>
    <p>te r</p>
    <p>Which is the best node to deploy this application to?</p>
  </div>
  <div class="page">
    <p>THE VISION</p>
    <p>Application</p>
    <p>Disk</p>
    <p>ext4</p>
    <p>Node 1</p>
    <p>SSD</p>
    <p>btrfs</p>
    <p>Node 1</p>
    <p>D at</p>
    <p>ac en</p>
    <p>te r</p>
    <p>? ?</p>
    <p>Which is the best node to deploy this application to?</p>
  </div>
  <div class="page">
    <p>THE VISION</p>
    <p>Application</p>
    <p>Disk</p>
    <p>ext4</p>
    <p>Node 1</p>
    <p>SSD</p>
    <p>btrfs</p>
    <p>Node 1</p>
    <p>D at</p>
    <p>ac en</p>
    <p>te r</p>
    <p>? ?</p>
    <p>Which is the best node to deploy this application to?</p>
  </div>
  <div class="page">
    <p>THE VISION</p>
    <p>Application</p>
    <p>Disk</p>
    <p>ext4</p>
    <p>Node 1</p>
    <p>SSD</p>
    <p>btrfs</p>
    <p>Node 1</p>
    <p>D at</p>
    <p>ac en</p>
    <p>te r</p>
    <p>? ?</p>
    <p>Which is the best node to deploy this application to?</p>
    <p>Best: least # of stack layers, least utilized, etc.</p>
  </div>
  <div class="page">
    <p>OUTLINE</p>
    <p>Introduction</p>
    <p>Portability Bug Study</p>
    <p>First Steps Toward The Vision</p>
    <p>The Road Ahead</p>
  </div>
  <div class="page">
    <p>PORTABILITY BUG STUDY</p>
    <p>Portability bug: bug that occurs when an application is moved to a different environment</p>
    <p>Studied public bug databases</p>
    <p>- Android deployed on different mobile devices - Applications run on cloud platforms and on NFS</p>
    <p>Performed our own experiments based on previous work [PillaiOSDI14]</p>
  </div>
  <div class="page">
    <p>OPERATIONS NOT SUPPORTED</p>
    <p>SQLite creates temporary files by opening a file and unlinking them</p>
    <p>Not supported by the daemon emulating FAT32</p>
    <p>on the sd card</p>
    <p>FAT32 File System</p>
  </div>
  <div class="page">
    <p>UNEXPECTED ERROR CODES</p>
    <p>fsync() on FreeBSD returns ENOLCK</p>
    <p>even on success</p>
    <p>MySQL restarts when it sees that error</p>
    <p>NFS</p>
  </div>
  <div class="page">
    <p>ORDERING REQUIREMENTS NOT MET</p>
    <p>Cloud</p>
    <p>Partial File!log</p>
    <p>file part 2</p>
    <p>file part 1</p>
    <p>file part 1</p>
    <p>File System</p>
    <p>Inotify</p>
  </div>
  <div class="page">
    <p>ext4</p>
    <p>Workstation</p>
    <p>Guarantee: Committed data can always be read back after a crash</p>
    <p>POSIX</p>
    <p>btrfs</p>
    <p>Laptop</p>
    <p>POSIX</p>
    <p>All file systems are not created equal: On the complexity of crafting crash-consistent applications, OSDI 2014</p>
  </div>
  <div class="page">
    <p>ext4</p>
    <p>Workstation</p>
    <p>Guarantee: Committed data can always be read back after a crash</p>
    <p>Guarantee: Committed data can always be read back after a crash</p>
    <p>POSIX</p>
    <p>btrfs</p>
    <p>Laptop</p>
    <p>POSIX</p>
    <p>All file systems are not created equal: On the complexity of crafting crash-consistent applications, OSDI 2014</p>
  </div>
  <div class="page">
    <p>ext4</p>
    <p>Workstation</p>
    <p>POSIX</p>
    <p>btrfs</p>
    <p>Laptop</p>
    <p>POSIX</p>
    <p>Write A Write B Write C</p>
    <p>A</p>
    <p>A B A B C</p>
    <p>B</p>
    <p>All file systems are not created equal: On the complexity of crafting crash-consistent applications, OSDI 2014</p>
  </div>
  <div class="page">
    <p>ext4</p>
    <p>Workstation</p>
    <p>We term this an Application Crash Vulnerability</p>
    <p>POSIX</p>
    <p>btrfs</p>
    <p>Laptop</p>
    <p>POSIX</p>
    <p>All file systems are not created equal: On the complexity of crafting crash-consistent applications, OSDI 2014</p>
  </div>
  <div class="page">
    <p>ext4</p>
    <p>Workstation</p>
    <p>We term this an Application Crash Vulnerability</p>
    <p>POSIX</p>
    <p>btrfs</p>
    <p>Laptop</p>
    <p>POSIX</p>
    <p>API compatibility is not enough!</p>
    <p>All file systems are not created equal: On the complexity of crafting crash-consistent applications, OSDI 2014</p>
  </div>
  <div class="page">
    <p>OUTLINE</p>
    <p>Introduction</p>
    <p>Portability Bug Study</p>
    <p>First Steps Toward The Vision</p>
    <p>The Road Ahead</p>
  </div>
  <div class="page">
    <p>Formally verify that an application</p>
    <p>will run correctly on a given storage stack</p>
    <p>What application requires</p>
    <p>&lt;= What</p>
    <p>storage stack provides</p>
  </div>
  <div class="page">
    <p>WHY IS THIS HARD?</p>
    <p>Application requirements can be complex</p>
    <p>- e.g., append(AB) should result in file containing A or AB - if then else form</p>
    <p>Binary or numerical checks are not sufficient</p>
    <p>&lt;= What</p>
    <p>storage stack provides What application</p>
    <p>requires</p>
  </div>
  <div class="page">
    <p>WHY IS THIS HARD?</p>
    <p>Application requirements can be complex</p>
    <p>- e.g., append(AB) should result in file containing A or AB - if then else form</p>
    <p>Binary or numerical checks are not sufficient</p>
    <p>Need expressive language for specifying application requirements</p>
    <p>&lt;= What</p>
    <p>storage stack provides What application</p>
    <p>requires</p>
  </div>
  <div class="page">
    <p>WHY IS THIS HARD?</p>
    <p>Disk provides atomic reads and writes</p>
    <p>File system provides atomic metadata operations</p>
    <p>Disk</p>
    <p>ext3</p>
    <p>Postgres Postgres provides ACID transactions</p>
    <p>&lt;= What</p>
    <p>storage stack provides What application</p>
    <p>requires</p>
  </div>
  <div class="page">
    <p>WHY IS THIS HARD?</p>
    <p>Disk provides atomic reads and writes</p>
    <p>File system provides atomic metadata operations</p>
    <p>Disk</p>
    <p>ext3</p>
    <p>Postgres Postgres provides ACID transactionsNeed to dynamically compute</p>
    <p>guarantees provided by the stack</p>
    <p>&lt;= What</p>
    <p>storage stack provides What application</p>
    <p>requires</p>
  </div>
  <div class="page">
    <p>OVERVIEW</p>
    <p>Application</p>
    <p>CFQ</p>
    <p>Disk</p>
    <p>ext4</p>
    <p>Model guarantees the application requires from storage as a theorem</p>
    <p>Model guarantees provided by each layer of the storage stack</p>
    <p>as axioms</p>
    <p>Ex: application will be crash-consistent if all writes are ordered and atomic</p>
    <p>Ex: disk guarantees sector-level reads and writes are atomic even with crash</p>
  </div>
  <div class="page">
    <p>OVERVIEW</p>
    <p>Application</p>
    <p>CFQ</p>
    <p>Disk</p>
    <p>ext4</p>
    <p>Model guarantees the application requires from storage as a theorem</p>
    <p>Model guarantees provided by each layer of the storage stack</p>
    <p>as axioms</p>
    <p>Ex: application will be crash-consistent if all writes are ordered and atomic</p>
    <p>Ex: disk guarantees sector-level reads and writes are atomic even with crash</p>
    <p>Prove application theorem using axioms from storage stack</p>
  </div>
  <div class="page">
    <p>SYSTEM</p>
    <p>Application Requirements</p>
    <p>Stack Configuration Library of</p>
    <p>stack-layer specifications</p>
    <p>Result</p>
    <p>PROVER</p>
    <p>E.g., put() must be atomic</p>
    <p>E.g., put() is atomic on given stack</p>
    <p>E.g., Key-Value Store on top of disk</p>
  </div>
  <div class="page">
    <p>SYSTEM</p>
    <p>Application Requirements</p>
    <p>Stack Configuration Library of</p>
    <p>stack-layer specifications</p>
    <p>Result</p>
    <p>E.g., put() must be atomic</p>
    <p>E.g., put() is atomic on given stack</p>
    <p>E.g., Key-Value Store on top of disk</p>
  </div>
  <div class="page">
    <p>SYSTEM</p>
    <p>Application Requirements</p>
    <p>Stack Configuration Library of</p>
    <p>stack-layer specifications</p>
    <p>Result</p>
    <p>E.g., put() must be atomic</p>
    <p>E.g., put() is atomic on given stack</p>
    <p>Use the proof assistant to manually write machine-checked proofs</p>
    <p>E.g., Key-Value Store on top of disk</p>
  </div>
  <div class="page">
    <p>EXPERIENCE WITH ISABELLE</p>
    <p>Modelled a simple 2-layer stack</p>
    <p>- Key-value store on top of a disk Proved put() is atomic</p>
    <p>About 160 lines of code (lots of trial and error)</p>
    <p>Code available at: https://github.com/ramanala/ StorageStackSemantics</p>
  </div>
  <div class="page">
    <p>EXPERIENCE WITH ISABELLE</p>
    <p>Modelled a simple 2-layer stack</p>
    <p>- Key-value store on top of a disk Proved put() is atomic</p>
    <p>About 160 lines of code (lots of trial and error)</p>
    <p>Code available at: https://github.com/ramanala/ StorageStackSemantics</p>
  </div>
  <div class="page">
    <p>OUTLINE</p>
    <p>Introduction</p>
    <p>Portability Bug Study</p>
    <p>First Steps Toward The Vision</p>
    <p>The Road Ahead</p>
  </div>
  <div class="page">
    <p>CHALLENGES</p>
    <p>Obtaining specifications</p>
    <p>- Developer provides/written by grad students - How to figure out automatically?</p>
    <p>Automatic proofs</p>
    <p>- Use Z3 instead of Isabelle? Proofs without specifications</p>
    <p>- Know a layer provides guarantees, without knowing how Verifying implementations</p>
  </div>
  <div class="page">
    <p>CONCLUSION</p>
    <p>The promise of software-defined storage</p>
    <p>- Increases in performance, flexibility, and utilization - Unspoken aspect: application correctness!</p>
    <p>Simply ensuring API compatibility is not enough</p>
    <p>- Storage semantics are complex and nuanced PL tools like SMT solvers/proof assistants can help match application to diverse storage stacks</p>
    <p>Interesting, significant challenges on path ahead</p>
  </div>
  <div class="page">
    <p>THANK YOU! QUESTIONS?</p>
    <p>SOURCE CODE AT: HTTP://CS.WISC.EDU/~VIJAYC</p>
    <p>VIJAY CHIDAMBARAM UNIVERSITY OF WISCONSIN MADISON VIJAYC@CS.WISC.EDU | HTTP://CS.WISC.EDU/~VIJAYC</p>
  </div>
</Presentation>
