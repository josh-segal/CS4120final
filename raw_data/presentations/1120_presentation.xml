<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Albis: High-Performance File Format for Big Data Systems</p>
    <p>Animesh Trivedi, Patrick Stuedi, Jonas Pfefferle, Adrian Schuepbach, Bernard Metzler,</p>
    <p>IBM Research, Zurich</p>
  </div>
  <div class="page">
    <p>Relational Data Processing Stack in the Cloud</p>
    <p>Relational Engines</p>
    <p>File Formats</p>
    <p>Distributed Storage</p>
    <p>One of the most popular data processing paradigms</p>
    <p>- Data organized in tables</p>
    <p>- Analyzed using DSL like SQL</p>
    <p>- Integrity protected using variants</p>
    <p>But unlike classical RDBMs systems, they dont manage their own storage</p>
  </div>
  <div class="page">
    <p>Relational Data Processing Stack in the Cloud</p>
    <p>Relational Engines</p>
    <p>File Formats</p>
    <p>Distributed Storage</p>
  </div>
  <div class="page">
    <p>Back to the Future - It is 2010</p>
    <p>Relational Engines</p>
    <p>File Formats</p>
    <p>Hardware</p>
    <p>Disks connected over 1/10 Gbps network</p>
  </div>
  <div class="page">
    <p>The I/O Revolution</p>
  </div>
  <div class="page">
    <p>The Impact of the Revolution</p>
    <p>Hadoop NameNode</p>
    <p>Hadoop DataNode</p>
    <p>Benchmark100 Gbps</p>
    <p>Micro-benchmark*</p>
    <p>Why micro-benchmark? Decouple from the SQL engine</p>
    <p>*https://github.com/animeshtrivedi/fileformat-benchmarks</p>
    <p>File format ...</p>
  </div>
  <div class="page">
    <p>The Impact of the Revolution</p>
  </div>
  <div class="page">
    <p>The Impact of the Revolution</p>
    <p>Goodput Throughput</p>
    <p>Formats like JSON bloat data upto 10x. Hence we decouple amount of data vs. how it is stored</p>
  </div>
  <div class="page">
    <p>The Impact of the Revolution</p>
    <p>None of the modern file formats delivered performance close to the hardware</p>
  </div>
  <div class="page">
    <p>The Outdated Assumptions and Impact</p>
    <p>End-host assumptions</p>
    <p>Distributed systems assumptions</p>
    <p>Language/runtimes assumptions</p>
  </div>
  <div class="page">
    <p>The Outdated Assumptions and Impact</p>
    <p>End-host assumptions</p>
    <p>Distributed systems assumptions</p>
    <p>Language/runtimes assumptions</p>
    <p>But why now? CPU core speed is stalled, but</p>
    <p>Bandwidth 117 MB/s 140 MB/s 12.5 GB/s 3.1 GB/s</p>
    <p>cycle/unit 38,400 10,957 360 495</p>
  </div>
  <div class="page">
    <p>The Outdated Assumptions and Impact</p>
    <p>End-host assumptions</p>
    <p>Distributed systems assumptions</p>
    <p>Language/runtimes assumptions</p>
    <p>But leads to bad CPU cache performance</p>
    <p>C0 C1 C2 C3 C7</p>
    <p>C6 C5 C4</p>
    <p>Bounded by the poor cache/IPC</p>
    <p>performance</p>
    <p>Bounded by the number of</p>
    <p>instructions/row</p>
  </div>
  <div class="page">
    <p>The Outdated Assumptions and Impact</p>
    <p>End-host assumptions</p>
    <p>Distributed systems assumptions</p>
    <p>Language/runtimes assumptions</p>
    <p>- schedule tasks on local blocks</p>
    <p>But now network/storage is super fast? then why still pack all data in a single block and try to co-schedule tasks?</p>
    <p>data</p>
    <p>compute</p>
    <p>data</p>
    <p>compute</p>
  </div>
  <div class="page">
    <p>The Outdated Assumptions and Impact</p>
    <p>End-host assumptions</p>
    <p>Distributed systems assumptions</p>
    <p>Language/runtimes assumptions</p>
    <p>number of files/directories</p>
    <p>RAMCloud, Crail can do 10 millions of lookups/sec. Does this design still make sense?</p>
    <p>Metadata Server</p>
    <p>Client</p>
    <p>Data</p>
    <p>Where is data? Data access</p>
  </div>
  <div class="page">
    <p>The Outdated Assumptions and Impact</p>
    <p>End-host assumptions</p>
    <p>Distributed systems assumptions</p>
    <p>Language/runtimes assumptions</p>
    <p>Binary / raw data</p>
    <p>Runtime row binary data</p>
  </div>
  <div class="page">
    <p>Can we reset all assumptions and</p>
    <p>start from scratch for modern</p>
    <p>high-performance I/O devices?</p>
    <p>Deliver the full hardware performance</p>
    <p>Albis</p>
    <p>http://www.fotocommunity.de/photo/albiskette-chfleischli/39086845</p>
  </div>
  <div class="page">
    <p>Albis  Albis - A file format to store relational tables for read-heavy analytics workloads</p>
    <p>Supports all basic primitive types with data and schema</p>
    <p>nested schemas are flattened and data is stored in the leaves</p>
    <p>Three fundamental design decisions:</p>
  </div>
  <div class="page">
    <p>Table Storage Logic</p>
    <p>Int double byte[ ] char float[ ]</p>
  </div>
  <div class="page">
    <p>Table Storage Logic</p>
    <p>ow g</p>
    <p>ro up</p>
    <p>s</p>
    <p>Column groups</p>
    <p>Int double byte[ ] char float[ ]</p>
  </div>
  <div class="page">
    <p>Table Storage Logic</p>
    <p>R ow</p>
    <p>g ro</p>
    <p>up s</p>
    <p>Column groups</p>
  </div>
  <div class="page">
    <p>Table Storage Logic</p>
    <p>R ow</p>
    <p>g ro</p>
    <p>up s</p>
    <p>Column groups</p>
    <p>RG0 CG0</p>
    <p>RG0 CG1</p>
    <p>RG0 CG2</p>
    <p>RG1 CG2</p>
    <p>RG1 CG1</p>
    <p>RG1 CG0</p>
    <p>If there is only 1 column group : Row store If there are n column groups : Columns store</p>
  </div>
  <div class="page">
    <p>Table Storage Logic</p>
    <p>R ow</p>
    <p>g ro</p>
    <p>up s</p>
    <p>Column groups</p>
    <p>RG0 CG0</p>
    <p>RG0 CG1</p>
    <p>RG0 CG2</p>
    <p>RG1 CG2</p>
    <p>RG1 CG1</p>
    <p>RG1 CG0</p>
    <p>table0</p>
    <p>RG0 RG1</p>
    <p>CG0 CG1 CG2 CG0 CG1 CG2</p>
    <p>schema</p>
  </div>
  <div class="page">
    <p>Row Storage Format</p>
    <p>table0</p>
    <p>RG0 RG1</p>
    <p>CG0 CG1 CG2 CG0 CG1 CG2</p>
    <p>schema How is a single row of data stored in these files?</p>
  </div>
  <div class="page">
    <p>Row Storage Format</p>
    <p>Null bitmap</p>
    <p>Marking null columns values</p>
  </div>
  <div class="page">
    <p>Row Storage Format</p>
    <p>Null bitmap</p>
    <p>complete row size</p>
  </div>
  <div class="page">
    <p>Row Storage Format</p>
    <p>Null bitmap</p>
    <p>complete row size fixed-field area variable-field area</p>
  </div>
  <div class="page">
    <p>Row Storage Format</p>
    <p>ptr ptr byte [ ] ... float [ ] ...</p>
    <p>Null bitmap</p>
    <p>complete row size fixed-field area variable-field area</p>
    <p>Schema of { int, double, byte[ ], char, float[ ] } :</p>
  </div>
  <div class="page">
    <p>Row Storage Format</p>
    <p>ptr ptr byte [ ] ... float [ ] ...</p>
    <p>Null bitmap</p>
    <p>complete row size fixed-field area variable-field area</p>
    <p>Schema of { int, double, byte[ ], char, float[ ] } : + 1 byte bitmap (because there are 5 columns) + 4 byte size + 4 byte (int) + 8 byte (double) + 8 byte (offset + size, ptr) + 1 byte (char) + 8 byte (offset + size, ptr) = 34 bytes + variable area.</p>
  </div>
  <div class="page">
    <p>segment buffer (e.g., 1 MB)</p>
    <p>Writing Rows</p>
    <p>writer object Min, max, distribution statistics</p>
    <p>HDFS data file HDFS metadata file</p>
    <p>Use to implement filters</p>
  </div>
  <div class="page">
    <p>Reading Rows</p>
    <p>table0</p>
    <p>RG0 RG1</p>
    <p>CG0 CG1 CG2 CG0 CG1 CG2</p>
    <p>schema</p>
    <p>to read</p>
    <p>a. Complete CGs</p>
    <p>b. Partial CGs</p>
    <p>a. Skip value materialization in partial</p>
    <p>CG reads</p>
  </div>
  <div class="page">
    <p>More Details in the Paper</p>
    <p>How to evolve schema? Adding and removing columns</p>
    <p>How to evolve data? Adding and removing rows</p>
    <p>How to process Albis files in a relational data processing engine?</p>
    <p>Concerns regarding data imbalance or re-grouping?</p>
    <p>...</p>
  </div>
  <div class="page">
    <p>Evaluation All experiments on a 4-node cluster with 100 Gbps network and flash devices</p>
    <p>Dataset is TPC-DS tables with the scale factor of 100 (~100 GB of data)</p>
    <p>Three fundamental questions</p>
    <p>Does Albis deliver better performance for micro-benchmarks?</p>
    <p>Does micro-benchmark performance translate to better workload</p>
    <p>performance?</p>
    <p>What is the performance and space trade-off in Albis?</p>
  </div>
  <div class="page">
    <p>Microbenchmark Performance - Revised</p>
  </div>
  <div class="page">
    <p>Microbenchmark Performance - Revised</p>
    <p>Albis delivers 1.9 - 21.3x performance improvements over other formats</p>
  </div>
  <div class="page">
    <p>Spark/SQL TPC-DS Performance</p>
    <p>TPC-DS dataset, scale factor = 100 Y axis : CDF of queries X axis : percentage performance gains</p>
  </div>
  <div class="page">
    <p>Spark/SQL TPC-DS Performance</p>
  </div>
  <div class="page">
    <p>Space vs. Performance Trade-off</p>
    <p>None Snappy Gzip zlib</p>
    <p>Parquet 58.6 GB</p>
    <p>N/A</p>
    <p>ORC 72.0 GB</p>
    <p>Albis 94.5 GB</p>
  </div>
  <div class="page">
    <p>Space vs. Performance Trade-off</p>
    <p>None Snappy Gzip zlib</p>
    <p>Parquet 58.6 GB</p>
    <p>N/A</p>
    <p>ORC 72.0 GB</p>
    <p>Albis 94.5 GB</p>
    <p>Albis inflates data by 1.3 - 2.7x, but gives 3.4 - 7.2x performance gains</p>
  </div>
  <div class="page">
    <p>Microbenchmark Performance - Revised</p>
    <p>What would it take to deliver 100 Gbps?</p>
  </div>
  <div class="page">
    <p>Microbenchmark Performance - Revised</p>
    <p>JVM object overheads</p>
    <p>Apache Crail (Incubating) - A High-Performance Distributed Data Store, http://crail.incubator.apache.org/</p>
    <p>A lb</p>
    <p>is +</p>
    <p>C ra</p>
    <p>il</p>
  </div>
  <div class="page">
    <p>Microbenchmark Performance - Revised</p>
    <p>density</p>
    <p>A lb</p>
    <p>is +</p>
    <p>C ra</p>
    <p>il</p>
    <p>A lb</p>
    <p>is +</p>
    <p>C ra</p>
    <p>il +</p>
    <p>N oO</p>
    <p>bj s</p>
  </div>
  <div class="page">
    <p>Microbenchmark Performance - Revised</p>
    <p>A lb</p>
    <p>is +</p>
    <p>C ra</p>
    <p>il</p>
    <p>A lb</p>
    <p>is +</p>
    <p>C ra</p>
    <p>il +</p>
    <p>N oO</p>
    <p>bj s</p>
  </div>
  <div class="page">
    <p>Albis - Summary  Albis - a high-performance file format for storing relational data</p>
    <p>Open-source address: https://github.com/zrlio/albis</p>
    <p>Motivation: in presence of new network and storage devices, time to revise basic</p>
    <p>assumptions  no compression or encoding</p>
    <p>simple data and metadata design</p>
    <p>efficient object management with a binary API</p>
    <p>Revised software stack to lead to significant performance improvements</p>
    <p>demonstrated it for the file format</p>
    <p>very active research field - OSes designs (Arrakis, IX), networking and storage stacks 43</p>
  </div>
  <div class="page">
    <p>Notice</p>
    <p>IBM is a trademark of International Business Machines Corporation, registered in many jurisdictions worldwide. Intel and Intel Xeon are trademarks or registered trademarks of Intel Corporation or its subsidiaries in the United States and other countries. Linux is a registered trademark of Linus Torvalds in the United States, other countries, or both. Java and all Javabased trade-marks and logos are trademarks or registered trademarks of Oracle and/or its affiliates. Other products and service names might be trademarks of IBM or other companies.</p>
  </div>
  <div class="page">
    <p>Backup</p>
  </div>
  <div class="page">
    <p>Microarchitectural Analysis</p>
    <p>Parquet ORC Arrow Albis Gains</p>
    <p>Instructions per row 6.6K 4.9K 1.9K 1.6K 1.2 - 4.1x</p>
    <p>Cache-misses per row 9.2 4.6 5.1 3.0 1.7 - 3.0x</p>
    <p>Nanosecond per row 105.3 63.9 31.2 20.8 1.5 - 5.0x</p>
  </div>
</Presentation>
