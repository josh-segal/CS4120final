<?xml version="1.0" ?>
<Presentation>
  <div class="page">
    <p>Why Do We Always Blame Storage Stack?</p>
    <p>Hao Luo Nimble Storage Hong Jiang University of Texas Arlington</p>
    <p>Myra B. Cohen University of Nebraska Lincoln</p>
  </div>
  <div class="page">
    <p>Storage for Smartphones</p>
    <p>Revisiting storage for smartphones [FAST12]  I/O Stack Optimization for Smartphones [ATC13]  Database optimizations</p>
    <p>MVBT with lazy split [FAST14]  WALDIO [ATC15]</p>
    <p>File system optimizations  Single I/O commit path [FAST14]  MobiFS [ATC15]</p>
    <p>Other optimizations  qNVRAM [HotStorage14]  Quasi-Asynchronous I/O [FAST15]  WearDrive[ATC15]</p>
  </div>
  <div class="page">
    <p>How much does the application performance benefit from storage stack optimization?</p>
  </div>
  <div class="page">
    <p>Application Performance in Smartphone</p>
    <p>Smartphone apps are GUI based interactive application.  What would a smartphone user do?  Find a view  Interact with it  Check some state</p>
  </div>
  <div class="page">
    <p>User-Perceived Latency</p>
    <p>GUI state at time t  A set of widgets and their prosperities.  SGUI ={(w,p,v)|wW,pPw,vVp}.</p>
    <p>Stable GUI state  the GUI state (SGUI) remains unchanged without further user input.  Background jobs directly related to the operation are completed.</p>
    <p>Latency  The transition time between two consecutive stable GUI states</p>
  </div>
  <div class="page">
    <p>User-Perceived Latency</p>
  </div>
  <div class="page">
    <p>Response Time Limit</p>
    <p>Basic advice regarding response time [Usability Engineering, 1993]  0.1 second: react instantaneously  1.0 second: keep user's flow of thought  10 second: keep users attention</p>
    <p>Fast enough is good enough</p>
  </div>
  <div class="page">
    <p>Measuring User Perceived Latency</p>
    <p>Synchronization between benchmark tests and application under test.  Andorid test frameworks provide APIs for test writer to sync with the application.</p>
    <p>What most test frameworks do  Thread.sleep(10000);  loops and retries and maybe with an exponential backoff  Slow and inacurate....</p>
    <p>What Espresso do  Automatically sycn with UI events, asynchronous tasks, etc..  No wait-untils, return when app becomes idle.</p>
  </div>
  <div class="page">
    <p>MobiReplayer</p>
    <p>Android benchmark tool based off Espresso.  Replay GUI traces and measure response time for every interaction.</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction  Test Setup  Evaluation  Conclusion</p>
  </div>
  <div class="page">
    <p>Application Benchmark</p>
    <p>App Workload Web Loading top 50 websitesin U.S. one by one Facebook Swipe up the screen 50 times to load news feed Messenger Send 50 messages Twitter Post 50 tweets</p>
  </div>
  <div class="page">
    <p>Test Setup</p>
    <p>Two latest smartphones  Samsung Galaxy S4 GPE (2013) [KitKat]  Nexus 5X (2015) [Marshmallow]</p>
    <p>Two storage stack optimizations  SQLITE_NO_SYNC: disable fsync() in SQLite  EXT4_NO_JOURNAL: turn off Ext4 file system journaling</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction  Test Setup  Evaluation  Conclusion</p>
  </div>
  <div class="page">
    <p>Evaluation</p>
    <p>Q1: How much do the database and file system benefit from storage stack optimizations?  Q2: How much does the application performance benefit from storage stack optimization?  Q3: If the application doesnt benefit from better storage performance, why?</p>
  </div>
  <div class="page">
    <p>Q1: How much does SQLite benefit from storage stack optimizations?</p>
  </div>
  <div class="page">
    <p>Q1: How much does Ext4 file system benefit from storage stack optimizations?</p>
  </div>
  <div class="page">
    <p>Q2: How much does the application performance benefit from storage stack optimization?</p>
  </div>
  <div class="page">
    <p>Q3: Why doesnt the application benefit from better storage performance?  Application now use the storage more wisely.  The disk I/O are not that intensive.  Move synchronous I/O out of critical path.</p>
  </div>
  <div class="page">
    <p>IO activity of four benchmarks</p>
    <p>I/O activity in four benchmark runs</p>
    <p>Facebook Web</p>
    <p>IO PS</p>
  </div>
  <div class="page">
    <p>Correlation between user-perceived latency and I/Os</p>
  </div>
  <div class="page">
    <p>Outline</p>
    <p>Introduction  Test Setup  Evaluation  Conclusion</p>
  </div>
  <div class="page">
    <p>Conclusion</p>
    <p>We develop a methodology for quantifying user-perceived latency and use it to evaluate four common application benchmarks with I/O stack optimization on two of the latest smartphones.  The applications we tested respond reasonably fast  The user-perceived latency does not drastically (at most 11.8%) benefit from I/O stack optimizations.</p>
  </div>
  <div class="page">
    <p>Thank you!</p>
  </div>
</Presentation>
