<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2019-03-26T17:05+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">LP-based Approximation Algorithms for Capacitated Facility Location *</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
				<date type="published" when="2004">2004</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Retsef</forename><surname>Levi</surname></persName>
							<affiliation key="aff0">
								<orgName type="department" key="dep1">Sloan School of Management</orgName>
								<orgName type="department" key="dep2">School of Operations Research &amp; Information Engineering and Department of Computer Science</orgName>
								<orgName type="institution">Massachusetts Institute of Technology</orgName>
								<address>
									<postCode>02139</postCode>
									<settlement>Cambridge</settlement>
									<region>MA</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><forename type="middle">B</forename><surname>Shmoys</surname></persName>
							<email>shmoys@cs.cornell.edu.</email>
							<affiliation key="aff1">
								<orgName type="department">Department of Combinatorics and Optimization</orgName>
								<orgName type="institution">Cornell University</orgName>
								<address>
									<settlement>Ithaca</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chaitanya</forename><surname>Swamy</surname></persName>
							<email>§cswamy@math.uwaterloo.ca.</email>
							<affiliation key="aff2">
								<orgName type="institution">University of Waterloo</orgName>
								<address>
									<settlement>Waterloo</settlement>
									<region>On-tario</region>
									<country key="CA">Canada</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">LP-based Approximation Algorithms for Capacitated Facility Location *</title>
					</analytic>
					<monogr>
						<title level="m">Proceedings of the 10th International Conference on Integer Programming and Combinatorial Optimization</title>
						<meeting>the 10th International Conference on Integer Programming and Combinatorial Optimization						</meeting>
						<imprint>
							<date type="published" when="2004">2004</date>
						</imprint>
					</monogr>
					<note>1</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>In the capacitated facility location problem with hard capacities, we are given a set of facilities, F, and a set of clients D in a common metric space. Each facility i has a facility opening cost f i and capacity u i that specifies the maximum number of clients that may be assigned to this facility. We want to open some facilities from the set F and assign each client to an open facility so that at most u i clients are assigned to any open facility i. The cost of assigning client j to facility i is given by the distance c ij , and our goal is to minimize the sum of the facility opening costs and the client assignment costs. The only known approximation algorithms that deliver solutions within a constant factor of optimal for this NP-hard problem are based on local search techniques. It is an open problem to devise an approximation algorithm for this problem based on a linear programming lower bound (or indeed, to prove a constant integrality gap for any LP relaxation). We make progress on this question by giving a 5-approximation algorithm for the special case in which all of the facility costs are equal, by rounding the optimal solution to the standard LP relaxation. One notable aspect of our algorithm is that it relies on partitioning the input into a collection of single-demand capacitated facility location problems, approximately solving them, and then combining these solutions in a natural way. * A preliminary version [8] appeared in the</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>There has been a great deal of recent work on approximation algorithms for facility location problems <ref type="bibr" target="#b12">[13]</ref>. We consider the capacitated facility location problem with hard capacities. We are given a set of facilities, F, and a set of clients D in a common metric space. Each facility i has a facility opening cost f i and a capacity u i that specifies the maximum number of clients that may be assigned to this facility. We want to open some facilities from the set F and assign each client to an open facility so that at most u i clients are assigned to any open facility i. The cost of assigning client j to facility i is given by the distance c ij , and our goal is to minimize the sum of the facility opening costs and the client assignment costs.</p><p>The recent work on facility location problems has come in two varieties: LP-based algorithms, and local search-based algorithms. For the problem described above, no constant approximation algorithm based on LP is known, and in fact, no LP relaxation is known for which the ratio between the optimal integer and fractional values has been bounded by a constant. Surprisingly, constant performance guarantees can still be proven based on local search. If one compares local search-based and LP-based approximation algorithms, there is notable advantage to the latter type: even though one may prove, for example, that an LP-rounding procedure increases the cost by at most a factor of five, for the given instance, the increase might only be a factor 1.05, and hence you gain that stronger a fortiori performance guarantee; in contrast, the local search algorithm produces a solution, and at termination, one only knows that its cost is no more than the proven a priori performance guarantee assures.</p><p>We present an algorithm that rounds the optimal fractional solution to a natural LP relaxation by using this solution to guide the decomposition of the input into a collection of single-demand-node capacitated facility location problems, which are then solved independently. In the special case that all facility opening costs are equal, we show that our algorithm is a 5-approximation algorithm, thereby also providing the first constant upper bound on the integrality gap of this formulation in this important special case. One salient feature of our algorithm is that it relies on a decomposition of the input into instances of the single-demand capacitated facility location problem; in this way, the algorithm mirrors the work of Aardal <ref type="bibr" target="#b0">[1]</ref>, who presents a computational polyhedral approach for this problem which uses the same core problem in the identification of cutting planes.</p><p>There are several variants of the capacitated facility location problem, which have rather different properties, especially in terms of the approximation algorithms that are currently known. One distinction is between soft and hard capacities: in the latter problem, each facility is either opened at some location or not, whereas in the former, one may specify any integer number of facilities to be opened at that location. Soft capacities make the problem easier; Shmoys, Tardos, &amp; Aardal <ref type="bibr" target="#b14">[15]</ref> gave the first constant approximation algorithm for this problem based on an LP-rounding technique; Jain &amp; Vazirani <ref type="bibr" target="#b4">[5]</ref> gave a general technique for converting approximation algorithm results for the uncapacitated problem into algorithms that can handle soft capacities. <ref type="bibr">Mahdian, Ye, &amp; Zhang [10]</ref> subsequently gave a 2-approximation algorithm for the problem with soft capacities. <ref type="bibr">Korupolu, Plaxton, &amp; Rajaraman [6]</ref> gave the first constant approximation algorithm that handles hard capacities, based on a local search procedure, but their approach worked only if all capacities are equal. <ref type="bibr">Chudak &amp; Williamson [4]</ref> improved this performance guarantee to 5.83 for the same uniform capacity case. <ref type="bibr">Pál, Tardos, &amp; Wexler [12]</ref> gave the first constant performance guarantee for the case of non-uniform hard capacities. This was recently improved by <ref type="bibr">Mahdian &amp; Pál [9]</ref> and <ref type="bibr">Zhang, Chen, &amp; Ye [17]</ref> to yield a 5.83-approximation algorithm.</p><p>There is also a distinction between the case of unsplittable assignments and splittable ones. That is, suppose that each client j has a certain demand d j to be assigned to open facilities so that the total demand assigned to each facility is at most its capacity: does each client need to have all of its demand served by a unique facility? In the former case, the answer is yes, whereas in the latter, the answer is no. All approximation algorithms for hard capacities have focused on the splittable case. One should note that in the unsplittable case, just deciding if there exists a feasible solution is NP-complete, by a straightforward reduction from the bin-packing problem. Note that once one has decided which facilities to open, the optimal splittable assignment can be computed by solving a transportation problem. A splittable assignment can be converted to an unsplittable one at the cost of increasing the required capacity at each facility (using an approximation algorithm for the generalized assignment problem <ref type="bibr" target="#b13">[14]</ref>). Of course, if there are integer capacities and all demands are 1, there is no distinction between the two problems.</p><p>For hard capacities, it is easy to show that the natural LP formulations do not have any constant integrality ratio; the simplest such example has two facility locations, one essentially free, and one very expensive. In contrast, we focus on the case in which all facility opening costs are equal. For ease of exposition, we will focus on the case in which each demand is equal to 1. However, it is a relatively straightforward exercise to extend the algorithm and its analysis to the case of general demands (provided that splittable assignments are allowed). We will use the terms "assignment cost" and "service cost" interchangeably.</p><p>Our Techniques. The outline of our algorithm is as follows. Given the optimal LP solution and its dual, we view the optimal primal solution as a bipartite graph in which the nodes correspond to facility locations and clients, and the edges correspond to pairs (i, j) such that a positive fraction of the demand at client j is assigned to facility i by the LP solution. We use this to construct a partition of the demand and facilities into clusters: each cluster is "centered" at a client, and the neighbors of this client contained in the cluster are opened (in the fractional solution) in total at least 1/2. Each fractionally open facility location will, ultimately, be assigned to some cluster (i.e., not every facility assigned to this cluster need be a neighbor of the center), and each cluster will be expected to serve all of the demand that its facilities serve in the fractional solution. Each facility i that is fully opened in the fractional solution can immediately be opened and serve all of its demand; we view the remaining demand as located at the cluster center, and find a solution to the single-demand capacitated facility location problem induced by this cluster to determine the other facilities to open within this cluster. Piecing this together for each cluster, we then solve a transportation problem to determine the corresponding assignment.</p><p>To analyze this procedure, we show that the LP solution can also be decomposed into feasible fractional solutions to the respective single-demand problems. Our algorithm for the single-node subproblems computes a rounding of this fractional solution, and it is important that we can bound the increase in cost incurred by this rounding. Furthermore, note that it will be important for the analysis (and the effectiveness of the algorithm) that we ensure that in moving demand to a cluster center, we are not moving it too much, since otherwise the solution created for the single-node problem will be prohibitively expensive for the true location of the demand.</p><p>One novel aspect of our analysis is that the performance guarantee analysis comes in two parts: a part that is related to the fact that the assignment costs are increased by this displacement of the demand, and a part that is due to the aggregated effect of rounding the fractional solutions to the single-node problems. One consequence of this is that our analysis is not the "client-by-client" analysis that has become the dominant paradigm in recent work in this area. Finally, our analysis relies on both the primal and dual LPs to bound the cost of the solution computed. In doing this, one significant difficulty is that the terms in the dual objective that correspond to the upper bound for the hard capacity have a −1 as their coefficient; however, we show that further structure in the optimal primal-dual pair that results from the complementary slackness conditions is sufficient to overcome this obstacle (in a way similar to that used earlier in <ref type="bibr" target="#b16">[16]</ref>).</p><p>Although our analysis applies only to the case in which the fixed costs are equal, our algorithm is sufficiently general to handle arbitrary fixed costs. Furthermore, we believe that our approach may prove to be a useful first step in analyzing more sophisticated LP relaxations of the capacitated facility location problem; in particular, we believe that the decomposition into single-node problems can be a provably effective approach in the more general case. Specifically, we conjecture that the extended flow cover inequalities of Padberg, Van Roy, and Wolsey <ref type="bibr" target="#b10">[11]</ref> as adapted by Aardal <ref type="bibr" target="#b0">[1]</ref> are sufficient to insure a constant integrality gap; this raises the possibility of building on a recent result of Carr, Fleischer, Leung, and Phillips <ref type="bibr" target="#b2">[3]</ref> that showed an analogous result for the single-demand node problem. Furthermore, recent work of <ref type="bibr">Levi, Lodi, &amp; Sviridenko [7]</ref> and <ref type="bibr">Carnes &amp; Shmoys [2]</ref> have shown that in the context of capacitated inventory problems, these flow cover inequalities are sufficient to guarantee constant approximation algorithms.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">A Linear Program</head><p>We can formulate the capacitated facility location problem as an integer program and relax the integrality constraints to get a linear program (LP). We use i to index the facilities in F and j to index the clients in D.</p><formula xml:id="formula_0">min i f i y i + j i d j c ij x ij (P) s.t. i x ij ≥ 1, ∀j,<label>(1)</label></formula><formula xml:id="formula_1">x ij ≤ y i , ∀i, j,<label>(2)</label></formula><formula xml:id="formula_2">j d j x ij ≤ u i y i , ∀i,<label>(3)</label></formula><formula xml:id="formula_3">y i ≤ 1, ∀i, (4) x ij , y i ≥ 0, ∀i, j.</formula><p>Variable y i indicates if facility i is open and x ij indicates the fraction of the demand of client j that is assigned to facility i. The first constraint states that each client must be assigned to a facility. The second constraint says that if client j is assigned to facility i then i must be open, and constraint (3) says that at most u i amount of demand may be assigned to i. Finally (4) says that a facility can only be opened once. A solution where the y i variables are 0 or 1 corresponds exactly to a solution to our problem. The dual program is</p><formula xml:id="formula_4">max j α j − i z i (D) s.t. α j ≤ d j c ij + β ij + d j γ i , ∀i, j,<label>(5)</label></formula><formula xml:id="formula_5">j β ij ≤ f i + z i − u i γ i , ∀i,<label>(6)</label></formula><formula xml:id="formula_6">α j , β ij ,γ i , z i ≥ 0, ∀i, j.</formula><p>Intuitively α j is the budget that j is willing to spend to get itself assigned to an open facility. Constraint (5) says that a part of this is used to pay for the assignment cost d j c ij and the rest is used to (partially) pay for the facility opening cost.</p><p>For convenience, in what follows, we consider unit demands, i.e., d j = 1 for all j. The primal constraint (3) and the dual constraint (5) then simplify to j x ij ≤ u i y i , and α j ≤ c ij + β ij + γ i , and the objective function of the primal program (P) is min i f i y i + j,i c ij x ij . All our results continue to hold in the presence of arbitrary demands d j if the demand of a client is allowed to be assigned to multiple facilities.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Rounding the LP</head><p>In this section we give a 5-approximation algorithm for capacitated facility location when all facility costs are equal. We will round the optimal solution to (P) to an integer solution losing a factor of at most 5, thus obtaining a 5-approximation algorithm.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">The Single-Demand-Node Capacitated Facility Location Problem</head><p>The special case of capacitated facility location where we have just one client or demand node (called SNCFL) plays an important role in our rounding algorithm. This is also known as the single-node fixedcharge problem <ref type="bibr" target="#b10">[11]</ref> or the single-node capacitated flow problem. The linear program (P) simplifies to the following.</p><formula xml:id="formula_7">min i f i v i + i c i w i (SN-P) s.t. i w i ≥ D, w i ≤ u i v i , ∀i,<label>(7)</label></formula><formula xml:id="formula_8">v i ≤ 1, ∀i, (8) w i , v i ≥ 0, ∀i.</formula><p>Here D is the total demand that has to be assigned, f i ≥ 0 is the fixed cost of facility i, and c i ≥ 0 is the per unit cost of sending flow, or the distance, to facility i. Variable w i is the total demand (or flow) assigned to facility i, and v i indicates if facility i is open. We show that a simple greedy algorithm returns an optimal solution to (SN-P) that has the property that at most one facility is fractionally open, i.e., there is at most one i such that 0 &lt; v i &lt; 1. We will exploit this fact in our rounding scheme. Given any feasible solution (w, v) we can setˆvsetˆ setˆv i = w i u i</p><p>and obtain a feasible solution (w, ˆ v) of no greater cost. So we can eliminate the v i variables from (SN-P), changing the objective function to min</p><formula xml:id="formula_9">i f i u i + c i</formula><p>w i , and replacing constraints (7), (8) by w i ≤ u i for each i. Clearly, this formulation, which can be viewed as a fractional knapsack covering problem, is equivalent to the earlier one. Since this is a variant of a fractional knapsack problem, it is easy to see now that the following greedy algorithm delivers an optimal solution: start with w i = v i = 0 for all i. Consider facilities in increasing order of f i u i + c i value and assign to facility i a demand equal to u i or the residual demand left, whichever is smaller, i.e., set</p><formula xml:id="formula_10">w i = min(u i , demand left), v i = w i u i</formula><p>, until all D units of demand have been assigned. We get the following lemma.</p><p>Lemma 3.1 The greedy algorithm that assigns demand to facilities in increasing order of f i u i + c i delivers an optimal solution to (SN-P). Furthermore, there is at most one facility i in the optimal solution such that 0 &lt; v i &lt; 1.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">The Algorithm</head><p>We now describe the full rounding procedure. Let (x, y) and (α, β, γ, z) be the optimal solutions to (P) and (D) respectively, and let OPT be the common optimal value. We may assume without loss of generality that i x ij = 1 for each client j. We first give an overview of the algorithm. Our algorithm runs in two phases. In the first phase, we partition the facilities i such that y i &gt; 0 into clusters each of which will be "centered" around a client that we will call the cluster center. The partition of the facilities will induce a fractional partition of the demand. We denote the cluster centered around client k by N k . The cluster N k is defined by its center k, and consists of the set of facilities assigned to it, and has associated demand equal to the fractional demand served by these facilities, i.e., i∈N k j x ij . (Thus, the clusters also induce a partition of the total demand.) The clustering phase maintains two properties that will be essential for the analysis. It ensures that, (1) each cluster contains total fractional facility weight of at least 1 2 , i.e., i∈N k y i ≥ 1 2 , and (2) if some facility in cluster N k fractionally serves a client j, then the center k is not "too far" away from j (we make this precise in the analysis). To maintain the second property we require a somewhat more involved clustering procedure than the one presented in <ref type="bibr" target="#b14">[15]</ref>. In the second phase of the algorithm we decide which facilities will be (fully) opened in each cluster. We consider each cluster separately, and open enough facilities in N k to serve the fractional demand associated with the cluster. This is done in two steps. First, we open each facility i in N k for which y i = 1. Next, we set up an instance of SNCFL. The instance consists of all the remaining facilities within this cluster, and the entire demand served by these facilities, D k = i∈N k :y i &lt;1 j x ij , considered as concentrated at the center k. Now we use the greedy algorithm above to obtain an optimal solution to this instance with the property that at most one facility is fractionally open. Since the facility costs are all equal and each cluster has enough facility weight, we can fully open this final facility and charge this against the cost that the LP incurs in opening facilities from N k . By piecing together the solutions for the different clusters, we construct a solution to the capacitated facility location instance in which each facility is either fully open or closed. Now we compute the min-cost assignment of clients to open facilities by solving a transportation problem.</p><p>We now describe the algorithm in detail. Let F = {i : y i &gt; 0} be the (partially) opened facilities in (x, y), and F j = {i : x ij &gt; 0} be the facilities in F that fractionally serve client j.</p><p>1. Clustering. This is done in two steps.</p><p>C1. At any stage, let C be the set of the current cluster centers, which is initially empty. We use N k to denote a cluster centered around client k ∈ C. For each client j / ∈ C, we maintain a set B j of unclustered facilities that are closer to it than to any cluster center, i.e., B j = {i ∈ F j : i / ∈ k∈C N k and c ij ≤ min k∈C c ik }. (This definition of B j is crucial in our analysis that shows that if client j is fractionally served by N k , then k is not "too far" from j.) We also have a set S containing all clients that could be chosen as cluster centers. These are all clients j / ∈ C that send at least half of their demand to facilities in B j , i.e., S = {j / ∈ C :</p><formula xml:id="formula_11">i∈B j x ij ≥ 1 2 }. Of course, initially S = D, since C = ∅.</formula><p>While S is not empty, we repeatedly pick j ∈ S with the smallest α j value (the value of the corresponding dual variable) and form the cluster with N j = B j around it. We update the sets C and S accordingly. (Note that for any cluster N k , we have that</p><formula xml:id="formula_12">i∈N k y i ≥ i∈N k x ik ≥ 1</formula><p>2 .) C2. After the previous step, there could still be facilities in F that are not assigned to any cluster. We now assign these facilities in U = F − k∈C N k to clusters. We assign each facility i ∈ U to the cluster whose center is nearest to it, i.e., we set N j ← N j ∪ {i} where j = argmin k∈C c ik . In addition, we increase the demand associated with this cluster by adding to it all of the fractional demand served by facility i, j x ij . (After this step, the clusters N j , j ∈ C, partition the set of facilities F and induce a partition of the total demand i j x ij .)</p><p>2. Reducing to the single-node instances. For each cluster N k , we first open each facility i in N k with y i = 1. We now create an instance of SNCFL on the remaining set of facilities, by considering the total demand assigned to these facilities as being concentrated at the cluster center k. So our set of facilities is L k = {i ∈ N k : y i &lt; 1}, each c i is the distance c ik , and the total demand is D k = i∈L k j x ij . We use the greedy algorithm of Section 3.1 to find an optimal solution (w (k) , v (k) ) to this linear program. Let O * k be the value of this solution. We call the facility i such that 0 &lt; v &gt; 0 (including the extra facility). Note that the facilities opened (including each i such that y i = 1) have enough capacity to satisfy all of the demand i∈N k j x ij (and thus, the total capacity of the facilities opened in all of the clusters is enough to serve the total demand). Piecing together the solutions for all of the clusters, we get a solution where all of the y variables are assigned values in {0, 1}.</p><p>3. Assigning clients. We compute a minimum-cost assignment of clients to open facilities by solving the corresponding transportation problem (which, as noted above, is feasible). It is straightforward to see that since we opened enough facilities to serve the total demand, this transportation problem has a feasible solution.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Analysis</head><p>The performance guarantee of our algorithm will follow from the fact that the decomposition constructed by the algorithm of the original problem instance into single-node subproblems, one for each cluster, satisfies the following two nice properties. First, in Lemma 3.5, we show that the total cost of the optimal solutions for all of these single-node instances is not too large compared to OPT . We prove this by showing that the LP solution induces a feasible solution to (SN-P) for the SNCFL instance of each cluster and that the total cost of these feasible solutions is bounded by certain terms related to the optimal value to the LP relaxation of the original capacitated facility location instance. Second, in Lemma 3.7, we show that the optimal solutions to each of these single-node instances obtained by our greedy algorithm in Section 3.1, can be mapped back to yield a solution to the original problem in which every facility is either opened fully, or not opened at all, while losing a small additive term. Piecing together these partial solutions, we construct a solution to the capacitated facility location problem. The cost of this solution is bounded by aggregating the bounds obtained for each partial solution. We note that this bound is not based on a "client-by-client" analysis, but rather on bounding the cost generated by the overall cluster.</p><p>Observe that there are two sources for the extra cost involved in mapping the solutions to the singlenode instances. We might need to <ref type="bibr">(completely)</ref> open one fractionally open facility in the optimal fractional solution to (SN-P). This additional cost is bounded in Lemma 3.6, and this is the only place in the entire proof which uses the assumption that the fixed costs are all equal. In addition, we need to transfer all of the fractional demand that was assumed to be concentrated at the center of the cluster, back to its original location. To bound the extra assignment cost involved, we rely on the important fact that if a client j is fractionally served by some facility i ∈ N k , then the distance c jk is bounded. Since the triangle inequality implies that c jk ≤ c ij + c ik , we focus on bounding the distance c ik . This is done in Lemmas 3.3 and 3.4. In Lemma 3.8, we provide a bound on the facility cost and assignment cost involved in opening the facilities with y i = 1, which, by relying on complementary slackness, overcomes the difficulties posed by the −z i term in the dual objective function.</p><p>We then combine these bounds to prove our main theorem, Theorem 3.9, which states that the resulting feasible solution for the capacitated facility location problem is of cost at most 5 · OPT .</p><p>We first prove the following lemma that states a necessary condition for a facility i to be assigned to cluster N k . Lemma 3.2 Let i be a facility assigned to cluster N k in step C1 or C2. Let C be the set of cluster centers just after this assignment. Then, k is the cluster center closest to i among all cluster centers in C ; that is, c ik = min k ∈C c ik .</p><p>Proof : Since k ∈ C , clearly we have that c ik ≥ min k ∈C c ik . If i is assigned in step C1, then it must be included when the cluster centered at k is first formed; that is, i ∈ B k and the lemma holds by the definition of B k . Otherwise, if i is assigned in step C2, then C is the set of all cluster centers, in which case it is again true by the assignment rule used in this step.</p><p>For each client j, consider the point in the algorithm when j was removed from the set S in step C1, either because a cluster was created around it, or because the weight of the facilities in B j decreased below 1 2 when some other cluster was created. In each case, we will define sets A j and B j based on this moment in the algorithm's execution. If the client j is added to C, then at this moment, the set B j goes from having total fractional facility weight at least 1/2, to being empty. In this case, we will define B j to be the set B j just before j is deleted from S. On the other hand, if j is not added to C (and hence we know that this is the moment that the total fractional weight of B j decreases below 1/2), then we let B j be the set of facilities B j just after j is removed from S. In either case, we let A j = F j \ B j . Recall that there are two reasons for removing a facility i from the set B j : it was assigned to some cluster N k , or there was some cluster center k ∈ C, such that c ik &lt; c ij . Note that this implies (by <ref type="bibr">Lemma 3.2</ref>) that once i is removed from B j , even if j becomes a cluster center, i can never get assigned to N j . We define i * (j) as the facility in A j nearest to j.</p><p>Lemma 3.3 Consider any client j and any facility i ∈ A j . If i is assigned to cluster N k , then c ik ≤ α j .</p><p>Proof : Notice that k = j since even if j is a cluster center (which could happen), i is removed from B j at some point before cluster N j is created, so as mentioned above, i cannot be assigned to N j . Consider the point when j was removed from S in step C1, and let C be the set of cluster centers just after j is removed. Note that j is in C if it is just now selected as a cluster center. Suppose that j ∈ C . Then A j is determined by the situation just before j is added to C. Recall that initially (when C = ∅), we have that B j = F j , and that gradually facilities are deleted from B j (and hence destined for A j ). There are two reasons for a facility i to be deleted from B j : either it was included within N k for a cluster center k that is added to C, or else the distance c i j is greater that the distance from i to one of the cluster centers already included in C. For the given facility i, this means that, respectively, either (i) i ∈ N k for some k ∈ C − {j}, or (ii) we have that c ij &gt; min k ∈C −{j} c ik . But now consider the case that j is not selected as a cluster center (and hence A j is determined by the situation just after j is deleted from S); again it follows that either case (i) or case (ii) must apply (since in this case j ∈ C implies that C = C − {j}).</p><p>In case (i), it must be that k = k, since the clusters are disjoint. Also, c ik ≤ α k , since N k ⊆ F k , and α k ≤ α j , since k was picked while j was still available in S (recall the order in which we consider clients in S). In case (ii), consider the set of cluster centers C just after i is assigned to N k (either in step C1 or step C2), and so k ∈ C . It must be that C ⊇ C , since i was removed from B j before it was assigned to N k , and by Lemma 3.2,</p><formula xml:id="formula_13">c ik = min k ∈C c ik . Hence, c ik ≤ min k ∈C −{j} c ik &lt; c ij ≤ α j since A j ⊆ F j .</formula><p>Lemma 3.4 Consider any client j and any facility i ∈ B j . Let i be assigned to cluster</p><formula xml:id="formula_14">N k . If j ∈ C, then c ik ≤ c ij ; otherwise, c ik ≤ c ij + c i * (j)j + α j .</formula><p>Proof : If j is a cluster center, then when it was removed from S, we have constructed the cluster N j equal to the set B j . So i is assigned to N j , that is, k = j, and hence the bound holds. Suppose j / ∈ C. Consider the point just before the facility i * (j) is removed from the set B j in step C1, and let C be the set of cluster centers at this point. By the definition of the set A j and i * (j), j is still a candidate cluster center at this point. Let k ∈ C be the cluster center due to which i * (j) was removed from B j , and so i * (j) ∈ N k ⊆ F k or c i * (j)k &lt; c i * (j)j . In each case, we have c i * (j)k ≤ α j , since the choice of k implies that α k ≤ α j . Now consider the set of cluster centers C just after i is assigned to N k . Since i / ∈ A j , i * (j) was removed from B j before this point. So we have C ⊇ C . Using Lemma 3.2,</p><formula xml:id="formula_15">c ik = min k ∈C c ik ≤ c ik ≤ c ij + c i * (j)j + c i * (j)k ≤ c ij + c i * (j)j + α j . Consider now any cluster N k . Recall that L k = {i ∈ N k : y i &lt; 1}, (w (k) , v (k) )</formula><p>is the optimal solution to (SN-P) found by the greedy algorithm for the single-node instance corresponding to this cluster, and O * k is the value of this solution. Let k(i) ∈ C denote the cluster to which facility i is assigned, and so i ∈ N k(i) .</p><p>Lemma 3.5 For each k ∈ C, the optimal value</p><formula xml:id="formula_16">O * k ≤ i∈L k f i y i + j i∈L k</formula><p>c ik x ij , and hence,</p><formula xml:id="formula_17">k∈C O * k ≤ i:y i &lt;1 f i y i + j i:y i &lt;1 c ik(i) x ij .</formula><p>Proof : The second bound follows from the first since the clusters N k are disjoint. We will upper bound O * k by exhibiting a feasible solution ( ˆ w, ˆ v) of cost at most the claimed value. SetˆvSetˆ Setˆv i = y i , andˆwandˆ</p><formula xml:id="formula_18">andˆw i = j x ij for all i ∈ L k . Note that i ˆ w i = i∈L k j x ij = D k . The facility cost of this solution is at most i∈L k f i ˆ v i = i∈L k f i y i . The service cost is i∈L k c i ˆ w i = j i∈L k c ik x ij .</formula><p>Combining this with the bound on facility cost, we obtain the claimed result. </p><formula xml:id="formula_19">L k , i.e., ˆ y (k) = ˆ y (k) i i∈L k andˆyandˆ andˆy (k) i = 1 if i ∈ L k</formula><p>is open, and 0 otherwise.</p><formula xml:id="formula_20">Lemma 3.7 The solution w (k) , v (k) for cluster N k yields an assignmentˆxassignmentˆ assignmentˆx (k) = ˆ x (k) ij i∈L k ,j∈D</formula><p>such that,</p><formula xml:id="formula_21">(i) (ˆ x (k) , ˆ y (k) ) obeys constraints (2)-(4) for all i ∈ L k , (ii) ˆ x satisfies i∈L k</formula><p>x ij fraction of the demand of each client j, that is,</p><formula xml:id="formula_22">i∈L k ˆ x ij = i∈L k</formula><p>x ij for all j, and, </p><formula xml:id="formula_23">(iii) the cost i∈L k f i ˆ y (k) i + j i∈L k c ijˆxijˆ ijˆx (k) ij is at most O * k + 2 i∈N k f i y i + j i∈L k c ij x ij + j i∈L k c ik x ij . Proof : We have O * k = i∈L k f i v (k) i + c i w (k) i . Constraints (4) are clearly satisfied for i ∈ L k , sincê sincê y (k) is a {0, 1}-vector. The facility cost i∈L k f i ˆ y (k) i is at most i∈L k f i v (k) i + 2 i∈N</formula><formula xml:id="formula_24">(k) ij for i ∈ L k so that the service cost j i∈L k c ijˆxijˆ ijˆx (k) ij can be bounded by i∈L k c i w (k) i + j i∈L k (c ij + c ik )x ij .</formula><p>By combining this with the above bound on the facility cost, we obtain the desired result. The service cost of the single-node solution is the cost of transporting the entire demand D k = j i∈L k x ij from the facilities in L k to the center k, and now we want to move the demand, i∈L k x ij , of client j from k back to j. Doing this for all clients, we incur an additional cost of</p><formula xml:id="formula_25">j i∈L k c jk x ij ≤ j i∈L k (c ij + c ik )x ij . More precisely, we setˆxsetˆ setˆx (k) ij , i ∈ L k arbitrarily so that, (1) i∈L k ˆ x (k) ij = i∈L k x ij for each client j, and (2) j ˆ x (k) ij = w (k) i for each facility i ∈ L k . This satisfies constraints (2),(3) -ifˆxifˆ ifˆx (k) ij &gt; 0 then w (k) i &gt; 0, sô y (k) i = 1, and j ˆ x (k) ij = w (k) i ≤ u i = u i ˆ y (k) i . The service cost is j i∈L k c ijˆxijˆ ijˆx (k) ij ≤ i∈L k j c ikˆxikˆ ikˆx (k) ij + j i∈L k c jkˆxjkˆ jkˆx (k) ij ≤ i∈L k c i w (k) i + j i∈L k (c ij + c ik )x ij .</formula><p>Lemma 3.8 The cost of opening facilities i with y i = 1, and for each such i, of sending x ij units of flow from j to i for each client j, is at most</p><formula xml:id="formula_26">j i:y i =1 α j x ij − i z i .</formula><p>Proof : This follows from complementary slackness. Each facility i with z i &gt; 0 has y i = 1. For each such facility we have that</p><formula xml:id="formula_27">j α j x ij = j c ij x ij + j β ij x ij + j γ i x ij x ij &gt; 0 ⇒ α j = c ij + β ij + γ i = j c ij x ij + j β ij y i + u i γ i y i β ij &gt; 0 ⇒ x ij = y i , γ i &gt; 0 ⇒ j x ij = u i y i = j c ij x ij + f i + z i . y i &gt; 0 ⇒ j β ij + u i γ i = f i + z i</formula><p>By summing over all i with y i = 1, we complete the proof of the lemma.</p><p>Putting the various pieces together, we get the following theorem.</p><p>Theorem 3.9 The cost of the solution returned is at most 5 · OPT .</p><p>Proof : To bound the total cost, it suffices to give a fractional assignment (ˆ x ij ) such that (ˆ x, ˆ y) is a feasible solution to (P) and has cost at most 5 · OPT . We construct the fractional assignment as follows. First, we setˆxsetˆ setˆx ij = x ij for each facility i with y i = 1 = ˆ y i . This satisfies constraints (2)-(4) for i such that y i = 1. By the previous lemma we have, </p><p>Second, for each cluster N k , we setˆxsetˆ setˆx ij = ˆ x (k) ij for i ∈ L k where (ˆ x (k) , ˆ y (k) ) is the partial solution for cluster N k given by Lemma 3.7. Each variablê x ij that is not set either of these two ways is set equal to 0. Applying parts (i) and (ii) of Lemma 3.7 for all k ∈ C, we get that (ˆ x, ˆ y) satisfies (2)-(4) for each i such that y i &lt; 1, and i:y i &lt;1ˆx&lt;1ˆ &lt;1ˆx ij = i:y i &lt;1 x ij for each client j Hence, (ˆ x, ˆ y) satisfies constraints (2)-(4) and i ˆ x ij = i:y i =1 x ij + i:y i &lt;1 x ij = 1, showing that (ˆ x, ˆ y) is a feasible solution to (P). Since the clusters N k are disjoint, from part (iii) of Lemma 3.7, we have that where the last inequality follows from Lemma 3.5. For any client j and facility i ∈ F j , if i ∈ A j , then we have c ik(i) ≤ α j by Lemma 3.3; otherwise, by Lemma 3.4, c ik(i) ≤ c ij ≤ c ij + α j for j ∈ C, and c ik(i) ≤ c ij + c i * (j)j + α j for j / ∈ C. Plugging this in the above expression we get that </p><p>Finally, combining <ref type="formula" target="#formula_28">(9)</ref> and <ref type="formula" target="#formula_0">(10)</ref> α j x ij + 3 · OPT = 5 · OPT .</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>&lt;</head><label></label><figDesc>1 (if such a facility exists) the extra facility in cluster N k . We fully open all of the facilities in L k with v (k) i</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Lemma 3 . 6</head><label>36</label><figDesc>The cost of opening the (at most one) extra facility in cluster N k is at most 2 i∈N k f i y i . Proof : We have i∈N k y i ≥ i∈N k x ik ≥ 1 2 since N k was created in step C1 and is centered around k, and no facility is removed from N k in step C2. We open at most one extra facility from N k . Since all facilities have the same cost f , the cost of opening this facility is f ≤ f · 2 i∈N k y i = 2 i∈N k f i y i . This is the only place where we use the fact that the facility costs are all equal. LetˆyLetˆ Letˆy be the 0-1 vector indicating which facilities are open, i.e., ˆ y i = 1 if i is open, and 0 otherwise. We letˆyletˆ letˆy (k) denote the portion ofˆyofˆ ofˆy consisting of the facilities in</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>i</head><label></label><figDesc>:y i =1 f i ˆ y i + j i:y i =1 c ijˆxijˆ ijˆx ij = j i:y i =1 α j x ij − i z i .</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>i</head><label></label><figDesc>:y i &lt;1 f i ˆ y i + j i:y i &lt;1 c ijˆxijˆ ijˆx ij ≤ k∈C O * k + 2 i f i y i + j i:y i &lt;1 c ij x ij + j i:y i &lt;1 c ik(i) x ij ≤ 3 i f i y i + j i:y i &lt;1 c ij x ij + 2 j i:y i &lt;1 c ik(i) x ij .</figDesc></figure>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Capacitated facility location: separation algorithms and computational experience</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Mathematical Programming</title>
		<imprint>
			<biblScope unit="volume">81</biblScope>
			<biblScope unit="page" from="149" to="175" />
			<date type="published" when="1998" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Primal-dual schema for capacitated covering problems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Carnes</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Shmoys</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 13th Conference on Integer Programming and Combinatorial Optimization</title>
		<meeting>the 13th Conference on Integer Programming and Combinatorial Optimization</meeting>
		<imprint>
			<date type="published" when="2008" />
			<biblScope unit="page" from="288" to="302" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Strengthening integrality gaps for capacitated network design and covering problems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Carr</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Fleischer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Leung</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Phillips</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 11th Annual ACM-SIAM Symposium on Discrete Algorithms</title>
		<meeting>the 11th Annual ACM-SIAM Symposium on Discrete Algorithms</meeting>
		<imprint>
			<date type="published" when="2000" />
			<biblScope unit="page" from="106" to="115" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Improved approximation algorithms for capacitated facility location problems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><forename type="middle">A</forename><surname>Chudak</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">P</forename><surname>Williamson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Mathematical Programming</title>
		<imprint>
			<biblScope unit="volume">102</biblScope>
			<biblScope unit="page" from="207" to="222" />
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Approximation algorithms for metric facility location and k-median problems using the primal-dual schema and Lagrangian relaxation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Jain</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><forename type="middle">V</forename><surname>Vazirani</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of the ACM</title>
		<imprint>
			<biblScope unit="volume">48</biblScope>
			<biblScope unit="page" from="274" to="296" />
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Analysis of a local search heuristic for facility location problems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">R</forename><surname>Korupolu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">G</forename><surname>Plaxton</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Rajaraman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Algorithms</title>
		<imprint>
			<biblScope unit="volume">37</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="146" to="188" />
			<date type="published" when="2000" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Approximation algorithms for the multi-item capacitated lotsizing problem via flow-cover inequalities</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Levi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Lodi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Sviridenko</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Preliminary version appeared in Proceedings of the 12th Conference on Integer Programming and Combinatorial Optimization</title>
		<imprint>
			<date type="published" when="2007" />
			<biblScope unit="volume">33</biblScope>
			<biblScope unit="page" from="454" to="468" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">LP-based approximation algorithms for capacitated facility location</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Levi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Shmoys</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Swamy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 10th IPCO</title>
		<meeting>the 10th IPCO</meeting>
		<imprint>
			<date type="published" when="2004" />
			<biblScope unit="page" from="206" to="218" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Universal facility location</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Mahdian</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Pál</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 11th ESA</title>
		<meeting>the 11th ESA</meeting>
		<imprint>
			<date type="published" when="2003" />
			<biblScope unit="page" from="409" to="421" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Approximation algorithms for metric facility location problems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Mahdian</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Ye</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Zhang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SIAM J. Computing</title>
		<imprint>
			<biblScope unit="volume">36</biblScope>
			<biblScope unit="page" from="411" to="432" />
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Valid linear inequalities for fixed charge problems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">W</forename><surname>Padberg</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">J</forename><surname>Van Roy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><forename type="middle">A</forename><surname>Wolsey</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Operations Research</title>
		<imprint>
			<biblScope unit="volume">33</biblScope>
			<biblScope unit="page" from="842" to="861" />
			<date type="published" when="1985" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Facility location with nonuniform hard capacities</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Pál</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">´</forename><forename type="middle">E</forename><surname>Tardos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Wexler</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 42nd Annual IEEE Symposium on Foundations of Computer Science</title>
		<meeting>the 42nd Annual IEEE Symposium on Foundations of Computer Science</meeting>
		<imprint>
			<date type="published" when="2001" />
			<biblScope unit="page" from="329" to="338" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Approximation algorithms for facility location problems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">B</forename><surname>Shmoys</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of 3rd APPROX</title>
		<meeting>3rd APPROX</meeting>
		<imprint>
			<date type="published" when="2000" />
			<biblScope unit="page" from="27" to="33" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Shmoys andÉand´andÉ. Tardos. An approximation algorithm for the generalized assignment problem</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">B</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Mathematical Programming A</title>
		<imprint>
			<biblScope unit="volume">62</biblScope>
			<biblScope unit="page" from="461" to="474" />
			<date type="published" when="1993" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title level="m" type="main">Approximation algorithms for facility location problems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">B</forename><surname>Shmoys</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">´</forename><forename type="middle">E</forename><surname>Tardos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><forename type="middle">I</forename></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
				<title level="m">Proceedings of the 29th Annual ACM Symposium on Theory of Computing</title>
		<meeting>the 29th Annual ACM Symposium on Theory of Computing</meeting>
		<imprint>
			<date type="published" when="1997" />
			<biblScope unit="page" from="265" to="274" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Fault-tolerant facility location</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Swamy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">B</forename><surname>Shmoys</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 14th Annual ACM-SIAM Symposium on Discrete Algorithms</title>
		<meeting>the 14th Annual ACM-SIAM Symposium on Discrete Algorithms</meeting>
		<imprint>
			<date type="published" when="2003" />
			<biblScope unit="volume">4</biblScope>
			<biblScope unit="page" from="735" to="736" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">A multi-exchange local search algorithm for the capacitated facility location problem</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Ye</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Mathematics of Operations Research</title>
		<imprint>
			<biblScope unit="volume">30</biblScope>
			<biblScope unit="page" from="389" to="403" />
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
