<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2019-03-26T16:27+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">VirtualFace: An Algorithm to Guarantee Packet Delivery of Virtual-Coordinate-Based Routing Protocols in Wireless Sensor Networks</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author role="corresp">
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ming-Jer</forename><surname>Tsai</surname></persName>
							<email>mjtsai@cs.nthu.edu.tw</email>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">National Tsing Hua University Hsing Chu</orgName>
								<address>
									<country key="TW">Taiwan, ROC</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Fang-Ru</forename><surname>Wang</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">National Tsing Hua University Hsing Chu</orgName>
								<address>
									<country key="TW">Taiwan, ROC</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hong-Yen</forename><surname>Yang</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">National Tsing Hua University Hsing Chu</orgName>
								<address>
									<country key="TW">Taiwan, ROC</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yuan-Po</forename><surname>Cheng</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">National Tsing Hua University Hsing Chu</orgName>
								<address>
									<country key="TW">Taiwan, ROC</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">VirtualFace: An Algorithm to Guarantee Packet Delivery of Virtual-Coordinate-Based Routing Protocols in Wireless Sensor Networks</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Because the global positioning system (GPS) consumes a large amount of power and does not work indoors, many virtual-coordinate-based routing protocols are proposed for wireless sensor networks in which geographic location information is unavailable. Each of them, however, cannot guarantee packet delivery or constructs a virtual coordinate system with a complex structure. In this paper, we propose a method capable of augmenting virtual-coordinate-based routing protocols to guarantee packet delivery. Firstly, we introduce the virtual face construction protocol and the virtual face naming protocol to construct and name virtual faces, respectively. Subsequently, the VirtualFace algorithm is presented to route a packet from a dead-end node to a progress node by traversing the boundaries of the virtual faces from face to face. Simulations show that virtual-coordinate-based routing protocols including GLIDER, Hop ID, GLDR, and VCap augmented with the VirtualFace algorithm guarantee packet delivery while ensuring moderate routing path length overhead costs.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>I. INTRODUCTION</head><p>In a wireless sensor network, the sensor monitors and aggregates information about the environment, and returns the environmental information to the base station via intersensor communication. A wide range of applications exist in our lives, including environmental monitoring, battlefield surveillance, health care, intruder detection, etc. The design of routing protocols has received considerable attention because an efficient routing protocol significantly improves network performance. Because the global positioning system (GPS) consumes a large amount of power, a geographic location is obtained with difficulty in wireless sensor networks. In this paper, we undertake the development of virtual-coordinatebased routing protocols in wireless sensor networks.</p><p>MAP <ref type="bibr" target="#b0">[1]</ref> constructs the media axes, and uses a medial axis graph that represents the connections between the media axes as the guide for routing. In MAP, several sample boundary nodes surrounding voids and several sample network boundary nodes must be handedly picked, generating difficulty with implementing this approach in practice. ABVCap <ref type="bibr" target="#b1">[2]</ref> constructs axes, including a parallel of latitude and a number of meridians, and assigns each node the longitude and latitude coordinates in a manner analogous to that for the degrees of longitude and latitude in the globe. MAP and ABVCap each guarantee packet delivery; however, each of them constructs a complex structure consisting of a number of axes, demanding a considerable amount of message communication overhead to reconstruct disconnected axes in networks with node failures.</p><p>In GLIDER <ref type="bibr" target="#b2">[3]</ref>, all nodes are divided into cells by the landmark Voronoi complex and the connections between neighboring cells are represented by combinatorial Delaunay triangulation (CDT) on landmarks. A node is addressed by the hop distances to the landmarks in neighboring cells, and a packet is routed via the shortest path from the source cell to the destination cell in CDT. In GLDR <ref type="bibr" target="#b3">[4]</ref>, a node is addressed by the hop distances to a constant number of nearest landmarks. A packet is routed along the shortest path toward the landmark near the destination which demonstrates the maximum ratio of the hop distances to the source and the destination. In VCap <ref type="bibr" target="#b4">[5]</ref> and Hop ID <ref type="bibr" target="#b5">[6]</ref>, a node is addressed by the hop distances to all landmarks, and a packet is greedily routed to the destination using the power distance computed by virtual coordinates. In GLIDER, GLDR, VCap, and Hop ID, virtual coordinates are easy to update in networks with node failures, because virtual coordinates are assigned according to the hop distances to landmarks. GLIDER, GLDR, VCap, and Hop ID each, however, cannot guarantee packet delivery with the exception that the flooding mechanism is used, which requires a great deal of route overhead and suffers from the broadcasting storm problem <ref type="bibr" target="#b6">[7]</ref>.</p><p>In this paper, in a wireless sensor network without GPS assistance, we construct virtual faces and propose a VirtualFace algorithm to route a packet from a node with no neighbor closer to the destination (dead-end node) to a node closer to the destination (progress node), such that the virtual-coordinatebased routing protocols augmented with the VirtualFace algorithm can guarantee packet delivery. Face algorithms <ref type="bibr" target="#b7">[8]</ref>, <ref type="bibr" target="#b8">[9]</ref>, <ref type="bibr" target="#b9">[10]</ref> that route a packet from a dead-end node to a progress node in geographic routing protocols by traversing the boundaries of faces in a planar graph does not work in virtualcoordinate-based routing protocols because virtual coordinates cannot be used to remove crossing links to build a planar graph. In FaceTrace <ref type="bibr" target="#b10">[11]</ref>, a face is delimited by a closed walk whose two consecutive edges are consecutive edges incident to a node in the counterclockwise direction. FaceTrace solves the dead-end node problem in geographic routing protocols without the construction of a planar graph; it, however, cannot be used in virtual-coordinate-based routing protocols because edges incident to a node cannot be labeled in the counterclockwise direction without GPS assistance. In this paper, we assume that each node has the information of the neighbors obtained by message exchange, where the information of a node includes the IDs of the node, the neighbors, and the neighbors in the connected dominating set, the hop count from a specific node, and the ID and the name of the virtual face whose boundary contains the node. Each node is also assumed to be static, have a unique identifier (ID), and have the same transmission range. The remainder of this paper is organized as follows. The virtual face construction protocol (VFCP) and the virtual face naming protocol (VFNP) are proposed to construct and name virtual faces in Sections II and III, respectively. In Section IV, the VirtualFace algorithm is presented. We analyze the VirtualFace algorithm in Section V, and evaluate, by simulations, the performance of the VirtualFace algorithm in Section VI. Finally, we conclude this paper in Section VII.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>II. VIRTUAL FACE CONSTRUCTION PROTOCOL (VFCP)</head><p>VFCP constructs virtual faces with boundaries closely surrounding holes, such that a packet can efficiently turn around a hole by traversing the boundary of the surrounding virtual face. In VFCP, the boundaries of virtual faces are down-up cycles in the triangle-free subnetwork induced by the connected dominating set, which are constructed in a four-phase process. In the first phase, the triangle-free subnetwork induced by the connected dominating set, G D , is generated. In the second and third phases, each node in G D evaluates the hop distance to a specific node, S, and each tail node computes the lengths of the shortest down-up cycles, respectively. Finally, virtual faces are constructed in G D in the fourth phase. In VFCP, virtual faces are constructed in G D to reduce the number of virtual faces. The following notations are necessary for the description of VFCP. Definition 1. A network is triangle-free if any three nodes are not mutually neighbors. Definition 2. A dominating set denotes a subset of nodes such that each node not in the set is a neighbor of at least one node in the set. A dominating set is connected if the induced subnetwork is connected.</p><formula xml:id="formula_0">Definition 3. In G D , a cycle (u 1 , u 2 , · · · , u n ) is called a down-up cycle if a node, u h , exists such that u i .hp(S) − 1 ≤ u i+1 .hp(S) ≤ u i .hp(S) for 1 ≤ i &lt; h and u i .hp(S) ≤ u i+1</formula><p>.hp(S) ≤ u i .hp(S) + 1 for h ≤ i &lt; n, where u 1 = u n and u i .hp(S) denotes the hop distance from u i to S in G D .</p><p>Definition 4. In G D , a node, u, is called a tail node if at least two neighbors v and w exist such that v.hp(S) = u.hp(S) − 1 and w.hp(S) ≤ u.hp(S). Example 1. In <ref type="figure" target="#fig_0">Fig. 1</ref>, each node depicted by a dashed circle is a neighbor of at least one node shown in a solid circle, and the subnetwork induced by nodes shown in solid circles is connected; therefore, the set of nodes shown in solid circles is a connected dominating set according to Definition 2. In cycle (11, 7, 4, 3, 12, 25, 11), u 1 .hp(S) = 5, u 2 .hp(S) = 4, u 3 .hp(S) = 3, u 4 .hp(S) = 2, u 5 .hp(S) = 3, u <ref type="bibr" target="#b5">6</ref> .hp(S) = 4, and <ref type="bibr" target="#b10">(11,</ref><ref type="bibr" target="#b6">7,</ref><ref type="bibr" target="#b3">4,</ref><ref type="bibr" target="#b2">3,</ref><ref type="bibr" target="#b11">12,</ref><ref type="bibr">25,</ref><ref type="bibr" target="#b10">11</ref>) is a down-up cycle according to Definition 3. According to Definition 4, node 11 is a tail node because nodes 7 and 25 are neighbors of node 11, 7.hp(S) = 11.hp(S) − 1, and 25.hp(S) ≤ 11.hp(S).</p><formula xml:id="formula_1">u 7 .hp(S) = 5 satisfying u i .hp(S) − 1 ≤ u i+1 .hp(S) ≤ u i .hp(S) for 1 ≤ i &lt; 4 and u i .hp(S) ≤ u i+1 .hp(S) ≤ u i .hp(S) + 1 for 4 ≤ i &lt; 7; therefore, cycle</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Generation of a Triangle-Free Subnetwork</head><p>There are two steps in this phase. The connected dominating set is first generated by the pruning algorithm <ref type="bibr" target="#b11">[12]</ref>. Subsequently, the triangle-free subnetwork is constructed by removing each edge between two nodes with the largest two IDs in a triangle in the subnetwork induced by the connected dominating set.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Evaluation of Hop Distances</head><p>Let S be the pre-programmed node or the node with the largest ID dominating the pre-programmed node. Each node, u, evaluates u.hp(S), as implemented in the following. Firstly, S broadcasts an S SET message containing a hop counter initially set to 1. Once a node, u, receives an S SET message, u sets u.hp(S) to the hop counter contained in the message and broadcasts the message containing the hop counter increased by 1. If u receives more than one S SET message, u broadcasts the S SET message containing the smallest hop counter and sets u.hp(S) according to the message. A tail node, u, evaluates the lengths of shortest down-up cycle, as implemented in the following. Each neighbor, v, of u with v.hp(S) = u.hp(S) − 1 generates a DUCYCLE SET message containing the ID of v, a hop counter initially set to 1, and a state status initially set to down; subsequently, the message is forwarded to all neighbors y with y.hp(S) ≤ v.hp(S). Once a node, x, receives a DUCYCLE SET message generated by v, x sets x.hp(v) to the hop counter contained in the message, and forwards the message containing the ID of v, the hop counter increased by 1, and a state status equal to up to all neighbors y with y.hp(S) ≥ x.hp(S). In addition, if the state status contained in the received DUCYCLE SET message equals down, x also forwards the message containing the ID of v, the hop counter increased by 1, and a state status equal to down to all neighbors y with y.hp(S) ≤ x.hp(S). If x receives more than one DUCYCLE SET message generated by v, x forwards the DUCYCLE SET message containing the smallest hop counter, and sets x.hp(v) according to the message. After u receives the DUCYCLE SET message generated by v from w with w.hp(S) ≤ u.hp(S), the length of the shortest down-up cycle containing u, v, and w is evaluated as 2 + w.hp <ref type="bibr">(v)</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C. Computation of Shortest Down-Up Cycle Lengths</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>D. Construction of Virtual Faces</head><p>A tail node, u, constructs a virtual face, vf , with a boundary containing u, v, and w, where v and w are two neighbors of u, with v.hp(S) = u.hp(S) − 1 and w.hp(S) ≤ u.hp(S), as implemented in the following. u sets vf.size as its sequence number in vf (u.seq(vf )), generates a FACE SET message containing the ID of v, the ID of vf (vf.id) which is a random number chosen in a large enough interval to break a tie, and the size of vf (vf.size) equal to 2+w.hp(v), and forwards the message to w. If a node, x, receives a FACE SET message, x stores vf.size and vf.id, sets x.seq(vf ) to x.hp(v) + 1, and forwards the message by backtracking the shortest down-up cycle containing u, v, and w. If a node, x, is not contained in the boundary of a virtual face, a virtual face with a boundary containing x is constructed. Example 2. An example of construction of virtual faces using VFCP is illustrated in <ref type="figure" target="#fig_1">Fig. 2</ref>. In the first phase, the connected dominating set is first generated by the pruning algorithm. Subsequently, the edge between nodes 5 and 7 is removed because nodes 4, 5, and 7 are in a triangle in the subnetwork induced by the connected dominating set. In the second phase, node 14 is the pre-programmed node and broadcasts an S SET message containing a hop counter equal to 1. After node 9 receives the S SET message, node 9 sets 9.hp(S) to 1, and broadcasts the message containing a hop counter equal to 2. In the third phase, node 7 generates a DUCYCLE SET message containing the ID of node 7, a hop counter equal to 1, and a state status equal to down because node 7 is a neighbor of a tail node 11, and 7.hp(S) = 11.hp(S) − 1. The message is forwarded to node 4 because 4.hp(S) ≤ 7.hp(S). Node 4 sets 4.hp <ref type="formula">(7)</ref> to 1, and updates the hop counter contained in the message to 2. Subsequently, the message containing a state status equal to down is forwarded to node 3 because 3.hp(S) ≤ 4.hp(S), and the message containing a state status equal to up is forwarded to node 5 because 5.hp(S) ≥ 4.hp(S). Repeating the forwarding process, node 25 receives two DUCYCLE SET messages generated by node 7. One travels nodes 7, 4, 3, 12, and 25, and the other travels nodes 7, 4, 3, 10, 14, 9, 22, 1, and 25. Node 25 forwards the former message and sets 25.hp(7) to 4. After node 11 receives the DUCYCLE SET message from node 25, the length of the shortest down-up cycle containing nodes 11, 7, and 25 is evaluated as 2 + 25.hp(7) = 6. In the fourth phase, to construct a virtual face, vf 7 , node 11 generates a FACE SET message containing the ID of node 7, vf <ref type="bibr" target="#b6">7</ref> .id, and vf 7 .size = 2 + 25.hp(7) = 6. The FACE SET message backtracks the cycle (11, 7, 4, 3, 12, 25, 11), in which process nodes 11, 25, 12, 3, 4, and 7 set 11.seq(vf 7 ), 25.seq(vf 7 ), 12.seq(vf 7 ), 3.seq(vf 7 ), 4.seq(vf 7 ), and 7.seq(vf 7 ) to vf 7 .size = 6, 25.hp(7) + 1 = 5, 12.hp(7) + 1 = 4, 3.hp(7) + 1 = 3, 4.hp(7)+1 = 2, and 7.hp(7)+1 = 1, respectively. In addition, a virtual face, vf 6 , with a boundary containing only node 15 is constructed because node 15 is not contained in the boundaries of virtual faces vf 1 , vf 2 , vf 3 , vf 4 , vf 5 , and vf 7 .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>III. VIRTUAL FACE NAMING PROTOCOL (VFNP)</head><p>VFCP names virtual faces such that a packet can traverse the boundaries of virtual faces efficiently. A virtual face, vf , is named by the polar coordinate system <ref type="bibr" target="#b12">[13]</ref> as (vf.radial, vf.angular), where vf.radial and vf.angular denoting the radial and angular coordinates are an integer and an interval of real numbers [a, b), respectively. The virtual face with the smallest virtual face ID is called the pole virtual face and denoted as vf p . The radial and angular coordinates of the pole virtual face equal 0 and [0, 2π), respectively. The following notations are necessary for the description of VFNP.</p><formula xml:id="formula_2">Definition 5. The virtual face graph, G vf = (V vf , E vf ), is an undirected graph, in which node u vf is in V vf if a virtual face vf is constructed in G D , and edge (u vf 1 , u vf 2 ) is in E vf if vf 1</formula><p>and vf 2 are neighboring virtual faces, in which vf 1 and vf 2 are  Example 3. <ref type="figure">Fig. 3</ref> illustrates the virtual face graph, G vf = (V vf , E vf ), for virtual faces in <ref type="figure" target="#fig_1">Fig. 2</ref>  <ref type="bibr">[a, b)</ref>, the size of vf equals c, and the sequence number of u in vf equals i, the angular coordinates of </p><formula xml:id="formula_3">(1, [ , )) 8 4 񮽙 񮽙 3 (1, [ , )) 4 񮽙 񮽙 5 (1, [ , )) 3 12 񮽙 񮽙 (1, [0, )) 8 񮽙 3 19 (2, [ , )) 8 48 񮽙 񮽙 (0, [0, 2 )) 񮽙 (2, [</formula><formula xml:id="formula_4">( = vf ) contains u or a neighbor of u in G D . Definition 7. Interval [a, b) is smaller than interval [c, d), denoted by [a, b) &lt; [c, d), if b ≤ c, is equal to interval [c, d), denoted by [a, b) = [c, d), if a = c and b = d, and is between interval [c, d), denoted by [a, b) ⊂ [c, d), if a ≥ c, b ≤ d, and [a, b) is not equal to [c, d). In addition, [a, b) ⊆ [c, d) if [a, b) = [c, d) or [a, b) ⊂ [c, d).</formula><formula xml:id="formula_5">u vf 1 , u vf 2 , · · · , u vf n each are between interval [a + (i − 1)(b − a)/c, a + i · (b − a)/c), the i-th smallest equal sub-interval of [a, b). More specifically, the angular coordinate of u vfj equals interval [a+(i−1)(b−a)/c+ (j −1)(b−a)/(c·n), a+(i−1)(b−a)/c+j ·(b−a)/(c·n)), the j-th smallest equal sub-interval of [a + (i − 1)(b − a)/c, a + i · (b−a)/c</formula><formula xml:id="formula_6">(i − 1)(b − a)/c + (j − 1)(b − a)/(c · n), a + (i − 1)(b − a)/c + j · (b − a)/(c · n)), in which interval [a, b)</formula><p>is the angular coordinate of vf 1 , i equals v.seq(vf 1 ), c equals vf 1 .size, n is the number of v-neighbors of u vf 1 in G vf , and j is the number of v-neighbors of u vf 1 with a smaller or an equal ID than u vf in G vf . In addition, if at least one u-neighbor of u vf exists, u also generates and broadcasts to neighbors a NAME SET message containing vf p .id, vf.size, vf.id, vf.radial, vf.angular, u.seq(vf ), and the IDs of uneighbors of u vf after u receives a NAME SET message. If u receives more than one NAME SET message, u assigns (vf.radial, vf.angular) to the smallest pair of numbers (vf.radial, vf.angular) according to the message containing the smallest vf p .id.</p><p>Example 4. An example of naming virtual faces using VFNP is illustrated in <ref type="figure">Fig. 3</ref>   <ref type="bibr" target="#b0">1</ref> .radial = 0, vf 1 .angular = [0, 2π), 12.seq(vf 1 ) = 1, and the IDs of u vf2 and u vf7 . After node 5 receives the NAME SET message generated by node 12, node 5 broadcasts the message, sets vf 2 .radial to 1, and sets vf 2 .angular to </p><note type="other">2π/24, (i − 1) · 2π/8 + j · 2π/24) = [π/4, π/3) because vf</note><formula xml:id="formula_7">[(i − 1) · 2π/8 + (j − 1) · 2π/16, (i − 1) · 2π/8 + j · 2π/16) = [0, π/8) because vf 1 .angular = [0, 2π),</formula><formula xml:id="formula_8">(i − 1) · π/8/4 + (j − 1) · π/8/12, (i − 1) · π/8/4 + j · π/8/12) = [π/96, π/48).</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>IV. THE VIRTUALFACE ALGORITHM</head><p>We assume that the routed packet carries the name of the virtual face, vf d , with a boundary containing the destination or the dominating node of the destination. Once a message encounters a dead-end node, the VirtualFace algorithm routes the message toward vf d until a progress node is reached. The following notations are necessary for the description of the VirtualFace algorithm.</p><p>Definition 9. Let [a, b) and [c, d) be the angular coordinates of virtual faces vf 1 and vf 2 , respectively. The angular distance from vf 1 to vf 2 , denoted by dist ang (vf 1 , vf 2 ), equals c−b+1  If a packet with the destination, d, encounters a dead-end node, the VirtualFace algorithm routes the packet to a progress node, as described in the following. If the forwarding node, u, is not in G D , u forwards the packet to the dominating node of u. Otherwise, if one neighbor, v, of u in G is a progress node, the packet is forwarded to v. Otherwise, if u is contained in the boundary of vf closest , the packet is forwarded to the successive node of u in the boundary of vf closest , where vf closest denotes the virtual face closest to vf d among all virtual faces with boundaries containing u or at least one neighbor of u. Otherwise, the packet is forwarded to one neighbor of u contained in the boundary of vf closest .</p><formula xml:id="formula_9">if [a, b) &lt; [c, d), equals a − d + 1 if [c, d) &lt; [a</formula><p>Example 6. An example of VCap augmented with the VirtualFace algorithm is illustrated in <ref type="figure" target="#fig_3">Fig. 4</ref>, where a packet is routed from node 8 to node 20. In VCap, a node forwards a packet to a neighbor having a closer and minimal distance to the destination, where the distance between two nodes with virtual coordinates (x 1 , y 1 , z 1 ) and (x 2 , y 2 , z 2 ) is defined as (x 2 − x 1 ) 2 + (y 2 − y 1 ) 2 + (z 2 − z 1 ) 2 . Using VCap, node 8 forwards the packet to node 21 because node 21 is a neighbor having a closer and minimal distance to node 20. Subsequently, the packet is forwarded to node 2, and then forwarded to node 6. Node 6 is a dead-end node because none of its neighbors is closer to node 20. Therefore, the VirtualFace algorithm is used to route the packet, where vf d = vf 3 because the dominating node of node 20, node 34, is contained in the boundary of vf 3 . Node 6 forwards the packet to its dominating node, node 7. The boundaries of vf 2 , vf 5 , and vf 7 each contain node 7 or a neighbor of node 7. Because dist(vf 7 , vf 3 ) &lt; dist(vf 2 , vf 3 ) and dist(vf 7 , vf 3 ) &lt; dist(vf 5 , vf 3 ), vf closest = vf 7 . The packet is forwarded to node 11, the successive node of node 7 in the boundary of vf 7 . As the packet is at node 11, vf closest = vf 1 . The packet is forwarded to node 25, the neighbor of node 11 in the boundary of vf 1 . Node 26, the neighbor of node 25, is a progress node because node 26 is closer to node 20 than node 6 (the dead-end node). The packet is forwarded to node 26. Using VCap, the packet is eventually routed to node 20.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>V. ANALYSIS OF THE VIRTUALFACE ALGORITHM</head><p>We show the VirtualFace algorithm can always route a packet from a dead-end node to a progress node. Lemma 1. For any virtual face vf 1 = vf p , there exists a virtual face, vf 2 , such that vf 2 .radial = vf 1 .radial − 1 and vf 1 .angular ⊆ vf 2 .angular.</p><p>Proof: Assume that vf 1 .radial and vf 1 .angular are assigned when a node, u, contained in the boundary of vf 1 receives a NAME SET message from a node, v, contained in the boundary of vf 2 . By VFNP, vf 1 .radial equals vf 2 .radial+1, and vf 1 .angular equals the j-th smallest equal sub-interval of the i-th smallest equal sub-interval of vf 2 .angular if the sequence number of v in vf 2 is i and the number of vneighbors of u vf2 with a smaller or an equal ID than u vf1 in G vf is j.</p><p>Lemma 2. Let vf 1 and vf 2 be two virtual faces. If vf 1 .radial = vf 2 .radial, then vf 1 .angular &lt; vf 2 .angular or vf 2 .angular &lt; vf 1 .angular.</p><p>Proof: It suffices to show the statement S, there exists no virtual faces, vf 1 and vf 2 , with radial coordinate k such that neither of vf 1 .angular &lt; vf 2 .angular and vf 2 .angular &lt; vf <ref type="bibr" target="#b0">1</ref> .angular is satisfied, holds for all k ≥ 0. S holds for k = 0 because there is only one virtual face with radial coordinate 0; therefore, a basis for the proof exists. We prove S holds for k ≥ 1 by induction on k. As an induction assumption, we take S holds for k ≤ m − 1. If vf 1 .radial = vf 2 .radial = m, according to Lemma 1, there exists virtual faces, vf <ref type="bibr" target="#b2">3</ref> and vf 4 , with vf 3 .radial = vf 4 .radial = m − 1 such that vf 1 .angular ⊆ vf 3 .angular and vf 2 .angular ⊆ vf 4 .angular. If vf 3 = vf 4 , vf 3 .angular &lt; vf 4 .angular or vf 4 .angular &lt; vf 3 .angular by induction hypothesis, implying vf 1 .angular &lt; vf 2 .angular or vf 2 .angular &lt; vf <ref type="bibr" target="#b0">1</ref> .angular. If vf 3 = vf 4 , vf 1 .angular (or vf 2 .angular) equals the j 1 -th (or j 2 -th) smallest equal sub-interval of the i 1 -th (or i 2 -th) smallest equal sub-interval of vf 3 .angular, where i 1 (or i 2 ) denotes the sequence number of the node, v 1 (or v 2 ), contained in the boundary of vf 3 from which the node contained in the boundary of vf 1 (or vf 2 ) receives the NAME SET message to assign the radial and angular coordinates of vf 1 (or vf 2 ), and j 1 (or j 2 ) denotes the number of v 1 -neighbors (or v 2 -neighbors) of u vf 3 with a smaller or an equal ID than u vf1 (or u vf2 ) in <ref type="table">G</ref>  Proof: If vf 1 .radial = vf 2 .radial − 1, the proof is completed by letting vf 3 = vf 1 and vf 4 = vf 2 . In case vf 1 .radial &lt; vf 2 .radial − 1, according to Lemma 1, there exists virtual faces, vf 3 and vf 5 , such that vf 3 .radial = vf 2 .radial − 1, vf 5 .radial = vf 1 .radial, and vf 2 .angular ⊆ vf 3 .angular ⊆ vf 5 .angular, and there exists virtual faces, vf 4 and vf 6 , such that vf 4 .radial = vf 1 .radial+1, vf 6 .radial = vf 1 .radial, and vf 2 .angular ⊆ vf 4 .angular ⊆ vf 6 .angular. It suffices to show vf 1 = vf 5 = vf 6 to complete the proof. Assume that vf 1 = vf 5 . Because vf 1 .radial = vf 5 .radial, vf 1 .angular &lt; vf 5 .angular or vf 5 .angular &lt; vf 1 .angular according to <ref type="bibr">Lemma 2, resulting</ref> in the impossibility that vf 2 .angular ⊆ vf 1 .angular and vf 2 .angular ⊆ vf 5 .angular. In addition, vf 1 = vf 6 can be proved in a manner analogous for that of vf 1 = vf 5 .</p><p>Theorem 2. If G is connected, then for any virtual face vf 1 = vf d , there exists a neighboring virtual face, vf 2 , such that</p><formula xml:id="formula_10">dist(vf 2 , vf d ) &lt; dist(vf 1 , vf d ).</formula><p>Proof: According to Theorem 1, we have to discuss five cases: c1) vf 1 .angular &lt; vf d .angular;</p><formula xml:id="formula_11">c2) vf d .angular &lt; vf 1 .angular; c3) vf 1 .angular ⊂ vf d .angular; c4) vf d .angular ⊂ vf 1 .angular; c5) vf 1 .angular = vf d .angular.</formula><p>We adhere to the proofs of c1 and c3 and omit the proofs of the other cases due to the similarities. For c1, because vf 1 = vf p is impossible to hold, there exists a virtual face, vf 2 , such that vf 2 .radial = vf 1 .radial − 1, and c1.1) vf 1 .angular ⊂ vf 2 .angular or c1.2) vf 1 .angular = vf 2 .angular according to Lemma 1. For c1.1, neither of vf d .angular &lt; vf 2 .angular and vf 2 .angular ⊆ vf d .angular holds because vf 1 .angular &lt; vf d .angular. Therefore, two cases need to be discussed: c1.1.1) vf 2 .angular &lt; vf d .angular; c1.1.2) vf d .angular ⊂ vf 2 .angular. For c1.1.1, according to Def-</p><formula xml:id="formula_12">inition 9, 0 &lt; dist ang (vf 2 , vf d ) ≤ dist ang (vf 1 , vf d ), and dist rad (vf 2 , vf d ) &lt; dist rad (vf 1 , vf d ) because vf 2 .radial &lt; vf 1 .radial. This implies dist(vf 2 , vf d ) &lt; dist(vf 1 , vf d ) ac- cording to Definition 10. For c1.1.2, dist ang (vf 2 , vf d ) = 0 &lt; dist ang (vf 1 , vf d ), implying dist(vf 2 , vf d ) &lt; dist(vf 1 , vf d ).</formula><p>c1.2 can be proved in a manner analogous for that of c1.1.1, completing the proof of c1. For c3, vf 1 .radial &gt; vf d .radial according to Lemma 3. Therefore, there exists a virtual face, vf 2 , such that vf 2 .radial = vf 1 .radial − 1 and</p><formula xml:id="formula_13">vf 1 .angular ⊆ vf 2 .angular ⊆ vf d .angular according to Lemma 4. Clearly, dist ang (vf 2 , vf d ) = 0 = dist ang (vf 1 , vf d ). In addition, vf 1 .radial &gt; vf 2 .radial ≥ vf d .radial. Therefore, dist rad (vf 2 , vf d ) &lt; dist rad (vf 1 , vf d ), and thus dist(vf 2 , vf d ) &lt; dist(vf 1 , vf d ),</formula><p>completing the proof of c3.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Theorem 3. If G is connected, the VirtualFace algorithm can always route a packet to a progress node.</head><p>Proof: Let u be a forwarding node in the boundary of a virtual face, vf . Using the VirtualFace algorithm, u forwards a packet to the successive node in the boundary of vf , if no neighbor is in the boundary of a virtual face closer to vf d ; otherwise, u forwards a packet to a neighbor in the boundary of the virtual face closest to vf d . It implies the packet traverses the boundaries of virtual faces in a decreasing order of the distance to vf d . Because any virtual face except for vf d has a neighboring virtual face closer to vf d according to Theorem 2, the packet can be always routed to vf d , and thus to the destination if no progress node is encountered during the routing process. Because the destination is a progress node, the proof is completed.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>VI. PERFORMANCE EVALUATION</head><p>In our simulations, 100 connected networks with densities ranging from 10 to 30 were generated by randomly deploying nodes in square regions with a side length equal to 25, in which the network density denoted the average number of neighbors per node, and the transmission range of a node was a circle of radius 1. Network behavior such as packet loss, packet delay, and so on were not taken into consideration. GLIDER, Hop ID, GLDR, and VCap using the VirtualFace algorithm to route a packet from a dead-end node to a progress node were denoted by GLIDER+VF, Hop ID+VF, GLDR+VF, and VCap+VF, respectively, and compared with GLIDER, Hop ID, GLDR, VCap, and ABVCap, in terms of the packet delivery rate, the routing path length, the number of next hop neighbors, the load imbalance factor, the number of broadcasts per node, and the packet delivery rate in networks with node failures, in which the load imbalance factor denoted the ratio of the maximum number of packets routed by a node (the maximum load) to the average number of packets routed by a node (the average load). The existence of a node routing many packets was indicated by a large load imbalance factor. In GLIDER and GLIDER+VF, 23 landmarks were randomly selected. In Hop ID and Hop ID+VF, the peripheral landmark selection of 30 landmarks was implemented. In GLDR and GLDR+VF, 10-sampling was used to select landmarks. The flooding mechanism in GLIDER, Hop ID, and GLDR was not implemented because it required a great deal of route overhead and suffered from the broadcasting storm problem <ref type="bibr" target="#b6">[7]</ref>. Empirical data were obtained by averaging data of 1000 source-destination pairs from 100 networks.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Packet Delivery Rate</head><p>Fig. 5(a) illustrates the simulation results for the packet delivery rate. GLIDER+VF, Hop ID+VF, GLDR+VF, VCap+VF and ABVCap each successfully set a path for every sourcedestination pair. In GLIDER, Hop ID, GLDR, and VCap, the greater the network density, the higher the packet delivery rate because more dead-end nodes exist in a network with lower density due to the occurrence of more holes. GLIDER and VCap each have a lower packet delivery rate than Hop ID and GLDR, which results from the introduction of more dead-end nodes because large cells exist in GLIDER and multiple nodes share a virtual coordinate in VCap. <ref type="figure" target="#fig_4">Fig. 5(b)</ref> illustrates the simulation results for the routing path length. GLIDER+VF, Hop ID+VF, GLDR+VF, and VCap+VF have longer routing paths than GLIDER, Hop ID, GLDR, and VCap, respectively, because many sourcedestination pairs separated by long distances are unreachable in GLIDER, Hop ID, GLDR, and VCap. The differences between Hop ID and Hop ID+VF and between GLDR and GLDR+VF are negligible because Hop ID or GLDR has a high packet delivery rate. Hop ID+VF, GLDR+VF, and VCap+VF each have a shorter routing path in most cases, as compared to ABVCap. By contrast, GLIDER+VF has a longer routing path than ABVCap. This observation results from the fact that GLIDER has a long routing path and a low packet delivery rate. Additionally, the greater is the network density the shorter is the routing path because the progress distance is larger. <ref type="figure" target="#fig_4">Fig. 5(c)</ref>   landmarks. Compared to Hop ID, a forwarding node in VCap has more next hop neighbors because more neighbors, which are addressed by the hop distances to 3 landmarks, share a virtual coordinate. In GLIDER, GLDR, VCap, and ABVCap, the greater the network density, the larger will be the number of next hop neighbors. In addition, because Hop ID and GLDR each have a high packet delivery rate, the differences between Hop ID and Hop ID+VF and between GLDR and GLDR+VF are minor. GLIDER+VF and VCap+VF have smaller numbers of next hop neighbors than GLIDER and VCap, respectively, because a forwarding node in the VirtualFace algorithm usually has only one next hop neighbor. <ref type="figure" target="#fig_4">Fig. 5(d)</ref> illustrates the simulation results for the load imbalance factor. GLIDER has the largest load imbalance factor because many packets are routed to the same node in the boundary of a cell. By contrast, unlike GLIDER and GLDR that route packets toward the landmarks and unlike ABVCap which routes packets toward the axes, VCap and Hop ID each route packets toward the destinations, and have a small load imbalance factor. In addition, the greater the network density, the larger will be the load imbalance factor because of the smaller average load. The differences between Hop ID and Hop ID+VF and between GLDR and GLDR+VF are negligible, because Hop ID and GLDR each have a high packet delivery rate. Compared to GLIDER and VCap, GLIDER+VF and VCap+VF have smaller load imbalance factors, respectively, because of larger average loads. <ref type="figure" target="#fig_4">Fig. 5(e)</ref> illustrates the simulation results for the number of messages broadcast by a node in the construction of virtual coordinate systems, in which messages are broadcast using the technique on trading time <ref type="bibr" target="#b4">[5]</ref>, and messages each travel at approximately the same speed. In Hop ID, GLDR and VCap, each node must obtain the hop distances to all landmarks; Hop ID and VCap have the largest and the smallest numbers of broadcasts due to the largest and the smallest numbers of landmarks, respectively. In GLIDER, each node must obtain the hop distances to all neighboring landmarks. As the network density increases, either the number of landmarks or the number of neighboring landmarks changes slightly, resulting in a negligible difference in the number of broadcasts in GLIDER, Hop ID, GLDR and VCap. By contrast, the greater the network density, the smaller the number of broadcasts in ABVCap because a node is assigned a smaller number of virtual coordinates in a greater density network. The number of broadcasts in GLIDER+VF, Hop ID+VF, GLDR+VF, and VCap+VF are larger than in GLIDER, Hop ID, GLDR, and VCap, respectively, because a node must broadcast 11.59 to 15.4 messages to construct and name virtual faces in networks with densities ranging from 10 to 30.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Routing Path Length</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C. Number of Next Hop Neighbors</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>D. Load Imbalance Factor</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>E. Number of Broadcasts</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>F. Packet Delivery Rate in Networks with Node Failures</head><p>Fig. 5(f) illustrates the simulation results for the packet delivery rate in networks with node failure equal to 10%. The packet delivery rate of each routing protocol degrades due to node failures. In Hop ID and VCap, a node closer to the destination can be a next hop neighbor candidate, and a next hop neighbor candidate can be a next hop neighbor only if it is closest to the destination; therefore, Hop ID and VCap each have few next hop neighbors, but have multiple next hop neighbor candidates. Consequently, node failure has a small impact on the packet delivery rates of Hop ID and VCap. By contrast, GLIDER, GLDR and ABVCap each have few next hop neighbor candidates, and thus have significantly degraded packet delivery rates in networks with node failures. In addition, GLIDER+VF, Hop ID+VF, GLDR+VF, and VCap+VF cannot guarantee packet delivery because the boundaries of some virtual face are disconnected due to node failures.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>VII. CONCLUSION</head><p>Without GPS assistance, the virtual face construction protocol, VFCP, and the virtual face naming protocol, VFNP, are proposed in this paper to construct and name virtual faces, respectively, in a wireless sensor network. VFCP constructs virtual faces with boundaries closely surrounding holes. VFNP names virtual faces by the polar coordinate system, where the radial and angular coordinates of a virtual face denote the position of the virtual face in the network. A VirtualFace algorithm is proposed to route a packet from a dead-end node to a progress node by traversing the boundaries of virtual faces. As a result, virtual-coordinate-based routing protocols augmented with the VirtualFace algorithm guarantee packet delivery, in which the routed packet is only required to carry the radial and angular coordinates of the virtual face with a boundary containing the destination or the dominating node of the destination additionally.</p><p>Simulations show that virtual-coordinate-based routing protocols GLIDER, Hop ID, GLDR, and VCap augmented with the VirtualFace algorithm, denoted by GLIDER+VF, Hop ID+VF, GLDR+VF, and VCap+VF, respectively, have higher packet delivery rates, longer routing paths, larger coordinate assignment costs, and larger routing overheads, as compared to GLIDER, Hop ID, GLDR, and VCap, respectively. In terms of the number of next hop neighbors and the load imbalance factor, the differences between GLIDER and GLIDER+VF, between Hop ID and Hop ID+VF, between GLDR and GLDR+VF, and between VCap and VCap+VF are negligible. As compared to ABVCap, Hop ID+VF, GLDR+VF, and VCap+VF each have a shorter routing path and a lower load imbalance factor, GLDR+VF has a larger number of next hop neighbors, and GLIDER+VF, Hop ID+VF, GLDR+VF, and VCap+VF each have a higher packet delivery rate in networks with node failures.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig. 1 .</head><label>1</label><figDesc>Fig. 1. A wireless sensor network, G, and the triangle-free subnetwork induced by the connected dominating set, G D . Nodes and links in G D are shown in solid circles and lines, respectively; nodes and links in G − G D are shown in dashed circles and lines, respectively. S denotes the specific node. The number in the parenthesis denotes the hop distance to S in G D .</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Fig. 2 .</head><label>2</label><figDesc>Fig. 2. Construction of virtual faces vf 1 , vf 2 , vf 3 , vf 4 , vf 5 , vf 6 , and vf 7 using VFCP.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Definition 8 .</head><label>8</label><figDesc>The pair of numbers a and b is smaller than the pair of numbers c and d, denoted by (a, b) &lt; (c, d), if a &lt; c, or a = c and b &lt; d.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Fig. 4 .</head><label>4</label><figDesc>Fig. 4. Example of VCap augmented with the VirtualFace algorithm. X, Y , and Z denote the landmarks X, Y , and Z in VCap, respectively. The virtual coordinate of a node in VCap is shown in parenthesis.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Fig. 5 .</head><label>5</label><figDesc>Fig. 5. Performance simulation results: (a) packet delivery rate; (b) routing path length; (c) number of next hop neighbors; (d) load imbalance factor; (e) number of broadcasts; (f) packet delivery rate in networks with node failure equal to 10%.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0" validated="false"><head>G D is contained in the boundaries of vf 1 and vf 2 or if two neighboring nodes in G D are contained in the boundaries of vf 1 and vf 2 , respectively. Definition 6. Let u vf be a node in G vf , and let u be a node contained in the boundary of virtual face vf . In G vf , u vf 1 is a u-neighbor of u vf if the boundary of virtual face vf 1</head><label></label><figDesc></figDesc><table>, )) 
96 48 

񮽙 񮽙 

uvf3 

uvf7 

uvf2 
uvf5 

uvf6 

uvf4 

uvf1 

Fig. 3. The virtual face graph, G vf , and the names of nodes using VFNP. 
The first and second entries in the parenthesis denote the radial and angular 
coordinates of the node, respectively. 

neighboring virtual faces if a node in </table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1" validated="false"><head>. According to Definition 5, V vf = {u vf 1 , u vf 2 , u vf 3 , u vf 4 , u vf 5 , u vf 6 , u vf 7 }. vf 1 and vf 7 are neighboring virtual faces because node 25 is contained in the boundaries of vf 1 and vf 7 ; therefore, (u vf 1 , u vf 7 ) ∈ E vf . Additionally, vf 1 and vf 6 are neighboring virtual faces because nodes 3 and 15, contained in the boundaries of vf 1 and vf 6 , respectively, are neighbors in G D ; therefore, (u vf 1 , u vf 6 ) ∈ E vf . According to Definition 6, u vf 2 is a 3- neighbor of u vf 1 in G vf because the boundaries of vf 1 and vf 2 contain node 3 whereas u vf5 is a 4-neighbor of u vf2 in G vf because node 7 contained in the boundary of vf 5 is a neighbor of node 4 contained in the boundary of vf 2 . Let the ID, the angular coordinate, and the radial coordinate of a virtual face, vf , in G D equal the ID, the angular coor- dinate, and the radial coordinate of u vf in G vf , respectively. The radial coordinate of u vf equals the hop distance to the corresponding node of vf p in G vf (u vfp ). Let u be a node contained in the boundary of vf , and let u vf1 , u vf2 , · · · , u vfn be the u-neighbors of u vf in G vf in an increasing order of IDs. If the angular coordinate of u vf equals interval</head><label></label><figDesc></figDesc><table></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2" validated="false"><head>). In addition, if u vf has more than one neighbor with a radial coordinate smaller by 1 in G vf , the angular coordinate is assigned according to the neighbor with the smallest angular coordinate (u vfmin ). If the boundary of vf contains more than one node contained in or having a neighbor contained in the boundary of vf min , the angular coordinate of u vf is assigned according to the node with the smallest sequence number in vf min . VFNP is implemented as follows. Let u be a node in the boundary of virtual face vf . If u vf has a smaller ID than any u-neighbor in G vf , u assigns vf p .id, vf.radial, and vf.angular to vf.id, 0), and the IDs of u-neighbors of u vf . If u receives a NAME SET message containing vf.id and vf.size, u broadcasts the message to the neighbors in the boundary of vf , and assigns vf p .id, vf.radial and vf.angular to vf p .id, vf.radial and vf.angular contained in the message, respectively. If u receives from a node, v, a NAME SET message containing vf 1 .id and vf 1 .size (vf 1 = vf ), u broadcasts the message to the neighbors in the boundary of vf , assigns vf p .id to vf p .id contained in the message, assigns vf.radial to vf 1 .radial + 1, and assigns vf.angular to [a +</head><label></label><figDesc></figDesc><table>, and [0, 2π), respectively, and then 
generates and broadcasts to neighbors a NAME SET message 
containing vf p .id, vf.size, vf.id, vf.radial, vf.angular, 
u.seq(vf </table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3" validated="false"><head>. Assume that vf i .id &lt; vf j .id if i &lt; j. We have vf p = vf 1 , vf 1 .radial = 0, and vf 1 .angular = [0, 2π). Because node 3 is contained in the boundary of vf 1 and u vf 2 is a 3-neighbor of u vf 1 , node 3 generates a NAME SET message containing vf p .id = vf 1 .id, vf 1 .size = 8, vf 1 .id, vf 1 .radial = 0, vf 1 .angular = [0, 2π), 3.seq(vf 1 ) = 2, and the IDs of u vf2 , u vf6 , and u vf7 . After node 4 receives the NAME SET message generated by node 3, node 4 broadcasts the message, sets vf 2 .radial to 1, and sets vf 2 .angular to [(i − 1) · 2π/8 + (j − 1) ·</head><label>Assume</label><figDesc></figDesc><table></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_4" validated="false"><head>1 .angular = [0, 2π), vf 1 .size = 8, u vf 2 has the smallest ID among u vf 2 , u vf 6 , and u vf 7 , and 3.seq(vf 1 ) = 2. Mean- while, node 4 sets vf 7 .radial to 1, and sets vf 7 .angular to [5π/12, π/2) because u vf7 has the largest ID among u vf2 , u vf 6 , and u vf 7 . Similarly, node 12 generates a NAME SET message containing vf p .id = vf 1 .id, vf 1 .size = 8, vf 1 .id, vf</head><label>1</label><figDesc></figDesc><table></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_5" validated="false"><head>vf 1 .size = 8, u vf 2 has a smaller ID than u vf 7 , and 12.seq(vf 1 ) = 1. After node 4 receives the NAME SET message generated by node 12, node 4 broadcasts the message and updates vf 2 .angular to [0, π/8), because (1, [0, π/8)) &lt; (1, [π/4, π/3)) according to Definitions 7 and 8. Meanwhile, node 4 updates vf 7 .angular to [π/8, π/4). In addition, because u vf 1 , u vf 5 and u vf 7 are 4-neighbors of u vf2 , node 4 generates a NAME SET mes- sage containing vf p .id = vf 1 .id, vf 2 .size = 4, vf 2 .id, vf 2 .radial = 1, vf 2 .angular = [0, π/8), 4.seq(vf 2 ) = 1, and the IDs of u vf 1 , u vf 5 , and u vf 7 . After node 7 receives the NAME SET message generated by node 4, node 7 sets vf 5 .radial to 2, and sets vf 5 .angular to [</head><label></label><figDesc></figDesc><table></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_6" validated="false"><head>, b), and equals 0 otherwise. The radial distance from vf 1 to vf 2 , denoted by dist rad (vf 1 , vf 2 ), equals |vf 1 .radial − vf 2 .radial| if dist ang (vf 1 , vf 2 ) = 0, and equals vf 1 .radial otherwise. Definition 10. The distance between virtual faces vf 1 and vf 2 , denoted by dist(vf 1 , vf 2 ), is a pair of numbers (dist ang (vf 1 , vf 2 ), dist rad (vf 1 , vf 2 )). vf 1 is said to be closer to virtual face vf 3 than vf 2 if dist(vf 1 , vf 3 ) &lt; dist(vf 2 , vf 3 ). Example 5. Let the names of virtual faces vf 2 , vf 3 , vf 5 , and vf 7 be (1, [0, π/8)), (1, [3π/4, π)), (2, [π/96, π/48)), and (1, [π/8, π/4)), respectively. According to Definition 9, dist ang (vf 2 , vf 3 ) = 5π/8+1, dist ang (vf 5 , vf 3 ) = 35π/48+ 1, and dist ang (vf 7 , vf 3 ) = π/2 + 1; dist rad (vf 2 , vf 3 ) = 1, dist rad (vf 5 , vf 3 ) = 2, and dist rad (vf 7 , vf 3 ) = 1. Accord- ing to Definition 10, dist(vf 7 , vf 3 ) &lt; dist(vf 2 , vf 3 ) and dist(vf 7 , vf 3 ) &lt; dist(vf 5 , vf 3 ).</head><label></label><figDesc></figDesc><table></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_7" validated="false"><head>vf . This implies that vf 1 .angular &lt; vf 2 .angular, vf 2 .angular &lt; vf 1 .angular, or vf 1 .angular = vf 2 .angular. The last case holds only if v 1 = v 2 and the ID of u vf 1 equals to that of u vf 2 , which is impossible because vf 1 .id = vf 2 .id. Theorem 1. For any two virtual faces vf 1 and vf 2 , one of the following conditions is satisfied. (1) vf 1 .angular &lt; vf 2 .angular, (2) vf 2 .angular &lt; vf 1 .angular, (3) vf 1 .angular ⊂ vf 2 .angular, (4) vf 2 .angular ⊂ vf 1 .angular, and (5) vf 1 .angular = vf 2 .angular. Proof: Three cases need to be discussed: c1) vf 1 .radial = vf 2 .radial; c2) vf 1 .radial &lt; vf 2 .radial; c3) vf 1 .radial &gt; vf 2 .radial. The proof of c3 is omitted due to its similarity with that of c2. For c1, vf 1 .angular &lt; vf 2 .angular or vf 2 .angular &lt; vf 1 .angular according to Lemma 2. For c2, a virtual face, vf 3 , exists such that vf 3 .radial = vf 1 .radial and vf 2 .angular ⊆ vf 3 .angular according to Lemma 1. If vf 3 = vf 1 , vf 1 .angular &lt; vf 2 .angular or vf 2 .angular &lt; vf 1 .angular according to Lemma 2. If vf 3 = vf 1 , vf 2 .angular ⊆ vf 1 .angular. Lemma 3. Let vf 1 and vf 2 be two virtual faces. If vf 2 .angular ⊂ vf 1 .angular, then vf 2 .radial &gt; vf 1 .radial. Proof: According to Lemma 2, vf 1 .radial = vf 2 .radial. Assume that vf 1 .radial &gt; vf 2 .radial. According to Lemma 1, there exists a virtual face, vf 3 , such that vf 3 .radial = vf 2 .radial and vf 1 .angular ⊆ vf 3 .angular. It implies vf 2 .angular ⊂ vf 3 .angular. According to Lemma 2, vf 2 .radial = vf 3 .radial, constituting a contradiction. Lemma 4. Let vf 1 and vf 2 be two virtual faces with vf 1 .radial &lt; vf 2 .radial and vf 2 .angular ⊆ vf 1 .angular. Then, there exists a virtual face, vf 3 , such that vf 3 .radial = vf 2 .radial − 1 and vf 2 .angular ⊆ vf 3 .angular ⊆ vf 1 .angular, and there exists a virtual face, vf 4 , such that vf 4 .radial = vf 1 .radial + 1 and vf 2 .angular ⊆ vf 4 .angular ⊆ vf 1 .angular.</head><label></label><figDesc></figDesc><table></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_8" validated="false"><head></head><label></label><figDesc>illustrates the simulation results for the number of next hop neighbors. In Hop ID and VCap, a node only forwards a packet to the neighbor closest to the destination; therefore, Hop ID and VCap have smaller numbers of next hop neighbors than GLIDER, GLDR, and ABVCap. In Hop ID, most forwarding nodes have only one next hop neighbor because a node is addressed by the hop distances to 30</figDesc><table>8 

10 
15 
20 
25 
30 
Network Density 

0 

20 

40 

60 

80 

100 

Packet Delivery Rate (%) 

GLIDER 
Hop ID 
GLDR 
VCap 
ABVCap 

GLIDER+VF 
Hop ID+VF 
GLDR+VF 
VCap+VF 

(a) 

10 
15 
20 
25 
30 
Network Density 

15 

20 

25 

30 

Routing Path Length 

GLIDER 
Hop ID 
GLDR 
VCap 
ABVCap 

GLIDER+VF 
Hop ID+VF 
GLDR+VF 
VCap+VF 

(b) 

10 
15 
20 
25 
30 
Network Density 

0 

1 

2 

3 

4 

5 

Number of Next Hop Neighbors 

GLIDER 
Hop ID 
GLDR 
VCap 
ABVCap 

GLIDER+VF 
Hop ID+VF 
GLDR+VF 
VCap+VF 

(c) 

10 
15 
20 
25 
30 
Network Density 

0 

10 

20 

30 

40 

50 

Load Imbalance Factor 

GLIDER 
Hop ID 
GLDR 
VCap 
ABVCap 

GLIDER+VF 
Hop ID+VF 
GLDR+VF 
VCap+VF 

(d) 

10 
15 
20 
25 
30 
Network Density 

0 

10 

20 

30 

40 

50 

60 

Number of Broadcasts 

GLIDER 
Hop ID 
GLDR 
VCap 
ABVCap 

GLIDER+VF 
Hop ID+VF 
GLDR+VF 
VCap+VF 

(e) 

10 
15 
20 
25 
30 
Network Density 

0 

20 

40 

60 

80 

100 

Packet Delivery Rate (%) 

GLIDER 
Hop ID 
GLDR 
VCap 
ABVCap 

GLIDER+VF 
Hop ID+VF 
GLDR+VF 
VCap+VF 

</table></figure>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">MAP: medial axis based geometric routing in sensor networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Bruck</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Gao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Jiang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM MOBICOM</title>
		<imprint>
			<date type="published" when="2005" />
			<biblScope unit="page" from="88" to="102" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Axis-based virtual coordinate assignment protocol and delivery-guaranteed routing protocol in wireless sensor networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">J</forename><surname>Tsai</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><forename type="middle">Y</forename><surname>Yang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">Q</forename><surname>Huang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE INFOCOM</title>
		<imprint>
			<date type="published" when="2007" />
			<biblScope unit="page" from="2234" to="2242" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">GLIDER: gradient landmark-based distributed routing for sensor networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Q</forename><surname>Fang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Gao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><forename type="middle">J</forename><surname>Guibas</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><forename type="middle">D</forename><surname>Silva</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Zhang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE INFOCOM</title>
		<imprint>
			<date type="published" when="2005" />
			<biblScope unit="page" from="339" to="350" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Landmark selection and greedy landmark-descent routing for sensor networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Nguyen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Milosavljevic</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Q</forename><surname>Fang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Gao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><forename type="middle">J</forename><surname>Guibas</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE INFOCOM</title>
		<imprint>
			<date type="published" when="2007" />
			<biblScope unit="page" from="661" to="669" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">GPS free coordinate assignment and routing in wireless sensor networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Caruso</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Chessa</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>De</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Urpi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE INFOCOM</title>
		<imprint>
			<date type="published" when="2005" />
			<biblScope unit="page" from="150" to="160" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Hop ID: a virtual coordinate based routing for sparse mobile ad hoc networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Zhao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Q</forename><surname>Zhang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Mobile Computing</title>
		<imprint>
			<biblScope unit="volume">6</biblScope>
			<biblScope unit="page" from="1075" to="1089" />
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">The broadcast storm problem in a mobile ad hoc network</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">Y</forename><surname>Ni</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><forename type="middle">C</forename><surname>Tseng</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><forename type="middle">S</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">P</forename><surname>Sheu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM MOBICOM</title>
		<imprint>
			<date type="published" when="2002" />
			<biblScope unit="page" from="151" to="162" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">GPSR: greedy perimeter stateless routing for wireless networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Karp</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><forename type="middle">T</forename><surname>Kung</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM MOBICOM</title>
		<imprint>
			<date type="published" when="2000" />
			<biblScope unit="page" from="243" to="254" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Routing with guaranteed delivery in ad hoc wireless networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Bose</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Morin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Stojmenovic</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Urrutia</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Wireless networks</title>
		<imprint>
			<biblScope unit="volume">7</biblScope>
			<biblScope unit="page" from="609" to="616" />
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Geometric spanners for routing in mobile networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Gao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><forename type="middle">J</forename><surname>Guibas</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Hershberger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Zhu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Journal on Selected Areas in Communications</title>
		<imprint>
			<biblScope unit="volume">23</biblScope>
			<biblScope unit="page" from="174" to="185" />
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Face tracing based geographic routing in nonplanar wireless networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Jiang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Luo</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE INFOCOM</title>
		<imprint>
			<date type="published" when="2007" />
			<biblScope unit="page" from="2243" to="2251" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">An extended localized algorithm for connected dominating set formation in ad hoc wireless networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Dai</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Wu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Parallel and Distributed Systems</title>
		<imprint>
			<biblScope unit="volume">15</biblScope>
			<biblScope unit="page" from="908" to="920" />
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">GEM: graph embedding for routing and datacentric storage in sensor networks without geographic information</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Newsome</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Song</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM SenSys</title>
		<imprint>
			<date type="published" when="2003" />
			<biblScope unit="page" from="76" to="88" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
