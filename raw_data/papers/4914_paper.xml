<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2019-03-26T17:06+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">BotMiner: Clustering Analysis of Network Traffic for Protocol-and Structure-Independent Botnet Detection</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Guofei</forename><surname>Gu</surname></persName>
							<email>guofei@cc.gatech.edu</email>
							<affiliation key="aff0">
								<orgName type="department">College of Computing</orgName>
								<orgName type="institution">Georgia Institute of Technology ‡ Damballa, Inc. Atlanta</orgName>
								<address>
									<postCode>30308</postCode>
									<region>GA</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Roberto</forename><surname>Perdisci</surname></persName>
							<email>perdisci@damballa.com</email>
							<affiliation key="aff0">
								<orgName type="department">College of Computing</orgName>
								<orgName type="institution">Georgia Institute of Technology ‡ Damballa, Inc. Atlanta</orgName>
								<address>
									<postCode>30308</postCode>
									<region>GA</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Junjie</forename><surname>Zhang</surname></persName>
							<email>jjzhang@cc.gatech.edu</email>
							<affiliation key="aff0">
								<orgName type="department">College of Computing</orgName>
								<orgName type="institution">Georgia Institute of Technology ‡ Damballa, Inc. Atlanta</orgName>
								<address>
									<postCode>30308</postCode>
									<region>GA</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wenke</forename><surname>Lee</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">College of Computing</orgName>
								<orgName type="institution">Georgia Institute of Technology ‡ Damballa, Inc. Atlanta</orgName>
								<address>
									<postCode>30308</postCode>
									<region>GA</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">BotMiner: Clustering Analysis of Network Traffic for Protocol-and Structure-Independent Botnet Detection</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Botnets are now the key platform for many Internet attacks, such as spam, distributed denial-of-service (DDoS), identity theft, and phishing. Most of the current botnet detection approaches work only on specific botnet command and control (C&amp;C) protocols (e.g., IRC) and structures (e.g., centralized), and can become ineffective as botnets change their C&amp;C techniques. In this paper, we present a general detection framework that is independent of botnet C&amp;C protocol and structure, and requires no a priori knowledge of botnets (such as captured bot binaries and hence the botnet signatures, and C&amp;C server names/addresses). We start from the definition and essential properties of botnets. We define a botnet as a coordinated group of malware instances that are controlled via C&amp;C communication channels. The essential properties of a botnet are that the bots communicate with some C&amp;C servers/peers, perform malicious activities, and do so in a similar or correlated way. Accordingly, our detection framework clusters similar communication traffic and similar malicious traffic, and performs cross cluster correlation to identify the hosts that share both similar communication patterns and similar malicious activity patterns. These hosts are thus bots in the monitored network. We have implemented our BotMiner prototype system and evaluated it using many real network traces. The results show that it can detect real-world botnets (IRC-based, HTTP-based, and P2P botnets including Nugache and Storm worm), and has a very low false positive rate.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Botnets are becoming one of the most serious threats to Internet security. A botnet is a network of compromised machines under the influence of malware (bot) code. The botnet is commandeered by a "botmaster" and utilized as "resource" or "platform" for attacks such as distributed denial-of-service (DDoS) attacks, and fraudulent activities such as spam, phishing, identity theft, and information exfiltration.</p><p>In order for a botmaster to command a botnet, there needs to be a command and control (C&amp;C) channel through which bots receive commands and coordinate attacks and fraudulent activities. The C&amp;C channel is the means by which individual bots form a botnet. Centralized C&amp;C structures using the Internet Relay Chat (IRC) protocol have been utilized by botmasters for a long time. In this architecture, each bot logs into an IRC channel, and seeks commands from the botmaster. Even today, many botnets are still designed this way. Quite a few botnets, though, have begun to use other protocols such as HTTP <ref type="bibr" target="#b7">[8,</ref><ref type="bibr" target="#b13">14,</ref><ref type="bibr" target="#b24">24,</ref><ref type="bibr" target="#b39">39]</ref>, probably because HTTPbased C&amp;C communications are more stealthy given that Web traffic is generally allowed in most networks. Although centralized C&amp;C structures are effective, they suffer from the single-point-of-failure problem. For example, if the IRC channel (or the Web server) is taken down due to detection and response efforts, the botnet loses its C&amp;C structure and becomes a collection of isolated compromised machines. Recently, botmasters began using peer-to-peer (P2P) communication to avoid this weakness. For example, Nugache <ref type="bibr" target="#b28">[28]</ref> and Storm worm <ref type="bibr" target="#b17">[18,</ref><ref type="bibr" target="#b23">23]</ref> (a.k.a. Peacomm) are two representative P2P botnets. Storm, in particular, distinguishes itself as having infected a large number of computers on the Internet and effectively becoming one of the "world's top super-computers" <ref type="bibr" target="#b27">[27]</ref> for the botmasters.</p><p>Researchers have proposed a few approaches <ref type="bibr" target="#b6">[7,</ref><ref type="bibr" target="#b16">17,</ref><ref type="bibr" target="#b18">19,</ref><ref type="bibr" target="#b19">20,</ref><ref type="bibr" target="#b26">26,</ref><ref type="bibr" target="#b29">29,</ref><ref type="bibr" target="#b35">35,</ref><ref type="bibr" target="#b40">40]</ref> to detect the existence of botnets in monitored networks. Almost all of these approaches are designed for detecting botnets that use IRC or HTTP based C&amp;C <ref type="bibr" target="#b6">[7,</ref><ref type="bibr" target="#b16">17,</ref><ref type="bibr" target="#b26">26,</ref><ref type="bibr" target="#b29">29,</ref><ref type="bibr" target="#b40">40]</ref>. For example, Rishi <ref type="bibr" target="#b16">[17]</ref> is designed to detect IRC botnets using known IRC bot nickname patterns as signatures. In <ref type="bibr" target="#b26">[26,</ref><ref type="bibr" target="#b40">40]</ref>, network flows are clustered and classified according to IRC-like traffic patterns. Another more recent system, BotSniffer, <ref type="bibr" target="#b19">[20]</ref> is designed mainly for detecting C&amp;C activities with centralized servers (with protocols such as IRC and HTTP 1 ). One exception is perhaps BotHunter <ref type="bibr" target="#b18">[19]</ref>, which is capable of detecting bots regardless of the C&amp;C structure and network protocol as long as the bot behavior follows a pre-defined infection life cycle dialog model.</p><p>However, botnets are evolving and can be quite flexible. We have witnessed that the protocols used for C&amp;C evolved from IRC to others (e.g., HTTP <ref type="bibr" target="#b7">[8,</ref><ref type="bibr" target="#b13">14,</ref><ref type="bibr" target="#b24">24,</ref><ref type="bibr" target="#b39">39]</ref>), and the structure moved from centralized to distributed (e.g., using P2P <ref type="bibr" target="#b17">[18,</ref><ref type="bibr" target="#b28">28]</ref>). Furthermore, a botnet during its lifetime can also change its C&amp;C server address frequently, e.g., using fast-flux service networks <ref type="bibr" target="#b22">[22]</ref>. Thus, the aforementioned detection approaches designed for IRC or HTTP based botnets may become ineffective against the recent/new botnets. Even BotHunter may fail as soon as botnets change their infection model(s).</p><p>Therefore, we need to develop a next generation botnet detection system, which should be independent of the C&amp;C protocol, structure, and infection model of botnets, and be resilient to the change of C&amp;C server addresses. In addition, it should require no a priori knowledge of specific botnets (such as captured bot binaries and hence the botnet signatures, and C&amp;C server names/addresses).</p><p>In order to design such a general detection system that can resist evolution and changes in botnet C&amp;C techniques, we need to study the intrinsic botnet communication and activity characteristics that remain detectable with the proper detection features and algorithms. We thus start with the definition and essential properties of a botnet. We define a botnet as:</p><p>"A coordinated group of malware instances that are controlled via C&amp;C channels".</p><p>The term "malware" means these bots are used to perform malicious activities. According to <ref type="bibr" target="#b44">[44]</ref>, about 53% of botnet activity commands observed in thousands of real-world IRC-based botnets are related to scan (for the purpose of spreading or DDoS 2 ), and about 14.4% are related to binary downloading (for the purpose of malware updating). In addition, most of HTTP-based and P2P-based botnets are used to send spam <ref type="bibr" target="#b17">[18,</ref><ref type="bibr" target="#b39">39]</ref>. The term "controlled" means these bots have to contact their C&amp;C servers to obtain commands to carry out activities, e.g., to scan. In other words, there should be communication between bots and C&amp;C servers/peers (which can be centralized or distributed). Finally, the term "coordinated group" means that multiple (at least two) bots within the same botnet will perform similar or correlated C&amp;C communications and malicious activi-1 BotSniffer could be extended to support other protocol based C&amp;C, if the corresponding protocol matchers are added. <ref type="bibr" target="#b1">2</ref> For spreading, the scans usually span many different hosts (within a subnet) indicated by the botnet command. For DDoS, usually there are numerous connection attempts to a specific host. In both cases, the traffic can be considered as scanning related.</p><p>ties. If the botmaster commands each bot individually with a different command/channel, the bots are nothing but some isolated/unrelated infections. That is, they do not function as a botnet according to our definition and are out of the scope of this work <ref type="bibr" target="#b2">3</ref> .</p><p>We propose a general detection framework that is based on these essential properties of botnets. This framework monitors both who is talking to whom that may suggest C&amp;C communication activities and who is doing what that may suggest malicious activities, and finds a coordinated group pattern in both kinds of activities. More specifically, our detection framework clusters similar communication activities in the C-plane (C&amp;C communication traffic), clusters similar malicious activities in the A-plane (activity traffic), and performs cross cluster correlation to identify the hosts that share both similar communication patterns and similar malicious activity patterns. These hosts, according to the botnet definition and properties discussed above, are bots in the monitored network. This paper makes the following main contributions.</p><p>• We develop a novel general botnet detection framework that is grounded on the definition and essential properties of botnets. Our detection framework is thus independent of botnet C&amp;C protocol and structure, and requires no a priori knowledge (e.g., C&amp;C addresses/signatures) of specific botnets. It can detect both centralized (e.g., IRC,HTTP) and current (and possibly future) P2P based botnets.</p><p>• We define a new "aggregated communication flow" (C-flow) record data structure to store aggregated traffic statistics, and design a new layered clustering scheme with a set of traffic features measured on the C-flow records. Our clustering scheme can accurately and efficiently group similar C&amp;C traffic patterns.</p><p>• We build a BotMiner prototype system based on our general detection framework, and evaluate it with multiple real-world network traces including normal traffic and several real-world botnet traces that contain IRC, HTTP and P2P-based botnet traffic (including Nugache and Storm). The results show that BotMiner has a high detection rate and a low false positive rate.</p><p>The rest of the paper is organized as follows. In Section 2, we describe the assumptions, objectives, architecture of our BotMiner detection framework, and its detection algorithms and implementation. In Section 3, we describe our evaluation on various real-world network traces. In Section 4, we discuss current limitations and possible solutions. We review the related work in Section 5 and conclude in Section 6.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">BotMiner Detection Framework and Implementation</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Problem Statement and Assumptions</head><p>According to the definition given above, a botnet is characterized by both a C&amp;C communication channel (from which the botmaster's commands are received) and malicious activities (when commands are executed). Some other forms of malware (e.g., worms) may perform malicious activities, but they do not connect to a C&amp;C channel. On the other hand, some normal applications (e.g., IRC clients and normal P2P file sharing software) may show communication patterns similar to a botnet's C&amp;C channel, but they do not perform malicious activities. <ref type="figure">Figure 1</ref> illustrates two typical botnet structures, namely centralized and P2P. The bots receive commands from the botmaster using a push or pull mechanism <ref type="bibr" target="#b19">[20]</ref> and execute the assigned tasks.</p><p>The operation of a centralized botnet is relatively easy and intuitive <ref type="bibr" target="#b19">[20]</ref>, whereas this is not necessarily true for P2P botnets. Therefore, here we briefly illustrate an example of a typical P2P-based botnet, namely Storm worm <ref type="bibr" target="#b17">[18,</ref><ref type="bibr" target="#b23">23]</ref>. In order to issue commands to the bots, the botmaster publishes/shares command files over the P2P network, along with specific search keys that can be used by the bots to find the published command files. Storm bots utilize a pull mechanism to receive the commands. Specifically, each bot frequently contacts its neighbor peers searching for specific keys in order to locate the related command files. In addition to search operations, the bots also frequently communicate with their peers and send keep-alive messages.</p><p>In both centralized and P2P structures, bots within the same botnet are likely to behave similarly in terms of communication patterns. This is largely due to the fact that bots are non-human driven, pre-programmed to perform the same routine C&amp;C logic/communication as coordinated by the same botmaster. In the centralized structure, even if the address of the C&amp;C server may change frequently (e.g., by frequently changing the A record of a Dynamic DNS domain name), the C&amp;C communication patterns remain unchanged. In the case of P2P-based botnets, the peer communications (e.g., to search for commands or to send keep-alive messages) follow a similar pattern for all the bots in the botnet, although each bot may have a different set of neighbor peers and may communicate on different ports.</p><p>Regardless of the specific structure of the botnet (centralized or P2P), members of the same botnet (i.e., the bots) are coordinated through the C&amp;C channel. In general, a botnet is different from a set of isolated individual malware instances, in which each different instance is used for a totally different purpose. Although in an extreme case a botnet can be configured to degenerate into a group of isolated hosts, this is not the common case. In this paper, we focus on the most typical and useful situation in which bots in the same botnet perform similar/coordinated activities. To the best of our knowledge, this holds true for most of the existing botnets observed in the wild.</p><p>To summarize, we assume that bots within the same botnet will be characterized by similar malicious activities, as well as similar C&amp;C communication patterns.</p><p>Our assumption holds even in the case when the botmaster chooses to divide a botnet into sub-botnets, for example by assigning different tasks to different sets of bots. In this case, each sub-botnet will be characterized by similar malicious activities and C&amp;C communications patterns, and our goal is to detect each sub-botnet. In Section 4 we provide a detailed discussion on possible evasive botnets that may violate our assumptions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Objectives</head><p>The objective of BotMiner is to detect groups of compromised machines within a monitored network that are part of a botnet. We do so by passively analyzing network traffic in the monitored network.</p><p>Note that we do not aim to detect botnets at the very moment when victim machines are compromised and infected with malware (bot) code. In many cases these events may not be observable by passively monitoring network traffic. For example, an already infected laptop may be carried in and connected to the monitored network, or a user may click on a malicious email attachment and get infected. In this paper we are not concerned with the way internal hosts become infected (e.g., by malicious email attachments, remote exploiting, and Web drive-by download). We focus on the detection of groups of already compromised machines inside the monitored network that are part of a botnet.</p><p>Our detection approach meets several goals:</p><p>• it is independent of the protocol and structure used for communicating with the botmaster (the C&amp;C channel) or peers, and is resistant to changes in the location of the C&amp;C server(s).</p><p>• it is independent of the content of the C&amp;C communication. That is, we do not inspect the content of the C&amp;C communication itself, because C&amp;C could be encrypted or use a customized (obscure) protocol. • it generates a low number of false positives and false negatives.</p><p>• the analysis of network traffic employs a reasonable amount of resources and time, making detection relatively efficient. <ref type="figure" target="#fig_0">Figure 2</ref> shows the architecture of our BotMiner detection system, which consists of five main components: C-plane monitor, A-plane monitor, C-plane clustering module, A-plane clustering module, and cross-plane correlator.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Architecture of BotMiner Detection Framework</head><p>The two traffic monitors in C-plane and A-plane can be deployed at the edge of the network examining traffic between internal and external networks, similar to BotHunter <ref type="bibr" target="#b18">[19]</ref> and BotSniffer <ref type="bibr" target="#b19">[20]</ref>  <ref type="bibr" target="#b3">4</ref> . They run in parallel and monitor the network traffic. The C-plane monitor is responsible for logging network flows in a format suitable for efficient storage and further analysis, and the A-plane monitor is responsible for detecting suspicious activities (e.g., scanning, spamming, and exploit attempts). The C-plane clustering and A-plane clustering components process the logs generated by the C-plane and A-plane monitors, respectively. Both modules extract a number of features from the raw logs and apply clustering algorithms in order to find groups of machines that show very similar communication (in the C-plane) and activity (in the A-plane) patterns. Finally, the crossplane correlator combines the results of the C-plane and A-plane clustering and makes a final decision on which machines are possibly members of a botnet. In an ideal situation, the traffic monitors should be distributed on the Internet, and the monitor logs are reported to a central repository for clustering and cross-plane analysis.</p><p>In our current prototype system, traffic monitors are implemented in C for the purpose of efficiency (working on real-time network traffic). The clustering and correlation analysis components are implemented mainly in Java and R (http://www.r-project.org/), and they work offline on logs generated from the monitors.</p><p>The following sections present the details of the design and implementation of each component of the detection framework.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.4">Traffic Monitors</head><p>C-plane Monitor. The C-plane monitor captures network flows and records information on who is talking to whom. Many network routers support the logging of network flows, e.g., Cisco (www.cisco.com) and Juniper (www.juniper.net) routers. Open source solutions like Argus (Audit Record Generation and Utilization System, http://www.qosient.com/argus) are also available. We adapted an efficient network flow capture tool developed at our research lab, i.e., fcapture 5 , which is based on the Judy library (http://judy. sourceforge.net/). Currently, we limit our interest to TCP and UDP flows. Each flow record contains the following information: time, duration, source IP, source port, destination IP, destination port, and the number of packets and bytes transfered in both directions. The main advantage of our tool is that it works very efficiently on high speed networks (very low packet loss ratio on a network with 300Mbps traffic), and can generate very compact flow records that comply with the requirement for further processing by the C-plain clustering module. As a comparison, our flow capturing tool generates compressed records ranging from 200MB to 1GB per day from the traffic in our academic network, whereas Argus generates around 36GB of compressed binary flow records per day on average (without recording any payload information). Our tool makes the storage of several weeks or even months of flow data feasible.</p><p>A-plane Monitor. The A-plane monitor logs information on who is doing what. It analyzes the outbound traffic through the monitored network and is capable of detecting several malicious activities that the internal hosts may perform. For example, the A-plane monitor is able to detect scanning activities (which may be used for malware propagation or DoS attacks), spamming, binary downloading (possibly used for malware update), and exploit attempts (used for malware propagation or targeted attacks). These are the most common and "useful" activities a botmaster may command his bots to perform <ref type="bibr" target="#b8">[9,</ref><ref type="bibr" target="#b33">33,</ref><ref type="bibr" target="#b44">44]</ref>. Our A-plane monitor is built based on Snort <ref type="bibr" target="#b36">[36]</ref>, an open-source intrusion detection tool, for the purpose of convenience. We adapted existing intrusion detection techniques and implemented them as Snort pre-processor plug-ins or signatures. For scan detection we adapted SCADE (Statistical sCan Anomaly Detection Engine), which is a part of BotHunter <ref type="bibr" target="#b18">[19]</ref> and available at <ref type="bibr" target="#b10">[11]</ref>. Specifically, we mainly use two anomaly detection modules: the abnormally-high scan rate and weighted failed connection rate. We use an OR combination rule, so that an event detected by either of the two modules will trigger an alert. In order to detect spam-related activities, we developed a new Snort plug-in. We focused on detecting anomalous amounts of DNS queries for MX records from the same source IP and the amount of SMTP connections initiated by the same source to mail servers outside the monitored network. Normal clients are unlikely to act as SMTP servers and therefore should rely on the internal SMTP server for sending emails. Use of many distinct external SMTP servers for many times by the same internal host is an indication of possible malicious activities. For the detection of PE (Portable Executable) binary downloading we used an approach similar to PEHunter <ref type="bibr" target="#b42">[42]</ref> and BotHunter's egg download detection method <ref type="bibr" target="#b18">[19]</ref>. One can also use specific exploit rules in BotHunter to detect internal hosts that attempt to exploit external machines. Other state-ofthe-art detection techniques can be easily added to our A-plane monitoring to expand its ability to detect typical botnet-related malicious activities.</p><p>It is important to note that A-plane monitoring alone is not sufficient for botnet detection purpose. First of all, these A-plane activities are not exclusively used in botnets. Second, because of our relatively loose design of A-plane monitor (for example, we will generate a log whenever there is a PE binary downloading in the network regardless of whether the binary is malicious or not), relying on only the logs from these activities will generate a lot of false positives. This is why we need to further perform A-plane clustering analysis as discussed shortly in Section 2.6.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.5">C-plane Clustering</head><p>C-plane clustering is responsible for reading the logs generated by the C-plane monitor and finding clusters of machines that share similar communication patterns. <ref type="figure" target="#fig_1">Figure 3</ref> shows the architecture of the C-plane clustering.</p><p>First of all, we filter out irrelevant (or uninteresting) traffic flows. This is done in two steps: basicfiltering and white-listing. It is worth noting that these two steps are not critical for the proper functioning of the C-plane clustering module. Nonetheless, they are useful for reducing the traffic workload and making the actual clustering process more efficient. In the basic-filtering step, we filter out all the flows that are not directed from internal hosts to external hosts. Therefore, we ignore the flows related to communications between internal hosts 6 and flows initiated from external hosts towards internal hosts (filter rule 1, denoted as F1). We also filter out flows that are not completely established (filter rule 2,</p><formula xml:id="formula_0">Whitee Listingg (F3)) Basicc Filteringg (F1,F2)) Aggregationn (C-Flow))</formula><p>Coarse-grainn Clusteringg denoted as F2), i.e., those flows that only contain oneway traffic. These flows are mainly caused by scanning activity (e.g., when a host sends SYN packets without completing the TCP hand-shake). In white-list filtering, we filter out those flows whose destinations are well known as legitimate servers (e.g., Google, Yahoo!) that will unlikely host botnet C&amp;C servers. This filter rule is denoted as F3. In our current evaluation, the white list is based on the US top 100 and global top 100 most popular websites from Alexa.com.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Refinedd</head><p>After basic-filtering and white-listing, we further reduce the traffic workload by aggregating related flows into communication flows (C-flows) as follows. Given an epoch E (typically one day), all m TCP/UDP flows that share the same protocol (TCP or UDP), source IP, destination IP and port, are aggregated into the same C-flow c i = {f j } j=1..m , where each f j is a single TCP/UDP flow. Basically, the set {c i } i=1..n of all the n C-flows observed during E tells us "who was talking to whom", during that epoch.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.5.1">Vector Representation of C-flows</head><p>The objective of C-plane clustering is to group hosts that share similar communication flows. This can be accomplished by clustering the C-flows. In order to apply clustering algorithms to C-flows we first need to translate them in a suitable vector representation. We extract a number of statistical features from each C-flow c i , and translate them into d-dimensional pattern vectors p i ∈ R d . We can describe this task as a projection function F : C-plane → R d . The projection function F is defined as follows. Given a C-flow c i , we compute the discrete sample distribution of (currently) four random variables:</p><p>1. the number of flows per hour (fph). fph is computed by counting the number of TCP/IP flows in c i that are present for each hour of the epoch E.</p><p>2. the number of packets per flow (ppf). ppf is computed by summing the total number of packets sent within each TCP/UDP flow in c i .</p><p>3. the average number of bytes per packets (bpp). For each TCP/UDP flow f j ∈ c i we divide the overall number of bytes transfered within f j by the number of packets sent within f j .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">the average number of bytes per second (bps). bps</head><p>is computed as the total number of bytes transfered within each f j ∈ c i divided by the duration of f j .</p><p>An example of the results of this process is shown in <ref type="figure">Figure 4</ref>, where we select a random client from a real network flow log (we consider a one-day epoch) and illustrate the features extracted from its visits to Google. Given the discrete sample distribution of each of these four random variables, we compute an approximate version of it by means of a binning technique. For example, in order to approximate the distribution of fph we divide the x-axis in 13 intervals</p><formula xml:id="formula_1">as [0, k 1 ], (k 1 , k 2 ], ..., (k 12 , ∞)</formula><p>. The values k 1 , .., k 12 are computed as follows. First, we compute the overall discrete sample distribution of f ph considering all the C-flows in the traffic for an epoch E. Then, we compute the quantiles 7 q 5% , q 10% , q 15% , q 20% , q 25% , q 30% , q 40% , q 50% , q 60% , q 70% , q 80% , q 90% , of the obtained distribution, and we set k 1 = q 5% , k 2 = q 10% , k 3 = q 15% , etc. Now, for each C-flow we can describe its fph (approximate) distribution as a vector of 13 elements, where each element i represents the number of times fph assumed a value within the corresponding interval (k i−1 , k i ]. We also apply the same algorithm for ppf, bpp, and bps, and therefore we map each C-flow c i into a pattern vector p i of d = 52 elements. <ref type="figure">Figure  5</ref> shows the scaled visiting pattern extracted form the same C-flow shown in <ref type="figure">Figure 4</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.5.2">Two-step Clustering</head><p>Since bots belonging to the same botnet share similar behavior (from both the communication and activity points of view) as we discussed before, our objective is to look for groups of C-flows that are similar to each other. Intuitively, pattern vectors that are close to each other in R d represent C-flows with similar communication patterns in the C-plane. For example, suppose two bots of the same botnet connect to two different <ref type="bibr" target="#b6">7</ref> The quantile q l% of a random variable X is the value q for which P (X &lt; q) = l%. C&amp;C servers (because some botnets use multiple C&amp;C servers). Although the connections from both bots to the C&amp;C servers will be in different C-flows because of different source/destination pairs, their C&amp;C traffic characteristics should be similar. That is, in R d , these C-flows should be found as being very similar. In order to find groups of hosts that share similar communication patterns, we apply clustering techniques on the dataset</p><formula xml:id="formula_2">D = { p i = F (c i )} i=1.</formula><p>.n of the pattern vector representations of C-flows. Clustering techniques perform unsupervised learning. Typically, they aim at finding meaningful groups of data points in a given feature space F. The definition of "meaningful clusters" is applicationdependent. Generally speaking, the goal is to group the data into clusters that are both compact and well separated from each other, according to a suitable similarity metric defined in the feature space F <ref type="bibr" target="#b25">[25]</ref>.</p><p>Clustering C-flows is a challenging task because |D|, the cardinality of D, is often large even for moderately large networks, and the dimensionality d of the feature space is also large. Furthermore, because the percentage of machines in a network that are infected by bots is generally small, we need to separate the few botnetrelated C-flows from a large number of benign C-flows. All these make clustering of C-flows very expensive.</p><p>In order to cope with the complexity of clustering of D, we solve the problem in several steps (currently in two steps), as shown in a simple form in <ref type="figure" target="#fig_3">Figure 6</ref>. At the first step, we perform coarse-grained clustering on a reduced feature space R d , with d &lt; d, using a simple (i.e., nonexpensive) clustering algorithm (we will explain below how we perform dimensionality reduction). The results of this first-step clustering is a set {C i } i=1..γ1 of γ 1 relatively large clusters. By doing so we subdivide the dataset D into smaller datasets (the clusters C i ) that contain "clouds" of points that are not too far from each other.</p><p>Afterwards, we refine this result by performing a second-step clustering on each different dataset C i using a simple clustering algorithm on the complete description of the C-flows in R d (i.e., we do not perform dimensionality reduction in the second-step clustering). This second step generates a set of γ 2 smaller and more precise clusters {C i } i=1..γ2 . We implement the first-and second-step clustering using the X-means clustering algorithm <ref type="bibr" target="#b31">[31]</ref>. X-means is an efficient algorithm based on K-means <ref type="bibr" target="#b25">[25]</ref>, a very popular clustering algorithm. Different from K-means, the X-means algorithm does not require the user to choose the number K of final clusters in advance. X-means runs multiple rounds of K-means internally and performs efficient clustering validation using the Bayesian Information Criterion <ref type="bibr" target="#b31">[31]</ref> in order to compute the best value of K. X-means is fast and scales well with respect to the size of the dataset <ref type="bibr" target="#b31">[31]</ref>.</p><p>For the first-step (coarse-grained) clustering, we first reduce the dimensionality of the feature space from d = 52 features (see Section 2.5.1) into d = 8 features by simply computing the mean and variance of the distribution of fph, ppf, bpp, and bps for each C-flow. Then we apply the X-means clustering algorithm on the obtained representation of C-flows to find the coarse-grained clusters {C i } i=1..γ1 . Since the size of the clusters {C i } i=1..γ1 generated by the first-step clustering is relatively small, we can now afford to perform a more expensive analysis on each C i . Thus, for the second-step clustering, we use all the d = 52 available features to represent the C-flows, and we apply the X-means clustering algorithm to refine the results of the first-step clustering.</p><p>Of course, since unsupervised learning is a notoriously difficult task, the results of this two-step clustering algorithm may still be not perfect. As a consequence, the C-flows related to a botnet may be grouped into some distinct clusters, which basically represent sub-botnets. Furthermore, a cluster that contains mostly botnet or benign C-flows may also contain some "noisy" benign or botnet C-flows, respectively. However, we would like to stress the fact that these problems are not necessarily critical and can be alleviated by performing correlation with the results of the activity-plane (A-plane) clustering (see Section 2.7).</p><p>Finally, we need to note that it is possible to bootstrap the clustering from A-plane logs. For example, one may apply clustering to only those hosts that appear in the Aplane logs (i.e., the suspicious activity logs). This may greatly reduce the workload of the C-plane clustering module, if speed is the main concern. Similarly, one may bootstrap the A-plane correlation from C-plane logs, e.g., by monitoring only clients that previously formed communication clusters, or by giving monitoring preference to those clients that demonstrate some persistent C-flow communications (assuming botnets are used for long-term purpose).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.6">A-plane Clustering</head><p>In this stage, we perform two-layer clustering on activity logs. <ref type="figure" target="#fig_4">Figure 7</ref> shows the clustering process in A-plane. For the whole list of clients that perform at least one malicious activity during one day, we first cluster them according to the types of their activities (e.g., scan, spam, and binary downloading). This is the first layer clustering. Then, for each activity type, we further cluster clients according to specific activity features (the second layer clustering). For scan activity, features could include scanning ports, that is, two clients could be clustered together if they are scanning the same ports. Another candidate feature could be the target subnet/distribution, e.g., whether the clients are scanning the same subnet. For spam activity, two clients could be clustered together if their SMTP connection destinations are highly overlapped. This might not be robust when the bots are configured to use different SMTP servers in order to evade detection. One can further consider the spam content if the whole SMTP traffic is captured. To cluster spam content, one may consider the similarity of embedded URLs that are very likely to be similar with the same botnet <ref type="bibr" target="#b43">[43]</ref>, SMTP connection frequency, content entropy, and the normalized compression distance (NCD <ref type="bibr" target="#b4">[5,</ref><ref type="bibr" target="#b41">41]</ref>) on the entire email bodies. For outbound exploit activity, one can cluster two clients if they send the same type of exploit, indicated by the Snort alert SID. For binary downloading activity, two clients could be clustered together if they download similar binaries (because they download from the same URL as indicated in the command from the botmaster). A distance function between two binaries can be any string distance such as DICE used in <ref type="bibr" target="#b19">[20]</ref> 8 .</p><p>In our current implementation, we cluster scanning activities according to the destination scanning ports. For spam activity clustering, because there are very few hosts that show spamming activities in our monitored network, we simply cluster hosts together if they perform spamming (i.e., using only the first layer clustering here). For binary downloading, we configure our binary downloading monitor to capture only the first portion (packet) of the binary for efficiency reasons (if necessary, we can also capture the entire binary). We simply compare whether these early portions of the binaries are the same or not. In other words, currently, our A-plane clustering implementation utilizes relatively weak cluster features. In the future, we plan to implement clustering on more complex feature sets discussed above, which are more robust against evasion. However, even with the current weak cluster features, BotMiner already demonstrated high accuracy with a low false positive rate as shown in our later experiments.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.7">Cross-plane Correlation</head><p>Once we obtain the clustering results from A-plane (activities patterns) and C-plane (communication patterns), we perform cross-plane correlation. The idea is to crosscheck clusters in the two planes to find out intersections that reinforce evidence of a host being part of a botnet. In order to do this, we first compute a botnet score s(h) for each host h on which we have witnessed at least one kind of suspicious activity. We filter out the hosts that have a score below a certain detection threshold θ, and then group the remaining most suspicious hosts according to a similarity metric that takes into account the A-plane and C-plane clusters these hosts have in common.</p><p>We now explain how the botnet score is computed for each host. Let H be the set of hosts reported in the output of the A-plane clustering module, and h ∈ H. Also, let</p><formula xml:id="formula_3">A (h) = {A i } i=1.</formula><p>.m h be the set of m h A-clusters that contain h, and C (h) = {C i } i=1..n h be the set of n h Cclusters that contain h. We compute the botnet score for h as</p><formula xml:id="formula_4">s(h) = i,j j&gt;i t(A i )񮽙 =t(A j ) w(Ai)w(Aj) |Ai ∩ Aj | |Ai ∪ Aj | + i,k w(Ai) |Ai ∩ C k | |Ai ∪ C k | ,<label>(1)</label></formula><p>where A i , A j ∈ A (h) and C k ∈ C (h) , t(A i ) is the type of activity cluster A i refers to (e.g., scanning or spamming), and w(A i ) 1 is an activity weight assigned to A i . w(A i ) assigns higher values to "strong" activities (e.g., spam and exploit) and lower values to "weak" activities (e.g., scanning and binary download). h will receive a high score if it has performed multiple types of suspicious activities, and if other hosts that were clustered with h also show the same multiple types of activities. For example, assume that h performed scanning and then attempted to exploit a machine outside the monitored network. Let A 1 be the cluster of hosts that were found to perform scanning and were grouped with h in the same cluster. Also, let A 2 be a cluster related to exploit activities that includes h and other hosts that performed similar activities. A larger overlap between A 1 and A 2 would result in a higher score being assigned to h. Similarly, if h belongs to A-clusters that have a large overlap with C-clusters, then it means that the hosts clustered together with h share similar activities as well as similar communication patterns.</p><p>Given a predefined detection threshold θ, we consider all the hosts h ∈ H with s(h) &gt; θ as (likely) bots, and filter out the hosts whose scores do not exceed θ. Now, let B ⊆ H be the set of detected bots, A (B) = {A i } i=1..mB be the set of A-clusters that each contains at least one bot h ∈ B, and C (B) = {C i } i=1..nB be the set of C-clusters that each contains at least one bot h ∈ B. Also, let</p><formula xml:id="formula_5">K (B) = A (B) ∪ C (B) = {K (B) i } i=1.</formula><p>.(mB +nB ) be an ordered union/set of A-and C-clusters. We then describe each bot h ∈ B as a binary vector b(h) ∈ {0, 1} |K (B) | , whereby the i-th element</p><formula xml:id="formula_6">b i = 1 if h ∈ K (B) i</formula><p>, and b i = 0 otherwise. Given this representation, we can define the following similarity between bots h i and h j as</p><formula xml:id="formula_7">sim(hi, hj ) = m B k=1 I(b (i) k = b (j) k ) + I( m B +n B k=m B +1 I(b (i) k = b (j) k ) ≥ 1),<label>(2)</label></formula><p>where we use b (i) = b(h i ) and b (j) = b(h j ), for the sake of brevity. I(X) is the indication function, which equals to one when the boolean argument X is true, and equals to zero when X is false. The intuition behind this metric is that if two hosts appear in the same activity clusters and in at least one common C-cluster, they should be clustered together.</p><p>This definition of similarity between hosts gives us the opportunity to apply hierarchical clustering. This allows us to build a dendrogram, i.e., a tree like graph (see <ref type="figure" target="#fig_5">Figure 8</ref>) that encodes the relationships among the bots. We use the Davies-Bouldin (DB) validation index <ref type="bibr" target="#b21">[21]</ref> to find the best dendrogram cut, which produces the most compact and well separated clusters. The obtained clusters group bots in (sub-) botnets. <ref type="figure" target="#fig_5">Figure 8</ref> shows a (hypothetical) example. Assuming that the best cut suggested by the DB index is the one at height 90, we would obtain two botnets, namely {h 8 , h 3 , h 5 }, and {h 4 , h 6 , h 9 , h 2 , h 1 , h 7 }. In our current implementation, we simply set weight w(A i ) = 1 for all i and θ = 0, which essentially means that we will consider all hosts that appear in two different types of A-clusters and/or in both A-and Cclusters as suspicious candidates for further hierarchical clustering.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Experiments</head><p>To evaluate our BotMiner detection framework and prototype system, we have tested its performance on several real-world network traffic traces, including both (presumably) normal data from our campus network and collected botnet data.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Experiment Setup and Data Collection</head><p>We set up traffic monitors to work on a span port mirroring a backbone router at the campus network of the College of Computing at Georgia Tech. The traffic rate is typically 200Mbps-300Mbps at daytime. We ran the C-plane and A-plane monitors for a continuous 10-day period in late 2007. A random sampling of the network trace shows that the traffic is very diverse, containing many normal application protocols, such as HTTP, SMTP, POP, FTP, SSH, NetBios, DNS, SNMP, IM (e.g., ICQ, AIM), P2P (e.g., Gnutella, Edonkey, bittorrent), and IRC. This serves as a good background to test the false positives and detection performance on a normal network with rich application protocols.</p><p>We have collected a total of eight different botnets covering IRC, HTTP and P2P. <ref type="table">Table 1</ref> lists the basic information about these traces.</p><p>We re-used two IRC and two HTTP botnet traces introduced in <ref type="bibr" target="#b19">[20]</ref>, i.e., V-Spybot, V-Sdbot, B-HTTP-I, and B-HTTP-II. In short, V-Spybot and V-Sdbot are generated by executing modified bot code (Spybot and Sdbot <ref type="bibr" target="#b5">[6]</ref>) in a fully controlled virtual network. They contain four Windows XP/2K IRC bot clients, and last several minutes. B-HTTP-I and B-HTTP-II are generated based on the description of Web-based C&amp;C communications in <ref type="bibr" target="#b24">[24,</ref><ref type="bibr" target="#b39">39]</ref>. Four bot clients communicate with a controlled server and execute the received command (e.g., spam). In B-HTTP-I, the bot contacts the server periodically (about every five minutes) and the whole trace lasts for about 3.6 hours. In B-HTTP-II, we have a more stealthy C&amp;C communication where the bot waits a random time between zero to ten minutes each time before it visits the server, and the whole trace lasts for 19 hours. These four traces are renamed as Botnet-IRC-spybot, Botnet-IRC-sdbot, Botnet-HTTP-1, and Botnet-HTTP-2, respectively. In addition, we also generated a new IRC botnet trace that lasts for a longer time (a whole day) using modified Rbot <ref type="bibr" target="#b2">[3]</ref> source code. Again this is generated in a controlled virtual network with four Windows clients and one IRC server. This trace is labeled as Botnet-IRC-rbot.</p><p>We also obtained a real-world IRC-based botnet C&amp;C trace that was captured in the wild in 2004, labeled as Botnet-IRC-N. The trace contains about 7-minute IRC C&amp;C communications, and has hundreds of bots connected to the IRC C&amp;C server. The botmaster set the command ".scan.startall" in the TOPIC of the channel. Thus, every bot would begin to propagate through scanning once joining the channel. They report their successful transfer of binary to some machines, and also report the machines that have been exploited. We believe this could be a variant of Phatbot <ref type="bibr" target="#b5">[6]</ref>. Although we obtained only the IRC C&amp;C traffic, we hypothesize that the scanning activities are easy to detect given the fact that bots are performing scanning commands in order to propagate. Thus, we assume we have an A-plane cluster with the botnet members because we want to see if we can still capture C-plane clusters and obtain crossplane correlation results.</p><p>Finally, we obtained a real-world trace containing two P2P botnets, Nugache <ref type="bibr" target="#b28">[28]</ref> and Storm <ref type="bibr" target="#b17">[18,</ref><ref type="bibr" target="#b23">23]</ref>. The trace lasts for a whole day, and there are 82 Nugache bots and 13 Storm bots in the trace. It was captured from a group of honeypots running in the wild in late 2007. Each instance is running in Wine (an open source implementation of the Windows API on top of Unix/Linux) instead of a virtual or physical machine. Such a set-up is known as winobot <ref type="bibr" target="#b11">[12]</ref> and is used by researchers to track botnets. By using a lightweight emulation environment (Wine), winobots can run hundreds and thousands of black-box instances of a given malware. This allows one to participate in a P2P botnet en mass. Nugache is a TCPbased P2P bot that performs encrypted communications on port 8. Storm, originating in January of 2007, is one of the very few known UDP based P2P bots. It is based on the Kademlia <ref type="bibr" target="#b30">[30]</ref> protocol and makes use of the Overnet network <ref type="bibr" target="#b1">[2]</ref> to locate related data (e.g., commands). Storm is well-known as a spam botnet with a huge number of infected hosts <ref type="bibr" target="#b27">[27]</ref>. In the implementation of winobot, several malicious capabilities such as sending spam are disabled for legality reason, thus we can not observe spam traffic from the trace. However, we ran a full version of Storm on a VM-based honeypot (instead of Wine environment) and easily observed that it kept sending a huge amount of spam traffic, which makes the A-plane monitoring quite easy. Similarly, when running Nugache on a VM-based honeypot, we observed scanning activity to port 8 because it attempted to connect to its seeding peers but failed a lot of times (because the peers may not be available). Thus, we can detect and cluster A-plane activities for these P2P botnets. <ref type="table" target="#tab_2">Size  Duration  Pkt  TCP/UDP flows  Botnet clients  C&amp;C server  Botnet-IRC-rbot  169MB  24h  1,175,083  180,988  4  1  Botnet-IRC-sdbot  66KB  9m  474  19  4  1  Botnet-IRC-spybot  15MB  32m  180,822  147,945  4  1  Botnet-IRC-N  6.4MB  7m  65,111  5635  259  1  Botnet-HTTP-1  6MB  3.6h  65,695  2,647  4  1  Botnet-HTTP-2  37MB  19h  395,</ref>  <ref type="table">Table 2</ref>: C-plane traffic statistics, basic results of filtering, and C-flows. <ref type="table">Table 2</ref> lists the statistics for the 10 days of network data we used to validate our detection system. For each day there are around 5-10 billion packets (TCP and UDP) and 30-100 million flows. <ref type="table">Table 2</ref> shows the results of several steps of filtering. The first step of filtering (filter rule F1) seems to be the most effective filter in terms of data volume reduction. F1 filters out those flows that are not initiated from internal hosts to external hosts, and achieves about 90% data volume reduction. The is because most of the flows are within the campus network (i.e., they are initiated from internal hosts towards other internal hosts). F2 further filters out around 0.5-3 million of non-completely-established flows. F3 further reduces the data volume by filtering out another 30,000 flows. After applying all the three steps of filtering, there are around 1 to 3 million flows left per day. We converted these remaining flows into Cflows as described in Section 2.5, and obtained around 40,000 TCP C-flows and 130,000 UDP C-flows per day. We then performed two-step clustering on C-flows as described in Section 2.5. <ref type="table" target="#tab_2">Table 3</ref> shows the clustering results and false positives (number of clusters that are not botnets). The results for the first 5 days are related to both TCP and UDP traffic, whereas in the last 5 days we focused on only TCP traffic.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Trace</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Evaluation Results</head><p>It is easy to see from <ref type="table" target="#tab_2">Table 3</ref> that there are thousands of C-clusters generated each day. In addition, there are several thousand activity logs generated from Aplane monitors. Since we use relatively weak monitor modules, it is not surprising that we have this many activity logs. Many logs report binary downloading events or scanning activities. We cluster these activity logs according to their activity features. As explained early, we are interested in groups of machines that perform activities in a similar/coordinated way. Therefore, we filter out the A-clusters that contain only one host. This simple filtering rule allows us to obtain a small number of A-clusters and reduce the overall false positive rate of our botnet detection system.</p><p>Afterwards, we apply cross-plane correlation. We assume that the traffic we collected from our campus network is normal. In order to verify this assumption we used state-of-the-art botnet detection techniques like BotHunter <ref type="bibr" target="#b18">[19]</ref> and BotSniffer <ref type="bibr" target="#b19">[20]</ref>. Therefore, any cluster generated as a result of the cross-plane correlation is considered as a false positive cluster. It is easy to see from <ref type="table" target="#tab_2">Table 3</ref> that there are very few such false positive clusters every day (from zero to four). Most of these clusters contain only two clients (i.e., they induce two false positives). In three out of ten days no false positive was reported. In both Day-2 and Day-3, the crosscorrelation produced one false positive cluster containing two hosts. Two false positive clusters were reported in each day from Day-5 to Day-8. In Day-4, the cross-plane correlation produced four false positive clusters.</p><p>For each day of traffic, the last column of <ref type="table" target="#tab_2">Table 3</ref> shows the false positive rate (FP rate), which is calculated as the fraction of IP addresses reported in the false positive clusters over the total number of distinct normal clients appearing in that day. After further analysis we found that many of these false positives are caused by clients performing binary downloading from websites not present in our whitelist. In practice, the number of false positives may be reduced by implementing a better binary downloading monitor and clustering mod-</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Trace</head><p>Step-1 C-clusters</p><p>Step   ule, e.g., by capturing the entire binary and performing content inspection (using either anomaly-based detection systems <ref type="bibr" target="#b38">[38]</ref> or signature-based AV tools).</p><p>In order to validate the detection accuracy of BotMiner, we overlaid botnet traffic to normal traffic. We consider one botnet trace at a time and overlay it to the entire normal traffic trace of Day-2. We simulate a near-realistic scenario by constructing the test dataset as follows. Let n be the number of distinct bots in the botnet trace we want to overlay to normal traffic. We randomly select n distinct IP addresses from the normal traffic trace and map them to the n IP addresses of the bots. That is, we replace an IP i of a normal machine with the IP i of a bot. In this way, we obtain a dataset of mixed normal and botnet traffic where a set of n machines show both normal and botnet-related behavior. <ref type="table" target="#tab_3">Table 4</ref> reports the detection results for each botnet. <ref type="table" target="#tab_3">Table 4</ref> shows that BotMiner is able to detect all eight botnets. We verified whether the members in the reported clusters are actually bots or not. For 6 out of 8 botnets, we obtained 100% detection rate, i.e., we successfully identified all the bots within the 6 botnets. For example, in the case of P2P botnets (Botnet-P2P-Nugache and Botnet-P2P-Storm), BotMiner correctly generated a cluster containing all the botnet members. In the case of Botnet-IRC-spybot, BotMiner correctly detected a cluster of bots. However, one of the bots belonging to the botnet was not reported in the cluster, which means that the detector generated a false negative. Botnet-IRC-N contains 259 bot clients. BotMiner was able to identify 258 of the bots in one cluster, whereas one of the bots was not detected. Therefore, in this case BotMiner had a detection rate of 99.6%. There were some cases in which BotMiner also generated a false positive cluster containing two normal hosts. We verified that these two normal hosts in particular were also responsible for the false positives generated during the analysis of the Day-2 normal traffic (see <ref type="table" target="#tab_2">Table 3</ref>).</p><p>As we can see, BotMiner performs quite well in our experiments, showing a very high detection rate with relatively few false positives in real-world network traces.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Limitations and Potential Solutions</head><p>Like any intrusion/anomaly detection system, BotMiner is not perfect or complete. It is likely that once adversaries know our detection framework and implementation, they might find some ways to evade detection, e.g., by evading the C-plane and A-plane monitoring and clustering, or the cross-plane correlation analysis. We now address these limitations and discuss possible solutions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Evading C-plane Monitoring and Clustering</head><p>Botnets may try to utilize a legitimate website (e.g., Google) for their C&amp;C purpose in attempt to evade detection. Evasion would be successful in this case if we whitelisted such legitimate websites to reduce the volume of monitored traffic and improve the efficiency of our detection system. However, if a legitimate website, say Google, is used as a means to locate a secondary URL for actual command hosting or binary downloading, botnets may not be able to hide this secondary URL and the corresponding communications. Therefore, clustering of network traffic towards the server pointed by this secondary URL will likely allow us to detect the bots. Also, whitelisting is just an optional operation. One may easily choose not to use whitelisting to avoid such kind of evasion attempts (of course, in this case one may face the trade-off between accuracy and efficiency).</p><p>Botnet members may attempt to intentionally manipulate their communication patterns to evade our C-plane clustering. The easiest thing is to switch to multiple C&amp;C servers. However, this does not help much to evade our detection because such peer communications could still be clustered together just like how we cluster P2P communications. A more advanced way is to randomize each individual communication pattern, for example by randomizing the number of packets per flow (e.g., by injecting random packets in a flow), and the number of bytes per packet (e.g., by padding random bytes in a packet). However, such randomization may introduce similarities among botnet members if we measure the distribution and entropy of communication features. Also, this randomization may raise suspicion because normal user communications may not have such randomized patterns. Advanced evasion may be attempted by bots that try to mimic the communication patterns of normal hosts, in a way similar to polymorphic blending attacks <ref type="bibr" target="#b14">[15]</ref>. Furthermore, bots could use covert channes <ref type="bibr" target="#b0">[1]</ref> to hide their actual C&amp;C communications. We acknowledge that, generally speaking, communication randomization, mimicry attacks and covert channel represent limitations for all traffic-based detection approaches, including BotMiner's C-plane clustering technique. By incorporating more detection features such as content inspection and host level analysis, the detection system may make evasion more difficult.</p><p>Finally, we note that if botnets are used to perform multiple tasks (in A-plane), we may still detect them even when they can evade C-plane monitoring and analysis. By using the scoring algorithm described in Section 2.7, we can perform cross clustering analysis among multiple activity clusters (in A-plane) to accumulate the suspicious score needed to claim the existence of botnets. Thus, we may even not require C-plane analysis if there is already a strong cross-cluster correlation among different types of malicious activities in A-plane. For example, if the same set of hosts involve several types of A-plane clusters (e.g., they send spams, scan others, and/or download the same binaries), they can be reported as botnets because those behaviors, by themselves, are highly suspicious and most likely indicating botnets behaviors <ref type="bibr" target="#b18">[19,</ref><ref type="bibr" target="#b19">20]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Evading A-plane Monitoring and Clustering</head><p>Malicious activities of botnets are unlikely or relatively hard to change as long as the botmaster wants the botnets to perform "useful" tasks. However, the botmaster can attempt to evade BotMiner's A-plane monitoring and clustering in several ways.</p><p>Botnets may perform very stealthy malicious activities in order to evade the detection of A-plane monitors. For example, they can scan very slowly (e.g., send one scan per hour), send spam very slowly (e.g., send one spam per day). This will evade our monitor sensors. However, this also puts a limit on the utility of bots.</p><p>In addition, as discussed above, if the botmaster commands each bot randomly and individually to perform different task, the bots are not different from previous generations of isolated, individual malware instances. This is unlikely the way a botnet is used in practice. A more advanced evasion is to differentiate the bots and avoid commanding bots in the same monitored network the same way. This will cause additional effort and inconvenience for the botmaster. To defeat such an evasion, we can deploy distributed monitors on the Internet to cover a larger monitored space.</p><p>Note, if the botmaster takes the extreme action of randomizing/individualizing both the C&amp;C communications and attack activities of each bots, then these bots are probably not part of a botnet according to our specific definition because the bots are not performing similar/coordinated commanded activities. Orthogonal to the horizontal correlation approaches such as BotMiner to detect a botnet, we can always use complementary systems like BotHunter <ref type="bibr" target="#b18">[19]</ref> that examine the behavior history of distinct host for a dialog or vertical correlation based approach to detect individual bots.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Evading Cross-plane Analysis</head><p>A botmaster can command the bots to perform an extremely delayed task (e.g., delayed for days after receiving commands). Thus, the malicious activities and C&amp;C communications are in different days. If only using one day's data, we may not be able to yield crossplane clusters. As a solution, we may use multipleday data and cross check back several days. Although this has the hope of capturing these botnets, it may also suffer from generating more false positives. Clearly, there is a trade-off. The botmaster also faces the tradeoff because a very slow C&amp;C essentially impedes the efficiency in controlling/coordinating the bot army. Also, a bot infected machine may be disconnected from the Internet or be powered off by the users during the delay and become unavailable to the botmaster.</p><p>In summary, while it is possible that a botmaster can find a way to exploit the limitations of BotMiner, the convenience or the efficiency of botnet C&amp;C and the utility of the botnet also suffer. Thus, we believe that our protocol-and structure-independent detection framework represents a significant advance in botnet detection.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Related Work</head><p>To collect and analyze bots, researchers widely utilize honeypot techniques <ref type="bibr" target="#b3">[4,</ref><ref type="bibr" target="#b15">16,</ref><ref type="bibr" target="#b32">32]</ref>. <ref type="bibr">Freiling et al. [16]</ref> used honeypots to study the problem of botnets. Nepenthes <ref type="bibr" target="#b3">[4]</ref> is a special honeypot tool for automatic malware sample collection. Rajab et al. <ref type="bibr" target="#b32">[32]</ref> provided an in-depth measurement study of the current botnet activities by conducting a multi-faceted approach to collect bots and track botnets. Cooke et al. <ref type="bibr" target="#b9">[10]</ref> conducted several basic studies of botnet dynamics. In <ref type="bibr" target="#b12">[13]</ref>, Dagon et al. proposed to use DNS sinkholing technique for botnet study and pointed out the global diurnal behavior of botnets. Barford and Yegneswaran <ref type="bibr" target="#b5">[6]</ref> provided a detailed study on the code base of several common bot families. Collins et al. <ref type="bibr" target="#b8">[9]</ref> presented their observation of a relationship between botnets and scanning/spamming activities.</p><p>Several recent papers proposed different approaches to detect botnets. Ramachandran et al. <ref type="bibr" target="#b34">[34]</ref> proposed using DNSBL counter-intelligence to find botnet members that generate spams. This approach is useful for just certain types of spam botnets. In <ref type="bibr" target="#b35">[35]</ref>, Reiter and Yen proposed a system TAMD to detect malware (including botnets) by aggregating traffic that shares the same external destination, similar payload, and that involves internal hosts with similar OS platforms. TAMD's aggregation method based on destination networks focuses on networks that experience an increase in traffic as compared to a historical baseline. Different from BotMiner that focuses on botnet detection, TAMD aims to detect a broader range of malware. Since TAMD's aggregation features are different from BotMiner's (in which we cluster similar communication patterns and similar malicious activity patterns), TAMD and BotMiner can complement each other in botnet and malware detection. Livadas et al. <ref type="bibr" target="#b29">[29,</ref><ref type="bibr" target="#b40">40]</ref> proposed a machine learning based approach for botnet detection using some general network-level traffic features of chat-like protocols such as IRC. <ref type="bibr">Karasaridis et al.</ref> [26] studied network flow level detection of IRC botnet controllers for backbone networks. The above two are similar to our work in C-plane clustering but different in many ways. First, they are used to detect IRC-based botnet (by matching a known IRC traffic profile), while we do not have the assumption of known C&amp;C protocol profiles. Second, we use a different feature set on a new communication flow (C-flow) data format instead of traditional network flow. Third, we consider both C-plane and A-plane information instead of just flow records.</p><p>Rishi <ref type="bibr" target="#b16">[17]</ref> is a signature-based IRC botnet detection system by matching known IRC bot nickname patterns. Binkley and Singh <ref type="bibr" target="#b6">[7]</ref> proposed combining IRC statistics and TCP work weight for the detection of IRC-based botnets. In <ref type="bibr" target="#b18">[19]</ref>, we described BotHunter, which is a passive bot detection system that uses dialog correlation to associate IDS events to a user-defined bot infection dialog model. Different from BotHunter's dialog correlation or vertical correlation that mainly examines the behavior history associated with each distinct host, BotMiner utilizes a horizontal correlation approach that examines correlation across multiple hosts. BotSniffer <ref type="bibr" target="#b19">[20]</ref> is an anomaly-based botnet C&amp;C detection system that also utilizes horizontal correlation. However, it is used mainly for detecting centralized C&amp;C activities (e.g., IRC and HTTP).</p><p>The aforementioned systems are mostly limited to specific botnet protocols and structures, and many of them work only on IRC-based botnets. BotMiner is a novel general detection system that does not have such limitations and can greatly complement existing detection approaches.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Conclusion &amp; Future Work</head><p>Botnet detection is a challenging problem. In this paper, we proposed a novel network anomaly-based botnet detection system that is independent of the protocol and structure used by botnets. Our system exploits the essential definition and properties of botnets, i.e., bots within the same botnet will exhibit similar C&amp;C communication patterns and similar malicious activities patterns. In our experimental evaluation on many real-world network traces, BotMiner shows excellent detection accuracy on various types of botnets (including IRC-based, HTTPbased, and P2P-based botnets) with a very low false positive rate on normal traffic.</p><p>It is likely that future botnets (especially P2P botnets) may utilize evasion techniques to avoid detection, as discussed in Section 4. In our future work, we will study new techniques to monitor/cluster communication and activity patterns of botnets, and these techniques are intended to be more robust to evasion attempts. In addition, we plan to further improve the efficiency of the C-flow converting and clustering algorithms, combine different correlation techniques (e.g., vertical correlation and horizontal correlation), and develop new real-time detection systems based on a layered design using sampling techniques to work in very high speed and very large network environments.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 2 :</head><label>2</label><figDesc>Figure 1: Possible structures of a botnet: (a) centralized; (b) peer-to-peer.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: C-plane clustering.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 4 :Figure 5 :</head><label>45</label><figDesc>Figure 4: Visit pattern (shown in distribution) to Google from a randomly chosen normal client.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 6 :</head><label>6</label><figDesc>Figure 6: Two-step clustering of C-flows.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 7 :</head><label>7</label><figDesc>Figure 7: A-plane clustering.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 8 :</head><label>8</label><figDesc>Figure 8: Example of hierarchical clustering for botnet detection.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2" validated="false"><head>Table 3 :</head><label>3</label><figDesc></figDesc><table>C-plane and A-plane clustering results. 

Botnet 
Number of Bots 
Detected? 
Clustered Bots 
Detection Rate 
False Positive Clusters/Hosts 
FP Rate 
IRC-rbot 
4 
YES 
4 
100% 
1/2 
0.003 
IRC-sdbot 
4 
YES 
4 
100% 
1/2 
0.003 
IRC-spybot 
4 
YES 
3 
75% 
1/2 
0.003 
IRC-N 
259 
YES 
258 
99.6% 
0 
0 
HTTP-1 
4 
YES 
4 
100% 
1/2 
0.003 
HTTP-2 
4 
YES 
4 
100% 
1/2 
0.003 
P2P-Storm 
13 
YES 
13 
100% 
0 
0 
P2P-Nugache 
82 
YES 
82 
100% 
0 
0 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3" validated="false"><head>Table 4 : Botnet detection results using BotMiner.</head><label>4</label><figDesc></figDesc><table></table></figure>

			<note place="foot" n="3"> One can still use our complementary system, BotHunter [19], to detect individual bots. In this paper, we focus on the detection of a botnet. We further clarify our assumptions in Section 2.1 and address limitations in Section 4.</note>

			<note place="foot" n="4"> All these tools can also be deployed in LANs.</note>

			<note place="foot" n="5"> This tool will be released in open source soon.</note>

			<note place="foot" n="6"> If the C-plane monitor is deployed at the edge router, these traffic will not be seen. However, if the monitor is deployed/tested in a LAN, then this filtering can be used.</note>

			<note place="foot" n="8"> In an extreme case that bots update their binaries from different URLs (and the binaries are packed to be polymorphic thus different from each other), one should unpack the binary using tools such as Polyunpack [37] before calculating the distance. One may also directly apply normalized compression distance (NCD [5, 41]) on the original (maybe packed) binaries.</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgments</head><p>We would like to thank David Dagon and Yan Chen for their help in providing some of the evaluation data in our experiments. We thank Robert Edmonds for his support on using fcapture. In addition, we thank Angelos Stavrou, Rachna Dhamija, and anonymous reviewers for their insightful comments and feedback. This material is based upon work supported in part by the National Science Foundation under Grants CCR-0133629, CNS-0627477, and CNS-0716570, by the U.S. Army Research Office under Grant W911NF0610042, and by the Air Force Research Laboratory (AFRL) under Grant FA8750-08-2-0141. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the author(s) and do not necessarily reflect the views of the National Science Foundation, the U.S. Army Research Office, and the Air Force Research Laboratory.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">A guide to understanding covert channel analysis of trusted systems, version 1</title>
		<idno>NCSC-TG-030</idno>
		<imprint>
			<date type="published" when="1993-11" />
			<biblScope unit="volume">572</biblScope>
		</imprint>
		<respStmt>
			<orgName>National Computer Security Center</orgName>
		</respStmt>
	</monogr>
<note type="report_type">Library No. S-240</note>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Overnet</surname></persName>
		</author>
		<ptr target="http://en.wikipedia.org/wiki/Overnet" />
		<imprint>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m" type="main">Know your enemy: Tracking botnets</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Bacher</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Holz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Kotter</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Wicherski</surname></persName>
		</author>
		<ptr target="http://www.honeynet.org/papers/bots/" />
		<imprint>
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">The nepenthes platform: An efficient approach to collect malware</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Baecher</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Koetter</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Holz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Dornseif</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Freiling</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Symposium on Recent Advances in Intrusion Detection (RAID&apos;06)</title>
		<meeting>International Symposium on Recent Advances in Intrusion Detection (RAID&apos;06)<address><addrLine>Hamburg, September</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Automated classification and analysis of internet malware</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Bailey</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Oberheide</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Andersen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Mao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Jahanian</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Nazario</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Symposium on Recent Advances in Intrusion Detection (RAID&apos;07)</title>
		<meeting>International Symposium on Recent Advances in Intrusion Detection (RAID&apos;07)</meeting>
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">An Inside Look at Botnets. Special Workshop on Malware Detection</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Barford</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Yegneswaran</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Advances in Information Security</title>
		<imprint>
			<publisher>Springer Verlag</publisher>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">An algorithm for anomaly-based botnet detection</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">R</forename><surname>Binkley</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Singh</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of USENIX SRUTI&apos;06</title>
		<meeting>USENIX SRUTI&apos;06</meeting>
		<imprint>
			<date type="published" when="2006-07" />
			<biblScope unit="page" from="43" to="48" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">A case study of the rustock rootkit and spam bot</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Chiang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Lloyd</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of USENIX HotBots&apos;07</title>
		<meeting>USENIX HotBots&apos;07</meeting>
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Using uncleanliness to predict future botnet addresses</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Collins</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Shimeall</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Faber</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Janies</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Weaver</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">D</forename><surname>Shon</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Kadane</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ACM/USENIX Internet Measurement Conference (IMC&apos;07)</title>
		<meeting>ACM/USENIX Internet Measurement Conference (IMC&apos;07)</meeting>
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">The zombie roundup: Understanding, detecting, and disrupting botnets</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Cooke</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Jahanian</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Mcpherson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of USENIX SRUTI&apos;05</title>
		<meeting>USENIX SRUTI&apos;05</meeting>
		<imprint>
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">-</forename><surname>Cyber</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Ta</surname></persName>
		</author>
		<ptr target="http://www.cyber-ta.org/BotHunter" />
		<title level="m">BotHunter Free Internet Distribution Page</title>
		<imprint>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">A taxonomy of botnet structures</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Dagon</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Gu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Lee</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 23 Annual Computer Security Applications Conference (ACSAC&apos;07)</title>
		<meeting>the 23 Annual Computer Security Applications Conference (ACSAC&apos;07)</meeting>
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Modeling botnet propagation using timezones</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Dagon</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Zou</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Lee</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 13th Annual Network and Distributed System Security Symposium (NDSS&apos;06)</title>
		<meeting>the 13th Annual Network and Distributed System Security Symposium (NDSS&apos;06)</meeting>
		<imprint>
			<date type="published" when="2006-01" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">The anatomy of clickbot.a</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Daswani</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Stoppelman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of USENIX HotBots&apos;07</title>
		<meeting>USENIX HotBots&apos;07</meeting>
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Polymorphic blending attack</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Fogla</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Sharif</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Perdisci</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><forename type="middle">M</forename><surname>Kolesnikov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Lee</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 15th USENIX Security Symposium (Security&apos;06)</title>
		<meeting>the 15th USENIX Security Symposium (Security&apos;06)</meeting>
		<imprint>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Botnet Tracking: Exploring a Root-cause Methodology to Prevent Denial of Service Attacks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Freiling</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Holz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Wicherski</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of 10th European Symposium on Research in Computer Security (ESORICS&apos;05)</title>
		<meeting>10th European Symposium on Research in Computer Security (ESORICS&apos;05)</meeting>
		<imprint>
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Rishi: Identify bot contaminated hosts by irc nickname evaluation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Goebel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Holz</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of USENIX HotBots&apos;07</title>
		<meeting>USENIX HotBots&apos;07</meeting>
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Peer-to-peer botnets: Overview and case study</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">B</forename><surname>Grizzard</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Sharma</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Nunnery</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><forename type="middle">B</forename><surname>Kang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Dagon</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of USENIX HotBots&apos;07</title>
		<meeting>USENIX HotBots&apos;07</meeting>
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">BotHunter: Detecting malware infection through ids-driven dialog correlation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Gu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Porras</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Yegneswaran</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Fong</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Lee</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 16th USENIX Security Symposium (Security&apos;07)</title>
		<meeting>the 16th USENIX Security Symposium (Security&apos;07)</meeting>
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">BotSniffer: Detecting botnet command and control channels in network traffic</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Gu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Lee</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 15th</title>
		<meeting>the 15th</meeting>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<monogr>
				<title level="m">Annual Network and Distributed System Security Symposium (NDSS&apos;08)</title>
		<imprint>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">On clustering validation techniques</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Halkidi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Batistakis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Vazirgiannis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Intell. Inf. Syst</title>
		<imprint>
			<biblScope unit="volume">17</biblScope>
			<biblScope unit="issue">2-3</biblScope>
			<biblScope unit="page" from="107" to="145" />
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Detection and mitigation of fast-flux service networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Holz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Gorecki</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Rieck</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><forename type="middle">C</forename><surname>Freiling</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 15th Annual Network and Distributed System Security Symposium (NDSS&apos;08)</title>
		<meeting>the 15th Annual Network and Distributed System Security Symposium (NDSS&apos;08)</meeting>
		<imprint>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Measurements and mitigation of peerto-peer-based botnets: A case study on storm worm</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Holz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Steiner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Dahl</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Biersack</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Freiling</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the First USENIX Workshop on Large-Scale Exploits and Emergent Threats (LEET&apos;08)</title>
		<meeting>the First USENIX Workshop on Large-Scale Exploits and Emergent Threats (LEET&apos;08)</meeting>
		<imprint>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<monogr>
		<title level="m" type="main">Botnets as a vehicle for online crime</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Ianelli</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Hackworth</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Data clustering: a review</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">K</forename><surname>Jain</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">N</forename><surname>Murty</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">J</forename><surname>Flynn</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Computer Survey</title>
		<imprint>
			<biblScope unit="volume">31</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="264" to="323" />
			<date type="published" when="1999" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Widescale botnet detection and characterization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Karasaridis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Rexroad</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Hoeflin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of USENIX HotBots&apos;07</title>
		<meeting>USENIX HotBots&apos;07</meeting>
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<monogr>
		<title level="m" type="main">Storm worm dwarfs world&apos;s top supercomputers</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Krebs</surname></persName>
		</author>
		<ptr target="http://blog.washingtonpost.com/securityfix/2007/08/storm_worm_dwarfs_worlds_top_s_1.html" />
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<monogr>
		<title level="m" type="main">Bot software looks to improve peer</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Lemos</surname></persName>
		</author>
		<ptr target="Http://www.securityfocus.com/news/11390" />
		<imprint>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">Using machine learning techniques to identify botnet traffic</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Livadas</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Walsh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Lapsley</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">T</forename><surname>Strayer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2nd IEEE LCN Workshop on Network Security (WoNS&apos;2006)</title>
		<meeting>the 2nd IEEE LCN Workshop on Network Security (WoNS&apos;2006)</meeting>
		<imprint>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">Kademlia: A peer-to-peer information system based on the XOR metric</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Maymounkov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Mazieres</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 1st International Workshop on Peer-to-Peer Systems (IPTPS&apos;02)</title>
		<meeting>the 1st International Workshop on Peer-to-Peer Systems (IPTPS&apos;02)</meeting>
		<imprint>
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">X-means: Extending k-means with efficient estimation of the number of clusters</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Pelleg</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">W</forename><surname>Moore</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Seventeenth International Conference on Machine Learning (ICML&apos;00)</title>
		<meeting>the Seventeenth International Conference on Machine Learning (ICML&apos;00)<address><addrLine>San Francisco, CA, USA</addrLine></address></meeting>
		<imprint>
			<publisher>Morgan Kaufmann Publishers Inc</publisher>
			<date type="published" when="2000" />
			<biblScope unit="page" from="727" to="734" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">A multi-faceted approach to understanding the botnet phenomenon</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Rajab</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Zarfoss</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Monrose</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Terzis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ACM SIGCOMM/USENIX Internet Measurement Conference (IMC&apos;06)</title>
		<meeting>ACM SIGCOMM/USENIX Internet Measurement Conference (IMC&apos;06)<address><addrLine>Brazil</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2006-10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title level="a" type="main">Understanding the network-level behavior of spammers</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Ramachandran</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Feamster</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ACM SIGCOMM&apos;06</title>
		<meeting>ACM SIGCOMM&apos;06</meeting>
		<imprint>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<analytic>
		<title level="a" type="main">Revealing botnet membership using DNSBL counterintelligence</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Ramachandran</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Feamster</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Dagon</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of USENIX SRUTI&apos;06</title>
		<meeting>USENIX SRUTI&apos;06</meeting>
		<imprint>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<analytic>
		<title level="a" type="main">Traffic aggregation for malware detection</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">K</forename><surname>Reiter</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T.-F</forename><surname>Yen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Fifth GI International Conference on Detection of Intrusions and Malware, and Vulnerability Assessment (DIMVA&apos;08)</title>
		<meeting>the Fifth GI International Conference on Detection of Intrusions and Malware, and Vulnerability Assessment (DIMVA&apos;08)</meeting>
		<imprint>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<analytic>
		<title level="a" type="main">Snort -lightweight intrusion detection for networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Roesch</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of USENIX LISA&apos;99</title>
		<meeting>USENIX LISA&apos;99</meeting>
		<imprint>
			<date type="published" when="1999" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b37">
	<analytic>
		<title level="a" type="main">Polyunpack: Automating the hiddencode extraction of unpack-executing malware</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Royal</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Halpin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Dagon</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Edmonds</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Lee</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC&apos;06)</title>
		<meeting>the 22nd Annual Computer Security Applications Conference (ACSAC&apos;06)<address><addrLine>Washington, DC, USA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="2006" />
			<biblScope unit="page" from="289" to="300" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b38">
	<analytic>
		<title level="a" type="main">Data mining methods for detection of new malicious executables</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">G</forename><surname>Schultz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Eskin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Zadok</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">J</forename><surname>Stolfo</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2001 IEEE Symposium on Security and Privacy</title>
		<meeting>the 2001 IEEE Symposium on Security and Privacy</meeting>
		<imprint>
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b39">
	<monogr>
		<title level="m" type="main">Bobax trojan analysis</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Secureworks</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b40">
	<analytic>
		<title level="a" type="main">Detecting botnets with tight command and control</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">T</forename><surname>Strayer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Walsh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Livadas</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Lapsley</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 31st IEEE Conference on Local Computer Networks (LCN&apos;06)</title>
		<meeting>the 31st IEEE Conference on Local Computer Networks (LCN&apos;06)</meeting>
		<imprint>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b41">
	<analytic>
		<title level="a" type="main">Analyzing worms and network traffic using compression</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Wehner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Computer Security</title>
		<imprint>
			<biblScope unit="volume">15</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="303" to="320" />
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b42">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Werner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Hunter</surname></persName>
		</author>
		<ptr target="http://honeytrap.mwcollect.org/pehunter" />
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b43">
	<analytic>
		<title level="a" type="main">Characterizing botnets from email spam records</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Zhuang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Dunagan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">R</forename><surname>Simon</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><forename type="middle">J</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Osipkov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Hulten</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Tygar</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the First USENIX Workshop on Large-Scale Exploits and Emergent Threats (LEET&apos;08)</title>
		<meeting>the First USENIX Workshop on Large-Scale Exploits and Emergent Threats (LEET&apos;08)</meeting>
		<imprint>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b44">
	<monogr>
		<title level="m" type="main">Characterizing the irc-based botnet phenomenon</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Zhuge</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Holz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Han</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Guo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Zou</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2007" />
		</imprint>
		<respStmt>
			<orgName>Peking University &amp; University of Mannheim Technical</orgName>
		</respStmt>
	</monogr>
<note type="report_type">Report</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
