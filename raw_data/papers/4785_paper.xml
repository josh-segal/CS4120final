<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2019-03-26T17:01+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Improving Wireless Privacy with an Identifier-Free Link Layer Protocol</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ben</forename><surname>Greenstein</surname></persName>
							<email>benjamin.m.greenstein@intel.com</email>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">University of Colorado</orgName>
								<orgName type="institution" key="instit2">Carnegie Mellon University § University of Washington</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Damon</forename><surname>Mccoy</surname></persName>
							<email>damon.mccoy@colorado.edujeffpang@cs.cmu.edu</email>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">University of Colorado</orgName>
								<orgName type="institution" key="instit2">Carnegie Mellon University § University of Washington</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jeffrey</forename><surname>Pang</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">University of Colorado</orgName>
								<orgName type="institution" key="instit2">Carnegie Mellon University § University of Washington</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tadayoshi</forename><surname>Kohno</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">University of Colorado</orgName>
								<orgName type="institution" key="instit2">Carnegie Mellon University § University of Washington</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Srinivasan</forename><surname>Seshan</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">University of Colorado</orgName>
								<orgName type="institution" key="instit2">Carnegie Mellon University § University of Washington</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Wetherall</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">University of Colorado</orgName>
								<orgName type="institution" key="instit2">Carnegie Mellon University § University of Washington</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Intel</forename><surname>Research</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">University of Colorado</orgName>
								<orgName type="institution" key="instit2">Carnegie Mellon University § University of Washington</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Seattle</forename></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">University of Colorado</orgName>
								<orgName type="institution" key="instit2">Carnegie Mellon University § University of Washington</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Improving Wireless Privacy with an Identifier-Free Link Layer Protocol</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>C2 [Computer Systems Organization]: Computer-Com- munication Networks; C21 [Computer-Communication Networks]: Network Architecture and Design General Terms Design</term>
					<term>Security Keywords privacy</term>
					<term>anonymity</term>
					<term>wireless</term>
					<term>80211</term>
				</keywords>
			</textClass>
			<abstract>
				<p>We present the design and evaluation of an 802.11-like wireless link layer protocol that obfuscates all transmitted bits to increase privacy. This includes explicit identifiers such as MAC addresses, the contents of management messages, and other protocol fields that the existing 802.11 protocol relies on to be sent in the clear. By obscuring these fields, we greatly increase the difficulty of identifying or profiling users from their transmissions in ways that are otherwise straightforward. Our design, called SlyFi, is nearly as efficient as existing schemes such as WPA for discovery, link setup, and data delivery despite its heightened protec-tions; transmission requires only symmetric key encryption and reception requires a table lookup followed by symmetric key decryption. Experiments using our implementation on Atheros 802.11 drivers show that SlyFi can discover and associate with networks faster than 802.11 using WPA-PSK. The overhead SlyFi introduces in packet delivery is only slightly higher than that added by WPA-CCMP encryption (10% vs. 3% decrease in throughput).</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">PROBLEM AND SOLUTION OVERVIEW</head><p>Our goal is to build a wireless link layer protocol that allows clients and services to communicate without exposing identifiers to third parties. This section outlines the threat model we consider. We then discuss our security requirements and the challenges in meeting them and present an overview of SlyFi, an efficient identifier-concealing link layer protocol based on 802.11.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Threat Model</head><p>Attack. The previous section outlined three types of attacks enabled by low-level identifiers not obscured by existing security mechanisms: the inventorying, tracking, and profiling of users and their devices. Users can be subjected to these attacks without their knowledge because an adversary can carry them out without being visibly or physically present. In addition, users are vulnerable even when using the best existing security practices, such as WPA. Thus,  <ref type="table">Table 1</ref>-Mean number of devices that send or receive 802.11 data packets at different time intervals at two conferences (SIGCOMM <ref type="bibr" target="#b20">[25]</ref>, OSDI <ref type="bibr" target="#b6">[11]</ref>) and one office building (UCSD <ref type="bibr" target="#b7">[12]</ref>). Intervals with no data packets are ignored. UCSD has observations from multiple monitors.</p><note type="other">10 ms 100 ms 1 sec 1 min 1 hr SIGCOMM 2004 1.4 3.2 7.</note><p>these attacks violate common assumptions about privacy. The effectiveness of these attacks is dependent on an adversary's ability to link packets sent at different times to the same device. The easiest way for adversaries to link packets is by observing the same low-level identifier in each. Thus, our goal is to limit two forms of linkability: First, information should not be provided in individual packets that explicitly links the packets to the identities of the sender or intended receiver. Second, to prevent the profiling, fingerprinting, and tracking of sequences of related packets, packets from the same sender should not be linkable to each other, irrespective of whether any one of them may be linked explicitly to its source. In other words, when there are k potential devices and an adversary observes a packet, he should only be able to infer that the packet is from (or to) one of those k devices, not which one. Profiling a device's packet sequences would be more difficult even at short timescales if many devices are active simultaneously. <ref type="table">Table 1</ref>, which shows the average number of active devices observed at different time intervals, shows that there are indeed many simultaneously active devices in three 802.11 traces.</p><p>Potential Victims. The aforementioned attacks are damaging to both wireless clients, such as laptops, and wireless services, such as APs, particularly since the distinction between client and service devices is becoming increasingly blurred; e.g., a client game station sometimes provides wireless service to others as an ad hoc AP. Thus, we want to limit the linkability of packets transmitted by both clients and services.</p><p>We assume that clients and services have (possibly shared) cryptographic keys prior to communication. These keys can be obtained in the same way as in existing secure 802.11 and Bluetooth networks. For example, devices can leverage traditional credentials from trusted authorities (e.g., for RADIUS authentication) or bootstrap symmetric keys using out-of-band pairing techniques <ref type="bibr" target="#b26">[31]</ref>. We believe that most private services will be known beforehand (e.g., a home 802.11 AP) and can bootstrap keys using these methods. Nonetheless, in previous work <ref type="bibr" target="#b17">[22]</ref> we also proposed methods to privately bootstrap keys with unknown services by leveraging transitive trust relationships.</p><p>The mere possession of cryptographic keys does not immediately yield satisfactory solutions, however, as clients and services have limited computational resources. As a consequence, solutions should not enable denial of service attacks that exploit this limitation. For example, simply encrypting the entirety of a packet is not sufficient if a receiver can not quickly determine whether it is the intended recipient or not. This is because an adversary would then be able to exhaust a device's computational resources by broadcasting "junk" packets that the device would expend a non-trivial amount of resources to discard.</p><p>Adversary. We are concerned with limiting the packet linking ability of third parties, i.e., parties other than the original sender or intended recipient of those packets. For example, packets sent between an 802.11 client and an 802.11 AP are exposed to anyone within radio range, but only the client and service should be able to link them together. We are not concerned with preventing the service from linking together the client's packets (or vice versa), as techniques used to hide a client's identity from a service in wired networks (e.g., <ref type="bibr" target="#b9">[14]</ref>) are also applicable in wireless networks.</p><p>We assume adversaries have commodity 802.11 radios and are able to observe all transmitted packets, but they are not privy to the cryptographic keys that clients and services have prior to communication. As with most practical systems, we assume that adversaries are computationally bounded and thus can not successfully attack standard cryptosystems such as RSA, ElGamal, and AES.</p><p>Limitations. SlyFi's removal of low-level identifiers makes it much more difficult for third parties to link packets together or to a particular user, thus improving privacy. Nonetheless, packet sizes, packet timings, and physical layer information may still sometimes act as side channels that link packets together. Defending against these attacks is outside the scope of this paper. However, without explicit identifiers linking together packets, it becomes a more difficult probabilistic task to separate the transmissions of different sources. Such attacks are less accessible as they usually require sophisticated attackers <ref type="bibr" target="#b27">[32]</ref> or non-commodity hardware <ref type="bibr" target="#b18">[23]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Security Requirements</head><p>We want to be able to deliver a message from A to B without identifiers, but still ensure that B can verify it was sent by A. More formally, consider a procedure F that computes c ← F (A, B, p), where A and B are the identities of the sender and recipient, respectively, p is the original message payload, and c is the result which A transmits. (Shared cryptographic key state is an additional, implicit input to F , but we omit it here for brevity.) We want F to have the following four properties. We denote security properties in this paper using small caps.</p><p>Strong unlinkability. To protect against tracking and profiling attacks, a sequence of packets should not be linkable. More formally, any party other than A or B that receives c1 = F (A, B, p1) and c2 = F (A, B, p2) should not be able to determine that the sender or receiver of c1 or c2 are the same. In particular, this implies that c1 and c2 must not contain consistent identifiers. We note that some packet types, such as discovery messages, are less vulnerable to short-term profiling and thus only need to be unlinkable at coarser timescales to prevent long-term tracking. Consequently, we outline a relaxed version of this property in §3.3 to efficiently handle these packets.</p><p>Authenticity. To restrict the discovery of services to authorized clients and prevent spoofing and man-in-the-middle attacks, recipients should be able to verify a message's source. More formally, B should be able to verify that A was the author of c and that it was constructed recently (to prevent replay attacks).  Confidentiality. No party other than A or B should be able to determine the contents of p. In contrast to existing wireless confidentiality schemes, not even fields and addresses in the header should be decipherable by third parties.</p><p>Message integrity. Finally, as with existing 802.11 security schemes, receivers should be able to detect if messages were tampered with by third parties. More formally, B should be able to derive p from c and verify that it was not altered after transmission.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Challenges</head><p>The principal approach to concealing 802.11 client identities has been to use MAC address pseudonyms <ref type="bibr" target="#b11">[16,</ref><ref type="bibr" target="#b13">18]</ref>. Pseudonym proposals do not meet our strong unlinkability requirement because all packets sent under one pseudonym are trivially linkable. Moreover, the use of pseudonyms does not conceal other information in headers, such as capabilities, that can be used to link packets together <ref type="bibr" target="#b16">[21]</ref>. Furthermore, the proposals focus on data delivery alone, and do not address important network functions, such as authentication and service discovery.</p><p>Prior approaches are limited because meeting all our security requirements while maintaining important wireless functionality is nontrivial. Consistent destination addresses allow devices to quickly filter messages intended for others so efficient data transport is difficult without them. Moreover, cryptographic authenticity is difficult to provide without identifiers. Message recipients typically need to know which cryptographic key to use to verify a message, and it is hard to tell the recipient which one without explicitly identifying it. Finally, removing identifiers completely from the process of service discovery is hard because wireless clients and services typically rendezvous by broadcasting an agreed upon identifier. A service might be willing to expose its identifier through announcements to save potential clients from having to expose it in probes. No such straightforward solution exists to conceal both client and service identities.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.4">System Overview</head><p>In light of the shortcomings of existing solutions, we introduce the SlyFi protocol that meets our security requirements using two identity-concealing mechanisms, Tryst and Shroud, while providing functionality similar to 802.11. Before describing these mechanisms, we first give an overview of SlyFi in this section.</p><p>The SlyFi link layer is designed to replace 802.11 for managed wireless connectivity between clients and APs. The privacy protecting mechanisms of the protocol explicitly protect all bits transmitted by the link layer. A client wishing to join and send data to a SlyFi network sends a progression of messages similar to 802.11 <ref type="figure" target="#fig_0">(Figure 1)</ref>. Instead of sending these messages in the clear, they are encapsulated by the two identity-hiding mechanisms we describe in §3.</p><p>A client first transmits probes, encapsulated by Tryst, to discover nearby APs it is authorized to use. A probe is encrypted such that: 1) only the client and the networks named in the probe can learn the probe's source, destination, and contents, and 2) messages encapsulated for a particular SlyFi AP sent at different times cannot be linked by their contents. An AP that receives a probe verifies that it was created by an authorized user and sends an encrypted reply, indicating its presence to that client. If the client wishes to establish a link to the AP, it sends an authentication request, also encapsulated by Tryst, containing session information including keys for subsequent data transmission, which are used to bootstrap Shroud. Obviously, SlyFi APs cannot send clear-text beacons if they wish to protect service identities. However, they may do so if they wish to announce themselves publicly. Such a public announcement could immediately be followed by a confidential authentication request from an interested client, and thus would not compromise client privacy.</p><p>After a link has been established by an authentication response, Shroud is used to conceal the addresses and contents of future messages delivered on the link. An eavesdropper can not use the contents of any two messages protected by Shroud to link them to the same sender or receiver.</p><p>Both Tryst and Shroud essentially encrypt the entire contents of each message, including addresses normally found in the header. The essential differences between them arise due to the different requirements of discovery, link establishment, and data transfer.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">IDENTIFIER-FREE MECHANISMS</head><p>Identifiers are used in wireless protocols for two general functions: 1) as a handle by which to discover a service and establish a link to it, and 2) to address packets on a link and allow unintended recipients to ignore packets efficiently. Tryst and Shroud address each of these functions, respectively. To motivate our mechanisms, we first describe two straw man mechanisms that meet our security requirements, but are inefficient. We then discuss Tryst and Shroud, which are enabled by minor relaxations of these requirements or additional assumptions made possible by their intended uses. We conclude the section by discussing how SlyFi can still support other protocol functions, such as higher layer binding.</p><p>To illustrate each mechanism we consider the scenario when A sends a message p to B. Each mechanism consists of three key elements: the bootstrapping of cryptographic keys that the sender and receiver require to compute the procedure F (described in §2.2); the construction of c ← F (A, B, p) by the sender; and the message filtering by a receiver to determine if c is intended for him.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Straw Man: Public Key Mechanism</head><p>We first sketch public key, a mechanism based on a protocol that Abadi and Fournet <ref type="bibr" target="#b2">[7]</ref> prove meet the aforementioned security requirements.</p><p>Bootstrapping. This mechanism assumes that A and B each have a public/private key pair and each have the public keys of the other.</p><p>Construction. We sketch this mechanism here, but refer the reader to the first protocol discussed in <ref type="bibr" target="#b2">[7]</ref> for details. To provide authenticity, A digitally signs the statement s = {A, B, T } where T is the current time. A message header is constructed as an encryption of s and the digital signature, using B's public key. By using a public key encryption scheme that does not reveal which key is used, such as ElGamal <ref type="bibr" target="#b4">[9]</ref>, identities of neither sender nor intended recipient are revealed. 1 In addition, this achieves strong unlinkability because the ElGamal encryption scheme is randomized so each encrypted header appears random. The payload can be encrypted via conventional means (e.g., as described later in §3.3).</p><p>Message filtering. When B receives a message, he will attempt to decrypt this header. If the decryption fails (i.e., the result does not include the statement {j, B, T }, for a known identity j), the message is not intended for B and can be discarded. If decryption succeeds, B then checks the signature and the time to verify that the message was recently generated by j before accepting it.</p><p>Although this protocol achieves the security properties we desire, it is slow because it uses public key cryptography. In particular, on AP and consumer electronics hardware, a single private key decryption can take over 100 millisecondsseveral orders of magnitude greater than the time required to transmit the message (see §5). Since B must attempt to decrypt the header for every message he receives whether he is the intended recipient or not, he can be backlogged just by processing ambient background traffic.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Straw Man: Symmetric Key Mechanism</head><p>Next we sketch symmetric key, a similar mechanism based on symmetric keys that addresses this pitfall.</p><p>Bootstrapping. This mechanism assumes that A and B share a symmetric key.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Construction. Using symmetric keys shared only between</head><p>A and B, we can use a construction intuitively similar to public key. A encrypts the statement s using symmetric encryption such as AES-CBC. We can omit A and B from s since it is implied by the use of their symmetric key. A then computes a message authentication code (MAC) over the encrypted value so B can verify its authenticity. A random initialization vector (IV) is used so that the resulting cipher text and MAC appear random and thus are unlinkable to any other message.</p><p>Message filtering. Upon receipt of a message, B verifies the MAC in the header using the same key A used to construct the message. If the MAC does not verify, then this message is not for B and he can discard it.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Symbol</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Definition</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>I</head><p>The length of each Tryst time interval.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>T, T0, Ti</head><p>Respectively, the current time, the time Tryst keys were bootstrapped, and the start of time interval i: T0 + i · I.</p><p>kp A one-time use key for encrypting a payload.  Of course, since the message does not indicate to B which key was used to generate the MAC-indeed it cannot, or it will no longer be unlinkable-and B has a symmetric key for each client from whom he can receive messages, B must try all these keys to verify the MAC. There is locality when keys are used (e.g., A may know that he expects a reply from B after sending a message to him) so we can sort keys in most-recently-used order, but, for messages not intended for B, he must try all keys before discarding them. Thus, filtering is inefficient for clients or APs that have many keys.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Discovery and Binding: Tryst</head><p>We now describe Tryst, the mechanism we use for transmitting discovery and binding messages such as 802.11 probes and authentication messages. Tryst builds upon the symmetric key straw man, but leverages the following properties of these messages in order to enable efficient message processing:</p><p>Infrequent Communication. Individual devices send discovery and binding messages infrequently. For example, 802.11 clients send probes only when they are searching for an AP and send authentication messages only at the beginning of a session or when roaming between APs.</p><p>Narrow Interface. Unlike data packets, which can contain arbitrary contents, there are very few different messages that are used for discovery and binding. Thus, it is unlikely that their evolution at short time scales exposes many sensitive side channels of information when individual messages are not decipherable. It is only the ability to link these messages together at long time scales (e.g., hours or days) that threatens location privacy.</p><p>Based on these two observations, we define a relaxed version of the strong unlinkability property:</p><p>Long-term unlinkability. Let t(m) be the time a message m was generated. Any party other than A or B that receives c1 = F (A, B, p1) and c2 = F (A, B, p2) should not be able to determine that the sender or receiver of c1 or c2 were the same if |t(c2) − t(c1)| &gt; I, for some time interval I. In practice, I would be several minutes and may be different for each client-service relationship.</p><p>Tryst achieves this relaxed form of unlinkability, which is sufficient for discovery and binding messages because very few are likely to be generated during any given interval I. Even if an adversary is able to force multiple discovery messages to be generated during one interval, e.g., by jamming the channel to force all clients to reassociate, the ability to link them together is unlikely to be threatening.</p><p>For clarity, we list the cryptographic terminology we use in the subsequent description in <ref type="table" target="#tab_3">Table 2</ref>.</p><p>Bootstrapping. Similar to symmetric key, A and B each have symmetric keys k Enc AB , k M AC AB , k addr AB for constructing messages from A to B (and another set of keys for B to A). They also remember the time they exchanged these keys as T0.</p><p>Temporary unlinkable addresses. A client A and a service B that share a symmetric key can independently compute the same sequence of unlinkable addresses and thus will at any given time know which address to use to send messages to the other. Specifically:</p><formula xml:id="formula_0">addr i AB = AES k addr AB (i) , where i = ⌊(T − T0)/I⌋</formula><p>In other words, addr i AB is a function of the ith time interval after key negotiation. The crucial property we leverage is that for any two values AES k1 (i1) and AES k2 (i2) where i1 񮽙 = i2, it is intractable for a third party to determine whether k1 = k2, even if i1 and i2 are known. Thus, these addresses are unlinkable without knowledge of k addr AB . In practice, B computes addr i AB once at time Ti = T0 + i · I. B maintains a hash table containing the addresses for messages he might receive. At time Ti, he clears the table and inserts the key-value pair (addr i jB , j) for each identity j he has keys for, so that he can anticipate messages sent with these addresses and determine that he should use j's keys to process them. When A wants to send a message to B at time T , he also computes addr i AB . §4.1 discusses how we deal with clock skew.</p><p>Construction. Tryst(A, B, p) is computed as follows <ref type="figure" target="#fig_1">(Fig- ure 2</ref>):</p><p>1. Generate a random key kp.</p><p>2. header ← {s, mac}, where:</p><formula xml:id="formula_1">s = {addr i AB , AES k Enc AB (kp)}, mac = AES-CMAC k M AC AB (s) .</formula><p>header proves to B that A is the sender and B the receiver because only A and B have k Enc AB and k M AC AB . Moreover, it proves to B that it was constructed near the current time T because addr i AB is a cryptographic function of T . This provides authenticity.</p><p>To third parties, mac appears to be random because it is computed over the encryption of random key kp, so neither it nor the encipherment of kp can link it to</p><formula xml:id="formula_2">s = {addr i AB , AES k Enc AB (kp)} mac = AES-CMAC k M AC AB (s) etext = AES-CBC k p1 (p) emac = AES-CMAC k p2 (etext)</formula><p>32 bytes 16 bytes variable 16 bytes other messages. addr i AB is sent "in the clear" and will be used in all messages sent during time interval Ti, but addr i1 AB and addr i2 AB for any i1 񮽙 = i2 are unlinkable, thus providing long-term unlinkability.</p><p>3. ctext ← {etext, emac}, where:</p><formula xml:id="formula_3">etext = AES-CBC k p1 (p) , emac = AES-CMAC k p2 (etext) .</formula><p>kp1 and kp2 are pseudo-random keys derived from kp (e.g., kp1 = kp and kp2 = SHA1128 (kp)). ctext is an encryption of the payload p along with a MAC which, given kp, verifies that the payload was not altered during transmission. We derive two keys from kp so that different keys are used for encryption and MAC. Since kp is random, ctext will be different from previous messages even when an identical payload p was sent before.</p><formula xml:id="formula_4">4. c ← {header, ctext}.</formula><p>The overhead (64-80 bytes per message) is acceptable since discovery and binding messages are sent infrequently.</p><p>Message filtering. Upon reception of such a message, B simply checks his hash table to determine if he has an address addr i AB . If he does, it will be associated with the keys for A, which can be used to verify and decrypt the header. If not, he can discard the message. Once header is decrypted, he obtains kp, which can be used to decrypt and verify ctext to retrieve the original p. In contrast to the straw man mechanisms, this protocol enables devices to discard messages not intended for them efficiently, using hash table lookups instead of costly cryptographic operations.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4">Data Transport: Shroud</head><p>Tryst is insufficient for identifier-free data transport because data messages are neither infrequent nor do they have a narrow interface. Thus, to defend against side-channel analysis, we want strong unlinkability rather than just longterm unlinkability. Shroud maintains this property efficiently by leveraging a key assumption about data transport:</p><p>Connected Communication. Whereas discovery messages are often sent at times when they will not be received, data messages are only sent after a link has been established. Thus, a sender and receiver can assume that, barring message loss, their messages will be received by their intended recipient.</p><p>In effect, this assumption enables Shroud to compute a sequence of unlinkable addresses on a per packet basis, as we will describe shortly.</p><p>Bootstrapping. We bootstrap Shroud with random session keys k Enc s:AB , k M AC s:AB for messages from A to B. These keys are exchanged in SlyFi's authentication messages (see <ref type="figure" target="#fig_0">Figure 1</ref>) and thus are protected by Tryst. For reasons that we discuss in the construction below, the same key k Enc s:AB can be used for both address computation and encryption.</p><p>Per</p><note type="other">-packet unlinkable addresses. The only design choice in Tryst that sacrifices strong unlinkability is the use of the same addr i AB for all packets during time interval i. Thus, we can essentially use Tryst, provided that we can compute addresses addr i AB per packet rather than per time interval. To do this in Shroud, addr i AB is computed as a function of the ith transmission since link establishment: addr i AB = AES k Enc s:AB (i) , where i = transmission number</note><p>Since a connection has been established, B will receive every packet sent by A on this link barring message loss, and, hence, B only needs to compute address i+1 after the receipt of message i; i.e., B computes the address he expects in the next message. Of course, message loss in wireless networks is common, so we would like to be able to tolerate the loss of w consecutive losses for some w. Thus, on receipt of message i, a receiver computes the (i + 1)th to (i + w)th addresses and inserts them all into its hash table (removing all addresses j ≤ i). Note that, except for the first message received (e.g., the association request or reply in SlyFi), which requires the computation of w addresses, only one additional address needs to be computed for each subsequent packet sent to B, unless there are message losses; B performs no address computation for packets destined for other devices that it overhears. §4.2 discusses how we choose w and perform link layer retransmissions.</p><p>Construction. With per-packet unlinkable addresses, we could use the Tryst construction and achieve the desired security properties and filter packets efficiently. However, we can make additional optimizations. Shroud(A, B, p) is computed as follows <ref type="figure" target="#fig_3">(Figure 3</ref> In Tryst, we use a random key to perform the encryption to ensure that the encrypted payload and MAC are unlinkable to previous messages even if their contents are the same. Since each Shroud address is pseudo-random and is used only once, header effectively serves as a random nonce that we can use as an IV to the encryption of the payload. This ensures that etext is unlinkable to previous messages even if their contents are the same and we use the same key k Enc s:AB for encryption. Similarly, we include header in the computation of emac to ensure that it is unlinkable to previous messages even if p is null.</p><note type="other">): 1. header ← addr i AB . Unlike in Tryst, no Shroud address will ever appear in two different messages; thus no one can successfully record and replay them. As a consequence, addr i AB itself proves to B that A sent the message to B and that it was message transmission i, which B expects. This provides authenticity. Each message will have a different address and addresses are strongly unlinkable.</note><note type="other">header = addr i AB etext = AES-CBC k Enc s:AB ,header (p) emac = AES-CMAC k M AC s:AB (header, etext) 16 bytes variable 16 bytes</note><p>3. c ← {header, ctext}.</p><p>We note that addr i AB implies the Ethernet addresses in p so they can be removed. Therefore, Shroud's additional 32 bytes of overhead can, in practice, be reduced to only 15-30 bytes per packet, depending on the 1-16 bytes the PKCS5 padding scheme adds to align etext to 16-byte AES blocks.</p><p>Message filtering. As in Tryst, B determines whether a message is for him by looking up addr i AB in the hash table containing his precomputed addresses. In fact, since the address is located in the same position in both Tryst and Shroud packets, there is no need to distinguish the two message types and a single hash table can be shared by both. The value associated with each address key in the hash table will indicate whether it should be demultiplexed to Tryst or Shroud.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.5">Other Protocol Functions</head><p>Tryst and Shroud make the crucial elements of a link layer protocol-discovery, binding, and data transport-identifierfree, but other protocol functions must be supported as well. In this section, we explain how SlyFi can support these functions without introducing identifiers.</p><p>Broadcast. Shroud supports identifier-free broadcast transmissions in managed mode. Broadcasted frames are encrypted with a key and sequence number that are shared by the AP and all clients on the local network. As in 802.11's managed mode, a client forwards frames to the AP that it wishes the AP to broadcast. In Shroud, the transmission to the AP is protected by the per-client shared key used for unicast transmissions. (A client optionally may divulge his identity to all associated stations by including his source address.) Upon reception at the AP, the frame is decrypted and then re-encrypted with the shared broadcast key. The shared key and current sequence number are managed by the AP and conveyed to each of its clients during association. Although SlyFi currently does not support broadcast key revocation, we believe we can apply a scheme similar to that of 802.11i <ref type="bibr">[6]</ref>; this is is a topic of future work.</p><p>Binding to higher layer identifiers. There is often a need to bind higher layer names to link layer addresses. For example, ARP binds Ethernet addresses to IP addresses. Obviously, we do not want to have to re-establish this binding for every Shroud address change. Instead, we have the AP negotiate with each client a pseudonym address that remains consistent for that session, but that is not sent in actual messages. The client informs the AP of its IP to pseudonym binding whenever its IP address changes. Thus, the AP can answer all ARPs.</p><p>Announcement. Beacons are broadcasted in the clear to announce an 802.11 AP. While SlyFi does not prevent beacons, an AP that wants to hide its presence obviously cannot use them. To discover APs in SlyFi, a client must have the necessary Tryst keys to probe for it. We do not believe this is a hindrance, since existing secure 802.11 networks already require secure out-of-band channels to exchange keys before association.</p><p>Time synchronization. Beacons are also used to convey timestamps so that clients and APs can synchronize their clocks. With synchronized clocks, clients need only turn on their radios at designated times to receive packets when operating in low power modes. Since only clients on the local network need to synchronize their clocks, this information can be encrypted using the broadcast encryption key described above.</p><p>Roaming. Clients sometimes use probes or beacons after association to search for better APs to roam to. Using Tryst to send these probes might be expensive if a client sends them frequently. However, these APs are usually in the same administrative domain and thus could share a broadcast key, which could be used to encrypt these messages instead of using Tryst. In addition, Shroud session state could be migrated between APs in advance, similar to how WPA pre-authentication is performed.</p><p>Coexistence. Our implementation of SlyFi can coexist with normal 802.11 devices because we encapsulate SlyFi messages in management frames that normal 802.11 devices ignore (see §4.3). The medium access protocol is unchanged. <ref type="bibr">2</ref> Thus, SlyFi can be deployed incrementally. In a mixed environment, a SlyFi-enabled client can first search for a SlyFienabled AP using Tryst probes. If no such AP is found, then a client willing to fall-back to a normal 802.11 AP can listen for beacons and associate normally.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">IMPLEMENTATION DETAILS</head><p>This section discusses practical considerations involved in implementing Tryst, Shroud, and our SlyFi prototype.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Tryst: Practical Considerations</head><p>Clock skew.</p><p>In practice A and B will not have perfectly synchronized clocks. To allow for clock skew up to k · I between devices, B should anticipate the addresses that may be used for any messages sent in the time range [T i−k , T i+k ] at time Ti. Thus, he also inserts (or keeps) addr i−k jB , addr i−k+1 jB , . . . , addr i+k jB into the table for all identities j for which he has keys. Note that messages sent by A will still only use the address addr i jB for one time interval of length I. B will simply accept messages with that address for longer.</p><p>Scoped broadcast. A client may want to send the same discovery message to multiple services (e.g., to discover any one of them). To do this, A constructs one header for each intended recipient, but includes the same kp in each header; e.g., he sends {header1, . . . , headerN, ctext}. Hence, any party that can interpret any one header can obtain kp and decrypt the payload. However, each party can only interpret the header intended for them, so the identities of the other parties remain obscured.</p><p>Forward security. One concern is that k addr AB is stored for a long time and if it is compromised, an adversary could compute the addresses of all messages that A ever sent to B. We mitigate this risk by computing a new key each day using a forward-secure pseudorandom bit generator <ref type="bibr" target="#b5">[10]</ref>; i.e., the key for day j: k</p><formula xml:id="formula_5">addr(j) AB ← SHA1128 " k addr(j−1) AB "</formula><p>. Both A and B discard the old key and use the new key for computing addresses. The address computation remains the same, but an adversary that obtains k addr(j) AB would only be able to compute addresses for days j and after.</p><p>Side-channel attacks. If an adversary knows the sender or intended recipient of a Tryst probe, the presence or absence of a reply may reveal additional information. For example, an adversary can replay a probe at another location to see if the recipient responds. However, these attacks can only be performed for the short time interval that an address is valid and can be mitigated by simple countermeasures. For example, since an adversary cannot distinguish the content of a response from any other message, if random delays were added to probe responses, an adversary might lose them in the noise of frequent background traffic. In addition, receivers can cache valid probe and authentication requests that they receive for the duration they are valid and ignore replays of those messages. We did not implement these countermeasures since these attacks assume adversaries already know the sender or intended recipient of a message, which can not be learned from the message's contents alone.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Shroud: Practical Considerations</head><p>Choosing w. w determines the number of consecutive packet losses Shroud can endure. In practice, burst losses of more than 50 packets are extremely rare on usable links <ref type="bibr" target="#b19">[24]</ref> so we use w = 50. A larger burst loss will result in a higher level timeout and require re-establishing the link. The overhead required to maintain these addresses is not prohibitive; even a heavily loaded AP with 256 clients (the max supported by the standard MadWifi driver <ref type="bibr" target="#b1">[3]</ref>) requires only 1MB. Most clients, which only have one association at a time, could easily check message addresses in hardware with no more delay or energy than existing NICs. We show in §5.4 that even software filtering incurs little overhead. acknowledged by the receiver to manage message loss. In principle, link-layer acknowledgments can simply acknowledge the address of the received Shroud packet, since the sender knows the last address used. However, our current implementation is in software and thus is unable to send this ack within the 16 microseconds allotted to it. Therefore, we currently use software acks that selectively acknowledge cumulative windows of data packets. Each acknowledgment and message retry is processed anew by Shroud.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Prototype Implementation</head><p>We implemented SlyFi in C++ using the Click Modular Router <ref type="bibr" target="#b15">[20]</ref>, incorporating Tryst and Shroud with its existing 802.11 implementation (which is by the authors of Roofnet <ref type="bibr">[4]</ref>). Since existing 802.11 NICs will not send frames without proper 802.11 headers, each Tryst or Shroud message is encapsulated in an "anonymous" 802.11 header, i.e., one with constant fields and addresses. NICs are placed in promiscuous mode so that they receive all these frames and perform filtering in software. We use the cryptographic routines in libgcrypt <ref type="bibr">[2]</ref> and ran our software as a Linux kernel module.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">PERFORMANCE EVALUATION</head><p>We evaluate two key areas. First, we examine how quickly we can discover and set up a link with Tryst. A quick link establishment improves usability both by reducing the delay before communication can begin and by preventing noticeable interruptions when roaming between APs. Second, we examine the performance penalty incurred when using Shroud to deliver data traffic. In general, we find that SlyFi performs comparably to 802.11 using WPA and substantially out-performs the straw man mechanisms we discussed.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Comparison Protocols</head><p>We compare our SlyFi implementation to the following baseline protocols and alternatives:</p><p>wifi-open. The baseline implementation of 802.11 without WEP or WPA in Click. SlyFi uses the same components, simply encapsulating the original packets where needed, allowing us to make a direct comparison to a software implementation without our mechanisms.</p><p>wifi-open-driver. The 802.11 implementation in the MadWifi driver/firmware <ref type="bibr" target="#b1">[3]</ref>. We compare to this second baseline since wifi-open has additional overhead when used for data transport, which we discuss in §5.4. Neither wifi-open nor wifi-open-driver meet any of our security requirements.</p><p>wifi-wpa. A baseline implementation of 802.11 with WPA, which provides authentication, message integrity, and confidentiality, but not unlinkability as messages still include Ethernet addresses and network names. We use the standard WPA client and AP implementations on Linux <ref type="bibr">[1]</ref>, which run on top of wifi-open-driver, so wifi-wpa does not incur the overhead mentioned above. We run wifi-wpa using PSK user authentication and CCMP encryption. PSK is the most widely used standard in small private networks. CCMP is comparable to SlyFi's payload encryption, as both are built around AES. However, wifi-wpa performs AES operations using dedicated hardware on the 802.11 NIC, while SlyFi performs it in software. To compensate, we also evaluate SlyFi with simulated hardware we discuss in §5.4.</p><p>public key. The straw man alternative to Tryst for discovery and link setup discussed in §3.1.</p><p>symmetric key. The other straw man alternative to Tryst discussed in §3.2. public key and symmetric key still use Shroud once a link is established (i.e., they only replace Tryst in <ref type="figure" target="#fig_0">Figure 1</ref>). armknecht. A previous 802.11 frame encryption proposal <ref type="bibr" target="#b3">[8]</ref> that is an alternative to Shroud for data transport. 3 Like Shroud, armknecht computes per-packet addresses, but only for the next packet it expects, so it would perform comparably when there is no packet loss or competing traffic. However, a receiver that receives a message without one of its known addresses performs a number of cryptographic operations comparable to symmetric key before discarding it. This is because it treats a packet it does not have an address for as an indication of potential loss and uses these operations to try to recover from it. In contrast, Shroud simply precomputes more addresses to manage loss.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Setup</head><p>We deploy these protocols on a number of Soekris net4801 low-power devices <ref type="bibr">[5]</ref>. These devices have hardware comparable to common 802.11 APs and embedded consumer devices. While laptops have more powerful hardware, we demonstrate that our mechanisms are usable even on more constrained devices. In our experiments, we designate each device as either an AP or a client.</p><p>Each device has a 266 Mhz 586-class Geode processor, 256 MB of RAM, 1 GB of flash storage, and one CM9 Atheros 802.11a/b/g miniPCI card. Each device runs a minimal version of Linux 2.6.16.13. 802.11 frames are sent and received from a raw 802.11 radiotap device created by the standard MadWifi driver. We operate on 802.11a channel 40 to avoid interference from more common 802.11b/g devices. To make a fair comparison, management frames in all protocols are transmitted at the base rate (6Mbps), as is dictated by the 802.11 standard, while data frames are transmitted at the peak rate (54Mbps).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3">Discovery and Link Setup Performance</head><p>To evaluate how long a client would need wait before it can start transferring data, we measure the link setup time, defined as the delay between when a client begins probing for APs and when it can deliver packets on the established link. In all the protocols except for wifi-wpa, packets can be delivered once an association response message is received (see <ref type="figure" target="#fig_0">Figure 1)</ref>. wifi-wpa has an additional key negotiation phase after association.</p><p>The parameters that impact link setup time are: the number of client accounts on an AP, the number of networks that each client probes for, and the amount of background probing traffic that is overheard by APs and clients. Our results show that, in contrast to public key and symmetric key, Tryst has faster link setup times than wifi-wpa and scales as gracefully as wifi-open when varying each of these parameters. Moreover, the cost of periodically computing addresses is trivial. Unless otherwise indicated, each data point presented in this section is the mean of 30 trials.</p><p>Keys per service. An AP maintains one key for each client it has an account for, and the total number of keys can impact link setup time. Real networks manage various numbers of client accounts; e.g., home networks will likely have less than a dozen, while the wireless network at the Intel Research lablets, a fairly small organization, has 721. Carnegie Mellon University's wireless network, which may be representative of a large organization, has 36,837 at the time of this writing.</p><p>3 Our implementation uses AES as the cipher.  Figure 5-CDF of the number of unique network names probed for by each client in three empirical 802.11 traces. <ref type="figure" target="#fig_4">Figure 4</ref> shows the link setup time for a client that sends one probe in search of a nearby AP as we vary the number of keys per AP. Before each probe, the AP has its keys sorted in random order, and thus, the performance of the symmetric key protocol degrades with the number of keys, since it must check a discovery message against all keys until it finds one that successfully validates the MAC on the header. The other protocols have setup times that are independent of the number of keys per AP. Note however, that the public key protocol is still more expensive than all the others, even when the AP has 10,000 keys. Furthermore, although Tryst imposes some overhead over the wifi-open protocol, it has link setup times that are less than wifi-wpa and that, at ∼15 ms, are below the variance in Internet round trip times.</p><p>Probes per client. Since private APs cannot send beacons, a client may need to probe for several different networks to figure out which one is present. In 802.11, these probes usually contain the names of networks with which the client has previously associated. <ref type="figure">Figure 5</ref> shows a cumulative distribution function of the number of unique network names probed for by clients in three wireless traces (described in <ref type="table">Table 1</ref>). While most users probe for a small number of networks, at least 4% of users in all traces probe for more than 10 and some probe for more than 100. <ref type="bibr">4</ref> There-   <ref type="table">Table 3</ref>-Breakdown of link setup time for a client that probes for 5 different networks and an AP with 500 keys. Times are in milliseconds. Each phase corresponds to request/response messages in <ref type="figure" target="#fig_0">Figure 1</ref>, except wpa-key, which involves 2 round trips after association to derive session keys in wifi-wpa.</p><p>fore, it is important that link setup time does not grow substantially with the number of probes. <ref type="figure" target="#fig_6">Figure 6</ref> shows the link setup time as a function of the number of different probes a client sends, which are sent as fast as possible. The number of keys per AP is fixed at 500. For a fair comparison, Tryst sends a separate message for each probe instead of using scoped broadcast (discussed in §3.3). We omit the line for wifi-wpa because the standard probing behavior is different and incurs more delays. If it also sent probes as fast as possible, it would have scaling behavior similar to the wifi-open line since the probes they send are the same. Although all protocols scale with the number of probes sent, as there is overhead in processing them and limited bandwidth in the medium, the slopes of the two straw man protocols are steeper, indicating that they incur more overhead per probe. The slopes of the Tryst and wifi-open lines are similar, and both have setup times of at most ∼50 ms even when clients send 50 probes.</p><p>Performance breakdown. <ref type="table">Table 3</ref> shows the breakdown of link setup time for clients that send 5 probes and APs with 500 keys. The public key protocol spends most of its time in the first two phases, since it must process most public key encryptions, decryptions, and signature checks here. These operations are two orders of magnitude slower than the symmetric key analogs. Nonetheless, the symmetric key protocol still spends significant time in the probing phase, because when the AP first receives a probe, it may try to verify the MAC with all its keys. Subsequent phases are faster because both the client and the AP re-sort their keys in MRU order, so the expected number of keys they must try before finding the right one decreases appreciably. Figure 7-CDF of background probe and authentication messages observed each second where discovery was taking place in each of three 802.11 traces. We only count times when there was at least one probe (i.e., times when discovery was taking place).</p><p>Tryst has similar performance to the symmetric key protocol during the last three phases because the number of cryptographic operations is identical. However, the first phase is much faster because the AP looks up the address in a hash table to determine which key to use to verify the message. The open authentication and association phases take slightly longer because they involve computing the initial w Shroud addresses. Even when performing these operations, in addition to standard 802.11 processing, the time it takes for SlyFi using Tryst to setup a link is less than 10 ms more than that of wifi-open, which provides no authentication or confidentiality. Moreover, it is faster than wifi-wpa. <ref type="bibr">5</ref> Note that if a client did not know the particular wireless frequency a network was located on, it would spend more time in the probing phase because it would have to wait on each channel to see if a probe response arrives. This waiting time is configured to be 20-200 ms in 802.11.</p><p>Background probing traffic. The previous experiments assumed no ambient background traffic during the link setup process. However, due to the ad hoc nature of real wireless deployments, stations and APs often overhear messages that are not destined for them. For example, <ref type="figure">Figure 7</ref> shows the rate of probe requests, responses, and authentication messages observed by one monitoring point. <ref type="bibr">6</ref> Although the ambient message rate is generally fairly low, there are times when the rate is over 100 messages per second, due to many clients performing discovery at once. Thus, it is crucial that clients and APs be able to discard these messages quickly.</p><p>To evaluate how well SlyFi can manage background probe and authentication messages, we examine a client's link setup time as a function of such traffic. To do this, we introduce a third machine that sends background messages at a specified rate destined neither for the client or the AP. These background messages are encapsulated in the protocols we compare, but we precompute them so that their generation  is able to maintain the specified rate. Each protocol queues up to 10 messages (drop tail) if it is busy processing and each client request is retransmitted once per second. We consider a link setup attempt to fail if it does not complete in 30 seconds. The client probes once for an AP with 500 keys. 7 <ref type="figure" target="#fig_8">Figure 8</ref> shows the percentage of link setup attempts that failed. Due to the processing required by the public key and symmetric key protocols in order to determine whether a message is destined for the receiver, each begins to fail when the background message rate grows. No attempts fail when using Tryst or wifi-open. We omit the line for wifi-wpa because its message retry behavior is different. <ref type="figure" target="#fig_9">Figure 9</ref> shows the link setup times for the attempts that succeeded. Note that while the symmetric key protocol is able to cope with message rates of up to 100 messages/second before it begins to fail, its link setup times grow to several seconds, and impact perceived performance, even when the rate is 50 messages/second.</p><p>Contention for the medium causes Tryst, wifi-open, and wifi-wpa to each have link setup times that grow slightly as the background message rate increases, but their scaling  behavior is gradual and roughly consistent. Tryst's ability to discard background messages quickly enables it to scale gracefully. This property is important not only for dealing with ambient discovery traffic, but also for mitigating the impact of malicious denial of service attacks. With the public key and symmetric key protocols, a malicious device only needs to send a small number of messages to prevent a client from setting up a link.</p><p>Address update time. At the beginning of each time interval, a Tryst node precomputes the message addresses it expects to receive to enable quick message filtering. <ref type="table" target="#tab_6">Ta- ble 4</ref> shows the time it takes to compute these addresses and update the hash table as we increase the number of keys a device holds. A node computes two addresses per time interval, per key (one for probes and one for authentication messages). Clients, which are unlikely to have more than 100 keys, would spend only a few milliseconds each time interval to update addresses, and time intervals would likely be at least several minutes. Even APs with 10,000 clients would spend less than 1 second.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.4">Data Transport Performance</head><p>We now examine how well Shroud performs at delivering data packets. We begin with a description of microbenchmarks that break down how long Shroud takes to send, filter, and receive packets. Then we present an analysis of packet delivery latency and throughput when a SlyFi client and AP are communicating in isolation. Finally, we look at performance in the face of background traffic, and present results describing achievable throughput both as the number of clients managed by the AP and the amount of competing traffic varies.</p><p>Simulated hardware encryption. Shroud's cryptography operations are implemented in software, which adversely affects performance. To understand how Shroud would perform with hardware support, we simulate the processing times of that hardware. As a result, we provide measurements both for the software-only version, shroud-sw, as well as for the version with hardware simulation, shroud-hw.</p><p>Since both wifi-wpa and Shroud use AES to encrypt and MAC packets, we use wifi-wpa's processing times as an estimate for shroud-hw. <ref type="bibr" target="#b3">8</ref> We estimate wifi-wpa's cryptographic processing time (including I/O) as the difference in round trip ping delays between wifi-wpa and wifi-open-driver. Measurements suggest the time to encrypt a 1500 byte ICMP packet is ∼16 usec and the time to encrypt a payload-free packet is ∼14 usec. I/O overhead dominates, but there is a small linear scaling factor as the packet size increases. Neither encryption nor MAC computation are parallelizable in Shroud, whereas CCMP's encryption may be parallelized in hardware. Thus, we conservatively estimate that shroud- Table 5-Breakdown of processing times (see §3.4) for 1500 byte packets for shroud-sw (sw) and shroud-hw (hw). All times are in microseconds. Numbers in parentheses are numbers of address computations.</p><p>hw would take 14 usec to encrypt a pair of addresses and 32 usec to encrypt and MAC packet payloads. To simulate these times, we modify our code to idle-wait for these times instead of computing the cryptographic operations in software. We note that shroud-hw still includes the actual software processing time of all non-AES operations.</p><p>Micro-benchmarks. <ref type="table">Table 5</ref> breaks down the time to send, filter, and receive Shroud messages. On a busy network, a packet received by a client is often intended for someone else, so filtering packets quickly is imperative. The filter column shows that shroud-hw's filtering time (32 usecs) is much faster than the theoretical minimum packet transmission time in 802.11a for a 1500 byte packet (∼225 usecs), suggesting that a receiver could filter packets faster than the medium could supply them. Sender-side processing of a 1500 byte packet, shown in the send column (215 usec), also edges out the time to transmit it, and thus, shroud-hw should be capable of supporting 802.11a's line speed. Receiver-side processing (the receive column) from the radio takes 407 usec, which is greater than the theoretical time to transmit, but still reasonable, since 802.11 rates in practice are much slower (e.g., see <ref type="figure" target="#fig_0">Fig- ure 10)</ref>. When packets are lost, additional address computations must be performed after a reception. A reception following the maximum 49 packet burst loss (for w = 50) requires Shroud to compute and update 50 new addresses. This takes 2003 usec compared to 117 usec for a single address update (the case with no loss).</p><p>The cryptographic operations are much slower when implemented in software than they are in hardware, and thus the performance of shroud-sw is significantly below line speed. Regardless, we present these results to characterize our proofof-concept implementation that can be used today to protect privacy. Obviously, an engineering effort is required to make use of hardware cryptography.</p><p>Throughput and latency.  pared to the 0.71 Mbps degradation from running wifi-wpa. Since both Shroud and wifi-wpa use some non-parallelizable cryptographic operations, the relative performance degradation increases with packet size. shroud-sw experiences a much larger drop in throughput, but still provides a functional link (3.73 Mbps). <ref type="figure" target="#fig_0">Figure 11</ref> presents round trip time measurements using ping. For 1500 byte packets, two packet payload encryptions and decryptions take ∼60 usec in wifi-wpa and ∼130 usec in shroud-hw; the extra time is due to address encryption. We believe the sudden marked increase in shroud-sw between 300 and 400 byte packets is due to an inefficiency in the Click runtime. 9</p><p>Background traffic. Shroud's design is motivated by the requirement that background traffic must be filtered efficiently. To study how well Shroud filters packets, we run an experiment in which a client, C1, sends packets as fast as possible to an access point, AP1. Nearby, we generate background traffic by having another client, C2 send traffic to another AP, AP2. We measure the throughput at AP1. Since the number of keys AP1 manages (i.e., number of associations) and the amount of background traffic both affect throughput, we vary both independently. <ref type="figure" target="#fig_0">Figure 12</ref> shows throughput measured at C1 for both the software implementation and hardware simulation of Shroud 9 Short packets get through the Click data path without a context switch from the OS, while longer packets do not.  and armknecht, as the number of keys at AP1 is varied. Since Shroud can filter background packets with just a hash table lookup, its achievable throughput is independent of the number of keys. However, armknecht's performance gets progressively worse as the number of keys increases. This is because clients and APs running armknecht must try every key they have before discarding background packets. <ref type="figure" target="#fig_0">Figure 13</ref>, which shows throughput achieved as a function of the competing flow rate, depicts a similar effect. As the amount of background traffic increases, throughput decreases for both Shroud and armknecht, but considerably more so for armknecht. E.g., with 10 Mbps of background traffic, throughput is 31% lower for shroud-hw than it is with no competing traffic, but it is 72% lower for armknecht-hw. This reduction results from a combination of two effects: First, background traffic reduces the availability of the channel, as is evident in the throughput reduction (26%) of our baseline, wifi-open, which performs no cryptographic operations. This affects Shroud and armknecht similarly. Second, background traffic requires work to filter, which is much more expensive in armknecht.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.">RELATED WORK</head><p>Private Discovery. We presented the case for private service discovery in a previous workshop paper <ref type="bibr" target="#b17">[22]</ref>. Although we sketched some of the challenges in designing Tryst in <ref type="bibr" target="#b17">[22]</ref>, this paper is the first to present its cryptographic design and implementation.</p><p>SmokeScreen <ref type="bibr" target="#b8">[13]</ref> is a system that privately announces your presence to your friends. Its protocol also uses symmetric key cryptography to compute temporary addresses. However, it is not a general mechanism for packet delivery and is not authenticated like Tryst. Furthermore, since SmokeScreen uses a hash-chain to compute subsequent addresses, a device that is asleep for a while would have to compute every intermediate address before obtaining the current address to use. In contrast, Tryst simply enciphers a unique counter value based on the time and thus requires only a single cryptographic operation to compute the current address. SmokeScreen tolerates this extra expense because its addresses change very infrequently.</p><p>As discussed in §3.1, <ref type="bibr" target="#b2">[7]</ref> presented a public key protocol for private authenticated discovery. Since symmetric keys are already often established between wireless clients and services, we argue that a more efficient protocol based on symmetric cryptography would suffice.</p><p>Encrypted 802.11 Headers. Armknecht et al. <ref type="bibr" target="#b3">[8]</ref> propose a way to encrypt the 802.11 header that tries to address many of the same goals as Shroud. Although they compute per-packet addresses like Shroud, there are four key differences that contrast our work. First, to deal with message loss their proposal requires a receiver to try every key it has to decode packets with no matching address. Shroud instead maintains the w subsequent addresses so such a scenario is extremely unlikely. As our evaluation demonstrated, Shroud is substantially more efficient in the face of competing background traffic. Second, unlike SlyFi, their proposal is not a complete link layer, as it does not address service discovery, broadcast, higher layer bindings, etc. Finally, unlike their proposal, we have demonstrated SlyFi with a real implementation.</p><p>Singelée and Preneel <ref type="bibr" target="#b22">[27]</ref> also propose an addressing scheme similar to Shroud using a hash-chain instead of an AES counter. Unlike SlyFi, this proposal is not a complete link layer and it did not include an implementation.</p><p>Pseudonyms. Gruteser et al. <ref type="bibr" target="#b11">[16]</ref> and <ref type="bibr">Jiang et al. [18]</ref> present 802.11 pseudonym schemes where users change MAC addresses each session or when idle. SlyFi enables address changes per packet, which are often desired to mitigate profiling of packet sequences. In addition, unlike SlyFi, neither scheme obscures names in discovery or link setup messages.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.">CONCLUSION</head><p>We presented the design and evaluation of SlyFi, an identifier-free 802.11 link layer that obfuscates all transmitted bits, including addresses. We showed how a link layer could use two mechanisms, Tryst and Shroud, to perform this obfuscation while still achieving efficient discovery, link establishment, and data transport, and without sacrificing other crucial link layer functions such as higher layer name binding. Our evaluation showed that SlyFi performs comparably to WPA and performs substantially better than previous techniques.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.">ACKNOWLEDGMENTS</head><p>We thank our shepherd Ramón Cáceres and the anonymous reviewers for their comments and suggestions. This</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 -</head><label>1</label><figDesc>Figure 1-The SlyFi protocol.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 -</head><label>2</label><figDesc>Figure 2-Tryst packet format.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>2 .</head><label>2</label><figDesc>ctext ← {etext, emac}, where: etext = AES-CBC k Enc s:AB ,header (p) , emac = AES-CMAC k M AC s:AB (header, etext) .</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 3 -</head><label>3</label><figDesc>Figure 3-Shroud packet format.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 4 -</head><label>4</label><figDesc>Figure 4-Association delay as the number of keys per AP varies. The client probes for 1 AP. Error bars indicate one standard deviation.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 6 -</head><label>6</label><figDesc>Figure 6-Link setup time as the number of probes each client sends varies. The AP has 500 keys. Error bars indicate one standard deviation.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Figure 8 -</head><label>8</label><figDesc>Figure 8-Percentage of 100 link setup attempts that fail to complete within 30 seconds as we vary the rate of background probe traffic not destined for the target AP. The client probes for one AP and the AP has 500 keys.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Figure 9 -</head><label>9</label><figDesc>Figure 9-Link setup time for successful attempts as we vary the rate of background probe traffic not destined for the target AP. Error bars indicate one standard deviation.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head>Figure 10 -</head><label>10</label><figDesc>Figure 10-Throughput comparison of UDP packets when transmitting at 54 Mbps for 30 seconds. Each point is the average of 50 runs.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_11"><head>Figure 11 -</head><label>11</label><figDesc>Figure 11-Comparison of round trip times of ICMP ping messages for variously sized packets. Each point is the average of 1000 pings; pings that experienced link-layer packet loss, or re-keying delays (in the case of wifi-wpa), were removed.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_12"><head>Figure 12 -</head><label>12</label><figDesc>Figure 12-Effect of association set size on achievable throughput when exposed to 5 Mbps of background traffic for Shroud's and armknecht's software implementation and hardware simulation. Each run is 30 seconds; each point is the average of 50 runs.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_13"><head>Figure 13 -</head><label>13</label><figDesc>Figure 13-Effect of background traffic on achievable throughput from a client to an AP. The APs association set includes 50 keys. Each run is 30 seconds; each point is the average of 50 runs.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3" validated="false"><head>Table 2 -</head><label>2</label><figDesc></figDesc><table>Cryptographic terminology used in  §3.3- §4. All 
keys are 128 bits. When a key k is only used once, an IV 
is not required for AES-CBC k,i (m), so we abbreviate it as 
AES-CBC k (m). We use PKCS5 padding for m when it is of 
variable length. 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_6" validated="false"><head>Table 4 -The mean time to update Tryst addresses for a single time interval as we vary the number of keys.</head><label>4</label><figDesc></figDesc><table></table></figure>

			<note place="foot" n="1"> In practice, we would still use RSA for faster signatures; we just require each party to have both ElGamal and RSA key pairs.</note>

			<note place="foot" n="2"> We do not yet support RTS/CTS because our software implementation is not fast enough to perform filtering at the timescale required, but we note that RTS/CTS is rarely used in actual managed networks.</note>

			<note place="foot" n="4"> Users in the SIGCOMM trace probed for more networks because each SIGCOMM AP had a different network name and the network often was unavailable, prompting clients to send probes for names deeper into their list of networks. We ignored broadcast and random network names.</note>

			<note place="foot" n="5"> We note that wifi-wpa incurs an unnecessary delay in the open authentication phase, but since the bulk of the time is spent in wpa-key for key computation and exchange, removing this delay would not change the ranking of the total link setup times. 6 The UCSD trace merged observations from multiple monitoring points, so it observes more traffic at any given time. The OSDI trace contains more users than the SIGCOMM trace and thus observed a higher rate of traffic.</note>

			<note place="foot" n="7"> Note that in this experiment, the client and AP drivers ran in user level, rather than in the kernel, because when the straw man protocols become overloaded with message processing, the Linux kernel became unresponsive to experimental commands. This imposes a slight overhead on message processing, but is insubstantial compared to each protocol&apos;s relative performance.</note>

			<note place="foot" n="8"> wifi-wpa uses AES counter mode for payload encryption and AES-CBC for MAC computation, while Shroud uses AES-CBC mode for payload encryption and CMAC (a relative of AES-CBC mode) for the MAC. Counter mode is parallelizable, while AES-CBC is not.</note>
		</body>
		<back>

			<div type="acknowledgement">
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">is funded by the National Science Foundation through grant numbers NSF-0721857 and NSF-0722004, and by the Army Research Office through grant number</title>
		<idno>DAAD19-02- 1-0389</idno>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Madwifi</forename><surname>Driver</surname></persName>
		</author>
		<ptr target="http://madwifi.org/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Abadi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Fournet</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Private authentication. Theor. Comput. Sci</title>
		<imprint>
			<biblScope unit="volume">322</biblScope>
			<biblScope unit="page" from="427" to="476" />
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Who said that? privacy at link layer</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Armknecht</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Girão</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Matos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">L</forename><surname>Aguiar</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">INFOCOM</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Key-privacy in public-key encryption</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Bellare</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Boldyreva</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Desai</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pointcheval</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ASIACRYPT</title>
		<imprint>
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Forward-security in private-key cryptography</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Bellare</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yee</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Topics in Cryptology -CT-RSA&apos;03</title>
		<imprint>
			<date type="published" when="2003" />
			<biblScope unit="volume">2612</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">CRAWDAD data set microsoft/osdi2006 (v</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Chandra</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Mahajan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Padmanabhan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Zhang</surname></persName>
		</author>
		<imprint>
			<biblScope unit="page" from="2007" to="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title level="m" type="main">Jigsaw: solving the puzzle of enterprise 802</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y.-C</forename><surname>Cheng</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Bellardo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">;</forename><surname>Benko</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Snoeren</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">C</forename><surname>Voelker</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">M</forename><surname>Savage</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename></persName>
		</author>
		<imprint>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
	<note>11 analysis. SIGCOMM CCR</note>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Flexible privacy controls for presence-sharing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><forename type="middle">P</forename><surname>Cox</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Dalton</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Marupadi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Smokescreen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">MobiSys</title>
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">The second-generation onion router</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Dingledine</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Mathewson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Syverson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Tor</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">USENIX Security</title>
		<imprint>
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Can Ferris Bueller Still Have His Day Off? Protecting Privacy in an Era of Wireless Devices</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Greenstein</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Gummadi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Pang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">Y</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Kohno</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Seshan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Wetherall</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">HotOS XI</title>
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Enhancing location privacy in wireless LAN through disposable interface identifiers: A quantitative analysis</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Gruteser</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Grunwald</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM MONET</title>
		<imprint>
			<biblScope unit="volume">10</biblScope>
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">A framework for location privacy in wireless networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y.-C</forename><surname>Hu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wang</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><forename type="middle">J</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGCOMM Asia Workshop</title>
		<imprint>
			<date type="published" when="2005-04" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Preserving location privacy in wireless LANs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Jiang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y.-C</forename><surname>Hu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">MobiSys</title>
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">RFID security and privacy: A research survey</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Juels</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Journal on Selected Areas in Communication</title>
		<imprint>
			<biblScope unit="volume">24</biblScope>
			<date type="published" when="2006-02" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">The click modular router</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Kohler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Morris</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Jannotti</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">F</forename><surname>Kaashoek</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Computer Systems</title>
		<imprint>
			<biblScope unit="volume">18</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="263" to="297" />
			<date type="published" when="2000-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">802.11 user fingerprinting</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Pang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Greenstein</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Gummadi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Seshan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Wetherall</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">MobiCom</title>
		<imprint>
			<date type="published" when="2007-09" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<title level="m" type="main">Tryst: The case for confidential service discovery</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Pang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Greenstein</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Mccoy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Seshan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Wetherall</surname></persName>
		</author>
		<editor>HotNets</editor>
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Robust location distinction using temporal link signatures</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Patwari</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">K</forename><surname>Kasera</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">MobiCom</title>
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Measurement-based models of delivery and interference in static wireless networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Reis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Mahajan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Rodrig</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Wetherall</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Zahorjan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SIGCOMM CCR</title>
		<imprint>
			<biblScope unit="volume">36</biblScope>
			<biblScope unit="issue">4</biblScope>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<monogr>
		<title level="m" type="main">CRAWDAD data set uw/sigcomm2004</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Rodrig</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Reis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Mahajan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Wetherall</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Zahorjan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Lazowska</surname></persName>
		</author>
		<idno>v. 2006-10-17</idno>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Devices that tell on you: Privacy trends in consumer ubiquitous computing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">S</forename><surname>Saponas</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Lester</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Hartung</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Agarwal</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Kohno</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">USENIX Security</title>
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<monogr>
		<title level="m" type="main">Location privacy in wireless personal area networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Singelée</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Preneel</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2006" />
			<pubPlace>In WiSe</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Timing analysis of keystrokes and timing attacks on ssh</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">X</forename><surname>Song</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Wagner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Tian</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">USENIX Security</title>
		<imprint>
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">The AES-CMAC algorithm</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Song</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Poovendran</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Iwata</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">RFC</title>
		<imprint>
			<biblScope unit="volume">4493</biblScope>
			<date type="published" when="2006-06" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Statistical identification of encrypted web browsing traffic</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Q</forename><surname>Sun</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">R</forename><surname>Simon</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y.-M</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Russell</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><forename type="middle">N</forename><surname>Padmanabhan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Qiu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Security and Privacy</title>
		<imprint>
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<monogr>
		<title level="m" type="main">Security associations in personal networks: A comparative analysis</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Suomalainen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Valkonen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Asokan</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename></persName>
		</author>
		<idno>NRC-TR-2007-004</idno>
		<imprint>
			<date type="published" when="2007-01" />
			<pubPlace>Nokia Research Center</pubPlace>
		</imprint>
	</monogr>
<note type="report_type">Tech. Rep.</note>
</biblStruct>

<biblStruct xml:id="b27">
	<monogr>
		<title level="m" type="main">Wireless LAN location sensing for security application</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Tao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Rudys</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Ladd</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Wallach</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">Language identification of encrypted VoIP traffic: Alejandra y Roberto or Alice and Bob</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Wright</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Ballard</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Monrose</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Masson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">USENIX Security</title>
		<imprint>
			<date type="published" when="2007-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">On inferring application protocol behaviors in encrypted network traffic</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Wright</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Monrose</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Masson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Machine Learning Research</title>
		<imprint>
			<date type="published" when="2006-08" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
