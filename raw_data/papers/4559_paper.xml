<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2019-03-26T16:53+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Sink Tree-Based Bandwidth Allocation for Scalable QoS Flow Set-Up</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">James</forename><surname>Lembke</surname></persName>
							<email>jalembke@mtu.edu</email>
							<affiliation key="aff0">
								<orgName type="department" key="dep1">£ ¤ IBM</orgName>
								<orgName type="department" key="dep2">Department of Computer Science Houghton</orgName>
								<orgName type="institution">Michigan Technological University</orgName>
								<address>
									<postCode>49931</postCode>
									<region>Rocester MN, MI</region>
									<country>USA, USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">¢</forename></persName>
							<affiliation key="aff0">
								<orgName type="department" key="dep1">£ ¤ IBM</orgName>
								<orgName type="department" key="dep2">Department of Computer Science Houghton</orgName>
								<orgName type="institution">Michigan Technological University</orgName>
								<address>
									<postCode>49931</postCode>
									<region>Rocester MN, MI</region>
									<country>USA, USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Byung</forename><forename type="middle">Kyu</forename><surname>Choi</surname></persName>
							<email>bkchoi@mtu.edu</email>
							<affiliation key="aff0">
								<orgName type="department" key="dep1">£ ¤ IBM</orgName>
								<orgName type="department" key="dep2">Department of Computer Science Houghton</orgName>
								<orgName type="institution">Michigan Technological University</orgName>
								<address>
									<postCode>49931</postCode>
									<region>Rocester MN, MI</region>
									<country>USA, USA</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Sink Tree-Based Bandwidth Allocation for Scalable QoS Flow Set-Up</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<note>¥</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Although the Differentiated Services architecture supports scalable packet forwarding based on aggregate flows, the detailed procedure of Quality of Service (QoS) flow setup within this architecture has not been well established. In this paper we explore the possibility of a scalable QoS flow setup using a sink-tree paradigm. The paradigm constructs a sink tree at each egress edge router using network topology and bandwidth information provided by a QoS extended version of Open Shortest Path First (OSPF). Simulation results are very encouraging in that our methodology requires significantly less communication overhead in setting up QoS flows compared to the traditional per-flow signaling-based methodology while still maintaining high resource utilization.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Although QoS can be delivered in many ways, two approaches have been recognized as representative solutions: Integrated Services (IntServ) <ref type="bibr" target="#b3">[4]</ref> and Differentiated Services (DiffServ) <ref type="bibr" target="#b2">[3]</ref> architectures. While both edge and core routers are supposed to participate in the QoS flow set-up procedure of the IntServ, the Bandwidth Broker (BB) model proposed in the DiffServ architecture is supposed to be in charge of all QoS flow set-up activities on behalf of core routers. Core routers in the DiffServ architecture, therefore, could be free of burdensome online computation of QoS routing, resource reservation, admission control, and associated signaling activities depending on the BB's capability. In order to truly support the scalability of the DiffServ architecture, the primary benefit of it, the control plane needs to be scalable as the data plane scalability has been significantly improved by aggregated packet forwarding. In this context, the BB model plays a significant role in providing scalability of the control plane in the DiffServ architecture.</p><p>The BB's activities can be classified into two categories: intra-domain and interdomain. Investigating intra-domain scalability first may be a good approach because a scalable design of BB for intra-domain is likely to lead to scalable inter-domain activities. This paper addresses the control plane's scalability in a single domain of DiffServ architecture, therefore.</p><p>In general, two design options are imaginable: centralized and distributed. Centralized approaches could easily be a bottleneck of QoS flow set-up activities since a single centralized computing entity will be rather easily overwhelmed by a burst of QoS flow set-up activities. Moreover, a centralized BB could be a single point of failure. Distributed approaches, also, have its own disadvantage of information synchronization problem because poorly synchronized network resource information at distributed BBs could cause wrong admission decisions. One of the surest ways to guarantee a minimum overhead of QoS flow set-up activities, in our view, is to let each ingress edge router be able to conduct QoS routing, resource reservation, and admission control without further consulting any core routers on the selected path. We believe that this provides a minimum overhead because QoS flow set-up requests are handled only at the ingress edge routers. On the other hand, treating QoS flow set-up requests only at the ingress router raises another challenge of maintaining the same global view of network resources at all edge routers. This paper proposes a methodology to the distributed BB design problem. The methodology is based on what we call a sink tree paradigm. The paradigm constructs a sink tree at each egress edge router using network topology and bandwidth information provided by a QoS extended version <ref type="bibr" target="#b0">[1]</ref> of OSPF. In this paradigm, QoS routing, resource allocation, and admission control are all done at ingress edge routers in a way that QoS flow set-up overhead is minimized.</p><p>This paper is organized as follows. In Section 2 we briefly discuss recent work on this research problem. Section 3 describes our model and the sink tree paradigm for a scalable QoS flow set-up. The protocols and algorithms for an implementation of the solution are described in Section 4. The performance of our approach is evaluated in Section 5. Conclusions and future work are given in Section 6.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Related Work</head><p>Setting up QoS flows has many components such as QoS path selection, resource reservation, admission control, and associated signaling. Scalable flow set up, therefore, requires that each component is scalable. Although each component needs to be investigated for thorough understanding of the scalability problem, we limit our scope, in this paper, to the BB design aspect of all components because the BB is the entity that is supposed to be directly in charge of QoS flow set-up procedures.</p><p>Interestingly, a centralized BB model is assumed either implicitly or explicitly by most recent work on BB <ref type="bibr" target="#b6">[7]</ref>, <ref type="bibr" target="#b7">[8]</ref>, <ref type="bibr" target="#b8">[9]</ref>, <ref type="bibr" target="#b9">[10]</ref>, <ref type="bibr" target="#b12">[13]</ref>. In other words, one logical BB per domain is assumed. Many aspects of the centralized BB model have been studied. Efficient admission control algorithms and resource management are proposed in <ref type="bibr" target="#b6">[7]</ref>based on the virtual time reference system. Inter-domain signaling overhead is studied in <ref type="bibr" target="#b7">[8]</ref>. Some implementations are available, for example, in <ref type="bibr" target="#b8">[9]</ref>, <ref type="bibr" target="#b12">[13]</ref>. While most of these work consider hard resource reservation in the DiffServ architecture, there has been a continued effort for providing an efficient flow set up procedure for the DiffServ architectures within the framework of the IntServ architectures <ref type="bibr" target="#b1">[2]</ref>. In this approach, a DiffServ-capable administrative domain is considered as a network element.</p><p>There have been some work addressing edge-limited admission control, for example, <ref type="bibr" target="#b13">[14]</ref>. The fundamental difference between this class of work and ours is that they rely on online measurement while ours actively re-allocates resources.</p><p>Our approach is different from all existing approaches mentioned above. In our approach, the BB is completely distributed to all edge routers. Each edge router acts as an autonomous BB. Consequently, path selection, resource reservation, and admission decision are all done at edge routers without incurring any further communication with core routers.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Sink Tree Paradigm for the Edge-Limited Flow Set-Up Model</head><p>Model: Our approach is to distribute the BB completely to the boundary of the network. This permits every edge router to act like a BB. Importantly, since each edge router is virtually a BB, any QoS flow set-up request is completely handled at the edge router where the request arrives. By locating the BB at each edge router, we limit QoS flow setup activities and associated signaling to edge routers. This necessitates that 1) the whole edge-to-edge path is determined at each edge router, 2) resource reservation on the whole path is done at each edge router, and, 3) admission decision is made at each edge router. Finally, we assume that the total amount of bandwidth for QoS flows,</p><formula xml:id="formula_0">¢ ¡ ¤ £ ¦ ¥</formula><p>, is fixed in a single domain.</p><p>Paradigm: Our solution to distributing the BB is to 1) select only one path for every possible pair of source and destination routers in a given network in a way that all paths having the same destination form a tree, with the destination as the root, 2) allocate resources to each path in an exclusive fashion, effectively partitioning the resources among trees, 3) maintain all information needed for QoS flow set-up at each edge router, and then 4) dynamically re-allocate resources according to traffic demands. <ref type="figure" target="#fig_0">Figure 1</ref> (a) illustrates the sink tree paradigm. In this example, a simple logical sink tree is given with seven routers (N1, N2, N3, N4, N5, N6, and N7). Considering the only QoS flows destined to N7, there are four ingress routers (N1, N2, N3, and N4), two core routers (N5 and N6), and one egress router N7. <ref type="bibr" target="#b2">3</ref> The core routers N5 and N6 do not handle flow set-up requests. 'B' indicates the bandwidth units allocated to the link for the QoS-guaranteed flows. 'B=10' means that Edge 4 (N1, N5) can accommodate 10 QoS flows. For example, Edge (N5, N7) accommodates 30 QoS flows. 'B=30' on Edge (N5, N7) is in fact the sum of 'B=10' and 'B=20' of the descendant edges. Likewise 'B=70' is the sum of 'B=30' and 'B=40' of the descendant edges. Each ingress router, in the paradigm, keeps track of three parameters: path to the egress router, bandwidth available on the path, and the worst-case edge-to-edge delay of the path. When a flow set-up request arrives destined to N7, at N1 for example, the ingress router N1 can immediately make the admission decision. In other words, at each ingress router 1) a unique path for QoS routing is readily available, 2) bandwidth available on the path is readily known, and 3) the worst-case edge-to-edge delay for the path is readily available. without any further on-line computation. As another example, when Edge (N1, N5) has 10 QoS flows and Edge (N2, N5) has 20 QoS flows, a new request at either N1 or N2 can safely be rejected. In all cases, as long as flows destined to N7 are considered, N5, N6, and N7 are never involved in the flow set-up activities because the activities are limited to the ingress routers only. Based on our analysis, we claim that as long as the sink tree paradigm holds, QoSrouting, resource-reservation, and admission-control, become trivial because 1) QoSrouting is now replaced by a simple QoS path table look-up, 2) resource-reservation is already done at off-line resource allocation time, and, 3) admission-control is done by delay table look-up of the path and the available bandwidth checking. In this paradigm, the path selection or QoS routing is done in an explicit source-routing fashion: ingress router maintains a complete list of paths between itself and all egress routers. Every router maintains a QoS routing table that is indexed by a pair of source and destination routers. Given network with a number of edge routers, the maximum number of entries of the QoS routing table is limited by</p><formula xml:id="formula_1">¢ ¡ £ ¥ ¤ § ¦ © ¨</formula><p>at any router. As long as such a set of sink trees of bandwidth allocation can be found for a given network, i.e., one sink tree at each egress router, the sink tree naturally provides a methodology for edge-limited scalable QoS flow set-up.</p><p>In order for admission control to be replaced by simple delay table look-up at edge routers, all possible values of delay must be pre-calculated for all possible paths from an edge router to any destination. We developed an efficient methodology in which delay is calculated off-line for all predefined levels of bandwidth utilization at each link server on the selected path. Unless otherwise mentioned, the off-line delay computation methodology proposed in <ref type="bibr" target="#b5">[6]</ref> is used throughout this paper.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Heuristic Approach to the Sink Tree Paradigm</head><p>Because finding a set of sink trees is NP-hard <ref type="bibr" target="#b11">[12]</ref>, we construct sink trees with a set of heuristic algorithms. Once a sink tree is constructed at each egress node the sink tree needs to change at run-time in order to reflect the traffic pattern change into the trees while still maintaining the sink tree paradigm. By 'reflecting' we mean that we re-allocate bandwidth among trees for better resource utilization because at run-time some trees may be congested while others are not. The topology of the tree does not change with re-allocation, however. In our approach, the re-allocation is initiated by the ingress routers. The major source of run-time overhead of the sink tree paradigm, therefore, depends on the re-allocation activities: re-allocation decision algorithms, and re-allocation protocols. Here, due to the space limit, we present an abstract of the bandwidth (re)allocation activities. Detailed description of the algorithms and protocols can be found in <ref type="bibr" target="#b10">[11]</ref>. Network Resource Monitoring: We make use of QOSPF <ref type="bibr" target="#b0">[1]</ref> for network resource monitoring purposes. The link state advertisements in the QOSPF delivers crucial informa-tion that is necessary to construct sink trees. This information is topology database and network resource, i.e., bandwidth. We assume that all routers run a same version of QOSPF.</p><p>Initial-Allocation: For practical purposes, we assume that the initial sink tree construction is activated by a human user on a router. Once a router constructs a set of sink trees, the tree topology information will be disseminated to all routers. All routers will activate the sink trees at a designated time. For initial allocation, our methodology run the single sink tree construction algorithm <ref type="figure">(Fig. 2 (a)</ref>) for each edge router using QOSPF-generated network information. In this algorithm, a network is described by a graph G=(V,E), V = vertices, E = edges. Each router is in one of the three states: 1) Never seen: all routers are never seen at the beginning, 2) Fringe: fringes are neighbor routers of the sink tree, and 3) Sink Tree: eventually all routers become members of a sink tree. Initially, all routers are 'Never-seen' When the algorithm reaches a router for the first time, it becomes a 'Fringe' And then, according to the delay, it becomes eventually a member of 'Sink-tree'. The algorithm terminates when all routers are in 'Sink-tree' state. This is a variation of the MST (Minimum Spanning Tree) algorithm. We use path delay as the link cost that is computed by a methodology proposed in <ref type="bibr" target="#b5">[6]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">T = {v} 2. Make all neighbors of v fringers 3. While T is not spanning do {</head><p>Input: a graph of network Output: a sink tree whose sink is v</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>9.</head><p>Then If ther is no such fringe, then return the sink tree 15. }</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Fig. 2. Single sink tree construction</head><p>Bandwidth allocation: We allocate a minimum bandwidth unit to the edges of the trees so that each single path from any ingress node to any egress node has the same bandwidth allocated. This initial allocation continues until either a link is overallocated than the link capacity (or quota for QoS traffic) or the total amount of bandwidth for QoS flows, ¡ £¥ , is exhausted. After the initial bandwidth allocation, a valid set of the sink trees is constructed. A tree is said valid if it supports the sink tree paradigm.</p><p>Re-Allocation: Re-Allocation means that when traffic congestion occurs, the sink tree under congestion tries to add more resources to accommodate more input traffic. Since the total amount of bandwidth for QoS flows is fixed in the model, the bandwidth increase on a sink tree necessitates a corresponding bandwidth decrease from another sink tree. This procedure requires message exchange between routers for the mutual agreement of resource addition at one tree and corresponding deduction at the other tree. We consider that this communication overhead is the major source of the overhead of using the sink tree paradigm. We use, in this paper, a simple approach for the resource reallocation negotiation. As can be seen in <ref type="figure" target="#fig_1">Fig. 3 (a)</ref>, whenever an edge router receives a flow set-up request it checks the bandwidth availability. If the bandwidth usage reaches a threshold, it sends resource request message to all other edge routers. Other edge routers either pledge or do not reply depending on their own bandwidth availability as seen in <ref type="figure" target="#fig_1">Figure 3 (b)</ref>. The resource requester selects the first PLEDGE message which pledges enough resource for the requester. And then an acknowledge message and the result will be sent back to the selected pledger and the other edge routers respectively. One concern in this simple negotiation procedure is a possibility of request message explosion when the entire system is overloaded. In order to avoid this situation, we use two paramaters and ¡ that control the minimum time interval for any two consecutive request messages originated from a same node. A PLEDGE decreases the interval while a timeout increases it (upto an upper limit).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">Send out HELP to all ingress routers 6.</head><p>Set timer for PLEDGE</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">Calculate the amount of resource to be added</head><p>Input: each flow arrival Output: HELP message out  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">Whenever a flow set−up request comes at an ingress router { 2. If the available badnwidth is below Threshold A { 3. If ((current time − last time when HELP sent out) &gt; &gt; HELP_interval</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Performance Evaluation</head><p>In this section, we evaluate the performance of the sink tree paradigm by simulation in NS-2. The performance is measured in terms of admission probability and communication overhead with and without artificial traffic congestion. <ref type="figure" target="#fig_0">Figure 1 (b)</ref> shows the typical topology of the ISP backbone network in the US. This topology is used throughout this section. Here, all routers act as edge and core routers. This means that the flows arrive at and leave from every router. For simplicity, each link is assumed to have 155 Mbps capacity. We consider two classes of traffic in this study: one QoS class and one non-QoS class. Non-QoS class traffic packets are not starved in favor of QoS class traffic as long as the amount of reserved bandwidth for QoS traffic on each link is less than the link capacity. We assume that all flows in the QoS class have a fixed packet length of 640 bits (RTP, UDP, IP headers and two voice frames), and a flow rate of 32 Kbps. The end-to-end delay requirement of all flows is assumed fixed at 100ms. The admission control behavior is simulated by flow requests and establishments at varying rates with a constant average flow lifetime. Requests for flow establishment form a Poisson process with rate , while flow lifetimes are exponentially distributed with an average lifetime of 180 seconds for each flow. <ref type="figure" target="#fig_3">Figure 4</ref> (a) shows the performance of the two resource allocations in a special case of randomly distributed input traffic: Flat and Static-Sinktree. In the Flat, bandwidths are evenly allocated on all links while bandwidths are allocated to sink trees in the Static-Sinktree. Both of them, however, do not re-allocate resources online. The total amount of bandwidths allocated on the two systems remains the same for fair comparison. In the Static-Sinktree, init bw units per hop = 40 means that initially 40 bandwidth units have been allocated to every pair of source and destination nodes. Statistically speaking, because a link can have many sink tree paths, this allocation means that roughly 10% of each link capacity is reserved on average for QoS flows. Throughout this section, one bandwidth unit represents the amount of bandwidth needed to support a QoS flow of 32Kbps as defined above. By 'randomly distributed' we mean that the source and destination nodes are randomly chosen for each QoS flow.</p><p>A QoS flow request comes with a pair of source and destination nodes. In the Flat,  a shortest path between a pair of nodes is always selected while the path is predefined with sink trees in the Static-Sinktree. Interestingly, as seen in the figure, the StaticSinktree performs better than the Flat even though bandwidths are partitioned. In fact, this is predictable because the bandwidths are blindly allocated at a same rate on all the links in the Flat while more bandwidths are allocated on the paths where more requests are expected to come in the Static-Sinktree.</p><p>Following experiments show the performance of the sink tree-based approach under general situations where input requests are not randomly distributed and some paths are congested. In order to generate a congestion of flow set-up requests on a set of specific paths, we bias the probability with which flow set-up requests select a specific destination node. Here, we use Node 1 as the artificially biased destination node. A congestion probability 50% means that 50% of all flow set-up requests have Node 1 as their destination <ref type="bibr" target="#b4">5</ref> . In this experiment, Sink-tree 1 6 receives 50% of flow set-up requests while the other 18 sink trees receive the other 50% of flow set-up requests altogether. <ref type="figure" target="#fig_3">Figure 4</ref> (b) shows the performance of the four systems with an artificial traffic congestion: Flat, Dynamic-Sinktree, Dynamic-Sinktree-Unit, and Max. The Flat is the same system as in <ref type="figure" target="#fig_3">Figure 4</ref> that does not re-allocate bandwidths online. The DynamicSinktree is a sink tree-based system that uses a proactive resource re-allocation as described in the previous section. In this experiment, whenever available bandwidths at an edge node are less than 10% of the initial allocation, a re-allocation of 10% of the initial allocation is tried. When a request arrives at an edge node which has no available bandwidth for the request, the request is rejected without causing any further reallocation attempt. The Dynamic-Sinktree-Unit is different from the Dynamic-Sinktree in that it tries a re-allocation in a reactive fashion when an edge router has no bandwidth to honor a request. In addition, it tries to re-allocate only one bandwidth unit for the path requested. Consequently, this violates the sink tree paradigm because a request can cause further control activities in the network core. We consider this as the upper bound of the resource utilization of the sink tree-based system because it reallocates bandwidths reactively based on requests. The Max is a theoretical system that has only one centralized BB in the network. We assume that the BB in the Max system has mighty power to monitor and re-allocate bandwidths online. All control activities including path selection, bandwidth allocation, admission decision, and associated signaling activities are done by the centralized BB. In this system, a request chooses a shortest path from the source to the destination node. The BB maintains the bandwidth pool for the entire network. So, a request is admitted as long as there is bandwidth available in the pool and the bandwidth allocation does not violate the constraint of the link capacity of the selected path. Therefore, the bandwidths are most flexibly shared in this system. We consider this as the upper bound of the resource utilization of any resource allocation. As seen in the figure the Dynamic-Sinktree performs close to the DynamicSinktree-Unit. The small difference between these two is considered as the overhead of the re-allocation algorithm because the re-allocation is done based on a prediction of future demand. The gap between the Dynamic-Sinktree-Unit and the Max is considered the sink tree paradigm-overhead in order to support the edge-limited control activities. <ref type="figure" target="#fig_4">Figure 5</ref> (a) reveals the admission probabilities of Sink-Tree 1, the hot spot of the simulation system. Assuming that the traffic in the hot spot is of the primary interest, this shows more clearly the benefit (the gain of admission probability) of using the sink tree paradigm, an efficient resource re-allocation.  <ref type="figure" target="#fig_1">Figure 3</ref>). The Dynamic-Sinktree-Unit generates the same messages when a request comes to an edge which has no available bandwidth for the request. In the RSVP-Style, the number of hops from the source node to the destination node for admitted flows was counted in addition to the regular refreshment of every 30 seconds. In the Max, the number of hops from the source node to the imaginary centralized BB, Node 1, in this experiment, was counted for all attempted flows. Different locations of the centralized BB produce almost the same results. As can be seen, the Dynamic-Sinktree produces far less messages than either the RSVP-Style or the Max. The Dynamic-Sinktree goes to the peak at 60 and remains almost flat for the rest of the experiment. This is because the HELP message generation is suppressed by Algorithm HELP!. The big drop at 110 suggests that more of the re-allocation attempts started failing at that point. The Dynamic-SinktreeUnit produces a lot more messages than the Dynamic-Sinktree because the re-allocation is attempted with only one unit on the requested path. Interestingly, the Max produces almost the same amount of communication overhead as the RSVP-Style. This is because in the Max system any flow request travels from the source to the BB and back to the source. Therefore, as the number of the rejected requests is growing, the communication overhead is linearly increasing in proportion to the volume of the attempts. In the RSVP-Style, although it uses a refresh every 30 seconds, because all nodes participate in the admission decision, any node can reject a request before the request reaches to the final destination node. In terms of communication overhead, therefore, it is very likely that centralized BB approaches will produce about the same amount of messages as the RSVP-Style. <ref type="figure" target="#fig_4">Figure 5</ref> could be misleading as it does not show when the messages are produced. All the three systems except the Dynamic-Sinktree produce messages when a request arrives while the Dynamic-Sinktree does it proactively (see <ref type="figure" target="#fig_1">Figure 3)</ref>. The HELP and PLEDGE messages are produced proactively when the resource consumption reaches to a threshold. As a matter of fact, although our survey is not exhausted, we have not found a centralized BB approach that utilizes bandwidths to the most flexible way as the Max.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Conclusions and Future Work</head><p>In this paper we explored possibilities of scalable QoS flow set-up by using the sink tree paradigm within the DiffServ architecture. Simulation results are very encouraging in that the paradigm requires far less communication overhead in setting up QoS flows compared to both the traditional per-flow signaling-based methodology and the imaginary centralized BB system while still maintaining high resource utilization by run-time resource re-allocation. Based on these encouraging results we are further investigating the scalable QoS flow set-up problem for the end-to-end multi-domain environment.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig. 1 .</head><label>1</label><figDesc>Fig. 1. An illustration of the sink tree (a) A network topology for simulation (b)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Fig. 3 .</head><label>3</label><figDesc>Fig. 3. Algorithm HELP! (a) and PLEDGE (b)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head></head><label></label><figDesc>160 call-admission-probability call-arrival-rate init-bw-units-per-hop = 40 average-resource-allocated-per-link = 0.1 biased node = 1, probability = 50% Flat Dynamic-Sinktree Dynamic-Sinktree-Unit Max</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Fig. 4 .</head><label>4</label><figDesc>Fig. 4. Call Admission Probabilities with randomly distributed input traffic (without bias: left) and with biased input traffic (right)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 5 (</head><label>5</label><figDesc>b) shows the communication overhead of the four systems in a log scale in terms of number of messages exchanged: RSVP-Style, Max, Dynamic-Sinktree-Unit, and Dynamic-Sinktree. The communication overhead of the Dynamic-Sinktree is the number of messages (HELP and PLEDGE) generated for resource re-allocation. The parameters for HELP message interval control are</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Fig. 5 .</head><label>5</label><figDesc>Fig. 5. Call Admission Probabilities of Hot Spot Tree (left) and Signaling Messages (right) of biased input traffic</figDesc></figure>

			<note place="foot" n="3"> For example, for flows destined to N1, N1 will be the egress router. 4 In this graph representation, vertexes are network nodes, and a link connecting two nodes is called edge. In this paper, edge is distinguished from link because we allocate resources to the edge of a tree not to the link of a network.</note>

			<note place="foot" n="5"> According to a previous study on the congestion pattern, 90% of the Internet traffic is destined to 10% of the networks [5]. 6 Sink-tree 2 is the sink tree whose sink node is Node 2.</note>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Implementation and performance measurements of QoS routing extensions to OSPF</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Apostolopoulos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Guerin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Kamat</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE INFOCOM</title>
		<imprint>
			<biblScope unit="page" from="680" to="688" />
			<date type="published" when="1999" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">A Framework for Integrated Services Operation over Differentiated Networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Bernet</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Ford</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Yavatkar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Baker</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Speer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Braden</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Davie</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Wroclawski</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Felstaine</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IETF</title>
		<imprint>
			<biblScope unit="volume">2998</biblScope>
			<date type="published" when="2000" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m" type="main">An Architecture for Differentiated Service. IETF RFC 2475</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Blake</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Black</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Carlson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Davies</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Weiss</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1998" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Braden</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Clark</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Shenker</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1994" />
		</imprint>
	</monogr>
	<note>Integrated Services in the Internet Architecture. IETF RFC 1633.</note>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">A New Approach to Routing with Dynamic Metrics</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Druschel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Subramanian</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE INFOCOM</title>
		<imprint>
			<biblScope unit="page" from="661" to="670" />
			<date type="published" when="1999" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Utilization-Based Admission Control for Scalable Real-Time Communication</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Choi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Xuan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Bettati</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Zhao</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Real-Time Systems</title>
		<imprint>
			<biblScope unit="volume">24</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="171" to="202" />
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">A core stateless bandwidth broker architecture for scalable support of guaranteed services</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Duan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><forename type="middle">Z.-L</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Hou</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Gao</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Parallel and Distributed Systems</title>
		<imprint>
			<biblScope unit="volume">15</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="167" to="182" />
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Evaluation of bandwidth broker signaling</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Gunter</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Braun</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">The 7th IEEE International Conference on Network Protocols (ICNP)</title>
		<imprint>
			<date type="published" when="1999" />
			<biblScope unit="page" from="145" to="152" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">An implementation study of a dynamic interdomain bandwidth management platform in DiffServ networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Hwang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Chapin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Mantar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Okumus</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE/IFIP NOMS</title>
		<imprint>
			<biblScope unit="page" from="321" to="334" />
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Secure communications between bandwidth brokers</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B.-S</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W.-K</forename><surname>Woo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C.-K</forename><surname>Yeo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Lim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B.-H</forename><surname>Lim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>He</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Song</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM SIGOPS Operating Systems Review</title>
		<imprint>
			<biblScope unit="volume">38</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="43" to="57" />
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title level="m" type="main">Simulation of Sink Tree Paradigm for Quality of Service Provisioning in Computer Networks in NS-2</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Lembke</surname></persName>
		</author>
		<ptr target="http://www.cs.mtu.edu/bkchoi/Lembke05.pdf" />
		<imprint>
			<date type="published" when="2005" />
		</imprint>
		<respStmt>
			<orgName>Department of Computer Science, Michigan Technological University</orgName>
		</respStmt>
	</monogr>
<note type="report_type">MS Project Report</note>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title level="m" type="main">The complexity of the capacitated tree problem</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">H</forename><surname>Papadimitriou</surname></persName>
		</author>
		<idno>No. TR-21-76</idno>
		<imprint>
			<date type="published" when="1976" />
			<pubPlace>Cambridge, MA, Harvard University</pubPlace>
		</imprint>
		<respStmt>
			<orgName>Department of Computer Science</orgName>
		</respStmt>
	</monogr>
<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Internet2 QBone: building a testbed for differentiated services</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Teitelbaum</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Hares</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Dunn</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Nielson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Narayan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Reichmeyer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Network Mag</title>
		<imprint>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="page" from="8" to="16" />
			<date type="published" when="1999" />
		</imprint>
	</monogr>
	<note>Is. 5.</note>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Design and implementation of scalable edge-based admission control</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Yuan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Schlembach</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Skoe</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">W</forename><surname>Knightly</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Networks</title>
		<imprint>
			<biblScope unit="volume">37</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="507" to="518" />
			<date type="published" when="2001" />
			<publisher>Elsevier</publisher>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
