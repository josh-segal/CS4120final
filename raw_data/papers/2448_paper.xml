<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2019-03-26T16:42+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Rethinking Data Management for Storage-centric Sensor Networks *</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yanlei</forename><surname>Diao</surname></persName>
							<email>yanlei@cs.umass.edu</email>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">University of Massachusetts</orgName>
								<address>
									<postCode>01003</postCode>
									<settlement>Amherst</settlement>
									<region>MA</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Deepak</forename><surname>Ganesan</surname></persName>
							<email>dganesan@cs.umass.edu</email>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">University of Massachusetts</orgName>
								<address>
									<postCode>01003</postCode>
									<settlement>Amherst</settlement>
									<region>MA</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gaurav</forename><surname>Mathur</surname></persName>
							<email>gmathur@cs.umass.edu</email>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">University of Massachusetts</orgName>
								<address>
									<postCode>01003</postCode>
									<settlement>Amherst</settlement>
									<region>MA</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Prashant</forename><surname>Shenoy</surname></persName>
							<email>shenoy@cs.umass.edu</email>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">University of Massachusetts</orgName>
								<address>
									<postCode>01003</postCode>
									<settlement>Amherst</settlement>
									<region>MA</region>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Rethinking Data Management for Storage-centric Sensor Networks *</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Data management in wireless sensor networks has been an area of significant research in recent years. Many existing sensor data management systems view sensor data as a continuous stream that is sensed, filtered, processed, and aggregated as it &quot;flows&quot; from sensors to users. We argue that technology trends in flash memories and embedded platforms call for rethinking this architecture. We articulate a vision of a storage-centric sensor network where sensor nodes will be equipped with high-capacity and energy-efficient local flash storage. We argue that the data management infrastructure will need substantial redesign to fully exploit the presence of local storage and processing capability in order to reduce expensive communication. We then describe how StonesDB enables this vision through a number of innovative features including energy-efficient use of flash memory, multi-resolution storage and aging, query processing, and intelligent caching.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">INTRODUCTION</head><p>Wireless sensor networks has been an area of significant research in recent years. Sensors generate data that must be processed, filtered, interpreted, and archived in order to provide a useful infrastructure to users. Sensor deployments are often untethered, and their energy resources need to be optimized to ensure long lifetime. Consequently, an important research theme in sensor networks is energy-efficient data management.</p><p>Current industrial and scientific uses of wireless sensor networks can be classified broadly along two dimensions: queries on "live" data and queries on "historical" data. In live data querying, sensor samples are useful only within a small window of time after they have been acquired. Examples include event detection queries for detecting landslides <ref type="bibr" target="#b48">[51]</ref> or other events, or ad-hoc queries on current data (e.g.: what is the temperature now?). Querying historical data is required for applications that need to mine sensor logs to detect unusual patterns, analyze historical trends, and develop better models of particular events. A common refrain from users who * This research is supported in part by NSF grants EEC-0313747, CNS-0626873, CNS-0546177, CNS-052072, and CNS-0325868.</p><p>This article is published under a Creative Commons License Agreement (http://creativecommons.org/licenses/by/2.5/). You may copy, distribute, display, and perform the work, make derivative works and make commercial use of the work, but you must attribute the work to the author and <ref type="bibr">CIDR 2007.</ref> need access to historical data, often for scientific applications, is that "every bit of data is potentially important" and therefore cannot be discarded.</p><p>A large class of data management systems and techniques have been proposed for querying live data. TinyDB <ref type="bibr" target="#b29">[32]</ref>, Cougar <ref type="bibr" target="#b54">[57]</ref> and Directed Diffusion <ref type="bibr" target="#b21">[24]</ref> provide the functionality to push-down filters for continuous queries into the network such that data processing can be performed closer to where the data is sensed and only the end result needs to be communicated. Such push-down querying saves energy for communication, thereby increasing the lifetime of wireless sensors. Query-specific filters can be used both for event detection queries (e.g.: trigger when temperature &gt; 120 F), and for pre-processing data at sensors and transmitting highlevel aggregates rather than raw data (e.g.: temperature averages over 10 minutes). Another interesting class of data management techniques for live data querying is Acquisitional Query Processing (AQP). Based on query needs, AQP techniques intelligently determine which nodes to acquire data from, which attributes to sample, and when to sample. Both TinyDB as well as BBQ <ref type="bibr" target="#b11">[14]</ref> are acquisitional in nature -in TinyDB, sensors can determine the order in which to acquire samples to answer queries with least energy cost, and in BBQ, the base-station uses a model to determine which nodes and attributes to query to minimize energy consumption as well as answer queries with the required error and confidence bounds.</p><p>In contrast to the wealth of research on data management techniques for live data querying, there has been little work on data management solutions for querying historical sensor data. There are two models for designing such historical data querying systems. The first model treats sensor data as a continuous stream that is losslessly aggregated within the network and then transmitted and archived outside the sensor network. Once the data is collected, they can be stored in a traditional database, and queried using standard techniques. Such networks have commonly been referred to as "dumb data collection" sensor networks <ref type="bibr" target="#b36">[39]</ref> since very limited intelligence can be embedded within the network. Many practical deployments of wireless sensor networks for monitoring phenomena employ the data collection model. While such a model is easy to deploy, these deployments can be short-lived when high data rate sensors (e.g: camera, acoustic, or vibration sensors) are used, since the data communication requirements overwhelm the available energy resources.</p><p>A second model for querying historical data is to view the sensor network as a database that supports archival query processing, where queries are pushed inside the network, possibly all the way to the remote sensors that archive data locally. This architecture has the potential to be considerably more energy-efficient for querying archived data, since query processing is performed at the source </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Sensor Platforms</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>CC2420</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>CC1000</head><p>Micron NAND 128MB</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>ST NOR 1MB</head><p>Atmel NOR 0.5MB</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Communication</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Storage</head><p>Figure 1: Energy cost of storage compared to that of communication for the popular Mica2, MicaZ and Telos sensor platforms; also included is the cost of storage using the UMass NAND flash adapter for the Mica2 / MicaZ platform. We notice that using NAND flash increases the difference between communication and storage costs to almost two orders of magnitude relative to storage. and transmissions involve query results as opposed to data. However, the model has been considered impractical in real deployments for three reasons. First, it is commonly assumed the sensor devices have limited computational resources which preclude any complex query processing from being performed at remote sensors. Second, there exists a perception that storage capacities on sensors is limited (on the order of megabytes), thereby severely limiting the amount of data that can be archived locally (in contrast to archiving data outside the network, where storage is potentially limitless). Third, flash memories are considered to be less energyefficient when compared to microcontrollers and low power radios used on sensor nodes, thereby reducing the energy benefits of local archival. Indeed, all three limitations are true of the popular Mica Mote platforms <ref type="bibr" target="#b9">[12]</ref>. These nodes have a sub-10MHz processor, 4KB of RAM, and less than one megabyte of flash memory. In addition, the flash memories used on these devices are less energy-efficient than the low-power radios used on them, making transmitting data outside the network cheaper than local archival.</p><p>Technology Trends: Recent technology trends, however, make a compelling case for revisiting the argument for data collection as being the only practical solution for archival query processing. The emergence of new generation NAND flash memories have dramatically altered the capacities and energy efficiency of local flash storage. It is now possible to equip sensor devices with several gigabytes of low-power flash storage, and flash storage capacities continue to rise in accordance with Moore's law. Further, in a detailed measurement study of flash memories <ref type="bibr" target="#b31">[34]</ref>, we showed that equipping the MicaZ platform with NAND flash memory allows storage to be two orders of magnitude cheaper than communication and comparable in cost to computation. <ref type="figure">Figure 1</ref> compares the per-byte energy cost of communication and storage for various sensor platforms and shows that the cost of storage has fallen logarithmically with the emergence of efficient NAND flash memories. This observation fundamentally alters the relative costs of communication versus computation and storage, making local archival far more attractive. Finally, a slew of new sensor platforms such as the iMote2 <ref type="bibr" target="#b8">[11]</ref> and Yale XYZ <ref type="bibr" target="#b27">[30]</ref> have become available that boast considerably greater processing capabilities than the Mica Motes at only slightly worse overall energy-efficiency and comparable prices. The iMote2 for instance is equipped with a 13 -600 MHz PXA processor that is up to two orders of magnitude more capable than the 6MHz processor on a Mica Mote.</p><p>These trends challenge the conventional wisdom about how to architect a sensor network, and in particular, the role of storage in sensor networks. They make a compelling case for equipping sensor nodes with high-capacity energy-efficient local flash storage and redesigning algorithms to exploit cheap storage for reducing expensive communication, a tradeoff that has not been fully exploited in current system designs. In addition, they argue for designing systems that place far more query processing complexity at the sensors, since they now have the resources to perform more complex tasks.</p><p>In this paper, we present StonesDB, a novel sensor database architecture that emphasizes local data archival and query processing at embedded sensors. StonesDB 1 makes energy-efficiency its primary design goal. By exploiting flash-based in-network data storage, StonesDB represents a paradigm shift from many existing approaches that rely on streaming and long-term archival of data outside the sensor network. StonesDB is designed for performing rich query processing inside the network and supports both traditional queries as well as newer data mining style queries that are common in sensor data analysis. In addition, StonesDB is designed to exploit the hierarchical architecture of sensor networks-it places intelligence at sensor nodes, while fully exploiting the resource-rich nature of sensor proxies and gateways. Unlike existing work on in-network querying <ref type="bibr" target="#b21">[24]</ref> that has focused on algorithms, indexing <ref type="bibr" target="#b18">[21,</ref><ref type="bibr" target="#b24">27,</ref><ref type="bibr" target="#b39">42]</ref> and query forwarding <ref type="bibr" target="#b14">[17,</ref><ref type="bibr" target="#b42">44]</ref> approaches, our work focuses on the core infra-structural building blocks for designing a true in-network database.</p><p>In the remainder of this paper, we first articulate the numerous research challenges that arise in the design of StonesDB in Section 2. Section 3 presents an architectural overview of StonesDB. In Section 4, we present the local database layer of StonesDB that performs energy-efficient query processing, multi-resolution storage and data aging. In Section 5, we discuss the design of the distributed data management layer that unifies local storage and database capabilities at individual nodes into an online networked data store. We present systems closely related to StonesDB in Section 6 and then conclude with a brief status report of our ongoing implementation and directions for future work in Section 7.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">RESEARCH CHALLENGES</head><p>This section outlines our high-level design goals and then discusses several challenges that arise in the design of StonesDB.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Design Goals</head><p>StonesDB assumes, and seeks to exploit, a two-tier architecture comprising battery-powered resource-constrained sensor nodes at the lower tier and resource-rich proxies at the higher tier. Although StonesDB is targeted towards a broad class of sensor applications, for the purposes of this paper, we choose monitoring using a camera sensor network as a representative example. Unlike simpler examples such as temperature monitoring, this application produces rich data in the form of images and features extracted from them, and requires handling of a broad set of queries on such image data, thereby stressing the limits of a resource-constrained sensor environment. In this application, low-power cameras sensors on tier-1 nodes monitor the environment by capturing high-resolution im-ages of their surroundings. These images are assumed to be stored locally and a low-resolution summary is sent to the proxy. Queries arriving at the proxy must be answered using a combination of data/index at the proxy and those at the sensor nodes. Our work seeks to address the following design goals:</p><p>• Exploit local flash memory: We wish to leverage the presence of cheap and energy-efficient flash memory as a storage substrate for StonesDB. Doing so trades storage for more expensive communication.</p><p>• Optimize for energy-efficiency: We seek to design a sensor database that is not only suitable for resource-constrained environments but also for highly optimized for energy-efficiency.</p><p>• Exploit resource-rich proxies: Despite the availability of more capable sensor platforms, they are still resource-poor when compared to proxies. Our design seeks to leverage the resources at the proxy, whenever possible, to reduce the burden on sensor nodes.</p><p>• Support a rich set of queries: Our design seeks to support a rich set of queries, including traditional SQL-style as well as data mining-style queries.</p><p>• Support heterogeneity: We seek to support multiple sensor platforms that are available today and our design exploits the resources available on each to make appropriate design choices. Thus, a StonesDB instantiation on the low-end Mica2 motes might be different from that on a more-capable iMote2.</p><p>The above design goals lend themselves to an architecture where (i) local flash-based storage is emphasized, (ii) energy-efficiency is a crucial design goal for all components such as storage, indexing and query processing, (iii) query processing is split between the proxy and the sensors, with some or all of the processing pushed to the remote sensors, (iv) different target sensor platforms result in different design choices depending on their capabilities. In the rest of this section, we discuss these research challenges in more detail.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Use of a Flash Memory Storage Substrate</head><p>As noted earlier, StonesDB exploits flash memories on sensor nodes for archiving data locally. Flash memories are vastly different from magnetic disks in their architecture, energy constraints, and read/write/erase characteristics, all of which fundamentally impact how an embedded sensor database is designed. Flash memories are page organized in comparison to the sector-based organization of magnetic disk drives. A key constraint of flash devices is that writes are one-time -once written, a memory location must be reset or erased before it may be written again. In addition, the unit of erase often spans multiple pages (termed as an erase block), thereby complicating storage management. <ref type="table" target="#tab_2">Table 1</ref> shows both the device and system-level energy and latency costs involved with the read and write operations of a Toshiba 1Gb (128 MB) NAND flash <ref type="bibr">[6]</ref> chip that we measured. Based on our measurements, we find that the energy cost of writing (W (d)) and reading (R(d)) d bytes of data to and from flash can be modeled as following:</p><formula xml:id="formula_0">W (d) = 24.54 + d · 0.0962µJ (1) R(d) = 4.07 + d · 0.105µJ<label>(2)</label></formula><p>Comparison with Magnetic Disks: We find the energy cost associated with flash-based storage to be a linear function of the number of bytes written to or read from flash. However, magnetic disks have a constant power consumption associated with keeping the  disk in motion (a couple of watts) which makes this an unsuitable storage medium for low-energy devices. Much like the seek overhead in magnetic disks, there is a fixed cost of accessing a page on flash, and then a per-byte overhead associated with each additional byte written to (or read from) the page. Accessing adjacent sectors on disk significantly reduces the seek overhead since the disk head does not need re-positioning. Unlike disks though, accessing adjacent pages on flash does not impact the fixed cost as this corresponds to the time during which an address is clocked in and the flash read or write operation is enabled. Once enabled, the cost of clocking data in/out of the flash chip is linearly dependent on the size of data being operated upon. Note that the cost of reading or writing n pages is n times the cost of reading or writing a single page since each page is addressed separately. Due to these differences, several design decisions made by traditional databases are not directly applicable to flash-based databases. For instance, disk-based storage systems often uses in-place updates to update a record or to overwrite an existing disk block. However, performing the same operation on flash would require reading the entire erase block, performing the modification, erasing the block and then writing it back. This read-modify-erase-write is a very energy-intensive operation, and therefore in-place updates should be avoided whenever possible.</p><p>The problem of avoiding in-place updates has been explored on multiple fronts in the database community. The use of shadow paging <ref type="bibr" target="#b26">[29]</ref> avoids multiple writes within a page, though it results in serious performance drawbacks. Vagabond <ref type="bibr" target="#b33">[36]</ref> builds a database on top of a log-structured <ref type="bibr" target="#b41">[43]</ref> data store, using techniques such as delta-chains to perform updates on the database. There is also ongoing work to support flash-based databases in industry and research groups-examples include FUEL <ref type="bibr" target="#b22">[25]</ref>, DELite <ref type="bibr" target="#b52">[55]</ref> Polyhedra Flashlite <ref type="bibr" target="#b15">[18]</ref>, Birdstep RDM <ref type="bibr">[8]</ref> and eXtremeDB <ref type="bibr" target="#b34">[37]</ref>. A number of flash-based sensor data storage systems have been built as well <ref type="bibr" target="#b10">[13,</ref><ref type="bibr" target="#b17">20,</ref><ref type="bibr" target="#b51">54]</ref>.</p><p>StonesDB differs from all of these efforts by focusing on energyefficient use of the flash memory storage substrate for a sensor database. This necessitates the re-design of a multitude of database components -organization of data and indices on flash, buffering strategies, and data structures that store and update data.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Optimize for Energy-efficiency</head><p>A traditional database system chooses its index structures and query processing strategies to optimize for response time, whereas a sensor database needs to optimize for low energy consumption. This change has significant implications on the design of a sensor database. For instance, traditional databases almost always construct indices on data to improve query processing performance, since sequential scan of data incurs high latency. However, in a sensor database, there is a tradeoff between the cost of index construction and the benefit offered by it. To illustrate, consider a B+ tree construction on a stream of sensor readings. A standard B+ tree construction algorithm for magnetic disks <ref type="bibr" target="#b38">[41]</ref> would build the tree dynamically as readings are appended to the archived stream. However, since flash memory pages can not be overwritten without an erase operation, insertions into the B+ tree are very expensive. This cost is worth-while only if the number of reads due to queries is sufficiently high. For data that is infrequently queried, it may be better to skip the index construction altogether and use linear scans of the data instead. Even when an index is desirable, the index structure should be organized on flash so that index updates incur as few erase operations as possible.</p><p>Thus, in an energy-optimized sensor database, the query workload including the types of queries and the frequency of their execution will dictate the relative cost-benefit tradeoff of index construction as well as the types of indices that are maintained. In addition, traditional algorithms for index construction over magnetic disks need to be re-designed to ensure energy-efficiency implementations in a flash-based database system.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.4">Handle Finite Storage</head><p>In traditional databases, incremental growth over the system lifetime is handled by periodic system upgrades; database administrators deal with storage capacity exhaustion either by increasing storage capacity or moving data to tertiary storage. In contrast, wireless sensor networks are often designed to operate for many years without human intervention. When these sensors are used to store rich sensor data such as images or acoustic streams, the storage capacity may be insufficient to store all data losslessly throughout the lifetime of the sensor. In such instances, sensors will need to deal with storage capacity exhaustion by intelligently "aging out" part of the archived data to make room for new data. There has been little research on performing data aging in a database. The closest work is the vacuum cleaning technique proposed in Postgres <ref type="bibr" target="#b46">[49]</ref> to "vacuum" old data from secondary to tertiary storage.</p><p>Data aging in sensor database raises a number of challenges. First, rather than naively aging the oldest data, strategies that age out the least recently used or the least valuable data must be designed. Second, rather than simply discarding data (and losing it completely), it may be better to generate a coarser grained representation of the data and age out the raw data; data can be progressively aged as its use or value diminishes. Data aging reduces query precision since queries on coarser grained data can be answered with less precision than that on the original data. While aging and multi-resolution storage have been considered in Dimensions <ref type="bibr" target="#b16">[19]</ref>, the tradeoff with query precision hasn't been addressed. Thus, an important goal of StonesDB is to resolve the tension between long-term storage and loss of query precision.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.5">Support Rich Querying Capability</head><p>StonesDB is designed to support a wide range of queries over a storage-centric sensor network, that is, over the historical data stored across the sensor network. These queries can be broadly classified into two families, discussed as follows.</p><p>The first family of queries consists of SQL-style queries that can involve equality and range predicates over value and/or time, and additionally a variety of spatial and temporal aggregates. There has been considerable work on in-network processing of queries in this family. The prior work, however, mostly focuses on live data or recent data that is specified by a small sliding window. In this context, energy-efficient query processing strategies have been proposed to handle equality and range predicates <ref type="bibr" target="#b4">[5,</ref><ref type="bibr" target="#b11">14,</ref><ref type="bibr" target="#b50">53]</ref>, simple aggregates <ref type="bibr" target="#b3">[4,</ref><ref type="bibr" target="#b28">31,</ref><ref type="bibr" target="#b45">47,</ref><ref type="bibr" target="#b50">53]</ref> including min, max, count, and avg, complex aggregates <ref type="bibr" target="#b19">[22,</ref><ref type="bibr" target="#b44">46]</ref> including median and top-k, and userdefined aggregates such as contour maps and target tracks <ref type="bibr" target="#b20">[23]</ref>.</p><p>An equally important family of queries that have received considerably less attention are data mining queries to perform signal processing, pattern identification, time-series and spatio-temporal data analysis. These queries usually involve processing a large amount of data. Support for these types of queries is necessary for post-facto analysis of historical data across the spectrum of sensor network applications. We now discuss the new query types that we seek to support in StonesDB.</p><p>• Time-series Analysis Queries: Time-series analysis queries are typically interested in detecting trends or anomalies in archived streams. Such queries can specify ascending, descending, spike, or non-continuous change patterns. This class of queries are particularly useful in anomaly detection applications such as fire monitoring and machine failure monitoring. An example query would be "determine the parameters of an ARIMA model that best captures last 5 days of temperature data".</p><p>• Similarity Search Queries: In this class of queries, a user is interested in determining whether data similar to a given pattern has been observed in archived data. Similarity queries are important for event detection applications such as habitat monitoring, earthquake monitoring, and camera surveillance. An example query would be "was a vehicle with license number 24V K02 detected last week" in a vehicle monitoring application using camera sensors. Similarly, in a habitat monitoring network with acoustic sensors, a query could be "was a bird matching acoustic signature S detected in the last month".</p><p>• Classification Queries: Target classification queries are related to similarity search queries, but go further in requiring StonesDB to classify a given signal into a type of event. For instance in <ref type="bibr" target="#b25">[28]</ref>, acoustic and seismic signals of vehicles are used to determine which was the most likely vehicle that was observed. Such classification queries use techniques such as maximum likelihood, support-vector machines or nearest neighbor to determine the best match corresponding to observed data. An example query is "determine the types of vehicles that were detected last week".</p><p>• Signal Processing Queries: Many operations on sensor data involve signal signal processing tasks such as FFT, wavelet transform, and filtering. For instance, in a structural monitoring application of buildings, a typical query is "find the mode of vibration of the building" <ref type="bibr" target="#b49">[52]</ref>. Such a query typically involves using an FFT or spectrogram on the raw time-series data of building vibrations to extract the frequency components of the signal followed by determining the mode.</p><p>Our goal is to offer energy-efficient support for both families of queries over historical data across the sensor network. Toward this goal, several challenges need to be addressed. Handling such a broad spectrum of queries requires a query language that is rich enough for them. A sufficient language may need to integrate SQL extensions proposed for sequence databases <ref type="bibr" target="#b43">[45]</ref> and new constructs for specifying non-traditional data mining queries. In addition, processing the variety of queries over large amounts of data across the sensor network poses significant challenges in the design of a local sensor database, e.g., access methods and query processing techniques, as well as a distributed database, e.g., query planning and optimization across the network. Finally, depending on the application, these queries may be executed one-time or periodically (a simple form of continuous queries). Efficient support for a mixture of these execution modes is another issue to address.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.6">Support Heterogeneous Sensor Platforms</head><p>A plethora of embedded sensor platforms are available today ranging from very constrained, low-power sensors to more powerful, PDA-class platforms. At the lowest end of sensor platforms are highly constrained mote-class devices like Mica2 <ref type="bibr" target="#b9">[12]</ref> and Telos <ref type="bibr" target="#b35">[38]</ref> equipped with 4-10KB of RAM and 8 bit processors. Some examples of intermediate-class sensor platforms include the Intel iMote2 <ref type="bibr" target="#b8">[11]</ref> and Yale's XYZ <ref type="bibr" target="#b27">[30]</ref> with 32 bit processors and many megabytes of RAM. At the high end of the spectrum are larger micro-servers platforms such as Stargates <ref type="bibr">[48]</ref> that have more powerful radios, processors and more RAM. The flash memory storage substrate on these devices can differ as well since both NAND and NOR flash memories may be used. A typical sensor deployment could comprise one or more platforms discussed here.</p><p>A key goal of StonesDB is to be configurable to a heterogeneous set of sensor platforms while providing functionality proportional to the resources available on a platform. Such configurability will often necessitate significant changes to the underlying design. For instance, consider the design of StonesDB for the Mote platform and the iMote2 platform. These two platforms differ widely in their memory capabilities -the Mote has under 10K of RAM whereas the iMote2 has 32MB of RAM. A typical flash memory block is of size 32-64KB, which is too large to buffer on the Mote but small in comparison to the memory on the iMote2. Thus, the low-level storage sub-system for the Mote platform needs to be severely restricted in how it organizes data across erase blocks, whereas the iMote2 can use a considerably more sophisticated design.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.7">Support Distributed Architectures</head><p>Our discussion thus far has focused on query processing at a single sensor node. However, sensor deployments are often distributed, consisting of multiple remote sensor nodes that are wirelessly connected to sensor proxies or gateways. Queries on archived data first arrive at the proxy and are then forwarded to one or more sensor nodes for processing.</p><p>A number of challenges in distributed sensor data management have been addressed in prior work including handling packet-losses <ref type="bibr" target="#b28">[31]</ref>, handling uncertain data <ref type="bibr" target="#b11">[14,</ref><ref type="bibr" target="#b12">15]</ref>, in-network data aggregation <ref type="bibr" target="#b7">[10]</ref>, optimal data gathering tours <ref type="bibr" target="#b32">[35]</ref>, and others. In this paper, we focus on a problem that is specific to a storage-centric sensor network architecture -proxy caching. Since proxies are typically far more resource-rich than the remote sensor nodes, an energyefficient sensor data management system should leverage the proxy resources whenever possible to reduce resource consumption at battery-powered sensor nodes. One possible technique for doing so is to maintain a proxy cache containing data and query results. Caching any retrieved data as well as query results at a proxy has a number of benefits. If a subsequent query can be answered using cached values, it can substantially reduce query response times while saving precious sensor resources. Proxy caching also improves overall data availability and persistence, since it effectively replicates archived data at the proxy. However, proxy caching comes at high cost since sensors expend energy in communicating data to the proxy. Thus, an important goal of StonesDB is to balance the energy cost of caching with the benefits obtained with it.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">ARCHITECTURE</head><p>StonesDB employs a two layer database stack that maps onto the two tier architecture of a sensor network as shown in <ref type="figure" target="#fig_0">Figure 2</ref>. As indicated earlier, our network architecture comprises of a lower tier of battery-powered resource-constrained sensors nodes (e.g., Motes, iMotes) and an upper tier of resource-rich proxies. While sensor nodes are assumed to be equipped with large flash storage,  their computation and communication capabilities are more constrained. For instance, Mote-class devices have 4KB RAM and a 10MHz processor while an iMotes have 32MB RAM and more capable Intel PXA processor. For our representative camera sensor network application, such nodes are assumed to be equipped with low-power imaging sensors (e.g. Cyclops <ref type="bibr" target="#b58">[61]</ref>) for image capture and image processing. The proxy tier is assumed to be tethered and resource-rich. System Architecture: The two-layer StonesDB stack comprises of a local database that runs on each sensor node and a distributed data management layer that runs on the proxy and interacts with the local database layer. The local database in StonesDB has three key components, (a) a query engine that generates energy-efficient query plans for executing queries and presents query results with confidence values, (b) data summarization and aging algorithms that enable multi-resolution summaries of data for efficient query processing and for space-saving storage of old data given flash memory constraints, (c) an energy-efficient storage substrate that offers partitioned storage and indexing to facilitate query processing and to simplify aging of data. The instantiations of these three components depends on the capabilities of the nodes. For instance, a more resource-constrained Mica2 Mote will run a minimalist version that supports a simple declarative query interface and a storage substrate that supports simple data aging techniques <ref type="bibr" target="#b30">[33]</ref>. A more capable node such as the iMote will support richer set of queries and more sophisticated storage and indexing techniques.</p><p>The distributed data management layer at the proxy comprises of two key components. First, it employs a cache that contains summaries of data observed at lower-tier nodes (e.g., low-resolution images). Any data fetched from the sensors for query processing is also stored in the cache. Second, it employs a query processing engine that determines how to handle each incoming query. Queries can be processed locally by using cached data or fetching more data from the nodes, or they can pushed to the sensor nodes after some initial processing.</p><p>System Operation: We describe the operation of StonesDB using the example of a camera sensor network. In a storage-centric camera sensor network, the camera sensor nodes store high fidelity raw images and transmit metadata to the proxy. The metadata can include a low resolution image of frames where motion was detected, features extracted from images such as the number of objects or size of objects, coordinates describing the field of view, average luminance, and motion values, in addition to basic information such as time and sensor location. Depending on the application, this metadata may be two or three orders of magnitude smaller than the data itself, for instance if the metadata consists of features extracted from image.</p><p>We now consider how ad-hoc queries can be handled in such a tiered storage-centric camera sensor network. A user can pose queries over such a network using a declarative querying interface, perhaps with a confidence bound that specifies the desired quality of response. Consider a search query on a camera sensor network where the user is searching for regions of the network where a particular type of object (say a face) is detected. Here, we assume that the specific object that the user is looking for may not be known in advance, hence, the data stored by the network is used to search for new patterns in a post-facto manner.</p><p>The query is first routed to the sensor proxy which attempts to answer the query using the summaries and metadata that it has obtained from the sensors. If metadata includes a low-resolution image, the proxy can process the query on the summary to get an approximate answer for the query. If the query can be satisfied with the data cached at the proxy, it provides an immediate response to the query. If the quality of the response is not sufficient to meet the query needs or if the data relevant to the query is not present in the cache, the proxy determines the subset of sensors that are most likely to answer the query and can forward the query to these sensors.</p><p>The proxy is presented with a number of options in terms of how to query the sensor tier. One option is to pull relevant data from appropriate sensors and perform the query processing at the proxy. This option might be preferable if the query involves considerable image processing that requires more resources than is available at the sensors, for instance, if the lower tier comprises resourceconstrained Motes. A second option is to push the entire query to the relevant sensors and let the local databases at the sensors handle the query on locally stored data. The proxy can then merge results from the databases at individual sensors to and provide a response to the user. This places greater querying complexity at the sensor tier and might only be feasible when more powerful sensor nodes are used. However, since computation and storage are far less expensive than communication, such in-network querying is considerably more energy-efficient. A third option is for the proxy to partially process the query on the summaries that it has stored, and send the query as well as partial results obtained by executing the query on the proxy cache to the sensor. This can potentially reduce the computation requirement and storage accesses at the sensor since the local database will only need to refine the results of the partial query.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">LOCAL DATABASE</head><p>An important service in a data management stack is an ultra lowpower embedded sensor database that enables users to query the archived sensor data. More specifically, the sensor database offers a service where (1) readings obtained from a specific sensor over its entire lifetime are viewed as an archived stream arranged in order of time, (2) high-level declarative queries can be posed against one </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Storage and Indexing</head><p>The storage and indexing module stores sensor data onto flash and provides a set of access methods for uses in query processing. As shown in <ref type="figure" target="#fig_1">Figure 3</ref>, this module has two components: the lower component, Object Store, offers implementations of basic data structures on flash, including streams, queues, stacks, and simple search trees <ref type="bibr" target="#b30">[33]</ref>. The discussion below focuses on the upper component, Partitioned Access Methods, that builds on the object store to provide access methods for query processing.</p><p>In our design, readings obtained from a specific sensor can be stored and accessed in a number of ways.</p><p>• Stream. In the basic approach, data is organized as a contiguous sequence of readings in order of sensing time, and can be accessed only through a sequence scan. Thus, an archived stream in our system is analogous to a heap file in traditional database systems.</p><p>• Index: In the second approach, index structures are built on top the stream, based on one or multiple attributes of the readings. Such indices will provide efficient support for equality and range predicates on the matching attributes, eliminating the need to scan the entire stream. Standard indices, such as hash indices, B-trees, and R-trees, will be equally useful in our system.</p><p>• Summary: Efficient handling of non-traditional data mining queries requires a different strategy. Typical queries in this family, such as time series analysis and signal processing queries, require a sequential scan of the data of interest. Standard indices for equality or range predicates are not so helpful to them. Processing of certain queries, however, can be made more efficient by exploiting a lower-resolution summary of the data-the coarser grained representation can be first scanned quickly to eliminate subsets that are not of interest and identify parts that are likely to match; the full resolution versions of only these subsets are then scanned for further processing. Summary-based access methods as such can substantially reduce the energy costs of full scans.</p><p>Costs and Benefits of Access Methods. A fundamental difference between a sensor database and a traditional database is that in the former system, auxiliary access methods such as indices and summaries consume energy in their construction, so their benefits in query processing come at a cost. Since the tradeoff between benefits and costs of access methods is a significant issue, it challenges the conventional wisdom which indicates it is almost always beneficial to create indices for read-only query workloads. Consider a H-level B+ tree stored on flash memory. The complete cost for a single B+ tree insertion is H page reads and page writes, i.e. H(Cr+Cw), where Cr and Cw are the per page read cost and write cost, respectively. Alternately, if index construction is avoided altogether, and a sequential scan of the stream is needed to process each query, which costs Cr/Rpage, where Rpage is the number of readings stored in one page. A back-of-the-envelope calculation using flash read and write costs <ref type="bibr" target="#b31">[34]</ref> and a B+ tree of depth two reveals that performing a sequential scan is 340 times more energy efficient than building a B+ tree for it! Thus, the benefit of an index offsets the high construction cost only when the data is accessed very frequently. Otherwise it is more energy efficient to execute the query by resorting to sequential scans.</p><p>For this reason, StonesDB supports lazy index construction. By default, index construction is disabled; it is triggered dynamically when it is deemed beneficial. This decision can be made based on the knowledge of the current query workload, e.g., the presence of periodic queries that need to repeatedly scan overlapping regions of the stream, or the presence of multiple queries that overlap in their search ranges. It can also be made based on the statistics collected, e.g., the frequency of scanning the data in the recent past. Additionally, indices can be independently maintained for different partitions of the stream, which is explained more below.</p><p>Energy Efficient Construction and Maintenance of Access Methods. Another issue pertaining to the storage system in a sensor database is how to efficiently construct and maintain access methods over flash memory, once a decision is made to built them. As stated in Section 2.2, read, write as well as erase operations on flash memory consume energy; hence, all these operations need to be minimized to achieve an energy-optimized database. The storage subsystem of StonesDB achieves energy-efficiency using two techniques.</p><p>Partitioned Access Methods. The first technique that StonesDB uses to optimize energy is to create partitioned access methods. More specifically, each stream in the flash memory store is organized into temporal segments, called partitions; auxiliary access methods such as indices and summaries are built for each partition. Under this approach, data and its indices are bundled together in partitions; if the data needs to be deleted, its indices can be easily located and pruned together with the data. Otherwise, one has to search a large index created for the entire stream to prune index entries pointing to the deleted data. The storage system can choose to create logical or physical partitions. Logical partitions are simply defined by the temporal ranges that they cover, and linked with the relevant data and indices. In this scheme, however, deleting data and indices may incur separate erase operations, if they belong to different erase blocks. Physical partitions can provide an additional benefit. In this scheme, the flash memory store is physically organized into partitions that are aligned with flash erase block boundaries. Each partition is a container comprising data and associated indices and is completely self-contained; if deleted, the data and its index are both discarded in one erase operation. <ref type="figure" target="#fig_2">Figure 4</ref> shows how partitioned access methods are performed in StonesDB. For Stream 1, based on the application specification or internal decision, the database creates two indices for this stream, e.g., a B+Tree and an R-Tree. Streams are broken into physical partitions, with only the most recent partition under construction, e.g., the partition labeled as "Data1" in this example. A new set of indices are created for every new partition that is written. Each partition co-locates a segment of the stream together with its associated indices so that they can be pruned together later.</p><p>Write-Once Indexing. The presence of partitions enables the second technique that StonesDB uses for energy optimization, which we call write-once indexing. Our goal here is to ensure that indices generated on the data stream are written only once to flash and are not updated once written. This design principle aims to eliminate read, write and erase overhead that is incurred when a flash memory index is updated as described in Section 2.3. Clearly, if one wants to create a B+tree for an entire stream, it will be very challenging (if possible) to avoid updates of existing index pages. Partitioning data into smaller temporal ranges and creating a separate index per partition raises the possibility of devising algorithms to achieve write-once indexing.</p><p>A simple idea is that given a reasonable amount of memory, we might be able to hold the entire B+tree in memory during its construction for a partition and write it once to flash. The smaller the partition is, the more likely the index fits in memory. A small value for the partition size, however, may result in poor performance in query processing: given a range query, we may have to search in many partitions overlapping with the query-specified search range, which results in higher accumulated overhead in traversing those indices. How to find an appropriate partition size to strike the balance between the index construction cost and query processing cost is a research issue that we will explore. In memory-constrained environments, e.g., platforms whose available memory is smaller than or close to the size of an erase block, holding an index for a partition is impossible. In such cases, more advanced techniques are needed to ensure no (or very few) updates of existing index entries.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Summarization and Aging</head><p>The second main component of StonesDB addresses the summarization and aging of data. Before we delve into details, it is worth noting the difference between these two: while summarization can be used during aging, it is applicable in a broader set of contexts, as explained below.</p><p>Multi-Resolution Summarization. StonesDB provides the option of storing coarse-grained versions of data with varying granularity. This scheme, which we refer to as multi-resolution storage, serves three purposes: (1) coarse-grained summaries may allow more efficient processing of certain types of queries, as discussed above; (2) such summaries can be transmitted to proxies to facilitate query optimization there, as noted in Section 3; and (3) they can be used to retain useful information about old sensor data while aging the raw data to create space for new data. <ref type="figure" target="#fig_2">Figure 4</ref> shows an example of how the multi-resolution summarization component handles a stream of images from a camera sensor. The multi-resolution component takes the raw stream as input and generates two summary streams -a wavelet-based summary stream that captures key features of the images, and a sub-sampled stream that retains every tenth image.</p><p>We focus our discussion below on summarization for aging. We utilize multi-resolution storage to capture the key characteristics of the data stream using coarse-grained summaries that use substantially less storage space. These summaries can be used to respond to queries on older data that has been deleted, though with lesser confidence. Since summaries occupy less storage, they can be re- A key research contribution of our work in addressing the question of what summaries to construct. The summarization algorithm selected depends on the types of queries that are posed on the data, user input such as precision requirements of queries over old data, and the type of sensor data being stored. For instance, weather data has temporal patterns, hence the summary might be a model that captures the patterns in the data, and major deviations from this pattern. In other instances such as habitat monitoring, the summary can be histograms of events that have been observed in the network. Techniques to generate summaries from raw data are another issue. One approach that we will explore is to leverage a wealth of research from the data mining community, including non-sampling based approaches such as wavelet summaries <ref type="bibr" target="#b6">[9]</ref> and histograms <ref type="bibr" target="#b37">[40]</ref>; and sampling-based techniques such as AQUA <ref type="bibr" target="#b5">[7]</ref>, and adapt and compare them for energy-efficient implementation over flash.</p><p>Data Aging. As the flash starts filling up, some data needs to be discarded to make room for future data requiring some partitions to be aged. When the database determines that a partition worth of data needs to be discarded, the aging component looks through all the partitions, assigning each partition an erase age. The erase age of a partition does not depend on the write timestamp of the partition alone -other factors need to be taken into account such as the importance of the data in the partition (e.g. some partitions may hold certain event of interest) and the importance of the stream itself (e.g. a summary stream is more important than a raw data stream). Once all partitions have been assigned an erase age, the "least valuable" partition can be discarded.</p><p>The primary challenge in aging sensor data is determining what to age. StonesDB determines the erase age of data based on application aging policies and priorities. In our current design, the application provides its utility specification for queries -for example, an application can specify that it needs raw data for 30 days and then summaries that provides 95% confidence response for 90 days. This specification can be used to determine the erase age of different partitions and age data accordingly.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Query Engine</head><p>The third component of StonesDB is the query engine. As argued earlier, unlike traditional query engines that are optimized for response time, the StonesDB query engine is optimized for energy efficiency. This involves determining the most energy-efficient plan for answering a query. Overall, query processing and optimization in a sensor database is a remarkable challenge that we have just started to explore. We next highlight two research issues.</p><p>Query Optimization: A Simplified View. The conceptual model for the query optimizer is rather intuitive: first identify a set of feasible plans, and choose the most energy efficient one from them. Typical sensor applications are unlikely to issue complex queries such as those in decision support systems. A traditional query plan for a sensor database query may include a relatively simple tree of operators, for example, involving a join, an aggregate function or a pattern detection operator on top of the necessary access methods. This view is sufficient in the absence of data aging. What remains to be done is to build a cost model that captures both flash read cost and CPU cost for available implementations of each operator in the query plan. Such a cost model can be derived from the measurements given in <ref type="table" target="#tab_2">Table 1</ref> and the expected numbers of read operations from flash and those of CPU computation. However, when data aging also needs to be supported, the query processing strategy changes and we discuss the implications below.</p><p>Probabilistic Query Processing. Data aging poses a unique challenge for query processing and optimization. Recall that due to finite storage, some older data that a query requires may have been aged and summarized. In such cases, no single access method may be able to retrieve all data for answering the query. Therefore, the query needs to be split into a number of subqueries, for each of which there is at least one access method that covers the required data. Extra operations may be required to merge the results of the subqueries and derive the final result. A first related issue is that sophisticated metadata needs to be maintained so that the query optimizer is able to find a covering set of access methods. A second issue relates to the merging of results of subqueries, especially in scenarios where some results are generated from raw data while others are from summaries. A third issue concerns the possibility of splitting a query into subqueries. It is well-known in the literature that aggregation functions such as medium and percentile cannot be divided into subqueries with guaranteed correct answers. The last two issues imply that the query answers will be probabilistic in nature. While probabilistic query processing has recently gained research attention <ref type="bibr" target="#b2">[3,</ref><ref type="bibr" target="#b1">2,</ref><ref type="bibr" target="#b0">1]</ref>, how to perform it in a energy-constrained environment remains a new world to explore.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">DISTRIBUTED DATA MANAGEMENT</head><p>The distributed data management layer in StonesDB unifies local storage and database capabilities at individual sensor nodes into a networked sensor database. StonesDB provides the user with the abstraction of a centralized database over a distributed sensor network, and transparently determines what data to cache at the proxy, how to execute queries on cached data, and how to efficiently query the sensor tier. In this section, we provide a brief glimpse of to key questions that we are addressing that relates to distributed querying of storage-centric sensor networks:</p><p>• What summaries to cache at a proxy to efficiently locate sensors that have data relevant to a particular query?</p><p>• How should a query plan be split between the proxy and the sensors?</p><p>Of these two problems, the first bears similarity to caching techniques used in traditional distributed databases and web caching, however, there are differences due to the energy-constrained nature of the network and sensor data characteristics. To address the second problem, we identify unique opportunities in the context of storage-centric sensor networks, which, to the best of our knowledge, have not been explored in other work in the literature.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Querying the Proxy Cache</head><p>Proxy caching in storage-centric sensor networks differs in a number of ways from traditional caching techniques in databases and networked systems. First, while traditional caches store a frequently accessed subset of the data, the sensor proxies cache summaries of the data to enable efficient search of remotely stored sensor data. Second, traditional caching techniques are designed to optimize performance objectives such as latency and bandwidth, whereas proxy caching in sensor networks needs to minimize the total energy used to transmit summaries from sensors to the proxy, to forward queries from the proxy to sensors, to execute the queries on locally stored data at the sensors, and to transmit the results of the query back to the proxy. In this section, we discuss two problems in proxy caching in storage-centric sensor networks: what summaries to cache and what resolution of summaries to cache.</p><p>What summaries to cache: The decision of what summaries to cache depends on the types of queries posed on the data. For instance, certain queries will simply retrieve a subset of the archived data (e.g., retrieve all tuples where temperature exceeds 80 F) whereas others will compute a function over a set of observations (e.g., max temperature over the past day). StonesDB seeks to provide a family of summaries suitable for sensor data caching. For example, spatio-temporal data models that have been proposed for acquisitional query processing <ref type="bibr" target="#b11">[14]</ref>, and in our recent work on modeldriven push <ref type="bibr" target="#b23">[26]</ref> can be adapted to be used for proxy caching and data retrieval. Here, a statistical model of sensor data (e.g.: ARIMA model) is maintained at the proxy and raw data is stored at the sensors. The proxy uses the cached data to answer queries on past data, but if the query cannot be answered with the required confidence interval, the query is pushed to the sensors which can process the query on locally archived data. Besides statistical models, the data that is cached at the proxy could be just lossy summaries of archived data at a sensor such as a low-resolution summary or metadata of images that were observed in a camera sensor network (e.g.: TSAR <ref type="bibr" target="#b13">[16]</ref>).</p><p>What resolution of summaries to cache: This question is relevant to search-based sensor networks where the sensors transmit low-resolution summaries of the data that they sense to the proxy. More precise summaries of data at the proxy can enable the proxy to answer a greater fraction of queries on its own without needing to forward queries to the sensors. However, transmitting more precise summaries incurs higher energy overhead. One of the tradeoffs that such a storage-centric query execution framework presents is balancing the energy cost of updates with the overhead of false positives. Transmission of more coarse-grained image summaries to the proxy incurs less energy overhead but increases the fraction of false positives. Alternately, transmission of more fine-grained summaries incurs greater energy overhead but reduces false positives and hence query overhead. StonesDB seeks to adaptively balance the cost of transmitting summaries together with the cost of false positives to minimize energy consumption <ref type="bibr" target="#b13">[16]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Querying the Sensor Tier</head><p>Upon a cache miss, the proxy queries the appropriate sensors provide an accurate query response while simultaneously minimizing the energy cost incurred by sensors for communication. An interesting problem that is unique to storage-centric query processing is splitting the query processing between the proxy and the remote sensors. Several possibilities arise for such split query processing. First, since the proxy has a coarse-grain summary of the data, it can use this summary and/or an index of the data to prune the set of sensor nodes that need to be queried (instead of flooding the query). For instance, if a query to a camera sensor network asks for all instances of a truck seen over the past hour, the low-resolution summary can be used to eliminate all nodes that didn't see any objects in this time period. Assuming the low-resolution image summaries only indicate whether an object was seen but not its type, only those nodes that detected an object in this time period need to be queried.</p><p>A more interesting possibility is to partially process the query at the proxy and refine the result at the sensor node; this reduces the query processing burden at the sensor nodes and saves energy. Consider a query that requests the number of trucks seen by a camera sensor over the past hour. Suppose that the proxy cache contains data from the node for the first half hour. This data can be employed to partially process the query at the proxy and determine the number of trucks seen for the first half hour. The sensor node can refine this partial result by processing the query for the remaining period. Another possibility is to use the coarse-grain summaries to process a query and produce a result with a certain confidence bound; if the confidence bound does not satisfy the query error tolerance, the partial results can be sent to the sensor node for further refinement until a result with sufficient confidence is produced. These examples of split query processing illustrate how a resources at the proxy can be leveraged to reduce the amount of data retrieved and processed at the sensor node, thereby yielding an energy-efficient design.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.">RELATED WORK</head><p>Related work can broadly be classified into the following categories -work in the sensor network domain towards treating the sensor network as a database and work in the database community towards building databases on resource-constrained platforms. This section discusses only complete systems related to our workCougar, TinyDB and BBQ fall in the former category and we discuss these first, while PicoDBMS and DELite fall in the latter category. Other related work has been discussed in the relevant sections where it has been referenced.</p><p>The approach adopted in Cougar <ref type="bibr" target="#b54">[57]</ref> is to treat the sensor network as a distributed database where data collection is performed using declarative queries, allowing the user to focus on the data itself, rather than data collection. Given a user query, a central query optimizer generates an efficient query plan aimed at minimizing resource usage within the network. The sensors sense data and then transmit data matching some criteria to the base-station. The amount of data transferred is further minimized by doing some level of in-network processing on the data as it is being transferred to the base.</p><p>TinyDB <ref type="bibr" target="#b29">[32]</ref> uses an acquisitional query processing approach where data is requested from sensors depending on the specific query posed to the network. It allows user queries to be posed using a database query language that allows both data collection and aggregation. Given a user query, TinyDB generates data filters that it then distributes and pushes onto individual sensor nodes. The sensors send data matching the filter, which is then aggregated within the network on its way to the base-station. Both these techniques minimize resource usage and hence are energy-efficient for the sensor network.</p><p>BBQ <ref type="bibr" target="#b11">[14]</ref> improves over TinyDB by constructing data models of the sensed data using statistical modeling techniques. The data model and live sensor data are both used to respond to queries. While this approach does introduce approximations with probabilistic confidences, it allows significant energy and time savings over the TinyDB approach. Queries that require low confidence bounds can be answered at the base station itself with the help of the data model, while queries with high confidence requirements might require acquisition of some data from the sensor.</p><p>A multitude of techniques have been explored to generate data summaries which could be used to generate data models and approximate responses to queries at the base station. Non-sampling based approaches include the use of wavelet summaries <ref type="bibr" target="#b6">[9]</ref> and histograms <ref type="bibr" target="#b37">[40]</ref>, while examples of other sampling based approaches include AQUA <ref type="bibr" target="#b5">[7]</ref>. <ref type="bibr" target="#b57">[60]</ref> uses small sketches to approximate data aggregation within a sensor network.</p><p>PicoDBMS <ref type="bibr" target="#b53">[56]</ref> is a complete database platform targeted at smartcard platforms. Like sensor platforms, smart-card platforms are highly resource constrained, however, unlike sensors node, they are not energy constrained, since they depend on external energy sources such as that of the card reader. The PicoDBMS design is specifically targeted at minimizing the write operations to EEP-ROM as these are time-consuming and reduce the performance of the system. The paper proposes a novel storage model that indexes data while it is being written, reducing write costs. PicoDBMS also handles complex query plans with minimal RAM consumption while supporting select, project, join and aggregate queries. A key difference is that, unlike sensor networks, energy optimizations are not a major design goal in PicoDBMS.</p><p>The DELite <ref type="bibr" target="#b52">[55]</ref> project aims at constructing a relational database on PDA-class platforms, which have significantly more available resources (processor, memory and available power) in comparison to the smart-card or sensor platforms. The goal of the project is to support complex local queries as well as efficient database synchronization with a central database. The project uses flash memory for storage and focuses on constructing efficient query execution plans to efficiently execute complex queries. <ref type="bibr" target="#b55">[58]</ref> and <ref type="bibr" target="#b56">[59]</ref> aim at constructing efficient B-trees and R-trees respectively on NAND flash storage media. Both these approaches are also targeted at PDA-class platforms as they employ out-of-place data modification techniques that require a substantial amount of memory, which is unavailable on typical sensor platforms.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.">CURRENT STATUS AND CONCLUSIONS</head><p>In this paper, we argued that new technology developments in flash memories and sensor platforms have enabled energy-efficient storage and rich query processing on senor nodes and argue for revisiting the sensor network as a database architecture. We presented StonesDB, a sensor network database architecture that we are designing to exploit these trends. Our recent research has addressed several issues that arise in the design of StonesDB, although much remains to be done. We recently developed Capsule <ref type="bibr" target="#b30">[33]</ref>, a flash-based object store that provides energy-efficient implementations of objects such as linked lists, arrays, streams and trees. We are currently enhancing Capsule to handle the needs of StonesDB, such as multi-resolution summarization, aging and partitioned indexing. We have also investigated hierarchical data management in sensor networks in the context of TSAR <ref type="bibr" target="#b13">[16]</ref> and PRESTO <ref type="bibr" target="#b23">[26]</ref>. TSAR envisions separation of data from meta-data by emphasizing local archival at the sensors and distributed indexing at the proxies. At the proxy tier, TSAR employs a novel multi-resolution ordered distributed index structure, the Interval Skip Graph, for efficiently supporting spatio-temporal and value queries. PRESTO implements an initial version of our proxy cachethe cache is used to answer queries while error tolerances can be met, else the queries are forwarded to sensors. PRESTO also proposed a novel model-driven push-based data acquisition technique where the proxy builds a model of sensor data and transmits it to the sensor. The sensor checks the model against ground-truth and transmits only the deviations. Our ongoing work focuses on the challenges that arise in the design of the local database, including support for rich, energy-efficient query processing, multiresolution storage and aging. We are also designing a distributed layer that splits query processing between the proxy and remote sensors.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 2 : StonesDB architecture for a two-tier sensor network comprising proxies and sensors. The sensor tier runs an ul- tra low-power database stack that performs flash-optimized energy-efficient archival and query processing and multi- resolution data aging. The proxy tier performs intelligent caching and indexing, and determines how to handle queries with minimal energy cost.</head><label>2</label><figDesc>Figure 2: StonesDB architecture for a two-tier sensor network comprising proxies and sensors. The sensor tier runs an ultra low-power database stack that performs flash-optimized energy-efficient archival and query processing and multiresolution data aging. The proxy tier performs intelligent caching and indexing, and determines how to handle queries with minimal energy cost.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: Architecture of the local database</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 4 :</head><label>4</label><figDesc>Figure 4: Data Organization in the Database</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2" validated="false"><head>Table 1 :</head><label>1</label><figDesc></figDesc><table>Cost of NAND flash operations on the Mica2 sensor platform 

</table></figure>

			<note place="foot" n="1"> STONES is an acronym for STOrage-centric Networked Embedded Systems.</note>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Efficient Query Evaluation on Probabilistic Databases</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Dalvi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Suciu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">VLDB</title>
		<imprint>
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">ULDBs: Databases with Uncertainty and Lineage</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Benjelloun</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">D</forename><surname>Sarma</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Halevy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Widom</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Trio: A System for Integrated Management of Data, Accuracy, and Lineage</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Widom</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">CIDR 2005</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title level="m" type="main">Byers Approximate Aggregation Techniques for Sensor Databases</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Considine</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Kollios</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">W</forename></persName>
		</author>
		<imprint>
			<date type="published" when="2004" />
			<biblScope unit="page" from="449" to="460" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">The Design of an Acquisitional Query Processor For Sensor Networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Madden</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">J</forename><surname>Franklin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">M</forename><surname>Hellerstein</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Hong</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGMOD 2003</title>
		<imprint>
			<biblScope unit="page" from="491" to="502" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">The Aqua approximate query answering system</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Acharya</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">B</forename><surname>Gibbons</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Poosala</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Ramaswamy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGMOD 1999</title>
		<imprint>
			<biblScope unit="page" from="574" to="576" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Approximate query processing using wavelets</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Chakrabarti</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Garofalakis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Rastogi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Shim</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">VLDB Journal</title>
		<imprint>
			<biblScope unit="volume">10</biblScope>
			<biblScope unit="issue">2-3</biblScope>
			<biblScope unit="page" from="199" to="223" />
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Approximate aggregation techniques for sensor databases</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Considine</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Kollios</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Byers</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ICDE</title>
		<imprint>
			<date type="published" when="2004-04" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title level="m" type="main">Intel Corporation</title>
		<ptr target="http://www.intel.com/research/downloads/imote_overview.pdf" />
		<imprint/>
	</monogr>
	<note>Intel Mote 2</note>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title level="m" type="main">Micaz sensor platform</title>
		<ptr target="www.xbow.com/Products/Wireless_Sensor_Networks.htm" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">ELF: An efficient log-structured flash file system for micro sensor nodes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Dai</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Neufeld</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Han</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SenSys</title>
		<meeting><address><addrLine>New York, NY</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2004" />
			<biblScope unit="page" from="176" to="187" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Model-driven data acquisition in sensor networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Deshpande</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Guestrin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Madden</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">M</forename><surname>Hellerstein</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Hong</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">VLDB</title>
		<imprint>
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Mauvedb: supporting model-based user views in database systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Deshpande</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Madden</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGMOD 2006</title>
		<meeting><address><addrLine>New York</addrLine></address></meeting>
		<imprint>
			<biblScope unit="page" from="73" to="84" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">TSAR: A two tier storage architecture using interval skip graphs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Desnoyers</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Ganesan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Shenoy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SenSys 2005</title>
		<meeting><address><addrLine>San Francisco, CA</addrLine></address></meeting>
		<imprint>
			<biblScope unit="page" from="39" to="50" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Practical data-centric storage</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">T</forename><surname>Ee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Ratnasamy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Shenker</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">NSDI</title>
		<imprint>
			<date type="published" when="2006-05" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Enea</forename><surname>Polyhedra</surname></persName>
		</author>
		<ptr target="http://www.enea.com/templates/Extension____9122.aspx" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<monogr>
		<title level="m" type="main">Multi-resolution storage in sensor networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Ganesan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Greenstein</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Perelyubskiy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Estrin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Heidemann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Govindan</surname></persName>
		</author>
		<imprint>
			<publisher>ACM TOS</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<title level="m" type="main">Design of Matchbox, the simple filing system for motes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Gay</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2003-08-21" />
		</imprint>
	</monogr>
	<note>in TinyOS 1.x distribution, www.tinyos.net. Version 1.0</note>
</biblStruct>

<biblStruct xml:id="b18">
	<monogr>
		<title level="m" type="main">DIFS: A distributed index for features in sensor networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Greenstein</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Estrin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Govindan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Ratnasamy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Shenker</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2003" />
			<publisher>Elsevier Journal of Ad-Hoc Networks</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Power-conserving computation of order-statistics over sensor networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">B</forename><surname>Greenwald</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Khanna</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM PODS</title>
		<imprint>
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Beyond average: Towards sophisticated sensing with queries</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Hellerstein</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Hong</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Madden</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Stanek</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IPSN</title>
		<meeting><address><addrLine>Palo Alto, CA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Directed diffusion: A scalable and robust communication paradigm for sensor networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Intanagonwiwat</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Govindan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Estrin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM/IEEE Mobicom</title>
		<meeting><address><addrLine>Boston, MA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2000-08" />
			<biblScope unit="page" from="56" to="67" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<monogr>
				<ptr target="http://www.ittia.com/library/datasheets/fuel_datasheet.pdf" />
		<title level="m">ITTIA. Fuel data sheet</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">PRESTO: Feedback-driven data management in sensor networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Ganesan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Shenoy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">NSDI</title>
		<imprint>
			<date type="published" when="2006-05" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Multi-dimensional range queries in sensor networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y.-J</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Govindan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Hong</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SenSys</title>
		<imprint>
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Detection, classification and tracking of targets</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Wong</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Hu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Sayeed</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Signal Processing Magazine</title>
		<imprint>
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Physical integrity in a large segmented database</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">A</forename><surname>Lorie</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM TODS</title>
		<imprint>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="91" to="104" />
			<date type="published" when="1977" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">XYZ: A motion-enabled, power aware sensor node platform for distributed sensor network applications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Lymberopoulos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Savvides</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IPSN SPOTS</title>
		<imprint>
			<date type="published" when="2005-04" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">TAG: a tiny aggregation service for ad-hoc sensor networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Madden</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Franklin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Hellerstein</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Hong</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">OSDI</title>
		<meeting><address><addrLine>Boston, MA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<monogr>
		<title level="m" type="main">Tinydb: An acqusitional query processing system for sensor networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Madden</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Franklin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Hellerstein</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Hong</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2005" />
			<publisher>ACM TODS</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<monogr>
		<title level="m" type="main">Capsule: An energy-optimized object storage system for memory-constrained sensor devices</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Mathur</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Desnoyers</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Ganesan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Shenoy</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2006-11" />
		</imprint>
	</monogr>
	<note>To appear in SenSys</note>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">Ultra-low power data storage for sensor networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Mathur</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Desnoyers</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Ganesan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Shenoy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IPSN-SPOTS</title>
		<meeting><address><addrLine>Nashville, TN</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2006-04" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">Data gathering tours in sensor networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Meliou</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Chu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Guestrin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Hong</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IPSN</title>
		<imprint>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<monogr>
		<title level="m" type="main">Vagabond: The design and analysis of a temporal object DBMS</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Nrvag</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2000" />
		</imprint>
		<respStmt>
			<orgName>Norwegian University of Science and Technology</orgName>
		</respStmt>
	</monogr>
<note type="report_type">PhD thesis</note>
</biblStruct>

<biblStruct xml:id="b34">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Mcobject</surname></persName>
		</author>
		<ptr target="http://www.mcobject.com/pdfs/standard_datasheet.pdf" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<analytic>
		<title level="a" type="main">Telos: Enabling ultra-low power wireless research</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Polastre</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Szewczyk</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Culler</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IPSN-SPOTS</title>
		<imprint>
			<date type="published" when="2005-04" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<monogr>
		<title level="m" type="main">Applications: Beyond Dumb Data Collection (Panel)</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Paradiso</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Borriello</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Girod</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Han</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2006" />
			<pubPlace>In EmNets</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b37">
	<monogr>
		<title level="m" type="main">Histogram-based estimation techniques in database systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Poosala</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1997" />
			<pubPlace>Madison, WI, USA</pubPlace>
		</imprint>
	</monogr>
<note type="report_type">PhD thesis</note>
</biblStruct>

<biblStruct xml:id="b38">
	<monogr>
		<title level="m" type="main">Database Mgmt Systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Ramakrishnan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Gehrke</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2003" />
			<publisher>McGraw Hill</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b39">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Ratnasamy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Estrin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Govindan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Karp</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><forename type="middle">Y</forename></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b40">
	<analytic>
		<title level="a" type="main">Data-centric storage in sensornets</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Shenker</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Yu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM HotNets</title>
		<imprint>
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b41">
	<analytic>
		<title level="a" type="main">The design and implementation of a log-structured file system</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Rosenblum</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">K</forename><surname>Ousterhout</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM TOCS</title>
		<imprint>
			<date type="published" when="1992-02" />
			<biblScope unit="volume">10</biblScope>
			<biblScope unit="page" from="26" to="52" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b42">
	<analytic>
		<title level="a" type="main">Active query forwarding in sensor networks (acquire)</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Sadagopan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Krishnamachari</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Helmy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SNPA</title>
		<imprint>
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b43">
	<analytic>
		<title level="a" type="main">The design and implementation of a sequence database system</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Seshadri</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Livny</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Ramakrishnan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">VLDB</title>
		<imprint>
			<date type="published" when="1996" />
			<biblScope unit="page" from="99" to="110" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b44">
	<analytic>
		<title level="a" type="main">A sampling-based approach to optimizing top-k queries in sensor networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Silberstein</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Braynard</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Ellis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Munagala</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Yang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ICDE</title>
		<imprint>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b45">
	<analytic>
		<title level="a" type="main">Energy-efficient monitoring of extreme values in sensor networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Silberstein</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Munagala</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Yang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM SIGMOD</title>
		<imprint>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b46">
	<analytic>
		<title level="a" type="main">The Postgres storage system</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Stonebraker</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">VLDB, England</title>
		<imprint>
			<date type="published" when="1987-09" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b47">
	<analytic>
		<title level="a" type="main">Hybrid push-pull query processing for sensor networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Trigoni</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Yao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Demers</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Gehrke</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Rajaraman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Workshop on Sensor Networks as part of the GI-Conference Informatik</title>
		<meeting><address><addrLine>Berlin, Germany</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2004-09" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b48">
	<analytic>
		<title level="a" type="main">Slip surface localization in wireless sensor networks for landslide prediction</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Terzis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Anandarajah</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Moore</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I.-J</forename><surname>Wang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IPSN 2006</title>
		<meeting><address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="2006" />
			<biblScope unit="page" from="109" to="116" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b49">
	<analytic>
		<title level="a" type="main">A wireless sensor network for structural monitoring</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Xu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Rangawala</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Chintalapudi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Ganesan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Broad</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Govindan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Estrin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SenSys</title>
		<imprint>
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b50">
	<monogr>
		<title level="m" type="main">Query processing for sensor networks. CIDR</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Yao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Gehrke</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2003-01" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b51">
	<analytic>
		<title level="a" type="main">MicroHash: An efficient index structure for flash-based sensor devices</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Zeinalipour-Yazti</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Lin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Kalogeraki</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Gunopulos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Najjar</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">FAST</title>
		<imprint>
			<date type="published" when="2005-12" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b52">
	<analytic>
		<title level="a" type="main">Efficient Data Management on Lightweight Computing Devices</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Sen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Ramamritham</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ICDE</title>
		<meeting><address><addrLine>Tokyo, Japan</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2005-04" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b53">
	<analytic>
		<title level="a" type="main">PicoDBMS: Scaling down Database techniques for the Smartcard</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Pucheral</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Bouganim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Valduriez</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Bobineau</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">VLDB</title>
		<meeting><address><addrLine>Secaucus NJ</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b54">
	<analytic>
		<title level="a" type="main">The Cougar Approach to In-Network Query Processing in Sensor Networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Yao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">E</forename><surname>Gehrke</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGMOD Record</title>
		<imprint>
			<date type="published" when="2002-09" />
			<biblScope unit="volume">31</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b55">
	<analytic>
		<title level="a" type="main">An Efficient B-Tree Layer for Flash-Memory Storage Systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Chang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Kuo</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">RTCSA</title>
		<meeting><address><addrLine>Tainan, Taiwan</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b56">
	<analytic>
		<title level="a" type="main">An Efficient R-Tree Implementation over Flash-memory Storage Systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Chang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Kuo</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM GIS</title>
		<imprint>
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b57">
	<analytic>
		<title level="a" type="main">Approximate Aggregation Techniques for Sensor Databases</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Considine</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Kollios</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Byers</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE ICDE</title>
		<imprint>
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b58">
	<analytic>
		<title level="a" type="main">Cyclops: In Situ Image Sensing and Interpretation in Wireless Sensor Networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Rahimi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Baer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><forename type="middle">I</forename><surname>Iroezi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">C</forename><surname>Garcia</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Warrior</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Estrin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Srivastava</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SenSys</title>
		<meeting><address><addrLine>New York, NY</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
