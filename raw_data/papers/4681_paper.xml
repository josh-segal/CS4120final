<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2019-03-26T16:57+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Tracking the Evolution of Feature Oriented Product Lines</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Salvador</forename><surname>Trujillo</surname></persName>
							<email>strujillo@ikerlan.es</email>
							<affiliation key="aff0">
								<orgName type="institution">IKERLAN Research Centre Mondragon</orgName>
								<address>
									<country key="ES">Spain</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gentzane</forename><surname>Aldekoa</surname></persName>
							<email>galdekoa@eps.mondragon.edu</email>
							<affiliation key="aff1">
								<orgName type="institution">University of Mondragon Mondragon</orgName>
								<address>
									<country key="ES">Spain</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Goiuri</forename><surname>Sagardui</surname></persName>
							<email>gsagardui@eps.mondragon.edu</email>
							<affiliation key="aff2">
								<orgName type="institution">University of Mondragon Mondragon</orgName>
								<address>
									<country key="ES">Spain</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Tracking the Evolution of Feature Oriented Product Lines</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>Software Product Line</term>
					<term>Feature Oriented Programming</term>
					<term>Software Evolution</term>
					<term>Change Impact</term>
				</keywords>
			</textClass>
			<abstract>
				<p>Families of programs are steadily emerging in assorted domains where Software Product Line (SPL) paradigm provides a cost-effective development approach. Feature Oriented Programming (FOP) is a specific approach to SPL development where features not only sketch increments in program functionality, but are the building blocks of programs. There exists some analysis on the evolution of SPL (e.g. new feature requirements, technical changes, etc), but do not specifically provide a model to track the milestones of such variability evolution. This paper explores evolution tracking in the context of existing approaches. We track the evolution of Feature Oriented Product-Lines by differentiating the changes from a change base, storing only the deltas.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">Introduction</head><p>Families of programs are steadily emerging for distinct domains such as embedded systems, navigational systems, financial applications or even web applications. This shifts the attention from individual product-centric development to Software Product Line (SPL) development where the focus is on constructing reusable artifacts of the assembly line from which final products are obtained in a costeffective way.</p><p>Feature Oriented Programming (FOP) is a specific approach to SPL development where features are not only considered increments in program functionality, but are the building blocks of programs. FOP introduces a variability model and a compositional approach where feature combinations yield programs. However, FOP does not deal with product line evolution.</p><p>Prior work on individual software evolution analyzed the reasons that force such evolution, the content that could be affected and provided a generic process to handle it <ref type="bibr" target="#b9">[10]</ref>.</p><p>Lehman <ref type="bibr" target="#b9">[10]</ref> and Parnas <ref type="bibr" target="#b11">[12]</ref> state that the quality of a program deteriorates gradually as it evolves. When a program changes, its structure is neglected, being its quality typically deteriorated. Nonetheless, maintenance is unavoidable.</p><p>SPL is not an exception and evolution occurs even more frequently. A recent study addressed the quantification of SPL maintainability <ref type="bibr" target="#b0">[1]</ref>. Bosch states that the evolution process is more complex in SPL development <ref type="bibr" target="#b3">[4]</ref>.</p><p>More to the point, the probability that an SPL evolves is higher than an individual product. Change probability is more likely as the domain to serve SPL products is larger and can require new functionalities faster than a single customer (i.e. the larger the number of drivers of change, the higher the probability that the SPL evolves to cater for such changes).</p><p>According to <ref type="bibr">Loughran [11]</ref>, it is crucial to document the evolution that scatters among more than one artefact, as it can impact not only to one individual program, but to a number of programs.</p><p>However, prior models on SPL and specifically on FOP do not provide specific mechanisms to track the evolution where the milestones can be registered. Our work elaborates on how to track evolution extending AHEAD, which is an FOP model to capture variability <ref type="bibr" target="#b2">[3]</ref>. We begin with a review of background.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">Background</head><p>Feature Oriented Programming. FOP is an approach to SPL development where programs are synthesized by composing features <ref type="bibr" target="#b2">[3]</ref>. Features, as the building blocks of programs, are units incrementing application functionality by which different products can be distinguished and defined within an SPL. Each feature may include any number of artifacts.</p><p>An FOP model of an SPL offers a set of features. We write M = {f, h, i, j} to mean product-line M has features f, h, i, and j. In general, an SPL is characterized by the set of features it supports.</p><p>Accepted for publication at: Jornadas de Ingeniería del Software y Bases de Datos <ref type="bibr">(JISBD 2007</ref>  The set of programs that can be created from a model is its product line.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Algebraic Hierarchical Equations for Application</head><p>Design (AHEAD) is a realization of FOP to express nested hierarchies of artifacts and their composition <ref type="bibr" target="#b2">[3]</ref>. Each feature realization encapsulates the set of artifacts (i.e. files) realizing its functionality.</p><p>If feature f encapsulates a set of artifacts af, bf, and df we write f={af, bf, df}. Similarly, i={ai, bi, ci} represents that feature i encapsulates artifacts ai, bi, and ci. As artifacts themselves may be sets, a feature is a nested set of artifacts. AHEAD uses directories to represent nested sets. Features are composed by applying (1) recursively, where directories are folded together by composing corresponding artifacts in each directory. <ref type="figure">Figure 1b</ref> shows the composition of features A and B. The result is feature C, where artifact X.jak of C is synthesized by composing X.jak (from B) with X.jak (from A) <ref type="bibr" target="#b2">[3]</ref>.</p><p>The polymorphism of the • operator is central to AHEAD. Artifacts of a given type (.jak, .b, etc.) and their refinements are defined in a type-specific language. That is, the definition and refinements of .jak files are expressed in the Jak(arta) language, a superset of Java.</p><p>Jak is a Java-like language supporting refinements <ref type="bibr" target="#b2">[3]</ref>. <ref type="figure">Figure 2</ref> illustrates some examples. <ref type="figure">Figure 2a</ref> shows a Jak artifact Foo defining a method bar realizing the feature Base. Now consider that the realization of Feature1 implies changing the existing class Foo by extending the method bar with further functionality. <ref type="figure">Figure 2b</ref> shows the definition of this refinement function in Jak (Super().bar(); calls parent class. Note that Super() differs from common super). The expression Feature1(Base) returns a Jak artifact which refines Base. <ref type="figure">Figure 2c</ref> illustrates this composition. Similarly, <ref type="figure">Figure 2d</ref> shows the realization of Feature2 where method bar is overridden (i.e., the previous functionality of this method is lost). <ref type="figure">Figure 2e</ref> illustrates the expression Feature2(Base). </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Examples of Jak Refinements</head><p>Product Line Evolution. Concepts regarding change in organizations can be viewed from three dimensions <ref type="bibr" target="#b9">[10]</ref>. The first dimension examines why change occurs ("drivers of change"). The second dimension concerns what the changes are ("content of change"). The third dimension regards how change occurs ("process of change"). These dimensions are used to analyze the evolution of SPL (see <ref type="figure">Figure 2</ref>).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Figura 3. Dimensions of Change</head><p>Drivers of change motivate evolution twofold: internal or external to the organization. These reasons can be used to foresee the changes ahead in time (see <ref type="table">Table 1</ref>). The external reasons cause product evolution or its retreat from the market. The internal reasons force the organization to evolve the product. Some other issues need to be studied as well when the content (i.e. what) evolves due to drivers of change (i.e. why):</p><p>• Impact degree: states the impact level between a specific driver of change and a specific content of change.</p><p>• Probability: is the likelihood a specific driver of change forces a modification on a specific content.</p><p>• Change origin: states whether the change is directly forced by a driver, or is a secondary effect or indirectly.</p><p>• Domain: study how each specific domain impacts on above mentioned issues.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>External reasons Providers</head><p>Software or hardware component providers, subcontracted companies, tools, etc. Market</p><p>Users or system buyers, competitors, service organizations, etc.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Legislation</head><p>Certification agencies or the legislation itself.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Technology</head><p>Technologies offered by the providers to develop products, technologies used by the customers and technological standards.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Internal reasons Strategy</head><p>Economic, time and quality reasons.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Experience</head><p>Experience of the company in developing the products, taking into account the skills of people and the knowledge about the product, structure, processes and methods.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Tabla 1. Drivers of Change</head><p>Specifically, in an SPL setting the market and technology reasons are slightly different. The first encompasses not only one customer, but a heterogeneous set of customers. The latter refers to the technology that realizes SPL variability in addition to domain-specific technology.</p><p>Content of change is any element that can be potentially affected by any driver of change. Such content consists of stakeholders, strategy, core assets (a.k.a. artifacts), process and resources.</p><p>The process of change analyzes how the drivers of change impact on the content of change, defining the steps to evolve such artifacts. This process has been informally defined so far. However, the main purpose of our work is not to depict a process of change, but to propose a controlled and systematic approach to track the milestones of such change.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">Tracking Evolution using AHEAD</head><p>The evolution of the SPL typically implies that some artifact(s) realizing some feature(s) can be modified to fit in the new scenario. Our goal is to document such evolution by tracking such changes.</p><p>Specifically, we focus on FOP using AHEAD to capture SPL evolution. First, we concentrate on the evolution of features. Second, we study how the artifacts realizing a feature evolve. Third, we analyze how feature models evolve. We summarize then conceptual ideas behind our approach.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1.">Feature Evolution</head><p>Features as an increment in program functionality can slightly evolve to better fit such functionality. This implies that a new feature k was introduced and some changes happened to features i' and j' in order to turn M into M'. (Note that feature removal is not considered, since AHEAD is an extensibility model that does not consider removal).</p><p>This time evolution is however not considered by existing models (e.g. AHEAD). Nonetheless, it would be possible to document such changes over time using the FOP mechanisms for features, but with a slightly different intention. First, we introduce the mechanisms, and then elaborate on the conceptual notion.</p><p>Tracking Evolution. We document this evolution as follows:</p><formula xml:id="formula_0">M' = ∆M 01 • M // evolution from N to N+1</formula><p>In general, note that ∆M 01 is a realization of an evolution from time N to time N+1: In this example, note that k is a new feature, ∆j 01 and ∆i 01 contain changes, and remaining feature deltas (∆f 01 ,∆h 01 ) are empty. In general, ∆M xy consists of the evolution of a set of features.</p><formula xml:id="formula_1">∆M</formula><p>Each feature delta (e.g. ∆i <ref type="bibr">01</ref> ) consists as well of a set of artifacts in AHEAD (e.g. Jak source classes, makefile scripts, etc). So that, the changes to a set of artifacts typically are done in parallel (e.g. if a method m1() is added to a class A, an invocation from class B is added additionally to use such method).</p><p>The motivation to keep track of these time evolution deltas is that whenever SPL deteriorates from time N to time N+1, changes are documented to enable backtracking (i.e. return backwards in the evolution time from time N+1 back to time N).</p><p>This scenario is likely to happen when considering maintenance issues as the maintainability of a given SPL can deteriorate depending on SPL evolution <ref type="bibr" target="#b0">[1]</ref>. In this scenario, backtracking enables to keep SPL up. This means that it is possible to return backwards in the SPL evolution, and evolve then in a different way. We offer the mechanism to drive the direction of such evolution.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.">Artifact Evolution</head><p>The evolution of each feature implies that the set of artifacts realizing it evolves as well. The mechanisms introduced before consider that each evolution realization is documented similarly to features. This means that artifacts are designed to deal with evolution changes, but this assumption is not always the case.</p><p>Hence, we took an alternative approach to modify directly the artifacts and use diff techniques to obtain the changes in terms of deltas (i.e. artifact evolution is represented as a refinement).</p><p>A feature realization can consist of distinct artifacts (e.g. model, code, production plan, schedule, and so on) that can change. We focus on an artifact A. Due to some modification, A could change its content to cater for such new situation. So, an evolved artifact A' appears. Existing diff tooling can be used to differentiate A' from original A, so that we get the delta difference: ∆A 01 = diff (A', A).</p><p>Our approach is to document this modification like a feature realization, but using another dimension representing evolution time. Doing so, we keep the feature structure of the entire product line infrastructure. More important, we can use the same composition mechanisms for time evolution composition than those used for feature composition.</p><p>Example. A production plan details how a program is produced from an SPL. The specification of a production plan can range from a textual description document to a software program capable of generating products automatically (i.e. makefile script) <ref type="bibr" target="#b13">[14]</ref>. We focus on a makefile script artifact, which represents how a program is created from source artifacts. <ref type="figure">Figure 4</ref> shows a simplified example where Ant is used to represent such makefile. Evolving Artifact. This initial artifact can evolve under the request of a new requirement. For instance, consider that new legal requirements force to save into a revision control system all the created programs. This impacts on the makefile artifact of <ref type="figure">Figure 4</ref> as the way programs are created might change. The result of this requirement is that artifact at time N <ref type="figure">(Figure 4)</ref> evolves to artifact at time N+1 ( <ref type="figure" target="#fig_6">Figure 5</ref>) where new code is introduced (solid lines in <ref type="figure" target="#fig_6">Figure 5</ref>). Extracting Deltas. The artifacts are modified directly into its source code. Doing so, they are not forced to be designed for evolution. Our aim is to extract the delta from time N to time N+1 (i.e. we want to document only the change of the evolution).</p><p>We used diff techniques to obtain the changes in terms of a delta, which can be represented as a refinement in AHEAD.</p><p>XAK was used to represent such refinements as it offers a language and tool support to compose refinements of XML artifacts in AHEAD <ref type="bibr" target="#b1">[2]</ref>. Hence, we create a transformation from the delta in terms of diff to a delta in terms of XAK refinement. <ref type="figure" target="#fig_7">Figure 6</ref> shows the resulting XAK refinement where solid lines represent the new content and dotted lines represent XAK extensions. Next section introduces the details for composing evolved artifacts using XAK. Composing Evolved Artifacts. The delta extracted before ( <ref type="figure" target="#fig_7">Figure 6</ref>) can be composed with the initial time N artifact <ref type="figure">(Figure 4</ref>) to yield the evolved compound artifact ( <ref type="figure" target="#fig_6">Figure 5</ref>). We used XAK tool for composing XML in AHEAD <ref type="bibr" target="#b1">[2]</ref>. XML files are annotated with special tags and attributes to apply XAK. Attribute xak:artifact states the name of the artifact. XAK modules have unique names and can contain any number of nested modules; they are marked with xak:module attribute. Note that <ref type="figure">Figure 4</ref> should be slightly modified to show the simplified XAK representation of time N with XAK attributes for designating artifact and its modules that can be refined subsequently.</p><p>A refinement of a XAK module is defined similarly to method refinement in the Jak language (see Section 2). A refinement of a XAK artifact is a set of extensions to XAK modules. It is denoted with tag xak:refines and uses xak:artifact attribute to specify the name of the artifact being refined. <ref type="figure" target="#fig_7">Figure 6</ref> shows the XAK representation for the delta from time N to time N+1. A refinement has a set of extensions (i.e. points where a document is refined). Each extension is specified with tag xak:extends qualified with the name of the module target of the extension. For example, &lt;xak:extends xak:module="mAll"&gt; indicates extension of module mAll, which corresponds to adding a new invocation &lt;antcall target="version"&gt; to &lt;target name="all"/&gt;.</p><p>Similar to Jak's Super keyword, XAK extensions can contain tags xak:super to reference the module being extended and to serve as a placeholder of its contents. This is shown in <ref type="figure" target="#fig_7">Figure 6</ref> by tag xak:super of module mAll where prior content is copied.</p><p>XAK can compose a base artifact with any number of refinements into a compound refinement (note we can not only compose one evolution step but a number of them). The result of a XAK composition is a XAK artifact. For example, composition of time N of <ref type="figure">Figure 4</ref> and diff of <ref type="figure" target="#fig_7">Figure 6</ref> is shown in time N+1 of <ref type="figure" target="#fig_6">Figure 5</ref>. Notice the underlined code in this <ref type="figure" target="#fig_6">figure 5</ref>, which results from the substitution of xak:super tag in <ref type="figure" target="#fig_7">Figure 6</ref> by the accumulated composition of modules.</p><p>The underlying XML artifact is obtained by removing from the resulting XAK artifact attributes xak:artifact and xak:module. The point to remark is that our approach using XAK enables to capture solely the introduced changes instead of the entire new artifact. Doing so, it is possible to keep track of the evolution.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3.">Feature Model Evolution</head><p>A feature model sketches in a model the feature variability an SPL offers <ref type="bibr" target="#b8">[9]</ref>. As features themselves can evolve, feature models are also liable to evolve. For instance, new features or new grouping of features can be included into the feature model. It is common as well that the attributes of a feature evolve.</p><p>We showed previously an example for evolving an XML artifact because such XML document can be used to represent many artifacts (e.g. architecture, design models, etc), and this makes our approach more general as it can be applied to those representations.</p><p>Feature models can be represented as well using an XML representation <ref type="bibr" target="#b5">[6]</ref>. Hence, we can apply same ideas presented before for XML representations of feature models.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head></head><label></label><figDesc>Figure 1a shows an AHEAD feature and its corresponding directory. The composition of features is governed by the rules of inheritance. In the composition i•f, all artifacts of f are inherited by i. Further, artifacts with the same name (ignoring subscripts) are composed pairwise. This is AHEAD's Law of Composition: i•f = { ai, bi, ci } • { af, bf, df } = { ai•af, bi•bf, ci, df } (1)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head></head><label></label><figDesc>Figura 1. Features as Directories</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head></head><label></label><figDesc>For instance, consider our product-line M at time N has features f, h, i, and j: M = {f, h, i, j} // SPL at time N The implementation of product line M changed at time N+1, yielding product line M': M' = {f, h, i', j', k} // at time N+1</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head></head><label></label><figDesc>01 = ∆f 01 • ∆h 01 • ∆i 01 • ∆j 01 • ∆k 01 where:</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figura</head><label></label><figDesc>Figura 4. Artifact (time N)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figura 5 .</head><label>5</label><figDesc>Figura 5. Artifact (time N+1)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Figura 6 .</head><label>6</label><figDesc>Figura 6. Artifact Diff (delta refinement)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0" validated="false"><head>) . Zaragoza, Spain. Sep 2007.</head><label>)</label><figDesc></figDesc><table>Features are distinguished as constants or 
functions. Constants represent base programs. 
Functions represent program refinements that extend 
a program that is received as input (e.g. i•x 
represents that feature i is added to program x, where 
• denotes feature synthesis or composition). A 
product is obtained as the synthesis of features. The 
design of a program is a named expression: 

</table></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">Conclusions</head><p>This paper tackled the evolution of Feature Oriented Product Lines. Specifically, we described an extension of AHEAD model of variability to show how time evolution can be represented into features, artifacts realizing such features, and feature models. This enables to drive the way an SPL evolves. Our ultimate envision is the exploration of the evolution of compound software engineering productivity paradigms like Model Driven Product Lines <ref type="bibr" target="#b13">[14]</ref>.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Experience Measuring Maintainability in Software Product Lines</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Aldekoa</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Trujillo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Sagardui</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Díaz</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">JISBD</title>
		<imprint>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">On the Refinement of XML</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><forename type="middle">I</forename><surname>Anfurrutia</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Diaz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Trujillo</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
	<note>ICWE</note>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m" type="main">Scaling Step-Wise Refinement. IEEE TSE</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Batory</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">N</forename><surname>Sarvela</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Rauschmayer</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2004-06" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title level="m" type="main">Design and Use of Software Architectures: Adopting and Evolving a Product-line Approach</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Bosch</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2000" />
			<publisher>Addison-Wesley</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title level="m" type="main">Mixin-Based Inheritance</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Bracha</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Cook</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1990" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Cechticky</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Pasetti</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Rohlik</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Schaufelberger</surname></persName>
		</author>
		<title level="m">XML-Based Feature Modelling. ICSR</title>
		<imprint>
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">Software Product Lines -Practices and Patterns</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Clements</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><forename type="middle">M</forename><surname>Northrop</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2001" />
			<publisher>Addison-Wesley</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title level="m" type="main">Turning Portlets into Services: the Consumer Profile</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Diaz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Trujillo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Perez</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2007" />
			<publisher>WWW</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title level="m" type="main">Feature-Oriented Domain Analysis (FODA) Feasibility Study</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Kang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Cohen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Hess</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Novak</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Peterson</surname></persName>
		</author>
		<idno>CMU/SEI-90-TR-21</idno>
		<imprint>
			<date type="published" when="1990" />
		</imprint>
	</monogr>
<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Metrics and laws of software evolutionthe nineties view</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">M</forename><surname>Lehman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">F</forename><surname>Ramil</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Wernick</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">E</forename><surname>Perry</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">M</forename><surname>Turski</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">th International Software Metrics Symposium</title>
		<imprint>
			<date type="published" when="1997" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title level="m" type="main">Supporting Product Line Evolution with Framed Aspects. ACP4IS</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Loughran</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Rashid</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Jarzabek</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">L</forename><surname>Parnas</surname></persName>
		</author>
		<title level="m">Software Aging. ICSE</title>
		<imprint>
			<date type="published" when="1994" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
		<title level="m" type="main">Feature Oriented Model Driven Development: A Case Study for Portlets</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Trujillo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Batory</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Diaz</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<title level="m" type="main">Feature Oriented Model Driven Product Lines</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Trujillo</surname></persName>
		</author>
		<ptr target="http://www.struji.com" />
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
<note type="report_type">Ph.D. Dissertation.</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
