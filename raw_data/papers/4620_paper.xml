<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2019-03-26T16:55+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Transactional Collection Classes</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Brian</forename><forename type="middle">D</forename><surname>Carlstrom</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Computer Systems Laboratory</orgName>
								<orgName type="institution">Stanford University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Austen</forename><surname>Mcdonald</surname></persName>
							<email>austenmc@stanford.edu</email>
							<affiliation key="aff0">
								<orgName type="department">Computer Systems Laboratory</orgName>
								<orgName type="institution">Stanford University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Carbin</surname></persName>
							<email>mcarbin@stanford.edu</email>
							<affiliation key="aff0">
								<orgName type="department">Computer Systems Laboratory</orgName>
								<orgName type="institution">Stanford University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christos</forename><surname>Kozyrakis</surname></persName>
							<email>kozyraki@stanford.edu</email>
							<affiliation key="aff0">
								<orgName type="department">Computer Systems Laboratory</orgName>
								<orgName type="institution">Stanford University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kunle</forename><surname>Olukotun</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Computer Systems Laboratory</orgName>
								<orgName type="institution">Stanford University</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Transactional Collection Classes</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<note>Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. To copy otherwise, to republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee. PPoPP&apos;07 March 14-17, 2007, San Jose, California, USA. Copyright c 2007 ACM 978-1-59593-602-8/07/0003. . . $5.00.</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>C50 [Computer Systems Implementation]: General</term>
					<term>D13 [Programming Techniques]: Con- current Programming -parallel programming</term>
					<term>D33 [Program- ming Languages]: Language Constructs and Features -concurrent programming structures General Terms Performance, Design, Languages Keywords Transactional Memory, Collection Classes, Java, Mul- tiprocessor Architecture</term>
				</keywords>
			</textClass>
			<abstract>
				<p>While parallel programmers find it easier to reason about large atomic regions, the conventional mutual exclusion-based primitives for synchronization force them to interleave many small operations to achieve performance. Transactional memory promises that programmers can use large atomic regions while achieving similar performance. However, these large transactions can conflict when operating on shared data structures, even for logically independent operations. Transactional collection classes address this problem by allowing long-running transactions to operate on shared data while eliminating unnecessary conflicts. Transactional collection classes wrap existing data structures, without the need for custom implementations or knowledge of data structure internals. Without transactional collection classes, access to shared data from within long-running transactions can suffer from data dependency conflicts that are logically unnecessary, but are artifacts of the data structure implementation such as hash table collisions or tree-balancing rotations. Our transactional collection classes use the concept of semantic concurrency control to eliminate these unnecessary data dependencies, replacing them with conflict detection based on the operations of the abstract data type. The design and behavior of these transactional collection classes is discussed with reference to the related work from the database community such as multi-level transactions and semantic concur-rency control, as well as other concurrent data structures such as java.util.concurrent. The required transactional semantics needed for implementing transactional collection are enumerated, including open-nested transactions and commit and abort handlers. We also discuss how isolation can be reduced for greater concur-rency. Finally, we provide guidelines on the construction of classes that preserve isolation and serializability. The performance of these classes is evaluated with a number of benchmarks including targeted micro-benchmarks and a version of SPECjbb2000 with increased contention. The results show that easier-to-use long transactions can still allow programs to deliver scalable performance by simply wrapping existing data structures with transactional collection classes.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">Introduction</head><p>Transactional memory has been proposed as a way to ease parallel programming <ref type="bibr" target="#b14">[15,</ref><ref type="bibr" target="#b28">28,</ref><ref type="bibr" target="#b13">14,</ref><ref type="bibr" target="#b12">13]</ref>, which has recently become more important with the shift towards chip multiprocessors (CMPs) <ref type="bibr" target="#b17">[18,</ref><ref type="bibr" target="#b16">17]</ref>. Although the promise of transactional memory is an easier-touse programming model, evaluation of proposed systems thus far has focused on applications that have short critical regions tuned for use with locks <ref type="bibr" target="#b3">[4]</ref>.</p><p>For transactional memory to have a real impact, it should not focus on competing with existing hand-tuned applications but emphasize how transactions can make parallel programming easier while maintaining comparable performance <ref type="bibr" target="#b4">[5]</ref>. Building efficient parallel programs is difficult because fine-grained locking is required for scaling, which burdens programmers with reasoning about operation interleaving and deadlocks. Large critical regions make it easier on programmers, but degrade performance. However, longrunning transactions promise the best of both worlds: a few coarsegrained atomic regions speculatively executing in parallel.</p><p>While programming with fewer, longer transactions can make it easier to create correct parallel programs, the downside is that updates to shared state within these transactions can lead to frequent data dependencies between transactions and more lost work when there are conflcits. The dependencies can arise from both the program's own shared data structures as well as underlying library and run-time code. Often the implementation of these structures is opaque to a programmer, so eliminating dependencies is difficult.</p><p>Existing solutions utilize a technique called open nesting <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b24">25]</ref> to expose updates to shared data structures early, before commit, and reduce the length of dependencies. This violates the isolation property of transactions and can lead to incorrect and unpredictable programs. However, structured use of open-nested transactions can give the performance benefits of reduced isolation while preserving the semantic benefits of atomicity and serializability for the programmer.</p><p>In this paper, we use semantic concurrency control and multilevel transactions combined with object-oriented encapsulation to create data structures that maintain the transactional properties of atomicity, isolation, and serializability by changing unneeded memory dependencies into logical dependencies on abstract data types. At times when full serializability is not required for program correctness, isolation between transactions can be relaxed to improve concurrency. Simple examples like global counters and unique identifier (UID) generators illustrate the usefulness of reduced isolation. The UID example is quite similar to the monotonically increasing identifier problem that the database community uses to demonstrate the tradeoffs between isolation and serializability <ref type="bibr" target="#b9">[10]</ref>.</p><p>To illustrate the need for semantic concurrency control when programming with long transactions, we present a parallelization of a high contention variant of the SPECjbb2000 benchmark <ref type="bibr" target="#b29">[29]</ref>. This parallelization includes both the use of Map and SortedMap as well as the simpler examples of global counters and unique identifier (UID) generation. While the abstract data type examples show how transactional properties can be preserved, the counter and UID examples illustrate how selectively reducing isolation and forgoing serializability can be beneficial as well.</p><p>Specifically, our contributions are:</p><p>• The design and evaluation of transactional collection classes for use with hardware or software transactional memory systems. Transactional collection classes wrap existing Java collection implementations, and then can be used in long-running transactions without causing unnecessary dependencies. Because they offer the same interface as the underlying implementation, they can serve as drop-in replacements in existing programs.</p><p>• Transactional collection classes that allow programmers to compose multiple operations on transactional objects atomically -something unattainable with undisciplined use of isolation-reducing mechanisms such as open nesting.</p><p>• We show how selectively reducing isolation can yield higher performing data structures by creating a transactional work queue from the Queue class.</p><p>• We provide an overview of the transactional memory semantics needed to support the construction of collection classes in either hardware or software systems.</p><p>• We summarize design principles about managing state with semantic concurrency control for the case when full isolation and serializability is desired. We also discuss alternative implementation strategies that we did not explore that may be more appropriate for other transactional memory implementations.</p><p>The rest of the paper is organized as follows. Section 2 discusses semantic concurrency control in databases and its application to transactional memory via transactional collection classes. We also cover the related background on concurrent collection classes. Section 3 covers the design and implementation of transactional wrappers for Java collections. Section 4 discusses the transactional memory semantics required for our proposal, and Section 5 lists our guidelines for serializability. Section 6 evaluates the scalability of our transactional collection classes, and we conclude in Section 7 with some observations and suggestions for future directions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">Supporting Long-Running Transactions</head><p>The database community has studied the problem of frequent dependency conflicts within long-running transactions. We examined the literature surrounding semantic concurrency control, one solution to the long-running transaction problem. This section describes the evolution of semantic concurrency control, drawing similarities between the problems of databases and the problems of transactional memory. We will then show an example of how these ideas can be applied directly to transactional memory.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Database Concurrency Control</head><p>Isolation, one of the four ACID properties of database transactions, means that changes made by a transaction are not visible to other transactions until that transaction commits. An important derivative property of isolation is serializability, which means that there is a serial ordering of commits that would result in the same final outcome. Serializability is lost if isolation is not preserved, because if a later transaction sees uncommitted results that are then rolled back, the later transaction's outcome depends on data from a transaction that never committed, which means there is no way a serial execution of the two transactions would lead to the same result.</p><p>One method for databases to maintain isolation and therefore serializability, is strict two-phase locking. In this form of twophase locking, the growing phase consists of acquiring locks before data access and the shrinking phase consists of releasing locks at commit time <ref type="bibr" target="#b9">[10]</ref>.</p><p>While simple, this isolation method limits concurrency. Often transactions contain sub-operations, known as nested transactions, which can access the state of their parent transaction without conflict, but which themselves can cause dependencies with other transactions. Moss showed how two-phase locking could be used to build a type of nested transactions where sub-operations could become child transactions, running within the scope of a parent, but able to rollback independently, therefore increasing concurrency (called closed nesting) <ref type="bibr" target="#b23">[24]</ref>. Gray concurrently introduced a type of nested transaction where the child transaction could commit before the parent, actually reducing isolation and therefore further increasing concurrency because the child could logically commit results based on a parent transactions that could later abort (called open nesting) <ref type="bibr" target="#b8">[9]</ref>.</p><p>Open-nested transactions may seem dangerous -exposing writes from a child transaction before the parent commits and discarding any read dependencies created by the child -but they can be very powerful if used correctly. Trager notes how System R used open-nesting "informally" by releasing low-level page locks before transaction commit in violation of strict two-phase locking <ref type="bibr" target="#b30">[30]</ref>. System R protected serializability through higher-level locks that are held until commit of the parent transaction, with compensating transactions used to undo the lower-level page operations in case the parent transaction needed to be rolled back. System R's approach was later formalized as multi-level transactions: protecting serializability through locks at different layers <ref type="bibr" target="#b32">[32,</ref><ref type="bibr" target="#b25">26]</ref>. Going a step further and incorporating knowledge about the way specific data structures operate allowed semantically non-conflicting operations to execute concurrently; this was called semantic currency control <ref type="bibr" target="#b31">[31,</ref><ref type="bibr" target="#b27">27]</ref>. Finally, sagas focused on using compensating transactions to decompose a long-running transaction into a series of smaller, serial transactions <ref type="bibr" target="#b7">[8]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Concurrent Collection Classes</head><p>Beyond parallel databases, another area of research in concurrency is data structures. Easier access to multi-processor systems and programming languages, like Java, that include threads have brought attention to the subject of concurrent collection classes. One major area of effort was util.concurrent <ref type="bibr" target="#b19">[20]</ref>, which became the Java Concurrency Utilities <ref type="bibr" target="#b15">[16]</ref>. The original work within util.concurrent focused on ConcurrentHashMap and ConcurrentLinkedQueue, the later based on work by <ref type="bibr" target="#b22">[23]</ref>. However, the upcoming JDK 6 release extends this to include a ConcurrentSkipListMap that implements the new NavigableMap interface that is an extension SortedMap.</p><p>The idea behind ConcurrentHashMap is reducing contention on a single size field and frequent collisions in buckets. The approach is to partition the table into many independent segments, each with their own size and buckets. This approach of reducing contention through alternative data structure implementations has been explored in the transactional memory community as well as we will see below.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Transactional Memory</head><p>Hardware Transactional Memory (HTM) <ref type="bibr" target="#b14">[15]</ref> and Software Transactional Memory (STM) <ref type="bibr" target="#b28">[28]</ref> have both seen a resurgence of research activity. For HTM, this has been due to the move from pursuing gains through instruction-level parallelism to thread-level parallelism with chip multi-processors. For STM, this has been due to the arrival of new innovative techniques for lower overhead implementations <ref type="bibr" target="#b12">[13,</ref><ref type="bibr" target="#b5">6]</ref>, as well as the need to more easily take advantage of chip multi-processor systems.</p><p>There has been some work at the intersection of transactional memory and concurrent data structures. Adl-Tabatabai et al. used a ConcurrencyHashMap-like data structure to evaluate their STM system <ref type="bibr" target="#b0">[1]</ref>. <ref type="bibr">Kulkarni et al.</ref> suggested the use of open-nested transactions for queue maintenance for Delaunay mesh generation <ref type="bibr" target="#b18">[19]</ref>. While this work addressed issues with specific structures, it did not provide a general framework for building transactional data structures.</p><p>Pausing transactions was suggested as an alternative to opennesting for reducing isolation between transactions by Zilles and Baugh in <ref type="bibr" target="#b33">[33]</ref>. Pausing could be used in the place of open nesting to implement semantic concurrency control, but because pausing does not provide any transactional semantics, traditional methods of moderating concurrent access to shared state such lock tables would need to be used.</p><p>Recently, Moss has advocated a different approach less focused on specific data structures. Based on his experience with closednested transactions <ref type="bibr" target="#b23">[24]</ref>, multi-level transactions <ref type="bibr" target="#b25">[26]</ref>, and transactional memory <ref type="bibr" target="#b14">[15]</ref>, he has been advocating the use of abstract locks built with open-nested transactions for greater concurrency. This paper builds on this concept and develops a set of general guidelines and mechanisms for practical semantic concurrency in object-oriented languages. We also include an evaluation of a full implementation of collection classes for use in SPECjbb2000.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.4">The Need for Semantic Concurrency Control</head><p>To explain how ideas from the database community can be applied to transactional memory, we will consider a hypothetical Semantically speaking, get and put operations on different keys should not cause data dependencies between two different transactions. Taking advantage of this would be utilizing semantic concurrency control and is based on the fact that such operations are commutative.</p><p>The problem is that semantically independent operations may actually be dependent at the memory level due to implementation decisions. For example, hash tables typically maintain a load factor which relies on a count of the current number of entries. If we just use the traditional java.util.HashMap-style implementation within a transaction, semantically non-conflicting inserts of new keys will cause a memory-level data dependency as both inserts will try and increment the internal size field. Similarly, a put operation can conflict with other get and put operations accessing the same bucket.</p><p>Alternative Map implementations built especially for concurrent access such as ConcurrentHashMap, internally use multiple hash table segments to reduce contention. As mentioned above, others have used similar techniques in transactional contexts to reduce chances of conflicts on a single size field <ref type="bibr" target="#b0">[1]</ref>. Unfortunately, while the segmented hash table approach statistically reduces the chances of conflicts in many cases, its does not eliminate them. In fact, the more updates to the hash table, the more segments likely to be touched. If two long-running transactions perform a number of insert or remove operations on different keys, there is a large probability that at least one key from each transaction will end up in the same segment, leading to memory conflicts on the segment's size field.</p><p>The solution is to use multi-level transactions. The low-level transactions are open-nested and used to record local changes and acquire higher-level abstract data type locks. The high-level transaction then uses these locks to implement semantic concurrency control.</p><p>In our HashTable example, the get operation takes a read lock on the key and retrieves the appropriate value, if any, all within an open-nested transaction. The put operation can use a thread-local variable to store the intent to add a new key-value pair to the table, deferring the actual operation. If the parent transaction eventually commits, a commit handler is run that updates the HashTable to make its changes visible to other transactions, as well as aborting other transactions that hold conflicting read locks. If the parent transaction is aborted, an abort handler rolls back any state changed by open-nested transactions.</p><p>Before applying multi-level transactions, an unnecessary memorylevel conflict would abort the parent transaction. Now, memorylevel rollbacks are confined to the short-running, open-nested transaction on get and the closed-nested transaction that handles committing put operations. In the get case, the parent does not rollback, and the get operation is simply replayed. In the put case, only the commit handler can have memory-level conflicts, and it too can be replayed without rolling back the parent transaction. Note that semantic conflicts are now handled through code in the commit handler that explicitly violates other transactions holding locks on modified keys. The responsibility for isolation, and therefore serializability, has moved from the low-level transactional memory system to our higher-level abstract data type.</p><p>To summarize, our general approach to building transactional versions of abstract data types is as follows:</p><p>1. take semantic locks on read operations 2. check for semantic conflicts while writing during commit</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">clear semantic locks on abort and commit</head><p>Having a general approach is more desirable than relying on data structure-specific solutions, like segmented hash tables. For example, the SortedMap interface is typically implemented by some variant of a balanced binary tree. Parallelizing a selfbalancing tree would involve detailed analysis of the implementation and solving issues like conflicts arising from rotations. Semantic concurrency control avoids these issues by allowing the designer to reuse existing, well-designed and tested implementations.</p><p>In the following section, we will discuss more about our approach, as we cover the semantic operations involved with Java collection classes as well as our implementation of semantic locks.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">Transactional Collection Classes</head><p>Simply accessing data structures within a transaction will achieve atomicity, isolation, and serializability, but long-running transactions will be more likely to violate due to the many dependencies created within the data structure. Simply using open-nesting to perform data structure updates would increase concurrency, but prevents users from atomically composing multiple updates, as modifications will be visible to other transactions. Transactional collection classes leverage semantic knowledge about abstract data types to allow concurrent and atomic access, without the fear of longrunning transactions frequently violating.</p><p>Creating a transactional collection class involves first identifying semantic dependencies, namely which operations much be pro-  <ref type="table" target="#tab_4">Table 1</ref>. Semantic operational analysis of the Map interface showing the conditions under which conflicts arise between primitive operations. Both read and write operations are listed along the left side but only write operations are listed across the top. The read operations are omitted along the top since read operations do not conflict with other read operations. If the condition is met, there needs to be an ordering dependency between the two operations. For example, the upper left condition says that if a put operation adds an entry with a new key in one transaction and another transaction calls containsKey on that same key returning false, there is a conflict between the transactions because they are not serializable if the put operations commits before the containsKey operation, which would be required to return true in a serializable schedule.  <ref type="table">Table 2</ref>. Semantic locks for Map describe read locks that are taken when executing operations as well as lock based conflict detection that is done by writes at commit time. For example, the containsKey, get, put, and remove operations take a lock for the key that was passed as an argument to these methods. When a transaction containing put or remove operations commits, it aborts other transactions that hold locks on the keys it is adding or removing from the Map as well as on other transactions that have read the size of the Map if it is growing or shrinking.  tected from seeing each other's effects. The second step is then to enforce these dependencies with semantically meaningful locks. In this section, we discuss the creation of the TransactionalMap, TransactionalSortedMap, and TransactionalQueue transactional collection classes.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Methods</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Read Lock Write Conflict</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Category</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">TransactionalMap</head><p>Our TransactionalMap class allows concurrent access to a Map from multiple threads while allowing multiple operations from within a single thread to be treated as a single atomic transaction.</p><p>TransactionalMap acts as a wrapper around existing Map implementations allowing the use of special purpose implementations to be used.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Determining Semantic Conflicts</head><p>We build classes such as TransactionalMap by determining which operations cannot be reordered without violating serializability.</p><p>Our first step is to analyze the Map abstract data type to understand which operations commute under which conditions. We then use semantic locks to preserve serializability of non-commutative operations based on these conditions. To understand which Map operations can be reordered to build TransactionalMap, we performed a multi-step categorization of the operations as described below.</p><p>The first categorization of operations is between primitive or derivative methods. Primitive methods provide the fundamental operations of the data structure while the derivative methods are conveniences built on top of primitive methods. For example, operations such as isEmpty and putAll can be implemented using size and put, respectively, and need not be considered further in our analysis. In the case of Map, this categorization helps us reduce the dozens of available methods to those shown in the left column of     <ref type="table" target="#tab_3">Table 3</ref>.</p><p>The second categorization is between read-only methods and those that write logical state of the Map. Since read-only operations always commute, the writing methods affect the serializability of each read method, so we focus our conflict detection efforts there. In <ref type="table" target="#tab_4">Table 1</ref>, we list the read and write operations in the left column, showing when they conflict with the write operations in the put and remove columns.</p><p>The put and remove operations can conflict with methods that read keys, such as containsKey, get, and entrySet.iterator.next. Note that even the non-existence of a key, as determined by containsKey, conflicts with the addition of that key via put. Similarly, in cases where put and remove update the semantic size of the Map, these methods conflict with operations that reveal the semantic size, namely the size and entrySet.iterator.hasNext. entrySet.iterator.hasNext reveals the size indirectly since it allows someone to count the number of semantic entries in the Map. Typically this is used by transactions that enumerate the entire Map, which conflict with a transaction that adds or removes keys.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Implementing Semantic Locks</head><p>Up to this point, we have focused on analyzing the behavior of the Map abstract data type. Such analysis is largely general and can be used with a variety of implementation strategies. Now we shift gears to discuss how we used this analysis in our specific TransactionalMap class implementation. We discuss alternative implementation strategies in Section 5.1.</p><p>Our discussion in Section 2 concluded that we must release dependencies on data structure internals (using open nesting) to avoid unnecessary memory conflicts. To maintain correctness, we then use semantic locks to implement multi-level transactions, preserving the logical dependencies of the abstract data type.</p><p>In our analysis of Map, we found that reordering methods depended on two semantic properties: size and the key being operated on. While these choices are Map specific, other classes should have similar elements of abstract state. <ref type="table">Table 2</ref> shows the conditions under which locks are taken during different operations. Read operations lock abstract state throughout the transaction. Write operations detect conflicts at commit time by examining the locks held by other transactions. If other transactions have read abstract state being written by the committing transaction, there is a conflict and the readers are aborted to maintain isolation. For example, a transaction that calls the size method acquires the size lock and would conflict with any committing transaction that changes the size (e.g., put or get). <ref type="table" target="#tab_3">Table 3</ref> summarizes the internal state used to implement TransactionalMap. The map field is simply a reference to the wrapped Map instance containing the committed state of the map. Any read operations on the map field are protected by the appropriate key and size locks. These locks are implemented by the key2lockers and sizeLockers fields. These fields are shared so that transactions can detect conflicts with each other but encapsulated to prevent unstructured access to this potentially isolation-reducing data.</p><p>To maintain isolation, the effects of write operations are buffered locally in the current transaction. The storeBuffer field records the results of these write operations. Almost all read operations need to consult the storeBuffer to ensure they return the correct results with respect to the transaction's previous writes. The one exception is size, which instead consults the delta field providing the difference in size represented by the storeBuffer operations.</p><p>Commit and abort handlers are critical to the correct maintenance of transactional classes. When a transaction is aborted, a compensating transaction must be run to undo changes made by earlier open-nested transactions, in this case releasing semantic locks and clearing any locally buffered state. The keyLocks field locally stores locks to avoid explicitly enumerating key2lockers when performing this compensation. Commit handlers are used to perform semantic conflict detection as described above, to release the committing transaction's locks after it has completed, and to merge the locally buffered changes into the underlying data structure.</p><p>The owner of lock is the top-level transaction at the time of the read operation, not the open-nested transaction that actually performs the read. This is because the open-nested transaction will end soon, but we need to record that the outermost parent transaction needs to be aborted if a conflict is detected. Indeed, it is the handlers of the top-level transaction, whether successful or unsuccessful, that are responsible for releasing any locks taken on its behalf by its children.</p><p>One of the most complicated parts of TransactionalMap was the implementation of Iterator instances for the entrySet, keySet, and values. The iterators need to both enumerate the underlying map with modifications for new or deleted values from the storeBuffer and enumerate the storeBuffer for newly added keys. The iterator takes key locks as necessary as they are returned by the next methods as well as the size lock if hasNext indicates that the entire Set was enumerated.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">TransactionalSortedMap</head><p>Our TransactionalSortedMap class extends TransactionalMap to provide concurrent atomic access by multiple nonconflicting readers and writers to implementations of the Java SortedMap interface. The SortedMap abstract data type extends Map by adding support for ordered iteration, minimum and maximum keys, and range-based sub-map views.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Determining Semantic Conflicts</head><p>The SortedMap interface extends the Map interface by both adding new methods for dealing with sorted keys, but also by defining the   <ref type="table">Table 8</ref>. Semantic locks for Channel describe empty locks that are taken when executing operation as well as lock based conflict detection that is done by writes at commit time.</p><p>semantics of existing methods such as entrySet to provide ordering. Mutable SortedMap views returned by subMap, headMap, and tailMap also has to be considered in our analysis. In <ref type="table" target="#tab_5">Table 4</ref>, we perform a similar categorization of abstract data type operations as in the last section, focusing on the new primitive operations and on the operations with changed behavior such as entrySet. New operations that derivative, such as firstKey, are omitted.</p><p>The categorization shows that all of the new operations are read only. In addition to the key and size properties of Map, methods now also read ranges of keys as well as noting the first and last key of the SortedMap. The existing write operations put and remove are now updated to show their effects on ranges of keys as well as the endpoint keys. Specifically, a put or remove operation conflicts with any operation that reads a range of keys that includes the key argument of the put or remove. It's important to note that ranges are more that just a series of keys. For example, inserting a new key in one transaction that is within a range of keys iterated by another transaction would violate serializability if we did not detect the conflict. In addition to the range keys, put and remove can affect the first and last key by respectively adding or removing new minimum or maximum elements, thus conflicting with operations that either explicitly request these values with firstKey or lastKey or implicitly read these values through an iterator, including iterators of views. <ref type="table" target="#tab_7">Table 6</ref> summarizes the extensions to the internal state of TransactionalMap used to implement TransactionalSortedMap. The sortedMap field is a SortedMap-typed version of the map field from TransactionalMap. The comparator field is used to compare keys either using the Comparator of the underlying SortedMap if one is provided or using Comparable if the SortedMap did not specify a Comparator. Note that the comparator is established during construction and thereafter is read only so no locks are required to protect its access.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Implementing Semantic Locks</head><p>The key-based locking of TransactionalMap is extended in TransactionalSortedMap by key range locking, provided by the rangeLockers field. As with key locks, writers must determine which subset of outstanding transactions conflict with their updates. We chose a simple Set to store the range locks, meaning updates to a key must enumerate the set to find matching ranges  for conflicts. An alternative would have been to use an interval tree to store the range locks, but the extra complexity and potential overhead seemed unnecessary for the common case. The endpointbased locking of TransactionalSortedMap is provided by the firstLockers and lastLockers fields. Like size locking, and unlike key range locking, endpoint locking does not not require any search for conflicting transactions, since endpoint lockers are conflicting whenever the corresponding endpoint changes. The local transaction state for TransactionalSortedMap consists primarily of the rangeLocks field which allows efficient enumeration of range locks for cleanup on commit or abort without enumerating the potentially larger global rangeLockers field. In addition, the sortedStoreBuffer provides a SortedMap reference to the storeBuffer field from TransactionalMap in order to provide ordered enumeration of local changes.</p><p>As with TransactionalMap, one of the more difficult parts of implementing TransactionalSortedMap was providing iteration. In order to provide proper ordering, iterators must simultaneously iterate through both the sortedStoreBuffer and the underlying sortedMap, while respecting ranges specified by views such as subMap, and taking endpoint locks as necessary.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">TransactionalQueue</head><p>In the database world, SQL programs can request reduced isolation levels in order to gain more performance. Similarly, sometimes in transactional memory it is useful to selectively reduce isolation. One example is in creating a TransactionalQueue. The idea is inspired by a Delaunay mesh refinement application that takes work from a queue and may add new items during processing. Opennested transactions could be used to avoid conflicts by immediately removing and adding work to the queue <ref type="bibr" target="#b18">[19]</ref>. However, if transactions abort, the new work added to the queue is invalid, but may be impossible to recover since another transaction may have dequeued it. Our TransactionalQueue provides the necessary functionality by wrapping a Queue implementation with a Channel interface from the util.concurrent package <ref type="bibr" target="#b19">[20]</ref>.</p><p>Providing the simpler Channel interface lowers the design complexity by eliminating unnecessary Queue operations that do not make sense for a concurrent work queue, such as random access operations, instead only providing operations to enqueue and dequeue elements. To improve concurrency, we do not maintain strict ordering on the queue, so we have few semantic conflicts between transactions. As <ref type="table" target="#tab_9">Table 7</ref> shows, if transactions confine themselves to the common put and take operations, no semantic conflicts can ever occur. The only semantic conflict we check is if a transaction detects an empty Queue via a null result from peek or poll, then we will detect a conflict if another put or offer adds a new element. <ref type="table" target="#tab_11">Table 9</ref> summarizes the internal state used to implement TransactionalQueue. The queue field holds the current committed state of in an underlying Queue instance. The emptyLockers field tracks which transactions have noticed when the queue is empty. The addBuffer field tracks new items that need to be added to the queue when the parent transaction commits while the removeBuffer tracks removed items that should be returned to the queue of the parent transaction aborts. While simple in construction compared to the fully serializable TransactionalMap and TransactionalSortedMap classes, the Delaunay example shows the benefits of having a transactional aware queue that allows multiple operations within a single transaction.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">Semantics for Transactional Collection Classes</head><p>In this section we discuss the functionality necessary to implement transactional collection classes. We refer to these mechanisms and their use as transactional semantics. While all transactional memory systems offer an interface for denoting transactional regions, some of them already provide elements of the transactional semantics we identify.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Nested transactions: open and closed</head><p>Some systems implement flat closed-nested transactions: the child simply runs as part of the parent without support for partial rollback. However to reduce lost work due to unnecessary conflicts, our implementation needs partial rollback of the commit handlers run as closed-nested transactions. That way, any conflicts during update of the underlying data structure will only roll back the commit handler and not the entire parent.</p><p>Open nesting is probably the most significant requirement for semantic concurrency control. It is the enabling feature that allows transactions to create semantic locks without retaining memory dependencies that will lead to unnecessary conflicts. However, while open-nested transactions are a necessary feature for supporting semantic concurrency control, they are not sufficient without some way of cleaning up semantic locks when the overall transaction finishes -this is the purpose of commit and abort handlers.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Commit and abort handlers</head><p>Commit and abort handlers allow code to run on the event of successful or unsuccessful transaction outcome, respectively. Transactional collection classes use these handlers to perform the required semantic operations for commit and abort, typically writing the new state on commit, performing compensation on abort, and releasing semantic locks in both cases.</p><p>Commit handlers typically run in a closed-nested transaction so that any memory conflicts detected during their updates to global state do not cause the re-execution of the parent. Handlers execute at the end of the parent transaction so it has visibility into the parent's state. This is useful for cleaning up any thread-local values.</p><p>Abort handlers typically run in an open-nested transaction. As with commit handlers, they are nested within the parent so they can access the parent's state before it is rolled back. Open nesting allows the abort handler to undo any changes performed by the parent's open-nested transactions; otherwise, any work done by the abort handler would simply be rolled back along with the parent.</p><p>When a commit or abort handler is registered, it is associated with the current level of nesting. If the nested transaction is aborted, the handlers are simply discarded without executing -rollback should clear the state associated with the handlers. If the nested transaction commits, the handlers are associated with the parent so necessary updates/compensation will happen when the parent completes/aborts.</p><p>Discarding newly registered handlers prevents a handler from running in unexpected situations. Since a conflict could be detected at any time, an abort handler could be invoked at any point in the execution of a transaction. Conceptually, this is very similar to the problem of reentrancy of Unix signal handlers: it is difficult to insure that data structure invariants hold. With signal handlers, the approach is usually to do very little within handlers except to note that the signal happened, letting the main flow of control in the program address the issue. Fortunately, nested transactions and encapsulation can provide more guarantees about the state of objects. If the only updates to the encapsulated state, such as the local tables and store buffers, are made with open-nested transactions, then we can be sure that when an abort handler runs, these encapsulated data structures are in a known state.</p><p>Discarding newly registered handlers on abort interacts with using abort handlers for compensation of non-transactional operations. However, these operations should not have been performed during the body of the transaction but rather during commit handlers. While logically this makes sense for output operations deferred to the end of the transaction, it also works for input operations as they can be performed in the commit handler of an opennested transaction that registers an abort handler to push back input as needed. While handlers are not a general solution for handling all cases of non-transactional operations, these semantics cover two frequently cited examples of using handlers to mix I/O and transactions.</p><p>Some systems use two-phase commit as part of executing commit handlers. Two-phase commit breaks a transaction commit into two parts: validation and commit. After validation is completed, the transaction is assured that it will be able to commit. Typically commit handlers are run in the commit phase after validation. This guarantees that any non-transactional action such as I/O do no need to worry that the parent will get violated after an irreversible action is performed. Note that for our uses of semantic concurrency control, we are not performing any non-transactional operations, only updates to data structures in memory, so that two phase commit is not strictly required, although its presence is not a problem.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Program-directed transaction abort</head><p>Transactional memory systems can automatically abort transactions with serializability conflicts. Some systems provide an interface for transactions to abort themselves, perhaps if they detect a problem with the consistency property of ACID transactions. Semantic concurrency control requires the additional ability for one transaction to abort another when semantic-level transactional conflicts are detected. Specifically for our proposal, an open-nested transaction needs a way to request a reference to its top-level transaction than can be stored as the owner of a lock. Later if another transaction detects a conflict with that lock, the transaction reference can be used to abort the conflicting transaction.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">Serializability Guidelines</head><p>The most difficult part of semantic concurrency control is analyzing the abstract data type to determine the rules for commutative operations and determining a set of semantic locks to properly preserve commutativity. However, once this is done, we found the actual implementation of semantic concurrency control via multi-level transactions was fairly straightforward using a simple set of rules:</p><p>• The underlying state of the data structure should only be read within an open-nested transaction that also takes the appropriate semantic locks. This ensures that the parent transaction contains no read state on the underlying state that could cause memorylevel conflicts.</p><p>• The underlying state of the data structure should only be written by a closed-nested transaction in a commit handler. This preserves isolation since semantic changes are only made globally visible when the parent transaction commits.</p><p>• Because write operations should not modify the underlying data structure, write operations need to store their state in a transaction-local buffer. If semantic locks are necessary because the write operation logically includes a read operation as well, the locks should be taken in an open-nested transaction, as above. Note that if we want reduced isolation, we typically violated the second rule by allowing writes to the underlying state from within open-nested transactions. For example, in TransactionalQueue, take operations removed objects from the underlying queue without acquiring a lock.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Discussion</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Alternatives to optimistic concurrency control</head><p>Detecting conflicting changes at commit time is known as optimistic concurrency control. Another approach is to detect conflicts as soon as possible (pessimistic concurrency control). In our system, write operations could detect conflicting semantic locks when the operation is first performed, instead of waiting until commit. A contention management policy can then be used to decide how to proceed. One approach is to have the conflicting write operation wait for the other transaction to complete. However, this leads to the usual problems with locks, such as deadlock. The downside to optimistic concurrency control is that it can suffer from livelock since long-running transactions may be continuously rolled back by shorter ones. Here again, contention management policies can be applied to give repeatedly violated transactions priority. A discussion of contention management in transactional memory systems can be found in <ref type="bibr" target="#b10">[11]</ref>. The choice of optimistic concurrency control for semantic-level transactions is independent of the underlying concurrency control in the transactional memory system.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Redo versus undo logging</head><p>Our approach to buffering changes and replaying them at commit time is a form of redo logging, so called because we redo the work of the operations in the local buffer on the global state. The alternative is undo logging, where we update the global state in place. If there are no conflicts, the undo log is simply dropped at commit time. If there is a conflict and the transaction needs to abort, the undo log can be used to perform the compensating actions to roll back changes made to the global state by the aborting transaction. We choose redo logging because it is a better fit to optimistic concurrency control, since undo logging requires early conflict detection since only one writer can be allowed to update a piece of semantic state in place at a time. Note that the choice of redo versus undo logging for semantic-level transactions is independent of the underlying logging used by the transactional memory system.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Single versus multiple handlers</head><p>Our approach uses one commit and one abort handler per parent transaction. These handlers know how to walk the underlying lock and buffer structures to perform the necessary work on behalf of all previous operations to the data structure. An alternative is for each operation to provide its own independent handlers.</p><p>Moss extends this alternative by proposing that each abort handler should run in the memory context that was present at the end of the child transaction in which it was registered, interleaved with the undoing of the intervening memory transactions <ref type="bibr" target="#b24">[25]</ref>. For example, suppose we have a series of operations that make up a parent transaction AXBY C, with A, B, and C being memory operations and X and Y being open-nested transactions. Moss suggests that to abort at the end of C, we should logically perform the inverse actions C −1 Y −1 B −1 X −1 A −1 to abort. Logically, this consists of rolling back the memory operations of C, followed by running the abort handler for Y , followed by rolling back B, then running the abort handler for X, and finally rolling back the memory operations of A.</p><p>We found this extra complexity to be unnecessary for our implementation of semantic concurrency control. Moss's semantics aim to guarantee that the handler will always run in a well-defined context known to the handler at its point of registration. However, our guidelines give handlers similar guarantees since object-oriented encapsulation ensures that only the transaction that registered the handler can make updates to the state that the handler will later access on abort.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Alternative semantic locks</head><p>In our initial categorization of Map methods into primitive and derivative operations, we considered several methods as primitive that semantically speaking are strictly derivative if one focuses on correctness and not performance. After all, it is possible to build a writable Map by subclassing AbstractMap and implementing only the entrySet and put methods, although such an association list style implementation would need to iterate the entrySet on get operations, taking locks on many keys unnecessarily, compromising concurrency while maintaining correctness.</p><p>While we might seem to be contradicting our own methodology, in fact in one considers the expected running time of operations to be part of the semantics of an abstract data type, we are consistent. Certainly if one is happy to have a linear cost for Map retrievals, then it is fine to treat get as a derived operations. However, if you expect to have close to constant cost for a Map and logarithmic for a SortedMap, you need to follow the more typical approach of HashMap and TreeMap and consider other methods such as containsKey, get, size, and remove as primitive operations, which avoids the need to iterate the entrySet for these operations.</p><p>While the semantic locks derived from the primitive methods in <ref type="table" target="#tab_4">Table 1 and Table 4</ref> preserve isolation and serializability, they still do not allow the optimal concurrency possible. One limitation is making isEmpty a derivative method based on size, resulting in isEmpty taking a size lock. To see why this is a problem, consider two transactions running this code:</p><p>if (!map.isEmpty()) map.put(key, value);</p><p>These transactions should commute as long as they add different keys, but the current implementation will cause one to abort because of the size lock. However, taking the size lock is necessary for the similar case of two transactions running:</p><p>if (map.isEmpty()) map.put(key, value);</p><p>These put operations should not commute because a serial ordering would require that only one would find an empty map. The solution is to make isEmpty a primitive operation with its own separate semantic lock that is violated only when the size changes to or from zero.</p><p>Note that we have focused on the third categorization for the primitive methods in the interest of space, but that logically this categorization is important for the derivative methods as well. This can expose unexpected concurrency limitations. For example, a straightforward implementation of entrySet.remove might use size to determine if the remove operation actually found a matching key, which is used to calculate the boolean return value. This would add an unnecessary dependency on the size, which could cause unnecessary conflicts if others concurrently added or removed other keys.</p><p>Extensions to java.util.Map C++ programmers often use idioms like if (map.size()) ... instead of if (!map.empty()) ..., arguably because it's easy for a reader to miss the negation when reviewing code. Similarly, Java programmers frequently use if (map.size() == 0) ... instead of isEmpty. However, as noted in the previous discussion, using size instead of isEmpty unnecessarily restricts concurrency.</p><p>Similar problems exist for Map methods that reveal more information than strictly necessary. For example, since the write operations put and remove return the old value for a key, they effectively read the key as well. If this return value is unused, this is an unnecessary limitation of semantic concurrency. To be specific, there is no reason that two transactions that write to the same key need to be ordered in any way. For example, it's perfectly acceptable for two transactions to do this: map.put("LastModified", new Date());</p><p>These transactions can commit in any order so long as they do not read the "LastModified" key.</p><p>The solution is to offer alternative variants to methods such as put and remove that do not reveal unnecessary information, allowing the caller to decide which is appropriate.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>TransactionalSet and TransactionalSortedSet</head><p>We did not discuss TransactionalSet and TransactionalSortedSet classes here because they can be built as simple wrappers around the TransactionalMap and TransactionalSortedMap, respectively, as has been done similarly for ConcurrentHashSet implementations built on top of ConcurrentHashMap and even HashSet implementations around HashMap as found in <ref type="bibr" target="#b6">[7]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Leaking uncommitted data</head><p>While our guidelines prevent leaking of uncommitted data between transactions using the same transactional collection class, values used within the class's semantic locks, such as keys or range endpoints, can be visible to the other open-nested transactions operating on the instance. For example, if a newly allocated string is used as a key name in a TransactionalMap, the key2lockers table would have an entry pointing to an object that is only initialized within the adding transaction. However, if another transaction adds another key that hashes to the same bucket, the table will call Object.equals to compare the new key to the existing key, which is uninitialized from this second transaction's point of view.</p><p>In <ref type="bibr" target="#b24">[25]</ref>, Moss proposes making object allocation and type initialization an open-nested transaction, so at least access to this uncommitted object will not violate Java type safety. However, the constructor part of object allocation cannot be safely made part of an open-nested transaction because it could perform arbitrary oper-  ations that might require compensation. Moss notes that for some common key classes such as String, it is safe and even desirable to run the constructor as part of open-nested allocation, but this is not a general solution.</p><p>Our proposal is to not directly insert such potentially uncommitted objects into semantic locking tables but instead insert copies. One approach would be to use existing mechanisms such as Object.clone or Serializable to make a copy, similar to what is proposed by Harris in <ref type="bibr" target="#b11">[12]</ref>, which uses Serializable to copy selected state out of transactions that are about to be aborted. Alternatively, a new interface could be used to request a committed key from an object, allowing it to make a selective copy of a subset of identifying state, rather than the whole object like clone or Serializable, perhaps simply returning an already committed key.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.">Evaluation</head><p>To evaluate our transactional collection classes we use variants of a common transactional memory micro-benchmark as well as a custom version of SPECjbb2000 designed to have higher contention. We evaluate both traditional Java and transactional Atomos versions. The results focus on benchmark execution time, skipping virtual machine startup. The single-processor Java version is used as the baseline for calculating speedup.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.1">Environment</head><p>Atomos is a transactional programming language described in <ref type="bibr" target="#b1">[2]</ref>. It provides the necessary support for the transactional semantics described in the previous section, allowing it to be used to evaluate our transactional collection classes. The Java programs and Atomos environments are both based on the Jikes Research Virtual Machine (JikesRVM), version 2.3.4.</p><p>JikesRVM was run with an execution-driven simulator of a PowerPC CMP system that implements the TCC continuous transaction architecture for evaluating Atomos as well as MESI snoopy cache coherence for evaluating Java locking <ref type="bibr" target="#b21">[22]</ref>. The simulator was extended with support for closed-and open-nested transactions as well as commit and abort handlers as described in <ref type="bibr" target="#b20">[21]</ref>. All instructions, except loads and stores, have a CPI of 1.0. The memory system models the timing of the L1 caches, the shared L2 cache, and buses. All contention and queuing for accesses to caches and buses is accurately modeled.</p><p>While we perform our experiments with a specific language, virtual machine, and HTM implementation, we believe that the observations and conclusions apply to other hardware transactional memory systems as well.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.2">Map and SortedMap Benchmarks</head><p>TestMap is a micro-benchmark based on a description in <ref type="bibr" target="#b0">[1]</ref> that performs multi-threaded access to a single Map instance. Threads perform a mixture of operations with a breakdown of 80% lookups, 10% insertions, and 10% removals. To emulate access to the Map from within long-running transactions, each operation is surrounded by computation. There should be little semantic contention in this benchmark but frequent memory contention within the Map implementation such as the internal size field. <ref type="figure">Figure 1</ref> summarizes our results for TestMap. As expected, Java with HashMap shows near linear scalability because the lock is only held for a small time relative to the surrounding computation. The Atomos HashMap result shows what happens when multiple threads try to simultaneously access the Map instance, with scalability limited as the number of processors increases because of contention on the HashMap size field. Atomos results with a TransactionalMap wrapped around the HashMap show how scalability can be regained when unnecessary memory conflicts on the size field are eliminated.</p><p>TestSortedMap is a variant of TestMap that replaces lookup operations using Map.get with a range lookup using SortedMap.subMap, taking the median key from the returned range. As with TestMap, there is little semantic contention as the ranges are relatively small and serve just to ensure there are not excessive overheads from the range locking implementation. <ref type="figure">Figure 2</ref> shows that Java with a SortedMap scales linearly as expected. Atomos with a plain TreeMap fails to scale because of non-semantic conflicts due to internal operations such as redblack tree balancing. Finally, Atomos with a TransactionalSortedMap wrapped around a TreeMap instance regains the scalability of the Java version.</p><p>TestCompound is a variant of TestMap that composes two operations separated by some computation. The results are shown in <ref type="figure">Figure 3</ref>. In the Java version, a coarse grained lock is used to ensure that two operations act as a single compound operation. For Atomos, the entire loop body, including other computation before and  after the compound operation, is performed as a single transaction. In this case, the Java version scales poorly since a single lock is held during the computation between the two operations, with little difference to the Atomos HashMap result. However, the TransactionalMap result shows that transactional collection classes can provide both composable operations and concurrency.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.3">SPECjbb2000</head><p>SPECjbb2000 <ref type="bibr" target="#b29">[29]</ref> is an embarrassingly parallel Java program with little inherent contention. As a benchmark, it focuses more on ensuring that the underlying virtual machine and supporting system software are scalable. There are a few shared fields and data structures in SPECjbb2000, each protected by synchronized critical regions in the Java version. Each application thread is assigned an independent warehouse to service TPC-C style requests, with only a 1% chance of contention from inter-warehouse requests. Previous results have shown that a transactional version of SPECjbb2000 can scale as well as Java <ref type="bibr" target="#b1">[2]</ref>.</p><p>In order to make scaling performance of SPECjbb2000 more challenging, we created a version that uses a single warehouse for all operations. In addition, for our Atomos version of SPECjbb2000, we do not use the Java critical regions to create transactions. Instead we turn each of five TPC-C operations into single atomic transactions. This is to emulate a first step baseline parallelization by a novice parallel programmer. The correctness of this parallelization is easy to reason about because all the parallel code excluding the thread startup and loop setup is now executed within transactions. We changed both Java and Atomos versions to use java.util collection classes in place of the original binary tree implementation, following the pattern of SPECjbb2005. <ref type="figure">Figure 4</ref> shows the results for our modified version of SPECjbb2000. First, we see that our modifications to use a single warehouse significantly impact the scalability of the Java version, which usually would achieve nearly linear speedup on 32 processors. The Atomos Baseline version with large transactions suffers even further from a variety of conflicting memory operations.</p><p>Using techniques described in <ref type="bibr" target="#b2">[3]</ref>, we were able to identify several global counters such as the District.nextOrder ID generator as the main sources of lost work due to conflicts. By wrapping reads and writes to the these counters in open-nested transactions, we were able to preserve the counter semantics while reducing lost work as shown by the Atomos Open result.</p><p>Additional conflict analysis identified three shared Map instances that were frequent sources of conflicts: Warehouse.historyTable, District.orderTable, and District.newOrder- <ref type="table">Table.</ref> When these were wrapped with TransactionalMap and TransactionalSortedMap as appropriate, we achieved the Atomos Transactional result shown in the figure.</p><p>The use of simple open-nested counters and transactional collection classes yielded a reasonable speedup for little effort. A final analysis revealed more opportunities for improvement, such as splitting transactions and relaxing strict isolation.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.">Conclusions</head><p>We believe the true promise of transactional memory is making parallel programming easier. This means we should evaluate transactional memory systems for their ability to run long transactions scalably, not by their ability to hold their own against code with very short transactions based on fine-grained locking parallelizations. Even if a system scales well with embarrassingly parallel applications or fine-grained transactions, it is also important to show scalability for applications with long-running transactions accessing shared data, since the ultimate goal is to make parallel programming easier by giving the programmer the perfomance of finegrained locking while only using coarse-grained transactions.</p><p>We have shown that semantic currency control allows us to concurrently access data structures while preserving the isolation, and therefore serializability, properties of transactions. We described how we built TransactionalMap and TransactionalSortedMap collection classes for this purpose using the concept of multi-level transactions built upon open nesting. We also showed, with our TransactionalQueue, how these ideas can be used to break the isolation property in structured ways when it is desired to trade serializability for performance. We expect that such reusable collection classes would be part of the standard library of a transactional programming language such as Atomos.</p><p>While standard library classes are convenient for many programmers, we have shown a straightforward operational analysis and implementation guidelines that allow programmers to safely design their own concurrent classes, in cases where they need to create new or augment existing data structures.</p><p>Finally, we hope that our evaluation will convince the implementers of both hardware and software transactional memory systems of the benefits and need for rich transactional semantics. As the database community has shown, there is a lot more to transactional systems than simple atomicity.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head></head><label></label><figDesc>HashTable class: class HashTable { Object get (Object key) {...}; void put (Object key, Object value) {...}; }</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>•</head><label></label><figDesc>The abort handler should clear any changes made with open- nested transactions including releasing semantic locks and clearing any thread-local buffers. Only one abort handler is necessary and it should be registered by the first open-nested transaction to commit. • The commit handler should apply the buffered changes to the underlying data structure. As it applies the changes, it should check for conflicting semantic locks for the operations it is performing. After it has applied the changes, it follows the behavior of the abort handler, ensuring that the buffer is cleared and that semantic locks are released. As with the abort handler, only a single commit handler is needed, registered on the first write operation.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head></head><label></label><figDesc>TestMap results show that Atomos can achieve the scalability of Java when the concurrently accessed HashMap is wrapped in a TransactionalMap.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head></head><label></label><figDesc>TestSortedMap results parallel TestMap showing that TransactionalSortedMap provides similar benefits to a concurrently accessed TreeMap.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head></head><label></label><figDesc>TestCompound results shows that Java scalability is limited by use a coarse grained lock to protect a compound operation which scales as a single Atomos transaction.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head></head><label></label><figDesc>SPECjbb2000 results in a high-contention config- uration caused by sharing a single warehouse.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3" validated="false"><head>Table 3 .</head><label>3</label><figDesc>Summary of TransactionalMap state.</figDesc><table></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_4" validated="false"><head>Table 1 .</head><label>1</label><figDesc></figDesc><table>X 
X 
X 
X 
X 
X 
X X 

Read 

Write 
put 
remove 

entrySet.iterator.hasNext 
hasNext is false and put adds new lastKey hasNext returns true about lastKey and remove takes away lastKey 
entrySet.iterator.next 
put adds key in iterated range 
remove takes away key in iterated range 
comparator 
subMap.iterator.next 
put adds key in iterated range 
remove takes away key in iterated range 
headMap.iterator.next 
put adds key in iterated range 
remove takes away key in iterated range 
tailMap.iterator.next 
put adds key in iterated range 
remove takes away key in iterated range 
tailMap.iterator.hasNext 
hasNext is false and put adds new lastKey hasNext returns true about lastKey and remove takes away lastKey 
lastKey 
put adds a new lastKey 
remove takes away the lastKey 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_5" validated="false"><head>Table 4 .</head><label>4</label><figDesc></figDesc><table>Semantic operational analysis of the SortedMap interface. This focuses on new and changed primitive operations relative to the 
Map interface in Table 1. 

Methods 
Read Lock 
Write Conflict 
Read Only 
entrySet.iterator.hasNext last lock on false return value 
entrySet.iterator.next 
range lock over iterated values, first lock 
comparator 
subMap.iterator.next 
range lock over iterated values 
headMap.iterator.next 
range lock over iterated values, first lock 
tailMap.iterator.next 
range lock over iterated values 
tailMap.iterator.hasNext 
last lock on false return value 
firstKey 
first lock 
lastKey 
last lock 
Write 
put 
key lock on argument 
key&amp;range conflicts on argument 
first&amp;last lock on endpoint change 
size conflict on increases 
remove 
key lock on argument 
key&amp;range conflicts on argument 
first&amp;last lock on endpoint change 
size conflict on decreases 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_6" validated="true"><head>Table 5 .</head><label>5</label><figDesc>Semantic locks for SortedMap. This focuses on new and changed primitive operations relative to the Map interface in Table 2.</figDesc><table>Category 
Field 
Description 
Commited Transactional State 
commited state visible to all transactions 
SortedMap sortedMap 
the underlying SortedMap instance 
Comparator comparator 
read-only Comparator instance 
Shared Transactional State 
state managed by open nesting, encapsulated within TransactionalMap 
Set firstLockers 
set of first key lockers 
Set lastLockers 
set of last key lockers 
Set rangeLockers 
set of last key lockers 
Local Transactional State 
state visible by the local thread 
Set rangeLocks 
set of range locks held by the thread 
SortedMap sortedStoreBuffer sorted map of keys to new values, special value for removed keys 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_7" validated="false"><head>Table 6 .</head><label>6</label><figDesc>Summary of TransactionalSortedMap state. This focuses on the additions of state of the the TransactionalMap superclass in</figDesc><table></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_9" validated="false"><head>Table 7 .</head><label>7</label><figDesc></figDesc><table>Semantic operational analysis of the Channel interface 
showing the conditions under which conflicts arise with write op-
erations list on top. 

Methods Read Lock Write Conflict 
Read 
peek 
if empty 
Write 
put 
if now non-empty 
take 
poll 
if empty 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_11" validated="false"><head>Table 9 .</head><label>9</label><figDesc></figDesc><table>Summary of TransactionalQueue state. 

</table></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgments</head><p>This research was sponsored by the Defense Advanced Research Projects Agency (DARPA) through the Department of the Interior National Business Center under grant number NBCH104009. The views and conclusions contained in this document are those of the authors and should not be interpreted as representing the official policies, either expressed or implied, of the Defense Advanced Research Projects Agency (DARPA) or the U.S. Government. Additional support was also available through NSF grant 0444470 and through the MARCO Focus Center for Circuit &amp; System Solutions (C2S2), under contract 2003-CT-888. Brian D. Carlstrom is supported by an Intel Foundation PhD Fellowship.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Compiler and runtime support for efficient software transactional memory</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A.-R</forename><surname>Adl-Tabatabai</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Lewis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Menon</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><forename type="middle">R</forename><surname>Murphy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Saha</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Shpeisman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">PLDI &apos;06: Proceedings of the 2006 ACM SIGPLAN Conference on Programming Language Design and Implementation</title>
		<meeting><address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">The Atomos Transactional Programming Language</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><forename type="middle">D</forename><surname>Carlstrom</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Mcdonald</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Chafi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Chung</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Minh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Kozyrakis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Olukotun</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">PLDI &apos;06: Proceedings of the 2006 ACM SIGPLAN Conference on Programming Language Design and Implementation</title>
		<meeting><address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="2006-06" />
			<biblScope unit="page" from="1" to="13" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">TAPE: A Transactional Application Profiling Environment</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Chafi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Minh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Mcdonald</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><forename type="middle">D</forename><surname>Carlstrom</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Chung</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Hammond</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Kozyrakis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Olukotun</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ICS &apos;05: Proceedings of the 19th Annual International Conference on Supercomputing</title>
		<imprint>
			<date type="published" when="2005-06" />
			<biblScope unit="page" from="199" to="208" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">The Common Case Transactional Behavior of Multithreaded Programs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Chung</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Chafi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Minh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Mcdonald</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><forename type="middle">D</forename><surname>Carlstrom</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Kozyrakis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Olukotun</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 12th International Conference on High-Performance Computer Architecture</title>
		<meeting>the 12th International Conference on High-Performance Computer Architecture</meeting>
		<imprint>
			<date type="published" when="2006-02" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">What really makes transactions faster</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Dice</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Shavit</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">TRANSACT: First ACM SIGPLAN Workshop on Languages, Compilers, and Hardware Support for Transactional Computing</title>
		<imprint>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">Efficient software transactional memory</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Ennals</surname></persName>
		</author>
		<idno>IRC-TR-05-051</idno>
		<imprint>
			<date type="published" when="2005" />
			<pubPlace>Intel Research Cambridge</pubPlace>
		</imprint>
	</monogr>
<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">Free Software Foundation, GNU Classpath 0</title>
		<ptr target="http://www.gnu.org/software/classpath/" />
		<imprint>
			<date type="published" when="2005" />
			<biblScope unit="volume">18</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Garcia-Molina</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Salem</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Sagas</surname></persName>
		</author>
		<title level="m">SIGMOD &apos;87: Proceedings of the 1987 ACM SIGMOD international conference on Management of data</title>
		<meeting><address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="1987" />
			<biblScope unit="page" from="249" to="259" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">The transaction concept: Virtues and limitations</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Gray</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 7th International Conference on Very Large Data Bases</title>
		<meeting>the 7th International Conference on Very Large Data Bases</meeting>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="1981" />
			<biblScope unit="page" from="144" to="154" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title level="m" type="main">Transaction Processing: Concepts and Techniques</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Gray</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Reuter</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1993" />
			<publisher>Morgan Kaufmann</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Robust Contention Management in Software Transactional Memory</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Guerraoui</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Herlihy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Kapalka</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Pochon</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">OOPSLA 2005 Workshop on Synchronization and Concurrency in Object-Oriented Languages (SCOOL)</title>
		<imprint>
			<date type="published" when="2005-10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Exceptions and side-effects in atomic blocks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Harris</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2004 PODC Workshop on Concurrency and Synchronization in Java Programs</title>
		<imprint>
			<date type="published" when="2004-07" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Language support for lightweight transactions</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Harris</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Fraser</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">OOPSLA &apos;03: Proceedings of the 18th annual ACM SIGPLAN conference on Object-oriented programing, systems, languages, and applications</title>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="2003" />
			<biblScope unit="page" from="388" to="402" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Software transactional memory for dynamic-sized data structures</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Herlihy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Luchangco</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Moir</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>William</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Scherer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">PODC &apos;03: Proceedings of the twenty-second annual symposium on Principles of distributed computing</title>
		<meeting><address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="2003-07" />
			<biblScope unit="page" from="92" to="101" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Transactional memory: Architectural support for lock-free data structures</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Herlihy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">E B</forename><surname>Moss</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 20th International Symposium on Computer Architecture</title>
		<meeting>the 20th International Symposium on Computer Architecture</meeting>
		<imprint>
			<date type="published" when="1993" />
			<biblScope unit="page" from="289" to="300" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
			</analytic>
	<monogr>
		<title level="m">Concurrency Utilities</title>
		<imprint>
			<date type="published" when="2004-09" />
			<biblScope unit="volume">166</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Simultaneous multi-threading implementation in POWER5</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Kalla</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Sinharoy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Tendler</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Conference Record of Hot Chips 15 Symposium</title>
		<meeting><address><addrLine>Stanford, CA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2003-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Niagara: A 32-way multithreaded Sparc processor</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Kongetira</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Aingaran</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Olukotun</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE MICRO Magazine</title>
		<imprint>
			<biblScope unit="volume">25</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="21" to="29" />
			<date type="published" when="2005-04" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Using Transactions in Delaunay Mesh Generation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Kulkarni</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><forename type="middle">P</forename><surname>Chew</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Pingali</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Workshop on Transactional Memory Workloads</title>
		<imprint>
			<date type="published" when="2006-06" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Lea</surname></persName>
		</author>
		<ptr target="http://gee.cs.oswego.edu/dl" />
		<imprint>
			<date type="published" when="2004-05" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Architectural Semantics for Practical Transactional Memory</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Mcdonald</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Chung</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><forename type="middle">D</forename><surname>Carlstrom</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Minh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Chafi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Kozyrakis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Olukotun</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ISCA &apos;06: Proceedings of the 33rd annual international symposium on Computer Architecture</title>
		<meeting><address><addrLine>Washington, DC, USA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="2006-06" />
			<biblScope unit="page" from="53" to="65" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Characterization of TCC on Chip-Multiprocessors</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Mcdonald</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Chung</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Chafi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Minh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><forename type="middle">D</forename><surname>Carlstrom</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Hammond</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Kozyrakis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Olukotun</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">PACT &apos;05: Proceedings of the 14th International Conference on Parallel Architectures and Compilation Techniques</title>
		<meeting><address><addrLine>Washington, DC, USA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="2005-09" />
			<biblScope unit="page" from="63" to="74" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Simple, fast, and practical nonblocking and blocking concurrent queue algorithms</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">M</forename><surname>Michael</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">L</forename><surname>Scott</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">PODC &apos;96: Proceedings of the fifteenth annual ACM symposium on Principles of distributed computing</title>
		<meeting><address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="1996" />
			<biblScope unit="page" from="267" to="275" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<monogr>
		<title level="m" type="main">Nested Transactions: An Approach to Reliable Distributed Computing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">E B</forename><surname>Moss</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1981-04" />
			<pubPlace>Cambridge, MA, USA</pubPlace>
		</imprint>
		<respStmt>
			<orgName>Massachusetts Institute of Technology</orgName>
		</respStmt>
	</monogr>
<note type="report_type">PhD thesis</note>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Open Nested Transactions: Semantics and Support</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">E B</forename><surname>Moss</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Poster at the 4th Workshop on Memory Performance Issues (WMPI-2006)</title>
		<imprint>
			<date type="published" when="2006-02" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Abstraction in recovery management</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">E B</forename><surname>Moss</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><forename type="middle">D</forename><surname>Griffeth</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">H</forename><surname>Graham</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGMOD &apos;86: Proceedings of the</title>
		<imprint>
			<date type="published" when="1986" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<monogr>
				<title level="m">ACM SIGMOD international conference on Management of data</title>
		<meeting><address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="1986" />
			<biblScope unit="page" from="72" to="83" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">Synchronizing shared abstract types</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">M</forename><surname>Schwarz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">Z</forename><surname>Spector</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Computer Systems</title>
		<imprint>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="223" to="250" />
			<date type="published" when="1984" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">Software transactional memory</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Shavit</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Touitou</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 14th Annual ACM Symposium on Principles of Distributed Computing</title>
		<meeting>the 14th Annual ACM Symposium on Principles of Distributed Computing<address><addrLine>Ottawa, Canada</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1995-08" />
			<biblScope unit="page" from="204" to="213" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<monogr>
		<title level="m" type="main">Standard Performance Evaluation Corporation, SPECjbb2000 Benchmark</title>
		<ptr target="http://www.spec.org/jbb2000/" />
		<imprint>
			<date type="published" when="2000" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">Trends in systems aspects of database management</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><forename type="middle">L</forename><surname>Trager</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2nd International Conference on Databases</title>
		<meeting>the 2nd International Conference on Databases</meeting>
		<imprint>
			<publisher>Wiley &amp; Sons</publisher>
			<date type="published" when="1983" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">Specification and implementation of resilient, atomic data types</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Weihl</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Liskov</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGPLAN &apos;83: Proceedings of the 1983 ACM SIGPLAN symposium on Programming language issues in software systems</title>
		<meeting><address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="1983" />
			<biblScope unit="page" from="53" to="64" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">Architectural issues of transaction management in multi-layered systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Weikum</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H.-J</forename><surname>Schek</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">VLDB &apos;84: Proceedings of the 10th International Conference on Very Large Data Bases</title>
		<meeting><address><addrLine>San Francisco, CA, USA</addrLine></address></meeting>
		<imprint>
			<publisher>Morgan Kaufmann Publishers Inc</publisher>
			<date type="published" when="1984" />
			<biblScope unit="page" from="454" to="465" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title level="a" type="main">Extending hardware transactional memory to support non-busy waiting and non-transactional actions</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Zilles</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Baugh</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">TRANS-ACT: First ACM SIGPLAN Workshop on Languages, Compilers, and Hardware Support for Transactional Computing</title>
		<imprint>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
