<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2019-03-26T16:28+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Link-State Routing With Hop-by-Hop Forwarding Can Achieve Optimal Traffic Engineering</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
				<date type="published" when="20111717">DECEMBER 2011 1717</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><roleName>Member, IEEE</roleName><forename type="first">Dahai</forename><surname>Xu</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><roleName>Senior Member, IEEE</roleName><forename type="first">Mung</forename><surname>Chiang</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><roleName>Senior Member, IEEE, Fellow, ACM</roleName><forename type="first">Jennifer</forename><forename type="middle">Rexford</forename></persName>
						</author>
						<title level="a" type="main">Link-State Routing With Hop-by-Hop Forwarding Can Achieve Optimal Traffic Engineering</title>
					</analytic>
					<monogr>
						<title level="j" type="main">IEEE/ACM TRANSACTIONS ON NETWORKING</title>
						<imprint>
							<biblScope unit="volume">19</biblScope>
							<biblScope unit="issue">6</biblScope>
							<date type="published" when="20111717">DECEMBER 2011 1717</date>
						</imprint>
					</monogr>
					<idno type="DOI">10.1109/TNET.2011.2134866</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>Index Terms-Interior gateway protocol</term>
					<term>network entropy maximization</term>
					<term>optimization</term>
					<term>Open Shortest Path First (OSPF)</term>
					<term>routing</term>
					<term>traffic engineering</term>
				</keywords>
			</textClass>
			<abstract>
				<p>This paper settles an open question with a positive answer: Optimal traffic engineering (or optimal multicommodity flow) can be realized using just link-state routing protocols with hop-by-hop forwarding. Today&apos;s typical versions of these protocols, Open Shortest Path First (OSPF) and Intermediate System-Intermediate System (IS-IS), split traffic evenly over shortest paths based on link weights. However, optimizing the link weights for OSPF/IS-IS to the offered traffic is a well-known NP-hard problem, and even the best setting of the weights can deviate significantly from an optimal distribution of the traffic. In this paper, we propose a new link-state routing protocol, PEFT, that splits traffic over multiple paths with an exponential penalty on longer paths. Unlike its predecessor, DEFT, our new protocol provably achieves optimal traffic engineering while retaining the simplicity of hop-by-hop forwarding. The new protocol also leads to a significant reduction in the time needed to compute the best link weights. Both the protocol and the computational methods are developed in a conceptual framework, called Network Entropy Maximization, that is used to identify the traffic distributions that are not only optimal, but also realizable by link-state routing.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>II. BACKGROUND ON OPTIMAL TE</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Definitions of Optimality</head><p>Consider a wireline network as a directed graph , where is the set of nodes (where ), is the set of links (where ), and link has capacity . The offered traffic is represented by a traffic matrix for source-destination pairs indexed by . The load on each link depends on how the network decides to route the traffic. An objective function enables quantitative comparisons between different routing solutions in terms of the load on the links. Traffic engineering usually considers a link-cost function that is an increasing function of . For example, can be the link utilization , and the objective of traffic engineering can be to minimize . As another example, let be a piecewise-linear approximation of the M/M/1 delay formula <ref type="bibr" target="#b17">[18]</ref>, e.g., <ref type="bibr" target="#b0">(1)</ref> and the objective is to minimize . More generally, we use " " to represent any increasing and convex objective function. The optimality of traffic engineering is with respect to this objective function.</p><p>At this point, we can already observe that there is a "gap" between the objective of TE and the mechanism of link-state routing. Optimality is defined directly in terms of the traffic flows, whereas link-state protocols represent the paths indirectly in terms of link weights. Bridging this gap is one of the challenges that have prevented researchers from achieving optimal traffic engineering using link-state routing thus far.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Optimal TE Via Multicommodity Flow</head><p>Consider the following convex optimization problem: minimizing the TE cost function over flow conservation and link capacity constraints.</p><p>COMMODITY:</p><formula xml:id="formula_0">min (2a) s.t. (2b)<label>(2c)</label></formula><p>vars.</p><p>This multicommodity problem 1 can be readily solved efficiently, where the flow destined to a single destination is treated as a commodity, and is the amount of flow on link destined to node . <ref type="bibr" target="#b1">2</ref> The resulting solution, however, may not be realizable through link-state routing and hop-by-hop forwarding. Indeed, for a network with nodes and links, the multicommodity-flow solution may require up to tunnels, i.e., explicit routing (see Appendix-E), making it difficult to scale. In contrast, link-state routing is much simpler, requiring only parameters (i.e., one per link). Furthermore, while it is true that, from the solution of the COMMODITY problem, a set of link weights can be computed such that all the commodity flow will be forwarded along the shortest paths <ref type="bibr" target="#b3">[4]</ref>, <ref type="bibr" target="#b4">[5]</ref>, the flow-splitting ratios among these shortest paths are not related to the link weights, forcing the operator to specify up to additional parameters (one parameter on each link for each destination) as the flow-splitting ratios for all the routers.</p><p>Henceforth, we use the following phrases: optimal traffic engineering, optimal multicommodity flow (2) and optimal distribution of traffic, interchangeably. We formally define the problem addressed in this paper.</p><p>Optimal Traffic Engineering With Link-State Routing: In a network using a link-state routing protocol with destination-based hop-by-hop forwarding, each router is aware of the weight of each link. Based on the link weights, each router independently computes the flow-splitting ratios across its outgoing links. Is there such a protocol, with efficient computation of the link weights, that can achieve the optimal distribution of traffic as defined in <ref type="formula">(2)</ref>?</p><p>The rest of this paper shows that optimal traffic engineering can, in fact, be achieved using only link weights.</p><p>link flow f (like minimizing the maximum link utilization), the optimal solution of COMMODITY problem (2) may contain flow cycles. To prevent bandwidth waste, we can eliminate flow cycles in the optimal routing with a O(E log N )-time algorithm for each commodity <ref type="bibr" target="#b18">[19]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>III. THEORETICAL FOUNDATION: NEM</head><p>In this section, we present the theory of realizing optimal TE with link-state protocols. We first compute the minimal load that each link must carry to achieve optimal traffic distribution, then examine all the traffic-splitting choices subject to necessary (minimal) link capacities. It turns out that the traffic-splitting configuration that is realizable with hop-by-hop forwarding can be picked out by maximizing a weighted sum of the entropies of traffic-splitting vectors. In addition, the corresponding link weights can be found efficiently by solving the new optimization problem using the gradient descent algorithm. It is important to realize that the proposed NEM framework developed in this section is used to design the protocol. The NEM problem itself is not solved by the operator or routers-it is constructed as a proof technique and an intermediate step toward the results in Sections IV and V.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Necessary Capacity</head><p>Given the traffic matrix and the objective function, the solution to the COMMODITY problem (2) provides the optimal distribution of traffic. We represent the resulting flow on each link as the necessary capacity (or as a vector). The necessary capacity is a minimal 3 set of link capacities to realize optimal traffic engineering.</p><p>There could be numerous ways of traffic splitting that realize optimal TE. If we replace link capacity in COMMODITY (2) with the necessary capacity , <ref type="bibr" target="#b3">4</ref> we are free to impose another objective function to pick out a particular optimal solution to the original problem. A key challenge here is to design a new objective function, purely for the purpose of protocol development, such that the resulting routing of flow can be realized distributively with link-state routing protocols and hop-by-hop forwarding.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Network Entropy Maximization</head><p>Denote as the set of paths from to (repeated nodes are allowed) and as the probability (fraction) of forwarding a packet of demand to the th path . Obviously, . If we require the probabilities of using two paths to be the same as long as they are of the same length (see Appendix-B for details), to be realized with hop-by-hop forwarding, the values of should satisfy that the set of values of satisfying (3) maximizes a "network entropy" defined as follows. Consider the entropy function for source-destination pair .</p><p>The weighted sum, , is defined as the network entropy. <ref type="bibr" target="#b4">5</ref> Now we define the NEM problem under the necessary capacity constraints as follows:</p><formula xml:id="formula_2">max (4a) s.t. (4b)<label>(4c)</label></formula><p>vars.</p><p>From the optimal solution of the COMMODITY problem, we know the feasibility set of NEM is nonempty. For a concave maximization over a nonempty, compact constraint set, there exist globally optimal solutions to NEM.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C. Solve NEM by Dual Decomposition</head><p>We will connect the characterization of optimal solutions to NEM that are realizable with hop-by-hop forwarding to exponential penalty. Toward that end and to provide a foundation for link weight computation in Section V, we first investigate the Lagrange dual problem of NEM and a gradient-based solution.</p><p>Denote dual variables for constraints (4b) as for link</p><p>(or as a vector). We first write the Lagrangian associated with the NEM problem <ref type="formula">(5)</ref> The Lagrange dual function is (6) where 0 and 1 are the vectors whose elements are all zeros and ones, respectively, and is the vector of . The dual problem is formulated as min s.t.</p><p>To solve the dual problem, we first consider problem (6). The maximization of the Lagrangian over can be solved as TRAFFIC-DISTRIBUTION problem (8). <ref type="bibr" target="#b4">5</ref> The physical interpretation of entropy for IP routing and the uniqueness of choosing the entropy function to pick out the right flow distributions are presented in Appendix-C and Appendix-B, respectively.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>TRAFFIC-DISTRIBUTION:</head><formula xml:id="formula_5">max (8a) s.t. (8b)</formula><p>Then, the dual problem <ref type="formula" target="#formula_4">(7)</ref> can be solved by using the gradient descent algorithm as follows for iterations indexed by :</p><formula xml:id="formula_6">(9)</formula><p>where is the step-size, are solutions of the TRAFFIC-DISTRIBUTION problem (8) for a given , and is the total flow on link . After this dual decomposition, the following result can be proven with standard convergence analysis for gradient algorithms <ref type="bibr" target="#b19">[20]</ref>.</p><p>Lemma 1: By solving the TRAFFIC-DISTRIBUTION problem for the NEM problem and the dual variable update <ref type="formula">(9)</ref>, converge to the optimal dual solutions , and the corresponding primal variables are the globally optimal primal solutions of (4).</p><p>Proof: See Appendix-D.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>D. Solve TRAFFIC-DISTRIBUTION Problem</head><p>Note that, the TRAFFIC-DISTRIBUTION problem is also separable, i.e., the traffic splitting for each demand across its paths is independent of the others since they are not coupled together with link capacity constraint (4b). Therefore, we can solve a subproblem (10) for each demand separately. DEMAND-DISTRIBUTION for :</p><formula xml:id="formula_7">max (10a) s.t. (10b)</formula><p>We write the Lagrangian associated with the DEMAND-DISTRIBUTION subproblem as <ref type="formula">(11)</ref> where is the Lagrangian variable associated with (10b).</p><p>According to Karush-Kuhn-Tucker (KKT) conditions 6 <ref type="bibr" target="#b20">[21]</ref>, at the optimal solution of the DEMAND-DISTRIBUTION subproblem, we have <ref type="formula">(12)</ref> For the entropy function, , , we have <ref type="formula">(13)</ref> where</p><p>are the values of the , respectively, at the optimal solution.</p><p>Then, for two paths , from to , we have <ref type="formula">(14)</ref> We pause to examine the engineering implications of <ref type="formula">(14)</ref>. If we use as the weight for link , the probability of using path is inversely proportional to the exponential value of its path length. It is important to observe at this point that since <ref type="formula">(14)</ref> has no factor of , an intermediate router can ignore the source of the packet when making forwarding decisions. Equally importantly, from (9), in iteration , the procedure for updating link weights does not need the values of . Instead, the procedure just needs , the aggregated bandwidth usage. We will show how to calculate efficiently in Section V-B. Now, combining the optimality results in Section II-B and Lemma 1 with the existence of <ref type="formula">(14)</ref>, we have the following.</p><p>Theorem 1: Optimal traffic engineering (i.e., the optimal multicommodity flow) for a given traffic matrix can be realized with link weights using exponential flow splitting <ref type="bibr" target="#b13">(14)</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>IV. NEW LINK-STATE ROUTING PROTOCOL: PEFT</head><p>In this section, we translate the theoretical results in Section III into a new link-state routing protocol run by routers. Each router makes an independent decision on how to forward traffic to a destination (i.e., flow-splitting ratios) among its outgoing links, using only the link weights. We first present PEFT from <ref type="bibr" target="#b13">(14)</ref> and summarize the notation of the traffic-splitting function <ref type="bibr" target="#b0">[1]</ref> for calculating flow-splitting ratios. Then, we show an efficient way to calculate the traffic-splitting function for the flow with PEFT routing, which can be approximated to further simplify the computation of traffic-splitting ratios in practice.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. PEFT</head><p>Based on <ref type="formula">(14)</ref>, we propose a new link-state routing protocol, called PEFT. The fraction of the traffic (from to ) distributed across the th path (or probability of forwarding a packet), , <ref type="bibr" target="#b5">6</ref> KKT is a necessary condition, but NEM must have a global optimal solution.</p><p>Thus, we must have one set of x ; for (12). is inversely proportional to the exponential value of its path length <ref type="formula">(15)</ref> Theorem 1 in Section III shows PEFT can achieve optimal TE. A PEFT flow can be realized with hop-by-hop forwarding. For the sample network in <ref type="figure" target="#fig_1">Fig. 1</ref>, for the two paths from to ( and ) and two paths from to , the flows on them for PEFT <ref type="formula">(15)</ref> satisfy <ref type="formula">(16)</ref> Therefore, router can treat the packets from different sources (e.g., or ) equally by forwarding them among the outgoing links with precalculated splitting ratios. Formally, we have the following.</p><p>Proposition 1: The PEFT flow for a set of link weights can be realized with hop-by-hop forwarding.</p><p>Proof: For the traffic from to , assume is the set of all the paths (having flow from to ) that share , a subpath (segment) from to , and is the set of all paths having flow from to . From PEFT (15), the traffic-splitting ratio of the flows on is equal to that of . The equality holds for every set of for a PEFT flow. Thus, the flow can be realized with hop-by-hop forwarding.</p><p>As a link-state routing protocol, we need to define the trafficsplitting function for PEFT as follows.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Review: Traffic-Splitting Function</head><p>The notation of traffic-splitting (allocation) function was introduced in <ref type="bibr" target="#b0">[1]</ref> to succinctly describe link-state routing protocols. In a directed graph, each unidirectional link has a single, configurable weight . Based on a complete view of the topology and link weights, a router can compute the shortest distance from any node to node ; represents the distance from to when routed through neighboring node . Shortest-distance gap is defined as , which is always greater than or equal to 0. Then, lies on a shortest path to if and only if . Traffic-splitting function indicates the relative amount of traffic destined to that node will forward via outgoing link . <ref type="bibr" target="#b6">7</ref> Let denote the total incoming flow (destined to ) at node (including the</p><formula xml:id="formula_8">0 (h ) = 1; if h = 0 0; if h &gt; 0.</formula><p>passing-through flow and self-originated flow). The total outgoing flow of traffic (destined to ) traversing link , , can be computed as follows: <ref type="formula" target="#formula_4">(17)</ref> Consistent with hop-by-hop forwarding, splits the traffic over the outgoing links without regard to the source node or the incoming link from which the traffic arrived.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C. Exact Traffic-Splitting Function for PEFT</head><p>The traffic-splitting function for PEFT can be calculated by each node autonomously and in polynomial time. From the definition of PEFT <ref type="formula">(15)</ref>, more traffic should be sent along an outgoing link used by more paths, and the paths should be treated differently based on their path lengths. To compute the traffic splitting on each outgoing link, we first define a positive real number , possibly interpretable as the "equivalent number" of shortest paths from node to destination , and let . For a PEFT flow, we have</p><formula xml:id="formula_9">(18a) (18b)</formula><p>The recursive relationship represented in (18b) <ref type="bibr" target="#b7">8</ref> can be used in the following way:</p><p>is an "equivalent number" of shortest paths from to for those paths passing through link and the router should distribute the traffic from on link in proportion to . Then, we have an exact traffic-splitting function 9 for PEFT at link <ref type="bibr" target="#b18">(19)</ref> To enable hop-by-hop forwarding, each router needs to independently calculate for all node pairs. Then, each router first computes the all-pairs shortest paths, using, e.g., the Floyd-Warshall algorithm with time complexity <ref type="bibr" target="#b21">[22]</ref> and calculates the values of . Then, for each destination , to compute the values of , each router needs to solve <ref type="bibr" target="#b7">8</ref> Allowing for paths with cycles is required for the recursive derivation of (18b) (i.e., from e to 7 ). Consider a simple example with two unidirectional links between u and v [i.e., (u; v) and (v;u)], and P and P are the sets of the paths to t from u and v, respectively. Then, the concatenation of link (u;v) and P , which may create paths with cycle, is a subset of P . Similarly, the concatenation of link (v; u) and P is a subset of P . However, if optimal TE is acyclic, only cycle-free paths will be used because longer paths are exponentially penalized. 9 P in the subscript emphasizes that the calculation of traffic splitting considers the paths toward destination, and X denotes exactness. linear (18b), which requires time <ref type="bibr" target="#b21">[22]</ref>. Thus, the total complexity is .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>D. Detour: Traffic-Splitting Function for "Downward PEFT"</head><p>To prevent cycles in link-state routing, packets are usually forwarded along a "downward path" where the next hop is closer to destination. This inspires the following Downward PEFT, whose traffic-splitting function is 10 :</p><p>if otherwise.</p><p>can approximate and further simplify the computation of and traffic splitting as discussed below and utilized in Section V-C.</p><p>We consider each destination independently. After temporarily removing link where since there is no flow on it, we get an acyclic network and do topological sorting on the remaining network. Proceeding through the nodes in increasing topological order (starting with destination ), we compute the value of using (18b). For each destination, topology sorting requires time, and summarizing the across the outgoing links requires time. Thus, the total time complexity to calculate is . In general, "Downward PEFT" does not provably achieve optimal TE, in contrast to PEFT, although it comes extremely close to optimal TE in practice, with the associated link weight computation even faster than that for PEFT. In the case where the lower bound of all link weights, , is large enough, the downward PEFT is same as PEFT. 11</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>E. Discussion</head><p>In the control plane, PEFT does not change the routing-protocol messages that are sent between the routers (an important consideration for practical use), but does change the computation done locally on each router based on the weights.</p><p>In the data plane, routers today implement hash-based splitting over multiple outgoing links, typically with an even (1 out of ) splitting ratio. PEFT requires flexible splitting over multiple outgoing links, thus we need to store the splitting percentages-whereas for spitting, the splitting ratio is implicitly even. It requires a little extra storage and processing, not enough to become a new bottleneck, when packets arrive to direct packets to the appropriate outgoing links.</p><p>An optimal distribution of traffic could have flow cycles if the objective is not a strictly increasing function of link flow . Both cyclic or acyclic optimal traffic distributions can be realized with Exact PEFT. For a cyclic optimal traffic distribution, Exact PEFT may result in cycles in link-state routing. For an acyclic optimal traffic distribution (or with flow cycles removed as in <ref type="bibr" target="#b18">[19]</ref>), the flow on the cyclic paths in Exact PEFT solution should be sufficiently close to 0. Downward PEFT is <ref type="bibr" target="#b9">10</ref>   A new way to use link weights also means the network operator needs a new way to compute, centrally and offline, the optimal link weights. It turns out that the NP-hard problem of linkweight computation in OSPF can be turned into a convex optimization when link weights are used by PEFT. To do that, we will convert the iterative method of solving the NEM problem in Section III into a simple and efficient algorithm. We first present an algorithm that iteratively chooses a tentative set of link weights and evaluates the corresponding traffic distribution by simulating the PEFT traffic splitting run by the routers. From Theorem 1, the algorithm is guaranteed to converge to a set of link weights, which realizes optimal TE with PEFT. To further speed up the calculation, the traffic distribution with PEFT for each iteration can be approximated with downward PEFT. The simulation in Section VI shows that such an approximation is very close to optimal and provides substantial speedup in practice.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Algorithm Framework for Optimizing Link Weights</head><p>The iterative algorithm consists of two main parts: 1) computing the optimal traffic distribution (necessary capacities) for a given traffic matrix by solving the COMMODITY problem (2); 2) computing the link weights that would achieve the optimal traffic distribution. The second step uses the optimal traffic distribution found in the first step as input and need not consider the objective function any further. Starting with an initial setting of link weights, the algorithm (see Algorithm 1) repeatedly updates the link weights until the load on each link is the same as the necessary capacity. Each setting of the link weights corresponds to a particular way of splitting the traffic over a set of paths. The procedure computes the resulting link loads based on the traffic matrix. Then, the procedure (see Algorithm 2) increases the weight of each link linearly if the traffic exceeds the necessary capacity, or decreases it otherwise. The parameter is a positive step-size, which can be constant or dynamically adjusted; we find that setting to the reciprocal of the maximum In terms of computational complexity, we know that COMMODITY can be solved efficiently. The complexity of Algorithm 2 is . The remaining question is how to solve the subproblem efficiently.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Compute Traffic Distribution With PEFT</head><p>To compute the traffic distribution for PEFT, we should first compute the shortest paths between each pair of nodes and all the values as in Section IV-C, which is shown as the first step of Algorithm 3. Computing the resulting distribution of traffic is complicated by the fact that may direct traffic "backwards" to a node that is farther away from the destination. To capture these effects, recall that is the total incoming flow at node (including traffic originating at as well as any traffic arriving from other nodes) that is destined to node . In particular, the traffic that enters the network at node and leaves at node satisfies the following linear equation:</p><formula xml:id="formula_11">(21)</formula><p>That is, the traffic entering the network at node matches the total incoming flow at node (destined to node ), excluding the traffic entering from other nodes. The transit flow is captured as a sum over all incoming links from neighboring nodes , which split their incoming traffic over their links based on the traffic-splitting function.</p><p>Algorithm 3 computes the traffic distribution by solving the system of linear <ref type="formula">(21)</ref> and computing the resulting flow on each link . The linear (21) for each typically require time <ref type="bibr" target="#b21">[22]</ref> to solve. Thus, the total complexity is .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C. Approximate Traffic Distribution With "Downward PEFT"</head><p>If optimal traffic distribution is cycle-free, we can further reduce the computational overhead in link-weight computation. Note that, if the optimal traffic distribution is acyclic, in the last iteration in Algorithm 1, the flow cycle will be negligible. In addition, the accurate solution for each intermediate iteration is not necessary in practice, we can approximate PEFT with Downward PEFT to forward traffic only on "downward" paths, and the traffic distribution for each intermediate iteration can be computed using a combinatorial algorithm, which is significantly faster than solving linear (21).</p><p>As in Section V-B, we first compute the shortest paths between all pairs of nodes, as well as the values of , as shown in the first step of Algorithm 4. The following procedure is very similar to, but subtly different from, that for calculating . We consider each destination independently since the flow to each destination can be computed without regard to the other destinations. After temporarily removing link where since there is no flow on it, we get an acyclic network and do topological sorting on the remaining network. The computation starts at the node without any incoming link in the acyclic network since this node would never carry any traffic to that originates at other nodes. Proceeding through the nodes in decreasing topological order, we compute the total incoming flow at node (destined to ) as the sum of the flow originating at [i.e., ] and the flow arriving from neighboring nodes . Then, we use the total incoming flow at to compute the flow of traffic toward on each of its outgoing links using the traffic-splitting function . In Algorithm 4, computing the all-pairs shortest paths with the Floyd-Warshall algorithm has time complexity <ref type="bibr" target="#b21">[22]</ref>. For each destination, topology sorting requires time, and summarizing the incoming flow and splitting across the outgoing links requires time. Thus, the total time complexity to run Algorithm 4 in each iteration of Algorithm 1 is . Finally, the total running time for Algorithm 1 depends on the time required to solve (2) and the total number of iterations required for Algorithms 2 and 4. Interestingly, although the original NEM problem involves an infinite number of variables, the complexity of Algorithm 1 is still comparable to solving a convex optimization with polynomial number of variables [like the COMMODITY problem (2)] using the gradient descent algorithm since we do not need to solve NEM directly. <ref type="bibr" target="#b11">12</ref> However, in the terminology of complexity theory, link-weight computation for PEFT is not yet proven to be polynomial-time, although in the special case of single destination, we can compute PEFT in polynomial time as shown in Proposition 2.</p><p>Proposition 2: Downward PEFT can achieve acyclic optimal traffic engineering with a single destination in polynomial time.</p><p>See Appendix-F for proof.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>VI. PERFORMANCE EVALUATION</head><p>How well can the new routing protocol PEFT perform, and how fast can the new link weight computation be? PEFT has been already proven to achieve optimal TE in Section III, with a complexity of link-weight computation similar to that of solving convex optimization (with a polynomial number of variables). In this section, we numerically demonstrate that its approximate version, Downward PEFT, can make convergence very fast in practice while coming extremely close to TE optimality.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Simulation Environment</head><p>We consider two network objective functions : maximum link utilization and total link cost (1) (as used in operator's TE formulation). For benchmarking, the optimal values of both objectives are computed by solving linear program (2) with CPLEX 9.1 <ref type="bibr" target="#b22">[23]</ref> via AMPL <ref type="bibr" target="#b23">[24]</ref>.</p><p>To compare to OSPF, we use the state-of-the-art local-search method in <ref type="bibr" target="#b1">[2]</ref>. We adopt TOTEM 1.1 <ref type="bibr" target="#b24">[25]</ref>, which follows the same approach as <ref type="bibr" target="#b1">[2]</ref> and has similar quality of the results. <ref type="bibr" target="#b12">13</ref> We use the same parameter setting for local search as in <ref type="bibr" target="#b1">[2]</ref>, <ref type="bibr" target="#b17">[18]</ref>, where the link weights are restricted as integers from 1 to 20 since a larger weight range would slow down the searching <ref type="bibr" target="#b17">[18]</ref>, initial link weights are chosen randomly, and the best result is collected after 5000 iterations.</p><p>Note that here we do not evaluate and compare some previous works using noneven splitting over shortest paths <ref type="bibr" target="#b3">[4]</ref>, <ref type="bibr" target="#b4">[5]</ref> since these solutions do not enable routers to independently compute the flow-splitting ratios from link weights.</p><p>To determine link weights under PEFT, we run Algorithm 1 with up to 5000 iterations of computing the traffic distribution and updating link weights. Abusing terminology a little, in this section we use the term PEFT to denote the traffic engineering with Algorithm 1 (including two sub-Algorithms 2 and 4).</p><p>We run the simulation for a real backbone network and several synthetic networks. The properties of the networks used are summarized in <ref type="table" target="#tab_0">Table IV</ref>, which will be presented in Subsection VI-E. First is the Abilene network <ref type="figure" target="#fig_6">(Fig. 2)</ref>  <ref type="bibr" target="#b25">[26]</ref>, which has 11 nodes and 28 directional links with 10-Gb/s capacity. The traffic demands are extracted from the sampled Netflow data on <ref type="bibr">November 15, 2005</ref>. To simulate networks <ref type="bibr" target="#b11">12</ref> We do not need to write down the NEM problem explicitly or obtain the optimal value for each variable. Instead, we just search for E dual variables (link weights) that can enable optimal solution of NEM problem. Each step in the proposed gradient descent algorithm has polynomial-time complexity in terms of the number of nodes and edges. <ref type="bibr" target="#b12">13</ref> Proprietary enhancements can bring in factors of improvement, but as we will see, PEFT's advantage on computational speed is orders of magnitude.  with different congestion levels, we create different test cases by uniformly decreasing the link capacity until the maximal link utilization reaches 100% with optimal TE. We also test the algorithms on the same topologies and traffic matrices as those in <ref type="bibr" target="#b1">[2]</ref>. The two-level hierarchical networks were generated using GT-ITM, which consists of two kinds of links: local access links with 200-unit capacity and long-distance links with 1000-unit capacity. In the random topologies, the probability of having a link between two nodes is a constant parameter, and all link capacities are 1000 units. In these test cases, for each network, traffic demands are uniformly increased to simulate different congestion levels.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Minimization of Maximum Link Utilization</head><p>Since we create different levels of congestion for the same network by uniformly decreasing link capacities or uniformly increasing traffic demands, we just need to compute the maximum link utilization (MLU) for one test case in each network because MLU is proportional to the ratio of total demand over total capacity. In addition to MLU, we are particularly interested in the metric "efficiency of capacity utilization," , which is defined as the following ratio: the percentage of the traffic demand satisfied when the MLU reaches 100% under a traffic engineering scheme over that in the optimal traffic engineering. The improvement in is referred to as the "Internet capacity increase" in <ref type="bibr" target="#b1">[2]</ref>.</p><p>For any test case of a network, if MLU of optimal TE, OSPF, and PEFT are , , and , respectively, then and . Thus, PEFT can increase Internet capacity over OSPF by . <ref type="table" target="#tab_0">Table III</ref> shows the maximum link utilizations of optimal traffic engineering, PEFT, and Local Search OSPF for the test case with the lightest loading of each network. <ref type="figure" target="#fig_7">Fig. 3</ref> illustrates the efficiency of capacity utilization of the three schemes. They show that PEFT is very close to optimal traffic  engineering in minimizing MLU and increases Internet capacity over OSPF by 15% for the Abilene network and 24% for the hier50b network, respectively.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C. Minimization of Total Link Cost</head><p>We also employ the cost function (1) as in <ref type="bibr" target="#b1">[2]</ref>. The comparison is based on the optimality gap, in terms of the total link cost, compared against the value achieved by the optimal traffic engineering. Typical results for different topologies with various traffic matrices are shown in <ref type="figure" target="#fig_8">Fig. 4</ref>, where the network loading is the ratio of total demand over total capacity. From the results, we observe that the gap between OSPF and the optimal traffic engineering can be very significant (up to 821%) for the most congested case of the Abilene network. In contrast, PEFT can achieve almost the same performance as the optimal traffic engineering in terms of total link cost. Note that, within those figures, the maximum optimality gap of PEFT is only up to 8.8% in <ref type="figure" target="#fig_8">Fig. 4(b)</ref>, which can be further reduced to 1.5% with a larger step-size and more iterations (which is feasible as the algorithm runs very quickly, to be shown in Section VI-E). <ref type="figure" target="#fig_9">Fig. 5</ref> shows the optimality gap in terms of total cost achieved by PEFT, using different step-sizes, within the first 5000 iterations for the Abilene network with the least link capacities. It provides convergence behavior typically observed. The legends show the ratio of the step-size over the default setting. It demonstrates that the algorithm developed in Section V for the PEFT protocol converges very fast even with the default setting, and reduces the gap to 5% after 100 iterations and 1% after 3000 iterations. In addition, increasing step-size a little will speed up the convergency and as expected; too large a step-size (e.g., 2.5 in the above example) would cause oscillation. Notice that there is a wide range of step-sizes that can make convergence very fast. An even faster solution with Newton's method can be found in <ref type="bibr" target="#b26">[27]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>D. Convergence Behavior</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>E. Running Time Requirement</head><p>Besides the convergence behavior, the actual running time is also an important evaluation criteria. The tests for PEFT and local search OSPF were performed under the time-sharing servers of Redhat Enterprise Linux 4 with Intel Pentium IV processors at GHz. Note that the running time for local search OSPF is sensitive to the traffic matrix since a near-optimal solution can be reached very quickly for light traffic matrices. Therefore, we show the range of their average running times per iteration for qualitative reference. <ref type="figure" target="#fig_10">Fig. 6</ref> shows the optimality gap (on a log scale) achieved by local search OSPF and PEFT within the first 500 iterations for a typical scenario <ref type="figure" target="#fig_8">[Fig. 4(c)</ref>]. It demonstrates that Algorithm 1 for PEFT converges much faster than local search for OSPF. <ref type="table" target="#tab_0">Table IV</ref> shows the average running time per iteration for different networks. We observe that our algorithm is very   <ref type="figure" target="#fig_8">FIG. 4</ref> fast, requiring at most 2 min even for the largest network (with 100 nodes) tested, while the OSPF local search needs tens of hours on the same computer. On average, the algorithm developed in this paper to find link weights for PEFT routing is 2000 times faster than local search algorithms for OSPF routing.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>VII. NEM: A FRAMEWORK FOR LINK-STATE ROUTING</head><p>In this section, we highlight the conceptual framework of NEM and the differences between NEM and NUM.</p><p>As explained in Section III, NEM is developed in this paper as a unifying mathematical model that enables the discovery and development of new link-state routing protocol PEFT. Although NEM is solved by neither routers nor operators, its solution leads to both the development of PEFT traffic splitting and linkweight computation algorithms. More discussions on the intuitions behind NEM can be found in Appendix-C.</p><p>On the other hand, TCP congestion control protocols have been studied extensively since 1998 as solutions to another family of optimization models called NUM. The notion of network utility was first advocated in <ref type="bibr" target="#b27">[28]</ref> in 1995 for bandwidth allocation among elastic demands on source rates. The NUM problem (22) was first introduced for TCP congestion control (e.g., <ref type="bibr" target="#b11">[12]</ref>- <ref type="bibr" target="#b14">[15]</ref>). Consider a communication network with logical links, each with a fixed capacity of b/s and sources (i.e., end-users), each transmitting at a source rate of b/s. Each source emits one flow, using a fixed set of links in its path, and has an increasing (and often concave) function called utility function. Each link is shared by a set of sources. NUM, in its basic version, is the following problem of maximizing the network utility , over the source rates , subject to linear flow There is a useful economics interpretation of the dual-based distributed algorithm for NUM, in which the Lagrange dual variables can be interpreted as shadow prices for resource allocation, and end-users and the network maximize their net utilities and net revenue, respectively. Much reverse-engineering of existing TCP variants and forward-engineering of new congestion control protocols have been developed with the NUM model as a starting point.</p><p>The NEM problem proposed in this paper is not a special case of NUM since entropy is not an increasing function and the design freedom in NEM is routing rather than rate control. Instead, there is a useful and interesting parallel between the framework of NEM proposed this paper, for link-state routing protocols in the IP layer, and that of NUM matured over the last decade, for end-to-end congestion control protocols in the TCP layer. The comparison between the two frameworks is shown in <ref type="table" target="#tab_4">Table V</ref>, where results from this paper are highlighted in italics.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>VIII. CONCLUDING REMARKS</head><p>Commodity-flow-based routing protocols are optimal for any convex objective in Internet TE, but introduce much configuration complexity. Link-state routing is simple, but prior work suggests it does not achieve optimal TE. This paper proves that optimal traffic engineering, in fact, can be achieved by link-state routing with hop-by-hop forwarding, and the right link weights can be computed efficiently, as long as flow splitting on nonshortest paths is allowed but properly penalized. In the Appendix, we also show uniqueness of the exponential penalty in achieving optimal TE and discuss interpretations of NEM from the viewpoints of statistical physics and combinatorics.</p><p>Before concluding this paper, we would like to highlight that optimization is used in three different ways in this paper. First and obviously, it is used when developing algorithms to solve the link-weight computation problem for PEFT.</p><p>In a more interesting way, the level of difficulty of optimizing link weights for OSPF is used as a hint that perhaps we need to revisit the standard assumption on how link weights should be used. In this approach of "Design For Optimizability," sometimes a restrictive assumption in the protocol can be perturbed at low "cost" and yet turn a very hard network-management problem into an efficiently solvable one. In this case, better (and indeed the best) TE and faster weight computation are simultaneously achieved.</p><p>In yet another way, optimization in the form of NEM is introduced as a conceptual framework to develop routing protocols. The NEM framework for distributed routing also leads to several interesting future directions, including extensions to robust TE and to the interactions between congestion control at sources with link-state routing in the network.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>APPENDIX</head><p>In this Appendix, we present more details about NEM and PEFT. Appendix-A explains the differences between PEFT and DEFT <ref type="bibr" target="#b0">[1]</ref>. Appendix-B proves the uniqueness of choosing the entropy function to pick out the right flow distributions realizable with link-state routing. Appendix-C introduces a physical interpretation of entropy for IP routing. Appendix-D proves Lemma 1 on the convergence of solving the NEM problem with the gradient descent algorithm. Appendix-E introduces how to realize the multicommodity-flow solution with up to tunnels, which also can be used as an initialization for the NEM problem (4). Appendix-F proves Proposition 2 and shows a polynomial-time algorithm of setting optimal link weights for PEFT in a single-destination network.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Differences Between PEFT and DEFT</head><p>Here, we explain several points of potential confusion between PEFT in this paper and DEFT in <ref type="bibr" target="#b0">[1]</ref>. Link-state routing protocols can be categorized as link-based and path-based in terms of flow splitting. Their difference is illustrated in <ref type="figure" target="#fig_11">Fig. 7</ref>, with a network that only has traffic demand from to . Assume the weights of the links are shown in <ref type="figure" target="#fig_11">Fig. 7(a)</ref>. Obviously, the shortest distance from to is 2 units, and both nodes and are on the shortest paths from to . In a link-based splitting scheme (e.g., OSPF, Fong <ref type="bibr" target="#b6">[7]</ref>, and DEFT <ref type="bibr" target="#b0">[1]</ref>), node evenly splits traffic across its two outgoing links and as shown in <ref type="figure" target="#fig_11">Fig. 7(b)</ref>, whereas in a path-based splitting scheme, e.g., PEFT, there are three equal-length paths from and evenly splits traffic across them as shown in <ref type="figure" target="#fig_11">Fig. 7(c)</ref>. Note that the path-based model does not imply explicit routing to set up tunnels for all the possible paths. Instead, each node just needs to compute and stores the aggregated flow-splitting ratio across its outgoing links, like 66% on link for the sample network in <ref type="figure" target="#fig_11">Fig. 7(c)</ref>. Therefore, path-based splitting schemes can still be realized with hop-by-hop forwarding.</p><p>The key differences between PEFT and DEFT are summarized as follows.</p><p>1) DEFT is a link-based flow splitting, while PEFT is a pathbased flow splitting. 2) The core algorithms for setting link weights are completely different. Reference <ref type="bibr" target="#b0">[1]</ref> introduces a nonconvex, nonsmooth optimization for DEFT and a two-stage iterative solution method, while the theory for PEFT is NEM. The two-stage method for DEFT is much slower than the algorithms developed for PEFT in this paper. 3) Reference <ref type="bibr" target="#b0">[1]</ref> numerically shows DEFT can realize nearoptimal TE in terms of a particular objective (total link cost), while this paper proves that PEFT can realize optimal TE with any convex objective function.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Uniqueness of Exponential Penalty</head><p>Can optimal traffic engineering be achieved by other penalty functions on longer paths? Here, we demonstrate that exponential penalty is the only way of realizing optimal traffic distribution with path-based link-state routing.</p><p>As in <ref type="formula">(12)</ref> </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C. Entropy Maximization and Most Likely Flow Configuration</head><p>There are several intriguing relationships between the framework of network entropy maximization for link-state routing and statistical physics. We speculate about some of the thoughtprovoking connections in this Appendix.</p><p>In classical statistical mechanics, many microscopic behaviors aggregate into macroscopic states, and an isolated thermodynamic system will eventually reach an equilibrium macroscopic state that is the most likely one. Interestingly, entropy maximization for traffic engineering can be motivated by an argument of "most likely flow configuration," shown as follows.</p><p>Consider a network with only one source-destination pair and uncapacitated paths between them. If there are packets to be transmitted from to , let be the number of packets on path , with . Each set of such , which can be represented as a vector, is referred to as a macroscopic state. In contrast, each collection of routing decisions for individual packets represents a microscopic state. There are a total of possible microscopic states. The number of microscopic states consistent with a given macroscopic state can be viewed as a measure of likelihood of that macroscopic state.</p><p>The number of microscopic states corresponding to the macroscopic state is . We want to search for the macroscopic state with the largest number of , i.e., , or, equivalently, . For a large system asymptote, and are large numbers. Hence, using Stirling's approximation, , we have . This shows that the system equilibrium is the flow configuration that maximizes the entropy, , where is the fraction of flow on path . The optimality result of PEFT through NEM suggests an intriguing connection between the principle of entropy maximization and that of shortest description length since maximizing entropy picks out those traffic distribution that can be realized by the simplest set of routing configuration parameters: one weight per link to be used independently by each router.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>D. Proof of Lemma 1</head><p>Proof: Since strong duality holds for problem (4) and its Lagrange dual problem (7), we solve the dual problem through gradient method and recover the primal optimizers from the dual optimizers. By Danskin's Theorem <ref type="bibr" target="#b19">[20]</ref> Hence, the algorithm in (9) is a gradient descent algorithm for dual problem <ref type="bibr" target="#b6">(7)</ref>. Since the dual objective function is a convex function, there exists a step-size that guarantees to converge to the optimal dual solutions <ref type="bibr" target="#b19">[20]</ref>. Also, if satisfies a Lipschitz continuity condition, i.e., there exists a constant such that then converges to the optimal dual solution with a sufficiently small constant step-size <ref type="bibr" target="#b19">[20]</ref>. The Lipschitz continuity condition is satisfied if the curvatures of the entropy functions are bounded away from zero; see <ref type="bibr" target="#b28">[29]</ref> for further details. Furthermore, since problem (4) is a strictly convex optimization problem and TRAFFIC-DISTRIBUTION problems (8) have unique solutions, are the globally optimal primal solutions of (4) <ref type="bibr" target="#b29">[30]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>E. Tunnel-Based Routing to Realize Optimal TE</head><p>A tunnel-based routing can be derived from the optimal solution of the COMMODITY problem (2) based on dual decomposition. The approach follows the same way as the flow decomposition technique in <ref type="bibr" target="#b30">[31]</ref>. We rephrase the approach and illustrate its complexity. The flow destined to the same destination is treated as a commodity. In the optimal solution of (2), there are up to acyclic commodity flows, where is the node number. The paths with flow can be determined for each commodity independently. For commodity , starting with any source , temporarily remove all the links without flow to (i.e.,</p><p>). In the remaining network, choose any path from to , and let be the link with the least along the path, then deduct from demand and flow for all the links along the path. Remove link from further consideration. Repeat the above procedure until the paths for have been determined. For each demand , there are at most paths with flow since at least one link is removed during each step. Therefore, the total number of paths for commodities (and source/destination pair) is . Hence, the above procedure finishes within polynomial time.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>F. Polynomial-Time Algorithm of Link Weight Setting for Single-Destination Network</head><p>For a single-destination (sink) network, the link weights to realize acyclic optimal TE with PEFT can be found in polynomial time. The method is much faster than solving the NEM problem with the gradient descent algorithm. We have the following lemma first.</p><p>Lemma 2: "Downward PEFT" can realize any acyclic flow for a single destination in polynomial time.</p><p>Proof: The links without flow can be assigned infinitely large weights and excluded from further processing. Denote , where is the amount of flow on link . The nodes are processed in their reverse topological order in the acyclic flow, where the first node is the destination , with (Section IV-C). When node is processed, from (17), (18b), and (19), we have <ref type="formula">(36)</ref> and <ref type="formula" target="#formula_4">(37)</ref> then <ref type="formula">(38)</ref> We can set since at least one link is on the shortest path from to , i.e., . Then, we set the weight for link as and the shortest distance from node to , . Then, the weight of link is from (37). It is easy to verify that the above link weighting satisfies the definition of downward PEFT <ref type="bibr" target="#b19">(20)</ref>  <ref type="bibr" target="#b13">14</ref> and the time complexity is .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Proof of Proposition 2:</head><p>Proof: An obvious conclusion from Lemma 2 if optimal TE is cycle-free. <ref type="bibr" target="#b13">14</ref> All d have been determined since the nodes are processed in the reverse topological order and d 0.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>(</head><label></label><figDesc>3) where is the weight assigned to link , is the number of times passes through link ( can contain cycles), and is a known function for all the routers. We find 3 But may not be the minimum capacity. ~ c c c is minimal if ~</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Fig. 1 .</head><label>1</label><figDesc>Fig. 1. Realize a PEFT flow using hop-by-hop forwarding.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head></head><label></label><figDesc>D in the subscript emphasizes "downward." 11 For link (u;v), if the shortest distance to t of u is d d , then h = d + w 0 d w and 0 (h ) 7 e , and the flow des- tined to t on (u;v) is close to 0 if w is large enough, e.g., e 0:005%. Therefore, most flow in PEFT always makes forward progress toward the des- tination, i.e., from router u with larger d to router v with smaller d .</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head></head><label></label><figDesc>Return /*final link weights*/ a faster but approximate solution to realize an acyclic optimal traffic distribution. V. LINK-WEIGHT COMPUTATION FOR PEFT Section IV described how routers split traffic under PEFT.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head></head><label></label><figDesc>For link weights , construct all-pairs shortest paths (e.g., with Floyd-Warshall algorithm) and compute 2: For each , compute by solving linear (21) 3: 4: 5: Return /*set of , total flow on each link*/ necessary link capacity performs well in practice. Algorithm 1 is guaranteed to converge to the global optimal so- lution as stated in Lemma 1.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Fig. 2 .</head><label>2</label><figDesc>Fig. 2. Abilene network.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Fig. 3 .</head><label>3</label><figDesc>Fig. 3. Efficiency of capacity utilization of optimal traffic engineering, PEFT and Local Search OSPF.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Fig. 4 .</head><label>4</label><figDesc>Fig. 4. Comparison of PEFT and Local Search OSPF in terms of optimality gap on minimizing total link cost. (a) Abilene network. (b) Rand100 network. (c) hier50b network. (d) hier50a network. (e) Rand50 network. (f) Rand50a network.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Fig. 5 .</head><label>5</label><figDesc>Fig. 5. Evolution of optimality gap of PEFT with different step-sizes.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head>Fig. 6 .</head><label>6</label><figDesc>Fig. 6. Comparison of the drop in optimality gap between Local Search OSPF and PEFT in a two-level topology with 50 nodes and 212 links.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_11"><head>Fig. 7 .</head><label>7</label><figDesc>Fig. 7. Difference in traffic splittings for link-based and path-based link-state routing protocol. (a) Link weights. (b) Link-based splitting. (c) Path-based splitting.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0" validated="false"><head>TABLE I COMPARISON OF VARIOUS TE SCHEMES (NEW CONTRIBUTIONS IN ITALICS)</head><label>I</label><figDesc></figDesc><table></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1" validated="false"><head>TABLE II SUMMARY OF KEY NOTATION</head><label>II</label><figDesc></figDesc><table></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2" validated="false"><head>TABLE III MAXIMUM LINK UTILIZATION OF OPTIMAL TRAFFIC ENGINEERING, PEFT, AND LOCAL SEARCH OSPF FOR LIGHT-LOADING NETWORKS</head><label>III</label><figDesc></figDesc><table></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3" validated="false"><head>TABLE IV AVERAGE RUNNING TIME PER ITERATION REQUIRED BY PEFT AND LOCAL SEARCH OSPF TO ATTAIN THE PERFORMANCE IN</head><label>IV</label><figDesc></figDesc><table></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_4" validated="false"><head>TABLE V NUM FOR TCP AND NEM FOR IP: MAIN DIFFERENCES</head><label>V</label><figDesc></figDesc><table>constraints 
for all links (note that routing is 
fixed in NUM formulation): 

maximize 

subject to 

variables 
(22) 

</table></figure>

			<note place="foot" n="1"> We first remark that solving this COMMODITY problem is only an intermediate step in the proof. The actual PEFT protocol in Section IV will not be implementing a multicommodity-flow-based routing with end-to-end tunneling. Another clarifying remark is that while we will later show that PEFT link-weight computation is as easy as solving a convex optimization. However, that optimization is not this well-known COMMODITY problem. 2 If the objective 8(ff ; c g) is not a strictly increasing function of</note>

			<note place="foot" n="4"> The link cost is still defined in terms of the original link capacity, i.e., link utilization or cost will not be changed due to the use of necessary capacity.</note>

			<note place="foot" n="7"> For example, the traffic-splitting function for even splitting across shortest paths (e.g., OSPF) is</note>
		</body>
		<back>

			<div type="acknowledgement">
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">DEFT: Distributed exponentiallyweighted flow splitting</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Xu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Chiang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Rexford</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE INFOCOM</title>
		<meeting>IEEE INFOCOM<address><addrLine>Anchorage, AK</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2007-05" />
			<biblScope unit="page" from="71" to="79" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Increasing Internet capacity using local search</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Fortz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Thorup</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Comput. Optimiz. Appl</title>
		<imprint>
			<biblScope unit="volume">29</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="13" to="48" />
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">MPLS and traffic engineering in IP networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Awduche</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Commun. Mag</title>
		<imprint>
			<biblScope unit="volume">37</biblScope>
			<biblScope unit="issue">12</biblScope>
			<biblScope unit="page" from="42" to="47" />
			<date type="published" when="1999-12" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Internet traffic engineering without full mesh overlaying</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Zhang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE INFOCOM</title>
		<meeting>IEEE INFOCOM<address><addrLine>Anchorage, AK</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2001" />
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="page" from="565" to="571" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Achieving near-optimal traffic engineering solutions for current OSPF/IS-IS networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Sridharan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Guérin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Diot</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE/ACM Trans. Netw</title>
		<imprint>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="234" to="247" />
			<date type="published" when="2005-04" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Determining link weight system under various objectives for OSPF networks using a Lagrangian relaxation-based approach</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Srivastava</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Agrawal</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Pioro</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Medhi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans on Network &amp; Service Management</title>
		<imprint>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="9" to="18" />
			<date type="published" when="2005-11" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Better alternatives to OSPF routing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">H</forename><surname>Fong</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">C</forename><surname>Gilbert</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Kannan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">J</forename><surname>Strauss</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Algorithmica</title>
		<imprint>
			<biblScope unit="volume">43</biblScope>
			<biblScope unit="issue">1-2</biblScope>
			<biblScope unit="page" from="113" to="131" />
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title level="m" type="main">Introduction to Traffic Science</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">R</forename><surname>Blunden</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1967" />
			<pubPlace>London, U.K.</pubPlace>
		</imprint>
	</monogr>
<note type="report_type">Printerhall</note>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Traffic distribution and entropy</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">A</forename><surname>Tomlin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">G</forename><surname>Tomlin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Nature</title>
		<imprint>
			<biblScope unit="volume">220</biblScope>
			<biblScope unit="page" from="974" to="976" />
			<date type="published" when="1968" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">A new paradigm for ranking pages on the world wide web</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">A</forename><surname>Tomlin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 12th WWW</title>
		<meeting>12th WWW<address><addrLine>New York</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2003" />
			<biblScope unit="page" from="350" to="355" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Traffic planning in a constrained network using entropy maximisation approach</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">K</forename><surname>Agrawal</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Mohan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">S</forename><surname>Singh</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Inst. Eng., India. Civil Eng. Div</title>
		<imprint>
			<biblScope unit="volume">85</biblScope>
			<biblScope unit="page" from="236" to="240" />
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Rate control in communication networks: Shadow prices, proportional fairness and stability</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Kelly</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Maulloo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Tan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Oper. Res. Soc</title>
		<imprint>
			<biblScope unit="volume">49</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="237" to="252" />
			<date type="published" when="1998-03" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">A game theoretic framework for bandwidth allocation and pricing in broadband networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Yäiche</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">R</forename><surname>Mazumdar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Rosenberg</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE/ACM Trans. Netw</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="667" to="678" />
			<date type="published" when="2000-10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">A duality model of TCP and queue management algorithms</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">H</forename><surname>Low</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE/ACM Trans. Netw</title>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="525" to="536" />
			<date type="published" when="2003-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Srikant</surname></persName>
		</author>
		<title level="m">The Mathematics of Internet Congestion Control (Systems and Control: Foundations and Applications)</title>
		<meeting><address><addrLine>New York</addrLine></address></meeting>
		<imprint>
			<publisher>Springer Verlag</publisher>
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Faster and simpler algorithms for multicommodity flow and other fractional packing problems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Garg</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Könemann</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SIAM J. Comput</title>
		<imprint>
			<biblScope unit="volume">37</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="630" to="652" />
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Distributed network monitoring and multicommodity flows: A primal-dual approach</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Awerbuch</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Khandekar</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 26th Annu. ACM PODC</title>
		<meeting>26th Annu. ACM PODC<address><addrLine>New York</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2007" />
			<biblScope unit="page" from="284" to="291" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Internet traffic engineering by optimizing OSPF weights</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Fortz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Thorup</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE INFOCOM</title>
		<meeting>IEEE INFOCOM<address><addrLine>Tel-Aviv, Israel</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2000" />
			<biblScope unit="page" from="519" to="528" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">A data structure for dynamic trees</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">D</forename><surname>Sleator</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">E</forename><surname>Tarjan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Comput. Syst. Sci</title>
		<imprint>
			<biblScope unit="volume">26</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="362" to="391" />
			<date type="published" when="1983" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">P</forename><surname>Bertsekas</surname></persName>
		</author>
		<title level="m">Nonlinear Programming</title>
		<meeting><address><addrLine>Belmont, MA</addrLine></address></meeting>
		<imprint>
			<publisher>Athena Scientific</publisher>
			<date type="published" when="1999" />
		</imprint>
	</monogr>
	<note>2nd ed.</note>
</biblStruct>

<biblStruct xml:id="b20">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Boyd</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Vandenberghe</surname></persName>
		</author>
		<title level="m">Convex Optimization</title>
		<meeting><address><addrLine>Cambridge, U.K.</addrLine></address></meeting>
		<imprint>
			<publisher>Cambridge Univ. Press</publisher>
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<monogr>
		<title level="m" type="main">Introduction to Algorithms</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Cormen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Leiserson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Rivest</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1990" />
			<publisher>MIT Press</publisher>
			<pubPlace>Cambridge, MA</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ilog</forename><surname>Cplex Optimizer Ibm</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Armonk</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Ny [online</surname></persName>
		</author>
		<ptr target="http://www.ilog.com/products/cplex/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<monogr>
		<title level="m" type="main">AMPL: A Modeling Language for Mathematical Programming</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Fourer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">M</forename><surname>Gay</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><forename type="middle">W</forename><surname>Kernighan</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1993" />
			<pubPlace>Danvers, MA; Boyd &amp; Fraser</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<monogr>
		<title level="m" type="main">TOTEM</title>
		<ptr target="http://totem.info.ucl.ac.be" />
		<imprint>
			<pubPlace>Louvain-la-Neuve, Belgium</pubPlace>
		</imprint>
		<respStmt>
			<orgName>Univ. Catholique de Louvain</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<monogr>
		<title level="m" type="main">Abilene backbone network</title>
		<ptr target="http://abilene.internet2.edu/" />
		<imprint>
			<biblScope unit="volume">2</biblScope>
			<pubPlace>Ann Arbor, MI</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Optimal traffic engineering via Newton&apos;s method</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Xu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. CISS</title>
		<meeting>CISS<address><addrLine>Princeton, NJ</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2008-03" />
			<biblScope unit="page" from="46" to="51" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">Fundamental design issues for the future Internet</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Shenker</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE J. Sel. Areas Commun</title>
		<imprint>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="issue">7</biblScope>
			<biblScope unit="page" from="1176" to="1188" />
			<date type="published" when="1995-09" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">Optimization flow control-I: Basic algorithm and convergence</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">H</forename><surname>Low</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">E</forename><surname>Lapsley</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE/ACM Trans. Netw</title>
		<imprint>
			<biblScope unit="volume">7</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="861" to="874" />
			<date type="published" when="1999-12" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<monogr>
		<title level="m" type="main">Mathematical Programming: Theory and Algorithms</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Minoux</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1986" />
			<publisher>Wiley</publisher>
			<pubPlace>New York</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">A case study of multiservice multipriority traffic engineering design for data networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Mitra</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><forename type="middle">G</forename><surname>Ramakrishnan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE GLOBECOM</title>
		<meeting>IEEE GLOBECOM<address><addrLine>Rio de Janeiro, Brazil</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1999-12" />
			<biblScope unit="page" from="1077" to="1083" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">How good can IP routing be?</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Lorenz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Orda</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Raz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Shavitt</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">DIMACS Rep</title>
		<imprint>
			<date type="published" when="2001-05-17" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dahai</forename><surname>Xu</surname></persName>
		</author>
		<title level="m">S&apos;01-M&apos;05) received the Ph.D. degree in computer science from the State University of New York at Buffalo in 2005. He is currently a Research Staff Member with AT&amp;T Laboratories-Research</title>
		<meeting><address><addrLine>Florham Park, NJ</addrLine></address></meeting>
		<imprint/>
	</monogr>
	<note>After receiving the Ph.D. degree, he spent two</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
