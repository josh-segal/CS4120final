<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2019-03-26T17:07+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Practical Approximation Algorithms for Separable Packing Linear Programs ?</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Feodor</forename><forename type="middle">F</forename><surname>Dragan</surname></persName>
							<email>dragan@cs.kent.edu</email>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">Kent State University</orgName>
								<address>
									<postCode>44242</postCode>
									<settlement>Kent</settlement>
									<region>OH</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andrew</forename><forename type="middle">B</forename><surname>Kahng</surname></persName>
							<affiliation key="aff1">
								<orgName type="department">Departments of Computer Science and Engineering, and of Electrical and Computer Engineering</orgName>
								<orgName type="institution">UC San Diego</orgName>
								<address>
									<addrLine>La Jolla</addrLine>
									<postCode>92093-0114</postCode>
									<region>CA</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ion</forename><forename type="middle">I</forename><surname>M˘ Andoiu</surname></persName>
							<email>mandoiu@cc.gatech.edu</email>
							<affiliation key="aff2">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">UC Los Angeles</orgName>
								<address>
									<postCode>90095-1596</postCode>
									<settlement>Los Angeles</settlement>
									<region>CA</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sudhakar</forename><surname>Muddu</surname></persName>
							<email>muddu@sanera.net</email>
							<affiliation key="aff3">
								<orgName type="institution">Sanera Systems, Inc</orgName>
								<address>
									<settlement>Santa Clara</settlement>
									<region>CA</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alexander</forename><surname>Zelikovsky</surname></persName>
							<affiliation key="aff4">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">Georgia State University</orgName>
								<address>
									<postCode>30303</postCode>
									<settlement>Atlanta</settlement>
									<region>GA</region>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Practical Approximation Algorithms for Separable Packing Linear Programs ?</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>We describe fully polynomial time approximation schemes for generalized multicommodity flow problems arising in VLSI applications such as Global Routing via Buffer Blocks (GRBB). We extend Fleischer&apos;s improvement [7] of Garg and Könemann [8] fully polynomial time approximation scheme for edge capacitated multicommodity flows to multiterminal multicommodity flows in graphs with capacities on vertices and subsets of vertices. In addition, our problem formulations observe upper bounds and parity constraints on the number of vertices on any source-to-sink path. Unlike previous works on the GRBB problem [5, 17], our algorithms can take into account (i) multiterminal nets, (ii) simultaneous buffered routing and compaction, and (iii) buffer libraries. Our method out-performs existing algorithms for the problem and has been validated on top-level layouts extracted from a recent high-end microprocessor design.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>In this paper, we address the problem of how to perform buffering of global nets given an existing buffer block plan. We give integer linear program (ILP) formulations of the basic Global Routing via Buffer Blocks (GRBB) problem and its extensions to (i) multiterminal nets, (ii) simultaneous buffered routing and compaction, and (iii) buffer libraries. The fractional relaxations of these ILP's are separable packing LP's (SP LP) which are multiterminal multicommodity flows in graphs with capacities on vertices and subsets of vertices.</p><p>The main contribution of this paper is a practical algorithm for the GRBB problem and its extensions based on a fully polynomial time approximation scheme (FPTAS) for solving SP LPs. Prior to our work, heuristics based on solving fractional relaxations followed by randomized rounding have been applied to VLSI global routing <ref type="bibr" target="#b11">[12,</ref><ref type="bibr" target="#b15">16,</ref><ref type="bibr" target="#b1">2,</ref><ref type="bibr" target="#b8">9</ref>, 1] As noted in <ref type="bibr" target="#b10">[11]</ref>, the applicability of this approach is limited to problem instances of relatively small size by the prohibitive cost of solving exactly the fractional relaxation. We avoid this limitation by giving an FPTAS for SP LP's based on results in <ref type="bibr" target="#b7">[8,</ref><ref type="bibr" target="#b6">7]</ref>. Computational experience with industrial benchmarks shows that our approach is practical and outperforms existing algorithms.</p><p>The rest of the paper is organized as follows. In Section 3 we formulate the GRBB problem and its extensions as integer linear programs. The fractional relaxation of these ILPs is a special type of packing LP which we refer to as separable packing LP. In Sections 4 we give a practical approximation algorithm, obtained by extending the ideas of Fleischer <ref type="bibr" target="#b6">[7]</ref> for separable packing LPs; the details of the key subroutine for finding minimum-weight feasible Steiner trees are given in Section 5; the details of randomized rounding algorithms are in Section 6. In Section 7 we describe implementations of several GRBB heuristics and give the results of an experimental comparison of these heuristics on industrial test cases.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Global Buffering via Buffer Blocks</head><p>Process scaling in VLSI leads to an increasingly dominant effect of interconnect on high-end chip performance. Each top-level global net must undergo repeater or buffer (inverter) insertion to maintain signal integrity and reasonable signal delay <ref type="bibr" target="#b3">[4]</ref>. It is estimated that up to 10 6 repeaters will be needed for the next generation on-chip interconnect. To isolate repeaters from circuit block implementations, a buffer block methodology is becoming increasingly popular. Two recent works by Cong, Kong and Pan <ref type="bibr" target="#b4">[5]</ref> and Tang and Wong <ref type="bibr" target="#b16">[17]</ref> give algorithms to solve the buffer block planning problem. Their buffer block planning formulation is roughly stated as follows: Given a placement of circuit blocks, and a set of 2-pin connections with feasible regions for buffer insertion, plan the location of buffer blocks within the available free space so as to route a maximum number of connections.</p><p>In this paper we address the problem of maximizing the number of routed nets for given buffer block locations and capacities, informally defined as follows. Given:</p><p>-a planar region with rectangular obstacles; -a set of nets in the region, each net having:</p><p>񮽙 a non-negative importance (criticality) coefficient; 񮽙 a single source and multiple sinks;</p><p>-for each sink:</p><p>񮽙 a parity requirement and an upper-bound on the number of buffers on the path connecting it to the source; -a set of buffer blocks, each with given capacity; and -an interval 񮽙L;U 񮽙 specifying lower and upper bounds on the distance between buffers.</p><p>Global Routing via Buffer Blocks (GRBB) Problem: route a subset of the given nets, with maximum total importance, such that:</p><p>-the distance between the source of a route and its first repeater, between any two consecutive repeaters, respectively between the last repeater on a route and the route's sink, are all between L and U; -the number of routing trees passing through any given buffer block does not exceed the block's capacity; -the number of buffers on each source-sink path does not exceed the given upper bound and has the required parity; to meet the parity constraint two buffers of the same block can be used.</p><p>We also address the following extensions of the basic GRBB problem:</p><p>-GRBB with Set Capacity Constraints. The basic GRBB problem assumes predetermined capacities for all buffer blocks. In practice buffer blocks are placed in the space available after placing circuit blocks, and some of the circuit blocks can still be moved within certain limits ( <ref type="figure" target="#fig_2">Figure 1</ref>). The GRBB problem with set capacity constraints captures this freedom by allowing constraints on the total capacity of arbitrary sets of buffer blocks.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>BB1</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>BB2 BB1 BB2</head><p>M M <ref type="figure" target="#fig_2">Fig. 1</ref>. Two buffer blocks BB1 and BB2 that share capacity: if the circuit block M moves to the right, then the capacity of buffer block BB1 is increasing while the capacity of buffer block BB2 is decreasing. In this example it is the sum of capacities of BB1 and BB2, rather than their individual capacities, that is bounded.</p><p>-GRBB with Buffer Library. To achieve better use of area and power resources, multiple buffer types can be used. The GRBB problem with buffer library optimally distributes the available buffer block capacity between given buffer types and simultaneously finds optimum buffered routings. K g denote the set of sources, respectively of sinks, and R = fr 1 ; : : : ; r n g denote the given set of buffer blocks. For each buffer block r i , we let cr i denote its capacity, i.e., the maximum number of buffers that can be inserted in r i .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Integer Linear Program Formulations</head><p>A routing graph for nets N k , k = 1; : : : ; K , is an undirected graph G = V ; E such that S 񮽙 S 0 V . The set of vertices of G other than sources and sinks, V n S 񮽙 S 0 , is denoted by V 0 . All vertices in a routing graph are associated to locations on the chip, including vertices of V 0 which are associated with buffer block locations. We require that the rectilinear distance with obstacles between two vertices connected by an edge in the routing graph be either between L and U or 0 (this last case corresponds to using two buffers in the same buffer block). Thus, inserting a buffer at each Steiner point ensures that every Steiner tree in the routing graph satisfies the given L=U bounds. A feasible Steiner tree for net N k is a Steiner tree T k connecting terminals s k ; t 1 k ; : : : ; t q k k such that, for every i = 1; : : : ; q k , the path of T k connecting s k to t i k has length at most l i k and parity a i k . We denote the set of all feasible Steiner trees for net N k by T k , and let</p><formula xml:id="formula_0">T = S K k=1 T k .</formula><p>For the GRBB problem, the routing graph G = V ; E has V = S 񮽙S 0 񮽙 f r 0 ; r 00 j r 2 Rg (there are two vertices corresponding to each buffer block to allow for feasible Steiner trees that meet the parity constraints by using two buffers in the same buffer block) and E = fr 0 ; r 00 j r 2 Rg g f x ; y j x ; y 2 V , L d x ; y U g , where, dx;y is the rectilinear distance with obstacles between points x and y. Given importance coefficients g k = gN k for each net N k , let gT = g k for each tree T 2 T k , k = 1; : : : ; K . The GRBB problem is then equivalent to the following integer linear program:</p><formula xml:id="formula_1">maximize ∑ T 2T gT f T (GRBB ILP) subject to ∑ T 2T π T v f T 1, 8v 2 S 񮽙S 0 ∑ T 2T π T r 0 + π T r 00 f T cr, 8r 2 R f T 2 f 0 ; 1 g , 8 T 2 T</formula><p>where π T v is 1 if v 2 T and 0 otherwise.</p><p>The GRBB ILP, as well as the ILP formulations for GRBB with set constraints and buffer library (which we omit from this extended abstract) are captured by the following common generalization, referred to as the separable packing ILP (SP ILP):</p><formula xml:id="formula_2">maximize ∑ T 2T gT f T (SP ILP) subject to ∑ T 2T ∑ v2X π T vsv f T cX, 8X 2 V f T 2 f 0 ; 1 g , 8 T 2 T for given</formula><p>-arbitrary sets T k of Steiner trees for each net N k ;</p><p>-family V of subsets of V such that fvg 2 V for every v 2 S 񮽙S 0 ; -"size" function s : V ! R + such that sv = 1 for every v 2 S 񮽙S 0 ; and -"set-capacity" function c : V ! Z + such that cfvg = 1 for every v 2 S 񮽙S 0 .</p><p>Our two-step approach to the GRBB problem and its extensions is to first solve the fractional relaxations obtained by replacing integrality constraints f T 2 f 0 ; 1 g with f T 0, and then use randomized rounding to get integer solutions. In next section we give an algorithm for approximating the fractional relaxation of the SP ILP. The algorithm relies on a subroutine for finding minimum weight feasible Steiner trees, the details of this subroutine are given in Section 5.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Approximating the SP ILP Relaxation</head><p>The fractional relaxation of the SP ILP can be solved exactly in polynomial time using, e.g., the ellipsoid algorithm. However, exact algorithms are highly impractical. The SP LP can be efficiently approximated within any desired accuracy using Garg and Könemann's approximation scheme for packing LPs <ref type="bibr" target="#b7">[8]</ref>. The main step of their algorithm is computing the minimum weight column of the LP. For the special case of edge-capacitated multicommodity flow LPs, Fleischer <ref type="bibr" target="#b6">[7]</ref> gave a significantly faster algorithm by computing in each step the minimum weight column only among columns corresponding to a single commodity. Below we generalize Fleisher's idea to separable packing LPs by partitioning the columns into groups corresponding to the nets.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">The Algorithm</head><p>Our algorithm simultaneously finds feasible solutions to the SP LP and its dual. The dual LP asks for an assignment of non-negative weights wX to every X 2 V such that the weight of every tree T 2 T is at least 1, where the weight of T is defined by</p><formula xml:id="formula_3">weightT = 1 g T ∑ X 2 V π T X w X and π T X = ∑ v 2 X π T v s v : minimize ∑ X2V wXcX (SP LP Dual) subject to 1 gT ∑ X2V π T X wX 1, 8T 2 T wX 0, 8X 2 V</formula><p>In the following we assume that minfg k : k = 1; : : : ; K g = 1 (this can be easily achieved by scaling) and denote maxfg k : k = 1; : : : ; K g by Γ.</p><p>The algorithm ( <ref type="figure" target="#fig_0">Figure 2</ref>) starts with weights wX = δ for every X 2 V , where δ is an appropriately chosen constant, and with a SP LP solution f 0. While there is a feasible tree whose weight is less than 1, the algorithm selects such a tree T and increments f T by 1. This increase will likely violate the capacity constraints for some of the sets in V ; feasibility is achieved at the end of the algorithm by uniformly scaling down all f T 's. Whenever f T is incremented, the algorithm also updates each weight wX by multiplying it with 1 + επ T X =cX , for a fixed ε.</p><p>According to the Garg and Könemann's approximation algorithm <ref type="bibr" target="#b7">[8]</ref> each iteration must increment the variable f T corresponding to a tree with minimum weight among all trees in T . Finding this tree essentially requires K minimum-weight feasible Steiner tree computations, one for each net N k . We reduce the total number of minimum-weight  feasible Steiner tree computations during the algorithm by extending a speed-up idea due to Fleischer <ref type="bibr" target="#b6">[7]</ref>. Instead of always finding the minimum-weight tree in T , the idea is to settle for trees with weight within a factor of 1 + ε of the minimum. As shown in next section, the faster algorithm still leads to an approximation guarantee similar to that of Garg and Könemann.</p><note type="other">End while End for on k ¯ α 1 + ε ¯ α End for on i For every T</note><formula xml:id="formula_4">2 T , f T f T log 1+ε 1+εΓ δ Output f T , T 2 T</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Runtime and Performance Analysis</head><p>In each iteration the algorithm cycles through all nets. For each net, the algorithm repeatedly computes minimum-weight feasible Steiner tree until the weight becomes larger than 1 + ε times a lower-bound ¯ α on the overall minimum weight, minfweightT :</p><p>T 2 T g. The lower-bound ¯ α is initially set to δ=Γ, and then multiplied by a factor of 1 + ε from one iteration to another (note that no tree in T has weight smaller than 1 + ε ¯ α at the end of an iteration, so 1 + ε ¯ α is a valid lower-bound for the next iteration). The scheme used for updating ¯ α fully determines the number of iterations in the outer loop of the algorithm. Since ¯ α = δ=Γ in the first iteration and at most 1 + ε in the last one, it follows that the number of iterations is  We claim that the number of minimum-weight Steiner trees that lead to variable incrementations is at most K log 1+ε 1+εΓ δ . To see this, note that the weight of the set fs k g 2 V is updated whenever a variable f T , T 2 T k , is incremented. Moreover, wfs k g is last updated when incrementing f T for a tree T 2 T k of weight less than one. Thus, before the last update, wfs k g Γ weightT 񮽙 Γ. Since π T fs k g = c f s k g = 1, the weight of fs k g is multiplied by a factor of 1 + ε in each update, including the last one. This implies that the final value of wfs k g is at most 1 + εΓ. Recalling that wfs k g is initially set to δ, this gives that the number of updates to wfs k g is at most log 1+ε 1+εΓ δ . The lemma follows by summing this upper-bound over all nets.</p><p>We now show that, for an appropriate value of the parameter δ, the algorithm finds a feasible solution close to optimum. Here, L is the maximum number of vertices in a feasible tree, and T tree is the time required to compute the minimum weight feasible Steiner tree for a net.</p><p>Proof. Our proof is an adaptation of the proofs of <ref type="bibr">Garg and Könemann [8]</ref> and Fleischer <ref type="bibr" target="#b6">[7]</ref>. We omit the proof that the solution found by the algorithm is feasible. To establish the approximation guarantee, we show that the solution computed by the algorithm is within a factor of 1=1 + 4ε of the optimum objective value, β, of the dual LP. Let αw be the weight of a minimum weight tree from T with respect to weight function w : V ! R + , and let Dw = ∑ X 2 V w X c X . A standard scaling argument shows that the dual LP is equivalent to finding a weight function w such that Dw=αw is minimum, and that β = min w fDw=αwg.</p><p>For every X 2 V , let w i X be the weight of set X at the end of the ith iteration and w 0 X = δ be the initial weight of set X. Note that, for each fixed i, the right-hand side of last inequality is maximized by setting α j to its maximum possible value, say α 0 j, for every 0 j 񮽙 i. Then, the maximum value of αi is</p><formula xml:id="formula_5">α 0 i = L δ + ε 1 + ε β i , 1 ∑ j = 1 α 0 j , 1 h j ,h j,1 + ε 1 + ε β α 0 i , 1 h i ,h i,1 = α 0 i ,1 1 + ε1 + ε β h i ,h i,1 α 0 i ,1e ε1+ε β h i ,h i,1</formula><p>where the last inequality uses that 1 + x e x for every x 0. Using that α 0 0 = L δ , this gives be the ratio between the optimum dual objective value and the objective value of the SP LP solution produced by the algorithm. By substituting the previous bound on β=h t we obtain γ ε1 + ε log 1+ε 1+εΓ 1 ,εln1+ε ε1 + ε 1 ,εε,ε 2 =2 1 + ε 1 ,ε 2 Here we use the fact that ln1 + ε ε ,ε 2 =2 (by Taylor series expansion of ln1 + ε around the origin). The proof of the approximation guarantee is completed by observing that 1 + ε=1 ,ε 2 1 + 4ε for every ε 񮽙 0:15. The runtime follows by substituting δ in the bound given by Lemma 1.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Computing Minimum-Weight Feasible Steiner Trees</head><p>The key subroutine of the approximation algorithm given in the previous section is to compute, for a fixed k and given weights wX, X 2 V , a feasible tree T 2 T k minimizing Recall that for the GRBB problem and its extensions, T k contains all Steiner trees connecting the source s k with the sinks t 1 k ; : : : ; t q k k such that the number of intermediate vertices on each tree path between s k and t i k has the parity specified by a i k and does not exceed l i k . In this case we can further reduce the problem of finding the tree T 2 T k minimizing w 0 T to the minimum-cost directed rooted Steiner tree (DRST) problem in a directed acyclic graph. Unfortunately, the minimum-cost DRST problem is NP-hard, and the fact that D k is acyclic does not help since there is a simple reduction for this problem from arbitrary directed graphs to acyclic graphs. As far as we know, the best result for the DRST problem, due to Charikar et al. <ref type="bibr" target="#b2">[3]</ref>, gives Olog 2 q k -approximate solutions in quasi-polynomial time On 3 logq k . Note, on the other hand, that the minimum-cost DRST can be found in polynomial time for small nets (e.g., in time On M,1 for nets with at most M sinks, for M = 2; 3; 4); most of the nets in industrial VLSI designs fall into this category <ref type="bibr" target="#b9">[10]</ref>. For nets of small size, Theorem 1 immediately gives: We have implemented both heuristics that use approximate DRSTs instead of optimum DRSTs and heuristics that decompose larger nets into nets with 2-4 pins before applying the algorithm in <ref type="figure" target="#fig_0">Figure 2</ref>; results of experiments comparing these approaches are reported in Section 7.  </p><formula xml:id="formula_6">weightT = 1 g T ∑ X 2 V π T X w X .</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Rounding Fractional SP LP Solutions</head><p>In the previous two sections we presented an algorithm for computing near-optimal solutions to the SP LP. In this section we give two algorithms based on the randomized rounding technique of Raghavan and Thomson <ref type="bibr" target="#b13">[14]</ref> (see also <ref type="bibr" target="#b10">[11]</ref>) for converting these solutions to integer SP ILP solutions.</p><p>The first algorithm is to route net N k with probability equal to f k = ∑ T 2T k f T by picking, for selected nets, one of the trees T 2 T k with probability f T = f k . A drawback of this algorithm is that it requires the explicit representation of trees T 2 T with f T 6 = 0.</p><p>Although the approximate SP LP algorithm produces a polynomial number of trees with non-zero f T , storing all such trees is infeasible for large problem instances. Our second rounding algorithm <ref type="figure" target="#fig_7">(Figure 3</ref>) takes as input the net-and edge-cumulated f T values,</p><formula xml:id="formula_7">f k = ∑ T 2T k f T , respectively f k e = ∑ T 2 T k : e 2 E T f T , thus using only OKjEj space.</formula><p>As the first rounding algorithm, the algorithm in <ref type="figure" target="#fig_7">Figure 3</ref> routes each net N k with a probability of f k = ∑ T 2T k f T . The difference is in how each chosen net is routed: to route net N k , the algorithm performs backward random walks from each sink of N k until reaching either the source of N k or a vertex already connected to the source. The random walks are performed in the directed acyclic graphs used for DRST computation, with probabilities given by the normalized f k e values.</p><p>On the average, the total importance of the nets routed by each of the two algorithm is ∑ K k=1 g k f k = ∑ T 2T gT f T . By Theorem 1, this is within a factor of 1=1 + 4ε of the optimum SP LP solution, which in turn is an upper-bound on the optimum SP ILP solution. Ensuring that no set capacity is exceeded can be accomplished in two ways. One approach is to solve the SP LP with set capacities scaled down by a small factor which guarantees that the rounded solution meets the original capacities with very high probability (see <ref type="bibr" target="#b10">[11]</ref>). A more practical approach, extending the so-called greedy-deletion algorithm in <ref type="bibr" target="#b5">[6]</ref> to multiterminal nets, is to repeatedly drop routed paths passing through over-used sets until feasibility is achieved.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Experimental Results</head><p>We have implemented four greedy algorithms for the GRBB problem; all four greedy algorithms route nets sequentially. For a given net, the algorithms start with a tree containing only the net's source, then iteratively add shortest paths from each sink to the already constructed tree. The only difference is in whether or not net decomposition is used, and in the size of the decomposed nets. The first three algorithms-referred to as 2TG, 3TG, and 4TG, respectively-start by decomposing larger multiterminal nets into 2-, 3-, respectively 4-pin nets. The fourth algorithm, MTG, works on the original (undecomposed) nets.</p><p>We have also implemented four algorithms that approximate the fractional solution to the SP LP corresponding to GRBB problem (which generalizes the node-capacitated multiterminal multicommodity flow problem) and then apply randomized rounding. The first three algorithms (2TMCF, 3TMCF, and 4TMCF) decompose larger nets into 2-, 3-, respectively 4-pin nets then call the algorithm in <ref type="figure" target="#fig_0">Figure 2</ref> with exact DRST computations. The fourth algorithm, MTMCF, works on the original (undecomposed) nets, using shortest-path trees as approximate DRSTs in the SP LP approximation algorithm. <ref type="figure">Figure 4</ref> plots the solution quality versus the CPU time (on a 195MHz SGI Origin 2000) of each implemented algorithm. The test cases used in our experiments were extracted from the next-generation (as of January 2000) microprocessor chip at SGI. The results clearly demonstrate the high quality of solutions obtained by rounding the approximate SP LP solutions. The MTMCF algorithm proves to be the best among all algorithms when the time budget is limited, providing significant improvements over greedy algorithms without undue runtime penalty. However, the best convergence to the optimum is achieved by 4TMCF, which dominates all other algorithms when high time budgets are allowed.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig. 2 .</head><label>2</label><figDesc>Fig. 2. The algorithm for finding approximate solutions to the SP LP.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>.</head><label></label><figDesc>The following lemma gives an upper-bound on the runtime of the algorithm.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Lemma 1 .</head><label>1</label><figDesc>Overall, the algorithm in Figure 2 requires O K log 1+ε 1+εΓ δ minimum- weight feasible Steiner tree computations. Proof. First, note that the number of minimum-weight feasible Steiner tree computa- tions that do not contribute to the final fractional solution is K j log 1+ε 1+εΓ δ k . Indeed, in each iteration, and for each net N k , there is exactly one minimum-weight feasible Steiner tree computation revealing that min T 2T k weightT 1 + ε ¯ α, all other compu- tations trigger the incrementation of some f T .</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Theorem 1 .</head><label>1</label><figDesc>For every ε 񮽙 0:15, the algorithm in Figure 2 computes a feasible solution to the SP LP within a factor of 1=1 + 4ε of optimum by choosing δ = 1 + ε Γ 1 + εLΓ , 1 ε ; the runtime of the algorithm for this value of δ is O 1 ε 2 Klog L + logΓT tree .</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head></head><label></label><figDesc>δ lnLδ ,1 = ε1 + ε ln 1+εΓ δ ln1 + ε lnLδ ,1 For δ = 1 + ε Γ 1 + εLΓ , 1 ε , ln 1+εΓ δ lnLδ ,1 = ln 1 + εLΓ 1 ε ln 1+εLΓ ,1+ 1 ε = 1 ε ln 1 + εLΓ 1,ε ε ln 1 + εLΓ = 1 1 ,ε and thus γ ε1 + ε</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head></head><label></label><figDesc>Define a weight function w 0 on the vertices of the routing graph G = V ; E by setting w 0 v = 1 g T ∑ v 2 X 2 V w X , and let w 0 T = ∑ v 2 V T w 0 v be the total vertex weight w.r.t. w 0 of T . Then weightT = w 0 T , and the problem reduces to finding a tree T 2 T k with minimum total vertex weight w.r.t. w 0 .</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Corollary 1 .</head><label>1</label><figDesc>If the maximum net size is M 4, the algorithm in Figure 2 finds, for every ε 񮽙 0:15, a feasible solution to the SP LP within a factor of 1=1 + 4ε of optimum in time O 1 ε 2 Kn M,1 log n + logΓ .</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Fig. 3 .</head><label>3</label><figDesc>Fig. 3. The random walk based rounding algorithm.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0" validated="false"><head>Throughout this paper we let N k = s k ; t 1 k ; : : : ; t q k k , k = 1 ; : : : ; K , denote the nets to be routed; s k is the source, and t 1 k ; : : : ; t q k k are the sinks of net N k . We denote by g k 1 the importance (criticality) coefficient of net N k , and by a i k 2 f even, oddg and l i k 0 the pre- scribed parity, respectively upper bound, on the number of buffers on the path between source s k and sink t i k . We also let S = fs 1 ; : : : ; s K g and S 0</head><label>this</label><figDesc></figDesc><table>= ft 1 

1 ; : : : ; t 

q 1 

1 ; : : : ; t 1 
K ; : : : ; t 

q K 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1" validated="false"><head>Input : Nets N 1 ; : : : ; N K , coefficients g 1 ; : : : ; g K , routing graph G = V ; E , family V of subsets of V , capacities cX, X 2 V , and weights sv, v 2V Output: SP LP solution f T , T 2 T For every T 2 T , f T 0 For every X 2 V , wX δ ¯ α δ=Γ For i = 1 to t == 1 to K do Find a minimum weight feasible Steiner tree T in T k While weightT 񮽙 minf1; 1 + ε ¯ αg do f T f T + 1 For all X 2 V , wX wX1 + επ T X =cX Find a minimum weight feasible Steiner tree T in T k</head><label>Input</label><figDesc></figDesc><table>j 
log 1+ε 

1+εΓ 

δ 

k 
do 
For k </table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2" validated="false"><head>For brevity, we will denote αw i and Dw i by αi and Di, respectively. Furthermore, let f i T be the value of f T at the end of ith iteration, and h i = ∑ T 2T gT f i T be the objective value of the SP LP at the end of this iteration. When the algorithm increments f T by one unit, each weight wX is increased by επ T X wX =cX . Thus, the incrementation of f T increases Dw by ε ∑ X2V π T X wX = ε weightT gT If this update takes place in the ith iteration, then weightT 1 + εαi ,1. Adding this over all f T 's incremented in ith iteration gives Di ,Di,1 ε1 + εαi ,1h i ,h i,1 which implies that Di ,D0 ε1 + ε i ∑ j=1 α j ,1h j ,h j,1 Consider the weight function w i ,w 0 , and notice that Dw i ,w 0 = D i , D 0 . Since the minimum weight tree w.r.t. weight function w i ,w 0 has a weight of at most αw i , w 0 + L δ w.r.t. w i , αi αw i ,w 0 + L δ . Hence, if αi ,Lδ 񮽙 0, then β Dw i ,w 0 αw i ,w 0 Di ,D0 αi ,Lδ ε1 + ε ∑ i j=1 α j ,1h j ,h j,1 αi ,Lδ Thus, in any case (when αi ,Lδ 0 this follows trivially) we have αi Lδ + ε1 + ε β i ∑ j=1 α j ,1h j ,h j,1</head><label></label><figDesc></figDesc><table></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3" validated="false"><head>αi Lδe ε1+ε β h i Let t be the last iteration of the algorithm.</head><label></label><figDesc></figDesc><table>Since αt 1, 
1 Lδe 

ε1+ε 
β 

h t 

and thus 
β 

h t 

ε1 + ε 

lnLδ ,1 

Let γ = β 

h t 

log 1+ε 

1+εΓ 

δ 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_4" validated="false"><head>Input : Net-and edge-cumulated f T values, f k = ∑ T 2T k f T and f k e = ∑ T 2 T k : e 2 E T f T , k = 1 ; : : : ; K , e 2 E D k Output: Routed trees T k 2 T k For each k = 1; : : : ; K , select net N k with probability f k Route each selected net N k as follows: T k f s k g For each sink t i k in N k do P / 0; v t i k While v = 2 T k do Pick arc u; v with probability f k u;v ∑w;v2E f k w;v P P 񮽙 f u ; v g ;v u End while T k T k 񮽙P</head><label>Input</label><figDesc></figDesc><table>End for 

</table></figure>
		</body>
		<back>
			<div type="annex">
			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Provably good global routing by a new approximation algorithm for multicommodity flow</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Albrecht</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. ISPD</title>
		<meeting>ISPD</meeting>
		<imprint>
			<date type="published" when="2000" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">A global router using an efficient approximate multicommodity multiterminal flow algorithm</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">C</forename><surname>Carden</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C.-K</forename><surname>Cheng</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. DAC</title>
		<meeting>DAC</meeting>
		<imprint>
			<date type="published" when="1991" />
			<biblScope unit="page" from="316" to="321" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Approximation algorithms for directed Steiner problems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Charikar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Chekuri</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Cheung</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Dai</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Goel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Cheung</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Algorithms</title>
		<imprint>
			<biblScope unit="volume">33</biblScope>
			<biblScope unit="page" from="73" to="91" />
			<date type="published" when="1999" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Performance optimization of VLSI interconnect layout</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Cong</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>He</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C.-K</forename><surname>Koh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">H</forename><surname>Madden</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Integration</title>
		<imprint>
			<biblScope unit="volume">21</biblScope>
			<biblScope unit="page" from="1" to="94" />
			<date type="published" when="1996" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Buffer block planning for interconnect-driven floorplanning</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Cong</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Kong</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">Z</forename><surname>Pan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. ICCAD</title>
		<meeting>ICCAD</meeting>
		<imprint>
			<date type="published" when="1999" />
			<biblScope unit="page" from="358" to="363" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Provably good global buffering using an available buffer block plan</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><forename type="middle">F</forename><surname>Dragan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">B</forename><surname>Kahng</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><forename type="middle">I</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Muddu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Zelikovsky</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. ICCAD</title>
		<meeting>ICCAD</meeting>
		<imprint>
			<date type="published" when="2000" />
			<biblScope unit="page" from="104" to="109" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Approximating fractional multicommodity flow independent of the number of commodities</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><forename type="middle">K</forename><surname>Fleischer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 40th Annual Symposium on Foundations of Computer Science</title>
		<meeting>40th Annual Symposium on Foundations of Computer Science</meeting>
		<imprint>
			<date type="published" when="1999" />
			<biblScope unit="page" from="24" to="31" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Faster and simpler algorithms for multicommodity flow and other fractional packing problems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Garg</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Könemann</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 39th Annual Symposium on Foundations of Computer Science</title>
		<meeting>39th Annual Symposium on Foundations of Computer Science</meeting>
		<imprint>
			<date type="published" when="1998" />
			<biblScope unit="page" from="300" to="309" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">An efficient timing-driven global routing algorithm</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Huang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X.-L</forename><surname>Hong</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C.-K</forename><surname>Cheng</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">S</forename><surname>Kuh</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. DAC</title>
		<meeting>DAC</meeting>
		<imprint>
			<date type="published" when="1993" />
			<biblScope unit="page" from="596" to="600" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title level="m" type="main">On Optimal Interconnections for VLSI</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">B</forename><surname>Kahng</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Robins</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1995" />
			<publisher>Kluwer Academic Publishers</publisher>
			<pubPlace>Norwell, Massachusetts</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Randomized approximation algorithms in combinatorial optimization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Motwani</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Naor</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Raghavan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Approximation algorithms for NP-hard problems</title>
		<editor>D. Hochbaum</editor>
		<meeting><address><addrLine>Boston, MA</addrLine></address></meeting>
		<imprint>
			<publisher>PWS Publishing</publisher>
			<date type="published" when="1997" />
			<biblScope unit="page" from="144" to="191" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Experimental results for a linear program global router</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">P</forename><surname>Ng</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Raghavan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">D</forename><surname>Thomson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computers and Artificial Intelligence</title>
		<imprint>
			<biblScope unit="volume">6</biblScope>
			<biblScope unit="page" from="229" to="242" />
			<date type="published" when="1987" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">The network inhibition problem</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">A</forename><surname>Phillips</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 25th Annual ACM Symposium on Theory of Computing</title>
		<meeting>25th Annual ACM Symposium on Theory of Computing</meeting>
		<imprint>
			<date type="published" when="1993" />
			<biblScope unit="page" from="776" to="785" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Randomized rounding</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Raghavan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">D</forename><surname>Thomson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Combinatorica</title>
		<imprint>
			<biblScope unit="volume">7</biblScope>
			<biblScope unit="page" from="365" to="374" />
			<date type="published" when="1987" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Multiterminal Global Routing: A Deterministic Approximation Scheme</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Raghavan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">D</forename><surname>Thomson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Algorithmica</title>
		<imprint>
			<biblScope unit="volume">6</biblScope>
			<biblScope unit="page" from="73" to="82" />
			<date type="published" when="1991" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<title level="m" type="main">A global router based on a multicommodity flow model</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Shragowitz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Keel</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1987" />
			<biblScope unit="volume">5</biblScope>
			<biblScope unit="page" from="3" to="16" />
		</imprint>
	</monogr>
	<note>Integration</note>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Planning buffer locations by network flows</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Tang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">F</forename><surname>Wong</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. ISPD</title>
		<meeting>ISPD</meeting>
		<imprint>
			<date type="published" when="2000" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
