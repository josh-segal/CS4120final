<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2019-03-26T16:32+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">History-Independent Cuckoo Hashing</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Moni</forename><surname>Naor</surname></persName>
							<email>moni.naor@weizmann.ac.il.</email>
							<affiliation key="aff0">
								<orgName type="department" key="dep1">Incumbent</orgName>
								<orgName type="department" key="dep2">Department of Computer Science and Applied Mathematics</orgName>
								<orgName type="institution" key="instit1">Judith Kleeman Professorial Chair</orgName>
								<orgName type="institution" key="instit2">Weizmann Institute of Science</orgName>
								<address>
									<postCode>76100</postCode>
									<settlement>Rehovot</settlement>
									<country key="IL">Israel</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gil</forename><surname>Segev</surname></persName>
							<email>gil.segev@weizmann.ac.il.</email>
							<affiliation key="aff1">
								<orgName type="department">Department of Computer Science and Applied Mathematics</orgName>
								<orgName type="institution">Weizmann Institute of Science</orgName>
								<address>
									<postCode>76100</postCode>
									<settlement>Rehovot</settlement>
									<country key="IL">Israel</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Udi</forename><surname>Wieder</surname></persName>
							<email>uwieder@microsoft.com.</email>
							<affiliation key="aff2">
								<orgName type="laboratory">Microsoft Research, Silicon Valley Campus</orgName>
								<address>
									<addrLine>1065 La Avenida, Mountain View</addrLine>
									<postCode>94043</postCode>
									<region>CA</region>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">History-Independent Cuckoo Hashing</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<note>Research supported in part by a grant from the Israel Science Foundation. ‡ Most of the work was done at Microsoft Research, Silicon Valley Campus.</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Cuckoo hashing is an efficient and practical dynamic dictionary. It provides expected amor-tized constant update time, worst case constant lookup time, and good memory utilization. Various experiments demonstrated that cuckoo hashing is highly suitable for modern computer architectures and distributed settings, and offers significant improvements compared to other schemes. In this work we construct a practical history-independent dynamic dictionary based on cuckoo hashing. In a history-independent data structure, the memory representation at any point in time yields no information on the specific sequence of insertions and deletions that led to its current content, other than the content itself. Such a property is significant when preventing unintended leakage of information, and was also found useful in several algorithmic settings. Our construction enjoys most of the attractive properties of cuckoo hashing. In particular, no dynamic memory allocation is required, updates are performed in expected amortized constant time, and membership queries are performed in worst case constant time. Moreover, with high probability, the lookup procedure queries only two memory entries which are independent and can be queried in parallel. The approach underlying our construction is to enforce a canonical memory representation on cuckoo hashing. That is, up to the initial randomness, each set of elements has a unique memory representation.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Over the past decade an additional aspect in the design of data structures has emerged due to security and privacy considerations: a data structure may give away much more information than it was intended to. Computer folklore is rich with tales of such cases, for example, files containing information whose creators assumed had been erased, only to be revealed later in embarrassing circumstances <ref type="bibr" target="#b0">1</ref> .</p><p>When designing a data structure whose internal representation may be revealed, a highly desirable goal is to ensure that an adversary will not be able to infer information that is not available through the legitimate interface. Informally, a data structure is history independent if its memory representation does not reveal any information about the sequence of operations that led to its current content, other than the content itself.</p><p>In this paper we design a practical history-independent data structure. We focus on the dictionary data structure, which is used for maintaining a set under insertions and deletions of elements, while supporting membership queries. Our construction is inspired by the highly practical cuckoo hashing, introduced by Pagh and Rudler <ref type="bibr" target="#b24">[25]</ref>, and guarantees history independence while enjoying most of the attractive features of cuckoo hashing. In what follows we briefly discuss the notion of history independence and several of its applications, and the main properties of cuckoo hashing.</p><p>Notions of history independence. Naor and Teague <ref type="bibr" target="#b22">[23]</ref>, following <ref type="bibr">Micciancio [18]</ref>, formalized two notions of history independence: a data structure is weakly history independent if any two sequences of operations that lead to the same content induce the same distribution on the memory representation. This notion assumes that the adversary gaining control is a one-time event, but in fact, in many realistic scenarios the adversary may obtain the memory representation at several points in time. A data structure is strongly history independent if for any two sequences of operations, the distributions of the memory representation at all time-points that yield the same content are identical. Our constructions in this paper are strongly history independent. An alternative characterization of strong history independence was provided by Hartline et al. <ref type="bibr" target="#b13">[14]</ref>. Roughly speaking, they showed that strong history independence is equivalent to having a canonical representation up to the choice of initial randomness. More formal definitions of the two notions are provided in Section 2.</p><p>Applications of history-independent data structures. History independent data structures were naturally introduced in a cryptographic setting. Micciancio showed that oblivious trees 2 can be used to guarantee privacy in the incremental signature scheme of Bellare, Goldreich and Goldwasser <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b2">3]</ref>. An incremental signature scheme is private if the signatures it outputs do not give any information on the sequence of edit operations that have been applied to produce the final document.</p><p>An additional cryptographic application includes, for example, designing vote storage mechanisms (see <ref type="bibr" target="#b3">[4,</ref><ref type="bibr" target="#b20">21,</ref><ref type="bibr" target="#b21">22]</ref>). As the order in which votes are cast is public, a vote storage mechanism must be history independent in order to guarantee the privacy of the election process.</p><p>History independent data structures are valuable beyond the cryptographic setting as well. Consider, for example, the task of reconciling two dynamic sets. We consider two parties each of which receives a sequence of insert and delete operations, and their goal is to determine the elements in the symmetric difference between their sets. Now, suppose that each party processes its sequence of operations using a data structure in which each set of elements has a canonical representation. Moreover, suppose that the update operations are efficient and change only a very small fraction of the memory representation. In such a case, if the size of the symmetric difference is rather small, the memory representations of the data structures will be rather close, and this can enable an efficient reconciliation algorithm.</p><p>Cuckoo hashing. Pagh and Rudler <ref type="bibr" target="#b24">[25]</ref> constructed an efficient hashing scheme, referred to as cuckoo hashing. It provides worst case constant lookup time, expected amortized constant update time, and uses roughly 2n words for storing n elements. Additional attractive features of cuckoo hashing are that no dynamic memory allocation is performed (except for when the tables have to be resized), and the lookup procedure queries only two memory entries which are independent and can be queried in parallel. These properties offer significant improvements compared to other hashing schemes, and experiments have shown that cuckoo hashing and its variants are highly suitable for modern computer architectures and distributed settings. Cuckoo hashing was found competitive with the best known dictionaries having an average case (but no non-trivial worst case) guarantee on lookup time (see, for example, <ref type="bibr">[10,</ref><ref type="bibr" target="#b24">25,</ref><ref type="bibr" target="#b26">27,</ref><ref type="bibr" target="#b28">29]</ref>).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.1">Related Work</head><p>Micciancio <ref type="bibr" target="#b17">[18]</ref> formalized the problem of designing oblivious data structures. He considered a rather weak notion of history independence, and devised a variant of 2-3 trees whose shape does not leak information. This notion was strengthened by Naor and Teague <ref type="bibr" target="#b22">[23]</ref> to consider data structures whose memory representation does not leak information. Their main contributions are two history-independent data structures. The first is strongly history independent, and supports only insertions and membership queries which are performed in expected amortized constant time. Roughly speaking, the data structure includes a logarithmic number of pair-wise independent hash functions, which determine a probe sequence for each element. Whenever a new element is inserted and the next entry in its probe sequence is already occupied, a "priority function" is used to determine which element will be stored in this entry and which element will be moved to the next entry in its probe sequence. The second data structure is a weakly history-independent data structure supporting insertions, deletions and membership queries. Insertions and deletions are performed in expected amortized constant time, and membership queries in worst case constant time. Roughly speaking, this data structure is a history independent variant of the perfect hash table of Fredman, <ref type="bibr">Komlós and Szemerédi [12]</ref> and its dynamic extension due to Dietzfelbinger et al. <ref type="bibr" target="#b6">[7]</ref>.</p><p>Buchbinder and Petrank <ref type="bibr" target="#b5">[6]</ref> provided a separation between the two notions of history independence for comparison based algorithms. They established lower bounds for obtaining strong history independence for a large class of data structures, including the heap and the queue data structures. They also demonstrated that the heap and queue data structures can be made weakly history independent without incurring any additional (asymptotic) cost.</p><p>Blelloch and Golovin <ref type="bibr" target="#b4">[5]</ref> constructed two strongly history-independent data structures based on linear probing. Their first construction supports insertions, deletions and membership queries in expected constant time. This essentially extends the construction of Naor and Teague <ref type="bibr" target="#b22">[23]</ref> that did not support deletions. While the running time in the worst case may be large, the expected update time and lookup time is tied to that of linear probing and thus is O(1/(1 − α) 3 ) where α is the memory utilization of the data structure (i.e., the ratio between the number of items and the number of slots). Their second construction supports membership queries in worst case constant time while maintaining an expected constant time bound on insertions and deletions. However, the memory utilization of their second construction is only about 9%. In addition, it deploys a two-level encoding, which may involve hidden constant factors that affect the practicality of the scheme. Furthermore, the worst case guarantees rely on an exponential amount of randomness and serves as a basis for a different hash table with more relaxed guarantees. The goal of our work is to design a hash table with better memory utilization and smaller hidden constants in the running time, even in the worst case.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.2">Our Contributions</head><p>We construct an efficient and practical history-independent data structure that supports insertions, deletions, and membership queries. Our construction is based on cuckoo hashing, and shares most of its properties. Our construction provides the following performance guarantees (where the probability is taken only over the randomness used during the initialization phase of the data structure):</p><p>1. Insertions and deletions are performed in expected amortized constant time. Moreover, with high probability, insertion and deletions are performed in time O(log n) in the worst case.</p><p>2. Membership queries are performed in worst case constant time. Moveover, with high probability, the lookup procedure queries only two memory entries which are independent and can be queried in parallel.</p><p>3. The memory utilization of the data structure is roughly 50% when supporting only insertions and membership queries. When supporting deletions the data structure allocates an additional pointer for each entry. Thus, the memory utilization in this case is roughly 25%, under the conservative assumption that the size of a pointer is not larger than that of a key.</p><p>We obtain the same bounds as the second construction of Blelloch and Golovin <ref type="bibr" target="#b4">[5]</ref> (see Section 1.1). The main advantages of our construction are its simplicity and practicality: membership queries would mostly require only two independent memory probes, and updates are performed in a way which is almost similar to cuckoo hashing and thus is very fast. A major advantage of our scheme is that it does not use rehashing. Rehashing is a mechanism for dealing with a badly behaved hash function by choosing a new one; using such a strategy in a strongly history-independent environment causes many problems (see below). Furthermore, our data structure enjoys a better memory utilization, even when supporting deletions. We expect that in any practical scenario, whenever cuckoo hashing is preferred over linear probing, our construction should be preferred over those of Blelloch and Golovin.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.3">Overview of the Construction</head><p>In order to describe our construction we first provide a high-level overview of cuckoo hashing. Then, we discuss our approach in constructing history-independent data structures based on the underlying properties of cuckoo hashing.</p><p>Cuckoo hashing. Cuckoo hashing uses two tables T 0 and T 1 , each consisting of r ≥ (1 + )n words for some constant &gt; 0, and two hash functions h 0 , h 1 : U → {0, . . . , r − 1}. An element x ∈ U is stored either in entry h 0 (x) of table T 0 or in entry h 1 (x) of table T 1 , but never in both. The lookup procedure is straightforward: when given an element x ∈ U, query the two possible memory entries in which x may be stored. The deletion procedure deletes x from the entry in which it is stored. As for insertions, <ref type="bibr">Pagh and Rudler [25]</ref> demonstrated that the "cuckoo approach", kicking other elements away until every element has its own "nest", leads to a highly efficient insertion procedure when the functions h 0 and h 1 are assumed to sample an element in <ref type="bibr">[r]</ref> uniformly and independently. More specifically, in order to insert an element x ∈ U we first query entry T 0 [h 0 (x)]. If this entry is not occupied, we store x in that entry. Otherwise, we store x at that entry anyway, thus making the previous occupant "nestless". This element is then inserted to T 1 in the same manner, and so forth iteratively. We refer the reader to <ref type="bibr" target="#b24">[25]</ref> for a more comprehensive description of cuckoo hashing.</p><p>Our approach. Cuckoo hashing is not history independent. The table in which an element is stored depends upon the elements inserted previously. Our approach is to enforce a canonical memory representation on cuckoo hashing. That is, up to the initial choice of the two hash functions, each set of elements has only one possible representation. As in cuckoo hashing, our construction uses two hash tables T 0 and T 1 , each consisting of r ≥ (1 + )n entries for some constant &gt; 0, and two hash functions h 0 , h 1 : U → {0, . . . , r − 1}. An element x ∈ U is stored either in cell h 0 (x) of table T 0 or in cell h 1 (x) of table T 1 . Definition 1.1. Given a set S ⊆ U and two hash functions h 0 and h 1 , the cuckoo graph is the bipartite graph G = (L, R, E) where L = R = {0, . . . , r − 1}, and</p><formula xml:id="formula_0">E = {(h 0 (x), h 1 (x)) : x ∈ S}.</formula><p>The cuckoo graph plays a central role in our analysis. It is easy to see that a set S can be successfully stored using the hash functions h 0 and h 1 if and only if no connected component in G has more edges then nodes. In other words, every component contains at most one cycle (i.e., unicyclic). The analysis of the insertion and deletion procedures are based on bounds on the size of a connected component. The following lemma is well known in random graph theory (see, for example, [15, Section 5.2]): Lemma 1.2. Assume r ≥ (1+)n and the two hash functions are truly random. Let v be some node and denote by C the connected component of v. Then there exists some constant β = β() ∈ (0, 1) such that for any integer k &gt; 0 it holds that Pr[|C| &gt; k] ≤ β k .</p><p>In particular, Lemma 1.2 implies that the expected size of each component is constant, and with high probability it is O(log n), a fact which lies at the heart of the efficiency analysis.</p><p>In order to describe the canonical representation that our construction enforces it is sufficient to describe the canonical representation of each connected component in the graph. Let C be a connected component, and denote by S be the set of elements that are mapped to C. In case C is acyclic, we enforce the following canonical representation: the minimal element in S (according to some fixed ordering of U) is stored in both tables, and this yields only one possible way of storing the remaining elements. In case C is unicyclic, we enforce the following canonical representation: the minimal element on the cycle is stored in table T 0 , and this yields only one possible way of storing the remaining elements. The most challenging aspect of our work is dealing with the unlikely event in which a connected component contains more than one cycle.</p><p>Rehashing and history independence. It is known <ref type="bibr" target="#b16">[17]</ref> that even if h 0 and h 1 are completely random functions, with probability Ω(1/n) there will be a connected component with more than one cycle. In this case the given set cannot be stored using h 0 and h 1 . The standard solution for this scenario is to choose new functions and rehash the entire data. In the setting of strongly history-independent data structures, however, rehashing is particular problematic and affects the practical performance of the data structure. Consider, for example, a scenario in which a set is stored using h 0 and h 1 , but when inserting an additional element x it is required to choose new hash functions h 0 and h 1 , and rehash the entire data. If the new element x is now deleted, then in order to maintain history independence we must "roll back" to the previous hash functions h 0 and h 1 , and once again rehash the entire data. This has two undesirable properties: First, when rehashing we cannot erase the description of any previous pair of hash functions, as we may be forced to roll back to this pair later on. When dealing with strongly history-independent data structures, a canonical representation for each set of elements must be determined at the initialization phase of the data structure. Therefore, all the hash functions must be chosen in advance, and this may lead to a high storage overhead (as is the case in <ref type="bibr" target="#b4">[5]</ref>). Secondly, if an element that causes a rehash is inserted and deleted multiple times, each time an entire rehash must be performed.</p><p>Avoiding rehashing by stashing elements. Kirsch et al. <ref type="bibr" target="#b15">[16]</ref> suggested a practical augmentation to cuckoo hashing in order to avoid rehashing: exploiting a secondary data structure for storing elements that create cycles, starting from the second cycle of each component. That is, whenever an element is inserted to a unicyclic component and creates an additional cycle in this component, the element is stashed in the secondary data structure. In our case, the choice of the stashed element must be history independent in order to guarantee that the whole data structure is history independent. Kirsch et al. prove the following bound on the number of stashed elements in the secondary data structure: Lemma 1.3. Assume r ≥ (1 + )n and the two hash functions are truly random. The probability that the secondary data structure has more than s elements is O(r −s ).</p><p>The secondary data structure in our construction can be any strongly history-independent data structure (such as a sorted list). This approach essentially reduces the task of storing n elements in a history-independent manner to that of storing only a few elements in a history-independent manner. In addition, it enables us to avoid rehashing and to increase the practicality of our scheme.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.4">Paper Organization</head><p>The remainder of this paper is organized as follows. In Section 2 we overview the notion of history independence. In Section 3 we describe our data structure. In Section 4 we propose several possible instantiations for the secondary data structure used in our construction. In Section 5 we analyze the efficiency of our construction, and in Section 6 we provide several concluding remarks. Appendix A provides a formal proof of history independence.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Preliminaries</head><p>In this section we formally define the notions of weak and strong history independence. Our presentation mostly follows that of Naor and Teague <ref type="bibr" target="#b22">[23]</ref>. A data structure is defined by a list of operations. We say that two sequences of operations, S 1 and S 2 , yield the same content if for all suffixes T , the results returned by T when the prefix is S 1 are identical to those returned by T when the prefix is S 2 .</p><p>Definition 2.1 (Weak History Independence). A data structure implementation is weakly history independent if any two sequences of operations that yield the same content induce the same distribution on the memory representation.</p><p>We consider a stronger notion of history independence that deals with cases in which an adversary may obtain the memory representation at several points in time. In this case it is required that for any two sequences of operations, the distributions of the memory representation at all time-points that yield the same content are identical.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Definition 2.2 (Strong History Independence). Let S 1 and S 2 be sequences of operations, and let</head><formula xml:id="formula_1">P 1 = {i 1 1 , . . . , i 1 } and P 2 = {i 2 1 , . . . , i 2 } be two lists such that for all b ∈ {1, 2} and 1 ≤ j ≤ it holds that 1 ≤ i b j ≤ |S b |</formula><p>, and the content of the data structure following the i 1 j prefix of S 1 and the i 2 j prefix of S 2 are identical. A data structure implementation is strongly history independent if for any such sequences the distributions of the memory representation at the points of P 1 and at the corresponding points of P 2 are identical.</p><p>Note that Definition 2.2 implies, in particular, that any data structure in which the memory representation of each state is fully determined given the randomness used during the initialization phase is strongly history independent. Our construction in this paper enjoys such a canonical representation, and hence is strongly history independent.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">The Data Structure</head><p>Our data structure uses two tables T 0 and T 1 , and a secondary data structure. Each table consists of r ≥ (1 + )n entries for some constant &gt; 0. In the insert-only variant each entry stores at most one element. In the variant which supports deletions each entry stores at most one element and a pointer to another element. The secondary data structure can be chosen to be any strongly historyindependent data structure (we refer the reader to Section 4 for several possible instantiations of the secondary data structure).</p><p>Elements are inserted into the data structure using two hash functions h 0 , h 1 : U → {0, . . . , r − 1}, which are independently chosen at the initialization phase. An element x ∈ U can be stored in three possible locations: entry h 0 (x) of table T 0 , entry h 1 (x) of table T 1 , or stashed in the secondary data structure. The lookup procedure is straightforward: when given an element x ∈ U, query the two tables and perform a lookup in the secondary data structure.</p><p>In the remainder of this section we first describe the canonical representation of the data structure and some of its useful properties. Then, we describe the insertion and deletion procedures.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">The Canonical Representation</head><p>As mentioned in Section 1.3, it is sufficient to consider a single connected component in the cuckoo graph. Let C be a connected component, and denote by S the set of elements that are mapped to C. When describing the canonical representation we distinguish between the following cases:</p><p>• C is a tree. In this case the minimal element in S is stored in both tables, and this yields only one possible way of storing the remaining elements.</p><p>• C is unicyclic. In this case the minimal element on the cycle is stored in table T 0 , and this yields only one possible way of storing the remaining elements.</p><p>• C contains at least two cycles. In this case we iteratively put in the secondary data structure the largest element that lies in a cycle, until C contains only one cycle. The elements which remain in the component are arranged according to the previous item. We note that this case is rather unlikely, and occurs with only a polynomially small probability.</p><p>• When supporting deletions each table entry includes additional space for one pointer. These pointers form a cyclic sorted list of the elements of the component (not including stashed elements). When deletions are not supported, there is no need to allocate or maintain the additional pointers.</p><p>Orientating the edges. When describing the insertion and deletion procedures it will be convenient to consider the cuckoo graph as a directed graph. Given an element x, we orient the edge so that x is stored at its tail. In other words, if x is stored in table T b for some b ∈ {0, 1}, we orient its corresponding edge in the graph from</p><formula xml:id="formula_2">T b [h b (x)] to T 1−b [h 1−b (x)</formula><p>]. An exception is made for the minimal element of an acyclic component, since such an element is stored in both tables.</p><p>In such a case we orient the corresponding edge in both directions. The following claims state straightforward properties of the directed graph.</p><p>Claim 3.1. Let x 1 → · · · → x k be any directed path. Then, given the element x 1 it is possible to retrieve all the elements on this path using k probes to memory. Furthermore, if x min is a minimal element in an acyclic component C, then for any element x stored in C there exists a directed path from x to x min .</p><p>Proof. For every 1 ≤ i ≤ k denote by T b i the table in which x i is stored. Given x 1 , the definition of the graph and the orientation of its edges imply that x 2 is stored in entry</p><formula xml:id="formula_3">T 1−b 1 [h 1−b 1 (x 1 )].</formula><p>We continue similarly and retrieve in increasing order each x i+1 which is stored in entry</p><formula xml:id="formula_4">T 1−b i [h 1−b i (x i )].</formula><p>For the second part note that if C is acyclic then by the first property of the canonical representation it must be a tree rooted at the minimal element. Proof. Note that the orientation of the edges guarantees that the cycle is oriented in a consistent manner. That is, the cycle is of the form y 1 → · · · → y k → y 1 . Therefore if x is on the cycle, then the claim follows. Now assume that x is not on the cycle. Let x = x 1 and denote by T b 1 the table in which x 1 is stored. Denote by x 2 the element stored in entry</p><formula xml:id="formula_5">T 1−b 1 [h 1−b 1 (x 1 )].</formula><p>Note that x 2 = x 1 since x 1 is not on the cycle. If x 2 is on the cycle, then we are done. Otherwise we continue similarly, and for every i we denote by x i+1 the element stored in entry</p><formula xml:id="formula_6">T 1−b i [h 1−b i (x i )].</formula><p>Since the component is unicycle, as long as x i is not on the cycle then x i+1 / ∈ {x 1 , . . . , x i }. Therefore we are guaranteed to reach the cycle at some point.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">The Insertion Procedure</head><p>Given an element to insert x, the goal of the insertion procedure is to insert x while maintaining the canonical representation. Note that one only has to consider the representation of the connected component of the cuckoo graph in which x resides. Furthermore, Lemma 1.2 implies that the size of the component is O(1) on expectation, thus an algorithm which is linear in the size of the component would have a constant expected running time. In the following we show that the canonical memory representation could be preserved without using the additional pointers. The additional pointers are only needed for supporting deletions. If the additional pointers are maintained, then once the element is inserted the pointers need to be updated so that the element is in its proper position in the cyclic linked list. This could be done in a straightforward manner in time linear in the size of the component.</p><p>Given an element x ∈ U there are four possible cases to consider. The first and simplest case is when both T 0 [h 0 (x)] and T 1 [h 1 (x)] are unoccupied, and we store x in both entries. The second and third cases are when one of the entries is occupied and the other is not occupied. In these cases x does not create a new cycle in the graph. Thus, unless x is the new minimal element in an acyclic component it is simply put in the empty slot. If x indeed is the new minimal element in an acyclic component, it is put in both tables and the appropriate elements are pushed to their alternative location, effectively removing the previous minimum element from one of the tables. The fourth case, in which both entries are occupied involves slightly more details, but is otherwise straightforward. In this case x either merges two connected components, or creates a new cycle in a component. The latter case may also trigger the low probability event of stashing an element in the secondary data structure.</p><p>In the following we provide a full description of the four cases. One can readily verify that the procedure preserves the canonical representation invariant. For the convenience of the reader we also supply a detailed explanation in Appendix A.1. Denote by x 1 the element stored in T 0 [h 0 (x)], and denote by C its connected component. We begin by identifying whether C is acyclic or unicyclic. We follow the directed path starting at x 1 (as in Claim 3.1) either until we reach an element that appears twice (see Claim 3.1), or until we detect a cycle (see Claim 3.2). The canonical representation guarantees that in the first case the component is acyclic (and we denote by x min the element that appears twice), and in the second case the component is unicyclic. There are three possible subcases to consider:</p><p>1. C is acyclic and x &gt; x min . In this case x min is the still the minimal element of the component, so we store</p><formula xml:id="formula_7">x in T 1 [h 1 (x)].</formula><p>2. C is acyclic and x &lt; x min . In this case x is the new minimal element of the component so it should be stored in both T 0 [h 0 (x)] and T 1 [h 1 (x)]. In addition, all the elements along the path connecting x 1 and x min are moved to their other possible location.</p><p>More formally, we first store x in T 1 [h 1 (x)], and denote by x → x 1 → · · · → x k → x min → x min the directed path connecting x to x min (note that it is possible that x 1 = x min ). For every 1 ≤ i ≤ k we move x i to its other possible location (this deletes the first appearance of x min on this path). That is, if</p><formula xml:id="formula_8">x i is stored in T b [h b (x i )] we move it to T 1−b [h 1−b (x i )]. Finally, we store x in T 0 [h 0 (x)].</formula><p>3. C is unicyclic. In this case x does not lie on a cycle so we can safely store</p><formula xml:id="formula_9">x in T 1 [h 1 (x)]. Case 3: T 0 [h 0 (x)] = ⊥ and T 1 [h 1 (x)] = ⊥.</formula><p>This case is analogous to Case (2).</p><formula xml:id="formula_10">Case 4: T 0 [h 0 (x)] = ⊥ and T 1 [h 1 (x)] = ⊥.</formula><p>In this case, x either merges two connected components (each of which may be acyclic or unicyclic), or creates a new cycle in a connected component (which, again, may be acyclic or unicyclic). The canonical representation forces us to deal separately with each of these subcases. Roughly speaking, if the component created after x was inserted has at most one cycle then the secondary data structure need not be used and insertion procedure is simple. In the unlikely event of creating a second cycle, the procedure has to find the element to store in the secondary data structure. In the following we show in detail how to do it. It is a rather tedious but otherwise completely straightforward case analysis. The insertion procedure begins by distinguishing between these subcases, as follows. For each b ∈ {0, 1} denote by x b 1 the element stored in T b [h b (x)], and denote by C b its connected component. We follow the directed path starting at x b 1 to identify whether C b is acyclic or unicyclic (as in Case 2). If C b is acyclic the path discovers the minimal element x b min in the component (note that x 0 min = x 1 min if and only if C 0 = C 1 ), and if C b is unicyclic then the path allows us to discover the maximal element x b max on the cycle. The three most likely cases are the following:</p><p>1. C 0 = C 1 and both C 0 and C 1 are acyclic. In this case we merge the two components to a single acyclic component. For each b ∈ {0, 1} denote by  i. z = x. For every 1 ≤ i ≤ 0 we move x 0 i to its other possible location, and store</p><formula xml:id="formula_11">x b 1 → · · · → x b k b → x b min → x b min the directed</formula><formula xml:id="formula_12">→ · · · → x 0 0 → x * ← x 1 1 ← · · · ← x 1 1 , for some 0 ≤ k 0 and 1 ≤ k 1 ,</formula><formula xml:id="formula_13">x in T 0 [h 0 (x)].</formula><p>ii. z = x b j for some b ∈ {0, 1} and 1 ≤ j ≤ b . If x b j is currently stored in T 0 , then for every 1 ≤ i ≤ 1−b we move x 1−b i to its other possible location, and store x in</p><formula xml:id="formula_14">T 1−b [h 1−b (x)]. Otherwise (x b</formula><p>j is currently stored in T 1 ), for every 1 ≤ i ≤ b we move x b i to its other possible location, and store</p><formula xml:id="formula_15">x in T b [h b (x)].</formula><p>In the unlikely event in which an element has to be put in the secondary data structure we do as follows:</p><p>1. C 0 = C 1 and both C 0 and C 1 are unicyclic. Recall that we identified x 0 max and x 1 max -the maximal elements on the cycles of C 0 and C 1 , respectively. Let b ∈ {0, 1} be such that → y (for some 1 ≤ ≤ k), respectively. Note that we assume without loss of generality that the existing cycle is directed from y 1 to y , and note that it is possible that x 0 1 = y 1 or x 1 1 = y . There are two possibilities:</p><formula xml:id="formula_16">x 1−b max &lt; x b max . Denote by x b 1 → · · · → x b k → x b</formula><p>(a) y 1 = y . In this case the paths connecting x 0 1 and x 1 1 to the existing cycle do not intersect.</p><formula xml:id="formula_17">Let x max = max{x, x 0 1 , . . . , x 0 k 0 , x 1 1 , . . . , x 1 k 1 , y 1 , . . . , y k }.</formula><p>We stash x max in the secondary data structure, and distinguish between the following cases:</p><p>i. x max = x. In this case the insertion procedure terminates.</p><p>ii. x max = x b j for some b ∈ {0, 1} and 1 ≤ j ≤ k b . For every 1 ≤ i ≤ j − 1 we move x b i to its other possible location, and store</p><formula xml:id="formula_18">x in T b [h b (x)].</formula><p>iii. x max = y j for some 1 ≤ j ≤ − 1. For every 1 ≤ i ≤ j − 1 we move y i to its other possible location (this clears the entry in which y 1 was stored). Let</p><formula xml:id="formula_19">x min = min{x, x 0 1 , . . . , x 0 k 0 , x 0 1 , . . . , x 1 k 1</formula><p>, y , . . . , y k } (this is the minimal element on the new cycle, and it should be stored in T 0 ). We distinguish between three cases:</p><p>• x min = x. For every 1 ≤ i ≤ k 0 we move x 0 i , and store</p><formula xml:id="formula_20">x in T 0 [h 0 (x)]. • x min = x 0 t for some 1 ≤ t ≤ k 0 . If x min</formula><p>is currently stored in T 0 , then for every ≤ i ≤ k we move y i to its other possible location, for every 1 ≤ i ≤ k 1 we move x 1 i to its other possible location, and store</p><formula xml:id="formula_21">x in T 1 [h 1 (x)]. Otherwise (x min</formula><p>is currently stored in T 1 ), the for every 1 ≤ i ≤ k 0 we move x 0 i , and store x in</p><formula xml:id="formula_22">T 0 [h 0 (x)].</formula><p>• x min = x 1 t for some 1 ≤ t ≤ k 1 , or x min = y t for some ≤ t ≤ k. If x min is currently stored in T 0 , then for every 1 ≤ i ≤ k 0 we move x 0 i , and store x in T 0 [h 0 (x)]. Otherwise (x min is currently stored in T 1 ), then for every ≤ i ≤ k we move y i to its other possible location, for every 1 ≤ i ≤ k 1 we move x 1 i to its other possible location, and store x in T 1 [h 1 (x)]. iv. x max = y j for some ≤ j ≤ k. For every ≤ i ≤ j − 1 we move y i to its other possible location (this clear the entry in which y was stored). Let</p><formula xml:id="formula_23">x min = min{x, x 0 1 , . . . , x 0 k 0 , x 0 1 , . . . , x 1 k 1</formula><p>, y 1 , . . . , y −1 } (this is the minimal element on the new cycle, and it should be stored in T 0 ). We distinguish between three cases:</p><p>• x min = x. For every 1 ≤ i ≤ − 1 we move y i to its other possible location, for every 1 ≤ i ≤ k 0 we move x 0 i to its other possible location, and store x in T 0 [h 0 (x)].</p><p>• x min = x 1 t for some 1 ≤ t ≤ k 1 . If x min is currently stored in T 0 , then for every 1 ≤ i ≤ − 1 we move y i to its other possible location, for every 1 ≤ i ≤ k 0 we move x 0 i to its other possible location, and store x in T 0 [h 0 (x)]. Otherwise (x min is currently stored in T 1 ), then for every 1 ≤ i ≤ k 1 we move x 1 i to its other possible location, and store x in T 1 [h 1 (x)].</p><p>• x min = x 0 t for some 1 ≤ t ≤ k 0 , or x min = y t for some 1 ≤ t ≤ − 1. If x min is currently stored in T 0 , then for every 1 ≤ i ≤ k 1 we move x 1 i to its other possible location, and store x in T 1 [h 1 (x)]. Otherwise (x min is currently stored in T 1 ), then for every 1 ≤ i ≤ − 1 we move y i to its other possible location, for every 1 ≤ i ≤ k 0 we move x 0 i to its other possible location, and store x in T 0 [h 0 (x)]. (b) y 1 = y . In this case the paths connecting x 0 1 and x 1 1 to the existing cycle intersect. Denote by x * their first intersection point. Note that either x * = y 1 or that</p><formula xml:id="formula_24">x * = x 0 0 = x 1 1 for some 0 ≤ k 0 and 1 ≤ k 1 . Let x max = max{x, x 0 1 , . . . , x 0 0 −1 , x 1 1 , . . . , x 1 1 −1 , y 1 , . . . , y k }.</formula><p>We stash x max in the secondary data structure, and distinguish between the following cases:</p><p>i. x max = x. In this case the insertion procedure terminates.</p><p>ii. x max = x b j for some b ∈ {0, 1} and 1 ≤ j ≤ b − 1. For every 1 ≤ i ≤ j − 1 we move x b i to its other possible location, and store</p><formula xml:id="formula_25">x in T b [h b (x)]. iii. x max = y j for some 1 ≤ j ≤ k. Denote by x * = x * 1 → · · · → x * k * → y 1</formula><p>the directed path connecting x * to y 1 . For every 1 ≤ i ≤ j − 1 we move y i to its other possible location, and for every 1 ≤ i ≤ k * we move x * i to its other possible location. Now, let x min = min{x, x 0 1 , . . . , x 0 0 −1 , x 1 1 , . . . , x 1 1 −1 } (this is the minimal element on the new cycle, and it should be stored in T 0 ). We distinguish between two cases:</p><p>• x min = x. For every 1 ≤ i ≤ 0 − 1 we move x 0 i to its other possible location, and store x in T 0 [h 0 (x)].</p><p>• <ref type="formula">x</ref>  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">The Deletion Procedure</head><p>The deletion procedure takes advantage of the additional pointer stored in each entry. Recall that these pointers form a cyclic list of all the elements of a connected component. Note that since the expected size of a connected component is constant, and the expected size of the secondary data structure is constant as well, a straightforward way of deleting an element is to retrieve all the elements in its connected component, reinsert them without the deleted element, and then reinsert all the elements that are stashed in the secondary data structure. This would result in expected amortized constant deletion time. In practice, however, it is desirable to minimize the amount of memory manipulations. In what follows we detail a more refined procedure, which although share the same asymptotic performance, it is much more sensible in practice.</p><p>Given an element x ∈ U we execute the lookup procedure to verify that x is indeed stored. If x is stashed in the secondary data structure, we just delete x from the secondary data structure.</p><p>In the more interesting case, where x is stored in one of the tables, the connected component C of x is either acyclic or unicyclic. As in the insertion procedure, we follow the directed path starting at T 0 [h 0 (x)] either until we reach an element that appears twice, or until we detect a cycle. The canonical representation guarantees that in the first case the component is acyclic (and the element that appears twice is x min ), and in the second case the component is unicyclic (and we are able to identify whether x is part of its cycle). There are four possible cases to consider:</p><p>Case 1: C is acyclic and x = x min . In this case we split C to two acyclic connected components C 0 and C 1 . An element belongs to C 0 if the directed path connecting it to x min does not go through x. All the other elements belong to C 1 .</p><p>Note that x min is the minimal element in C 0 , and is already stored in both tables. We identify the minimal element in C 1 as follows. We follow the linked list of elements starting from x min , and denote by x 1 min the first element on that list which is different from x, and for which x belongs to the directed path connecting it to x min (it is possible that there is no such element, and in this case we delete x and update the linked list). This process discovers the directed path connecting</p><formula xml:id="formula_26">x 1 min to x, denoted x 1 min → x 1 → · · · → x k → x.</formula><p>For every 1 ≤ i ≤ k we move x i to its other possible location (note that this deletes x), and store x 1 min in both tables. Finally, we update the linked lists of the two components.</p><p>Case 2: C is acyclic and x = x min . In this case we again split C to two acyclic connected components C 0 and C 1 . The element x is the minimal element in an acyclic component, and therefore it is stored in both tables. We denote its two appearances by x 0 and x 1 . An element belongs to C 0 if the directed path connecting it to x 0 does not go through x 1 . All the other elements belong to C 1 . That is, an element belongs to C 1 if the directed path connecting it to x 1 does not go through x 0 .</p><p>For each b ∈ {0, 1} we continue as follows. We follow the linked list of elements starting from x b , and denote by x b min the first element on that list which belongs to C b (it is possible that there is no such element, and in this case we delete x b and update the linked list). This process discovers the directed path connecting</p><formula xml:id="formula_27">x b min to x b , denoted x b min → x b 1 → · · · → x b k b → x b . For every 1 ≤ i ≤ k b we move x b i</formula><p>to its other possible location (note that this deletes x b ), and store x b min in both tables. Finally, we update the linked lists of the two components.</p><p>Case 3: C is unicyclic and x is part of its cycle. In this case C remains connected when x is deleted. In addition, if there are any stashed elements that belong to C, the minimal such element should be removed from the secondary data structure and inserted using the insertion procedure.</p><p>More specifically, by following the linked list starting from x we locate the minimal element x min currently stored in C (if x is the minimal element than we denote by x min the first element larger than x). Claim 3.2 guarantees that there is a directed path connecting x min to x. Denote this path by x min → x 1 → · · · → x k → x. For every 1 ≤ i ≤ k we move x i to its other possible location (note that this deletes x), and store x min in both tables. We then update the linked list of the component. Finally, if there are stashed elements that belong to this component, we execute the insertion procedure with the minimal such element.</p><p>Case 4: C is unicyclic and x is not part of its cycle. In this case we split C to an acyclic component C 0 and a unicyclic component C 1 . An element belongs to C 0 if the directed path connecting it to the cycle goes through x. All the other elements belong to C 1 .</p><p>We identify the minimal element in C 0 as follows. We follow the linked list of elements starting from x, and denote by x 0 min the first element on that list which is different from x, and for which x belongs to the directed path connecting it to the cycle (it is possible that there is no such element, and in this case we delete x and update the linked list). This process discovers the directed path connecting x 0 min to x, denoted x 0 min → x 1 → · · · → x k → x. For every 1 ≤ i ≤ k we move x i to its other possible location (note that this deletes x), and store x 0 min in both tables. We then update the linked lists of the two components. Finally, if there are stashed elements that belong to C 0 , we execute the insertion procedure with the minimal such element.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">The Secondary Data Structure</head><p>In this section we propose several possible instantiations for the secondary data structure. As discussed in Section 1.3, the secondary data structure can be any strongly history-independent data structure. Recall that Lemma 1.3 implies in particular that the expected number of stashed elements is constant, and with overwhelming probability there are no more than log n stashed elements. Thus, the secondary data structure is essentially required to store only a very small number of elements. Furthermore, since the secondary data structure is probed every time a lookup is performed, it is likely to reside most of the time in the cache, and thus impose a minimal cost.</p><p>The practical choice. The most practical approach is instantiating the secondary data structure with a sorted list. A sorted list is probably the simplest data structure which is strongly history independent. When a sorted list contains at most s elements, insertions and deletions are performed in time O(s) in the worst case, and lookups are performed in time O(log s) in the worst case. In turn, instantiated with a sorted list, our data structure supports insertions, deletions, and membership queries in expected constant time. Moreover, Lemma 1.3 implies that the probability that a lookup requires more than k probes is at most O(n −2 k ).</p><p>Constant worst case lookup time. We now propose two instantiations that guarantee constant lookup time in the worst case. We note that these instantiations result in a rather theoretical impact, and in practice we expect a sorted list to perform much better.</p><p>One possibility is using the strongly history-independent data structure of Blelloch and Golovin <ref type="bibr" target="#b4">[5]</ref>, and in this case our data structure supports insertions and deletions in expected constant time, and membership queries in worst case constant time. Another possibility is using any deterministic perfect hash table with constant lookup time. On every insertion and deletion we reconstruct the hash table, and since its construction is deterministic, the resulting data structure is strongly history independent. The repeated reconstruction allows us to use a static hash table (instead of a dynamic hash table), and in this case the construction time of the table determines the insertion and deletion time. Perfect hash tables with such properties were suggested by Alon and Naor <ref type="bibr" target="#b0">[1]</ref>, Miltersen <ref type="bibr" target="#b18">[19]</ref>, and Hagerup, Miltersen and Pagh <ref type="bibr" target="#b12">[13]</ref>. Asymptotically, the construction of Hagerup et al. is the most efficient one, and provides an O(s log s) construction time on s elements. Instantiated with their construction, our data structure supports insertions and deletion in expected constant time, and membership queries in worst case constant time.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Efficiency Analysis</head><p>In this section we examine the efficiency of our data structure, in terms of its update time, lookup time, and memory utilization. The lookup operation, as specified in Section 3, requires probing both tables and performing a lookup in the secondary data structure. As in cuckoo hashing, probing the tables requires only two memory accesses (which are independent and can be performed in parallel). The secondary data structure, as described in Section 4, can be chosen to support membership queries in constant time in the worst case. Furthermore, with high probability the secondary data structure contains only a very small number of elements, and can therefore reside in the cache. In this case the lookup time is dominated by the time required for probing the two tables. Moreover, we note that with high probability (see Lemma 1.3), the secondary storage does not contain any elements, and therefore the lookup procedure only probes the two tables. We conclude that the lookup time is basically similar to that of cuckoo hashing, shown in <ref type="bibr" target="#b24">[25]</ref> to be very efficient.</p><p>The running time analysis of the insertion and deletion procedures is based on bounds on the size of a connected component and on the number of elements in the secondary data structure. Both the insertion and the deletion procedure involve at most two scans of the relevant connected component or the secondary data structure, and thus are linear in the size of the connected component and of the number of stashed elements. Lemmata 1.2 and 1.3 implies that the expected running time is a small constant.</p><p>The memory utilization of the our construction is identical to that of cuckoo hashing when supporting only insertions and membership queries -the number of elements should be less than half of the total number of table entries. The extra pointer needed for supporting deletions reduces the memory utilization to 25% under the conservative assumption that a pointer occupies the same amount of space as a key. If a pointer is actually shorter than a key, the space utilization improves accordingly.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Concluding Remarks</head><p>On using O(log n)-wise independent hash functions. One possible drawback of our construction, from a purely theoretical point of view, is that we assume the availability of truly random hash functions, while the constructions of Blelloch and Golovin assume O(log n)-wise independent hash functions (when guaranteeing worst case constant lookup time) or 5-wise independent hash functions (when guaranteeing expected constant lookup time). Nevertheless, simulations (see, for example, <ref type="bibr" target="#b24">[25]</ref>) give a strong evidence that simple heuristics work for the choice of the hash functions as far as cuckoo hashing is concerned (Mitzenmacher and Vadhan <ref type="bibr" target="#b19">[20]</ref> provide some theoretical justification). Thus we expect our scheme to be efficient in practice.</p><p>Our construction can be instantiated with O(log n)-wise independent hash functions, and still provide the same performance guarantees for insertions, deletions, and membership queries. However, in this case the bound on the number of stashed elements is slightly weaker than that stated in Lemma 1.3. Nevertheless, rather standard probabilistic arguments can be applied to argue that (1) the expected number of stashed elements is constant, and (2) the expected size of a connected component in the cuckoo graph is constant.</p><p>Alternatively, our construction can be instantiated with the highly efficient hash functions of Dietzfelbinger and Woelfel <ref type="bibr" target="#b8">[9]</ref> (improving the constructions of Siegel <ref type="bibr" target="#b27">[28]</ref> and Ostlin and Pagh <ref type="bibr" target="#b23">[24]</ref>). These hash functions are almost n δ -wise independent with high probability (for some constant 0 &lt; δ &lt; 1), can be evaluated in constant time, and each function can be described using only O(n) memory words. One possible drawback of this approach is that the distance to n δ -independence is only polynomially small.</p><p>Memory utilization. Our construction achieves memory utilization of essentially 50% (as in cuckoo hashing), and of 25% when supporting deletions. More efficient variants of cuckoo hashing <ref type="bibr" target="#b7">[8,</ref><ref type="bibr" target="#b10">11,</ref><ref type="bibr" target="#b25">26]</ref> circumvent the 50% barrier and achieve better memory utilization by either using more than two hash functions, or storing more than one element in each entry. It would be interesting to transform these variants to history-independent data structures while essentially preserving their efficiency.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A Proof of History Independence</head><p>In this section we prove that our data structure is history independent by showing that it has the canonical representation described in Section 3.1. We fix two hash functions h 0 , h 1 : U → {0, . . . , r − 1}, and a sequence of insert and delete operations σ 1 , . . . σ m . We prove by induction on 1 ≤ i ≤ k that after performing σ i the data structure has the canonical representation. This essentially reduces to proving that if the data structure is in the canonical representation and an operation is performed, then the canonical representation is not violated. In addition, note that the insertion and deletion procedures affect only a single connected component, and therefore the analysis can focus on a single connected component. In what follows we deal separately with insertions and deletions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A.1 History Independence of Insertions</head><p>As in the insertion procedure, when inserting an element x ∈ U there are four possible cases to consider. 3. Merging two unicyclic components. The set of stashed elements of the new component is the union of the corresponding sets of the two components, including the maximal element on the two cycles of the components (these are disjoint cycles, which do not contain x). The insertion procedure identifies the maximal element on the two cycles, and stash it in the secondary data structure. Then, x is inserted by moving all the elements on the directed path that leads to the stashed element. Note that we did not move any elements on the remaining cycle, and therefore the minimal element on that cycle is still stored in T 0 .</p><p>4. Creating a cycle in an acyclic component. In this case there are two directed paths connecting the two possible locations of x to the minimal element of the component. The procedure inserts x by moving the elements along the path that will cause the minimal element of the cycle to be stored in T 0 .</p><p>5. Creating a cycle in a unicyclic component. The set of stashed elements now includes also the maximal element on the two cycles (i.e., either the maximal element on the existing cycle, or the maximal element on the cycle created by x). Once this element is stashed, x is inserted to the location that will cause the minimal element on the cycle to be stored in T 0 .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A.2 History Independence of Deletions</head><p>As in the deletion procedure, given an element x ∈ U which is currently stored, there are several cases to consider. The simplest case is when x is stashed in the secondary data structure, and the procedure just deletes x. This does not affect the representation of the connected component to which x is mapped: the set of stashed elements of this component does not changes (other than removing x). Therefore, in this case the canonical representation is not violated. We now turn to consider the cases in which x is stored in at least one of the tables. The connected component C in which x is stored is either acyclic or unicyclic. If C is acyclic, the canonical representation after deleting x depends on whether x is the minimal element x min of the component. If C is unicyclic, the canonical representation after deleting x depends on whether x is part of its cycle. There are four possible cases to consider:</p><p>Case 1: C is acyclic and x = x min . The deletion of x removes the outgoing edge of x from the cuckoo graph, and this splits C to two acyclic connected components C 0 and C 1 . The elements of C 0 are those who are not connected to x after the edge is removed (that is, all elements for which the directed path connecting them to x min does not go through x). All the other elements belong to C 1 .</p><p>Note that x min is the minimal element in C 0 , and is already stored in both tables. Therefore, C 0 is in its canonical form. The procedure identified the minimal element in C 1 , stores it in both tables, and arranges the other elements of the component in the only possible way. This implies that also C 1 is in its canonical form.</p><p>Case 2: C is acyclic and x = x min . This case is almost identical to the previous case. The only difference is that the procedure needs to identify the minimal element in both C 0 and C 1 (and arrange the components accordingly).</p><p>Case 3: C is unicyclic and x is part of its cycle. When removing the outgoing edge of x, the component remains connected. In addition, the component is currently acyclic. The procedure first enforces the canonical representation of an acyclic component by identifying the minimal element and storing it in both tables. If the component does not have any stashed elements, then we are done. Otherwise, inserting its minimal stashed element leads to the canonical representation.</p><p>Case 4: C is unicyclic and x is not part of its cycle. When removing the outgoing edge of x, the component splits to two connected components: an acyclic component C 0 , and a unicyclic component C 1 . An element belongs to C 0 if the directed path connecting it to the cycle goes through x. All the other elements belong to C 1 .</p><p>The unicyclic component C 1 is already in its canonical form (the minimal element on the cycle is still stored in T 0 ), and any stashed elements that are mapped to this components should remain stashed. As for the acyclic component C 0 , the procedure enforces the canonical representation of an acyclic component by identifying the minimal element and storing it in both tables. If the component does not have any stashed elements, then we are done. Otherwise, inserting its minimal stashed element leads to the canonical representation.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Claim 3. 2 .</head><label>2</label><figDesc>Let C be a unicyclic component, and let x * be any element on its cycle. Then for any element x stored in C there exists a simple directed path from x to x * .</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Case 1 :</head><label>1</label><figDesc>T 0 [h 0 (x)] = ⊥ and T 1 [h 1 (x)] = ⊥. In this case x is in the only element of the component, and thus the minimal one. Thus, the canonical representation is maintained by storing x in both T 0 [h 0 (x)] and T 1 [h 1 (x)]. Case 2: T 0 [h 0 (x)] = ⊥ and T 1 [h 1 (x)] = ⊥. In this case x is added to an existing connected component, and since we add a new node to this component then x does not create a new cycle.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head></head><label></label><figDesc>path connecting x b 1 to x b min . There are two possibilities to consider: (a) x = min{x 0 min , x 1 min , x}. In this case, all the elements along the two paths are moved to their other possible location, and x is stored in both tables. More specifically, for every b ∈ {0, 1} and for every 1 ≤ i ≤ k b we move x b i to its other possible location, and store x in both T 0 [h 0 (x)] and T 1 [h 1 (x)]. (b) x b min = min{x 0 min , x 1 min , x} for some b ∈ {0, 1}. In this case only the elements along on the path connecting x 1−b 1 and x 1−b min are moved, and x is stored in T 1−b [h 1−b (x)]. More specifically, for every 1 ≤ i ≤ k 1−b we move x 1−b i to its other possible location, and store x in T 1−b [h 1−b (x)]. 2. C 0 = C 1 and exactly one of C 0 and C 1 is acyclic. Let b ∈ {0, 1} be such that C 1−b is acyclic and C b is unicyclic. Denote by x 1−b 1 → · · · → x 1−b k 1−b → x 1−b min → x 1−b min the directed path connecting x 1−b 1 to x 1−b min . For every 1 ≤ i ≤ k 1−b we move x 1−b i to its other possible location, and store x in T 1−b [h 1−b (x)]. 3. C 0 = C 1 and the component is acyclic. In this case x creates the first cycle in the component. Denote by x min the minimal element in the component (i.e., x min = x 0 min = x 1 min ), and for each b ∈ {0, 1} denote by x b 1 → · · · → x b k b → x min → x min the path connecting x b 1 to x min . There are two cases to consider: (a) The path connecting x 0 1 and x 1 1 contains the two appearances of x min . That is, the path is of the form x 0 1 → · · · → x 0 k 0 → x min ↔ x min ← x 1 k 1 ← · · · ← x 1 1 . In this case the minimal element on the cycle is x min , and therefore it should now be stored only in T 0 . Let b ∈ {0, 1} be such that x b k b is adjacent to T 1 [h 1 (x min )]. For every 1 ≤ i ≤ k b we move x b i to its other possible location, and store x in T b [h b (x)]. (b) The path connecting x 0 1 and x 1 1 contains at most a single appearance of x min . That is, the path is of the form x 0 1</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head></head><label></label><figDesc>min = x b j for some b ∈ {0, 1} and 1 ≤ j ≤ b − 1. If x min is currently stored in T 0 , then for every 1 ≤ i ≤ 1−b we move x 1−b i to its other possible location, and store x in T 1−b [h 1−b (x)]. Otherwise (x min is currently stored in T 1 ), then for every 1 ≤ i ≤ b − 1 we move x b i to its other possible location, and store x in T b [h b (x)].</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Case 1 :</head><label>1</label><figDesc>T 0 [h 0 (x)] = ⊥ and T 1 [h 1 (x)] = ⊥. In this case a new connected component is cre- ated. This component is acyclic, and x is its minimal element. We store x in both T 0 [h 0 (x)] and T 1 [h 1 (x)], and this corresponds to the canonical representation of the component. Case 2: T 0 [h 0 (x)] = ⊥ and T 1 [h 1 (x)] = ⊥. In this case x is added to an existing connected component, and x does not create a new cycle in this component. Therefore, the set of stashed elements of the component does not change. If the component is acyclic and x is larger than the minimal element of the component, then x is stored in T 1 [h 1 (x)]. If the component is acyclic and x is smaller than the minimal element, then x is stored in both tables and there is only one possible way of storing all the other elements. Finally, if the component is unicyclic then x is stored in T 1 [h 1 (x)]. In addition, we did not move any elements that are on the cycle, and therefore the minimal element on the cycle is still stored in T 0 . Thus, in all three cases the canonical representation is not violated. Case 3: T 0 [h 0 (x)] = ⊥ and T 1 [h 1 (x)] = ⊥. See the previous case. Case 4: T 0 [h 0 (x)] = ⊥ and T 1 [h 1 (x)] = ⊥. In this case x either merges two connected com- ponents, or create a new cycle in an existing component. There are five possible subcases to consider: 1. Merging two acyclic components. The new component is acyclic as well, and its minimal is either the minimal element of the first component, the minimal element of the second component, or x. The procedure identifies the minimal element, which is then stored in both tables, and there is only one possible way of storing all the other elements. 2. Merging an acyclic component with a unicyclic component. In this case x creates a single unicyclic component. Note that x is not on the cycle of this component, and therefore the set of stashed elements of the new component is the same as that of the unicyclic component. The procedure stores x in the acyclic component, and moves all elements on the directed path from x to the minimal element of the acyclic component to their other possible location. The result is that the minimal element of the acyclic component is now stored in only one of the tables. In addition, we did not move any elements on the cycle of the unicyclic component, and therefore the minimal element on the cycle is still stored in T 0 .</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0" validated="false"><head>where x * is the first intersection point of the two paths. In this case we denote by x * = y 1 → · · · → y k * → x min → x min the directed path connecting x * and x min . First, for every 1 ≤ i ≤ k * in decreasing order we move y i to its other possible location. Then, we let z = min{x, x 0 1 , . . . , x 01 1 } (this is the minimal element on the cycle, which should be stored in table T 0 ) and distinguish between the following two cases:</head><label></label><figDesc></figDesc><table>0 

, x 1 
1 , . . . , x </table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1" validated="false"><head>max the simple directed path connecting x b 1 to x b max . For every 1 ≤ i ≤ k we move x b i to its other possible location, stash x b max in the secondary data structure, and store x in T b [h b (x)]. 2. C 0 = C 1 and the component is unicyclic. In this case the connected component already contains a cycle, and x creates an additional cycle. We denote the existing cycle by y 1 → · · · → y k → y 1 , and denote the paths connecting x 0 1 and x 1 1 to the existing cycle by x 0 1 → · · · → x 0 k 0 → y 1 and by x 1 1 → · · · → x 1 k 1</head><label>max</label><figDesc></figDesc><table></table></figure>

			<note place="foot" n="1"> See [5] for some amusing anecdotes of this nature. 2 These are trees whose shape does not leak information.</note>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Derandomization, witnesses for Boolean matrix multiplication and construction of perfect hash functions</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Alon</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Naor</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Algorithmica</title>
		<imprint>
			<biblScope unit="volume">16</biblScope>
			<biblScope unit="issue">4-5</biblScope>
			<biblScope unit="page" from="434" to="449" />
			<date type="published" when="1996" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Incremental cryptography: The case of hashing and signing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Bellare</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Goldreich</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Goldwasser</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Advances in Cryptology -CRYPTO &apos;94</title>
		<imprint>
			<date type="published" when="1994" />
			<biblScope unit="page" from="216" to="233" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Incremental cryptography and application to virus protection</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Bellare</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Goldreich</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Goldwasser</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 27th Annual ACM Symposium on Theory of Computing</title>
		<meeting>the 27th Annual ACM Symposium on Theory of Computing</meeting>
		<imprint>
			<date type="published" when="1995" />
			<biblScope unit="page" from="45" to="56" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Cryptographic methods for storing ballots on a voting machine</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Bethencourt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Boneh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Waters</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 14th Network and Distributed System Security Symposium</title>
		<meeting>the 14th Network and Distributed System Security Symposium</meeting>
		<imprint>
			<date type="published" when="2007" />
			<biblScope unit="page" from="209" to="222" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Strongly history-independent hashing with applications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">E</forename><surname>Blelloch</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Golovin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 48th Annual IEEE Symposium on Foundations of Computer Science</title>
		<meeting>the 48th Annual IEEE Symposium on Foundations of Computer Science</meeting>
		<imprint>
			<date type="published" when="2007" />
			<biblScope unit="page" from="272" to="282" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Lower and upper bounds on obtaining history-independence. Information and Computation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Buchbinder</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Petrank</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">A preliminary version appeared in Advances in Cryptology -CRYPTO &apos;03</title>
		<imprint>
			<date type="published" when="2003" />
			<biblScope unit="volume">204</biblScope>
			<biblScope unit="page" from="445" to="462" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Dynamic perfect hashing: Upper and lower bounds</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Dietzfelbinger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">R</forename><surname>Karlin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Mehlhorn</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><forename type="middle">M</forename><surname>Der Heide</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Rohnert</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">E</forename><surname>Tarjan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SIAM Journal on Computing</title>
		<imprint>
			<biblScope unit="volume">23</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="738" to="761" />
			<date type="published" when="1994" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Balanced allocation and dictionaries with tightly packed constant size bins</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Dietzfelbinger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Weidling</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Theoretical Computer Science</title>
		<imprint>
			<biblScope unit="volume">380</biblScope>
			<biblScope unit="issue">1-2</biblScope>
			<biblScope unit="page" from="47" to="68" />
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Almost random graphs with simple hash functions</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Dietzfelbinger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Woelfel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 35th Annual ACM Symposium on Theory of Computing</title>
		<meeting>the 35th Annual ACM Symposium on Theory of Computing</meeting>
		<imprint>
			<date type="published" when="2003" />
			<biblScope unit="page" from="629" to="638" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">A cool and practical alternative to traditional hash tables</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">U</forename><surname>Erlingsson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Manasse</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Mcsherry</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 7th Workshop on Distributed Data and Structures</title>
		<meeting>the 7th Workshop on Distributed Data and Structures</meeting>
		<imprint>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Space efficient hash tables with worst case constant access time</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Fotakis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Pagh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Sanders</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">G</forename><surname>Spirakis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Theory of Computing Systems</title>
		<imprint>
			<date type="published" when="2005" />
			<biblScope unit="volume">38</biblScope>
			<biblScope unit="page" from="229" to="248" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Storing a sparse table with O(1) worst case access time</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">L</forename><surname>Fredman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Komlós</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Szemerédi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of the ACM</title>
		<imprint>
			<biblScope unit="volume">31</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="538" to="544" />
			<date type="published" when="1984" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Deterministic dictionaries</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Hagerup</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">B</forename><surname>Miltersen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Pagh</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Algorithms</title>
		<imprint>
			<biblScope unit="volume">41</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="69" to="85" />
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Characterizing history independent data structures</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">D</forename><surname>Hartline</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">S</forename><surname>Hong</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">E</forename><surname>Mohr</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">R</forename><surname>Pentney</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Rocke</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Algorithmica</title>
		<imprint>
			<biblScope unit="volume">42</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="57" to="74" />
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title level="m" type="main">Random Graphs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Janson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Luczak</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Ruci´nskiruci´nski</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2000" />
			<publisher>Wiley-Interscience</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<title level="m" type="main">More robust hashing: Cuckoo hashing with a stash</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Kirsch</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Mitzenmacher</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">U</forename><surname>Wieder</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
	<note>Manuscript</note>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Bipartite random graphs and cuckoo hashing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Kutzelnigg</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 4th Colloquium on Mathematics and Computer Science</title>
		<meeting>the 4th Colloquium on Mathematics and Computer Science</meeting>
		<imprint>
			<date type="published" when="2006" />
			<biblScope unit="page" from="403" to="406" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Oblivious data structures: Applications to cryptography</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Micciancio</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 29th Annual ACM Symposium on the Theory of Computing</title>
		<meeting>the 29th Annual ACM Symposium on the Theory of Computing</meeting>
		<imprint>
			<date type="published" when="1997" />
			<biblScope unit="page" from="456" to="464" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Error correcting codes, perfect hashing circuits, and deterministic dynamic dictionaries</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">B</forename><surname>Miltersen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 9th Annual ACM-SIAM Symposium on Discrete Algorithms</title>
		<meeting>the 9th Annual ACM-SIAM Symposium on Discrete Algorithms</meeting>
		<imprint>
			<date type="published" when="1998" />
			<biblScope unit="page" from="556" to="563" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Why simple hash functions work: Exploiting the entropy in a data stream</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Mitzenmacher</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Vadhan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 19th Annual ACM-SIAM Symposium on Discrete Algorithms</title>
		<meeting>the 19th Annual ACM-SIAM Symposium on Discrete Algorithms</meeting>
		<imprint>
			<date type="published" when="2008" />
			<biblScope unit="page" from="746" to="755" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Tamper-evident, history-independent, subliminal-free data structures on PROM storage -or-How to store ballots on a voting machine (extended abstract)</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Molnar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Kohno</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Sastry</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Wagner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">The full version is available from the Cryptology ePrint Archive</title>
		<imprint>
			<date type="published" when="2006" />
			<biblScope unit="page" from="365" to="370" />
		</imprint>
	</monogr>
<note type="report_type">Report</note>
	<note>Proceedings of the IEEE Symposium on Security and Privacy</note>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Deterministic history-independent strategies for storing information on write-once memories</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Moran</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Naor</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Segev</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 34th International Colloquium on Automata, Languages and Programming</title>
		<meeting>the 34th International Colloquium on Automata, Languages and Programming</meeting>
		<imprint>
			<date type="published" when="2007" />
			<biblScope unit="page" from="303" to="315" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Anti-persistence: History independent data structures</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Naor</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Teague</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 33rd Annual ACM Symposium on Theory of Computing</title>
		<meeting>the 33rd Annual ACM Symposium on Theory of Computing</meeting>
		<imprint>
			<date type="published" when="2001" />
			<biblScope unit="page" from="492" to="501" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Uniform hashing in constant time and linear space</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Ostlin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Pagh</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 35th Annual ACM Symposium on Theory of Computing</title>
		<meeting>the 35th Annual ACM Symposium on Theory of Computing</meeting>
		<imprint>
			<date type="published" when="2003" />
			<biblScope unit="page" from="622" to="628" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Cuckoo hashing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Pagh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><forename type="middle">F</forename><surname>Rodler</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Algorithms</title>
		<imprint>
			<biblScope unit="volume">51</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="122" to="144" />
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Efficient hashing with lookups in two memory accesses</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Panigrahy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 16th Annual ACM-SIAM Symposium on Discrete Algorithms</title>
		<meeting>the 16th Annual ACM-SIAM Symposium on Discrete Algorithms</meeting>
		<imprint>
			<date type="published" when="2005" />
			<biblScope unit="page" from="830" to="839" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Efficient hash probes on modern processors</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><forename type="middle">A</forename><surname>Ross</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 23nd International Conference on Data Engineering</title>
		<meeting>the 23nd International Conference on Data Engineering</meeting>
		<imprint>
			<date type="published" when="2007" />
			<biblScope unit="page" from="1297" to="1301" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">On universal classes of fast high performance hash functions, their time-space tradeoff, and their applications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Siegel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 30th Annual IEEE Symposium on Foundations of Computer Science</title>
		<meeting>the 30th Annual IEEE Symposium on Foundations of Computer Science</meeting>
		<imprint>
			<date type="published" when="1989" />
			<biblScope unit="page" from="20" to="25" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">Architecture conscious hashing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Zukowski</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Héman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">A</forename><surname>Boncz</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2nd International Workshop on Data Management on New Hardware</title>
		<imprint>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
