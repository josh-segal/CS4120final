<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2019-03-26T16:38+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Deriving Invariants by Algorithmic Learning, Decision Procedures, and Predicate Abstraction</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yungbum</forename><surname>Jung</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">School of Computer Science and Engineering</orgName>
								<orgName type="institution">Seoul National University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Soonho</forename><surname>Kong</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">School of Computer Science and Engineering</orgName>
								<orgName type="institution">Seoul National University</orgName>
							</affiliation>
						</author>
						<author role="corresp">
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bow-Yaw</forename><surname>Wang</surname></persName>
							<email>kwang@ropas.snu.ac.kr</email>
							<affiliation key="aff1">
								<orgName type="department">Institute of Information Science</orgName>
								<orgName type="institution">Academia Sinica</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kwangkeun</forename><surname>Yi</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">School of Computer Science and Engineering</orgName>
								<orgName type="institution">Seoul National University</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Deriving Invariants by Algorithmic Learning, Decision Procedures, and Predicate Abstraction</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>By combining algorithmic learning, decision procedures, and predicate abstraction, we present an automated technique for finding loop invariants in propositional formulae. Given invariant approximations derived from pre-and post-conditions, our new technique exploits the flexibility in invariants by a simple randomized mechanism. The proposed technique is able to generate invariants for some Linux device drivers and SPEC2000 benchmarks in our experiments.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Algorithmic learning has been applied to assumption generation in compositional reasoning <ref type="bibr" target="#b8">[9]</ref>. In contrast to traditional techniques, the learning approach does not derive assumptions in an off-line manner. It instead finds assumptions by interacting with a model checker progressively. Since assumptions in compositional reasoning are generally not unique, algorithmic learning can exploit the flexibility in assumptions to attain preferable solutions. Applications in formal verification and interface synthesis have also been reported <ref type="bibr" target="#b8">[9,</ref><ref type="bibr" target="#b0">1,</ref><ref type="bibr" target="#b1">2,</ref><ref type="bibr" target="#b17">18,</ref><ref type="bibr" target="#b6">7]</ref>.</p><p>Finding loop invariants follows a similar pattern. Invariants are often not unique. Indeed, programmers derive invariants incrementally. They usually have their guesses of invariants in mind, and gradually refine their guesses by observing program behavior more. Since in practice there are many invariants for given pre-and post-conditions, programmers have more freedom in deriving invariants. Yet traditional invariant generation techniques do not exploit the flexibility. They have a similar impediment to traditional assumption generation.</p><p>This article reports our first findings in applying algorithmic learning to invariant generation. We show that the three technologies (algorithmic learning, decision procedures, and predicate abstraction) can be arranged in concert to derive loop invariants in propositional (or, quantifier-free) formulae. The new technique is able to generate invariants for some Linux device drivers and SPEC2000 benchmarks without any help from static or dynamic analyses.</p><p>For a while loop, an exact learning algorithm for Boolean formulae searches for invariants by asking queries. Queries can be resolved (not always, see below) by decision procedures automatically. Recall that the learning algorithm generates only Boolean formulae but decision procedures work in propositional formulae. We thus perform predicate abstraction and concretization to integrate the two components.</p><p>In reality, information about loop invariant is incomplete. Queries may not be resolvable due to insufficient information. One striking feature of our learning approach is to exploit the flexibility in invariants. When query resolution requires information unavailable to decision procedures, we simply give a random answer. We surely could use static analysis to compute soundly approximated information other than random answers. Yet there are so many invariants for the given pre-and post-conditions. A little bit of random information does not prevent algorithmic learning from inferring invariants. Indeed, the learning algorithm is able to derive invariants in our experiments by coin tossing. The while loop assigns a random truth value to the variable b in the beginning of its body. It increases the variable i by 1 if b is true. Observe that the variable b must be true after the while loop. We would like to find an invariant which proves the postcondition i = 10 ∧ b. Heuristically, we choose i = 0 and (i = 10 ∧ b) ∨ i &lt; 10 as under-and over-approximations to invariants respectively. With the help of a decision procedure, these invariant approximations are used to resolve queries made by the learning algorithm. After resolving a number of queries, the learning algorithm asks whether i = 0 ∧ i &lt; 10 ∧ ¬b should be included in the invariant. Note that the query is not stronger than the under-approximation, nor weaker than the over-approximation. Hence decision procedures cannot resolve it due to lack of information. At this point, one could apply static analysis and see that it is possible to have this state at the beginning of the loop. Instead of employing static analysis, we simply give a random answer to the learning algorithm. For this example, this information is crucial: the learning algorithm will ask us to give a counterexample to its best guess i = 0 ∨ (i = 10 ∧ b) after it processes the incorrect answer. Since the guess is not an invariant and flipping coins does not generate a counterexample, we restart the learning process. If the query i = 0 ∧ i &lt; 10 ∧ ¬b is answered correctly, the learning algorithm infers the invariant (i = 10 ∧ b) ∨ i &lt; 10 with two more resolvable queries.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Contribution</head><p>-We prove that algorithmic learning, decision procedures, and predicate abstraction in combination can automatically infer invariants in propositional formulae for programs in our simple language. -We demonstrate that the technique works in realistic settings: we are able to generate invariants for some Linux device drivers and SPEC2000 benchmarks in our experiments. -The technique can be seen as a framework for invariant generation. Static analyzers can contribute by providing information to algorithmic learning. Ours is hence orthogonal to existing techniques.</p><p>We organize this paper as follows. After preliminaries (Section 2), we present an overview of the framework in Section 3. In Section 4, we review the exact learning algorithm introduced in <ref type="bibr" target="#b5">[6]</ref>. Section 5 gives the details of our learning approach. We report experiments in Section 6. Section 7 briefly discusses our learning approach, future work, and related work. Section 8 concludes our work.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">The Target Language and Notation</head><p>The syntax of statements in our simple imperative language is as follows.</p><formula xml:id="formula_0">Stmt = nop | assume Prop | Stmt; Stmt | x := Exp | x := nondet | b := Bool | b := nondet | if Prop then Stmt else Stmt | switch Exp do case Exp : Stmt · · · | { Prop } while Prop do Stmt { Prop }</formula><p>Natural number variables and Boolean variables are allowed. They assign to arbitrary values in their respective domains by the keyword nondet. Note that while statements are annotated. Programmers are asked to specify a precondition before a while statement, and a postcondition after the statement. An expression Exp is a natural number (n ∈ N), a variable (x), or a summation or the difference of two expressions. Due to the limitation of decision procedures, only linear arithmetic is allowed. It ensures complete answers from decision procedures.</p><formula xml:id="formula_1">Exp = n | x | Exp + Exp | Exp − Exp</formula><p>A propositional formula Prop is either: the falsehood symbol (F), a Boolean variable (b), the negation of a propositional formula, the conjunction of two propositional formulae, or comparisons (</p><formula xml:id="formula_2">E 0 &lt; E 1 or E 0 = E 1 ). Prop = F | b | ¬Prop | Prop ∧ Prop | Exp &lt; Exp | Exp = Exp</formula><p>Let ρ 0 and ρ 1 be propositional formulae, π 0 and π 1 be expressions. We write</p><formula xml:id="formula_3">T for ¬F, ρ 0 ∨ ρ 1 for ¬(¬ρ 0 ∧ ¬ρ 1 ), ρ 0 ⇒ ρ 1 for ¬ρ 0 ∨ ρ 1 , ρ 0 ⇔ ρ 1 for (ρ 0 ⇒ ρ 1 ) ∧ (ρ 1 ⇒ ρ 0 ), ρ 0 ⊕ ρ 1 for ¬(ρ 0 ⇔ ρ 1 ), π 0 ≤ π 1 for π 0 &lt; π 1 ∨ π 0 = π 1</formula><p>, and π 0 = π 1 for ¬(π 0 = π 1 ). Propositional formulae of the forms b, π 0 &lt; π 1 , and π 0 = π 1 are called atomic propositions. If A is a set of atomic propositions, Prop A denotes the set of propositional formulae generated from A.</p><p>A Boolean formula Bool is a restricted propositional formula constructed from truth values and Boolean variables.</p><formula xml:id="formula_4">Bool = F | b | ¬Bool | Bool ∧ Bool</formula><p>A valuation ν is an assignment of natural numbers to variables and truth values to Boolean variables. A Boolean valuation µ is an assignment of truth values to Boolean variables. If A is a set of atomic propositions and Var (A) is the set of variables occurred in A, Val Var (A) denotes the set of valuations for Var (A). Let ρ be a propositional formula. The valuation ν is a model of ρ (written ν |= ρ) if ρ evaluates to T under the valuation ν. Similarly, the Boolean valuation µ is a Boolean model of the Boolean formula β (written µ |= β) if β evaluates to T under µ. If B is a set of Boolean variables, the set of Boolean valuations for B is denoted by Val B . Given a propositional formula ρ, a satisfiability modulo theories (SMT) solver returns a model of ρ if it exists (written SMT (ρ) → ν); otherwise, it returns UNSAT (written SMT (ρ) → UNSAT ) <ref type="bibr" target="#b10">[11,</ref><ref type="bibr" target="#b21">22]</ref>.</p><p>A precondition Pre(φ, S) for φ ∈ Prop with respect to a statement S is a universally quantified formula that guarantees φ after the execution of the statement S.</p><formula xml:id="formula_5">Pre(φ, nop) = φ Pre(φ, assume θ) = θ ⇒ φ Pre(φ, S 0 ; S 1 ) = Pre(Pre(φ, S 1 ), S 0 ) Pre(φ, x := π) = ∀x.φ if π = nondet φ[x → π] otherwise Pre(φ, b := ρ) = ∀b.φ if ρ = nondet φ[b → ρ] otherwise Pre(φ, if ρ then S 0 else S 1 ) = (ρ ⇒ Pre(φ, S 0 )) ∧ (¬ρ ⇒ Pre(φ, S 1 )) Pre(φ, switch π case π i : S i ) = i (π = π i ⇒ Pre(φ, S i )) Pre(φ, {δ} while ρ do S {}) = δ if implies φ F otherwise</formula><p>Observe that all universal quantifiers occur positively in Pre(φ, S) for any S. They can be eliminated by Skolem constants <ref type="bibr" target="#b11">[12,</ref><ref type="bibr" target="#b22">23]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Framework Overview</head><p>We combine algorithmic learning, decision procedures <ref type="bibr" target="#b10">[11]</ref>, and predicate abstraction <ref type="bibr" target="#b12">[13]</ref> in our framework. <ref type="figure">Figure 1</ref> illustrates the relation among these technologies. In the figure, the left side represents the concrete domain; the right side represents the abstract domain. Assume there is an invariant for a while statement with respect to the given pre-and post-conditions in the concrete domain. We would like to apply algorithmic learning to find such an invariant. To this purpose, we use the CDNF algorithm <ref type="bibr" target="#b5">[6]</ref>. The CDNF algorithm is an exact learning algorithm for Boolean formulae. It is an active learning algorithm that makes queries about an unknown Boolean formula and outputs a Boolean formula that is equivalent to the unknown one <ref type="bibr" target="#b2">[3,</ref><ref type="bibr" target="#b5">6]</ref>. We perform predicate abstraction to represent propositional formulae as Boolean formulae in the abstract domain. Since the CDNF algorithm is able to learn arbitrary Boolean formulae, our technique can infer arbitrary invariants in propositional formulae by answering queries.</p><p>To realize this idea, we devise a mechanism (a teacher) to resolve queries in the abstract domain. There are two types of queries: membership queries ask whether a Boolean valuation is a model of an invariant; equivalence queries ask whether a Boolean formula is an invariant and demand a counterexample if it is not. It is not difficult to concretize queries in the abstract domain. Answering queries however requires information about invariants yet to be computed.</p><p>Although an invariant is unknown, its approximations can be derived from the pre-and post-conditions, or computed by static analysis. Hence, we estimate invariant approximations heuristically and adopt decision procedures for query resolution. For a membership query, we check if its concretization is in the under-approximation or outside the over-approximation by an SMT solver. If it is in the under-approximation, the answer is affirmative; if it is out of the over-approximation, the answer is negative. Otherwise, we simply give a random answer. Equivalence queries are resolved similarly, but we restart the learning process when equivalence queries are not resolvable. If the concretization is not weaker than the under-approximation or not stronger than the overapproximation, a counterexample can be generated by an SMT solver. Otherwise, the learning process is restarted instead of giving random answers.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">The CDNF Algorithm</head><p>In <ref type="bibr" target="#b5">[6]</ref>, an exact learning algorithm for Boolean formulae over a finite set B of Boolean variables is introduced. The CDNF algorithm generates a conjunction of formulae in disjunctive normal form equivalent to the unknown Boolean formula λ. It assumes a teacher to answer the following queries:</p><p>1. Membership queries. Let µ be a Boolean valuation for B. The membership query MEM (µ) asks if µ is a model of the unknown Boolean formula λ. If µ |= λ, the teacher answers YES (denoted by MEM (µ) → YES ). Otherwise, the teacher answers NO (denoted by MEM (µ) → NO). 2. Equivalence queries. Let β ∈ Bool B . The equivalence query EQ(β) asks if β is equivalent to the unknown Boolean formula λ. If so, the teacher answers YES (denoted by EQ(β) → YES ). Otherwise, the teacher returns a Boolean valuation µ for B such that µ |= β ⊕ λ as a counterexample (denoted by EQ(β) → µ).</p><p>(* B = {b1, b2, . . . , bm}: a finite set of Boolean variables *) Input: A teacher answers membership and equivalence queries for an unknown Boolean formula λ Output: A Boolean formula equivalent to λ t := 0; if EQ(T) → YES then return T; let µ be such that EQ(T) → µ; 0 t := t + 1; (Ht, St, at) := (F, ∅, µ);</p><formula xml:id="formula_6">1 if EQ( t V i=1 Hi) → YES then return t V i=1</formula><p>Hi;</p><p>let µ be such that EQ( Algorithm 1: The CDNF Algorithm <ref type="bibr" target="#b5">[6]</ref> Let µ and a be Boolean valuations for B.</p><formula xml:id="formula_7">The Boolean valuation µ ⊕ a is defined by (µ ⊕ a)(b i ) = µ(b i ) ⊕ a(b i ) for b i ∈ B. For any Boolean formula β, β[B → B ⊕ a]</formula><p>is the Boolean formula obtained from β by replacing b i ∈ B with ¬b i if a(b i ) = T. For a set S of Boolean valuations for B, define</p><formula xml:id="formula_8">M DNF (µ) = µ(bi)=T b i and M DNF (S) = µ∈S M DNF (µ).</formula><p>For the degenerate cases, M DNF (µ) = T when µ ≡ F and M DNF (∅) = F. Algorithm 1 shows the CDNF algorithm <ref type="bibr" target="#b5">[6]</ref>. In the algorithm, the step "walk from µ towards a while keeping µ |= λ" takes two Boolean valuations µ and a. It flips the assignments in µ different from those of a and maintains µ |= λ. Algorithm 2 implements the walking step by membership queries.</p><p>(* B = {b1, b2, . . . , bm}: a finite set of Boolean variables *) Input: valuations µ and a for B Output: a model µ of λ by walking towards a i := 1;</p><formula xml:id="formula_9">while i ≤ m do if µ(bi) = a(bi) then µ(bi) := ¬µ(bi); if MEM (µ) → YES then i := 0 else µ(bi) := ¬µ(bi); end i := i + 1; end return µ</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Algorithm 2: Walking towards a</head><p>Intuitively, the CDNF algorithm computes the conjunction of approximations to the unknown Boolean formula. In Algorithm 1, H i records the approximation generated from the set S i of Boolean valuations with respect to the Boolean valuation a i . The algorithm checks if the conjunction of approximations H i 's is the unknown Boolean formula (line 1). If it is, we are done. Otherwise, the algorithm tries to refine H i by expanding S i . If none of H i 's can be refined (line 2), another approximation is added (line 0). The algorithm reiterates after refining the approximations H i 's (line 3). Let λ be a Boolean formula, |λ| DNF and |λ| CNF denote the minimum sizes of λ in disjunctive and conjunctive normal forms respectively. The CDNF algorithm learns any Boolean formula λ with a polynomial number of queries in |λ| DNF , |λ| CNF , and the number of Boolean variables <ref type="bibr" target="#b5">[6]</ref>. Appendix A gives a sample run of the CDNF algorithm.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Learning Invariants</head><p>Consider the while statement {δ} while ρ do S {}.</p><p>The propositional formula ρ is called the guard of the while statement; the statement S is called the body of the while statement. The annotation is intended to denote that if the precondition δ holds, then the postcondition must hold after the execution of the while statement. The invariant generation problem is to compute an invariant to justify the pre-and post-conditions. Definition 1. Let {δ} while ρ do S {} be a while statement. An invariant ι is a propositional formula such that</p><formula xml:id="formula_10">(a) δ ⇒ ι (b) ρ ∧ ι ⇒ Pre(ι, S) (c) ¬ρ ∧ ι ⇒ .</formula><p>An invariant allows us to prove that the while statement fulfills the annotated requirements. Observe that Definition 1 (c) is equivalent to ι ⇒ ∨ ρ. Along with Definition 1 (a), we see that any invariant must be weaker than δ but stronger than ∨ ρ. Hence δ and ∨ ρ are called the strongest and weakest approximations to invariants for {δ} while ρ do S {} respectively.</p><p>Our goal is to apply the CDNF algorithm (Algorithm 1) to "learn" an invariant for an annotated while statement. To achieve this goal, we first lift the invariant generation problem to the abstract domain by predicate abstraction. Moreover, we need to devise a mechanism to answer queries from the learning algorithm in the abstract domain. In the following, we show how to answer queries by an SMT solver and invariant approximations.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Predicate Abstraction to Connect Algorithmic Learning and SMT Solvers</head><p>Domains for an SMT solver and algorithmic learning are adjoined via the predicate abstraction <ref type="bibr" target="#b12">[13]</ref>. The α, α * , γ, and γ * are the abstraction (α, α * ) and concretization (γ, γ * ) maps between the two domains. SMT solvers work in propositional formulae. Algorithmic learning works in Boolean formulae.</p><formula xml:id="formula_11">Prop A Bool B(A) γ * γ α * α Val B(A) Val Var (A)</formula><p>Let A be a fixed set of atomic propositions. For each atomic proposition p ∈ A, we use a Boolean variable b p to represent p. Let B(A) = {b p : p ∈ A} be the set of Boolean variables corresponding to the atomic propositions in A. Consider the concrete domain Prop A and the abstract domain Bool B(A) . A Boolean formula β ∈ Bool B(A) is called a canonical monomial if it is a conjunction of literals such that each Boolean variable in B(A) appears exactly once. Define the mappings γ : Bool B(A) → Prop A and α : Prop A → Bool B(A) :</p><formula xml:id="formula_12">γ(β) = β[b p → p]; and α(θ) = {β ∈ Bool B(A) : β is a canonical monomial and θ ∧ γ(β) is satisfiable}.</formula><p>where b p and p are the Boolean variables in B(A) and their corresponding atomic propositions respectively. The following lemmas are useful in proving our technical results:</p><p>Lemma 1. Let A be a set of atomic propositions, θ, ρ ∈ Prop A . Then</p><formula xml:id="formula_13">θ ⇒ ρ implies α(θ) ⇒ α(ρ).</formula><p>Lemma 2. Let A be a set of atomic propositions, θ ∈ Prop A , and β a canonical monomial in Bool B(A) . Then θ ∧ γ(β) is satisfiable if and only if γ(β) ⇒ θ. 3</p><p>Recall that a teacher for the CDNF algorithm answers queries in the abstract domain, and an SMT solver computes models in the concrete domain. In order to let an SMT solver play the role of a teacher, more transformations are needed. A valuation induces a natural Boolean valuation. Precisely, define the Boolean valuation α * (ν) for the valuation ν as follows. A Boolean valuation on the other hand induces a propositional formula. Define the propositional formula γ * (µ) for the Boolean valuation µ as follows.</p><formula xml:id="formula_14">(α * (ν))(b p ) = T if ν |= p F otherwise</formula><formula xml:id="formula_15">γ * (µ) = p∈A {p : µ(b p ) = T} ∧ p∈A {¬p : µ(b p ) = F}</formula><p>Lemma 4. Let A be a set of atomic propositions, θ ∈ Prop A , and µ a Boolean valuation for B(A). Then γ * (µ) ⇒ θ if and only if µ |= α(θ).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Answering Queries from Algorithmic Learning</head><p>Suppose ι ∈ Prop A is an invariant for the statement {δ} while ρ do S {}. Let ι, ι ∈ Prop A . We say ι is an under-approximation to an invariant ι if δ ⇒ ι and ι ⇒ ι. Similarly, ι is an over-approximation to an invariant ι if ι ⇒ ι and ι ⇒ ∨ρ. The strongest (δ) and weakest (∨ρ) approximations are trivial underand over-approximations to any invariant respectively. Recall that the CDNF algorithm makes the following queries: (1) membership queries MEM (µ) where µ ∈ Val B(A) , and (2) equivalence queries EQ(β) where β ∈ Bool B(A) . In the following, we show how to resolve these queries by means of an SMT solver and the invariant approximations (ι and ι).</p><p>Membership Queries In the membership query MEM (µ), the teacher is required to answer whether µ |= α(ι). We concretize the Boolean valuation µ and check it against the approximations. If the concretization γ * (µ) is inconsistent (that is, γ * (µ) is unsatisfiable), we simply answer NO for the membership query. Otherwise, there are three cases:</p><p>1. γ * (µ) ⇒ ι. Thus µ |= α(ι) (Lemma 4). And µ |= α(ι) by Lemma 1. 2. γ * (µ) ι. Thus µ |= α(ι) (Lemma 4). That is, µ |= ¬α(ι). Since ι → ι, we have µ |= α(ι) by Lemma 1. 3. Otherwise, we cannot determine whether µ |= α(ι) by the approximations. Algorithm 3: Resolving Membership Queries Algorithm 3 shows our membership query resolution algorithm. Note that when a membership query cannot be resolved by an SMT solver given invariant approximations, one can use better approximations from static analyzers. Our framework is therefore orthogonal to existing static analysis techniques.</p><p>Equivalence Queries To answer the equivalence query EQ(β), we concretize the Boolean formula β and check if γ(β) is indeed an invariant of the while statement for the given pre-and post-conditions. If it is, we are done. Otherwise, we use an SMT solver to find a witness to α(ι) ⊕ β. There are three cases:</p><p>1. There is a ν such that ν |= ¬(ι ⇒ γ(β)). Then ν |= ι ∧ ¬γ(β). By Lemma 3 and 1, we have α * (ν) |= α(ι) and α * (ν) |= ¬β. Thus, α * (ν) |= α(ι) ∧ ¬β. 2. There is a ν such that ν |= ¬(γ(β) ⇒ ι). Then ν |= γ(β) ∧ ¬ι. By Lemma 3, α * (ν) |= β. α * (ν) |= ¬α(ι) by Lemma 3 and 1. Hence α * (ν) |= β ∧ ¬α(ι). 3. Otherwise, we cannot find a witness to α(ι) ⊕ β by the approximations.</p><p>(* {δ} while ρ do S {} *) (* ι: an under-approximation; ι: an over-approximation *)</p><formula xml:id="formula_16">Input: β ∈ Bool B(A) θ := γ(β); if SMT (ι ∧ ¬θ) → UNSAT and SMT (θ ∧ ¬ι) → UNSAT and SMT (ρ ∧ θ ∧ ¬Pre(θ, S)) → UNSAT then return YES ; if SMT (ι ∧ ¬θ) → ν then return α * (ν); if SMT (θ ∧ ¬ι) → ν then return α * (ν); abort with θ;</formula><p>Algorithm 4: Resolving Equivalence Queries Algorithm 4 shows our equivalence query resolution algorithm. Note that Algorithm 4 returns YES only if an invariant is found.</p><p>Similar to membership query resolution, one can refine approximations by static analysis when an equivalence query is not resolvable by an SMT solver given invariant approximations. For simplicity, Algorithm 4 aborts the learning algorithm with the unresolved equivalence query.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3">Main Loop of Our Approach</head><p>Algorithm 5 gives the top-level loop of our framework. Initially, we use the disjunction of strongest approximation and the postcondition as the underapproximation; the weakest approximation is the over-approximation. The underapproximation aims to find an invariant that establishes the postcondition. This heuristic is proved very useful in practice.</p><p>(* {δ} while ρ do S {} *) function randomized membership µ = try Algorithm 3 with input µ when abort → return YES or NO randomly;</p><p>ι := δ ∨ ; ι := ∨ ρ; repeat try ι := Algorithm 1 with randomized membership and Algorithm 4 when abort → continue until an invariant ι is found ;</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Algorithm 5: Main Loop</head><p>After determining the approximations, Algorithm 1 is used to find an invariant. We use Algorithms 3 and 4 to resolve queries with an SMT solver given the invariant approximations. If Algorithm 3 aborts with an unresolved membership query, a random answer is returned by randomized membership. If Algorithm 4 aborts with an unresolved equivalence query, the learning algorithm is restarted.</p><p>Since algorithmic learning does not commit to any specific target, it always finds an invariant consistent with answers to previous queries. In other words, the learning algorithm will always generate an invariant if there is one consistent with our random answers. Although our random answers may exclude certain invariants, an invariant can still be inferred. Verifying whether a formula is an invariant is done by checking the sufficient conditions of Definition 1 in our equivalence query resolution algorithm (Algorithm 4).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Experiments</head><p>We have implemented a prototype in OCaml. In our implementation, we use Yices as the SMT solver to resolve queries (Algorithm 3 and 4). From SPEC2000 benchmarks and Linux device drivers we chose five while statements. We translated them into our language and added postcondition manually. <ref type="table">Table 1</ref> shows the performance numbers of our experiments. Among five while statements, the cases parser and vpr are extracted from PARSER and VPR in SPEC2000 benchmarks respectively. The other three cases are extracted from Linux 2.6.28 device drivers: both ide-ide-tape and ide-wait-ireason are from IDE driver; usb-message is from USB driver. For each case, we report the number of language constructs in the loop (SIZE), the number of atomic propositions (AP ), the number of membership queries (MEM ), the number of equivalence queries (EQ), the number of randomly resolved membership queries (coin tossing), the number of the CDNF algorithm invocations (iterations), and the execution time. The data are the average of 500 runs and collected on a 2.6GHz Intel E5300 Duo Core with 3GB memory running Linux 2.6.28. Our technique is able to find invariants for four cases within 1 second. Most interestingly, the learning algorithm is able to find an invariant for usb-message regardless of the outcomes of coin tossing. For the most complicated case parser, our technique is able to generate an invariant with 991 random membership resolutions in about 33 seconds.   <ref type="figure" target="#fig_7">Figure 2</ref> is a while statement extracted from Linux IDE driver. <ref type="bibr" target="#b3">4</ref> It copies data of size n from tape records. The variable count contains the size of the data to be copied from the current record (bh b size and bh b count). If the current tape record runs out of data, more data are copied from the next record. The flexibility in invariants can be witnessed in the following run. After successfully resolving 3 equivalence and 7 membership queries, the CDNF algorithm makes the following membership query unresolvable by the invariant approximations:</p><formula xml:id="formula_17">ρ n &gt; 0 ∧ (bh b size − bh b count) &lt; n ∧ ret = 0 ∧bh b count = bh b size</formula><p>Answering NO to this query leads to the following unresolvable membership query after successfully resolving two more membership query:</p><formula xml:id="formula_18">ρ ∧ bh b count = bh b size ∧ bh b count ≤ bh b size</formula><p>We proceed with a random answer YES . After successfully resolving one more membership queries, we reach the following unresolvable membership query:</p><formula xml:id="formula_19">ρ ∧ bh b count = bh b size ∧ bh b count &gt; bh b size</formula><p>For this query, both answers lead to invariants. Answering YES yields the following invariant:</p><formula xml:id="formula_20">n = 0 ∨ (bh b size − bh b count) ≥ n</formula><p>Answering NO yields the following invariant:</p><p>(bh b count ≤ bh b size ∧ n = 0) ∨ (bh b size − bh b count) ≥ n Note that they are two different invariants. The equivalence query resolution algorithm (Algorithm 4) ensures that both fulfill the conditions in Definition 1.</p><p>6.2 parser from VPR in SPEC2000 Benchmarks <ref type="figure" target="#fig_4">Figure 3</ref> shows a sample while statement from the parser program in SPEC2000 benchmark. <ref type="bibr" target="#b4">5</ref> In the while body, there are three locations where give up or success is set to T. Thus one of these conditions in the if statements must hold (the first conjunct of postcondition). Variable valid may get an arbitrary value if linkages is not zero. But it cannot be greater than linkages by the assume statement (the second conjunct of postcondition). The variable linkages gets an arbitrary value near the end of the while body. But it cannot be greater than 5000 (the fourth conjunct), and always equal to the variable canonical (the third conjunct of postcondition). Despite the complexity of the postcondition and the while body, our approach is able to compute an invariant in 13 iterations on average. The execution time and number of iterations vary significantly. They range from 2.22s to 196.52s and 1 to 84 with standard deviations 31.01 and 13.33 respectively. By Chebyshev's inequality <ref type="bibr" target="#b26">[27]</ref>, our technique infers an invariant within two minutes with probability 0.876. One of the found invariants is the following:</p><formula xml:id="formula_21">success ⇒ (valid ≤ linkages ∧ linkages ≤ 5000 ∧ canonical = linkages) success ⇒ (¬search ∨ count &gt; words ∨ valid = 0) success ⇒ (count &gt; words ∨ cutoff = maxcost ∨ (canonical = 0 ∧ valid = 0 ∧ linkages = 0)) give up ⇒ ((valid = 0 ∧ linkages = 0 ∧ canonical = linkages)∨ (canonical = 0 ∧ valid ≤ linkages ∧ linkages ≤ 5000 ∧ canonical = linkages)) give up ⇒ (cutoff = maxcost ∨ count &gt; words∨ (canonical = 0 ∧ valid = 0 ∧ linkages = 0)) give up ⇒ (¬search ∨ count &gt; words ∨ valid = 0)</formula><p>This invariant describes the conditions when success or give up are true. For instance, it specifies that valid ≤ linkages ∧ linkages ≤ 5000 ∧ canonical = linkages should hold if success is true. In <ref type="figure" target="#fig_4">Figure 3</ref>, we see that success is assigned to T at line 18 when valid is positive. Yet valid is set to 0 at line 14. Hence line 16 and 17 must be executed. Thus, the first (valid ≤ linkages) and the third (canonical = linkages) conjuncts hold. Moreover, line 13 ensures that the second conjunct (linkages ≤ 5000) holds as well.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Discussion and Future Work</head><p>The complexity of our technique depends on the distribution of invariants. It works most effectively if invariants are abundant. The number of iterations depends on the outcomes of coin tossing. The main loop may reiterate several times or not even terminate. Our experiments suggest that there are sufficiently many invariants in practice. For each of the 2500 (= 5 × 500) runs, our technique always generates an invariant. On average, it takes 12.5 iterations for the most complicated case parser.</p><p>Since plentiful of invariants are available, it may appear that one of them can be generated by merely coin tossing. But this is not the case. In parser, our technique does not terminate if the under-and over-approximations are the strongest and weakest approximations respectively. Indeed, 6695 membership and 820 equivalence queries are resolved by invariant approximations in this case. Invariant approximations are essential to our framework.</p><p>For simplicity, predicates are collected from program texts, pre-and postconditions in our experiments. Existing predicate discovery techniques can certainly be deployed. Better invariant approximations (ι and ι) computed by static analysis can be used in our framework. More precise approximations of ι and ι will improve the performance by reducing the number of iterations via increasing the number of resolvable queries. Also, a variety of techniques from static analysis or loop invariant generation <ref type="bibr" target="#b11">[12,</ref><ref type="bibr" target="#b16">17,</ref><ref type="bibr" target="#b27">28,</ref><ref type="bibr" target="#b15">16,</ref><ref type="bibr" target="#b18">19,</ref><ref type="bibr" target="#b20">21,</ref><ref type="bibr" target="#b22">23,</ref><ref type="bibr" target="#b24">25]</ref> in particular can be integrated to resolve queries in addition to one SMT solver with coin tossing. Such a set of multiple teachers will increase the number of resolvable queries because it suffices to have just one teacher to answer the query to proceed.</p><p>In comparison with previous invariant generation techniques <ref type="bibr" target="#b11">[12,</ref><ref type="bibr" target="#b16">17,</ref><ref type="bibr" target="#b27">28,</ref><ref type="bibr" target="#b15">16,</ref><ref type="bibr" target="#b18">19,</ref><ref type="bibr" target="#b20">21,</ref><ref type="bibr" target="#b22">23,</ref><ref type="bibr" target="#b24">25]</ref>, we have the following distinguishing features. (1) We do not use fixed point computation nor any static or dynamic analyses. Instead, we use algorithmic learning <ref type="bibr" target="#b5">[6]</ref> to search for loop invariants. (2) Templates for invariants are not needed. Our approach does not restrict to specific forms of invariants imposed by templates. (3) We employ SMT solvers instead of theorem provers in our technique. This allows us to take advantages of recent development in efficient SMT algorithms. (4) Our method can be extended and combined with the existing loop invariant techniques.</p><p>Related Work Existing impressive techniques for invariant generation can be adopted as the query resolution components (teachers) in our algorithmic learningbased framework. Srivastava and Gulwani <ref type="bibr" target="#b27">[28]</ref> devise three algorithms, two of them use fixed point computation and the other uses a constraint based approach <ref type="bibr" target="#b16">[17,</ref><ref type="bibr" target="#b15">16]</ref> to derive quantified invariants. Gupta and Rybalchenko <ref type="bibr" target="#b18">[19]</ref> present an efficient invariant generator. They apply dynamic analysis to make invariant generation more efficient. Flanagan and Qadeer use predicate abstraction to infer universally quantified loop invariants <ref type="bibr" target="#b11">[12]</ref>. Predicates over Skolem constants are used to handle unbounded arrays. McMillan <ref type="bibr" target="#b24">[25]</ref> extends a paramodulationbased saturation prover to an interpolating prover that is complete for universally quantified interpolants. He also solves the problem of divergence in interpolatedbased invariant generation.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8">Conclusions</head><p>By combining algorithmic learning, decision procedures, and predicate abstraction, we introduced a technique for invariant generation. The new technique finds invariants guided by query resolution algorithms. Algorithmic learning gives a platform to integrate various techniques for invariant generation; it suffices to design new query resolution algorithms based on existing techniques. The learning algorithm will utilize the information provided by these techniques.</p><p>To illustrate the flexibility of algorithmic learning, we deploy a randomized query resolution algorithm. When a membership query cannot be resolved, a random answer is returned to the learning algorithm. Since the learning algorithm does not commit to any specific invariant beforehand, it always finds a solution consistent with query results. Our experiments indeed show that algorithmic learning is able to infer non-trivial invariants with this na¨ıvena¨ıve membership resolution. It is important to exploit the power of coin tossing in our technique.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A An Example of the CDNF Algorithm</head><p>Let us apply Algorithm 1 to learn the Boolean formula b 0 ⊕ b 1 . The algorithm first makes the query EQ(T) <ref type="figure" target="#fig_9">(Figure 4</ref>). The teacher responds by giving the valuation µ 1 (b 0 ) = µ 1 (b 1 ) = 0 (denoted by µ 1 (b 0 b 1 ) = 00). Hence Algorithm 1 assigns ∅ to S 1 , F to H 1 , and µ 1 to a 1 . Next, the query EQ(H 1 ) is made and the teacher responds with the valuation µ 2 (b 0 b 1 ) = 01. Since µ 2 |= F, we have I = {1}. Algorithm 1 now walks from µ 2 towards a 1 . Since flipping µ 2 (b 1 ) would not give us a model of b 0 ⊕ b 1 , we have S 1 = {µ 2 } and H 1 = b 1 . In this example, Algorithm 1 generates (b 1 ∨ b 0 ) ∧ (¬b 0 ∨ ¬b 1 ) as a representation for the unknown Boolean formula b 0 ⊕ b 1 . Observe that the generated Boolean formula is a conjunction of two Boolean formulae in disjunctive normal form.</p><formula xml:id="formula_22">equivalence query answer I Si Hi ai T µ1(b0b1) = 00 S1 = ∅ H1 = F a1 = µ1 F µ2(b0b1) = 01 {1} S1 = {µ2} H1 = b1 b1 µ3(b0b1) = 11 ∅ S2 = ∅ H2 = F a2 = µ3 b1 ∧ F µ4(b0b1) = 01 {2} S2 = {µ5} † H2 = ¬b0 b1 ∧ ¬b0 µ6(b0b1) = 10 {1, 2} S1 = {µ2, µ6} S2 = {µ5, µ7} † H1 = b1 ∨ b0 H2 = ¬b0 ∨ ¬b1 (b1 ∨ b0) ∧ (¬b0 ∨ ¬b1)</formula><p>YES † µ5(b0b1) = 10 and µ7(b0b1) = 01 </p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head></head><label></label><figDesc>This work was supported by (A) the Engineering Research Center of Excellence Program of Korea Ministry of Education, Science and Technology(MEST) / Korea Science and Engineering Foundation(KOSEF) Grant Number R11-2008-007-01002- 0, (B) the Brain Korea 21 Project, School of Electrical Engineering and Computer Science, Seoul National University, (C) SK Telecom, and (D) National Science Coun- cil of Taiwan Grant Numbers 95-2221-E-001-024-MY3 and 97-2221-E-001-006-MY3.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head></head><label></label><figDesc>Example {i = 0} while i &lt; 10 do b := nondet; if b then i := i + 1 end {i = 10 ∧ b}</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head></head><label></label><figDesc>Fig. 1. Overview</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>I</head><label></label><figDesc>:= {i : µ |= Hi}; 2 if I = ∅ then goto 0; foreach i ∈ I do µi := µ; walk from µi towards ai while keeping µi |= λ; Si := Si ∪ {µi ⊕ ai}; end Hi := MDNF (Si)[B → B ⊕ ai] for i = 1, . . . , t; 3 goto 1;</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Lemma 3 .</head><label>3</label><figDesc>Let A be a set of atomic propositions, θ ∈ Prop A , β ∈ Bool B(A) , and ν a valuation for Var (A). Then 1. ν |= θ if and only if α * (ν) |= α(θ); and 2. ν |= γ(β) if and only if α * (ν) |= β.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>(</head><label></label><figDesc>* ι: an under-approximation; ι: an over-approximation *) Input: a valuation µ for B(A) θ := γ * (µ); if SMT (θ) → UNSAT then return NO; if SMT (θ ∧ ¬ι) → UNSAT then return YES ; if SMT (θ ∧ ¬ι) → ν then return NO; abort with θ;</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>6</head><label></label><figDesc>.1 ide-ide-tape from Linux IDE Driver { ret = 0 ∧ bh b count ≤ bh b size } 1 while n &gt; 0 do 2 if (bh b size − bh b count) &lt; n then count := bh b size − bh b count 3 else count := n; 4 b := nondet; 5 if b then ret := 1; 6 n := n − count; bh b count := bh b count + count; 7 if bh b count = bh b size then 8 bh b size := nondet; bh b count := nondet; bh b count := 0; 9 end { n = 0 ∧ bh b count ≤ bh b size }</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Fig. 2 .</head><label>2</label><figDesc>Fig. 2. A Sample Loop in Linux IDE Driver</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>{</head><label></label><figDesc>Fig. 3. A Sample Loop in SPEC2000 Benchmark PARSER</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Fig. 4 .</head><label>4</label><figDesc>Fig. 4. Learning b0 ⊕ b1</figDesc></figure>

			<note place="foot" n="3"> Complete proofs are in [20]</note>

			<note place="foot" n="4"> The source code can be found in function idetape copy stage from user() of drivers/ide/ide-tape.c in Linux 2.6.28 5 The source code can be found in function loop() of CINT2000/197.parser/main.c in SPEC2000.</note>
		</body>
		<back>

			<div type="acknowledgement">
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">Synthesis of interface specifications for java classes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Alur</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Cern´ycern´y</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Madhusudan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Nam</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2005" />
			<publisher>POPL, ACM</publisher>
			<biblScope unit="page" from="98" to="109" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Symbolic compositional verification by learning assumptions</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Alur</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Madhusudan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Nam</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">LNCS</title>
		<imprint>
			<biblScope unit="volume">3576</biblScope>
			<biblScope unit="page" from="548" to="562" />
			<date type="published" when="2005" />
			<publisher>Springer</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Learning regular sets from queries and counterexamples</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Angluin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Information and Computation</title>
		<imprint>
			<biblScope unit="volume">75</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="87" to="106" />
			<date type="published" when="1987" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Shape analysis by predicate abstraction</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Balaban</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Pnueli</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Zuck</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">LNCS</title>
		<imprint>
			<biblScope unit="volume">3385</biblScope>
			<date type="published" when="2005" />
			<publisher>Springer</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Refining approximations in software predicate abstraction</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Ball</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Cook</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Das</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">K</forename><surname>Rajamani</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">LNCS</title>
		<imprint>
			<biblScope unit="volume">2988</biblScope>
			<biblScope unit="page" from="388" to="403" />
			<date type="published" when="2004" />
			<publisher>Springer</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">Exact learning boolean functions via the monotone theory. Information and Computation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><forename type="middle">H</forename><surname>Bshouty</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1995" />
			<biblScope unit="volume">123</biblScope>
			<biblScope unit="page" from="146" to="153" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Learning minimal separating DFA&apos;s for compositional verification</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><forename type="middle">F</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Farzan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">M</forename><surname>Clarke</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><forename type="middle">K</forename><surname>Tsay</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><forename type="middle">Y</forename><surname>Wang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">LNCS</title>
		<imprint>
			<biblScope unit="volume">5505</biblScope>
			<biblScope unit="page" from="31" to="45" />
			<date type="published" when="2009" />
			<publisher>Springer</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Counterexample-guided abstraction refinement</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">M</forename><surname>Clarke</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Grumberg</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Jha</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Lu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Veith</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">LNCS</title>
		<imprint>
			<biblScope unit="volume">1855</biblScope>
			<biblScope unit="page" from="154" to="169" />
			<date type="published" when="2000" />
			<publisher>Springer</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Learning assumptions for compositional verification</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">M</forename><surname>Cobleigh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Giannakopoulou</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">S</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">LNCS</title>
		<imprint>
			<biblScope unit="volume">2619</biblScope>
			<biblScope unit="page" from="331" to="346" />
			<date type="published" when="2003" />
			<publisher>Springer</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title level="m" type="main">Automatic discovery of linear restraints among variables of a program</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Cousot</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Halbwachs</surname></persName>
		</author>
		<editor>POPL, ACM</editor>
		<imprint>
			<date type="published" when="1978" />
			<biblScope unit="page" from="84" to="96" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">The Yices SMT solver</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Dutertre</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><forename type="middle">D</forename><surname>Moura</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SRI International</title>
		<imprint>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
<note type="report_type">Technical report</note>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title level="m" type="main">Predicate abstraction for software verification</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Flanagan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Qadeer</surname></persName>
		</author>
		<editor>POPL, ACM</editor>
		<imprint>
			<date type="published" when="2002" />
			<biblScope unit="page" from="191" to="202" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Construction of abstract state graphs with pvs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Graf</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Sa¨ıdisa¨ıdi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">LNCS</title>
		<imprint>
			<biblScope unit="volume">1254</biblScope>
			<biblScope unit="page" from="72" to="83" />
			<date type="published" when="1997" />
			<publisher>Springer</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<title level="m" type="main">Control-flow refinement and progress invariants for bound analysis</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Gulwani</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Jain</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Koskinen</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2009" />
			<publisher>PLDI, ACM</publisher>
			<biblScope unit="page" from="375" to="385" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title level="m" type="main">Lifting abstract interpreters to quantified logical domains</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Gulwani</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Mccloskey</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Tiwari</surname></persName>
		</author>
		<editor>POPL, ACM</editor>
		<imprint>
			<date type="published" when="2008" />
			<biblScope unit="page" from="235" to="246" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<title level="m" type="main">Program analysis as constraint solving</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Gulwani</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Srivastava</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Venkatesan</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2008" />
			<publisher>PLDI, ACM</publisher>
			<biblScope unit="page" from="281" to="292" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Constraint-based invariant inference over predicate abstraction</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Gulwani</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Srivastava</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Venkatesan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">LNCS</title>
		<imprint>
			<biblScope unit="volume">5403</biblScope>
			<biblScope unit="page" from="120" to="135" />
			<date type="published" when="2009" />
			<publisher>Springer</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Automated assumption generation for compositional verification</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Gupta</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><forename type="middle">L</forename><surname>Mcmillan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Fu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">LNCS</title>
		<imprint>
			<biblScope unit="volume">4590</biblScope>
			<biblScope unit="page" from="420" to="432" />
			<date type="published" when="2007" />
			<publisher>Springer</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Invgen: An efficient invariant generator</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Gupta</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Rybalchenko</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">LNCS</title>
		<imprint>
			<biblScope unit="volume">5643</biblScope>
			<biblScope unit="page" from="634" to="640" />
			<date type="published" when="2009" />
			<publisher>Springer</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Deriving invariants by algorithmic learning, decision procedures, and predicate abstraction</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Jung</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Kong</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Bow-Yaw</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Yi</surname></persName>
		</author>
		<idno>ROSAEC-2009-004</idno>
	</analytic>
	<monogr>
		<title level="m">Research On Software Analysis for Error-Free Computing</title>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
<note type="report_type">Technical Memorandum</note>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Finding loop invariants for programs over arrays using a theorem prover</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Kovács</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Voronkov</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">FASE. LNCS</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2009" />
			<biblScope unit="page" from="470" to="485" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Decision Procedures an algorithmic point of view</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Kroening</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Strichman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">EATCS</title>
		<imprint>
			<date type="published" when="2008" />
			<publisher>Springer</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Constructing quantified invariants via predicate abstraction</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">K</forename><surname>Lahiri</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">E</forename><surname>Bryant</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">E</forename><surname>Bryant</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">LNCS</title>
		<imprint>
			<biblScope unit="volume">2937</biblScope>
			<biblScope unit="page" from="267" to="281" />
			<date type="published" when="2004" />
			<publisher>Springer</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">A symbolic approach to predicate abstraction</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">K</forename><surname>Lahiri</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">E</forename><surname>Bryant</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">E</forename><surname>Bryant</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Cook</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">LNCS</title>
		<imprint>
			<biblScope unit="volume">2715</biblScope>
			<biblScope unit="page" from="141" to="153" />
			<date type="published" when="2003" />
			<publisher>Springer</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<monogr>
		<title level="m" type="main">Quantified invariant generation using an interpolating saturation prover</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><forename type="middle">L</forename><surname>Mcmillan</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2008" />
			<publisher>Springer</publisher>
			<biblScope unit="page" from="413" to="427" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Boolean heaps</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Podelski</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Wies</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">LNCS</title>
		<imprint>
			<biblScope unit="volume">3672</biblScope>
			<biblScope unit="page" from="268" to="283" />
			<date type="published" when="2005" />
			<publisher>Springer</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><forename type="middle">H</forename><surname>Rosen</surname></persName>
		</author>
		<title level="m">Discrete Mathematics and Its Applications</title>
		<imprint>
			<publisher>McGraw-Hill Higher Education</publisher>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<monogr>
		<title level="m" type="main">Program verification using templates over predicate abstraction</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Srivastava</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Gulwani</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2009" />
			<publisher>PLDI, ACM</publisher>
			<biblScope unit="page" from="223" to="234" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<monogr>
		<title level="m" type="main">Full functional verification of linked data structures</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Zee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Kuncak</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Rinard</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2008" />
			<publisher>PLDI, ACM</publisher>
			<biblScope unit="page" from="349" to="361" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<monogr>
		<title level="m" type="main">An integrated proof language for imperative programs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Zee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Kuncak</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">C</forename><surname>Rinard</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2009" />
			<publisher>PLDI, ACM</publisher>
			<biblScope unit="page" from="338" to="351" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
