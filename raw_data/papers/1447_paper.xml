<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2019-03-26T16:39+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Temporal Action-Graph Games: A New Representation for Dynamic Games</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Albert</forename><forename type="middle">Xin</forename><surname>Jiang</surname></persName>
							<email>jiang@cs.ubc.ca</email>
							<affiliation key="aff0">
								<orgName type="department" key="dep1">Department of Computer Science</orgName>
								<orgName type="department" key="dep2">Department of Computer Science</orgName>
								<orgName type="institution" key="instit1">University of British Columbia</orgName>
								<orgName type="institution" key="instit2">University of British Columbia</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kevin</forename><surname>Leyton-Brown</surname></persName>
							<email>kevinlb@cs.ubc.ca</email>
							<affiliation key="aff0">
								<orgName type="department" key="dep1">Department of Computer Science</orgName>
								<orgName type="department" key="dep2">Department of Computer Science</orgName>
								<orgName type="institution" key="instit1">University of British Columbia</orgName>
								<orgName type="institution" key="instit2">University of British Columbia</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Avi</forename><surname>Pfeffer</surname></persName>
							<email>apfeffer@cra.com</email>
							<affiliation key="aff0">
								<orgName type="department" key="dep1">Department of Computer Science</orgName>
								<orgName type="department" key="dep2">Department of Computer Science</orgName>
								<orgName type="institution" key="instit1">University of British Columbia</orgName>
								<orgName type="institution" key="instit2">University of British Columbia</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Charles</forename><forename type="middle">River</forename><surname>Analytics</surname></persName>
							<affiliation key="aff0">
								<orgName type="department" key="dep1">Department of Computer Science</orgName>
								<orgName type="department" key="dep2">Department of Computer Science</orgName>
								<orgName type="institution" key="instit1">University of British Columbia</orgName>
								<orgName type="institution" key="instit2">University of British Columbia</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Temporal Action-Graph Games: A New Representation for Dynamic Games</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>In this paper we introduce temporal action graph games (TAGGs), a novel graphical representation of imperfect-information extensive form games. We show that when a game involves anonymity or context-specific utility independencies, its encoding as a TAGG can be much more compact than its direct encoding as a multiagent influence diagram (MAID). We also show that TAGGs can be understood as indirect MAID encodings in which many deterministic chance nodes are introduced. We provide an algorithm for computing with TAGGs, and show both theoretically and empirically that our approach improves significantly on the previous state of the art.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Game theory is the main formal model used to study decision-making in the presence of other rational agents (see e.g., <ref type="bibr" target="#b4">[5]</ref>). In this paper we investigate game-theoretic models that include sequential moves (so-called extensiveform games) and utility uncertainty (so-called Bayesian games, or "chance nodes" in the extensive form). When agents move sequentially and are able to perfectly observe all moves, extensive-form games are said to exhibit perfect information; otherwise, extensive-form games exhibit imperfect information.</p><p>In the last decade, researchers have begun to study compact representations of various game types, inspired by the success of probabilistic graphical models. For imperfectinformation extensive form games, the most influential model is multiagent influence diagrams, or MAIDs <ref type="bibr" target="#b10">[11]</ref>. (Game networks are a very similar representation and were invented concurrently <ref type="bibr" target="#b12">[13]</ref>.) MAIDs are compact when players' utility functions exhibit independencies; such compactness can also be leveraged for computational benefit <ref type="bibr" target="#b1">[2]</ref>. When represented as a MAID, the game of Example 1 contains very little structure, meaning that computation would be highly inefficient. However, the game really is highly structured: agents' payoffs exhibit context-specific independence (utility depends only on the number of cars in the chosen lane) and agents' payoffs exhibit anonymity (utility depends on the numbers of other agents taking given actions, not on these agents' identities). The problem with a straightforward MAID representation of this game is that it does not capture either of these kinds of payoff structure.</p><p>A wider variety of compact game representations exist for simultaneous-move (i.e., non-extensive-form) games <ref type="bibr" target="#b9">[10]</ref>. In particular, several of these game representations can compactly represent anonymity and context-specific independence (CSI) structures (see, e.g., <ref type="bibr" target="#b19">[20,</ref><ref type="bibr" target="#b13">14]</ref>). ActionGraph Games (AGGs) unify these past representations by compactly representing both anonymity and CSI while still retaining the ability to represent any game <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b8">9]</ref>. Furthermore, structure in AGGs can be leveraged for computational benefit <ref type="bibr" target="#b7">[8]</ref>. AGGs have been used to model realworld systems such as auctions for search engine keywords <ref type="bibr" target="#b20">[21]</ref>. However, AGGs are unable to represent the game presented in Example 1 because they cannot describe sequential moves or imperfect information.</p><p>In this paper we present a new representational framework called Temporal Action-Graph Games (TAGGs) that allows us to capture this kind of structure. Like AGGs, TAGGs can represent anonymity and CSI, but unlike AGGs they can also represent games with dynamics, imperfect information and uncertainty. We first define the representation of TAGGs, and then show formally how they define a game using an induced Bayesian network (BN). We demonstrate that TAGGs can represent any MAID, but can also represent situations that are hard to capture naturally as MAIDs. If the TAGG representation of a game contains anonymity or CSI, the induced BN will have special structure that can be exploited by inference algorithms. We present an algorithm for computing expected utility of TAGGs that exploits this structure. Our algorithm first transforms the induced BN to another BN that represents the structure more explicitly, then computes expected utility using a specialized inference algorithm on the transformed BN. We show that it performs better than using a MAID in which the structure is not represented explicitly, and better than using a standard BN inference algorithm on the transformed BN.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Representation</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">AGG</head><p>We first introduce the core concepts of (simultaneousmove) AGGs. An Action-Graph Game (AGG) is a game played by a set of agents N = {1, . . . , n} on a set of action nodes A. To play the game, each agent i simultaneously chooses an action node A i ∈ A i , where A i ⊆ A. Each action node thus corresponds to an action choice that is available to one or more of the agents. Once the agents have made their choices, for each action node A ∈ A, an action count is tallied, which is the number of agents that have chosen A. The action graph is a directed graph on the action nodes A. We say A ′ is a neighbor of A if there is an edge from A ′ to A. An agent's utility depends only on the node she chose and the action counts on the neighbors of the chosen node. This allows us to represent the utilities of the game by specifying a utility function U A for each action node A, that maps from the set of configurations over the neighbors of A (vectors of action counts) to a real value.</p><p>Consider a simultaneous-move version of Example 1, where all the cars arrive at the tollbooth together in one wave, and have to pick lanes simultaneously. A driver's utility depends on the number of cars that chose the same lane. This game can be compactly represented as an AGG. We have one action node corresponding to each lane of the tollbooth. Each agent can choose any of the lanes, so A i = A for all i. The only edges in the action graph are from each action node to itself, since the utility of choosing a lane only depends on the action count on the same lane.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">TAGG</head><p>At a high level, Temporal Action-Graph Games (TAGGs) extend the AGG representation by introducing the concepts of time, uncertainty and imperfect information, while adapting the AGG concepts of action nodes and actionspecific utility functions to the dynamic setting. We first give an informal description of these concepts.</p><p>Temporal structure. A TAGG describes a dynamic game played over a series of time steps 1, . . . , T , on a set of action nodes A. At each time step a version of a static AGG is played by a subset of agents on A, and the action counts on the action nodes are accumulated.</p><p>Chance variables. TAGGs model uncertainty via chance variables. Like random variables in a Bayes net, a chance variable is associated with a set of parents and a conditional probability table (CPT). The parents may be action nodes or other chance variables. Each chance variable is associated with an instantiation time; once instantiated, its value stays the same for the rest of the game.</p><p>Decisions. At each time step one or more agents move simultaneously, represented by agent-specific decisions. TAGGs model imperfect information by allowing each agent to condition his decision on observed values of a given subset of decisions, chance variables, and the previous time step's action counts.</p><p>Action nodes. Each decision is a choice of one from a number of available action nodes. As in AGGs, the same action may be available to more than one player. Action nodes provide a time-dependent tally: the action count for each action A in each time step τ is the number of times A has been chosen during the time period 1, . . . , τ .</p><p>Utility functions. There is a utility function U τ A associated with each action A at each time τ , which specifies the utility a player receives at time τ for having chosen action A. Each U τ A has a set of parents which must be action nodes or chance variables. The utility of playing action A depends only on what happens over these parents. An agent who took action A (once) may receive utility at multiple times (e.g., short-term cost and long-term benefit); this is captured by associating a set of payoff times with each decision. An agent's overall utility is defined as the sum of the utilities received at all time steps.</p><p>Play of a TAGG can be summarized as follows: (e) for each action A, utility function U τ A is evaluated, with this amount of utility accruing to every agent who took action a at a decision whose payoff times include τ ; the result is not revealed to any of the players. <ref type="bibr" target="#b0">1</ref> 3. At the end of the game, each agent receives the sum of all utility allocations throughout the game.</p><p>Intuitively, the process can be seen as a sequence of AGGs played over time. At each time step τ , the players that have a decision at time τ participate in a simultaneous-move AGG on the set of action nodes, whose action counts are initialized to be the counts at τ − 1. Each action A's utility function is U τ A and A's neighbors in the action graph correspond to the parents of U τ A . For the tollbooth games of Example 1, the TAGG has actions corresponding to lanes, and the action graphs are the same across different times, containing only self edges from each action to itself.</p><p>Before formally defining TAGGs, we need to first define the concept of a configuration at time τ over a set of action nodes, decisions and chance variables, which is intuitively an instantiation at time τ of a corresponding set of variables.</p><p>Definition 2: Given a set of action nodes A, a set of decisions D, a set of chance variables X , and a set B ⊆ A ∪ X ∪ D, a configuration at time τ over B, denoted as C τ B , is a |B|-tuple of values, one for each node in B. For each node b ∈ B, the corresponding element in C τ B , denoted as C τ (b), must satisfy the following:</p><formula xml:id="formula_0">• if b ∈ A, C τ (b)</formula><p>is an integer in {0, . . . , |D|} specifying the action count on b at τ , i.e. the number of times action b has been chosen during the time period 1, . . . , τ .</p><p>• if b ∈ D, C τ (b) is an action in A, specifying the action chosen at D.</p><p>• if b ∈ X , C τ (b) is a value from the domain of the random variable, Dom <ref type="bibr">[b]</ref>.</p><p>Let C τ B be the set of all configurations at τ over B.</p><p>We now offer formal definitions of chance variables, decisions, and utility functions.</p><p>Definition 3: A chance variable X is defined by:</p><p>1. a domain Dom <ref type="bibr">[X]</ref>, which is a nonempty finite set;</p><p>2. a set of parents Pa <ref type="bibr">[X]</ref>, which are a set of chance variables and/or actions;</p><p>3. an instantiation time t(X), which specifies the time at which the action counts in Pa[X] are instantiated;</p><p>4. a CPT Pr(X|Pa <ref type="bibr">[X]</ref>), which specifies the conditional probability distribution of X given each configuration C</p><formula xml:id="formula_1">t(X) Pa[X] .</formula><p>same payoff time τ , then the agent receives twice the value of U τ A .</p><p>We require that each chance variable's instantiation time be no earlier than its parent chance variable's instantiation times, i.e. if chance variable X ′ ∈ Pa[X], then t(X ′ ) ≤ t(X).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Definition 4:</head><p>A decision D is defined by:</p><p>1. the player making the decision, pl(D). A player may make multiple decisions, but not more than one at the same time step. The set of decisions belonging to a player ℓ is denoted by Decs <ref type="bibr">[ℓ]</ref>.</p><formula xml:id="formula_2">2. its decision time t(D) ∈ {1, . . . , T }.</formula><p>3. its action set Dom <ref type="bibr">[D]</ref>, a nonempty set of actions.</p><p>4. the set of payoff times pt(D) ⊆ {1, . . . , T }. We assume that τ ≥ t(D) for all τ ∈ pt(D).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">its observation set O[D]</head><p>: a set of decisions, actions, and chance variables, whose configuration at time</p><formula xml:id="formula_3">t(D) − 1 (i.e. C t(D)−1 O[D] ) is observed by pl(D) prior to making the decision. We require that if decision D ′ is an observation of D, then t(D ′ ) &lt; t(D). Further- more if chance variable X is an observation of D, then t(X) &lt; t(D).</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Definition 5:</head><p>Each action A at each time τ is associated with one utility function U τ A . Each U τ A is associated with a set of parents Pa <ref type="bibr">[U τ A ]</ref>, which is a set of actions and chance variables. We require that if chance variable</p><formula xml:id="formula_4">X ∈ Pa[U τ A ], then t(X) ≤ τ . Each utility function U τ A is a mapping from the set of configurations C τ Pa[U τ A ]</formula><p>to a real value.</p><p>We can now formally define TAGGs.</p><formula xml:id="formula_5">Definition 6: A Temporal Action-Graph Game (TAGG) is a tuple (N, T, A, X , D, U)</formula><p>, where:</p><p>1. N = {1, . . . , n} is a set of players.</p><p>2. T is the duration of the game.</p><p>3. A is a set of actions.</p><p>4. X is a set of chance variables. Let G be the induced directed graph over X . We require that G be a directed acyclic graph (DAG).</p><p>5. D is the set of decisions. we require that each decision</p><formula xml:id="formula_6">D's action set Dom[D] ⊆ A. 6. U = {U τ A : A ∈ A, 1 ≤ τ ≤ T } is the set of utility functions.</formula><p>First, let us see how to represent Example 1 as a TAGG. The set N corresponds to the cars. The duration T = 4. We have one action node for each lane. For each time τ , we have five decisions, each belonging to a car that arrives at time τ . The action set for each decision is the entire set A. The payoff time for each decision is the time the decision is made, i.e., pt(D) = {t(D)}. Each decision has all actions as observations. For each A and τ , the utility U τ A has A as its only parent. The representation size of each utility function is at most n; the size of the entire TAGG is O(|A|T n).</p><p>The TAGG representation is useful beyond compactly representing MAIDs. The representation can also be used to specify information structures that would be difficult to represent in a MAID. For example, we can represent games in which agents' abilities to observe the decisions made by previous agents depend on what actions these agents took.</p><p>Example 7: There are 2T ice cream vendors, each of which must choose a location along a beach. For every day from 1 to T , two of the vendors simultaneously set up their ice cream stands. Each vendor lives in one of the locations. When a vendor chooses an action, it knows the location of vendors who set up stands in previous days in the location where it lives or in one of the neighboring locations. The payoff to a vendor in a given day depends on how many vendors set up stands in the same location or in a neighboring location.</p><p>Example 7 can be represented as a TAGG, the key elements of which are as follows. There is an action A for each location. Each player j has one decision D j , whose observations include actions for the location j lives in and neighboring locations. The payoff time for each decision is T , and the utility function U T A has A and its neighboring locations as parents.</p><p>Let us consider the size of a TAGG. It follows from Definition 6 that the space bottlenecks of the representation are the CPTs Pr(X|Pa <ref type="bibr">[X]</ref>) and the utility functions U τ A , which have polynomial sizes when the numbers of their parents are bounded by a constant.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Lemma 8 :</head><p>Given TAGG (N, T, A, X , D, U), if max X∈X |Pa[X]| and max U∈U |Pa <ref type="bibr">[U ]</ref>| are bounded by a constant, then the size of the TAGG is bounded by a polynomial in max X∈X Dom <ref type="bibr">[X]</ref>, |X |, |D|, |U|, and T .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Strategies</head><p>We now define an agent's strategies in a TAGG. We start with pure strategies, where at each decision D, an action is chosen deterministically as a function of observed information, i.e., the configuration C t(D)−1 O <ref type="bibr">[D]</ref> . In game theory, pure strategies are not generally sufficient (e.g., for guaranteeing existence of Nash equilibrium). We often want to consider strategies in which players randomize over their choices when making decisions. A mixed strategy of a player i is a probability distribution over pure strategies of i. Use of mixed strategies is problematic, because the choices at different decisions may be correlated, which allows a player to condition her later choice on her earlier decisions, regardless of whether these earlier decisions are observed by her. In other words, mixed strategies allow a player to act as if she observes more information than what is specified by the game. We thus restrict our attention to behavior strategies, in which the action choices at different decisions are randomized independently.</p><formula xml:id="formula_7">Definition 9: A behavior strategy at decision D is a func- tion σ D : C t(D)−1 O[D]</formula><p>→ ϕ(Dom <ref type="bibr">[D]</ref>), where ϕ(Dom <ref type="bibr">[D]</ref>) is the set of probability distributions over Dom <ref type="bibr">[D]</ref>. A behavior strategy for player i, denoted σ i , is a tuple consisting of a behavior strategy for each of her decisions. A behavior strategy profile σ = (σ 1 , . . . , σ n ) consists of a behavior strategy σ i for all i.</p><p>An agent has perfect recall when she never forgets her action choices and observations at earlier decisions. Equilibria in behavior strategies always exist in games of perfect recall <ref type="bibr" target="#b11">[12]</ref>. However, strategies in perfect recall games can be computationally expensive to represent and reason about. In single-agent settings, perfect recall can be relaxed using limited memory influence diagrams (LIMIDs) <ref type="bibr" target="#b16">[17]</ref>. For multi-agent imperfect recall games, existence of Nash equilibria in behavior strategies is not guaranteed; nevertheless one might still want to search for Nash equilibria using heuristic algorithms. There have also been positive results for certain types of imperfect recall games, where information irrelevant to the utility can be safely forgotten, e.g. <ref type="bibr" target="#b14">[15]</ref>. The TAGG representation does not enforce perfect recall; TAGGs can represent perfect recall games as well as non-perfect-recall games.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.4">Expected Utility</head><p>Now we use the language of Bayesian networks to formally define an agent's expected utility in a TAGG given a behavior strategy profile σ. Specifically, we define an induced BN that formally describes how the TAGG is played out. The induced BN is over a set of random variables representing decisions, chance variables, action counts and utilities. Given a behavioral strategy profile, decisions, chance variables and utilities can naturally be understood as random variables. On the other hand, action counts are timedependent. Thus, we have a separate action count variable for each action at each time step.</p><p>Definition 10: Let A ∈ A be an action and τ ∈ {1, ..., T } be a time point. A τ denotes the action count variable representing the number of times A was chosen from time 1 to time τ . Let A 0 be the variable which is constantly 0.</p><p>We would like to define expected utility for each player, which is the sum of expected utilities of her decisions. On the other hand, the utility functions in TAGGs are action specific. To bridge the gap, we create new decision-payoff variables in the induced BN that represent the utilities of decisions received at each of their payoff time points.</p><p>Definition 11: Given a TAGG and a behavior strategy profile σ, the induced BN is defined over the following variables: for each decision D ∈ D there is a variable which by abuse of notation we shall also denote by D; for each chance variable X ∈ X there is a variable which we shall also denote by X; there is a variable A τ for each action A ∈ A and time step τ ∈ {1, ..., T }; for each utility function U τ A for actions A ∈ A and time points τ ∈ {1, ..., T }, there is a utility variable also denoted by U This follows from the definition of TAGGs and the way we set up the actual parents in Definition 11.</p><note type="other">τ A ; for each decision D and each time τ ∈ pt(D), there is a decision-payoff variable u τ D . We define the actual parents of each variable V , denoted APa[V ], as follows: The actual parents of a decision variable D are the variables corresponding to O[D], with each action A k ∈ O[D] replaced by A t(D)−1 k . The actual parents of an action count variable A τ are all decision variables D whose decision time t(D) ≤ τ and A ∈ Dom[</note><p>By Theorem 12, the induced BN defines a joint probability distribution over its variables, which we denote by P σ . Given σ, denote by E σ [V ] the expected value of variable V in the induced BN. We are now ready to define the expected utility to players under behavior strategy profiles.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Definition 13 :</head><p>The expected utility to player ℓ under behavior strategy profile σ is EU σ (ℓ) = use squares to represent decision variables, they are random variables and not actual decisions as in influence diagrams.</p><formula xml:id="formula_8">D∈Decs[ℓ] τ ∈pt(D) E σ [u τ D ].</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.5">The Induced MAID of a TAGG</head><p>Given a TAGG we can construct a MAID that describes the same game. We use a similar construction as the induced Bayesian Network, but with two differences. First, instead of decision variables with CPDs assigned by σ, we have decision nodes in the MAID. Second, each decision-payoff variable u τ D becomes a utility node for player pl(D) in the MAID. The resulting MAID describes the same game as the TAGG, because it offers agents the same strategies and their expected utilities are defined by the same BN. We call this the induced MAID of the TAGG.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.6">Expressiveness</head><p>It is natural to ask about the expressiveness of TAGGs: what games can we represent? It turns out that TAGGs are at least as expressive as MAIDs.</p><p>Lemma 14: Any MAID can be represented as a TAGG with the same space complexity.</p><p>As a result, TAGGs can represent any extensive form games representable as MAIDs. These include all perfect recall games, and the subclass of imperfect recall games where each information set does not involve multiple time steps.</p><p>On the other hand, since the induced MAID of a TAGG is payoff equivalent to the TAGG, it trivially follows that any TAGG can be represented by a MAID. However, the induced MAID has a large in-degree, and can thus be exponentially larger than the TAGG. For example, in the games of Examples 1 and 7, the induced MAIDs have max indegrees that are equal to the number of decisions, which implies that the sizes of the MAIDs grow exponentially with the number of decisions, whereas the sizes of the TAGGs for the same games grow linearly in the number of decisions. This is not surprising, since TAGGs can exploit more kinds of structure in the game (CSI, anonymity) compared to a straightforward MAID representation. In Section 3.1 we show that the induced MAID can be transformed into a MAID that explicitly represents the underlying structure. The size of the transformed MAID is polynomial in the size of the TAGG.</p><p>The TAGG representation is also a true generalization of AGGs, since any simultaneous-move AGG can be straightforwardly represented as a TAGG with T = 1.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Computing Expected Utility</head><p>A compact game representation is not very useful if we cannot perform game-theoretic computations efficiently with respect to the size of the representation. In this section, we consider the task of computing expected utility EU σ [j] to a player j given a mixed strategy profile σ. Computation of EU is an essential step in many game-theoretic computations, such as finding a best response given other players' strategy profile, and the iterated best response algorithm, which is not guaranteed to converge but finds a Nash equilibrium if it converges. In Section 4 we discuss extending our methods in this section to a subtask in the GovidanWilson algorithm for computing Nash equilibria, which is guaranteed to converge. Thus we can achieve speedup of all these computations by speeding up their bottleneck steps.</p><p>One benefit of formally defining EU in terms of BNs is that now the problem of computing EU can be naturally cast as a Bayes-net inference problem. By <ref type="bibr">Definition 13, EU σ [j]</ref> is the sum of a polynomial number of terms of the form</p><formula xml:id="formula_9">E σ [u τ D ].</formula><p>We thus focus on computing one such</p><formula xml:id="formula_10">E σ [u τ D ]</formula><p>. This can be computed by applying a standard Bayes-net inference algorithm on the induced BN. In fact, Bayes-net inference is the standard approach for computing expected utility in MAIDs <ref type="bibr" target="#b10">[11]</ref>. Thus the above approach for TAGGs is computationally equivalent to the standard approach for a natural MAID representation of the same game. In this section, we show that the induced BNs of TAGGs have special structure that can be exploited to speed up computation, and present an algorithm that exploits this structure.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Exploiting causal independence</head><p>The standard BN inference approach for computing EU does not take advantage of some kinds of TAGG structure. In particular, recall that in the induced network, each action count variable A τ 's parents are all previous decisions that have A τ in their action sets, implying large in-degrees for action variables. Considering for example the clique-tree algorithm, this means large clique sizes, which is problematic because running time scales exponentially in the largest clique size of the clique tree. However, the CPDs of these action count variables are structured counting functions. Such structure is an instance of causal independence in BNs <ref type="bibr" target="#b6">[7]</ref>. It also corresponds to anonymity structure for static game representations like symmetric games and AGGs <ref type="bibr" target="#b7">[8]</ref>.</p><p>We can exploit this structure to speed up computation of expected utility in TAGGs. Our approach is a specialization of Heckerman and Breese's method <ref type="bibr" target="#b6">[7]</ref>   <ref type="figure" target="#fig_3">Figure 2</ref> shows the transformed BN of the tollbooth game whose induced BN was given in <ref type="figure" target="#fig_0">Figure 1</ref>.</p><p>We can then use standard algorithms to compute probabilities P (u t ′ D ) on the transformed BN. For classes of BNs with bounded treewidths, these probabilities (and thus</p><formula xml:id="formula_11">E[u t ′ D ])</formula><p>can be computed in polynomial time.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Exploiting temporal structure</head><p>In practice, the standard inference approaches use heuristics to find an elimination ordering. This might not be optimal for our BNs. We present an algorithm based on the idea of eliminating variables in the temporal order. For the rest of the section, we fix D and a time t ′ ∈ pt(D) and consider the computation of E σ [u t ′ D ]. We first group the variables of the induced network by time steps: variables at time τ include decisions at τ , action count variables A τ , chance variables X with instantiation time τ , intermediate nodes between decisions and action counts at τ , and utility variables U τ A . As we are only con-</p><formula xml:id="formula_12">cerned about E σ [u t ′ D ] for a t ′ ∈ pt(D)</formula><p>, we can safely discard the variables after time t ′ , as well as utility variables before t ′ . It is straightforward to verify that the actual parents of variables at time τ are either at τ or before τ .</p><p>We say a network satisfies the Markov property if the actual parents of variables at time τ are either at τ or at τ −1. Parts of the induced BN (e.g. the action count variables) already satisfy the Markov property, but in general the network does not satisfy the property. Exceptions include chance variable parents and decision parents from more than one time step ago.</p><p>Given an induced BN, we can transform it into an equivalent network satisfying the Markov property. If a variable V 1 at t 1 is a parent of variable V 2 at t 2 , with t 2 − t 1 &gt; 1, then for each t 1 &lt; τ &lt; t 2 we create a dummy variable V τ 1 belonging to time τ so that we copy the value of V 1 to V t2−1</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>1</head><p>. We then delete the edge from V 1 to V 2 and add an edge from V t2−1</p><formula xml:id="formula_13">1 to V 2 .</formula><p>The Markov property is computationally desirable because variables in time τ d-separate past variables from future variables. A straightforward approach to exploiting the Markov property is the following: as τ goes from 1 to t ′ , compute the joint distribution over variables at τ using the joint distribution over variables at τ − 1.</p><p>In fact, we can do better by adapting the interface algorithm <ref type="bibr" target="#b3">[4]</ref> for dynamic Bayesian networks (DBNs) to our setting. <ref type="bibr" target="#b1">2</ref> Define the interface I τ to be the set of variables in time τ that have children in time τ + 1. I τ d-separates past from future, where past is all variables before τ and noninterface variables in τ , and future is all variables after τ .</p><p>In an induced BN, I τ consists of: action count variables at time τ ; chance variables X at time τ that have children in 2 Whereas in DBNs the set of variables for each time step remains the same, for our setting this is no longer the case. It turns out that the interface algorithm can be adapted to work on our transformed BNs. Also, the transformed BNs of TAGGs have more structure than DBNs, particularly within the same time step, which we exploit for further computational speedup.</p><p>future; decisions at τ that are observed by future decisions; decision D which is a parent of u t ′ D , and dummy variables created by the transform.</p><p>We define the set of effective variables at time τ , denoted by V τ , as the subset of I τ that are ancestors of u t ′ D . For time t ′ , we let V t ′ = {u t ′ D }. Intuitively, at each time step τ we only need to keep track of the distribution P (V τ ), which acts as a sufficient statistic as we go forward in time. For each τ , we calculate P (V τ ) by conditioning on instantiations of P (V τ −1 ). The interface algorithm for TAGGs can be summarized as the following:</p><formula xml:id="formula_14">1. compute distribution P (V 0 ) 2. for τ = 1 to t ′ (a) for each instantiation of V τ −1 , v τ −1 j , compute the distribution over V τ : P V τ |V τ −1 = v τ −1 j (b) P (V τ ) = v P V τ |V τ −1 = v P V τ −1 = v 3. since V t ′ = {u t ′ D }, we now have P (u t ′ D ) 4. return the expected value E[u t ′ D ]</formula><p>We can further improve on this, in particular on the subtask of computing P (V τ |V τ −1 ). We observe that there is also a temporal order among variables in each time τ : first the decisions and intermediate variables, then action count variables, and finally chance variables. Partition V τ into four subsets consisting of action count variables A τ , chance variables X τ , decision variables D τ and dummy copy variables C τ . Then P (V τ |V τ −1 ) can be factored into </p><formula xml:id="formula_15">P (C τ |V τ −1 )P (D τ , A τ |V τ −1 )P (X τ |A τ , V τ −1</formula><formula xml:id="formula_16">(D τ , A τ |V τ −1 ) for an instantiation of V τ −1 is exponential only in |D τ |+|A τ |.</formula><p>Computing P (X τ |A τ , V τ −1 ) for each instantiation of A τ , V τ −1 involves eliminating the chance variables not in X τ . Any standard inference algorithm can be applied here. The complexity is exponential in the treewidth of the induced BN restricted on all chance variables at time τ , which we denote by G τ .</p><p>Putting everything together, the bottleneck of our algorithm is constructing the tables for the joint distributions on V τ , as well as doing inference on G τ .</p><p>Theorem 15: Given a TAGG and behavior strategy profile σ, if for all τ , both |V τ | and the treewidth of G τ are bounded by a constant, then for any player j the expected utility EU σ [j] can be computed in time polynomial in the size of the TAGG representation and the size of σ.</p><p>Our algorithm is especially effective for induced networks that are close to having the Markov property, in which case we only add a small number of dummy copy variables to V τ . The time complexity of computing expected utility then grows linearly in the duration of the game. On the other hand, for induced networks far from having the Markov property, |V τ | can grow linearly as τ increases, implying that the time complexity is exponential.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Context-specific independence</head><p>TAGGs have action-specific utility functions, which allows them to express context-specific payoff independence: which utility function is used depends on which action is chosen at the decision. This is translated to context-specific independence structure in the induced BN, specifically in the CPD of u τ D . Conditioned on the value of D, u τ D only depends on one of its utility variable parents.</p><p>There are several ways of exploiting such structure computationally, including conditioning on the value of the decision D <ref type="bibr" target="#b2">[3]</ref>, or exploiting the context-specific independence in a variable elimination algorithm <ref type="bibr" target="#b18">[19]</ref>. One particularly simple approach that works for multiplexer utility nodes is to decompose the utility into a sum of utilities <ref type="bibr" target="#b17">[18]</ref>. For each utility node parent U t k of u t D , there is a utility function u t D,k that depends on</p><formula xml:id="formula_17">U t k and D. If D = k, u t D,k is equal to U t k . Otherwise, u t D,k is 0. It is easy to see that u t D (U t 1 , . . . , U t m , D) = m k=1 u t D,k (U t k , D)</formula><p>. We can then modify our algorithm to compute each</p><formula xml:id="formula_18">E[u t D,k ] instead of E[u t D ]</formula><p>. This results in a reduction in the set of effective variables V τ k , which are now the variables at τ that are ancestors of u t D,k . Furthermore, whenever V τ k = V τ k ′ for some k, k ′ , the distributions over them are identical and thus can be reused.</p><p>For static games represented as TAGGs with T = 1, our algorithm is equivalent to the polynomial-time expected utility algorithm <ref type="bibr" target="#b7">[8]</ref> for AGGs.</p><p>Applying our algorithm to tollbooth games of Example 1 and ice cream games of Example 7, we observe that for both cases V τ consists of a subset of action count variables at τ plus the decision whose utility we are computing. Therefore the expected utilities of these games can be computed in polynomial time if |A| is bounded by a constant.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Computing Nash Equilibria</head><p>Nash equilibrium is one of the central solution concepts of game theory. Since the induced MAID of a TAGG is payoff equivalent to the TAGG, algorithms for computing the Nash equilibria of MAIDs <ref type="bibr" target="#b10">[11,</ref><ref type="bibr" target="#b14">15,</ref><ref type="bibr" target="#b1">2]</ref> can be directly applied to an induced MAID to find Nash equilibria of a TAGG. However, this approach does not exploit all TAGG structure. We can do better by constructing a transformed MAID, in a manner similar to the transformed BN, exploiting causal independence and CSI as in Sections 3.1 and 3.3.</p><p>We can do better yet and exploit the temporal structure as described in Section 3.2, if we use a solution algorithm that requires computation of probabilities and expected utilities. Govindan and Wilson <ref type="bibr" target="#b5">[6]</ref> presented an algorithm for computing equilibria in perfect-recall extensive-form games using a continuation method. Blum, Shelton and Koller <ref type="bibr" target="#b1">[2]</ref> adapted this algorithm to MAIDs. A key step in the algorithm is, for each pair of players i and j, and one of i's utility nodes, computing the marginal distribution over i's decisions and their parents, j's decisions and their parents, and the utility node. Our algorithm in Section 3.2 can be adapted to compute this distribution. This approach is efficient if each player only has a small number of decisions, as in the games in Examples 1 and 7.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Experiments</head><p>We have implemented our algorithm for computing expected utility in TAGGs, and run experiments on the efficiency and scalability of our algorithm. We compared three approaches for computing expected utility given a TAGG: Approach 1 applying the standard clique tree algorithm (as implemented by the Bayes Net Toolbox <ref type="bibr" target="#b15">[16]</ref>) on the induced BN;</p><p>Approach 2 applying the same clique tree algorithm on the transformed BN;</p><p>Approach 3 our proposed algorithm.</p><p>All approaches were implemented in MATLAB. All our experiments were performed using a computer cluster consisting of machines with dual Intel Xeon 3.2GHz CPUs, 2MB cache and 2GB RAM.</p><p>We ran experiments on tollbooth game instances of varying sizes. For each game instance we measured the CPU times for computing expected utility of 100 random behavior strategy profiles. <ref type="figure" target="#fig_4">Figure 3 (left)</ref> shows the results in log scale for toll booth games with 3 lanes and 5 cars per time step, with the duration varying from 1 to 15. Approach 1 ran out of memory for games with more than 1 time step. Approach 2 was more scalable; but ran out of memory for games with more than 5 time steps. Approach 3 was the most scalable. On smaller instances it was faster than the other two approaches by an order of magnitude, and it did not run out of memory as we increased the size of the TAGGs to at least 20 time steps. For the toll booth game with 14 time steps it took 1279 seconds, which is approximately the time Approach 2 took for the game instance with 5 time steps. <ref type="figure" target="#fig_4">Figure 3</ref> (middle) shows the results in log scale for tollbooth games with 3 time steps and 3 lanes, varying the number of cars per time step from 1 to 20. Approach 1 ran out of memory for games with more than 3 cars per time step; Approach 2 ran out of memory for games with more than 6 cars per time step; and again Approach 3 was the most scalable.</p><p>We also ran experiments on the ice cream games of Example 7. <ref type="figure" target="#fig_4">Figure 3 (right)</ref> shows the results in log scale for ice cream games with 4 locations, two vendors per time step, and durations varying from 1 to 15. The home locations for each vendor were generated randomly. Approaches 1 and 2 ran out of memory for games with more than 3 and 4 time steps, respectively. Approach 3 finished for games with 15 time steps in about the same time as Approach 2 took for games with 4 time steps.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Conclusions</head><p>TAGGs are a novel graphical representation of imperfectinformation extensive-form games. They are an extension of simultaneous-move AGGs to the dynamic setting; and can be thought of as a sequence of AGGs played over T time steps, with action counts accumulating as time progresses. This process can be formally described by the induced BN. For situations with anonymity or CSI structure, the TAGG representation can be exponentially more compact than a direct MAID representation. We presented an algorithm for computing expected utility for TAGGs that exploits its anonymity, CSI as well as temporal structure. We showed both theoretically and empirically that our approach is significantly more efficient than the standard approach on a direct MAID representation of the same game.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Example 1 :</head><label>1</label><figDesc>Twenty cars are approaching a tollbooth with three lanes. The drivers must decide which lane to use. The cars arrive in four waves of five cars each. In each wave, the drivers must pick lanes simultaneously, and can see the number of cars before them in each lane. A driver's utility decreases with the number of cars that chose the same lane either before him or at the same time.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>1 .</head><label>1</label><figDesc>At time 0, action counts are initialized to zero; chance variables with instantiation time 0 are instantiated, 2. At each time τ ∈ {1, . . . , T }: (a) all agents with decisions at τ observe the appro- priate action counts, chance variables, and deci- sions, if any. (b) all decisions at τ are made simultaneously. (c) action counts at τ are tallied. (d) chance variables at time τ are instantiated.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 1 shows</head><label>1</label><figDesc>Figure 1 shows an induced BN of a TAGG based on Example 1 with six cars and three lanes. Note that although we</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: The transformed BN of the tollbooth game from Figure 1 with 3 lanes and 3 cars per time step.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: Running times for expected utility computation. Triangle data points represent Approach 1 (induced BN), diamonds represent Approach 2 (transformed BN), squares represent Approach 3 (proposed algorithm).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0" validated="false"><head>V 1 to V 2 iff V 1 is an actual parent of V 2 . Then F is acyclic.</head><label></label><figDesc></figDesc><table>D]. The actual parents of a chance variable 
X are the variables corresponding to Pa[X], with each ac-
tion A k ∈ Pa[X] replaced by A 

t(X) 
k 

. The actual parents 
of a utility variable U τ 
A are the variables corresponding to 
Pa[U τ 
A ], with each action A k ∈ Pa[U τ 
A ] replaced by A τ 
k . 
where {A 1 , ..., A ℓ } = Dom[D]. 

The CPDs of chance variables are the CPDs of the corre-
sponding chance variables in the TAGG. The CPD of each 
decision variable D is the behavior strategy σ D . The CPD 
of each utility variable U τ 
A is a deterministic function de-
fined by the corresponding utility function U τ 
A . The CPD 
of each action count variable A τ is a deterministic function 
that counts the number of decisions in APa[A] that are as-
signed value A. The CPD of each decision-payoff variable 
u τ 
D is a multiplexer, i.e. a deterministic function that se-
lects the value of its utility variable parent according to the 
choice of its decision parent. For example, if the value of 
D is A k , then the value of u τ 
D is the value of U τ 

A k 

. 

Theorem 12: Given a TAGG, let F be the directed graph 
over the variables of the induced BN in which there is an 
edge from </table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1" validated="false"><head></head><label></label><figDesc>for exploiting causal independence in BNs. At a high level, Heckerman and Breese's method transforms the original BN by creat- ing new nodes that represent intermediate results, and re- wiring some of the arcs, resulting in an equivalent BN with small in-degree. They then apply conventional inference algorithms on the new BN.representing the contribution of decisions at time τ to the count of A k . If there is more than one decision at time τ that has A k in its action set, we create intermediate variables as in Heck- erman and Breese's method. We call the resulting BN the transformed BN of the TAGG.</figDesc><table>For example, given an action 
count variable A τ 
k with parents {D 1 . . . D ℓ }, create a node 
M i for each i ∈ {1 . . . ℓ − 1}, representing the count in-
duced by D 1 . . . D i . Then, instead of having D 1 . . . D ℓ as 
parents of A τ 
k , its parents become D ℓ and M ℓ−1 , and each 
M i 's parents are D i and M i−1 . The resulting graph would 
have in-degree at most 2 for A τ 
k and the M i 's. 
In our induced BN, the action count variables A t 
k at earlier 
time steps t &lt; τ already represent some of these intermedi-
ate counts, so we do not need to duplicate them. Formally, 
we modify the original BN in the following way: for each 
action count variable A τ 
k , first remove the edges from its 
current parents. Instead, A τ 
k now has two parents: the ac-
tion count variable A τ −1 

k 

and a new node M τ 

A k 

</table></figure>

			<note place="foot" n="1"> If an agent plays action A for two decisions that have the</note>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Computing Nash equilibria of Action-Graph Games</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Bhat</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Leyton-Brown</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">UAI</title>
		<imprint>
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">A continuation method for Nash equilibria in structured games</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Blum</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Shelton</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Koller</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IJCAI</title>
		<imprint>
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Context-specific independence in Bayesian networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Boutilier</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Friedman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Goldszmidt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Koller</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">UAI</title>
		<imprint>
			<date type="published" when="1996" />
			<biblScope unit="page" from="115" to="123" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Constant-space reasoning in dynamic Bayesian networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Darwiche</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">International Journal of Approximate Reasoning</title>
		<imprint>
			<biblScope unit="volume">26</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="161" to="178" />
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title level="m" type="main">Game Theory</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Fudenberg</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Tirole</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1991" />
			<publisher>MIT Press</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Structure theorems for game trees</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Govindan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Wilson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Proceedings of the National Academy of Sciences</title>
		<imprint>
			<biblScope unit="volume">99</biblScope>
			<biblScope unit="issue">13</biblScope>
			<biblScope unit="page" from="9077" to="9080" />
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Causal independence for probability assessment and inference using Bayesian networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Heckerman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">S</forename><surname>Breese</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Systems, Man and Cybernetics, Part A</title>
		<imprint>
			<biblScope unit="volume">26</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="826" to="831" />
			<date type="published" when="1996" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">A polynomial-time algorithm for Action-Graph Games</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">X</forename><surname>Jiang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Leyton-Brown</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">AAAI</title>
		<imprint>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title level="m" type="main">Action-graph games</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">X</forename><surname>Jiang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Leyton-Brown</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Bhat</surname></persName>
		</author>
		<idno>TR-2008-13</idno>
		<imprint>
			<date type="published" when="2008" />
		</imprint>
		<respStmt>
			<orgName>University of British Columbia</orgName>
		</respStmt>
	</monogr>
<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Graphical models for game theory</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">J</forename><surname>Kearns</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">L</forename><surname>Littman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">P</forename><surname>Singh</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">UAI</title>
		<imprint>
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title level="m" type="main">Multi-agent influence diagrams for representing and solving games. Games and Economic Behavior</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Koller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Milch</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2003" />
			<biblScope unit="volume">45</biblScope>
			<biblScope unit="page" from="181" to="221" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Extensive games and the problem of information</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Kuhn</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Contributions to the Theory of Games</title>
		<editor>Harold Kuhn and Arthur Tucker</editor>
		<imprint>
			<date type="published" when="1953" />
			<biblScope unit="volume">II</biblScope>
			<biblScope unit="page" from="193" to="216" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Game networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">La</forename><surname>Mura</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">UAI</title>
		<imprint>
			<date type="published" when="2000" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Local-effect games</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Leyton-Brown</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Tennenholtz</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IJCAI</title>
		<imprint>
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title level="m" type="main">Ignorable information in multiagent scenarios</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Milch</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Koller</surname></persName>
		</author>
		<idno>MIT-CSAIL-TR-2008- 029</idno>
		<imprint>
			<date type="published" when="2008" />
			<publisher>MIT</publisher>
		</imprint>
	</monogr>
<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<title level="m" type="main">Bayes Net Toolbox for Matlab</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Murphy</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Evaluating influence diagrams using LIMIDs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Nilsson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">L</forename><surname>Lauritzen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">UAI</title>
		<imprint>
			<date type="published" when="2000" />
			<biblScope unit="page" from="436" to="445" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<title level="m" type="main">Probabilistic reasoning for complex systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Pfeffer</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2000" />
		</imprint>
		<respStmt>
			<orgName>Computer Science Department, Stanford University</orgName>
		</respStmt>
	</monogr>
<note type="report_type">PhD thesis</note>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Exploiting contextual independence in probabilistic inference</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Poole</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><forename type="middle">L</forename><surname>Zhang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Artificial Intelligence Research</title>
		<imprint>
			<biblScope unit="volume">18</biblScope>
			<biblScope unit="page" from="263" to="313" />
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">A class of games possessing pure-strategy Nash equilibria</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">W</forename><surname>Rosenthal</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">International Journal of Game Theory</title>
		<imprint>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="page" from="65" to="67" />
			<date type="published" when="1973" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Computational analysis of perfect-information position auctions</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">M</forename><surname>David</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kevin</forename><surname>Thompson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Leyton-Brown</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM-EC</title>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
