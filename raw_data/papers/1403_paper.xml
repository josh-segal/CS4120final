<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2019-03-26T16:39+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">A New Heuristic for Rectilinear Steiner Trees I o n I . M andoiu 񮽙 Vijay V . V azirani 񮽙</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Joseph</forename><forename type="middle">L</forename><surname>Ganley</surname></persName>
						</author>
						<author>
							<affiliation>
								<orgName>1 Introduction</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">A New Heuristic for Rectilinear Steiner Trees I o n I . M andoiu 񮽙 Vijay V . V azirani 񮽙</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract/>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>The Steiner tree problem is that of nding a minimum-length interconnection of a set of points in the plane, and has long been one of the fundamental problems in the eld of electronic design automation. Although recent a d v ances of integrated circuit technology into the deep-submicron realm have i n troduced additional routing objective functions, the Steiner tree problem retains its importance: For non-critical nets, or in physically small instances, minimum length is still frequently a good objective function, since a minimumlength interconnection has minimum overall capacitance and occupies a minimum amount of area. Furthermore, the development of good algorithms for the Steiner tree problem often lays a foundation for expanding these algorithms to accommodate objective functions other than purely minimizing length.</p><p>The rectilinear Steiner tree (RST) problem|in which t h e terminals are points in the plane and distances between them are measured in the L1 metric|has been the most-examined variant in electronic design automation, since IC fabrication technology typically mandates the use of only horizontal and vertical interconnect. The RST problem is NP-hard 8], and much eeort has been devoted to designing heuristic and approximation algorithms <ref type="bibr" target="#b0">1,</ref><ref type="bibr" target="#b1">2,</ref><ref type="bibr" target="#b4">5,</ref><ref type="bibr" target="#b12">11,</ref><ref type="bibr" target="#b14">13,</ref><ref type="bibr" target="#b16">15,</ref><ref type="bibr" target="#b17">16,</ref><ref type="bibr" target="#b19">18,</ref><ref type="bibr" target="#b25">24,</ref><ref type="bibr" target="#b26">25,</ref><ref type="bibr" target="#b27">26]</ref>. In an extensive s u r v ey of RST heuristics up to <ref type="bibr">1992 14]</ref>, the Batched Iterated 1-Steiner (BI1S) heuristic of <ref type="bibr">Kahng and Robins 15]</ref> emerged as the clear winner with an average improvement o ver the MST on terminals of almost 11%. Subsequently, t wo other heuristics 2, 16] have been reported to match the same performance.</p><p>After a steady, but relatively slow progress 4, 6, 21], exact RST algorithms have recently witnessed spectacular progress 22]. The new release 23] of the GeoSteiner code by Warme, Winter, and Zachariasen has average running time comparable to the fast BI1S implementation of <ref type="bibr">Robins 19]</ref> on random instances. We a r e t h us faced with the paradoxical situation that an exact algorithm for an NP-hard problem has the same average running time as a state-of-the art heuristic for the problem.</p><p>We try to remedy this situation by proposing a new RST heuristic. Our experiments show that the new heuristic has better average running time than both Robins' implementation of BI1S and the GeoSteiner code. Moreover, the new heuristic gives higher-quality solutions than BI1S on the averagee of course, it cannot beat GeoSteiner in solution quality.</p><p>Our It is well known that the RST problem can be reduced to the metric Steiner tree problem on graphs 10]] however, the graphs obtained from the reduction are not quasi-bipartite. We give a n RV-based heuristic for nding Steiner trees in arbitrary (non quasi-bipartite) metric graphs. The heuristic, called Iterated R V (IRV), computes a Steiner tree of a quasi-bipartite subgraph of the original graph using the RV algorithm, in order to select a set of candidate Steiner vertices. The process is repeated with the selected Steiner vertices treated as terminals|thereby a l l o wing the algorithm to pick larger quasi-bipartite subgraphs, and seek additional Steiner vertices for inclusion in the tree|until no further improvement is possible.</p><p>The speed of our heuristic depends critically on the size of the quasi-bipartite subgraphs considered in each iteration. We reduce the size of the graphs that correspond to RST instances by applying reductions|deletion of edges and vertices that do not aaect the quality of the result. Our key edge reduction is based on Robins and Salowe's result that bounds the maximum degree of a rectilinear <ref type="bibr">MST 20]</ref>, and allows us to retain in the graph at most 4 edges incident t o each Steiner vertex. Notably, this observation also formed the basis of a signiicant speed-up in the running time of <ref type="bibr">BI1S 9]</ref>, and is currently used in the implementation 19]. Our vertex reduction is based on the empty rectangle test that has its roots in the work of Berman and Ramaiyer 1] (see also <ref type="bibr" target="#b4">5,</ref><ref type="bibr" target="#b26">25]</ref>).</p><p>We ran experiments to compare our implementation of IRV against Robins' implementation of <ref type="bibr">BI1S 19]</ref> and against the GeoSteiner code of Warme, Winter, and <ref type="bibr">Zachariasen 23]</ref>. The results reported in Section 4 show that, on both random and real VLSI instances, our new heuristic produces on the average higher-quality solutions than BI1S. The quality i m p r o vement is not spectacular, around 0.03% from the cost of the MST on the average, but we should note that solutions produced by BI1S are themselves less than 0.5% away from optimum on the average|this leaves little space for improvement.</p><p>More importantly, IRV's improvement in solution quality is achieved with an excellent running time. Our IRV code runs 4{8 times faster than GeoSteiner, and 2{8 times faster than Robins' implementation of BI1S on random instances with up to 200 terminals|the speed-up increases with the number of terminals. On random instances, GeoSteiner has almost the same average running time as Robins' BI1S code, with a factor 2 advantage for BI1S on small instances.</p><p>After noticing that BI1S can also beneet from vertex reductions, we incorporated the empty rectangle test into Robins' code. The enhanced BI1S code becomes 60% faster than our IRV code on random instances. However, this does not necessarily mean that BI1S is the best heuristic in practice|results on real VLSI instances indicate a different hierarchy. On these instances IRV is faster than the enhanced BI1S, and GeoSteiner is also substantially faster than Robins' BI1S. It is often claimed 15] that random RST instances are statistically indistinguishable from real VLSI instances. Our results show that this claim is only partly true: While the relative solution quality d o e s n o t c hange between experiments ran on random instances as compared to those ran on VLSI instances, the relative running time may c hange.</p><p>The two main contributions of this paper, the IRV algorithm and the speed up in the implementation of BI1S, p r oduce two heuristics with signiicant speed advantage over the exact GeoSteiner code. Such a d v antage may b e v aluable in all VLSI stages in which the RST problem occurs|it is clearly valuable in applications where exact accuracy is not essential, e.g. in wirelength estimation during placement. Moreover, the two heuristics hold more promise than the GeoSteiner algorithm for giving ecient extensions to objective functions other than length minimization.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Steiner trees in graphs</head><p>The metric Steiner tree i n g r aphs (GST) problem is: Given a graph G = ( VVE) whose vertices are partitioned in two s e t s , T and S, the terminal and Steiner vertices respectively, and non-negative edge costs satisfying triangle inequality, nd a minimum cost tree spanning all terminals and any subset of the Steiner vertices. Recently, Rajagopalan and Vazirani 17] presented a 3/2 approximation algorithm for GST when restricted to quasi-bipartite graphs, i.e., graphs that have n o edge connecting a pair of Steiner vertices. In this section we review the RV algorithm, discuss its implementation, and present a n RV-based heuristic for the GST problem on arbitrary graphs.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">The bidirected cut relaxation</head><p>The RV algorithm is based on a sophisticated integer program (IP) formulation of the GST problem. A related, but simpler formulation is given by the following observation: From LP-duality theory, the cost of a feasible solution to (3) is always less than or equal to the cost of any feasible solution to (2), and hence, less than or equal to the cost of any feasible solution to (1). The RV algorithm uses this observation to guarantee the quality of the solution produced: the algorithm constructs feasible solutions to both IP (1) and LP (3), in such a w ay that the the costs of the two solutions diier by at most a factor of 3/2.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">The RV algorithm</head><p>The RV algorithm works on quasi-bipartite graphs G. A t a coarse level, the RV algorithm is similar to the Batched Iterated 1-Steiner algorithm of Kahng and Robins 15]: both algorithms work in phases, and in each phase some Steiner vertices are iteratively added to the set of terminals. While BI1S adds Steiner vertices to T greedily|based on the decrease in the cost of the MST|the RV algorithm uses the bidirected cut relaxation to guide the addition.</p><p>In each phase, the RV algorithm constructs feasible solutions to both IP (1) and LP (3). The bidirected cut formulation and its relaxation are inherently asymmetric, since they require a terminal to to be singled out. However, the RV-Phase algorithm works in a symmetric manner|the information it computes can be used to derive feasible solutions for any c hoice of to.</p><p>A set C 񮽙 V is called proper if both C and V n C contain terminalss with respect to the original set of terminals </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">EEcient implementation of the RV-Phase algorithm</head><p>Since our heuristic on general graphs uses RV-Phase as a subroutine, we describe here an eecient implementation of it. Several implementation ideas are derived from the following key property maintained throughout the RV-Phase algorithm: For implementation purposes we do not need to keep track of the duals raised|all that matters is the order in which arcs get tight. The tightening time of an arc can be determined by monitoring the number of minimally unsatissed sets (henceforth called active sets) that are felt by t h a t a r c . It is easy to see that the set of vertices reachable via tight arcs from a terminal u always form an active sett Lemma 2 implies that no other active s e t c a n c o n tain u. T h us, we get: Since several arcs out of a Steiner vertex get tight s i m ultaneously, w e s a y that a Steiner vertex crystallizes. Note that crystallization is precisely the moment when the vertex begins to be treated as terminal. Lemma 4 implies that, in order to detect when a Steiner vertex crystallizes, it suuces to monitor the amount of dual felt for the shortest arc out that Steiner vertex.</p><formula xml:id="formula_0">Corollary</formula><p>Our implementation maintains a list of active setss initially containing a singleton set for each terminal. We also maintain the amount of dual felt by the shortest arc out of each Steiner vertex, initially 0. Arcs out of terminals are sorted in non-decreasing order, then marked as tightened in this order. As new arcs are tightened, we update the list of active sets and the amount of dual felt by the shortest arcs out of Steiner vertices, crystallizing Steiner vertices as needed. The maintenance of the list of active sets gives a worst case running time is O(k 񮽙 j T j j j Sj), where k is the number of crystallized Steiner vertices|all other operations can be easily implemented in O(k 񮽙 j Ej j log jV j).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.4">The heuristic for general graphs</head><p>A simple way of dealing with non-quasi-bipartite graphs is to remove all Steiner-Steiner edges and then run the RV algorithm. To a l l o w Steiner-Steiner edges to come into play, we iterate this process. If a Steiner vertex is added to T by some run of the RV algorithm, for subsequent runs we extend the graph by adding all edges incident to it, not just those leading to terminals.</p><p>Our experiments have shown that it is better|in both running time and solution quality|to extend the graph after running just one RV-Phase, not the full RV algorithm, on the quasi-bipartite graph. This gives the following algorithm:</p><p>The IRV Algorithm:</p><p>1. T1 񮽙 To 񮽙 T 2. Remove from G all edges (uu v) with u = 2 T , v = 2 T , and run the RV-Phase algorithm on the resulting graphh this will add some Steiner vertices to T .</p><p>3. Construct an MST on T , then prune from T n To all vertices with tree degree 񮽙 2. 4. If cost(MST(T)) &lt; cost(MST(T1)), then T1 񮽙 T 񮽙 go to Step 2.</p><p>5. Return MST(T1).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Rectilinear Steiner trees</head><p>The rectilinear Steiner tree (RST) problem is deened as follows: Given a set T of terminals in the Cartesian plane, nd a shortest interconnection of the terminals using only horizontal and vertical lines. Lines are allowed to meet at points other than the terminalss non-terminal meeting points are called Steiner points.</p><p>By a classical result of Hanan 10], there exists an optimum rectilinear Steiner tree that uses only Steiner points located at intersections of vertical and horizontal lines passing through terminals. Thus, nding a minimum rectilinear Steiner tree on a set of terminals reduces to nding a minimum Steiner tree in the Hanan grid, with edge costs given by the L1 (or Manhattan) metric, d(uu v) = jxu;xvj+jyu;yvj.</p><p>The IRV algorithm yields good results when applied to a graph for which the cost and structure of the minimum Steiner tree does not change much after the removal of Steiner-Steiner edges. For the RST problem, the best choice w.r.t. solution quality is to run IRV on the complete graph induced by the Hanan grid. We obtain a practical running time by applying a few simple, yet very eeective reductions to this graph.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Edge reduction</head><p>By a result of <ref type="bibr">Robins and Salowe 20]</ref>, for any set of points there exists a rectilinear MST in which e a c h point p has at most one neighbor in each of the four diagonal quadrants ;x 񮽙 y &lt; x , ;y &lt; x 񮽙 y, x &lt; y 񮽙 ; x, and y 񮽙 x &lt; ;y translated at p. Hence, the optimum Steiner tree in the quasi-bipartite graph is not aected if we remove all edges incident to a Steiner vertex except those connecting it to the closest terminals from each quadrant. We can also discard all edges connecting pairs of terminals except for the jTj ; 1 edges in MST(T)|this merely amounts to a particular choice of breaking ties between edges during RV-Phase. Combined, these two edge reductions leave a quasi-bipartite </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Vertex reduction</head><p>As noted by Z a c hariasen 25], the Full Steiner Tree reductions, which play a crucial role for exact algorithms such a s 4, 22], can also be used to remove from the Hanan grid a large number of Steiner vertices without aaecting the optimum Steiner tree. Simpler versions of the tests suuce in our case, since we only want t o l e a ve unaaected the optimum Steiner tree in the graph that results after the removal of Steiner-Steiner edges.</p><p>We incorporated in our code the empty rectangle test 25], originally due to <ref type="bibr">Berman and Ramaiyer 1]</ref>. For the connguration in <ref type="figure" target="#fig_1">Figure 1</ref>, the test says that the grid point ( xu񮽙 y v) can be safely omitted unless the rectangle determined by terminals u and v is empty (i.e., contains no terminals in its interior) and the shaded quadrant c o n tains at least one terminal. We used a simple O(jT j 2 ) implementation of this testt an O(n log n + k) implementation, where k is the numb e r o f e m p t y rectangles, is also possible 7].</p><p>In fact, the above test can be strengthened <ref type="bibr" target="#b4">5,</ref><ref type="bibr" target="#b26">25]</ref>  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>񮽙 100񮽙</head><p>to compare the relative performance of the three algorithms. <ref type="figure">Figure 2</ref> shows the average improvement o ver MST for BI1S, IRV, a n d GeoSteiner on random instances. The average running times on random instances are plotted in <ref type="figure" target="#fig_2">Fig- ure 3</ref>, we include in this comparison the version of BI1S enhanced by the inclusion of the empty rectangle test (sf BI1S+). Statistics on the 9 VLSI instances are presented in <ref type="table">Table 1</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Conclusions</head><p>The experimental data presented in the previous section shows that IRV produces high-quality rectilinear Steiner trees, typically better than those produced by the Batched Iterated 1-Steiner heuristic. The same data shows that BI1S is signiicant l y s p e d u p b y the addition of the empty rectangle test. With this enhancement, BI1S runs faster than IRV on random instances, but not on large real VLSI instances as those considered in our tests. It should be interesting to perform more extensive tests on real VLSI instances to see <ref type="bibr" target="#b0">1</ref> A set of points is in general position if no two p o i n ts share a common x-o r y-coordinate. how the relative running time of the two heuristics is aected by the large fraction of small nets present in VLSI designs.</p><p>Our experimental data also connrms the excelent p e rformance of the exact algorithm of Warme, Winter, and <ref type="bibr">Zachariasen 22]</ref>. When exact algorithms achieve practical running times, one is immediately prompted to ask if any interest remains for sub-optimal heuristics. We think that this interest will not dissapear, deenitely not in RST applications where speed is more important than exact solutions, e.g., in wirelength estimation during placement 3]. Moreover, heuristics such a s IRV and BI1S hold more promise than the GeoSteiner algorithm for giving eecient extensions to objective functions other than length minimization.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head></head><label></label><figDesc>only sets in C and their complements are proper. During its execution the RV-Phase algorithm tentatively converts some Steiner vertices into terminals|note that the only proper sets created by these conversions are the singleton sets containing the new terminals. The algorithm main- tains a variable yC , c a l l e d dual, for every proper set, in- cluding the newly created ones. The amount of dual felt by arc e is P C : e2񮽙(C) yC 񮽙 w e s a y that e is tight when P C : e2񮽙(C) yC = cost(e). A set C of vertices is unsatissed if it is proper and 񮽙(C) does not contain any tight a r c . The RV-Phase algorithm starts with yC set to 0 for every proper set C, and an empty list ~ L of tight arcs. It then pro- ceeds in a primal-dual manner, by alternatively raising dual variables as long as this does not violate the packing con- straints of (3), and picking tight edges into ~ L, t h us satisfying more and more proper sets. When the algorithm stops, all proper sets are satissed by t i g h t a r c s i n ~ L: The RV-Phase algorithm: 1. ~ L 񮽙 񮽙 񮽙 F or each proper set C, yC 񮽙 0. 2. While there exist unsatissed sets do: Uniformly rise the y values of minimally unsatissed sets until an arc u ! v goes tight. If u = 2 T , t h e n T 񮽙 T 񮽙 f ug g o t o S t e p 1 . Else, ~ L 񮽙 ~ L 񮽙 f u ! vg. Theorem 1 񮽙17] (a) If arc u ! v, u = 2 T , g o es tight then cost(MST(T 񮽙 f ug)) &lt; cost(MST(T)). (b) At the end of the RV-Phase algorithm, MST(T) cannot be improved by adding Steiner vertices. The RV algorithm (whose pseudocode we omit) repeats the RV-Phase algorithm followed by r e m o val of unnecessary Steiner vertices, until no further improvement i s m a d e i n the cost of MST(T). At the end of the algorithm, the duals raised around proper sets are converted into a solution to (1) by p i c king to and discarding yS's with S = 2 C . The 3=2 approximation guarantee follows by relating the cost of this solution to the cost of MST(T).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: The empty rectangle test. graph with O(jT j+jSj) edges, as opposed to O(jT jj(jTj+jSj)) without edge reductions.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: Average CPU time.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1" validated="false"><head></head><label></label><figDesc>A set of edges E 0 񮽙 E connects T if and only if every cut of G separating two terminals crosses at least one edge of E 0 . The IP formulation resulting from this observation is called the undirected cut formulation. The IP formulation on which the RV algorithm is based, called the bidirected c u t formulation, is obtained by considering a directed version of the above cut condition.</figDesc><table>Let ~ 
E be the set of arcs obtained by replacing each undi-

rected edge (uu v) 2 E by t wo directed arcs u ! v and v ! u. 
For a set C of vertices, let 񮽙(C) be the set of arcs u ! v with 
u 2 C and v 2 V n C. F i n a l l y , i f to is a xed terminal, let C 
contain all sets C 񮽙 V that contain at least one terminal but 

do not contain to. The bidirected cut formulation is trying 
to pick a minimum cost collection of arcs from ~ 
E in such a 
way that each v alid set has at least one outgoing arc: 

minimize 

X 

e2 ~ 
E 

cost(e)xe 
(1) 

subject to 

X 

e: e2񮽙(C) 

xe 񮽙 1񮽙 C 2 C 

xe 2 f 0񮽙 1g񮽙 
e 2 E 

By allowing xe's to assume non-negative fractional values 
we obtain a linear program (LP) called the bidirected cut 
relaxation of GST: 

minimize 

X 

e2 ~ 
E 

cost(e)xe 
(2) 

subject to 

X 

e: e2񮽙(C) 

xe 񮽙 1񮽙 C 2 C 

xe 񮽙 0񮽙 
e 2 E 

The dual of the covering LP (2) is the packing LP: 

maximize 

X 

C2C 

yC 

(3) 

subject to 

X 

C: e2񮽙(C) 

yC 񮽙 cost(e)񮽙 e 2 ~ 

E 

yC 񮽙 0񮽙 
C 񮽙 V 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3" validated="false"><head></head><label></label><figDesc>3 For any terminal u, there is exactly one active set containing u at any time during the algorithm. Hence, the tightening time of any arc u ! v is exactly cost(uu v). Unlike terminals, Steiner vertices may be contained in multiple active sets. Hence, arcs out of Steiner vertices will feel dual at varying rates during the algorithm. Lemma 4 Let u be a Steiner vertex. If arc u ! v is the rst arc o u t o f u to go tight, then arc v ! u goes tight at the same time or before u ! v is. Moreover, each arc u ! w for which w ! u is already tight will go tight when u ! v goes tight.</figDesc><table>Proof: In order to get tight, u ! v must feel some active 
set, i.e., there must exist a tight path from a terminal v 0 6 = v 
to u. After u ! v gets tight, there is a tight p a t h f r o m v 0 to 
v, a n d b y Lemma 2 the reverse path (hence the arc v ! u) 

must also be tight. The second claim follows similarly. 2 

</table></figure>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Improved approximations for the Steiner tree problem</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Piotr</forename><surname>Berman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Viswanathan</forename><surname>Ramaiyer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Algorithms</title>
		<imprint>
			<biblScope unit="volume">17</biblScope>
			<biblScope unit="page" from="381" to="408" />
			<date type="published" when="1994" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">An edge-based heuristic for Steiner routing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Borah</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">M</forename><surname>Owens</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">J</forename><surname>Irwin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. on CAD</title>
		<imprint>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="page" from="1563" to="1568" />
			<date type="published" when="1994" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m" type="main">On wirelength estimations for rowbased placement</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">E</forename><surname>Caldwell</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">B</forename><surname>Kahng</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Mantik</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><forename type="middle">L</forename><surname>Markov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Zelikovsky</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1998" />
			<biblScope unit="page" from="4" to="11" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Solving rectilinear Steiner tree problems exactly in theory and practice</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">U</forename><surname>Ossmeier</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Kaufmann</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 5th European Symposium on Algorithms</title>
		<meeting>5th European Symposium on Algorithms</meeting>
		<imprint>
			<date type="published" when="1997" />
			<biblScope unit="page" from="171" to="185" />
		</imprint>
	</monogr>
	<note>Springer-Verlag LNCS 1284</note>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">F aster approximation algorithms for the rectilinear Steiner tree problem</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">U</forename><surname>Ossmeier</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Kaufmann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Zelikovsky</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Discrete and Computational Geometry</title>
		<imprint>
			<biblScope unit="volume">18</biblScope>
			<biblScope unit="page" from="93" to="109" />
			<date type="published" when="1997" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">A faster dynamic programming algorithm for exact rectilinear Steiner minimal trees</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">L</forename><surname>Ganley</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">P</forename><surname>Cohoon</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Fourth Great Lakes Symp. on VLSI</title>
		<imprint>
			<biblScope unit="page" from="238" to="241" />
			<date type="published" when="1994" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Design/Net</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>No</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title level="m" type="main">Table 1: Gain over MST and running time for VLSI instances</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Fast algorithms for direct enclosures and direct dominances</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R.-H</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Nurmi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Ottmann</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Algorithms</title>
		<imprint>
			<biblScope unit="volume">10</biblScope>
			<biblScope unit="page" from="170" to="186" />
			<date type="published" when="1989" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">The rectilinear Steiner tree problem is NP-complete</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">R</forename><surname>Garey</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">S</forename><surname>Johnson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SIAM J. Appl. Math</title>
		<imprint>
			<biblScope unit="volume">3</biblScope>
			<biblScope unit="page" from="826" to="834" />
			<date type="published" when="1977" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Closing the gap: near-optimal Steiner trees in polynomial time</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Griith</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Robins</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">S</forename><surname>Salowe</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Zhang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Computer-Aided Design of Integrated C i r cuits and Systems</title>
		<imprint>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="page" from="1351" to="1365" />
			<date type="published" when="1994" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">On Steiner&apos;s problem with rectilinear distance</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Hanan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SIAM J. Appl. Math</title>
		<imprint>
			<biblScope unit="volume">14</biblScope>
			<biblScope unit="page" from="255" to="265" />
			<date type="published" when="1966" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">New algorithms for the rectilinear Steiner tree problem</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J.-M</forename><surname>Ho</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Vijayan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">K</forename><surname>Wong</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. on CAD</title>
		<imprint>
			<biblScope unit="page" from="185" to="193" />
			<date type="published" when="1990" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">On Steiner minimal trees with rectilinear distance</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><forename type="middle">K</forename><surname>Hwang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SIAM J. Appl. Math</title>
		<imprint>
			<biblScope unit="volume">30</biblScope>
			<biblScope unit="page" from="104" to="114" />
			<date type="published" when="1976" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">An O(n log n) algorithm for suboptimal rectilinear Steiner trees</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><forename type="middle">K</forename><surname>Hwang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. on Circuits and Systems</title>
		<imprint>
			<biblScope unit="volume">26</biblScope>
			<biblScope unit="page" from="75" to="77" />
			<date type="published" when="1979" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">The Steiner tree p r oblem</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><forename type="middle">K</forename><surname>Hwang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">S</forename><surname>Richards</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>W I N Ter</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Annals of Discrete Mathematics</title>
		<imprint>
			<biblScope unit="volume">53</biblScope>
			<date type="published" when="1992" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">A new class of iterative Steiner tree heuristics with good performance</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">B</forename><surname>Kahng</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Robins</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. on CAD</title>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="page" from="1462" to="1465" />
			<date type="published" when="1992" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Local improvement in Steiner trees</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><forename type="middle">D</forename><surname>Lewis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">C.-C</forename><surname>Pong</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Van Cleave</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Third Great Lakes Symposium on VLSI</title>
		<meeting>the Third Great Lakes Symposium on VLSI</meeting>
		<imprint>
			<date type="published" when="1993" />
			<biblScope unit="page" from="105" to="106" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">On the bidirected cut relaxation for the metric Steiner tree problem</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Rajagopalan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><forename type="middle">V</forename><surname>Vazirani</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">10th ACM-SIAM Symposium on Discrete Algorithms</title>
		<imprint>
			<date type="published" when="1999" />
			<biblScope unit="page" from="742" to="751" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Fast heuristic algorithms for rectilinear Steiner trees</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">S</forename><surname>Richards</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Algorithmica</title>
		<imprint>
			<biblScope unit="volume">4</biblScope>
			<biblScope unit="page" from="191" to="207" />
			<date type="published" when="1989" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<monogr>
		<title level="m" type="main">Steiner code available at www</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gabriel</forename><surname>Robins</surname></persName>
		</author>
		<ptr target=".cs.virginia.edu/robins/steiner.tar" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">On the maximum degree of minimum spanning trees</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Robins</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">S</forename><surname>Salowe</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Proc. of the ACM Symp. on Computational Geometry</title>
		<imprint>
			<biblScope unit="page" from="250" to="258" />
			<date type="published" when="1994" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Thirty--ve-point rectilinear Steiner minimal trees in a day</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">S</forename><surname>Salowe</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">D</forename><surname>Warme</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Networks</title>
		<imprint>
			<biblScope unit="volume">25</biblScope>
			<biblScope unit="page" from="69" to="87" />
			<date type="published" when="1995" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<monogr>
		<title level="m" type="main">Exact Algorithms for Plane Steiner Tree Problems: A Computational Study</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">M</forename><surname>Warme</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Winter</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Zacharisen</surname></persName>
		</author>
		<idno>DIKU-TR-98/11</idno>
		<imprint>
			<date type="published" when="1998" />
		</imprint>
		<respStmt>
			<orgName>Dept. of Computer Science, University of Copenhagen</orgName>
		</respStmt>
	</monogr>
<note type="report_type">T echnical Report</note>
</biblStruct>

<biblStruct xml:id="b24">
	<monogr>
		<title level="m" type="main">The GeoSteiner 3.0 package, available via ftp from ftp</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">M</forename><surname>Warme</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>W I N Ter</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Zacharisen</surname></persName>
		</author>
		<ptr target="diku.dk/diku/users/martinz/geosteiner-3.0.tar.gz" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">A faster approximation algorithm for the Steiner problem in graphs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><forename type="middle">F</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Widmayer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">K</forename><surname>Wong</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Algorithmica</title>
		<imprint>
			<biblScope unit="volume">23</biblScope>
			<biblScope unit="page" from="223" to="229" />
			<date type="published" when="1986" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Rectilinear Full Steiner Tree Generation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Zachariasen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Networks</title>
		<imprint>
			<biblScope unit="volume">33</biblScope>
			<biblScope unit="page" from="125" to="143" />
			<date type="published" when="1999" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">An 11/6-approximation algorithm for the network Steiner problem</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Zelikovsky</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Algorithmica</title>
		<imprint>
			<biblScope unit="volume">9</biblScope>
			<biblScope unit="page" from="463" to="470" />
			<date type="published" when="1993" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
