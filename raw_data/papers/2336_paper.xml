<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2019-03-26T16:41+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">A Polynomial-Time Algorithm for Action-Graph Games</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Albert</forename><forename type="middle">Xin</forename><surname>Jiang</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">University of British Columbia</orgName>
							</affiliation>
						</author>
						<author role="corresp">
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kevin</forename><surname>Leyton-Brown</surname></persName>
							<email>kevinlb@cs.ubc.ca</email>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">University of British Columbia</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">A Polynomial-Time Algorithm for Action-Graph Games</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Action-Graph Games (AGGs) (Bhat &amp; Leyton-Brown 2004) are a fully expressive game representation which can compactly express strict and context-specific independence and anonymity structure in players&apos; utility functions. We present an efficient algorithm for computing expected payoffs under mixed strategy profiles. This algorithm runs in time polynomial in the size of the AGG representation (which is itself polynomial in the number of players when the in-degree of the action graph is bounded). We also present an extension to the AGG representation which allows us to compactly represent a wider variety of structured utility functions. 1</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Introduction</head><p>Game-theoretic models have recently been very influential in the computer science community. In particular, simultaneous-action games have received considerable study, which is reasonable as these games are in a sense the most fundamental. In order to analyze these models, it is often necessary to compute game-theoretic quantities ranging from expected utility to Nash equilibria.</p><p>Most of the game theoretic literature presumes that simultaneous-action games will be represented in normal form. This is problematic because quite often games of interest have a large number of players and a large set of action choices. In the normal form representation, we store the game's payoff function as a matrix with one entry for each player's payoff under each combination of all players' actions. As a result, the size of the representation grows exponentially with the number of players. Even if we had enough space to store such games, most of the computations we'd like to perform on these exponential-sized objects take exponential time.</p><p>Fortunately, most large games of any practical interest have highly structured payoff functions, and thus it is possible to represent them compactly. (Intuitively, this is why humans are able to reason about these games in the first place: we understand the payoffs in terms of simple relationships rather than in terms of enormous look-up tables.) One influential class of representations exploit strict independencies between players' utility functions; this class include graphical games <ref type="bibr" target="#b5">(Kearns, Littman, &amp; Singh 2001)</ref>, multi-agent influence diagrams <ref type="bibr" target="#b6">(Koller &amp; Milch 2001)</ref>, and game nets <ref type="bibr" target="#b7">(LaMura 2000)</ref>. A second approach to compactly representing games focuses on context-specific independencies in agents' utility functions -that is, games in which agents' abilities to affect each other depend on the actions they choose. Since the context-specific independencies considered here are conditioned on actions and not agents, it is often natural to also exploit anonymity in utility functions, where each agent's utilities depend on the distribution of agents over the set of actions, but not on the identities of the agents. Examples include congestion games <ref type="bibr" target="#b9">(Rosenthal 1973)</ref> and local effect games (LEGs) <ref type="bibr">(Leyton-Brown &amp; Ten- nenholtz 2003</ref>). Both of these representations make assumptions about utility functions, and as a result cannot represent arbitrary games. <ref type="bibr" target="#b0">Bhat &amp; Leyton-Brown (2004)</ref> introduced action graph games (AGGs). Similar to LEGs, AGGs use graphs to represent the context-specific independencies of agents' utility functions, but unlike LEGs, AGGs can represent arbitrary games. Bhat &amp; Leyton-Brown proposed an algorithm for computing expected payoffs using the AGG representation. For AGGs with bounded in-degree, their algorithm is exponentially faster than normal-form-based algorithms, yet still exponential in the number of players.</p><p>In this paper we make several significant improvements to results in <ref type="bibr" target="#b0">(Bhat &amp; Leyton-Brown 2004</ref>). First, we present an improved algorithm for computing expected payoffs. Our new algorithm is able to better exploit anonymity structure in utility functions. For AGGs with bounded in-degree, our algorithm is polynomial in the number of players.</p><p>We then extend the AGG representation by introducing function nodes. This feature allows us to compactly represent a wider range of structured utility functions. We also describe computational experiments which confirm our theoretical predictions of compactness and computational speedup.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Action Graph Games</head><p>An action-graph game (AGG) is a tuple N, S, ν, u. Let N = {1, . . . , n} denote the set of agents. Denote by S = i∈N S i the set of action profiles, where is the Cartesian product and S i is agent i's set of actions. We denote by s i ∈ S i one of agent i's actions, and s ∈ S an action profile. Agents may have actions in common. Let S ≡ i∈N S i denote the set of distinct action choices in the game. Let ∆ denote the set of configurations of agents over actions. A configuration D ∈ ∆ is an ordered tuple of |S| integers (D(s), D(s ), . . .), with one integer for each action in S. For each s ∈ S, D(s) specifies the number of agents that chose action s ∈ S. Let D : S → ∆ be the function that maps from an action profile s to the corresponding configuration D. These shared actions express the game's anonymity structure: agent i's utility depends only on her action s i and the configuration D(s).</p><p>Let G be the action graph: a directed graph having one node for each action s ∈ S. The neighbor relation is given by ν : S → 2 S . If s ∈ ν(s) there is an edge from s to s. Let D (s) denote a configuration over ν(s), i.e. D (s) is a tuple of |ν(s)| integers, one for each action in ν(s). Intuitively, agents are only counted in D (s) if they take an action which is an element of ν(s). ∆ (s) is the set of configurations over ν(s) given that some player has played s. <ref type="bibr">2</ref> Similarly we define D (s) : S → ∆ (s) which maps from an action profile to the corresponding configuration over ν(s).</p><p>The action graph expresses context-specific independencies of utilities of the game: ∀i ∈ N , if i chose action s i ∈ S, then i's utility depends only on the numbers of agents who chose actions connected to s, which is the configuration D (si) (s). In other words, the configuration of actions not in ν(s i ) does not affect i's utility.</p><p>We represent the agents' utilities using a tuple of |S| functions u ≡ (u s , u s , . . .), one for each action s ∈ S. Each u s is a function u s : ∆ (s) → R. So if agent i chose action s, and the configuration over</p><formula xml:id="formula_0">ν(s) is D (s) , then agent i's utility is u s (D (s) ).</formula><p>Observe that all agents have the same utility function, i.e. conditioned on choosing the same action s, the utility each agent receives does not depend on the identity of the agent. For notational convenience, we define</p><formula xml:id="formula_1">u(s, D (s) ) ≡ u s (D (s) ) and u i (s) ≡ u(s i , D (s i ) (s)).</formula><p>Bhat &amp; <ref type="bibr" target="#b0">Leyton-Brown (2004)</ref> provided several examples of AGGs, showing that AGGs can represent arbitrary games, graphical games and games exhibiting context-specific independence without any strict independence. Due to space limits we do not reproduce these examples here.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Size of an AGG Representation</head><p>We have claimed that action graph games provide a way of representing games compactly. But what exactly is the size of an AGG representation? And how does this size grow as the number of agents n grows?</p><p>Let I = max s |ν(s)|, i.e. the maximum in-degree of the action graph. The size of an AGG representation is dominated by the size of its utility functions. 3 For each action s, we need to specify a utility value for each distinct configuration D (s) ∈ ∆ (s) . The set of configurations ∆ (s) can be derived from the action graph, and can be sorted in lexicographical order. So we do not need to explicitly specify ∆ (s) ; we can just specify a list of |∆ (s) | utility values that correspond to the (ordered) set of configurations. 4 |∆ (s) |, the number of distinct configu-rations over ν(s), in general does not have a closed-form expression. Instead, we consider the operation of extending all agents' action sets via ∀i : S i → S. Now the number of configurations over ν(s) is an upper bound on |∆ (s) |. The bound is the number of (ordered) combinatorial compositions of n − 1 (since one player has already chosen s) into |ν(s)| + 1 nonnegative integers, which is (n−1+|ν(s)|)! (n−1)!|ν(s)|! . Then the total space required for the utilities is bounded from above by |S| (n−1+I)! (n−1)!I! . If I is bounded by a constant as n grows, the representation size grows like O(|S|n I ), i.e. polynomially with respect to n.</p><p>For each AGG, there exists a unique induced normal form representation with the same set of players and |S i | actions for each i; its utility function is a matrix that specifies each player i's payoff for each possible action profile s ∈ S. This implies a space complexity of n n i=1 |S i |. When S i ≡ S for all i, this becomes n|S| n , which grows exponentially with respect to n.  <ref type="formula">(s)</ref>) in the AGG. Furthermore, there are no entries in the AGG utility functions that do not correspond to any action profile (s i , s −i ) in the normal form. This means that there exists a many-to-one mapping from entries of normal form to utilities in the AGG. Of course, the AGG representation has the extra overhead of representing the action graph, which is bounded by |S|I. But asymptotically, AGG's space complexity is never worse than the equivalent normal form.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Computing with AGGs</head><p>One of the main motivations of compactly representing games is to do efficient computation on the games. We focus on the computational task of computing expected payoffs under a mixed strategy profile. Besides being important in itself, this task is an essential component of many game-theoretic applications, e.g. computing best responses, Govindan and Wilson's continuation methods for finding Nash equilibria <ref type="bibr">(2003; 2004)</ref>, the simplicial subdivision algorithm for finding Nash equilibria <ref type="bibr" target="#b9">(van der Laan, Talman, &amp; van der Heyden 1987)</ref>, and finding correlated equilibria using Papadimitriou's algorithm <ref type="bibr">(2005)</ref>.</p><p>Let ϕ(X) denote the set of all probability distributions over a set X. Define the set of mixed strategies for i as Σ i ≡ ϕ(S i ), and the set of all mixed strategy profiles as Σ ≡ i∈N Σ i . We denote an element of Σ i by σ i , an element of Σ by σ, and the probability that i plays action s as σ i (s).</p><p>Therefore, when we want to do computation using AGG, we may convert each utility function u s to a data structure that efficiently implements a mapping from sequences of integers to (floatingpoint) numbers, (e.g. tries, hash tables or Red-Black trees), with space complexity in the order of O(I|∆ (s) |).</p><p>Define the expected utility to agent i for playing pure strategy s i , given that all other agents play the mixed strategy profile σ −i , as</p><formula xml:id="formula_2">V i si (σ −i ) ≡ s−i∈S−i u i (s i , s −i ) Pr(s −i |σ −i ).<label>(1)</label></formula><p>where</p><formula xml:id="formula_3">Pr(s −i |σ −i ) = j =i σ j (s j )</formula><p>is the probability of s −i under the mixed strategy σ −i .</p><p>Equation <ref type="formula" target="#formula_2">(1)</ref> is a sum over the set S −i of action profiles of players other than i. The number of terms is j =i |S j |, which grows exponentially in n. Thus <ref type="formula" target="#formula_2">(1)</ref> is an exponential time algorithm for computing V i si (σ −i ). If we were using the normal form representation, there really would be |S −i | different outcomes to consider, each with potentially distinct payoff values, so evaluation Equation <ref type="formula" target="#formula_2">(1)</ref> is the best we could do.</p><p>Can we do better using the AGG representation? Since AGGs are fully expressive, representing a game without any structure as an AGG would not give us any computational savings compared to the normal form. Instead, we are interested in structured games that have a compact AGG representation. In this section we present an algorithm that given any i, s i and σ −i , computes the expected payoff V i si (σ −i ) in time polynomial with respect to the size of the AGG representation. In other words, our algorithm is efficient if the AGG is compact, and requires time exponential in n if it is not. In particular, recall that for classes of AGGs whose in-degrees are bounded by a constant, their sizes are polynomial in n. As a result our algorithm will be polynomial in n for such games.</p><p>First we consider how to take advantage of the contextspecific independence structure of the AGG, i.e. the fact that i's payoff when playing s i only depends on the configurations in the neighborhood of i. This allows us to project the other players' strategies into smaller action spaces that are relevant given s i . Intuitively we construct a graph from the point of view of an agent who took a particular action, expressing his indifference between actions that do not affect his chosen action. This can be thought of as inducing a context-specific graphical game. Formally, for every action s ∈ S define a reduced graph G (s) by including only the nodes ν(s) and a new node denoted ∅. The only edges included in G (s) are the directed edges from each of the nodes ν(s) to the node s. Player j's action s j is projected to a node s (s) j in the reduced graph G (s) by the following mapping: s</p><formula xml:id="formula_4">(s) j ≡ s j s j ∈ ν(s) ∅ s j ∈ ν(s) .</formula><p>In other words, actions that are not in ν(s) (and therefore do not affect the payoffs of agents playing s) are projected to ∅. The resulting projected action set S (s) j has cardinality at most min(|S j |, |ν(s)| + 1). We define the set of mixed strategies on the projected ac-</p><formula xml:id="formula_5">tion set S (s) j by Σ (s) j ≡ ϕ(S (s) j ). A mixed strategy σ j on the original action set S j is projected to σ (s) j ∈ Σ (s)</formula><p>j by the following mapping:</p><formula xml:id="formula_6">σ (s) j (s (s) j ) ≡ σ j (s j ) s j ∈ ν(s) s ∈S i \ν(s) σ j (s ) s (s) j = ∅ . (2)</formula><p>So given s i and σ −i , we can compute σ (s i ) −i in O(n|S|) time in the worst case. Now we can operate entirely on the projected space, and write the expected payoff as</p><formula xml:id="formula_7">V i s i (σ −i ) = s (s i ) −i ∈S (s i ) −i u(s i , D (si) (s i , s −i )) Pr(s (si) −i |σ (si) −i )</formula><p>where Pr(s</p><formula xml:id="formula_8">(s i ) −i |σ (s i ) −i ) = j =i σ (s i ) j (s (s i ) j ). The summation is over S (s i )</formula><p>−i , which in the worst case has (|ν(s i )| + 1) (n−1) terms. So for AGGs with strict or context-specific independence structure, computing V i s i (σ −i ) this way is much faster than doing the summation in (1) directly. However, the time complexity of this approach is still exponential in n.</p><p>Next we want to take advantage of the anonymity structure of the AGG. Recall from our discussion of representation size that the number of distinct configurations is usually smaller than the number of distinct pure action profiles. So ideally, we want to compute the expected payoff V i si (σ −i ) as a sum over the possible configurations, weighted by their probabilities:</p><formula xml:id="formula_9">V i si (σ −i ) = D (s i ) ∈∆ (s i ,i) u i (s i , D (s i ) )P r(D (s i ) |σ (s i ) ) (3)</formula><p>where</p><formula xml:id="formula_10">σ (s i ) ≡ (s i , σ (s i ) −i ) and Pr(D (s i ) |σ (s i ) ) = s:D (s i ) (s)=D (s i ) N j=1 σ j (s j )<label>(4)</label></formula><p>which is the probability of D (si) given the mixed strategy profile σ (s i ) . Equation <ref type="formula">(3)</ref> is a summation of size |∆ (s i ,i) |, the number of configurations given that i played s i , which is polynomial in n if I is bounded. The difficult task is to compute</p><formula xml:id="formula_11">Pr(D (s i ) |σ (s i ) ) for all D (s i ) ∈ ∆ (s i ,i) , i</formula><p>.e. the probability distribution over ∆ (s i ,i) induced by σ (s i ) . We observe that the sum in Equation (4) is over the set of all action profiles corresponding to the configuration D (s i ) . The size of this set is exponential in the number of players. Therefore directly computing the probability distribution using Equation (4) would take exponential time in n. Indeed this is the approach proposed in <ref type="bibr" target="#b0">(Bhat &amp; Leyton-Brown 2004</ref> </p><formula xml:id="formula_12">= (0, . . . , 0) P 0 [D (s i ) 0 ] = 1.0 // Initialization: ∆ (s i ) 0 = {D (s i ) 0 } for k = 1 to n do</formula><p>Initialize P k to be an empty trie for all D</p><formula xml:id="formula_13">(s i ) k−1 from P k−1 do for all s (s i ) k ∈ S (s i ) k such that σ (s i ) k (s (s i ) k ) &gt; 0 do D (s i ) k = D (s i ) k−1 if s (s i ) k = ∅ then D (s i ) k (s (s i ) k ) += 1 // Apply action s (s i ) k end if if P k [D (s i ) k ] does not exist yet then P k [D (s i ) k ] = 0.0 end if P k [D (s i ) k ] += P k−1 [D (s i ) k−1 ] × σ (s i ) k (s (s i ) k ) end for end for end for return Pn Each D (si) k</formula><p>is represented as a sequence of integers, so P k is a mapping from sequences of integers to real numbers. We need a data structure to manipulate such probability distributions over configurations (sequences of integers) which permits quick lookup, insertion and enumeration. An efficient data structure for this purpose is a trie <ref type="bibr" target="#b2">(Fredkin 1962)</ref>. Tries are commonly used in text processing to store strings of characters, e.g. as dictionaries for spell checkers. Here we use tries to store strings of integers rather than characters. Both lookup and insertion complexity is linear in |ν(s i )|. To achieve efficient enumeration of all elements of a trie, we store the elements in a list, in the order of their insertions.</p><p>Our algorithm for computing V i s i (σ −i ) consists of first computing the projected strategies using (2), then following Algorithm 1, and finally doing the weighted sum given in (3). The overall complexity is O(n|S| + n|ν(s i )| 2 |∆ (si,i) (σ −i )|), where ∆ (si,i) (σ −i ) denotes the set of configurations over ν(s i ) that have positive probability of occurring under the mixed strategy (s i , σ −i ). Due to space limits we omit the derivation of this complexity result. Since |∆ (s i ,i) (σ −i )| ≤ |∆ (s i ,i) | ≤ |∆ (s i ) |, and |∆ (s i ) | is the number of payoff values stored in payoff function u s i , this means that expected payoffs can be computed in polynomial time with respect to the size of the AGG. Furthermore, our algorithm is able to exploit strategies with small supports which lead to a small |∆ (si,i) (σ −i )|. Since |∆ (si) | is bounded by (n−1+|ν(si)|)! (n−1)!|ν(s i )|! , this implies that if the in-degree of the graph is bounded by a constant, then the complexity of computing expected payoffs is O(n|S| + n I+1 ). </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>AGG with Function Nodes</head><p>There are games with certain kinds of context-specific independence structures that AGGs are not able to exploit. Example 1. In the Coffee Shop Game there are n players; each player is planning to open a new coffee shop in a downtown area, but has to decide on the location. The downtown area is represented by a r × c grid. Each player can choose to open the shop at any of the B ≡ rc blocks, or decide not to enter the market. Conditioned on player i choosing some location s, her utility depends on the number of players that chose the same block, the number of players that chose any of the surrounding blocks, and the number of players that chose any other location.</p><p>The normal form representation of this game has size n|S| n = n(B + 1) n .</p><p>Let us now represent the game as an AGG. We observe that if agent i chooses an action s corresponding to one of the B locations, then her payoff is affected by the configuration over all B locations. Hence, ν(s) would consist of B action nodes corresponding to the B locations. The action graph has in-degree I = B. Since the action sets completely overlap, the representation size is O(|S||∆ (s) |) = O(B (n−1+B)! (n−1)!B! ). If we hold B constant, this becomes O(Bn B ), which is exponentially more compact than the normal form representation. If we instead hold n constant, the size of the representation is O(B n ), which is only slightly better than the normal form.</p><p>Intuitively, the AGG representation is only able to exploit the anonymity structure in this game. However, this game's payoff function does have context-specific structure. Observe that u s depends only on three quantities: the number of players that chose the same block, the surrounding blocks, and other locations. In other words, u s can be written as a function g of only 3 integers:</p><formula xml:id="formula_14">u s (D (s) ) = g(D(s), s ∈S D(s ), s ∈S D(s ))</formula><p>where S is the set of actions that surrounds s and S the set of actions corresponding to the other locations. Because the AGG representation is not able to exploit this context-specific information, utility values are duplicated in the representation.</p><p>We can find similar examples where u s could be written as a function of a small number of intermediate parameters.</p><p>One example is a "parity game" where u s depends only on whether s ∈ν(s) D(s ) is even or odd. Thus u s would have just two distinct values, but the AGG representation would have to specify a value for every configuration D <ref type="bibr">(s)</ref> .</p><p>This kind of structure can be exploited within the AGG framework by introducing function nodes to the action graph G. Now G's vertices consist of both the set of action nodes S and the set of function nodes P . We require that no function node p ∈ P can be in any player's action set, i.e. S∩P = {}. Each node in G can have action nodes and/or function nodes as neighbors. For each p ∈ P , we introduce a function  To ensure that the AGG is meaningful, the graph G restricted to nodes in P is required to be a directed acyclic graph (DAG). Furthermore it is required that every p ∈ P has at least one neighbor (i.e. incoming edge). These conditions ensure that D(s) for all s and D(p) for all p are well-defined. To ensure that every p ∈ P is "useful", we also require that p has at least one out-going edge. As before, for each action node s we define a utility function u s : ∆ (s) → R. We call this extended representation (N, S, P, ν, {f p } p∈P , u) an Action Graph Game with Function Nodes (AGGFN).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Representation Size</head><p>Given an AGGFN, we can construct an equivalent AGG with the same players N and actions S and equivalent utility functions, but represented without any function nodes. We put an edge from s to s in the AGG if either there is an edge from s to s in the AGGFN, or there is a path from s to s through a chain of function nodes. The number of utilities stored in an AGGFN is no greater than the number of utilities in the equivalent AGG without function nodes. We can show this by following similar arguments as before, establishing a many-to-one mapping from utilities in the AGG representation to utilities in the AGGFN. On the other hand, AGGFNs have to represent the functions f p , which can either be implemented using elementary operations, or represented as mappings similar to u s . We want to add function nodes only when they represent meaningful intermediate parameters and hence reduce the number of incoming edges on action nodes.</p><p>Consider our coffee shop example. For each action node s corresponding to a location, we introduce function nodes p s and p s . Let ν(p s ) consist of actions surrounding s, and ν(p s ) consist of actions for the other locations. Then we modify ν(s) so that it has 3 nodes: ν(s) = {s, p s , p s }, as shown in <ref type="figure" target="#fig_1">Figure 1</ref>. For all function nodes p ∈ P , we define</p><formula xml:id="formula_15">f p (D (p) ) = m∈ν(p) D(m). Now each D (s)</formula><p>is a configuration over only 3 nodes. Since f p is a summation operator, |∆ (s) | is the number of compositions of n − 1 into 4 nonnegative integers, (n+2)! (n−1)!3! = n(n + 1)(n + 2)/6 = O(n 3 ). We must therefore store O(Bn 3 ) utility values.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Computing with AGGFNs</head><p>Our expected-payoff algorithm cannot be directly applied to AGGFNs with arbitrary f p . First of all, projection of strategies does not work directly, because a player j playing an action s j ∈ ν(s) could still affect D (s) via function nodes. Furthermore, our DP algorithm for computing the probabilities does not work because for an arbitrary function node p ∈ ν(s), each player would not be guaranteed to affect D(p) independently. Therefore in the worst case we need to convert the AGGFN to an AGG without function nodes in order to apply our algorithm. This means that we are not always able to translate the extra compactness of AGGFNs over AGGs into more efficient computation. Definition 1. An AGGFN is contribution-independent (CI) if • For all p ∈ P , ν(p) ⊆ S, i.e. the neighbors of function nodes are action nodes.</p><p>• There exists a commutative and associative operator * , and for each node s ∈ S an integer w s , such that given an</p><formula xml:id="formula_16">action profile s, for all p ∈ P , D(p) = * i∈N :si∈ν(p) w s i .</formula><p>Note that this definition entails that D(p) can be written as a function of D (p) by collecting terms:</p><formula xml:id="formula_17">D(p) ≡ f p (D (p) ) = * s∈ν(p) ( * D(s) k=1 w s ).</formula><p>The coffee shop game is an example of a contributionindependent AGGFN, with the summation operator serving as * , and w s = 1 for all s. For the parity game mentioned earlier, * is instead addition mod 2. If we are modeling an auction, and want D(p) to represent the amount of the winning bid, we would let w s be the bid amount corresponding to action s, and * be the max operator.</p><p>For contribution-independent AGGFNs, it is the case that for all function nodes p, each player's strategy affects D(p) independently. This fact allows us to adapt our algorithm to efficiently compute the expected payoff V i si (σ −i ). For simplicity we present the algorithm for the case where we have one operator * for all p ∈ P , but our approach can be directly applied to games with different operators associated with different function nodes, and likewise with a different set of w s for each operator.</p><p>We define the contribution of action s to node m ∈ S ∪P , denoted C s (m), as 1 if m = s, 0 if m ∈ S \ {s}, and * m ∈ν(m) ( * C s (m ) k=1 w s ) if m ∈ P . Then it is easy to verify that given an action profile s, D(s) = n j=1 C s j (s) for all s ∈ S and D(p) = * n j=1 C sj (p) for all p ∈ P . Given that player i played s i , we define the projected contribution of action s, denoted C (s i ) s , as the tuple (C s (m)) m∈ν(s i ) . Note that different actions may have identical projected contributions. Player j's mixed strategy σ j induces a probability distribution over j's projected contributions,</p><formula xml:id="formula_18">Pr(C (s i ) |σ j ) = s j :C (s i ) s j =C (s i ) σ j (s j )</formula><p>. Now we can operate entirely using the probabilities on projected contributions instead of the mixed strategy probabilities. This is analogous to the projection of σ j to σ (s i ) j in our algorithm for AGGs without function nodes.</p><p>Algorithm 1 for computing the distribution P r(D (si) |σ) can be straightforwardly adopted to work with contributionindependent AGGFNs: whenever we apply player k's contribution</p><formula xml:id="formula_19">C (si) s k to D (si) k−1 , the resulting configuration D (si) k is computed componentwise as follows: D (s i ) k (m) = C (s i ) s k (m) + D (s i ) k−1 (m) if m ∈ S, and D (s i ) k (m) = C (si) s k (m) * D (si)</formula><p>k−1 (m) if m ∈ P . Following similar complexity analysis, if an AGGFN is CI, expected payoffs can be computed in polynomial time with respect to the representation size. Applied to the coffee shop example, since |∆ (s) | = O(n 3 ), our algorithm takes O(n|S| + n 4 ) time, which grows linearly in |S|.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Experiments</head><p>We implemented the AGG representation and our algorithm for computing expected payoffs in C++. We ran several experiments to compare the performance of our implementation against the (heavily optimized) GameTracer implementation <ref type="bibr" target="#b1">(Blum, Shelton, &amp; Koller 2002</ref>) which performs the same computation for a normal form representation. We used the Coffee Shop game (with randomly-chosen payoff values) as a benchmark. We varied both the number of players and the number of actions.</p><p>First, we compared the AGGFNs' representation size to that of the normal form. The results confirmed our theoretical predictions that the AGGFN representation grows polynomially with n while the normal form representation grows exponentially with n. (The graph is omitted because of space constraints.)</p><p>Second, we tested the performance of our dynamic programming algorithm against GameTracer's normal form based algorithm for computing expected payoffs, on Coffee Shop games of different sizes. For each game instance, we generated 1000 random strategy profiles with full support, and measured the CPU (user) time spent computing the expected payoffs under these strategy profiles. We fixed the size of blocks at 5 × 5 and varied the number of players. <ref type="figure" target="#fig_4">Figure 2</ref> shows plots of the results. For very small games the normal form based algorithm is faster due to its smaller bookkeeping overhead; as the number of players grows larger, our AGGFN-based algorithm's running time grows polynomially, while the normal form based algorithm scales exponentially. For more than five players, we were not able to store the normal form representation in memory.</p><p>Next, we fixed the number of players at 4 and number of columns at 5, and varied the number of rows. Our algorithm's running time grew roughly linearly in the number of rows, while the normal form based algorithm grew like a higher-order polynomial. This was consistent with our theoretical prediction that our algorithm take O(n|S| + n 4 ) time for this class of games while normal-form based algorithms take O(|S| n−1 ) time.</p><p>Last, we considered strategy profiles having partial support (though space prevents showing the <ref type="figure">figure)</ref>. While ensuring that each player's support included at least one action, we generated strategy profiles with each action included in the support with probability 0.4. GameTracer took about 60% of its full-support running times to compute expected payoffs in this domain, while our algorithm required about 20% of its full-support running times.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Conclusions</head><p>We presented a polynomial-time algorithm for computing expected payoffs in action-graph games. For AGGs with bounded in-degree, our algorithm achieves an exponential speed-up compared to normal-form based algorithms and Bhat &amp; Leyton-Brown's algorithm <ref type="bibr">(2004)</ref>. We also extended the AGG representation by introducing function nodes, which allows us to compactly represent a wider range of structured utility functions. We showed that if an AG-GFN is contribution-independent, expected payoffs can be computed in polynomial time.</p><p>In the full version of this paper we will also discuss speeding up the computation of Nash and correlated equilibria. We have combined our expected-payoff algorithm with GameTracer's implementation of <ref type="bibr">Govindan &amp; Wilson's algo- rithm (2003)</ref> for computing Nash equilibria, and achieved exponential speedup compared to the normal form. Also, as a direct corollary of our Theorem 1 and Papadimitriou's result (2005), correlated equilibria can be computed in time polynomial in the size of the AGG.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head></head><label></label><figDesc>The number of payoff values stored in an AGG representation is always less than or equal to the number of payoff values in the induced normal form rep- resentation. For each entry in the induced normal form which represents i's utility under action profile s, there exists a unique action profile s in the AGG with the corresponding action for each player. This s induces a unique configuration D(s) over the AGG's action nodes. By construction of the AGG utility functions, D(s) together with s i determines a unique utility u s i (D (s i )</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Theorem 1 .</head><label>1</label><figDesc>Given an AGG representation of a game, i's expected payoff V i s i (σ −i ) can be computed in time polyno- mial in the size of the representation. If I, the in-degree of the action graph, is bounded by a constant, V i si (σ −i ) can be computed in time polynomial in n.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head></head><label></label><figDesc>f p : ∆ (p) → N, where D (p) ∈ ∆ (p) denotes configurations over p's neighbors. The configurations D are extended over the entire set of nodes, by defining D(p) ≡ f p (D (p) ). In- tuitively, D(p) are the intermediate parameters that players' utilities depend on.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: A 5 × 6 Coffee Shop Game: Left: the AGG representation without function nodes (looking at only the neighborhood of the a node s). Right: after introducing two function nodes, s now has only 3 incoming edges.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: Running times for payoff computation in the Coffee Shop Game. Left: 5 × 5 grid with 3 to 16 players. Right: 4-player r × 5 grid with r varying from 3 to 10.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0" validated="false"><head>= i σ i (s i ). Also, each player affects the configuration D independently. This structure allows us to use dynamic programming (DP) to efficiently compute the probability distribution Pr(D (s i ) |σ (s i ) ).k}. Denote by ∆ (s i ) k the set of configu- rations induced by actions of agents {1, . . . , k}. Similarly denote D (si) k ∈ ∆ (si) k . Denote by P k the probability distri- bution on ∆ (si) k induced by σ (si) 1...k , and by P k [D] the prob- ability of configuration D. At iteration k of the algorithm, we compute P k from P k−1 and σ (s i ) k . After iteration n, the algorithm stops and returns P n . The pseudocode of our DP algorithm is shown as Algorithm 1. Due to space limits we omit the proof of correctness of our algorithm. Algorithm 1 Computing the induced probability distribu- tion Pr(D (si) |σ (si) ). Algorithm ComputeP Input: s i , σ (s i ) Output: P n , which is the distribution P r(D (s i ) |σ (s i ) ) repre- sented as a trie. D (s i ) 0</head><label></label><figDesc></figDesc><table>). 
Can we do better? We observe that the players' mixed 
strategies are independent, i.e. σ is a product probability 
distribution σ(s) The intuition be-
hind our algorithm is to apply one agent's mixed strategy 
at a time. Let σ 

(si) 

1...k denote the projected strategy profile 
of agents {1, . . . , </table></figure>

			<note place="foot" n="1"> We would like to acknowledge the contributions of Navin A.R. Bhat, who is one of the authors of the paper which this work extends.</note>

			<note place="foot" n="2"> If action s is in multiple players&apos; action sets (say players i, j), and these action sets do not completely overlap, then it is possible that the set of configurations given that i played s (denoted ∆ (s,i) ) is different from the set of configurations given that j played s. ∆ (s) is the union of these sets of configurations. 3 The action graph can be represented as neighbor lists, with space complexity O(|S|I). 4 This is the most compact way of representing the utility functions, but does not provide easy random access of the utilities.</note>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Computing Nash equilibria of action-graph games</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Bhat</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Leyton-Brown</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">UAI</title>
		<imprint>
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Blum</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Shelton</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Koller</surname></persName>
		</author>
		<ptr target="http://dags.stanford.edu/Games/gametracer.html" />
		<imprint>
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Fredkin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Trie memory. Comm. ACM</title>
		<imprint>
			<biblScope unit="volume">3</biblScope>
			<biblScope unit="page" from="490" to="499" />
			<date type="published" when="1962" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">A global Newton method to compute Nash equilibria</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Govindan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wilson</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Economic Theory</title>
		<imprint>
			<biblScope unit="volume">110</biblScope>
			<biblScope unit="page" from="65" to="86" />
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Computing Nash equilibria by iterated polymatrix approximation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Govindan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wilson</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Economic Dynamics and Control</title>
		<imprint>
			<biblScope unit="volume">28</biblScope>
			<biblScope unit="page" from="1229" to="1241" />
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Graphical models for game theory</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Kearns</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Littman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Singh</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">UAI</title>
		<imprint>
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Multi-agent influence diagrams for representing and solving games</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Koller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Milch</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IJCAI</title>
		<imprint>
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Game networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Lamura</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">UAI</title>
		<imprint>
			<date type="published" when="2000" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Computing correlated equilibria in multiplayer games</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Leyton-Brown</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Tennenholtz</surname></persName>
		</author>
		<ptr target="http://www.cs.berkeley.edu/˜christos/papers/cor.ps" />
	</analytic>
	<monogr>
		<title level="m">IJCAI. Papadimitriou, C. 2005</title>
		<imprint>
			<date type="published" when="2003" />
		</imprint>
	</monogr>
	<note>STOC. Available at</note>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Simplicial variable dimension algorithms for solving the nonlinear complementarity problem on a product of unit simplices using a general labelling</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Rosenthal</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Van Der Laan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Talman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Van Der Heyden</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Int. J. Game Theory</title>
		<imprint>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="377" to="397" />
			<date type="published" when="1973" />
		</imprint>
	</monogr>
	<note>Mathematics of OR</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
