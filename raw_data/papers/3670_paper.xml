<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2019-03-26T16:46+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Detecting Attacks in Routers Using Sketches</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dhiman</forename><surname>Barman</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science and Engineering</orgName>
								<orgName type="institution">University of California</orgName>
								<address>
									<settlement>Riverside</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Piyush</forename><surname>Satapathy</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science and Engineering</orgName>
								<orgName type="institution">University of California</orgName>
								<address>
									<settlement>Riverside</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gianfranco</forename><surname>Ciardo</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science and Engineering</orgName>
								<orgName type="institution">University of California</orgName>
								<address>
									<settlement>Riverside</settlement>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Detecting Attacks in Routers Using Sketches</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Designing routers against different attacks is imperative in today&apos;s Internet. We propose accurate, memory efficient, and scalable techniques to detect attacks such as worms, viruses, superspreaders, and denials-of-service (DoS) in routers. Our schemes enable detection in the routers by looking only at the IP headers. We propose a general methodology to use sketches, in particular count-min sketch, FM sketch, and counting and multi-counting Bloom filters, to recognize attacks in the routing architecture. Our techniques are based on change detection, for which we propose an algorithm that can work on data-streams and leverage the accurate and efficient estimation provided by sketches. We evaluate the performance of different schemes on real traces to show their accuracy.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>I. INTRODUCTION</head><p>With the proliferation of various kinds of attacks, designing secure and fault-resilient communication systems has become an indispensable network design goal. Resources consumed and performance degradation caused by worms and viruses are significant at the end-user applications. Recent worm attacks (e.g., Code Red version 1 and 2, nimba) have shown how easy it is for a worm to spread and gain control of hundreds of computers in a few minutes and attack a target bottleneck. Recently, low-rate attacks <ref type="bibr" target="#b15">[16]</ref> have been discussed in the literature; these are capable of causing considerable TCP throughput loss by injecting small amounts of traffic at the right intervals. Deployment of such protocols leaves the door wide open for resource abuse and security threats <ref type="bibr" target="#b20">[21]</ref>.</p><p>State-of-the art techniques are often based on Principal Component Analysis (PCA) <ref type="bibr" target="#b16">[17]</ref> to detect anomalies in traces collected from multiple locations over same window of time, mostly off-line. Data-mining and time-series analysis have been used for off-line trend analysis in the network traffic <ref type="bibr" target="#b13">[14]</ref> under certain traffic models. Moreover, association rules have been used to detect resource consumption in the context of network traffic <ref type="bibr" target="#b6">[7]</ref>. Most current techniques focusing on detecting anomalies off-line cater to the needs of data engineering at long time scales and help ISP's capacity planning. However, end-users and applications are more concerned about performance guarantees at much shorter time scales. Therefore, steps should be taken to detect and filter attacks at these shorter time scales, to improve user-perceived performance. Recent proposals advocate routers with more capabilities to detect malicious flows <ref type="bibr" target="#b5">[6]</ref>, <ref type="bibr" target="#b11">[12]</ref>. We are faced with many other demands for user-defined aggregate functions <ref type="bibr" target="#b3">[4]</ref> and their support in routers for real-time processing and query answering. Changes in this direction are being put in practice. Cisco's Traffic Anomaly Detector XT works off the critical path, monitoring mirrored traffic flows at gigabit line rates to build profiles of "normal" behavior for each protected device.</p><p>[10] describes a space-efficient simple data structure using Bloom filters to represent a static data set. <ref type="bibr" target="#b14">[15]</ref> presents a lossy data structure using counting sketches to capture the flows in the network. A closely related work <ref type="bibr" target="#b2">[3]</ref> suggests a method for detecting changes of the "heavy" flows using a sequential hashing scheme which is efficient in memory and overhead. However, the approach in <ref type="bibr" target="#b2">[3]</ref> is different from our sketch-based change detection in that we use sketches to build summaries and use different algorithms to find changes among those summaries. In this paper, we adopt these ideas and use them to derive efficient methods that detect attacks on-line in routers. A reasonable way to detect malicious activity at the router level is for the router to compare the data flowing through it with what the router would expect to be flowing through it. Such a scheme implicitly assumes that the attack has some sort of signature that distinguishes it from normal traffic. For such a scheme to work on-line, the router must be able to create a compact representation of a large volume of data in real-time. We believe that sketches <ref type="bibr" target="#b4">[5]</ref> can provide a good trade-off between the computation required to build a summary and its accuracy. We provide both primitives for queries and various approaches that use sketches to detect attacks. Once a set of flows has been identified as malicious, several approaches can then be used to contain the possible damage, such as isolating those flows to a different queue.</p><p>The paper is organized as follows. Section II discusses simplified models of attacks. Section III provides background on sketching and details our sketching technique to detect attacks on-line. Section IV presents our main contributions, proposing algorithms that use sketches for change detection. Section V evaluates our schemes on real Internet data. We conclude in Section VI.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>II. DEFINITIONS AND ATTACKS</head><p>Today, the malicious activities carried out by worms, viruses, scans, and malwares originated from botnets are prevalent in the Internet. To design space and time efficient algorithms that can detect such attacks, we first need to understand and characterize the nature of these attacks.</p><p>A data-stream S is a sequence of tuples (񮽙i, j, p, q񮽙, v), where i and j denote the packet source IP address and port, p and q denote the destination IP address and port, while v is a value (e.g., size) associated with the packet. A flow (as given by Cisco's NetFlow) R(i, j, p, q) is the multiset containing all the packets corresponding to a given 񮽙i, j, p, q񮽙 combination.</p><p>We can then characterize various attacks as follows. Portscans are attacks where a particular IP address and port pair connects to a destination on several ports:</p><formula xml:id="formula_0">PortScan(i, j, p) ⇔ |{q : |R(i, j, p, q)| &gt; 0}| &gt; δ P S ,</formula><p>where δ P S are a user-defined threshold. Address-scans are attacks where a particular IP address connects to multiple destination IP addresses on a particularly vulnerable port. The source host may or may not use different source ports. Such attacks can be identified by a large number of flows destined to a given destination port:</p><formula xml:id="formula_1">AddrScan(i, j, q) ⇔ |{p : |R(i, j, p, q) &gt; 0}| &gt; δ AS or AddrScan(i, q) ⇔ |{(j, p) : |R(i, j, p, q)| &gt; 0}| &gt; δ AS ,</formula><p>where δ AS is user-defined threshold.</p><p>We consider simple models of spam, malware, and worms.</p><p>Spams are usually sent from a server (or set of botnets) to a large set of destinations, although this is also typical behavior for peer-to-peer clients or content-providers. Worms and malware spread like epidemic: initially, a set of hosts sends malicious packets to other hosts after scanning; then, the victims further spread malicious contents, recursively.</p><p>The assumption is that few sources try to connect to a particular destination or a set of destinations on any ports.</p><formula xml:id="formula_2">WormMalwSpam(i) ⇔ |{(j, p, q) : |R(i, j, p, q)| &gt; 0}| &gt; δ W M S ,</formula><p>where δ W M S is user-defined threshold. Flows are termed "heavy hitters" if they send most of the packets or bytes, so we can modify the above formulations to incorporate heavy-hitters. Worms are sometimes termed superspreaders.</p><p>There are other kinds of flows which can be flagged as suspicious such as DoS marked by sudden increase in the number of packets; alpha flows, by sudden increase in the number of packets and bytes per packet; flash crowd, by sudden increase in the number of source IP addresses, source ports, number of packets and bytes per packet.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>III. BACKGROUND</head><p>We first discuss background on sketches, then use them as a lossy data structure in our technique to analyze attack traffic. For sketches to be useful in the detection mechanism, the flow ids seen by the routers cannot be manipulated by the attackers. Therefore, we assume the adoption of a technique to prevent spoofing of source and destination IP addresses.</p><p>With the increasing speed of Internet links, traffic monitoring is becoming increasingly challenging. For example, on a 40Gbps link, a router has about 25ns to forward the packet, so any additional packet processing has severe time constraints. A data-stream sketch is a compact summarization much smaller than the data-stream itself. For a data-stream over a domain of size N , the sketch is of size log O(1) (N ). Sketches can be computed very fast and can be collected at distributed points. Furthermore, sketches can accurately answer queries about the data-stream most of the time.</p><p>"Tug-of-war" sketches <ref type="bibr" target="#b0">[1]</ref> are computed using 4-wise random hash functions g j that map packets to {+1, −1}. Let a i be the number of occurrences of an object i ∈ {1, ..., N } in a data-stream a. A sketch with a relative error no greater than 񮽙 and with at least δ confidence is a vector of length</p><formula xml:id="formula_3">O( 1 񮽙 2 log 1 δ ), whose j th entry is defined to be 񮽙 N i=1 a i g j (i)</formula><p>, and is easy to maintain under updates. This structure has been applied to find the (approximate) inner product of two vectors a and b with error ±񮽙񮽙a񮽙 2 񮽙b񮽙 2 <ref type="bibr" target="#b8">[9]</ref>. To keep up with the link speeds, a small number of sketches can be stored in SRAM. As new packets arrive, the sketch is updated. A sketch has the property that we can generate linear projections (inner products) of the data-streams with a small (polynomial) number of vectors quite easily and accurately, provided the dot product of corresponding unit vectors (the cosine) is large. This can be used in several ways. First, since any point query i on the signal can be viewed as merely the inner product of the signal with a vector that has a 1 in its i th component and 0 elsewhere, we can use the sketch to directly estimate the point query; likewise for range queries. Since there are only N point queries and N (N − 1)/2 range queries, which are small polynomials, sketches will suffice. Second, since wavelet transforms are linear projections of the signal with a specific set of N vectors, we can generate wavelet coefficient approximations from the sketch <ref type="bibr" target="#b8">[9]</ref> which can in turn be used for point or range query estimations on the signal up to error of ±񮽙񮽙a񮽙 2 . </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Count-Min Sketch.</head><p>Next we discuss about Count-Min (CM) sketches <ref type="bibr" target="#b4">[5]</ref>. CM sketches maintain an n-dimensional vector which is updated upon arrival of each packet (and its attributes). The current state at time t is a(t) = 񮽙a 1 (t), . . . , a n (t)񮽙. Initially a is the zero vector 0, so a i (0) for all i. Updates to the individual entries of the vector are presented as a stream of pairs. The t th update is (i t , c t ) and the vector is updated as a it (t) = a it (t−1)+c t and a i 񮽙 (t) = a i 񮽙 (t) for i 񮽙 񮽙 = i.</p><p>Count-Min sketch is defined with two parameters (񮽙, δ) and can be stored in an array of width w and depth d. Given parameters (񮽙, δ), let w = 񮽙 e 񮽙 񮽙 and d = 񮽙ln 1 δ 񮽙. We also need a set of hash functions h 1 , . . . , h d : {1, . . . , n} → {1, . . . , w} which are chosen uniformly at random from a pairwiseindependent family. To update the sketch upon arrival of each element, we have count <ref type="bibr">[j, h j</ref> </p><formula xml:id="formula_4">(i t )] ← count[j, h j (i t )] + c t , for 1 ≤ j ≤ d.</formula><p>At any time t, monitoring tasks might invoke queries to compute certain functions of interest on a(t). Effectiveness of sketching techniques will be realized, if a router supports query primitives to answer queries regarding plausible attacks based on vectors a and b corresponding to two data-streams. Such primitives will be:</p><p>• a point query, denoted by Q(i), to return an approximation of a i given by min j count[j, h j (i)]</p><p>• a range query Q(l, r) to return an approximation of</p><formula xml:id="formula_5">񮽙 r i=l a i • an inner product query, denoted by Q(a, b) is to approx- imate 񮽙 r i=l a i b i given by w 񮽙 k=1 count a [j, k] · count b [j, k].</formula><p>• an change range query, denoted by Q(l, r, e 1 , e 2 ) is to return an approximation of 񮽙 r i=l a i between events e 1 and e 2 and we discuss it later.</p><p>Bloom filter. A Bloom filter <ref type="bibr" target="#b9">[10]</ref> is a simple space-efficient randomized data structure to represent a multiset of n elements and support membership queries. When a list or set is used and space-usage needs to be minimized, a Bloom filter is often a good choice. A Bloom filter is an array of m bits initially all bits are set to 0. An incoming element with identifier id is hashed through k hash functions and the bit positions returned by the hash functions are set to 1. A location can be set to 1 multiple times but only the first change has an effect. Hence a Bloom filter may yield a false positive with probability <ref type="bibr" target="#b1">[2]</ref> (1 − ρ) k , where ρ = e −kn/m . In a counting Bloom filter, each bit in the Bloom filter is replaced by a small counter. When an item is inserted, k hash functions map the item to k buckets and the corresponding counters are incremented by the value associated with the id and when an item is deleted the corresponding k counters are decremented.  . The duplicate insensitivity arises from the fact that a bitmap hash function maps an element to a fixed bit every time it is inserted. The leftmost zero position, R, is used as an indicator of log 2 N . The expectation of R is</p><formula xml:id="formula_6">E[R] ≈ log 2 (0.773N ) which implies N ≈ 1.29×2 E[R] .</formula><p>Here where k i is the least significant bit position of the 1-bit in the i the FM sketch. The relative error is 0.78/ √ m. Moreover, as shown in the analysis, O(log 2 N ) should be an appropriate value of the sketch sizes for N distinct elements with space complexity O(m log 2 N ).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>IV. OUR CONTRIBUTIONS</head><p>Having described sketches, we now propose several change detection algorithms based on them.</p><p>• In our first approach, to capture unexpectedness, we define the change between two sketches S 1 (α 1 , β 1 ) and S 2 (α 1 , β 2 ) as S d = S 2 − kS 1 , since sketches are closed under linear combination; α i and β i denote the beginning and end of the i th monitoring interval and k is a threshold on the tolerable relative change. To give an example, assume that portscans activity is prevalent during an interval and is reflected through a high scanning rate. An alternative approach could be to maintain two sketches, S 1 and S 2 such that S 1 is updated when the scanning rate is high (or congestion is high) and S 2 is updated when there is no scanning. Using simple queries, accurate detection of the flows showing abrupt changes can be achieved.</p><p>• In the second approach, interactive periodic abrupt change discovery involves tasks; first we have to detect the periodic abrupt changes, then we need to age the summarization in sketches so that the router can pose queries. Our approach to discover attacks in a traffic is based on the computation of the moving average (MA) of the sketches, with a subsequent annotation of abrupt changes as the points with value higher than x standard deviations about the mean value (of point query) of the MA. The width of the moving window affects the sensitivity and accuracy of the estimation. We can use estimators as in <ref type="bibr" target="#b13">[14]</ref> for mean and variance.</p><p>1: Maintain w sketches, S = {s 1 , s 2 , . . . , s w }, corresponding to the last w measurement intervals</p><formula xml:id="formula_7">2: Update s M A = w 񮽙 i=1 g i s i / w 񮽙 i=1 g i , g i is weight of s i 3: Compute ¯ x i =median j v hi x where ¯ v hi x = count[i, h i (x)] − sum(S)/K/1 − 1/K sum(S) = 񮽙 j count[0][j]</formula><p>4: Compute var=median j var hi where</p><formula xml:id="formula_8">var hi x = K K − 1 񮽙 j (count[i][j]) 2 − 1 K − 1 (sum(S)) 2</formula><p>5: Attacks = {f i | flow ids from buckets in s w that exceed mean i (¯ x)+βvar} where β is user-defined constant factor.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Change Detection based on Probability Distribution</head><p>Any attack detection algorithm should be based on a change detection algorithm. Our algorithm is similar to that proposed in <ref type="bibr" target="#b12">[13]</ref> but our focus here is to emphasize the accuracy and compactness of sketches in a change-detection algorithm. The main idea behind Algorithm 1 is to detect the points where the underlying distribution of the data stream elements, captured using sketches, change. We present the case using FM sketches that estimate the number of distinct flows in regular intervals, where flows are identified by 5-tuples. As assumed before, this technique of detecting drastic changes in the number of distinct flows will give an indication of scanning activity -portscan, address, or other attacks. Another advantage behind leveraging the meta-algorithm in <ref type="bibr" target="#b12">[13]</ref> is that it provides theoretical bounds on misclassification.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Algorithm 1 Change detection using FM sketches</head><p>1: c 0 ← 0 2: for i = 1 . . . k do 3:</p><formula xml:id="formula_9">s i ← F M i 4:</formula><p>wind X,i ← m X,i intervals from time c 0</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>5:</head><p>wind Y,i ← next m Y,i intervals in incoming data streams 6: end for 7: while more flows to process do</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>8:</head><p>Slide wind Y,i by 1 sample Output change at time c 0</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>12:</head><p>Clear all windows and goto step 1</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>13:</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>end if 14: end while</head><p>In Algorithm 1, we keep k pairs of windows (sliding in parallel). Each window spans over multiple intervals and each interval has a count estimated by a FM sketch. In the process of comparing k pair of windows (one is a base window), if the distance exceeds a threshold, we declare a change. Another important issue is the distance function, for which we propose several possibilities: (a) a modification of the distance function from <ref type="bibr" target="#b12">[13]</ref> and (b) the difference of the sum of values between two windows (denote by sum-diff). One can also use the KL-distance function <ref type="bibr" target="#b0">1</ref> . We describe a distance function in Algorithm 2 that is used by Algorithm 1.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Algorithm 2 Calculating distance between two Windows</head><p>Input: S 1 and S 2 are two windows of any lengths Output: d, statistical distance between S 1 and S 2 1: j ← MaxFl /max(|S 1 |, |S 2 |) {MaxFl is a threshold} 2: <ref type="bibr">]</ref>),i = 1,..,j} 3: for i = 1 . . . j do 4: , where the empirical distribution is given by Pw(a) = N (a|w)+0.5</p><formula xml:id="formula_10">A←{A i |A i =[a i ,b i ],a i &lt;b i ,(a i ,b i ∼U [0,MaxFl</formula><formula xml:id="formula_11">S 1 (A i ) ← |S 1 ∩ A i |/|S 1 |, S 2 (A i ) ← |S 2 ∩ A i |/|S 2 | 5: dist i ← 2|S 1 (A i ) − S 2 (A i )| 6</formula><formula xml:id="formula_12">n+|A|/2</formula><p>and A is an interval of the</p><formula xml:id="formula_13">form [a, b], a, b ∈ + .</formula><p>Intuitively, Algorithm 2 tries to find the largest change in probability of a set. Given two finite domain subsets, S 1 and S 2 and a collection of measurable subsets denoted by A i s, d returns the largest variation distance between two distributions represented by S 1 and S 2 . Line 4 gives the empirical weight of A i w.r.t to S j and empirical distance is given by Line 5. We construct the measurable subsets by taking intervals from the real line in Line 2.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Other issues.</head><p>Sketches are inherently irreversible and are good for summarizing and querying only if we know the flow ids. It is difficult to obtain the flow ids corresponding to heavy-hitters or superspreaders. Once we detect the heavy change buckets, the main problem is retrieving the culprit keys from the Count-Min sketch. Some techniques have been proposed for offline detection <ref type="bibr" target="#b19">[20]</ref>; some detect flow ids by searching in small hierarchical key space <ref type="bibr" target="#b2">[3]</ref>. In case of a single bucket change in each hash table, we can recover the culprit key with some accuracy if we simply take the intersection of the reverse mappings for the heavy change buckets in each hash table. For our sketching schemes to work, we assume absence of spoofing. In <ref type="bibr" target="#b10">[11]</ref>, the authors proposed a new network architecture to overcome this problem: the IP address space is divided into a set of client addresses and a set of server addresses. This allow clients to initiate connections to servers, but does not allow clients to initiate connections to clients, nor servers to initiate connections to servers. With this architecture, many DoS and reflection DoS can be prevented. Moreover, the client address does not need to have a global significance, it just needs to have significance along the path between the client and the server, so that packets from the server can return to the client (this does not have any effect on the sketch mechanism, as all is needed is a unique identifier). Path-based client addresses make complete source-address spoofing impossible for the clients.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>V. EVALUATION</head><p>We consider three different sketching techniques, count-min (with 񮽙 = 0.01 and δ = 0.1), counting Bloom filter, and multicounting Bloom filter. To avoid counter overflow we choose 1000 counters and four hash functions. For the third sketching technique we implement a parallel multi-stage Bloom filter. We have a set of m counters and we divide those into k subsets of m/k counters per set using k independent hash functions. Every insertion increments one counter in each one of the k subsets. Again we use 1000 counters and four hash functions.</p><p>For change detection we implement an FM sketch with 100 bits and two bit-vectors. We consider two different traces; a general traffic flow <ref type="bibr" target="#b17">[18]</ref> that contains few unique flows and a malicious traffic flow (Mydoom trace <ref type="bibr" target="#b18">[19]</ref>) that contains thousands of unique flows. We partition each trace into ten uniform time intervals and calculate the distinct flows for each part of the trace by averaging the values over ten different runs with different hash functions.</p><p>First, we provide some evaluation results that supports our claims about using sketching techniques. Due to lack of space, we only present representative results that validate Algorithm 1 and the first approach in Section IV. <ref type="figure" target="#fig_4">Fig. 2(a)</ref> compares the flow size using three different sketching techniques and the exact value. We plot ten heavy flows out of 436 total flows from a trace file and observe that the estimated flow sizes are quite accurate. <ref type="figure" target="#fig_4">Fig. 2(b)</ref> represents the accuracy of change in flow sizes between two time intervals. We divide the traces into two time intervals and calculate the changes in flow sizes across the two intervals for each flow. Comparison of the estimated changes against exact changes shows that estimation is quite accurate. <ref type="figure" target="#fig_6">Fig. 3(a)</ref> shows the FM sketch estimation over ten intervals of the general traffic trace and <ref type="figure" target="#fig_6">Fig. 3(b)</ref> shows the estimation over ten intervals of the Mydoom trace. In both figures, we see small errors in estimation for the FM sketch (we know that the FM sketch estimate has some variance). Here we intend to show that the FM sketch gives a quite good approximation of the exact number of distinct flows, however the error percentage could go higher in certain cases due to the higher covariance nature of the hashing functions used in the FM sketch.  Next, we evaluate our proposed sketching techniques using a malicious trace of 100K packets. We partition the trace into 100 parts and for every part we estimate the FM sketch using Algorithm 1 and detect changes using the distance algorithm of Algorithm 2. We also calculate the change detection using the exact value of the flow counts and using the sum-diff distance algorithm. In <ref type="figure" target="#fig_8">Fig. 4(a)</ref>, we plot the normalized error between the exact change detection and that estimated by the FM sketch. We calculate the error as follows: Let V f m be  the vector of length 100 where the i th entry is 1 if change is detected at i interval. Similarly, we have a vector V exact corresponding to the experiment with exact flow counts. The error is defined as</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>FM Estimate Exact</head><formula xml:id="formula_14">edit distance(V f m ,Vexact)</formula><p>No of 1s in Vexact . We observe that the change detection by the FM sketch is almost keeping track with the exact value. In <ref type="figure" target="#fig_8">Fig. 4(b)</ref> we compare the performance of two distance function by applying the change detection Algorithm 1 to exact flow counts. To compute the error, we use a vector corresponding to each distance function and use the same formula as above. In <ref type="figure" target="#fig_10">Fig. 5</ref>, we plot the accuracy of the two different distance functions on a real trace in which we inject large values (to create change) at random intervals. Thus, we are able to verify with certainty the accuracy of our algorithm (in the sense that we do know where anomalies occur). The size of each injection is uniformly randomly drawn from <ref type="bibr">[10a, 20a]</ref> where a = max a i , a i is the count in interval i, and we inject at ten random places of 100 intervals. We see that the distance function that uses the difference of the sums of the windows leads to less accurate results. For three values of threshold, the distance function from Algorithm 2 does some misclassification. This may be due to the fact that, in Algorithm 2, we use a probabilistic distance measure. Whereas in sum-diff distance function, we are using deterministic sums of two windows (which might overlook change in distribution).</p><p>Implementation Issues: For detecting changes in real-time, sketches might need to be in SRAM for fast memory access. Therefore, per packet memory access could be an issue. For FM sketch, memory reference per packet is 1 through a hash function whereas for Bloom filter, memory references is k per packet during update. Similarly for Count-Min sketch with    depth k, it is k = 񮽙ln 1 δ 񮽙 where δ is an input parameter for Count-Min sketch. If one cares about false positive rate in Bloom filter, it is minimized for k ≈ 0.7 m n where m is the number bits in the array and n, the number of inserted elements. There is a trade-off between k and m/n given by the false-positive rate as (1 − (1 − 1/m) kn ) k .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>VI. CONCLUSION</head><p>Intrusion or attack detection requires knowledge of attack signatures or some invariant characteristics of Internet flows. In this paper, our attempt has been to detect changes in the flows which characterize scanning activities and propagation of worm or viruses. It is a non-trivial task to evade attacks that are based on spoofing without changing the network architecture or introducing levels of collaboration. We have argued the case for support in the router architecture to detect common Internet attacks. In the evaluation, we find that counting and multi-counting Bloom filters have high accuracy in estimating flow sizes and changes in flow sizes. We find that the FM sketch also estimates the number of distinct flows quite accurately. We observe that, while finding changes in distribution, the distance function affects the accuracy (a simple L 2 distance leads to inaccuracy).</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig. 1 .</head><label>1</label><figDesc>Fig. 1. Sketches in router linecard.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head></head><label></label><figDesc>Considering n elements, m counters, and k hash functions, O(log log m) bits are necessary for each counter to avoid overflow. A multi-counting Bloom filter is a counting Bloom filter with m counters and m buckets divided into k groups of size m/k. The range of the i th hash function maps to buckets {m(i − 1)/k + 1, ..., mi/k}.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>FM sketch.</head><label></label><figDesc>An FM sketch [8] is an unbiased estimator of the number N of distinct elements in a multiset and is order- and duplicate-insensitive. An FM sketch assumes a pseudo- random hash function which maps elements from [0 . . . 2 L ) → [0 . . . L] into a bitmap. Let ρ(x) represent the position of the least significant 1-bit in the binary representation of x and ρ(0) = L. If the hash values are uniformly distributed, the position of the least significant 1-bit in the bitmap is k with probability 1 2 k+1</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head></head><label></label><figDesc>9: if distance(wind X,i ,wind Y,i ) ≥ α i then 10: c 0 ← current time 11:</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Fig. 2 .</head><label>2</label><figDesc>Fig. 2. (a) Sketches of ten heavy ranked flows: A comparison of the exact flow size with the estimated values using three different sketching techniques. (b) Sketching changes in heavy ranked flows between two time intervals: A comparison of change in flows over two periods with that of three different sketching techniques over the same period. We count flow sizes in bytes.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Fig. 3 .</head><label>3</label><figDesc>Fig. 3. Comparison of distinct flows (exact) against the values estimated by the FM sketch. (a) FM sketch of ten intervals of normal traffic, (b) FM sketch of ten intervals of malicious traffic.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Fig. 4 .</head><label>4</label><figDesc>Fig. 4. (a) Change detection accuracy by the FM sketch using distance function (modified from [13]). We choose threshold values for which Error is non-zero. (b) Comparison of two different distance functions on exact flow counts. Through experiments, we select a range of threshold values for which Error is non-zero. The threshold values are different for different distance functions, but normalized to show them on the same scale.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head>Fig. 5 .</head><label>5</label><figDesc>Fig. 5. Accuracy of two distance functions on real traces in which synthetic changes were introduced. The x-axis represents values such as threshold is mean(X)+α std(X) where X is the flow counts.</figDesc></figure>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">The Space Complexity of Approximating the Frequency Moments</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Alon</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Matias</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Szegedy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM Symposium on Theory of Computing (STOC)</title>
		<imprint>
			<date type="published" when="1996" />
			<biblScope unit="page" from="20" to="29" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Broder</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Mitzenmacher</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Network Applications of Bloom Filters: A Survey. Internet Mathematics</title>
		<imprint>
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="485" to="509" />
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">A fast and compact method for unveiling significant patterns in high speed networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Bu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Cao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">P</forename><surname>Lee</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of IEEE INFOCOM</title>
		<meeting>of IEEE INFOCOM<address><addrLine>Alaska</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Holistic UDAFs at Streaming Speeds</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Cormode</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Johnson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Korn</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Muthukrishnan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Spatscheck</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Srivastava</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ACM SIGMOD</title>
		<meeting>ACM SIGMOD<address><addrLine>Paris, France</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2004-06" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title level="m" type="main">Improved Data Stream Summary: The Count-Min Sketch and its Applications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Cormode</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Muthukrishnan</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2003" />
		</imprint>
	</monogr>
<note type="report_type">Technical report</note>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Building a better NetFlow</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Estan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Keys</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Moore</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Varghese</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the SIGCOMM</title>
		<meeting>the SIGCOMM<address><addrLine>Portland, Oregon</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2004-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Automatically inferring patterns of resource consumption in network traffic</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Estan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Savage</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Varghese</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the SIGCOMM 2003</title>
		<meeting>the SIGCOMM 2003<address><addrLine>Karlsruhe, Germany</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2003" />
			<biblScope unit="page" from="137" to="148" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Probabilistic counting algorithms for data base algorithms</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Flajolet</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">N</forename><surname>Martin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Computer and System Sciences</title>
		<imprint>
			<biblScope unit="volume">31</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="182" to="209" />
			<date type="published" when="1985" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Surfing Wavelets on Streams: One-Pass Summaries for Approximate Aggregate Queries</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">C</forename><surname>Gilbert</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Kotidis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Muthukrishnan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">J</forename><surname>Strauss</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 27th VLDB Conference</title>
		<meeting>the 27th VLDB Conference<address><addrLine>Rome, Italy</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Theory and Network Application of Dynamic Bloom Filters</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Guo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Luo</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Infocom</title>
		<imprint>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Steps Towards a DoS-resistant Internet Architecture</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Handley</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Greenhalgh</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM SIGCOMM FDNA&apos;04 Workshop</title>
		<imprint>
			<date type="published" when="2004-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Internet Congestion Control for High Bandwidth-Delay Product Networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Katabi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Handley</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Rohrs</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ACM SIGCOMM&apos;02</title>
		<meeting>ACM SIGCOMM&apos;02<address><addrLine>Piitsburg,USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Detecting changes in data streams</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Kifer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Ben-David</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Gehrke</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of Int. Conf. on Very Large Data Bases</title>
		<meeting>of Int. Conf. on Very Large Data Bases</meeting>
		<imprint>
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Sketch-based Change Detection: Methods, Evaluation and Applications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Krishnamurthy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Sen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Chen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ACM Internet Measurement Conference&apos;03</title>
		<meeting>ACM Internet Measurement Conference&apos;03</meeting>
		<imprint>
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Sketch Guided Sampling-Using On-Line Estimates of Flow Size for Adaptive Data Collection</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Kumar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Xu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Infocom</title>
		<imprint>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Low-rate TCP-targeted denial of service attacks: the shrew vs. the mice and elephants</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Kuzmanovic</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">W</forename><surname>Knightly</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ACM SIGCOMM&apos;03</title>
		<meeting>ACM SIGCOMM&apos;03</meeting>
		<imprint>
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Diagnosing Network-Wide Traffic Anomalies</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Lakhina</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Crovella</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Diot</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ACM SIGCOMM&apos;04</title>
		<meeting>ACM SIGCOMM&apos;04</meeting>
		<imprint>
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title/>
		<ptr target="http://www.icir.org/enterprise-tracing/" />
	</analytic>
	<monogr>
		<title level="j">LBNL Traffic traces</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title/>
		<ptr target="ftp://pma.nlanr.net/traces/long/doom/20040126/COS-1075077419-1.tsh.gz" />
	</analytic>
	<monogr>
		<title level="j">NLANR MyDoom Traffic traces</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Reverse Hashing for Sketch-based Change Detection in High-Speed Networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Schweller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Gupta</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Parsons</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Chen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ACM/USENIX Internet Measurement Conference&apos;04</title>
		<meeting>ACM/USENIX Internet Measurement Conference&apos;04</meeting>
		<imprint>
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Low-rate TCP-Targeted DoS Attack Disrupts Internet Routing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><forename type="middle">M</forename><surname>Mao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Wang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of 14th Annual Network and Distributed System Security Symposium (NDSS)</title>
		<meeting>14th Annual Network and Distributed System Security Symposium (NDSS)<address><addrLine>San Diego, CA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2007-02" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
