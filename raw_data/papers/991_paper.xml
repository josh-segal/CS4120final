<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2019-03-26T16:37+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">YAPA: A generic tool for computing intruder knowledge</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mathieu</forename><surname>Baudet</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">DCSSI</orgName>
								<address>
									<country key="FR">France</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Véronique</forename><surname>Cortier</surname></persName>
							<affiliation key="aff1">
								<orgName type="laboratory">LORIA</orgName>
								<orgName type="institution">CNRS &amp; INRIA project Cassis</orgName>
								<address>
									<country key="FR">France</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stéphanie</forename><surname>Delaune</surname></persName>
							<affiliation key="aff2">
								<orgName type="laboratory">LSV</orgName>
								<orgName type="institution">ENS Cachan &amp; CNRS &amp; INRIA</orgName>
								<address>
									<country key="FR">France</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">YAPA: A generic tool for computing intruder knowledge</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Reasoning about the knowledge of an attacker is a necessary step in many formal analyses of security protocols. In the framework of the applied pi calculus, as in similar languages based on equational logics, knowledge is typically expressed by two relations: deducibility and static equivalence. Several decision procedures have been proposed for these relations under a variety of equational theories. However, each theory has its particular algorithm, and none has been implemented so far. We provide a generic procedure for deducibility and static equivalence that takes as input any convergent rewrite system. We show that our algorithm covers all the existing decision procedures for convergent theories. We also provide an efficient implementation, and compare it briefly with the more general tool ProVerif.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Understanding security protocols often requires reasoning about the information accessible to an online attacker. Accordingly, many formal approaches to security rely on a notion of deducibility <ref type="bibr" target="#b17">[18,</ref><ref type="bibr" target="#b18">19]</ref> that models whether a piece of data, typically a secret, is retrievable from a finite set of messages. Deducibility, however, does not always suffice to reflect the knowledge of an attacker. Consider for instance a protocol sending an encrypted Boolean value, say, a vote in an electronic voting protocol. Rather than deducibility, the key idea to express confidentiality of the plaintext is that an attacker should not be able to distinguish between the sequences of messages corresponding to each possible value.</p><p>In the framework of the applied pi-calculus <ref type="bibr" target="#b2">[3]</ref>, as in similar languages based on equational logics <ref type="bibr" target="#b9">[10]</ref>, indistinguishability corresponds to a relation called static equivalence: roughly, two sequences of messages are statically equivalent when they satisfy the same algebraic relations from the attacker's point of view. Static equivalence plays an important role in the study of guessing attacks (e.g. <ref type="bibr" target="#b12">[13,</ref><ref type="bibr" target="#b4">5,</ref><ref type="bibr" target="#b0">1]</ref>), as well as for anonymity properties and electronic voting protocols (e.g. <ref type="bibr" target="#b16">[17]</ref>). In several cases, this notion has also been shown to imply the more complex and precise notion of cryptographic indistinguishability <ref type="bibr" target="#b7">[8,</ref><ref type="bibr" target="#b0">1]</ref>, related to probabilistic polynomial-time Turing machines.</p><p>Kindly supported by ANR-07-SESU-002 AVOTÉAVOT´AVOTÉ and ARA SSIA FormaCrypt.</p><p>We emphasize that both deducibility and static equivalence apply to observations on finite sets of messages, and do not take into account the dynamic behavior of protocols. Nevertheless, deducibility is used as a subroutine by many general decision procedures <ref type="bibr" target="#b11">[12,</ref><ref type="bibr" target="#b10">11]</ref>. Besides, it has been shown that observational equivalence in the applied pi-calculus coincides with labeled bisimulation <ref type="bibr" target="#b2">[3]</ref>, that is, corresponds to checking a number of static equivalences and some standard bisimulation conditions. Deducibility and static equivalence rely on an underlying equational theory for axiomatizing the properties of cryptographic functions. Many decision procedures <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b13">14]</ref> have been proposed to compute these relations under a variety of equational theories, including symmetric and asymmetric encryptions, signatures, exclusive OR, and homomorphic operators. However, except for the class of subterm convergent theories <ref type="bibr" target="#b1">[2]</ref>, which covers the standard flavors of encryption and signature, each of these decision results introduces a new procedure, devoted to a particular theory. Even in the case of the general decidability criterion given in <ref type="bibr" target="#b1">[2]</ref>, we note that the algorithm underlying the proof has to be adapted for each theory, depending on how the criterion is fulfilled.</p><p>Perhaps as a consequence of this fact, none of these decision procedures has been implemented so far. Up to our knowledge the only tool able to verify static equivalence is ProVerif <ref type="bibr" target="#b8">[9,</ref><ref type="bibr" target="#b9">10]</ref>. This general tool can handle various equational theories and analyze security protocols under active adversaries. However termination of the verifier is not guaranteed in general, and protocols are subject to (safe) approximations.</p><p>The present work aims to fill this gap between theory and implementation and propose an efficient tool for deciding deducibility and static equivalence in a uniform way. It is initially inspired from a procedure for solving more general constraint systems related to active adversaries and equivalence of finite processes, presented in <ref type="bibr" target="#b4">[5]</ref>, with corrected extended version in <ref type="bibr" target="#b5">[6]</ref> (in French). However, due to the complexity of the constraint systems, this decision procedure was only studied for subterm convergent theories, and remains too complex to enable an efficient implementation.</p><p>Our first contribution is to provide and study a generic procedure for checking deducibility and static equivalence, taking as input any convergent theory (that is, any equational theory described by a finite convergent rewrite system). We prove the algorithm sound and complete, up to explicit failure cases. Note that (unfailing) termination cannot be guaranteed in general since the problem of checking deducibility and static equivalence is undecidable, even for convergent theories <ref type="bibr" target="#b1">[2]</ref>. To address this issue and turn our algorithm into a decision procedure for a given convergent theory, we provide two criteria. First, we define a syntactic criterion on the rewrite rules that ensures that the algorithm never fails. This criterion is enjoyed in particular by any convergent subterm theory, as well as the theories of blind signature and homomorphic encryption. Termination often follows from a simple analysis of the rules of the algorithm: as a proof of concept, we obtain a new decidability result for deducibility and static equivalence for the prefix theory, representing encryption in CBC mode.</p><p>Second, we provide a termination criterion based on deducibility: provided that failure cannot occur, termination on a given input is equivalent to the existence of some natural finite representation of deducible terms. As a consequence, we obtain that our algorithm can decide deducibility and static equivalence for all the convergent theories previously known to be decidable <ref type="bibr" target="#b1">[2]</ref>.</p><p>Our second contribution is an efficient implementation of this generic procedure, called YAPA. After describing the main features of the implementation, we report several experiments suggesting that our tool computes static equivalence faster and for more convergent theories than the general tool ProVerif <ref type="bibr" target="#b8">[9,</ref><ref type="bibr" target="#b9">10]</ref>. Because of space constraints, proofs are in an extended version of this paper <ref type="bibr" target="#b6">[7]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Preliminaries</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Term algebra</head><p>We start by introducing the necessary notions to describe cryptographic messages in a symbolical way. For modeling cryptographic primitives, we assume a given set of function symbols F together with an arity function ar : F → N. Symbols in F of arity 0 are called constants. We consider a set of variables X and a set of additional constants W called parameters. The (usual, first-order) term algebra generated by F over W and X is written F[W ∪ X ] with elements denoted by T, U, T 1 . . . More generally, we write F [A] for the least set of terms containing a set A and stable by application of symbols in F ⊆ F.</p><p>We write var(T ) (resp. par(T )) for the set of variables (resp. parameters) that occur in a term T . These notations are extended to tuples and sets of terms in the usual way. The set of positions (resp. subterms) of a term T is written pos(T ) ⊆ N * (resp. st(T )). The subterm of T at position p ∈ pos(T ) is written T | p . The term obtained by replacing T | p with a term U in T is denoted T [U ] p .</p><p>A (finite, partial) substitution σ is a mapping from a finite subset of variables, called its domain and written dom(σ), to terms. The image of a substitution is its image as a mapping im(σ) = {σ(x) | x ∈ dom(σ)}. Substitutions are extended to endomorphisms of F[X ∪ W] as usual. We use a postfix notation for their application. A term T (resp. a substitution σ) is ground iff var(T ) = ∅ (resp. var(im(σ)) = ∅).</p><p>For our cryptographic purposes, it is useful to distinguish a subset F pub of F, made of public function symbols, that is, intuitively, the symbols made available to the attacker. A recipe (or second-order term) M , N , M 1 . . . is a term in F pub <ref type="bibr">[W ∪X ]</ref>, that is, a term containing no private (non-public) function symbols. A plain term (or first-order term) t, r, s, t 1 . . . is a term in F <ref type="bibr">[X ]</ref>, that is, containing no parameters. A (public, ground, non-necessarily linear) n-ary context C is a recipe in F pub [w 1 , . . . , w n ], where we assume a fixed countable subset of parameters {w 1 , . . . , w n , . . .} ⊆ W. If C is a n-ary context, C[T 1 , . . . , T n ] denotes the term obtained by replacing each occurrence of w i with T i in C.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Rewriting</head><p>A rewrite system R is a finite set of rewrite rules l → r where l, r ∈ F <ref type="bibr">[X ]</ref> and var(r) ⊆ var(l). A term S rewrites to T by R, denoted S → R T , if there exist l → r in R, p ∈ pos(S) and a substitution σ such that S| p = lσ and T = S[rσ] p . We write → + R for the transitive closure of → R , → * R for its reflexive and transitive closure, and = R for its reflexive, symmetric and transitive closure.</p><p>A rewrite system R is convergent if is terminating, i.e. there is no infinite chains T 1 → R T 2 → R . . ., and confluent, i.e. for every terms S, T such that S = R T , there exists U such that S → * R U and T → * R U . A term T is R-reduced if there is no term S such that T → R S. If T → * R S and S is R-reduced then S is a R-reduced form of T . When this reduced form is unique (in particular if R is convergent), we write S = T ↓ R .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Equational theories</head><p>We equip the signature F with an equational theory represented by a set of equations E of the form s = t with s, t ∈ F <ref type="bibr">[X ]</ref>. The equational theory E generated by E is the least set of equations containing E that is stable under the axioms of congruence (reflexivity, symmetry, transitivity, application of function symbols) and under application of substitutions. We write = E for the corresponding relation on terms. Equational theories have proved very useful for modeling algebraic properties of cryptographic primitives <ref type="bibr" target="#b14">[15,</ref><ref type="bibr" target="#b1">2]</ref>.</p><p>We are particularly interested in theories E that can be represented by a convergent rewrite system R, i.e. theories for which there exists a convergent rewrite system R such that the two relations = R and = E coincide. The rewrite system R -and by extension the equational theory E-is subterm convergent if, in addition, we have that for every rule l → r ∈ R, r is either a subterm of l or a ground R-reduced term. This class encompasses the one of the same name used in <ref type="bibr" target="#b1">[2]</ref>, the class of dwindling theories used in <ref type="bibr" target="#b3">[4]</ref>, and the class of public-collapsing theories introduced in <ref type="bibr" target="#b15">[16]</ref>. Example 1. Consider the signature F enc = {dec, enc, , , π 1 , π 2 }. The symbols dec, enc and , are functional symbols of arity 2 that represent respectively the decryption, encryption and pairing functions, whereas π 1 and π 2 are functional symbols of arity 1 that represent the projection function on the first and the second component of a pair, respectively. The equational theory of pairing and symmetric (deterministic) encryption, denoted by E enc , is generated by the equations</p><formula xml:id="formula_0">E enc = {dec(enc(x, y), y) = x, π 1 (x, y) = x, π 2 (x, y) = y}.</formula><p>Motivated by the modeling of the ECB mode of encryption, we may also consider an encryption symbol that is homomorphic with respect to pairing:</p><formula xml:id="formula_1">E hom = E enc ∪ enc(x, y, z) = enc(x, z), enc(y, z) dec(x, y, z) = dec(x, z), dec(y, z) .</formula><p>If we orient the equations from left to right, we obtain two rewrite systems R enc and R hom . Both rewrite systems are convergent, only R enc is subterm convergent.</p><p>From now on, we assume a given equational theory E represented by a convergent rewrite system R. A symbol f is free if f does not occur in R. In order to model (an unbounded number of) random values possibly generated by the attacker, we assume that F pub contains infinitely many free public constants. We will use free private constants to model secrets, for instance the secret keys used to encrypt a message. Private (resp. public) free constants are closely related to bound (resp. free) names in the framework of the applied pi calculus <ref type="bibr" target="#b2">[3]</ref>. Our formalism also allows one to consider non-constant private symbols.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Deducibility and static equivalence</head><p>In order to describe the cryptographic messages observed or inferred by an attacker, we introduce the following notions of deduction facts and frames.</p><p>A deduction fact is a pair, written M t, made of a recipe M ∈ F pub [W ∪ X ] and a plain term t ∈ F <ref type="bibr">[X ]</ref>. Such a deduction fact is ground if var(M, t) = ∅. A frame, denoted by letters ϕ, Φ, Φ 0 . . . , is a finite set of ground deduction facts. The image of a frame is defined by im(</p><formula xml:id="formula_2">Φ) = {t | M t ∈ Φ}. A frame Φ is one-to-one if M 1 t, M 2 t ∈ Φ implies M 1 = M 2 .</formula><p>A frame ϕ is initial if it is of the form ϕ = {w 1 t 1 , . . . , w t } for some distinct parameters w 1 , . . . , w ∈ W. Initial frames are closely related to the notion of frames in the applied pi-calculus <ref type="bibr" target="#b2">[3]</ref>. The parameters w i can be seen as labels that refer to the messages observed by an attacker. Given such an initial frame ϕ, we denote by dom(ϕ) its domain dom(ϕ) = {w 1 , . . . , w }. If par(M ) ⊆ dom(ϕ), we write M ϕ for the term obtained by replacing each w i by t i in M . If in addition M is ground then t = M ϕ is a ground plain term.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Deducibility, recipes</head><p>Classically (see e.g. <ref type="bibr" target="#b1">[2]</ref>), a ground term t is deducible modulo E from an initial frame ϕ if there exists M ∈ F pub [dom(ϕ)] such that M ϕ = E t. This corresponds to the intuition that the attacker may compute (infer) t from ϕ. For the purpose of our study, we generalize this notion to arbitrary frames, and even sets of (non-necessarily ground) deduction facts φ, using the notations φ and E φ . Definition 1 (deducibility). Let φ be finite set of deductions facts, for instance a frame. We say that M is a recipe of t in φ, written M φ t, iff there exist a (public, ground, non-necessarily linear) n-ary context C and some deduction facts</p><formula xml:id="formula_3">M 1 t 1 , . . . , M n t n in φ such that M = C[M 1 , . . . , M n ] and t = C[t 1 , . . . , t n ].</formula><p>In that case, we say that t is syntactically deducible from φ, also written φ t.</p><p>We say that M is a recipe of t in φ modulo E, written M E φ t, iff there exists a term t such that M φ t and t = E t. In that case, we say that t is deducible from φ modulo E, written φ E t.</p><p>We note that M ϕ t is equivalent to M ϕ = t when ϕ is an initial frame and when t (or equivalently M ) is ground.</p><p>Example 2. Consider the equational theory E enc given in Example 1. Let ϕ = {w 1 enc(s 1 , k), enc(s 2 , k), w 2 k} where s 1 , s 2 and k are private constant symbols. We have that w 2 , w 2 ϕ k, k, and dec(proj 1 (w 1 ), w 2 ) Eenc ϕ s 1 .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Static equivalence, visible equations</head><p>Deducibility does not always suffice for expressing the knowledge of an attacker.</p><p>In particular, it does not account for the partial information that an attacker may obtain about secrets. This issue motivates the study of visible equations and static equivalence <ref type="bibr" target="#b2">[3]</ref>, defined as follows.</p><p>Definition 2 (static equivalence). Let ϕ be an initial frame. The set of visible equations of ϕ modulo E is defined as</p><formula xml:id="formula_4">eq E (ϕ) = {M N | M, N ∈ F pub [dom(ϕ)], M ϕ = E N ϕ}</formula><p>where is a dedicated commutative symbol. Two initial frames ϕ 1 and ϕ 2 with the same domain are statically equivalent modulo E, written ϕ 1 ≈ E ϕ 2 , if their sets of visible equations are equal, i.e.</p><formula xml:id="formula_5">eq E (ϕ 1 ) = eq E (ϕ 2 ).</formula><p>This definition is in line with static equivalence in the applied pi calculus <ref type="bibr" target="#b2">[3]</ref>. For the purpose of finitely describing the set of visible equations eq E (ϕ) of an initial frame, we introduce quantified equations of the form ∀z 1 , . . . , z q .M N where z 1 , . . . , z q ∈ X , q ≥ 0 and var(M, N ) ⊆ {z 1 , . . . , z q }. In the following, finite sets of quantified equations are denoted Ψ , Ψ 0 ,. . . We write Ψ |= M N when the ground equation M N is a consequence of Ψ in the usual, first-order logics with equality axioms for the relation (that is, reflexivity, symmetry, transitivity and compatibility with symbols in F pub ). When no confusion arises, we may refer to quantified equations simply as equations. As usual, quantified equations are considered up to renaming of bound variables.</p><p>Example 3. Consider again the equational theory E enc given in Example 1. Let ϕ 1 = {w 1 enc(c 0 , k), w 2 k} and ϕ 2 = {w 1 enc(c 1 , k), w 2 k} where c 0 , c 1 are public constants and k is a private constant. Let Ψ 1 = {enc(c 0 , w 2 ) w 1 } and Ψ 2 = {enc(c 1 , w 2 ) w 1 }. We have that Ψ i |= eq Eenc (ϕ i ) for i = 1, 2. Hence, eq Eenc (ϕ 1 ) = eq Eenc (ϕ 2 ) and the two frames ϕ 1 and ϕ 2 are not statically equivalent. However, it can be shown that {w 1 enc(c 0 , k)} ≈ Eenc {w 1 enc(c 1 , k)}.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Main procedure</head><p>In this section, we describe our algorithms for checking deducibility and static equivalence on convergent rewrite systems. After some additional notations, we present the core of the procedure, which consists of a set of transformation rules used to saturate a frame and a finite set of quantified equations. We then show how to use this procedure to decide deducibility and static equivalence, provided that saturation succeeds.</p><p>Soundness and completeness of the saturation procedure are detailed in Section 5. We provide sufficient conditions on the rewrite systems to ensure success of saturation in Section 6.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Decompositions of rewrite rules</head><p>Before stating the procedure, we introduce the following notion of decomposition to account for the possible superpositions of an attacker's context with a lefthand side of rewrite rule.</p><p>Definition 3 (decomposition). Let n, p, q be non-negative integers. A (n, p, q)-decomposition of a term l (and by an extension of any rewrite rule l → r) is a (public, ground, non-necessarily linear) context D ∈ F pub <ref type="bibr">[W]</ref> such that par(D) = {w 1 , . . . , w n+p+q } and l = D[l 1 , . . . , l n , y 1 , . . . , y p , z 1 , . . . , z q ] where -l 1 , . . . , l n are mutually-distinct non-variable terms, -y 1 , . . . , y p and z 1 , . . . , z q are mutually-distinct variables, and -y 1 , . . . , y p ∈ var(l 1 , . . . , l n ) whereas z 1 , . . . , z q ∈ var(l 1 , . . . , l n ).</p><p>A decomposition D is proper if it is not a parameter (i.e. D = w 1 ).</p><p>Example 4. Consider the rewrite rule dec(enc(x, y), y) → x. This rule admits two proper decompositions up to permutation of parameters:</p><formula xml:id="formula_6">-D 1 = dec(enc(w 1 , w 2 ), w 2 ) where n = 0, p = 0, q = 2, z 1 = x, z 2 = y; -D 2 = dec(w 1 , w 2 )</formula><p>where n = 1, p = 1, q = 0, l 1 = enc(x, y) and y 1 = y.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Transformation rules</head><p>To check deducibility and static equivalence, we proceed by saturating an initial frame, adding some deduction facts and equations satisfied by the frame. We consider states that are either the failure state ⊥ or a couple (Φ, Ψ ) formed by a one-to-one frame Φ in R-reduced form and a finite set of quantified equations Ψ .</p><p>Given an initial frame ϕ, our procedure starts from an initial state associated to ϕ, denoted by Init(ϕ), obtained by reducing ϕ and replacing duplicated terms by equations. Formally, Init(ϕ) is the result of a procedure recursively defined as follows: Init(∅) = (∅, ∅), and assuming Init(ϕ) = (Φ, Ψ ), we have</p><formula xml:id="formula_7">Init(ϕ {w t}) = (Φ, Ψ ∪ {w w }) if there exists some w t↓ R ∈ Φ (Φ ∪ {w t↓ R }, Ψ ) otherwise.</formula><p>The main part of our procedure consists in saturating a state (Φ, Ψ ) by means of the transformation rules described in <ref type="figure" target="#fig_0">Figure 1</ref>. The A rules are designed for applying a rewrite step on top of existing deduction facts. If the resulting term is already syntactically deducible then a corresponding equation is added (rule A.1); or else if it is ground, the corresponding deduction fact is added to the state (rule A.2); otherwise, the procedure may fail (rule A.3). The B rules are meant to add syntactically deducible subterms (rule B.2) or related equations (rule B.1). For technical reasons, rule A.1 is parametrized by a function Ctx with values of the form M or ⊥, and satisfying the following properties:</p><p>(a) if φ t↓ R , then for any Ψ and α, Ctx(φ ? R t, Ψ, α) = ⊥;</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Inferring deduction facts and equations by context reduction</head><p>Assume that l = D[l1, . . . , ln, y1, . . . , yp, z1, . . . , zq] is a proper decomposition of (l → r) ∈ R M1 t1, . . . , Mn+p tn+p ∈ Φ (l1, . . . , ln, y1, . . . , yp) σ = (t1, . . . , tn+p)</p><p>1. If there exists M = Ctx(Φ ∪ {z1 z1, . . . , zq zq} ? R rσ, Ψ, (l, r, D, σ)), then</p><formula xml:id="formula_8">(Φ, Ψ ) =⇒ (Φ, Ψ ∪ {∀z1, . . . , zq.D[M1, . . . , Mn+p, z1 . . . , zq] M }) (A.1) 2. Else, if (rσ)↓ R is ground, then (Φ, Ψ ) =⇒ (Φ ∪ {M0 (rσ)↓ R }, Ψ ∪ {∀z1, . . . , zq.D[M1, . . . , Mn+p, z1 . . . , zq] M0}) (A.2)</formula><p>where M0 = D[M1, . . . , Mn+p, a, . . . , a] for some fixed public constant a.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">Otherwise, (Φ, Ψ ) =⇒ ⊥ (A.3)</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Inferring deduction facts and equations syntactically</head><p>Assume that M0 t0, . . . , Mn tn ∈ Φ t = f (t1, . . . , tn) ∈ st(t0) f ∈ F pub 1. If there exists M such that (M t) ∈ Φ, Note that a simple choice for Ctx(φ ? R t, Ψ, α) is to solve the deducibility problem φ ? t↓ R in the empty equational theory, and then return a corresponding recipe M , if any. (This problem is easily solved by induction on t↓ R .) Yet, optimizing the function Ctx is a nontrivial task: on the one hand, letting Ctx(φ ? R t, Ψ, α) = ⊥ for more values φ, t, Ψ , α makes the procedure more likely to succeed; on the other hand, it is computationally more demanding. We explain in Section 6.1 the choice of Ctx made in our implementation.</p><formula xml:id="formula_9">(Φ, Ψ ) =⇒ (Φ, Ψ ∪ {f (M1, . . . , Mn) M }) (B.1) 2. Otherwise, (Φ, Ψ ) =⇒ (Φ ∪ {f (M1, . . . , Mn) t}, Ψ ) (B.2)</formula><p>We write =⇒ * for the transitive and reflexive closure of =⇒. The definitions of Ctx and of the transformation rules ensure that whenever S =⇒ * S and S is a state, then S is also a state, with the same parameters unless S = ⊥. Example 5. Consider the frame ϕ 1 previously described in Example 3. We can apply rule A.1 as follows. Consider the rewrite rule dec(enc(x, y), y) → x, the decomposition D 2 given in Example 4 and t 1 = enc(c 0 , k). We have Init(ϕ 1 ) = (ϕ 1 , ∅) =⇒ (ϕ 1 , {dec(w 1 , w 2 ) c 0 }). In other words, since we know the key k through w 2 , we can check that the decryption of w 1 by w 2 leads to the public constant c 0 . Next we apply rule B.1 as follows:</p><formula xml:id="formula_10">(ϕ 1 , {dec(w 1 , w 2 ) c 0 }) =⇒ (ϕ 1 , {dec(w 1 , w 2 ) c 0 , enc(c 0 , w 2 ) w 1 }).</formula><p>No more rules can then modify the state.</p><p>Main theorem. We now state the soundness and the completeness of the transformation rules provided that a saturated state is reached, that is, a state S = ⊥ such that S =⇒ S implies S = S. The technical lemmas involved in the proof are detailed in Section 5.</p><p>Theorem 1 (soundness and completeness). Let E be an equational theory generated by a convergent rewrite system R. Let ϕ be an initial frame and (Φ, Ψ ) be a saturated state such that Init(ϕ) =⇒ * (Φ, Ψ ).</p><formula xml:id="formula_11">1. For all M ∈ F pub [par(ϕ)] and t ∈ F[∅], we have M ϕ = E t ⇔ ∃N, Ψ |= M N and N Φ t↓ R 2. For all M , N ∈ F pub [par(ϕ)∪X ], we have that M ϕ = E N ϕ ⇔ Ψ |= M N .</formula><p>While the saturation procedure is sound and complete, it may not terminate, or fail if rule A.3 becomes the only applicable rule. In Section 6, we explore several sufficient conditions to prevent failure and ensure termination.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Application to deduction and static equivalence</head><p>Decision procedures for deduction and static equivalence follow from Theorem 1.</p><p>Algorithm for deduction. Let ϕ be an initial frame and t be a ground term. The procedure for checking ϕ E t runs as follows:</p><p>1. Apply the transformation rules to obtain (if any) a saturated state <ref type="bibr">(Φ, Ψ )</ref> such that Init(ϕ) =⇒ * (Φ, Ψ ); 2. Return yes if there exists N such that N Φ t↓ R (that is, the R-reduced form of t is syntactically deducible from Φ); otherwise return no.</p><p>Algorithm for static equivalence. Let ϕ 1 and ϕ 2 be two initial frames. The procedure for checking ϕ 1 ≈ E ϕ 2 runs as follows:</p><p>1. Apply the transformation rules to obtain (if possible) two saturated states</p><formula xml:id="formula_12">(Φ 1 , Ψ 1 ) and (Φ 2 , Ψ 2 ) such that Init(ϕ i ) =⇒ * (Φ i , Ψ i ), i = 1, 2; 2. For {i, j} = {1, 2}, for every equation (∀z 1 , . . . , z .M N ) in Ψ i , check that M ϕ j = E N ϕ j -that is, in other words, (M ϕ j )↓ R = (N ϕ j )↓ R ; 3.</formula><p>If so return yes; otherwise return no.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Soundness and completeness of the saturation</head><p>The proof of Theorem 1 is based on three main lemmas. First, the transformation rules are sound in the sense that, along the saturation process, we add only deducible terms and valid equations with respect to the initial frame.</p><p>Lemma 1 (soundness). Let ϕ be an initial frame and (Φ, Ψ ) be a state such that Init(ϕ) =⇒ * (Φ, Ψ ). Then, we have that</p><formula xml:id="formula_13">1. M Φ t ⇒ M ϕ = E t for all M ∈ F pub [dom(ϕ)] and t ∈ F[∅]; 2. Ψ |= M N ⇒ M ϕ = E N ϕ for all M, N ∈ F pub [dom(ϕ) ∪ X ].</formula><p>The next two lemmas are dedicated to the completeness of B and A rules, respectively. Lemma 2 ensures that saturated states account for all the syntactic equations possibly visible. Lemma 3 deals with the reduction of a deducible term along the rewrite system R. Using that R is convergent, this allows us to prove that every deducible term from a saturated frame is syntactically deducible.</p><p>Lemma 2 (completeness, syntactic equations). Let (Φ, Ψ ) be a state, and M , N be two terms such that M Φ t and N Φ t for some term t. Then there exists (Φ , Ψ ) such that (Φ, Ψ ) =⇒ * (Φ , Ψ ) using B rules and Ψ |= M N .</p><p>Lemma 3 (completeness, context reduction). Let (Φ, Ψ ) be a state and M , t, t be three terms such that M Φ t and t → R t . Then, either (Φ, Ψ ) =⇒ * ⊥ or there exist (Φ , Ψ ), M and t such that (Φ, Ψ ) =⇒ * (Φ , Ψ ), M Φ t with t → * R t , and Ψ |= M M . Besides, in both cases, the corresponding derivation from (Φ, Ψ ) can be chosen to consist of a number of B rules, possibly followed by one instance of A rule involving the same rewrite rule l → r as the rewrite step t → R t .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Termination and non-failure</head><p>In the previous section, we proved that saturated frames yield sound and complete characterizations of deducible terms and visible equations of their initial frames. Yet, the saturation procedure may still not terminate, or fail due to rule A.3. In this section, we study different conditions on the rewrite system R so that failure never happens and/or termination is ensured.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.1">A syntactic criterion to prevent failure</head><p>Our first criterion is syntactic and ensures that the algorithm never fails. It is enjoyed by a large class of equational theories, called layered convergent.</p><p>Definition 4 (layered rewrite system). A rewrite system R, and by extension its equational theory E, are layered if there exists an ascending chain of subsets</p><formula xml:id="formula_14">∅ = R 0 ⊆ R 1 ⊆ . . . ⊆ R N +1 = R (N ≥ 0), such that for every 0 ≤ i ≤ N , for every rule l → r in R i+1 − R i , for every (n, p, q)-decomposition l = D[l 1 , .</formula><p>. . , l n , y 1 , . . . , y p , z 1 , . . . , z q ], one of the following two conditions holds:</p><formula xml:id="formula_15">(i) var(r) ⊆ var(l 1 , . . . , l n ); (ii) there exist C 0 , C 1 , . . . , C k and s 1 , . . . , s k such that -r = C 0 [s 1 , . . . , s k ]; -for each 1 ≤ i ≤ k, C i [l 1 , .</formula><p>. . , l n , y 1 , . . . , y p , z 1 , . . . , z q ] rewrites to s i in zero or one step of rewrite rule in head position along R i .</p><p>In the latter case, we say that the context</p><formula xml:id="formula_16">C = C 0 [C 1 , . . . , C k ] is associated to the decomposition D of l → r. Note that C[l 1 , . . . , l n , y 1 , . . . , y p , z 1 , . . . , z q ] → * Ri r.</formula><p>Proposition 1. Assume that the function Ctx in use is maximal: for every φ and t, if there exists s such that φ s and t → * R s, then for any Ψ , α, Ctx(φ ? R t, Ψ, α) = ⊥. Then, provided that R is layered convergent, there exists no state (Φ, Ψ ) from which (Φ, Ψ ) =⇒ ⊥ is the only applicable derivation.</p><p>Practical considerations. Unfortunately, such a maximal Ctx is too inefficient in practice as one has to consider the syntactic deducibility problem φ ? s for every t → * R s. This is why we rather use the following lighter implementation: -for every index 0 ≤ i ≤ N , and every rule l → r in</p><formula xml:id="formula_17">R i+1 − R i , if l = D[l 1 , .</formula><p>. . , l n , y 1 , . . . , y p+q ] is a (n, p, q)-decomposition satisfying condition (ii) above for some (arbitrarily chosen) associated context C, then, for every φ and σ such that φ lσ, we let</p><formula xml:id="formula_18">Ctx(φ ? R rσ, Ψ, (l, r, D, σ)) = C[M 1 , . . . , M n+p+q ]</formula><p>where the M k are fixed recipes such that (M i l i σ) ∈ φ for 1 ≤ i ≤ n and (M n+j y j σ) ∈ φ for 1 ≤ j ≤ p + q; -otherwise, if φ t↓ R , we let Ctx(φ ? R t, Ψ, α) be some fixed M such that M φ t↓ R ; -in any other case, we let Ctx(φ ? R t, Ψ, α) = ⊥. Using similar ideas as for the proof of Proposition 1, we can show that, for any convergent rewrite system R, this choice of Ctx is compatible with property (b) of Subsection 4.2, and more generally with completeness, as long as, during saturation, the transformation rules A involve the rewrite rules of R i with greater priority than those of R j , i &lt; j. Moreover, when R is additionally layered, this definition ensures that the procedure never fails. Indeed, using the notations of <ref type="figure" target="#fig_0">Figure 1</ref>, Ctx(Φ ∪ {z 1 z 1 , . . . , z q z q } ? R rσ, Ψ, (l, r, D, σ)) = ⊥ implies that (ii) is false on D, thus (i) var(r) ⊆ var(l 1 , . . . , l n ) holds and (rσ)↓ R is ground.</p><p>Example 6. Any convergent subterm rewrite system R is layered convergent. Indeed, let N = 0 and R 1 = R. For any l → r in R and for every decomposition l = D[l 1 , . . . , l n , y 1 , . . . , y p , z 1 , . . . , z q ], the term r is a subterm of l, thus either r = C[l 1 , . . . , l n , y 1 , . . . , y p , z 1 , . . . , z q ] for some context C, or r is a subterm of some l i thus var(r) ⊆ var(l 1 , . . . , l n ).</p><p>Example 7. Other examples are provided by the theory of homomorphism E hom defined in Section 2.3 as well as the convergent theories of blind signatures E blind and prefix encryption E pref defined by the following sets of equations.</p><formula xml:id="formula_19">E blind = E enc ∪ unblind(blind(x, y), y) = x unblind(sign(blind(x, y), z), y) = sign(x, z) E pref = E enc ∪ pref(enc(x, y, z)) = enc(x, z)</formula><p>The theory E blind models primitives used in e-voting protocols <ref type="bibr" target="#b16">[17]</ref>. The prefix theory represents the property of many chained modes of encryption (e.g. CBC) where an attacker can retrieve any encrypted prefix out of a ciphertext.</p><p>Let us check for instance that the prefix theory E pref is layered. Let N = 1, R 1 be the rewrite system obtained from E enc by orienting the equations from left to right, and R 2 = R 1 ∪ {pref(enc(x, y, z)) → enc(x, z)}. The rewrite rules of R 1 satisfy the assumptions since R 1 forms a convergent subterm rewrite system. The additional rule pref(enc(x, y, z)) → enc(x, z) admits three decompositions up to permutation of parameters:</p><formula xml:id="formula_20">-l = pref(l 1 ), in which case var(r) ⊆ var(l 1 ); -l = pref(enc(l 1 , z)), in which case enc(π 1 (l 1 ), z) → R1 r; -l = pref(enc(x, y, z)), in which case r = enc(x, z).</formula><p>Verifying that the convergent theories E hom and E blind are layered is similar.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.2">Termination</head><p>In the previous subsection, we described a sufficient criterion for non-failure. To obtain decidability for a given layered convergent theory, there remains only to provide a termination argument. Such an argument is generally easy to develop by hand as we illustrate on the example of the prefix theory. For the case of existing decidability results from <ref type="bibr" target="#b1">[2]</ref>, such as the theories of blind signature and homomorphic encryption, we also provide a semantic criterion that allows us to directly conclude termination of the procedure.</p><p>Proving termination by hand. To begin with, we note that B rules always terminate after a polynomial number of steps. Let us write =⇒ n for the relation made of exactly n strict applications of rules (S =⇒ S iff S =⇒ S and S = S ).</p><p>Proposition 2. For every states S = (Φ, Ψ ) and S such that S =⇒ n S using only B rules, n is polynomially bounded in the size of im(Φ). This is due to the fact that frames are one-to-one and that the rule B.2 only adds deduction facts M t such that t is a subterm of an existing term in Φ. Hence, for proving termination, we observe that it is sufficient to provide a function s mapping each frame Φ to a finite set of terms s(Φ) including the subterms of im(Φ) and such that rule A.2 only adds deduction facts M t satisfying t ∈ s(Φ).</p><p>For subterm theories, we obtain polynomial termination by choosing s(Φ) to be the subterms of im(Φ) together with the ground right-hand sides of R.</p><p>Proposition 3. Let E be a convergent subterm theory. For every S = (Φ, Ψ ) and S such that S =⇒ n S , n is polynomially bounded in the size of im(Φ).</p><p>To conclude that deduction and static equivalence are decidable in polynomial time <ref type="bibr" target="#b1">[2]</ref>, we need to show that the deduction facts and the equations are of polynomial size. This requires a DAG representation for terms and visible equations. For our implementation, we have chosen not to use DAGs for the sake of simplicity (and perhaps efficiency) since DAGs require much heavier data structures. However, similar techniques as those described in <ref type="bibr" target="#b1">[2]</ref> would apply to implement our procedure using DAGs.</p><p>For proving termination of the prefix theory, we let s(Φ) be the minimal set containing Φ, closed by subterm and such that enc(t 1 , k) ∈ s(Φ) whenever enc(t 1 , t 2 , k) ∈ s(Φ). We then deduce that deduction and static equivalence are decidable for the equational theory E pref , which is a new decidability result.</p><p>A criterion to ensure termination. We now provide a semantic criterion that more generally explains why our procedure succeeds on theories previously known to be decidable <ref type="bibr" target="#b1">[2]</ref>. This criterion intuitively states that the set of deducible terms from any initial frame ϕ should be equivalent to a set of syntactically deducible terms. Provided that failures are prevented and assuming a fair strategy for rule application, we prove that this criterion is a necessary and sufficient condition for our procedure to terminate.</p><formula xml:id="formula_21">Definition 5 (fair derivation). An infinite derivation (Φ 0 , Ψ 0 ) =⇒ . . . =⇒ (Φ n , Ψ n ) =⇒ . .</formula><p>. is fair iff along this derivation, (a) B rules are applied with greatest priority, and (b) whenever a A rule is applicable for some instance (l → r, D, t 1 , . . . , t n , . . .), eventually the same instance of rule is applied during the derivation.</p><p>Fairness implies that any deducible term is eventually syntactically deducible.</p><formula xml:id="formula_22">Lemma 4. Let S 0 = (Φ 0 , Ψ 0 ) =⇒ . . . =⇒ (Φ n , Ψ n ) =⇒ . .</formula><p>. be an infinite fair derivation from a state S 0 . For every ground term t such that Φ 0 E t, either (Φ 0 , Ψ 0 ) =⇒ * ⊥ or there exists i such that Φ i t↓ R .</p><p>Proposition 4 (criterion for saturation). Let ϕ be an initial frame such that Init(ϕ) =⇒ * ⊥. The following conditions are equivalent:</p><p>(i) There exists a saturated couple (Φ, Ψ ) such that Init(ϕ) =⇒ * (Φ, Ψ ).</p><p>(ii) There exists a (finite) initial frame ϕ s such that for every term t, t is deducible from ϕ modulo E iff t↓ R is syntactically deducible from ϕ s . (iii) There exists no fair infinite derivation starting from Init(ϕ).</p><p>Together with the syntactic criterion described in Section 6.1, this criterion (Property (ii)) allows us to prove decidability of deduction and static equivalence for layered convergent theories that belong to the class of locally stable theories defined in <ref type="bibr" target="#b1">[2]</ref>. As a consequence, our procedure always saturates for the theories of blind signatures and homomorphic encryption since those theories are layered and have been proved locally stable <ref type="bibr" target="#b1">[2]</ref>. Other examples of layered convergent theories enjoying this criterion can be found in <ref type="bibr" target="#b1">[2]</ref> (e.g. a theory of addition).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Implementation: the YAPA tool</head><p>YAPA is an Ocaml implementation 4 of the saturation procedure presented in Section 4, using by default the optimized function Ctx defined in Section 6, and a fair strategy of rule application (see Definition 5).</p><p>The tool takes as input an equational theory described by a finite convergent rewrite system, as well as frame definitions and queries. A few optimizations may be activated for subterm theories, e.g. to accelerate normalization. The procedure starts by computing the decompositions of the rewrite system. Provided that the rewrite rules are given in an order compatible with the sets R 0 ⊆ . . . ⊆ R N +1 of Definition 4, it is able to recognize (fully or partially) layered theories and to pre-compute the associated contexts C related to condition (ii) of this definition, and exploited by the function Ctx in use for eliminating failure cases.</p><p>We have conducted several experiments on a PC Intel Core 2 Duo at 2.4 GHz with 2 Go RAM for various equational theories (see below) and found that YAPA provides an efficient way to check static equivalence and deducibility.</p><p>Equational theory E enc n = 10 E enc n = 14 E enc n = 16 E enc n = 18 E enc n = 20 E blind E pref E hom E add Execution time &lt; 1s 1,7s 8s 30s &lt; 3min &lt; 1s &lt; 1s &lt; 1s &lt; 1s</p><p>For the case of E enc , we have run YAPA on the frames ϕ n = {w 1 t 0 n , w 2 c 0 , w 3 c 1 } and ϕ n = {w 1 t 1 n , w 2 c 0 , w 3 c 1 }, where t i 0 = c i and t i n+1 = enc(t i n , k i n ), k i n , i ∈ {0, 1}. These examples allow us to increase the (tree, non-DAG) size of the distinguishing tests exponentially, while the sizes of the frames grow linearly. Despite the size of the output, we have observed satisfactory performances for the tool. We have also experimented YAPA on several convergent theories, e.g. E blind , E hom , E pref and the theory of addition E add defined in <ref type="bibr" target="#b1">[2]</ref>.</p><p>In comparison with the tool ProVerif <ref type="bibr" target="#b8">[9,</ref><ref type="bibr" target="#b9">10]</ref>, here instrumented to check static equivalences, our test samples suggest a running time between one and two orders of magnitude faster for YAPA. Also we did not succeed in making ProVerif terminate on the two theories E hom and E add . Of course, these results are not entirely surprising given that ProVerif is tailored for the more general (and difficult) problem of protocol (in)security under active adversaries. In particular ProVerif's initial preprocessing of the rewrite system appears more substantial than ours and does not terminate on the theories E hom and E add (although termination is guaranteed for linear or subterm-convergent theories <ref type="bibr" target="#b9">[10]</ref>).</p><p>Altogether, these results suggest that YAPA significantly improves the state of the art for checking deducibility and static equivalence under convergent theories, both from practical and theoretical perspectives.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig. 1 .</head><label>1</label><figDesc>Fig. 1. Transformation rules</figDesc></figure>

			<note place="foot" n="4"> Freely available at http://www.lsv.ens-cachan.fr/ ∼ baudet/yapa/</note>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Guessing attacks and the computational soundness of static equivalence</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Abadi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Baudet</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Warinschi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Foundations of Software Science and Computation Structures (FOSSACS&apos;06)</title>
		<imprint>
			<date type="published" when="2006" />
			<biblScope unit="page" from="398" to="412" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Deciding knowledge in security protocols under equational theories</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Abadi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Cortier</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Theoretical Computer Science</title>
		<imprint>
			<biblScope unit="volume">387</biblScope>
			<biblScope unit="issue">1-2</biblScope>
			<biblScope unit="page" from="2" to="32" />
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Mobile values, new names, and secure communication</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Abadi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Fournet</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">28th ACM Symposium on Principles of Programming Languages (POPL&apos;01)</title>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2001" />
			<biblScope unit="page" from="104" to="115" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Intruders with caps</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Anantharaman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Narendran</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Rusinowitch</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">18th International Conference on Term Rewriting and Applications (RTA&apos;07)</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2007" />
			<biblScope unit="volume">4533</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Deciding security of protocols against off-line guessing attacks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Baudet</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">12th ACM Conference on Computer and Communications Security (CCS&apos;05)</title>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="2005" />
			<biblScope unit="page" from="16" to="25" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">Sécurité des protocoles cryptographiques : aspects logiques et calculatoires</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Baudet</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2007" />
			<pubPlace>LSV, ENS Cachan, France</pubPlace>
		</imprint>
	</monogr>
<note type="report_type">Thèse de doctorat</note>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">YAPA: A generic tool for computing intruder knowledge</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Baudet</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Cortier</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Delaune</surname></persName>
		</author>
		<idno>LSV-09-03</idno>
	</analytic>
	<monogr>
		<title level="m">Laboratoire Spécification et Vérification</title>
		<meeting><address><addrLine>ENS Cachan, France</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2009-02" />
			<biblScope unit="volume">28</biblScope>
		</imprint>
	</monogr>
<note type="report_type">Research Report</note>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Computationally sound implementations of equational theories against passive adversaries</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Baudet</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Cortier</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Kremer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">32nd International Colloquium on Automata, Languages and Programming (ICALP&apos;05)</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2005" />
			<biblScope unit="volume">3580</biblScope>
			<biblScope unit="page" from="652" to="663" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">An Efficient Cryptographic Protocol Verifier Based on Prolog Rules</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Blanchet</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">14th Computer Security Foundations Workshop (CSFW&apos;01)</title>
		<imprint>
			<publisher>IEEE Comp. Soc. Press</publisher>
			<date type="published" when="2001" />
			<biblScope unit="page" from="82" to="96" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Automated verification of selected equivalences for security protocols</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Blanchet</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Abadi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Fournet</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Logic and Algebraic Programming</title>
		<imprint>
			<biblScope unit="volume">75</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="3" to="51" />
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">An NP decision procedure for protocol insecurity with XOR</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Chevalier</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Küsters</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Rusinowitch</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Turuani</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">18th IEEE Symposium on Logic in Computer Science (LICS&apos;03)</title>
		<imprint>
			<publisher>IEEE Comp. Soc. Press</publisher>
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Intruder deductions, constraint solving and insecurity decision in presence of exclusive or</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Comon-Lundh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Shmatikov</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">18th IEEE Symposium on Logic in Computer Science (LICS&apos;03)</title>
		<imprint>
			<publisher>IEEE Comp. Soc. Press</publisher>
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Analysing password protocol security against off-line dictionary attacks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Corin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Doumen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Etalle</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2nd International Workshop on Security Issues with Petri Nets and other Computational Models (WISP&apos;04)</title>
		<imprint>
			<publisher>ENTCS</publisher>
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Deciding knowledge in security protocols for monoidal equational theories</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Cortier</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Delaune</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">14th International Conference on Logic for Programming, Artificial Intelligence, and Reasoning (LPAR&apos;07)</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">A survey of algebraic properties used in cryptographic protocols</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Cortier</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Delaune</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Lafourcade</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Computer Security</title>
		<imprint>
			<biblScope unit="volume">14</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="1" to="43" />
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">A decision procedure for the verification of security protocols with explicit destructors</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Delaune</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Jacquemard</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">11th ACM Conference on Computer and Communications Security (CCS&apos;04)</title>
		<imprint>
			<date type="published" when="2004" />
			<biblScope unit="page" from="278" to="287" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Verifying privacy-type properties of electronic voting protocols</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Delaune</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Kremer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">D</forename><surname>Ryan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Computer Security</title>
		<imprint>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
	<note>To appear</note>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Breaking and fixing the Needham-Schroeder public-key protocol using FDR</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Lowe</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Tools and Algorithms for the Construction and Analysis of Systems (TACAS&apos;96)</title>
		<imprint>
			<publisher>Springer-Verlag</publisher>
			<date type="published" when="1996" />
			<biblScope unit="volume">1055</biblScope>
			<biblScope unit="page" from="147" to="166" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Constraint solving for bounded-process cryptographic protocol analysis</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Millen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Shmatikov</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">8th ACM Conference on Computer and Communications Security (CCS&apos;01)</title>
		<imprint>
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
