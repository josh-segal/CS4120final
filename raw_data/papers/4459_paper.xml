<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2019-03-26T16:50+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Structural Patterns of Tractable Sequentially-Optimal Planning</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Katz</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Faculty of Industrial Engineering and Management Technion</orgName>
								<orgName type="institution">Israel Institute of Technology Haifa</orgName>
								<address>
									<country key="IL">Israel</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Carmel</forename><surname>Domshlak</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Faculty of Industrial Engineering and Management Technion</orgName>
								<orgName type="institution">Israel Institute of Technology Haifa</orgName>
								<address>
									<country key="IL">Israel</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Structural Patterns of Tractable Sequentially-Optimal Planning</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>We study the complexity of sequentially-optimal classical planning, and discover new problem classes for whose such optimization is tractable. The results are based on exploiting numerous structural characteristics of planning problems, and a constructive proof technique that connects between certain tools from planning and tractable constraint optimization. In particular, we believe that structure-based tractability results of this kind may help devising new admissible search heuris-tics. We discuss the prospects of this direction along a principled extension of pattern-database heuristics to &quot;structural patterns&quot; of unlimited di-mensionality.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Introduction</head><p>General planning is known to be computationally hard <ref type="bibr" target="#b7">(Chapman 1987;</ref><ref type="bibr" target="#b13">Erol, Nau, &amp; Subrahmanian 1995)</ref>, and even propositional planning is PSPACEcomplete <ref type="bibr" target="#b6">(Bylander 1994)</ref>. However, computational tractability remains a fundamental issue in automated problem solving, and the reason for that is twofold. First, many planning problems in the manufacturing and process industry are believed to be highly structured, allowing for efficient planning if exploiting this structure <ref type="bibr" target="#b25">(Williams &amp; Nayak 1997;</ref><ref type="bibr" target="#b22">Klein, Jonsson, &amp; Bäckström 1998)</ref>. Second, tractable subclasses of planning underly some of the most influential heuristics that have been suggested for planning via directional search <ref type="bibr" target="#b3">(Bonet &amp; Geffner 2001;</ref><ref type="bibr" target="#b17">Hoffmann &amp; Nebel 2001;</ref><ref type="bibr" target="#b24">Refanidis &amp; Vlahavas 2001;</ref><ref type="bibr" target="#b15">Haslum &amp; Geffner 2000)</ref>. Unfortunately, this far the palette of tractable planning remains extremely limited, and the situation is even more severe for tractable optimal planning. To date, less than a handful of non-trivial fragments of optimal planning problems are known to be tractable <ref type="bibr" target="#b1">(Bäckström &amp; Klein 1991;</ref><ref type="bibr" target="#b6">Bylander 1994;</ref> Copyright c 2007, American Association for Artificial Intelligence (www.aaai.org). All rights reserved. <ref type="bibr">2006</ref>; <ref type="bibr" target="#b20">Jonsson 2007)</ref>, and this across numerous notions of optimality that have been considered useful.</p><p>We believe that extending the toolbox of tractable optimal planning is critically important as it may allow us, for instance, extending the (still extremely limited) palette of admissible heuristics for planning as search. In this work we study the complexity of sequentiallyoptimal planning within the UB fragment of classical planning problems. Specifically, UB is a fragment of the SAS + formalism <ref type="bibr" target="#b2">(Bäckström &amp; Nebel 1995)</ref> that corresponds to problems with binary-valued state variables and unary-effect actions. The notion of sequential optimality is based on probably the most canonical plan quality measure that sums up the individual costs of the plan's actions. In general, even nonoptimal planning for UB is PSPACE-complete, that is, as hard as general classical planning <ref type="bibr" target="#b6">(Bylander 1994)</ref>. Moreover, only a handful of UB sub-fragments are known to be tractable <ref type="bibr" target="#b1">(Bäckström &amp; Klein 1991;</ref><ref type="bibr" target="#b25">Williams &amp; Nayak 1997;</ref><ref type="bibr" target="#b4">Brafman &amp; Domshlak 2003)</ref>, and the sequentiallyoptimal planning is tractable only for two such subfragments of UB <ref type="bibr" target="#b1">(Bäckström &amp; Klein 1991;</ref>).</p><p>Here we study the complexity of sequentiallyoptimal planning for UB as a function of (1) The global structure of the problem's causal graph.</p><p>The special cases we consider here correspond to trees, inverted trees, singly-connected DAGs (polytrees), and directed-path singly-connected DAGs.</p><p>(2) The local connectivity of the causal graph. Here we study the impact (or absence of such) of the in-degree and/or out-degree of the causal graph's nodes being bounded by a constant.</p><p>(3) The k-dependence property of the problem's actions. This property has a close connection to the problem's causal graph, but is not expressed by the latter. In some sense, this property refers to a certain local structure of the problem's actions with respect to the causal graph.</p><p>Considering the interplay between the three parameters above, we discover novel tractable sub-fragments of UB, and in particular, of the sequentially-optimal planning for UB. For some of these fragments, we show that relaxing their specification along any of the three dimensions leads to an NP-hard class of problem. Our tractability results are based (each in a different manner) on a proof technique that connects between certain tools from planning and tractable constraint optimization. This technique appears to be rather robust, suggesting that further investigation in this direction is very promising.</p><p>While discovering islands of tractability in the sea of (optimal) planning is of theoretical interest on its own, we believe that structurally-characterized tractable fragments of problems (such as presented here), have a potential to help devising new admissible search heuristics. In the last part of the paper we discuss the prospects of this direction along a principled extension of the pattern-database heuristics <ref type="bibr">(Culberson &amp; Schaef- fer 1998;</ref><ref type="bibr" target="#b11">Edelkamp 2001)</ref> to "structural patterns" that alleviate the requirement for patterns to be of a low (up to poly-logarithmic) dimensionality <ref type="bibr" target="#b21">(Katz &amp; Domshlak 2007</ref>).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Formalism and Notation</head><p>Problems of classical planning correspond to reachability analysis in state models with deterministic actions and complete information. In this work we focus on state models corresponding to a fragment of the SAS + formalism <ref type="bibr" target="#b2">(Bäckström &amp; Nebel 1995</ref>) that captures problem with binary state variables and unaryeffect actions. Following <ref type="bibr" target="#b1">(Bäckström &amp; Klein 1991)</ref>, in what follows we refer to this subclass of SAS + as UB. Considering the applicability of actions, in SAS + it helps to distinguish between pre-conditions and prevail conditions of the actions. The former are required values of variables that are affected by the action. The latter are required values of variables that are not affected by the action. The post-conditions of an action describe the new values taken by its precondition variables after the action execution. For example, having truck T and package P in location L are a prevail and a pre-condition for loading P into T in L, respectivelyboth conditions are essential, but, after performing the action, the truck is still in L, while the package is no longer there (but inside T ).</p><p>Definition 1 A UB problem instance is given by a quadruple Π = V, A, I, G, where:</p><p>• V = {v 1 , . . . , v n } is a set of state variables over binary domains Dom(v i ). The domain Dom(v i ) of v i induces an extended domain Dom + (v i ) = Dom(v i ) ∪ {u}, where u denotes the dummy value: unspecified.</p><p>• I is a fully specified initial state, that is, I ∈ ×Dom(v i ). By I[i] we denote the value of v i in I.</p><p>• G ∈ ×Dom + (v i ) is a partial assignment to V, specifying the set of alternative goal states. By G[i] we denote the value provided by G to v i (with, possibly, . By A v ⊆ A we denote the actions changing the value of v, and from unary-effectness we have</p><formula xml:id="formula_0">G[i] = u.) • A = {a 1 , . . . , a N } is</formula><formula xml:id="formula_1">A v ∩A v = ∅ if v = v .</formula><p>In this work we focus on sequentially-optimal planning (SO-planning, for short) in which, for every ρ ∈ A * , we have cost(s 0 , ρ) = a∈ρ cost(a) if ρ is a plan for Π, and cost(s 0 , ρ) = ∞ otherwise. The (possibly non-uniform) costs of actions in A are assumed to be all non-negative.</p><p>Following <ref type="bibr" target="#b4">(Brafman &amp; Domshlak 2003)</ref>, here we relate between the complexity of UB planning and the causal graph structure <ref type="bibr" target="#b0">(Bacchus &amp; Yang 1994;</ref><ref type="bibr" target="#b23">Knoblock 1994;</ref><ref type="bibr" target="#b25">Williams &amp; Nayak 1997;</ref><ref type="bibr" target="#b4">Brafman &amp; Domshlak 2003;</ref><ref type="bibr" target="#b10">Domshlak &amp; Dinitz 2001;</ref><ref type="bibr" target="#b16">Helmert 2006;</ref><ref type="bibr" target="#b5">Brafman &amp; Domshlak 2006;</ref><ref type="bibr" target="#b20">Jonsson 2007</ref>).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Definition 2</head><p>The causal graph CG Π of a UB problem Π = V, A, I, G is a digraph over the nodes V. An edge ( − −− → v i , v j ) appears in CG Π if (and only if) some action a ∈ A changes the value of v j while having a prevail condition involving some value of v i , that is,</p><formula xml:id="formula_2">post(a)[j] = u ∧ prv(a)[i] = u.</formula><p>For each node v ∈ CG Π , by In(v) and Out(v) we denote the in-and out-degrees of v, respectively, and In(CG Π )/Out(CG Π ) stand for the maximal indegree/out-degree of the CG Π nodes. Assuming CG Π is connected, in what follows we give a special attention to the following acyclic cases of the causal graph's structure. A causal CG Π is a T tree if In(CG Π ) ≤ 1, and there exists v ∈ V such that In(v) = 0.</p><p>I inverted tree if Out(CG Π ) ≤ 1, and there exists v ∈ V such that Out(v) = 0.</p><p>P polytree if CG Π contains no undirected cycles.</p><p>S directed-path singly connected if there is at most one directed path from each node v ∈ CG Π to any other node v ∈ CG Π . In what follows, we use T, I, P, and S to refer to the corresponding fragments of UB, and we use subscript/superscript b to refer to a fragment induced by the additional constraint of in-degree/out-degree being bounded by a constant. It is not hard to verify that we have T, I ⊂ P ⊂ S, with T ⊂ P b and I ⊂ P b .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Causal Graph and Bounded Connectivity</head><p>The complexity of UB planning as a function of the causal graphs structure has been first studied in <ref type="bibr">(Braf- man &amp; Domshlak 2003)</ref>, where it was shown that nonoptimal planning is tractable for P b and NP-complete 1 for S b . The gap left in <ref type="bibr" target="#b4">(Brafman &amp; Domshlak 2003)</ref> has been recently closed in <ref type="bibr">(Giménez 2006</ref>) where it was shown that planning for P is NP-complete, and the proof of this result actually carries out to the I fragment as well. In addition, since out-degree of the causal graph in I is ≤ 1, the result in <ref type="bibr">(Giménez 2006</ref>) immediately implies that bounding out-degree of the nodes can possibly lead to tractability only in case of P b b , or one of its sub-fragments.</p><p>Considering only the structure of the causal graph and its local connectivity, all the above leaves us with P b still being a candidate for tractable SO-planning. Our first positive result below affirms this possibility.</p><p>Theorem 1 SO-planning for P b is tractable.</p><p>The proof of Theorem 1 is constructive, and our algorithm for SO-planning for P b is based on compiling a P b problem Π into a constraint optimization problem COP Π = (X , F) over variables X , functional components F, and the global objective min ϕ∈F ϕ(X ) such that (i) the description size of COP Π is polynomial in the description size of Π, (ii) the tree-width of the cost network of COP Π is bounded by a constant, (iii) if Π is unsolvable then all the assignments to X evaluate the objective function to ∞, and otherwise, the optimum of the global objective is obtained on and only on the assignments to X that correspond to SO-plans for Π, (iv) given an optimal solution to COP Π , the corresponding SO-plan for Π can be reconstructed from the former in polynomial time. Having such a compilation scheme, we then can solve COP Π using the standard, poly-time algorithm for constraint optimization over trees <ref type="bibr" target="#b9">(Dechter 2003)</ref>, and find an optimal solution for Π. Here we reuse some data structures suggested in <ref type="bibr" target="#b4">(Brafman &amp; Domshlak 2003)</ref> for non-optimal planning for P b , but exploit them in a very much different manner. Likewise, useful for us Corollary 1 below follows from Lemma 1 in <ref type="bibr" target="#b4">(Brafman &amp; Domshlak 2003)</ref>.</p><p>Corollary 1 For any solvable problem Π ∈ S over n state variables, any SO-plan ρ for Π, and any state variable v in Π, the number of value changes of v along ρ is ≤ n.</p><p>We begin with providing some helpful notation that refers to the components of a given UB problem Π = V, A, I, G. First, for each variable v ∈ V, we denote the initial value I[v] of v by b v , and the opposite value by w v . Using this notation and Corollary 1, by</p><formula xml:id="formula_3">σ(v) = b 1 v · w 1 v · b 2 v · · · b j+1 v , n = 2j, b 1 v · w 1 v · b 2 v · · · w j v , n = 2j − 1, , j ∈ N</formula><p>we denote the maximally possible, locally timestamped sequence of values of v along an optimal plan ρ. Next, for each variable v, by <ref type="bibr">[v]</ref> we denote the set of all non-empty prefixes of σ(v).</p><formula xml:id="formula_4">A prefix σ ∈ [v] is called valid if the last element of σ is compatible with G[v], that is, equals G[v] if G[v] = u. The subset of all valid prefixes of σ(v) is denoted by * [v] ⊆ [v].</formula><p>We now proceed with specifying the constraint optimization problem COP Π . 1. The variable set X contains a variable x v for each planning variable v ∈ V, and the domain Dom(x v ) consists of all valid prefixes of σ(v). That is,</p><formula xml:id="formula_5">X = {x v | v ∈ V}, Dom(x v ) = * [v]<label>(1)</label></formula><p>2. For each planning variable v with parents pred(v) = {w 1 , . . . , w k }, the set F contains a non-negative, real-valued function ϕ v with the scope</p><formula xml:id="formula_6">Q v = {x v , x w1 , . . . , x w k }<label>(2)</label></formula><p>The more involved part is specifying the function set F. In what follows, we assume that, for each v ∈ V, each a ∈ A v , and each w ∈ pred(v), we have prv(a)[w] = u. (In case of P b , this assumption causes neither loss of generality nor a complexity blow up.) First, for each planning variable v with pred(v) = ∅, and for each σ ∈ * [v], we set</p><formula xml:id="formula_7">ϕ v (σ ) = |σ | 2 · C(a wv ) + |σ | − 1 2 · C(a bv ) (3)</formula><p>where post(a wv ) = {w v }, post(a bv ) = b v , and C(a) = cost(a) if a ∈ A, and ∞, otherwise. It is easy to verify that ϕ v (σ ) corresponds to the optimal cost of performing |σ | − 1 value changes of v in Π.</p><p>Next we proceed with specifying the function ϕ v for a variable v with pred(v) = {w 1 , . . . , w k }, k ≥ 1. For</p><formula xml:id="formula_8">v 1 3 3 C C C C v 2 v 3 } } { { { { v 4 } } { { { { 3 3 C C C C v 5 v 7 v 6 x v1 G G G G x v2 x v3 w w w w x v4 w w w w G G G G x v5</formula><p>x v7 x v6</p><p>Figure 1: Causal graph of a planning problem Π ∈ P b (left), and the cost network of COP Π (right).</p><formula xml:id="formula_9">each valid prefix σ ∈ * [v]</formula><p>, and each set of valid prefixes</p><formula xml:id="formula_10">σ 1 ∈ * [w 1 ], . . . , σ k ∈ * [w k ], we want to set ϕ v (σ , σ 1 , . . . , σ k ) to the optimal cost of per- forming |σ | − 1 value changes of v in Π, given that w 1 , . . . , w k change their values |σ 1 | − 1, . . . , |σ k | − 1 times, respectively. In what follows, we reduce deter- mining ϕ v (σ , σ 1 , . . . , σ k )</formula><p>to solving a single-source shortest path problem on a weighted directed graph G e (v) that extends a similarly-named graphical structure suggested in <ref type="bibr" target="#b4">(Brafman &amp; Domshlak 2003)</ref>.</p><p>Given σ 1 , . . . , σ k as above, the digraph G e (v) is created in three steps. First, we construct a digraph G(v) = (V, E), nodes of which stand for the elements of σ(v), and, for each action a ∈ A v , if post(a) <ref type="bibr">[v]</ref> = w v , then, for each pair of nodes b i v , w i v , the edge set E contains an edge e from b i v to w i v , labeled with a pair label l(e) = prv(a), cost(a). Otherwise, if post(a) <ref type="bibr">[v]</ref> = b v , then E contains similar edges for each pair of nodes w i v , b i+1 v , mutatis mutandis. The prv and cost parts of l(e) are denoted by prv(e) and cost(e), respectively.</p><p>Next, the digraph G(v) is expanded into a digraph G (v) = (V , E ) by substituting each edge e ∈ E with a set of edges (between the same nodes), labeled with all possible assignments of the timestamped elements of σ 1 , . . . , σ k to prv(e). For example, an edge e ∈ E labeled with b <ref type="bibr">w1</ref> b <ref type="bibr">w2</ref> , 10 might be substituted in E with edges labeled with Informally, the digraph G (v) can be viewed as a projection of the prefixes σ 1 , . . . , σ k on the base digraph</p><formula xml:id="formula_11">{{b 1 w1 b 1 w2 , 10, b 1 w1 b 2 w2 , 10, b 2 w1 b 1 w2 , 10, . . . }. Fi- nally, we set V = V ∪ {s v , t v },</formula><formula xml:id="formula_12">G(v). The digraph G e (v) = (V e , E e ) is then con- structed from G (v) as follows. The nodes V e corre- spond to the edges of G (v). The edges ( −−−→ v e , v e ) ∈ E</formula><p>e correspond to all pairs of immediately consecutive edges e, e ∈ E such that, for</p><formula xml:id="formula_13">1 ≤ i ≤ k, either prv(e)[w i ] = prv(e )[w i ], or prv(e )[w i ] appears after prv(e)[w i ] on σ i . Finally, each edge ( −−−→ v e , v e ) ∈ E e is weighted with cost(e ).</formula><p>The graph G e (v) provides the last building block for the algorithm depicted in <ref type="figure" target="#fig_2">Figure 2</ref>. Given a problem Π ∈ P b , the algorithm compiles it into the constraint procedure polytree-k-indegree(Π = (V, A, I, G)) create variables X as in Eq. 1 create functions F = {ϕv | v ∈ V} with scopes as in Eq. 2 for each v ∈ V do if pred(v) = ∅ then specify ϕv according to Eq. 3</p><formula xml:id="formula_14">elseif pred(v) = {w1, . . . , w k } then construct G(v) (based on I[v], G[v]</formula><p>, and Av) for each {σ</p><formula xml:id="formula_15">1 ∈ * [w1], . . . , σ k ∈ * [w k ]} do construct G (v) (from on G(v), and σ 1 , . . . , σ k ) construct G e (v) (from G (v)) for each σ ∈ * [v] do</formula><p>π := minimal-cost path of |σ | − 1 edges from the source node optimization problem COP Π . It is not hard to verify from the definition of P b and Eqs. 1-2 that (i) for each variable x ∈ X , |Dom(x)| = n + 1, and (ii) the treewidth of the cost network of COP Π is bounded by a constant. <ref type="figure">(Figure 1</ref> illustrates the polytree causal graph of a Π ∈ P b , and the cost network of the corresponding COP Π ; the top-most variables and the maximal cliques in the latter correspond to the functional components of COP Π .) Given that, COP Π can be solved in poly-time using the well-known algorithm for constraint optimization over trees <ref type="bibr" target="#b9">(Dechter 2003)</ref>. Lemma 1 (proof omitted) addresses the correctness and complexity of this construction, and thus accomplishes the proof of Theorem 1.</p><formula xml:id="formula_16">bw 1 · · · bw k of G e (v) if returned π then ϕv(σ , σ 1 , . . . , σ k ) := cost(π) else ϕv(σ , σ 1 , . . . , σ k ) := ∞ set COPΠ := (X , F ) with global objective min P ϕ∈F ϕ(X ) x := solve-tree-cop(COPΠ) if P ϕ∈F ϕ(x) = ∞ then return failure return extract-plan-polytree-k-indegree(x)</formula><p>Lemma 1 Given a planning problem Π ∈ P b , (i) COP Π can be constructed in poly-time, and (ii) given a solution x for COP Π with ϕ∈F ϕ(x) = α, if α = ∞, then Π is unsolvable, and otherwise, a plan of cost α for Π can be reconstructed from x in poly-time.</p><p>The algorithm for P b in <ref type="figure" target="#fig_2">Figure 2</ref> is polynomial, but is rather involved and its complexity is exponential in poly(In(CG Π )). It is quite possible that more efficient algorithms for P b , or, definitely, for some of its fragments can be devised. For instance, it can already be shown that, for T problems with uniform-cost actions, there exists a simple and efficient SO-planning algorithm, and its complexity is given in Theorem 2.</p><p>Theorem 2 SO-planning for T with uniform-cost actions can be done in time Θ(|V| 2 ).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Causal Graph and Local Structure</head><p>The causal graphs provide important information about the structure of the planning problems, but obviously not all the important such information. In fact, a closer look at Definition 2 reveals that some information used for defining causal graphs then gets hidden by this structure. To start with an example, let us consider the multi-valued encoding of the Logistics-style problems <ref type="bibr" target="#b16">(Helmert 2006</ref>). In these problems, each variable representing the location of a package has as its parents in CG all the variables representing alternative transportation means (i.e., tracks, planes, etc.), and yet, each individual action affecting the location of a package is prevailed by at most one such parent variable. (You cannot load/unload a package into/from more than one vehicle.) In short, even when In(CG) is Θ(n), the number of v's parents that actively determine applicability of an action from A v may still be bounded by a constant. This stresses the fact that causal graph provides an aggregative view on variable independence, and local structure information is suppressed by this view.</p><p>In what follows, we consider the impact of such local structure on the complexity of SO-planning for our structural fragments UB. Given a UB problem Π = (V, A, I, G), let the dependence bound of Π be given by db Π = max a∈A |{v ∈ V | prv(a) <ref type="bibr">[v]</ref> = u}|. For any problem Π, and any k, if db Π ≤ k, we say that Π satisfies the property of k-dependence. For any fragment F of UB and any k ∈ N, by F(k) we denote the subfragment of F satisfying k-dependence.</p><p>Recall that the fragment P of UB is NP-hard even for non-optimal planning <ref type="bibr">(Giménez 2006</ref>). Our main result here is positive-at least for the most extreme (yet, says the example above, practically useful) setting of k = 1, satisfying k-dependence does bring us to an island of tractability P(1).</p><p>Theorem 3 SO-planning for P(1) with uniform-cost actions (and thus, planning for general P(1)) are tractable.</p><p>Similarly to the polytree-k-indegree algorithm for P b , our algorithm for P(1) exploits the idea of compiling a planning problem Π into a tractable constraint optimization problem COP Π . However, the planningto-COP compilation here is very much different from this for P b . In fact, this difference is unavoidable since the construction in polytree-k-indegree heavily relies on the fact that In(CG Π ) = O(1), and we do not have this property in P(1).</p><p>Here as well, we begin with providing some notation. Given a P(1) problem Π = (V, A, I, G), for each v ∈ V, each w ∈ pred(v), and each α ∈ {b v , w v }, β ∈ {b w , w w }, by a α|β we denote the action a with post(a) <ref type="bibr">[v]</ref> = α and prv(a) <ref type="bibr">[w]</ref> = β. Since Π is 1-dependent, this implies that a is prevailed by the value of w only. (Note that a α|β may not belong to the action set A of Π.)</p><p>The proof of Theorem 3 is based on a certain property of the P(1) problems with respect to the notion of conservative action sequences given by Definition 3.</p><p>Definition 3 Let Π = (V, A, I, G) be an UB(1) problem instance. An action sequence from A is called conservative if, for each pair of actions a α|β , a α|γ ∈ , we have β = γ, and thus a α|β = a α|γ . That is, all the changes of each variable to a certain value are performed by the same action.</p><p>Given that, the (possibly empty) set of all conservative plans Π is denoted by P c (Π).</p><p>The property of conservatism is clearly strong, and thus, in general, solvable problems in UB(1) may not have conservative plans at all. Lemma 2, however, states that this is very much not the case for P(1).</p><p>Lemma 2 For every solvable P(1) problem Π = (V, A, I, G), we have P c (Π) = ∅. Moreover, if Π is uniform-cost, then P c (Π) contains at least one SOplan.</p><p>The impact of Lemma 2 on our construction for uniform-cost P(1) below is that we can now restrict our attention to conservative plans only. Given that, the constraint optimization problem COP Π = (X , F) for a uniform-cost problem Π = (V, A, I, G) ∈ P(1) is specified as follows.</p><p>The variable set X contains a variable x v for each planning variable v ∈ V, and a variable x w v for each edge ( − − → w, v) ∈ CG Π . That is,</p><formula xml:id="formula_17">X = X V ∪ X E , X V = {x v | v ∈ V} X E = {x w v | ( − − → w, v) ∈ CG Π }<label>(5)</label></formula><p>For each variable x v ∈ X V , the domain Dom(x v ) consists of all valid prefixes of σ(v). For each variable x w v ∈ X E , the domain Dom(x w v ) consists of all triples of integers δ w wv , δ w bv , n w v satisfying Eq. 6.</p><formula xml:id="formula_18">Dom(xv) = * [v] Dom(x w v ) =  δ w wv , δ w bv , n w v ˛ ˛ ˛ ˛ 0 ≤ n w v ≤ n δ w wv , δ w bv ∈ {0, 1}</formula><p>ff <ref type="formula">(6)</ref> The semantics of Eq. 6 is as follows. Let {w 1 , . . . , w k } be an arbitrary fixed ordering of pred(v). If x v takes the value σ v ∈ Dom(x v ), then v is forced to provide σ v sequence of values. In turn, if x wi v takes the value δ wi wv , δ wi bv , n wi v , then n wi v corresponds to the number of value changes of v, δ wi wv = 1 (δ wi bv = 1) forces the parents {w 1 , . . . , w i } ⊆ pred(v) to support all the changes of v to w v (respectively, to b v ), and δ wi wv = 0 (δ wi bv = 0) relieves the parents {w 1 , . . . , w i } from this responsibility.</p><formula xml:id="formula_19">ϕ(δ w wv , δ w bv , n w v , σw) = 8 &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &lt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; : 0, δ w wv = 0, δ w bv = 0, 0, δ w wv = 1, δ w bv = 0, (a wv |bw ∈ Av) ∨ ((|σw| &gt; 1) ∧ (a wv |ww ∈ Av)), 0, δ w wv = 0, δ w bv = 1, (a bv |bw ∈ Av) ∨ ((|σw| &gt; 1) ∧ (a bv |ww ∈ Av)), 0, δ w wv = 1, δ w bv = 1, (a wv |bw , a bv |bw ∈ Av) ∨ ((|σw| &gt; 1) ∧ (a wv |ww , a bv |ww ∈ Av)), 0, δ w wv = 1, δ w bv = 1, |σw| ≥ n w v , a wv |bw , a bv |ww ∈ Av, 0, δ w wv = 1, δ w bv = 1, |σw| &gt; n w v , a wv |ww , a bv |bw ∈ Av, ∞, otherwise<label>(4)</label></formula><p>For each variable x ∈ X , the set F contains a nonnegative, real-valued function ϕ x with the scope</p><formula xml:id="formula_20">Qx = 8 &gt; &gt; &gt; &lt; &gt; &gt; &gt; : {xv}, x = xv, k = 0 {xv, x w k v }, x = xv, k &gt; 0 {x w 1 v , xw 1 }, x = x w 1 v , k &gt; 0 {x w j v , x w j−1 v , xw j }, x = x w j v , 1 &lt; j ≤ k (7)</formula><p>where pred(v) = {w 1 , . . . , w k } (and k = 0 means pred(v) = ∅). Proceeding now with specifying the functional components F of COP Π , first, for each x v with pred(v) = ∅, and for each</p><formula xml:id="formula_21">σ v ∈ * [v], we set ϕ xv (σ v ) to ϕx v (σv) = 8 &gt; &gt; &gt; &lt; &gt; &gt; &gt; : 0, |σv| = 1, 1, (|σv| = 2) ∧ (aw v ∈ Av), |σv| − 1, (|σv| &gt; 2) ∧ (aw v , a bv ∈ Av), ∞, otherwise<label>(8)</label></formula><p>In turn, for each planning variable v ∈ V with pred(v) = {w 1 , . . . , w k }, k &gt; 0, the function ϕ xv is set to</p><formula xml:id="formula_22">ϕx v (σv, δ w k wv , δ w k bv , n w k v ) = 8 &gt; &gt; &gt; &lt; &gt; &gt; &gt; : 0, (|σv| = 1) ∧ (δ w k wv , δ w k bv , n w k v = 0, 0, 0), 1, (|σv| = 2) ∧ (δ w k wv , δ w k bv , n w k v = 1, 0, 1), |σv| − 1, (|σv| &gt; 2) ∧ (δ w k wv , δ w k bv , n w k v = 1, 1, |σv| − 1), ∞, otherwise<label>(9)</label></formula><p>The functions ϕ xv capture the, marginal over the actions A v , cost of providing a sequence σ v of value changes of v in Π, given that (in case of Eq. 9) the parents of v are "ready to support these value changes". In specifying the remaining functional components we use an "indicator" function ϕ specified in Eq. 4. The semantics of ϕ is that, for each v ∈ V, each w ∈ pred(v), and each (δ w wv , δ w bv , n w v , σ w ) ∈ Dom(x w v ) × Dom(x w ), we have ϕ(δ w wv , δ w bv , n w v , σ w ) = 0 if the value sequence σ w of w can support all the changes of v to w v (if δ w wv = 1) and all the changes of v to b v (if δ w bv = 1), out of n w v value changes of v in Π. Given the indicator function ϕ, for each v ∈ V, the functional component ϕ x w 1 v is specified as</p><formula xml:id="formula_23">ϕ x w 1 v (δ w 1 wv , δ w 1 bv , n w 1 v , σw 1 ) = ϕ(δ w 1 wv , δ w 1 bv , n w 1 v , σw 1 ),<label>(10)</label></formula><p>and the rest of the functional components</p><formula xml:id="formula_24">ϕ x w 2 v , . . . , ϕ x w k v are specified as ϕ x w j v (δ w j wv , δ w j bv , n w j v , δ w j−1 wv , δ w j−1 bv , n w j−1 v , σw j ) = 8 &gt; &gt; &gt; &lt; &gt; &gt; &gt; : ϕ(δ w j wv − δ w j−1 wv , δ w j bv − δ w j−1 bv , n w j v , σw j ), n w j v = n w j−1 v , δ w j wv ≥ δ w j−1 wv , δ w j bv ≥ δ w j−1 bv , ∞ otherwise (11)</formula><p>This finalized the construction of COP Π , and this construction constitutes the first two steps of the algorithm polytree-1-dep in <ref type="figure" target="#fig_3">Figure 3(a)</ref>. The subsequent steps of this algorithm are conceptually similar to these of the polytree-k-indegree algorithm, with the major difference being in the plan reconstruction routines (omitted here). It is not hard to verify from Eqs. 5-7, and the fact that the causal graph of Π ∈ P(1) forms a polytree that (i) for each variable x ∈ X , |Dom(x)| = poly(n), and (ii) the tree-width of the cost network of F is ≤ 3. <ref type="figure" target="#fig_3">Figure 3</ref>(b-c) depicts the causal graph of a problem Π ∈ P(1), and the cost network of the corresponding COP Π ; here as well, the top-most variables and the cliques in the cost network correspond to the functional components of COP Π . Lemma 3 (proof omitted) provides the central part of the proof of Theorem 3.</p><p>Lemma 3 Given a planning problem Π ∈ P(1) with uniform-cost actions, (i) COP Π can be constructed in poly-time, and (ii) given a solution x for COP Π with ϕ∈F ϕ(x) = α, if α = ∞, then Π is unsolvable, and otherwise, a plan of cost α for Π can be reconstructed from x in poly-time.</p><p>Finally, one may ask whether 1-dependence is not a strong enough property to make the SO-planning tractable even for some more complex than polytree forms of the causal graph. Theorem 4, however, provides a negative answer to this question.</p><p>Theorem 4 Sequentially optimal planning for S b b (1) with uniform-cost actions is NP-complete.</p><p>procedure polytree-1-dep(Π = (V, A, I, G)) create variables X as in Eqs. 5-6 create functions F = {ϕx | x ∈ X } with scopes as in Eq. 7 for each x ∈ X do set ϕx according to Eqs. 8-11 set COPΠ := (X , F ) with global objective min</p><formula xml:id="formula_25">P ϕ∈F ϕ(X ) x := solve-tree-cop(COPΠ) if P ϕ∈F ϕ(x) = ∞ then return failure return extract-plan-polytree-1-dep(x) (a) v 1 # # 0 0 0 0 0 0 0 0 0 v 2 v 3 × × v 4 × × # # 0 0 0 0 0 0 0 0 0 v 5 v 7 v 6</formula><p>x v1 x v2 y y y y The proof of Theorem 4 is by a polynomial reduction from the well-known Minimal Vertex Cover problem.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>From PDBs to Structural Patterns?</head><p>The tractability results in general are of theoretical interest on their own because they shed light on what makes and what does not make problems hard for planning and for plan optimization. However, we also believe that structurally-characterized tractable fragments of optimal planning can be operationalized in devising new admissible search heuristics. Here we discuss the prospects of this direction in the scope of extending the pattern-database heuristics <ref type="bibr" target="#b8">(Culberson &amp; Schaeffer 1998;</ref><ref type="bibr" target="#b11">Edelkamp 2001)</ref> to "structural patterns" of unlimited dimensionality.</p><p>A heuristic is admissible if it never overestimates the true cost of reaching the nearest goal state. Most often, an admissible heuristic for planning is derived from the optimal cost of achieving the goals in an overapproximating abstraction of the planning problem in hand. One type of abstractions, homomorphisms, simplify the original problem by systematically contracting groups of states to single states. Most typically, a such state gluing is obtained by projecting the original problem onto a subset of its parameters, as if ignoring the constraints that fall outside the projection.</p><p>In planning, homomorphisms have been successfully explored in the scope of domain-independent pattern database (PDB) heuristics <ref type="bibr">(Culberson &amp; Schaef- fer 1998;</ref><ref type="bibr" target="#b11">Edelkamp 2001;</ref><ref type="bibr" target="#b12">2002)</ref>. In short, given a SAS + problem Π = V, A, I, G, each subset of variables V ⊆ V defines a pattern abstraction Π <ref type="bibr">[V ]</ref> = V , A <ref type="bibr">[V ]</ref> , I <ref type="bibr">[V ]</ref> , G <ref type="bibr">[V ]</ref> by intersecting the initial state, the goal, and all the actions' pre, prevail and post condition lists with V (Edelkamp 2001). The idea behind the PDB heuristics is elegantly simple. First, we select a (relatively small) set of subsets V 1 , . . . , V k of V such that, for 1 ≤ i ≤ k, (a) Π <ref type="bibr">[Vi]</ref> is an over-approximating abstraction of Π, (b) the size of V i is sufficiently small to perform reachability analysis in Π <ref type="bibr">[Vi]</ref> by an (either explicit or symbolic) exhaustive search.</p><p>Let h <ref type="bibr">[Vi]</ref> (s) be the optimal cost of achieving the abstract goal G <ref type="bibr">[Vi]</ref> from the abstract state s <ref type="bibr">[Vi]</ref> . To obtain an admissible heuristic, if the set of abstract problems <ref type="bibr" target="#b14">Felner, Korf, &amp; Hanan 2004;</ref><ref type="bibr" target="#b11">Edelkamp 2001)</ref>, the PDB heuristic can be set to <ref type="bibr">et al. 2006</ref>). The Achilles heel of the PDB heuristics is that each pattern (that is, each selected subset of variables V i ) is required to be small so that reachability analysis in Π <ref type="bibr">[Vi]</ref> could be done by exhaustive search. In short, computing h <ref type="bibr">[Vi]</ref> (s) in polynomial time requires satisfying |V i | = O(poly(log |V|)). Note that this constraint implies an inherent scalability limitation of the PDB heuristics-as the problems of interest grow, limiting patterns to poly-logarithmic dimensionality will unavoidably make them less and less informative with respect to the original problems.</p><formula xml:id="formula_26">Π [V1] , . . . , Π [V k ] satisfy certain requirements of disjointness (</formula><formula xml:id="formula_27">h(s) = k i=1 h [Vi] (s). Otherwise, one can set h(s) = max k i=1 h [Vi] (s) (Holte</formula><p>One can notice, however, that this is not necessarily the only way to proceed. In principle, given a SAS + problem Π = V, A, I, G, one can select a (relatively small) set of subsets V 1 , . . . , V k of V such that, for 1 ≤ i ≤ k, (a) Π <ref type="bibr">[Vi]</ref> is an over-approximating abstraction of Π, (b) the reachability analysis in Π <ref type="bibr">[Vi]</ref> is tractable (not necessarily due to the size of but) due to the specific structure of Π <ref type="bibr">[Vi]</ref> What is important here is that the second requirement can in principle be satisfied even if the size of each selected pattern V i is Θ(|V|).</p><p>A priori, this generalization of the PDB heuristics idea to structural patterns is appealing as it allows using patterns of unlimited dimensionality. The pitfall, however, is that such structural patterns correspond exactly to tractable fragments of optimal planning, and, as we already mentioned, the palette of such known fragments is extremely limited. This obstacle on the way to structural pattern heuristics has been the principal original motivation for our work, and we believe that further research on the optimal planning tractability is required.</p><p>On the other hand, some preliminary positive evidence for realizability of the structural patterns heuristics idea is already abound <ref type="bibr" target="#b21">(Katz &amp; Domshlak 2007</ref>).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Summary and Future Work</head><p>We have studied the complexity of sequentially-optimal classical planning with respect to the interplay between the topology of the problem's causal graph, and certain types of local structure of the problems induced by their action sets. For some problem classes, we showed that such optimal planning is tractable, and that relaxing the specification of these classes takes us out to NP-hard classes of problem. We believe that there is a room for further extending the palette of tractable optimal planning, and we plan to continue our research in this direction. In particular, we conjecture that sequentiallyoptimal planning for P(1) problems with non-uniform action costs is tractable as well. Proving that, however, will require some additional insights into the problem.</p><p>Finally, we discussed the prospects of using structure-based tractability results in the scope of homomorphism abstractions for new admissible heuristics for general planning. We believe that this direction is very promising, and, obviously, completely open for future investigation. In particular, in addition to extending the palette of tractable optimal planning as much as possible, materializing this idea of structural pattern heuristics will require addressing numerous additional issues inherited from the PDB framework (e.g., optimizing the pattern set selection).</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head></head><label></label><figDesc>a finite set of actions. Each action a is a triplet pre(a), post(a), prv(a), where pre(a), post(a), prv(a) ⊆ ×Dom + (v i ) denote the pre-, post-, and prevail conditions of a, respectively. By pre(a)[i], post(a)[i], and prv(a)[i] we denote the corresponding values of v i . • All actions A are unary-effect, that is, for each a ∈ A, there is exactly one variable v i ∈ V such that post(a)[i] = u. Likewise, for every v i ∈ V, we have -either pre(a)[i] = u or prv(a)[i] = u, and -post(a)[i] = u if and only if pre(a)[i] = u, in which case post(a)[i] = pre(a)[i]</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head></head><label></label><figDesc>and add a single edge labeled with the first elements of σ 1 , . . . , σ k and zero cost (i.e., b 1 w1 · · · b 1 w k , 0) from s v to the (original source) node b 1 v , plus a single edge labeled with the last elements of σ 1 , . . . , σ k and zero cost from the (original sink) node of G(v) to t v .</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: Sequentially optimal planning for P b .</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: (a) SO-planning for P(1); (b) Causal graph of a planning problem Π ∈ P(1), and (c) the cost network of COP Π (right).</figDesc></figure>

			<note place="foot" n="1"> The result in (Brafman &amp; Domshlak 2003) is stated for S, but its proof can easily be rephrased to hold for S b .</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgments</head><p>The authors were partially supported by the C. Wellner Research Fund.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Downward refinement and the efficiency of hierarchical problem solving</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Bacchus</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yang</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Q</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">AIJ</title>
		<imprint>
			<biblScope unit="volume">71</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="43" to="100" />
			<date type="published" when="1994" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Planning in polynomial time: The SAS-PUBS class</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Bäckström</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Klein</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Comp. Intell</title>
		<imprint>
			<biblScope unit="volume">7</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="181" to="197" />
			<date type="published" when="1991" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Complexity results for SAS + planning</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Bäckström</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Nebel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Comp. Intell</title>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="625" to="655" />
			<date type="published" when="1995" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Planning as heuristic search</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Bonet</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Geffner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">AIJ</title>
		<imprint>
			<biblScope unit="volume">129</biblScope>
			<biblScope unit="issue">1-2</biblScope>
			<biblScope unit="page" from="5" to="33" />
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Structure and complexity of planning with unary operators</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">I</forename><surname>Brafman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Domshlak</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">JAIR</title>
		<imprint>
			<biblScope unit="volume">18</biblScope>
			<biblScope unit="page" from="315" to="349" />
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Factored planning: How, when, and when not</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">I</forename><surname>Brafman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Domshlak</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">AAAI</title>
		<imprint>
			<date type="published" when="2006" />
			<biblScope unit="page" from="809" to="814" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">The computational complexity of propositional STRIPS planning</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Bylander</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">AIJ</title>
		<imprint>
			<biblScope unit="volume">69</biblScope>
			<biblScope unit="issue">1-2</biblScope>
			<biblScope unit="page" from="165" to="204" />
			<date type="published" when="1994" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Planning for conjunctive goals</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Chapman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">AIJ</title>
		<imprint>
			<biblScope unit="volume">32</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="333" to="377" />
			<date type="published" when="1987" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Pattern databases</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Culberson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Schaeffer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Comp. Intell</title>
		<imprint>
			<biblScope unit="volume">14</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="318" to="334" />
			<date type="published" when="1998" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Dechter</surname></persName>
		</author>
		<title level="m">Constraint Processing</title>
		<imprint>
			<publisher>Morgan Kaufmann</publisher>
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Multi-agent offline coordination: Structure and complexity</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Domshlak</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Dinitz</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ECP</title>
		<imprint>
			<date type="published" when="2001" />
			<biblScope unit="page" from="277" to="288" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Planning with pattern databases</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Edelkamp</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ECP</title>
		<imprint>
			<date type="published" when="2001" />
			<biblScope unit="page" from="13" to="34" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Symbolic pattern databases in heuristic search planning</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Edelkamp</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">AIPS</title>
		<imprint>
			<date type="published" when="2002" />
			<biblScope unit="page" from="274" to="293" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Complexity, decidability and undecidability results for domain-independent planning</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Erol</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">S</forename><surname>Nau</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><forename type="middle">S</forename><surname>Subrahmanian</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">AIJ</title>
		<imprint>
			<biblScope unit="volume">76</biblScope>
			<biblScope unit="issue">1-2</biblScope>
			<biblScope unit="page" from="75" to="88" />
			<date type="published" when="1995" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Solving planning domains with polytree causal graphs is NP-complete</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Felner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">E</forename><surname>Korf</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hanan</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename></persName>
		</author>
		<idno type="arXiv">arXiv:cs.AI/0610095</idno>
	</analytic>
	<monogr>
		<title level="j">JAIR</title>
		<imprint>
			<biblScope unit="volume">22</biblScope>
			<biblScope unit="page" from="279" to="318" />
			<date type="published" when="2004" />
		</imprint>
	</monogr>
	<note>Additive pattern database heuristics</note>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Admissible heuristics for optimal planning</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Haslum</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Geffner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ICAPS</title>
		<imprint>
			<date type="published" when="2000" />
			<biblScope unit="page" from="140" to="149" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">The Fast Downward planning system</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Helmert</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">JAIR</title>
		<imprint>
			<biblScope unit="volume">26</biblScope>
			<biblScope unit="page" from="191" to="246" />
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">The FF planning system: Fast plan generation through heuristic search</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Hoffmann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Nebel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">JAIR</title>
		<imprint>
			<biblScope unit="volume">14</biblScope>
			<biblScope unit="page" from="253" to="302" />
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Maximizing over multiple pattern databases speeds up heuristic search</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">C</forename><surname>Holte</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Felner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Newton</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Meshulam</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Furcy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">AIJ</title>
		<imprint>
			<biblScope unit="volume">170</biblScope>
			<biblScope unit="page" from="1123" to="1136" />
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">State-variable planning under structural restrictions: Algorithms and complexity</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Jonsson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Bäckström</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">AIJ</title>
		<imprint>
			<biblScope unit="volume">100</biblScope>
			<biblScope unit="issue">1-2</biblScope>
			<biblScope unit="page" from="125" to="176" />
			<date type="published" when="1998" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">The role of macros in tractable planning over causal graphs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Jonsson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IJCAI</title>
		<imprint>
			<date type="published" when="2007" />
			<biblScope unit="page" from="1936" to="1941" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Structural patterns heuristics</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Katz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Domshlak</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ICAPS-07 Workshop on Heuristics for Domain-independent Planning: Progress, Ideas, Limitations, Challenges</title>
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Efficient planning for a miniature assembly line</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Klein</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Jonsson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Bäckström</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Artificial Intelligence in Engineering</title>
		<imprint>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="69" to="81" />
			<date type="published" when="1998" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Automatically generating abstractions for planning</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Knoblock</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">AIJ</title>
		<imprint>
			<biblScope unit="volume">68</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="243" to="302" />
			<date type="published" when="1994" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">The GRT planning system: Backward heuristic construction in forward state-space planning</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Refanidis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><forename type="middle">P</forename><surname>Vlahavas</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">JAIR</title>
		<imprint>
			<biblScope unit="volume">15</biblScope>
			<biblScope unit="page" from="115" to="161" />
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">A reactive planner for a model-based executive</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Williams</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Nayak</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IJCAI</title>
		<imprint>
			<date type="published" when="1997" />
			<biblScope unit="page" from="1178" to="1185" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
