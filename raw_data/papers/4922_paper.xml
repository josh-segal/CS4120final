<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2019-03-26T17:06+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">A Device-Controlled Dynamic Configuration Framework Supporting Heterogeneous Resource Management</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Tan</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Electrical and Computer Engineering</orgName>
								<orgName type="institution">University of Central Florida Orlando</orgName>
								<address>
									<postCode>32816-2450</postCode>
									<region>FL</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">F</forename><surname>Demara</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Electrical and Computer Engineering</orgName>
								<orgName type="institution">University of Central Florida Orlando</orgName>
								<address>
									<postCode>32816-2450</postCode>
									<region>FL</region>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">A Device-Controlled Dynamic Configuration Framework Supporting Heterogeneous Resource Management</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>In this paper, a lightweight autonomous reconfiguration approach is developed for Field Programmable Gate Arrays (FPGAs). Under the Multilayer Runtime Reconfiguration Architecture (MRRA) paradigm, hardware configuration information is read and operated on directly at runtime to provide low overhead dynamic reconfiguration. This enables a standardized set of Application Programming Interfaces (APIs) for uniform access to heterogeneous logic and other resources. A prototype MRRA system is developed for Xilinx Virtex II Pro family of FPGAs to exercise partial reconfiguration capability. The Virtex II Pro On-Chip PowerPC core is used to control these reconfiguration protocols implemented in user logic. These two features make an autonomous reconfiguration system possible, allowing a FPGA to efficiently reconfigure itself under the control of a microprocessor core instantiated within the FPGA fabric.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>As more and more applications in multimedia, cryptography and evolutionary systems can benefit from dynamic reconfiguration <ref type="bibr" target="#b0">[1]</ref>, autonomous reconfiguration of FPGAs becomes an important issue. In this paper, with the partial reconfiguration technique from <ref type="bibr">Xilinx [6]</ref> and powerful FPGA devices equipped with on-chip CPU cores, a new autonomous dynamic reconfiguration approach is addressed. This paper is organized in the following manner. In Section 2, the related research is identified. In Section 3, the autonomous reconfiguration problem is defined along with the MRRA design. Section 4 introduces the current MRRA prototype which is described in detail. Section 5 describes the current results. Section 6 provides the conclusions to-date.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Related Research</head><p>With the appearance of the partial reconfiguration technology in recent years, a series frameworks for dynamic reconfiguration have been developed. Such recent proposed tools include <ref type="bibr" target="#b1">[2]</ref>- <ref type="bibr" target="#b4">[5]</ref>. Moraes, Mesquita, Palma and Moller developed a set of tools for partial reconfiguration on Virtex XCV300 devices <ref type="bibr" target="#b3">[4]</ref>. While providng useful features, some steps with their tools must be carried out manually. Also, their environment does not support core relocation capabilities. Raghavan and Sutton's tool called JPG was developed for Xilinx Virtex devices <ref type="bibr" target="#b4">[5]</ref>. The JPG tool is based on the Xilinx Java-based JBits API, which allows an application to instantiate a component, generate its corresponding bitstream, and download it to a Virtex FPGA. However, because of the its Java interpretation overhead, the tool has some speed and scalability limitations, which conflict with the objectives of the performance improvement benefits sought by partial reconfiguration. And JPG can only be used by Virtex FPGAs.</p><p>A two-layer framework for Virtex II devices had been suggested by Blodget, McMillan <ref type="bibr" target="#b1">[2]</ref> and Fong, Harper, Athanas <ref type="bibr" target="#b2">[3]</ref> separately. The system enables self-reconfiguration through the reconfiguration hardware interface Internal Configuration Access Port (ICAP) inside the Xilinx FPGA. However, because of limitations with the use ICAP, the bit stream must be manipulated directly. Thus, the range of potential applications is limited. A more powerful general-purpose framework for a wide variety of practical applications would be useful to integrate and optimize existing reprogrammable technologies and theories. Ideally, this approach would provide a set of standardized Application Programming Interfaces (APIs) for uniform access to heterogeneous physical resources and thus enable more sophisticated autonomous dynamic reconfiguration.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">MRRA Design</head><p>In order to accommodate the large number and wide variety of reconfiguration processes required by different applications, a 3-layer framework, called the Multiple Runtime Reconfiguration Architecture (MRRA) is being developed to carry out the partial reconfiguration tasks efficiently. <ref type="figure" target="#fig_0">Figure 1</ref> shows the conceptual organization of the MRRA framework. The bottom layer of the architecture is the Reconfigurable Resource Layer. The configuration bit stream is downloaded to the targeted FPGA's reconfigurable units using the hardware interface at this layer. When the initial configuration and the run-time partial reconfigurations are carried out, the resources are configured dynamically. Input and output data of the FPGA system is also passed between the logic control from the top layer and the bottom-layer FPGA reconfigurable units through this path to perform the routine tasks. Internal or External RAMs may be used as a temporary data and .bit file buffer in this layer to accelerate the transfer process through pipelining and speed matching. The middle layer is called Translation Layer. In this layer, the logic circuit descriptions for a palette of tasks are translated into specific physical details by a hardware-dependent translation engine. The new partial .bit file is generated to reconfigure a specific area of a device at this layer, while the remainer of the device continues operation. The top layer is the Algorithm Layer. In this layer, the data of the task routines are utilized by the highlevel applications. New configurations are also generated based on hardware-independent algorithms. The configurations, including the routing information and functional units, are described in an abstract logic form at this layer. This acts as an entry file for further processing by the lower layers. The MRRA architecture can be implemented into Loosely-Coupled System (LCS) or System-on Chip (SOC). <ref type="figure" target="#fig_0">Figure 1</ref> has depicts the possible hardware interfaces for both the LCS and SOC implementations. The major benefits of this MRRA framework including increased design productivity, portability, resource utilization, and autonomous operation. In order to connect the PowerPC core with all the heterogeneous FPGA resources inside the chip, a 3 segment path is also established, which includes an On-chip Peripheral Bus (OPB), a Processor Local Bus (PLB) and a bridge core (PLB2OPB) providing access to the OPB from the PLB. All the remaining modules comprise the reconfigurable subset. In order to maintain the correct communication with the PowerPC through the OPB bus with those reconfigurable and reloacated modules, a simplified Intellectual Property Interface and Bus Macro structures <ref type="bibr" target="#b6">[7]</ref> have been adopted. Thus, all the modules can communicate and be controlled seamlessly. The data communication of this prototype is bi-directional. As shown in <ref type="figure" target="#fig_1">Figure 2</ref>, the input path for the LCS begins at the PC. The PC sends the data over the PCI bus to the on-board SRAM with an interrupt request, which will influence the corresponding register of the on-chip interruption controller. Then V2Pro/PowerPC receives the interrupt request, executes its Interrupt Serivce Routine and finally reads data from the SRAM. On the other hand, the Output path data starts from V2Pro/PowerPC to the onboard SRAM. The PC keeps polling the SRAM for data available flag and then receive the data over PCI bus when the flag was set to ready.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Prototype Development</head><p>Standardized communication APIs based on the above communication protocol have been developed in the LCS framework. For the PC part, API's can be categorized into 3 groups: Initialization Operations, Configuration File Operations and On-board Memory Operations. For the On-Chip part, on top of the basic embeded operating system, the APIs for the external interruption operations and memory/register operations are provided. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Current Results</head><p>In the current prototype, a Single Error Correction Double Error Detection (SECDED) circuit has been incorporated as the reconfigurable module. Preliminary tests shows that both data operations and .bit file reconfigurations has been carried out successfully in this autonomous system.  <ref type="table">Table 1</ref> lists the utilization of different kinds of reconfigurable resources for the current autonomous reconfiguration prototype used in the SECDEC case study. As listed in the table, the current hardware infrastructure has only occupied one third or even less of the reconfigurable resources, which provides sufficient area for large reconfigurable tasks or multiple reconfigurable tasks to be implemented based on this system. For the on-chip software system, only half of the block RAM has been engaged in current prototype, which also enables the possibility of further expansion.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Conclusion</head><p>In this paper, a 3-layer architecture named MRRA, is described for autonomous reconfiguration. A preliminary loosely coupled prototype based on the MRRA architecture has been developed and demostrated. Simple communication and synchronization protocol is also designed between microprocessors for data processing. Currently the top-level integration of a Genetic Algorithm (GA) based fault handling application for sel-repairing evolvable hardware is under development. Further performance evaluation of this prototype will follow along with practical area management modules. More metrics are also expected to be designed in the future for deeper and more thorough analysis for antonomous reconfiguration systems.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: Multi-layer Runtime Reconfiguration Architecture</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 shows</head><label>2</label><figDesc>Figure 2 shows the Loosely Coupled prototype of the MRRA architecture developed for Xilinx Virtex II Pro platforms with Module-Based Partial Reconfiguration [7] technique. This solution was based on two COTS hardware components: the Avnet Virtex II Pro development board and a high-end Pentium-based Host PC. These components communicate through the PC's standard PCI bus interface. The reconfiguration layer of this prototype includes an on chip hardware subsystem and their communication APIs, which then have an on chip PowerPC part and a host PC part. Both the Translation Layer and the Algorithm Layer reside in the Host PC. The on-chip hardware subsystem includes two subsets named fixed subset and reconfigurable subset. The fixed subset are composed of an on-chip PowerPC 405 CPU core, block RAMs, all the onboard peripherals such as SRAM and RS232 interface and their control interfaces generated inside the FPGA. In order to connect the PowerPC core with all the heterogeneous FPGA resources inside the chip, a 3 segment path is also established, which includes an On-chip Peripheral Bus (OPB), a Processor Local Bus (PLB) and a bridge core (PLB2OPB) providing access to the OPB from the PLB. All the remaining modules comprise the reconfigurable subset. In order to maintain the correct communication with the PowerPC through the OPB bus with those reconfigurable and reloacated modules, a simplified Intellectual Property Interface and Bus Macro structures [7] have been adopted. Thus, all the modules can communicate and be controlled seamlessly. The data communication of this prototype is bi-directional. As shown in Figure 2, the input path for the LCS begins at the PC. The PC sends the data over the PCI bus to the on-board SRAM with an interrupt request, which will influence the corresponding register of the on-chip interruption controller. Then V2Pro/PowerPC receives the interrupt request, executes its Interrupt Serivce Routine and finally reads data from the SRAM. On the other hand, the Output path data starts from V2Pro/PowerPC to the onboard SRAM. The PC keeps polling the SRAM for data available flag and then receive the data over PCI bus when the flag was set to ready.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: Loosely-Coupled MRRA System</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0" validated="false"><head>Table I : Resources Utilization</head><label>I</label><figDesc></figDesc><table>Resource 
name 
Number of Available 
Number of Used 
utilization 

IOBs 
396 
85 
21% 
Slices 
4928 
1805 
36% 
BRAM 
24 
44 
54% 
TBUFs 
2464 
352 
14% 
PPC405 
1 
1 
100% 
BUFGMUXs 
4 
1 
25% 

</table></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgments</head><p>This research was supported in-part by NASA Intelligent Systems NRA Contract NNA04CL07A.</p></div>
			</div>

			<div type="annex">
			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">A Reconfigurable Computing Primer</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Barr</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1998-09" />
			<biblScope unit="page" from="44" to="47" />
		</imprint>
	</monogr>
	<note>Multimedia Systems Design</note>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">A lightweight approach for embedded reconfiguration of FPGAs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Blodget</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Mcmillan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Lysaght</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Design, Automation and Test in Europe Conference and Exhibition</title>
		<meeting>Design, Automation and Test in Europe Conference and Exhibition</meeting>
		<imprint>
			<date type="published" when="2003" />
			<biblScope unit="page" from="399" to="400" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">A versatile framework for FPGA field updates: an application of partial self-reconfiguration</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">J</forename><surname>Fong</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">J</forename><surname>Harper</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">M</forename><surname>Athanas</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of 14th IEEE International Workshop on Rapid Systems Prototyping</title>
		<meeting>14th IEEE International Workshop on Rapid Systems Prototyping</meeting>
		<imprint>
			<date type="published" when="2003-06" />
			<biblScope unit="page" from="9" to="11" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Remote and partial reconfiguration of FPGAs: tools and trends</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Mesquita</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Moraes</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Palma</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Moller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Calazans</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Parallel and Distributed Processing Symposium</title>
		<imprint>
			<date type="published" when="2003-04" />
			<biblScope unit="page" from="22" to="26" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">JPG -a partial bitstream generation tool to support partial reconfiguration in virtex FPGAs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">K</forename><surname>Raghavan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Sutton</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of International Parallel and Distributed Processing Symposium</title>
		<meeting>International Parallel and Distributed Processing Symposium</meeting>
		<imprint>
			<date type="published" when="2002-04" />
			<biblScope unit="page" from="15" to="19" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">Virtex-II Pro Platform FPGA User Guide</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Inc</forename><surname>Xilinx</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2004-08" />
		</imprint>
	</monogr>
	<note>v2.4</note>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">Two Flows for Partial Reconfiguration: Module Based or Difference Based</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Inc</forename><surname>Xilinx</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2003-11" />
		</imprint>
	</monogr>
	<note>v1.1</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
