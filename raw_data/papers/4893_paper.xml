<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2019-03-26T17:05+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">PTask: Operating System Abstractions To Manage GPUs as Compute Devices</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christopher</forename><forename type="middle">J</forename><surname>Rossbach</surname></persName>
							<email>crossbac@microsoft.com</email>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jon</forename><surname>Currey</surname></persName>
							<email>jcurrey@microsoft.com</email>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mark</forename><surname>Silberstein</surname></persName>
							<email>marks@cs.technion.ac.il</email>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Baishakhi</forename><surname>Ray</surname></persName>
							<email>bray@cs.utexas.edu</email>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Emmett</forename><surname>Witchel</surname></persName>
							<email>witchel@cs.utexas.edu</email>
						</author>
						<author>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Microsoft Research</orgName>
								<orgName type="institution" key="instit2">Microsoft Research</orgName>
								<address>
									<settlement>Technion</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff1">
								<orgName type="institution" key="instit1">University of Texas at Austin</orgName>
								<orgName type="institution" key="instit2">University of Texas at Austin</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">PTask: Operating System Abstractions To Manage GPUs as Compute Devices</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>D48 [Operating systems]: [Performance]</term>
					<term>D47 [Operating sys- tems]: [Organization and Design]</term>
					<term>I31 [Hardware Architecture]: [Graphics processors]</term>
					<term>D13 [Programming Techniques]: [Con- current Programming] General Terms OS Design, GPUs, Performance Keywords Dataflow, GPUs, operating systems, GPGPU, gestural interface, accelerators</term>
				</keywords>
			</textClass>
			<abstract>
				<p>We propose a new set of OS abstractions to support GPUs and other accelerator devices as first class computing resources. These new abstractions, collectively called the PTask API, support a dataflow programming model. Because a PTask graph consists of OS-managed objects, the kernel has sufficient visibility and control to provide system-wide guarantees like fairness and performance isolation, and can streamline data movement in ways that are impossible under current GPU programming models. Our experience developing the PTask API, along with a gestural interface on Windows 7 and a FUSE-based encrypted file system on Linux show that the PTask API can provide important system-wide guarantees where there were previously none, and can enable significant performance improvements, for example gaining a 5× improvement in maximum throughput for the gestural interface.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">INTRODUCTION</head><p>Three of the top five supercomputers on the TOP500 list for June 2011 (the most recent ranking) use graphics processing units (GPUs) <ref type="bibr" target="#b5">[6]</ref>. GPUs have surpassed CPUs as a source of high-density computing resources. The proliferation of fast GPU hardware has been accompanied by the emergence of general purpose GPU (GPGPU) Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. To copy otherwise, to republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee. SOSP '11 Cascais, Portugal Copyright 2011 ACM ...$10.00.</p><p>Figure 1: Technology stacks for CPU vs GPU programs. The 1-to-1 correspondence of OS-level and user-mode runtime abstractions for CPU programs is absent for GPU programs frameworks such as DirectX, CUDA <ref type="bibr" target="#b58">[59]</ref>, and OpenCL <ref type="bibr" target="#b46">[47]</ref>, enabling talented programmers to write high-performance code for GPU hardware. However, despite the success of GPUs in supercomputing environments, GPU hardware and programming environments are not routinely integrated into many other types of systems because of programming difficulty, lack of modularity, and unpredictable performance artifacts. Current software and system support for GPUs allows their computational power to be used for high-performance rendering or for a wide array of high-performance batch-oriented computations <ref type="bibr" target="#b25">[26]</ref>, but GPU use is limited to certain application domains. The GPGPU ecosystem lacks rich operating system (OS) abstractions that would enable new classes of compute-intensive interactive applications, such as gestural input, brain-computer interfaces, and interactive video recognition, or applications in which the OS uses the GPU for its own computation such as encrypted file systems. In contrast to interactive games, which use GPUs as rendering engines, these applications use GPUs as compute engines in contexts that require OS support. We believe these applications are not being built because of inadequate OS-level abstractions and interfaces. The time has come for OSes to stop managing graphics processing devices (GPUs) as I/O devices and start managing them as a computational devices, like CPUs. <ref type="figure">Figure 1</ref> compares OS-level support for traditional hardware to OS-level support for GPUs. In contrast to most common system resources such as CPUs and storage devices, kernel-level abstractions for GPUs are severely limited. While OSes provide a driver interface to GPUs, that interface locks away the full potential of the graphics hardware behind an awkward ioctl-oriented interface designed for reading and writing blocks of data to millisecondlatency disks and networks. Moreover, lack of a general kernelfacing interface severely limits what the OS can do to provide highlevel abstractions for GPUs: in Windows, and other closed-source OSes, using the GPU from a kernel mode driver is not currently supported using any publicly documented APIs. Additionally, because the OS manages GPUs as peripherals rather than as shared compute resources, the OS leaves resource management for GPUs to vendor-supplied drivers and user-mode run-times. With no role in GPU resource-management, the OS cannot provide guarantees of fairness and performance isolation. For applications that rely on such guarantees, GPUs are consequently an impractical choice.</p><p>This paper proposes a set of kernel-level abstractions for managing interactive, high-compute devices. GPUs represent a new kind of peripheral device, whose computation and data bandwidth exceed that of the CPU. The kernel must expose enough hardware detail of these peripherals to allow programmers to take advantage of their enormous processing capabilities. But the kernel must hide programmer inconveniences like memory that is non-coherent between the CPU and GPU, and must do so in a way that preserves performance. GPUs must be promoted to first-class computing resources, with traditional OS guarantees such as fairness and isolation, and the OS must provide abstractions that allow programmers to write code that is both modular and performant.</p><p>Our new abstractions, collectively called the PTask API, provide a dataflow programming model in which the programmer writes code to manage a graph-structured computation. The vertices in the graph are called ptasks (short for parallel task) which are units of work such as a shader program that runs on a GPU, or a code fragment that runs on the CPU or another accelerator device. PTask vertices in the graph have input and output ports exposing data sources and sinks in the code, and are connected by channels, which represent a data flow edge in the graph. The graph expresses both data movement and potential concurrency directly, which can greatly simplify programming. The programmer must express only where data must move, but not how or when, allowing the system to parallelize execution and optimize data movement without any additional code from the programmer. For example, two sibling ptasks in a graph can run concurrently in a system with multiple GPUs without additional GPU management code, and double buffering is eliminated when multiple ptasks that run on a single accelerator are dependent and sequentially ordered. Under current GPU programming models, such optimizations require direct programmer intervention, but with the PTask API, the same code adapts to run optimally on different hardware substrates.</p><p>A PTask graph consists of OS-managed objects, so the kernel has sufficient visibility and control to provide system-wide guarantees like fairness and performance isolation. The PTask runtime tracks GPU usage and provides a state machine for ptasks that allows the kernel to schedule them in a way similar to processes. Under current GPU frameworks, GPU scheduling is completely hidden from the kernel by vendor-provided driver code, and often implements simplistic policies such as round-robin. These simple policies can thwart kernel scheduling priorities, undermining fairness and inverting priorities, often in a dramatic way.</p><p>Kernel-level ptasks enable data movement optimizations that are impossible with current GPU programming frameworks. For example, consider an application that uses the GPU to accelerate real-time image processing for data coming from a peripheral like a camera. Current GPU frameworks induce excessive data copy by causing data to migrate back and forth across the user-kernel boundary, and by double-buffering in driver code. A PTask graph, conversely, provides the OS with precise information about data's origin(s) and destination(s). The OS uses this information to eliminate unnecessary data copies. In the case of real-time processing of image data from a camera, the PTask graph enables the elimination of two layers of buffering. Because data flows directly from the camera driver to the GPU driver, an intermediate buffer is unnecessary, and a copy to user space is obviated.</p><p>We have implemented the full PTask API for Windows 7 and PTask scheduling in Linux. Our experience using PTask to accelerate a gestural interface in Windows and a FUSE-based encrypted file system in Linux shows that kernel-level support for GPU abstractions provides system-wide guarantees, enables significant performance gains, and can make GPU acceleration practical in application domains where previously it was not.</p><p>This paper makes the following contributions.</p><p>• Provides quantitative evidence that modern OS abstractions are insufficient to support a class of "interactive" applications that use GPUs, showing that simple GPU programs can reduce the response times for a desktop that uses the GPU by nearly an order of magnitude.</p><p>• Provides a design for OS abstractions to support a wide range of GPU computations with traditional OS guarantees like fairness and isolation.</p><p>• Provides a prototype of the PTask API and a GPU-accelerated gestural interface, along with evidence that PTasks enable "interactive" applications that were previously impractical, while providing fairness and isolation guarantees that were previously absent from the GPGPU ecosystem. The data flow programming model supported by the PTask API delivers throughput improvements up to 4× across a range of microbenchmarks and a 5× improvement for our prototype gestural interface.</p><p>• Demonstrates a prototype of GPU-aware scheduling in the Linux kernel that forces GPU-using applications to respect kernel scheduling priorities.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">MOTIVATION</head><p>This paper focuses on GPU support for interactive applications like gesture-based interfaces, neural interfaces (also called braincomputer interfaces or BCIs) <ref type="bibr" target="#b47">[48]</ref>, encrypting file systems and realtime audio/visual interfaces such as speech recognition. These tasks are computationally demanding, have real-time performance and latency constraints, and feature many data-independent phases of computation. GPUs are an ideal compute substrate for these tasks to achieve their latency deadlines, but lack of kernel support forces designers of these applications to make difficult and often untenable tradeoffs to use the GPU.</p><p>To motivate our new kernel abstractions we explore the problem of interactive gesture recognition as a case study. A gestural interface turns a user's hand motions into OS input events such as mouse movements or clicks <ref type="bibr" target="#b35">[36]</ref>. Forcing the user to wear special gloves makes gesture recognition easier for the machine, but it is unnatural. The gestural interface we consider does not require the user to wear any special clothing. Such a system must be tolerant to visual noise on the hands, like poor lighting and rings, and must use cheap, commodity cameras to do the gesture sensing. A gestural interface workload is computationally demanding, has real-time latency constraints, and is rich with data-parallel algorithms, making it a natural fit for GPU-acceleration. Gesture recognition is similar to the computational task performed by Microsoft's Kinect, though that system has fewer cameras, lower data rates and grosser features. Kinect only runs a single application at a time (the current game), which can use all available GPU resources. An operating system must multiplex competing applications. <ref type="figure">Figure 2</ref> shows a basic decomposition of a gesture recognition system. The system consists of some number of cameras (in this example, photogrammetric sensors <ref type="bibr" target="#b27">[28]</ref>), and software to analyze images captured from the cameras. Because such a system functions as a user input device, gesture events recognized by the system must be multiplexed across applications by the OS; to be us- <ref type="figure">Figure 2</ref>: A gesture recognition system based on photogrammetric cameras able, the system must deliver those events with high frequency and low latency. The design decomposes the system into four components, implemented as separate programs:</p><p>• catusb: Captures image data from cameras connected on a USB bus. Short for "cat /dev/usb".</p><p>• xform: Perform geometric transformations to transform images from multiple camera perspectives to a single point cloud in the coordinate system of the screen or user. Inherently data-parallel.</p><p>• filter: Performs noise filtering on image data produced by the xform step. Inherently data-parallel.</p><p>• hidinput: Detects gestures in a point cloud and sends them to the OS as human interface device (HID) input. Not data parallel. Given these four programs, a gestural interface system can be composed using POSIX pipes as follows:</p><p>catusb | xform | filter | hidinput &amp; This design is desirable because it is modular, (making its components easily reusable) and because it relies on familiar OS-level abstractions to communicate between components in the pipeline. Inherent data-parallelism in the xform and filter programs strongly argue for GPU acceleration. We have prototyped these computations and our measurements show they are not only a good fit for GPU-acceleration, they actually require it. If the system uses multiple cameras with high data rates and large image sizes, these algorithms can easily saturate a modern chip multi-processor (CMP). For example, our filter prototype relies on bilateral filtering <ref type="bibr" target="#b66">[67]</ref>. A well-optimized implementation using fork/join parallelism is unable to maintain real-time frame rates on a 4-core CMP despite consuming nearly 100% of the available CPU. In contrast, a GPUbased implementation easily realizes frame rates above the realtime rate, and has minimal affect on CPU utilization because nearly all of the work is done on the GPU.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">The problem of data movement</head><p>No direct OS support for GPU abstractions exists, so computing on a GPU for a gestural interface necessarily entails a userlevel GPU programming framework and run-time such as DirectX, CUDA, or OpenCL. Implementing xform and filter in these frameworks yields dramatic speedups for the components operating in isolation, but the system composed with pipes suffers from excessive data movement across both the user-kernel boundary and through the hardware across the PCI express (PCIe) bus.</p><p>For example, reading data from a camera requires copying image buffers out of kernel space to user space. Writing to the pipe connecting catusb to xform causes the same buffer to be written back into kernel space. To run xform on the GPU, the system must read buffers out of kernel space into user space, where a user-mode <ref type="figure">Figure 3</ref>: Relative GPU execution time and overhead (lower is better) for CUDA-based implementation of the xform program in our prototype system. sync uses synchronous communication of buffers between the CPU and GPU, async uses asynchronous communication, and async-pp uses both asynchrony and ping-pong buffers to further hide latency. Bars are divided into time spent executing on the GPU and system overhead. DtoH represents an implementation that communicates between the device and the host on every frame, HtoD the reverse, and both represent bi-directional communication for every frame. Reported execution time is relative to the synchronous, bi-directional case (sync-both).</p><p>runtime such as CUDA must subsequently write the buffer back into kernel space and transfer it to the GPU and back. This pattern repeats as data moves from the xform to the filter program and so on. This simple example incurs 12 user/kernel boundary crossings. Excessive data copying also occurs across hardware components. Image buffers must migrate back and forth between main memory and GPU memory repeatedly, increasing latency while wasting bandwidth and power.</p><p>Overheads introduced by run-time systems can severely limit the effectiveness of latency-hiding mechanisms. <ref type="figure">Figure 3</ref> shows relative GPU execution time and system overhead per image frame for a CUDA-based implementation of the xform program in our prototype. The figure compares implementations that use synchronous and asynchronous communication as well as ping-pong buffers, another technique that overlaps communication with computation. The data illustrate that the system spends far more time marshaling data structures and migrating data than it does actually computing on the GPU. While techniques to hide the latency of communication improve performance, the improvements are modest at best.</p><p>User-level frameworks do provide mechanisms to minimize redundant hardware-level communication within a single process' address space. However, addressing such redundancy for crossprocess or cross-device communication requires OS-level support and a programmer-visible interface. For example, USB data captured from cameras must be copied into system RAM before it can be copied to the GPU: with OS support, it could be copied directly into GPU memory. <ref type="bibr" target="#b0">1</ref> </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">No easy fix for data movement</head><p>The problem of data migration between GPU and CPU memory spaces is well-recognized by the developers of GPGPU frameworks. CUDA, for example, supports mechanisms such as asyn- <ref type="figure">Figure 4</ref>: The effect of GPU-bound work on CPU-bound tasks The graph shows the frequency (in Hz) with which the OS is able to deliver mouse movement events over a period of 60 seconds during which a program makes heavy use of the GPU. Average CPU utilization over the period is under 25%.</p><p>chronous buffer copy, CUDA streams (a generalization of the latter), and pinning of memory buffers to tolerate data movement latency by overlapping computation and communication. However, to use such features, a programmer must understand OS-level issues like memory mapping. For example, CUDA provides APIs to pin allocated memory buffers, allowing the programmer to avoid a layer of buffering above DMA transfer. The programmer is cautioned to use this feature sparingly as it reduces the amount of memory available to the system for paging <ref type="bibr" target="#b58">[59]</ref>.</p><p>Using streams effectively requires a static knowledge of which transfers can be overlapped with which computations; such knowledge may not always be available statically. Moreover, streams can only be effective if there is available communication to perform that is independent of the current computation. For example, copying data for stream a1 to or from the device for execution by kernel A can be overlapped with the execution of kernel B; attempts to overlap with execution of A will cause serialization. Consequently, modules that offload logically separate computation to the GPU must be aware of each other's computation and communication patterns to maximize the effectiveness of asynchrony.</p><p>New architectures may alter the relative difficulty of managing data across GPU and CPU memory domains, but software will retain an important role, and optimizing data movement will remain important for the foreseeable future. AMD's Fusion integrates the CPU and GPU onto a single die, and enables coherent yet slow access to the shared memory by both processors. However high performance is only achievable via non-coherent accesses or by using private GPU memory, leaving data placement decisions to software. Intel's Sandy Bridge, another CPU/GPU combination, is further indication that the coming years will see various forms of integrated CPU/GPU hardware coming to market. New hybrid systems, such as NVIDIA Optimus, have a power-efficient on-die GPU and a high-performance discrete GPU. Despite the presence of a combined CPU/GPU chip, such systems still require explicit data management. While there is evidence that GPUs with coherent access to shared memory may eventually become common, even a completely integrated virtual memory system requires system support for minimizing data copies. H→D is a CUDA workload that has communication from the host to the GPU device, while H←D has communication from the GPU to the host, and H↔D has bidirectional communication.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">The scheduling problem</head><p>Modern OSes cannot currently guarantee fairness and performance for systems that use GPUs for computation. The OS does not treat GPUs as a shared computational resource, like a CPU, but rather as an I/O device. This design becomes a severe limitation when the OS needs to use the GPU for its own computation (e.g., as Windows 7 does with the Aero user interface). Under the current regime, watchdog timers ensure that screen refresh rates are maintained, but OS scheduling priorities are easily undermined by the GPU driver. GPU work causes system pauses. <ref type="figure">Figure 4</ref> shows the impact of GPU-bound work on the frequency with which the system can collect and deliver mouse movements. In our experiments, significant GPU-work at high frame rates causes Windows 7 to be unresponsive for seconds at a time. To measure this phenomenon, we instrument the OS to record the frequency of mouse events delivered through the HID class driver over a 60 second period. When no concurrent GPU work is executing, the system is able to deliver mouse events at a stable 120 Hz. However, when the GPU is heavily loaded, the mouse event rate plummets, often to below 20 Hz. The GPU-bound task is console-based (does not update the screen) and performs unrelated work in another process context. Moreover, CPU utilization is below 25%, showing that the OS has compute resources available to deliver events. A combination of factors are at work in this situation. GPUs are not preemptible, with the sideeffect that in-progress I/O requests cannot be canceled once begun. Because Windows relies on cancelation to prioritize its own work, its priority mechanism fails. The problem is compounded because the developers of the GPU runtime use request batching to improve throughput for GPU programs. Ultimately, Windows is unable to interrupt a large number of GPU invocations submitted in batch, and the system appears unresponsive. The inability of the OS to manage the GPU as a first-class resource inhibits its ability to load balance the entire system effectively.</p><p>CPU work interferes with GPU throughput. <ref type="figure" target="#fig_0">Figure 5</ref> shows the inability of Windows 7 to load balance a system that has concurrent, but fundamentally unrelated work on the GPU and CPUs. The data in the figure were collected on a machine with 64-bit Windows 7, Intel Core 2 Quad 2.66GHz, 8GB RAM, and an NVIDIA GeForce GT230 GPU. The figure shows the impact of a CPUbound process (using all 4 cores to increment counter variables) on the frame rate of a shader program (the xform program from our prototype implementation). The frame rate of the GPU program drops by 2x, despite the near absence of CPU work in the program: xform uses the CPU only to trigger the next computation on the GPU device.</p><p>These results suggest that GPUs need to be treated as a first-class computing resource and managed by the OS scheduler like a normal CPU. Such abstractions will allow the OS to provide systemwide properties like fairness and performance isolation. User programs should interact with GPUs using abstractions similar to threads and processes. Current OSes provide no abstractions that fit this model. In the following sections, we propose abstractions to address precisely this problem.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">DESIGN</head><p>We propose a set of new OS abstractions to support GPU programming called the PTask (Parallel Task) API. The PTask API consists of interfaces and runtime library support to simplify the offloading of compute-intensive tasks to accelerators such as GPUs. PTask supports a dataflow programming model in which individual tasks are assembled by the programmer into a directed acyclic graph: vertices, called ptasks, are executable code such as shader programs on the GPU, code fragments on other accelerators (e.g. a SmartNIC), or callbacks on the CPU. Edges in the graph represent data flow, connecting the inputs and outputs of each vertex. PTask is best suited for applications that have significant computational demands, feature both task-and data-level parallelism, and require both high throughput and low latency.</p><p>PTask was developed with three design goals.</p><p>(1) Bring GPUs under the purview of a single (perhaps federated) resource manager, allowing that entity to provide meaningful guarantees for fairness and isolation. (2) Provide a programming model that simplifies the development of code for accelerators by abstracting away code that manages devices, performs I/O, and deals with disjoint memory spaces. In a typical DirectX or CUDA program, only a fraction of the code implements algorithms that run on the GPU, while the bulk of the code manages the hardware and orchestrates data movement between CPU and GPU memories. In contrast, PTask encapsulates device-specific code, freeing the programmer to focus on application-level concerns such as algorithms and data flow. (3) Provide a programming environment that allows code to be both modular and fast. Because current GPU programming environments promote a tight coupling between device-memory management code and GPU-kernel code, writing reusable code to leverage a GPU means writing both algorithm code to run on the GPU and code to run on the host that transfers the results of a GPU-kernel computation when they are needed. This approach often translates to sub-optimal data movement, higher latency, and undesirable performance artifacts.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Integrating PTask scheduling with the OS</head><p>The two chief benefits of coordinating OS scheduling with the GPU are efficiency and fairness (design goals <ref type="formula">(1)</ref> and <ref type="formula">(3)</ref>). By efficiency we mean both low latency between when a ptask is ready and when it is scheduled on the GPU, and scheduling enough work on the GPU to fully utilize it. By fairness we mean that the OS scheduler provides OS priority-weighted access to processes contending for the GPU, and balances GPU utilization with other system tasks like user interface responsiveness.</p><p>Separate processes can communicate through, or share a graph. For example, processes A and B may produce data that is input to the graph, and another process C can consume the results. The scheduler must balance thread-specific scheduling needs with PTaskspecific scheduling needs. For example, gang scheduling the producer and consumer threads for a given PTask graph will maximize system throughput. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Efficiency vs. modularity</head><p>Consider the pseudo-code in <ref type="figure" target="#fig_1">Figure 6</ref>, which reuses a matrix multiplication subroutine called gemm to implement ((A × B) × C). GPUs typically have private memory spaces that are not coherent with main memory and not addressable by the CPU. To offload computation to the GPU, the gemm implementation must copy input matrices A and B to GPU memory. It then invokes a GPU-kernel called gemm_kernel to perform the multiplication, and copies the result back to main memory. If the programmer reuses the code for gemm to compose the product ((A × B) × C) as gemm(gemm(A,B),C) (modularSlowAxBxC in <ref type="figure" target="#fig_1">Figure 6</ref>), the intermediate result (A × B) is copied back from the GPU at the end of the first invocation of gemm only to be copied from main memory to GPU memory again for the second invocation. The performance costs for data movement are significant. The problem can be trivially solved by writing code specialized to the problem, such as the nonmodularFastAxBxC in the figure. However, the code is no longer as easily reused.</p><p>Within a single address space, such code modularity issues can often be addressed with a layer of indirection and encapsulation for GPU-side resources. However, the problem of optimizing data movement inevitably becomes an OS-level issue as other devices and resources interact with the GPU or GPUs. With OS-level support, computations that involves GPUs and OS-managed resources such as cameras, network cards, and file systems can avoid problems like double-buffering.</p><p>By decoupling data flow from algorithm, PTask eliminates difficult tradeoffs between modularity and performance (design goal (3)): the run-time automatically avoids unnecessary data movement (design goal <ref type="formula">(2)</ref>). With PTask, matrix multiplication is expressed as a graph with A and B as inputs to one gemm node; the output of that node becomes an input to another gemm node that also takes C as input. The programmer expresses only the structure of the computation and the system is responsible for materializing a consistent view of the data in a memory domain only when it is ac- tually needed. For example, the system knows that the intermediate result (A × B) is both produced and consumed by the GPU, so it can avoid moving that intermediate result to and from CPU memory at run-time. The code for gemm remains modular, and there is no performance penalty for composition.</p><p>Dataflow is also an attractive programming model for GPUs and heterogeneous platforms because a DAG explicitly expresses concurrency without telling the system how to leverage that concurrency. On a machine with multiple GPUs, a PTask graph can take advantage of them with no modifications (see Section 6.4); current GPU frameworks require significant additional work from the programmer to use multiple GPUs.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Limitations</head><p>The PTask programming model is based on dataflow, and it allows only directed acyclic graphs, so some limitations are inherent. PTask does not support dynamic graphs, and consequently, problems that are not well-expressed as static graphs, such as those featuring recursion, are not easily expressed with PTask. Datadependent loop iteration can be handled by unrolling loops into linear sections of the graph along with conditional execution of GPU code (i.e. if the graph represents an conservative unrolling of a loop, some vertices will not always execute). PTask does not fundamentally limit the programmer's ability to express algorithms that do not map easily to a data flow model, because the programmer can always work with PTask graphs containing only a single ptask. For example, an algorithm that requires data-dependent loop bounds can be expressed as a single-ptask graph, where iteration conditions are computed on the host, much as such programs are currently expressed.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">PTASK API</head><p>The PTask API is built on the OS-level abstractions listed below. Supporting these new abstractions at the OS interface entails new system calls shown in Table 1. The additional system calls are analogous to the process API, inter-process communication API, and scheduler hint API in POSIX.</p><p>PTask. A ptask is analogous to the traditional OS process abstraction, but a ptask runs substantially on a GPU or other accelerator. A ptask requires some orchestration from the OS to coordinate its execution, but does not always require a user-mode host process. Each ptask has a list of input and output resources (analogous to the POSIX stdin, stdout, stderr file descriptors) that can be bound to ports.</p><p>Port. A port is an object in the kernel namespace that can be bound to ptask input and output resources. A port is a data source or sink for dynamically bound data and parameters in GPU code. Ports have sub-types InputPort, OutputPort, and StickyPort. The former two represent inputs and outputs respectively, while the latter represents an input which can retain its value across multiple invocations of a ptask. Channel. A channel is analogous to a POSIX pipe: it connects a port to another port, or to other data sources and sinks in the system such as I/O buses, files, and so on. A channel can connect only a single source and destination port; InputPorts and StickyPorts can connect to only a single channel, while an OutputPort can connect to many channels.</p><p>Graphs. A graph is collection of ptasks whose ports are connected by channels. Multiple graphs may be created and executed independently, with the PTask runtime being responsible for scheduling them fairly.</p><p>Datablock and Template. A datablock represents a unit of data flow along an edge in a graph. A template provides meta-data describing datablocks, and helps map the raw data contained in datablocks to hardware threads on the GPU.</p><p>With the PTask API, ptasks encapsulate GPU code, and variables in GPU code are exposed with ports. The programmer composes computations by connecting ports to channels, indicating that data flowing through those channels should be bound dynamically to those variables. A ptask will execute when all its InputPorts have available data, and will produce data at its OutputPorts as a result. <ref type="figure" target="#fig_2">Figure 7</ref> shows a PTask graph for the gemm multiplication computation discussed in Section 3.2. The variables for matrices A, B, and C in the gemm GPU code are exposed using ports:"port:A", "port:B", and "port:C". At run-time, datablocks containing input and output matrices are pushed by application code into input channels, causing the ptask to execute, and allowing a datablock containing the result matrix to be pulled from the output channel. A single template, which is not shown in the figure, provides metadata describing the memory layout of matrices, allowing the runtime to orchestrate the computation.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Dataflow through the Graph</head><p>Data flows through a PTask graph as discrete datablocks, moving through channels, and arriving at ports which represent ptask inputs or outputs. When all a ptask's input ports have received data through a channel, the ptask can execute, producing output at its output ports.</p><p>Ports can be either "Occupied" or "Unoccupied", depending on whether the port holds a datablock or not. The three sub-types of Port behave differently. An InputPort reads datablocks from an associated up-stream channel. If Unoccupied, it will read the next datablock from the channel as soon as the channel is not empty. An OutputPort acts as a conduit: an Occupied port pushes its datablock to all its down-stream channels. Unlike the other port types, OutputPorts can be bound to multiple channels. The StickyPort type is a specialization of InputPort that retains its datablock and remains in the Occupied state until a new datablock is written into its channel. The PTask run-time maintains a thread-pool from which it assigns threads to ptasks as necessary: port data movement (as well as GPU dispatch) is performed by threads from this pool. Ports have a ptflags member which indicates whether the port is bound to GPU-side resources or is consumed by the run-time. The ptflags also indicate whether datablocks flowing through that port are treated as in/out parameters by GPU code.</p><p>Channels have parameterizable (non-zero) capacity, which is the number of datablocks that the channel may queue between consuming them from its source and passing them to its destination in FIFO order. An application pushes data (using sys_push) into channels. If the channel is not ready (because it already has datablocks queued up to its capacity), the sys_push call blocks until the channel has available capacity. Likewise, a sys_pull call on a channel will block until a datablock arrives at that channel.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1.1">Datablocks and Templates</head><p>Data flows through a graph as discrete datablocks, even if the external input to and/or output from the graph is a continuous stream of data values. Datablocks refer to and are described by template objects (see below) which are meta-data describing the dimensions and layout of data in the block. The datablock abstraction provides a coherent view on data that may migrate between memory spaces. Datablocks encapsulate buffers in multiple memory spaces using a buffer-map property whose entries map memory spaces to devicespecific buffer objects. The buffer-map tracks which buffer(s) represent the most up-to-date view(s) of the underlying data, enabling a datablock to materialize views in different memory spaces on demand. For example, a datablock may be created based on a buffer in CPU memory. When a ptask is about to execute using that datablock, the runtime will notice that no corresponding buffer exists in the GPU memory space where the ptask has been scheduled, and will create that view accordingly. The converse occurs for data written by the GPU-buffers in the CPU memory domain will be populated lazily based on the GPU version only when a request for that data occurs. Datablocks contain a record-count member, used to help manage downstream memory allocation for computations that work with record streams or variable-stride data (see below). Datablocks can be pushed concurrently into multiple channels, can be shared across processes, and are garbage-collected based on reference counts.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Iteration Space.</head><p>GPU hardware executes in a SIMT (Single Instruction Multiple Thread) fashion, allocating a hardware thread for each point in an iteration space. <ref type="bibr" target="#b1">2</ref> Hence, the data items on which a particular GPU thread operates must be deduced in GPU code from a unique identifier assigned to each thread. For example, in vector addition, each hardware thread sums the elements at a single index; the iteration space is set of all vector indices, and each thread multiplies its identifier by the element stride to find the offset of the elements it will add. To execute code on the GPU, the PTask run-time must know the iteration space to correctly configure the number of GPU threads. For cases where the mapping between GPU threads and the iteration space is not straightforward (e.g. because threads compute on multiple points in the iteration space, or because input elements do not have fixed stride), the sys_set_geometry call allows the programmer to specify GPU thread parameters explic-itly. In the common case, the run-time can infer the iteration space and GPU thread configuration from templates.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Templates.</head><p>Templates provide meta-data that describes the raw data in a datablock's buffers. A template contains a dimensions member (stride and three-dimensional array bounds), and a dbtflags member that indicates whether the data should be treated as an array of fixedstride elements, a stream of variable-sized elements, or an opaque byte array. The dbtflags also indicate the type(s) of resource(s) the data will be bound to at execution time: examples include buffers in GPU global memory, buffers in GPU constant memory, or formal parameters. Templates serve several purposes. First, they allow the run-time to infer the iteration space when it is not specified by the programmer. In the common case, the iteration space is completely described by the product of the stride and array bounds, and the GPU should launch a hardware thread for every point in the iteration space. Second, templates bound to ports enable the run-time to allocate datablocks that will be consumed by internal and output channels in the graph. Finally, templates enable the run-time to give reasonable feedback to the programmer when API calls are mis-used. For example, constructing a channel requires a template; channel creation fails if either the source or destination port has a template that specifies an incompatible geometry. Similarly, attempts to push datablocks into channels also fail on any template mismatch.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1.2">Handling irregular data</head><p>Computations on data that lack a fixed stride require templates that describe a variable-geometry, meaning that data-layout is only available dynamically. In such cases, a template fundamentally can not carry sufficient information for the run-time to deduce the iteration space. Use of a variable-geometry channel requires an additional meta-data channel containing per-element geometry information. A meta-data channel carries, at some fixed stride, information that can be used by hardware threads as a map for data in the other channel. For example, if one input channel carries datablocks with records of variable length, its meta-data channel carries datablocks of integers indicating the offset and length of each record in datablocks received on the first channel.</p><p>PTask must use templates to allocate datablocks for downstream channels, because the programmer does not write code to allocate datablocks (except for those pushed into input channels), and because the runtime materializes device-side and host-side views of buffers on demand, typically after the datablock itself is allocated. For fixed-stride computations, allocating output datablocks is straightforward: the buffer size is the product of the stride and dimensions of the template. For computations that may produce a variable-length output (such as a select or join), the runtime needs additional information. To address this need, a template on an OutputPort with its variable-size record stream ptflags set contains a pointer to an InputPort which is designated to provide output size information. That InputPort's ptflags must indicate that it is bound to a run-time input, indicating it is used by the runtime and not by GPU-side code. The run-time generates an output size for each upstream invocation.</p><p>Computations with dynamically determined output sizes require this structure because memory allocated on the GPU must be allocated by a call from the host: dynamic memory allocation in GPU code is generally not possible. <ref type="bibr" target="#b2">3</ref> Consequently, the canonical approach is to first run a computation on the GPU that determines output size and computes a map of offsets where each hardware thread writes its output. The map of offsets is used to allocate output buffers and is consumed as an additional input to the original computation <ref type="bibr" target="#b34">[35,</ref><ref type="bibr" target="#b29">30,</ref><ref type="bibr" target="#b33">34]</ref>. In short, we argue that all variable-length GPU computations follow this type of structure, and while the pattern may be burdensome to the programmer, that burden is fundamental to GPU programming, and is not imposed by the PTask programming model. The PTask API enables any variable-geometry structures that are possible with other GPU programming frameworks.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">PTask invocation</head><p>A ptask can be in one of four states: Waiting (for inputs), Queued (inputs available, waiting for a GPU), Executing (running on the GPU), or Completed (finished execution, waiting to have its outputs consumed). When all of a ptask's input ports are Occupied, the runtime puts the ptask on a run queue and transitions it from Waiting to Queued. A ptask is invoked when it is at the head of the run queue and a GPU is available that is capable 4 of running it: invocation is the transition from the Queued to Executing state. When a ptask is invoked, the runtime reads the Datablocks occupying that ptask's InputPorts. For any non-sticky InputPort, this will remove the datablock from the port and will cause the port to pull from its upstream channel; the port goes to the Unoccupied state if the upstream channel is empty. In contrast, a StickyPort remains in the Occupied state when the runtime reads its datablock. When the runtime identifies that it has compute resources available, it chooses a ptask in the Queued state. Scheduling algorithms are considered in more detail in Section 5.1. Upon completion of an invocation, the runtime sets a ptask's state to Completed, and moves its output datablocks to its OutputPorts, if and only if all the output ports are in the Unoccupied state. The ptask remains in the Completed state until all its output ports are occupied, after which it is returned to the Waiting state. The Completed state is necessary because channels have finite capacity. As a result it is possible for execution on the GPU to complete before a downstream channel drains.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Gestural Interface PTask Graph</head><p>The gestural interface system can be expressed as a PTask graph (see <ref type="figure" target="#fig_3">Figure 8</ref>), yielding multiple advantages. First, the graph eliminates unnecessary communication. A channel connects USB source ports (usbsrc_0, usbsrc_1) to image input ports (rawimg_0, rawimg_1). Data transfer across this channel eliminates double buffering by sharing a buffer between the USB device driver, PTask run-time, and GPU driver, or with hardware support, going directly arrived with CUDA 4.0, GPUs and their programming frameworks in general do not support it. <ref type="bibr" target="#b3">4</ref> A system may have multiple GPUs with different features, and a ptask can only run on GPUs that supports all features it requires. from the USB device to GPU memory, rather than taking an unnecessary detour through system memory. A channel connecting the output port of xform (cloud_ * ) to the inputs (i_ * ) port of the filter ptask can avoid data copying altogether by reusing the output of one ptask as the input of the next. Because the two xform ptasks and the filter ptasks run on the GPU, the system can detect that the source and destination memory domains are the same and elide any data movement as a result.</p><p>This PTask-based design also minimizes involvement of hostbased user-mode applications to coordinate common GPU activities. For example, the arrival of data at the raw image input of the xform program can trigger the computation for the new frame using interrupt handlers in the OS, rather than waiting for a host-based program to be scheduled to start the GPU-based processing of the new frame. The only application-level code required to cause data to move through the system is the sys_pull call on the output channel of the hidinput process.</p><p>Under this design, the graph expresses concurrency that the runtime exploits without requiring the programmer to write code with explicit threads. Data captured from different camera perspectives can be processed in parallel. When multiple GPUs are present, or a single GPU with support for concurrent kernels <ref type="bibr" target="#b4">[5]</ref>, the two xform PTasks can execute concurrently. Regardless of what GPU-level support for concurrency is present in the system, the PTask design leverages the pipeline parallelism expressed in the graph, for example, by performing data movement along channels in parallel with ptask execution on both the host and the CPU. No code modifications are required by the programmer for the system to take advantage of any of these opportunities for concurrency.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">IMPLEMENTATION</head><p>We have implemented the PTask design described in Section 3 on Windows 7, and integrated it both into a stand-alone user-mode library, and into the device driver for the photogrammetric cameras used in the gestural interface.</p><p>The stand-alone library allows us to evaluate the benefits of the model in isolation from the OS. The user-mode framework supports ptasks coded in HLSL (DirectX), CUDA, and OpenCL, implementing dataflow graph support on top of DirectX 11, the CUDA 4.0 driver-API, and the OpenCL implementation provided with NVIDIA's GPU Computing Toolkit 4.0.</p><p>The driver-integrated version emulates kernel-level support for ptasks. When ptasks run in the driver, we assign a range of ioctl codes in 1:1 correspondence with the system call interface shown in table 1, allowing applications other than the gestural interface to use the PTask API by opening a handle to the camera driver, and calling ioctl (DeviceIoControl in Windows). The driverlevel implementation supports only ptasks coded in HLSL, and is built on top of DXGI, which is the system call interface Windows 7 provides to manage the graphics pipeline.</p><p>GPU drivers are vendor-specific and proprietary, so no kernelfacing interface exists to control GPUs. While this remains the case, kernel-level management of GPUs must involve some usermode component. The Windows Driver Foundation <ref type="bibr" target="#b6">[7]</ref> enables a layered design for drivers, allowing us to implement the camera driver as a combination kernel-mode (KMDF) and user-mode (UMDF) driver, where responsibilities of the composite driver are split between kernel-and user-mode components. The component that manages the cameras runs in kernel mode, while the component that implements PTask runs in user-mode. The two components avoid data copy across the user/kernel boundary by mapping the memory used to buffer raw data from the cameras into the address space of the user-mode driver. When the kernel-mode component has captured a new set of frames from a camera, it signals the user-mode component, which can begin working directly on the captured data without requiring buffer copy.</p><p>The PTask library comprises roughly 8000 lines of C and C++ code, and the camera driver is implemented in about 3000 lines of C. Code to assemble and manage the ptask graph for the gestural interface introduces approximately an additional 400 LOC.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">PTask Scheduling</head><p>PTask scheduling faces several challenges. First, GPU hardware cannot currently be preempted or context-switched, ruling out traditional approaches to time-slicing hardware. Second, true integration with the process scheduler is not currently possible due to lack of an OS-facing interface to control the GPU in Windows. Third, when multiple GPUs are present in a system, data locality becomes the primary determinant of performance. Parallel execution on multiple GPUs may not always be profitable, because the increased latency due to data migration can be greater than the latency reduction gained through concurrency.</p><p>Our prototype implements four scheduling modes, first-available, fifo, priority, and data-aware. In first-available mode, every ptask is assigned a manager thread, and those threads compete for available accelerators. Ready ptasks are not queued in this mode, so when ready ptasks outnumber available accelerators, access is arbitrated by locks on the accelerator data structures. In the common case, with only a single accelerator, this approach is somewhat reasonable because dataflow signaling will wake up threads that need the lock anyway. The fifo policy enhances the first-available policy with queuing.</p><p>In priority mode, ptasks are enhanced with a static priority, and proxy priority. The proxy priority is the OS priority of the thread managing its invocation and data flows. Proxy priority allows the system to avoid priority laundering, where the priority of the requesting process is ineffective because requests run with the priority of threads in the PTask run-time rather than with the priority of the requester. Proxy priority avoids this by enabling a ptask's manager thread to assume the priority of a requesting process. A ptask's static and proxy priority can both be set with the sys_set_ptask_prio system call.</p><p>The scheduler manages a ready queue of ptasks, and a list of available accelerators. When any ptask transitions into Queued, Executing, or Completed state, a scheduler thread wakes up and computes an effective priority value for each ptask in the queue. The effective priority is the weighted sum of the ptask's static priority and boost values derived from its current wait time, its average wait time (computed with an exponential moving average), average run time, and its proxy priority. Weights are chosen such that, in general, a ptask's effective priority will increase if a) it has longer than average wait time, b) it has lower than average GPU run time, or c) its proxy priority is high. Boosting priority in response to long waits avoids starvation, boosting in response to short run times increases throughput by preferring low-latency PTasks, and boosting for high proxy priority helps the PTask scheduler respect the priority of the OS process scheduler. Pseudo-code for computing effective priority is shown in <ref type="figure" target="#fig_4">Figure 9</ref>. When the effective priority update is complete, the scheduler sorts the ready queue in descending order of effective priority.</p><p>To assign an accelerator to a ptask, the scheduler first considers the head of the queue, and chooses from the list of available accelerators based on fitness and strength. An accelerator's fitness is a function of whether the accelerator supports the execution environment and feature set required by the ptask: unfit accelerators are simply eliminated from the pool of candidates. The strength of the accelerator is the product of the number of cores, the core clock speed, and the memory clock speed: in our experience, this is an imperfect but effective heuristic for ranking accelerators such that low-latency execution is preferred. The scheduler always chooses the strongest accelerator when a choice is available. If the scheduler is unable to assign an accelerator to the ptask at the head of the queue, it iterates over the rest of the queue until an assignment can be made. If no assignment can be made, the scheduler blocks. On a successful assignment, the scheduler removes the ptask from the queue, assigns the accelerator to it, moves the ptask to Executing state, and signals the ptask's manager thread that it can execute. The scheduler thread repeats this process until it runs out of available accelerators or ptasks on the run queue, and then blocks waiting for the next scheduler-relevant event. Pseudo-code for scheduling and matching accelerators to ptasks is shown in <ref type="figure" target="#fig_4">Figure 9</ref> as the schedule and match_gpu functions respectively.</p><p>The data-aware mode uses the same effective priority system that the priority policy uses, but alters the accelerator selection algorithm to consider the memory spaces where a ptask's inputs are currently up-to-date. If a system supports multiple GPUs, the inputs required by a ptask may have been most recently written in the memory space of another GPU. The dataaware policy finds the accelerator where the majority of a ptask's inputs are up-to-date, designating it the ptask's preferred accelerator. If the preferred accelerator is available, the scheduler assigns it. Otherwise, the scheduler examines the ptask's effective priority to decide whether to schedule it on an accelerator that requires data migration. PTasks with high effective priority relative to a parameterizable threshold (empirically determined) will be assigned to the strongest fit available accelerator. If a ptask has low effective priority the scheduler will leave it on on the queue in hopes that its preferred accelerator will become available again soon. The policy is not work-conserving: it is possible that Queued ptasks do not execute even when accelerators are available. However, waiting for a preferred accelerator often incurs lower latency than migrating data between memory spaces. The system guarantees that a ptask will eventually execute, because long wait time will cause effective priority boosts that ultimately ensure it runs on its preferred accelerator or runs elsewhere.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Prototype limitations</head><p>It is the express vision of this work that all GPU computations use ptasks. This vision can only be enforced if all access to the GPU is mediated by a kernel-mode implementation of PTask. Because a substantial part of our prototype must run in user-mode, it remains possible for processes to access the GPU directly, potentially subverting the fairness and isolation mechanisms of our prototype. This limitation is a property of our prototype and is not fundamental to the proposed system.</p><p>The scheduling implementations in our prototype do not consider GPU memory demands that exceed the physical memory on GPUs. GPU drivers use swapping to virtualize GPU physical memory, but allow the programmer to create buffers in the GPU memory that cannot be swapped. Because our prototype mostly allocates unswappable resources, some additional memory management would be required to ensure that a PTask's inputs can always be materialized on the GPU under high memory load. Our prototype does not address this problem.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3">GPU scheduling on Linux</head><p>We do not port the PTask API to Linux, rather we exploit our control over the kernel and add GPU accounting state to Linux's task_struct, the data structure that holds information about a kernel thread. We add blocking system calls that inform the kernel about GPU activity. GPU kernel preemption is not supported by the hardware, which limits scheduling to non-preemptive policies enforced at GPU kernel boundaries. The GPU driver actually places computations on the GPU, but source code for commercial drivers for CUDA and OpenCL are not available, so we manually insert the Linux system calls into applications that use the GPU. By giving the kernel visibility into GPU use, it can enforce global properties, like fairness relative to scheduling priority.</p><p>The kernel uses a non-work-conserving scheduling algorithm similar to the token bucket algorithm. The choice of the algorithm is dictated by GPU execution being non-preemptive. Each process p using a GPU maintains its GPU budget Bp which reflects the current eligibility of a process to use the GPU. Bp is reduced by the execution time (tp) used by p each time it executes on the GPU. Bp is incremented once per period T by quanta q to regain GPU access. If a process has a negative GPU budget, then the kernel will block any GPU invocation until the budget becomes positive. The actual GPU share of a process is governed by the maximum budget Bmaxp, which is set proportionally to the Linux priority np of the process p. The maximum budget Bmaxp and the replenish period T are updated dynamically by the scheduler by taking into account dynamic GPU execution time and changes in the number of processes using a GPU. Namely, Bmaxp = np P i∈P n i P i∈P ti and q = T = α * mini∈P ti, where P denotes the set of kernel threads using a GPU and α ≤ 1 is a safety coefficient to avoid idling due to clock quantization. These values are updated upon every GPU completion, invocation or completion of a process using a GPU, and every 10 µsec, which is about an order of magnitude lower than the expected GPU kernel time.</p><p>The scheduler maintains the running average of the GPU usage time by each process. It assumes periodic GPU execution, which typically holds for GPU-bound workloads. TimeGraph <ref type="bibr" target="#b44">[45]</ref> uses a similar scheduler but with statically assigned parameters. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.">EVALUATION</head><p>In this section, we evaluate our PTask prototype using a gestural UI on Windows 7, an encrypted file system on Linux, and microbenchmarks. Our experience with the gestural interface shows that kernel-level management of objects in a PTask graph is necessary to provide optimal data movement in the general case. Our work with the encrypted file system in Linux shows that OS visibility into GPU usage is necessary for the OS to provide fairness and isolation.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.1">Gestural interface</head><p>The primary benefits of leveraging a GPU for gestural interface come from offloading work to the GPU. In this section, we show that GPU-offload is required to make a gestural interface possible, and we quantify the costs incurred by the offload and supporting framework. To this end, we compare the performance of five gestural interface implementations: host-based, handcode, pipes, modular, and ptask.</p><p>The host-based implementation uses a Quad-Core CPU to perform all steps of the computation in the user-mode component of the camera driver. This implementation provides a performance baseline, and does not use the GPU. The handcode version is implemented in the user-mode component of the camera driver using DXGI system calls to offload work to the GPU. This version is hand-coded to avoid all needless data copy where subsequent GPU-kernels have a producer-consumer relationship. The pipes implementation uses four separate processes connected by pipes, as described in Section 2. To avoid double-buffering, raw camera data buffers used by the kernel-mode component of the camera driver are mapped into the address space of the catusb program, and the driver signals when new data is available. The xform and filter programs read data from pipes, invoke GPU-kernels and write results to pipes. We consider this implementation because it is modular and composable. The modular version is uses the same module design used to build the pipes version, but includes all components in a single process. This eliminates IPC overheads incurred by using pipes to communicate between modules, while still incurring overheads for migrating data to and from the GPU at module boundaries. The PTask implementation is described in detail in Section 5. It uses the PTask runtime in the camera driver, and  <ref type="table">Table 2</ref>: Gestural interface performance on a Core-2 Quad, and an NVIDIA GTX 580 GPU. PTasks achieve higher maximum throughput than a hand-coded implementation and can support real-time data rates with low CPU utilization. The fps column is camera frames-per-second, tput is throughput in MB/s, lat is end-to-end latency (time from capture to delivered user-input). CPU utilization is broken down into user and kernel (sys) percentages. The gpu and gmem columns are GPU utilization and GPU memory usage. The thrds column is number of threads, and ws-delta is the increase (in MB) of the main memory footprint over the handcode version. The host-based implementation cannot deliver real-time frame rates, so the real-time and unconstrained implementations have identical performance.</p><note type="other">impl fps tput (MB/s) lat (ms) user sys gpu gmem thrds ws-delta Core2-</note><p>uses ptasks to perform the xform and filter steps of on the GPU. The hidinput step is performed on the CPU in the camera driver. We compare these four implementations in a "real-time" mode and an "unconstrained" mode. The former is the deployment target: the two cameras in the system drive all data flow. In "unconstrained", the system is driven by in-memory recordings of 1,000 frames of raw camera data, allowing us to measure maximum throughput for implementations that would otherwise be I/O bound. In "real-time" mode we are primarily concerned with utilization and end-to-end latency, while for "unconstrained", throughput is the primary metric.</p><p>The PTask infrastructure incurs overheads: additional memory to represent the graph (ports, channels, ptasks, the scheduler), and additional threads to drive the system. We measure the total number of threads used by the system as well as the change in memory footprint over the simplest hand-coded implementation. <ref type="table">Table 2</ref> and <ref type="figure" target="#fig_5">Figure 10</ref> characterize the performance of the gestural interface system running on the Core2-Quad, and on an NVIDIA GTX580 GPU. The data include frames-per-second, throughput, end-to-end latency, CPU utilization (broken down into user/kernel), gpu utilization, the number of threads, and memory footprint delta.</p><p>The PTask implementation outperforms all others. The CPUbased implementation achieves a frame rate of only 20 frames per second, a mere 67% of the real-time frame rate of the cameras, using 82% of the CPU to do so. The bilateral filtering in the filter step is the primary bottleneck. The pipes version achieves real-time frame rates, using more than 23% of the CPU to do it, consuming about 45% more memory than the hand-coded and ptask. Both the handcode and ptask implementations deliver very low CPU utilization at real-time frame rates (9.3% and 8.6% respectively) but ptask achieves the highest throughput, outstripping handcode by 11.6%. Outperforming handcode is significant because the handcode system enjoys all the data movement optimizations that the ptask version enjoys: ptask has higher throughput because it overlaps communication and computation in ways the handcode system does not. The PTask implementation is not only significantly lower in code complexity, but retains a level of modularity that the handcode version sacrifices.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.2">GPU sharing on Linux</head><p>We ran EncFS <ref type="bibr" target="#b28">[29]</ref>, a FUSE-based encrypted file system for Linux, modified to use a GPU for AES encryption and decryption. We used an NVIDIA GTX470 GPU and Intel Core i5 3.20GHz CPU, on a machine with 12GB of RAM and two SATA SSD 80GB drives connected in striped RAID configuration using the standard Linux software raid driver (md). We implemented AES with the XTS chaining mode, which is suitable for parallel hardware without compromising the cipher strength, and is now the standard mode used for encryption of storage devices <ref type="bibr" target="#b2">[3]</ref>. We configured FUSE to pass data blocks of up to 1MB from the kernel, and we modified EncFS to pass the entire buffer to the GPU for encryption or decryption. The larger block size amortizes the cost of moving the data to and from the GPU and enables higher degree of parallelism.</p><p>A sequential read and write of a 200MB file are 17% and 28% faster for the version of EncFS that uses the GPU than the version that uses the SSL software library implementation <ref type="table" target="#tab_3">(Table 3)</ref> , with results averaged over five executions.</p><p>On Linux, using the GPU can completely defeat the kernel's scheduling priority. With several processes periodically contending for the GPU, the one invoking longer GPU kernels will effectively monopolize the GPU regardless of its OS priority. Our GPU scheduling mechanism in the kernel ( §5.3), here called PTSched, eliminates this problem. <ref type="table" target="#tab_3">Table 3</ref> shows the results of running EncFS concurrently with one or two competing background GPU-bound tasks (a loop of 19ms CUDA program invocations). To evaluate the Linux scheduler in the most favorable light, the GPU-bound tasks are set to the minimum scheduling priority (nice +19) while the EncFS process and its clients have the highest priority (-20). The tasks invoke GPU kernels in a tight loop, which challenges the scheduler. The results show that if Linux is not informed about GPU use, then GPU use can invert scheduling priority, leading to a drastic degradation of file system performance (e.g., a 30× slowdown). Once the kernel is informed of GPU use (the PTSched column), a relatively simple scheduling algorithm restores consistent, system-wide kernel scheduling priority.</p><p>Another experiment shows the effort needed to maintain global scheduling priorities (   </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.3">Microbenchmarks: benefits of dataflow</head><p>To demonstrate that PTask can improve performance and eliminate unnecessary data migration, we show that composition of basic GPU-accelerated programs into a dataflow graph can outperform not only designs that rely on IPC mechanisms such as pipes, but can also outperform programs that are hand-coded to minimize data movement.</p><p>The micro-benchmarks we measure are shown in <ref type="table" target="#tab_6">Table 5</ref>. The benchmarks include bitonic sort, matrix multiplication (gemm), matrix additions (madd), and matrix copy (mcopy) kernels. To explore the impact on performance of different graph shapes, and relative costs of data copy and GPU-execution latency, we consider a range of data sizes (matrices ranging from 64 × 64 through 1024 × 1024), and graphs structured both as binary trees (for example, ((A × B) × (C × D))) and graphs structured as "rectangles", where each column is an independent computation (for example, ((A × B) × C) running concurrently with with ((D × E) × F ) is a rectangular graph 2 columns wide and 2 rows deep). This allows us to explore a range of graph sizes and shapes for gemm, madd, and mcopy.</p><p>To illustrate the generality of PTask, we also consider four higherlevel benchmarks including bitonic sort, fdtd, pca, and grpby. Bitonic sort is an example of a workload where the shape and size of the graph is fundamentally tied to the input dimensions. Bitonic sort is performed on a GPU as a series of pair-wise sort steps, alternated with transposition steps that effectively change the stride of the pairwise comparisons in the subsequent sort step. We express this as a linear graph connected by channels of 41 ptasks that implement either the sort or the transposition. The pca workload  implements the iterative principal components analysis described by Andrecut <ref type="bibr" target="#b8">[9]</ref>. We compute the first three components for each matrix with 10 and 54 iterations per component, which exceeds 95% and 99% convergence respectively for all cases. The graph for 10 iterations uses 229 ptasks and 796 channels, while the 54 iteration graph uses 1197 ptasks and 4140 channels. The grpby workload uses a graph of 7 ptasks and 9 channels to implement a "group by" operation over a range of integers (0.5, 1, and 2 million) and a known number of unique keys (128, 256, and 512). The fdtd workload is an electromagnetic analysis tool implementing a Finite Difference Time Domain model of a hexahedral cavity with conducting walls <ref type="bibr" target="#b43">[44]</ref>, running 10 iterations over a stream of inputs of lengths 5 and 10. For each benchmark, we compare the performance of four different implementations: single-threaded modular, modular, handcoded, and PTask. The single-threaded modular implementation performs the equivalent computation as a sequence of calls to a subroutine that encapsulates the calling of the underlying operation on the GPU. For example, for matrix addition, a single-thread makes a sequence of calls to a subroutine called matrix_add, which copies two matrices to the GPU, performs the addition, and copies the result back to host memory. The configuration is called modular because the subroutine can be freely composed, but as we saw in <ref type="figure" target="#fig_1">Figure 6</ref>, this modularity comes at the cost of unnecessary data copies to and from the GPU. The modular implementation performs the equivalent computation using the same strategy for encapsulating operations on the GPU that is used in the single-threaded modular implementation, but makes liberal use of multi-threading to attempt to hide the latency of data movement, overlapping data copy to and from the GPU with execution on the GPU. This approach entails a significant level of code complexity for thread management and producer/consumer synchronization, but it does give us a lower bound on the performance of a composed, IPC based implementation (for example matrix_-add A B | matrix_add C). The handcode implementation represents a single-threaded implementation handcoded to minimize data copy, at the expense of sacrificing composability. We consider this case to represent the most likely solution an expert CUDA programmer would choose. The PTask implementation executes the workload as a data flow graph as described above. In the case of pca, our handcode implementation is based on the CUBLAS [58] implementation described in <ref type="bibr" target="#b7">[8]</ref>.</p><p>Performance measurements were taken on a Windows 7 x64 desktop machine with a 4-core Intel Xeon running at 2.67 GHz, 6GB of RAM, and an NVIDIA GeForce GTX 580 GPU which features 512 processing cores and 1.5GB of memory. Data are averaged over  <ref type="table" target="#tab_2">0   512x512  512x256  512x128  64x64  128x128  256x256  64x64  128x128  256x256  256x256  512x512  1024x1024  256x256  512x512  1024x1024  256x256  512x512  1024x1024  256x256  512x512  1024x1024  64x64x4  128x128x4  256x256x4  64x64x4  128x128x4  256x256x4  128x128  256x256  512x512  .5MB-128  1MB-256  2MB-512</ref> bitonic sort gemm-tree6x32</p><p>gemm-rect6x10</p><p>madd-tree6x32</p><p>madd-rect6x10</p><p>mcopy-tree6x32</p><p>mcopy-rect6x10</p><p>fdtd-len5 fdtd-len10 pca grpby  bitonic sort gemm-tree6x32</p><p>gemm-rect6x10</p><p>madd-tree6x32</p><p>madd-rect6x10</p><p>mcopy-tree6x32</p><p>mcopy-rect6x10</p><p>fdtd-len5 fdtd-len10 pca-10 pca-54 grpby three runs. <ref type="figure" target="#fig_8">Figure 11</ref> shows speedup over the single-threaded modular implementation for our modular, handcode, and PTask implementations. The single-threaded modular implementation induces considerable unnecessary data copy, and cannot hide transfer latency, so it is always the slowest. In general, the PTask implementations out-perform the handcode versions because a PTask graph can take advantage of inherent pipeline parallelism to lower endto-end latency. In some instances the handcode version outperforms PTask (e.g. tree, matrix addition for 6x32 sized graphs). In these cases, PTask overheads such as additional threading, GPU scheduling, and synchronization outstrip performance gains from overlapping GPU-execution and data transfer. The modular implementation is strictly less performant than PTask and handcode, due to unnecessary data migration. The grpby workload relies on device-side memory allocation that has to be cleaned up between GPU invocations. Consequently, communication and invocation are synchronous both for PTask and handcode, and PTask's additional overheads make it slightly slower. Overall, PTask has geometric mean speedup of 10% over handcode, and 1.93× over modular implementation, showing that performing these computations in a dataflow manner is worthwhile both in terms of performance and in terms of preserving modularity.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.4">PTask Scheduling</head><p>To evaluate the efficacy of PTask scheduling policies, we add a second GTX 580 to the system described in Section 6.3. <ref type="figure">Fig- ure 12</ref> shows speedup on 2 GPUs over execution on a single GPU, for three of the scheduling policies defined in Section 5.1: firstavailable, priority, and data-aware (fifo is omitted because it is similar to first-available). The data shown represent rectangular graphs of matrix multiplication and addition kernels. All graphs have a breadth of 8, and depth from 1 to 6. Producer-consumer relationships exist only along the vertical axis. The data show that data-aware scheduling is effective at providing scalability. As the PTask graph gets deeper, priority scheduling alone actually hurts performance due to data-oblivious ptask assignment. Migrating a datablock across GPUs must be done through main memory, incur-0 0  <ref type="figure">Figure 12</ref>: Speedup of PTask using 2 GTX580 GPUs over PTask using 1 GTX580 GPU, for a range of graph sizes using matrix multiplication ptasks. Data for the fifo scheduling policy is omitted because it is similar to that for first-available.</p><p>ring high latency. Because the priority algorithm does not consider locality, it induces frequent data-block transfers, making the system slower than the single GPU case for deep graphs. The rate of GPU-GPU migration goes from from an average over all workloads of 3.71% for first-available to 14.6% for priority. By contrast, the data-aware policy avoids needless data movement, bringing the average over all workloads down to 0.6%. Consequently, scalability generally improves as graph depth improves, because the scheduler can almost always make an assignment that preserves locality. <ref type="figure" target="#fig_9">Figure 13</ref> compares the throughput of our scheduling policies for 4 concurrently running PTask graphs (each of 36 ptasks) on a single GPU. Data for the data-aware policy are omitted because the data-aware and priority policies are identical with just one GPU. The first-available and fifo policies ignore priority completely, but the priority policy is able to deliver throughput that increases nearlinearly with the priority of the graph.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.">RELATED WORK</head><p>General-purpose GPU computing. The research community has focused considerable effort on the problem of providing a generalpurpose programming interface to the specialized hardware supported by GPUs (GPGPU). GPGPU computing frameworks such as CUDA <ref type="bibr" target="#b58">[59]</ref>, OpenCL <ref type="bibr" target="#b46">[47]</ref>, and others <ref type="bibr" target="#b15">[16,</ref><ref type="bibr" target="#b53">54,</ref><ref type="bibr" target="#b19">20,</ref><ref type="bibr" target="#b32">33,</ref><ref type="bibr" target="#b67">68]</ref> provide an expressive platform, but are implemented using heavy-weight user-mode libraries and run-times combined with proprietary GPU device drivers. These systems integrate poorly with the operating system. The programming interfaces provided by these frameworks can be implemented on top of the PTask API.</p><p>Offloading. A large body of research has been dedicated to offloading techniques such as channel processors <ref type="bibr" target="#b0">[1]</ref>, smart disks <ref type="bibr" target="#b45">[46,</ref><ref type="bibr" target="#b62">63,</ref><ref type="bibr" target="#b21">22]</ref>, and TCP offload <ref type="bibr" target="#b23">[24]</ref>. PTasks make it easier to create applications that offload work to a programmable device by exposing kernel abstractions. The Hydra framework <ref type="bibr" target="#b68">[69]</ref> also provides a graph-based dataflow programming model for offloading tasks to peripheral devices. Unlike our work, the Hydra model requires components to communicate using RPC through a common runtime and an API that cannot be supported by current GPU hardware. Hydra cannot provide the fairness and isolation guarantees of PTasks.</p><p>OS support and architectural support. The Synthesis kernel <ref type="bibr" target="#b52">[53]</ref> orchestrates threads of execution to form a dataflow graph, using switches and pumps to connect producers and consumers, and allowing interrupts to start threads at nodes in the graph. Synthesis uses dynamic construction of code to orchestrate data movement; in contrast, our abstractions are implemented on top of events, deferred procedure calls, and work queues. PTasks are exposed through the system call interface. The Helios <ref type="bibr" target="#b56">[57]</ref> OS supports satellite kernels, which communicate via RPC. The Barrelfish OS <ref type="bibr" target="#b14">[15]</ref> treats the hardware as a network of independent, heterogeneous cores communicating using RPC. Unlike our model, both Helios and Barrelfish propose abstractions that cannot be supported by current GPUs, which lack the architectural features to run OS code or communicate via RPC. The Scout operating system <ref type="bibr" target="#b54">[55]</ref> supports the construction of optimized code paths, with the goals of enabling modularity while eliminating wasted data copy and improving scheduling by providing the scheduler with richer information about interdependences between modules along a path. PTask's ptasks and ports share some similar to Scout's routers and services respectively. Scout's paths are different from PTask's graphs in that a path is a single path of data through a series of modules, while a graph represents potentially many paths contributing to a single computation. Unlike Scout, PTask graphs can handle fan-out.</p><p>The SPIN operating system <ref type="bibr" target="#b18">[19]</ref> allows applications to change the OS interface and specialize OS behavior to improve performance. With similar motivation to PTask's channel specialization, SPIN enables data movement optimizations such as direct data streaming between disk and network to eliminate redundant buffering (such as sendfile). In SPIN, applications must implement these specializations explicitly, while a major goal of PTask is letting the system take advantage of optimization opportunities where they arise, without programmer intervention.</p><p>Gelado et al. propose ADSM <ref type="bibr" target="#b26">[27]</ref>-an asymmetric distributed shared memory abstraction, in which in-memory data structures required by GPUs are automatically identified and marshalled to the GPU local memory and back, eliminating unnecessary data transfers. Unlike PTask, ADSM addresses only the data management issues without dealing with GPU scheduling.</p><p>Scheduling for heterogeneous processors. The TimeGraph [45] GPU scheduler provides isolation and prioritization capabilities for GPU resource management, targeting real-time environments. TimeGraph does not propose OS abstractions to manage GPUs: priorities are set statically in a file in /etc/, making TimeGraph unable to integrate with process priority. The design space of scheduling algorithms and policies for heterogeneous systems <ref type="bibr" target="#b42">[43,</ref><ref type="bibr" target="#b12">13,</ref><ref type="bibr" target="#b13">14,</ref><ref type="bibr" target="#b16">17]</ref> has received considerable research attention, along with approaches to dynamic selection between CPU and GPU execution <ref type="bibr" target="#b10">[11,</ref><ref type="bibr" target="#b11">12,</ref><ref type="bibr" target="#b22">23,</ref><ref type="bibr" target="#b63">64]</ref>. In contrast, ptasks are bound to either a class of accelerators or a CPU, and can not re-target dynamically.</p><p>Dataflow and streaming. Hardware systems such as Intel IXP [40] Imagine <ref type="bibr" target="#b1">[2]</ref>, and SCORE <ref type="bibr" target="#b20">[21]</ref> enable programmers or compilers to express parallel computation as a graph of routines whose edges represent data movement. The classic data flow abstractions proposed for Monsoon and Id <ref type="bibr" target="#b60">[61]</ref> target environments in which dataflow execution is supported directly by the processor hardware. A StreamIt <ref type="bibr" target="#b65">[66]</ref> application is a graph of nodes which send and receive items to each other over channels. DirectShow <ref type="bibr" target="#b50">[51]</ref> supports graph-based parallelism through "filter graphs" in which filters are connected to each other with input and output pins. StreamIt and DirectShow are programming models with dedicated compiler and user-mode runtime support. PTask is a streaming programming model that focuses on integration with OS abstractions.</p><p>Dryad <ref type="bibr" target="#b40">[41]</ref> is a graph-based fault-tolerant programming model for distributed parallel execution in data center. PTask targets an entirely different execution environment. The Click modular router <ref type="bibr" target="#b48">[49]</ref> provides a graph-based programming model. Click is always singlethreaded, while PTask makes extensive use of threading to manage execution on and communication with the GPU. CODE2 <ref type="bibr" target="#b55">[56]</ref>, and P-RIO <ref type="bibr" target="#b51">[52]</ref> use similar techniques to PTask to express computation as a graph with the goal of explicitly separating communication from computation at the programmer interface: neither system addresses problems of heterogeneity or OS support.</p><p>Sponge <ref type="bibr" target="#b37">[38]</ref> is a compilation framework for GPUs using synchronous dataflow (SDF) streaming languages, addressing problems of portability for GPU-side code across different generations of GPUs and CPUs, as well abstracting hardware details such as memory hierarchy and threading models. Like other SDF languages <ref type="bibr" target="#b49">[50]</ref> such as LUSTRE <ref type="bibr" target="#b30">[31]</ref> and ESTEREL <ref type="bibr" target="#b17">[18]</ref>, Sponge provides a static schedule, while PTask does not. More importantly, Sponge is primarily concerned with optimizing compilergenerated GPU-side code, while PTask addresses systems-level issues. A PTask-based system could benefit from Sponge support, and vice-versa.</p><p>Liquid Metal <ref type="bibr" target="#b38">[39]</ref> and Lime <ref type="bibr" target="#b9">[10]</ref> provide programming environments for heterogeneous targets such as systems comprising CPUs and FGPAs. Lime's filters, and I/O containers allow a computation to be expressed (by the compiler, in intermediate form) as a pipeline, while PTask's graph-structured computation is expressed explicitly by the programmer. Lime's buffer objects provide a similar encapsulation of data movement across memory domains to that provided by PTask's channels and datablocks. Flextream <ref type="bibr" target="#b36">[37]</ref> is compilation framework for the SDF model that dynamically adapts applications to target architectures in the face of changing availability of FPGA, GPU, or CPU resources. Like PTask, Flextream applications are represented as a graph. As language-level tools, Liquid Metal, Lime and Flextream provide no OS-level support and therefore cannot address isolation/fairness guarantees, and cannot address data sharing across processes or in contexts where accelerators do not have the required language-level support. PTask is not coupled with a particular language or user-mode runtime.</p><p>I/O and data movement. PacketShader <ref type="bibr" target="#b31">[32]</ref> is a software router that accelerates packet processing on GPUs and SSLShader <ref type="bibr" target="#b41">[42]</ref> accelerates a secure sockets layer server by offloading AES and RSA computations to GPUs. Both SSLShader and PacketShader rely heavily on batching (along with overlap of computation/communication with the GPU) to address the overheads of I/O to the GPU and concomitant kernel/user switches. The PTask system could help by reducing kernel/user switches and eliminating double buffering between the GPU and NIC. IO-Lite [60] supports unified buffering and caching to minimize data movement. Unlike IOLite's buffer aggregate abstraction, PTask's datablocks are mutable, but PTask's channel implementations share IO-Lite's technique of eliminating double-buffering with memory-mapping (also similar to fbufs <ref type="bibr" target="#b24">[25]</ref>, Container Shipping <ref type="bibr" target="#b61">[62]</ref>, and zero-copy mechanisms proposed by Thadani et. al <ref type="bibr" target="#b64">[65]</ref>). While IO-Lite addresses datamovement across protection domains, it does not address the problem of data movement across disjoint/incoherent memory spaces, such as those private to a GPU or other accelerator.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.">CONCLUSION</head><p>This paper proposes a new set of OS abstractions for accelerators such as GPUs called the PTask API. PTasks expose only enough hardware detail as is required to enable programmers to achieve good performance and low latency, while providing abstractions that preserve modularity and composability. The PTask API promotes GPUs to a general-purpose, shared compute resource, managed by the OS, which can provide fairness and isolation.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 5 :</head><label>5</label><figDesc>Figure 5: The effect of CPU-bound work on GPU-bound tasks. H→D is a CUDA workload that has communication from the host to the GPU device, while H←D has communication from the GPU to the host, and H↔D has bidirectional communication.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 6 :</head><label>6</label><figDesc>Figure 6: Pseudo-code to offload matrix computation (A×B)× C to a GPU. This modular approach uses the gemm subroutine to compute both A×B and (A×B)×C, forcing an unnecessary round-trip from GPU to main memory for the intermediate result.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 7 :</head><label>7</label><figDesc>Figure 7: A dataflow graph for matrix multiplication.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 8 :</head><label>8</label><figDesc>Figure 8: A dataflow graph for the gesture recognition system using the ptask, port, and channel abstractions.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 9 :</head><label>9</label><figDesc>Figure 9: Pseudo-code for algorithms used by PTask's priority scheduling algorithm.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 10 :</head><label>10</label><figDesc>Figure 10: Relative performance metrics for different gestural interface implementations. The runtime column shows the relative wall-clock time taken for each implementation to process 1000 frames. User, system, and gpu-util are the relative user time, system time, and gpu utilization. The latency column is the relative end-to-end latency for a single frame. In all columns, lower is better.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Figure 11 :</head><label>11</label><figDesc>Figure 11: Speedup of various GPU-accelerated implementations of our benchmarks over single-thread, modular GPU-based implementations, for input matrix and image sizes ranging from 64x64 through 1024x1024. The PTask implementation has geometric mean speedup of 10% over handcoded, and 1.93× over modular implementation.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Figure 13 :</head><label>13</label><figDesc>Figure 13: Number of ptask invocations per second on 1 GTX580 GPU for four competing PTask graphs with different ptask priorities (2,4,6,8) using 6x6 rectangular graphs of matrix multiplication ptasks. The trends are the same independent of graph size, shape, or ptask composition. Data for the data-aware policy is not shown because the the priority and data-aware policies are identical when only 1 GPU is present.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2" validated="false"><head>Table 4 ).</head><label>4</label><figDesc></figDesc><table>We modified EncFS to propagate 
</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3" validated="false"><head>Table 3 : Bandwidth measurements for sequential read or write of a 200MB file on an encrypted file system, relative to the CPU performing encryption (CPU column). Negative numbers in</head><label>3</label><figDesc></figDesc><table>-
</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_4" validated="false"><head>Table 4 :</head><label>4</label><figDesc></figDesc><table>Bandwidth measurements for sequential read or write 
of a 200MB file on an encrypted file system by two EncFS 
clients that have different nice values (0 or -20). 

threads of different nice values doing a read or write concurrently 
on two CPUs, but contending for the GPU. Without our GPU OS 
scheduling (Linux), the client throughput is not affected by the 
client's nice level. With PTSched, the client with higher priority 
(nice -20) achieves higher throughput at the expense of reduced 
throughput for the lower priority client. Note the aggregate through-
put of this experiment is about 25% higher than the above exper-
iment (e.g., 356 MB/s read bandwidth vs. 286 MB/s) because it 
uses two CPUs and EncFS has significant CPU work. 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_6" validated="false"><head>Table 5 :</head><label>5</label><figDesc></figDesc><table>Micro-benchmarks evaluated across a range of PTask 
graph sizes and shapes. Pmin and Pmax are the number of 
ptasks, while Cmin and Cmax are the number of channels in 
the smallest and largest graphs. 

</table></figure>

			<note place="foot" n="1"> Indeed, NVIDIA GPU Direct [4] implements just such a feature, but requires specialized support in the driver of any I/O device involved.</note>

			<note place="foot" n="2"> The iteration space is the set of all possible assignments of control variables in a loop nest. Conceptually, GPUs execute subsets of an iteration space in parallel.</note>

			<note place="foot" n="3"> Although some support for device-side memory allocation has</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="9.">ACKNOWLEDGEMENTS</head><p>We thank Ashwin Prasad for implementation of the fdtd and grpby microbenchmarks. This research is supported by NSF Career award CNS-0644205, NSF award CNS-1017785, and a 2010 NVIDIA research grant. We thank our shepherd, Steve Hand for his valuable and detailed feedback.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
				<title level="m">IBM 709 electronic data-processing system: advance description. I.B.M</title>
		<meeting><address><addrLine>White Plains, NY</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1957" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">The Imagine Stream Processor</title>
		<imprint>
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m" type="main">Recommendation for block cipher modesl of operation: the xts-aes mode for confidentiality on block-oriented storage devices. National Institute of Standards and Technology, Special Publication 800-e8E</title>
		<imprint>
			<date type="published" when="2009" />
			<biblScope unit="volume">6</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nvidia</forename><surname>Gpudirect</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title level="m" type="main">NVIDIA&apos;s Next Generation CUDATM Compute Architecture: Fermi</title>
		<imprint>
			<date type="published" when="2011" />
			<biblScope unit="volume">4</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">Top 500 supercomputer sites</title>
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">Windows Driver Foundation (WDF)</title>
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title level="m" type="main">Parallel GPU Implementation of Iterative PCA Algorithms</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Andrecut</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2008-11" />
			<biblScope unit="volume">6</biblScope>
		</imprint>
	</monogr>
	<note>ArXiv e-prints</note>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Parallel GPU Implementation of Iterative PCA Algorithms</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Andrecut</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Computational Biology</title>
		<imprint>
			<biblScope unit="volume">16</biblScope>
			<biblScope unit="issue">11</biblScope>
			<date type="published" when="2009-11" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Lime: a java-compatible and synthesizable language for heterogeneous architectures</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">S</forename><surname>Auerbach</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">F</forename><surname>Bacon</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Cheng</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">M</forename><surname>Rabbah</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">OOPSLA. ACM</title>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title level="m" type="main">StarPU: A Unified Runtime System for Heterogeneous Multi-core Architectures</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Augonnet</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Namyst</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Exploiting the Cell/BE Architecture with the StarPU Unified Runtime System</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Augonnet</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Thibault</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Namyst</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Nijhuis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SAMOS &apos;09</title>
		<imprint>
			<date type="published" when="2009" />
			<biblScope unit="page" from="329" to="339" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Programming Grid Applications with GRID Superscalar</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">M</forename><surname>Badia</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Labarta</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Sirvent</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">M</forename><surname>Pérez</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">M</forename><surname>Cela</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Grima</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Grid Computing</title>
		<imprint>
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="issue">7</biblScope>
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<title level="m" type="main">Scheduling strategies for master-slave tasking on heterogeneous processor platforms</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Banino</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Beaumont</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Carter</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Ferrante</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Legrand</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Robert</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">The multikernel: a new OS architecture for scalable multicore systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Baumann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Barham</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P.-E</forename><surname>Dagand</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Harris</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Isaacs</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Peter</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Roscoe</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Schüpbach</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Singhania</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SOSP</title>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Bayoumi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Chu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Hanafy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Harrell</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Refai-Ahmed</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Scientific and Engineering Computing Using ATI Stream Technology. Computing in Science and Engineering</title>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="92" to="97" />
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<monogr>
		<title level="m" type="main">CellSs: a programming model for the cell BE architecture</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Bellens</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">M</forename><surname>Perez</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">M</forename><surname>Badia</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Labarta</surname></persName>
		</author>
		<idno>SC 2006. 7</idno>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">The esterel synchronous programming language: design, semantics, implementation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Berry</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Gonthier</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Sci. Comput. Program</title>
		<imprint>
			<biblScope unit="volume">19</biblScope>
			<biblScope unit="issue">7</biblScope>
			<biblScope unit="page" from="87" to="152" />
			<date type="published" when="1992-11" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Extensibility safety and performance in the spin operating system</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><forename type="middle">N</forename><surname>Bershad</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Savage</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Pardyak</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">G</forename><surname>Sirer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">E</forename><surname>Fiuczynski</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Becker</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Chambers</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Eggers</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SIGOPS Oper. Syst. Rev</title>
		<imprint>
			<biblScope unit="volume">29</biblScope>
			<biblScope unit="issue">7</biblScope>
			<biblScope unit="page" from="267" to="283" />
			<date type="published" when="1995-12" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Brook for GPUs: Stream Computing on Graphics Hardware</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Buck</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Foley</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Horn</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Sugerman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Fatahalian</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Houston</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Hanrahan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM TRANSACTIONS ON GRAPHICS</title>
		<imprint>
			<biblScope unit="issue">7</biblScope>
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<monogr>
		<title level="m" type="main">Stream computations organized for reconfigurable execution (score). FPL &apos;00</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Caspi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Chu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Huang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Yeh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Wawrzynek</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Dehon</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2000" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Processor-embedded distributed smart disks for I/O-intensive workloads: architectures, performance models and evaluation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">C</forename><surname>Chiu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Liao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">N</forename><surname>Choudhary</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">T</forename><surname>Kandemir</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Parallel Distrib. Comput</title>
		<imprint>
			<biblScope unit="volume">65</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="532" to="551" />
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<monogr>
		<title level="m" type="main">Accelerating computing with the cell broadband engine processor</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">H</forename><surname>Crawford</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Henning</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Kistler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Wright</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<monogr>
		<title level="m" type="main">TCP offload to the rescue</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Currid</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2004" />
			<biblScope unit="volume">Queue</biblScope>
			<biblScope unit="page" from="58" to="65" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Fbufs: a high-bandwidth cross-domain transfer facility</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Druschel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><forename type="middle">L</forename><surname>Peterson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SIGOPS Oper. Syst. Rev</title>
		<imprint>
			<biblScope unit="volume">27</biblScope>
			<biblScope unit="page" from="189" to="202" />
			<date type="published" when="1993-12" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Garland</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Le Grand</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Nickolls</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Anderson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Hardwick</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Morton</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Phillips</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Volkov</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Parallel Computing Experiences with CUDA. Micro</title>
		<imprint>
			<biblScope unit="volume">28</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="13" to="27" />
			<date type="published" when="2008" />
		</imprint>
	</monogr>
	<note>IEEE</note>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">An asymmetric distributed shared memory model for heterogeneous parallel systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Gelado</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">E</forename><surname>Stone</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Cabezas</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Patel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Navarro</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W.-M</forename><forename type="middle">W</forename><surname>Hwu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ASPLOS</title>
		<imprint>
			<biblScope unit="volume">10</biblScope>
			<biblScope unit="issue">7</biblScope>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">A time-of-flight depth sensor -system description, issues and solutions</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">B</forename><surname>Gokturk</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Yalcin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Bamji</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">CVPRW</title>
		<imprint>
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Gough</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Encfs</surname></persName>
		</author>
		<ptr target="http://www.arg0.net/encfs.6.2" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">Fast computation of database operations using graphics processors</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><forename type="middle">K</forename><surname>Govindaraju</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Lloyd</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Lin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Manocha</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM SIGGRAPH 2005 Courses, SIGGRAPH &apos;05</title>
		<meeting><address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2005" />
		</imprint>
	</monogr>
	<note>ACM. 4.1.2</note>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">The synchronous dataflow programming language lustre</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Halbwachs</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Caspi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Raymond</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Pilaud</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the IEEE</title>
		<meeting>the IEEE</meeting>
		<imprint>
			<date type="published" when="1991" />
			<biblScope unit="page" from="1305" to="1320" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">Packetshader: a GPU-accelerated software router</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Han</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Jang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Park</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Moon</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SIGCOMM Comput. Commun. Rev</title>
		<imprint>
			<biblScope unit="volume">40</biblScope>
			<biblScope unit="issue">7</biblScope>
			<biblScope unit="page" from="195" to="206" />
			<date type="published" when="2010-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<monogr>
		<title level="m" type="main">hiCUDA: a high-level directive-based language for GPU programming</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">D</forename><surname>Han</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">S</forename><surname>Abdelrahman</surname></persName>
		</author>
		<idno>GPGPU 2009. 7</idno>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title level="a" type="main">Mars: a mapreduce framework on graphics processors</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>He</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Fang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Q</forename><surname>Luo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><forename type="middle">K</forename><surname>Govindaraju</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Wang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 17th international conference on Parallel architectures and compilation techniques, PACT &apos;08</title>
		<meeting>the 17th international conference on Parallel architectures and compilation techniques, PACT &apos;08<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2008" />
			<biblScope unit="page" from="260" to="269" />
		</imprint>
	</monogr>
	<note>ACM. 4.1.2</note>
</biblStruct>

<biblStruct xml:id="b34">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>He</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Yang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Fang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Lu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Govindaraju</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Q</forename><surname>Luo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Sander</surname></persName>
		</author>
		<imprint/>
	</monogr>
	<note>Relational joins on graphics processors. SIGMOD &apos;08, 2008. 4.1.2</note>
</biblStruct>

<biblStruct xml:id="b35">
	<analytic>
		<title level="a" type="main">BiDi screen: a thin, depth-sensing LCD for 3D interaction using light fields</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Hirsch</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Lanman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Holtzman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Raskar</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Trans. Graph</title>
		<imprint>
			<biblScope unit="volume">28</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="1" to="9" />
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<analytic>
		<title level="a" type="main">Flextream: Adaptive compilation of streaming applications for heterogeneous architectures</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Hormati</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Choi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Kudlur</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">M</forename><surname>Rabbah</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Mudge</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">A</forename><surname>Mahlke</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">PACT</title>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="2009" />
			<biblScope unit="page" from="214" to="223" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b37">
	<analytic>
		<title level="a" type="main">Sponge: portable stream programming on graphics engines</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">H</forename><surname>Hormati</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Samadi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Woh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Mudge</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Mahlke</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the sixteenth international conference on Architectural support for programming languages and operating systems (ASPLOS)</title>
		<meeting>the sixteenth international conference on Architectural support for programming languages and operating systems (ASPLOS)</meeting>
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b38">
	<analytic>
		<title level="a" type="main">Liquid metal: Object-oriented programming across the hardware/software boundary</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">S</forename><surname>Huang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Hormati</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">F</forename><surname>Bacon</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">M</forename><surname>Rabbah</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ECOOP</title>
		<imprint>
			<date type="published" when="2008" />
			<biblScope unit="page" from="76" to="103" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b39">
	<monogr>
		<title level="m" type="main">Intel Corporation. Intel IXP 2855 Network Processor</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b40">
	<monogr>
		<title level="m" type="main">Dryad: distributed data-parallel programs from sequential building blocks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Isard</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Budiu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Yu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Birrell</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Fetterly</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b41">
	<analytic>
		<title level="a" type="main">Sslshader: cheap ssl acceleration with commodity processors</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Jang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Han</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Han</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Moon</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Park</surname></persName>
		</author>
		<idno>Association. 7</idno>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 8th USENIX conference on Networked systems design and implementation, NSDI&apos;11</title>
		<meeting>the 8th USENIX conference on Networked systems design and implementation, NSDI&apos;11<address><addrLine>Berkeley, CA, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2011" />
			<biblScope unit="page" from="1" to="1" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b42">
	<monogr>
		<title level="m" type="main">Predictive runtime code scheduling for heterogeneous architectures</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><forename type="middle">J</forename><surname>Jiménez</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Vilanova</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Gelado</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Gil</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Fursin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Navarro</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b43">
	<analytic>
		<title level="a" type="main">Static array storage optimization in matlab</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">G</forename><surname>Joisha</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Banerjee</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM SIGPLAN Conference on Programming Language Design and Implementation</title>
		<imprint>
			<date type="published" when="2003" />
			<biblScope unit="volume">6</biblScope>
			<biblScope unit="page" from="258" to="268" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b44">
	<analytic>
		<title level="a" type="main">Timegraph: GPU scheduling for real-time multi-tasking environments</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Kato</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Lakshmanan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Rajkumar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Ishikawa</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2011 USENIX conference on USENIX annual technical conference</title>
		<meeting>the 2011 USENIX conference on USENIX annual technical conference<address><addrLine>Berkeley, CA, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2011" />
			<biblScope unit="volume">3</biblScope>
			<biblScope unit="page">7</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b45">
	<analytic>
		<title level="a" type="main">A case for intelligent disks (IDISKs)</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Keeton</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">A</forename><surname>Patterson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">M</forename><surname>Hellerstein</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SIGMOD Rec</title>
		<imprint>
			<biblScope unit="volume">27</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="42" to="52" />
			<date type="published" when="1998" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b46">
	<monogr>
		<title level="m" type="main">The OpenCL Specification, Version 1.0</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Khronos</forename><surname>Group</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2009" />
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="page">7</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b47">
	<analytic>
		<title level="a" type="main">Neural control of computer cursor velocity by decoding motor cortical spiking activity in humans with tetraplegia</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S.-P</forename><forename type="middle">P</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">D</forename><surname>Simeral</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><forename type="middle">R</forename><surname>Hochberg</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">P</forename><surname>Donoghue</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">J</forename><surname>Black</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of neural engineering</title>
		<imprint>
			<biblScope unit="volume">5</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="455" to="476" />
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b48">
	<analytic>
		<title level="a" type="main">The click modular router</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Kohler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Morris</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Jannotti</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">F</forename><surname>Kaashoek</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Trans. Comput. Syst</title>
		<imprint>
			<biblScope unit="volume">18</biblScope>
			<biblScope unit="issue">7</biblScope>
			<date type="published" when="2000-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b49">
	<analytic>
		<title level="a" type="main">Static scheduling of synchronous data flow programs for digital signal processing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">A</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">G</forename><surname>Messerschmitt</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Comput</title>
		<imprint>
			<biblScope unit="volume">36</biblScope>
			<biblScope unit="issue">7</biblScope>
			<biblScope unit="page" from="24" to="35" />
			<date type="published" when="1987-01" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b50">
	<monogr>
		<title level="m" type="main">Programming Microsoft Directshow</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Linetsky</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2001" />
			<publisher>Wordware Publishing Inc</publisher>
			<pubPlace>Plano, TX, USA</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b51">
	<analytic>
		<title level="a" type="main">A modular parallel-programming environment</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Loques</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Leite</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">V</forename><surname>Carrera</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Concurrency</title>
		<imprint>
			<biblScope unit="volume">6</biblScope>
			<biblScope unit="issue">7</biblScope>
			<biblScope unit="page" from="47" to="57" />
			<date type="published" when="1998-01" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b52">
	<analytic>
		<title level="a" type="main">Threads and input/output in the synthesis kernal</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Massalin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Pu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SOSP &apos;89: Proceedings of the twelfth ACM symposium on Operating systems principles</title>
		<meeting><address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="1989" />
			<biblScope unit="page" from="191" to="201" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b53">
	<analytic>
		<title level="a" type="main">Programming using RapidMind on the Cell BE</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">D</forename><surname>Mccool</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>D&amp;apos;amora</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SC &apos;06: Proceedings of the 2006 ACM/IEEE conference on Supercomputing</title>
		<meeting><address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2006" />
			<biblScope unit="volume">222</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b54">
	<monogr>
		<title level="m" type="main">Making paths explicit in the scout operating system</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Mosberger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><forename type="middle">L</forename><surname>Peterson</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1996" />
			<biblScope unit="page" from="153" to="167" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b55">
	<analytic>
		<title level="a" type="main">The code 2.0 graphical parallel programming language</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Newton</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">C</forename><surname>Browne</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 6th international conference on Supercomputing, ICS &apos;92</title>
		<meeting>the 6th international conference on Supercomputing, ICS &apos;92<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="1992" />
			<biblScope unit="page" from="167" to="177" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b56">
	<monogr>
		<title level="m" type="main">Helios: heterogeneous multiprocessing with satellite kernels</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">B</forename><surname>Nightingale</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Hodson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Mcilroy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Hawblitzel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Hunt</surname></persName>
		</author>
		<idno>SOSP 2009. 7</idno>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b57">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nvidia</forename><surname>Cuda</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2011" />
			<biblScope unit="volume">6</biblScope>
		</imprint>
	</monogr>
	<note>Toolkit 4.0 CUBLAS Library</note>
</biblStruct>

<biblStruct xml:id="b58">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nvidia</forename><surname>Nvidia Cuda Programming Guide</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b59">
	<monogr>
		<title level="m" type="main">Io-lite: A unified i/o buffering and caching system</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><forename type="middle">S</forename><surname>Pai</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Druschel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Zwaenepoel</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1997" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b60">
	<analytic>
		<title level="a" type="main">Monsoon: an explicit token-store architecture</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">M</forename><surname>Papadopoulos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">E</forename><surname>Culler</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 17th annual international symposium on Computer Architecture (ISCA)</title>
		<meeting>the 17th annual international symposium on Computer Architecture (ISCA)</meeting>
		<imprint>
			<date type="published" when="1990" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b61">
	<analytic>
		<title level="a" type="main">Container shipping: Operating system support for i/o-intensive applications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Pasquale</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Anderson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Diego</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><forename type="middle">K</forename><surname>Muller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Global</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Solutions</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Computer</title>
		<imprint>
			<biblScope unit="volume">27</biblScope>
			<biblScope unit="issue">7</biblScope>
			<biblScope unit="page" from="84" to="93" />
			<date type="published" when="1994" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b62">
	<analytic>
		<title level="a" type="main">Active disks for large-scale data processing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Riedel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Faloutsos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">A</forename><surname>Gibson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Nagle</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer</title>
		<imprint>
			<biblScope unit="volume">34</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="68" to="74" />
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b63">
	<monogr>
		<title level="m" type="main">Optimization principles and application performance evaluation of a multithreaded GPU using CUDA</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Ryoo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">I</forename><surname>Rodrigues</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">S</forename><surname>Baghsorkhi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">S</forename><surname>Stone</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">B</forename><surname>Kirk</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W.-M</forename><surname>Hwu</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b64">
	<monogr>
		<title level="m" type="main">An efficient zero-copy i/o framework for unix</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">N</forename><surname>Thadani</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><forename type="middle">A</forename><surname>Khalidi</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1995" />
		</imprint>
	</monogr>
<note type="report_type">Technical report</note>
</biblStruct>

<biblStruct xml:id="b65">
	<monogr>
		<title level="m" type="main">StreamIt: A Language for Streaming Applications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Thies</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Karczmarek</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">P</forename><surname>Amarasinghe</surname></persName>
		</author>
		<idno>CC 2002. 7</idno>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b66">
	<analytic>
		<title level="a" type="main">Bilateral filtering for gray and color images</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Tomasi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Manduchi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ICCV 1998</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b67">
	<monogr>
		<title level="m" type="main">CUDA-Lite: Reducing GPU Programming Complexity</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S.-Z</forename><surname>Ueng</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Lathara</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">S</forename><surname>Baghsorkhi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W.-M</forename><forename type="middle">W</forename><surname>Hwu</surname></persName>
		</author>
		<idno>LCPC 2008. 7</idno>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b68">
	<monogr>
		<title level="m" type="main">Tapping into the fountain of CPUs: on operating system support for programmable devices</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Weinsberg</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Dolev</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Anker</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Ben-Yehuda</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Wyckoff</surname></persName>
		</author>
		<idno>ASPLOS 2008. 7</idno>
		<imprint/>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
