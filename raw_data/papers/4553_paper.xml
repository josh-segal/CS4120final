<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2019-03-26T16:53+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">PAC Model-Free Reinforcement Learning</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alexander</forename><forename type="middle">L</forename><surname>Strehl</surname></persName>
							<email>strehl@cs.rutgers.edu</email>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lihong</forename><surname>Li</surname></persName>
							<email>lihong@cs.rutgers.edu</email>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Eric</forename><surname>Wiewiora</surname></persName>
							<email>ewiewior@cs.ucsd.edu</email>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">John</forename><surname>Langford</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><forename type="middle">L</forename><surname>Littman</surname></persName>
							<email>mlittman@cs.rutgers.edu</email>
						</author>
						<author>
							<affiliation key="aff0">
								<orgName type="department" key="dep1">Department of Computer Science</orgName>
								<orgName type="department" key="dep2">Computer Science and Engineering Department</orgName>
								<orgName type="institution">Rutgers University</orgName>
								<address>
									<postCode>08854</postCode>
									<settlement>Piscataway</settlement>
									<region>NJ</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff1">
								<orgName type="institution">University of California</orgName>
								<address>
									<settlement>San Diego</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff2">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">TTI-Chicago</orgName>
								<address>
									<addrLine>1427 E 60th Street</addrLine>
									<postCode>60637</postCode>
									<settlement>Chicago</settlement>
									<region>IL</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff3">
								<orgName type="institution">Rutgers University</orgName>
								<address>
									<postCode>08854</postCode>
									<settlement>Piscataway</settlement>
									<region>NJ</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">PAC Model-Free Reinforcement Learning</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>For a Markov Decision Process with finite state (size S) and action spaces (size A per state), we propose a new algorithm-Delayed Q-Learning. We prove it is PAC, achieving near optimal performance except for˜Ofor˜ for˜O(SA) timesteps using O(SA) space, improving on the˜Othe˜ the˜O(S 2 A) bounds of best previous algorithms. This result proves efficient reinforcement learning is possible without learning a model of the MDP from experience. Learning takes place from a single continuous thread of experience-no resets nor parallel sampling is used. Beyond its smaller storage and experience requirements, Delayed Q-learning&apos;s per-experience computation cost is much less than that of previous PAC algorithms.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">Introduction</head><p>In the reinforcement-learning (RL) problem <ref type="bibr" target="#b8">(Sutton &amp; Barto, 1998)</ref>, an agent acts in an unknown or incompletely known environment with the goal of maximizing an external reward signal. One of the fundamental obstacles in RL is the exploration-exploitation dilemma: whether to act to gain new information (explore) or to act consistently with past experience to maximize reward (exploit). This paper models the RL problem as a Markov Decision Process (MDP) environment with finite state and action spaces. When evaluating RL algorithms, there are three essential traits to consider: space complexity, computational complexity, and sample complexity. We define a timestep to be a single interaction with the environment. Space complexity measures the amount of memory required to implement the algorithm while computational complexity measures the amount of operations needed to execute the algorithm, per timestep. Sample complexity measures the amount of timesteps for which the algorithm does not behave near optimally or, in other words, the amount of experience it takes to learn to behave well.</p><p>We will call algorithms whose sample complexity can be bounded by a polynomial in the environment size and approximation parameters, with high probability, PAC-MDP (Probably Approximately Correct in Markov Decision Processes). All algorithms known to be PAC-MDP to date involve the maintenance and solution (often by value iteration or mathematical programming) of an internal MDP model. Such algorithms, including R max <ref type="bibr" target="#b1">(Brafman &amp; Tennenholtz, 2002</ref>), E 3 ( <ref type="bibr" target="#b6">Kearns &amp; Singh, 2002)</ref>, and MBIE <ref type="bibr" target="#b7">(Strehl &amp; Littman, 2005</ref>), are called model-based algorithms and have relatively high space and computational complexities. Another class of algorithms, including most forms of Q-learning <ref type="bibr" target="#b9">(Watkins &amp; Dayan, 1992)</ref>, make no effort to learn a model and can be called model free.</p><p>It is difficult to articulate a hard and fast rule dividing model-free and model-based algorithms, but model-based algorithms generally retain some transition information during learning whereas model-free algorithms only keep value-function information. Instead of formalizing this intuition, we have decided to adopt a crisp, if somewhat unintuitive, definition. For our purposes, a model-free RL algorithm is one whose space complexity is asymptotically less than the space required to store an MDP.</p><p>Definition 1 A learning algorithm is said to be model free if its space complexity is always o(S 2 A), where S is the number of states and A is the number of actions of the MDP used for learning.</p><p>Although they tend to have low space and computational complexity, no model-free algorithm has been proven to be PAC-MDP. In this paper, we present a new model-free algorithm, Delayed Q-learning, and prove it is the first such algorithm.</p><p>The hardness of learning an arbitrary MDP as measured by sample complexity is still relatively unexplored. For simplicity, we let˜Olet˜ let˜O(·) ( ˜ Ω(·)) represent O(·) (Ω(·)) where logarithmic factors are ignored. When we consider only the dependence on S and A, the lower bound of <ref type="bibr" target="#b4">Kakade (2003)</ref> says that with probability greater than 1 − δ, the sample complexity of any algorithm will be˜Ωbe˜ be˜Ω(SA). However, the best upper bound known provides an algorithm whose sample complexity is˜Ois˜ is˜O(S 2 A) with probability at least 1 − δ. In other words, there are algorithms whose sample complexity is known to be no greater than approximately the number of bits required to specify an MDP to fixed precision. However, there has been no argument proving that learning to act near-optimally takes as long as approximating the dynamics of an MDP. We solve this open problem, first posed by <ref type="bibr" target="#b4">Kakade (2003)</ref>, by showing that Delayed Q-learning has sample complexity˜Oity˜ ity˜O(SA), with high probability. Our result therefore proves that efficient RL is possible without learning a model of the environment from experience.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">Definitions and Notation</head><p>This section introduces the Markov Decision Process notation used throughout the paper; see <ref type="bibr" target="#b8">Sutton and Barto (1998)</ref> for an introduction. An MDP M is a five tuple S, A, T, R, γ, where S is the state space, A is the action space, T : S × A × S → R is a transition function, R : S × A → R is a reward function, and 0 ≤ γ &lt; 1 is a discount factor on the summed sequence of rewards. We also let S and A denote the number of states and the number of actions, respectively. From state s under action a, the agent receives a random reward r, which has expectation R(s, a), and is transported to state s with probability T (s |s, a). A policy is a strategy for choosing actions. Only deterministic policies are dealt with in this paper. A stationary policy is one that produces an action based on only the current state. We assume that rewards all lie between 0 and 1. For any policy π, let V π M (s) (Q π M (s, a)) denote the discounted, infinite-horizon value (action-value or Q-value) function for π in M (which may be omitted from the notation) from state s. If T is a positive integer, let V π M (s, T ) denote the T -step value function of policy π. Specifically,</p><formula xml:id="formula_0">V π M (s) = E[ ∞ j=1 γ j−1 r j ] and V π M (s, T ) = E[ T j=1 γ j−1 r j ] where [r 1 , r 2 , . . .]</formula><p>is the reward sequence generated by following policy π from state s. These expectations are taken over all possible infinite paths the agent might follow. The optimal policy is denoted π * and has value functions V * M (s) and Q * M (s, a). Note that a policy cannot have a value greater than 1/(1 − γ) in any state.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">Learning Efficiently</head><p>In our discussion, we assume that the learner receives S, A, , δ, and γ as input. The learning problem is defined as follows. The agent always occupies a single state s of the MDP M . The learning algorithm is told this state and must select an action a. The agent receives a reward r and is then transported to another state s according to the rules from Section 2. This procedure then repeats forever. The first state occupied by the agent may be chosen arbitrarily.</p><p>There has been much discussion in the RL community over what defines efficient learning or how to define sample complexity. For any fixed , Kakade (2003) defines the sample complexity of exploration (sample complexity, for short) of an algorithm A to be the number of timesteps t such that the non-stationary policy at time t, A t , is not -optimal from the current state 1 , s t at time t (formally V At (s t ) &lt; V * (s t ) − ). We believe this definition captures the essence of measuring learning. An algorithm A is then said to be PAC-MDP (Probably Approximately Correct in Markov Decision Processes) if, for any and δ, the sample complexity of A is less than some polynomial in the relevant quantities (S, A, 1//, 1/δ, 1/(1 − γ)), with probability at least 1 − δ.</p><p>The above definition penalizes the learner for executing a non--optimal policy rather than for a nonoptimal policy. Keep in mind that, with only a finite amount of experience, no algorithm can identify the optimal policy with complete confidence. In addition, due to noise, any algorithm may be misled about the underlying dynamics of the system. Thus, a failure probability of at most δ is allowed. See <ref type="bibr" target="#b4">Kakade (2003)</ref> for a full motivation of this performance measure.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">Delayed Q-learning</head><p>In this section we describe a new reinforcementlearning algorithm, Delayed Q-learning.</p><p>Delayed Q-learning maintains Q-value estimates, Q(s, a) for each state-action pair (s, a). At time t(= 1, 2, . . .), let Q t (s, a) denote the algorithm's current Q-value estimate for (s, a) and let V t (s) denote max a∈A Q t (s, a). The learner always acts greedily with respect to its estimates, meaning that if s is the tth state reached, a := argmax a∈A Q t (s, a) is the next action chosen.</p><p>In addition to Q-value estimates, the algorithm maintains a Boolean flag LEARN(s, a), for each (s, a). Let LEARN t (s, a) denote the value of LEARN(s, a) at time t, that is, the value immediately before the tth action is taken. The flag indicates whether the learner is considering a modification to its Q-value estimate Q(s, a). The algorithm also relies on two free parameters, 1 ∈ (0, 1) and a positive integer m. In the analysis of Section 5, we provide precise values for these parameters in terms of the other inputs (S, A, , δ, and γ) that guarantee the resulting algorithm is PAC-MDP. Finally, a counter l(s, a) (l t (s, a) at time t) is also maintained for each (s, a). Its value represents the amount of data (sample points) acquired for use in an upcoming update of Q(s, a). Once m samples are obtained and LEARN(s, a) is true, an update is attempted.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1.">Initialization of the Algorithm</head><p>The Q-value estimates are initialized to 1/(1 − γ), the counters l(s, a) to zero, and the LEARN flags to true. That is, Q 1 (s, a) = 1/(1 − γ), l 1 (s, a) = 0, and</p><formula xml:id="formula_1">LEARN 1 (s, a) = true for all (s, a) ∈ S × A.</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2.">The Update Rule</head><p>Suppose that at time t ≥ 1, action a is performed from state s, resulting in an attempted update, according to the rules to be defined in Section 4.3. Let s k1 , s k2 , . . . , s km be the m most recent next-states observed from executing (s, a), at times k 1 &lt; k 2 &lt; · · · &lt; k m , respectively (k m = t). For the remainder of the paper, we also let r i denote the ith reward received during execution of Delayed Q-learning. Thus, at time k i , action a was taken from state s, resulting in a transition to state s ki and an immediate reward r ki . After the tth action, the following update occurs:</p><formula xml:id="formula_2">Q t+1 (s, a) = 1 m m i=1 (r ki + γV ki (s ki )) + 1 (1)</formula><p>as long as performing the update would result in a new Q-value estimate that is at least 1 smaller than the previous estimate. In other words, the following equation must be satisfied for an update to occur:</p><formula xml:id="formula_3">Q t (s, a) − 1 m m i=1 (r ki + γV ki (s ki )) ≥ 2 1 . (2)</formula><p>If any of the above conditions do not hold, then no update is performed. In this case, Q t+1 (s, a) = Q t (s, a).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3.">Maintenance of the LEARN Flags</head><p>We provide an intuition behind the behavior of the LEARN flags. Please see Section 4.4 for a formal description of the update rules. The main computation of the algorithm is that every time a state-action pair (s, a) is experienced m times, an update of Q(s, a) is attempted as in Section 4.2. For our analysis to hold, however, we cannot allow an infinite number of attempted updates. Therefore, attempted updates are only allowed for (s, a) when LEARN(s, a) is true. Besides being set to true initially, LEARN(s, a) is also set to true when any state-action pair is updated (because our estimate Q(s, a) may need to reflect this change). LEARN(s, a) can only change from true to false when no updates are made during a length of time for which (s, a) is experienced m times and the next attempted update of (s, a) fails. In this case, no more attempted updates of (s, a) are allowed until another Q-value estimate is updated.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4.">Implementation of Delayed Q-learning</head><p>We provide an efficient implementation, Algorithm 1, of Delayed Q-learning that achieves our desired computational and space complexities.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.5.">Discussion</head><p>Delayed Q-learning is similar in many aspects to traditional Q-learning. Suppose that at time t, action a is taken from state s resulting in reward r t and nextstate s . Then, the Q-learning update is</p><formula xml:id="formula_4">Q t+1 (s, a) = (1 − α t )Q t (s, a) + α t (r t + γV t (s )) (3)</formula><p>where α t ∈ [0, 1] is the learning rate. Note that if we let α t = 1/(l t (s, a) + 1), then m repetitions of Equation 3 is similar to the update for Delayed Qlearning (Equation 1) minus a small bonus of 1 . However, Q-learning changes its Q-value estimates on every timestep, while Delayed Q-learning waits for m sample updates to make any changes. This variation has an averaging effect that mitigates some of the effects of randomness and, when combined with the bonus of Let s denote the state at time t.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>11:</head><p>Choose action a := argmax a ∈A Q(s, a ).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>12:</head><p>Let r be the immediate reward and s the next state after executing action a from state s.  The property of optimism is useful for safe exploration and appears in many existing RL algorithms. The intuition is that if an action's Q-value is overly optimistic the agent will learn much by executing that action. Since the action-selection strategy is greedy, the Delayed Q-learning agent will tend to choose overly optimistic actions, therefore achieving directed exploration when necessary. If sufficient learning has been completed and all Q-values are close to their true Q * -values, selecting the maximum will guarantee nearoptimal behavior. In the next section, we provide a formal argument that Delayed Q-learning exhibits sufficient exploration for learning, specifically that it is PAC-MDP.</p><formula xml:id="formula_5">U (s, a) ← U (s, a) + r + γ max a Q(s , a ) 15: l(s, a) ← l(s, a) + 1 16: if l(s, a) = m then 17: if Q(s, a) − U (s, a)/m ≥ 2 1 then 18: Q(s, a) ← U (s, a)/m + 1 19: t * ← t 20: else if t(s, a) ≥ t * then 21: LEARN (s, a) ← false 22: end if 23: t(s, a) ← t, U (s, a) ← 0, l(s, a) ←</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">Analysis</head><p>We briefly address space and computational complexity before focusing on analyzing the sample complexity of Delayed Q-learning.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1.">Space and Computational Complexity</head><p>An implementation of Delayed Q-learning, as in Section 4.4, can be achieved with O(SA) space complexity 2 . With use of a priority queue for choosing actions with maximum value, the algorithm can achieve O(ln A) computational complexity per timestep. Asymptotically, Delayed Q-learning's computational and space complexity are on par with those of Q-learning. In contrast, the R max algorithm, a standard modelbased method, has worst-case space complexity of Θ(S 2 A) and computational complexity of Ω(S 2 A) per experience.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2.">Sample Complexity</head><p>The main result of this section, whose proof is provided in Section 5.2.1, is that the Delayed Q-learning algorithm is PAC-MDP: To analyze the sample complexity of Delayed Qlearning, we first bound the number of successful updates. By Condition 2, there can be no more than</p><formula xml:id="formula_6">κ := 1 (1 − γ) 1<label>(4)</label></formula><p>successful updates of a fixed state-action pair (s, a). This bound follows from the fact that Q(s, a) is initialized to 1/(1 − γ) and that every successful update of Q(s, a) results in a decrease of at least 1 . Also, by our assumption of non-negative rewards, it is impossible for any update to result in a negative Q-value estimate. Thus, the total number of successful updates is at most SAκ.</p><p>Now, consider the number of attempted updates for a single state-action pair (s, a). At the beginning of learning, LEARN(s, a) = true, which means that once (s, a) has been experienced m times, an attempted update will occur. After that, a successful update of some <ref type="bibr">2</ref> We measure complexity assuming individual numbers require unit storage and can be manipulated arithmetically in unit time. Removing this assumption increases space and computational complexities by logarithmic factors.</p><p>Q-value estimate must take place for LEARN(s, a) to be set to true. Therefore, there can be at most 1 + SAκ attempted updates of (s, a). Hence, there are at most</p><formula xml:id="formula_7">SA(1 + SAκ)<label>(5)</label></formula><p>total attempted updates.</p><p>During timestep t of learning, we define K t to be the set of all state-action pairs (s, a) such that:</p><formula xml:id="formula_8">Q t (s, a) − R(s, a) + γ s T (s |s, a)V t (s ) ≤ 3 1 .</formula><p>(6) Observe that K t is defined by the true transition and reward functions T and R, and therefore cannot be known to the learner. Now, consider the following statement:</p><p>Assumption A1 Suppose an attempted update of state-action pair (s,a) occurs at time t, and that the m most recent experiences of (s, a) happened at times k 1 &lt; k 2 &lt; · · · &lt; k m = t. If (s, a) ∈ K k1 then the attempted update will be successful.</p><p>During any given infinite-length execution of Delayed Q-learning, the statement (A1) may be true (all attempted updates with (s, a) ∈ K k1 are successful) or it may be broken (some unsuccessful update may occur when (s, a) ∈ K k1 ). When (s, a) ∈ K k1 , as above, our value function estimate Q(s, a) is very inconsistent with our other value function estimates. Thus, we would expect our next attempted update to succeed. The next lemma shows this intuition is valid. Specifically, with probability at least 1 − δ/3, A1 will be true. We are now ready to specify a value for m:</p><formula xml:id="formula_9">m := ln (3SA(1 + SAκ)/δ) 2 1 2 (1 − γ) 2 .<label>(7)</label></formula><p>Lemma 1 The probability that A1 is violated during execution of Delayed Q-learning is at most δ/3.</p><p>Proof sketch: Fix any timestep k 1 (and the complete history of the agent up to k 1 ) satisfying: (s, a) ∈ K k1 is to be experienced by the agent on timestep k 1 and if (s, a) is experienced m − 1 more times after timestep k 1 , then an attempted update will result. Let</p><formula xml:id="formula_10">Q = [(s[1], r[1]), . . . , (s[m], r[m])] ∈ (S × R)</formula><p>m be any sequence of m next-state and immediate reward tuples. Due to the Markov assumption, whenever the agent is in state s and chooses action a, the resulting next-state and immediate reward are chosen independently of the history of the agent. Thus, the probability that (s, a) is experienced m − 1 more times and that the resulting next-state and immediate reward sequence equals Q is at most the probability that Q is obtained by m independent draws from the transition and reward distributions (for (s, a)). Therefore, it suffices to prove this lemma by showing that the probability that a random sequence Q could cause an unsuccessful update of (s, a) is at most δ/3. We prove this statement next.</p><p>Suppose that m rewards, r <ref type="bibr">[1]</ref>, . . . , r <ref type="bibr">[m]</ref>, and m next states, s <ref type="bibr">[1]</ref>, . . . , s <ref type="bibr">[m]</ref>, are drawn independently from the reward and transition distributions, respectively, for (s, a).</p><p>By a straightforward application of the Hoeffding bound (with random variables</p><formula xml:id="formula_11">X i := r[i] + γV k1 (s[i])), it can be shown that our choice of m guaran- tees that (1/m) m i=1 (r[i] + γV k1 (s[i])) − E[X 1 ] &lt; 1 holds with probability at least 1 − δ/(3SA(1 + SAκ)).</formula><p>If it does hold and an attempted update is performed for (s, a) using these m samples, then the resulting update will succeed. To see the claim's validity, suppose that (s, a) is experienced at times k 1 &lt; k 2 &lt; · · · &lt; k m = t and at time k i the agent is transitioned to state s[i] and receives reward r <ref type="bibr">[i]</ref> (causing an attempted update at time t). Then, we have that</p><formula xml:id="formula_12">Q t (s, a) − 1 m m i=1 (r[i] + γV ki (s[i])) &gt; Q t (s, a) − E[X 1 ] − 1 &gt; 2 1 .</formula><p>We have used the fact that V ki (s ) ≤ V k1 (s ) for all s and i = 1, . . . , m. Therefore, with high probability, Condition 2 will be satisfied and the attempted update of Q(s, a) at time k m will succeed.</p><p>Finally, we extend our argument, using the union bound, to all possible timesteps k 1 satisfying the condition above. The number of such timesteps is bounded by the same bound we showed for the number of attempted updates (SA(1 + SAκ)). 2</p><p>The next lemma states that, with high probability, Delayed Q-learning will maintain optimistic Q-values.</p><p>Lemma 2 During execution of Delayed Q-learning, Q t (s, a) ≥ Q * (s, a) holds for all timesteps t and stateaction pairs (s, a), with probability at least 1 − δ/3.</p><p>Proof sketch: It can be shown, by a similar argument as in the proof of Lemma 1, that</p><formula xml:id="formula_13">(1/m) m i=1 (r ki + γV * (s ki )) &gt; Q * (s, a) − 1</formula><p>holds, for all attempted updates, with probability at least 1 − δ/3. Assuming this equation does hold, the proof is by induction on the timestep t. For the base case, note that Q 1 (s, a) = 1/(1 − γ) ≥ Q * (s, a) for all (s, a). Now, suppose the claim holds for all timesteps less than or equal to t. Thus, we have that Q t (s, a) ≥ Q * (s, a), and V t (s) ≥ V * (s) for all (s, a). Suppose s is the tth state reached and a is the action taken at time t. If it doesn't result in an attempted update or it results in an unsuccessful update, then no Q-value estimates change, and we are done. Otherwise, by Equation 1, we have that <ref type="figure">, a)</ref>, by the induction hypothesis and an application of the equation from above. 2</p><formula xml:id="formula_14">Q t+1 (s, a) = (1/m) m i=1 (r ki + γV ki (s ki )) + 1 ≥ (1/m) m i=1 (r ki + γV * (s ki )) + 1 ≥ Q * (s</formula><p>Lemma 3 If Assumption A1 holds, then the following statement holds: If an unsuccessful update occurs at time t and LEARN t+1 (s, a) = false, then (s, a) ∈ K t+1 .</p><p>Proof: Suppose an attempted update of (s, a) occurs at time t. Let s k1 , s k2 , . . . , s km be the m most recent next-states resulting from executing action a from state s at times k 1 &lt; k 2 &lt; · · · &lt; k m = t, respectively. By A1, if (s, a) ∈ K k1 , then the update will be successful. Now, suppose that (s, a) ∈ K k1 but that (s, a) ∈ K ki for some i ∈ {2, . . . , m}. In this case, the attempted update at time k m may be unsuccessful. However, some Q-value estimate was successfully updated between time k 1 and time k m (otherwise K k1 would equal K k1 ). Thus, by the rules of Section 4.3, LEARN(s, a) will be set to true after this unsuccessful update <ref type="figure" target="#fig_3">(LEARN t+1 (s, a)</ref> will be true). 2</p><p>The following lemma bounds the number of timesteps t in which a state-action pair (s, a) ∈ K t is experienced.</p><p>Lemma 4 The number of timesteps t such that a state-action pair (s, a) ∈ K t is experienced is at most 2mSAκ.</p><p>Proof: Suppose (s, a) ∈ K t is experienced at time t and LEARN t (s, a) = false (implying the last attempted update was unsuccessful). By Lemma 3, we have that (s, a) ∈ K t +1 where t was the time of the last attempted update of (s, a). Thus, some successful update has occurred since time t + 1. By the rules of Section 4.3, we have that LEARN(s, a) will be set to true and by A1, the next attempted update will succeed. Now, suppose that (s, a) ∈ K t is experienced at time t and LEARN t (s, a) = true. Within at most m more experiences of (s, a), an attempted update of (s, a) will occur. Suppose this attempted update takes place at time q and that the m most recent experiences of (s, a) happened at times k 1 &lt; k 2 &lt; · · · &lt; k m = q. By A1, if (s, a) ∈ K k1 , the update will be successful. Otherwise, if (s, a) ∈ K k1 , then some successful update must have occurred between times k 1 and t (since K k1 = K t ). Hence, even if the update is unsuccessful <ref type="figure">, LEARN(s, a)</ref> will remain true, (s, a) ∈ K q+1 will hold, and the next attempted update of (s, a) will be successful.</p><p>In either case, if (s, a) ∈ K t , then within at most 2m more experiences of (s, a), a successful update of Q(s, a) will occur. Thus, reaching a state-action pair not in K t at time t will happen at most 2mSAκ times. 2</p><p>We will make use of the following lemma from <ref type="bibr" target="#b7">Strehl and Littman (2005)</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Lemma 5 (Generalized Induced Inequality) Let</head><p>M be an MDP, K a set of state-action pairs, M an MDP equal to M on K (identical transition and reward functions), π a policy, and T some positive integer. Let A M be the event that a state-action pair not in K is encountered in a trial generated by starting from state s and following π for T timesteps in M . Then,</p><formula xml:id="formula_15">V π M (s, T ) ≥ V π M (s, T ) − Pr(A M )/(1 − γ).</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2.1.">Proof of the Main Result</head><p>Proof of Theorem 1: Suppose Delayed Q-learning is run on MDP M . We assume that A1 holds and that Q t (s, a) ≥ Q * (s, a) holds for all timesteps t and state-action pairs (s, a). The probability that either one of these assumptions is broken is at most 2δ/3, by Lemmas 1 and 2.</p><p>Consider timestep t during learning. Let A t be the non-stationary policy being executed by the learning algorithm. Let π t be the current greedy policy, that is, for all states s, π t (s) = argmax a Q t (s, a). Let s t be the current state, occupied by the agent at time t. We define a new MDP, M . This MDP is equal to M on K t (identical transition and reward functions). For (s, a) ∈ K t , we add a distinguished state S s,a to the state space of M and a transition of probability one to that state from s when taking action a. Furthermore, S s,a self-loops on all actions with re- <ref type="table">Lemma 2</ref> of <ref type="bibr" target="#b6">Kearns and Singh (2002)</ref>). Let Pr(A M ) denote the probability of reaching a state-action pair (s, a) not in K t , while executing policy A t from state s t in M for T timesteps. Let Pr(U ) denote the probability of the algorithm performing a successful update on some state-action pair (s, a), while executing policy A t from state s t in M for T timesteps. We have that</p><formula xml:id="formula_16">ward [Q t (s, a) − R(s, a)](1 − γ)/γ (so that V π M (S s,a ) = [Q t (s, a)−R(s, a)]/γ and Q π M (s, a) = Q t (s, a), for any policy π). Let T = O( 1 1−γ ln 1 2(1−γ) ) be large enough so that |V πt M (s t , T ) − V πt M (s t )| ≤ 2 (see</formula><formula xml:id="formula_17">V At M (s t , T ) ≥ V At M (s t , T ) − Pr(A M )/(1 − γ) ≥ V πt M (s t , T ) − Pr(A M )/(1 − γ) − Pr(U )/(1 − γ) ≥ V πt M (s t ) − 2 − (Pr(A M ) + Pr(U ))/(1 − γ).</formula><p>The first step above follows from Lemma 5 3 . The second step follows from the fact that A t behaves identically to π t as long as no Q-value estimate updates are performed. The third step follows from the definition of T above. Now, consider two mutually exclusive cases. First, suppose that Pr(A M ) + Pr(U ) ≥ 2 (1 − γ), meaning that an agent following A t will either perform a successful update in T timesteps, or encounter some (s, a) ∈ K t in T timesteps with probability at</p><formula xml:id="formula_18">least 2 (1 − γ)/2 (since Pr(A M or U ) ≥ (Pr(A M ) + Pr(U ))/2).</formula><p>The former event cannot happen more than SAκ times. By assumption, the latter event will happen no more than 2mSAκ times (see Lemma 4). Define ζ = (2m + 1)SAκ. Using the Hoeffding bound, after O( ζT 2(1−γ) ln 1/δ) timesteps where Pr(A M ) + Pr(U ) ≥ 2 (1 − γ), every state-action pair will have been updated 1/( 1 (1 − γ)) times, with probability at least 1 − δ/3, and no futher updates will be possible. This fact implies that the number of timesteps t such that Pr(A M ) + Pr(U ) ≥ 2 (1 − γ) is bounded by O( ζT 2(1−γ) ln 1/δ), with high probability. Next, suppose that Pr(A M ) + Pr(U ) &lt; 2 (1 − γ). We claim that the following holds for all states s:</p><formula xml:id="formula_19">0 &lt; V t (s) − V πt M (s) ≤ 3 1 1 − γ .<label>(8)</label></formula><p>Recall that for all (s, a),</p><formula xml:id="formula_20">either Q t (s, a) = Q πt M (s, a) (when (s, a) ∈ K t ), or Q t (s, a) − (R(s, a) + γ s T (s |s, a)V t (s )) ≤ 3 1 (when (s, a) ∈ K t ). Note that V πt</formula><p>M is the solution to the following set of equations:</p><formula xml:id="formula_21">V πt M (s) = R(s, π t (s)) + γ s ∈S T (s |s, π t (s))V πt M (s ), if (s, π t (s)) ∈ K, V πt M (s) = Q t (s, π t (s)), if (s, π t (s)) ∈ K.</formula><p>The vector V t is the solution to a similar set of equations except with some additional positive reward terms, each bounded by 3 1 . Using these facts, we have that</p><formula xml:id="formula_22">V At M (s t ) ≥ V At M (s t , T ) ≥ V πt M (s t , T ) − 2 − (Pr(A M ) + Pr(U ))/(1 − γ) ≥ V πt M (s t ) − 2 − 2 ≥ V t (s t ) − 3 1 /(1 − γ) − 2 2 ≥ V * (s t ) − 3 1 /(1 − γ) − 2 2 .</formula><p>The third step follows from the fact that Pr(A M ) + Pr(U ) &lt; 2 (1 − γ) and the fourth step from Equation 8. The last step made use of our assumption that V t (s t ) ≥ V * (s t ) always holds.</p><p>Finally, by setting 1 := (1 − γ)/9 and 2 := /3, we have that</p><formula xml:id="formula_23">V πt At (s t , T ) ≥ V * (s t ) − is true for all but O( ζT 2(1−γ) ln 1/δ) = O SA 4 (1 − γ) 8 ln 1 δ ln 1 (1 − γ) ln SA δ(1 − γ)</formula><p>timesteps, with probability at least 1−δ. We guarantee a failure probability of at most δ by bounding the three sources of failure: from Lemmas 1, 2, and from the above application of Hoeffding's bound. Each of these will fail with probability at most δ/3. 2</p><p>Ignoring log factors, the best sample complexity bound previously proven has been</p><formula xml:id="formula_24">˜ O S 2 A 3 (1 − γ) 3</formula><p>for the R max algorithm as analyzed by <ref type="bibr" target="#b4">Kakade (2003)</ref>. Using the notation of Kakade <ref type="formula">(2003)</ref> 4 , our bound of Theorem 1 reduces to</p><formula xml:id="formula_25">˜ O SA 4 (1 − γ) 4 .</formula><p>It is clear that there is no strict improvement of the bounds, since a factor of S is being traded for one of 1/((1 − γ)). Nonetheless, to the extent that the dependence on S and A is of primary importance, this tradeoff is a net improvement. We also note that the best lower bound known for the problem, due to <ref type="bibr" target="#b4">Kakade (2003)</ref>, is˜Ωis˜ is˜Ω (SA/((1 − γ))).</p><p>Our analysis of Delayed Q-learning required that γ be less than 1. The analyses of <ref type="bibr" target="#b4">Kakade (2003)</ref> and <ref type="bibr" target="#b6">Kearns and Singh (2002)</ref>, among others, also considered the case of γ = 1. Here, instead of evaluating a policy with respect to the infinite horizon, only the next H actionchoices of the agent contribute to the value function. See Kakade (2003) for a discussion of how to evaluate hard horizon policies in an online exploration setting. For completeness, we also analyzed a version of Delayed Q-learning that works in this setting. We find that the agent will follow an -optimal policy for horizon H on all but˜Obut˜ but˜O(SAH 5 // 4 ) timesteps, with probability at least 1 − δ. In terms of the dependence on the number of states (S), this bound is an improvement (from quadratic to linear) over previous bounds.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.">Related Work</head><p>There has been a great deal of theoretical work analyzing RL algorithms. Early results include proving that under certain conditions various algorithms can, in the limit, compute the optimal value function from which the optimal policy can be extracted <ref type="bibr" target="#b9">(Watkins &amp; Dayan, 1992)</ref>. These convergence results make no performance guarantee after only a finite amount of experience. Even-Dar and Mansour (2003) studied the convergence rate of Q-learning. They showed that, under a certain assumption, Q-learning converges to a near-optimal value function in a polynomial number of timesteps. The result requires input of an exploration policy that, with high probability, tries every stateaction pair every L timesteps (for some polynomial L). Such a policy may be hard to find in some MDPs and is impossible in others. The work by <ref type="bibr" target="#b3">Fiechter (1994)</ref> proves that efficient learning (PAC) is achievable, via a model-based algorithm, when the agent has an action that resets it to a distinguished start state.</p><p>Other recent work has shown that various model-based algorithms, including E 3 <ref type="bibr" target="#b6">(Kearns &amp; Singh, 2002</ref>), R max <ref type="bibr" target="#b1">(Brafman &amp; Tennenholtz, 2002)</ref>, and MBIE <ref type="bibr" target="#b7">(Strehl &amp; Littman, 2005</ref>), are PAC-MDP. The bound from Theorem 1 improves upon those bounds when only the dependence of S and A is considered. Delayed Q-learning is also significantly more computationally efficient than these algorithms.</p><p>Delayed Q-learning can be viewed as an approximation of the real-time dynamic programming algorithm ( <ref type="bibr" target="#b0">Barto et al., 1995)</ref>, with an added exploration bonus (of 1 ). The algorithm and its analysis are also similar to phased Q-learning and its analysis <ref type="bibr" target="#b5">(Kearns &amp; Singh, 1999</ref>). In both of the above works, exploration is not completely dealt with. In the former, the transition matrix is given as input to the agent. In the latter, an idealized exploration policy, one that samples every state-action pair simultaneously, is assumed to be provided to the agent.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.">Conclusion</head><p>We presented Delayed Q-learning, a provably efficient model-free reinforcement-learning algorithm. Its analysis solves an important open problem in the community. Future work includes closing the gap between the upper and lower bounds on PAC-MDP learning (see Section 5.2.1). More important is how to extend the results, using generalization, to richer world models with an infinite number of states and actions.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head></head><label></label><figDesc>Appearing in Proceedings of the 23 rd International Con- ference on Machine Learning, Pittsburgh, PA, 2006. Copy- right 2006 by the author(s)/owner(s).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>/</head><label></label><figDesc>/ time of last attempted update 6: LEARN (s, a) ← true // the LEARN flags 7: end for 8: t * ← 0 // time of most recent Q-value change 9: for t = 1, 2, 3, · · · do 10:</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Theorem 1</head><label>1</label><figDesc>Let M be any MDP and let and δ be two positive real numbers. If Delayed Q-learning is executed on MDP M , then it will follow an -optimal policy on all but O SA (1−γ) 8 4 ln 1 δ ln 1 (1−γ) ln SA δ(1−γ) timesteps, with probability at least 1 − δ.</figDesc></figure>

			<note place="foot" n="1"> Note that At is completely defined by A and the agent&apos;s history up to time t.</note>

			<note place="foot" n="1"> , achieves optimism (Q(s, a) ≥ Q * (s, a)) with high probability (see Lemma 2).</note>

			<note place="foot" n="3"> Lemma 5 is valid for all policies, including nonstationary ones.</note>

			<note place="foot" n="4"> The use of normalized value functions reduces the dependence on 1/(1 − γ).</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgments</head><p>Thanks to the National Science Foundation (IIS-0325281). We also thank Yishay Mansour, Sham M. Kakade, Satinder Singh, and our anonymous reviewers for suggestions. Eric Wiewiora contributed to this research as an intern at TTI-Chicago.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Learning to act using real-time dynamic programming</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">G</forename><surname>Barto</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">J</forename><surname>Bradtke</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">P</forename><surname>Singh</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Artificial Intelligence</title>
		<imprint>
			<biblScope unit="volume">72</biblScope>
			<biblScope unit="page" from="81" to="138" />
			<date type="published" when="1995" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">R-MAX-a general polynomial time algorithm for near-optimal reinforcement learning</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">I</forename><surname>Brafman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Tennenholtz</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Machine Learning Research</title>
		<imprint>
			<biblScope unit="volume">3</biblScope>
			<biblScope unit="page" from="213" to="231" />
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Learning rates for Q-learning</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Even-Dar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Mansour</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Machine Learning Research</title>
		<imprint>
			<biblScope unit="volume">5</biblScope>
			<biblScope unit="page" from="1" to="25" />
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Efficient reinforcement learning</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C.-N</forename><surname>Fiechter</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Seventh Annual ACM Conference on Computational Learning Theory</title>
		<meeting>the Seventh Annual ACM Conference on Computational Learning Theory</meeting>
		<imprint>
			<date type="published" when="1994" />
			<biblScope unit="page" from="88" to="97" />
		</imprint>
	</monogr>
	<note>Association of Computing Machinery</note>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title level="m" type="main">On the sample complexity of reinforcement learning. Doctoral dissertation, Gatsby Computational Neuroscience Unit</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">M</forename><surname>Kakade</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2003" />
		</imprint>
		<respStmt>
			<orgName>University College London</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Finite-sample convergence rates for Q-learning and indirect algorithms</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Kearns</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Singh</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Advances in Neural Information Processing Systems</title>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="page" from="996" to="1002" />
			<date type="published" when="1999" />
			<publisher>The MIT Press</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Near-optimal reinforcement learning in polynomial time</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">J</forename><surname>Kearns</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">P</forename><surname>Singh</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Machine Learning</title>
		<imprint>
			<biblScope unit="volume">49</biblScope>
			<biblScope unit="page" from="209" to="232" />
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">A theoretical analysis of model-based interval estimation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">L</forename><surname>Strehl</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">L</forename><surname>Littman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Twenty-second International Conference on Machine Learning (ICML-05)</title>
		<meeting>the Twenty-second International Conference on Machine Learning (ICML-05)</meeting>
		<imprint>
			<date type="published" when="2005" />
			<biblScope unit="page" from="857" to="864" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title level="m" type="main">Reinforcement learning: An introduction</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">S</forename><surname>Sutton</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">G</forename><surname>Barto</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1998" />
			<publisher>The MIT Press</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">J C H</forename><surname>Watkins</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Dayan</surname></persName>
		</author>
		<title level="m">Machine Learning</title>
		<imprint>
			<date type="published" when="1992" />
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="page" from="279" to="292" />
		</imprint>
	</monogr>
<note type="report_type">Q-learning</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
