<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2019-03-26T17:08+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Hydra: Automatically Configuring Algorithms for Portfolio-Based Selection</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lin</forename><surname>Xu</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">University of British Columbia</orgName>
								<address>
									<addrLine>2366 Main Mall</addrLine>
									<postCode>V6T 1Z4</postCode>
									<settlement>Vancouver</settlement>
									<region>B.C</region>
									<country key="CA">Canada</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Holger</forename><forename type="middle">H</forename><surname>Hoos</surname></persName>
							<email>hoos@cs.ubc.ca</email>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">University of British Columbia</orgName>
								<address>
									<addrLine>2366 Main Mall</addrLine>
									<postCode>V6T 1Z4</postCode>
									<settlement>Vancouver</settlement>
									<region>B.C</region>
									<country key="CA">Canada</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kevin</forename><surname>Leyton-Brown</surname></persName>
							<email>kevinlb@cs.ubc.ca</email>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">University of British Columbia</orgName>
								<address>
									<addrLine>2366 Main Mall</addrLine>
									<postCode>V6T 1Z4</postCode>
									<settlement>Vancouver</settlement>
									<region>B.C</region>
									<country key="CA">Canada</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Hydra: Automatically Configuring Algorithms for Portfolio-Based Selection</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>The AI community has achieved great success in designing high-performance algorithms for hard combinatorial problems, given both considerable domain knowledge and considerable effort by human experts. Two influential methods aim to automate this process: automated algorithm configuration and portfolio-based algorithm selection. The former has the advantage of requiring virtually no domain knowledge, but produces only a single solver; the latter exploits per-instance variation, but requires a set of relatively uncorrelated candidate solvers. Here, we introduce Hydra, a novel technique for combining these two methods, thereby realizing the benefits of both. Hydra automatically builds a set of solvers with complementary strengths by iteratively configuring new algorithms. It is primarily intended for use in problem domains for which an adequate set of candidate solvers does not already exist. Nevertheless , we tested Hydra on a widely studied domain, stochas-tic local search algorithms for SAT, in order to characterize its performance against a well-established and highly competitive baseline. We found that Hydra consistently achieved major improvements over the best existing individual algorithms, and always at least roughly matched-and indeed often exceeded-the performance of the best portfolios of these algorithms.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Introduction</head><p>Computationally hard combinatorial problems are ubiquitous in AI. While these problems are intractable in the worst case, in practice they can often be solved by sophisticated heuristic techniques. Work has now progressed to a point where good algorithms can usually be developed for a particular domain given two key ingredients: (i) domain knowledge about the structure that arises in the domain, and the algorithmic techniques that most effectively exploit such structure (e.g., codified in the research literature); (ii) the effort of human experts (e.g., introducing or modifying algorithm components; evaluating them to determine which are effective in the domain). Such algorithms have achieved many notable successes; however, their development has been extremely expensive in terms of human time.</p><p>Recently, researchers have focused on automated methods for designing algorithms for new domains, thereby reducing reliance on domain knowledge and/or human experts. Examples include algorithm synthesis <ref type="bibr" target="#b17">(Minton 1993;</ref><ref type="bibr" target="#b5">Gaspero</ref> Copyright c 񮽙 2010, Association for the Advancement of Artificial Intelligence (www.aaai.org). All rights reserved. and <ref type="bibr" target="#b5">Schaerf 2007;</ref><ref type="bibr" target="#b18">Monette, Deville, and van Hentenryck 2009)</ref> as well as parallel portfolios and online selection (Huberman, <ref type="bibr" target="#b9">Lukose, and Hogg 1997;</ref><ref type="bibr" target="#b6">Gomes and Selman 2001;</ref><ref type="bibr" target="#b2">Carchrae and Beck 2005;</ref><ref type="bibr" target="#b4">Gagliolo and Schmidhuber 2006;</ref><ref type="bibr" target="#b21">Streeter, Golovin, and Smith 2007)</ref>. Two further techniques are particularly relevant to our work.</p><p>The first such technique is automated algorithm configuration ( <ref type="bibr" target="#b7">Gratch and Dejong 1992;</ref><ref type="bibr" target="#b3">Fukunaga 2002;</ref><ref type="bibr">Bal- aprakash, Birattari, and Stützle 2007;</ref><ref type="bibr" target="#b10">Hutter et al. 2007;</ref><ref type="bibr" target="#b0">Ansótegui, Sellmann, and Tierney 2009)</ref>. This approach takes as input a highly parameterized algorithm, a set of benchmark instances, and a performance metric, and then optimizes the algorithm's empirical performance automatically. One prominent application of this idea is SATenstein ( <ref type="bibr" target="#b12">KhudaBukhsh et al. 2009</ref>), which makes use of a large space of stochastic local search (SLS) algorithms for SAT. Automatically configured algorithms from this space were shown to outperform state-of-the-art SLS algorithms on six well-known distributions of SAT instances. Overall, automated configuration is appealing because it requires no domain knowledge beyond a parameterized algorithm framework, and no human effort to target a new domain. However, it produces only a single algorithm, which is designed to achieve high performance overall, but which may perform badly on many individual instances. This drawback is particularly serious when the instance distribution is heterogeneous.</p><p>A second influential technique is portfolio-based algorithm selection <ref type="bibr">(Rice 1976;</ref><ref type="bibr" target="#b14">Leyton-Brown et al. 2003b;</ref><ref type="bibr" target="#b8">Guerri and Milano 2004;</ref><ref type="bibr" target="#b15">Leyton-Brown, Nudelman, and Shoham 2009)</ref>. Under this approach, predictive models are used to select among a portfolio of existing algorithms on a perinstance basis. This design framework has been used to build very practical algorithms, notably the SATzilla portfolios ( <ref type="bibr" target="#b19">Nudelman et al. 2004;</ref><ref type="bibr" target="#b22">Xu et al. 2008</ref>) that won 10 medals in the 2007 and 2009 SAT competitions. This approach has the advantage that it exploits per-instance variation across solvers, but the drawback that it requires relatively significant domain knowledge, including especially a set of relatively uncorrelated candidate solvers.</p><p>Once a state-of-the-art portfolio exists for a domain-such as SATzilla for various SAT distributions-how should new research aim to improve upon it? One approach is to build new stand-alone algorithms either by hand or using automatic configuration, with the goal of replacing the port-folio. This approach has the drawback that it reinvents the wheel: the new algorithm must perform well on all the instances for which the portfolio is already effective, and must also make additional progress. Alternatively, we might try to build a new algorithm to complement the portfolio, which has been dubbed "boosting as a metaphor for algorithm design" ( <ref type="bibr" target="#b13">Leyton-Brown et al. 2003a</ref>). The boosting algorithm in machine learning builds an ensemble of classifiers by focusing on problems that are handled poorly by the existing ensemble. The proposal is to approach algorithm design analogously, focusing on problems for which the existing portfolio performs poorly. In particular, the suggestion is to use sampling (with replacement) to generate a new benchmark distribution that will be harder for an existing portfolio, and for new algorithms to attempt to minimize average runtime on this benchmark. Indeed, such a method was shown to be very effective for inducing new, hard distributions. While we agree with the core idea of aiming explicitly to build algorithms that will complement a portfolio, we have come to disagree with its concrete realization as described most thoroughly by <ref type="bibr" target="#b15">Leyton-Brown, Nudelman, and Shoham (2009)</ref>, realizing that average performance on a new benchmark distribution is not always an adequate proxy for the extent to which a new algorithm would complement a portfolio.</p><p>We note that a region of the original distribution that is exceedingly hard for all candidate algorithms can dominate the new distribution, leading to stagnation. A further problem is illustrated in the following, more complex example (due to Frank Hutter). Consider a uniform distribution over instance types A, B, and C. The current portfolio solves C instances in 0.01 seconds, and A and B instances in 20 seconds each. The new distribution S thus emphasizes instance types A and B. There are three kinds of algorithms. X algorithms solve A instances in 0.1±ε seconds and B instances in 100±ε seconds each, where ε is a number between 0 and 0.01; the actual runtime varies randomly within this range across given algorithm-instance pairs. Y algorithms solve B instances in 0.1±ε seconds and A instances in 100±ε seconds each. Z algorithms solve both A and B instances in 25±ε seconds each. All three algorithm types solve C instances in 10±ε seconds each. The best average performance on S will be achieved by some Z algorithm, which we thus add to the portfolio. However, observe that this new Z algorithm is dominated by the current portfolio. Thus our new distribution S 񮽙 will be the same as S. The process thus stagnates (endless algorithms of type Z exist), and we never add any X or Y algorithm to the portfolio, although adding any pair of these would lead to improved overall performance.</p><p>In this paper we introduce Hydra, a new method for automatically designing algorithms to complement a portfolio. This name is inspired by the Lernaean Hydra, a mythological, multi-headed beast that grew new heads for those cut off during its struggle with Greek hero Heracles. Hydra, given only a highly parameterized algorithm and a set of instance features, automatically generates a set of configurations that form an effective portfolio. It thus does not require any domain knowledge in the form of existing algorithms or algorithm components that are expected to work well, and can be applied to any problem. Hydra is an anytime algorithm: it begins by identifying a single configuration with the best overall performance, and then iteratively adds algorithms to the portfolio. It is also able to drop previously added algorithms when they are no longer helpful.</p><p>Hydra differs in key respects from stochastic offline programming (SOP), another recent method that performs instance-specific selection from an automatically generated set of search algorithms <ref type="bibr" target="#b16">(Malitsky and Sellmann 2009)</ref>. Firstly, SOP assumes that each of these algorithms has a particular structure, iteratively (i) sampling from a distribution over heuristics and (ii) using the sampled heuristic for one search step. In contrast, Hydra works with any parameterized algorithm. Secondly, SOP clusters the instances based on features and then builds one algorithm for each cluster, while Hydra considers all instances at each iteration and uses features solely for portfolio-based selection. Finally, SOP builds its set of algorithms using a custom optimization method, while Hydra can make use of any algorithm configuration procedure and portfolio building technique.</p><p>We also note that CPHYDRA (O' <ref type="bibr">Mahony et al. 2008</ref>) has a name similar to our Hydra. CPHYDRA is a portfolio-based solver for constraint programming problems that uses casebased reasoning to determine a sequential schedule, which specifies how long to run each solver from a portfolio. It can be viewed as an approach for algorithm selection in a particular domain. In contrast, Hydra is a general method for combining portfolio-based algorithm selection with automated algorithm configuration.</p><p>Hydra offers the greatest potential benefit in domains where only one highly parameterized algorithm is competitive (e.g., certain distributions of mixed-integer programming problems), and the least potential benefit in domains where a wide variety of strong, uncorrelated solvers already exist. Nevertheless, we chose to evaluate Hydra on SAT-possibly the most extreme example of the latter category-effectively building a SATzilla of SATensteins. We did so for several reasons. Most of all, to demonstrate the usefulness of the approach, we considered it important to work on a problem for which the state of the art is known to be very strong. SLS-based SAT algorithms have been the subject of a large and sustained research effort over the past two decades, and the success of SATzilla demonstrates that existing SAT algorithms can be combined together to form very strong portfolios. The bar is thus set extremely high in this domain. Further, studying SLS for SAT also offered several pragmatic benefits: a wide variety of datasets exist and are agreed to be interesting; effective instance-based features are available; and SATenstein is a suitable configuration target. Finally, because SAT is an important problem, even small improvements are significant.</p><p>In our experiments, Hydra consistently achieved significant improvements over the best existing individual algorithms designed both by human experts and automatic configuration methods. More importantly, it always at least roughly matched-and indeed often exceeded-the performance of the best portfolio of such algorithms. We believe that Hydra's performance on SAT is suggestive of its promise in other domains, in which there is no strong incumbent portfolio against which we could compare.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Hydra</head><p>The key idea behind Hydra is that a new candidate algorithm should be preferred exactly to the extent that it improves upon the performance of a (slightly idealized) portfolio. Hydra is thus implemented by changing the performance measure given to the algorithm configuration. A candidate algorithm is scored with its actual performance in cases where it is better than the existing portfolio, but with the portfolio's performance in cases where it is worse. Thus an algorithm is not penalized for bad performance on instances for which it should not be selected anyway, but is only rewarded to the extent that it outperforms the portfolio. The examples given earlier would be handled properly by this approach: the presence of intractable instances does not lead us to ignore performance gains elsewhere, and X and Y algorithms would be chosen in the first two iterations.</p><p>As shown in pseudocode, Hydra takes five inputs: a parameterized solver s, a set of training problem instances I, an algorithm configuration procedure AC with a performance metric m to be optimized, and a procedure P B for building portfolio-based algorithm selectors.</p><p>In its first iteration, Hydra uses configurator AC to produce a configuration of s, dubbed s 1 , that is optimized on training set I according to performance metric m. Solver s 1 is then run on all instances of I in order to collect data that can eventually be input to P B; runs performed during the earlier configuration process can be cached and reused as appropriate. We define portfolio P 1 as the portfolio that always selects s 1 , and solver set S 1 as {s 1 }.</p><p>Then, in each subsequent iteration k ≥ 2, Hydra defines a modified performance metric m k as the better of the performance of the solver being assessed and the performance of the current portfolio, both measured according to performance metric m. The configurator AC is run to find a configuration s k of s that optimizes m k on the entire training set I. As before, the resulting solver is evaluated on the entire set I and then added to the solver set S. We then use P B to construct a new portfolio P k from the given set of solvers. In each iteration of Hydra, the size of the candidate solver set S k grows by one; however, P B may drop solvers that do not contribute to the performance of portfolio P k (this is done, e.g., in SATzilla ( <ref type="bibr" target="#b22">Xu et al. 2008)</ref>). Slightly modifying the second example we gave earlier, if Z algorithms have slightly better performance on A and B instances than the current portfolio, some Z algorithm will be chosen in the first iteration. However, X and Y algorithms are chosen in the next two iterations, at which point the Z algorithm will be dropped, because it is dominated by the pair of X and Y algorithms.</p><p>Hydra can be terminated using various criteria, such as a user-specified bound on the number of iterations and/or a total computation-time budget.</p><p>The algorithm configuration procedure AC used within Hydra must be able to deal efficiently with configurations having equal performance on some or all instances, because such configurations can be expected to be encountered frequently. (For example, all configurations dominated by portfolio P k−1 will have equal performance under performance metric m k .) It is also possible to exploit m k for computaProcedure Hydra(s, I, AC, m, P B)</p><p>Input: Parametric solver s; Instance set I;</p><p>Algorithm configurator AC; Performance metric m; Portfolio builder P B Output: Portfolio P k := 1; m1 = m ; obtain a solver s1 by running configurator AC on parametric solver s and instance set I with performance metric m1; measure performance of s1 on all instances in I, using performance metric m; let P1 by a portfolio that always selects s1; let S1 := {s1}; while termination condition not satisfied do k := k + 1; define performance metric m k as the better of the performance of the solver being assessed and the performance of portfolio P k−1 , both measured using performance metric m; obtain a new solver s k by running configurator AC on parametric solver s and instance set I with performance metric m k ; measure performance of s k on all instances in I, using performance metric m;</p><formula xml:id="formula_0">S k = S k−1 ∪ {s k };</formula><p>obtain new portfolio P k by running portfolio builder P B on S; return P tional gain when optimizing runtime (as we do in our experimental study below). Specifically, a run of s on some instance i ∈ I can be terminated during configuration once its runtime reaches portfolio P k−1 's runtime on i. (See analogous discussion of capping in algorithm configuration by <ref type="bibr" target="#b11">Hutter et al. (2009)</ref>.)</p><p>We note that Hydra need not be started from an empty set of algorithms, or only consider one parameterized algorithm. For example, it is straightforward to initialize S with existing state-of-the-art algorithms before running Hydra, or to optimize across multiple parameterized algorithms.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Experimental Setup</head><p>We chose inputs for Hydra to facilitate comparisons with past work, setting s, I, AC, and m as in <ref type="bibr" target="#b12">KhudaBukhsh et al. (2009)</ref>, and taking P B from <ref type="bibr" target="#b22">Xu et al. (2008)</ref>. Inputs s, I and m define the application context in which Hydra is run. In contrast, AC and P B are generic components; we chose these "off the shelf" and made no attempt to modify them to achieve domain-specific performance improvements. We do not expect that an end user would have to vary them either.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Parametric Solver: SATenstein-LS</head><p>As our parametric solver s, we chose SATenstein-LS, a generalized, highly parameterized stochastic local search (SLS) framework ( <ref type="bibr" target="#b12">KhudaBukhsh et al. 2009</ref>). It includes components taken from or inspired by a wide range of state-of-the-art SLS algorithms. SATenstein-LS has 41 parameters that control the selection and behavior of its components, leading to a total configuration space of size 4.82 × 10 12 . Automatically-identified configurations of SATenstein-LS have been shown to achieve better performance than existing state-of-the-art SLS algorithms on several well-known instance distributions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Instances</head><p>We investigated the effectiveness of Hydra on four distributions, drawing on well-known families of SAT instances. Because no state-of-the-art SLS algorithms are able to prove unsatisfiability, we considered only satisfiable instances. We identified these by running all complete algorithms that won a SAT competition category between 2002 and 2007 for one hour. First, the BM data set is constructed from 500 instances taken from each of the six distributions used by <ref type="bibr" target="#b12">KhudaBukhsh et al. (2009)</ref> (QCP, SWGCP, FACT, CBMC, R3FIX, and HGEN), split evenly into training and test sets. Second, the INDU data set is a mixture of 500 instances from each of the CBMC and FACT distributions, again split evenly into training and test sets. Third and fourth, the HAND and RAND data sets include all satisfiable instances from the Random and Handmade categories of the SAT Competitions held between 2002 and 2007; we split the data 1141:571 and 342:171 into training and test sets, respectively.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Algorithm Configurator: FocusedILS</head><p>As our algorithm configurator AC, we chose the FocusedILS procedure from the ParamILS framework, version 2.3 ( <ref type="bibr" target="#b11">Hutter et al. 2009</ref>). This is the only existing method able to deal with extremely large configuration spaces such as SATenstein-LS's, and indeed was the method used to identify the high-performing SATenstein-LS configurations mentioned previously. FocusedILS compares a new configuration with an incumbent by running on instances one at a time, and rejects the new configuration as soon as it yields weakly worse overall performance on the set of instances than the incumbent. Because we expect many ties in Hydra's modified performance measures m k , particularly in later iterations, we changed this mechanism so that new configurations are rejected only once they yield strictly worse overall performance. We also modified FocusedILS to cap all runs at the corresponding runtime for the portfolio P k−1 , as discussed previously.</p><p>Performance Metric: PAR As our performance metric we would have liked to use mean runtime. However, the mean is not defined when long runs are capped during configuration, which is necessary in practice. We thus followed <ref type="bibr" target="#b12">KhudaBukhsh et al. (2009)</ref>, capping runs at 5 seconds and setting our performance metric m to be Penalized Average Runtime-10 (PAR-10); PAR-k of a set of r runs is the mean over the r runtimes, where capped runs are counted as having taken k times the captime. We performed 10 independent FocusedILS runs on training data with different instance orderings and with a one-day time bound. 1 1 SATenstein-LS's parameter space is divided into two disjoint parts; we performed half of our FocusedILS runs on each.</p><p>We kept the parameter configuration that yielded the best PAR score on training data.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Portfolio Builder: SATzilla</head><p>As our portfolio builder P B we used the SATzilla framework ( <ref type="bibr" target="#b22">Xu et al. 2008</ref>). In brief, SATzilla works as follows. Let S denote a set of algorithms, let I denote a set of training instances, let D represent performance data for each algorithm from S run on each instance in I, and let F represent features computed for each instance in I. First, up to two solvers from S are selected as "presolvers" using on a localsearch-based subset selection technique, with a fixed time budget taken from {0s, 2s, 5s, 10s}. We use forward selection to reduce the set of features, perform a quadratic basis function expansion, and then again perform forward selection; call the resulting feature set F 񮽙 . For each solver in S, we then use a variant of ridge regression to predict D given F 񮽙 ; that is, we build a mapping from the features in F 񮽙 to a real value predicting performance. The ridge regression variant deals correctly with censored data and exploits hierarchical hardness models, as described by <ref type="bibr" target="#b22">Xu et al. (2008)</ref>. At runtime, the portfolio first runs the presolver(s) sequentially. If the instance remains unsolved it then computes the features, evaluates the performance predictor for each algorithm, and runs the algorithm predicted to perform best.</p><p>Because performance prediction is imperfect, portfolio performance can improve if a solver is excluded from S. We use solver subset selection to determine the set S that achieves the best performance on the training data, building the portfolio as described above for each candidate set S.</p><p>We computed the same set of features as <ref type="bibr" target="#b23">Xu et al. (2009)</ref>. For BM and INDU, we only used 40 very efficently computable features (with average feature computation time of 0.04 seconds in both cases) since initial, exploratory experiments showed us that Hydra could achieve performance on the order of seconds on these data sets. For the same reason, we also reduced the time allowed for subset selection on these distributions by a factor of 10, allowing time budgets taken from {0s, 0.2s, 0.5s, 1s}. For RAND and HAND, we used all features except the most expensive ones (LP-based and clause-graph-based features); the average feature computation times were 4.2 seconds and 4.9 seconds, respectively.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Challengers</head><p>As previously explained, one reason that we studied SLS for SAT is that a wide variety of strong solvers exist for this domain. In particular, we identified 17 such algorithms, which we dub "challengers." Following <ref type="bibr" target="#b12">KhudaBukhsh et al. (2009)</ref>, we included all 7 SLS algorithms that won a medal in any of the SAT Competitions between 2002 and 2007, and also 5 additional prominent high-performance algorithms. We also included the 6 SATenstein-LS configurations introduced by <ref type="bibr" target="#b12">KhudaBukhsh et al. (2009)</ref>. While in some sense this set a high bar for Hydra (it had to compete against strong configurations of its own parametric solver) we included these configurations because they were shown to outperform the previous state of the art.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Experimental Environment</head><p>We collected training data and performed ParamILS runs on two different compute clusters. The first had 55 dual 3.2GHz Intel Xeon machines with 2MB cache and 2GB RAM, running OpenSuSE Linux 11.1; the second had 384 dual 3.0GHz Intel Xeon E5450 quad-core machines with 16GB of RAM running Red Hat Linux 4.1.2. Although the use of different machines added noise to the runtime observations in our training data, it had to be done to leverage additional computational resources. To ensure that our results were meaningful, we gathered all test data using only the first cluster; all results reported in this paper were collected using this data, and the data was used for no other purpose. Runtime was always measured as CPU time.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Results</head><p>To establish a baseline for our empirical evaluation, we first ran all 17 challenger algorithms on each of our test sets. The best-performing challengers are identified in the third column of <ref type="table">Table 1</ref>, and their PAR-10 scores are shown in the fourth column. We also report the percentages of instances that each algorithm solved.</p><p>Next, we used SATzilla to automatically construct portfolios, first from the 11 manually crafted challenger algorithms, and then from the full set of 17 challengers that also included the 6 SATenstein-LS solvers. As can be seen from column 6 of <ref type="table">Table 1</ref>, the latter portfolios perform much better than the best individual challenger, and the same holds for the former, more limited portfolios (column 5) as compared to the best of their 11 handcrafted component solvers. As one would expect, the performance gain was particularly marked for instance set BM, which is highly heterogeneous. In all cases, the inclusion of the 6 SATenstein-LS solvers, which were derived by automatic configuration on the six instance distributions considered by <ref type="bibr" target="#b12">KhudaBukhsh et al. (2009)</ref>, led to improved performance. While this was expected for BM and INDU, which are combinations of the instance distributions for which the 6 SATenstein-LS solvers were built, we were more surprised to observe the same qualitative effect for RAND and HAND.</p><p>In column 7, <ref type="table">Table 1</ref> shows the performance of the single SATenstein-LS configuration that was obtained in the initial phase of Hydra. Comparing these results to those the portfolio obtained after 7 iterations (column 8), we see that Hydra is indeed able to automatically configure solvers to work well as components of a portfolio. Furthermore, in all cases the Hydra portfolio outperformed the portfolio of 11 challengers. The Hydra portfolio outperformed the portfolio of 17 challengers in RAND and HAND, and effectively tied with it in BM and INDU. Note that these latter distributions are those for which SATenstein-LS solvers were specifically built; indeed, we found that the 17-challenger portfolios relied very heavily on these solvers. Furthermore, we note that <ref type="bibr" target="#b12">KhudaBukhsh et al. (2009)</ref> devoted about 240 CPU days to the construction of the 6 SATenstein-LS solvers, while the construction of the entire Hydra <ref type="bibr">[D,7]</ref> portfolio required only about 70 CPU days.</p><p>Overall, recall that the success of the challenger-based portfolios depends critically upon the availability of domain knowledge in the form of very strong solvers (some handcrafted, such as 11 of the challengers, and some constructed automatically based on clearly-delineated instance distributions, such as the 6 SATenstein-LS solvers). In contrast, Hydra always achieved equivalent or significantly better performance without relying on such domain knowledge. <ref type="figure">Figure 1</ref> shows the PAR-10 performance improvements achieved in each Hydra iteration, considering both training and test data for BM and INDU. (The plots for HAND and RAND are not shown here, but closely resemble that for BM.). In all cases, test performance closely resembled training performance. Hydra's test performance improved monotonically from one iteration to the next. Furthermore, on BM, HAND and RAND, Hydra achieved better performance than the best challenger after at most two iterations. On INDU, Hydra took five iterations to outperform the best challenger, SATenstein-LS <ref type="bibr">[CBMC]</ref>. While this might seem surprising considering that the latter is a configuration of SATenstein-LS, it is explained by the fact that each Hydra iteration was allowed much less CPU time than <ref type="bibr" target="#b12">KhudaBukhsh et al. (2009)</ref> allocated for the construction of SATenstein-LS <ref type="bibr">[CBMC]</ref>. <ref type="figure" target="#fig_0">Figure 2</ref> compares the test-set performance of Hydra <ref type="bibr">[D,1]</ref> and Hydra <ref type="bibr">[D,7]</ref> for BM and INDU. (The plots for HAND and RAND are not shown here, but resemble the BM plot.) Note that Hydra <ref type="bibr">[D,7]</ref> is substantially stronger than Hydra <ref type="bibr">[D,1]</ref>, particularly on hard instances. The fact that Hydra <ref type="bibr">[D,1]</ref> sometimes outperforms Hydra <ref type="bibr">[D,7]</ref> is due to the facts that the feature-based selection does not always choose the best solver from the given portfolio, and that the algorithms are randomized. <ref type="table">Table 2</ref> shows, over each of the 7 iterations, the fraction of training instances solved by each Hydra portfolio component. Obviously, a total of k solvers are available in each stage k. Note that solver subset selection does lead Hydra to exclude solvers from the portfolio; this happens, e.g., on RAND, where the third solver was dropped in iteration 7. Another interesting effect can be observed in iteration 3 on INDU, where the second solver was effectively replaced by the third, whose instance share is marginally higher. Had we allowed the algorithm configurator to run longer in iteration 2, it would eventually have found this latter solver. The fact that it was found in the subsequent iteration illustrates Hydra's ability to recover from insufficient allocation of runtime to the algorithm configurator. A similar phenomenon occurred in iterations 6 and 7 on INDU. The solver found in iteration 6 turned out not to be useful at all, and was therefore dropped immediately; in the next round of algorithm configuration a useful solver was found. (However, we see in <ref type="figure">Figure 1</ref> that the overall benefit derived from using this latter solver turned out to be quite small.) Finally, we note that for all four distributions, the Hydra <ref type="bibr">[D,7]</ref> portfolios consisted of at least 5 solvers, each of which were executed on between 6.8 and 41.8% of the instances. This indicates that the individual solvers constructed by Hydra indeed worked well on sizeable subsets of our instance sets, without the explicit use of problem-dependent knowledge (such as instance features) for partitioning these sets.  <ref type="table">Table 1</ref>: Performance comparison between Hydra, SATenstein-LS, challengers, and portfolios based on 11 (without 6 SATenstein-LS solvers) and 17 (with 6 SATenstein-LS solvers) challengers. All results are based on 3 runs per algorithm and instance; an algorithm solves an instance if its median runtime on that instance is below the given cutoff time.</p><p>Figure 1: Hydra's performance progress after each iteration, for BM (left) and INDU (right). Performance is shown in terms of PAR-10 score; the vertical lines represent the best challenger's performance for each data set.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Conclusions</head><p>In this work we introduced Hydra, a new automatic algorithm design approach that combines portfolio-based algorithm selection with automatic algorithm configuration. We applied Hydra to SAT, a particularly well-studied and challenging problem domain, producing high-performance portfolios based only on a single highly parameterized SLS algorithm, SATenstein-LS. Our experimental results on widely-studied SAT instances showed that Hydra significantly outperformed 17 state-of-the-art SLS algorithms. Hydra reached, and in two of four cases exceeded, the performance of portfolios that used all 17 challengers as candidate solvers, 6 of which had been configured automatically using domain knowledge about specific types of SAT instances. At the same time, the total CPU time used by Hydra to reach this performance level for each distribution was less than a third of that used for configuring the 6 automatically-configured challengers. One obvious direction for future work is to use Hydra to build portfolios of complete SAT solvers. We also intend to apply Hydra to mixed integer programming problems, for which there are very few strong solvers. Finally, we are interested in studying versions of Hydra that leverage different algorithm configuration and portfolio building methods.  <ref type="table">Table 2</ref>: The percentage of instances for each solver chosen by algorithm selection at each iteration for RAND (left) and INDU (right). P k and s k are respectively the portfolio and algorithm instantiation obtained in iteration k.</p><p>bilistic solution to the utility problem in speed-up learning. In Proc. AAAI, 235-240.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: Performance comparison between Hydra[D,7] and Hydra[D,1] on the test sets, for BM (left) and INDU (right). Performance is shown in terms of PAR-10 score.</figDesc></figure>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">A gender-based genetic algorithm for the automatic configuration of algorithms</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Ansótegui</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Sellmann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Tierney</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. CP</title>
		<meeting>CP</meeting>
		<imprint>
			<date type="published" when="2009" />
			<biblScope unit="page" from="142" to="157" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Improvement strategies for the F-race algorithm: Sampling design and iterative refinement</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Balaprakash</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Birattari</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Stützle</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Hybrid Metaheuristics</title>
		<imprint>
			<date type="published" when="2007" />
			<biblScope unit="page" from="108" to="122" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Applying machine learning to low knowledge control of optimization algorithms</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Carchrae</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">C</forename><surname>Beck</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computational Intelligence</title>
		<imprint>
			<biblScope unit="volume">21</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="373" to="387" />
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Automated discovery of composite sat variable-selection heuristics</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">S</forename><surname>Fukunaga</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. AAAI</title>
		<meeting>AAAI</meeting>
		<imprint>
			<date type="published" when="2002" />
			<biblScope unit="page" from="641" to="648" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Learning dynamic algorithm portfolios</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Gagliolo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Schmidhuber</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Annals of Mathematics and Artificial Intelligence</title>
		<imprint>
			<biblScope unit="volume">47</biblScope>
			<biblScope unit="issue">3-4</biblScope>
			<biblScope unit="page" from="295" to="328" />
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">EasySyn++: A tool for automatic synthesis of stochastic local search algorithms</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><forename type="middle">D</forename><surname>Gaspero</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Schaerf</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. SLS</title>
		<meeting>SLS</meeting>
		<imprint>
			<date type="published" when="2007" />
			<biblScope unit="page" from="177" to="181" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Algorithm portfolios</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">P</forename><surname>Gomes</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Selman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Artificial Intelligence</title>
		<imprint>
			<biblScope unit="volume">126</biblScope>
			<biblScope unit="issue">1-2</biblScope>
			<biblScope unit="page" from="43" to="62" />
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Gratch</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Dejong</surname></persName>
		</author>
		<title level="m">COMPOSER: A proba</title>
		<imprint>
			<date type="published" when="1992" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Learning techniques for automatic algorithm portfolio selection</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Guerri</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Milano</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. ECAI</title>
		<meeting>ECAI</meeting>
		<imprint>
			<date type="published" when="2004" />
			<biblScope unit="page" from="475" to="479" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">An economics approach to hard computational problems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Huberman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Lukose</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Hogg</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Science</title>
		<imprint>
			<biblScope unit="volume">265</biblScope>
			<biblScope unit="page" from="51" to="54" />
			<date type="published" when="1997" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Boosting verification by automatic tuning of decision procedures</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Hutter</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Babi´cbabi´c</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><forename type="middle">H</forename><surname>Hoos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">J</forename><surname>Hu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. FMCAD</title>
		<meeting>FMCAD</meeting>
		<imprint>
			<date type="published" when="2007" />
			<biblScope unit="page" from="27" to="34" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">ParamILS: An automatic algorithm configuration framework</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Hutter</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><forename type="middle">H</forename><surname>Hoos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Leyton-Brown</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Stützle</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">JAIR</title>
		<imprint>
			<biblScope unit="volume">36</biblScope>
			<biblScope unit="page" from="267" to="306" />
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">SATenstein: Automatically building local search SAT solvers from components</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">R</forename><surname>Khudabukhsh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Xu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><forename type="middle">H</forename><surname>Hoos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Leytonbrown</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IJCAI</title>
		<meeting>IJCAI</meeting>
		<imprint>
			<date type="published" when="2009" />
			<biblScope unit="page" from="517" to="524" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Boosting as a metaphor for algorithm design</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Leyton-Brown</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Nudelman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Andrew</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Mcfadden</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Shoham</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. CP</title>
		<meeting>CP</meeting>
		<imprint>
			<date type="published" when="2003" />
			<biblScope unit="page" from="899" to="903" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">A portfolio approach to algorithm selection</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Leyton-Brown</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Nudelman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Andrew</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Mcfadden</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Shoham</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IJCAI</title>
		<meeting>IJCAI</meeting>
		<imprint>
			<date type="published" when="2003" />
			<biblScope unit="page" from="1542" to="1543" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Empirical hardness models: Methodology and a case study on combinatorial auctions</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Leyton-Brown</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Nudelman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Shoham</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of the ACM</title>
		<imprint>
			<biblScope unit="volume">56</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="1" to="52" />
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Stochastic offline programming</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Malitsky</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Sellmann</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. CP</title>
		<meeting>CP</meeting>
		<imprint>
			<date type="published" when="2009" />
			<biblScope unit="page" from="784" to="791" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">An analytic learning system for specializing heuristics</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Minton</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IJCAI</title>
		<meeting>IJCAI</meeting>
		<imprint>
			<date type="published" when="1993" />
			<biblScope unit="page" from="922" to="929" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Aeon: Synthesizing scheduling algorithms from high-level models</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Monette</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Deville</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Van Hentenryck</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">INFORMS Computing Society Conference</title>
		<imprint>
			<date type="published" when="2009" />
			<biblScope unit="page" from="43" to="59" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Understanding random SAT: Beyond the clauses-to-variables ratio</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Nudelman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Leyton-Brown</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Devkar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Shoham</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Hoos</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. CP</title>
		<meeting>CP</meeting>
		<imprint>
			<date type="published" when="2004" />
			<biblScope unit="page" from="438" to="452" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Using case-based reasoning in an algorithm portfolio for constraint solving</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>O&amp;apos;mahony</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Hebrard</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Holland</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Nugent</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Sullivan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Irish Conf. on Artificial Intelligence and Cognitive Science</title>
		<meeting>Irish Conf. on Artificial Intelligence and Cognitive Science</meeting>
		<imprint>
			<date type="published" when="1976" />
			<biblScope unit="volume">15</biblScope>
			<biblScope unit="page" from="65" to="118" />
		</imprint>
	</monogr>
	<note>Rice, J. R.</note>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Combining multiple heuristics online</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Streeter</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Golovin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">F</forename><surname>Smith</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. AAAI</title>
		<meeting>AAAI</meeting>
		<imprint>
			<date type="published" when="2007" />
			<biblScope unit="page" from="1197" to="1203" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">SATzilla: portfolio-based algorithm selection for SAT</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Xu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Hutter</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><forename type="middle">H</forename><surname>Hoos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Leyton-Brown</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">JAIR</title>
		<imprint>
			<biblScope unit="volume">32</biblScope>
			<biblScope unit="page" from="565" to="606" />
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<monogr>
		<title level="m" type="main">SATzilla2009: An automatic algorithm portfolio for SAT. Solver description</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Xu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Hutter</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><forename type="middle">H</forename><surname>Hoos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Leyton-Brown</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
		<respStmt>
			<orgName>SAT Competition</orgName>
		</respStmt>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
