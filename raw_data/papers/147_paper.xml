<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2019-03-26T16:31+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">FPGA Self-Repair using an Organic Embedded System Architecture</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><roleName>Student Member, IEEE</roleName><forename type="first">Kening</forename><surname>Zhang</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">School of Electrical Engineering and Computer Science</orgName>
								<orgName type="institution">University of Central Florida Orlando</orgName>
								<address>
									<postCode>32816-2362</postCode>
									<region>FL</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jaafar</forename><surname>Alghazo</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">School of Electrical Engineering and Computer Science</orgName>
								<orgName type="institution">University of Central Florida Orlando</orgName>
								<address>
									<postCode>32816-2362</postCode>
									<region>FL</region>
								</address>
							</affiliation>
						</author>
						<author role="corresp">
							<persName xmlns="http://www.tei-c.org/ns/1.0"><roleName>Senior Member, IEEE</roleName><forename type="first">Ronald</forename><forename type="middle">F</forename><surname>Demara</surname></persName>
							<email>demara@mail.ucf.edu</email>
							<affiliation key="aff0">
								<orgName type="department">School of Electrical Engineering and Computer Science</orgName>
								<orgName type="institution">University of Central Florida Orlando</orgName>
								<address>
									<postCode>32816-2362</postCode>
									<region>FL</region>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">FPGA Self-Repair using an Organic Embedded System Architecture</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<note>1</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>An Organic Embedded System (OES) architecture is developed for sustainable performance using SRAM-based Field Programmable Gate Arrays (FPGAs), an Organic Computing (OC) observer/controller organization, and regeneration with Genetic Operators. Innovations include availability during online regeneration, aging and outlier driven repair assessment, and a uniform design for Autonomic Elements (AEs) despite the fact that they monitor different types of Functional Elements (FEs). Using logic circuits from the MCNC-91 benchmark set, availability during repair phases averaged 75.05%, 82.21%, and 65.21% for the z4ml, cm85a, and cm138a circuits respectively under stated conditions. In addition to simulation, the proposed OES architecture synthesized from HDL was prototyped on Xilinx Virtex II Pro FPGA device supporting partial reconfiguration to demonstrate the feasibility of OC approaches for intrinsic regeneration of the selected circuit.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">INTRODUCTION</head><p>Electronic systems require increasing capability for fault tolerance and self-adaptation as their system complexities and inter-dependencies continue to increase. The realizations of systems that are capable of exhibiting such adaptive behaviors constitute the vision sought by Organic Computing (OC) <ref type="bibr" target="#b6">[SCHMECK 2005</ref>]. OC self-x properties include self-configuration, self-reorganization, and self-healing <ref type="bibr" target="#b7">[LIPSA et. al 2005;</ref><ref type="bibr" target="#b6">SCHMECK 2005]</ref> which comprise the focus of this paper. Ideally, these objectives are maintained in an autonomous fashion, yet sufficiently constrained to avoid undesirable emergent behaviors.</p><p>In particular, OC systems rely on selforganization to respond to internal imbalances and changing environmental conditions using Observer/Controller architecture <ref type="bibr">[AVAZIENIS 1997]</ref>.</p><p>To provide OC architectures with sufficient capability for exhibiting self-adaptive behavior, reconfigurable logic devices offer an attractive hardware platform <ref type="bibr" target="#b6">[SCHMECK 2005]</ref>.</p><p>SRAM-based Field Programmable Gate Arrays (FPGAs) logic devices can realize self-adaptation within their reconfigurable logic fabric using Evolvable Hardware techniques. Since evolution is employed, the Observer/Controller has the task of detecting internal/external errors and well as initiating reconfiguration when necessary.</p><p>A widely known generic OC platform called the Autonomous System-on-a-Chip (ASoC) architecture proposed in <ref type="bibr" target="#b7">[LIPSA et. al 2005]</ref> is depicted in <ref type="figure">Fig. 1</ref> The Dual-Layer ASoC design approach in <ref type="figure">Fig. 1</ref> is extended herein to provide fault coverage at both the Functional Layer and Autonomic Layer. This is achieved by assessing consensus among elements in a two-fold approach. Consensus is used first to realize failure detection. Once identified, consensus provides an organic method for fitness evaluation of competing alternatives during evolution providing a self-regulating approach to fault resolution. The measured performance is analyzed as an integrated OC system for self-configuration and selfhealing. This demonstrates a generic OC architecture that can detect faults and refurbish itself while still providing a <ref type="figure">Fig. 1</ref>. Dual-Layer ASoC proposed by <ref type="bibr" target="#b7">Lipsa [LIPSA et al 2005]</ref> degraded level of valid throughput even during the refurbishment period.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">PREVIOUS WORK</head><p>Related works in the literature have explored techniques useful for development of an OC system from various theoretical and practical perspectives. For example, in <ref type="bibr" target="#b5">[BERNAUER et. al 2006]</ref> a runtime reliability evaluation of ASoC architectures was addressed. The objective was to design SoCs that can tolerate faults by introducing dynamic reliability, power management, and security tradeoffs, as well as adaptation to environmental changes and unpredictable failure scenarios. Under these conditions, a theoretical model for calculating error probability during run-time is presented. A related fault model in <ref type="bibr" target="#b5">[BOUAJILA et. al 2006]</ref> concentrated on transient and timing faults caused by ionizing radiation or variations at the technology or device level. The Cprogram simulations executed on Leon-2 processor code resulted in a penalty of two cycles for the detection and correction of an error in the processor's pipeline. Work has also been conducted on prototyping platforms capable of support OC architectures. For instance, the Egret system provides a platform for reconfigurable SoC's supporting applications such as OC <ref type="bibr" target="#b3">[BERGMANN and WILLIAMS 2003]</ref>. The design objectives of Egret were to provide a platform to rapidly prototype embedded reconfigurable applications and a straightforward path to commercialization of prototyped designs. The platform consisted of modular functional elements that can be interconnected to design an embedded application for reconfigurable logic.</p><p>In more a general study, identification of SoC system requirements for detecting faults and handling the faulty components is addressed in <ref type="bibr" target="#b5">[BOUAJILA et. al 2006]</ref>. Fault tolerant error detection techniques are classified into three groups: hardware redundancy, information redundancy, and time redundancy. The three techniques and their combination were surveyed on an Autonomous SoC design consisting of the two layers: the Functional Layer and Autonomic Layer. In this theoretical framework, it was suggested that the Autonomic SoC would need a well-tailored AE layer which would cope with malfunctioning subcomponents. The simulation consisted of a paradigm with priori knowledge about the system's behavior when an error occurs and examines setting a threshold for errors that can occur before the system goes into self-organizing mode <ref type="bibr" target="#b5">[BOUAJILA et. al 2006]</ref>.</p><p>In order for an autonomous system to invoke its self-healing mode, it must be able on its own to detect errors during run-time <ref type="bibr" target="#b1">[BECKER and HÃœBNER 2006]</ref>. Reconfiguration and detection techniques explored include scrubbing which is the continuous reconfiguration of the bitstream to refresh the stored configuration <ref type="bibr" target="#b6">[CARMICHAEL et. al 2000]</ref>, Built-In-Self-Test (BIST) techniques <ref type="bibr" target="#b13">[STROUD et. al 2004]</ref>, on-chip hardware test benches <ref type="bibr" target="#b12">[SEKAR et. al 2000]</ref> and Triple Modular Redundancy (TMR) extensions <ref type="bibr" target="#b6">[ZHANG et. al 2006]</ref>. Decentralized approaches to Observer/Controller units can be preferable in the design of fault-detection and selfhealing systems due to the fact that the observer/controller system itself might be faulty <ref type="bibr" target="#b1">[BECKER and HÃœBNER 2006]</ref>, and this is one focus of our OES Architecture described in Section 3. For realization of the recovery phase, Genetic Algorithms (GAs) have been applied to FPGA devices in various approaches. In the cases of intrinsic hardware evolution, the GA is invoked to apply crossover and mutation on the FPGA bitstream to evolve a fault-specific repair in-situ on the device. A software-simulation study of this approach was presented in <ref type="bibr">[MILLIORD et al 2005]</ref>. It also explored the use of voting systems that operate in parallel despite imperfect GA solutions to refurbishment of local permanent damage in the FPGA fabric. Results showed improvement in aggregate repair performance from several different incomplete repairs obtained by the GAs. In <ref type="bibr" target="#b6">[BRANKE et. al 2006]</ref>, an autonomous self-repair approach for SRAM-based FPGAs is developed based on Competitive Runtime Reconfigurability. This approach was applied to a FPGA-based multiplier design which demonstrated evolution of a complete repair for 3x3 multiplier from several stuck-at-faults within a few thousand iterations. Using conventional offline population based approaches, GAs were also explored in <ref type="bibr" target="#b8">[LOHN et. al 2003]</ref> for evolutionary fault recovery in Virtex FPGAs using an external controller and an offline repair process.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">ORGANIC EMBEDDED SYSTEM (OES) ARCHITECTURE</head><p>As shown in <ref type="figure" target="#fig_0">Fig. 2</ref>, the separate layers of the OC architecture implemented in the OES are mapped to alternating vertical columns of logic slices on the Xilinx Virtex II Pro FPGA device. This column-oriented structure permits the architecture to take advantage of Xilinx partial reconfiguration technology to manipulate the bitstreams of either the AEs or FEs configurations for the fault recovery.</p><p>In OES, the AEs reduce the demand for centralized controllability as shown in <ref type="figure" target="#fig_1">Fig. 3</ref>. It consists of a Concurrent Error Detection (CED) <ref type="bibr" target="#b6">[KHAKBAZ and McCLUSKEY 1982]</ref> unit to collect and Evaluate outputs from 2 FEs, a Checksum for AE fault detection which are checked against Stored Checksum values and an Actuator. Each AE will monitor the operation of the corresponding FE component, evaluate the performance of the FE and render a local assessment on the failure status of FE. An important architectural property of the OES is that all AE components are identical in structure despite the fact that they monitor different types of FEs. The homogeneous characteristics of the AE components deliver a uniformbehavior property which is leveraged to realize a consensus-based evaluation fault-detection methodology.  In addition to the AE and FE layers, the OES architecture also contains an AS. The AS implements the consensus mechanism to evaluate the behavior of all the AEs in the system and distinguish the abnormal individuals whose behavior may be distinguished from the rest of the members in the AE population. Autonomic Evolutionary repair operators in <ref type="bibr" target="#b8">[LOHN et. al 2003]</ref> are implemented here to achieve fault recovery. All other factors being equal, the likelihood of local permanent fault of any component is proportional to the device area required for its realization. Thus, the AS is as simple as possible to reduce its complexity and corresponding likelihood of experiencing a resource fault.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">System Operation</head><p>The OES architecture supports several operational phases of interaction between the FEs, AEs, and AS. The initial state of all components is fault-free. <ref type="figure" target="#fig_2">Fig. 4</ref> shows a diagram of the flow of operations in the OES architecture as described below. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">System Initialization</head><p>FE Initialization step Three functionally identical FE configurations labeled FE, FE, and S-FE are instantiated on different physical locations. Initially, only the two FEs are active and the S-FE acts a cold spare FE. The FEs supply the output for each set of inputs applied in parallel in a Concurrent Error Detection configuration to the AE for the fault detection.</p><p>Compute Checksum step Each AE contains a Checksum Component which uses the stored outputs of the AE along with the small finite number of possible input combinations to the Evaluator and Actuator to populate the Check Sum Lookup <ref type="table">Table (CS- LUT)</ref> in the AE. This feature in the AE will be utilized to detect if the current AE is faulty in a consensus-based approach. For the benchmark circuit selected a carry and sum, the CS-LUT required a 16-entry x 4-bit memory.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">FE Fault Detection/Recovery</head><p>As depicted in <ref type="figure" target="#fig_2">Fig 4,</ref> at runtime the inputs destined to the FE are applied to both active ones under a CED strategy. After allowing for FE inputs propagation time through the AE, the expected output will be supplied to AE-CED for the fault detection. The output of the FE is then compared in the AE-CED module and any discrepancy between the two values will indicate that a fault has occurred either of one the FE or the AE-CED itself. Further detection will be required to distinguish which of the two is faulty.</p><p>If the AE component is identified as innocent then the fault which occurred in this output will be discarded and control will branch to a fault identification phase which will wakeup the cold standby FE and construct a temporary TMR system which can articulate the faulty FE under the new supplied external input. Furthermore, as described in Section 4, the actuator will initiate a repair cycle which may require automatic evolutionary repair in <ref type="bibr" target="#b8">[LOHN et. al 2003]</ref> of the identified faulty FE which will be set as standby-under-repair and the AE-CED will return to receive the remaining two active FEs' inputs. The decisionmaking procedure causes at least one throughput-delay penalty.</p><p>The AE supports two exclusive modes: FE monitor mode as described above and AE self-repair mode. Whenever the AS identifies that an AE is faulty then the AE will relinquish observation of its FE and focus on its own self-repair. Under FE monitor state, AE will keep observing the FE behavior and issue control instructions through the actuator.</p><p>The recovery procedure entails the use of alternative designs for the AE that have identical functionality but distinct physical resources. Evolutionary repair operation will manipulate the representation of the AE bitstream and evaluate each new generated offspring until the fault is occluded. This evolution may be time-consuming and halt the faulty FE operation, yet it is entirely automatic repair without any human intervention.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4">AE fault detection Phase</head><p>Three possible fault scenarios may occur inside the AE: 1. A fault may exist in the CED, Actuator, or Evaluator, 2. A fault may exist in Check Sum component, or 3. A fault may exist in the Stored CS-LUT.</p><p>All three scenarios are detected under the proposed approach. To detect if the CED, actuator, or evaluator are faulty we apply the outputs of the three components to the checksum circuit while simultaneously the inputs of the three components are applied to a parallel search circuit that will locate the input combination and its corresponding output in the CS-LUT. By the time the inputs propagate through the checksum circuit, the output from CS-LUT will be available, the two values are then compared and any discrepancy will detect a fault. The second and third scenarios will also generate a discrepancy between the Checksum component and Stored Checksum component.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">EXPERIMENTAL RESULTS</head><p>In the experiments, coverage and resolution of faults in the FE and faults in the AE are evaluated. The FE faulthandling experiments inject a stuck-at-zero or stuck-at-one fault at one of the FE's LUT input pins and the resolution process proceeds. The AE fault-handling experiment utilizes Consensus Based Evaluation (CBE) <ref type="bibr" target="#b6">[Zhang et al 2005]</ref> to detect the faulty AE in the population. Once the fault is detected, the AS generates a new population for identified AEs, reconfigures them on the logic fabric sequentially in order to evaluate their correctness. After all the configurations are evaluated, CBE keeps detecting faults in that AE under repair, until the number of newly created configuration evaluations reach predefined Evaluation Window, E w . During the AE repair, the FE will reside on the chip and generate output even under fault impact conditions. The AE units are said to be functionally identical yet physically distinct due to the fact that they all contain the same functional elements with a constraint of identical number of I/O pins. This implies that as long as the AE is designed for the largest output word-width output by any FE, then all of the FEs can differ in function and even differ in output word-width by just tying any unused input pins of the AE to ground without loss of generality.</p><p>The case study example shown in <ref type="figure" target="#fig_3">Fig. 5</ref> was implemented on the Xilinx Virtex II Pro as proof of concept to accompany other software simulations performed and presented in this section. Only a small number of resources are utilized for the AE and FE. The OES architecture in this case study consisting of a Full Adder FE unit with all of the elements in the AE Unit is realized using HDL implementation on the Xilinx Virtex II Pro FPGA using the GNAT library along with the MRRA framework and JTAG reconfiguration interface.</p><p>In <ref type="figure" target="#fig_3">Fig. 5</ref>, the FE and AE units are shown in dashed boxes. The CS-LUT is shown in the dotted box. The Evaluator consists of XOR gates to check for any discrepancy between the FE units. There are three FE units of which only two are active during runtime, the third FE is a standby, i.e. S-FE, and will only become activated once a discrepancy is detected on the FE elements. Once a discrepancy is detected, the switching logic shown within the red box (contents not shown) will be used to activate the standby FE. TMR will be used in this case for the during various evaluation times which Evolutionary Operators will be used to repair the faulty FE individual. Once evolution achieves repair, the repaired FE then becomes the S-FE. This process is repeated each time a FE discrepancy is detected.</p><p>Notice that the inputs of the FE unit are connected to all FE units including the standby FE. Discrepancy in the two FE elements is detected using XOR gates fed to an OR gate. The output of the evaluator is fed to the Actuator that uses an XOR gate to send a signal labeled FE Discrepancy Value (FE_DV) that will initiate GA operators on the FE unit once a discrepancy is detected. The outputs of the two XORs checking the two outputs of the two FE elements along with the Evaluator output and Actuator output are all fed to a checksum unit consisting of 4-to-2 compressor tree. In this particular case study only one 4-to-2 compressor is needed. To check for any discrepancy between the Checksum element and the CS-LUT during runtime, a circuit similar to the evaluator circuit is used. The outputs of the Checksum element and CS-LUT are fed to XORs and the output of the XORs are fed to an OR gate. The output of the OR gate named AE Discrepancy Value (AE_DV) will determine if a discrepancy is found between the two elements at runtime. The AE_DV is fed to the AS unit (not shown in <ref type="figure">figure)</ref> where it will be used along with CBE to confirm that the AE is in fact faulty and will cause the AS unit to initiate GA operators on the faulty AE element.  <ref type="figure" target="#fig_5">Fig. 7</ref> shows the OES evolution-based repair of the hardware prototype implemented with VHDL on the Xilinx Virtex-II Pro FPGA using the GNAT library along with the MRRA framework and JTAG reconfiguration interface. The design is that of the case study example shown in <ref type="figure">Fig. 6</ref>. The maximum fitness for case study example is 2 x 2 3 =16 since the design has two outputs AE_DV and FE_DV. The genetic operators used perform Mutation and Crossover during each generation. The Crossover operator realizes a random single-point genetic crossover on the two parent chromosomes; the Mutation operator realizes a random single bit genetic mutation on the logical representation of the logical genotype representation. The Genetic operators perform only these two operations because re-routing is not supported under any Xilinx-II Pro FPGA dynamic reconfiguration flow. It should be noted here that redundancy was manually added to the design at a percentage of 15.4% of total LUT count to allow for routing changes by virtue of remapping permutation possible among redundant logic elements. The population size was set to 10 AEs/FEs. <ref type="figure" target="#fig_5">Fig. 7</ref> shows the generation process for the OES system under stuck-at-one fault applied to one of the inputs of the AE. The system was fully repaired within 22 generations with one configuration from the population reaching the maximum fitness of 16 while the average fitness of the population reached 11 out of 16. Of course as soon as this one individual is completely repaired then it can be designated as the S-FE on the reconfigurable fabric. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">CONCLUSION</head><p>In this paper, we developed Organic Embedded System (OES) architecture for sustainable performance of reconfigurable FPGA soft cores. The architecture was developed using an OC observer/controller organization and regeneration with Evolutionary Operators. Other innovations included provision of availability during regeneration, outlier-driven repair assessment, and a uniform design for the AEs. The design objective of developing an architecture that exhibits self-adaptation and self-healing properties can be attained using such techniques for completely autonomic operation without human intervention. The OES architecture is capable of handling many single fault scenarios and several multiple fault scenarios.</p><p>Experimental results strongly supported our design objectives were met. Using logic circuits from the MCNC-91 benchmark set, availability during repair phase averaged 75.05%, 82.21%, and 65.21% for the z4ml, cm85a, and cm138a circuits respectively under stated conditions. The synthesized OES architecture was prototyped on Xilinx Virtex-II Pro FPGA device supporting partial reconfiguration to demonstrate the feasibility of the OES architecture for intrinsic regeneration of the selected circuit. Through application of genetic operators for mutation and crossover, the OES architecture successfully achieved full repair of faulty element in the presence of stuck-at-zero and stuck-at-one faults. This integrated the use of redundant LUTs inherited in the FPGAs design. This integrated approach provides an innovation in fault-handling capability not only for the FEs, but also for the AEs as well. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Circuit</head></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig. 2 :</head><label>2</label><figDesc>Fig. 2: Column-oriented OES on Xilinx Virtex II Pro FPGA platform.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Fig. 3 :</head><label>3</label><figDesc>Fig. 3: AE architecture in OES.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Fig. 4 :</head><label>4</label><figDesc>Fig. 4: OES Integrated FE and AE Failure Detection Procedure.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Fig. 5 :</head><label>5</label><figDesc>Fig.5: Gate Level Design of OES (Case study)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head></head><label></label><figDesc>Fig. 6 produced by Xilinx ISE shows the physical layout of the design shown in Fig. 5 on a Xilinx FPGA Virtex-II Pro.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Fig. 7 :</head><label>7</label><figDesc>Fig.7: Evolutionary-based Repair of OES Case Study.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0" validated="false"><head>. The ASoC platform consists of two layers: the Functional Layer and the Autonomic Layer. The Autonomic layer contains Autonomic Elements (AEs) that are responsible for correct operation of the corresponding Functional Elements (FEs) present</head><label></label><figDesc>on the Functional Layer. Every FE such as CPU, RAM, and Network Interface has a counterpart Monitor, Evaluator, and Actuator component within the Autonomic Layer. The Autonomic Layer also consists of an Autonomic Supervisor (AS) that has no counterpart on the Functional Layer. The AS is responsible for the correct functionality of all AEs on the Autonomic Layer.</figDesc><table></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1" validated="false"><head>Table 1 : MCNC-91 Benchmark Circuits Evaluated on OES Architecture</head><label>1</label><figDesc></figDesc><table></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2" validated="false"><head>Name</head><label></label><figDesc></figDesc><table>Circuit 
Function 
Inputs Outputs 
Approximate 
Gates 
z4ml 
2-bit Add 
7 
4 
20 
cm85a 
logic 
11 
3 
38 
cm138a 
Logic 
6 
8 
17 </table></figure>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">future work, we plan to evaluate extensions of the OES architecture for space-based embedded architectures. We are developing a working OES prototype on Xilinx Virtex-4 FPGA platform to supports more advanced online reconfiguration. We are also exploring new GA operators for fault-isolation and fault-correction</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Run-time Reconfigurability and other Future Trends</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Becker</forename><forename type="middle">J</forename><surname>HÃ¼bner M</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 19th</title>
		<meeting>the 19th</meeting>
		<imprint>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title/>
	</analytic>
	<monogr>
		<title level="j">Annual Symposium on Integrated Circuits and Systems</title>
		<imprint>
			<biblScope unit="page" from="9" to="11" />
			<date type="published" when="2006-08" />
			<publisher>ACM Press</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Egret: a platform for reconfigurable system-on-chip</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">[</forename><surname>Bergmann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Williams ; Bergmann N</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Williams</forename><forename type="middle">J</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of 2003 IEEE International Conference on Field-Programmable Technology (FPT)</title>
		<meeting>2003 IEEE International Conference on Field-Programmable Technology (FPT)<address><addrLine>Tokyo</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2003-12" />
			<biblScope unit="page" from="340" to="343" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bernauer</forename><forename type="middle">A</forename><surname>Bringmann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Rosenstiel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Bouajila</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Stechele</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Herkersdorf A</surname></persName>
		</author>
		<imprint/>
	</monogr>
	<note>BERNAUER et al 2006</note>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Error Detection Techniques Applicable in an Architecture Framework and Design Methodology for Autonomic SoCs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bouajila</forename><forename type="middle">A</forename><surname>Bernauer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Herkersdorf</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Rosenstiel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Bringmann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">&amp;amp;</forename><surname>Stechele W</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">1st IFIP International Conference on Biologically Inspired Cooperative Computing (BICC 2006)</title>
		<editor>Yi Pan, Franz J. Rammig, Hartmut Schmeck, and Mauricio Solar</editor>
		<meeting><address><addrLine>Boston, MA, USA</addrLine></address></meeting>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2006-08" />
			<biblScope unit="volume">216</biblScope>
			<biblScope unit="page" from="107" to="113" />
		</imprint>
	</monogr>
	<note>INFORMATIK 2006 -Informatik fÃ¼r Menschen, Lecture Notes in Informatics, KÃ¶llen Verlag</note>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Consensusbased Evaluation for Fault Isolation and On-line Evolutionary Regeneration</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Branke</forename><forename type="middle">J</forename><surname>Mnif</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>MÃ¼ller-Schloer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Prothmann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Richter U</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Rochner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><forename type="middle">;</forename><surname>Schmeck</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Carmichael C</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Caffrey</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Salazar A. ; Zhang Kand Demara R</forename><forename type="middle">F</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Khakbaz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">J</forename><surname>Mccluskey</surname></persName>
		</author>
		<ptr target="http://direct.xilinx.com/bvdocs/appnotes/xapp216.pdf" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the International Conference in Evolvable Systems (ICES&apos;05)</title>
		<editor>Tiziana Margaria, Anna Philippou, and Bernhard Steffen</editor>
		<meeting>the International Conference in Evolvable Systems (ICES&apos;05)<address><addrLine>Paphos, Cyprus; Barcelona, Spain</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1982" />
			<biblScope unit="page" from="386" to="394" />
		</imprint>
	</monogr>
<note type="report_type">Technical Report</note>
	<note>Concurrent Error Detection and Testingfor Large PLA&apos;s. Joint Special Issue on VLSI. IEEE Transaction on Electron Devices</note>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Towards a Framework and a Design Methodology for Autonomic SoC</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lipsa</forename><forename type="middle">G</forename><surname>Herkersdorf</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Rosentiel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Bringmann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">&amp;amp;</forename><surname>Stechele W</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Second International Conference on Autonomic Computing (ICAC&apos;05)</title>
		<meeting>the Second International Conference on Autonomic Computing (ICAC&apos;05)<address><addrLine>Washington, DC, USA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="2005-06" />
			<biblScope unit="page" from="391" to="392" />
		</imprint>
	</monogr>
	<note>LIPSA et al 2005</note>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">[</forename><surname>Lohn</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">A Genetic Representation for Evolutionary Fault Recovery in Virtex FPGAs</title>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Fifth International Conference on Evolvable Systems (ICES&apos;03)</title>
		<editor>A. Tyrrell, P. Haddow, and J. Torresen</editor>
		<meeting>the Fifth International Conference on Evolvable Systems (ICES&apos;03)<address><addrLine>Trondheim, Norway; Berlin</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2003-03" />
			<biblScope unit="page" from="47" to="56" />
		</imprint>
	</monogr>
	<note>Springer LNCS 2606</note>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Milliord</forename><forename type="middle">C J</forename><surname>Sharma</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">A F</forename><surname>Demara R</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Organic Computing-A New vision for distributed Embedded Systems</title>
		<idno>SCHMECK 2005] SCHMECK H. 2005</idno>
	</analytic>
	<monogr>
		<title level="m">Dynamic Voting Schemes to Enhance Evolutionary Repair in Reconfigurable Logic Devices. in Proceedings of the International Conference on Reconfigurable Computing and FPGAs (ReConFig&apos;05)</title>
		<meeting><address><addrLine>Puebla City, Mexico; Washington, DC, USA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="2005" />
			<biblScope unit="page" from="201" to="203" />
		</imprint>
	</monogr>
	<note>Proceedings of Eighth IEEE International Symposium on Object-Oriented Real-Time Distributed Computing (ISORC&apos;05)</note>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Embedded Hardware and Software Self-Testing Methodologies for Processor Cores</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sekar</forename><forename type="middle">K</forename><surname>Sanchez</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Dey</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Cheng</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chen</forename><forename type="middle">L</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceeding of the 37th Conference on Design Automation (DAC&apos;00)</title>
		<meeting>eeding of the 37th Conference on Design Automation (DAC&apos;00)<address><addrLine>Los Angeles, Ca, USA; Washington, DC, USA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="2000-06" />
			<biblScope unit="page" from="625" to="630" />
		</imprint>
	</monogr>
	<note>SEKAR et al 2000</note>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Built-In Self-Test for System-on-Chip: A Case Study</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Stroud</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Sunwoo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Garimella</forename><forename type="middle">S</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Harris</forename><forename type="middle">J</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceeding of the International Test Conference (ITC&apos;04)</title>
		<meeting>eeding of the International Test Conference (ITC&apos;04)<address><addrLine>Charlotte, NC, USA; Washington, DC, USA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="2004-10" />
			<biblScope unit="page" from="837" to="846" />
		</imprint>
	</monogr>
	<note>STROUD et al 2004</note>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title level="m" type="main">Logic synthesis and optimization benchmarks user guide version 3.0</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yang</forename><forename type="middle">S</forename></persName>
		</author>
		<imprint>
			<date type="published" when="1991-01" />
			<pubPlace>Microelectronics Center of North Carolina, Research Triangle Park, NC</pubPlace>
		</imprint>
	</monogr>
<note type="report_type">Technical Report</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
