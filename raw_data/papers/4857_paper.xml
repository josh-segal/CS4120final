<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2019-03-26T17:03+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Program Slicing</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Keith</forename><surname>Gallagher</surname></persName>
							<email>k.b.gallagher@durham.ac.uk</email>
							<affiliation key="aff0">
								<orgName type="department">Computer Science Department</orgName>
								<orgName type="laboratory">King&apos;s College London CREST Centre Strand</orgName>
								<orgName type="institution">University of Durham</orgName>
								<address>
									<addrLine>South Road Durham</addrLine>
									<postCode>DH1 3LE, WC2R 2LS</postCode>
									<settlement>London</settlement>
									<country>UK, UK</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Binkley</surname></persName>
							<email>binkley@cs.loyola.edu</email>
							<affiliation key="aff0">
								<orgName type="department">Computer Science Department</orgName>
								<orgName type="laboratory">King&apos;s College London CREST Centre Strand</orgName>
								<orgName type="institution">University of Durham</orgName>
								<address>
									<addrLine>South Road Durham</addrLine>
									<postCode>DH1 3LE, WC2R 2LS</postCode>
									<settlement>London</settlement>
									<country>UK, UK</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Program Slicing</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Program slicing is a decomposition technique that elides program components not relevant to a chosen computation, referred to as a slicing criterion. The remaining components form an executable program called a slice that computes a projection of the original pro-gram&apos;s semantics. Using examples coupled with fundamental principles, a tutorial introduction to program slicing is presented. Then applications of program slicing are surveyed, ranging from its first use as a de-bugging technique to current applications in property verification using finite state models. Finally, a summary of research challenges for the slicing community is discussed. 1 A Tribute to The Little Lisper[26] Is Column 3 a slice of Column 1 with respect to Column 2? Original Slicing Program Criterion Slice x = 42 x x = 42 d = 23 d d = 23 x = 42 x = 42 d = 23 d d = 23 Yes, Yes, Yes, regardless of the slicing criterion a program is always a slice of itself, albeit not always the best slice. A slice is computed with respect to a slicing criterion which consists of a selected variable and a program location. In the examples, the variable is listed in the middle column at the line that is the program location. Are the following slices? x = 42 d = 23 d d = 23 x = 42 x = 42 d = 23 x * On sabbatical leave from Loyola College in Maryland Yes, Yes, at the location contained in the slicing criterion , the slice and the original program compute the same value for the selected variable (this variable is henceforth termed of interest). Statements not contributing to the computation of this variable can be elided. How about a = 23 b = 42 b = 42 c = b + 2 c c = b + 2 a = 12 a = 12 x = 23 c = a + 2 c c = a + 2 Yes, Yes, to preserve semantics (value computed) of the chosen variable at the location in the slicing criterion, variables used to assign it a value are also of interest and assignments to them included in the slice. Next a = 42 a = 42 x = 2 b = 23 + a b = 23 + a y = 3 c = b + 2 c c = b + 2 Yes, variables used in assignments to variables of interest are of interest and assignments to them are included in the slice. Here, the assignment c = b + 2, causes variable b to be of interest and thus b = 23 + a is included in the slice. This makes a of interest and subsequently causes a = 42 to be included in the slice. And a = 10 b = 42 a = 20 a = 20 c = a + 2 c c = a + 2 Yes, only reaching assignments to a variable of interest are included in the slice. In this case the definition a = 20 kills the previous definition a = 10.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.1">Some Complications</head><p>while ( true ) x = 1 y = 2 y y = 2</p><p>Programs that do not terminate still have (semantically) interesting slices because non-termination can be sliced out.</p><formula xml:id="formula_3">while (P) while (P) { { if (Q) if (Q) break break b = 12 a = a + 1 a = a + 1 } a }</formula><p>The execution of the break affects the number of times the loop executes; thus, a = a + 1 is control dependent on the break and consequently the if statement.</p><formula xml:id="formula_4">if (b) goto L2 L1: L1: y = 1 y = 1 goto L3 goto L3 z = 2 L2: x = 3 goto L1 L3: L3: print(x) print(y) y</formula><p>Similar to a break statement, a goto affects the flow of control and induces control dependences.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.2">One Final Principal</head><p>Principal 4 -Union of Slices. The slice taken with respect to a set of criteria is the same as the union of the slices taken separately with respect to each of the criteria <ref type="bibr" target="#b59">[59]</ref>. Principal 4 is illustrated in <ref type="figure" target="#fig_3">Figure 1</ref>, which also illustrates Principal 3. Here slicing is used used to extract two of the three interesting subprograms from the word count program. (The three subprograms compute the number of characters, lines, and words in the program's input). The center two columns show slices taken with respect to chars and words. These two smaller programs compute only one of the three outputs. The final column shows the slice computed with respect to a criteria that contains both chars and words, which is the same as the union of the two individual slices.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Kinds of Slicing -Some Examples</head><p>The slices in Section 1 are formally syntax preserving static backward slices <ref type="bibr" target="#b18">[19,</ref><ref type="bibr" target="#b37">38,</ref><ref type="bibr" target="#b59">59]</ref>. This section introduces several other variants of program slicing.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Forward Slices</head><p>Backward slices answer the question "what program components might effect a selected computation?" The dual of backward slicing, forward slicing <ref type="bibr" target="#b9">[10,</ref><ref type="bibr" target="#b37">38]</ref>, answers the question "what program components might be effected by a selected computation?" A forward slice captures the impact of its slicing criteria <ref type="bibr" target="#b16">[17]</ref>. Forward slicing gets it's name from the ability to compute a forward slice by traversing data and control dependence edges in the forward direction. In the following example the impact of prod (i.e., those computations potentially influenced by the value assigned to prod at the point) is captured by a forward slice. sum = 0 prod = 1 prod prod = 1 i = 1 while ( i &lt; 11) { sum = sum + i prod = prod * i prod = prod * i i = i + 1 } This forward slice illustrates, among other things, that a change to the initialization of prod potentially affects (only) the computation of prod found in the loop. Because a forward slice is often not an executable program, one of the challenges posed by forward slicing is defining the semantics captured by a forward slice <ref type="bibr" target="#b9">[10]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Dynamic Slices</head><p>A static backward slice preserve the meaning of the variable(s) in the slicing criterion for all possible inputs to the program. A dynamic slice does so only for a single input <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b31">32,</ref><ref type="bibr" target="#b60">60]</ref>. The slicing criterion is augmented to include a particular program input. In the following, using the input 42, the middle two statements can be elided.</p><p>Input</p><formula xml:id="formula_5">&lt; 42 &gt; read(a) read(a) if (a &lt; 0) a = -a x = 1/a x x = 1/a</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Conditioned Slices</head><p>Conditioned slicing can be viewed as filling the gap between static and dynamic slicing. A conditioned slice preserves the semantics of the slicing criterion only for those inputs that satisfy a boolean condition <ref type="bibr" target="#b17">[18,</ref><ref type="bibr" target="#b19">20,</ref><ref type="bibr" target="#b21">22]</ref>. In the following code when the input value for a is positive, the middle two statements can be elided.</p><p>read <ref type="formula">(</ref>  Generally conditions can be placed at arbitrary program locations. In principal, such conditions can be expressed as restrictions on the allowed inputs.</p><formula xml:id="formula_6">= EOF) { { { { chars++ chars++ chars++ if (c == '\n') lines++ if (isletter(c))) if (isletter(c))) if (isletter(c))) { { { if (!inword) if (!inword) if (!inword) { { { words++ words++ words++ inword = T inword = T inword = T } } } } } } else else else inword = F inword = F inword = F read(c) read(c) read(c) read(c) } } } }</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.4">Amorphous Slices</head><p>The aforementioned slicing techniques involve two requirements: a semantic requirement whereby the slice captures some projection of the original program's semantics and a syntactic requirement whereby the slice is constructed by deleting components from the original program. Amorphous slicing relaxes the syntactic requirement and thus allows additional transformations to be applied <ref type="bibr" target="#b33">[34]</ref>. There are amorphous variants of static, dynamic, and conditioned slicing. To illustrate transformation's impact on a slice, the first example below applies constant propagation and then traditional slicing, which can then remove the first statement. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Uses of Slicing</head><p>This section considers six applications of slicing: four traditional applications and two recent applications. The first of the traditional applications is slicing's original application, debugging. This is followed by the application of slicing to testing and then to maintenance. The final traditional application is in the clustering of equivalent programs statements. The two recent applications are slicing in support of verifying state-based models and in determining the impact of a database schema change. Many of these applications exploit relationships between slices.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Debugging</head><p>Program slicing was introduced by Mark Weiser as debugging aid <ref type="bibr" target="#b58">[58,</ref><ref type="bibr" target="#b59">59]</ref>. Consider a program that outputs a wrong answer. A programmer trying to ascertain what went wrong would have less code to consider if they worked with the slice taken with respect to the errant output.</p><p>An extension of this idea further reduces the search space for the defect: consider the situation where a programmer knows that a program produced one correct and one errant output. Slices on these outputs can be used to narrow the search for the defect as it is unlikely that the statements that contribute to the correct output contain the defect <ref type="bibr" target="#b47">[47]</ref>. In the code below, the slice on the left is taken with respect to chars, which procures a faulty output (it has a seeded initialization defect). The slice in the middle is taken with respect to lines, which produces the expected output. Looking at the statements from the first slice that are not in the second, provides candidate statements likely to contain the error. Of course, there is no guarantee that the fault lies in the difference; it might be an error of omission or one error might mask another in the slice with the correct output. This application, known as program dicing <ref type="bibr" target="#b47">[47,</ref><ref type="bibr" target="#b48">48]</ref>, also shows that the study of the relationship between slices can be advantageous. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Regression Testing</head><p>The aim of regression testing is to ensure that a change to a software system does not introduce new errors in the unchanged part of the program <ref type="bibr" target="#b53">[53]</ref>. Testing effort can be reduced if fewer tests cases are run on a simpler program. Program slicing can be used to partition tests cases into those that need to be re-run, as they may have been affected by a change, and those that can be ignored, as their behavior can be guaranteed to be unaffected by the change <ref type="bibr" target="#b6">[7,</ref><ref type="bibr" target="#b8">9,</ref><ref type="bibr" target="#b53">53]</ref>. A partition is formed by finding all affected statements: those statements whose backward slice includes a new or edited statement. This set can be efficiently computed as the forward slice taken with respect to the new and edited statements. Only tests that execute an affected statement must be rerun.</p><p>Slicing can be used to further reduce the cost by reducing the size of the program that must be tested. This is done by applying semantic differencing <ref type="bibr" target="#b7">[8]</ref> to Certified, the program that previous passed the test suite, and Modified, an updated version of Certified. In the example below Certified has an initialization error (line = 1) that is fixed in Modified. The program Differences captures (in an executable program) the computations of the changed code.</p><note type="other">Running Differences on selected tests reduces cost by running fewer tests on a simpler program. Certified Modified Differences inword = F inword = F chars = 0 chars = 0 lines = 1 lines = 0 lines = 0 words = 0 words = 0 read(c) read(c) read(c) while(c != EOF) while(c != EOF) while(</note><formula xml:id="formula_7">c != EOF) { { { chars++ if (c == '\n') if (c == '\n') lines++ lines++ if (isletter(c))) if (isletter(c))) { { if (!inword) if (!inword) { { words++ words++ inword = T inword = T } } } } else else inword = F inword = F read(c) read(c) read(c) } } }</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Software Maintenance</head><p>Maintaining a large software system is a challenging task. Most programs spend 70% or more of their life time in the software maintenance phase where they are corrected and enhanced. Slicing, in the form of Decomposition Slicing <ref type="bibr" target="#b29">[30]</ref>, reduces the effort required to maintain software. The decomposition slice, taken with respect to variable v from function f , is the union of the slices taken with respect to v at each definition of v and at the end of f .</p><p>Decomposition slicing is another instance of a program slicing technique in which the relationships between slices is advantageously exploited. Returning to the slice shown in the third column of <ref type="figure" target="#fig_3">Figure 1</ref>, observe that the if statements inside the main while loop do not appear in the slices on chars or lines; they are solely contained within one slice. The same is true of the if statement in the slice on lines. Such statements are called independent. Furthermore, when all the assignments to a variable are solely within its decomposition slice then the variable is also called independent. The key insight behind the approach is that changes made to independence statements and variables cannot impact computations in other decomposition slices. The ability to delimit changes also impacts the amount of regression testing needed <ref type="bibr" target="#b28">[29,</ref><ref type="bibr" target="#b29">30]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4">Clustering Equivalent Computations</head><p>Clustering groups a set into subsets where the elements of the subsets are similar to each other, but the subsets are dissimilar. A dependence cluster is a set of program points (statements), S, that mutually depend upon one another and for which there is no other mutually dependent set that contains S. This definition is parameterized by an underlying transitive depends relation.</p><p>One possible definition for depends is that two statements, s 1 and s 2 , depend on each other if they have the same slice <ref type="bibr" target="#b14">[15]</ref>. In practice, same size can be used to approximate same slice. Empirically this approximation is 99.5% accurate <ref type="bibr" target="#b14">[15]</ref>. Using this definition, 30 of 45 programs contained a dependence cluster of at least 20% of the code and one of the programs included a cluster composed of 94% of the code.</p><p>Equivalent decomposition slices can also be used as the depends relation to construct clusters <ref type="bibr" target="#b27">[28]</ref>. Variables that have equivalent decomposition slices form equivalence classes. An empirical study of 67 C programs found that the percentage of equivalent decomposition slices ranged from 50 to 60% (p &lt; 0.005).</p><p>The negative side of large dependence can be seen in their impact on software maintenance. For example, consider trying to reuse a small component that turns out to be part of a large dependence cluster. On the other hand, having large clusters has a 'good' side: any test coverage method used for one variable in an equivalence class will apply to all the variables in that class. Furthermore, in support of program comprehension, knowing that a collection of variables belong to a cluster means that they capture the same abstraction. This observation can significantly reduce comprehension cost.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.5">Model Reduction</head><p>Recently, finite-state models have been used to specify a number of non-trivial program properties (e.g., the dead-lock freeness of a multi-threaded program). However, analyzing them is computationally expensive. Hatcliff, et al. <ref type="bibr" target="#b35">[36]</ref> and later Dwyer, et al. <ref type="bibr" target="#b22">[23]</ref> use static backward slicing to reduce the cost of property checking. The experiments make use of Indus, a library of Java program analysis and transformations tools <ref type="bibr" target="#b38">[39]</ref>.</p><p>In the earlier study, Hatcliff, et al. apply program slicing techniques to remove irrelevant code and reduce the size of the corresponding model. The study of slicing's impact considers two properties: Prop I.i states that when the main thread sends the shutdown value, stage i will eventually shutdown. Prop II.i states that stage i only shuts down after the shutdown signal has been sent from the main thread. <ref type="figure" target="#fig_6">Figure 2</ref> compares the running time for checking the two properties (I and II) using models generated first from the original program, then from the sliced program, and finally from the sliced program with remaining queue variables abstracted using a classic signs abstract interpretation over the abstract domain {pos, zero, neg, ⊤}. The cost savings from slicing comes primarily from slicing away of successive pipeline stages. Slicing based on Prop I.1 and Prop II.1 removes stages two, three and four. Generating these slice takes less than a second.</p><p>In later work, Dwyer, et al. <ref type="bibr" target="#b22">[23]</ref> compare slicing with call-graph reduction and partial order reduction (POR), which exploits the independence of transitions to create equivalence classes of paths such that only a single path from each equivalence class need be explored. The motivation for applying slicing is that while existing static analysis attempts to remove unreachable/non-accessed program components, it does not eliminate code fragments that are reachable but where the intertwined code is irrelevant to the property begin checked -a task to which slicing is well suited. They observe that on average slicing provides a factor of four improvement for nontrivial model checks. With one exception, slicing always yields a greater reduction than POR. Dwyer, et al. conclude that "slicing yields non-trivial additional reduction over partial-order reduction" and that "the reduction [due to slicing] is orthogonal to other reductions."</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.6">Database Schema Impact</head><p>In the second recent application, Maule, et al. study the impact on the source code of a relational database schema change <ref type="bibr" target="#b49">[49]</ref>. An important compromise in the approach is the amount of calling-context information processed. Context-sensitivity is a measure of how precise the calling context of a procedure is represented during analysis. A common solution is kCFA analysis using a call-string approach to handle context where only the last (or first) k calls are tracked by the analysis. Maule, et al. record call strings that represent no more than the last k call-sites; e.g., for k = 2, the most recent two call cites are included.</p><p>They employ program slicing to reduce the cost of identifying statements affected by a database scheme change. In a case study using the content management system itPublisch, which contains 78,133 lines of code with 417 query executions sites, program slicing reduced the part of the program that had to be considered by 63% (from 191,173 instructions to 70,050 instructions). <ref type="figure" target="#fig_7">Figure 3</ref> shows the execution times of their analysis for different values of k. It is clear that slicing provides a significant improvement. Furthermore, while the use of slicing always provides benefit, this benefit increases with k. Statistically, it increases as k increases at a rate of 18 seconds per unit increase in k (R 2 = 0.94). This is because when k = 1 constant costs of the dataflow analysis that underlies slicing consumes 56% of the runtime. However, by k = 9, this has dropped to just 16%.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Current and Future Challenges</head><p>This section considers two current challenges for programs slicing and then speculates as to some future challenges. The two current challenges include the implementation of slicing tools and the size of the resulting slices. Each subsection provides first a broad overview and then considers one particular aspect in greater detail.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Implementation</head><p>The first slicers were data-flow based. They sliced by solving data flow equations <ref type="bibr" target="#b46">[46,</ref><ref type="bibr" target="#b59">59]</ref>. This approach was inefficient and gave way to an approach that involves first building a dependence graph to cache the dependence information implicitly considered in the data-flow equations <ref type="bibr" target="#b32">[33,</ref><ref type="bibr" target="#b37">38,</ref><ref type="bibr" target="#b38">39,</ref><ref type="bibr" target="#b42">42,</ref><ref type="bibr" target="#b45">45,</ref><ref type="bibr" target="#b51">51]</ref>. The latter approach is preferred when a large number of slices is to be computed <ref type="bibr" target="#b15">[16,</ref><ref type="bibr" target="#b43">43]</ref>. Having a dependence graph also has the advantage of supporting other dependence based algorithms <ref type="bibr" target="#b4">[5]</ref>. Recently, improvements in dataflow analysis have led to more efficient data-flow based slicers <ref type="bibr" target="#b2">[3]</ref>. Other approaches have also been considered. Ward, for example, implements slicing on top of the FermaT transformation tool which provides a rigorous mathematical foundation <ref type="bibr" target="#b56">[56,</ref><ref type="bibr" target="#b57">57]</ref>. Ward's approach is based on set theory and mathematical logic, and is thus independent of any representation technique.</p><p>As a representative example of this challenge, the problem of slicing parallel programs is considered in greater detail <ref type="bibr" target="#b36">[37]</ref>. This requires considering three dependences beyond control and data dependence. </p><formula xml:id="formula_8">b = b * b } } { { c = b + c c = b + c d = d + c } } b = c + 1 b b = c + 1</formula><p>These two interference dependences arise as b may hold one of three values at c = b + c (11, 21, or 121), depending on the value of P, and the execution order of this assignment and the if statement.</p><p>The remaining two dependence kinds are control dependences. The first, parallel dependence, connects the statement that initiates a task and the first statement of that task. The second, a synchronization dependence, connects statement s 1 to s 2 if the start or termination of s 1 depends on the start or termination of s 2 [37].</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Size</head><p>The second current challenge facing program slicing is reducing the size of a slice. In almost all applications of program slicing, the smaller the slice the better. Empirical study places the size of the average backward slice at about one third of a program <ref type="bibr" target="#b12">[13]</ref>. While this is a significant reduction, the remaining code can still be too large to comprehend as a unit. This observation led to the introduction of techniques such as dynamic slicing <ref type="bibr" target="#b60">[60]</ref> and amorphous slicing <ref type="bibr" target="#b33">[34]</ref>.</p><p>One recent addition, thin slicing, reconsiders the fundamental dependences that slicing must capture <ref type="bibr" target="#b54">[54]</ref>. A thin slice considers only producer statements, defined in terms of direct uses of variables and is thus always a subset of the traditional slices. A direct use of a location l is a use of l excluding those that require pointer dereferencing: in the Java statement v = z.f, z is not directly used, but o.f is directly used, assuming that z points to o. Again, the crucial part of the definition is that it ignores pointers. A producer statement is then defined transitively as the variable of the criterion plus the other statements that write a value to a location used by a producer.</p><p>The following shows a thin slice, where statements in the 'full' slice but not the thin slice are called explainer statements. They capture the usual notions of control dependence and heap-based data dependence. In the example, there is a heap-based data dependence from w.f = y to v = z.f because z and w both point to the object created at x = new A(). When all of the explainers are transitively included, a traditional slice is obtained. Thin slices have been shown useful in comprehension <ref type="bibr" target="#b54">[54]</ref> where they reduce the number of statements that need to be examined in order to find an error by a factor of 3 (as compared to traditional slices), and reduce the number of statements that need to be examined for comprehension by a factor of 9 (as compared to traditional slices).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Future Research Challenges</head><p>This section concludes by considering future trends that provide research challenges for those working on and around program slicing.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Increasing Dynamic Nature of Languages</head><p>The increasingly dynamic nature of modern programming languages is an issue for all static analysis. This trend is clearly evident over the past 20 years in the transition from imperative languages to object-oriented languages to agent-based languages. In each case, it becomes less possible to predict (statically) which program elements will interact. Analysis of such programs will inevitably, become more specialized considering only certain classes of inputs or execution environments.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Slicing Will Become More Specialized</head><p>Weiser's initial study demonstrated that programmers intuitively sliced programs while debugging <ref type="bibr" target="#b58">[58]</ref>. Early slicing tools attempted to mimic this behavior. To date, these tools have failed to capture the complete intuition that programmers appear to bring to the task. Until such time as they do, slicing will continue to be used more as a building block in analysis tools rather than a discipline in and of itself.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Beyond Slicing Programs</head><p>The first slicing algorithms applied to programs and produced slices that were executable programs. This helped defined the term slice. For better or for worse, what is sliceable and what is a slice have broadened (e.g., the expansion of 'program' slicing to finite state models was described in Section 3.5). Working in this domain, Korel, et al. report a significant reduction in the size of state-based models <ref type="bibr" target="#b41">[41]</ref>. More recently, architecture descriptions written in the UML have been sliced. A Model Dependence Graph [44] supports slicing by representing UML use cases, classes, objects, and their interconnection similar to how programs are represented in Program Dependence Graph <ref type="bibr" target="#b23">[24]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Fundamental Program Building Blocks</head><p>Fifty years ago programs were composed of assembler instructions. Modern programs of higher level syntactic entities such as statements and functions. Looking forward, perhaps future programs will be composed of semantic entities. Perhaps a library of slices could be selected by a programmers and 'woven' together by a compiler. This will provide programmers with more "bang for the buck" (assuming the US dollar recovers) or perhaps better stated as more "bang for the keystroke."</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Summary</head><p>Program slicing has been applied to a range of maintenance tasks. This paper attempts to provide the intuition behind computing a program slice and considers several representative applications. Several surveys on various types and applications of program slicing have been written and provide excellent sources for further information on program slicing <ref type="bibr" target="#b11">[12,</ref><ref type="bibr" target="#b13">14,</ref><ref type="bibr" target="#b40">40,</ref><ref type="bibr" target="#b55">55]</ref>. Finally, this paper lays out some challenges and future work for program slicing researchers.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head></head><label></label><figDesc>Yes, Yes, Yes, regardless of the slicing criterion a pro- gram is always a slice of itself, albeit not always the best slice. A slice is computed with respect to a slic- ing criterion which consists of a selected variable and a program location. In the examples, the variable is listed in the middle column at the line that is the program location. Are the following slices?On sabbatical leave from Loyola College in Maryland Yes, Yes, at the location contained in the slicing crite- rion, the slice and the original program compute the same value for the selected variable (this variable is henceforth termed of interest). Statements not con- tributing to the computation of this variable can be elided. How aboutYes, Yes, to preserve semantics (value computed) of the chosen variable at the location in the slicing criterion, variables used to assign it a value are also of interest and assignments to them included in the slice. NextYes, variables used in assignments to variables of in- terest are of interest and assignments to them are in- cluded in the slice. Here, the assignment c = b + 2, causes variable b to be of interest and thus b = 23 + a is included in the slice. This makes a of interest and subsequently causes a = 42 to be included in the slice. And</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>A</head><label></label><figDesc>statement that controls the execution of a statement in the slice is included in the slice. Slicing takes tran- sitive control dependence into account. Here a = 21 is control dependent on if (Q), which is control dependent on if (P). Is this a slice?</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 1 . Three slices of the word count program.</head><label>1</label><figDesc>Figure 1. Three slices of the word count program.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head></head><label></label><figDesc>In the next example partial evaluation [11, 27, 50] like behavior is observed in the transformation of a statically determinable variable into a simple assign- ment.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 2 .</head><label>2</label><figDesc>Figure 2. Slicing's impact on model checking.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Figure 3 . Slicing's influence on determining the impact of a database schema change.</head><label>3</label><figDesc>Figure 3. Slicing's influence on determining the impact of a database schema change.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head></head><label></label><figDesc>First, an interference dependence can be viewed as the par- allelized extension of data dependence. It connects a definition of a shared variable to a use of the shared variable in a different thread when the two may exe- cute asynchronously. In the following the use of b in c = b + c makes this statement interference dependent on the two assignments to b from the other thread.</figDesc></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Acknowledgements</head><p>Our special thanks to the following for their comments and suggestions Francoise Balmas, Andrea De Lucia, Mark Harman, Michael Hind, Jim Lyle, Rajib Mall, Thomas Reps, Frank Tip, Paolo Tonella, Neil Walkinshaw, and Martin Ward. Dave Binkley is supported by EPSRC grant GR/F010443 to the CREST Centre.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Dynamic program slicing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Agrawal</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">R</forename><surname>Horgan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM SIGPLAN Conference on Programming Language Design and Implementation</title>
		<imprint>
			<date type="published" when="1990-06" />
			<biblScope unit="page" from="246" to="256" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Flow insensitive points-to sets</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Anderson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Binkley</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Rosay</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Teitelbaum</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the first IEEE Workshop on Source Code Analysis and Manipulation</title>
		<meeting>the first IEEE Workshop on Source Code Analysis and Manipulation<address><addrLine>Los Alamitos, California, USA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society Press</publisher>
			<date type="published" when="2001-11" />
			<biblScope unit="page" from="79" to="89" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Implementation techniques for efficient data-flow analysis of large programs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">C</forename><surname>Atkinson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">G</forename><surname>Griswold</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE International Conference on Software Maintenance (ICSM&apos;01)</title>
		<meeting><address><addrLine>Los Alamitos, California, USA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society Press</publisher>
			<date type="published" when="2001-11" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Slicing programs with arbitrary control-flow</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Ball</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Horwitz</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">editor, 1 st Conference on Automated Algorithmic Debugging</title>
		<editor>P. Fritzson</editor>
		<meeting><address><addrLine>Linköping, Sweden</addrLine></address></meeting>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="1993" />
			<biblScope unit="page" from="206" to="222" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Using dependence graphs as a support to document programs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Balmas</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2 st IEEE International Workshop on Source Code Analysis and Manipulation</title>
		<meeting><address><addrLine>Los Alamitos, California, USA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society Press</publisher>
			<date type="published" when="2002-10" />
			<biblScope unit="page" from="145" to="154" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Precise executable interprocedural slices</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Binkley</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Letters on Programming Languages and Systems</title>
		<imprint>
			<biblScope unit="volume">3</biblScope>
			<biblScope unit="issue">1-4</biblScope>
			<biblScope unit="page" from="31" to="45" />
			<date type="published" when="1993" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Semantics guided regression test cost reduction</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Binkley</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Software Engineering</title>
		<imprint>
			<biblScope unit="volume">23</biblScope>
			<biblScope unit="issue">8</biblScope>
			<biblScope unit="page" from="498" to="516" />
			<date type="published" when="1997-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Semantics guided regression test cost reduction</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Binkley</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Software Engineering</title>
		<imprint>
			<biblScope unit="volume">23</biblScope>
			<biblScope unit="issue">8</biblScope>
			<biblScope unit="page" from="498" to="516" />
			<date type="published" when="1997-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title level="m" type="main">The application of program slicing to regression testing. Information and Software Technology Special Issue on Program Slicing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Binkley</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1998" />
			<biblScope unit="volume">40</biblScope>
			<biblScope unit="page" from="583" to="594" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Theoretical foundations of dynamic program slicing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Binkley</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Danicic</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Gyimóthy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Harman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Akos</forename><surname>Kiss</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Korel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Theoretical Computer Science</title>
		<imprint>
			<biblScope unit="volume">360</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="23" to="41" />
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">A formal relationship between program slicing and partial evaluation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Binkley</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Danicic</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Harman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Howroyd</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Ouarbya</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Formal Aspects of Computing</title>
		<imprint>
			<biblScope unit="volume">18</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="103" to="119" />
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Program slicing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Binkley</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><forename type="middle">B</forename><surname>Gallagher</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Advances in Computing</title>
		<editor>M. Zelkowitz</editor>
		<imprint>
			<publisher>Academic Press</publisher>
			<date type="published" when="1996" />
			<biblScope unit="volume">43</biblScope>
			<biblScope unit="page" from="1" to="50" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">An empirical study of static program slice size</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Binkley</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Gold</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Harman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Software Engineering and Methodology</title>
		<imprint>
			<biblScope unit="volume">16</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="1" to="32" />
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">A survey of empirical results on program slicing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Binkley</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Harman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Advances in Computers</title>
		<imprint>
			<biblScope unit="volume">62</biblScope>
			<biblScope unit="page" from="105" to="178" />
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Locating dependence clusters and dependence pollution</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Binkley</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Harman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">21 st IEEE International Conference on Software Maintenance</title>
		<meeting><address><addrLine>Los Alamitos, California, USA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society Press</publisher>
			<date type="published" when="2005" />
			<biblScope unit="page" from="177" to="186" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Empirical study of optimization techniques for massive slicing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Binkley</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Harman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Krinke</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Programming Languages and Systems</title>
		<imprint>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
	<note>To appear</note>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Computing ripple effect for software maintenance</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">E</forename><surname>Black</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Software Maintenance and Evolution: Research and Practice</title>
		<imprint>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="page" from="263" to="279" />
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<title level="m" type="main">Conditioned program slicing. Information and Software Technology Special Issue on Program Slicing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Canfora</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Cimitile</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>De Lucia</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1998" />
			<biblScope unit="volume">40</biblScope>
			<biblScope unit="page" from="595" to="607" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">A formalisation of the relationship between forms of program slicing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Danicic</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Binkley</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Gyimóthy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Harman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Akos</forename><surname>Kiss</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Korel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Science of Computer Programming</title>
		<imprint>
			<biblScope unit="volume">62</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="228" to="252" />
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Building executable union slices using conditioned slicing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Danicic</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">De</forename><surname>Lucia</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Harman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">12 th International Workshop on Program Comprehension</title>
		<meeting><address><addrLine>Los Alamitos, California, USA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society Press</publisher>
			<date type="published" when="2004-06" />
			<biblScope unit="page" from="89" to="97" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">A lazy semantics for program slicing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Danicic</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Harman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Howroyd</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Ouarbya</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">1 st. International Workshop on Programming Language Interference and Dependence</title>
		<meeting><address><addrLine>Verona, Italy</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2004-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">ConSUS: A scalable approach to conditioned slicing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Daoudi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Danicic</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Howroyd</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Harman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Fox</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Ouarbya</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Ward</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Working Conference on Reverse Engineering</title>
		<imprint>
			<publisher>IEEE Computer Society Press</publisher>
			<date type="published" when="2002-10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Evaluating the effectiveness of slicing for model reduction of concurrent objectoriented programs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">B</forename><surname>Dwyer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Hatcliff</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Hoosier</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><forename type="middle">P</forename><surname>Ranganath</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Robby</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Wallentine</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">TACAS</title>
		<imprint>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">The program dependence graph and its use in optimization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Ferrante</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Ottenstein</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Warren</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Programming Languages and Systems</title>
		<imprint>
			<biblScope unit="volume">9</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="319" to="349" />
			<date type="published" when="1987-07" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">The program dependence graph and its use in optimization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Ferrante</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><forename type="middle">J</forename><surname>Ottenstein</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">D</forename><surname>Warren</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Programming Languages and Systems</title>
		<imprint>
			<biblScope unit="volume">9</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="319" to="349" />
			<date type="published" when="1987-07" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">P</forename><surname>Friedman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Felleisen</surname></persName>
		</author>
		<title level="m">The little LISPer</title>
		<meeting><address><addrLine>USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1986" />
		</imprint>
		<respStmt>
			<orgName>SRA School Group</orgName>
		</respStmt>
	</monogr>
	<note>2nd ed.</note>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Generalized partial computation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Futamura</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Nogi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IFIP TC2 Workshop on Partial Evaluation and Mixed Computation</title>
		<editor>D. Bjrner, A. P. Ershov, and N. D. Jones</editor>
		<meeting><address><addrLine>North-Holland</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1987" />
			<biblScope unit="page" from="133" to="151" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">An empirical study of computation equivalence as determined by decomposition slice equivalence</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Gallagher</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Binkley</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">10 th IEEE Working Conference on Reverse Engineering (WCRE 2003)</title>
		<meeting><address><addrLine>Victoria, British Columbia, Canada</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society Press</publisher>
			<date type="published" when="2003-11" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">Reducing regression test size by exclusion</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Gallagher</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Hall</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Black</surname></persName>
		</author>
		<idno>1-4244-1256-0</idno>
	</analytic>
	<monogr>
		<title level="m">23rd International Conference on Software Maintenance</title>
		<meeting><address><addrLine>Paris, France</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2007" />
			<biblScope unit="page" from="157" to="166" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">Using program slicing in software maintenance</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><forename type="middle">B</forename><surname>Gallagher</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">R</forename><surname>Lyle</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Software Engineering</title>
		<imprint>
			<biblScope unit="volume">17</biblScope>
			<biblScope unit="issue">8</biblScope>
			<biblScope unit="page" from="751" to="761" />
			<date type="published" when="1991-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<monogr>
		<title level="m" type="main">Non-standard semantics for program slicing. Higher-Order and Symbolic Computation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Giacobazzi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Mastroeni</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2003" />
			<biblScope unit="volume">16</biblScope>
			<biblScope unit="page" from="297" to="339" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">Dynamic program slicing based on dependence graphs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Conference on Software Maintenance</title>
		<imprint>
			<date type="published" when="1991" />
			<biblScope unit="page" from="191" to="200" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<monogr>
		<title level="m" type="main">Grammatech Inc. The codesurfer slicing system</title>
		<imprint>
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title level="a" type="main">Amorphous program slicing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Harman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Binkley</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Danicic</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Systems and Software</title>
		<imprint>
			<biblScope unit="volume">68</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="45" to="64" />
			<date type="published" when="2003-10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<monogr>
		<title level="m" type="main">A framework for static slicers of unstructured programs. Information and Software Technology</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Harman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Lakhotia</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Binkley</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2006" />
			<biblScope unit="volume">48</biblScope>
			<biblScope unit="page" from="549" to="565" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<monogr>
		<title level="m" type="main">Slicing software for model construction. Higher-Order and Symbolic Computation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Hatcliff</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">B</forename><surname>Dwyer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Zheng</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2000-12" />
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="page" from="315" to="353" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<analytic>
		<title level="a" type="main">Static interprocedural slicing of shared memory parallel programs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Hisley</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">J</forename><surname>Bridges</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><forename type="middle">L</forename><surname>Pollock</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">PDPTA &apos;02: Proceedings of the International Conference on Parallel and Distributed Processing Techniques and Applications</title>
		<imprint>
			<publisher>CSREA Press</publisher>
			<date type="published" when="2002" />
			<biblScope unit="page" from="658" to="664" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b37">
	<analytic>
		<title level="a" type="main">Interprocedural slicing using dependence graphs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Horwitz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Reps</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Binkley</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Programming Languages and Systems</title>
		<imprint>
			<biblScope unit="volume">12</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="26" to="61" />
			<date type="published" when="1990" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b38">
	<analytic>
		<title level="a" type="main">Kaveri: Delivering the Indus java program slicer to Eclipse</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Jayaraman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><forename type="middle">P</forename><surname>Ranganath</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Hatcliff</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">LNCS</title>
		<imprint>
			<biblScope unit="volume">3442</biblScope>
			<biblScope unit="page" from="269" to="273" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b39">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Springer-Verlag</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2005-04" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b40">
	<analytic>
		<title level="a" type="main">Interprocedural dynamic slicing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Kamkar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Shahmehri</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Fritzson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 4 th Conference on Programming Language Implementation and Logic Programming</title>
		<meeting>the 4 th Conference on Programming Language Implementation and Logic Programming</meeting>
		<imprint>
			<date type="published" when="1992" />
			<biblScope unit="page" from="370" to="384" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b41">
	<analytic>
		<title level="a" type="main">Slicing of state based models</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Korel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Singh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Tahat</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Vaysburg</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE International Conference on Software Maintenance (ICSM&apos;03)</title>
		<meeting><address><addrLine>Los Alamitos, California, USA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society Press</publisher>
			<date type="published" when="2003-09" />
			<biblScope unit="page" from="34" to="43" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b42">
	<analytic>
		<title level="a" type="main">Static slicing of threaded programs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Krinke</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM SIGPLAN-SIGSOFT Workshop on Program Analysis for Software Tools and Engineering (PASTE&apos;98)</title>
		<imprint>
			<date type="published" when="1998-06" />
			<biblScope unit="page" from="35" to="42" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b43">
	<analytic>
		<title level="a" type="main">Evaluating context-sensitive slicing and chopping</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Krinke</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE International Conference on Software Maintenance</title>
		<meeting><address><addrLine>Los Alamitos, California, USA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society Press</publisher>
			<date type="published" when="2002-10" />
			<biblScope unit="page" from="22" to="31" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b44">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Lallchandni</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Mall</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
	<note>Personal communication</note>
</biblStruct>

<biblStruct xml:id="b45">
	<analytic>
		<title level="a" type="main">Slicing object-oriented software</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><forename type="middle">D</forename><surname>Larsen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">J</forename><surname>Harrold</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 18th International Conference on Software Engineering</title>
		<meeting>the 18th International Conference on Software Engineering<address><addrLine>Berlin</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1996" />
			<biblScope unit="page" from="495" to="505" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b46">
	<analytic>
		<title level="a" type="main">Unravel: A CASE tool to assist evaluation of high integrity software</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">R</forename><surname>Lyle</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">R</forename><surname>Wallace</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">R</forename><surname>Graham</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><forename type="middle">B</forename><surname>Gallagher</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">P</forename><surname>Poole</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Binkley</surname></persName>
		</author>
		<idno>NI- STIR 5691</idno>
	</analytic>
	<monogr>
		<title level="m">Requirements and design</title>
		<meeting><address><addrLine>Gaithersburg, MD 20899</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1995" />
		</imprint>
		<respStmt>
			<orgName>US Department of Commerce, Technology Administration, National Institute of Standards and Technology, Computer Systems Laboratory</orgName>
		</respStmt>
	</monogr>
<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b47">
	<analytic>
		<title level="a" type="main">Automatic program bug location by program slicing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">R</forename><surname>Lyle</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Weiser</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2 nd International Conference on Computers and Applications</title>
		<meeting><address><addrLine>Los Alamitos, California, USA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society Press</publisher>
			<date type="published" when="1987" />
			<biblScope unit="page" from="877" to="882" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b48">
	<analytic>
		<title level="a" type="main">Experiments on slicingbased debugging aids</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">R</forename><surname>Lyle</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">D</forename><surname>Weiser</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Empirical Studies of Programmers. Ablex Publishing Corporation</title>
		<editor>E. Soloway and S. Iyengar</editor>
		<meeting><address><addrLine>Norwood, New Jersey</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1986" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b49">
	<analytic>
		<title level="a" type="main">Impact analysis of database schema changes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Maule</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Emmerich</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Rosenblum</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">20 th IEEE International Conference and Software Engineering (ICSE</title>
		<imprint>
			<publisher>IEEE Computer Society Press</publisher>
			<date type="published" when="2008-05" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b50">
	<analytic>
		<title level="a" type="main">Techniques for partial evaluation of imperative programs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">U</forename><surname>Meyer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Conference on Partial Evaluation and Semantics-Based Program Manipulation (PEPM)</title>
		<imprint>
			<date type="published" when="1991" />
			<biblScope unit="volume">26</biblScope>
		</imprint>
	</monogr>
	<note>Proceedings in SIGPlan Notices</note>
</biblStruct>

<biblStruct xml:id="b51">
	<analytic>
		<title level="a" type="main">The program dependence graph in software development environments</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><forename type="middle">J</forename><surname>Ottenstein</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><forename type="middle">M</forename><surname>Ottenstein</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the ACM SIGSOFT/SIGPLAN Software Engineering Symposium on Practical Software Development Environmt, SIGPLAN Notices</title>
		<meeting>the ACM SIGSOFT/SIGPLAN Software Engineering Symposium on Practical Software Development Environmt, SIGPLAN Notices</meeting>
		<imprint>
			<date type="published" when="1984" />
			<biblScope unit="volume">19</biblScope>
			<biblScope unit="page" from="177" to="184" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b52">
	<monogr>
		<title level="m" type="main">The semantics of program slicing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Reps</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Yang</surname></persName>
		</author>
		<idno>777</idno>
		<imprint>
			<date type="published" when="1988" />
		</imprint>
		<respStmt>
			<orgName>University of Wisconsin</orgName>
		</respStmt>
	</monogr>
<note type="report_type">Technical Report Technical Report</note>
</biblStruct>

<biblStruct xml:id="b53">
	<analytic>
		<title level="a" type="main">Analyzing regression test selection techniques</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Rothermel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">J</forename><surname>Harrold</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Software Engineering</title>
		<imprint>
			<biblScope unit="volume">22</biblScope>
			<biblScope unit="issue">8</biblScope>
			<biblScope unit="page" from="529" to="551" />
			<date type="published" when="1996-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b54">
	<analytic>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Sridharan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">J</forename><surname>Fink</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Bodik</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Thin slicing. SIGPLAN Not</title>
		<imprint>
			<biblScope unit="volume">42</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="112" to="122" />
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b55">
	<analytic>
		<title level="a" type="main">A survey of program slicing techniques</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Tip</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Programming Languages</title>
		<imprint>
			<biblScope unit="volume">3</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="121" to="189" />
			<date type="published" when="1995-09" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b56">
	<analytic>
		<title level="a" type="main">Program slicing via FermaT transformations</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Ward</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">26 th IEEE Annual Computer Software and Applications Conference (COMPSAC 2002)</title>
		<meeting><address><addrLine>Los Alamitos, California, USA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society Press</publisher>
			<date type="published" when="2002-08" />
			<biblScope unit="page" from="357" to="362" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b57">
	<analytic>
		<title level="a" type="main">Slicing as a program transformation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Ward</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Zedan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Programming Languages and Systems</title>
		<imprint>
			<biblScope unit="volume">29</biblScope>
			<biblScope unit="issue">2</biblScope>
			<date type="published" when="2007-04" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b58">
	<analytic>
		<title level="a" type="main">Programmers use slices when debugging</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Weiser</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Communications of the ACM</title>
		<imprint>
			<biblScope unit="volume">25</biblScope>
			<biblScope unit="issue">7</biblScope>
			<biblScope unit="page" from="446" to="452" />
			<date type="published" when="1982-07" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b59">
	<analytic>
		<title level="a" type="main">Program slicing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Weiser</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Software Engineering</title>
		<imprint>
			<biblScope unit="volume">10</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="352" to="357" />
			<date type="published" when="1984" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b60">
	<analytic>
		<title level="a" type="main">Precise dynamic slicing algorithms</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Gupta</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Zhang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE/ACM International Conference on Software Engineering</title>
		<meeting><address><addrLine>Portland, Oregon</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2003-05" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
