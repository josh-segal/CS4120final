<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2019-03-26T17:02+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Using constraints for Norm-aware BDI Agents</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Felipe</forename><surname>Meneguzzi</surname></persName>
							<email>meneguzz@cs.cmu.edu</email>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wamberto</forename><surname>Vasconcelos</surname></persName>
							<email>wvasconcelos@acm.org</email>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nir</forename><surname>Oren</surname></persName>
							<email>n.oren@abdn.ac.uk</email>
						</author>
						<author>
							<affiliation key="aff0">
								<orgName type="department" key="dep1">Dept. of Computing Science</orgName>
								<orgName type="department" key="dep2">Dept. of Computing Science</orgName>
								<orgName type="institution" key="instit1">Robotics Institute Carnegie Mellon University Pittsburgh</orgName>
								<orgName type="institution" key="instit2">University of Aberdeen</orgName>
								<address>
									<postCode>15213</postCode>
									<settlement>Aberdeen</settlement>
									<region>PA</region>
									<country key="GB">UK</country>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff1">
								<orgName type="institution">University of Aberdeen</orgName>
								<address>
									<settlement>Aberdeen</settlement>
									<country key="GB">UK</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Using constraints for Norm-aware BDI Agents</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Systems of autonomous and self-interested agents interacting to achieve individual and collective goals may exhibit undesirable or unexpected properties if left unconstrained. Using deontic concepts of obligations, permissions and prohibitions to describe, what must, may and should not be done, norms have been widely proposed as a means of defining and enforcing societal constraints. Recent efforts to provide norm-enabled agent architectures that limit plan choices suffer from interfering with an agent&apos;s reasoning process, and thus limit autonomy more than is required by the norms alone. In response, in this paper we describe nu-BDI, an extension of the BDI architecture, which enables normative reasoning, providing agents with a means to choose and customise plans (and their constituent actions), so as to ensure compliance with norms. We make three significant contributions, in providing: fine-grained tailoring of plan restrictions ; a plan annotation mechanism to identify violating plans, and limit possible plan instantiations; and a technique allowing the selective and incremental violation of norms in cases where goal achievement would not otherwise be possible.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>I. INTRODUCTION</head><p>Systems of autonomous and self-interested agents interacting to achieve individual and collective goals may exhibit undesirable or unexpected properties if left unconstrained. One way to address this issue, in both human and artificial societies, has been through the use of norms, which have been proposed as a means of defining and enforcing constraints to ensure that such undesired behaviour is avoided if agents are norm-compliant (cf. <ref type="bibr" target="#b10">[11]</ref> and <ref type="bibr" target="#b5">[6]</ref>). Norms are generally specified using deontic concepts of obligations, permissions and prohibitions to identify, respectively, what must, may and should not be done so as to ensure certain system properties. Early work on normative systems focused on model-theoretic or philosophical aspects of deontic logics <ref type="bibr" target="#b17">[18]</ref>, but more recent work has addressed how norms may be more suitably represented in computational systems (e.g., <ref type="bibr" target="#b12">[13]</ref> and <ref type="bibr" target="#b13">[14]</ref>), their enforcement <ref type="bibr" target="#b7">[8]</ref>, and their impact on the society as a whole, abstracting away the details of mechanisms through which individual agents reason with and about norms and how individual behaviours are affected by norms.</p><p>However, practical normative systems require analysis and specification of the processes through which norms are recognised, decisions about whether to comply with them are taken, and behaviour is adjusted appropriately. Some recent efforts in this direction have sought to provide norm-enabled architectures (e.g., <ref type="bibr" target="#b11">[12]</ref> and <ref type="bibr" target="#b14">[15]</ref>) to specify how an agent's behaviour may be constrained to comply with norms in terms of permitted or forbidden mental states. For example, compliance with an obligation to move to a certain location limits an agent's choice of plans containing moving actions to only those in which the target of the actions is the obliged location. While such architectures capture this notion at a basic level, for example in preventing parts of a plan library from being adopted <ref type="bibr" target="#b14">[15]</ref>, or replacing the goals of an agent with the fulfilment of specific norms <ref type="bibr" target="#b11">[12]</ref>, they suffer from interfering with an agent's reasoning process, and thus limit autonomy more than is required by the norms alone.</p><p>In response, in this paper we introduce Î½-BDI, an extension of the BDI architecture <ref type="bibr" target="#b15">[16]</ref> that enables normative reasoning, and provides a means for agents to choose and customise plans (and their constituent actions), so as to ensure compliance with norms. The paper makes three significant contributions. First, it avoids the rather coarse blanket retraction of specific plans (as adopted in previous work) by introducing constraints, enabling fine-grained tailoring of plan restrictions. Second, it provides a plan annotation mechanism used as an efficient means of identifying (and potentially avoiding) plans that violate norms by examining norm scope (in relation to actions), and limiting possible plan instantiations. This effectively transforms normative restrictions into extended context conditions that incur a similar computational overhead as selecting a plan. Finally, it provides a technique for the selective and incremental violation of norms in cases where goal achievement would not be possible otherwise. Importantly, unlike some earlier efforts, such agents are able to comply with specific normative stipulations with minimum disruption to traditional non-norm influenced reasoning.</p><p>To illustrate our approach, we adopt a scenario in which software agents support humans responding to an emergency situation. Humans communicate with each other and synchronise their activities through personal assistants responsible for intermediating communication among members of a team, prompting their human counterparts for actions to be carried out, as well as providing information to help humans decide which course of action to take. We address the situation in which heavy and continuous rain in an area prone to flooding has led to emergency services being put on alert: a team of humans supported by personal assistants is to carry out alternative plans, depending on the current conditions (e.g., severity of the flooding, size of the affected area, which buildings are more at risk, the people affected, etc.). The personal assistants monitor the latest information on weather and rising levels of water, and also have access to data on high-security installations (e.g., power plants, fuel and chemical depots, etc.), high-risk buildings (e.g., hospitals with intensive care patients, primary schools, prisons, etc.), routes for evacuation, and so on. They have the following plan available, which we use to illustrate our approach:</p><p>If one detects that the level of flooding in an area X is medium, and if the area is of high-risk (that is, it contains high-risk buildings), then the plan is to: i) isolate the area (to prevent people entering it); ii) evacuate everyone from the affected area to another area; and iii) reroute the traffic to another area. In our scenario we also assume two norms:</p><p>1) It is forbidden to evacuate an area X to an area Y , if area Y is unsafe. This prohibition should be revoked if area Y becomes safe. 2) It is obligatory to reroute traffic through Z to avoid area X, if area X is deemed not safe. This obligation is revoked when area X becomes safe again. We start the paper by reviewing the BDI agent model and introducing a basic interpreter in Section II. In order to define our proposed extension, we introduce in Section III a notation for precisely specifying normative restrictions, including restrictions over acceptable domains. Using this notation, we develop in Section IV an agent architecture capable of reasoning with these norms, thus affecting specific plan instances that are adopted, deciding on norm compliance as plan instances are selected. In doing so, we fulfil the need of pragmatic normative agent architectures capable of filtering norm compliant plans and decide upon them. Finally, we draw conclusions and point to future work in Section V.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>II. BDI REASONING</head><p>In this section we review the well-known BDI architecture, based on Bratman's philosophical model of reasoning centred around the three mental components of beliefs, desires and intentions (BDI) <ref type="bibr" target="#b1">[2]</ref>. We use this as the foundation of our norm-aware architecture.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Preliminaries</head><p>In order to explain the operation of Î½-BDI, we need to introduce some notation and definitions. We use first-order constructs for various elements of the agents and norms.</p><p>Definition 1: A term, denoted generically as Ï , is a variable w, x, y, z (with or without subscripts), a constant a, b, c (with or without subscripts) or f n (Ï 0 , . . . , Ï n ), that is, an n-ary function f n applied to (possibly nested) terms Ï 0 , . . . , Ï n .</p><p>Definition 2: A first-order atomic formula (or a predicate), denoted as Ï, is any construct of the form p n (Ï 0 , . . . , Ï n ), where p n is an n-ary predicate symbol applied to terms Ï 0 , . . . , Ï n . A first-order formula, denoted as Î¦, is defined as</p><formula xml:id="formula_0">Î¦ ::= Î¦ â§ Î¦|Â¬Î¦|âx.Î¦|Ï.</formula><p>We assume the usual abbreviations: Î¦ â¨ Î¦ stands for Â¬(Â¬Î¦ â§ Â¬Î¦ ), âx.Î¦ stands for Â¬âx.Â¬Î¦, Î¦ â Î¦ stands for</p><formula xml:id="formula_1">Â¬Î¦ â¨ Î¦ and Î¦ â Î¦ stands for (Î¦ â Î¦ ) â§ (Î¦ â Î¦).</formula><p>Additionally, we also adopt the equivalence {Î¦ 1 , . . . , Î¦ n } â¡ (Î¦ 1 â§ Â· Â· Â· â§ Î¦ n ) and use these interchangeably. In our mechanisms we use first-order unification <ref type="bibr" target="#b4">[5]</ref> which is based on the concept of substitutions.</p><p>Definition 3: A substitution Ï is a finite and possibly empty set of pairs x/Ï , where x is a variable and Ï is a term. We define the application of a substitution as follows:</p><p>1) c Â· Ï = c for a constant c.</p><formula xml:id="formula_2">2) x Â· Ï = Ï Â· Ï if x/Ï â Ï; otherwise x Â· Ï = x. 3) p n (Ï 0 , . . . , Ï n ) Â· Ï = p n (Ï 0 Â· Ï, .</formula><p>. . , Ï n Â· Ï). Unifications can be composed; that is, for any</p><formula xml:id="formula_3">Ï 1 = {x 1 /Ï 1 , . . . , x n /Ï n } and Ï 2 = {y 1 /Ï 1 , . . . , y k /Ï k }, their composition, denoted as Ï 1 Ï 2 , is defined as {x 1 /(Ï 1 Â· Ï 2 ), . . . , x n /(Ï n Â· Ï 2 ), z 1 /(z 1 Â· Ï 2 ), . . . , z m /(z m Â· Ï 2 )}, where {z 1 , . . . , z m } are those variables in {y 1 , . . . , y k } that are not in {x 1 , . . . , x n }. A substitution Ï is a unifier of two terms Ï 1 , Ï 2 , if Ï 1 Â· Ï = Ï 2 Â· Ï. Definition 4: unify(Ï 1 , Ï 2 , Ï) holds iff Ï 1 Â· Ï = Ï 2 Â· Ï, for some Ï. unify(p n (Ï 0 , . . . , Ï n ), p n (Ï 0 , . . . , Ï n ), Ï) holds iff unify(Ï i , Ï i , Ï), 0 â¤ i â¤ n.</formula><p>Two terms Ï 1 , Ï 2 are related through the unify relation if there exists a substitution Ï that makes the terms syntactically equivalent. We assume a suitable implementation of a unification algorithm for unify to determine the existence of such a substitution.</p><p>We denote as Â¯ Ï a first-order predicate whose terms are either constants or variables associated (via a substitution) with constants. Here, we adopt Prolog's convention <ref type="bibr" target="#b0">[1]</ref> and use strings starting with a capital letter to represent variables and strings starting with a small letter to represent constants. We assume the availability of a sound and complete first-order inference mechanism 1 which decides if Î¦ can be inferred from Î¦, denoted as Î¦ Î¦ . In this paper we use a mechanism to determine if a formula Î¦ can be inferred from a set of ground predicates, and, if so, under which substitution; that is, { Â¯ Ï 0 , . . . , Â¯ Ï n } Î¦ Â· Ï.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Agents</head><p>In this work we consider an abstract BDI interpreter, inspired by the dMARS architecture <ref type="bibr" target="#b3">[4]</ref>. We define an agent in terms of its information model as follows. <ref type="bibr" target="#b1">2</ref> Definition 5: An agent is a tuple Ag, Rl , Ev , Bel , Plib, Int, where Ag is the agent identifier, Rl is a set of roles, Ev is a queue of events, Bel is a belief base, Plib is a plan library, and Int is an intention structure.</p><p>The Rl component is a finite and non-empty set of roles {r 1 , . . . , r n }, used to identify stereotypical agents classes to which one belongs (e.g. {fire marshall , evacuation team}). Recently perceived events are stored in a queue and ordered by arrival time. An event may be a belief addition or deletion, or a goal addition or deletion. Belief additions are positive ground predicates perceived as true, and belief deletions are negative ground predicates perceived as false. Goal additions indicate new goals posted, and goal deletions represent goals dropped for some reason.</p><p>Definition 6: An event queue Ev is composed of ground first-order predicates representing events [e 1 , . . . , e n ] ordered by occurrence time. Events e i can be one of four possible cases: i) a belief addition + Â¯ Ï; ii) a belief deletion â Â¯ Ï; iii) a goal addition +! Â¯ Ï; or iv) a goal deletion â! Â¯ Ï. The belief base comprises a set of logic predicates, which can be queried through an entailment relation, as follows.</p><p>Definition 7: A belief base Bel is a finite and possibly empty set of ground first-order logic predicates { Â¯ Ï 1 , . . . , Â¯ Ï n }, with an associated logical entailment relation for first-order formulae.</p><p>The plan library, defined below, stores the plans of action available. Each step in a plan body may be either an action (causing effects in the environment) or a subgoal (causing the addition of a new plan to the intention structure).</p><p>Definition 8: A plan library Plib is a finite and possibly empty set of uninstantiated plans {P 1 , . . . , P n }. Each plan P i is a tuple t, c, bd where t is an invocation condition (cf. Definition 6), indicating the event that causes the plan is to be adopted, c is a context condition in the form of a firstorder formula over the agent's belief base, and bd is a body consisting of a finite and possibly empty sequence of steps</p><formula xml:id="formula_4">[s 0 , . . . , s n ].</formula><p>Actions are first-order atomic formulae; our focus is not on what an action entails, just that action execution might be the target of a normative stipulation as we will see later. Finally, the intention structure comprises the agent's intentions, each of which contains partially instantiated plans to be executed by the agent.</p><p>Definition 9: An intention structure Int is a finite and possibly empty set of intentions {int 1 , . . . , int n }. Each int i is a tuple Ï, Â¯ st, where Ï is a substitution and Â¯ st is an intention stack (containing the steps remaining to be executed to achieve the intention).</p><p>EXAMPLE. The plan of our scenario is represented as follows:</p><formula xml:id="formula_5">+level(X, medium), (high risk (X )), ï£® ï£° isolate(X), evacuate(X, Y ), reroute(X, Z) ï£¹ ï£»</formula><p>This represents that if a belief level (X; medium) has been added to the belief base, stating that the level of emergency of area X is medium, and the context condition "X is a high risk area" holds, then the plan should be adopted.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C. A BDI Agent Interpreter</head><p>The specification above provides a minimal information model required for BDI agent execution. In this section we describe the mechanisms needed (using this information) for BDI-style computational behaviour. Before considering norms, we specify a basic abstract BDI agent interpreter and subsequently extend it with mechanisms for normative reasoning  and compliance. A high-level description of the basic BDI interpreter is illustrated as the white boxes in <ref type="figure" target="#fig_0">Figure 1</ref>; grey boxes are our proposed extensions.below. Initially, new events are perceived from the environment and added to an event queue Ev , then, the new events are used to update a belief base Bel and to select new plans from a plan library P lib to be adopted as intentions in the intention structure Int. Finally, an intention is selected and one of its steps executed. Updating events consists of gathering all new events and pushing them onto the event queue, while updating beliefs consists of querying new events in the event queue and adding beliefs when the events are positive predicates, and removing them when they are negative predicates. We are not concerned here with more complex belief revision mechanisms, but such an interpreter could use them <ref type="bibr" target="#b6">[7]</ref>.</p><p>New events trigger the adoption plans from the plan library. If the event is a belief update, a new intention may be created for it, otherwise the event is a subgoal for some existing intention and the plan is added to it. The steps of a plan are adopted as intentions for execution, each of which can be either an action in the environment or the adoption of a subgoal that will trigger the adoption of further plans.</p><p>These procedures have a very low computational cost, as demonstrated by various practical implementations such as dMARS <ref type="bibr" target="#b3">[4]</ref>, PRS <ref type="bibr" target="#b8">[9]</ref>, and others. We now proceed to considering the normative aspects and how we incorporate them to the basic BDI interpreter.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>III. REPRESENTATION OF NORMS</head><p>Using deontic concepts of obligations, permissions and prohibitions to describe, what must, may and should not be done, norms have been widely proposed as a means of defining and enforcing societal constraints. In this paper, since we are concerned with the impact of norms on reasoning and behaviour, we pay particular attention to the scope of influence of norms. In this respect, we consider two distinct means of addressing this: first, we draw on aspects similar to those presented in <ref type="bibr" target="#b5">[6]</ref> and <ref type="bibr" target="#b11">[12]</ref> in that our norms are conditional, both for activation (when they come into force) and expiration (when they cease effect), limiting application to periods of time; and second, we add constraints <ref type="bibr" target="#b9">[10]</ref>, limiting application to particular plans and actions, and ensuring that norms are not over-restrictive. In this section, we adapt and extend the notation for specifying norms of <ref type="bibr" target="#b16">[17]</ref>, beginning with constraints.</p><p>Definition 10: Constraints, represented as Î³, are any construct of the form Ï Ï , where Ï, Ï are first-order terms (that is, a variable, a constant or a function applied to terms) and is one of the infix binary operators =, =, &gt;, â¥, &lt;, or â¤. A conjunction of constraints is denoted as Î = (Î³ 1 â§ Â· Â· Â· â§ Î³ n ).</p><p>We use numbers and arithmetic functions to build terms Ï ; arithmetic functions may appear infix, following their usual conventions. For example, 10 &gt; Temp and Price &lt; (Cost + Z). To improve readability, constraints of the form 3 â¤ X â§ X â¤ 10 are written as 3 â¤ X â¤ 10. Since constraints limit the acceptable range of parameters within instantiated plan steps (as we will see later), when determining if a plan complies with current norms, their satisfiability must be checked. We use existing constraint satisfaction techniques <ref type="bibr" target="#b9">[10]</ref> to implement a satisfy predicate that holds if a given conjunction of constraints admits a solution (if each variable of the constraints admits at least one value that simultaneously fulfils all constraints).</p><p>Definition 11:</p><formula xml:id="formula_6">satisfy(Î³ 0 â§ Â· Â· Â· â§ Î³ n , Ï) holds iff (Î³ 0 Â· Ï â§ Â· Â· Â· â§ Î³ n Â· Ï) is true for some Ï.</formula><p>Constraints are associated with first-order predicates, imposing restrictions on their variables. We represent this association as Ï â¢ Î, as in, for instance, move(b 1 , X, Y ) â¢ (100 â¤ X â¤ 500 â§ 5 â¤ Y â¤ 45). Now, to define for the core aspect of norms, we use constraint-annotated atomic deontic formulae.</p><p>Definition 12: An annotated deontic formula Î½ is any construct of the form O Î±:Ï Ï â¢ Î (an obligation) or F Î±:Ï Ï â¢ Î (a prohibition), where Î±, Ï are terms, and Ï is a first-order atomic formula with associated constraints Î. Term Î± identifies the agent(s) to which the norm is applicable and Ï is the role of such agent(s). O Î±:Ï Ï â¢ (Î³ 1 â§ . . . â§ Î³ n ) thus represents an obligation on agent Î± taking up role Ï to bring about Ï, subject to all constraints Î³ i , 0 â¤ i â¤ n. The Î³ i terms express constraints on variables of Ï. The relation between constraints and the deontic formula is akin to the quantifier restrictions introduced in <ref type="bibr" target="#b2">[3]</ref>. If we assume a universal quantification in our annotated deontic formulae, that is, âÎ±.âÏ.â x(X Î±:Ï Ï â¢ Î) (where x are all variables occurring in Ï and Î, and X is either O or F) then our formula stands for âÎ±.âÏ.â x(Î â X Î±:Ï Ï). Alternatively, if we assume an existential quantification, that is, âÎ±.âÏ.â x(X Î±:Ï Ï â¢ Î), then the formula stands for âÎ±.âÏ.â x(Î â§ X Î±:Ï Ï).</p><p>Our representation here is precise (as constraints provide a fine-grained way to specify values of variables) and compact (as constrained predicates amount to possibly infinite sets of ground formulae). Let us assume the deontic formulae {Fp(X) â¢ {X = a}, Oq(Y ) â¢ {Y = b}} are currently in effect. We also assume that at a particular point there is the following choice of plans to achieve a particular goal (for brevity, we assume the agent and role are known, dropping the subscripts from the formulae, and simplifying the formulae as {Fp(a), Oq(b)}, respectively):</p><formula xml:id="formula_7">1) [s(a, b), p(a) , q(a), r(a)] 2) [q(a), p(b), s(a, b), r(a)] 3) [ q(b) , p(b), s(a, b), r(a)]</formula><p>A rational agent should give priority to Plan 3, which fulfils the obligation (shown boxed) and does not violate the prohibition. Plan 2 neither fulfils the obligation nor violates the prohibition. Plan 1 is the worst choice as it violates the prohibition (boxed). More interesting situations arise when plans both fulfil obligations and violate prohibitions. We develop in Section IV-C a means to manipulate plans, annotating them with constraints on the values of variables of its actions, thus ensuring that all norms in effect are factored in. In Section IV-D we propose a means for agents to rank plans according to their normcompliance. Thus, norms are defined as follows.</p><p>Definition 13: An abstract norm Ï A is a tuple Î½, Act, Exp, id where:</p><p>â¢ Î½ is an annotated deontic formula (cf. Def. 12), â¢ Act, the activation condition, is a conjunction of possibly negated first-order atomic formulae Ï 1 â§ Â· Â· Â· â§ Ï n specifying the condition that must hold in the agent's belief base for the norm to take effect; â¢ Exp, the expiration condition, is a conjunction of possibly negated first-order atomic formulae Ï 1 â§ Â· Â· Â· â§ Ï n specifying the condition that must hold in the agent's belief base for the norm to stop being in effect; â¢ id is a unique norm identifier We denote a set of abstract norms as â¦ A . If the activation condition of an abstract norm holds, then a specific norm is obtained, whereby variables may be instantiated to specific values. Abstract norms generically define circumstances when norms should be adopted and dropped; when norms are adopted, the abstract formulation is instantiated to specific circumstances.</p><p>Definition 14: A specific norm Ï S is a tuple Î½, Act, Exp, Ï, id where Î½, Act, Exp, id are as above and are bound by a substitution Ï. We denote a set of specific norms as â¦ S .</p><p>As agents interact with their environment and with other agents, their perception of reality, as recorded in their sets of beliefs, change. Agents use their beliefs to update their normative positions, adding norms whose activation conditions hold, and removing norms whose expiration conditions holds. Given a set of beliefs Bel and a specific norm Ï S of the form Î½, Act, Exp, Ï, id , then Ï S holds (or is in effect) if, and only if, the following two conditions hold: 1) Bel Act Â· Ï; that is, we can deduce Act Â· Ï from the set of beliefs, and 2) Bel Exp Â· Ï; that is, we cannot deduce Exp Â· Ï from the set of beliefs. Since beliefs change, norms also change as their activation and expiration conditions may no longer hold; this is how dynamic aspects are captured in our representation of norms.</p><p>EXAMPLE. The norms of our scenario are represented as the following abstract norms:</p><formula xml:id="formula_8">1. F A:R evacuate(X, Y ) â¢ {Y = W }, Â¬safe(W ), safe(W ), 1 2. O A:R reroute(X, Z) â¢ {X + 1 â¤ Z â¤ X + 3}, Â¬safe(X), safe(X), 2</formula><p>The first norm states that all agents (in all roles) are forbidden to evacuate an area X to an area Y ; the prohibition becomes active if area Y (constrained to be W ) is unsafe and expires when area Y (constrained to be W ) becomes safe; unifications are dealt with like constraints, hence the need to use a third variable W . The second norm states that all agents (in all roles) are obliged to reroute traffic through Z to avoid area X, but the rerouting must be within nearby zones. The norm becomes active when area X is deemed not safe, and the norm is deactivated when area X becomes safe again. Now, suppose these norms give rise to the following specific norms:</p><formula xml:id="formula_9">3. F A:R evacuate(X, Y ) â¢ {Y = W }, Â¬safe(W ), safe(W ), {W/3}, 1 4. F A:R evacuate(X, Y ) â¢ {Y = W }, Â¬safe(W ), safe(W ), {W/6}, 1 5. O A:R reroute(X, Z) â¢ Î, Â¬safe(X), safe(X), {X/2}, 2</formula><p>That is, abstract Norm 1 gives rise to two specific norms, one instantiating W to 3 and another W to 6. Abstract Norm 2 (shown with constraints abbreviated as Î to save space) gives rise to one specific norm, instantiating X to 2.</p><p>For simplicity, in our discussion we assume an implicit universal quantification over variables in Î½, Act and Exp. However, our approach can naturally be extended to cope with any quantification.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>IV. Î½-BDI</head><p>Given the representation of norms as detailed above, we can now address the issues surrounding their integration into an effective BDI architecture.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Updating Norms</head><p>First, we describe the key processes required in the agent interpreter to manage the activation and expiration of norms. Although beliefs are generally <ref type="bibr" target="#b3">[4]</ref> assumed to contain exclusively ground first-order predicates, in this paper we store both abstract and specific norms in the belief base. In doing so we avoid adding extra components to the architecture. We extend and adapt the mechanisms to update beliefs and to reason with beliefs, enabling them to deal with norms.</p><p>The process of updating norms consists of going through each abstract norm Ï A â â¦ A , of the form Ï A = Î½, Act, Exp, id , checking if their activation condition is supported by the agent's belief base, that is, Bel Act Â· Ï. Then, for each norm and each possible substitution Ï in which the activation condition holds in Bel , a new specific norm Ï S = Ï A Â· Ï is created and added to the set of specific norms. Afterwards, for each specific norm Ï S â â¦ S , if the expiration condition is supported by the agent's belief base, that is, Bel Exp Â· ÏÏ , the specific norm is removed from â¦ S .</p><p>EXAMPLE. Let us suppose we have an abstract norm Ï A :</p><formula xml:id="formula_10">O A:R use(hlc, X) â¢ Î, high risk (X), weather (X, poor ), 3</formula><p>This represents an obligation on all agents/roles to fly a helicopter (represented as hlc) over X; the norm becomes active if X is a high-risk area, and the norm expires if the weather conditions in X are poor. The Î stipulates which areas can be flown over, and its details are not relevant to our example. If we have a belief base Bel = {high risk (10), Ï A }, where Ï A is the abstract norm above, then we would add to Bel the specific norm</p><formula xml:id="formula_11">O A:R use(hlc, X) â¢ Î, high risk (X), weather (X, poor ), {X/10}, 3</formula><p>If, however, the belief base also had a predicate weather (10, poor ), then no specific norms would be added, as the expiration condition of the newly added norm would holdthe mechanism would add and subsequently remove a specific norm, leaving the set of specific norms unchanged.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Actions and Norms</head><p>As indicated previously, our key concern in this paper is with the impact of norms on plans. Critical to this is determining when an action (represented as an atomic formula Ï) is within the scope of influence of a specific norm Ï S . Definition 15 introduces predicate inScope which, given an agent specified by its unique identifier Ag and one of the roles R â Rl of the agent, holds if a first-order predicate Ï is within the influence of a specific norm Ï S (in the format of Definition 14).</p><p>Definition 15: An action literal Ï of an agent Ag with role R is in the scope of a specific norm Ï S = X Î± Ï â¢ Î, Act, Exp, Ï, id , represented as inScope(Ag, R, Ï, Ï S ), if, and only if, Ï S â â¦ S , unif y(Ag, R, Ï, Î±, Ï, Ï Â· Ï, Ï ), and satisf y(Î Â· Ï, Ï )</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C. Annotating Constraints in Plans</head><p>As indicated in Section III, one of our primary concerns is with the impact of norms on agent plans in terms of constraints on the values of variables of an action. Since actions and achievable world-states are components of plans, instances of restricted actions and world states must be found and marked with these constraints. To achieve this, we propose a mechanism that scans a plan, annotating each step within the scope of a norm with constraints stemming from that norm.</p><p>Each plan step is checked against the predicates specified in the specific norms (â¦ S ), taking into account the role the agent adopts. If a step is within the scope of a norm, then the mechanism gradually assembles the constraints of the norms Î i , and annotates the plan step with them. If the norm is an obligation, the constraints are added as they appear in the norm, instantiated (or customised) to the substitutions Ï, Ï . If the norm is a prohibition, the constraints are then negated; formally, neg((Î³ 1 , . . . , Î³ n )) = (neg(Î³ 1 ), . . . , neg(Î³ n )), and each constraint can be negated as neg(Ï &gt; Ï ) = (Ï â¤ Ï ), neg(Ï &lt; Ï ) = (Ï â¥ Ï ), neg(Ï â¥ Ï ) = (Ï &lt; Ï ), and so on. If the step is not in the scope of any norm, no constraints are added.</p><p>Once plan steps have been annotated, it is possible for an agent to check before executing each step if its execution violates a norm. However, it is inefficient to adopt a plan and execute it partially before discovering that the plan was not, in fact, desirable from the perspective of norm compliance. Fortunately, since the specific values of the variables within a plan are bound when a plan is instantiated, it is possible to determine at plan instantiation if any normative restriction applied to individual plan steps would be violated if the plan is adopted. In order to do this, we must make all annotations available for checking when the plan is instantiated so, at the end of each iteration over the steps of a plan, we collect the annotations into a global plan annotation Î , which is later used when selecting norm compliant plans.</p><p>EXAMPLE. The plan annotation mechanism, when applied to the plan introduced above, and using the specific norms shown previously, yields the following annotated plan:</p><formula xml:id="formula_12">+level(X, medium), (high risk (X )), ï£® ï£° isolate(X) â¢ , evacuate(X, Y ) â¢ {Y = 3, Y = 6}, reroute(X, Z) â¢ {3 â¤ Z â¤ 5} ï£¹ ï£» , {Y = 3, Y = 6, 3 â¤ Z â¤ 5}</formula><p>We notice on the evacuate step of the plan, the negated constraints of the specific norms arising from norm 1, shown with the substitutions applied. We also notice the reroute step annotated with the constraints of the specific version of the obligation (also with the substitutions applied, and the mathematical expressions of the constraints simplified to improve visualisation). The annotated plan factors in the constraints of the active norms, making Î½-BDI agents norm-aware.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>D. Selection of Norm Annotated Plans</head><p>We now describe the process of selecting plans that comply with the constraints imposed by currently active norms. As we have seen, plans are annotated with constraints on the values that action variables may have when a plan is instantiated; in order to filter out non-compliant plan instances we simply verify their satisfiability with variable bindings for candidate plan instances. For example, if there is a plan containing an action move(X, Y ), and norm O A:R move(X, Y )â¢{X â¤ 10â§ Y â¤ 5} is active, then instances of the plan with X bound to values greater than 10 should not be adopted.</p><p>In practice, violating situations are identified if the plan constraints become unsatisfiable after substitutions stemming from the plan instantiation are applied to the plan's annotations. In our example, if X is bound to 11, the annotation becomes {11 â¤ 10 â§ Y â¤ 5}, which is not satisfiable. Now, in order to select compliant plans, the plan annotations created earlier, customised (via substitution Ï) to the instantiation of the plan caused by event e, need to be satisfiable.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>V. CONCLUSIONS AND RELATED WORK</head><p>In this paper we have described a new norm representation formalism, using constraints as means to precisely specify the target of normative stipulations. These constraints are used to determine specific plan instantiations that comply with active norms, thus narrowing the acceptable domains for operation. Based on this, we have described mechanisms that enable these plan instantiations to restrict behaviour in support of compliance, avoiding violating plans. Importantly, our work enables selective and incremental norm violation in a controlled manner in cases where goal achievement would not otherwise be possible, or where norms are deliberately ignored.</p><p>We have implemented these mechanisms within Î½-BDI, extending a traditional BDI interpreter, such as dMARS <ref type="bibr" target="#b3">[4]</ref>. However, our mechanisms are sufficiently generic to enable inclusion in any BDI interpreter and sufficiently detailed that implementation is straightforward. In addressing normative reasoning to this level of analysis, we have tackled various technical challenges posed by norm processing, such as the detection of activation and expiration conditions and the management of the norm life cycle between these two conditions, through the management of abstract and specific norms. Finally, we have shown the applicability of the mechanisms developed in an emergency evacuation scenario. In future work, we intend to refine the evacuation scenario as a testbed for our interpreter, and handle norm deadlines as well as normative conflicts.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig. 1 .</head><label>1</label><figDesc>Fig. 1. Control flow for the reasoning process</figDesc></figure>

			<note place="foot" n="1"> Such mechanisms have a design space defined by the expressiveness of the language and complexity/decidability aspects -the more expressive the language, the fewer guarantees can be given [5]. In particular, if we assume our first-order language is restricted to Horn clauses, then we can use Prolog&apos;s resolution mechanism [1]. 2 We use Greek letters to denote elements of the underlying logic system as well as norms, and use Latin letters to denote elements of the agent interpreter.</note>
		</body>
		<back>

			<div type="acknowledgement">
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">From Logic Programming to Prolog</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><forename type="middle">R</forename><surname>Apt</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1997" />
			<publisher>Prentice-Hall</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">Intention, Plans and Practical Reason</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><forename type="middle">E</forename><surname>Bratman</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1987" />
			<publisher>Harvard University Press</publisher>
			<pubPlace>Cambridge, MA</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">A resolution principle for constrained logics</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>BÃ¼rckert</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Artificial Intelligence</title>
		<imprint>
			<biblScope unit="issue">66</biblScope>
			<biblScope unit="page" from="235" to="271" />
			<date type="published" when="1994" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">The dMARS Architecture: A Specification of the Distributed Multi-Agent Reasoning System</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Mark D&amp;apos;inverno</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Luck</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Georgeff</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Kinny</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Wooldridge</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Autonomous Agents and Multi-Agent Systems</title>
		<imprint>
			<biblScope unit="volume">9</biblScope>
			<biblScope unit="issue">1-2</biblScope>
			<biblScope unit="page" from="5" to="53" />
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title level="m" type="main">First-Order Logic and Automated Theorem Proving</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Fitting</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1990" />
			<publisher>Springer</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">Vasconcelos. Constraint Rule-Based Programming of Norms for Electronic Institutions. Autonomous Agents and Multiagent Systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>GarcÃ­a-Camino</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J.-A</forename><surname>RodrÃ­guez-Aguilar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Sierra</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">W</forename></persName>
		</author>
		<imprint>
			<date type="published" when="2009" />
			<biblScope unit="volume">18</biblScope>
			<biblScope unit="page" from="186" to="217" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">Belief Revision</title>
		<editor>Peter GÃ¤rdenfors</editor>
		<imprint>
			<date type="published" when="2003" />
			<publisher>Cambridge University Press</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Ubi lex, ibi poena: Designing norm enforcement in e-institutions</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Davide</forename><surname>Grossi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Huib</forename><surname>Aldewereld</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Frank</forename><surname>Dignum</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">COIN II</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2007" />
			<biblScope unit="volume">4386</biblScope>
			<biblScope unit="page" from="101" to="114" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">PRS: A high level supervision and control language for autonomous mobile robots</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Raja</forename><surname>FranÃ§ois FÃ©lix Ingrand</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rachid</forename><surname>Chatila</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">FrÃ©dÃ©ric</forename><surname>Alami</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Robert</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the IEEE Int. Conf. on Robotics and Automation</title>
		<meeting>of the IEEE Int. Conf. on Robotics and Automation</meeting>
		<imprint>
			<date type="published" when="1996" />
			<biblScope unit="page" from="43" to="49" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">The Semantics of Constraint Logic Programs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Joxan</forename><surname>Jaffar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><forename type="middle">J</forename><surname>Maher</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kim</forename><surname>Marriott</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Peter</forename><forename type="middle">J</forename><surname>Stuckey</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Logic Programming</title>
		<imprint>
			<biblScope unit="volume">37</biblScope>
			<biblScope unit="issue">1-3</biblScope>
			<biblScope unit="page" from="1" to="46" />
			<date type="published" when="1998" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title level="m" type="main">On the characterisation of law and computer systems: the normative systems perspective</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">I</forename><surname>Andrew</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Marek</forename><surname>Jones</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Sergot</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1993" />
			<publisher>Wiley</publisher>
			<biblScope unit="page" from="275" to="307" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Norm adoption in the NoA agent architecture</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Martin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tim</forename><forename type="middle">J</forename><surname>Kollingbaum</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Norman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 2nd Int. Joint Conf. on Autonomous Agents &amp; Multi-Agent Systems</title>
		<meeting>2nd Int. Joint Conf. on Autonomous Agents &amp; Multi-Agent Systems</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Deontic interpreted systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alessio</forename><surname>Lomuscio</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Marek</forename><surname>Sergot</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Studia Logica</title>
		<imprint>
			<biblScope unit="volume">75</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="63" to="92" />
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">A normative framework for agent-based systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Fabiola</forename><surname>Lopez Y Lopez</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Luck</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mark</forename><surname>Inverno</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 1st Int. Symp. on Normative Multi-Agent Systems</title>
		<meeting>1st Int. Symp. on Normative Multi-Agent Systems</meeting>
		<imprint>
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Norm-based behaviour modification in BDI agents</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Felipe</forename><surname>Meneguzzi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Luck</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 8th Int. Conf. on Autonomous Agents and Multiagent Systems</title>
		<meeting>8th Int. Conf. on Autonomous Agents and Multiagent Systems</meeting>
		<imprint>
			<date type="published" when="2009" />
			<biblScope unit="page" from="177" to="184" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Modeling rational agents within a BDI-architecture</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Anand</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><forename type="middle">P</forename><surname>Rao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Georgeff</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 2nd Int. Conf. on Principles of Knowledge Representation and Reasoning</title>
		<meeting>2nd Int. Conf. on Principles of Knowledge Representation and Reasoning</meeting>
		<imprint>
			<date type="published" when="1991" />
			<biblScope unit="page" from="473" to="484" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Norman. Normative conflict resolution in multi-agent systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Wamberto</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Martin</forename><forename type="middle">J</forename><surname>Vasconcelos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Timothy</forename><forename type="middle">J</forename><surname>Kollingbaum</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Autonomous Agents and Multi-Agent Systems</title>
		<imprint>
			<biblScope unit="volume">9</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="124" to="152" />
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<title level="m" type="main">An Essay in Deontic Logic and the General Theory of Action</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">H</forename><surname>Wright</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1968" />
			<publisher>North-Holland</publisher>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
