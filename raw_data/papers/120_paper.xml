<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2019-03-26T16:30+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">A Three-Layer Architecture for E-Contract Enforcement in an E-Service Environment</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><forename type="middle">W</forename><surname>Dickson</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Chiu</surname></persName>
							<email>kwchiu@acm.org</email>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science and Engineering</orgName>
								<orgName type="institution">Chinese University of Hong Kong</orgName>
								<address>
									<settlement>Shatin</settlement>
									<region>HK</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">C</forename><surname>Cheung</surname></persName>
							<affiliation key="aff1">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">Hong Kong University of Science and Technology</orgName>
								<address>
									<settlement>Kowloon</settlement>
									<region>HK</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sven</forename><surname>Till</surname></persName>
							<email>till@cs.ust.hk</email>
							<affiliation key="aff1">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">Hong Kong University of Science and Technology</orgName>
								<address>
									<settlement>Kowloon</settlement>
									<region>HK</region>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">A Three-Layer Architecture for E-Contract Enforcement in an E-Service Environment</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>In an e-service environment, contracts are important for attaining business process interoperability and enforcing their proper enactment. An e-contract is the computerized facilitation or automation of a contract in a cross-organizational business process. We find that e-contract enforcement can be divided into multiple layers and perspectives, which has not been adequately addressed in the literature. This problem is challenging as it involves monitoring the enactment of business processes in counter parties outside an organization&apos;s boundary. This paper presents an architecture for e-contract enforcement with three layers, viz., document layer, business layer, and implementation layer. In the document layer, contracts are composed of different types of clauses. In the business layer, e-contract enforcement activities are defined through the realization of contract clauses as business rules in event-condition-action (ECA) form. In the implementation layer, cross-organizational e-contract enforcement interfaces are implemented with contemporary Enterprise Java Bean and Web services. We present a methodology for the engineering of e-contracts enforcement from a high-level document-view down to the implementation layer based on this architecture, using a supply-chain example. As a result, e-contracts can be seamlessly defined and enforced. Conceptual models of various layers are given in the Unified Modeling Language (UML).</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">Introduction</head><p>The Internet has now become a global common platform where organizations and individuals communicate with each other to carry out various commercial activities and to provide value-added services. The term "e-service" refers to a service provided over the Internet. The wide adoption of e-services, however, poses a challenging problem to the enforcement of contracts across organizations. This is because an architecture that allows an organization to control or monitor the business processes of its counter-parties is not generally available.</p><p>A contract is a binding agreement between two or more parties, defining the set of obligations and rewards in a business process. An e-contract is a contract in electronic format, regulating cross-organizational business processes over the Internet. As e-services become more popular, widespread use of e-contracts in the business world is expected. The ability of an e-service system to readily create e-contracts with enforcement measures will soon become a critical success factor for the provision of e-services. This is particularly applicable to standard business interactions that could take place over the Internet, such as the purchase and sale of goods. New e-contracts for these business interactions can be defined based on standard contract templates, so that the effort in development and support of the contract's whole lifecycle (such as negotiation, enactment and enforcement) can be streamlined and reused.</p><p>Specific business interactions not covered by the clauses found in standard contract templates can be provided as contract variations or contract escalations. A contract template is the reference document that forms the basis on which a new contract is negotiated. A contract template consists of a number of contract clauses, each addressing a specific concern in the business interaction. Each contract clause contains a set of template variables whose values are to be negotiated in order to create a customized contract. The following example illustrates a contract clause in a sales contract template, where the brackets identify template variables in the clause. We have done some preliminary work <ref type="bibr" target="#b8">[9]</ref> on the feasibility of modeling composite e-contracts based on cross-organization workflows with workflow views. We have also studied the engineering of e-contracts for its enactment <ref type="bibr" target="#b3">[4]</ref> <ref type="bibr" target="#b4">[5]</ref>. During these studies, we identified an acute need for a concrete methodology that allows an econtract to be seamlessly analyzed from its textual documentation to its enforcement over the Internet. To address this, we propose to structure an e-contract in multiple levels and perspectives, viz., document layer, business layer and implementation layer. Conceptual models of these layers can be expressed uniformly in the Unified Modeling Language (UML), a widely accepted notation in object-oriented modeling <ref type="bibr" target="#b21">[22]</ref>. We believe that the life cycle of an e-contract should be similar to that of a software system, i.e., definition, analysis and realization. This approach facilitates the understanding of an e-contract from its fundamentals to its implementation, which has been illustrated in earlier works <ref type="bibr" target="#b3">[4]</ref>.</p><p>A crucial task of this kind of implementation is the econtract enforcement, in particular the monitoring, which has not been adequately addressed in the literature. We distinguish contract enforcements that address concerns about "what" is to be fulfilled in a contract from contract enactment that is concerned with "how" to fulfill a contract. The former deals with the detection and handling of contract breaches and exceptions while the latter deals with "normal" enactment of business processes. As such, contract enforcement can be considered as a conformance testing of contract enactment against a contract from a software engineering viewpoint. This problem is particularly challenging, among other electronic contracting activities, as it involves monitoring the enactment of business processes in counter parties outside an organization's boundary.</p><p>The contributions and coverage of this paper are: (i) a meta-model of e-contracts and e-contract templates, (ii) a three-layer architecture for cross-organizational e-contract enforcement, (iii) a methodology for elicitation of econtract enforcement based on this multiple layer architecture, and, (iv) a feasible implementation outline for e-contract enforcement with Enterprise Java Bean (EJB) and Web services.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.1.">A Three-layer Architecture for E-Contract Enforcement</head><p>An e-contract defines clearly the requirements of business processes and the roles to be played by the parties involved. This definition is subject to analysis that aims to (a) identify the relations between the involved business entities, (b) the events or actions that take place in different parts of the business processes, and (c) the exceptions and possible contract breaches that may arise. Finally an e-contract is realized and enacted using existing Internet technologies, such as Web services <ref type="bibr" target="#b22">[23]</ref> and EJB <ref type="bibr">[27]</ref>.</p><p>Depending on their job responsibilities, users across an organization may have different perspectives regarding an e-contract. For example, an implementation model of an e-contract that contains details of an implementation in Web services may not provide managers with information at the right level of abstraction. Instead, a business layer with information about rules and actions is more appropriate. It is more relevant to a system analyst who needs to refine an e-contract into a system design for subsequent enforcement. To allow for reusability and extensibility, a layered architecture of e-contracts is formulated in an object-oriented model using UML. In the document layer, contracts are composed of different types of clauses, which typically include obligation, permission and prohibition <ref type="bibr" target="#b19">[20]</ref>. A complex contract clause may consist of simpler clauses and relate to other contract clauses. A contract involves parties, together with their roles in the contract. The document layer corresponds to our meta-model for e-contracts and templates as detailed in Section 2.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Layer Artifacts</head><p>The business layer of an e-contract specifies an econtract from a business process point of view. It comprises four parts, viz., business rules, business events, business actions and business entities. Business rules specify the clauses of the contract in an ECA-rule paradigm. These rules are triggered by business events. Business actions capture the details of the activities required in the contract, including the set of roles involved in each activity and its consequences in terms of generated resultant events. Business entities are the set of data objects (including documents, etc.) relevant to the econtract. The business layer will be revisited in more detail in Section 3.</p><p>The implementation layer of an e-contract enforcement comprises two parts, viz., action implementation, and cross-organizational event interface, and is based on contemporary Enterprise Java Bean (EJB) <ref type="bibr">[27]</ref> and Web services <ref type="bibr" target="#b9">[10]</ref> technologies. We choose the implementation of each action to be carried out by Proceedings of the 36th Hawaii International Conference on System Sciences -2003 0-7695-1874-5/03 $17.00 (C) 2003 IEEEcomputer systems for e-contract enforcement in EJB components because it supports three-tier implementation, is highly object orientated and component based, and is available for any platform. For the cross-organizational event interface, we employ Web services <ref type="bibr" target="#b9">[10]</ref> interface definitions for the required communications and interactions, in which XML schemas <ref type="bibr">[30]</ref> among business entities are designed for this purpose. The advantage of using Web services is to establish cross-organizational collaboration via existing Internet standards, supporting both human web-based interactions and automatic programmed interactions. The implementation layer is detailed in Section 5.</p><p>A summary of our three-layer architecture of econtract enforcement is given in <ref type="table">Table 1</ref>. The rest of our paper is organized as follows. Section 2 introduces our meta-model for electronic contracting. Section 3 presents the requirements for e-contract enforcement together with a system architecture and meta-model to facilitate this. Section 4 presents the transformation of e-contract clauses in the document layer to contract enforcement rules in the business layer. Section 5 discusses the implementation layer based on Web services and EJB, followed by a comparison with related work in Section 6. Finally, we conclude the paper with ongoing research work in Section 7.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">A Meta-model for Electronic Contracting</head><p>Let us first introduce a meta-model for e-contracts in UML <ref type="bibr" target="#b21">[22]</ref> and then discuss the lifecycle of an e-contract.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1.">A Meta-model of E-Contract Templates in UML</head><p>UML is a modeling language for visualizing, specifying, constructing, and documenting the artifacts based on an object-oriented paradigm. The language offers a standard way to write a system's blueprints, including conceptual things such as business processes and system functions as well as concrete things such as programming language statements, database schemas, and reusable software components <ref type="bibr" target="#b21">[22]</ref>. <ref type="figure" target="#fig_0">Figure 1</ref> presents our meta-model of an e-contract template that forms the basis on which an e-contract is refined. A template consists of a number of contract clauses; each concerns some of the parties to be bound by the e-contract. Typical contract clauses can be divided into three types of contractual constraints: obligation, permission and prohibition <ref type="bibr" target="#b19">[20]</ref>. For example, a customer is obliged to pay according to the payment terms and a supplier is not allowed to cancel the order once committed. A complex contract clause may consist of several simpler clauses or refer to other clauses. In an econtract template, a contract clause may contain a number of template variables, such as the product, price and quantity. For each contract instance, these variables are to be refined in an e-contract through negotiations and finally agreed upon a set of accepted values. Based on the previous contracts prepared and experience, a business can abstract common clauses and differentiate the parameters to create contract templates, according to this meta-model. This template provides a basis on which the whole contract lifecycle, as described in the next section, may take place. The most common contract being used in business is probably a sales contract. <ref type="figure" target="#fig_1">Figure 2</ref> gives an example sales e-contract template instantiated from the meta-model in <ref type="figure" target="#fig_0">Figure 1</ref>. The sales e-contract consists of four contract clauses; each in turn contains one or two template variables. For example, unit price, quantity and delivery date are variables.  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Sales</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2.">E-Contract Lifecycle</head><p>For each e-contract, the whole lifecycle of electronic contractual activities (as illustrated in <ref type="figure">Figure 3</ref>) involves not only contract enactment and contract enforcement, but also pre-contract activities, such as exchanging business information and contract negotiation. Exchanging business information includes advertisement activities of the service provider (push mode) and information collection and comparison by potential customers (pull mode). This can be performed via electronic platforms such as electronic marketplaces, portals, and brokers.</p><p>Once a customer and a service provider identify each other, negotiation is carried out. Negotiation is a decision process in which two or more parties make individual decisions and interact with each other for mutual gain. We have proposed a contract template driven approach to this process <ref type="bibr" target="#b6">[7]</ref>, involving the negotiation of template variables, in order to avoid uncontrolled openness of issues, thus improving the effectiveness of negotiation. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">E-Contract Enforcement</head><p>In this section, we first discuss the requirements for econtract enforcement. Then we introduce our enforcement architecture and give an overview of the transformation process towards an implementation for e-contract enforcement, focusing on the monitoring part.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1.">Requirements for E-Contract Enforcement</head><p>The enforcement of a contract consists of two main issues, viz., the recognition and the handling of contract breaches. In order to recognize a contract violation, the compliance of a contract has to be kept under constant surveillance. Otherwise, contract violation cannot be recognized and the aggrieved party cannot react to the breach. How this breach should be handled depends on the aggrieved party and on the degree of the damage. The form of reaction ranges from ignoring the breach via invoking an exception rule through to a human intervention. Enforcement can be summarized by: enforcement is monitoring plus handling.</p><p>As mentioned above, an e-contract is composed of clauses. Each clause represents one of the three types of contractual constraints, viz., obligation, prohibition and permission. A contract defines the responsibilities and duties of the involved parties of a business process. Clauses state conditions where exceptions occur. Therefore they are used to cross check and to enforce the mutual agreement of the different business parties. In order to enforce an e-contract, many variables such as the status of delivery or the response time of an e-service have to be monitored. These variables may include confidential information, for example, balances of bank accounts or credit cards' numbers. One approach is to launch an enforcement service that constantly checks the validity of all these variables (according to the contract clauses). However, this incurs tremendous overheads to a system, and this mechanism is not practical to be extended across organizational boundaries. Alternatively, motivated by active database paradigms <ref type="bibr" target="#b10">[11]</ref>, the transformation of contract clauses into ECA rules can systematically reduce the monitoring effort. Now the monitor becomes only active when an interesting event occurs. Interesting events are to be raised by each party or some information sources. The demand of resources to enforce the contract is greatly reduced by using ECA rules because the amount of surveyed variables at one time is much less and the monitoring software is not permanently active.</p><p>It should be noted that information provided by sources, which are not directly involved in the contract, might be of interest to one of the contract partners, e.g., a news channel broadcasts a message about an earthquake in Taiwan that has damaged a semiconductor factory. This is particularly important to a computer manufacturer because the prices for chips, in particular memory chips and microprocessors, may rise soon. In that case, the manufacturer may decline to accept large orders based on an old price. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.">An Architecture for Cross-Organizational EContract Enforcement</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Other Parties</head><p>Timer E v e n t <ref type="figure">Figure 4</ref>: An Architecture for Cross-Organizational E-Contract Enforcement <ref type="figure">Figure 4</ref> depicts an architecture for crossorganizational e-contract enforcement based on the requirements discussed in the previous subsection. Each e-service provider hosts a contract enactor subsystem to perform regular business activities for service contract enactment. It also hosts a separate contract enforcer subsystem to detect contract breaches and to trigger relevant business actions upon such breaches (or other exceptions). Events are published and subscribed through an event adapter. The event adapter collects internal events from the contract enactor and external events from the external Web service interface. Events collected are filtered and transformed to a structure accepted by the event enforcer. Temporal events are generated by a Timer subsystem. In addition, each party maintains a database, Proceedings of the 36th Hawaii International Conference on System Sciences -2003 0-7695-1874-5/03 $17.00 (C) 2003 IEEEwhich stores the business entities, event repository (event log) and event subscriber lists. The advantage of this architecture is its support of a flexible peer-to-peer model. It does not require a central facilitator or moderator. <ref type="figure" target="#fig_3">Figure 5</ref> presents our meta-model for crossorganizational contract enforcement in UML. A business process can be modeled as a set of actions to be executed by a set of parties, each playing certain roles in the process. Typically, an action is recursively decomposed into sub-actions and eventually down to a unit level called tasks. In subsequent discussions, an action is a workflow or sub-workflow that is performed by a single party. For example, the action Check System Config is carried out by the system integrator. It consists of two tasks: (i) to receive a quotation request from an end user and (ii) to validate the system configuration required in the request. The parties in a cross-organizational workflow may belong to different organizations. An event occurs when something of interest happens to the system itself or to the user's applications. The source of events can be internal or external. An internal event originates within the organization that receives the event, while an external event originates from another organization. Examples of external events include the receipt of a request for quotation or of a purchase order. When an event occurs, it triggers some rules and the condition parts of these rules will be evaluated. Conditions are logical expressions defined on the states of business entities, such as the status of an order. Only if the condition is satisfied, the enforcement action part, which is a workflow, will be executed and may lead to other events, such as exceptions. The semantics of ECA rules for contract enforcement can be summarized as the following: On event if condition then enforcement action.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3.">A Meta-model of Contract Enforcement</head><p>In a cross-organizational context, when an organization detects an internal event, it must explicitly send the event to other target organizations in order to notify them. This event is then considered to be an external event of each target organization. However, the target organizations must have subscribed for it beforehand. Examples of such events include change in delivery date or change in price. It should be noted that the subscription can be implicit. For example, placement of an order implies a subscription to the event of change in delivery date, as this is an obligation of the supplier.</p><p>Data required in the business process are encapsulated by business entities owned by some party participating in the workflows. The enforcement actions in the rules may update the state of these business entities, which in turn may trigger other events. Note that exceptions are special events, which deviate from normal expected behavior or prevent normal process execution. A business process often defines extra rules describing exceptions and their handling, and in our context, for contract enforcement. Actions may also be triggered by time-related elements, such as deadlines and durations. These elements can be represented by temporal events in the meta-model. In addition, business action invocations, such as those, that could possibly breach a contract (cf. section 4.2 on enforcing prohibitions), are also modeled as events in the meta-model.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">E-Contract Enforcement Business Rulesfrom Contract Clauses to ECA Rules</head><p>To facilitate enforcement, contract clauses expressed in a format based on the meta-model in <ref type="figure" target="#fig_0">Figure 1</ref> are analyzed and then transformed into a set of ECA rules, based on the meta-model in <ref type="figure" target="#fig_3">Figure 5</ref>. This set of ECA rules collectively formulates an operational model of the contract clauses for subsequent enforcement. We conducted a study based on a service agreement referred to as the "Terms and Conditions of Sale, Service and Technical Support" at the official website of Dell (Hong Kong) <ref type="bibr">[12]</ref>. In this agreement, Dell plays the role of a system integrator and the customer the role of an end user.  which will be detailed in the following subsections. BAO stands for an object that encapsulates a business action whose execution triggers the object creation. Our methodology helps discover some typical problems that arise from the ambiguity of natural language and the autonomous nature of individual organizations. We also suggest some measures to overcome them during the discussion.</p><p>After the involved parties have agreed to a contract, analysis is conducted. The analysis is driven by a methodology mapping the three contractual constraint types of contract clauses, i.e., obligations (what a party must do), prohibitions (what a party must not do) and permissions (what a party can but is not obliged to do), into ECA rules. Common contractual wordings may provide additional hints in the analysis to identify the constraint type of a contract clause. For example, the term "shall" tends to imply an obligation, "may" a permission and "shall not" a non-obligation, i.e., a prohibition or a permission. Since natural language formulations (particularly in contracts) can be multifarious, further analysis in the clause structures is often necessary.</p><p>An alternative is to map these rules into a set of logical expressions in deontic logic, a class of formal logic <ref type="bibr" target="#b19">[20]</ref>. A rule of deontic logic has the following formal structure:</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Rule #: &lt;role&gt; [is] (obligated | forbidden| permitted) [to] [do] (&lt;action&gt; [before &lt;condition&gt;] | satisfy &lt;condition&gt;) [, if &lt;condition&gt;][, where &lt;condition&gt;] [, otherwise see Rule &lt;#&gt;]</head><p>Unlike ECA rules, deontic logic was not designed to be executable and therefore not associated with welldefined operational semantics. For instance, the triggering event for an action is often omitted, making it difficult to determine the execution of logical expressions. In addition, the deadline of an action or a task is often not stated. However, this is important for the enforcement of obligations; otherwise a party may defer the obliged action indefinitely. An obligation without stating a deadline or an event before which the obliged action must have taken place may even imply enforcement is inapplicable. Sometimes, the deadline is implied due to standard practices of the business, governmental regulation, etc., and must be added explicitly by the analyst. All these kinds of ambiguities, once found, should be clarified and confirmed by both parties to avoid confusion or later unnecessary disputes, and should not simply be left in a rule.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1.">Enforcing Obligations</head><p>Consider an ECA rule R obl that formulates an obligation where a business action A obl must be performed by a deadline T obl . The obligation can be enforced using the following mechanism. Upon reaching the deadline T obl , a temporal event is generated by the Timer. This triggers the contract enforcer to fire rule R obl and execute the enforcement action to check if the obliged party has performed the required business action A obl . This check can be achieved by, as for example, searching the log file for invoked actions or occurrence of related events. In the case of payment obligations, suitable events could be the acceptance of a payment receipt or a change in a bank account's balance. If the obligation has not been fulfilled, the contract enforcer raises an exception. Based on this mechanism, ECA rules for obligation enforcement can be formatted using the following predicates. Here, BAO is an object encapsulating the required business action with a deadline, denoted as deadline(BAO). A temporal event is generated on the date of deadline, denoted as onDay(deadline(BAO)). The predicate occurred(BAO) holds if the business action has occurred. An exception, denoted as exception(BAO), is raised as a result of the rule execution.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>E: onDay( deadline( BAO ) ) C: NOT occurred( BAO ) A: raise( exception( BAO ) )</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>An ECA Rule for Obligation Enforcement</head><p>For example, for the contract clause: "7.1 Dell shall deliver the Products to the place of delivery designated by Customer and agreed to by Dell as evidenced in Customer's invoice ("Place of Delivery")", the corresponding enforcement ECA rule can be:</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>E: onDay( deadline( DELIVER ) ) C: NOT occurred( DELIVER ) A: raise( exception( DELIVER ) )</head><p>The customer could monitor this obligation by checking the list of products delivered before and on the delivery date, denoted as deadline( DELIVER ) in the rule. However, problems may arise if Dell has already sent the products but due to certain circumstances, they have not reached the customer yet. In this case, Dell could prove the product delivery, as for example, by providing the tracking number of the sent package. In fact, this should be done as soon as the package is sent, in order to improve customer relationships.</p><p>As mentioned above, there are two sets of ECA rules necessary to implement an e-contract -for the enforcement and for the enactment. Enactment rules are triggered to invoke necessary actions on time, while enforcement rules are triggered once deadlines of obligations has been reached. Since an obliged action may need some time to complete, the action must be triggered early enough, as for example, six days before the deadline. The following enactment ECA rule for the same contract clause illustrates this difference:</p><p>Proceedings of the 36th Hawaii International Conference on System Sciences -2003 0-7695-1874-5/03 $17.00 (C) 2003 IEEE</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>E: onDay( before( deadline( DELIVER ), 6 ) ) C: valid( place( DELIVER ) ) &amp; ready( DELIVER ) A: perform( DELIVER )</head><p>We conclude this subsection by discussing a general problem of the impreciseness of natural languages. Phrases like "as soon as practicable" or "as soon as possible" are imprecise, lacking a concrete deadline. The handling of such ambiguity generally requires human attention. The analyst has to substitute these with concrete deadline in the formulation of ECA rules. For instance, consider the contract clause "10.7 …Dell shall respond to a request for such Emergency Service as soon as practicable after its receipt of such request. …" The corresponding enforcement ECA rule can be formulated in the following. Here, N is a chosen time allowance.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>E: onDay( after( receiptDate( EMERGENCY_REQUEST ), N ) ) ) C: NOT responded( EMERGENCY_REQUEST ) ) A: raise( exception( EMERGENCY_REQUEST ) )</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2.">Enforcing Prohibitions</head><p>The occurrence of a prohibited action (or prohibition) should be treated as an exception by the contract enforcer. Our meta-model in <ref type="figure" target="#fig_3">Figure 5</ref> supports this scenario without any extension. One problem of the observation of prohibitions is that if a party performs a prohibited action, the party will probably try to hide or distract this fact as long as possible (unless the party does this by mistake or misunderstandings). Thus, in general, it will be quite difficult to observe or to recognize a prohibited action. Should it be easy to detect such an event of a prohibited action, the party probably would not invoke this specific action. This is a problem due to the autonomous nature of different organizations rather than that of our architecture or our model. A general ECA rule for prohibition enforcement can be described as follows:</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>E: onOccurred( BAO ) C: prohibitionCondition( BAO ) A: raise( exception( BAO ) )</head><p>Consider the contract clause "14. Each party shall treat as confidential all information obtained from the other pursuant to a Contract which is marked 'confidential' or the equivalent or has the necessary quality of confidence about it and shall not divulge such information to any persons without the other party's prior written consent provided that this clause shall not extend to information which was rightfully in the possession of such party prior to the commencement of the negotiations leading to the Contract, …" For example, a corresponding enforcement ECA rule can be:</p><formula xml:id="formula_0">E: onOccurred( INFO ) C: confidential( INFO ) A: raise( exception( INFO ) )</formula><p>However, if a party really passes confidential contract information to a third party, this is almost impossible to detect. Thus, the event "onOccurred(INFO)" is nonmonitorable. On the other hand, Dell has a similar problem. Another contract clause states that the customer warrants buying the products only for its own internal use and not for re-sale. But Dell cannot easily check if the end-user buys the product for itself or to resell it to a third-party.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3.">Enforcing Permissions</head><p>A permission is a temporary allowance to perform an otherwise prohibited action, i.e., a specific action may be carried out only within a certain allowed time period. Some actions may be permitted under specific situations (i.e., events plus conditions). Note that a party is not obliged to carry out a permitted business action. After the message of the invocation of a permitted action is received, the contract enforcer checks if the conditions for the permission are met or not. If the permission situations are not met, the contract enforcer raises an exception. Whether the actual action invocation will be interrupted or not depends on the exception handler. A general ECA rule for obligation enforcement can be formulated as follows:</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>E: onOccurred( BOA ) C: NOT permitted( BOA ) A: raise( exception( BOA ) )</head><p>For example, consider the contract clause "2.1 … Dell shall be entitled to refuse to accept orders placed by the Customer if the Customer breaches or Dell, on reasonable grounds, suspects that the Customer will breach this warranty." A corresponding ECA-rule can be stated as follows where REFUSE_ORDER is the action object encapsulating the business action "refuse order".</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>E: onOccurred( REFUSE_ORDER ) C: NOT badlisted( customer( REFUSE_ORDER ) ) A: raise( exception( REFUSE_ORDER ) )</head><p>The event onOccurred( REFUSE_ORDER ) can be observed by the customer upon the receipt of a order cancellation message. But the customer may have problems in understanding the applicability of the condition, as the internal criteria of Dell for trustable customer is not disclosed to the public.</p><p>Consider another contract clause "3.1 Dell may, at its sole discretion, allow a Customer to cancel its order after acceptance at no charge, if written notice of such cancellation is received by Dell before commencement of manufacture of the Products. If Dell allows a Customer to cancel its order after manufacture but before shipment of the Product, Dell shall be entitled to levy a cancellation Proceedings of the 36th Hawaii International Conference on System Sciences -2003 0-7695-1874-5/03 $17.00 (C) 2003 IEEEcharge equal to 20% of the price of the Products." The clause may be formulated by the following ECA rule. The business action "levy cancellation charge" is encapsulated by an action object LEVY.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>E: onOccurred( LEVY ) C: NOT ( dateOfCancellation( order( LEVY ) ) &gt; dateOfManufacture( order( LEVY ) ) &amp; cancellationApproved( order( LEVY ) ) ) A: raise( exception( LEVY ) )</head><p>A customer can hardly tell whether the commencement of manufacture of the product has already started when canceling the order. It is almost nonmonitorable because normally a customer does not have access to such kind of internal data. However, Dell may improve the situation by informing the customer when the commencement starts through its enactment system. As such, the monitorability / enforceability of this specific permission would change from non-monitorable to monitorable.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4.">Discussion</head><p>In this section, we have presented a methodology to map different types of contract clauses into enforcement ECA rules. We have also highlighted typical problems that can be discovered by our methodology, together with some measures of overcoming them. However, it is not possible to suggest general measures to handle contract breaches or exception, as these often involves domain specific knowledge, which are either explicitly specified in other contract clauses or implicitly regulated by laws and standards.</p><p>Some of the problems in analyzing contracts arise from ambiguity and impreciseness of natural languages. These might be sought out with reference to other laws, regulations, standard trade practices, etc. However, to avoid unnecessary disputes, the parties involved should discuss and clarify the matter, and if necessary, amend existing or forthcoming contracts accordingly.</p><p>Other problems arise from the autonomous nature of individual organizations. Events that need to be monitored often come from counter parties in other organizations, and might not be monitorable. Thus, cooperation and trust should be developed among trade partners to alleviate this problem. In general, this improves the transparency of operations, services, and in turn, customer relationships <ref type="bibr" target="#b7">[8]</ref>, and is therefore vital in contemporary e-service providers under strong competitions. On the other hand, such events may be made monitorable by adding explicit clauses in the contract to demand the provision of such events among the parties where appropriate. Alternatively, trade standards or e-services standards should be established accordingly to minimize such efforts and to streamline fair and effective monitoring of e-service provision in the digital economy.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">An Implementation Outline for E-Contract Enforcement</head><p>Web services can be used to interface different enforcement and enactment systems within and across organizations by supporting appropriate crossorganizational communication and interoperability. In this section, we outline the implementation of crossorganization interfaces for e-contract enforcement through Web services. Details of e-contract enactment using Web services can be found in our previous work <ref type="bibr" target="#b3">[4]</ref>. Based on the functional and data requirements of the event adaptor, three Web services, viz., for publishing events, for receiving events, for subscribing events, are identified as shown in <ref type="figure" target="#fig_4">Figure 6</ref>. Examples of these Web services are summarized in <ref type="table" target="#tab_7">Table 3</ref>. The publish Web service will be invoked by the event adaptor. The input parameter is the occurred event or exception. Based on this, the Web service checks the subscribers list and the security policies, and then notifies the valid subscribers. Notification can be performed via different kind of protocols like e-mail, fax, ICQ message, or even via another Web service. How the subscribers should be notified is specified in the subscription process via the subscribe Web service. The subscribe Web service registers requests for an event subscription including several parameters such as the requester, the subscribed event, and how the requester wants to receive the event notification. The receive Web service is used to receive subscribed events published by the counter party organizations. Received events are recorded at the Event Repository and forwarded to the Event Adapter, which in turn transforms them into the forms as required by the Contract Enforcer and the Contract Enacter in <ref type="figure">Figure 4</ref>.</p><p>In addition, a system integrator can offer more specific Web services like takeOrder or trackOrder as shown in <ref type="table" target="#tab_8">Table 4</ref>. In order to provide a better service and Proceedings of the 36th Hawaii International Conference on System Sciences -2003 0-7695-1874-5/03 $17.00 (C) 2003 IEEEto increase the trust between the involved parties, the trackOrder Web service can be composed with another trackDelivery service, so that customers may acquire all necessary information from one provider.   </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Publish Web Service</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.">Related Work</head><p>Modeling of e-contracts can be dated back to the Contract Net Protocol <ref type="bibr" target="#b24">[25]</ref>. However, they only concentrated on low-level transaction aspects. <ref type="bibr">Gisler et al. [14]</ref> presented an architecture for legal e-contracts, but not a mechanism for modeling e-contracts. Grosof <ref type="bibr" target="#b16">[18]</ref> introduced a declarative approach to business rules in ecommerce contracts by combining Courteous Logic Program and XML. Tan and Thoen proposed a conceptual view to represent the contents of business contracts with Formal Language for Business Communication (FLBC) for contract negotiation based on the event semantics. Marjanovic and Milosevic <ref type="bibr" target="#b19">[20]</ref> modeled a contract with deontic logic, based on obligation, permission and prohibition. They proposed a contract monitoring mechanism through a trusted third party instead of a peerto-peer model. Recently, Karlaplem et al. <ref type="bibr" target="#b18">[19]</ref> proposed a meta-model of e-contracts with entity-relationship diagrams for generating workflows to support e-contract enactment, but they did not address enforcement issues.</p><p>Though there are many web-enabled WFMS research prototypes ( <ref type="bibr" target="#b1">[2]</ref>, <ref type="bibr" target="#b20">[21]</ref>) and commercial products ( <ref type="bibr" target="#b2">[3]</ref>, <ref type="bibr">[28]</ref>, <ref type="bibr" target="#b24">[25]</ref>, <ref type="bibr" target="#b11">[13]</ref>, <ref type="bibr" target="#b16">[18]</ref>), few of them address problems in econtracts or cross-organizational workflow comprehensively. We have done some work on the E-ADOME <ref type="bibr" target="#b8">[9]</ref> system, which proposed a novel concept of workflow view for cross-organizational workflow interoperability and e-contract development. We are also deriving a methodology for extending workflows beyond organizations by analyzing information (data plus events) requirements in a Web service environment <ref type="bibr" target="#b4">[5]</ref>.</p><p>CrossFlow <ref type="bibr" target="#b14">[16]</ref> models virtual enterprises based on a service provider-consumer paradigm, in which organizations (service consumers) can delegate tasks in their workflows to other organizations (service providers). However, it does not observe contract provisions in legal context aspects. Furthermore, because it does not support ECA rule based on cross-organizational events and just can monitor workflow status (such as the start or the end of a task), frauds cannot be observed easily. The COSMOS project (Common Open Service Market for SMEs) <ref type="bibr" target="#b15">[17]</ref> have developed Internet-based electronic contracting services to facilitate business transaction processes based on CORBA (Common Object Request Broker Architecture <ref type="bibr" target="#b23">[24]</ref>). E-contracts are modeled as a combination of objects, which can be exchanged among different parties and stored in XML. Though workflow based contract enactment can be facilitated with another explicit flow-model, contract enforcement issues are not addressed..</p><p>In summary, previous work addressed either only specific portions of the e-contract enactment process without focus on enforcement aspects, or just some of the supporting facilities required for e-contract enforcement.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.">Conclusions</head><p>This paper has presented a meta-model for e-contracts and templates. We have also detailed a pragmatic architecture for cross-organizational e-contract enforcement comprising three layers, viz., document layer, business layer, and implementation layer. To demonstrate the feasibility of our architecture, we have presented an architecture and a methodology for developing e-contract enforcement rules, in an e-service environment, using a supplier's example. In particular, we have detailed how to analyze a contract at the document layer to define e-contract enforcement rules at the business layer. We have also highlighted typical problems that can be discovered by using our methodology, together with some measures of overcoming them. We finish our discussion with an outline of the implementation layer, which is facilitated by contemporary standard software technologies of EJB and Web services. As such, the development of a system for e-contract enforcement across organization boundaries Proceedings of the 36th Hawaii International Conference on System Sciences -2003 0-7695-1874-5/03 $17.00 (C) 2003 IEEEcan be streamlined in the context of e-service providers and consumers.</p><p>At the same time, we are working on further details of process adaptation for interoperability, e-contract negotiation <ref type="bibr" target="#b5">[6]</ref>, methodologies for preventive measures avoiding contract breaches, and the use of workflow management systems for the whole e-contract lifecycle <ref type="bibr" target="#b6">[7]</ref>. On the other hand, we are interested in the application of e-contracts and customer relationships management <ref type="bibr" target="#b7">[8]</ref> in various advanced real-life e-service environments, such as supply-chain, procurement, finance, stock trading and insurance. We are developing a more unified way to exchange information, including workflow views, with other agents, through Web services.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: Meta-Model of an E-Contract Template in UML</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: A Sales E-Contract Template as an Instance of the Meta-model in Figure 1</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head></head><label></label><figDesc>Figure 3: E-Contract Lifecycle</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 5 :</head><label>5</label><figDesc>Figure 5: A Meta-model of Contract Enforcement in UML</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 6 :</head><label>6</label><figDesc>Figure 6: Web Services Implementation of an E-Contract Enforcement System</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3" validated="false"><head>Internet Event Event Event</head><label></label><figDesc></figDesc><table>Contract Enforcer 
Contract Enactor 

Event Adapter 

External Web Service Interface 

E v e n t 

E v e n t 

A Party as 
an e-Service 
Provider 

Database 

Event Repository 
Event Subscribers List 
Business Entities 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_5" validated="false"><head>Table 2 : Basic Mapping of Contract Clauses into ECA rules Table 2 summarizes our methodology to map different types of contract clauses into enforcement ECA rules, Proceedings of the 36th Hawaii International Conference on System Sciences -2003</head><label>2</label><figDesc></figDesc><table>0-7695-1874-5/03 $17.00 (C) 2003 IEEE</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_7" validated="false"><head>Table 3 :</head><label>3</label><figDesc></figDesc><table>Sample Web Service Specifications for Contract 
Enforcement 

takeOrder Web Service 
Input: OrderRequest 
• Buyer 
o Name 
o Address 
o E-Mail 
• ProductList 
o Product 
• Product ID 
• Product Name 
• Quantity 
• Price 
Output: OrderResponse 
• OrderResult 
o OrderNr 
o Password 
o Estimated Delivery Date 

trackOrder Web Service 
Input: OrderStatusRequest 
• OrderNr 
• Password 
Output: OrderStatus 
• Progress 
• Estimated Delivery Date 
• Optional: DeliveryNr 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_8" validated="false"><head>Table 4 : Other Possible Web Services for Contract Enforcement</head><label>4</label><figDesc></figDesc><table></table></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgment</head><p>The work is partially supported by the Hong Kong Research Grant Council with the research grant (ref. HKUST6187/02E).</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Objects and Views</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Abiteboul</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Bonner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ACM SIGMOD Conference</title>
		<meeting>ACM SIGMOD Conference</meeting>
		<imprint>
			<date type="published" when="1991" />
			<biblScope unit="page" from="238" to="247" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">DartFlow: A Workflow Management System on the Web using Transportable Agents</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Cai</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">A</forename><surname>Gloor</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Nog</surname></persName>
		</author>
		<idno>PCS-TR96-283</idno>
		<imprint>
			<date type="published" when="1996" />
			<pubPlace>Dartmouth College, Hanover, N.H.</pubPlace>
		</imprint>
	</monogr>
<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m" type="main">Adaptive and Dynamic Service Composition in eFlow. HP Lab&apos;s</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Casati</surname></persName>
		</author>
		<idno>HPL-2000-39</idno>
		<imprint>
			<date type="published" when="2000-03" />
		</imprint>
	</monogr>
<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">A Three-Layer Architecture for Cross-Organization E-contract enactment</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">C</forename><surname>Cheung</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">K W</forename><surname>Chiu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Till</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Web Services, E-business and Semantic Web Workshop</title>
		<meeting>Web Services, E-business and Semantic Web Workshop</meeting>
		<imprint>
			<date type="published" when="2002-05" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">A Data-driven Methodology to Extending Workflows across Organizations over the Internet</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">C</forename><surname>Cheung</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">K W</forename><surname>Chiu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Till</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">36th Hawaii International Conference on System Sciences (HICSS36)</title>
		<imprint>
			<date type="published" when="2003-01" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">On the eNegotiation of Unmatched Logrolling Views</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">C</forename><surname>Cheung</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">C K</forename><surname>Hung</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">K W</forename><surname>Chiu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">the Proceedings of the 36th Hawaii International Conference on System Sciences (HICSS-36)</title>
		<imprint>
			<date type="published" when="2003-01" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">A Meta-model for Contract Template Driven e-Negotiation Processes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">K W</forename><surname>Chiu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">C</forename><surname>Cheung</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">C K</forename><surname>Hung</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">the Proceedings of 6th Pacific Asia Conference on Information Systems (PACIS&apos;02)</title>
		<meeting><address><addrLine>Tokyo, Japan</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2002-09" />
			<biblScope unit="page" from="854" to="868" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">An Event Driven Approach to Customer Relationship Management in an e-Brokerage Environment</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">K W</forename><surname>Chiu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">C W</forename><surname>Chan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">K W</forename><surname>Lam</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">C</forename><surname>Cheung</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><forename type="middle">T</forename><surname>Luk</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">36th Hawaii International Conference on System Sciences (HICSS36)</title>
		<imprint>
			<date type="published" when="2003-01" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title level="m" type="main">Workflow Views Based E-Contracts in a Cross-Organization E-Service Environment. Distributed and Parallel Databases</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">K W</forename><surname>Chiu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Karlapalem</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Q</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Kafeza</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2002" />
			<publisher>Kluwer Academic Publishers</publisher>
			<biblScope unit="volume">12</biblScope>
			<biblScope unit="page" from="193" to="216" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Chopra</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Zaev</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Damschen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Norton</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Dix</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Cauldwell</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Chawla</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Saunders</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Olander</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Hong</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">U</forename><surname>Ogbuji</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Richman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Professional XML Web Services</title>
		<imprint>
			<date type="published" when="2001" />
			<publisher>Wrox Press</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Active Database Management Systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">U</forename><surname>Dayal</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc 3rd International Conference on Data and Knowledge Bases</title>
		<meeting>3rd International Conference on Data and Knowledge Bases</meeting>
		<imprint>
			<date type="published" when="1989" />
			<biblScope unit="page" from="150" to="169" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title level="m" type="main">Enix Consulting Limited. An Independent Evaluation of iFlow Version 3</title>
		<ptr target="http://www.i-flow.com" />
		<imprint>
			<date type="published" when="2000" />
			<biblScope unit="volume">5</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Legal Aspects of Electronic Contracts</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Gisler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Stanoevska-Slabeva</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Greunz</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">CAiSE*00 Workshop of Infrastructures for Dynamic Business-to-Business Service Outsourcing (IDSO&apos;00) Stockholm</title>
		<imprint>
			<date type="published" when="2000-06" />
			<biblScope unit="page" from="53" to="62" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Business Contracts for B2B</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Goodchild</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Herring</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Milosevic</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the CAiSE*00 Workshop of Infrastructures for Dynamic Business-to-Business Service Outsourcing (IDSO&apos;00) Stockholm</title>
		<meeting>the CAiSE*00 Workshop of Infrastructures for Dynamic Business-to-Business Service Outsourcing (IDSO&apos;00) Stockholm</meeting>
		<imprint>
			<date type="published" when="2000-06" />
			<biblScope unit="page" from="63" to="74" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Crossflow -Cross-Organizational Workflow Support for Virtual Organization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Grefen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Hoffner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc of the Ninth International Workshop on Research Issues on Data Engineering: Information Technology for Virtual Enterprises (RIDE&apos;98</title>
		<meeting>of the Ninth International Workshop on Research Issues on Data Engineering: Information Technology for Virtual Enterprises (RIDE&apos;98</meeting>
		<imprint>
			<date type="published" when="1998" />
			<biblScope unit="page" from="90" to="91" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Electronic Contracting with COSMOS -How to Establish, Negotiate and Execute Electronic Contracts on the Internet. 2 nd Int</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Griffel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Enterprise Distributed Object Computing Workshop (EDOC &apos;98)</title>
		<imprint>
			<date type="published" when="1998" />
			<biblScope unit="page" from="46" to="55" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><forename type="middle">N</forename><surname>Grosof</surname></persName>
		</author>
		<title level="m">A declarative approach to business rules in Contracts: Courteous Logic Programs in XML, Proceedings of the 1 st ACM Conference on Electronic Commerce (EC99)</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Colorado</forename><surname>Denver</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Usa</forename></persName>
		</author>
		<imprint>
			<date type="published" when="1999" />
			<biblScope unit="page" from="68" to="77" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">A Frame Work for Modeling Electronic Contracts</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Karlaplem</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">R</forename><surname>Dani</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">R</forename><surname>Krishna</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Conference on Conceptual Modeling (ER2001)</title>
		<imprint>
			<date type="published" when="2001-11" />
			<biblScope unit="page" from="193" to="207" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Towards formal modeling of e-Contracts</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Marjanovic</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Milosevic</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of 5 th IEEE International Enterprise Distributed Object Computing Conference</title>
		<meeting>5 th IEEE International Enterprise Distributed Object Computing Conference</meeting>
		<imprint>
			<date type="published" when="2001" />
			<biblScope unit="page" from="59" to="68" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Recovery Issues in Web-Based Workflow</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">John</forename><forename type="middle">A</forename><surname>Miller</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 12th International Conference on Computer Applications in Industry and Engineering (CAINE-99)</title>
		<meeting>the 12th International Conference on Computer Applications in Industry and Engineering (CAINE-99)<address><addrLine>Atlanta, Georgia</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1999-11" />
			<biblScope unit="page" from="101" to="105" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title/>
	</analytic>
	<monogr>
		<title level="j">Object Management Group. Foreword UML specification</title>
		<imprint>
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="issue">4</biblScope>
			<date type="published" when="2001-09" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Building Web service applications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Sankaran</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Windows Developers Journal</title>
		<imprint>
			<biblScope unit="volume">12</biblScope>
			<biblScope unit="issue">10</biblScope>
			<biblScope unit="page" from="16" to="18" />
			<date type="published" when="2001-10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Siegel</surname></persName>
		</author>
		<title level="m">CORBA 3 Fundamentals and Programming</title>
		<imprint>
			<publisher>Wiley</publisher>
			<date type="published" when="2000" />
		</imprint>
	</monogr>
	<note>2nd Edition</note>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">The contract net protocol: High Level Communication and Control in a Distributed Problem Solver</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">G</forename><surname>Smith</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Computers</title>
		<imprint>
			<biblScope unit="volume">29</biblScope>
			<biblScope unit="issue">12</biblScope>
			<biblScope unit="page" from="1104" to="1113" />
			<date type="published" when="1980-12" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Using Event Semantics for Modeling Contracts</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><forename type="middle">H</forename><surname>Tan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Thoen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 35 th Hawaii International Conference on System Sciences</title>
		<meeting>the 35 th Hawaii International Conference on System Sciences</meeting>
		<imprint>
			<date type="published" when="2002" />
			<biblScope unit="page" from="2198" to="2206" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
