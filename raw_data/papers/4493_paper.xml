<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2019-03-26T16:51+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">MonDe: Safe Updating through Monitored Deployment of New Component Versions</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author role="corresp">
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jonathan</forename><surname>Cook</surname></persName>
							<email>jcook@cs.nmsu.eduorso@cc.gatech.edu</email>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science College of Computing New</orgName>
								<orgName type="institution">Mexico State University Georgia Institute of Technology Las Cruces</orgName>
								<address>
									<postCode>88003, 30332-0280</postCode>
									<settlement>Atlanta</settlement>
									<region>NM, GA</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alessandro</forename><surname>Orso</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science College of Computing New</orgName>
								<orgName type="institution">Mexico State University Georgia Institute of Technology Las Cruces</orgName>
								<address>
									<postCode>88003, 30332-0280</postCode>
									<settlement>Atlanta</settlement>
									<region>NM, GA</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">MonDe: Safe Updating through Monitored Deployment of New Component Versions</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Safely updating software at remote sites is a cautious balance of enabling new functionality and avoiding adverse effects on existing functionality. A useful first step in this process would be to evaluate the performance of a new version of a component on the current workload before enabling its functionality. This step would let the engineers assess the component&apos;s performance over more (and more realistic) data points than by simply performing regression testing in-house. In this paper we propose to evaluate the performance of a new version of a component by (1) deploying it to remote sites, (2) running it in a controlled environment with the actual workloads being generated at that site, and (3) reporting the results back to the development engineers. Running the new version can either be done on-line, alongside the current system, or offline, using capture-replay techniques. By running at the remote site and reporting concise results, issues of data security, protection, and confidentiality are diminished, yet the new version can be evaluated on real workloads.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">INTRODUCTION</head><p>In the present era, frequent software updates at remote sites are becoming the norm, as security patches are released for immediate use and other bug fixes or feature enhancements are deployed. However, safely updating software at remote sites is a cautious balance of enabling new functionality and avoiding adverse effects on existing functionality. Currently, assuring that updates do not break existing functionality is done with extensive (regression) testing before deployment, hoping that the test cases are representative of the way the software will be used in the field. Unfortunately, as some of our previous work shows <ref type="bibr" target="#b5">[6]</ref>, behavior in the field often differs from the behavior exercised in-house using synthetic workloads.</p><p>Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. To copy otherwise, to republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee. PASTE '05 Lisbon, Portugal Copyright 2005 ACM 1-59593-239-9/05/0009 ...$5.00.</p><p>We believe that, in conjunction with testing, a useful step in the software update deployment process would be to evaluate the performance of the update at the deployment sites before actually enabling its functionality. We define an update as the installation of a new version of a component or set of components. Executing the new version on-site will exercise the component with real user workloads and will allow the engineers the opportunity to view its performance over more (and more realistic) test data points than in-lab regression testing does. The use of multiple sites will also make the approach more effective and efficient, due to the possibility of splitting the evaluation among multiple sites and exercising the version over different user workloads.</p><p>Therefore, in this paper we propose a novel approach, that we call Monitored Deployment (MonDe), for performing safe software updates at remote sites. MonDe evaluates the performance of a new version of a component by (1) deploying it to remote sites, (2) running it in a controlled environment with the actual workloads being generated at that site, and (3) reporting the results back to the development engineers. By running at the remote sites and reporting concise results, issues of data security, protection, and confidentiality are diminished because the workload data stays at the customer site. Nevertheless, the new version can be evaluated on real workloads. Since the new version is not influencing the system behavior, this monitored deployment does not need to wait for the typically expensive and time-consuming regression testing that precedes full component deployment. Instead, in-house testing and testing in the field can overlap, thus providing greater assurance that, when the new version is functionally deployed, it will behave correctly in the users' environment.</p><p>We envision two ways of running the new version of the component in the users' environment. The component can be run either on-line, alongside the current system, or offline, using capture-replay techniques. Both approaches are discussed in this paper. On-line execution is presented in the context of a framework supporting compiled code (e.g., C code) and shared libraries as deployable components, while capture-replay techniques are presented in the context of Java programs, in which each class can be a deployable component. Each system has its capabilities and limitations, which are also discussed in the paper. The contribution of this paper is twofold: (1) it presents the basic idea of remote monitoring of controlled deployment of software updates into the users' environment; and (2) it provides examples of frameworks that can support this approach. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">GENERIC FRAMEWORK</head><p>The generic framework architecture is shown in <ref type="figure" target="#fig_0">Figure 1</ref>. At the development site, new versions of components are created and deployed, and remote data about component performance is evaluated and analyzed (this paper will not discuss the output analysis in depth, but rather focuses on deployment-site frameworks). At the deployment site, two capabilities are needed:</p><p>• A capture capability, for recording the interactions of the old version of the component with the existing system, thus collecting the operational workload of the component for that site.</p><p>• An execution and monitoring capability that uses the collected operational workload to drive the new version of the component in a sandboxed environment where it can be observed.</p><p>As stated before, we do not make a restriction as to whether this capture and execution must proceed in parallel or the two can be separated in time. We detail both approaches in the Sections 3 and 4.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Selecting Part of the System to Monitor</head><p>One possible way to decide which parts of the system to monitor after new components are deployed is simply to select for monitoring each changed component. However, this straightforward approach has two main drawbacks.</p><p>First, it may result in a large number of false positives in cases in which a change (and its effects) are spread over several components. To illustrate, consider the example of two functions foo and bar defined in two different components. Function foo inputs a string and returns that string in lower case and without leading and trailing white spaces. To this end, foo leverages bar's functionality. In version n of the components, foo calls bar to eliminate white spaces and then performs the transformation to lower case, whereas in version n + 1, bar performs both the transformation and the trimming (e.g., for efficiency reasons) and foo simply acts as a proxy. In such a case, monitoring all changed functions (i.e., foo and bar) independently would erroneously report problems in bar's behavior for every call that involves a string with at least a capital letter (e.g., barn(" StRing") would return "StRing", whereas barn+1(" StRing") would return "string").</p><p>Second, monitoring every changed component independently may impose unnecessary overhead on the users' executions. Consider again the example of functions foo and bar discussed above. If foo is the only function calling bar, then there is no need for monitoring bar independently because its changed behavior would be exercised through interactions of the rest of the application with foo.</p><p>The approach that we propose to alleviate these two problems is based on an analysis of the applications that use the modified components. At this initial stage of the research, we are considering an analysis of the calling relationships within the application. The analysis would be performed on the users' site and would consist of four main steps. For ease of presentation, we illustrate the analysis for the case of a single application using the modified components. Also, we discuss the analysis at the function level, but it could be adapted to operate at different levels of abstraction (e.g., the class level, for Java applications).</p><p>1. Construct a conservative call graph 1 for the application that uses the modified component(s). 2. Mark, in the call graph, the nodes that correspond to changed components. 3. Identify, in the call graph, all hammocks 2 that contain only changed components. (Note that such hammocks may contain one or more components.) 4. For each changed component, select the largest hammock that contains it, that is, the hammock with the largest number of nodes.</p><p>After these four steps are performed, each selected hammock identifies the boundaries of a part of the deployed system that our technique must monitor. Because the largest hammock is selected, intermediate unchanged functions, if their use is totally enclosed, would not cause inefficient splitting of hammocks. <ref type="figure" target="#fig_1">Figure 2</ref> shows an example application of the technique for a system that consists of seven functions, three of which are modified. In the figure, the changed functions are colored in yellow and the selected hammocks are depicted using dashed ovals. For this example, the analysis would identify two subsets of the application for our technique to monitor-our technique would need to monitor all interactions between function chgd2 and the rest of the system and all interactions between function chgd1 and the rest of the system. In the next two sections, we discuss how our technique captures such interactions for Java and C programs. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">JAVA CAPTURE AND REPLAY</head><p>One possible way of running the new version of the component in the users' environment is to use off-line techniques based on capture-replay mechanisms. We present this approach in the context of Java programs. to implement the approach, we leverage a technique and a tool previously developed by one of the authors <ref type="bibr" target="#b6">[7]</ref>. The tool is called SCARPE and performs Selective CApture and Replay of Program Executions for Java software.</p><p>Given an application, SCARPE lets one (1) select a subsystem of interest, (2) capture at runtime all the interactions between such subsystem and the rest of the application, and (3) replay the recorded interactions on the subsystem in isolation. SCARPE is designed to be efficient: for each execution, it only captures information that is relevant to that execution. To this end, it disregards all data that, although flowing through the boundary of the subsystem of interest, do not affect its execution. Intuitively, our technique captures only the minimal subset of the application's state and environment required to replay the execution considered on the selected subsystem.</p><p>In the context of the MonDe approach, the subsystem of interest would consist of one or more components (classes) identified as discussed in Section 2.1. We would use SCARPE to capture users' executions of such subsystem that would then be replayed on the new version, as illustrated in <ref type="figure">Figure 3</ref>, when free cycles are available.</p><p>In the replay phase, the technique automatically provides a replay sandbox. The replay sandbox inputs the captured executions, in the form of event logs, 3 and replays each event in the log by acting as both a driver and a stub. Replaying an event corresponds to either performing an action on the observed set (e.g., writing an observed field) or consuming an action from the observed set (e.g., receiving a method invocation originally targeted to external code). Based on the event log, the replay scaffolding is able to generate and consume appropriate actions, so that during replay the right classes are created and the interactions among these classes are reproduced.</p><p>Because the events captured also include events generated in the system of interest, such as return of values, <ref type="figure">Figure 3</ref>: Capture and replay of deployed components.</p><formula xml:id="formula_0">SCARPE ! " # $ % &amp; ' ( ) ' $ ! 0 " 1 2 3 ' $ ! $ 4 5 $ 6 $ ! ! ) 3 7 ' # 2 2 ' 3 8 9 @ A B C D E 0 # 3 2 1 " ) F D @ G 9 H E I P D C P 5 ) Q 2 " R % ( Q ) ' $ ! 5 ) Q 2 " R % ( Q ) ' $ !</formula><p>can be used as an oracle when replaying the captured executions. If the behavior of the new component(s) is observably different from the behavior of the current component(s), the problem can be reported to the developers. It may also be possible to report the (sanitized) captured execution that generated the problem. In this way, developers not only are notified, but can also reproduce and investigate the problem.</p><p>One open issue that we will have to address is how to handle situations in which the subset of the application state accessed by the updated components is different from the subset that was captured. (As stated above, we capture only a subset of the application's state to improve performance.) To address this issue, we will investigate ways to extend the amount of information captured and to balance the resulting trade-offs between efficiency and effectiveness. For example, we are already capturing complete objects of some specific classes, such as String.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">SHARED LIBRARY PARALLEL EXE-CUTION</head><p>A second method for running the new component version is to run it on-line alongside the existing component version. This technique will work well if the performance overhead does not severely impact the application, if the amount of interaction data to capture would be too much to store efficiently, or if the environment is not easily amenable to full capture yet the component interactions can be intercepted. Compiled applications (e.g., C programs) deployed using shared (dynamic link) libraries are able to utilize this on-line approach.</p><p>One of the authors has built DDL <ref type="bibr" target="#b8">[9]</ref>, an extended dynamic linker that opens up the dynamic linking process and provides programmatic control over it. DDL provides the basic capability needed to build program monitoring and manipulation tools. The two basic capabilities that DDL supports are an informative one, where DDL informs a tool of the bindings that are taking place, and a manipulative one, where DDL allows a tool to redirect a binding to a different symbol.</p><p>In previous work, we have already used DDL to perform software updates in which multiple component versions are run in parallel and allowed to immediately affect the application <ref type="bibr" target="#b0">[1]</ref>. In this work, we reuse that basic infrastructure to support the MonDE approach by running the new compo- nent version in an "evaluation mode" that prevents it from affecting the overall application. <ref type="figure" target="#fig_2">Figure 4</ref> shows the overall architecture of this approach. A new component version is loaded into the application space, but DDL-controlled linking isolates it within control of the component arbiter. The arbiter intercepts interactions with the existing version of the component and duplicates them for the new version. Results and external effects of the new version are controlled by the arbiter, and either logged for later delivery to the remote development site or compared with the existing version at run time for aggregation of results that will be sent to the development site.</p><p>In this approach, a component is a shared object. Our previous work restricts the component to be a collection of C functions or a C++ class (and its objects) that obeys the ideas and rules of component-based design: external data is not directly modified but is only done so through accessor methods or functions external to the shared object.</p><p>Our approach is different than the capture and replay approach taken with Java in that the new version is executed in parallel with the application and the old version. Under the assumptions above, this approach is easier than capture-replay because the compiled-code environment is more opaque. By running the new version in parallel with the application, it can have read-only access to application data as it needs, without having to record those accesses.</p><p>For outgoing calls that modify state, we intercept these and can do one of two things. Firstly, we can return the call without actually invoking the state-modifying code, and thus disable external state modification. This approach will work as long as the state that is maintained by the old version and the application is all that the new version needs. If the new version needs new state maintained by another component, then the hammock idea presented earlier can be extended to encapsulate that component with the other, so that they are updated together. Special consideration will also be needed for large stateful components, such as databases. In this case, if the new version needs unique state modifications, then a special stub wrapper would be used to isolate its state changes and yet keep them and make them available back to the new version when needed.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">CONCLUSION</head><p>We have proposed an approach for verifying a new version of one or more components using field data and at the field site. The approach, that we call Monitored Deployment (MonDE), works by deploying the component version and running it either on-line, in parallel with the application, or later, in a replay environment using previously captured interaction data. In either case, the new version is executed on actual field data but is prevented from affecting the system. Performance data is then sent back to the development site for evaluation by the engineers. Such an approach can assuage the concern of allowing real user data to be captured and delivered off-site, while still enabling field testing of the new version.</p><p>Related work has looked at executing component versions or variants within a system, yet not for pre-functional deployment evaluation in end-user environments <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b1">2,</ref><ref type="bibr" target="#b3">4,</ref><ref type="bibr" target="#b4">5]</ref>. Similar execution encapsulation mechanisms have been used for execution of mobile and untrusted code, intrusion detection, and other security issues (e.g., <ref type="bibr" target="#b2">[3]</ref>). Other approaches in verifying new component versions have also been investigated (e.g., <ref type="bibr" target="#b7">[8]</ref>).</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: Remote deployment and monitoring architecture.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>1Figure 2 :</head><label>2</label><figDesc>Figure 2: Example of call graph with hammocks.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 4 :</head><label>4</label><figDesc>Figure 4: Shared library-based parallel version execution.</figDesc></figure>

			<note place="foot" n="3"> Events correspond to the various forms of interactions between the subsystem of interest and rest of the application, such as method calls, access to field, and exceptions.</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgments</head><p>This work was supported in part by NSF under grants CCR-0306457, EIA-9810732, and EIA-0220590 to New Mexico State University and grants CCR-0205422, CCR-0306372, and CCR-0209322 to Georgia Tech.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">Reliable Runtime Upgrading of Binary C++ Classes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Abbas</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Cook</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Tambe</surname></persName>
		</author>
		<imprint/>
		<respStmt>
			<orgName>New Mexico State University</orgName>
		</respStmt>
	</monogr>
<note type="report_type">Technical report</note>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">On Dependability of Composite Web Services with Components Upgraded Online</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Kharchenko</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Popov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Romanovsky</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 2004 DSN Workshop on Architecting Dependable Systems</title>
		<meeting>2004 DSN Workshop on Architecting Dependable Systems</meeting>
		<imprint>
			<date type="published" when="2004-06" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Automated detection of vulnerabilities in privileged programs by execution monitoring</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Ko</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Fink</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Levitt</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 10th Annual Computer Security Applications Conference</title>
		<meeting>the 10th Annual Computer Security Applications Conference<address><addrLine>Orlando, FL</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society Press</publisher>
			<date type="published" when="1994" />
			<biblScope unit="page" from="134" to="144" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Runtime Support for Type-Safe Dynamic Java Classes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Malabarba</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Pandey</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Gragg</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Barr</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Barnes</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. European Conference on Object-Oriented Programming</title>
		<meeting>European Conference on Object-Oriented Programming</meeting>
		<imprint>
			<date type="published" when="2000" />
			<biblScope unit="page" from="337" to="361" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">COMPAS: Adaptive Performance Monitoring of Component-Based Systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Mos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Murphy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 2nd ICSE Workshop on Remote Analysis and Measurement of Software Systems</title>
		<meeting>2nd ICSE Workshop on Remote Analysis and Measurement of Software Systems</meeting>
		<imprint>
			<date type="published" when="2004-05" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Leveraging field data for impact analysis and regression testing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Orso</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Apiwattanapong</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">J</forename><surname>Harrold</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 9th European Software Engineering Conference and 10th ACM SIGSOFT Symposium on the Foundations of Software Engineering</title>
		<meeting>of the 9th European Software Engineering Conference and 10th ACM SIGSOFT Symposium on the Foundations of Software Engineering<address><addrLine>Helsinki, Finland</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2003-09" />
			<biblScope unit="page" from="128" to="137" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Selective Capture and Replay of Program Executions</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Orso</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Kennedy</surname></persName>
		</author>
		<ptr target="http://www.csd.uwo.ca/woda2005/proceedings.html" />
	</analytic>
	<monogr>
		<title level="m">Online Proc. of the Third International ICSE Workshop on Dynamic Analysis (WODA 2005)</title>
		<meeting><address><addrLine>St. Louis, MO, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2005-05" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Re-estimation of Software Reliability after Maintenance</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Podgurski</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">J</forename><surname>Weyuker</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 19th International Conference on Software Engineering</title>
		<meeting>19th International Conference on Software Engineering<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="1997" />
			<biblScope unit="page" from="79" to="85" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">DDL: Extending Dynamic Linking for Program Customization, Analysis, and Evolution</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Tambe</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Vedagiri</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Abbas</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Cook</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. International Conference on Software Maintenance</title>
		<meeting>International Conference on Software Maintenance<address><addrLine>Budapest, Hungary</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2005-09" />
		</imprint>
	</monogr>
	<note>to appear</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
