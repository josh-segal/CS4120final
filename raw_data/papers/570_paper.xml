<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2019-03-26T16:35+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Learning Arithmetic Circuits</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Daniel</forename><surname>Lowd</surname></persName>
							<email>lowd@cs.washington.edu</email>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science and Engineering</orgName>
								<orgName type="institution">University of Washington Seattle</orgName>
								<address>
									<postCode>98195-2350</postCode>
									<region>WA</region>
									<country key="US">U.S.A</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pedro</forename><surname>Domingos</surname></persName>
							<email>pedrod@cs.washington.edu</email>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science and Engineering</orgName>
								<orgName type="institution">University of Washington Seattle</orgName>
								<address>
									<postCode>98195-2350</postCode>
									<region>WA</region>
									<country key="US">U.S.A</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Learning Arithmetic Circuits</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Graphical models are usually learned without regard to the cost of doing inference with them. As a result, even if a good model is learned, it may perform poorly at prediction, because it requires approximate inference. We propose an alternative: learning models with a score function that directly penalizes the cost of inference. Specifically , we learn arithmetic circuits with a penalty on the number of edges in the circuit (in which the cost of inference is linear). Our algorithm is equivalent to learning a Bayesian network with context-specific independence by greedily splitting conditional distributions, at each step scoring the candidates by compiling the resulting network into an arithmetic circuit, and using its size as the penalty. We show how this can be done efficiently, without compiling a circuit from scratch for each candidate. Experiments on several real-world domains show that our algorithm is able to learn tractable models with very large treewidth, and yields more accurate predictions than a standard context-specific Bayesian network learner, in far less time.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">INTRODUCTION</head><p>Bayesian networks are a powerful language for probabilistic modeling, capable of compactly representing very complex dependences. Unfortunately, the compactness of the representation does not necessarily translate into efficient inference. Networks with relatively few edges per node can still require exponential inference time. As a consequence, approximate inference methods must often be used, but these can yield poor and unreliable results. If the network represents manually encoded expert knowledge, this is perhaps inevitable. But when the network is learned from data, the cost of inference can potentially be greatly reduced, without compromising accuracy, by suitably directing the learning process.</p><p>Bayesian networks can be learned using local search to maximize a likelihood or Bayesian score, with operators like edge addition, deletion and reversal <ref type="bibr" target="#b10">(Heckerman et al., 1995)</ref>. Typically, the number of parameters or edges in the network is penalized to avoid overfitting, but this is only very indirectly related to the cost of inference. Two edge additions that produce the same improvement in likelihood can result in vastly difference inference costs. In this case, it seems reasonable to prefer the edge yielding the lowest inference cost. In this paper, we propose a learning method that accomplishes this, by directly penalizing the cost of inference in the score function.</p><p>Our method takes advantage of recent advances in exact inference by compilation to arithmetic circuits <ref type="bibr">(Dar- wiche, 2003</ref>). An arithmetic circuit is a representation of a Bayesian network capable of answering arbitrary marginal and conditional queries, with the property that the cost of inference is linear in the size of the circuit. When contextspecific independences are present, arithmetic circuits can be much more compact than the corresponding junction trees. We take advantage of this by learning arithmetic circuits that are equivalent to Bayesian networks with contextspecific independence, using likelihood plus a penalty on the circuit size as the score function. Arithmetic circuits can also take advantage of other structural properties such as deterministic dependencies and latent variables; utilizing these in addition to context-specific independence is an important item of future work.</p><p>Previous work on learning graphical models with the explicit goal of limiting the complexity of inference falls into two main classes: mixture models with polynomialtime inference (e.g.: <ref type="bibr" target="#b16">Meila and Jordan (2000)</ref>; <ref type="bibr" target="#b14">Lowd and Domingos (2005)</ref>) and graphical models with thin junction trees (e.g.: <ref type="bibr" target="#b19">Srebro (2000)</ref>; <ref type="bibr" target="#b3">Chechetka and Guestrin (2008)</ref>). The former are limited in the range of distributions that they can compactly represent. The latter are computationally viable (at both learning and inference time) only for very low treewidths. Our approach can flexibly and compactly learn a wide variety of models, including models with very large treewidth, while guaranteeing efficient inference, by taking advantage of the properties of arithmetic circuits.</p><p>The prior work most closely related to ours is <ref type="bibr">Jaeger et al.'s (2006)</ref>. Jaeger et al. define probabilistic decision graphs, a new language related to binary decision diagrams. In contrast, we use standard arithmetic circuits, and our models are equivalent to standard Bayesian networks. Jaeger et al. speculate that learning arithmetic circuits directly from data would be very difficult. In this paper we propose one approach to doing this.</p><p>The remainder of our paper is organized as follows. In Sections 2 and 3, we provide background on Bayesian networks and arithmetic circuits, respectively. We describe in detail our algorithm for learning arithmetic circuits in Section 4. Section 5 contains our empirical evaluation on three real-world datasets, and we conclude in Section 6.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">BAYESIAN NETWORKS</head><p>A Bayesian network encodes the joint probability distribution of a set of n variables, {X 1 , . . . , X n }, as a directed acyclic graph and a set of conditional probability distributions (CPDs) <ref type="bibr" target="#b17">(Pearl, 1988)</ref>. Each node corresponds to a variable, and the CPD associated with it gives the probability of each state of the variable given every possible combination of states of its parents. The set of parents of X i , denoted Π i , is the set of nodes with an arc to X i in the graph. The structure of the network encodes the assertion that each node is conditionally independent of its non-descendants given its parents. The joint distribution of the variables is thus given by P (X 1 , . . . , X n ) = n i=1 P (X i |Π i ). For discrete domains, the simplest form of CPD is a conditional probability table. When the structure of the network is known, learning reduces to estimating CPD parameters. When the structure is unknown, it can be learned by starting with an empty or prior network and greedily adding, deleting and reversing arcs to optimize some score function ( <ref type="bibr" target="#b10">Heckerman et al., 1995)</ref>. The score function is usually log-likelihood plus a complexity penalty or a Bayesian score (product of prior and marginal likelihood).</p><p>The goal of inference in Bayesian networks is to answer arbitrary marginal and conditional queries (i.e., to compute the marginal distribution of a set of query variables, possibly conditioned on the values of a set of evidence variables). One common method is to construct a junction tree from the Bayesian network and pass messages from the leaves of this tree to the root and back. A junction tree is constructed by connecting parents of the same variable, removing arrows, and triangulating the resulting undirected graph (i.e., ensuring that all cycles of length four or more have a chord). Each node in the junction tree corresponds to a clique (maximal completely connected subset of variables) in the triangulated graph. Ordering cliques by the highest-ranked variable they contain, each clique is connected to a predecessor sharing the highest number of variables with it. The intersection of the variables in two adjacent cliques is called the separator of the two cliques. A junction tree satisfies two important properties: each variable in the Bayesian network appears in some clique with all of its parents; and if a variable appears in two cliques, it appears in all the cliques on the path between them (the running intersection property). The treewidth of a junction tree is one less than the maximum clique size. The complexity of inference is exponential in the treewidth. Finding the minimum-treewidth junction tree is NP-hard <ref type="bibr">(Arn- borg et al., 1987)</ref>. Inference in Bayesian networks is #P-complete <ref type="bibr" target="#b18">(Roth, 1996)</ref>.</p><p>Because exact inference is intractable, approximate methods are often used, of which the most popular is Gibbs sampling, a form of Markov chain Monte Carlo ( <ref type="bibr" target="#b9">Gilks et al., 1996)</ref>. A Gibbs sampler proceeds by sampling each nonevidence variable in turn conditioned on its Markov blanket (parents, children and parents of children). The distribution of the query variables is then approximated by computing, for each possible state of the variables, the fraction of samples in which it occurs. Gibbs sampling can be very slow to converge, and many MCMC variations have been developed, but choosing and tuning one for a given application remains a difficult, labor-intensive task. Diagnosing convergence is also difficult.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">LOCAL STRUCTURE</head><p>Table CPDs require exponential space in the number of parents of the variable. A more scalable approach is to use decision trees as CPDs, taking advantage of contextspecific independencies (i.e., a child variable is independent of some of its parents given some values of the others) <ref type="bibr" target="#b2">(Boutilier et al., 1996;</ref><ref type="bibr" target="#b4">Chickering et al., 1997</ref>). The algorithm we present in this paper learns arithmetic circuits that are equivalent to this type of Bayesian network.</p><p>In a decision tree CPD for variable X i , each interior node is labeled with one of the parent variables, and each of its outgoing edges is labeled with a value of that variable. 1 Each leaf node is a multinomial representing the marginal distribution of X i conditioned on the parent variable values specified by its ancestor nodes and edges in the tree.</p><p>The following two definitions will be useful in describing our algorithm. Definition 1. For leaf node D and k-valued variable X j , the split S(D, X j ) replaces D with k new leaves, each conditioned on a particular value of X j in addition to the parent values on the path to D. Definition 2. Let D be a leaf from the tree CPD for X i . Split S(D, X j ) is valid iff X j is not a descendant of X i in the Bayesian network and no decision tree ancestor of D is labeled with X j .</p><p>The first definition describes a structural update to the Bayesian network; the second one gives the conditions necessary for that update to be consistent and meaningful.</p><p>A Bayesian network can now be learned by greedily applying the best valid splits according to some criterion, such as the likelihood of the data penalized by the number of parameters. This is one version of Chickering et al.'s algorithm <ref type="bibr">(1997)</ref>. A number of other methods have also been proposed, such as merging leaves to obtain decision graphs ( <ref type="bibr" target="#b4">Chickering et al., 1997</ref>) or searching through Bayesian network structures and inducing decision trees conditioned on the global structure ).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">ARITHMETIC CIRCUITS</head><p>The probability distribution represented by a Bayesian network can be equivalently represented by a multilinear function known as the network polynomial <ref type="bibr" target="#b7">(Darwiche, 2003)</ref>:</p><formula xml:id="formula_0">P (X 1 = x 1 , . . . , X n = x n ) = X n i=1 I(X i = x i )P (X i = x i |Π i = π i )</formula><p>where the sum ranges over all possible instantiations of the variables, I() is the indicator function (1 if the argument is true, 0 otherwise), and the P (X i |Π i ) are the parameters of the Bayesian network. The probability of any partial instantiation of the variables can now be computed simply by setting to 1 all indicators consistent with the instantiation, and to 0 all others. This allows arbitrary marginal and conditional queries to be answered in time linear in the size of the polynomial.</p><p>Unfortunately, the size of the network polynomial is exponential in the number of variables, but it can be more compactly represented using an arithmetic circuit. An arithmetic circuit is a rooted, directed acyclic graph whose leaves are numeric constants or variables, and whose interior nodes are addition and multiplication operations. The value of the function for an input tuple is computed by setting the variable leaves to the corresponding values and computing the value of each node from the values of its children, starting at the leaves. In the case of the network polynomial, the leaves are the indicators and network parameters. The arithmetic circuit avoids the redundancy present in the network polynomial, and can be exponentially more compact.</p><p>Every junction tree has a corresponding arithmetic circuit, with an addition node for every instantiation of a separator, a multiplication node for every instantiation of a clique, and an addition node as the root. Thus one way to compile a Bayesian network into an arithmetic circuit is via a junction tree. However, when the network contains context-specific independences, a much more compact circuit can be obtained. <ref type="bibr" target="#b7">Darwiche (2003)</ref> describes one way to do this, by encoding the network into a special logical form, factoring the logical form, and extracting the corresponding arithmetic circuit.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">LEARNING ARITHMETIC CIRCUITS</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">SCORING AND SEARCHING</head><p>Instead of learning a Bayesian network and then compiling it into a circuit, we induce an arithmetic circuit directly from data using a score function that penalizes circuits with more edges. The score of an arithmetic circuit C on an i.</p><formula xml:id="formula_1">i.d. training sample T is score(C, T ) = log P (T |C) − k e n e (C) − k p n p (C)</formula><p>where the first term is the log-likelihood of the training data, P (T |C) = X∈T P (X|C), k e ≥ 0 is the per-edge penalty, n e (C) is the number of edges in the circuit, k p ≥ 0 is the per-parameter penalty, and n p (C) is the number of parameters in the circuit. The last two allow us to easily combine our inference-cost penalty with a more traditional one based on model complexity.</p><p>We use this formulation for simplicity; our algorithm would work equally well with a Bayesian Dirichlet score <ref type="bibr" target="#b10">(Heckerman et al., 1995)</ref>, with a prior of the form exp(−k e n e (C) − k p n p (C)), since the computation of the marginal likelihood would be the same as in standard Bayesian network learning. Aside from its practical utility, a prior penalizing inference cost is meaningful if we believe the inference task being modeled can be carried out quickly, for example because humans do it. Either way, the main difficulty is that the penalty (or prior) is no longer node-decomposable, and repeatedly computing it might be very expensive. Reducing this cost is one of the key technical issues addressed in this paper.</p><p>Arithmetic circuits can be learned in the same way as Bayesian networks with local structure, by starting with an empty network and greedily applying the best splits, except that candidate structures are scored by compiling them into arithmetic circuits. However, compiling an arithmetic circuit can be computationally costly, and doing so for every candidate structure would be prohibitive. A better approach is to incrementally compile the circuit as splits are applied. <ref type="table">Table 1</ref> shows pseudo-code for this algorithm.</p><p>The algorithm begins by constructing the initial arithmetic <ref type="table">Table 1</ref>: Greedy algorithm for learning arithmetic circuits.</p><p>function LearnAC(T ) initialize circuit C as product of marginals loop</p><formula xml:id="formula_2">C best ← C for each valid split S(D, V ) do C ← SplitAC(C, S(D, V )) if score(C , T ) &gt; score(C best , T ) then C best ← C end if end for if score(C best , T ) &gt; score(C, T ) then C ← C best else return C end if end loop</formula><p>circuit C as a product of marginal distributions:</p><formula xml:id="formula_3">C = i j I(X i = x ij )P (X i = x ij )</formula><p>This initial circuit is equivalent to a Bayesian network with no edges. In each iteration, the algorithm greedily chooses and applies the best valid split, where split validity is defined according to the equivalent Bayesian network. Each split is scored by applying it to the current circuit and counting the edges and parameters. <ref type="bibr">2</ref> Learning ends when the algorithm reaches a local optimum, where no valid split improves the score.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">SPLITTING DISTRIBUTIONS</head><p>The key subroutine is SplitAC, which updates an arithmetic circuit without recompiling it from scratch. Given an arithmetic circuit C that is equivalent to a Bayesian network B and a valid split S(D, V ), SplitAC returns a modified circuit C that is equivalent to B after applying split S(D, V ). We will use the following notation to refer to distributions, parameter nodes, and indicator nodes:  </p><note type="other">between M and V or D for i ∈ Domain(V ) do create new parameter nodes d ij N i ← copy of all nodes in N for each n ∈ N do let n i be the copy of n in N i for each child c of n do if c = v i or c is inconsistent with v i then skip else if c is some parameter node d j then insert edge from n i to d ij else if c ∈ N then let c i be the copy of c in N i insert edge from n i to c i else insert edge from n i to c end if end for end for end for for m ∈ M do</note><p>let n V be the child of m that is a V -ancestor let n D be the child of m that is a D-ancestor for i ∈ Domain(V ) do let n V be the copy of n V in N i let n D be the copy of n D in N i create n ×i := v i × n V × n D end for create n + := i n ×i replace m's children n V and n D with n + end for delete unreachable nodes, including all d j <ref type="table" target="#tab_0">Table 2</ref> contains pseudo-code for the splitting algorithm. It might at first appear that to split D on V it suffices to replace references to each d j with a sum of products, i d ij v i . However, the resulting circuit would then be correct only when V is fixed to a particular value, and summing out V would produce inconsistent results. Intuitively, the circuit must maintain the running intersection property of the corresponding junction tree, so that no variable can take on different values in different subcircuits. SplitAC maintains a consistent probability distribution by preserving three properties, analogous to those defined by <ref type="bibr" target="#b6">Darwiche (2002)</ref> for logical circuits. C is decomposable if, for each multiplication node, no two children are ancestors of indicator nodes for the same variable or parameter nodes from distributions of the same variable.</p><p>C is deterministic if, for each addition node, there is a variable V such that each child is the ancestor of some non-empty set of indicator nodes for V , and their sets are disjoint.</p><p>The network polynomial for a Bayesian network contains one term for each configuration of its variables; each term includes exactly one indicator variable and one conditional probability parameter per variable. Intuitively, if C is not smooth, then some terms in the polynomial it computes may not have an indicator variable and a conditional probability parameter for every variable. If C is not decomposable, then some terms in the polynomial may have more than one indicator variable or conditional probability parameter for some variable. If C is not deterministic, then there may be multiple terms for the same set of indicator variables. A V -ancestor is any leaf v i corresponding to an indicator of V , or any parent of a V -ancestor.</p><p>A mutual ancestor (MA) of D and V is a node that is both a D-ancestor and a V -ancestor, and has no child that is both a D-ancestor and a V -ancestor.</p><p>Note that every MA must be a multiplication node, or the circuit would not be smooth. Furthermore, from decomposability, each MA must have exactly one D-ancestor child, n D , and one V -ancestor child, n V . Naively replacing d j with i d ij v i would cause both n V and n D to be ancestors of v i , violating decomposability.</p><p>To avoid this, SplitAC duplicates the subcircuits between the MAs and the parameter nodes d j , and between the MAs and the indicator nodes v i , "conditioning" each copy on a different value of V . Each n V and n D are replaced by a new addition node, n + , that sums over products of v i and copies of n V and n D conditioned on v i . This duplication of subcircuits is the reason different splits can have widely different edge costs. We now describe the details of which nodes are duplicated and how they are connected.</p><p>Let N be the set of all D-ancestors and V -ancestors that are also descendants of a mutual ancestor. These are all the nodes "in between" D and V that must agree on the value of V . For each value i in the domain of V , SplitAC creates a copy N i of the nodes in N . Let n i ∈ N i be the copy of node n ∈ N . SplitAC inserts edges from n i to its children as follows. If n has a child c ∈ N , then it inserts an edge from n i to the corresponding copy c i . If n has a child c ∈ N , then it inserts an edge from n i to c. This minimizes node duplication by linking to existing nodes or copies whenever possible.</p><p>A few additional changes are required for N i to properly depend on v i . If n i ∈ N i has some parameter node d j as a child, SplitAC replaces it with d ij . This is how the new leaf distributions, conditioned on V , are integrated into the circuit. Secondly, if n i has v i as a child, it should be omitted: every node in N i will depend on v i , so this is redundant. Finally, if n i has a child that is an ancestor of some v j but not of v i , then that child is inconsistent with conditioning on v i and must be removed.</p><p>Finally, SplitAC connects each mutual ancestor, m, to a sum over these copies. SplitAC removes the D-ancestor, n D , and the V -ancestor, n V , as children of m and replaces them with an addition node with one child for each value of V . The ith child of the addition node is a product of v i , the copy of n D from N i , and the copy of n V from N i . (If m was an ancestor of only certain values of V , the addition node sums only over those values.) Intuitively, the resulting circuit represents the correct probability distribution because D has been replaced with the split distributions D i , each conditioned on v i , and because the circuit satisfies the running intersection property, since all nodes between V and D now depend on V . Theorem 1. After each iteration of LearnAC, C computes the network polynomial of a Bayesian network constructed by starting with an empty network and applying the same splits that were applied to C up to that iteration.</p><p>A proof sketch is in the appendix; a complete proof can be found in <ref type="bibr" target="#b15">(Lowd &amp; Domingos, 2008</ref>).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">OPTIMIZATIONS</head><p>We now discuss optimizations necessary to make this algorithm practical for real-world datasets with many variables.</p><p>Consider once again the high-level overview in <ref type="table">Table 1</ref>. Scoring every possible circuit in every iteration would be very expensive. Choosing the split that leads to the best scoring circuit is equivalent to choosing the split that leads to the greatest increase in score, so we can store changes in score instead. The improvement in log-likelihood is not affected by other splits, and so this only needs to be computed once for each potential split. Unfortunately, the number of edges that a split adds to the circuit can increase or decrease due to other splits. For convenience, we will refer to the number of edges added by the application of a split as its edge cost.</p><p>As a simple example, consider a chain-structured junction tree of 5 variables: AB-BC-CD-DE-EF. If we add an arc from A to F, then A is added to every other cluster: AB-ABC-ACD-ADE-AEF. However, this also reduces the cost of adding an arc from A to E, since the two variables now appear together in a cluster. As a second example, suppose that we instead added an arc from B to F: AB-BC-BCD-BDE-BEF. Now the cost of adding an arc from A to F is greatly increased, since adding a variable to a larger cluster costs more edges than adding a variable to a smaller cluster.</p><p>Evaluating the edge cost of every potential split in every iteration is expensive. The number of potential splits is linear in the number of splits that have been performed so far, leading to a time complexity that is at least quadratic in the total number of splits. Further, computing the edge cost for a single candidate may be linear in the size of the current circuit. With a non-zero edge cost, circuit size tends to be linear in the number of iterations, leading to an O(n 3 ) algorithm. While this is still polynomial, it makes learning models with thousands of splits intractable in practice.</p><p>Fortunately, most splits only change a fraction of edge costs. Determining exactly which costs need to be updated is difficult, but we can rule out many splits whose costs do not need to be updated using the following conservative rule. Applying one split may change the edge cost of another split S(D, V ) if the applied split changes a node that is an ancestor of D and not V , or of V and not D. This covers all nodes that lie between D or V and their mutual ancestors, and thus all nodes that are copied by the splitting procedure. An applied split changes a node when it copies that node or reduces the number of children it has. In practice, this single heuristic lets us avoid recomputing over 95% of the edge costs.</p><p>As an alternative to this optimization, we have found a heuristic that leads to even larger speed-ups, but at the cost of no longer being perfectly greedy. We noticed that when edge costs changed, they rarely decreased. If a split's last computed edge cost was always a valid lower bound on the true value, then we could ignore any split whose total estimated score was worse than the best split found so far in this iteration. This assumption is often not valid in practice, but it lets us learn models that are nearly as effective in an order of magnitude less time.</p><p>Two other optimizations combine well with either of the above to offer further gains. First, we can reduce the number of computations by placing potential splits in order of decreasing likelihood gain, so that we consider the splits with the highest possible scores first. Since the likelihood gain is an upper bound on the score gain, once the score of the best split found so far is greater than the next likelihood gain, this split is guaranteed to be the highest-scoring one overall.</p><p>Second, we can exit the edge calculation procedure once we know that the edge cost is sufficient to make the overall score negative. It is also possible to exit once we know that the score of the current split will be worse than the best split so far, but this interferes with the other optimizations. If we only compute an upper bound on the score, we will often have to recompute the edge cost when the next iteration requires a slightly lower upper bound.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">EXPERIMENTS</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">DATASETS</head><p>We evaluated our methods on three widely used realworld datasets. The KDD Cup 2000 clickstream prediction dataset ( <ref type="bibr" target="#b13">Kohavi et al., 2000</ref>) consists of web session data taken from an online retailer. Using the subset of <ref type="bibr" target="#b11">Hulten and Domingos (2002)</ref>, each example consists of 65 Boolean variables, corresponding to whether or not a particular session visited a web page matching a certain category. Anonymous MSWeb is visit data for 294 areas (Vroots) of the Microsoft web site, collected during one week in February 1998. It can be found in the UCI machine learning repository <ref type="bibr" target="#b1">(Blake &amp; Merz, 2000</ref>). EachMovie 3 is a collaborative filtering dataset in which users rate movies they have seen. We took a 10% sample of the original dataset, focused on the 500 most-rated movies, and reduced each variable to "rated" or "not rated". For KDD Cup and MSWeb, we used the training and test partitions provided with the datasets. For EachMovie, we randomly selected 10% of the data for the test set and used the remainder for training.</p><p>Basic statistics for each dataset are shown in <ref type="table" target="#tab_1">Table 3</ref>. Density refers to the fraction of non-zero entries across all examples and all variables.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">LEARNING</head><p>For each dataset, we randomly split the training data into tuning and validation sets, corresponding to 90% and 10% of the training data, respectively. All parameters were tuned by training models on the tuning data and selecting the parameter sets that led to the highest log likelihood of the validation set. Finally, models were retrained using the full training set. All experiments were run on CPUs with 4 GB of RAM running at 2.8 GHz.</p><p>We used two versions of the algorithm for learning arithmetic circuits from Section 4: AC-Greedy, which guarantees that we pick the best split in each iteration, and ACQuick, which uses a heuristic to avoid recomputing edge costs but may sometimes choose worse splits. We varied the per-edge cost k e from 1.0 to 0.01. Not surprisingly, our models were most accurate on the validation set with low per-edge costs (0.01 or 0.02). We also tuned the perparameter cost k p . For KDD Cup, the best cost was 0.0; for MSWeb and EachMovie, the best costs were 1.0 for greedy ACs and 0.5 for quick ACs.</p><p>We used the WinMine Toolkit <ref type="bibr" target="#b5">(Chickering, 2002</ref>) as a baseline. WinMine implements the algorithm for learning Bayesian networks with local structure described in Section 2 ( <ref type="bibr" target="#b4">Chickering et al., 1997)</ref>, and has a number of other state-of-the-art features. We tuned WinMine's multiplicative per-parameter penalty κ; the best values were: 1 (no penalty) for KDD Cup, 0.1 for MSWeb, and 0.01 for EachMovie. We looked into using thin junction trees as a second baseline, but they do not scale to datasets of these dimensions.</p><p>A summary of the learned models appears in <ref type="table" target="#tab_2">Table 4</ref>. For each dataset, we report the log-likelihood per example on the test data, the number of edges in the arithmetic circuit, the number of leaves across all decision trees, the average and maximum number of parents across all variables, the treewidth (estimated using a min-fill heuristic), the number of edges generated by compiling the Bayesian network using c2d <ref type="bibr">4</ref> , and the training time. On each model for which c2d ran out of memory, we obtained a lower bound by compiling a model with fewer splits, obtained by halting the learning process early. We varied the number of splits until we found the most complex sub-model that could still be compiled, within 10 splits. For WinMine, the chosen sub-models had less than one quarter of the original splits.</p><p>The test-set log-likelihoods of the AC learners and WinMine are very similar, with WinMine having a slight edge. This is not surprising, given that WinMine is free to choose expensive splits. Perhaps more remarkable is that this freedom translates to very little improvement in likelihood. The difference in accuracy between quick and greedy ACs is negligible except in the case of EachMovie, where the greedy AC is actually less accurate because it did not converge in the allowed time (72h).</p><p>Not surprisingly, WinMine is much faster than the AC learners. It is worth noting that the cost of learning is only incurred once, while the cost of inference is incurred many times. Also, the AC learner directly outputs an arithmetic circuit, while WinMine's Bayesian network would still have to be compiled into one, which can be very time- consuming. Finally, the quick heuristic offers up to an order-of-magnitude speedup with similar accuracy; additional heuristics might offer additional improvements.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3">INFERENCE</head><p>For each dataset, we used the test data to generate queries with varied numbers of randomly selected query and evidence variables. Each query asked the probability of the configuration of the query variables in the test example conditioned on the configuration of the evidence variables in the same test example.</p><p>We estimate inference accuracy as the mean log probability of the test examples's configuration across all test examples. This is an approximation (up to an additive constant) of the Kullback-Leibler divergence between the inferred distribution and the true one, estimated using the test samples. For KDD Cup and MSWeb, we generated queries from 1000 test examples; for EachMovie, we gen- For the arithmetic circuits, we used exact inference. For the Bayesian networks learned using WinMine, we used Gibbs sampling. We initialized the sampler to a random state, ran it for a burn-in period, and then collected samples to estimate the probability of the queried marginal or conditional event. All estimates were smoothed by uniformly distributing a count of 1 across all states of the query variables. Since convergence is difficult to diagnose and may take prohibitively long, we ran Gibbs sampling in four scenarios: fast (one chain, 100 burn-in iterations, 1000 sampling iterations); medium (ten chains, 100 burn-in iterations, 1000 sampling iterations); slow (ten chains, 1000 burn-in iterations, 10,000 sampling iterations); and very slow (ten chains, 10,000 burn-in iterations, 100,000 sampling iterations). <ref type="figure" target="#fig_3">Figure 1</ref> shows the relative accuracy of the different methods on each dataset. Per-variable query log-likelihood is on the y axis. In the graphs on the left, each query included 30% of the variables in the domain, conditioned on 0% to 50% of the domain variables as evidence. In the graphs on the right, the number of query variables varies from 10% to 50%, conditioned on 30% of the variables in the domain as evidence. Inference times (averaged over all queries) are listed in <ref type="table" target="#tab_3">Table 5</ref>. Note that AC inference times are in milliseconds, while Gibbs inference times are in seconds.</p><p>The ACs were roughly one order of magnitude faster than the fastest runs of Gibbs sampling, and four orders of magnitude faster than the slowest. Except when the number of query variables is very small, the ACs also easily dominate even the slowest runs of Gibbs sampling on accuracy. Because of the approximate inference, the slightly higher test-set log-likelihood of WinMine's models does not translate into higher accuracy in answering queries. Presumably, given enough time Gibbs sampling will eventually catch up with the ACs in accuracy, but by then it will be many orders of magnitude slower. Further, Gibbs sampling (like other approximate inference methods) requires tuning for best results, and we can never be sure that it has converged. In contrast, the AC inference is reliable, the time it takes is predetermined, and the time is short enough for online or interactive use.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">CONCLUSION</head><p>In the past, work on learning and inference in graphical models has been largely separate. This has had the somewhat paradoxical result that much effort is often expended to learn accurate models, only to result in less accurate predictions when approximate inference becomes necessary. Our work seeks to ameliorate this by more closely integrating learning and inference. In particular, we presented an algorithm for learning arithmetic circuits by maximizing likelihood with a penalty on circuit size. This ensures efficient inference while still providing great modeling flexibility. In experiments on real-world domains, our algorithm outperformed standard Bayesian network learning on both accuracy of query answers and speed of inference.</p><p>Directions for future work include: investigating other algorithms for learning arithmetic circuits; extending our approach to handle learning with missing data and hidden variables; applying it to Markov networks, continuous domains, and relational representations; etc. : Conditional log probability per query variable, per query. In the legend, AC-G refers to AC-Greedy and AC-Q refers to AC-Quick. Gibbs-F, Gibbs-M, Gibbs-S and Gibbs-V refer to the fast, medium, slow, and very slow Gibbs sampling scenarios, respectively.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>d</head><label></label><figDesc>j : Parameter node corresponding to the jth probability in the multinomial distribution D. D i : Leaf distribution resulting from split S(D, V ) that re- places D when V = i. d ij : Parameter node corresponding to the jth probability in D i . v i : Indicator node I(V = i).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Definition 3 .</head><label>3</label><figDesc>For an arithmetic circuit, C: C is smooth if, for each addition node, all children are an- cestors of indicator nodes for the same variables and pa- rameter nodes from distributions of the same variables.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Definition 4 .</head><label>4</label><figDesc>We define three special types of node in the circuit as follows: A D-ancestor is any leaf d j corresponding to a parameter of D, or any parent of a D-ancestor.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 1</head><label>1</label><figDesc>Figure 1: Conditional log probability per query variable, per query. In the legend, AC-G refers to AC-Greedy and AC-Q refers to AC-Quick. Gibbs-F, Gibbs-M, Gibbs-S and Gibbs-V refer to the fast, medium, slow, and very slow Gibbs sampling scenarios, respectively.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0" validated="false"><head>Table 2 :</head><label>2</label><figDesc></figDesc><table>Subroutine that updates an arithmetic circuit C by 
splitting distribution D on variable V . 

function SplitAC(C, S(D, V )) 
let M be the set of mutual ancestors of D and V 
let N be the set of nodes </table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1" validated="true"><head>Table 3 : Summary of experimental datasets.</head><label>3</label><figDesc></figDesc><table>Domain 
Vars. Train Exs. Test Exs. Density 
KDD Cup 
65 
199,999 
34,955 
0.0079 
MSWeb 
294 
32,711 
5,000 
0.0102 
EachMovie 
500 
6,117 
591 
0.0581 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2" validated="true"><head>Table 4 : Summary of Learned Models</head><label>4</label><figDesc></figDesc><table>KDD Cup 
AC-Greedy AC-Quick WinMine 
Log-likelih. 
−2.16 
−2.16 
−2.16 
Edges 
382K 
365K 
Leaves 
4574 
4463 
2267 
Avg. parents 
13.2 
13.0 
16.3 
Max. parents 
37 
36 
35 
Treewidth 
38 
38 
53 
c2d edges 
&gt;18.2M 
3664k 
&gt;39.5M 
Time 
50h 
3h 
3m 

MSWeb 
AC-Greedy AC-Quick WinMine 
Log-likelih. 
−9.85 
−9.85 
−9.69 
Edges 
204K 
256K 
Leaves 
1353 
1870 
1710 
Avg. parents 
2.5 
3.1 
5.2 
Max. parents 
114 
127 
94 
Treewidth 
114 
127 
118 
c2d edges 
&gt;23.5M 
&gt;44.6M 
&gt;63.5M 
Time 
8h 
3h 
2m 

EachMovie 
AC-Greedy AC-Quick WinMine 
Log-likelih. 
−55.7 
−54.9 
−53.7 
Edges 
155K 
372K 
Leaves 
4070 
6521 
4830 
Avg. parents 
5.0 
6.5 
8.0 
Max. parents 
13 
17 
27 
Treewidth 
35 
54 
281 
c2d edges 
207k 
855k 
&gt;27.3M 
Time 
&gt;72h 5 
22h 
3m 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3" validated="true"><head>Table 5 : Average inference time per query.</head><label>5</label><figDesc></figDesc><table>Algorithm 
KDD Cup MSWeb EachMovie 
AC-Greedy 
194ms 
91ms 
62ms 
AC-Quick 
198ms 
115ms 
162ms 
Gibbs-Fast 
1.46s 
1.89s 
7.22s 
Gibbs-Medium 
11.3s 
15.6s 
42.5s 
Gibbs-Slow 
106s 
154s 
452s 
Gibbs-VerySlow 
1124s 
1556s 
3912s 

erated queries from all 593 test examples. 

</table></figure>

			<note place="foot" n="1"> In general, each outgoing edge can be labeled with any subset of the variable&apos;s values, as long as the sets of labels assigned to all child edges include every variable value and are disjoint with each other. For simplicity, we limit our discussion to the case in which each edge has a single label, which Chickering et al. (1997) refer to as a complete split. For Boolean variables, as in our experiments, all types of splits are equivalent.</note>

			<note place="foot" n="2"> All model parameters are MAP estimates, using a Dirichlet prior with all hyperparameters α ijk = 1, where k ranges over the leaves of the decision tree for variable Xi.</note>

			<note place="foot" n="3"> Provided by Compaq at http://research.compaq.com/SRC/-eachmovie/; no longer available for download, as of October 2004.</note>

			<note place="foot" n="4"> Available at http://reasoning.cs.ucla.edu/c2d/. We also tried using the ACE package, but it does not support decision tree CPDs and, for our models, tabular CPDs would be prohibitively large.</note>

			<note place="foot" n="5"> AC-Greedy did not finish running in the maximum allowed time of 72h. As a result, it has fewer edges and lower loglikelihood than AC-Quick.</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgements</head><p>The authors wish to thank Mark Chavira, Adnan Darwiche, and Knot Pipatsrisawat for help applying c2d to our Bayesian networks. This research was partly funded by a Microsoft Research fellowship awarded to the first author, DARPA contracts NBCH-D030010/02-000225, FA8750-07-D-0185, and HR0011-07-C-0060, DARPA grant FA8750-05-2-0283, NSF grant IIS-0534881, and ONR grant N-00014-05-1-0313. The views and conclusions contained in this document are those of the authors and should not be interpreted as necessarily representing the official policies, either expressed or implied, of DARPA, NSF, ONR, or the United States Government.</p></div>
			</div>

			<div type="annex">
			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Complexity of finding embeddings in a k-tree</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Arnborg</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">W</forename><surname>Corneil</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Proskurowski</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SIAM J. Algebraic &amp; Discrete Methods</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="page" from="277" to="284" />
			<date type="published" when="1987" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">UCI repository of machine learning databases</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Blake</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">J</forename><surname>Merz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Dept</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Ics</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">A</forename><surname>Irvine</surname></persName>
		</author>
		<ptr target="http://-www.ics.uci.edu/∼mlearn/MLRepository.html" />
		<imprint>
			<date type="published" when="2000" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Context-specific independence in Bayesian networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Boutilier</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Friedman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Goldszmidt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Koller</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. UAI-96</title>
		<meeting>UAI-96</meeting>
		<imprint>
			<date type="published" when="1996" />
			<biblScope unit="page" from="115" to="123" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title level="m" type="main">Efficient principled learning of thin junction trees</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Chechetka</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Guestrin</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2008" />
			<biblScope unit="volume">20</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">A Bayesian approach to learning Bayesian networks with local structure</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Chickering</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Heckerman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Meek</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. UAI-97</title>
		<meeting>UAI-97</meeting>
		<imprint>
			<date type="published" when="1997" />
			<biblScope unit="page" from="80" to="89" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">The WinMine toolkit</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">M</forename><surname>Chickering</surname></persName>
		</author>
		<idno>MSR-TR-2002-103</idno>
		<imprint>
			<date type="published" when="2002" />
			<pubPlace>Microsoft, Redmond, WA</pubPlace>
		</imprint>
	</monogr>
<note type="report_type">Tech. Rept.</note>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">A logical approach to factoring belief networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Darwiche</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. KR-02</title>
		<meeting>KR-02</meeting>
		<imprint>
			<date type="published" when="2002" />
			<biblScope unit="page" from="409" to="420" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">A differential approach to inference in Bayesian networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Darwiche</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. ACM</title>
		<imprint>
			<biblScope unit="volume">50</biblScope>
			<biblScope unit="page" from="280" to="305" />
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Learning Bayesian networks with local structure</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Friedman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Goldszmidt</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. UAI-96</title>
		<meeting>UAI-96</meeting>
		<imprint>
			<date type="published" when="1996" />
			<biblScope unit="page" from="252" to="262" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title level="m" type="main">Markov chain Monte Carlo in practice</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">R</forename><surname>Gilks</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Richardson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Spiegelhalter</surname></persName>
		</author>
		<editor>D. J.</editor>
		<imprint>
			<date type="published" when="1996" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Learning Bayesian networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Heckerman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Geiger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">M</forename><surname>Chickering</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Mach. Learn</title>
		<imprint>
			<biblScope unit="volume">20</biblScope>
			<biblScope unit="page" from="197" to="243" />
			<date type="published" when="1995" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Mining complex models from arbitrarily large databases in constant time</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Hulten</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Domingos</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. KDD-02</title>
		<meeting>KDD-02</meeting>
		<imprint>
			<date type="published" when="2002" />
			<biblScope unit="page" from="525" to="531" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Learning probabilistic decision graphs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Jaeger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Nielsen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Silander</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Intl. J. Approx. Reasoning</title>
		<imprint>
			<biblScope unit="volume">42</biblScope>
			<biblScope unit="page" from="84" to="100" />
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Kohavi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Brodley</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Frasca</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Mason</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Zheng</surname></persName>
		</author>
		<title level="m">Cup 2000 organizers&apos; report: Peeling the onion. SIGKDD Explorations</title>
		<imprint>
			<date type="published" when="2000" />
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="page" from="86" to="98" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Naive Bayes models for probability estimation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Lowd</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Domingos</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. ICML-05</title>
		<meeting>ICML-05</meeting>
		<imprint>
			<date type="published" when="2005" />
			<biblScope unit="page" from="529" to="536" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<title level="m" type="main">Learning arithmetic circuits</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Lowd</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Domingos</surname></persName>
		</author>
		<ptr target="http://www.cs.washington.edu/homes/∼lowd/-lactr.pdf" />
		<imprint>
			<date type="published" when="2008" />
		</imprint>
		<respStmt>
			<orgName>Dept. CSE, Univ. Washington</orgName>
		</respStmt>
	</monogr>
<note type="report_type">Tech. Rept.</note>
	<note>Seattle</note>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Learning with mixtures of trees</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Meila</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Jordan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Mach. Learn. Research</title>
		<imprint>
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="page" from="1" to="48" />
			<date type="published" when="2000" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<title level="m" type="main">Probabilistic reasoning in intelligent systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Pearl</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1988" />
			<publisher>Morgan Kaufmann</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">On the hardness of approximate reasoning</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Roth</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Artif. Intel</title>
		<imprint>
			<biblScope unit="volume">82</biblScope>
			<biblScope unit="page" from="273" to="302" />
			<date type="published" when="1996" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<monogr>
		<title level="m" type="main">Maximum likelihood Markov networks: An algorithmic approach</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Srebro</surname></persName>
		</author>
		<idno>MA. APPENDIX: PROOF SKETCH FOR THEOREM 1</idno>
		<imprint>
			<date type="published" when="2000" />
		</imprint>
	</monogr>
	<note>Master&apos;s thesis, MIT, Cambridge</note>
</biblStruct>

<biblStruct xml:id="b20">
	<monogr>
		<title level="m" type="main">At every iteration of LearnAC, C is smooth, decomposable, and deterministic</title>
		<imprint/>
	</monogr>
	<note>Lemma 2</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
