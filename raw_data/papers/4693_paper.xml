<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2019-03-26T16:58+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Facility Location with Service Installation Costs</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><forename type="middle">B</forename><surname>Shmoys</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chaitanya</forename><surname>Swamy</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Retsef</forename><surname>Levi</surname></persName>
						</author>
						<title level="a" type="main">Facility Location with Service Installation Costs</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<note>(Extended Abstract)</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>We consider a generalization of the uncapacitated facility location problem which we call Facility Location with Service Installation Costs. We are given a set of facilities, F, a set of demands or clients D, and a set of services S. Each facility i has a facility opening cost fi, and we have a service installation cost of f l i for every facility-service pair (i, l). Each client j in D requests a specific service g(j) ∈ S and the cost of assigning a client j to facility i is given by cij. We want to open a set of facilities, install services at the open facilities, and assign each client j to an open facility at which service g(j) is installed, so as to minimize the sum of the facility opening costs, the service installation costs and the client assignment costs. Our main result is a primal-dual 6-approximation algorithm under the assumption that there is an ordering on the facilities such that if i comes before i 񮽙 in this ordering then for every service type l, f l i ≤ f l i 񮽙. This includes (as special cases) the settings where the service installation cost f l i depends only on the service type l, or depends only on the location i. With arbitrary service installation costs, the problem becomes as hard as the set-cover problem. Our algorithm extends the algorithm of Jain &amp; Vazirani [9] in a novel way. If the service installation cost depends only on the service type and not on the location, we give an LP rounding algorithm that attains an improved approximation ratio of 2.391. The algorithm combines both clustered randomized rounding [6] and the filtering based technique of [10, 14]. We also consider the k-median version of the problem where there is an additional requirement that at most k facilities may be opened. We use our primal-dual algorithm to give a constant-factor approximation for this problem when the service installation cost depends only on the service type.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Facility location problems have been widely studied in the Operations Research community (see for e.g. <ref type="bibr" target="#b11">[12]</ref>). In its simplest version, uncapacitated facility location (UFL), we are given a set of facilities, F , and a set of demands or clients D. Each facility i has a facility opening cost f i and the cost of assigning a client j to facility i is given by c ij . We want to open some facilities from the set F and assign each demand to an open facility. The goal is to minimize the sum of the facility opening costs and the client assignment costs. This problem has a wide range of applications. For example, a company might want to open its warehouses at some locations so that its total cost of opening warehouses and servicing customers is minimized.</p><p>In various applications, the clients are differentiated according to the kind of service they require and to satisfy the service requirement of a client we have to assign it to a facility that can provide the service required by the client. For example, in the warehouse location problem above, the customers may be retail stores that request different kinds of supplies. A warehouse may store different kinds of supplies. To satisfy a customer we have to assign it to a warehouse that holds inventory of the type requested by the customer. We model such a setting by saying that in addition to facilities and clients, we have a set of services S. Each client j in D requests a specific service g(j) ∈ S. To satisfy client j we have to assign it to an open facility on which service g(j) is installed. Further, if we install service l on an open facility i we incur a service installation cost of f l i . We want to open a set of facilities, install services at the open facilities, and assign each client j to an open facility i such that service g(j) is installed at i. The cost of a solution is the sum of the facility opening costs, the service installation costs and the client assignment costs, and the goal is to find a solution with minimum total cost. We call this problem, Facility Location with Service Installation Costs. In the warehouse location problem, the service installation cost corresponds to the initial cost of setting up the warehouse to store the particular kind of inventory. The notion of service-dependent fixed costs is also used in inventory problems where one incurs a joint setup cost to start a new order and an item-dependent fixed cost to order a specific item, so one needs to coordinate the placement of item orders; see <ref type="bibr" target="#b0">[1]</ref> for a survey. We assume throughout that the assignment costs c ij form a metric.</p><p>Applications and Related Work. Facility location with service installation costs can be used to model a data management/caching problem. Here we are given a set of locations in a network at which caches may be built and a set of processes located at the nodes of the network that request data items. Each process requests a specific data item. To satisfy the request we must assign the process to a cache that stores the requested data item, incurring an access cost proportional to the distance between the process site and the cache location. Building a cache at a location incurs a location dependent cost and storing a data item in a cache at a particular location incurs a cost that depends on the data item and the location. The goal is to build caches, store data items in the caches and assign each process to a cache containing the data item requested by the process, so as to minimize the total cost of building caches, storing data items and the access cost of requests. This is exactly the facility location problem with service installation costs where the caches are facilities, the processes are clients and the data items correspond to services. <ref type="bibr">Baev &amp; Rajaraman [3]</ref> considered a closely related problem called the data placement problem and gave a 20.5-approximation algorithm. Here caches of fixed capacity are already built at certain locations and the goal is to find a placement of data items to caches respecting the cache capacities that minimizes the sum of the access costs and the cost of storing data items. The ratio has recently been improved by Swamy <ref type="bibr" target="#b15">[16]</ref>.</p><p>Facility location with service installation costs is a generalization of UFL -if there is just one service type then this is simply the uncapacitated facility location problem. There is a large body of literature that deals with designing approximation algorithms for metric UFL and we sample only a few results below; see <ref type="bibr" target="#b12">[13]</ref> for a survey of this and earlier work. Shmoys, <ref type="bibr">Tardos &amp; Aardal [14]</ref> gave the first constantfactor approximation algorithm for this problem using the filtering technique of <ref type="bibr">Lin &amp; Vitter [10]</ref> to round the optimal solution of a linear program. Chudak &amp; Shmoys <ref type="bibr" target="#b4">[5,</ref><ref type="bibr" target="#b5">6]</ref> gave an LP rounding based 񮽙 1 + 2 e 񮽙 -approximation algorithm. They combined randomized rounding and the decomposition results of <ref type="bibr" target="#b13">[14]</ref> to get a variant that might be called clustered randomized rounding. Sviridenko <ref type="bibr" target="#b14">[15]</ref> improved the ratio to 1.58. Jain &amp; Vazirani <ref type="bibr" target="#b8">[9]</ref> gave a combinatorial primal-dual 3-approximation algorithm where the LP is used only in the analysis. The current best ratio for UFL is 1.52 <ref type="bibr" target="#b10">[11]</ref> obtained by building upon a dual-fitting based greedy algorithm of Jain, Mahdian, Markakis, Saberi &amp; Vazirani <ref type="bibr" target="#b7">[8]</ref>.</p><p>Our Results. Our main result is a primal-dual 6-approximation algorithm for the facility location problem with service installation costs under the assumption that there is an ordering on the facilities such that if i comes before i 񮽙 in this ordering then for every service type l, f l i ≤ f l i 񮽙 . This is reasonable in many settings; for example, one expects the inventory setup cost of a warehouse in New York city to be less than the inventory setup cost in a remote town like Ithaca regardless of the kind of inventory. As special cases this includes the cases where the service installation cost f l i depends only on the service type l, or depends only on the location i. In the former setting where the service installation cost depends only on the service type we give an algorithm based on LP rounding that attains a much improved approximation ratio of 2.391. We show that with arbitrary service installation costs the problem becomes as hard as the set-cover problem. Combined with the result of Feige <ref type="bibr" target="#b6">[7]</ref>, this shows that no polynomial-time algorithm with a ratio of (1 − 񮽙) ln |D| exists for this problem in the general case unless NP ⊆ DTIME[n O(log log n) ]. We also consider the k-median version of the problem where there is an additional requirement that at most k facilities may be opened. We use our primal-dual algorithm to give a constant-factor approximation for this problem when the service installation cost depends only on the service type.</p><p>Our Techniques. Facility location with service installation costs is a generalization of UFL. It differs however from traditional multi-level extensions of facility location where we assume that a demand can be assigned to any facility in any level. In our problem demand j may only be assigned to a level 1 "facility" <ref type="bibr">(i, g(j)</ref>) and then to facility i in level 2. Moreover, existing techniques for UFL and multi-level facility location do not readily generalize. If there were no facility opening costs we could decouple the problem into several UFL instances, one for each service type, and solve each one separately. With facility opening costs this approach fares badly since we may end up opening a lot of facilities and spend too much on the facility opening costs. All known algorithms for UFL rely on the fact, either in the design or the analysis, that a client j can be moved from a facility i to another nearby facility i 񮽙 without increasing its assignment cost by much, and leaving the facility opening cost unchanged. In our problem, reassigning j to i 񮽙 may now require us to install service g(j) on i 񮽙 causing us to pay the installation cost f g(j) i 񮽙 which could be large. Technically the hard part is to find a way to reassign clients to nearby facilities so that we do not pay too much to install services at the new locations. With arbitrary service installation costs such a reassignment need not be possible since we can encode the constraint that a client may only be assigned to a specific set of facilities, making the problem set-cover hard.</p><p>We build upon the primal-dual algorithm of <ref type="bibr" target="#b8">[9]</ref> in a novel way and give a 6-approximation algorithm under the assumption that the facilities are ordered so that if i comes before i 񮽙 then f l i ≤ f l i 񮽙 for every service l. At a high level, the idea is to consider an integer programming formulation of the problem and the dual of its linear programming relaxation, and construct simultaneously an integer primal solution and a dual solution. Each client j has a dual variable α j which can be interpreted intuitively as the payment that j is willing to make to get itself assigned to an open facility.</p><p>The Jain-Vazirani (JV) algorithm <ref type="bibr" target="#b8">[9]</ref> for UFL works in two phases. In phase I we grow each dual variable α j uniformly and gradually build a primal feasible solution. Once α j becomes equal to c ij for some facility i, j starts paying toward the facility opening cost of i. When the total contribution to i from the various clients equals f i , we declare i to be tentatively open and assign all the unassigned clients contributing toward i to i. Phase I ends when each client is assigned to a tentatively open facility. At this point a client could be contributing towards multiple tentatively open facilities. We call a set of facilities independent if each client contributes towards at most one facility in the set. In phase II we select a maximal independent subset of tentatively open facilities and open these. The analysis shows that if the facility i to which a client j was assigned in phase I is not opened, then there is a "nearby" open facility i 񮽙 to which j can be reassigned.</p><p>Our algorithm also proceeds in phases. During phase I we tentatively open some facilities, tentatively install service l on some facilities for each service type l, and assign each client j to a tentatively open facility on which service g(j) is tentatively installed. Phase II is more involved. We have to select a set of facilities to open and install services in such a way that we can, (1) pay for installing the services, and (2) ensure that if a client j has to be reassigned there is a nearby open facility on which service g(j) is installed. We show that we can achieve properties <ref type="formula">(1)</ref> and <ref type="formula">(2)</ref> if we look at the facilities in a particular order and pick a maximal independent subset greedily. This gives us a 6-approximation algorithm.</p><p>Our primal-dual algorithm exploits the property that in the JV algorithm any maximal independent set of tentatively open locations may be picked. Although this is a well-known fact, to our knowledge this has been used in only a couple of applications previously. Bartal, Charikar and Raz <ref type="bibr" target="#b3">[4]</ref> consider a clustering problem and use the JV algorithm to solve a relaxation of the problem by picking an appropriate maximal independent set. Archer, Rajagopalan and Shmoys <ref type="bibr" target="#b1">[2]</ref> pick a maximum independent set and use this to prove a bound on the integrality gap of the k-median LP.</p><p>When the service installation cost depends only on the service type, we give an LP-rounding algorithm that combines clustered randomized rounding <ref type="bibr" target="#b5">[6]</ref> and the filtering based technique of <ref type="bibr" target="#b9">[10,</ref><ref type="bibr" target="#b13">14]</ref>. A feature of the algorithm is that we bound distances c ij using both the α j bound due to complementary slackness and the bound obtained by filtering. This gives a better performance guarantee than that obtained by using either of the two bounds separately. Sviridenko <ref type="bibr" target="#b14">[15]</ref> also used the two bounds in conjunction to improve the approximation ratio for UFL from 񮽙 1 + 2 e 񮽙 to 1.58.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">A Linear Program</head><p>We can formulate the problem as an integer program and relax the integrality constraints to get a linear program. We use i to index the facilities in F , j to index the clients in D and l to index the services in S.</p><formula xml:id="formula_0">min 񮽙 i f i y i + 񮽙 i 񮽙 l f l i y l i + 񮽙 j 񮽙 i c ij x ij (P) s.t. 񮽙 i x ij ≥ 1 ∀j x ij ≤ y g(j) i ∀i, j x ij ≤ y i ∀i, j x ij , y i , y l i ≥ 0 ∀i, j, l.</formula><p>Variable y i indicates if facility i is open, y l i indicates if service type l is installed at i, and x ij indicates if client j is connected to facility i. The first constraint states that each client must be assigned to a facility, the second and the third constraints say that if client j is assigned to facility i, then service g(j) must be installed on i and i must be open. An integral solution corresponds exactly to a solution to our problem. Let G l be the set of clients requesting service l. The dual program is,</p><formula xml:id="formula_1">max 񮽙 j α j (D) s.t. α j ≤ c ij + β ij + θ ij ∀i, j (2.1) 񮽙 j∈G l θ ij ≤ f l i ∀i, l 񮽙 j β ij ≤ f i ∀i (2.2) α j , β ij , θ ij ≥ 0 ∀i, j.</formula><p>Intuitively α j is the budget that j is willing to spend to get itself assigned to an open facility. Constraint (2.1) says that a part of this goes towards paying for the assignment cost c ij . The rest gets divided into a payment for the service installation cost θ ij , and a payment for the facility opening cost β ij .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">A Primal-Dual Algorithm</head><p>We consider instances of the problem where there is an ordering on the facilities in F such that if i comes before i 񮽙 in this ordering then for every service type l, </p><formula xml:id="formula_2">f l i ≤ f l i 񮽙 .</formula><formula xml:id="formula_3">i ≤ i 񮽙 if i comes before i 񮽙 in the ordering O.</formula><p>The algorithm is strongly motivated by the primaldual algorithm of Jain and Vazirani for the traditional uncapacitated facility location algorithm. In our algorithm, we first construct a feasible dual solution, and then use this dual solution to extract a feasible (integer) primal solution. As has been the norm, our algorithm is a dual ascent algorithm, so all dual variables are only increased throughout the execution of the algorithm.</p><p>We next describe the algorithm. There is a notion of time around which the algorithm is specified. We start at time t = 0, all dual variables are initialized to 0, each demand j is said to be unfrozen, and all facilities are closed. At first, the variables that are increased are the α j s; more precisely, for any unfrozen demand j, α j is always equal to the time t. We say that demand j is tight with facility i, or has reached i, if α j ≥ c ij . As time increases, we will freeze demand points, tentatively open facilities, and tentatively install services at facilities. We increase the α j of each demand j until one of the following events happens:</p><p>1. Suppose that demand j becomes tight with facility i. If service g(j) is not tentatively installed at i, then we start increasing θ ij at the same rate as α j ; that is, if α j = t, then θ ij = t−c ij . If service g(j) is tentatively installed, but i is not tentatively open, we instead increase β ij at the same rate as α j ; that is, if α j = t, then θ ij remains 0, but β ij = t − c ij . Finally, if service g(j) is tentatively installed, and i is tentatively open, we freeze demand point j (and no longer increase α j ).</p><p>2. Suppose that for a facility i and a service type l, we get that 񮽙 j∈G l θ ij = f l i : in this case, we tentatively install service l at i. If i is also tentatively open, then we freeze each demand j ∈ G l that is tight with i (and no longer increase α j ). If i is not yet tentatively open, then for each demand j ∈ G l that is tight with i, we no longer increase θ ij , but instead start increasing β ij at the same rate as α j .</p><p>3. Suppose that for a facility i, 񮽙 j β ij = f i : in this case, we tentatively open i. For each demand j, we do not increase β ij from now on. If demand j is tight with i and service g(j) is tentatively installed at i, we freeze j (and no longer increase α j ).</p><p>We only raise the α j , β ij , θ ij of unfrozen demands. Frozen demands do not participate in any events. We continue this process until all demands become frozen. Let (α, β, θ) denote the final dual solution obtained by the above process. Observe that if i is the facility that caused j to freeze, then service g(j) must be tentatively installed at i, and i must be tentatively open.</p><p>We now specify which facilities to open, how to install services on facilities, and how to assign demands to facilities. Let F be the set of tentatively open facilities, and let F l ⊆ F be the set of tentatively open facilities on which service l is tentatively installed. For facility i ∈ F , let t i be the time at which i became tentatively open. If i ∈ F l , let t il be the time at which service l was tentatively installed at i.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Opening facilities.</head><p>We open a subset of facilities from F . We say that i, i 񮽙 ∈ F are dependent if there is a demand j such that both β ij and β i 񮽙 j are positive. We consider the facilities in F in the order given by O and pick a maximal independent set of facilities, F 񮽙 ⊆ F . We open the facilities in F 񮽙 .</p><p>Installing services. Consider service type l and the set of facilities F l . We say that facilities i, i 񮽙 ∈ F l are service-l-dependent if there exists some demand j in G l such that both θ ij and θ i 񮽙 j are positive. We pick a maximal independent subset F 񮽙 l by looking at facilities in F l in a particular order: first we consider facilities in F l ∩ F 񮽙 in increasing order of t il , and then facilities in F l − F 񮽙 in increasing order of t i .</p><p>We first install service l on all facilities in</p><formula xml:id="formula_4">F 񮽙 l ∩ F 񮽙 . Furthermore, for each i ∈ F 񮽙 l − F 񮽙 ,</formula><p>we pick a facility i 񮽙 ∈ F 񮽙 such that i 񮽙 and i are dependent and i 񮽙 ≤ i (in the ordering given by O), and install service l on facility i 񮽙 . We say that i 񮽙 is the neighbor of i and denote it by nbr(i). Note that nbr(.) depends only on i and not on the service type l: if i / ∈ F 񮽙 , then we can choose a single facility i 񮽙 ∈ F 񮽙 such that i 񮽙 ≤ i regardless of the service type l.</p><p>Assigning demands. We assign each client j to the nearest open facility at which service g(j) is installed.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Analysis.</head><p>We now bound the performance of our algorithm. The following lemma just says what it means for a demand j to get frozen. </p><formula xml:id="formula_5">f i = 񮽙 i∈F 񮽙 񮽙 j∈D β ij = 񮽙 j∈D 񮽙 񮽙 i∈F 񮽙 β ij ≤ 񮽙 j∈D 񮽙 α j .</formula><p>By the definition of nbr(i), we know that for any service type l, f l nbr(i) ≤ f l i . For each i ∈ F 񮽙 l , we install service l either at i ∈ F 񮽙 l or at nbr(i), and so we can upper bound the total cost of installing services of type l by 񮽙</p><formula xml:id="formula_6">i∈F 񮽙 l f l i . Since each service l is tentatively installed only when f l i = 񮽙 j∈G l θ ij , we have that 񮽙 i∈F 񮽙 l f l i = 񮽙 j∈G l 񮽙 i∈F 񮽙 l θ ij .</formula><p>The notion of service-l-dependence insures that for each demand j ∈ G l , there is at most one facility i ∈ F 񮽙 l for which θ ij is positive. We obtain that the total cost of installing service l is at most 񮽙 j∈G l α j , which immediately implies the lemma.</p><p>We next bound the assignment cost incurred by the solution computed. The following facts, which follow directly from the construction of the algorithm, will be useful in this analysis.</p><formula xml:id="formula_7">Fact 3.1. Suppose that β ik is positive. Then it follows that c ik ≤ α k − β ik and α k ≤ t i . Fact 3.2. Suppose that θ ik is positive. Then c ik ≤ α k − θ ik and c ik &lt; t ig(k) . If β ik = 0 then α k ≤ t ig(k) .</formula><p>For example, we use these in deriving the following bounds.</p><p>Claim 3.1. If i and i 񮽙 are dependent facilities in F , then c ii 񮽙 &lt; 2 min(t i , t i 񮽙 ).</p><p>Proof. Let k be a client such that β ik and β i 񮽙 k are positive. Applying Fact 3.1 for both of these, and applying the triangle inequality, we get that c ii 񮽙 &lt; 2α k ≤ 2 min(t i , t i 񮽙 ).</p><p>Claim 3.2. Let i, i 񮽙 ∈ F l be service-l-dependent due to demand k ∈ G l . Then c ii 񮽙 &lt; 2 max(t il , t i 񮽙 l ) and both c ik and c i 񮽙 k are less than α k .</p><p>Proof. From the dependence of i and i 񮽙 , it follows that θ ik and θ i 񮽙 k are positive. Applying Fact 3.2 for both of these, and using the triangle inequality, we get that c ii 񮽙 &lt; 2 max(t il , t i 񮽙 l ), c ik &lt; α k and c i 񮽙 k &lt; α k .</p><p>Lemma 3.3. If j ∈ D 񮽙 , then the assignment cost incurred for j is at most 3α j ; if j 񮽙 ∈ D 񮽙 , then the assignment cost incurred for j is at most 5α j .</p><p>Proof. We will show that there always exists some open facility with service g(j) installed that is no further from j than the claimed bound (and hence the closest one, to which j is assigned, is no further away).</p><p>Consider j ∈ D 񮽙 with g(j) = l. Let i be the unique facility in F 񮽙 for which β ij is positive. If i ∈ F 񮽙 l , then we have installed service l at i, and c ij ≤ α j − β ij . Otherwise, i 񮽙 and i are service-l-dependent for some i 񮽙 in</p><formula xml:id="formula_8">F 񮽙 ∩ F 񮽙 l with t i 񮽙 l ≤ t il . So, by Claim 3.2, c ii 񮽙 &lt; 2 max(t il , t i 񮽙 l ) = 2t il . Since β ij &gt; 0, it follows that t il ≤ α j − β ij . So by the triangle inequality, c i 񮽙 j ≤ 3α j .</formula><p>Now consider a demand j / ∈ D 񮽙 , and again let g(j) = l. Let i be the facility that caused j to freeze, and so α j = max(c ij , t i , t il ). If i ∈ F 񮽙 ∩ F 񮽙 l , then service l is installed at i, and c ij ≤ α j . Suppose that i ∈ F 񮽙 l − F 񮽙 , and let i 񮽙 = nbr(i) (an open facility at which service l is installed, see <ref type="figure" target="#fig_0">Fig. 1a)</ref>. By Claim 3.1,</p><formula xml:id="formula_9">c ii 񮽙 ≤ 2t i =⇒ c i 񮽙 j ≤ 3α j .</formula><p>Next suppose that i 񮽙 ∈ F 񮽙 l . Since i ∈ F l , there must exist i 񮽙 ∈ F 񮽙 l such that i was not picked in F 񮽙 l because i and i 񮽙 are service-l-dependent due to a client k. If i 񮽙 is also in F 񮽙 <ref type="figure" target="#fig_0">(Fig. 1b)</ref>, then service l is installed there. Applying Claim 3.2, we obtain that both c i 񮽙 k and c ik are less than α k ≤ max(t i , t il ) ≤ α j , and hence c i 񮽙 j ≤ 3α j . However, if i 񮽙 񮽙 ∈ F 񮽙 (so i / ∈ F 񮽙 ), then let i 񮽙񮽙 = nbr(i 񮽙 ); service l is installed at i 񮽙񮽙 <ref type="figure" target="#fig_0">(Fig. 1c)</ref>. Since i 񮽙 and i servicel-dependent, we have that t i 񮽙 ≤ t i , c i 񮽙 i 񮽙񮽙 ≤ 2 min(t i 񮽙 , t i 񮽙񮽙 ) (Claim 3.1), and c i 񮽙 j ≤ 3α j as above, which implies that c i 񮽙񮽙 j ≤ 5α j . This completes the proof.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Theorem 3.1. The above algorithm returns a solution of cost at most</head><formula xml:id="formula_10">6 񮽙 j α j ≤ 6 · OPT .</formula><p>Proof. Follows from Lemma 3.2 and Lemma 3.3.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">An LP-Rounding Algorithm</head><p>We now give an algorithm for the special case where f l i = f l , i.e., the installation cost depends only on the service l and not on the location at which it is installed. Note that this case is handled by the primaldual algorithm above. Here we adapt the rounding procedure of <ref type="bibr" target="#b5">[6]</ref> to give deterministic and randomized approximation algorithms achieving ratios of 6 and 2.391 respectively.</p><p>Let (x, y) and (α, β, θ) be the optimal solutions to (P) and (D) respectively. We can ensure that for and y l i = 0 or y l i = y i . We will round the fractional solution (x, y) to an integer solution losing a factor of at most 6. Let F j = {i : x ij &gt; 0}. We describe the algorithm briefly.</p><formula xml:id="formula_11">(a) (b) j k i i 񮽙 i ∈ F 񮽙 l − F 񮽙 , i 񮽙 = nbr(i) j k i i 񮽙 i / ∈ F 񮽙 l , i 񮽙 , i are service-l-dependent (c) j k k 񮽙 i i 񮽙 i 񮽙񮽙 ≤ αj ≤ α k ≤ α k ≤ t i 񮽙 ≤ t i</formula><p>A1. First, for every service type l, we consider the clients in G l and cluster the facilities on which service l is installed around some cluster centers: pick j ∈ G l with smallest α j value and form a cluster around j consisting of the facilities in F j . We remove every client k ∈ G l (including j) that is assigned (fractionally) to some facility in the cluster created, and recurse on the remaining set of clients until no client in G l is left. Let D l be the set of cluster centers. Proof. The cost of installing a service is independent of the location at which it is installed, and for any service type l, we install service on at most one (new) location per cluster center in D l . So the total cost of installing services is at most 񮽙 Thus we have proved the following theorem.</p><formula xml:id="formula_12">A2. Let D = 񮽙 l D l .</formula><formula xml:id="formula_13">l 񮽙 j∈D l f l = 񮽙 l 񮽙 j∈D l f l 񮽙 i∈Fj y i ≤ 񮽙 i,l f l i y l i . Lemma</formula><p>Theorem 4.1. The cost of the solution returned is at most 6 · OPT .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Improvement using randomization.</head><p>We give a rounding procedure that combines clustered randomized rounding <ref type="bibr" target="#b5">[6]</ref> and the filtering based technique of <ref type="bibr" target="#b9">[10,</ref><ref type="bibr" target="#b13">14]</ref>. We define some notation first. Let 0 &lt; γ &lt; 1 be a parameter that we will set later and r = 1 γ . Sort the facilities in F j by increasing c ij . Let i 񮽙 be the first facility in this ordering such that 񮽙 񮽙 i∈Nj y i = γ. The cost of the fractional solution remains unchanged by these transformations and any solution to the modified instance gives a solution to the original instance of no greater cost.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>R1</head><p>. This is the same as step A1 except that we choose j ∈ G l with smallest 2α j +C j (γ)+ ¯ C j as the cluster center. This gives us a set of cluster centers D l for each service type l.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>R2. We prune the set D =</head><p>񮽙 l D l as in step A2 but modify the notion of dependency to say that j, k ∈ D are dependent if N j ∩ N k 񮽙 = φ, and consider the clients in D in increasing order of C j (γ) + ¯ C j . For k ∈ D − D 񮽙 we define nbr(k) as before. We call the facilities in N j for clients j ∈ D 񮽙 central facilities, and the rest as non-central facilities.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>R3. For every client j ∈ D 񮽙 we randomly open exactly</head><p>one facility in N j by choosing facility i with probability y i / 񮽙 i∈Nj y i = r · y i . This facility now serves as a backup facility for all the clients that would get assigned to this facility in step A3 of the deterministic algorithm.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>R4. Independent of step R3, each non-central facility i</head><p>is opened independently with probability r · y i .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>R5</head><p>. For any facility i, be it a central or a non-central facility, if i is opened (in R3 or R4), we install on it all services that are installed on it in the fractional solution, i.e., all l such that y l i &gt; 0. Proof. Each facility i is opened with probability r · y i . The cost of installing services in step R5 is bounded by</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>R6. For every client</head><formula xml:id="formula_14">񮽙 i Pr[i is opened (in R3 or R4)] 񮽙 l:y l i &gt;0 f l i = 񮽙 i r · y i 񮽙 l:y l i &gt;0 f l i = r · 񮽙 i,l f l i y l i since y l i &gt; 0 =⇒ y l i = y i . Consider client j ∈ D − D 񮽙 with g(j) = l. For every non-central facility i ∈ F j , let E i be the event that i is opened in step R4 and p i = Pr[E i ] = r · y i . For every cluster center k ∈ D 񮽙 such that S k = F j ∩ N k 񮽙 = φ, let E k be the event that a facility from S k is open after step R3. Let p k = Pr[E k ] = È i∈S k yi È i∈N k yi = r · 񮽙 i∈S k y i .</formula><p>Let m be the total number of events. All the events E i are independent. The probability that service l is installed in step R6 due to client j, is the probability that no facility from F j is open after steps R3 and R4, which is at most</p><formula xml:id="formula_15">񮽙 m n=1 (1 − p n ) ≤ e − È n pn = e −r .</formula><p>So the cost of installing services in step R6 is at most</p><formula xml:id="formula_16">1 e r 񮽙 j∈D−D 񮽙 f g(j) ≤ 1 e r 񮽙 i,l f l i y l i since 񮽙 i∈Fj y l i = 1 and any two clients in D l have disjoint F j .</formula><p>To bound the assignment cost, we bound the assignment cost incurred under a provably worse way of assigning demands to facilities. Demand j is assigned to a facility as follows. If some facility i ∈ F j is open, we assign demand j to the nearest such facility. Otherwise if j ∈ D − D 񮽙 , j is assigned to its backup facility. If j / ∈ D, there is some client k ∈ D g(j) ⊆ D such that j was removed from G g(j) because a cluster was formed around k in step R1. We assign j to the same facility as k; so j may be assigned either to a facility in F k or to its backup facility in N nbr(k) , if k / ∈ D 񮽙 and no facility from F k is open. Note that service g(j) is installed on the facility to which j is assigned. We need the following lemma from <ref type="bibr" target="#b5">[6]</ref> (see also <ref type="bibr" target="#b14">[15]</ref>).</p><formula xml:id="formula_17">Lemma 4.5. Let d 1 ≤ d 2 ≤ . . . ≤ d m and 0 ≤ p n ≤ 1 for n = 1, . . . , m. Then, p 1 d 1 + (1 − p 1 )p 2 d 2 + · · ·+ (1 − p 1 ) · · · (1 − p m−1 )p m d m ≤ 񮽙 n≤m p n d n 񮽙 n≤m p n 񮽙 1 − 񮽙 n≤m (1 − p n ) 񮽙 .</formula><p>Lemma 4.6. Let j be any demand. Let X be the distance between j and the facility assigned to it and Z be the event that no facility i ∈ F j is open. Then,</p><formula xml:id="formula_18">(i) If j / ∈ D 񮽙 , E 񮽙 X|Z 񮽙 ≤ 3α j + C j (γ) + ¯ C j , (ii) E 񮽙 X 񮽙 ≤ ¯ C j + 1 e r (3α j + C j (γ)). Proof. If j ∈ D 񮽙 , E 񮽙 X 񮽙 = 񮽙 i∈Nj c ij x ij /</formula><p>񮽙 i∈Nj x ij ≤ ¯ C j since every facility in F j − N j is farther from j than every facility in N j . For j / ∈ D 񮽙 , we show (i) and use it to prove (ii).</p><p>Suppose j ∈ D − D 񮽙 , k = nbr(j) and A = N j ∩ N k 񮽙 = φ. For any facility i ∈ A we have c ij ≤ α j and c ik ≤ C k (γ). Let B be the distance between j and its backup facility in N k . Event Z implies that j is assigned to the backup facility in N k so conditioned on Z, X = B. If there is some i ∈ A such that c ik ≤ ¯ C k we have a deterministic bound of B ≤ α j + ¯ C k + C k (γ). If there is no such i in A, since the unconditional distance between k and the backup facility in N k is at most ¯ C k , by conditioning on Z we are only removing weight from facilities that are farther than the average distance. So the conditional expected distance between k and the backup facility is at most ¯ C k implying that</p><formula xml:id="formula_19">E 񮽙 B|Z 񮽙 = E 񮽙 X|Z 񮽙 ≤ α j + C k (γ) + ¯ C k . In either case E 񮽙 X|Z 񮽙 ≤ α j + C j (γ) + ¯ C j ,</formula><p>where the last inequality follows since we look at clients in D in increasing order of C j (γ) + ¯ C j and k was picked before j.</p><formula xml:id="formula_20">If j / ∈ D, there must be a client k 񮽙 ∈ D g(j)</formula><p>such that j was removed from G g(j) because a cluster was formed around k 񮽙 in step R1. So j, k 񮽙 are assigned to the same facility, 2α</p><formula xml:id="formula_21">k 񮽙 + C k 񮽙 (γ) + ¯ C k 񮽙 ≤ 2α j + C j (γ) + ¯ C j and c jk 񮽙 ≤ α j + α k 񮽙 .</formula><p>If a facility in F k 񮽙 is open then we have a deterministic bound of X ≤ α j + 2α k 񮽙 . Otherwise j, k 񮽙 are assigned to the backup facility for k 񮽙 and by the above bound on E 񮽙 X|Z 񮽙 for k 񮽙 , the conditional expected distance from j to the backup facility is at most</p><formula xml:id="formula_22">α j + 2α k 񮽙 + C k 񮽙 (γ) + ¯ C k 񮽙 ≤ 3α j + C j (γ) + ¯ C j .</formula><p>We now prove part (ii). For a non-central facility i ∈ F j , let p i and E i be as defined in <ref type="bibr">Lemma 4.4</ref> </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>and let</head><formula xml:id="formula_23">d i = c ij . For every k ∈ D 񮽙 such that S k = F j ∩ N k 񮽙 = φ, let p k , E k be as defined in Lemma 4.4 and define d k = E 񮽙 distance from j to S k |E k 񮽙 = 񮽙 i∈S k c ij y i / 񮽙 i∈S k y i . Let the distances be ordered so that d 1 ≤ d 2 ≤ . . . ≤ d m</formula><p>where there are m events in all. Since the events E i are independent and </p><formula xml:id="formula_24">y i = x ij , p = Pr[Z] = 񮽙 m n=1 (1 − p n ) ≤ e − È n pn = e −r . So, E 񮽙 X 񮽙 ≤ p 1 d 1 + (1 − p 1 )p 2 d 2 + · · · + (1 − p 1 ) · · · (1 − p m−1 )p m d m + p · E 񮽙 X|Z 񮽙 ≤ 񮽙 n≤m p n d n 񮽙 n≤m p n (1 − p) + p(3α j + C j (γ) + ¯ C j ) ≤ ¯ C j + 1 e r (3α j + C j (γ)).</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">The k-Median Variant</head><p>We consider a variant of this problem where we have the additional constraint that at most k facilities may be opened. This adds the constraint 񮽙 i y i ≤ k to the linear program (P). The objective function of the dual (D) gets modified to max 񮽙 j α j − kz and constraint (2.2) changes to 񮽙 j β ij ≤ f i + z. Let (KP) and (KD) be the modified primal and dual programs and OPT K be the value of an optimal k-median solution.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">A modified primal-dual algorithm.</head><p>We first modify the primal-dual algorithm of Section 3 to obtain the stronger guarantee that we return a solution to (P) of cost (O, I, C), and a solution (α, β, θ) to (D) such that 6O + I + C ≤ 6 񮽙 j α j ≤ 6 · OPT , where O, I, C denote respectively the facility opening cost, the service installation cost and the client assignment cost. We describe the algorithm briefly and sketch the analysis. The dual ascent process is the same as in Section 3 but we modify the way in which we open facilities and install services to ensure that a demand j does not pay for both opening a facility and for installing a service at some other facility. To do this we consider a more detailed notion of dependence between facilities. We classify 4 types of dependence between facilities. Say that the ordered pair (i, i 񮽙 ) is,</p><p>(1) ff-dependent (f for facility) if there is a demand j such that β ij , β i 񮽙 j &gt; 0.</p><p>(2) sf-l dependent (s for service) if there exists j ∈ G l such that θ ij , β i 񮽙 j &gt; 0.</p><p>(3) ss-l dependent if for some j ∈ G l , both θ ij , θ i 񮽙 j &gt; 0.</p><p>(4) fs-l dependent if for some j ∈ G l , both β ij , θ i 񮽙 j &gt; 0.</p><p>Recall that F is the set of tentatively open facilities, F l ⊆ F the set of tentatively open facilities on which service l is tentatively installed, t i is the time at which facility i ∈ F became tentatively open, and for i ∈ F l , t il is the time at which service l was tentatively installed at i. Initially for each facility i ∈ F , let S i be the set of services that are tentatively installed at i. </p><formula xml:id="formula_25">(i 񮽙 ). Otherwise, b) For every l ∈ S i 񮽙 , if (i, i 񮽙 ) is fs-l dependent (so t i 񮽙 l ≥ t i 񮽙 ) or l ∈ T i and (i, i 񮽙 ) is ss-l dependent, set S i 񮽙 ← S i 񮽙 − {l}.</formula><p>We open the facilities in F 񮽙 and for each i ∈ F 񮽙 install all of the services in T i at i.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>M2</head><p>. We now install services at some more facilities. Consider service type l. Let A l be the facilities in The bound on the assignment cost incurred is similar to the bound in Lemma 4.3 and is proved similarly.</p><formula xml:id="formula_26">F 񮽙 at which service l is installed (i.e., l ∈ T i ). Note that A l ⊆ F 񮽙 ∩ F l . Let B l = F l − F 񮽙 .</formula><p>Lemma 5.2. If j ∈ D 񮽙 , the assignment cost of j is at most 3(α j − β o(j)j ). If j / ∈ D 񮽙 the assignment cost incurred for j is at most 5α j .</p><p>Combining the above two lemmas and the fact that for j ∈ D 񮽙 , α j = c o(j)j + β o(j)j + θ o(j)j , we get the following theorem.</p><p>Theorem 5.1. The solution returned has cost (O, I, C) such that 6O + I + C ≤ 6 񮽙 j α j ≤ 6 · OPT .</p><p>5.2 An 18-approximation algorithm. Suppose we fix z and run the above primal-dual algorithm with the facility costs modified to f i + z. Suppose the algorithm returns a primal solution of cost (O, I, C) that opens k facilities and a dual solution (α, β, θ). Here O is the facility opening cost with the original costs f i . Then, we can show that we have a solution of cost at most 6 · OPT K . since (α, β, θ, z) is a feasible solution to (KD) and by Theorem 5.1, 6(O +kz)+I +C+ ≤ 6 񮽙 j α j =⇒ 6O+I +C ≤ 6( 񮽙 j α j −kz) ≤ 6·OPT K . So our goal is to find such a z in polynomial time. We do not quite know how to do this, instead we find two values z 1 &gt; z 2 , close together such that the algorithm opens k 1 &lt; k facilities for z 1 and k 2 &gt; k facilities for z 2 . When z is very large, e.g., |D|(max ij c ij + max il f l i ), the algorithm will open just one facility and at z = 0 the algorithm opens &gt; k (we assume this -otherwise the solution at z = 0 costs at most 6·OPT K since (α, β, θ, 0) is a feasible dual solution). We perform a bisection search in this range to find z 1 and z 2 . We combine these two solutions to first get a fractional solution of cost 6(1 − 񮽙) −1 · OPT K , for some small 񮽙, that (fractionally) opens k facilities and in which each demand is assigned to at most two facilities. If the service cost depends only on the service type, we can round this solution losing a factor of 3(1 − 񮽙) to get an integer solution that opens exactly k facilities, thus getting an overall approximation ratio of 18. This idea was used in <ref type="bibr" target="#b8">[9]</ref> for the k-median variant of UFL. However our final rounding procedure differs from the one in <ref type="bibr" target="#b8">[9]</ref> since we also have to pay for installing services and need to ensure that demand j is connected to an open facility at which service g(j) is installed.</p><p>Theorem 5.2. If the service installation cost depends only on the service and not on the location, we can get an 18-approximation algorithm for the k-median variant of facility location with service installation costs.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Extensions</head><p>Arbitrary Demands. Our results carry over to the case where instead of unit demands, client j may have a demand d j ≥ 0. We can reduce this to the unit demand case by making d j copies of client j, but this makes the algorithm run in pseudo-polynomial time. We can simulate this reduction however. In the primal-dual algorithm we raise α j at rate d j and say that j has reached i if α j ≥ d j c ij . In the LP rounding algorithms of Section 4 the only change is that α j gets replaced with α j /d j in steps A1, A2 and R1. The analysis in Sections 3, 4 and 5 extends in a straightforward way and we get the same approximation guarantees.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: Bounding the assignment cost of j. (a), (b) Different 3-hop cases, and (c) the 5-hop case.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Theorem 4. 2 .</head><label>2</label><figDesc>The randomized algorithm produces a solution of expected cost at most, max 񮽙 r + 4 e r , 1 + 1 (1 − γ)e r + 3 e r 񮽙 · OPT where r = 1/γ. Taking γ = 0.67674 we get a solution of cost at most 2.391 · OPT . Proof. From the definition of C j (γ) and the Markov property we have, C j (γ) ≤ ¯ Cj 1−γ . The proof now follows from Lemmas 4.4 and 4.6.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1" validated="false"><head>Lemma 3 .1. Let i be the facility that causes a demand j to freeze. Then, i is tentatively open, service g(j) is tentatively installed at i, and α j = max(c ij , t i , t ig(j) ). We start by bounding the cost incurred in opening facilities, and installing services. Let D 񮽙 be the subset of demands {j : ∃i ∈ F 񮽙 s.t. β ij &gt; 0}.For each facility i that is tentatively opened, we have that f i = 񮽙 j∈D β ij . By the construction of F 񮽙 , we know that for each demand j, there is at most one i ∈ F 񮽙 such that β ij &gt; 0.</head><label>3</label><figDesc></figDesc><table>Lemma 3.2. The cost of opening facilities is at most 
񮽙 
j∈D 񮽙 α j . Furthermore, the cost of installing services 
is at most 
񮽙 
j α j . 

Proof. Summing over all facilities, 
and using this fact, we see that 
񮽙 

i∈F 񮽙 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2" validated="false"><head>y i ) if the cluster centers request different services. Say that j, k ∈ D are dependent if F j ∩ F k 񮽙 = φ. Note that this can only happen if j and k request different services. We consider clients in D in order of increasing α j and pick a maximal independent subset D 񮽙 . For each client j ∈ D 񮽙 , we open the facility in F j with smallest f i and install service g(j) on it. Further for every k ∈ D − D 񮽙 , there is some j ∈ D 񮽙 with α j ≤ α k such that j and k are dependent. We pick some such j and install service g(k) on the facility opened from F j . Call j the neighbor of k and denote it nbr(k). A3. We assign demand j to a facility as follows: (i) if j ∈ D 񮽙 it is assigned to the facility opened from F j , (ii) if j ∈ D − D 񮽙 , then nbr(j) = k ∈ D 񮽙 and j is assigned to the facility opened from F k , and (iii) if j / ∈ D, there is some k ∈ D g(j) ⊆ D such that α k ≤ α j and j was removed from G l in step A1 because a cluster was created around k; we assign j to the same facility as k. Note that this is a feasible assignment of demands to facilities.</head><label></label><figDesc>We cannot open a facility in every cluster since different clusters could share the same fractional facility weight (</figDesc><table>Lemma 4.1. The facility opening cost is at most 
񮽙 
i f i y i . 

Proof. The clusters corresponding to clients in D 񮽙 are 
disjoint and we open the cheapest facility in each cluster 
-the lemma follows. 

Lemma 4.2. The cost of installing services is at most 
񮽙 
i,l f l 
i y l 
i . 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3" validated="false"><head>4 .3. The assignment cost of client j is at most 5α j . Proof. If j ∈ D 񮽙 , we assign j to a facility i ∈ F j , and c ij ≤ α j by complementary slackness. If j ∈ D − D 񮽙 and nbr(j) = k ∈ D 񮽙 , we assign j to the facility i opened from F k . Since α k ≤ α j and c jk ≤ 2α j , c ij ≤ 3α j . If j / ∈ D, j is assigned to the same facility as k 񮽙 where k 񮽙 ∈ D g(j) ⊆ D and j was removed from G g(j) in step A1 because a cluster was created around k 񮽙 . So α k 񮽙 ≤ α j and c jk 񮽙 ≤ 2α j . From above, k 񮽙 is assigned to a facility i with c ik 񮽙 ≤ 3α k 񮽙 , so c ij ≤ 5α j .</head><label>4</label><figDesc></figDesc><table></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_4" validated="false"><head>i∈Fj :cij≤c i 񮽙 j x ij ≥ γ. Let N j be the subset of F j consisting of all facilities (in- cluding i 񮽙 ) that come before i 񮽙 in this ordering. Define C j (γ) = c i 񮽙 j and ¯ C j = 񮽙 i c ij x ij . To simplify things we assume that each y i ≤ γ and for any j, 񮽙 i∈Nj y i is exactly γ. If some y i &gt; γ, then we can create at most 񮽙1/γ񮽙 copies of i and set y i ≤ γ for each of the copies so that 񮽙 copies i 񮽙 y i 񮽙 = y i (setting the variables x i 񮽙 j , y l i 񮽙 accordingly). Similarly if 񮽙 i∈Nj y i &gt; γ, we can take the facility i 񮽙 in N j that comes last in the order- ing in F j and split it into two copies i 񮽙 1 and i 񮽙 2 setting y i 񮽙 2 = 񮽙 i∈Nj y i − γ, y i 񮽙 1 = y i 񮽙 − y i 񮽙 2 (and the other vari- ables accordingly). We include only i 񮽙 1 in N j thus en- suring that</head><label></label><figDesc></figDesc><table></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_5" validated="false"><head>j ∈ D − D 񮽙 , if no facility from F j is open, we install service g(j) on the facility opened in R3 from N nbr(j) . R7. We assign demand j to the nearest open facility at which service g(j) is installed.</head><label></label><figDesc></figDesc><table>Lemmas 4.1 and 4.2 are modified to the following. 

Lemma 4.4. The expected cost of opening facilities is 
r · 
񮽙 
i f i y i . The expected cost of installing services is at 
most 
񮽙 
r + 1 

e r 

񮽙 񮽙 
i,l f l 
i y l 
i . 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_6" validated="false"><head>M1 . We first pick a set F 񮽙 ⊆ F of facilities to open, and for each i ∈ F 񮽙 a set T i ⊆ S i of services to install at facility i. Initially F 񮽙 = φ and T i = φ for all i. We consider facilities in F in the order given by O. While F 񮽙 = φ, 1. Let i ∈ F be the currently considered facility. Remove i from F , set F 񮽙 ← F 񮽙 ∪ {i}, T i = S i .Call i the neighbor of i 񮽙 and denote it by nbr</head><label>M1</label><figDesc></figDesc><table>2. For each i 񮽙 ∈ F we do the following. 

a) If (i, i 񮽙 ) is ff-dependent or ∃l ∈ T i s.t. 
(i, i 񮽙 ) is sf-l dependent or ∃l ∈ S i 񮽙 s.t. 
(i, i 񮽙 ) is fs-l dependent and t i 񮽙 l &lt; t i 񮽙 , set 
F ← F − {i 񮽙 }. </table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_7" validated="false"><head>= φ. We consider facilities in B l in increasing order of t i and add facility i to F 񮽙 l if F 񮽙 l ∪ {i} remains ss-l independent. For every i ∈ F 񮽙 l we install service l on facility nbr(i) ∈ F 񮽙 . M3. Each client j is assigned to the nearest open facility at which service g(j) is installed. Analysis Sketch. Consider the set of demands D 񮽙 = {j : ∃i ∈ F 񮽙 s.t. β ij &gt; 0}. By the construction of F 񮽙 , we know that for each demand j there is at most one i ∈ F 񮽙 such that β ij &gt; 0; for j ∈ D 񮽙 let o(j) denote this unique facility in F 񮽙 . By design we ensure that any demand j ∈ G l contributes θ ij &gt; 0 for at most one facility i ∈ A l ∪ F 񮽙 l and further that if j ∈ D 񮽙 then i = o(j) is the only such facility. This gives the following.</head><label></label><figDesc></figDesc><table>We remove 
from B l every facility i 񮽙 for which there is some 
facility i ∈ F 񮽙 such that (1) (i, i 񮽙 ) is fs-l dependent, 
or (2) i ∈ A l and (i, i 񮽙 ) is ss-l dependent. We say 
that a set of facilities is ss-l independent if no pair 
(i, i 񮽙 ) of facilities from the set is ss-l dependent. We 
pick a maximal ss-l independent subset F 񮽙 
l ⊆ B l . 
Initially F 񮽙 
l Lemma 5.1. The cost of opening facilities is 
񮽙 
j∈D 񮽙 β o(j)j . The cost of installing services is at 
most 
񮽙 
j∈D 񮽙 θ o(j)j + 

񮽙 

j / 

∈D 񮽙 α j . 

</table></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgments.</head><p>We thank Robin Roundy for stimulating discussions and helpful suggestions.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Multi-item inventory models with coordinated replenishments: a survey</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Aksoy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Erenguc</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">International Journal of Operations &amp; Production Management</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="page" from="63" to="73" />
			<date type="published" when="1988" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Lagrangian relaxation for the k-median problem: new insights and continuity properties</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Archer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Rajagopalan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Shmoys</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of 11th ESA</title>
		<meeting>11th ESA</meeting>
		<imprint>
			<date type="published" when="2003" />
			<biblScope unit="page" from="31" to="42" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Approximation algorithms for data placement in arbitrary networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Baev</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Rajaraman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 12th Annual ACM-SIAM Symposium on Discrete Algorithms</title>
		<meeting>the 12th Annual ACM-SIAM Symposium on Discrete Algorithms</meeting>
		<imprint>
			<date type="published" when="2001" />
			<biblScope unit="page" from="661" to="670" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Approximating min-sum k-clustering in metric spaces</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Bartal</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Charikar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Raz</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 33rd Annual ACM Symposium on Theory of Computing</title>
		<meeting>the 33rd Annual ACM Symposium on Theory of Computing</meeting>
		<imprint>
			<date type="published" when="2001" />
			<biblScope unit="page" from="11" to="20" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Improved approximation algorithms for uncapacitated facility location</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><forename type="middle">A</forename><surname>Chudak</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of 5th IPCO</title>
		<meeting>5th IPCO</meeting>
		<imprint>
			<date type="published" when="1998" />
			<biblScope unit="page" from="180" to="194" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Improved approximation algorithms for the uncapacitated facility location problem</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Chudak</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Shmoys</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SIAM Journal on Computing</title>
		<imprint/>
	</monogr>
	<note>To appear</note>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">A threshold of ln n for approximating set cover</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">U</forename><surname>Feige</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of the ACM</title>
		<imprint>
			<biblScope unit="volume">45</biblScope>
			<biblScope unit="page" from="634" to="652" />
			<date type="published" when="1998" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title level="m" type="main">Greedy facility location algorithms analyzed using dual-fitting with factor-revealing LP. Journal of the ACM</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Jain</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Mahdian</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Markakis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Saberi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Vazirani</surname></persName>
		</author>
		<imprint/>
	</monogr>
	<note>To appear</note>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Approximation algorithms for metric facility location and k-median problems using the primal-dual schema and Lagrangian relaxation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Jain</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><forename type="middle">V</forename><surname>Vazirani</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of the ACM</title>
		<imprint>
			<biblScope unit="volume">48</biblScope>
			<biblScope unit="page" from="274" to="296" />
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">񮽙-approximations with minimum packing constraint violation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">H</forename><surname>Lin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">S</forename><surname>Vitter</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 24th Annual ACM Symposium on Theory of Computing</title>
		<meeting>the 24th Annual ACM Symposium on Theory of Computing</meeting>
		<imprint>
			<date type="published" when="1992" />
			<biblScope unit="page" from="771" to="782" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Improved approximation algorithms for metric facility location</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Mahdian</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Ye</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Zhang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of 5th APPROX</title>
		<meeting>5th APPROX</meeting>
		<imprint>
			<date type="published" when="2002" />
			<biblScope unit="page" from="229" to="242" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
				<title level="m">Discrete Location Theory</title>
		<editor>P. Mirchandani and R. Francis</editor>
		<meeting><address><addrLine>New York</addrLine></address></meeting>
		<imprint>
			<publisher>John Wiley and Sons, Inc</publisher>
			<date type="published" when="1990" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Approximation algorithms for facility location problems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">B</forename><surname>Shmoys</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of 3rd APPROX</title>
		<meeting>3rd APPROX</meeting>
		<imprint>
			<date type="published" when="2000" />
			<biblScope unit="page" from="27" to="33" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Approximation algorithms for facility location problems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">B</forename><surname>Shmoys</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">´</forename><forename type="middle">E</forename><surname>Tardos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><forename type="middle">I</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 29th Annual ACM Symposium on Theory of Computing</title>
		<meeting>the 29th Annual ACM Symposium on Theory of Computing</meeting>
		<imprint>
			<date type="published" when="1997" />
			<biblScope unit="page" from="265" to="274" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">An improved approximation algorithm for the metric uncapacitated facility location problem</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Sviridenko</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of 9th IPCO</title>
		<meeting>9th IPCO</meeting>
		<imprint>
			<date type="published" when="2002" />
			<biblScope unit="page" from="240" to="257" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<title level="m" type="main">A note on the data placement problem. Unpublished manuscript</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Swamy</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
