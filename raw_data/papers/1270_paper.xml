<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2019-03-26T16:38+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Lightweight Encryption for Email</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ben</forename><surname>Adida</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">MIT</orgName>
								<orgName type="institution" key="instit2">MIT</orgName>
								<orgName type="institution" key="instit3">MIT</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Susan</forename><surname>Hohenberger</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">MIT</orgName>
								<orgName type="institution" key="instit2">MIT</orgName>
								<orgName type="institution" key="instit3">MIT</orgName>
							</affiliation>
						</author>
						<author role="corresp">
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ronald</forename><forename type="middle">L</forename><surname>Rivest</surname></persName>
							<email>rivest@mit.edu</email>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">MIT</orgName>
								<orgName type="institution" key="instit2">MIT</orgName>
								<orgName type="institution" key="instit3">MIT</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Lightweight Encryption for Email</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Email encryption techniques have been available for more than a decade, yet none has been widely deployed. The problems of key generation, certification, and distribution have not been pragmatically addressed. We recently proposed a method for implementing a Lightweight Public Key Infrastructure (PKI) for email authentication using recent developments in identity-based cryptography and today&apos;s existing Internet infrastructure. While this solution works well for email authentica-tion, email encryption exhibits a different threat model that requires special treatment. In this work, we discuss how to achieve email encryption and present a realistic deployment and adoption process, while respecting the current functionality and expectations of email.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Email is a mostly insecure communication medium. Email encryption solutions such as the well-known PGP <ref type="bibr" target="#b13">[14]</ref> and S/MIME <ref type="bibr" target="#b9">[10]</ref> have existed for more than a decade, yet neither has achieved widespread use. This is due, in large part, to the complexity of key management: a user must generate a keypair, certify and distribute his public key, and obtain a validated public key for all intended recipients.</p><p>Even identity-based encryption <ref type="bibr" target="#b11">[12]</ref>, which proposes to compute public keys directly from users' email addresses (or other identity-related strings), presents key management complications. No realistic, practical architecture has been proposed for making use of identitybased encryption in an Internet-wide setting.</p><p>Recently, we proposed and implemented a Lightweight PKI <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b0">1]</ref> to manage keys for email authentication. We now propose extensions to this architecture for the purpose of email encryption. We call this approach Lightweight Encryption.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.1">Prior Key Management Strategies</head><p>Public-key encryption has been around for 25 years. In its basic form, it is well understood: a public key allows for encryption, while an associated private (a.k.a. secret) key performs decryption. The complication lies in associating a public key with a user. How does Bob obtain Alice's public key? How can Bob be certain that the public key he has obtained is indeed Alice's, and not some eavesdropper's?</p><p>In classic public-key cryptosystems like RSA <ref type="bibr" target="#b10">[11]</ref>, El Gamal <ref type="bibr" target="#b6">[7]</ref>, or Cramer-Shoup <ref type="bibr" target="#b4">[5]</ref>, each user generates a keypair. The association between a public key and an identity is then certified by the digital signature of some authority. With S/MIME <ref type="bibr" target="#b9">[10]</ref>, these certification authorities form an organizational hierarchy. With PGP <ref type="bibr" target="#b13">[14]</ref>, an individual trusts a peer-to-peer certificate chain.</p><p>In identity-based public-key cryptosystems, first conjectured in 1984 <ref type="bibr" target="#b11">[12]</ref> but only fully implemented in 2000 <ref type="bibr" target="#b3">[4]</ref>, a master authority generates a master keypair (MP K, MSK) and publishes MP K to the world. A user's public key is then the combination of MP K and the string id string representing the user's identity. The user's secret key SK is computable from id string only by a master authority in possession of MSK who delivers this key securely to the user. Though identity-based schemes simplify user-key management, there remains a domain-key management problem: the MP K-domain association must be safely distributed, and the user secret keys must be securely delivered.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.2">The Lightweight PKI</head><p>We recently introduced Lightweight PKI, a mechanism for Internet-wide distribution of identity-based public keys for the purpose of email authentication <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b0">1]</ref>. Each email domain becomes a master authority for an identitybased scheme of its choosing and generates a unique master keypair (MP K, MSK). Each MP K is dis-tributed via the Domain Name System (DNS), as a TXT record associated with the hostname of the domain's Mail Exchange (MX) record. (Interestingly, Lightweight PKI automatically inherits security from any future improvements to DNS <ref type="bibr" target="#b5">[6]</ref>.) Email users obtain their secret key SK by email-based identification: the master authority delivers the key directly to the user's inbox. Key revocation is handled by using short-lived keys: the identity string of a public key includes an expiration date <ref type="bibr" target="#b1">[2]</ref>.</p><p>Thus, Alice can sign each of her messages with her secret key.</p><p>Upon receiving a signed email from alice@wonderland.com, Bob can look up MP K wonderland.com via the DNS record for wonderland.com .</p><p>Then, Bob can compute Alice's public key using MP K wonderland.com and the string alice@wonderland.com, and verify the signature.</p><p>Lightweight Signatures strike a practical compromise. They reasonably assume that Alice's mail server will not actively attack Alice. Then, using only the established infrastructures of DNS and email delivery, they make spoofing outgoing email from Alice as difficult as consistently intercepting Alice's incoming email.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.3">Insufficient Security for Encryption</head><p>Consider deploying Lightweight PKI for encryption. In this case, a passive adversarial incoming mail server could easily decrypt and read a user's encrypted email. Moreover, even if Alice's mail server is honest, the compromise of the master authority's MSK would reveal all prior encrypted emails for all users of that domain.</p><p>We must take extra precautions to help honest domains secure their master key and honest users protect their privacy. We conclude two necessary principles for encryption:</p><p>1. a domain's MSK cannot exist on a single machine. 2. only Alice should know her decryption key SK Alice .</p><p>Much like Lightweight Signatures, our practical threat model does not defend against active mail server adversaries nor the total compromise of an end-user's personal computer. However, we do provide a reasonable privacy guarantee for users, using (primarily) the existing Internet infrastructure.</p><p>Good Enough Security? In certain limited cases, the unmodified deployment of Lightweight Signature keys may be good enough for encryption. It certainly achieves better privacy than the majority of users enjoy today. However, we can do better within the same deployment constraints.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.4">Our (Two-Part) Solution</head><p>In this paper, we describe how to use the traditional approach of key splitting and distributed key generation <ref type="bibr" target="#b8">[9]</ref> in our identity-based framework. We apply this technique in two ways, first to protect honest domains from single-attack compromise, then to protect honest users from overly curious incoming mail servers.</p><p>Protecting Honest Domains. A domain's MSK can retroactively decrypt all messages encrypted against its public counterpart. Thus, we consider MSK so valuable that it should never be stored on a single computer. However, it must remain functional enough to compute keys for new users on demand.</p><p>We propose that a domain maintain several servers that independently generate master key shares</p><formula xml:id="formula_0">(MP K i , MSK i ).</formula><p>The master public key shares are combined into a single MP K that is distributed via the DNS. Each server with MSK i individually sends Alice secret key share SK Alice,i . Alice can then combine all shares into a single secret key SK Alice . As expected, SK Alice correctly decrypts ciphertexts computed against MP K and Alice's identity string id string.</p><p>Protecting Honest Users. Even with MSK split amongst multiple servers, Alice's secret key shares can be intercepted by her passive, incoming mail server. Effectively, Lightweight PKI is insufficient for encryption because it provides a single, imperfect communication channel: email is decrypted using the single key SK wonderland.com Alice issued by the master domain for wonderland.com, which is known to both Alice and her incoming mail server.</p><p>Our solution is thus to set up multiple channels, all of which are necessary to perform decryption. Emailbased identification can provide lightweight certification as long as it defines one of these channels. To ensure Alice's privacy, only she should have access to all channels simultaneously.</p><p>Alice  Splitting and Combining Keys. An honest domain is protected by splitting and recombining the MSK, while an honest user is protected by creating a new master key share and recombining it with the domain's MP K. In both cases, our technical contribution is the application of these key splitting-and-recombination techniques in the context of identity-based encryption. We review a known approach for the popular Boneh-Franklin IBE scheme <ref type="bibr" target="#b3">[4]</ref> and describe, for the first time, such a technique for the new Waters IBE system <ref type="bibr" target="#b12">[13]</ref> as well.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.5">Related Work</head><p>Since the early days of encrypted email with S/MIME <ref type="bibr" target="#b9">[10]</ref> and PGP <ref type="bibr" target="#b13">[14]</ref>, the public-key infrastructure requirement has been noted as hampering widespread deployment <ref type="bibr" target="#b2">[3]</ref>. Numerous approaches have been proposed in the intervening years. Most recently, Garfinkel suggested viral public key distribution and key continuity <ref type="bibr" target="#b7">[8]</ref> in order to leverage existing communication channels and reduce the need for a public-key infrastructure. Both of these techniques can be combined with our work to strengthen the overall system.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.6">Roadmap</head><p>In Section 2, we review identity-based cryptography. In Section 3, we present Lightweight Encryption at a high level. The technical details of this solution are in Section 4. Finally, we briefly discuss some extensions and variations of our solution in Section 5, before concluding in Section 6.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Preliminaries</head><p>With identity-based cryptography, a user's public key is the combination of MP K and id string, usually the user's email address. More specifically, an identity-based key management interface offers the following calls:</p><p>• Generate(key length): outputs (MP K, MSK), a master public key and corresponding master secret key of prescribed key length.</p><p>• ExtractSecretKey(MSK, id string): outputs SK , the secret key that corresponds to the user id string in domain MP K.</p><p>• VerifySecretKey(MP K, id string, SK): outputs True only if SK matches id string in the master domain designated by MP K.</p><p>The identity-based encryption (IBE) interface is then:</p><p>• Encrypt(MP K, id string, m): encrypts m for user id string in domain MP K.</p><p>• Decrypt(SK, c): decrypts c with secret key SK.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Lightweight Encryption</head><p>As previously discussed, there are two potential problems with applying the Lightweight PKI, in its basic form, to email encryption.</p><p>First, the compromise of an MSK causes significant damage for all users of the domain. Thus, our first goal is to provide domains with more safeguards for protecting this key. Second, Alice's incoming mail server for domain wonderland.com knows all of Alice's secret cryptographic keys, specifically SK wonderland.com</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Alice</head><p>. Thus, all of Alice's incoming encrypted mail can be decrypted and read by her mail server. Our second goal is to provide users with more privacy, such that no passive adversary, not even Alice's incoming mail server, can ever read encrypted email destined for Alice.</p><p>Both of these goals can be achieved by either splitting (first case) or combining (second case) the public or secret keys of IBE schemes. We begin by describing this functionality.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Key Splitting and Combining</head><p>We rework the identity-based function calls from Section 2 to enable: (1) combining stand-alone MP K i 's into a single MP K, (2) combining stand-alone SK id string,i 's into SK id string , and (3) splitting the key generation of MSK and the extraction of SK id string among many servers.</p><p>• GenerateShare(params) outputs (MP K i , MSK i ), a share of a master public and corresponding master secret key.</p><formula xml:id="formula_1">• CombineMasterKey(MP K 1 , . . . , MP K n )</formula><p>outputs MP K, the master public key corresponding to the n input public key shares.</p><p>• ExtractSecretShare(MSK i , id string) outputs SK i , the user key share that corresponds to the user id string and the master key share MSK i .</p><formula xml:id="formula_2">• VerifySecretShare(MP K i , id string, SK i )</formula><p>outputs True or False, depending on whether SK i corresponds to the secret key share for input id string against master key share MP K i .</p><p>• CombineSecretKey(SK 1 , . . . , SK n ) outputs SK, the secret key corresponding to the n input secret key shares.</p><p>We stress an important feature: a secret key share SK id string,i generated against a master share MP K i can function as a stand-alone key, with MP K i the standalone master. Each key share is a fully functional key, if need be. This feature enables the reverse operation of key recombination from existing, independent, fullyfunctional keys.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Protocol for Email Domains</head><p>Using the functionality from Section 3.1, a given email domain can use multiple servers to manage its master keypair. These servers can all be online to send Alice her secret key shares, yet any adversary wanting to hijack the domain must hack into every server to reconstruct MSK. Individuals wishing to send Alice an encrypted email can retrieve the pre-combined MP K through the DNS, against which they can form an encryption. They need not know that the corresponding MSK is shared among multiple servers.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Protocol for Users</head><p>Alice, with address alice@wonderland.com, can use functionality from Section 3.1 to prevent her mail server from reading her incoming emails as follows:</p><p>1. generate a fresh master keypair (MP K Alice , MSK Alice ) using the same params as those of wonderland.com.</p><formula xml:id="formula_3">2. distribute (alice@wonderland.com, MP K Alice )</formula><p>via a keyserver, web site, etc. The association between alice@wonderland.com and MP K Alice need not be certified. 3. generate a secret key complement SK Alice Alice using the string alice@wonderland.com and MSK Alice .</p><p>Run CombineSecretKey on SK wonderland.com Alice , from her domain, and the newly created SK Alice Alice to obtain a single secret key SK Alice .</p><p>Then, when Bob wishes to send Alice an encrypted email at address alice@wonderland.com, he performs the following actions:</p><p>1. obtain MP K wonderland.com using the established DNS-based mechanism of the Lightweight PKI. 2. obtain MP K Alice from a keyserver or Alice's web site. 3. combine the two master public keys: MP K = CombineMasterKey(MP K alice@wonderland.com , MP K Alice ).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">encrypt a message m for Alice:</head><p>Encrypt(MP K, alice@wonderland.com, m).</p><p>With this approach, Alice prevents her mail server from decrypting and reading her email with only SK wonderland.com</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Alice</head><p>. Even an adversary (other than Alice's mail server) who spoofs Alice's uncertified key MP K Alice cannot decrypt and read her email. Our threat model does not protect against a mail server that spoofs its own user's webpage or keyserver entry, as this type of attack is unlikely in practice.</p><p>However, an active attacker -other than Alice's mail server -could mount a denial-of-service attack against Alice by publishing spurious master public keys associated with Alice's email address. We suggest methods for preventing this attack in Section 5.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4">Adoption and Deployment</head><p>Lightweight encryption offers flexible deployment options. Privacy increases with each domain deployment of a Lightweight PKI, and even naive users get some privacy. We explore two usage cases:</p><p>Scenario One: Naive Users. Using the Lightweight PKI, non-savvy users can use an updated mail client which automatically encrypts their outgoing mail and decrypts their incoming mail. To encrypt to bob@foo.com, Alice's client simply needs to obtain MP K foo.com via DNS. Recall that even if this domain splits its master secret key among many servers to safeguard against hackers, it need only post this combined key in the DNS. Decryption is even easier. The mail server for foo.com emails Bob his secret key SK foo.com Bob . Bob's email client can transparently recognize and process such emails, then using the included key to decrypt the email from Alice.</p><p>Scenario Two: Advanced Users. Suppose Alice and Bob are more advanced users, able to follow the protocol in Section 3.3. Bob publishes an additional public key on his web site. Alice combines this public key with the one defined by MP K foo.com . Her email to Bob is then encrypted such that even Bob's incoming mail server is unable to decrypt it: only Bob can. Note that Bob never needs to certify any of this additional key material.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">How To Split IBE Master Keys</head><p>We present methods for splitting, among a group of trustees, the key generation and verification algorithms for two predominant IBE systems. Both key types <ref type="bibr" target="#b3">[4,</ref><ref type="bibr" target="#b12">13]</ref> are based on bilinear maps and support efficient identitybased encryption and signature schemes <ref type="bibr" target="#b0">[1]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Bilinear Maps</head><p>Let BM Setup be an algorithm that, on input the security parameter 1 k , outputs (q, g, h, G 1 , G 2 , e), where e is a function mapping G 1 × G 1 to G 2 , where both G 1 and G 2 are groups of prime order q = Θ(2 k ), and elements g and h both generate G 1 . The function e has the properties <ref type="bibr" target="#b3">[4]</ref>: (Bilinear) for all g, h ∈ G 1 , for all a, b ∈ Z q , e(g a , h b ) = e(g, h) ab ; (Non-degenerate) if g is a generator of G 1 , then e(g, g) generates G 2 ; and (Efficient) computing e(g, h) is efficient for all g, h ∈ G 1 .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Waters Key Pairs</head><p>We present these algorithms for (a reformulation of) the Waters key pairs <ref type="bibr" target="#b12">[13,</ref><ref type="bibr" target="#b0">1]</ref> when all trustees are assumed to be honest. This is the case, for example, when a company wants to split its MSK among a number of servers that it owns and operates in order to make stealing the MSK more difficult for hackers. In Section 4.4, we address the possibility of malicious servers.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Single Server Key Algorithms</head><p>• Generate(1 k ) outputs MP K = (params, g b ) and MSK = b for params = (q, g, h, G 1 , G 2 , e, H) where H is a function mapping strings in {0, 1} k to elements in G 1 and the remaining parameters are generated by running BM Setup(1 k ). We assume that the discrete logarithm of h with respect to g is unknown.</p><p>(Here, H is a particular implementation of a hash function, not a generic random oracle. We defer to Waters for the details <ref type="bibr" target="#b12">[13]</ref>.)</p><p>• ExtractSecretKey(MSK, id string) outputs the user secret key SK = (h b H(id string) r , g r ), for a random r ∈ Z q .</p><p>• VerifySecretKey(MP K, id string, SK) parses SK as (A, B), outputs True if and only if e(A, g)/e(B, H(id string)) = e(h, g b ).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Multiple Server Key Algorithms</head><p>• Setup(1 k ): params = (q, g, h, G 1 , G 2 , e, H).</p><p>• GenerateShare(params) outputs a master key share MP K i = g bi and the corresponding secret key share MSK i = b i .</p><p>• CombineMasterKey(MP K 1 , .., MP K n ) outputs</p><formula xml:id="formula_4">MP K = n 񮽙 i=1 g bi = g b .</formula><p>• ExtractSecretShare(MSK i , id string) outputs</p><formula xml:id="formula_5">SK i = (h bi H(id string) ri , g ri )</formula><p>for a random r i ∈ Z q .</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: Lightweight Encryption: (1) The domain sets up two key servers, each in possession of a share of MSK, (2) The domain's shares of the master public key are combined into a single key MP K foo.com stored in the DNS, (3) each domain key server emails Bob a share of his secret key SK foo.com Bob for that domain, (4) To achieve privacy from his mail server, Bob generates his own master keypair and stores his secret key SK Bob Bob , (5) Bob publishes his uncertified master public key MP K Bob via a keyserver or simple web page, (6) To encrypt to Bob, Alice retrieves his two master public keys and combines them, (7) To decrypt, Bob combines his three secret keys.</figDesc></figure>
		</body>
		<back>

			<div type="acknowledgement">
			</div>

			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Boneh-Franklin Key Pairs</head><p>Boneh and Franklin <ref type="bibr" target="#b3">[4]</ref> briefly discuss how the key pairs for their encryption scheme can be generated and verified in a distributed fashion. The key pairs are simpler than the above Waters scheme. The master key pairs are of the form (MP K, MSK) = (g s , s) and user key pairs of the form (P K, SK) = (H(id string), H(id string) s ), where H : {0, 1} * → G 1 is a hash function. For the remaining details, we defer to the Boneh and Franklin <ref type="bibr" target="#b3">[4]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4">Dealing with Untrusted Servers</head><p>There are two ways that a malicious server (or servers) can undermine the security of the previous schemes.</p><p>Key Generation Issues. It is possible for a set of colluding servers to deviate from the basic GenerateShare protocols above and choose their shares MP K i in such a way as to bias the final master key MP K. An adversary might post a malicious second-channel key MP K evil which "cancels out" Alice's first-channel key from MP K wonderland.com , making the combined SK Alice a known value. We can prevent these attacks by requiring that each server posting an MP K also posts a proof that they know the corresponding value MSK without revealing MSK. This can be done by standard cryptographic techniques outside the scope of this paper.</p><p>Threshold Issues. After a set of n servers have published a final master key MP K, one or more malicious servers may refuse to provide Alice with their shares of her user secret key SK Alice . It would be better if some subset of the servers, say any group of k + 1 out of n for n/2 ≤ k &lt; n, can provide enough secret shares to reconstruct SK Alice for Alice. This safeguard can be achieved by a direct application of techniques due to Gennaro et al. <ref type="bibr" target="#b8">[9]</ref> when the majority of servers are honest, as previously noted for Boneh-Franklin key pairs <ref type="bibr" target="#b3">[4]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Extensions and Variations</head><p>Stronger Lightweight Certificates. In Section 3, Alice creates her second encryption channel by posting MP K Alice . An active adversary might post spurious MP K evil in order to hijack this second channel. Since the adversary does not know the secret key SK wonderland.com Alice for the first channel, the best he can achieve is a denial-of-service attack. In practice, we want to prevent such attacks too. Alice can do so by using her existing lightweight signing key SK wonderland.com Alice to sign her second-channel MP K Alice . If Alice's mail server were actively malicious, it could spoof this signed MP K wonderland.com . However, as stated earlier, our threat model does not account for this (unlikely) attack.</p><p>Double Email-Based Identification. Lightweight encryption works because Alice has two encryption channels: one from her email domain, and one from herself. As we saw in Section 4, the two keys from these channels can be combined to allow for a single encryption by the sender and a single decryption by the recipient.</p><p>Another way to set up two encryption keys is to have Alice advertise two email addresses at different domains, alice@wonderland.com and alice@school.edu. As the two domains wonderland.com and school.edu are unlikely to be using the same key parameters (e.g. the same bilinear map in Boneh-Franklin or Waters), the two secret keys obtained from each domain cannot be recombined. However, the sender can simply use double-encryption: encrypt the message first against MP K wonderland.com , then encrypt that ciphertext against MP K school.edu . Neither incoming mail server can decrypt Alice's email single-handedly, yet Alice can perform two decryptions to recover the message. (Note that this only provides added security if Alice isn't simply forwarding her email from alice@school.edu to alice@wonderland.com. She must log in to each incoming mail server independently.)</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Conclusion</head><p>We introduced Lightweight Encryption as a means of realizing email encryption with a realistic adoption and deployment process. Certainly, more work is necessary, including user interface considerations, the widespread distribution of secondary user private keys, and the realworld validation of our deployment ideas.</p><p>Authentic, private email can help improve the quality of all Internet-based communication. Lightweight encryption provides a solid building block towards making email encryption practical.</p></div>			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">Ad-Hoc Group Signatures (including IDbased ones) from Almost Any Collection of Key Pairs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ben</forename><surname>Adida</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Susan</forename><surname>Hohenberger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ronald</forename><forename type="middle">L</forename><surname>Rivest</surname></persName>
		</author>
		<ptr target="http://theory.lcs.mit.edu/∼rivest/publications.html" />
		<imprint>
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">Lightweight Signatures for Email</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ben</forename><surname>Adida</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Susan</forename><surname>Hohenberger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ronald</forename><forename type="middle">L</forename><surname>Rivest</surname></persName>
		</author>
		<ptr target="http://theory.lcs.mit.edu/∼rivest/publications.html" />
		<imprint>
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Cryptography and the internet</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Steven</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Bellovin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">CRYPTO, volume 1462 of LNCS</title>
		<imprint>
			<date type="published" when="1998" />
			<biblScope unit="page" from="46" to="55" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Identity-based Encryption from the Weil Pairing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dan</forename><surname>Boneh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Matt</forename><surname>Franklin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SIAM Journal of Computing</title>
		<imprint>
			<biblScope unit="volume">32</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="586" to="615" />
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">A pratical public key cryptosystem provably secure against adaptive chosen ciphertext attack</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ronald</forename><surname>Cramer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Victor</forename><surname>Shoup</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">CRYPTO, volume 1642 of LNCS</title>
		<imprint>
			<date type="published" when="1998" />
			<biblScope unit="page" from="13" to="25" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">RFC 2535: Domain Name System Security Extensions</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Eastlake</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1999-03" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">A Public Key Cryptosystem and a Signature Scheme Based on Discrete Logarithms</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Taher</forename><forename type="middle">El</forename><surname>Gamal</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">CRYPTO &apos;84</title>
		<imprint>
			<date type="published" when="1984" />
			<biblScope unit="page" from="10" to="18" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Design Principles and Patterns for Computer Systems that are Simultaneously Secure and Usable</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Simson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Garfinkel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">MIT</title>
		<imprint>
			<date type="published" when="2005-04" />
		</imprint>
	</monogr>
<note type="report_type">PhD thesis</note>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Secure distributed key generation for discrete-log based cryptosystems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rosario</forename><surname>Gennaro</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stanislaw</forename><surname>Jarecki</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hugo</forename><surname>Krawczyk</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tal</forename><surname>Rabin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">EUROCRYPT</title>
		<imprint>
			<date type="published" when="1999" />
			<biblScope unit="volume">1592</biblScope>
			<biblScope unit="page" from="295" to="310" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S/Mime Working</forename><surname>Group</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">A method for obtaining dig. signatures and public-key cryptosystems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ronald</forename><forename type="middle">L</forename><surname>Rivest</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Adi</forename><surname>Shamir</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Leonard</forename><forename type="middle">M</forename><surname>Adleman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Com. of the ACM</title>
		<imprint>
			<biblScope unit="volume">21</biblScope>
			<biblScope unit="page" from="120" to="126" />
			<date type="published" when="1978" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Identity-based cryptosystems and signature schemes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Adi</forename><surname>Shamir</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">CRYPTO</title>
		<imprint>
			<date type="published" when="1984" />
			<biblScope unit="volume">196</biblScope>
			<biblScope unit="page" from="47" to="53" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Efficient Identity-Based Encryption Without Random Oracles</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Brent</forename><surname>Waters</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">EUROCRYPT</title>
		<imprint>
			<date type="published" when="2005" />
			<biblScope unit="page" from="114" to="127" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<title level="m" type="main">Pretty Good Privacy</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Phil</forename><surname>Zimmerman</surname></persName>
		</author>
		<ptr target="http://www.pgp.com" />
		<imprint/>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
