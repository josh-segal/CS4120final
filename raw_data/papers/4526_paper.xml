<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2019-03-26T16:52+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Grokking Software Architecture</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author role="corresp">
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Richard</forename><forename type="middle">C</forename><surname>Holt</surname></persName>
							<email>holt@uwaterloo.ca</email>
							<affiliation key="aff0">
								<orgName type="department">School of Computer Science</orgName>
								<orgName type="laboratory">Software Architecture Group (SWAG)</orgName>
								<orgName type="institution">University of Waterloo</orgName>
								<address>
									<country key="CA">Canada</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Grokking Software Architecture</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>This paper is a retrospective arising from a WCRE paper published in 1998 promoting a relational approach to manipulate software architecture and to help solve various problems in software analysis. That paper explains how Tarski&apos;s binary relational algebra, embedded in a language such as Grok, can solve such problems. Tarski&apos;s notation is elegant and often efficiently executable when the subject at hand is characterized by parts with binary relations between them. Software architecture, especially as-built architecture, is such a subject. This paper concentrates on the following three questions. What impact can a relational approach have on our understanding of software architecture? What Grok-languages exist and what are their strengths? How have Grok-like languages been used to solve problems in software architecture or software analysis?</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">Introduction</head><p>The word grok was coined by <ref type="bibr">Heinlein in 1961</ref> in his science fiction novel Stranger in a Strange Land. This word has come to mean "to share the same reality or line of thinking with another physical or conceptual entity." <ref type="bibr" target="#b37">[39]</ref> The Grok language discussed in the present paper was so named because one of its purposes is to help people to think about and to share understanding about software architecture <ref type="bibr" target="#b19">[20]</ref>.</p><p>The Software Bookshelf project <ref type="bibr" target="#b11">[12]</ref> which had as a goal to reverse engineer large commercial software, such as IBM's code optimizer TOBEY, was a springboard for a various concepts about software architecture. One spin-off of this project was the Grok language.</p><p>The Grok language <ref type="bibr" target="#b16">[17]</ref> is based on Tarski's algebra <ref type="bibr" target="#b32">[34]</ref> for binary relations. The language and its use as a tool to be applied to software architecture was described in a 1996 technical report <ref type="bibr" target="#b16">[17]</ref> and then in a 1998 paper <ref type="bibr" target="#b16">[17]</ref> that appeared in WCRE (Working Conference on Reverse Engineering). In 2008 (now), the 1998 paper was selected as the most influential paper appearing in WCRE 1998. The current paper is a retrospective written at the invitation of WCRE about that 1998 paper. The title of the present paper, Grokking Software Architecture, is an intended double entendre meaning both "Understanding Software Architecture" and "Using the Grok Language to Manipulate Software Architecture."</p><p>The novelty of the 1998 paper was to propose the following: Various manipulations that are done to architectural structures to make them comprehensible can be neatly specified and automatically implemented based on Tarski's notation. Along with a 1996 technical report, various architectural uses of this approach, such as enforcement of architectural constraints, were suggested.</p><p>The approach also promoted the use of typed graphs (graphs with various types of edges) as a simple and convenient mathematical basis for representing architectural structures.</p><p>This paper is organized around the following three questions: 1) What impact can a relational approach have on our understanding of software architecture? To answer this question, Sections 2 and 3 concentrate on two views of architecture: the logical and as-built views. Sections 4, 5 and 6 discuss boxology and typed graphs along with Tarski's relational algebra, with an emphasis on how a relational approach provides appropriate underpinnings for understanding and reverse engineering of software architecture. 2) What Grok-like languages exist and what are their strengths? Section 7 gives the history of Grok-like languages, while Section 8 discusses the implementation and performance of these languages. 3) How have Grok-like languages been used to solve problems in software architecture and software analysis? Section 9 gives examples of use of Groklike languages to solve architecture and software analysis problems</p><p>We now begin with the first of these questions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">Software architecture: What is it? What good is it?</head><p>To address the question of how a relational approach should impact software architecture, this section and the next concentrate on software architecture and views of architecture.</p><p>What is software architecture? There are many definitions of software architecture; see the Software Engineering Institute's list of these <ref type="bibr">[31]</ref>. There is even an ANSI/IEEE <ref type="bibr" target="#b0">[1]</ref> standard for software architecture documentation. Still there is far from universal acceptance of a definition for this term. As Gorton <ref type="bibr" target="#b14">[15]</ref> says, "I have a sneaking suspicion that 'architecture' is one of the most overused and least understood terms in professional software development circles."</p><p>There are two central concepts that appear in most of these definitions: (1) division of the target software system into system-level parts (components, modules, files, classes, etc.) and (2) interconnections between these parts (communication paths, data flow, procedure/method calls, includes, imports, references to variables/types, etc.) As Gorton <ref type="bibr" target="#b14">[15]</ref> succinctly puts it, "Architecture captures system structure in terms of components <ref type="bibr">[parts]</ref> and how they interact." This suggests, not surprisingly, that a graph formalism that models parts (as nodes) and interactions (as edges) is well suited to model the structure of software architecture.</p><p>In much of the writing about software architecture, there is an underlying theme that things would be better if software systems had more architectural documentation. Architectural Description Languages (ADLs) were created to support this theme, but somehow they have not been up to the job. Mary Shaw <ref type="bibr" target="#b31">[33]</ref> says, "UML has, for better or (many would say) worse, become the industry standard ADL <ref type="bibr">[Architecture Description Language]</ref>," and she says, "It still lacks, however, a robust suite of tools for analysis, consistency checking, or other means of automatically connecting the information expressed in UML with the system's code." So, after years of effort to invent appropriate ADLs, we have nothing better than UML's box-and-arrow diagrams. UMLs diagrams that apply at the architecture level are not bad, but are not much improvement on the box-and-arrow diagrams that have been in use for many years.</p><p>What does this tell us? My feeling is that box-andarrow diagrams, formalized as typed graphs and manipulated by Grok-like languages go some distance toward providing the basis for the "robust suite of tools" that Shaw would like to see.</p><p>Some writers believe that most software systems have messy architectures. As Foote <ref type="bibr" target="#b12">[13]</ref> puts it (perhaps tongue in cheek): "The architecture that actually predominates in practice is the 'big ball of mud'," also known as spaghetti code, shanty town, can of worms, dog's breakfast, etc. Perhaps Foote is being too pessimistic. My observation is that in many cases, the architecture of a software system is reasonable, although its documentation is lacking. As Gorton <ref type="bibr" target="#b14">[15]</ref> observes, "It's common for there to be little or no documentation covering the architecture in many projects."</p><p>If documentation for architecture is so important, why is it so often lacking? We can get a hint about the answer to this question from super-programmer Linus Torvalds <ref type="bibr" target="#b33">[35]</ref> who says, "I'm hopeless when it comes to documentation." Perhaps he is reflecting the simple truth that spending time writing good code is usually much more important than spending that same time documenting architecture. Still, in most systems of any size, such as Torvald's Linux, I expect that there is a fairly coherent architectural design in the head of the chief architect. (I use the word wetware to describe such architectural knowledge in a person's brain.)</p><p>In those developments in which there is time set aside for documenting architecture, how is this documentation actually created? Gorton <ref type="bibr" target="#b14">[15]</ref> says that he is "pretty certain the predominant tools used for architecture documentation are Microsoft Word, Visio and Power Point, along with their non-Microsoft equivalents." These tools that Gorton lists are easy to use to produce documentation that is reasonably easy to update manually. Visio provides a handy, bruteforce way of producing box-and-arrow diagrams. Still, these tools are a long way from providing Shaw's hoped for suite of tools. An essential disappointment is that they do not generally incorporate the extensive amount of information that can be automatically extracted from the target software system. Also, they provide no means other than manual manipulation to keep the box-and-arrow diagrams up to date.</p><p>From these observations, I conclude that what is needed are concepts, notations and tools that are easy to learn and use and which help us produce useful, understandable documentation, produced with minimal effort.</p><p>From this comes a rule of mine about software architecture and its documentation: "Only as much architecture as is needed." Over enthusiastic efforts to make the architecture too beautiful or to create too much documentation detracts from the project's central goals (short time to market, new features, more testing, etc.) Beware of gilding the lily. My position in this paper is that the best way to improve software architecture lies in lightweight, easy to produce, understand and maintain methods and tools for documenting architecture. Briefly put, we need agile architecture documentation tools. As will be presented in more detail below, I suggest that these concepts and tools can be based on typed graphs with Grok-like languages to manipulate them.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">As-built architecture</head><p>There are many ways of viewing software architecture. The parable of the elephant and the blind men illustrates these views, told here from the Jain perspective <ref type="bibr" target="#b20">[21]</ref>.</p><p>Once upon a time, there lived six blind men in a village. One day the villagers told them, "Hey, there is an elephant in the village today." They had no idea what an elephant is. They decided, "Even though we would not be able to see it, let us go and feel it anyway." All of them went where the elephant was. Everyone of them touched the elephant. "Hey, the elephant is a pillar," said the first man who touched his leg. "Oh, no! it is like a rope," said the second man who touched the tail. "Oh, no! it is like a thick branch of a tree," said the third man who touched the trunk of the elephant. "It is like a big hand fan" said the fourth man who touched the ear of the elephant. "It is like a huge wall," said the fifth man who touched the belly of the elephant. "It is like a solid pipe," Said the sixth man who touched the tusk of the elephant. They began to argue about the elephant and everyone of them insisted that he was right. It looked like they were getting agitated. A wise man was passing by and he saw this. He stopped and asked them, "What is the matter?" They said, "We cannot agree to what the elephant is like." Each one of them told what he thought the elephant was like. The wise man calmly explained to them, "All of you are right. The reason every one of you is telling it differently because each one of you touched the different part of the elephant.</p><p>Kruchten's <ref type="bibr" target="#b24">[25]</ref> seminal paper lists four views of a software architecture, which can be thought of as the insights from four blind men: (1) logical (end-user's view of functionality), (2) as-built (developer's view of the implementation), (3) process &amp; performance (integrators view) and (4) physical (system engineer's view of communications).</p><p>My feeling is that the first of Kruchten's views, the logical view, is fundamental because it tells the purpose of the system. It explains what the system does. That is important to almost all stakeholders. I feel that the second of these, the as-built view, comes next in importance ---because the system cannot exist without its underlying implementation and because the code is in a sense the ultimate specification of the actual system. As programmers sometimes say, "code is king."</p><p>(The names of and the details of these views vary from author to author. Kruchten calls the as-built view the development view and I usually call it the concrete view. I usually call the logical view the conceptual view.)</p><p>From the perspective of the reverse engineer, the as-built view is fundamentally important, because the engineer works directly with the code (often the source, sometimes only the binary) and seeks to create, with limited resources and limited time, a useful view of the software system. From Chikofsky's <ref type="bibr" target="#b6">[7]</ref> classical definition, "Reverse engineering is the process of analyzing a subject system to create representations of the system at a higher level of abstraction." Commonly some sort of parsing of the code is done and facts are collected about parts of the code, for example, about how the code is stored in files and about how parts of the system interact. The interactions that are easiest to extract are static dependencies, such as whether procedure P calls procedure Q. These facts are commonly represented as triples, such as (Call, P, Q), which can be interpreted as edges in a typed graph.</p><p>Grok-like languages as well as relational systems such as SQL can read, query, abstract and manipulate the typed graphs that consist of these edges. As well, there are many tools for visualizing these graphs. So, not only are as-built views important, they are also the easiest to produce from that all important artifact, the source code. They are also easy to keep up to date, because they can be (at least in principle) re-extracted in a largely mechanical way, from the source code as that code changes.</p><p>In brief, there are many tools to help create as-built views, starting with the source code, so the cost of creating such views is small. So, the as-built view gives us lots of "bang for the buck", i.e., useful architecture documentation at modest cost.</p><p>By comparison, creating and maintaining detailed documentation of the logic view is expensive, slow and largely manual.</p><p>Meantime, the wetware documentation inside the architect's head generally includes a logical view. Since that view already exists, as wetware, there is not such a need to reproduce it as actual documentation. (Still, it must be remembered, if the architect departs from the project, the wetware also departs.) I conclude this section by observing that box-andarrow diagrams are a natural fit for modeling the structure of software architecture, especially the asbuilt view. Taking this as a clue, the next sections discuss fruitful ways to formalize and mechanize boxand-arrow diagrams, with a goal of making their creation, manipulation, visualization and grokking easier and more efficient.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">Boxology</head><p>Wikipedia <ref type="bibr" target="#b38">[40]</ref> says, "A boxology is a representation of an organized structure as a graph of labeled nodes ('boxes') and connections between them (as lines or arrows). This concept is useful because many problems in software design are reducible to modular 'black boxes' and connections or flow channels between them. The term is somewhat tonguein-cheek and refers to the generic nature of diagrams containing labeled nodes and (sometimes directed) paths between them." Wikipedia's presentation characterizes the nature of much of the structure in software architecture, and helps explain why architecture so often uses box-andarrow diagrams. As Gorton <ref type="bibr" target="#b14">[15]</ref> observes, "the most widely used design notation is informal 'block and arrow' diagrams."</p><p>Shaw <ref type="bibr" target="#b30">[32]</ref> wrote an article titled, "A Field Guide There is discontent about boxology, for example Mitra <ref type="bibr" target="#b28">[29]</ref> states, "The box-and-line diagram of the architecture leaves a lot of room for interpretation." He is right, but the needed interpretation can be added without spoiling the simplicity and elegance of these diagrams. It can be added manually, for example, by accompanying written documentation created using an editor such as Microsoft Word or more formally using attribute values attached to nodes and edges (to boxes and arrows).</p><p>Some people might argue that it a show-stopper that box-and-arrow diagrams do not inherently contain the semantics needed to describe their intended meaning. I argue the opposite: That this is an advantage, rather than a disadvantage, in that this allows us a separation of concerns in which we can master and automate boxand-arrow manipulation without being bogged down with the complexity of the semantics. Consider a similar case, namely Context Free Grammars. Context Free Grammars are powerful and useful to formalize syntactic aspects of programming languages. By themselves they do not provide the language's semantics.</p><p>CFGs and box-and-arrow diagrams (formalized to typed graphs) are powerful and useful because they provide a convenient representation for structures to which semantics can readily be attached.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">Typed graphs</head><p>This section and the next one will dive to a deeper level of precision, discussing how to formalize boxand-arrow diagrams as typed graphs <ref type="bibr" target="#b26">[27]</ref>. This formalization allows us to be mathematically clear about the structure of these diagrams. In this formalization, we use graphs that consist of nodes (for boxes) and directed edges (for arrows). We will use typed graphs, in which there is more than one type (or color) of edge. For example, there might be CALL edges representing calls from one method to another and INHERIT edges representing the inheritance hierarchy. In the Grok language, as well as languages such as Relview <ref type="bibr" target="#b1">[2]</ref> and CrocoPat <ref type="bibr" target="#b2">[3]</ref>, there are distinct edge types R 1 , R 2 , ... R n . In these languages, nodes do not have types. However, by convention a node can be tagged to have a type by the convention that self-loops of type T x can mark nodes of type x. Grok allows attributes which are named string values to be attached to nodes and to edges. These attributes can be interpreted to give meaning to the graph.</p><p>It is convenient in architectural diagrams to have nested boxes, for example, to represent classes in packages or methods in classes. Feijs <ref type="bibr" target="#b10">[11]</ref> formalizes nesting in RPA (Relation Partition Algebra) by augmenting typed graphs with a partitioning of the nodes. Each set of partitioned nodes is considered to be nested in its partition. RPA leads to elegant mathematical characterization of concepts such as lifting (aggregating connectivity within a partition). Grok represents nesting in a different way, by designating one particular edge type contain to represent nesting. It is assumed that contain defines a tree across the nodes of the graph. Grok's approach has various advantages. It avoids complicating the formalism with the concept of partitions (although these can be defined in terms of the contain tree), and it supports multiple levels of nesting, by means of each level of depth of the tree. With this convention, a language such as CrocoPat, which does not explicitly support hierarchies, can still effectively handle nesting by designating one relation as the contain relation.</p><p>Given typed graphs, it is important to have some way, ideally an algebra, to manipulate them.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.">Tarski binary relational algebra</head><p>This section explains how Tarski binary relational algebra can raise the level of abstract of typed graphs so they can be manipulated independently of data structures used to implement or represent them.</p><p>We will consider that the data representing an architectural structure is a typed graph. If we define operations, such as Tarski operators, that manipulate that graph, then we have defined a data model. Such a model implies that we can manipulate the graph without knowing about its underlying encoding or implementation. Instead we manipulate the graph using high level operators. This abstraction of graphs up to a higher level is similar to the abstraction that occurs when the data of a database is accessed only by high level operations such as SQL commands. This high-level access implies that using databases (and typed graphs) is greatly simplified, hiding data structures such as linked lists, allowing operators to be optimized separately from their applied usage and providing high level operations at the level of joins and unions.</p><p>Tarski algebra allows a relation R 1 (a set of edges with a given type) to be combined with another relation R 2 to produce their union, intersection, difference, composition, etc. The Grok language adds various operations such as transitive closure along with many housekeeping features such as file management, loops and if statements, etc.</p><p>My 1998 WCRE paper suggested that a language such as Grok with embedded Tarski operators is an elegant and efficient way to query and manipulate architectural graphs. At almost the same time or a bit later, Feijs et al. <ref type="bibr" target="#b10">[11]</ref> made similar suggestions and then continued to expand upon these ideas over the last decade.</p><p>In data base theory there is the concept of expressiveness of queries. Expressiveness determines what information a query can extract from a data base. It is known that Codd's n-ary relational algebra is somewhat more expressive than Tarski's binary algebra. The basic reason is that Tarski's queries are limited to producing sets of pairs, while Codd's can produce sets of n-ary tuples.</p><p>Note: Codd's algebra can be applied to a typed graph, because such a graph is essentially a set of 2-ary tables but Tarski's algebra can be applied to n-ary tables only when n is limited to 2.</p><p>It was not obvious in 1998, but became increasingly clear with the years, that expressive power is significant in the case of querying architectural diagrams <ref type="bibr" target="#b9">[10]</ref>. As will be seen below, Beyer <ref type="bibr" target="#b3">[4]</ref> has developed an a query language CrocoPat which can be applied to typed graphs to produce n-ary tables, thus giving it more expressive power than Grok.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.">History and comparison of Grok-like languages</head><p>This section and the next consider the second question asked at the beginning of this paper: What Grok-languages exist and what are their strengths?</p><p>For the purposes of this paper, a language is Groklike if it can manipulate typed graphs using high level operators, ideally with a precise mathematical definition of those operations. Such languages can be used in an application-independent way to do various kinds of analysis and manipulation of typed graphs, including graphs that come from disciplines other than program analysis. However, to be Grok-like, these languages should implemented such that they are useful for program analysis. <ref type="table">Table 1</ref> gives a list of such languages, which we will discuss.</p><p>The mother of all Grok-like languages is Prolog. I used it on architecture graphs, as early as about 1995. At that time, with the Prolog implementations I tried, it did not scale to handle the many thousands of edges in my architectural diagrams, so I abandoned it. This lead eventually to the development of Grok. Beyer <ref type="bibr" target="#b3">[4]</ref> gives more recent experience of using Prolog for architectural purposes, reporting that it is "prohibitively inefficient for practical software analyses of this type."  <ref type="bibr" target="#b2">[3]</ref>. There have been many instances of embedding SQL in another language such as C. We are ignoring these embeddings as they are not known to have been used for efficient architectural analysis.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Language Author</head><p>Consens <ref type="bibr" target="#b7">[8]</ref> and colleagues <ref type="bibr" target="#b27">[28]</ref> developed and demonstrated GraphLog, which supports high level graphical queries. They described how the notation can be used to compute metrics, impose constraints and locate instances of design patterns. In a sense, GraphLog is not a Grok-like language in that it does not have a script form which is often appropriate for architectural manipulation.</p><p>Relview <ref type="bibr" target="#b1">[2]</ref> is the first computer language to my knowledge to be based on Tarski algebra. It is apparently the only language other than Turing to be so based. While it predated my work on Grok by about 3 years, I was not aware of it until I had Grok working on large architectural diagrams at IBM's Toronto lab. I tried running a version of Relview, but at the time concluded that it was not robust enough for the architectural work I was doing. My feeling was that Relview was excellent for teaching and experimentation with Tarski algebra but was not suited for program analysis. Beyer <ref type="bibr" target="#b3">[4]</ref> has tested Relview more recently with reasonable results.</p><p>Soon after I developed and used early versions of Grok, a group of Dutch researchers <ref type="bibr">(Feijs, Krikhaar [11]</ref> et al.) began applying Tarksi algebra to architectural problems. That group proceeded to experiment with, to advance and to publish the state of the art of using Tarski algebra, enhanced to Relation Partition Algebra, for architecture analysis. That group did not, to my knowledge produce an actual language to support the algebra, but rather ran command scripts to invoke individual programs that carried out Tarski operations.</p><p>About that time, but perhaps a little later, a German group (Kullback, Winter, Ebert et al.) developed a notation and computer support for GReQL <ref type="bibr" target="#b23">[24]</ref>. GReQL looks much like SQL but is used for querying typed graphs. It can extract n-ary patterns. As opposed to Grok, GReQL does not update graphs, so it was more designed to recognize patterns rather than to transform architectural structure.</p><p>In 2001, Jingwei Wu, a graduate student of mine, re-implemented Grok, the result being JGrok. JGrok is similar to Grok, but its syntax looks more like Java, in which it is written, whereas Grok looks more like Turing, in which it is written. JGrok supports n-ary values and operators, of a limited variety. It can be easily combined with other tools due to the fact that it is written in Java. JGrok's internal data structures are based on linked lists, which are completely different from Grok's data structures (described below).</p><p>At about that time or a bit later, Beyer [3] developed a Grok-like language called CrocoPat. See Beyer's <ref type="bibr" target="#b3">[4]</ref> comparison of CrocoPat to Grok.</p><p>CrocoPat's notation (called RML) uses free variables (typically called x, y, z, ...) that allow it to deal with n-ary relations. (Note that free variables are sometimes called attributes.) This allows CrocoPat to extract n-ary patterns which Grok is not able to do. RML can be thought of as a variant of Datalog.</p><p>By contrast with CrocoPat, Grok does not use free variables, because its restriction to binary relations makes these unnecessary. For example, the Grok statement S := P o C computes the composition of the parent relation P with the child relation C to produce the reflexive sibling relation S. In other words, S is the composition of P and C. Written in CrocoPat, this is over twice as long:</p><p>S(x,z) := EX(y, P(x,y) &amp; <ref type="figure">(C(y,z)</ref>)</p><p>This can be read as follows. Compute pairs (x,z) in S by checking the existence (EX) across y of pairs (x,y) in P and pairs (y,z) in C. The EX operator can be thought of as a projection that eliminates the y column of the relation.</p><p>In my opinion, Grok's operations are higher level than CrocoPat's operators, due to the fact that Tarski's operations obviate the need for free variables. For example, the free variables in EX iterate across a range, whereas this iteration and the range are implicit in Grok.</p><p>More profoundly, and perhaps controversially, I believe Tarski's notation provides better encouragement to think at a higher level and more proficient level of abstraction than does a notation with free variables.</p><p>It might make sense to add Tarski operators to CrocoPat, to take advantage of the elegance of Tarski's operators when these are sufficient, reserving use of free variables for complex or n-ary queries.</p><p>When queries become too complex, for example when searching for instances of various design patterns, Grok is no longer the appropriate language to use <ref type="bibr" target="#b9">[10]</ref>. Beyer <ref type="bibr" target="#b2">[3]</ref> reports that as the complexity of queries reaches the limits of the expressiveness of Grok, Grok programs become messy.</p><p>Wu's [41] extensions to Grok are an attempt to solve this shortcoming.</p><p>A question that arises is: Can someone design a better Grok-like language to be close to Codd's original n-ary relational algebra, with a possibility of SQL-like notation as in GReQL, perhaps also including Tarski operators? A related question is: Why did CrocoPat invent a new n-ary notation rather than using that of GReQL?.</p><p>Deeper questions about the CrocoPat approach have to do with its concept of a universe u, which is a set of strings. Ideally, u would be the infinite set of all strings, but this is not feasible in an implemented language. As Beyer <ref type="bibr" target="#b3">[4]</ref> says, "The finiteness and immutability of the universe are sometimes inconvenient for the developer of RML programs." This universe gives the range of CrocoPat's operators EX (exists) and FA (for all) which iterate across the members of u. It is also the basis of the complement (!) operator. CrocoPat chooses u to be the set, fixed for a given execution, of all sources and targets of inputted edges (these can only be input at program start up) as well as all string constants in the particular CrocoPat program. If CrocoPat had string operators (which seems like a good thing) or if it could dynamically choose which files to read (which seems like a good thing), then its definition of the universe would become infeasible. Strangely, if a statement containing a string constant, such as "Hello", is added to a CrocoPat program, then the meaning of EX, FA and "!" changes in that the universe will now includes "Hello".</p><p>In practice, such problems may have reasonable work-arounds, but more research seems called for to better characterize the implications of CrocoPat's universe.</p><p>There are a number of accidental (rather than inherent) differences between Grok and CrocoPat, such as the way files are handled and the means of deleting relations that may make Grok handier for manipulating big architectural graphs. For example, Grok also supports a number of features such as string handling (a weak version) and ways to search for and modify names of nodes ---which have proven to be important in architecture manipulations. It might make sense for CrocoPat to include some of these features. Grok can be used interactively, by typing in queries, or as a script languages. When used interactively, Grok is handy for browsing and exploring a database of relations, especially a database that is not well understood. By contrast, CrocoPat can only be used as a batch-oriented script language. Such differences may be resolved as these languages evolve.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.">Implementation and performance of Grok-like languages</head><p>Back in 1995-96 when I was experimenting with Tarski algebra for architectural use, it was not clear if a Grok-like language could deal with the size and complexity of problems that are interesting for architectural manipulation. This question has since been answered affirmatively, by Grok, CrocoPat and Relview. One reason for this affirmative answer is that Moore's law doubles our speed and memory about each couple of years, so our implementations get better as the years go by simply because of increasingly capable hardware.</p><p>Grok was designed to run in main memory, to optimize its speed and to simplify its implementation. The same is true of Relview, GReQL, JGrok and CrocoPat.</p><p>By comparison, traditional disk-based database approaches, notably SQL, run painfully slowly when applied to large architectural graphs.</p><p>Grok uses a simple data structure to store edges. It uses three arrays, called rel (relation), src (source), and trg (target). Edge R(A, B) is stored in some row i as rel(i) = r, src(i) = a, and trg(i) = b, where r, a and b are 32-bit hashes of "R", "A", and "B" respectively. The simplicity of this data structure makes maintenance and enhancement of Grok particularly easy.</p><p>As Grok computes new relations, they are allocated space on the end of these growing arrays, which is compacted as relations are deleted. An operation such as relational composition, union or intersection scans the arrays to collect the edges of each operand, sorts these as appropriate for performance and then executes the actual operation as a specialized merge of the edges of the two operands. A radix sort is used, which effectively runs in time O(E) where E is the total number of edges, and the whole operation time is O(E). Transitive closure is implemented by collecting edges of the relation and shipping them to an implementation of transitive closure. This implementation of closure can easily be replaced by another better one if this is desirable. Grok is written in Turing, which is implemented by transcribing it to the C language.</p><p>JGrok's implementation is based on linked lists, in turn based on Java classes. These lists record the nodes and edges in the graph.</p><p>A dramatically different data structure is used in Relview and CrocoPat, which both use Binary Decision Diagrams (BDDs) <ref type="bibr" target="#b4">[5]</ref>. An advantage of BDDs is that they can represent n-ary relations.</p><p>Beyer <ref type="bibr" target="#b3">[4]</ref> states, "Experience in computer-aided verification shows that the data structure binary decision diagram (BDD) can represent even huge relations efficiently." Dong <ref type="bibr" target="#b8">[9]</ref> is not so optimistic, saying, "research on symbolic BDD based graph algorithms seems to be worthwhile only if real applications deal with large dense graphs. The graphs which we encounter in practice, e.g., the graphs representing the network of the Internet, social networks, and railway connections, seem to be rather sparse (as they are more or less planar), however."</p><p>BDDs work best for dense graphs, as this density allows common paths in the decision diagram to be collapsed to a single path. A priori, it is not clear that architectural graphs are dense. In practice, the number of edges in graphs that are extracted from software commonly grows linearly with the number of nodes, which suggests sparseness rather than density.</p><p>However, Beyer gives case study measurements indicating that CrocoPat's BDD data structure takes less space than Grok's array-based data structure for large and complex queries, notably when computing the transitive closure of the CALL relation. It would be good to do more of such studies, to better determine when BDD has an advantage and to better determine what aspect of architectural graphs causes them to be efficiently encoded as BDDs. <ref type="bibr">(Beyer's [3]</ref> WCRE paper indicates that Grok crashed on memory overflows on test examples, but it appears that an obsolete version of Grok was used in those tests.)</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="9.">Using Grok-like languages for architectural purposes</head><p>This section addresses the third question asked at the beginning of this paper: How have Grok-like languages been used to solve problems in software architecture and software analysis?</p><p>Grok-like languages are attractive in that they promise to let us think about and manipulate graphs in a high level, elegant and efficient way. Rather than thinking and computing on a node-by-node or edge-byedge basis, we can deal with whole relations at a time. Alfred North Whitehead has said, "By relieving the brain of all unnecessary work, a good notation sets it free to concentrate on more advanced problems, and, in effect, increases the mental power of the race" [Quoted in P. <ref type="bibr">Davis and R. Hersh The Mathematical Experience, Boston, 1981.</ref>] Also, when we embed the notation in a programming language we gain the advantage that our thinking, as written down in the notation, translates directly to an implementation. <ref type="table" target="#tab_3">Table 2</ref> gives examples of architectural and software analysis problems that have been tackled using a high-level relational approach. (See also Beyer's <ref type="bibr" target="#b2">[3]</ref> list of problems dealt with by relational means.)</p><p>As an example of the kind of work being done, van Emden <ref type="bibr" target="#b35">[37]</ref> writes, "One of the tools we use for inferring these derived aspects is Grok, a calculator for relational algebra ... We use it, for example, to compute the 'refused bequest' smell where child classes do not use the methods that were offered by their parents." As another example, van Deursen <ref type="bibr" target="#b34">[36]</ref> writes "One of the tools we use for inferring type relations is Grok, a calculator for relational algebra ...We use it, for example, to turn the derived type facts into the required equivalence relation."</p><p>As can be seen in this table, Feijs and his colleagues have been particularly productive in discovering and promoting ways to use a relational approach in software architecture. Feijs et al., <ref type="bibr">Knodel et al. and</ref> Godfrey have been particularly active in transferring this technology to industry. <ref type="table" target="#tab_3">Table 2</ref> illustrates potential benefits of using a relational approach to the analysis and manipulation of architectural structures. Ideally in the future, more and more of this kind of work will be done.  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Purpose</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="10.">Conclusions</head><p>This paper is a retrospective based on a 1998 paper on how a high-level relational approach can formalize and automate solutions to various problems in software architecture. Boxology and its formalization as typed graphs are an underlying part of this approach. These can help us more easily document software architecture. Grok-like languages can help us to produce understandable views of architecture. Most notably as-built architecture are amenable to this approach.</p><p>A range of future research should be pursued to explore and validate the relational approach to architecture. Languages such as Grok and CrocoPat should be evaluated and evolved. Students should be exposed to a relational approach to thinking, modelling and programming. We should work toward proposing and implementing Shaw's envisioned "robust suite of tools for analysis, consistency checking."</p><p>I hope this relational approach will increasingly help us understand software architecture, design patterns, and related concepts. Ideally this approach, with light-weight formalisms and efficient relational languages will, in the words of Northhead, guide us forward to "concentrate on more advanced problems."</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1" validated="false"><head></head><label></label><figDesc>SQL, as well as Datalog, also does not perform well (it is too slow) for work on architectural graphs, so it is not really a Grok-like language</figDesc><table>Date 
Prolog 
Colmerauer et al. 
1972 
SQL 
Chamberlin &amp; Boyce 
1974 
GraphLog Consens et al. 
1989 
Relview 
Berghammer et al. 
1993 
Grok 
Holt 
1996 
RPA 
Feijs et al. 
1998 
GReQL 
Kullbach &amp; Winter 
1999 
JGrok 
Wu 
2001 
CrocoPat 
Beyer 
2003 
Table 1. Grok-like languages 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3" validated="false"><head>Table 2 . Example uses of Grok-like languages</head><label>2</label><figDesc></figDesc><table></table></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgements</head><p>Grant Weddell graciously and patiently explained database theory to me. Students in my graduate course have used Grok and helped me make it more user friendly. Mike Godfrey provided valuable suggestions to improve this paper. Thanks to Sarah Nadi for fixing various clumsiness in the paper.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ansi/</forename><surname>Ieee</surname></persName>
		</author>
		<ptr target="http://www.iso.org/iso/iso_catalogue/catalogue_tc/catalogue_detail.htm?csnumber=45991" />
		<title level="m">Recommended Practice for Architecture Description of Software-Intensive Systems</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Relview ---A computer system for the manipulation of relations</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Berghammer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">; M</forename><surname>Schmidt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Rattray</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Rus</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Scollo</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 3rd Conf. on Algebraic Methodology and Software Technology (AMAST 93)</title>
		<meeting>3rd Conf. on Algebraic Methodology and Software Technology (AMAST 93)<address><addrLine>The Netherlands</addrLine></address></meeting>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="1993-06" />
			<biblScope unit="page" from="405" to="406" />
		</imprint>
		<respStmt>
			<orgName>University of Twente</orgName>
		</respStmt>
	</monogr>
	<note>Nivat,</note>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Simple and Efficient Relational Querying of Software Structures</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dirk</forename><surname>Beyer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andreas</forename><surname>Noack</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Claus</forename><surname>Lewerentz</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Tenth IEEE Working Conference on Reverse Engineering</title>
		<meeting>the Tenth IEEE Working Conference on Reverse Engineering<address><addrLine>Victoria, BC; Los Alamitos (CA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society Press</publisher>
			<date type="published" when="2003-11-13" />
			<biblScope unit="page" from="216" to="225" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Efficient Relational Calculation for Software</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dirk</forename><surname>Beyer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andreas</forename><surname>Noack</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Claus</forename><surname>Lewerentz</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Analysis. IEEE Transactions on Software Engineering (TSE)</title>
		<imprint>
			<biblScope unit="volume">31</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="137" to="149" />
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Graph-based algorithms for Boolean function manipulation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">E</forename><surname>Bryant</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Computers</title>
		<imprint>
			<biblScope unit="volume">35</biblScope>
			<biblScope unit="issue">8</biblScope>
			<biblScope unit="page" from="677" to="691" />
			<date type="published" when="1986" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">SEQUEL: A Structured English Query Language</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Donald</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Raymond</forename><forename type="middle">F</forename><surname>Chamberlin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Boyce</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 1974 ACM SIGFIDET Workshop on Data Description, Access and Control</title>
		<meeting>the 1974 ACM SIGFIDET Workshop on Data Description, Access and Control</meeting>
		<imprint>
			<publisher>Association for Computing Machinery</publisher>
			<date type="published" when="1974" />
			<biblScope unit="page" from="249" to="264" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Reverse Engineering and Design Recovery: A Taxonomy</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">J</forename><surname>Chikofsky</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">H</forename><surname>Cross</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><forename type="middle">I</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Software</title>
		<imprint>
			<biblScope unit="page" from="13" to="17" />
			<date type="published" when="1990-01" />
			<publisher>IEEE Computer Society</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Expressing structural hypertext queries in graphlog</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">P</forename><surname>Consens</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">O</forename><surname>Mendelzon</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Second Annual ACM Conference on Hypertext and Hypermedia</title>
		<meeting>the Second Annual ACM Conference on Hypertext and Hypermedia<address><addrLine>Pittsburgh, Pennsylvania, United States</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1989" />
			<biblScope unit="page" from="269" to="292" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">What graphs can be efficiently represented by BDDs?</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Dong</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Molitor</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Conference on Computing: Theory and Applications (ICCTA&apos;07)</title>
		<meeting><address><addrLine>Kolkata, India</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2007-03" />
			<biblScope unit="page" from="128" to="134" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Wins and Losses of Algebraic Transformations of Software Architectures</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><forename type="middle">M</forename><surname>Fahmy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">C</forename><surname>Holt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">James</forename><forename type="middle">R</forename><surname>Cordy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 16th IEEE International Conference on Automated Software Engineering</title>
		<meeting>the 16th IEEE International Conference on Automated Software Engineering</meeting>
		<imprint>
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">A relational approach to support software architecture analysis</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><forename type="middle">M G</forename><surname>Feijs</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">L</forename><surname>Krikhaar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">C</forename><surname>Van Ommering</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Software -Practice and Experience</title>
		<imprint>
			<biblScope unit="volume">28</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="371" to="400" />
			<date type="published" when="1998-04" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">J</forename><surname>Finnigan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">C</forename><surname>Holt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Kalas</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Kerr</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Kontogiannis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><forename type="middle">A</forename><surname>Müller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Mylopoulos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">G</forename><surname>Perelgut</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Stanley</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Wong</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">The software bookshelf Source</title>
		<imprint>
			<date type="published" when="1997" />
			<biblScope unit="volume">36</biblScope>
			<biblScope unit="page" from="564" to="593" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Big Ball of Mud</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Brian</forename><surname>Foote</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Joseph</forename><surname>Yoder</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Fourth Conference on Patterns Languages of Programs (PLoP &apos;97/EuroPLoP &apos;97)</title>
		<meeting><address><addrLine>Monticello, Illinois</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1997-09" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">An Introduction to Software Architecture</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Garlan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mary</forename><surname>Shaw</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Advances in Software Engineering and Knowledge Engineering</title>
		<imprint>
			<biblScope unit="volume">1</biblScope>
			<date type="published" when="1993" />
			<publisher>World Scientific Publishing Co</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ian</forename><surname>Gorton</surname></persName>
		</author>
		<title level="m">Essential Software Architecture</title>
		<meeting><address><addrLine>Secaucus, NJ</addrLine></address></meeting>
		<imprint>
			<publisher>Springer-Verlag New York Inc</publisher>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">A Software Reconstruction Architecture Method</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Guo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Atlee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Kazman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Software Architecture (Proceedings of the First Working IFIP Conference on Software Architecture (WICSA1))</title>
		<meeting><address><addrLine>San Antonio, TX</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1999-02" />
			<biblScope unit="page" from="15" to="33" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Binary Relational Algebra Applied to Software Architecture</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">C</forename><surname>Holt</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">CSRI Tech Report</title>
		<imprint>
			<biblScope unit="volume">345</biblScope>
			<date type="published" when="1996-03" />
		</imprint>
		<respStmt>
			<orgName>University of Toronto</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Structural Manipulations of Software Architecture using Tarski Relational Algebra</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">C</forename><surname>Holt</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Working Conference on Reverse Engineering</title>
		<meeting><address><addrLine>Honolulu</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1998-10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Introduction to the Grok Programming Language</title>
	</analytic>
	<monogr>
		<title level="j">Ric Holt</title>
		<imprint>
			<date type="published" when="2002-05" />
		</imprint>
		<respStmt>
			<orgName>University of Waterloo</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Software Architecture as a Shared Mental Model</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">C</forename><surname>Holt</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Workshop on Program Comprehension, Ric Holt</title>
		<meeting><address><addrLine>Paris</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2002-06" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Blind men and elephant</title>
	</analytic>
	<monogr>
		<title level="j">Jainism Global Resource Center, website Jainworld.com</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Architecture Compliance Checking: Experiences from Successful Technology Transfer to Industry</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Knodel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Muthig</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">U</forename><surname>Haury</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Meier</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">12th European Conference on Software Maintenance and Reengineering</title>
		<meeting><address><addrLine>Athens</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2008-04" />
			<biblScope unit="page" from="1" to="4" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<monogr>
		<title level="m" type="main">Software Architecture Reconstruction</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">L</forename><surname>Krikhaar</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1999" />
			<pubPlace>The Netherlands</pubPlace>
		</imprint>
		<respStmt>
			<orgName>Univ. of Amsterdam</orgName>
		</respStmt>
	</monogr>
<note type="report_type">PhD thesis</note>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Querying as an Enabling Technology in Software Reengineering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Kullbach</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Winter</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">3rd European Conference on Software Maintenance and Reengineering</title>
		<imprint>
			<publisher>IEEE Comp. Soc</publisher>
			<date type="published" when="1999" />
			<biblScope unit="page" from="42" to="50" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Architectural Blueprints-The &apos;4+1&apos; View</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Philippe</forename><surname>Kruchten</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Software</title>
		<imprint>
			<biblScope unit="volume">12</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="42" to="50" />
			<date type="published" when="1995-11" />
		</imprint>
	</monogr>
	<note>Model of Software Architecture</note>
</biblStruct>

<biblStruct xml:id="b25">
	<monogr>
		<title level="m" type="main">Completeness of fact extractor and a new approach to fact extraction with emphasis on Refers-to relation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yuan</forename><surname>Lin</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2008" />
		</imprint>
		<respStmt>
			<orgName>University of Waterloo</orgName>
		</respStmt>
	</monogr>
<note type="report_type">PhD thesis</note>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Boxology of NBA and TA: A Basis for Understanding Software Architecture</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Andrew</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Richard</forename><forename type="middle">C</forename><surname>Malton</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Holt</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Working Conference on Reverse Engineering</title>
		<meeting><address><addrLine>Pittsburgh</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2005-08-12" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">Reverse Engineering by Visualizing and Querying</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">O</forename><surname>Mendelzon</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Sametinger</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SoftwareConcepts and Tools</title>
		<imprint>
			<date type="published" when="1995" />
			<biblScope unit="volume">16</biblScope>
			<biblScope unit="page" from="170" to="182" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">Documenting software architecture, Part 1: What software architecture is, and why it&apos;s important to document it</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tilak</forename><surname>Mitra</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IBM DeveloperWorks</title>
		<imprint>
			<biblScope unit="volume">15</biblScope>
			<date type="published" when="2008-04" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Roger Tory Peterson</surname></persName>
		</author>
		<ptr target="http://www.sei.cmu.edu/architecture/published_definitions.html" />
		<title level="m">Definitions of &apos;Software Architecture&apos;&quot;, Software Engineering Institute</title>
		<imprint>
			<date type="published" when="1934" />
		</imprint>
	</monogr>
	<note>Field Guide to the Birds, Houghton Mifflin Company</note>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">A Field Guide to Boxology: Preliminary Classification of Architectural Styles for Software Systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mary</forename><surname>Shaw</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Paul</forename><surname>Clements</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 21st International Computer Software and Applications Conference</title>
		<meeting>the 21st International Computer Software and Applications Conference</meeting>
		<imprint>
			<date type="published" when="1997" />
			<biblScope unit="page" from="6" to="13" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">The Golden Age of Software Architecture</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mary</forename><surname>Shaw</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Paul</forename><surname>Clements</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Software</title>
		<imprint>
			<biblScope unit="volume">23</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="31" to="39" />
			<date type="published" when="2006-04" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">On the calculus of relations</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Tarski</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Symb. Log</title>
		<imprint>
			<biblScope unit="volume">6</biblScope>
			<biblScope unit="page" from="73" to="89" />
			<date type="published" when="1941" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Linus</forename><surname>Torvalds</surname></persName>
		</author>
		<ptr target="http://www.cs.helsinki.fi/u/torvalds/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<analytic>
		<title level="a" type="main">Understanding COBOL systems using inferred types</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Van Deursen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Moonen</surname></persName>
		</author>
		<idno>05/05/1999 -05/07/1999</idno>
	</analytic>
	<monogr>
		<title level="m">Seventh International Workshop on Program Comprehension, Proceedings</title>
		<meeting><address><addrLine>Pittsburgh, PA, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1999" />
			<biblScope unit="page" from="74" to="81" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<analytic>
		<title level="a" type="main">Java quality assurance by detecting code smells</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Van Emden</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Moonen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Ninth Working Conference on Reverse Engineering</title>
		<imprint>
			<date type="published" when="2002" />
			<biblScope unit="page" from="97" to="106" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<analytic>
		<title level="a" type="main">Languages for formalizing, visualizing and verifying software architectures</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Van Ommering</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Krikhaar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Feijs</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Languages</title>
		<imprint>
			<biblScope unit="volume">27</biblScope>
			<biblScope unit="issue">1/3</biblScope>
			<biblScope unit="page" from="3" to="18" />
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b37">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wikipedia</forename><surname>Grok</surname></persName>
		</author>
		<ptr target="http://en.wikipedia.org/wiki/Grok" />
		<imprint>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b38">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wikipedia</forename><surname>Boxology</surname></persName>
		</author>
		<ptr target="http://en.wikipedia.org/wiki/Boxology" />
		<imprint>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b39">
	<analytic>
		<title level="a" type="main">Using graph patterns to extract scenarios</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">E</forename><surname>Hassan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">C</forename><surname>Holt</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 10 th International Workshop on Program Comprehension (IWPC 2002)</title>
		<meeting>the 10 th International Workshop on Program Comprehension (IWPC 2002)</meeting>
		<imprint>
			<date type="published" when="2002" />
			<biblScope unit="page" from="239" to="247" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
