<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2019-03-26T16:29+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Preferences over Sets</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">I</forename><surname>Brafman</surname></persName>
							<email>brafman@cs.bgu.ac.il</email>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Domshlak</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">E</forename><surname>Shimony</surname></persName>
							<email>shimony@cs.bgu.ac.il</email>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Silver</surname></persName>
						</author>
						<author>
							<affiliation key="aff0">
								<orgName type="department" key="dep1">Dept. of Computer Science</orgName>
								<orgName type="department" key="dep2">Faculty of Industrial Engineering Technion</orgName>
								<orgName type="department" key="dep3">Dept. of Computer Science</orgName>
								<orgName type="institution">Ben-Gurion University</orgName>
								<address>
									<postBox>P.O. Box 645</postBox>
									<settlement>Beer-Sheva, Haifa</settlement>
									<country>Israel, Israel</country>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff1">
								<orgName type="institution">Ben-Gurion University</orgName>
								<address>
									<postBox>P.O. Box 645</postBox>
									<settlement>Beer-Sheva</settlement>
									<country key="IL">Israel</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Preferences over Sets</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Research on preference elicitation and reasoning typically fo-cuses on preferences over single objects of interest. However, in a number of applications the &quot;outcomes&quot; of interest are sets of such atomic objects. For instance, when creating the program for a film festival, editing a newspaper, or putting together a team, we need to select a set of films (resp. articles, members) that is optimal with respect to quality, diversity, co-hesiveness, etc. This paper describes an intuitive approach for specifying preferences over sets of objects. An algorithm for computing an optimal subset, given a set of candidate objects and a preference specification, is developed and evaluated.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Introduction</head><p>The area of eliciting, modeling, and reasoning with preferences has experienced much interest in recent years. Most work in this area concentrates on specifying preferences over some universe of objects O, and using this information for various tasks of preferential reasoning such as ordering a given subset of O, identifying optimal objects within a subset of O specified implicitly via hard constraints, etc. Examples of such tasks include selecting flights, presenting documents in their perceived importance order, customized product configuration for personal computers, etc.</p><p>In most practical applications, the universe of objects O is combinatorial, that is, stands for a cross-product of a certain set of attributes. Since the size of such a universe O is exponential in the number of attributes, the user cannot be expected to provide an explicit ordering over O. The user can, however, provide some generic preferences over attribute values that would implicitly order O. Much of the work in the area of reasoning with preferences has to do with processing a concrete class of statements that users find convenient to specify, adopting and justifying a certain semantics for these statements, and developing algorithms that use these statements to compare objects or select the best ones. This paper deals with similar issues as well. However, unlike most past work which attempts to reason with preferences over objects, we are interested in similar forms of reasoning over sets of objects. More specifically, the setting of our problem is: Given a set of objects O, elicit a (possibly partial) ordering over 2 O , and find at least one optimal subset of O with respect to this ordering.</p><p>In the rest of this section we explain why this capability is needed, and why some simple solutions are inadequate. In the following sections we consider a general approach for specifying set-preferences, and a more concrete instantiation of this approach that is based on CP-nets ( <ref type="bibr" target="#b1">Boutilier et al. 2004</ref>), and their extension with relative importance relations in the TCP-nets model <ref type="bibr">(Brafman, Domshlak, &amp; Shi- mony 2006</ref>). Then, we consider the problem of computing an optimal subset of a given set of objects, suggest a scheme for addressing it, which we refer to as preference-based CSP generation, and provide some initial empirical evaluation of its performance on a database of movies.</p><p>Our need for specifying preferences over sets arose naturally in the context of work on using preferences as a tool for personalizing and adapting online newsletters and multimedia presentations. Viewed abstractly, a newsletter is a collection of articles, and a personalized newsletter should provide the reader with a preferred collection of articles, possibly subject to various size and layout constraints. Similarly, setting up a committee or a task-force, or coming up with a program for a film festival requires addressing a similar optimal subset selection problem. Of course, in each case, what constitutes a good subset can be quite different.</p><p>A naive solution to the problem of subset selection would be to order all the objects and choose the set of top-most objects satisfying whatever hard constraints we have. This solution is quite likely to be inappropriate, since the overall attractiveness of a set of objects is rarely just a flat "accumulation" of attractiveness of these objects. For instance, given some articles, we are less interested in some other articles (e.g., due to overlap in their content), while other groups of articles may complement each other. Similarly, when selecting team members, we know that some members are mutually enhancing, while others can be mutually detrimental. Likewise, in choosing the film festival program, we might wish to balance the choice of genre, topic, etc.</p><p>A similar problem was addressed by <ref type="bibr">(Brafman &amp; Fried- man 2005;</ref><ref type="bibr" target="#b3">Brafman, Domshlak, &amp; Shimony 2004</ref>). They handled such conditional preferences for the appearance of an article by considering a model in which, for each article, the outcome explicitly specifies whether this article is included in the newsletter or not. Using a CP-net, it was possible to model the conditional preferences one might have for seeing one article given that some other articles are present or absent. Such CP-nets have one node for each article, and it is clear that in most application domains this solution cannot scale up, nor does it address real needs. First, the pool of possible articles (or potential team members or films) is often huge, and we cannot expect an editor to actually specify a preference model that explicitly mentions each and every one of them. Second, new articles constantly appear, and we cannot expect an editor to constantly update and modify the preference model to make it up to date. In short, what we really want is a static preference specification approach that can be used for dynamically selecting a subset of objects, where these objects are typically unknown at preference elicitation time. This is what the work presented here sets out to accomplish.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Background on TCP-nets</head><p>The TCP-nets model, an extension of CP-nets ( <ref type="bibr" target="#b1">Boutilier et al. 2004</ref>), and its corresponding preference language play a central role in the concrete language we propose. This section reviews their essential features. For a more in-depth description of TCP-nets we refer the reader to <ref type="bibr" target="#b4">(Brafman, Domshlak, &amp; Shimony 2006</ref>). Language: Each TCP-net captures a collection of preference statements that specify a preference ordering over a universe of objects O. Objects in O are described in terms of some set of attributes X = {X 1 , . . . , X n }, i.e., we have O = Ã—Dom(X i ). The TCP-nets model supports two types of statements over X , namely (conditional) preference for values of a variable, e.g., "if the car is a sports car, I prefer black to red as its color," and (conditional) relative importance of different variables, e.g., "for a sports car, performance is more important to me than reliability." The intuitive meaning of value preferences is straightforward. Importance statements are used to inform us about tradeoffs, i.e., "preference over compromises". For instance, if reliability is more important to me than performance, it means that if I have to compromise on either reliability or performance, I would rather compromise on performance. Semantics: Reasoning about the ordering induced by such statements on O requires a commitment to a concrete logical interpretation of these natural language statements. The TCP-nets model adopts the ceteris paribus (all else equal) semantics for statement interpretation <ref type="bibr" target="#b6">(Hansson 2001)</ref>. In this conservative semantics, a statement "I prefer X = x 1 to X = x 2 " means that given any two objects that are identical except for the value of X, the user prefers the one assigning x 1 to X to the one assigning x 2 . If these two objects differ on some other attribute as well, then they cannot be compared based on this preference statement alone. Similarly, a statement "X is more important than Y " means that given two objects that are identical except for their values on X and Y , the user prefers the one assigning a better value to X than the one assigning a better value to Y . Again, if these two objects differ on some other variable, too, they can no longer be compared based on this statement alone. Conditional statements have the same semantics, except that they are restricted to comparisons between elements that satisfy the condition. Thus, "I prefer X = x 1 to X = x 2 given that Y = y 1 " is interpreted exactly as above, but only for objects that satisfy Y = y 1 .</p><p>Clearly, each preference statement induces a preference relation over O. The "global" preference relation specified by a collection of such statements (and thus, by the TCP-net) corresponds to the transitive closure of the union of these "local" preference relations. If the user provides us with consistent information about her preferences, then the binary relation induced by the TCP-net on O is a strict partial order (i.e., transitive, irreflexive, and antisymmetric). Note that this order is rarely complete, and thus typically not all pairs of objects are comparable with respect to a TCP-net. Representation: In TCP-nets, such a collection of preference statements is represented using an annotated graph. The nodes of the graph correspond to the attributes X and the edges provide information about preferential and relative importance dependencies between the variables. TCPnets have three edge types. The first type of (directed) edge captures preferential dependence; such an edge from X to Y implies that user preference over values of Y vary with values of X. The second (directed) edge type captures relative importance relations; such an edge from X to Y implies that X is more important than Y . The third (undirected) edge type captures conditional importance relations, holding only when certain other variables have particular values. Each node X in a TCP-net is annotated with a conditional preference table (CPT) describing the user's preference order over Dom(X) for every possible value assignment to the parents of X (denoted P a(X)). In addition, each undirected edge (X, Y ) is annotated with a conditional importance table (CIT) describing the relative importance of X and Y given the values of certain conditioning variables. Schematic Example: <ref type="figure">Figure 1</ref> depicts a TCP-net over four variables-binary E, C, T and ternary F . Standard directed edges in this graph capture preferential dependencies, doubly-directed edges capture relative importance, and undirected edges capture conditional relative importance; ñ®½™ denotes preference over variable values; and â†’ denotes variable importance. The graph shows that the preference over values of C depends on F 's value, while the preference over values of T depends on the value of both F and E. Actual preferences are provided in CPTs. For example, when F = f 0 , we prefer C to be false. Additionally, an importance edge from F to E indicates that F 's value is more important to us than that of E. Finally, the undirected edge between C and T and its associated CIT specify an importance relation between C and T conditional on E.</p><p>The structure of the TCP-net graph plays an important role in determining the consistency of preference specification and in reasoning about preference, although the user need not be aware of this structure <ref type="bibr" target="#b4">(Brafman, Domshlak, &amp; Shimony 2006</ref>). Here we note that not all sets of preference statements representable as TCP-nets are consistent. That is, some TCP-nets may correspond to a strict binary relation on O that is not antisymmetric. However, (Brafman, Domsh- <ref type="figure">Figure 1</ref>: A schematic example of a TCP-net.</p><formula xml:id="formula_0">f 2 ñ®½™ f 1 ñ®½™ f 0 '&amp;%$ !"# F # # H H H H H H H H H ñ®½™ / / '&amp;%$ !"# E '&amp;%$ !"# C ñ®½™ E '&amp;%$ !"# T e ñ®½™ Â¯ e f 0 Â¯ c ñ®½™ c Â· Â· Â· c ñ®½™ Â¯ c f 2 âˆ§ Â¯ e t ñ®½™ Â¯ t Â· Â· Â· Â¯ t ñ®½™ t e T â†’ C Â¯ e C â†’ T</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>lak, &amp; Shimony 2006</head><p>) specifies a wide class of TCP-nets for which consistency is guaranteed, which can be easily recognized by the user interface. In what follows, we restrict ourselves to networks of this class.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Expressing Preferences over Subsets</head><p>Our goal is to provide a convenient tool for specifying preference over subsets of a set O that has the same attribution structure O = Ã— XiâˆˆX Dom(X i ) as before. Our elicitation procedure consists of the following steps:</p><p>1. Obtain from the user properties of sets of objects that affect her preference over these sets.</p><p>2. Allow the user to express preference statements in terms of these properties.</p><p>3. Construct a preference representation model over these properties (a TCP-net in our case) that captures the information provided by these statements.</p><p>Below we describe a language that (in our opinion) efficiently addresses the major needs of qualitative preference specification over sets, and discuss some semantic issues involved in such preference specification. Subsequently, we discuss a computational scheme for selecting an optimal subset of O, given a collection of such "set-preference" statements represented by a TCP-net.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Set-Preference Specification Language</head><p>It seems that most properties of sets of attributed objects that affect user preferences over such sets (informally) take the form "at least one object with C = c, and</p><formula xml:id="formula_1">D = d 1 or D = d 2 ,"</formula><p>"the number of items with C = c", etc. Formally, define the set X of primitive propositions as</p><formula xml:id="formula_2">X = {X = x | X âˆˆ X , x âˆˆ Dom(X)}</formula><p>Let L X be the propositional language defined over X with the usual logical operators. Note that we can consider objects of O as models of this language, and thus it makes sense to write o |= Ï• where o âˆˆ O and Ï• âˆˆ L X . While various basic properties of object sets can be considered, in our work we found that two classes of properties cover all our needs 1 . The first class has the form ñ®½™|Ï•||, where Ï• âˆˆ L X and Dom(ñ®½™|Ï•||) = Z * . Given a subset O âŠ† O, ñ®½™|Ï•||(O) denotes the number of objects in O that satisfy Ï•, i.e., ñ®½™|Ï•|| (O) = |{o âˆˆ O|o |= Ï•}|. Using the property, the user is able to express her preference on the number of objects in the selected subset that satisfy Ï•. The second class of properties has the form ñ®½™|Ï•| REL kñ®½™, where Ï• âˆˆ L X , REL is a relational operator over integers, and k âˆˆ Z * is a nonnegative integer. While properties in the first class can take any non-negative integer value, the properties in this class are naturally Boolean; ñ®½™|Ï•| REL kñ®½™(O) is assigned the truth value of |{o âˆˆ O|o |= Ï•}| REL k.</p><p>Example 1 Consider the following example of newsletter editing. Let the various articles O be schematically described in terms of four attributes: Country, Format (news, interview, opinion, etc.), Topic (politics, weather, etc.), and Emotion (positive, negative, neutral, etc.) The editor in charge of selecting the content for the newsletter specifies four properties that affect her content preference:</p><formula xml:id="formula_3">F = ñ®½™|(format = news)|| E = ñ®½™|(emotion = neutral) âˆ¨ (emotion = negative)| â‰¤ 2ñ®½™ C = ñ®½™|(country = Iraq) âˆ§ (topic = politics)| â‰¥ 2ñ®½™ T = ñ®½™|(topic = culture) âˆ¨ (emotion = positive)| &gt; 1ñ®½™</formula><p>Observe that the property F is of the first, multi-valued class ñ®½™|Ï•||, while E, C, and Now, consider a set of properties P = {P 1 , . . . , P m } specified as above over some (not necessarily pairwise distinct) formulas Ï• 1 , . . . , Ï• m âˆˆ L X , respectively. Observe that we can treat each P i as a variable (Boolean or multivalued, depending on its specification,) and each subset O âŠ† O provides a complete assignment to P. That is, abstractly, we can view each subset O of O as a vector of values, p O , for P 1 , . . . , P m , and abusing notations, we have a correspondence between the power set 2 O and the abstract set of outcomes O P = Ã— P D(P i ). Moreover, any preference order over O P implicitly induces a preference order over 2 O . What is nice about a preference order over O P is its abstractness -the user specifying it does not need to know the actual content of O. The user need only know what properties of object sets she cares about, and express these properties in terms of the attributes X . This means that a single static preference order over O P can be used in reasoning over different, dynamically changing sets of actual objects O. In fact, by using O P instead of 2 O we have reduced our problem of specifying preferences over subsets to that of specifying preferences over attributed objects. Given this reduction, we can use our favorite qualitative or quantitative specification language and representation model. We chose to use TCP-nets, but other choices are possible.</p><p>Example 2 Continuing Example 1, the editor states that:</p><p>1. The number of news articles should be maximal (i.e. f 2 ñ®½™ f 1 ñ®½™ f 0 ). 2. Having at least two articles on the political situation in Iraq (c) is better if there is at least one news article, otherwise fewer than two Iraq articles (Â¯ c) are better. 3. Preference on number of non-positive articles (E) is less important than preference on the number of news articles (F ). 4. If the general prevalent emotion of the collection is not too negative (e), then T , the topic of some articles, is more important than the country (C), otherwise the importance is reversed. 5. If negative emotion prevails (Â¯ e) and there are two news articles, it is better to have more than one article of a positive note or about culture (t). Otherwise, Â¯ t is preferred. Modeling these statements as a TCP-net results precisely in the TCP-net of <ref type="figure">Figure 1</ref> These subsets differ in property F (number of news format items), since F (O 1 ) = 1 and F (O 2 ) = 2. Upon examination, it is evident that E(O 1 ) = E(O 2 ) = true, because both subsets contain fewer than 2 items. Likewise, C(O 1 ) = C(O 2 ) = f alse and T (O 1 ) = T (O 2 ) = f alse, the latter because no item in either O 1 or O 2 is about culture or has positive emotion. Therefore, we can use the ceteris paribus semantics of TCP networks to decide that O 2 is preferred to O 1 , since the network specifies f 2 ñ®½™ f 1 , and "everything else" is equal. <ref type="bibr">2</ref> </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Optimal Subset Selection</head><p>One of the most important tasks of preferential reasoning is that of preference-based constrained optimization (PCO)-finding a preferentially optimal object that satisfies a given set of hard constraints. In our context, we consider PCO extended to set preferences, and focus on finding an optimal subset of a given set O of objects.</p><p>As noted, our set-preference specification scheme can be used to lift any language for specifying preferences over objects into a language for specifying preferences of sets of objects. It would be great to have a PCO algorithm for set preferences that is as general, too. A naive PCO algorithm would simply generate all candidate subsets and compare them to each other. Unfortunately, this approach is impractical for all but a few applications, as it requires generating all possible subsets of O. For instance, in our experiments we work with a database of 3200 movies, and generating all subsets of such a database is obviously unrealistic. This is where our choice of representing the set preferences using a TCP-net N over certain subset properties P becomes crucial. An attractive property of TCP-nets is that they come with a convenient PCO algorithm. This algorithm is able to examine feasible solutions in an order consistent with the preference relation induced by the network <ref type="bibr">(Braf- man, Domshlak, &amp; Shimony 2006</ref>). That is, any solution generated in the future is guaranteed not to dominate the current solution. <ref type="bibr">3</ref> Although the technical details of this algorithm are quite involved, the basic scheme is a standard depth-first search, as follows:</p><p>1. Let L be a sorted list of TCP-net variables ordered in a way consistent with the TCP arcs. 2. Starting from the first unassigned variable V , assign to V the most preferred (untried) value given the assignment to its predecessors, according to CPT(V ). 3. Backtrack to the previous variable if required.</p><p>The statement "if required" above means either if some constraint is violated, or alternately if we wish the algorithm to enumerate outcomes in order of desirability, in which case we backtrack at any complete assignment. Observe that each leaf node in this search-tree corresponds to a complete assignment, and leaf nodes are generated in a non-decreasing order of preference. In our example ( <ref type="figure">Figure 1</ref>) the list L consists of the variables: (F, E, T, C). <ref type="bibr">4</ref> The algorithm will begin by assigning f 2 , the most preferred value, to F , followed by assigning true to E. Given the values f 2 , e we prefer and assign false to T . Since the assignment to F is not f 0 , the value true is preferred for C. The result is the complete assignment {f 2 , e, c, Â¯ t}. If for some reason (see below) the assignment is infeasible, we backtrack and re-assign C, this time to the less preferred value false, etc.</p><p>Unfortunately, in our case, a complete assignment to the TCP-net is only a set of properties. Whether there is a feasible subset with these properties and what this subset is, is not immediately clear -there is no simple and general way of constructively selecting a subset with arbitrary properties. However, it is still possible to efficiently adapt the PCO algorithm for TCP-nets to our setting, as we explain below.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>The Basic Idea</head><p>As shown above, the PCO algorithm for TCP-nets proceeds by searching over a tree of partial assignments. Each partial assignment in our case maps into a set of properties. Each set of properties maps into a set of feasible subsets that satisfy these properties. The root node of the search tree has an empty set of properties associated with it, and thus corresponds to the set of all feasible subsets. Each node has the same property values as its parents, plus one additional property value. Thus, the subsets associated with each node are also associated with its parent, but not necessarily vice versa. If we explicitly maintain the set of subsets associated with each node, we obtain a conceptually simple adaptation of the PCO algorithm for TCP-nets to our context. The adapted algorithm explicitly searches the abstract space of O P , as well as the concrete dual space of 2 O .</p><p>Although the above is a simple scheme, it is unlikely to work in practice because it maintains a partition over the set of all feasible subsets. Even if we assume subsets have size bound of k, we require space of O(|O| k ) for running this algorithm. One way to overcome this problem is to represent this set of subsets compactly, e.g., using variants of BDDs. However, we do not envision object subsets in applications of our interest exhibiting strong locality or order supporting compact storage in this form. Instead, by associating a constraint satisfaction problem (CSP) with each node of the search tree, we implicitly represent the associated set of subsets. The benefit of using this approach is twofold. First, its space requirements are polynomial. Second, in this approach we never generate all subsets associated with a node in this search tree. Indeed, to generate an optimal subset, we just need to determine for each leaf of the search tree (i.e. a complete value assignment to set properties) whether it has a solution, and if so, we just need one solution.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Preference-based CSP Generation</head><p>We now explain how to generate the CSP associated with each node of the search tree. The resulting algorithm can be viewed as generating a tree of CSPs in some preferred order.</p><p>As stated above, each (possibly partial) value assignment p to our set properties P, implicitly represents the associated set {O} p of subsets of O by solutions to a certain CSP C p . This CSP has one variable Continuing the example, consider the TCP-net assignment p = {f 2 , e, c, Â¯ t}. The corresponding CSP has one cardinality constraint per property, as follows. f 2 means exactly 2 items of news format, inducing the constraint:</p><formula xml:id="formula_4">C f2 : V o1 + V o2 = 2</formula><p>(1)</p><p>since o 1 and o 2 are the only items having news format. The assignment e induces the constraint:</p><formula xml:id="formula_5">C e : V o1 + V o2 â‰¤ 2 (2)</formula><p>as o 1 and o 2 are the only items to have either neutral or negative emotion. (C e happens to be always satisfied.) The assignment c induces the (unsatisfiable) constraint:</p><formula xml:id="formula_6">C c : V o1 â‰¥ 2 (3)</formula><p>Finally, Â¯ t induces the constraint:</p><formula xml:id="formula_7">CÂ¯ t : V o3 + V o4 â‰¤ 1 (4)</formula><p>The algorithm to find an optimal subset of O with respect to a TCP-net N is thus defined as follows: <ref type="bibr">5</ref> 1. Set up the binary-valued CSP variables {V o |o âˆˆ O}. (Optionally, add all prior hard constraints.) 2. Incrementally generate complete property assignments p âˆˆ 2 P in a non-increasing order of desirability according to N using the PCO algorithm. 3. For each assignment p do:</p><p>(a) Set up the CSP constraints induced by p. In our running example, assuming no user-imposed hard constraints, the TCP-net is traversed top-down, resulting in a most desirable outcome p = {f 2 , e, c, Â¯ t}. As shown above, this results in an unsatisfiable CSP instance (since even C c alone is unsatisfiable). Therefore, the CSP solver returns failure, and we backtrack to the next-best assignment to N .</p><p>As shown above, the PCO scheme now flips variable C, to get the next-best outcome p ñ®½™ = {f 2 , e, Â¯ c, Â¯ t}. The induced constraints for p ñ®½™ are the same as for p, except that C c is replaced by C Â¯ c , a constraint over V o1 that requires at most one of these variables to be set to 1 (and thus C Â¯ c is always satisfied.) Solving the constraints C f2 , C e , C Â¯ c , CÂ¯ t results in one of the solutions: {V o1 = V o2 = V o3 = 1, V o4 = 0} or {V o1 = V o2 = V o4 = 1, V o3 = 0}. The algorithm returns the first solution found, say {V o1 = V o2 = V o3 = 1, V o4 = 0}, corresponding to the subset {o 1 , o 2 , o 3 } of O. Observe that based on the input, there is no way to prefer one of these latter results over another, and it is thus sufficient to return one of them arbitrarily.</p><p>Algorithm Improvements Several additional optimizations can be added to the above basic scheme: Since the enumeration of assignments p generates complete assignments in a depth-first search over partial assignments, one could try to solve the CSP induced by a partial outcome p ñ®½™ñ®½™ . A failure to find a solution to C p ñ®½™ñ®½™ means that all assignments extending p ñ®½™ñ®½™ are unrealizable in O, and this can be used to prune the search tree by backtracking earlier. Additionally, it is not necessary to redefine the CSP constraints from scratch for each CSP instance. In a backtracking search over p the induced constraints can be kept for each P i for which p(i) has not changed from the last CSP instance. This was evident in our example, where only one induced constraint changed between p and p ñ®½™ .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Preliminary Analysis</head><p>The optimization scheme discussed in this section requires potentially solving a large number of constraint satisfaction problems. Moreover, these CSPs involve multi-variable constraints, rather than just the standard binary constraints. However, these CSPs are not arbitrary, because constraints are incrementally added and removed as we traverse the tree of partial property assignments. Moreover, the multi-variable constraints in our CSP problems are all of a well-known and widely studied type called cardinality constraints <ref type="bibr" target="#b7">(Hentenryck &amp; Deville 1991)</ref>, and this special case of constraints is known to be representable compactly (linear space). Thus, the space complexity issue is completely avoided, and the overall space requirements of this scheme are negligible. Algorithms for handling such constraints are a standard feature in many offthe-shelf CSP solvers, such as CLP <ref type="bibr" target="#b8">(Puget 1994)</ref>.</p><p>The search time requirement is still an important issue, especially given that standard CSP heuristics do not do well in the presence of cardinality constraints. Prior work, such as (Solotorevsky, Shimony, &amp; Meisels 1998) and others, developed specific search heuristics that effectively focus the search in CSPs with such cardinality constraints, greatly alleviating the problem. Empirical results presented next suggest that at least for some applications, the algorithm completes in reasonable time, for a non-trivial TCP-net and a non-trivial database. To get an initial sense of the performance of our algorithm, we implemented and tested it in on the AMDb database 6 of over 3200 movies. The goal was to generate a program for a three day film festival. Preferences for this selection were rather complex (see the full paper for the precise TCP-nets used), and involved 14 properties in the larger network -which we believe to be a realistic size for real-world applications -and 5 properties in the smaller network. The algorithm was tested on four different subsets of this database, containing 20, 1000, 1600, and 3200 films, respectively. The resulting running times (in seconds) were: Given the inherent complexity of our subset optimization problem, the running times in this representative example are quite reasonable, and seem to indicate the feasibility of our approach. Moreover, we believe that there is much potential for improving runtime performance by using methods that better address the type of incremental CSP involved.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Conclusion</head><p>We motivated the need for specifying and reasoning with preferences over sets of objects. We formalized a generic approach for specifying such preference based on set properties, and considered a concrete version that uses TCP-nets <ref type="bibr">6</ref> http://www.steffensiebert.de/amdb/ to express preferences over properties. Then, we adapted the TCP-net based PCO techniques to this context, obtaining a PCO algorithm that generates a sequence of CSPs, and which, unlike the naive generalization, requires polynomial space only. And while it is worst-case exponential time, an initial implementation exhibited reasonable runtime on an application based on realistic data. We believe running times can be farther improved by better exploiting the special structure of this CSP sequence -where one constraint is added or removed at each step. We refer the reader to a longer version of this paper containing a more detailed explanation of the algorithm, as well as the domain and networks used in our empirical study.</p><p>To the best of our knowledge, <ref type="bibr" target="#b5">(desJardins &amp; Wagstaff 2005</ref>) is the only previous paper to deal with set preference specification. It suggests a language in which users indicate how desirable it is for a set to contain elements with diverse or specific values of an attribute. Our language is significantly more expressive than the scheme suggested in (desJardins &amp; Wagstaff 2005). The diversity or specificity of an attribute's values is just one of many properties a user can define and specify preferences over, in our formalism. Moreover, we allow the specified preferences to be conditional on the degree to which other properties are satisfied.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head></head><label></label><figDesc>V o for each object o âˆˆ O with Dom(V o ) = {0, 1}. In our running example, we have O = {o 1 , o 2 , o 3 , o 4 }, thus the CSP variables are {V o1 , V o2 , V o3 , V o4 }. Each complete instantiation v to these CSP variables naturally induces a subset O âŠ† O, namely the set of items o for which v[V o ] = 1. For example, the instantiation {V o1 = V o2 = 1, V o3 = V o4 = 0} induces the subset O = {o 1 , o 2 }. Observe that this part of the C p spec- ification is independent of p. The constraints of C p are the ones naturally induced by p, as follows. For each property P i âˆˆ P, we add one constraint that enforces P i = p[i]. The property P i involves the cardinality of the number of objects m that satisfy Ï† i , and requires that the relation m REL k hold for some given value k. Let O Ï†i be the set of all ob- jects in O that satisfy Ï† i , and let |O Ï†i | = M . The constraint enforcing P i = p(i) is an M -ary constraint over the vari- ables V Ï†i = {V o |o âˆˆ O Ï†i }. An assignment v obeys the constraint just when m REL k, where m is the number of variables V o âˆˆ V Ï†i that are assigned 1 in v.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head></head><label></label><figDesc>(b) Let v be a solution to the CSP, if one exists. (c) If a solution was found, return the set of items o for which v[V o ] = 1. (d) Otherwise, retract the induced constraints, and back- track in PCO. 4. Return 'fail' (this means an inconsistent specification).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0" validated="false"><head>T are of the second, Boolean class ñ®½™|Ï•| REL kñ®½™. Consider the following subset O of articles:we have F (O) = 2 (due to o 1 and o 2 ), E(O) = true (only o 1 and o 2 satisfy Ï• E ), C(O) = f alse (only o 1 satisfies Ï• C ), and T (O) = true (due to o 3 , o 4 ). ñ®½™</head><label></label><figDesc></figDesc><table>o1 
o2 
o3 
o4 

format 
country 
topic 
emotion 

news 
Iraq 
politics 
neutral 
news 
U.S.A. 
weather 
negative 
interview 
Iraq 
economy 
positive 
opinion 
France 
culture 
positive 

For this subset O âˆˆ O </table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1" validated="false"><head>we use the semantics of TCP-nets to order the elements of O P , and this induces an ordering over 2 O : O âŠ‚ O is preferred to O ñ®½™ âŠ‚ O iff the (unique) property vec- tor p O âˆˆ O P associated with O is preferred to the (unique) property vector p O ñ®½™ âˆˆ O P associated with O ñ®½™ . For exam- ple, consider the subsets O 1 = {o 1 } and O 2 = {o 1 , o 2 }.</head><label></label><figDesc>. ñ®½™ Proceeding with obtaining and modeling preference state- ments over P,</figDesc><table></table></figure>

			<note place="foot" n="1"> Our framework can be extended to support other, though possibly not all, forms of properties as well.</note>

			<note place="foot" n="2"> It is possible to specify logically dependent properties. This does not have any logical implications on the semantics, although it could be exploited to make reasoning more efficient by pruning inconsistent combinations.</note>

			<note place="foot" n="3"> Because TCP-nets induce a partial order, the latter does not imply that solutions in the future are strictly less preferred. 4 Actually the ordering between T and C depends on the value of E, since the conditional importance arc has E as a conditioning element, but we ignore this issue here for simplicity.</note>

			<note place="foot" n="5"> Detailed pseudo-code appears in a longer version of this paper. Any hard constraints imposed by the user beyond the preference structure (such as set cardinality or set-valued constraints (Bessiere et al. 2004)) can be naturally integrated into the algorithm.</note>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">Disjoint, partition and intersection constraints for set and multiset variables</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Bessiere</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Hebrard</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Hnich</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Walsh</surname></persName>
		</author>
		<idno>CP-04</idno>
		<imprint>
			<date type="published" when="2004" />
			<biblScope unit="page" from="138" to="152" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">CP-nets: A tool for representing and reasoning about conditional ceteris paribus preference statements</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Boutilier</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Brafman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Domshlak</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Hoos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Poole</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">JAIR</title>
		<imprint>
			<biblScope unit="volume">21</biblScope>
			<biblScope unit="page" from="135" to="191" />
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Adaptive rich media presentations via preference-based constrained optimization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">I</forename><surname>Brafman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Friedman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the IJCAI-05 Workshop on Advances in Preference Handling</title>
		<meeting>the IJCAI-05 Workshop on Advances in Preference Handling</meeting>
		<imprint>
			<date type="published" when="2005" />
			<biblScope unit="page" from="19" to="24" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Qualitative decision making in adaptive presentation of structured information</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Brafman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Domshlak</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">E</forename><surname>Shimony</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM TOIS</title>
		<imprint>
			<biblScope unit="volume">22</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="503" to="539" />
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">On graphical modeling of preference and importance</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">I</forename><surname>Brafman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Domshlak</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">E</forename><surname>Shimony</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of AI Research</title>
		<imprint>
			<biblScope unit="volume">25</biblScope>
			<biblScope unit="page" from="389" to="424" />
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">DD-PREF: A language for expressing preferences over sets</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Desjardins</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Wagstaff</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">AAAI-05</title>
		<imprint>
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">O</forename><surname>Hansson</surname></persName>
		</author>
		<title level="m">The Structure of Values and Norms</title>
		<imprint>
			<publisher>Cambridge University Press</publisher>
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">The cardinality operator: A new logical connective and its application to constraint logic programming</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">V</forename><surname>Hentenryck</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Deville</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ICLP-91</title>
		<imprint>
			<date type="published" when="1991" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">CSPs with counters: A likelihood-based heuristic</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><forename type="middle">;</forename><surname>Puget</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Ilog</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Solotorevsky</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">E</forename><surname>Shimony</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Meisels</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Experimental and Theoretical AI</title>
		<imprint>
			<biblScope unit="volume">10</biblScope>
			<biblScope unit="page" from="117" to="129" />
			<date type="published" when="1994" />
		</imprint>
	</monogr>
<note type="report_type">Technical Report</note>
	<note>ILOG SOLVER collected papers</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
