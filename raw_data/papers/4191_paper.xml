<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2019-03-26T16:48+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Optimizing Capacity-Heterogeneous Unstructured P2P Networks for Random-Walk Traffic</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chandan</forename><surname>Reddy</surname></persName>
							<email>chandanr@cs.tamu.edu</email>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science and Engineering</orgName>
								<orgName type="institution">Texas A&amp;M University College Station</orgName>
								<address>
									<postCode>77843</postCode>
									<region>TX</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Derek</forename><surname>Leonard</surname></persName>
							<email>dleonard@cs.tamu.edu</email>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science and Engineering</orgName>
								<orgName type="institution">Texas A&amp;M University College Station</orgName>
								<address>
									<postCode>77843</postCode>
									<region>TX</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dmitri</forename><surname>Loguinov</surname></persName>
							<email>dmitri@cs.tamu.edu</email>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science and Engineering</orgName>
								<orgName type="institution">Texas A&amp;M University College Station</orgName>
								<address>
									<postCode>77843</postCode>
									<region>TX</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Optimizing Capacity-Heterogeneous Unstructured P2P Networks for Random-Walk Traffic</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Existing algorithms for utilizing high-capacity nodes in heterogeneous P2P systems (e.g., [4], [13], [20]) often require unrealistically large node degree and high maintenance overhead in P2P networks with highly diverse node capacities and high churn. In this paper, we propose an unstructured P2P system that addresses these issues. We first prove that the overall throughput of search queries in a heterogeneous network is maximized if and only if traffic load through each node is proportional to its capacity. We then propose a system that achieves this traffic distribution by biasing search walks using the Metropolis-Hastings algorithm [5], [12] without requiring any special underlying topology. We finish the paper by comparing our method with Gia [4], where we find in simulation that the former outperforms the latter under all studied conditions, two novel saturation metrics introduced in this paper, and such end-to-end parameters as query success rate, latency, and query-hits.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Recent measurement studies (e.g., <ref type="bibr" target="#b14">[15]</ref>) show that P2P overlays contain nodes of varying capacity, which is a general term describing the ability of each user to router traffic, store object replicas, and answer queries. If a P2P system is not capacity-aware, slow nodes may become overwhelmed by messages even when many high-capacity peers in the network are still under-utilized. Therefore, node heterogeneity plays a key role in the design and future success of unstructured P2P systems. In this paper, we propose a set of metrics for measuring the throughput of heterogeneous P2P networks under random-walk traffic, create algorithms for maximizing search and replication ability of peers, and evaluate their performance in simulations. We start with basic definitions and assumptions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.1">Assumptions</head><p>In this paper, we assume a general unstructured P2P network that utilizes random walks (as opposed to flooding <ref type="bibr" target="#b5">[6]</ref>, <ref type="bibr" target="#b21">[22]</ref> or some hybrid methods <ref type="bibr" target="#b2">[3]</ref>, <ref type="bibr" target="#b22">[23]</ref>) for finding neighbors, searching for content, and replicating existing file pointers. The reason for using random walks is their ability to achieve arbitrary stationary distributions (see below) across existing nodes in the system and clear bounds on overhead. The capacity C i of user i determines its ability to process incoming messages, where excess traffic is backlogged at each user in some infinite queue. Also assume that joining users, as well as peers seeking new neighbors, perform so-called build walks with TTL k b ≥ 2 and select peers at the end of these walks as their neighbors. Note that the transition probability of these random walks influences the topology of the resulting overlay.</p><p>Once the graph is built, search walks are then used for discovering the desired content. Nodes looking for certain files start several random walks with TTL k s ≥ 2 and examine the content of each peer through which these walks pass. This query is called successful if any of the search walks started by a node passes through at least one user that shares the desired file or knows which peer does. The number of found users holding the file is called query-hits, which determines the download's ability to be parallelized and its robustness against failure.</p><p>To increase query success rates and achieve redundancy, nodes replicate pointers to their shared files to other peers, as long as the number of replicas stored at each node i does not exceed its capacity C i . When publishing their content into the system, nodes start a replication walk with TTL k r ≥ 2 and select one or more nodes along the walk to hold pointers to all of their content. After replication, any query for this content can also be answered by one of its replicas thereby improving the query success rate of the P2P system.</p><p>A well-designed P2P system should possess build, search, and replication components that guarantee a high network-wide throughput under load and achieve good performance using such end-to-end parameters as query success rates, query-hits, and latency to find the first result. Next, we discuss the challenges involved in designing these three components and then outline our proposed system to address these issues.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.2">Challenges</head><p>One direction in constructing heterogeneous P2P systems <ref type="bibr" target="#b12">[13]</ref>, <ref type="bibr" target="#b19">[20]</ref> is to ensure that node degree d i is linearly proportional to capacity C i . However, in real networks, node capacities are extremely diverse <ref type="bibr" target="#b14">[15]</ref>, which means that this linear dependence often produces nodes with very large degree. Such high degree may not be feasible in practice due to the high overhead involved in maintaining neighbor connections, the large number of failed links each time a high-capacity node departs the system, and the difficulty in maintaining d i ∼ C i under churn. Another direction <ref type="bibr" target="#b3">[4]</ref>, <ref type="bibr" target="#b19">[20]</ref> is to continuously perform dynamic topology adaptation, which involves nodes constantly replacing their existing neighbors with better ones so as to satisfy some performance objective. In P2P networks with heavy-tailed lifetimes <ref type="bibr" target="#b20">[21]</ref> where the majority of nodes fail quickly, these systems almost constantly remain in suboptimal states, which causes enormous traffic overhead and leads to lower performance since the system never reaches the desired (i.e., stable) state.</p><p>For a P2P system to function properly, it is highly desirable that it also not be congested by non-topology-related traffic, which primarily consists of search and replication walks. To properly load high-capacity nodes, existing search methods heavily rely on special overlay properties (e.g., d i ∼ C i or underlying adaptation algorithms); however, more fundamental questions of whether it is possible to construct a well-behaving system that does not depend on a specific topology, whether it can function regardless of churn, and what search algorithm achieves optimal throughput have not been explored before. Since search algorithms typically visit higher-capacity nodes more often, it makes sense to replicate content to those nodes with a higher probability. However, existing schemes such as 1-hop replication <ref type="bibr" target="#b3">[4]</ref>, in which replicas are stored on immediate neighbors, again rely on the stationary properties of the overlay topology, which are not easily achievable under churn. Furthermore, as there is no well-known correlation between file popularity and the capacity of neighbors of the user sharing the file, 1-hop replication is biased against peers with low degree and/or low-capacity neighbors.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.3">Our Contributions</head><p>We start by defining metrics for assessing the overhead and maximum throughput of a given topology-construction algorithm. To quantify the amount of traffic necessary to maintain a given overlay, we introduce a metric we call Build Saturation Point (BSP) as the maximum node arrival/departure rate µ for which the average queue length E[Q] in the system in some time-interval <ref type="bibr">[0, t]</ref> is no larger than c seconds, where c is a constant. Networks with higher BSP experience less overhead due to churn and can thus retain more spare capacity for other types of traffic (e.g., queries and replication). Our second metric, which we call Search Saturation Point (SSP), quantifies the overlay's capacity for sustaining random walks and is defined as the maximum rate at which walks of a certain TTL can be completed in the overlay. Higher SSP allows more queries to be answered and more objects replicated per time unit.</p><p>We next focus on defining a network that achieving optimal SSP and then building a decentralized approximation to it. For a given number of users n, set of capacities {C 1 , . . . , C n }, fixed average degree d, and random walk length k, we define a network N with a search algorithm S to be throughput-optimal if pair (N , S) achieves the maximum possible SSP equal to i C i /k. We prove that this optimality can be realized if the stationary probability of random walks visiting a node i is simply</p><formula xml:id="formula_0">π i = C i n j=1 C j ,<label>(1)</label></formula><p>which means that each node must be loaded proportionally to its capacity. We should note here that when all nodes in the network are congested, further increase in query rate actually decreases the completion rate of random walks and hurts performance, even though the rate at which individual messages are processed remains constant.</p><p>We then provide a framework we call CapacityProportional Metropolis-Hastings (CPMH) for achieving (1). CPMH applies the Metropolis-Hastings algorithm <ref type="bibr" target="#b4">[5]</ref>, <ref type="bibr" target="#b11">[12]</ref>, a Markov chain based sampling method, to calculate the transition probability of random walks. CPMH does not impose additional restrictions on the overlay topology to achieve capacity-proportionality. To illustrate this, we apply CPMH on top of various topologies (such as BA <ref type="bibr" target="#b1">[2]</ref> and Gnutella <ref type="bibr" target="#b10">[11]</ref>) and show the convergence of random walks to the target stationary distribution given by (1).</p><p>We then build a heterogeneous P2P system by designing its three components -topology, search, and replication. We first propose an overlay topology we call Capacity-Scalable Out-Degree (CSOD), in which the outdegree d out (i) of node i is given by</p><formula xml:id="formula_1">d out (i) = a + b log 10 C i ,<label>(2)</label></formula><p>where a, b are some constants. Observe that node degree in CSOD is sublinear in C i and hence the new approach is more scalable as C i → ∞ than the methods presented in <ref type="bibr" target="#b19">[20]</ref>. For searching, we use CPMH random walks and show that among the studied topologies, CSOD achieves the fastest convergence to the target stationary distribution π = (π 1 , . . . , π n ). We call the resulting combination CSOD-CPMH and use it throughout the paper. To address the drawbacks of existing replication schemes such as 1-hop replication, we propose a method we call CPMHreplication, which uses CPMH walks for replicating shared content and places greater responsibility on higher-capacity nodes without requiring any special overlay properties. We finally perform simulation-based evaluation of the proposed CSOD-CPMH system and compare its performance with that of Gia. Simulations show that CSOD-CPMH typically achieves four times higher SSP than Gia and close to 100 times higher BSP. In a static network with CPMH-replication, CSOD-CPMH achieves 15% higher query success rates, ten times smaller query latencies, and twice the number of query-hits when compared to Gia. We also evaluate these networks under churn by simulating Poisson node arrivals with Pareto lifetimes and find that CSOD-CPMH obtains 20% higher query success rates at half the latency when compared to Gia.</p><p>Overall, CPMH achieves close-to-optimal traffic distribution, high SSP/BSP, and good end-to-end performance without requiring any special overlay topology. This property enables incremental deployment of the proposed P2P components on existing networks such as Gnutella.</p><p>The rest of the paper is organized as follows. In Section 2, we discuss related work. In Section 3, we establish optimality of capacity-proportional networks and in Section 4, we describe the CPMH framework and build a capacityproportional system using it. In Section 5, we provide simulation results and in Section 6 conclude the paper.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Related Work</head><p>Many random walk techniques <ref type="bibr" target="#b0">[1]</ref>, <ref type="bibr" target="#b7">[8]</ref>, <ref type="bibr" target="#b8">[9]</ref>, <ref type="bibr" target="#b13">[14]</ref>, <ref type="bibr" target="#b17">[18]</ref> have been proposed to reduce the overhead of flooding in unstructured P2P systems like Gnutella <ref type="bibr" target="#b10">[11]</ref>. Among the approaches that explicitly take into account heterogeneous capacity of end-users, Gia <ref type="bibr" target="#b3">[4]</ref> is one prominent example of an unstructured P2P network in which nodes seek neighbors that match their own capacity in a process called dynamic topology adaptation, which involves replacing existing neighbors with more suitable options based on their capacity and degree. The rate of adaptation of the nodes is controlled by their satisfaction level, which indicates whether their neighbors have enough capacity to handle the arriving traffic.</p><p>Vishnumurthy et al. <ref type="bibr" target="#b19">[20]</ref> discuss several build and search walk strategies for heterogeneous networks. In these methods, nodes maintain their out-degree d out (i) linearly proportional to their capacity C i and then bias build walks to achieve in-degree d in (i) = d out (i). Kwong et al. <ref type="bibr" target="#b12">[13]</ref> propose a protocol for constructing heterogeneous P2P networks, where a node joining the network starts random walks to preferably connect to nodes with high capacity per neighbor. In this system, the stationary probability of build walks is given by</p><formula xml:id="formula_2">π i = C i /d i n j=1 C j /d j ,</formula><p>where n is the number of nodes in the network. The transition probability of these walks is calculated using the Metropolis-Hastings algorithm <ref type="bibr" target="#b11">[12]</ref>. Additional prior work <ref type="bibr" target="#b6">[7]</ref>, <ref type="bibr" target="#b16">[17]</ref> on P2P networks employs the Metropolis-Hastings algorithm, but it addresses entirely different problems related to unbiased node/data sampling. Among the existing literature, Gia <ref type="bibr" target="#b3">[4]</ref> is the only complete system that provides topology construction, search algorithms, and replication strategies. Therefore, during evaluation, we compare our system only with Gia.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Optimal Network</head><p>In this section, we define optimality of a P2P network under random-walk traffic and derive the corresponding stationary distribution.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Basics and Assumptions</head><p>The P2P systems considered in this paper use random walks for key overlay operations such as topology construction, search, and content replication. As a result, a major part of the overlay traffic is due to random walks, whose distribution across online users determines the volume of messages that can be handled by a P2P system and thus its throughput. We define a network to be throughput-optimal if it achieves the maximum rate of completion of random walks for a given average degree d of the system and nodecapacity distribution {C 1 , . . . , C n }.</p><p>As before, the capacity C i of a node i is the maximum rate at which it can handle incoming messages, where queuing at each node is assumed with infinite buffers. Observe that the traffic distribution among nodes in the network can be controlled by the stationary probability π of random walks. If T is the total traffic rate in the network, then the average rate of incoming messages at node i</p><formula xml:id="formula_3">T i = π i T,<label>(3)</label></formula><p>where π i is the stationary probability for the walks to visit node i. Intuitively, to achieve maximum completion of random walks in the network, the traffic distribution among nodes should be proportional to their capacity such that all nodes are loaded to their maximum, but none are yet congested. In this section, we provide a simple proof for this. Consider a connected, undirected graph G with n nodes. Walks are started from a node i at rate λ i and continue for k hops. Let Λ = λ i be the total input rate in the network and let M be the completion rate of these walks. At a node i, if T i &gt; C i then messages are added to the node's input queue, which is processed by the node at rate C i . By its definition, a throughput-optimal network achieves</p><formula xml:id="formula_4">M = Λ = n i=1 C i /k</formula><p>, which is the absolute maximum possible for a given n and capacity distribution {C i } (i.e., all nodes are fully utilized and every 1/k-th message is completing some random walk). Our first result links traffic volume at each node with stationary distributions of random walks.</p><p>Lemma 1 Assume that random walks are started at each node with rate λ i and proceed according to a positive irreducible Markov chain with transition matrix P . If k is larger than the mixing time of P , the following holds</p><formula xml:id="formula_5">T i = π i kΛ,<label>(4)</label></formula><p>where π i is the unique solution to π = πP .</p><p>Recalling that random walks on an undirected graph form a positive irreducible Markov chain, the next result follows.</p><p>Theorem 1 Assuming k is sufficiently large, the optimal stationary distribution of random walks is</p><formula xml:id="formula_6">π i = C i n j=1 C j .<label>(5)</label></formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Search Saturation Point</head><p>To evaluate an overlay network in terms of its ability to route traffic, one requires a metric that is independent of the specific file popularity and replication strategy. For this purpose, we propose a new metric, which we call Search Saturation Point (SSP), to express the capacity of an overlay topology in supporting random walks.</p><p>Consider an overlay graph G with n nodes of capacity {C 1 , . . . , C n } and average node degree d. In this network, random walks of length k are started from randomly selected nodes. As earlier in this section, let Λ be the rate at which these walks are started and M (Λ) be the completion rate of the walks. In the beginning, as Λ increases, M (Λ) also increases until a certain point where the network is saturated. Beyond this point, any increase in Λ results in additional message backlog at nodes and thus decreases M (Λ). The curve M (Λ) has a unique global maximum, which we define as the SSP of graph G SSP = max</p><formula xml:id="formula_7">Λ M (Λ).<label>(6)</label></formula><p>If a P2P system uses search walks, then the SSP signifies the query completion rate that can be achieved in the network. Unlike graph properties such as expansion (i.e., second eigenvalue λ 2 ), which characterize G's topological properties, the SSP is a more direct measure of the overlay's effect on queries which are run over it. During evaluation, we perform simulations to obtain the SSP of various P2P networks.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Centralized Construction</head><p>While comparing different overlays using SSP, one needs a standardized upper-bound on the achieved performance. For this purpose, we next create an optimal network (OPT), which has the maximum SSP for a given capacity distribution {C i }, and use it in all comparisons later in the paper.</p><p>To obtain the optimal stationary distribution (5), we first construct a network in which d i = C i and then run unbiased random walks on this network, which gives</p><formula xml:id="formula_8">π i = d i n j=1 d j = C i n j=1 C j .<label>(7)</label></formula><p>Consider Algorithm 1, which first generates node capacities C from a given distribution {C i }. For each node i, the goal is to attempt selecting d i = C i neighbors from the available neighbor slots AS. While choosing neighbors of i, duplicate edges and self-loops are prevented by not considering i (Line 8) or its existing neighbors (Lines 6, 13) as available for connectivity. Using this AS vector, a random neighbor r is selected in Line 11 with probability</p><formula xml:id="formula_9">p(r) = AS[r] n j=1 AS[j]</formula><p>, Algorithm 1 Create Optimal topology 1: C ← capacities of n nodes. <ref type="bibr">2:</ref> for each node i do 3:</p><formula xml:id="formula_10">d i ← C[i] Required degree 4:</formula><p>AS ← C Available neighbor slots <ref type="bibr">5:</ref> for each neighbor j of node i do </p><formula xml:id="formula_11">tas ← tas − C[r] 15: C[r] ← C[r] − 1 Update unsatisfied degree 16: C[i] ← C[i] − 1 17: d i ← d i − 1 18:</formula><p>end while <ref type="bibr" target="#b18">19</ref>  <ref type="bibr" target="#b9">[10]</ref>, <ref type="bibr" target="#b18">[19]</ref>. But unlike these methods, Algorithm 1 is faster and simpler due to its relaxed constraints. This algorithm can also produce graphs with a degree distribution close to the required distribution even when the exact target degree-set {C 1 , . . . , C n } is infeasible.</p><p>We next apply Algorithm 1 to construct an OPT P2P network with n = 10, 000 nodes with the capacity distribution shown in <ref type="table">Table 1</ref>, which was obtained by prior measurements <ref type="bibr" target="#b14">[15]</ref> of Gnutella. The target degree of nodes in this setup is twice their capacity, i.e., d i = 2C i . Observe in <ref type="figure" target="#fig_0">Figure 1(a)</ref> that the expected degree E[d i ] of each node indeed equals 2C i and in <ref type="figure" target="#fig_0">Figure 1</ref>(b) that traffic volume achieved by unbiased random walks is, as expected, capacity-proportional.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Distributed Capacity Proportionality</head><p>The previous section shows that (5) can be achieved using Algorithm 1; however, it assumes centralized construction and static node conditions (i.e., no churn). This sec- tion provides a framework for implementing throughputoptimality using distributed operation and under dynamic node arrival/departure.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">CPMH Framework</head><p>The stationary distribution π of random walks depends on their transition probability matrix P and the overlay graph G on which they are performed. Therefore, to achieve a particular π, one can construct overlays with special properties, e.g., d i = C i , and then run unbiased random walks on these networks. However, in P2P systems with churn, maintaining these special overlays is not just challenging, but sometimes simply impossible. As a result, it is desirable to design transition matrix P so as to achieve the target π without imposing any restrictions on topology G. In this direction, we use the Metropolis-Hastings algorithm, a Markov-chain sampling method <ref type="bibr" target="#b4">[5]</ref>, <ref type="bibr" target="#b11">[12]</ref>, to find P that achieves the optimal π. We call this technique CapacityProportional Metropolis-Hastings (CPMH) and describe it next in more detail.</p><p>In CPMH, the next transition of a random walk from a node i is found in two steps. Define N (i) to be the set of i's neighbors. First, we choose one neighbor among the users in N (i) to which the walk should transition. The probability q(i, j) to select j ∈ N (i) is given by</p><formula xml:id="formula_12">q(i, j) = C j / x∈N (i) C x j ∈ N (i) 0 j / ∈ N (i) .<label>(8)</label></formula><p>Then, the random walk transitions to the above selected node j with probability α(i, j) or stays at node i with probability 1 − α(i, j), where the acceptance probability α is given by</p><formula xml:id="formula_13">α(i, j) = min 1, x∈N (i) C x x∈N (j) C x j ∈ N (i) 0 j / ∈ N (i) .<label>(9)</label></formula><p>Note that in the Metropolis-Hastings algorithm, functions q(.) and α(.) are given in some general form, while the above two equations are customized to our particular needs. While several choices of q(.) are possible, we found that (8) performed better in terms of achieving the target distribution π.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1.1">Self Transitions</head><p>Observe that in CPMH, self transitions at node i occur when a selected jump i → j is rejected, which happens with probability 1 − α(i, j). From (9), notice that the acceptance probability α(i, j) is low for transitions from a high-capacity node i to a low-capacity node j. Therefore, when a random walk hits a high-capacity node in its path, it is likely to undergo multiple self-transitions and become "stuck" there. In real networks, however, these self-loops are just virtual hops and do not count toward network traffic. Three intuitive observations follow from this: 1) the TTL of CPMH walks is implicitly adapted based on the capacity of nodes visited and is generally shorter when passing through high-capacity nodes; 2) if the replication scheme ensures that high-capacity nodes in the network share more resources, then walks passing through these users may need to visit fewer peers to get the required number of query hits; and 3) random walks are much more likely to terminate at high-capacity nodes, which ensures that search, replication, and neighbor selection favors users with sufficient resources and desired content.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Topology Construction</head><p>In this section, we describe the overlay topology of our proposed system. In this network, a new node i joining the system will start d out (i) build walks for selecting its outneighbors among existing peers. The desired out-degree d out (i) of node i is given by</p><formula xml:id="formula_14">d out (i) = a + b log 10 C i ,<label>(10)</label></formula><p>where a and b are constants. During simulations, we use a = 4 and b = 15 to achieve an average degree equal to that of other networks evaluated in this paper. In (10), observe that the out-degree of a node is not linearly proportional to its capacity (as in prior approaches) and thus scales well in networks with an extremely wide range of node capacities. We call this approach Capacity Scalable Out-Degree (CSOD). It should be noted that CSOD uses unbiased build walks; however, CPMH walks can also be used for the construction of overlays if the system can tolerate in-degree linearly proportional to C i . In certain cases, however, such high degree may not be feasible in practice due to the overhead involved in maintaining a large set of neighbors. Since we generally assume that the volume of build traffic is insignificant compared to that of search traffic, the use of unbiased build walks has little effect on capacity-proportionality of combined traffic at each peer. <ref type="figure" target="#fig_1">Figure 2</ref>(a) shows the average node degree in a 10, 000-node CSOD network with the capacity distribution given by <ref type="table">Table 1</ref>. Observe in the figure that node degree scales sublinearly (i.e., logarithmically) as capacity increases. At the same time, <ref type="figure" target="#fig_1">Figure 2(b)</ref> shows that the average volume of CPMH traffic (TTL = 1024 hops) at each node is in fact capacity-proportional. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2.1">CPMH Walk Convergence</head><p>In general, CPMH does not require any special underlying topology (e.g., CSOD) for achieving capacityproportionality of search traffic. To illustrate this, we show the convergence of CPMH walks to the optimal stationary distribution π using two additional topologies -BA <ref type="bibr" target="#b1">[2]</ref> and Gnutella <ref type="bibr" target="#b10">[11]</ref> -that do not consider node capacity during construction of the overlay.</p><p>To measure convergence of random-walk distributions, we use the difference metric from <ref type="bibr" target="#b23">[24]</ref>. Assuming T (C i ) is the average amount of traffic passing through all nodes of capacity C i , then the convergence error of CPMH walks is given by</p><formula xml:id="formula_15">φ = 1 2 i T (C i ) i T (C i ) − C i i C i .<label>(11)</label></formula><p>On the evaluated topologies, CPMH walks are started at random nodes and at a constant rate of 50 new walks/s. Convergence is evaluated by computing φ after 1000 seconds of simulation time. The TTL of these walks is increased until φ becomes less than or equal to 0.01, which allows us to compute the smallest TTL that allows the empirical distribution π to approximate the desired one with sufficient accuracy. <ref type="table" target="#tab_3">Table 2</ref> shows the minimum TTL required to achieve convergence of CPMH walks on different topologies. Observe that due to its capacity-aware nature, CSOD achieves dramatically faster convergence than the other two graphs. While CPMH can indeed be applied incrementally over any underlying overlay structure, convergence time of random walks in such cases may be longer than in CSOD.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Search Methodology</head><p>In the proposed system, CPMH walks are used for propagating search requests. Specifically, a node i looking for a file, starts a search walk of TTL t s . When this walk passes through a node containing the required file, a query-hit message is sent back to i. Search walks continue until their T T L reduces to 0 or the maximum number of query-hits, specified by the query-initiator i, is reached. For a query to succeed, it should result in at least one query-hit message.  As CPMH walks are used for query propagation, the search load in the proposed system is capacity-proportional. To indicate the topology and the type of search walks used, we call the proposed system CSOD-CPMH.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4">Replication Strategy</head><p>In a P2P network, file replication involves storing replicas of shared files in other nodes. Replication is used to improve the query success rate and reduce the query latency by making pointers to shared files available in the paths of query walks. One-hop <ref type="bibr" target="#b3">[4]</ref> and random-walk replication <ref type="bibr" target="#b7">[8]</ref>, <ref type="bibr" target="#b15">[16]</ref> are the two most common schemes used in unstructured P2P networks. To ensure a capacity-proportional distribution of replication load in the network, we propose to use the random-walk replication scheme with CPMH walks and call this strategy CPMH replication. In this scheme, to achieve a replication factor r, every node starts a CPMH walk with TTL k r . This walk first transitions for h f hops and then starts replicating at every unique node visited until the required replication factor r is achieved or T T L reduces to 0. The value of h f depends on the mixing time of random walks on the network.</p><p>Unlike 1-hop replication, which requires capacityproportional degree distribution to achieve the same effect as our approach, CPMH-replication works with any underlying topology and maintains the desired replication distribution in dynamic networks under churn, while requiring almost no additional overhead during construction of the graph. In addition, CPMH-replication does not exhibit bias against files shared by low-capacity nodes, which is a major limitation of 1-hop replication as there is no wellknown correlation between file popularity and capacity of the nodes sharing them. CPMH-replication overcomes this problem by ensuring probabilistically equal visibility of files shared by all nodes in the network, irrespective of their capacity.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Evaluation</head><p>In P2P systems that use random walks for searching for content in the network, user-perceived metrics (e.g., query success rate) can be improved in two stages -1) building an overlay topology that supports high random-walk completion rates and 2) designing a suitable replication scheme that ensures that shared files are present with high probability in the paths of these random walks. Along these lines, we follow a two-step evaluation process, where we first evaluate how well each P2P topology can support search requests and then analyze end-to-end metrics to measure the Throughout this section, we perform simulation-based evaluation of the proposed CSOD-CPMH network and compare it with Gia-biased, OPT-unbiased, and CSODbiased systems, where the naming convention consists of {topology}-{search walk}. For example, the Gia-biased system uses Gia overlay rules (i.e., dynamic topology adaptation <ref type="bibr" target="#b3">[4]</ref>) and capacity-biased search walks whose transition probability is given by</p><formula xml:id="formula_16">p(i, j) = C j / x∈N (i) C x j ∈ N (i) 0 o.w. .<label>(12)</label></formula><p>The OPT-unbiased system uses the optimal topology constructed using Algorithm 1, and unbiased walks for searching. As this system achieves the optimal stationary distribution π, it is used as an upper bound on the SSP while comparing different P2P systems. Finally, CSOD-biased is introduced to evaluate the need for CPMH search walks in the proposed CSOD-CPMH system.</p><p>It should be noted that message flow-control is an additional mechanism for preventing backlog in the system. In this paper, however, we are only focused on the pure properties of topology, search, and replication mechanisms, while flow control is an orthogonal approach that can be used to enhance all studied methods and will be considered in future work.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Topology Evaluation</head><p>We start by calculating the Search Saturation Point (SSP), as defined in Section 3.2, of different overlay topologies. In these simulations, we use search walks with k s = 1024 on networks with 10, 000 nodes and capacity distribution in <ref type="table">Table 1</ref>. To find the SSP of a network, we perform a binary search by varying the query input rate Λ and measuring the corresponding completion rate M (Λ). For each Λ, the network is allowed to stabilize before calculating the corresponding M (Λ). Here, a network is said to be stable if for 3 successive 100-second intervals, the rate of completion M is within 5% of the previous completion rate. <ref type="figure" target="#fig_2">Figure 3(a)</ref> shows this stabilization process for a single Λ in the OPT-unbiased system and <ref type="figure" target="#fig_2">Figure 3(b)</ref> plots the cor-  responding curve M (Λ) whose globally unique maximum is 33.05 walks/s, which is the SSP of this system. <ref type="table" target="#tab_5">Table 3</ref> compares the SSP of the four evaluated overlays. Observe that OPT-unbiased has the highest SSP because it achieves capacity-proportional traffic with the highest accuracy. The proposed approach CSOD-CPMH has a slightly lower SSP due to the finite TTL and distributed construction; however, its throughput is much higher than that of the other two methods. Gia's topology adaptation ensures that high-capacity nodes have high degree, but it does not aim to achieve perfect capacity-proportionality, which results in reduced overall throughput in the system. CSOD-biased also performs poorly because it uses capacity-biased search walks, which again do not result in capacity-proportional traffic. This shows that CSOD by itself is insufficient for approximating the ideal system OPT and that it must be paired with CPMH random walks.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Replication Schemes</head><p>To evaluate CPMH-replication, we compared it with 1-hop and no replication. The replication factor for 1-hop replication is r = E[d i ] = 20 (i.e., the average degree). To achieve this replication factor during CPMH replication, a node starts a replication walk with initial forwarding length h f = 50 and TTL k r = 200. To capture the replication ability of a node, we limit the number of replicas at each node i to its capacity C i .</p><p>We next perform simulations to study how each of the four combinations of topology/search mechanisms handle replication. Each shared file j has popularity P j , which is the fraction of users that hold it. Variables {P j } are drawn from a Pareto distribution with shape parameter α = 3 and expected popularity E[P j ] = 0.001. Queries for file j are started with frequency proportional to P j and continue for 200 hops. <ref type="figure">Figure 4</ref> shows the effect of replication on query success rates in various P2P networks. Observe in the figure that success rates improve from 20% to over 90% from replication and that CPMH-replication is more effective than 1-hop in all cases except OPT-unbiased where the two are identical due to the topological properties of the underlying graph.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3">End-to-End Metrics: Static Network</head><p>We now apply these replication schemes to various static networks (i.e., no churn) and compare them using three endto-end metrics -success rates, latency, and query hits. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3.1">Query Success Rate</head><p>Recall that a query is said to be successful if it results in at least one query-hit. <ref type="figure">Figure 5</ref> shows success rates of different networks under three types of replication schemes. Observe that OPT-unbiased, which has a centralized construction, achieves the highest query success rate in all three replication scenarios and acts as an upper bound for comparison. CSOD-CPMH achieves close-to-optimal query success rates (i.e., over 99%) under CPMH-replication, while performing slightly worse under 1-hop and no replication. Due to capacity-proportionality achieved by CSOD-CPMH, it balances the load in the network and maintains a constant success rate even at higher query rates, which cannot be said about Gia-biased or CSOD-biased whose rates plummet as Λ increases. In fact, CSOD-CPMH is 15 − 25% more successful than Gia-biased for Λ = 200 queries/sec.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3.2">Query Latency</head><p>Query latency is the delay to obtain the first result of a query. It shows the responsiveness of the system to the user, with lower latency indicating better performance. In these simulations, we measure the average latency of all successful queries at a given input rate Λ. <ref type="figure">Figure 6</ref> compares the same four networks and three replication schemes using query latency in seconds. Observe that CSOD-CPMH not only has the lowest latency, but also that its delay to the first result is over 10 times smaller than in Gia.</p><p>Interestingly, the OPT-unbiased network has a higher latency than CSOD-CPMH under these conditions. This can be explained by the fact that OPT-unbiased uses unbiased query walks that visit low-capacity nodes earlier in their path compared to CPMH walks. While OPT is designed for maximizing query completion rates (i.e., SSP), it is not guaranteed to have the minimum query latency.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3.3">Query Hits</head><p>Total number of query-hits returned for all queries started in a network can also be used as an end-to-end metric to compare different P2P systems. In these simulations, there is no limit on the number of hits per query. <ref type="figure" target="#fig_4">Fig- ure 7</ref> shows that OPT-unbiased achieves the highest number of query-hits followed by CSOD-CPMH, which gets up to twice the number of hits compared to Gia-biased. This shows that more files can be discovered in a P2P system if the distribution of replicated files and the query traffic is capacity-proportional, especially at high search loads.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.4">End-to-End Metrics: Dynamic Network</head><p>Node churn is a common characteristic of existing P2P networks in which peers depart and rejoin at a later time. In this section, we first describe our churn model and then define a metric that quantifies the overhead incurred by P2P overlays due to churn. We finally compare the various networks under churn, both in terms of their overhead and endto-end metrics used in the previous subsection.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.4.1">Churn Model</head><p>Many measurement studies (e.g., <ref type="bibr" target="#b20">[21]</ref>) have shown that P2P users commonly exhibit heavy-tailed lifetimes. In our simulations, we initially construct an overlay with 10, 000 nodes and then start churn in this network. During the churn is the mean user lifetime, then the departure rate of a node is 1/E <ref type="bibr">[L]</ref> and that of a system with n nodes is µ = n/E <ref type="bibr">[L]</ref>. <ref type="bibr">By varying E[L]</ref>, one can achieve different arrival and departure rates in the network.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.4.2">Build Saturation Point</head><p>Under churn, incoming nodes seek new neighbors, while existing peers in the network constantly seek to replace their departed neighbors. Therefore, increase in the churn rate µ increases network traffic, which eventually results in backlog and increased queue size at each node. Let E[Q] be the average queue length across all live nodes in the network during interval <ref type="bibr">[0, t]</ref>, where t is some constant. To quantify the capacity of a P2P topology in handling churn, we define a metric we call Build Saturation Point (BSP) as the maximum µ for which E[Q] ≤ c for some constant c.</p><p>In simulations below, we use t = 1000 seconds and backlog threshold c = 1 second. In <ref type="figure" target="#fig_5">Figure 9</ref>, observe that the BSP of Gia and CSOD topologies differ by a factor of 100, where higher BSP of CSOD indicates dramatically lower build traffic and much higher rates of churn allowed by the proposed system. This result can be explained by the fact that Gia uses complex rules for satisfying neighbor requests and constant topology adaptation, which under churn often results in "unsatisfied" nodes starting many build walks to get a sufficient number of neighbors to maintain their connectivity. This in turn snow-balls into a large volume of build traffic and prevents Gia from reaching its ideal stable state.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.4.3">End-to-end metrics</head><p>In our next simulation, we populate the system with 10, 000 nodes and then start churn. Waiting for 1, 000 seconds for the system to reach its steady-state, we start issuing queries at rate Λ and run the simulation for 500 additional seconds. <ref type="figure" target="#fig_6">Figure 8</ref> compares the same four P2P networks under churn using our end-to-end query metrics. Observe that CSOD-CPMH beats Gia-biased in all three metrics, achieving 20% higher query success rates at half the latency. CSOD-CPMH also produces significantly more query-hits than Gia-biased, which shows CSOD-CPMH's exceptional ability to handle churn without performing continuous topology adaptation as in Gia.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Conclusion</head><p>We studied the question of designing P2P systems to handle high loads of random-walk traffic. We proved optimality of capacity-proportional distributions of random walks and provided a framework for achieving them without requiring construction of a special overlay topology. Using this framework, we built a candidate system CSOD-CPMH and showed in simulations that it had higher SSP/BSP saturation points and end-to-end performance than Gia.</p><p>Future work involves implementing CPMH and its deployment in real networks.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 . Capacity-proportionality in OPT.</head><label>1</label><figDesc>Figure 1. Capacity-proportionality in OPT.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 . CPMH walks on the CSOD topology.</head><label>2</label><figDesc>Figure 2. CPMH walks on the CSOD topology.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 3 .</head><label>3</label><figDesc>Figure 3. SSP of OPT-unbiased.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 4 . Effect of file replication on query success rateFigure 5 .</head><label>45</label><figDesc>Figure 4. Effect of file replication on query success rate.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 7 .</head><label>7</label><figDesc>Figure 6. Query latency.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 9 .</head><label>9</label><figDesc>Figure 9. BSP of Gia and CSOD.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 8 .</head><label>8</label><figDesc>Figure 8. Effect of Churn.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1" validated="false"><head>i . For generating graphs with exact degree distributions d i = C i one can use randomized variations of the Havel-Hakimi algorithm</head><label></label><figDesc></figDesc><table>: end for 

Capacity Fraction 
1 
0.65 
10 
0.3 
100 
0.049 
1000 
0.001 

Table 1. Capacity distribution of nodes. 

which ensures that the generated graph is random and the 
nodes requiring high-degree get sufficient neighbors. This 
step is repeated until no more available slots are left or the 
required degree d i is met. 
Graphs constructed using Algorithm 1 exhibit d i ≈ C </table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3" validated="false"><head>Table 2 . Convergence TTL for CPMH walks.</head><label>2</label><figDesc></figDesc><table></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_5" validated="false"><head>Table 3 . SSP of several overlay networks.</head><label>3</label><figDesc></figDesc><table></table></figure>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><forename type="middle">A</forename><surname>Adamic</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">M</forename><surname>Lukose</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">R</forename><surname>Puniyani</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><forename type="middle">A</forename><surname>Huberman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Physical Review E</title>
		<imprint>
			<biblScope unit="volume">64</biblScope>
			<biblScope unit="page" from="46135" to="46143" />
			<date type="published" when="2001-09" />
		</imprint>
	</monogr>
	<note>Search in power-law networks</note>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Emergence of scaling in random networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A.-L</forename><surname>Barabasi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Albert</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Science</title>
		<imprint>
			<biblScope unit="volume">286</biblScope>
			<biblScope unit="issue">5439</biblScope>
			<biblScope unit="page" from="509" to="512" />
			<date type="published" when="1999-10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">The case for a hybrid p2p search infrastructure</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">M H</forename><surname>Boon Thau</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ryan</forename><surname>Loo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Huebsch</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IPTPS</title>
		<imprint>
			<date type="published" when="2004-02" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Making gnutella-like p2p systems scalable</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Chawathe</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Ratnasamy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Breslau</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Lanham</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Shenker</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM SIGCOMM</title>
		<imprint>
			<date type="published" when="2003-08" />
			<biblScope unit="page" from="407" to="418" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Understanding the metropolishastings algorithm</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Chib</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Greenberg</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">The American Statistician</title>
		<imprint>
			<biblScope unit="volume">49</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="327" to="335" />
			<date type="published" when="1995-11" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Efficient search in unstructured peer-to-peer networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Cholvi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Felber</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Biersack</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Euro. Trans. on Telecommun</title>
		<imprint>
			<biblScope unit="volume">15</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="535" to="548" />
			<date type="published" when="2004-11" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Uniform data sampling from a peer-to-peer network</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Datta</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Kargupta</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE ICDCS</title>
		<imprint>
			<date type="published" when="2007-06" />
			<biblScope unit="volume">50</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Search with probabilistic guarantees in unstructured peer-to-peer networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">A</forename><surname>Ferreira</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">K</forename><surname>Ramanathan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Awan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Grama</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Jagannathan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE P2P</title>
		<imprint>
			<date type="published" when="2005-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Random walks in peer-to-peer networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Gkantsidis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Mihail</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Saberi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE INFOCOM</title>
		<imprint>
			<date type="published" when="2004-03" />
			<biblScope unit="page" from="120" to="130" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">The markov chain simulation method for generating connected power law random graphs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Gkantsidis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Mihail</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Zegura</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ALENEX</title>
		<imprint>
			<date type="published" when="2003-01" />
			<biblScope unit="page" from="16" to="25" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Gnutella</surname></persName>
		</author>
		<ptr target="http://www.gnutella.com/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Monte carlo sampling methods using markov chains and their applications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">K</forename><surname>Hastings</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Biometrika</title>
		<imprint>
			<biblScope unit="volume">57</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="97" to="109" />
			<date type="published" when="1970-04" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Building heterogeneous peer-to-peer networks: protocol and analysis</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K.-W</forename><surname>Kwong</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><forename type="middle">K</forename><surname>Tsang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE/ACM Trans. Networking</title>
		<imprint>
			<biblScope unit="volume">16</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="281" to="292" />
			<date type="published" when="2008-04" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Search and replication in unstructured peer-to-peer networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Q</forename><surname>Lv</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Cao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Cohen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Shenker</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Conference on Supercomputing</title>
		<imprint>
			<date type="published" when="2002-06" />
			<biblScope unit="page" from="84" to="95" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Analyzing the characteristics of napster and gnutella hosts</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Saroiu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">K</forename><surname>Gummadi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">D</forename><surname>Gribble</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Multimedia Systems</title>
		<imprint>
			<biblScope unit="volume">9</biblScope>
			<biblScope unit="page" from="170" to="184" />
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Percolation search in power law networks: Making unstructured peer-to-peer networks scalable</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Sarshar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">O</forename><surname>Boykin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><forename type="middle">P</forename><surname>Roychowdhury</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE P2P</title>
		<imprint>
			<date type="published" when="2004-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">On unbiased sampling for unstructured peer-to-peer networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Stutzbach</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Rejaie</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Duffield</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Sen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Willinger</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM IMC</title>
		<imprint>
			<date type="published" when="2006-04" />
			<biblScope unit="page" from="27" to="40" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Bubblestorm: resilient, probabilistic, and exhaustive peer-to-peer search</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">W</forename><surname>Terpstra</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Kangasharju</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Leng</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">P</forename><surname>Buchmann</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM SIGCOMM</title>
		<imprint>
			<date type="published" when="2007-08" />
			<biblScope unit="page" from="49" to="60" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Efficient and simple generation of random simple connected graphs with prescribed degree sequence</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Viger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Latapy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">COCOON</title>
		<imprint>
			<date type="published" when="2005-08" />
			<biblScope unit="page" from="440" to="449" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">On heterogeneous overlay construction and random node selection in unstructured p2p networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Vishnumurthy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Francis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE INFOCOM</title>
		<imprint>
			<date type="published" when="2006-04" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Residual-based measurement of peer and link lifetimes in gnutella networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Yao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Loguinov</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE INFOCOM</title>
		<imprint>
			<date type="published" when="2007-05" />
			<biblScope unit="page" from="391" to="399" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Improving search in peer-topeer networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Yang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Garcia-Molina</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE ICDCS</title>
		<imprint>
			<date type="published" when="2002-11" />
			<biblScope unit="page" from="5" to="14" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Gossip-based search selection in hybrid peer-to-peer networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Zaharia</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Keshav</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IPTPS</title>
		<imprint>
			<date type="published" when="2006-02" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">The convergenceguaranteed random walk and its applications in peer-to-peer networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Zhong</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Shen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Seiferas</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Computers</title>
		<imprint>
			<biblScope unit="volume">57</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="619" to="633" />
			<date type="published" when="2008-05" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
