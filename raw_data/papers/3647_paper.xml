<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2019-03-26T16:45+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Adding Capacity Points to a Wireless Mesh Network Using Local Search</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Joshua</forename><surname>Robinson</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mustafa</forename><surname>Uysal</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ram</forename><surname>Swaminathan</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Edward</forename><surname>Knightly</surname></persName>
						</author>
						<title level="a" type="main">Adding Capacity Points to a Wireless Mesh Network Using Local Search</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Wireless mesh network deployments are popular as a cost-effective means to provide broadband con-nectivity to large user populations. As the network usage grows, network planners need to evolve an existing mesh network to provide additional capacity. In this paper, we study the problem of adding new capacity points (e.g., gateway nodes) to an existing mesh network. We first present a new technique for calculating gateway-limited fair capacity as a function of the contention at each gateway. Then, we present two online gateway placement algorithms that use local search operations to maximize the capacity gain on an existing network. A key challenge is that each gateway&apos;s capacity depends on the locations of other gateways and cannot be known in advance of determining a gateway placement. We address this challenge with two placement algorithms with different approaches to estimating the unknown gateway capacities. Our first placement algorithm, MinHopCount, is adapted from a solution to the facility location problem. MinHopCount minimizes path lengths and iteratively estimates the wireless capacity of each gateway location. Our second algorithm, MinContention, is adapted from a solution to the uncapacitated k-median problem and minimizes average contention on mesh nodes, i.e. the number of links in contention range of a mesh node and the number of routes using each link. We show that our gateway placement algorithms outperform a greedy heuristic by up to 64% on realistic topologies. For an example topology, we study the set of all possible gateway placements and find that there is large capacity gain between near-optimal and optimal placements, but the near-optimal placements found by local search are similar in configuration to the optimal.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>I. INTRODUCTION</head><p>Multi-tier wireless mesh networks are being deployed in many cities in order to provide ubiquitous Internet access <ref type="bibr" target="#b4">[5]</ref>. A mesh network's directional links and gateway nodes that connect the wireless mesh with the wired Internet are critical capacity points as their location and quantity determines the maximum throughput supported by the network. Namely, the placement of these points determines the hop-length of the paths in the network, the amount of congestion, and the available bandwidth to and from the Internet. Prior work has shown how capacity scales asymptotically with the number of gateways and nodes <ref type="bibr" target="#b9">[10]</ref>, but does not consider how to choose gateway locations in specific topologies. Likewise, greedy heuristics <ref type="bibr" target="#b3">[4]</ref> and local search operations J. Robinson, and E. Knightly are with Rice University, Houston, TX (http://networks.rice.edu). M. Uysal and R. Swaminathan are with HP Labs, Palo Alto, CA. The research of Robinson and Knightly was supported by HP Labs and NSF grant CNS-0325971. <ref type="bibr" target="#b13">[14]</ref> have been developed for gateway placement, but neither incorporates wireless contention nor studies incremental deployment.</p><p>In this paper, we study the gateway placement problem and then present and evaluate two local search algorithms. The gateway placement problem is related to the facility location and k-median problems and is NP-hard. Consequently, we develop local search approximation algorithms in order to 1) provide the ability to apply local changes when incrementally upgrading a network without recomputing the full placement, and 2) provide polynomial time approximation schemes.</p><p>First, we propose an efficient technique to incorporate the effects of wireless contention and calculate the gateway-limited fair capacity of a wireless mesh network. While previous work provides a computational framework for capacity <ref type="bibr" target="#b6">[7]</ref>, we focus here on access networks without direct client-to-client communication, i.e., networks in which all traffic traverses the gateway. Thus, capacity points necessarily carry more traffic than other mesh nodes, and consequently we define gatewaylimited capacity in terms of the contention experienced at each gateway. Our calculations are suitable for local search where a large space of possible operations must be considered and, for optimization purposes, can be separated into two components: path lengths and contention.</p><p>We next present two local search-based gateway placement algorithms adapted from the facility location problem. A key challenge is that the contention at each gateway depends on the full routing matrix. Therefore, each gateway's capacity depends on the locations of other gateways and cannot be known in advance of determining other gateway placements. To address this challenge, our algorithms feature two different approaches to estimating the unknown gateway capacities. The first algorithm, termed MinHopCount, adapts a local search algorithm for the capacitated facility location problem <ref type="bibr" target="#b12">[13]</ref> and iteratively estimates the unknown wireless gateway capacities. The idea of local search is to carefully choose a set of gateways to close and open a set of new gateways subject to capacity and budget constraints in order to minimize the objective of interest, i.e. the average hop count. Lowering hop count generally (but not always) increases capacity and has the additional critical property of obeying the triangle inequality. The second placement algorithm, MinContention, adapts from a solution to the uncapacitated k-median facility location problem and minimizes the average contention for all mesh nodes with provable approximation ratio of 3 + 񮽙 <ref type="bibr" target="#b1">[2]</ref>, where the 񮽙 parameter determines accuracy and runtime. To minimize contention, we assign link weights equal to the amount of contention caused by each link, considering contention on all nodes instead of only gateways. Further, the link weight is the union of the set of nodes in contention range of either end of the link, which preserves the triangle inequality for swap()-based local search. This local search is similar to open/close except that a swap must open an equal number of gateways as it closes. The MinHopCount algorithm is more general and can handle gateways with non-uniform costs, whereas the MinContention algorithm has a builtin budget constraint, and therefore retains a provable constant-factor approximation ratio.</p><p>Lastly, we evaluate the performance of our algorithms in realistic topologies. We first validate that our capacity calculation techniques correctly rank placements, as compared to ranking placements based on measurement data from an operational urban mesh network. To compare our placement algorithms, we perform numerical simulations on the topologies of three currently deployed mesh networks: Technology For All (TFA), Chaska, and GoogleWiFi. 1 We find that our local search algorithms perform up to 64% better than a greedy algorithm and produce placements within 2% of the optimal placement found via exhaustive search. We also study the degree of similarity between gateway placements using a hopdistance metric that measures the amount of change needed to transform one gateway placement to the other. We find that the relative distance between the optimal solution and near-optimal solutions found by local search is small, which indicates the suitability of local operations.</p><p>The remainder of this paper is structured as follows. Section II introduces our mesh capacity calculation and formally defines the gateway placement problem. Section III presents the two local search algorithms and Section IV describes our evaluation of the placement algorithms. Section V discusses related work, and then Section VI concludes.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>II. ADDING CAPACITY POINTS</head><p>In this section, we first introduce a new technique for calculating the gateway-limited fair capacity of a mesh network. We then formulate the problem of upgrading the capacity of an existing mesh network. For ease of discussion, we refer to all capacity points as "gateways" whether they are a true wireline gateway or a wireless link that does not interfere with the remaining mesh network's resources, e.g., a directional WiFi or WiMax link to a wireline gateway (see TFA for an example of directional WiFi gateways).</p><p>In this work, we consider multi-tier wireless mesh networks, consisting of a backhaul tier for interconnection between mesh nodes, an access tier for connection between mesh nodes and clients, and a capacity injection tier to wirelessly connect the mesh nodes to the wired Internet. Further, we focus on a single-radio, singlechannel backhaul and access tier architecture, although it is a simple extension to separate access tier contention and consider dual radio platforms that have a separate access and backhaul radio. We let the user-specified cost of installing a physical wire or dedicated wireless connection be different for each location and allow nonuniform capacities at each location.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Gateway-Limited Fair Capacity</head><p>The capacity calculation captures the impact of wireless contention on the utilization of the wireless medium in a computationally efficient manner. Our capacity calculation considers access networks where all traffic to and from clients must traverse a gateway, making the gateways bottlenecks in the network. Therefore, we focus on the performance of the gateway nodes in our definition of the gateway-limited fair capacity. The advantages of this model over previous, more general computational models <ref type="bibr" target="#b6">[7]</ref> are 1) exact computation in polynomial time (important for evaluating many possible local search operations) and 2) extension to local search algorithms by enabling tractable approximations which optimize over one of two components of capacity definition: route lengths or contention.</p><p>A key aspect of our technique for calculating capacity is to model the wireless interface of a gateway as alternating its time between transmitting to onehop neighbors, receiving from one-hop neighbors, and deferring to other neighbors within contention range. The time a gateway spends deferring to ongoing transmissions in contention range reduces the gateway's available capacity. Therefore, we define the gateway-limited fair capacity as a function of the airtime utilization of the gateways, which depends on the routes used and amount of time the routes lead to a gateway deferring. In this definition, gateway capacity is significantly affected by fairness. For example, allocating all resources to one-hop flows and none to multi-hop flows will yield the greatest capacity but would be undesirable as large portions of the network would be non-functional. Consequently, we impose a per mesh node fairness constraint, requiring that each mesh node receive its fair share of the wireless airtime at the gateway nodes.</p><p>More formally, let n be the total number of mesh nodes in the network, and m the total number of links. Define G as the set of all potential gateway locations, which is a subset of M, the set of all mesh nodes. Mesh node i has a traffic demand d <ref type="bibr">[i]</ref> that represents the aggregate demand of all the end-clients associated with it. We represent the routes used by each mesh node to reach one or more gateways as a two-dimensional matrix R, where R[i, j] indicates the amount of node i's demand that traverses link j. We designate src(i) as the access tier link for mesh node i and assign R[i, src(i)] = d <ref type="bibr">[i]</ref>. Our calculations ensure fairness by requiring that λd[i] units of mesh node i's demand are served by gateways. The positive-valued λ parameter is uniform for all mesh nodes and therefore leads to weighted fair shares being enforced. We scale the demands with the λ parameter such that they are feasible, and then find the R matrix as solution to a transhipment problem optimizing capacity, potentially allowing multipath routing. We represent the contention caused by each link in a two-dimensional matrix I, where I[i, j] indicates if link j is in contention range of node i. The I matrix notation extends to links that, due to physical layer shadowing, only cause contention during a fraction of time.</p><p>Our technique for calculating the amount of time a gateway is idle due to contention proceeds as follows. A link induces contention equal to the number of mesh nodes that cannot be actively transmitting or receiving when the link in question is active. Consequently, the total contention on a gateway depends on how many routes use the link and how much demand is routed over the link. We use contention as a simplification of interference, as we are concerned specifically with situations in which a node is forced to defer due to either concurrent transmission or interference. We assume a perfect MAC protocol without unfairness or hidden terminal effects.</p><p>The total contention on a gateway node g ∈ G caused by link j is</p><formula xml:id="formula_0">񮽙 n i=1 R[i, j] × I[g, j]</formula><p>. The total contention on gateway g, v g is then given by:</p><formula xml:id="formula_1">v g = m 񮽙 j=1 n 񮽙 i=1 R[i, j] × I[g, j]</formula><p>(1)</p><p>The fair wireless capacity of a gateway is computed as follows. Gateway g services total demand s g , which is the sum of demands on all links incident to gateway g, denoted by link(g):</p><formula xml:id="formula_2">s g = n 񮽙 i=1 񮽙 j∈link(g) R[i, j]<label>(2)</label></formula><p>Expressing the capacity of gateway g as the amount of wireless time v g required to serve s g units of time at the wired interface, u g = s g /v g . Thus, the total gatewaylimited fair capacity is the sum of u j terms for all j ∈ G. This sum is a lower bound of the actual gatewaylimited capacity due to potential double-counting of links in contention with the gateway. This may occur if two links that contend with a specific gateway are not in contention with each other and can therefore be active simultaneously. In this case, the gateway is deferring to two links at once, whereas our calculation would count separately the defer time for both links.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Gateway Placement Problem</head><p>We refer to the problem of deciding how best to place a fixed number of additional capacity points in an existing mesh network so as to maximize the overall capacity improvement as the gateway placement problem. It is defined as follows. Let G be a (0, 1)-vector of size n that indicates whether a given mesh node i is a capacity point or not. On an operational mesh network, G[i] = 1, for all i ∈ G. Let the monetary cost of installing a capacity point i be f [i] and the set G 0 represent the currently deployed capacity points We define the total cost, C(G), of installing new capacity points in the mesh network as:</p><formula xml:id="formula_3">C(G) = 񮽙 ∀i / ∈G0 f [i] × G[i].</formula><p>We express the gateway placement problem as maximizing the network capacity given a specified budget for adding capacity points. Our formulation contrasts with previous work ( <ref type="bibr" target="#b3">[4]</ref> and <ref type="bibr" target="#b13">[14]</ref>) which does not directly account for wireless contention effects or consider the need for upgrading existing mesh deployments.</p><p>The placement problem is difficult because it requires simultaneously solving three subproblems: 1) gateway selection, 2) client assignment to gateways, and 3) route selection. The approximation schemes we present in the next section use local search techniques to decouple these subproblems. The algorithms solve <ref type="formula" target="#formula_2">(2)</ref> and <ref type="formula">(3)</ref> together (i.e., a transhipment problem) in order to evaluate the effectiveness of all possible local operations and thereby choose operations that best solve (1).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>III. SOLVING THE PLACEMENT PROBLEM</head><p>The gateway placement problem involves maximizing capacity directly, which can be expressed as an integer program (IP). We instead propose two local search based algorithms due to the following disadvantages of an IP: (i) an IP cannot solve the problem exactly in polynomial time, (ii) prior work has shown that a simplified version of the problem, capacitated facility location, has an unbounded integrality gap <ref type="bibr" target="#b11">[12]</ref>, and (iii) an IP is not suitable for online computation, e.g., it precludes the case of incrementally adding gateways without recomputing the locations of every gateway.</p><p>We therefore take an alternate approach of maximizing capacity with local search algorithms. We present two algorithms that optimize one of the two major components of our capacity calculation: the size of the routes in R or the impact of contention in I on mesh nodes. We first do this by minimizing hop count as a capacitated facility location problem with budget constraint and solving with local operations open() and close() and iterative capacity estimation. Our second approach is to minimize average contention as an uncapacitated kmedian problem, solved by local swap() operations.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Solving by Minimizing Hopcount</head><p>We first review the facility location problem and then describe how we map the gateway placement problem.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>1) Facility Location Problem:</head><p>The gateway placement problem is a generalization of the capacitated facility location problem <ref type="bibr" target="#b12">[13]</ref>, which is defined as follows. Let M be a set of customers, and W be a set of facilities. </p><formula xml:id="formula_4">C[i, j] × X[i, j]</formula><p>where X[i, j] denote the fraction of demand from customer i served by facility j.</p><p>In our formulation of the gateway placement problem, the facilities map to capacity points and the customers correspond to mesh nodes. The key differences are:</p><p>• The wireless capacity of each gateway depends on nearby contention, which in turn depends on the placement of other gateways. Therefore, the capacities are not known a priori because it would require knowledge of the final placement.</p><p>• Defining a cost function for serving mesh node i by gateway j does not preserve the triangle inequality. This cost is equal to the fair share of mesh node i at gateway j. If the customer and facility cost metrics do not preserve the triangle inequality, no constant factor approximation algorithms are known. Despite these differences, the local search algorithms developed for the facility location problem apply to the gateway placement problem (both differences are addressed in our adaption of the algorithm, as described later).</p><p>2) Local Search Operation: We next describe the local search algorithm <ref type="bibr" target="#b12">[13]</ref> for the facility location problem in the context of the gateway placement problem, highlighting modifications to account for gateway placement specifics. We denote s as a node and T as a set of nodes, which we describe how to find later in this section. The algorithm can do one of three operations to improve the solution: add(s) installs a gateway at node s, open(s, T ) installs a gateway at node s and removes gateways at all nodes in set T , and close(s, T ) removes the gateway at node s and installs gateways at all nodes in set T .</p><p>Let us refer to the set of available gateway locations as W, which is a site-specific subset of all mesh node locations. Let G represent the set of installed gateway locations throughout the execution of the algorithm, i.e.,</p><formula xml:id="formula_5">G[i] = 1, if i ∈ G.</formula><p>The local search algorithm operates as follows. We start with an arbitrary valid gateway placement and perform one of the three operations, add(), open(), and close(), to improve the quality of the solution. To ensure the algorithm terminates in polynomial time, we require that each step lowers the cost by at least c(S)/p(n, 񮽙), where p(n, 񮽙) is a chosen polynomial in n and 1//. Here, 񮽙 &gt; 0 indicates the error tolerance, and the algorithm's run time is polynomial in 1//.</p><p>We now review in more detail each local search operation. Because all possible combinations for set T cannot be evaluated in polynomial time, the algorithm instead finds a good choice for the set T as the solution to a knapsack problem, where T is found as the set of items to put in the knapsack. The operations proceed as follows:</p><p>• add(s) -For all non-gateway nodes s, evaluate the cost to open a gateway at s ∈ W. This cost evaluation requires solving a transhipment problem to find optimal routing matrix R for the set of all installed gateways in G ∪ {s}.</p><p>• open(s, T ) -Install gateway at node s ∈ W and remove gateways in set T ⊆ G − {s}, reassigning mesh nodes served by T to the gateway at s. Note that gateway s could already have been installed with some unused capacity.</p><p>• close(s, T ) -Remove gateway s ∈ G and install a set of gateways T ⊆ W −{s}. Then reassign routes destined to s to gateways in T without any effect on mesh nodes served by other gateways. </p><formula xml:id="formula_6">[i] &lt; uprev[i]) } while ( P N i=1 uprev[i] − ucur[i] ≥ φ) Output G as solution TABLE I PSEUDOCODE FOR MINHOPCOUNT ALGORITHM.</formula><p>3) Adapting MinHopCount: We next describe our modifications to allow the facility location algorithm to minimize hop count subject to a budget constraint and gateway capacities. We then describe our technique for iteratively estimating gateway capacity.</p><p>We use hop count as the cost function in our problem, which is a first-order approximation of the capacity, i.e. it reduces the contention in Eq. 1 by reducing the value of R entries. Another important advantage of this metric is that it preserves the triangle inequality, which is necessary for provable bounds on the local search algorithm's performance.</p><p>We also add a budget constraint to the MinHopCount algorithm, making the problem we solve a generalization of the capacitated k-median problem (more general because we allow all gateway costs, f [i], to be different). While there are no known constant factor approximation algorithms for the capacitated k-median problem, we show through evaluation that the algorithm performs close to optimal in realistic topologies (see Section IV).</p><p>The local search operations find a placement subject to gateway capacity constraints, but these gateway capacities are not known a priori because they depend on the full gateway placement. As shown in <ref type="table">Table 1</ref>, we use lower bound estimates for the gateway capacities, u <ref type="bibr">[i]</ref>, and iteratively update the gateway capacity lower bounds after successive runs of the local search algorithm. The algorithm terminates when the current sum of the lower bound capacity estimates u cur [i] does not decrease by more than user-chosen parameter φ from the previous iteration's estimate, u prev <ref type="bibr">[i]</ref>. Intuitively, we capture the lower bound capacity of a near-optimal placement, which is a tighter bound than the worst-case lower bounds of all placements. The run time of the MinHopCount algorithm is polynomial in 1 񮽙 and 1 φ .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Solving by Minimizing Contention</head><p>Our second local search algorithm, MinContention, finds the gateway placement that minimizes the average contention in the network. We first describe the k-median problem and review a local search algorithm using local swap() operations. Second, we discuss how to map the gateway placement problem to this algorithm such that we find the placement with the lowest average contention region size.</p><p>1) The k-Median Problem: The k-median problem is a variant of the facility location problem where there are only a fixed number k of facilities that can be opened. The objective is to minimize the cost of connecting all clients to a facility. We consider the uncapacitated version of the problem as there is currently no known constant factor algorithm for the capacitated k-median problem. In contrast, there is a local search algorithm for the uncapacitated k-median problem with a locality gap of 3+2/p <ref type="bibr" target="#b1">[2]</ref>, where the locality gap is the maximum difference between the worst local optimum and the global optimum and the parameter p controls the number of gateways the algorithm considers for simultaneous swapping. This locality gap results in an approximation ratio of 3 + 񮽙. This local search algorithm is based on repeatedly swapping p open gateways for p unopen gateways until no swaps can improve the solution. A larger p value leads to more accurate results but with exponential increase in running time.</p><p>The main idea of the MinContention algorithm is to install k gateways to minimize the average contention on the mesh nodes, which is a function of which links contend with each node and how often those links are used in routes. As per our definition in Section II, our actual objective is to minimize the total contention on gateways, but we cannot do that because it requires knowing the full gateway placement to correctly assign link weights. We therefore solve the problem of minimizing the contention on all nodes as a means of approximating the gateway contentions. Note that a disadvantage of this algorithm over the previously discussed MinHopCount algorithm is that it requires identical gateway costs. <ref type="table">Table 2</ref>. The cost of a placement is the sum of the active link weights, which are each assigned to be the total number of mesh nodes in contention range of the link. Additionally, we scale the shortest paths' weight in proportion to the node's traffic demand. This allows us to take client demands into account and favor installing gateways nearer to mesh nodes with greater demand.  3) Triangle Inequality for Contention: In order for the above algorithm to have a provable locality gap of 3 + 2/p, the link weights must obey the triangle inequality. As previously stated, the assigned link weight is the size of the union of the sets of nodes in contention range with each endpoint of the link, which we now show preserves the triangle inequality.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>2) Swap-based Local Search: The MinContention algorithm is summarized in</head><p>Consider a triangle of three mesh node locations, a, b, and c, and the resulting three links between them, labeled AB, AC, and BC. The contention caused by link AB is less than the sum of the contention of links AC and BC for the following reason. Let function Γ() represent the number of nodes in contention with a node or link. By definition, we have that link AB's contention consists of the nodes in contention range of nodes a and b, resulting in Γ(AB) = Γ(a) ∪ Γ(b). The contention caused by links AC and BC is (Γ(a) ∪ Γ(c)) + (Γ(b) ∪ Γ(c)) and is smallest when node c contends with no mesh nodes. Therefore the contention is lower-bounded by Γ(a)+Γ(b), which is greater than or equal to Γ(AB), ensuring that the triangle inequality is preserved.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>IV. EVALUATION</head><p>In this section we examine the performance of our placement algorithms. We first examine the proposed technique for capacity calculation with measurement data. We next study the algorithms on regular grid topologies and then real topologies that underlie three deployed mesh networks, and finally study the characteristics of an optimal placement.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Validating Capacity Calculation</head><p>We first show the ability of our proposed capacity calculation technique to accurately rank gateway placements from highest to lowest total capacity. We compare our calculation with measured throughput data from the operational TFA mesh network, in order to show that a better placement as per our capacity calculation is also a better placement as per measurements. TFA is a multitier mesh network providing Internet access in a densely populated, single-family residential, urban neighborhood with 18 deployed mesh nodes <ref type="bibr" target="#b2">[3]</ref>. In the topology, two mesh nodes are connected if their link is on average usable at greater than 1 Mbps.</p><p>At the time of these experiments, the TFA network, featured two capacity points: gateway GW-A is a true wireline gateway and gateway GW-B is connected to GW-A via a directional link. We measure three different capacity point configurations: GW-A only, GW-B only, and both GW-A and GW-B. We observe the network during weekday peak hours for each of the three configurations, each measured on a subsequent weekday. For example, on one day, the directional link was disabled, making GW-B a non-gateway mesh node. The measured throughput is the peak rate (in Mbps) of data flow between the TFA network and the Internet over the observed time period. The traffic measured is the naturally occurring usage of the network. The throughput of the network with both gateways peaks at 2.2 Mbps. The GW-A configuration has a peak throughput of 1.46 Mbps and the GW-B configuration peaks at 610 Kbps. Using our technique in Section II, we calculate gateway-limited fair capacity of the GW-A-only configuration as 1.5 Mbps, the GW-B-only configuration as 1.35 Mbps, and both gateways together as 1.75 Mbps. Our technique predicts the correct ranking, with the GW-A-only configuration achieving 11% greater capacity than the GW-B-only configuration. The actual throughput values are lower than our capacity calculations due to several factors not included such as control overhead, MAC unfairness, and non-backlogged traffic sources.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Performance of Placement Algorithms</head><p>We now study the performance of MinHopCount and MinContention algorithms presented in Sections III-A and III-B on grid-based and realistic topologies. For all experiments, we consider an 802.11b system with the single-link wireless throughput assumed to be 6 Mbps. All mesh node locations are fixed and gateways can be installed on any mesh node. We compare the algorithms against a greedy placement strategy which repeatedly places the gateway that leads to the largest reduction in average path length.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>1) Regular Grid Topology:</head><p>We first examine the placement algorithms on a 7×7 regular grid topology. A mesh node communicates directly with at most 4 neighbors and contends with all two-hop neighbors. The only significant distinction between nodes are those that are on the borders. <ref type="figure" target="#fig_4">Figure 1</ref> shows the performance of the greedy, MinHopCount, and MinContention algorithms as a function of how many new capacity points are added. For a network of this size, we also include the optimal placements found using brute force search.  For adding between three and six gateways, the MinHopCount and MinContention algorithms find placements with capacities at least 86% and 77% of the optimal respectively, while the greedy placement is at least 72% of the optimal. The MinHopCount algorithm performs better in this regular topology because contention is uniform, leading to fewer or no situations where a greater hop count leads to better capacity. We also find that the each algorithm sometimes performs slightly worse with more gateways due to the fact that the hop count and contention metrics they use are only a first order approximation of the mesh capacity. Note that, in this topology, the marginal benefit of each new gateway decreases due to the increasing level of contention between gateways. This effect is significant as gateways serve the most traffic and therefore cause more contention than other mesh nodes.</p><p>2) Real-World Topologies: We next consider our placement algorithms on the topologies of three currently deployed mesh networks: TFA, Chaska, and Google. These topologies present a new challenge in that the connectivity and contention matrices are no longer uniform for each mesh node. In these topologies, the local search algorithms have greater gain over greedy heuristics than in grid topologies because the irregular contention leads to situations where longer routes result in higher capacity. For each topology, we fix a number of already installed gateways and focus on upgrading with new gateways.</p><p>For the TFA topology, we are able to directly measure the signal strength between each pair of nodes. The topology is then a combination of this information with empirically measured communication and contention thresholds. For the Chaska and Google topologies, we must estimate the connectivity information with AP coordinates and manufacturer's information, introducing possible errors. While the true connectivity matrix is not observable externally, we assume a link exists if the physical distance is less than 200 meters.</p><p>The first deployed topology corresponds to the 195 node Chaska topology <ref type="bibr" target="#b0">[1]</ref>. We begin with four known gateways and place additional capacity points in the network using the greedy, MinHopCount, and MinContention algorithms, plotting the results in <ref type="figure" target="#fig_5">Figure 2</ref>. Optimal does not appear here as the network size prohibits exhaustive search. The MinContention algorithm typically performs the best, up to 64% better than the greedy placement, because the local search improves upon previous choices it made and the algorithm considers the amount of contention caused by a path and not just the path length. For this topology, the MinHopCount performs up to 30% better than greedy, but its performance becomes similar to greedy beyond 15 gateways. We suspect that the MinHopCount's capacity estimates, u[i], degrade for more than 15 gateways for this topology, and it is the main reason that its performance becomes similar to greedy.</p><p>The second deployed topology considered in <ref type="figure" target="#fig_5">Figure  2</ref> is the 447-node Google Mountain View network. In this network, we consider the current configuration of 59 gateways and use our algorithms to determine upgrade locations. MinContention outperforms greedy by up to 8%, though not with small budgets. Conversely, MinHopCount performs best with small budgets, but is approximately 10% lower capacity than greedy when considering larger budgets. This is a result of our simple capacity estimation strategy, which does not take into account contention between gateways. Note that our topology estimation results in a conservative and regular contention pattern in this topology. The third deployed topology we consider is the TFA network expansion, consisting of the currently deployed 18 nodes and 35 planned nodes. The current topology features two capacity points: one wired gateway and one directional antenna connection. <ref type="figure" target="#fig_6">Figure 3</ref> presents the results of adding a small number of gateways to the projected TFA topology while holding fixed the current two gateways. Also included are the optimal values found via exhaustive search. The local search algorithms closely approximate the optimal solution for the addition of up to 3 gateways; MinHopCount and MinContention solutions are within 97% and 96% of the optimal. As the budget increases, the solutions decline to as low as 80% of the optimal, with MinHopCount declining more. Greedy performs worst with small budgets, but improves as the marginal gain of additional gateways declines and allows the greedy to make up for early suboptimal choices. The MinHopCount algorithm performs worse with five gateways than with four due to the fact that iterative capacity estimation does not directly take into account intergateway contention and hence MinHopCount does not perform as well when gateways contend with each other. In other words, it conservatively chooses longer paths so as to ensure that gateway capacity constraints are not violated.</p><p>In summary, we found that our local search algorithms significantly outperform a greedy algorithm, by up to 64%, and this gain is more pronounced on irregular topologies. For small budgets, the algorithms achieve very close (≥ 97%) to optimal capacities and for larger budgets, MinContention performs best.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C. TFA Placements Case Study</head><p>We next study in greater detail the TFA network using an exhaustive study of all possible placements. We find that while the best placements have similar configurations, i.e. roughly the same gateway locations, there is a large capacity gap between near-optimal placements and the optimal. In other words, the optimal placement has significantly higher capacity than a nearoptimal placement, demonstrating the need for good approximation algorithms. Further, the configuration of gateways in the optimal placement is similar to a nearoptimal placement, indicating the applicability of local search operations for finding optimal placements. We consider the case of adding four additional capacity points in the projected TFA topology. <ref type="figure" target="#fig_7">Figure 4</ref> a histogram of all possible ways to install four additional capacity points. Four candidate locations have been chosen based on availability of structures to mount antennas and we compare this manual placement with our algorithms. To understand the space of possible placements, <ref type="figure" target="#fig_7">Figure 4</ref> is a histogram of the capacities resulting from all possible gateway placements, found via exhaustive search. The average placement results in a capacity of 7.7 Mbps with standard deviation of 1.2 Mbps and the optimal placement is 11.7 Mbps. The difference in capacity between the mean placement and the optimal placement is a factor 1.7×, indicating the need for a good approximation algorithm. The MinHopCount and MinContention algorithms achieve 85% and 79% of the optimal configuration respectively, whereas the greedy placement achieves less than 60% of the optimal. Also, MinContention with p = 1 gives the same capacity as with p = 4 (maximum p possible in this case because p ≤ k.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>1) Distribution of Placement Quality: We present in</head><p>We also consider the percentage of all possible placements with higher capacity than the placement arrived at by our algorithms for this TFA scenario. MinHopCount achieves 85% of the optimal capacity, but only 0.1% of all possible placements result in higher capacity. For MinContention and greedy, approximately 1% and 15% of all placements result in higher capacity respectively. These results demonstrate the importance of a good approximation algorithm as there are large capacity gains due to finding better placements from among the top 0.1% of all placements.</p><p>2) Characterizing Similarity of Placements: In this section, we examine the characteristics of the solutions found by the local search algorithms in comparison to the optimal placement. We define a simple metric to capture the amount of similarity between any two gateway placements: the hop distance between the gateways in the two placements. The distance is calculated as the minimum hop cost to move the gateways in one placement to match the gateways in the other. This is equivalent to a transhipment problem where the demands are the capacities of the gateways in one placement, and the capacities correspond to the gateways in the second placement. Figure 5 plots the ranges of capacities obtained when adding four additional gateways to the TFA network as a function of their distance from the optimal placement using this metric. We find that there is a strong correlation between distance from the optimal placement and the capacity with a correlation coefficient of −0.807. In other words, the higher capacity placements are most likely to be similar in configuration to the optimal placement. A carefully designed local search algorithm can take advantage of this similarity to find the optimal placement. In the example of adding four gateways, we find that the distance between the second-best placement and the optimal placement is four hops. This means that the second-best placement is a minor perturbation of the best placement, and therefore the optimal placement can be found from the second-best placement with a local operation that moves gateways a combined total of four hops (not four hops per gateway). Both of our algorithms find placements within six hops from the optimal.</p><p>V. RELATED WORK A gateway placement algorithm using a greedy heuristic has been presented <ref type="bibr" target="#b3">[4]</ref> to serve neighborhood networks, as well as a local search algorithm <ref type="bibr" target="#b13">[14]</ref> for minimizing a combined cost and hop count metric. These approaches differ from ours in that we 1) incorporate wireless contention, 2) consider deployed citywide mesh topologies, and 3) present two local search approximation algorithms, one of which has provable constant-factor approximation ratio. Others developed general techniques to calculate network capacities with interference <ref type="bibr" target="#b6">[7]</ref> and incorporating multiple radios and channels <ref type="bibr" target="#b7">[8]</ref>. These techniques require solving linear and mixed integer programs to find upper and lower capacity bounds. In contrast, we present a simple technique for exactly calculating gateway-limited fair capacity in polynomial time.</p><p>The capacity of hybrid wired and wireless networks has been studied in <ref type="bibr" target="#b9">[10]</ref>, though this study only provides asymptotic bounds and does not address the gateway placement problem. For regular topologies, <ref type="bibr" target="#b14">[15]</ref> studies the impact of gateway density on network capacity and presents techniques to calculate connectivity to gateways.</p><p>We adapt our algorithms from solutions to the related capacitated facility location problem and uncapacitated k-median problem. Constant-factor approximations are known to exist for these problems using both local search <ref type="bibr" target="#b1">[2]</ref>, <ref type="bibr" target="#b12">[13]</ref> and LP relaxation methods <ref type="bibr" target="#b8">[9]</ref>. The algorithms we present can be improved with more sophisticated local search techniques <ref type="bibr" target="#b10">[11]</ref>, <ref type="bibr" target="#b15">[16]</ref> that achieve better approximation ratios. For the closely related capacitated k-median problem, there is a constant-factor algorithm with up to 50× violation of capacity constraints <ref type="bibr" target="#b5">[6]</ref>, making the algorithm too inaccurate for our purposes.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>VI. CONCLUSIONS</head><p>We study the gateway placement problem, first introducing a technique to efficiently compute gatewaylimited fair mesh capacity as a function of the contention at each gateway. We then present two gateway placement algorithms adapted from local search heuristics for related facility location problems with provable performance guarantees. The MinHopCount algorithm adapts a local search algorithm for the capacitated facility location problem and minimizes the average wireless hop count for all paths in the network, iteratively estimating the gateways' wireless capacities. The MinContention algorithm is adapted from a solution to the uncapacitated k-median problem and minimizes the average contention region size within a provable approximation ratio of 3 + 񮽙. MinHopCount is more general and can handle non-uniform gateway costs, while MinContention is able to provide better performance guarantees. Our numerical results on three real topologies show that our algorithms outperform a greedy heuristic and achieve close to the optimal capacity. Further, we show that nearoptimal solutions have similar gateway configuration as the optimal, but the difference in capacity is large, which supports the use of local search operations on nearoptimal placements.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head></head><label></label><figDesc>Each customer i ∈ M has a demand d[i]. Each facility j ∈ W, has a maximum capacity u[j] and a facility cost f [j]. The cost matrix C[i, j] represents the cost of serving one unit of demand from customer i by the facility j. A facility can satisfy a customer demand only if it is open. The facility location problem then is finding a set of facilities to open, G, with minimum total cost: 񮽙 j∈G f [j] + 񮽙 j∈G, i∈M</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Let</head><label></label><figDesc>M be the set of all mesh nodes Initialize u[i] values to gateway wired capacities // Note that valid here means satisfies budget Do { // Run local search algorithm with u[i] capacities Start with arbitrary, valid solution G Do { Foreach s ∈ M Find valid add(s) Find valid open(s, T ) where T is solution to knapsack problem with knapsack size of u[s] Find valid close(s, T ) where T is minimal covering knapsack with knapsack size of u[s] Calculate ∆ cost for all valid operations Apply operation to G with best ∆ cost } while (∆ cost ≥ C(G)/p(n, 񮽙)) Output G as locally optimal solution Calculate capacitiesûcapacitiesˆcapacitiesû[i] of placement G Update ucur[i] to new lower bound ifûifˆifû</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Find</head><label></label><figDesc>a feasible starting placement G Do { Find all valid swap(S, T ) where S is set of p gateways to open and T is set of p gateways to close Calculate ∆ cost for each operation Apply swap with largest positive ∆ cost } while (∆ cost ≥ C(G) p(n,,) ) Output G as locally optimal solution</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Fig. 1 .</head><label>1</label><figDesc>Fig. 1. Capacity of placements arrived at by algorithms on a square grid topology with 49 mesh nodes.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Fig. 2 .</head><label>2</label><figDesc>Fig. 2. Performance of placement algorithms on Chaska (top) and Google (bottom) topologies.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Fig. 3 .</head><label>3</label><figDesc>Fig. 3. Comparison of MinHopCount and MinContention algorithms with optimal placement for TFA-projected topology.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Fig. 4 .</head><label>4</label><figDesc>Fig. 4. Histogram of all placements of 4 new gateways in the projected TFA topology, along with the capacities found by our algorithms.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Fig. 5 .</head><label>5</label><figDesc>Fig. 5. Scatter plot for all possible gateway placements in the TFAproj topology with 4 new gateways.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0" validated="false"><head>TABLE II PSEUDOCODE FOR MINCONTENTION ALGORITHM.</head><label>II</label><figDesc></figDesc><table></table></figure>

			<note place="foot" n="1"> See tfa.rice.edu, www.chaska.net, and wifi.google.com.</note>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">Tropos Networks White Paper</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Chaska</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Minnesota</forename><surname>Chaska</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2007-01" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Local search heuristic for k-median and facility location problems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Vijay</forename><surname>Arya</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Naveen</forename><surname>Garg</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rohit</forename><surname>Khandekar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kamesh</forename><surname>Munagala</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Vinayaka</forename><surname>Pandit</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ACM STOC</title>
		<meeting>ACM STOC</meeting>
		<imprint>
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Measurement driven deployment of a two-tier urban mesh access network</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Joseph</forename><surname>Camp</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Joshua</forename><surname>Robinson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chris</forename><surname>Steger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Edward</forename><surname>Knightly</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ACM MobiSys</title>
		<meeting>ACM MobiSys<address><addrLine>Uppsala, Sweden</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2006-06" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Optimizing the placement of integration points in multi-hop wireless networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ranveer</forename><surname>Chandra</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lili</forename><surname>Qiu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kamal</forename><surname>Jain</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mohammad</forename><surname>Mahdian</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ICNP</title>
		<meeting>ICNP<address><addrLine>Berlin, Germany</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2004-10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Wi-Fi nodes to talk amongst themselves</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Steven</forename><surname>Cherry</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Spectrum</title>
		<imprint>
			<date type="published" when="2006-07" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Approximating k-median with non-uniform capacities</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Julia</forename><surname>Chuzhoy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yuval</forename><surname>Rabani</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of SODA &apos;05</title>
		<meeting>SODA &apos;05</meeting>
		<imprint>
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Impact of interference on multi-hop wireless network performance</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kamal</forename><surname>Jain</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jitendra</forename><surname>Padhye</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Venkat</forename><surname>Padmanabhan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lili</forename><surname>Qiu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ACM MobiCom</title>
		<meeting>ACM MobiCom</meeting>
		<imprint>
			<date type="published" when="2003-09" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Characterizing the capacity region in multi-radio multi-channel wireless mesh networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Murali</forename><surname>Kodialam</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thyaga</forename><surname>Nandagopal</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ACM MobiCom</title>
		<meeting>ACM MobiCom<address><addrLine>Cologne, Germany</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2005-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">LP-based approximation algorithms for capacitated facility location</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Retsef</forename><surname>Levi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><forename type="middle">B</forename><surname>Shmoys</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chaitanya</forename><surname>Swamy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IPCO</title>
		<meeting>IPCO<address><addrLine>New York, NY</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2004-06" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">On the capacity of hybrid wireless networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Benyuan</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zhen</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Don</forename><surname>Towsley</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE INFOCOM&apos;03</title>
		<meeting>IEEE INFOCOM&apos;03<address><addrLine>San Fransisco, CA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2003-04" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Universal facility location</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mohammad</forename><surname>Mahdian</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Martin</forename><surname>Pal</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 11th Annual European Symposium on Algorithms (ESA)</title>
		<meeting>the 11th Annual European Symposium on Algorithms (ESA)</meeting>
		<imprint>
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Improved approximation algorithms for metric facility location problems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mohammad</forename><surname>Mahdian</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yinyu</forename><surname>Ye</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jiawei</forename><surname>Zhang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">5th International Workshop on Approximation Algorithms for Combinatorial Optimization</title>
		<imprint>
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Facility location with nonuniform hard capacities</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Martin</forename><surname>Pal</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Eva</forename><surname>Tardos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tom</forename><surname>Wexler</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Symposium on Foundations of Computer Science</title>
		<imprint>
			<date type="published" when="2001" />
			<biblScope unit="page" from="329" to="338" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Minimum-cost gateway deployment in cellular wi-fi networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rajesh</forename><surname>Prasad</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hongyi</forename><surname>Wu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Consumer Communications and Networking Conference</title>
		<meeting><address><addrLine>Las Vegas, NV</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2006-01" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">A performance study of deployment factors in wireless mesh networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Joshua</forename><surname>Robinson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Edward</forename><surname>Knightly</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE INFOCOM</title>
		<meeting>IEEE INFOCOM<address><addrLine>Anchorage, AK</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2007-05" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Multi-exchange local search algorithm for the capacitated facility location problem</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jiawei</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bo</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yinyu</forename><surname>Ye</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IPCO</title>
		<meeting>IPCO<address><addrLine>Berlin</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
