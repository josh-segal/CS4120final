<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2019-03-26T16:50+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Question Answering over Implicitly Structured Web Content</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Eugene</forename><surname>Agichtein</surname></persName>
							<email>eugene@mathcs.emory.edu</email>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Emory University</orgName>
								<orgName type="institution" key="instit2">Microsoft Research</orgName>
								<orgName type="institution" key="instit3">Microsoft Research</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chris</forename><surname>Burges</surname></persName>
							<email>cburges@microsoft.com</email>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Emory University</orgName>
								<orgName type="institution" key="instit2">Microsoft Research</orgName>
								<orgName type="institution" key="instit3">Microsoft Research</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Eric</forename><surname>Brill</surname></persName>
							<email>brill@microsoft.com</email>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Emory University</orgName>
								<orgName type="institution" key="instit2">Microsoft Research</orgName>
								<orgName type="institution" key="instit3">Microsoft Research</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Question Answering over Implicitly Structured Web Content</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Implicitly structured content on the Web such as HTML tables and lists can be extremely valuable for web search, question answering, and information retrieval, as the implicit structure in a page often reflects the underlying semantics of the data. Unfortunately, exploiting this information presents significant challenges due to the immense amount of implicitly structured content on the web, lack of schema information, and unknown source quality. We present TQA, a web-scale system for automatic question answering that is often able to find answers to real natural language questions from the implicitly structured content on the web. Our experiments over more than 200 million structures extracted from a partial web crawl demonstrate the promise of our approach.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Queries such as"what was the name of president Fitzgerald's cat", or "who invented the tie clip" are real web search queries. Unfortunately, general-purpose web search engines are not currently designed to retrieve an answer to these questions, and neither are specialized question answering systems. However, answers to these queries appear in HTML tables and lists constructed by history, sports, and celebrity enthusiasts. This kind of implicitly structured information abounds on the web and can be immensely valuable for web search, question answering, and information retrieval. For example, sports statistics, publication lists, historical timelines, and event and product information are all naturally represented in tabular or list formats in web pages. These tables have no common schema, and can have arbitrary formatting and presentation conventions. Yet, these tables were designed by the page authors to convey structured information to the human readers, by organizing the related information in table (or list) rows and columns. <ref type="figure" target="#fig_0">Figure 1</ref> shows three example table snippets: inventions timeline 1 , explorer timeline 2 , and a table listing the U.S. presidents and the descriptions of their pets <ref type="bibr" target="#b2">3</ref> . Note that two of these three typical HTML tables do not provide column names, and none of the tables are structured in the strict sense: some of the table attributes are comprised of free text with embedded entities. Nevertheless, the layout provided by the page authors implies a relationships between the entities within the same row, and to lesser extent, the types of entities in the same column. Millions of such tables abound on the web and encode valuable structured information about related entities. This content can be a rich source of information for question answering and web search, as many questions submitted by users to search engines are concerned with finding related entities.</p><p>Because there are typically few textual clues are lexically near the answers for traditional search engines to use (e.g., for retrieving a page or for selecting a result summary), this information may not be surfaced. By explicitly modeling the contexts of structured objects we can better index and retrieve this information. Furthermore, queries in general, and questions in particular, exhibit a "heavy tail" behavior: more than half of all queries submitted to search engines are unique. Hence, it is important to be able to answer questions about rare or obscure relationships (e.g., names of presidents' pets). By relying on the existing syntactic structures on the web (and inferring the semantic structure), we can often reduce the question answering problem to the easier problem of finding an existing table that instantiates the required relationship.</p><p>After reviewing related work in the next section, we describe our framework and querying model (Section 3). We demonstrate the scalability of our approach using a dataset of more than 200 million HTML tables, obtained from crawling a small fraction of the web (Section 4) that we use for reporting the experimental results (Section 5). As we will show, in many cases we can retrieve the answers from the rows and attribute values inferred from the implicitly structured content on the web.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Related Work</head><p>Previous question answering and web search research predominantly focused on either well-structured sources and online databases, or on natural language in pages. Many of the state-of-the-art question answering systems have participated in the TREC QA competition <ref type="bibr" target="#b14">[15]</ref>, and the best systems typically perform deep syntactic and semantic analysis that is not feasible for large-scale document collections such as the web. Recently there has been work on machine learning-based question answering systems (e.g., <ref type="bibr" target="#b13">[14,</ref><ref type="bibr" target="#b11">12]</ref> and others). The FALCON question answering system, presented in <ref type="bibr" target="#b13">[14]</ref> discusses using "selectors" to retrieve answer passages from a given (small) unstructured text collection. We are presenting a new way of exploiting existing structure on the web to retrieve actual answers to users questions. Our approach is related to the general XIRQL language and associated ranking model <ref type="bibr" target="#b7">[8]</ref> for XML documents. Another related approach complementary to our work was presented in <ref type="bibr" target="#b10">[11]</ref> on retrieving answers from a large collection of FAQs by searching the question and answer fields, which is complementary to our setting. As another related approach, <ref type="bibr" target="#b8">[9]</ref> used a large number of dictionaries, or lists specifically constructed for each domain. In contrast, in our approach the information is interpreted and integrated dynamically and query time without domain-specific prior effort.</p><p>Another area of overlap with our work is data integration on the web, which is an active area of research in the data mining, artificial intelligence, and database communities. For an excellent survey, please refer to <ref type="bibr" target="#b5">[6]</ref>. A related area to our work in the database community is the research on keyword search in relational databases (e.g., <ref type="bibr" target="#b9">[10]</ref>). There have been many efforts to extract structured information from the web. The previous approaches (e.g., <ref type="bibr" target="#b0">[1]</ref>) and, most recently, KnowItAll <ref type="bibr" target="#b6">[7]</ref> focus on extracting specific relationships (e.g., "is a"), which can then be used to answer the specific questions that these relationships support (e.g., "who is X"). This effort was recently expanded <ref type="bibr" target="#b4">[5]</ref> to extract many other relationships from text, and to resolve the relation type at query time. In contrast, we attempt to support any question by finding the structured table(s) on the web where the relevant information has already been structured by page authors.</p><p>Recently, other researchers have also looked to the web as a resource for question answering (e.g., <ref type="bibr" target="#b2">[3,</ref><ref type="bibr" target="#b11">12]</ref>). These systems typically perform complex parsing and entity extraction for both queries and best matching Web pages, and maintain local caches of pages or term weights. Our approach is distinguished from these in that we explicitly target the structured content on the web and forego the heavy processing required by other systems. Our key observation is that information in tables, like elsewhere on the web, appears redundantly. Hence, correct answers are likely to occur together with the question focus in multiple tables. In this respect, our approach is similar in spirit to the web question answering system AskMSR <ref type="bibr" target="#b1">[2]</ref>, which exploited redundancy in result summaries returned by web search engines.</p><p>Another challenge is that answers may occur many times on the web, ranking the retrieved answer candidates it crucial. Several machine learning methods exist for tackling the ranking problem, and there is a rich literature on ranking in the machine learning community. In this paper we use a recently introduced method for page ranking, RankNet <ref type="bibr" target="#b3">[4]</ref>. RankNet is a scalable, state-of-the art implementation of a Neural Network, and has been shown to perform extremely well for the noisy web search ranking problem. Hence, we adapt RankNet for ranking candidate answers in our TQA system, described next.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">The TQA Model and System Description</head><p>First we briefly review the general steps required for web question answering. Then, we describe our framework (Section 3.1), and the system architecture (Section 3.2) for retrieving candidate answers for a user's question. These candidates are then ranked as described in Section 3.3, and the top K answers are returned as the output of the system.</p><p>Consider a natural language question "When was the telegraph invented?". The goal of a question-answering system is to retrieve a correct answer (e.g., "1844") from the document collection. Achieving this usually requires three main components: a retrieval engine for returning documents likely to contain the answers; a question analysis component for parsing the question, detecting the question focus, and converting a natural language question into a query for a search engine; and the answer extraction component for analyzing the retrieved documents and extracting the actual answers. By exploiting the explicit structures created by the document authors, we can, in principle, get natural language understanding "for free" and hence dramatically improve the applicability and scalability of question answering.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">TQA Question Answering Framework</head><p>Consider our example question "When was the telegraph invented?". Invariably, we find that someone (perhaps, a history enthusiast) has created a list of all the major inventions and the corresponding years. In our approach, we take this idea to an extreme, and assume that every factoid question can be answered by some structured relationship. More specifically, in our framework a question Q N L is requesting an unknown value of an attribute of some relationship R, and provides one or more attribute values of R for selecting the tuples of R with a correct answer.</p><p>Therefore, to answer a question TQA proceeds conceptually as follows:</p><p>1. Retrieve all instances of R in the set of indexed tables T ALL , which we denote R T .</p><p>2. For each table t ∈ R T , select the rows t i ∈ t that match the question focus F Q .</p><p>3. Extract the answer candidates C from t * , the union of all selected rows.</p><p>4. Assign a score and rerank answer candidates C i ∈ C using a scoring function Score that operates over the features associated with C i .</p><p>5. Return top K answer candidates.</p><p>For our example, R might be a relation InventionDate(Invention, Date), and a table snippet in <ref type="figure" target="#fig_0">Figure 1</ref> is one of many instances of InventionDate on the web. The selected rows in R T would be those that contain the word "telegraph". With sufficient metadata and schema information for each table, this question could be answered by mapping it to a select-project query. More precisely, we would decompose Q N L into two parts: the relationship specifier M Q , for selecting the appropriate table by matching its metadata, and row specifier, F Q , for selecting the appropriate row(s) of the matched tables. Unfortunately, HTML tables on the web rarely have associated metadata or schema information that could be used directly. Hence, we have to dynamically infer the schema for the appropriate tables and rows using the available information, as we describe next.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">TQA System Description</head><p>TQA first extracts all promising tables from the web, and indexes them with available metadata which consists of the surrounding text on the page, page title, and the URL of the originating page as shown in <ref type="figure" target="#fig_1">Figure 2</ref>. More specifically, each table t is associated with a set of keywords that appear in the header, footer, and title of the page. Additionally, by storing the URL of the source page we also store static rank and other information about the source page. Once the tables are indexed, they can be used for answering questions. The question answering process is illustrated in <ref type="figure" target="#fig_2">Figure 3</ref>. Initially, a question is parsed and annotated with the question focus and answer type. In order to gain better understanding of the issues associated with answer retrieval and reranking, we left the question focus identification and the answer type specification manual. Hence, a user needs to specify the question focus (e.g., "telegraph" for "When was the telegraph invented") and the answer type (e.g., year or date). The question focus corresponds to the "target" attribute for a question series, manually specified in the recent TREC question answering evaluations <ref type="bibr" target="#b15">[16]</ref>.</p><p>An annotated question is automatically converted to a keyword query. The query is then submitted to our search engine over the the metadata described above. As the search</p><formula xml:id="formula_0">Algorithm RetrieveAnswers(Q N L , F Q , T A , SE, M R)</formula><p>//Convert question into keyword query Query = RemoveStopwords(Q N L ); //Retrieve at most M R tables by matching //metadata via search engine SE R T = RetrieveCandidateTables(SE, Query, M R); Candidates = ();</p><note type="other">foreach t in R T do foreach row r in t do if r does not match F Q then continue; end foreach field f in r do //Store source and other statistics for each candidate if IsTypeMatch(T A , f ) then AddCandidateAnswer(Candidates, f , r, t, f ) end //Add token sequences in f shorter than Max words foreach sequence s in Subsequences(f , Min, Max) do if IsTypeMatch(T A , f ) then AddCandidateAnswer(Candidates, s, r, t, f ) end end end end end //Encode candidate answer and source information as features DecoratedCandidates =DecorateCandidateAnswers(Candidates) return DecoratedCandidates Algorithm 1: Candidate answer retrieval for question Q N L , question focus F Q , and answer type T A using search engine SE.</note><p>engine of choice we use Lucene <ref type="bibr" target="#b3">4</ref> The metadata information is indexed as keywords associated with each table object. Within each table returned by the search engine, we search for rows that contain the question focus. These rows are parsed and candidate answer strings are extracted. The candidate answer strings are filtered to match the answer type. For each surviving candidate answer string we construct a feature vector describing the source quality, the closeness of match, frequency of the candidate and other characteristics of the answer and the source tables from which it was retrieved. The answer candidates are then re-ranked (we will describe re-ranking in detail in Section 3.3), and the top K answers are returned as the output of the overall system.</p><p>More formally, the TQA answer retrieval procedure is outlined in Algorithm 1.</p><p>As the first step of the RetrieveAnswers, we convert the question Q N L into keyword query Query. We issue Query to the search engine SE to retrieve the matching tables as R T . For each returned table t in R T , and for each row r of t, we check if the question focus F Q matches r. If yes, the row is selected for further processing.</p><p>The matched rows are parsed into fields according to the normalized HTML field boundaries. To generate the answer candidates, we consider each field value f in r, as well as all sequences of tokens in each f . If a candidate substring matches the answer type T A , the candidate is added to the list of Candidates. For each candidate answer string we maintain a list of source tables, rows, positions, and other statistics, which we will use for reranking the answers to select the top K most likely correct ones. Each answer candidate is annotated with a set of features that are designed to separate correct answers from incorrect ones. The features are of two types: (a) source features (i.e., properties of the source page, table, and how the candidate appeared in the table) and (b) answer type features (i.e., intrinsic properties of the actual answer string).</p><p>The features used for ranking answers are listed in Table 1. To generate the features for each candidate answer we use standard natural language processing tools, namely, a Named Entity tagger, Porter stemmer, and simple regular expressions that correspond to the type of expected answer. Additionally, we incorporate the debugging information provided by the search engine (e.g., the PageRank value of the source URL of a table).</p><p>We have described how to retrieve candidate answers, and how the candidates are represented. We now turn to the challenging task of ranking candidate answers.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Reranking Candidate Answers</head><p>In our framework, a ranking function Score operates over the set of features associated with an answer candidate. By encoding all answer heuristics as numeric features we can apply any number of supervised and unsupervised methods for reranking the answers. We consider two general classes of Score functions: heuristic-based, and probabilistic. The heuristic scoring, which we describe next, is commonly implemented in the question answering community. However, a more rigorous and principled approach is to develop a probabilistic cost model, and we use two probabilistic ranking methods, RankNet and NaiveBayes, which are described later in this section.</p><p>Heuristic reranking A common heuristic in web question answering is to consider the frequency of a candidate answer. The Frequency scoring function simply returns the number of times the answer candidate has been seen in all the candidate rows returned. The order in which the tables are returned by search engine is significant -the higherranked results are likely to be more relevant. Hence, a slight variation of the Frequency scoring function takes source page ranking into account. We define the FrequencyDe- </p><formula xml:id="formula_1">FrequencyDecayed (answer ) = i&lt;|R T | i=0 1 i + 1</formula><p>which is simply the frequency weighted by the rank order of the page in which the answer was extracted. Of course, frequency is just one of the features listed in <ref type="table">Table 1</ref>. In fact, features such as type of answer matched using named entity are extremely important, whereas the length of the answer is likely less so, but still might be helpful for resolving ties between otherwise equally scored answer candidates. Based on the system performance on the training set of questions <ref type="table" target="#tab_2">(Table 2)</ref>, we devised a heuristic scoring function Heuristic which is defined as:</p><formula xml:id="formula_2">Heuristic = i∈F answer .F i · Weight[i]</formula><p>where Weight <ref type="bibr">[i]</ref> are the weights reported in <ref type="table">Table 1</ref>. Since these heuristic weights are based on analysis of the training set, they may not work as well on a new set of questions or a new table collection. Therefore, we now turn to the more principled and promising approach, namely probabilistic reranking.</p><p>Probabilistic Reranking with RankNet Here we briefly describe the RankNet algorithm. The reader can find more details in <ref type="bibr" target="#b3">[4]</ref>. The idea is to use a cost function that captures the posterior probability that one item is ranked higher than another: thus the training data takes the form of pairs of examples, with an attached probability (which encodes our certainty that the assigned ranking of the pair is correct). For example, if we have no knowledge as to whether one item should be ranked higher than the other in the pair, we can assign probability one half to the posterior for the pair, and the cost function then takes such a form that the model is encouraged to give similar outputs to those two patterns. If we are certain that the first is to be ranked higher than the second, the cost function penalizes the model by a function of the difference of the model's outputs for the two patterns. A logistic function is used to model the pairwise probabilities; a cross entropy cost is then used to compute the cost, given the assigned pairwise probabilities and given the model outputs for those two patterns. This cost function can be used for any differentiable ranking function; the authors of <ref type="bibr" target="#b3">[4]</ref> chose to use a neural network. RankNet is straightforward to implement (the learning algorithm is essentially a modification of back propagation) and has proven very effective on large scale problems.</p><p>Naive Bayes The Naive Bayes model is a very simple and robust probabilistic model (see, for example, <ref type="bibr" target="#b12">[13]</ref>). Here Naive Bayes was used by treating the problem as a classification problem with two classes (relevant or not). The key Weight <ref type="table">Description  Frequency  answer  1  Number of times answer candidate was seedn  FrequencyDecayed  answer  1  Frequency weighted by search rank  IDF  answer  1  The Inverse Document Frequency of the answer string on the web  TF  answer  1  The Term Frequency over all retrieved tables for the question  TypeSim  answer  100  Is 1 if the answer is recognized</ref>  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Evaluation Metrics and Datasets</head><p>We now turn to the empirical evaluation of TQA. We first describe the task and associated evaluation metrics in Section 4.1, and then describe the datasets used for the experiments in Section 5.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Evaluation Metrics</head><p>To evaluate our system we use standard metrics in the question answering and information retrieval community:</p><p>• MRR: Traditionally, question answering systems are evaluated using MRR(Mean Reciprocal Rank) <ref type="bibr" target="#b14">[15]</ref>, which is defined as 1 over the rank position of the first correct answer.</p><p>• MRR at K: Users are expected to only consider a limited number of presented answers. Therefore, we will also report MRR at K, where K may vary from 1 to 100.</p><p>• Recall at K: In addition to MRR, we report Recall at K, i.e., the fraction of the questions for which a system returned a correct answer ranked at or above K.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Datasets and Collections</head><p>In order to have results comparable to the TREC competition <ref type="bibr" target="#b14">[15]</ref>, we split training and test question sets <ref type="table" target="#tab_2">(Table 2)</ref> following the TREC competition year. All the development and training was done on the questions from 2002, while the reported final results were on the (hidden) set of questions from TREC 2003 5 .  As a source of tables we used a partial crawl of the web of 100 million documents. Overall, more than 200 million tables were extracted from this sample. In order to understand the effect of scale on accuracy and performance of our system, we created sub-samples of 10, 50, 100, 150, and 200 million tables each. We will refer to these samples as 10M, 50M, 100M, etc.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Experimental Results</head><p>We now present our large-scale experimental evaluation of TQA. In order to measure the performance of our system we used the standard TREC <ref type="bibr" target="#b14">[15]</ref> datasets over two different years, 2002 and 2003. We first present experiments on the TREC 2002 dataset, which we used for developing and tuning our system. We then turn the hold-out TREC2003 set of questions (Section 5.2).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Results on TREC2002</head><p>First we show the benefit of large scale indexing of web content. <ref type="figure" target="#fig_4">Figure 4</ref> reports MRR and Recall at rank 100 over the TREC2002 question set for increasing collection size. As we can see, the accuracy improves dramatically  with larger table collections. At the full 200 million tables indexed, we obtain MRR at 100 of 0.32 and recall of 0.58. Note that these results are obtained by tuning on the TREC2002 set, and they primarily illustrate the point that many tables are required before even having a chance at a reasonable recall and precision. For example, the Recall (at 100) does not exceed 0.5 until we have indexed at least 100 million tables.</p><p>As we discussed, for some cases it might be useful to see the correct answer even if it is buried deeper than 1, 10, or 100 results down. <ref type="figure" target="#fig_5">Figure 5</ref> reports the MRR and Recall at K for K increasing from 1 to 1000. The recall at 1000 reaches 0.67, indicating that our retrieval algorithm is able to surface the answers, but the re-ranking is simply not able to push the correct answers to the top position. <ref type="figure" target="#fig_6">Figure 6</ref> reports relative effectiveness of different ranking methods on the training set. As we can see, the Heuris- tic scoring function performs as consistently the best, with a linear RankNet exhibiting slightly lower MRR. It appears that there simply was not enough training data for RankNet and Naive Bayes to be able to derive good feature weights.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Results on TREC2003</head><p>We now turn to evaluation on the test question set, TREC2003. <ref type="figure">Figure 7</ref> reports the MRR and Recall at K for varying K. As we can see, TQA achieves MRR of over 0.145, which would rank it in the top 15 of the state-ofthe-art QA systems that participated in the 2003 TREC QA competition. While our system is not quite competitive yet, the results are extremely encouraging as we are using a new approach, and an orthogonal collection of documents.</p><p>On this harder TREC 2003 benchmark, a state-of-the art traditional QA system developed by LCC, answered 200 questions correctly and 105 incorrectly. As <ref type="figure">Figure 8</ref> reports, of the questions that LCC got wrong, TQA returns the correct answer in the first rank position for more than 12% of these questions; and for more than 40% of these questions, TQA returns the right answer in top 100. The orthogonal nature of the TQA approach leads to different failure modes, and allows TQA to succeed where traditional state-of-the-art question answering approaches fail.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Conclusions and Future Work</head><p>We presented a first step towards using millions of tables and other implicitly structured content on the web for question answering. We have shown that our architecture scales to over 200 million tables extracted from over 100 million web pages, and demonstrated the promise and feasibility of our approach. Furthermore, our 100 million crawl sample comprises less than 1% of the surface web. In fact, some of the particularly useful table-rich sites such as http://about.com are only sparsely represented in our sample. Hence, the first direction in which we are extending this work is incorporating focused crawling techniques to improve the quality of tables in our collection.</p><p>The question answering approach we presented is not limited to the surface web. In fact, the "hidden" or "Deep" web also abounds in structured content. A promising direction is to extend these techniques to allow searching and retrieving pages from the deep web, which could then be processed using methods presented in this paper. Currently, we process and store each table (or table snippet) in isolation. Another promising direction is to adapt data integration techniques to do more aggressive integration at crawl time. Current data integration techniques are not likely to scale to millions of data sources and billions of possibly useful tables. However, for specific tasks such as question answering, a combination of information retrieval and data integration techniques presented in this paper appears a promising direction for research.</p><p>Our work is only a first step on a long road towards taming the immense knowledge embedded in semi-structured, and implicitly structured content on the web. This paper introduces a promising line of research that bridges question answering and the web mining, database and data integration domains.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>ACKNOWLEDGEMENTS:</head><p>The first author thanks Microsoft Corporation, where this research was performed, and Robert Ragno, for technical help and valuable discussions.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 . Three example snippets of the millions of tables that abound on the web: inventor timeline, explorer timeline, and presidential pets.</head><label>1</label><figDesc>Figure 1. Three example snippets of the millions of tables that abound on the web: inventor timeline, explorer timeline, and presidential pets.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 .</head><label>2</label><figDesc>Figure 2. Metadata associated with each extracted table: header, footer, page title, and the keyword content/vocabulary of the table.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 3 .</head><label>3</label><figDesc>Figure 3. Answering a question in the TQA framework</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 4 .</head><label>4</label><figDesc>Figure 4. MRR and Recall at 100 for varying number of indexed tables.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 5 .</head><label>5</label><figDesc>Figure 5. MRR and at K for varying K. (TREC2002, 200M tables, Heuristic reranking)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 6 . MRR and Recall at K for rerank- ing answers using Heuristics, Naive Bayes, Frequency, Frequency.Decayed, and a linear RankNet (</head><label>6</label><figDesc>Figure 6. MRR and Recall at K for reranking answers using Heuristics, Naive Bayes, Frequency, Frequency.Decayed, and a linear RankNet (TREC2002, 200M)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Figure 7 . MRR at K for reranking answers using Heuristics, Naive Bayes, Frequency, Frequency.Decayed, and a linear RankNet (TREC2003, 200M)Figure 8 .</head><label>78</label><figDesc>Figure 7. MRR at K for reranking answers using Heuristics, Naive Bayes, Frequency, Frequency.Decayed, and a linear RankNet (TREC2003, 200M)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2" validated="false"><head>Table 2 .</head><label>2</label><figDesc></figDesc><table>Training and Test question sets from 
TREC2002 and TREC2003 competitions, re-
spectively. 

</table></figure>

			<note place="foot" n="1"> http://inventors.about.com/library/weekly/aa121599a.htm 2 http://library.thinkquest.org/J002678F/timeline.htm 3 http://www.presidentialpetmuseum.com/whitehousepets-1.htm</note>

			<note place="foot" n="4"> Available at http://www.openlucene.net/.</note>

			<note place="foot" n="5"> TREC 2004 changed drastically from single questions to series of questions and so we do not use this data for this study.</note>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Snowball: Extracting relations from large plain-text collections</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Agichtein</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Gravano</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM DL</title>
		<imprint>
			<date type="published" when="2000" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">An analysis of the askmsr question-answering system</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Brill</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Dumais</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Banko</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">EMNLP</title>
		<imprint>
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Using grammatical relations, answer frequencies and the world wide web for trec question answering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Buchholz</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">TREC</title>
		<imprint>
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Learning to rank using gradient descent</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Burges</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Shaked</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Renshaw</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Lazier</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Deeds</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Hamilton</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Hullender</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ICML</title>
		<meeting><address><addrLine>Bonn, Germany</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Structured querying of web text: A technical challenge</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">J</forename><surname>Cafarella</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Re</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Suciu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Etzioni</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Banko</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">CIDR</title>
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">Semantic integration research in the database community: A brief survey</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Doan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Halevy</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2005" />
			<pubPlace>AI Magazine</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">Web-scale information extraction in knowitall</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Etzioni</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Cafarella</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Downey</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Kok</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A.-M</forename><surname>Popescu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Shaked</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Soderland</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Weld</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Yates</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2004" />
			<publisher>WWW</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">XIRQL: a query language for information retrieval in xml documents</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Fuhr</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Grobjohann</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGIR</title>
		<imprint>
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Answering definition questions with multiple knowledge sources</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Hildebrandt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Katz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Lin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">HLT/NAACL</title>
		<imprint>
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Efficient ir-style keyword search over relational databases</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Hristidis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Gravano</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Papakonstantinou</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">VLDB</title>
		<imprint>
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Retrieving answers from frequently asked questions pages on the web</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Jijkoun</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>De Rijke</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">CIKM</title>
		<imprint>
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title level="m" type="main">Scaling question answering to the web</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">C T</forename><surname>Kwok</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Etzioni</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">S</forename><surname>Weld</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2001" />
			<publisher>WWW</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">M</forename><surname>Mitchell</surname></persName>
		</author>
		<title level="m">Machine Learning</title>
		<imprint>
			<publisher>McGraw-Hill</publisher>
			<date type="published" when="1997" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<title level="m" type="main">Is question answering an acquired skill? In WWW</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Ramakrishnan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Chakrabarti</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Paranjpe</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Bhattacharyya</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Overview of the TREC 2003 question answering track</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">M</forename><surname>Voorhees</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Text REtrieval Conference</title>
		<imprint>
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Overview of the TREC 2005 question answering track</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">M</forename><surname>Voorhees</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Text REtrieval Conference</title>
		<imprint>
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
