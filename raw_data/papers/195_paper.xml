<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2019-03-26T16:33+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Making the Pyramid Technique Robust to Query Types and Workloads</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rui</forename><surname>Zhang Beng</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">National University of Singapore</orgName>
								<address>
									<postCode>117543</postCode>
									<country key="SG">Singapore</country>
								</address>
							</affiliation>
						</author>
						<author role="corresp">
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chin</forename><surname>Ooi</surname></persName>
							<email>ooibc@comp.nus.edu.sg</email>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">National University of Singapore</orgName>
								<address>
									<postCode>117543</postCode>
									<country key="SG">Singapore</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kian-Lee</forename><surname>Tan</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">National University of Singapore</orgName>
								<address>
									<postCode>117543</postCode>
									<country key="SG">Singapore</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Making the Pyramid Technique Robust to Query Types and Workloads</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>The effectiveness of many existing high-dimensional indexing structures is limited to specific types of queries and workloads. For example, while the Pyramid technique and the iMinMax are efficient for window queries, the iDistance is superior for kNN queries. In this paper, we present a new structure, called the P +-tree, that supports both window queries and kNN queries under different workloads efficiently. In the P +-tree, a B +-tree is employed to index the data points as follows. The data space is partitioned into subspaces based on clustering, and points in each sub-space are mapped onto a single dimensional space using the Pyramid technique, and stored in the B +-tree. The crux of the scheme lies in the transformation of the data which has two crucial properties. First, it maps each subspace into a hypercube so that the Pyramid technique can be applied. Second, it shifts the cluster center to the top of the pyramid , which is the case that the Pyramid technique works very efficiently. We present window and kNN query processing algorithms for the P +-tree. Through an extensive performance study, we show that the P +-tree has considerable speedup over the Pyramid technique and the iMinMax for window queries and outperforms the iDistance for kNN queries.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">Introduction</head><p>Multidimensional data are common in many applications. These applications have a wide range of needs. Window queries <ref type="bibr">1</ref> are common in CAD, medical image <ref type="bibr" target="#b0">[3]</ref> and GIS systems. For example, the Forest CoverType data set <ref type="bibr">[1]</ref> has 54 attributes, out of which 10 are quantitative. To analyze the data, (partial) window queries that specify some ranges of elevation, aspect, slope, cover type, etc are typical. KNN queries are common in content-based retrieval systems <ref type="bibr" target="#b7">[10,</ref><ref type="bibr" target="#b9">12]</ref>.</p><p>While a large number of indexing techniques have been proposed to improve performance, most of these techniques are not sufficiently robust for a wide range of queries. For example, the Pyramid technique <ref type="bibr" target="#b4">[7]</ref> and iMinMax <ref type="bibr" target="#b12">[15]</ref> are efficient for window queries, but perform less satisfactorily for kNN queries. On the other hand, metric-based schemes such as the iDistance <ref type="bibr" target="#b18">[21]</ref> are usually superior for kNN queries, but may not be usable for window queries. Moreover, these schemes typically perform well for certain workloads (data set size, dimensionality, data distribution, etc) and become inferior to sequential scan in other cases.</p><p>In this paper, we propose an index structure, called the P + -tree, that supports both window and kNN queries under different workloads (different data set size and dimensionality, different data distribution, queries with different selectivities and different shapes) efficiently. Our scheme is based on the Pyramid technique, which is primarily designed for hypercube-shaped window queries (where the query rectangle has equal sides in all dimensions). While the Pyramid technique is shown to be much better than the Hilbert R-tree <ref type="bibr" target="#b10">[13]</ref> and the X-tree <ref type="bibr" target="#b13">[16]</ref> for data sets of dimensionality larger than 8, it has three deficiencies: its performance is sensitive to the positions of the query hypercube; it is less effective for clustered data sets; and it is inferior for partial window queries. In these cases, a sequential scan over the data set may be more effective.</p><p>The basic structure of the P + -tree is essentially a B + -tree that indexes subspaces of points under a new transformation method. The data space is first partitioned into subspaces based on clustering. Next, points in each subspace are mapped onto a single dimensional space using the Pyramid technique, and stored in the B + -tree. To discriminate the points within each cluster, they are transformed into non-overlapping regions in the single dimensional space. The crux of the scheme lies in the choice of the transformation that has two crucial properties. First, it maps each subspace into a hypercube so that the Pyramid scheme can be applied. Second, it shifts the cluster center to the top of the pyramid, which is the case that the Pyramid technique works very efficiently.</p><p>The rest of the paper is organized as follows: Section 2 reviews some related work. In section 3, we examine the Pyramid technique, identify its deficiencies, and discuss how to overcome them. Then we present the P + -tree in section 4 and query processing schemes in section 5. In section 6, we present the results of a performance study of the P + -tree. Section 7 concludes this paper.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Related Work</head><p>The R-tree <ref type="bibr" target="#b8">[11]</ref> and its variations such as the R*-tree <ref type="bibr" target="#b1">[4]</ref> and the X-tree <ref type="bibr" target="#b13">[16]</ref> were first proposed to manage multidimensional data. They work well with low-dimensional data. But their performance deteriorates as the dimensionality increases, and become unacceptable in high-dimensional space due to large amount of overlap. This phenomenon is called the curse of dimensionality.</p><p>Indexing methods based on transformation were proposed to make window query processing in medium-and high-dimensional space more efficient. Among them, the Pyramid technique <ref type="bibr" target="#b4">[7]</ref> is notable. In the Pyramid technique, the high-dimensional data points are transformed into onedimensional values and the transformed values are indexed by the classic B + -tree. Experiments show that the Pyramid technique outperforms the Hilbert R-tree <ref type="bibr" target="#b10">[13]</ref> and the X-tree <ref type="bibr" target="#b13">[16]</ref>. However, the Pyramid technique is primarily designed for hypercube shaped queries over uniform data. The poorer performance to handle other cases limits its usefulness in real applications.</p><p>The iMinMax <ref type="bibr" target="#b12">[15]</ref> is another indexing scheme intended for high-dimensional window query based on a different transformation method. θ in the iMinMax is a tuning parameter which makes it adaptive to data distributions. As such, it performs better than the Pyramid technique when the data is skewed. Since θ is a global parameter, the iMinMax works well when the number of natural clusters is small.</p><p>On kNN queries, the SS-tree <ref type="bibr" target="#b17">[20]</ref>, SR-tree <ref type="bibr" target="#b11">[14]</ref> and Xtree were designed to reduce the effects of high dimensionality by using different page regions or bigger node size. The M-tree <ref type="bibr" target="#b5">[8]</ref> was proposed for the generic metric space. The IQ-tree <ref type="bibr" target="#b3">[6]</ref> compresses the leaf nodes and the A-tree <ref type="bibr" target="#b14">[17]</ref> uses virtual bounding rectangles to approximate data objects. However, according to the analysis in <ref type="bibr" target="#b16">[19]</ref>, sequential scan may be the best method especially for uniform data in very high-dimensional space. And the VA-file was proposed to accelerate sequential scan by vector approximation. More recently, the iDistance <ref type="bibr" target="#b18">[21]</ref> adopts the transformation strategy on kNN search and BOND <ref type="bibr" target="#b6">[9]</ref> uses vertical fragmentation to reduce the I/O cost of frequently observed query patterns.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">A Closer Look at the Pyramid Technique</head><p>The Pyramid technique divides the d-dimensional data space into 2d pyramids that share the center point of the space as their top, and the (d-1)-dimensional surfaces of the space are their bases <ref type="figure">(Figure 1)</ref>. Each pyramid has a pyramid number i according to some rule. The distance between a point v and the center in dimension i</p><formula xml:id="formula_0">(or i − d if i ≥ d)</formula><p>is defined as the height of the point, h v . Then, the pyramid value of v is defined as the sum of its pyramid number i and its height h v .</p><formula xml:id="formula_1">pv v = (i + h v ) 1 d 0 d P 3 P 0 P 2 P 1 h v v Figure 1</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>. The Pyramid technique</head><p>This pyramid value is the key indexed by a B + -tree. A query rectangle corresponds to a height range in an intersected pyramid. Those data points of height within the height range are accessed. show the region accessed when the query rectangle is located near the center and corner of the data space, respectively (the dark region is the query rectangle; the lighter shaded region plus the dark region is the region accessed by the query rectangle). For uniform data, the area (or volume) of the region accessed is proportional to the number of data accessed. When the query rectangle is near the space center, most data accessed is in the answer set, so the index is efficient. However, when the query rectangle is near the space corner or edge, the data accessed is many times those in the answer set, which makes the index quite inefficient. In other words, the effectiveness of the Pyramid technique is sensitive to the positions of the query rectangle. The space center is a "good position", while the space corner and edge are "bad positions". The difference in the access cost of these two cases is even larger in highdimensional space. A query at a bad position will cause significant portion of the data to be accessed. The response time for processing such a query using the Pyramid technique may be longer than that of a sequential scan since sequential scan is much faster than random access of the data pages.</p><p>The performance of the Pyramid technique is also dependent on the distribution of the data set. If the data is clustered near the space corner, most queries would also be there since the distribution of queries often follows the distribution of data. This is the reason why the Pyramid technique may be worse than sequential scan for clustered data. Finally, the Pyramid technique is not efficient for nonhypercube-shaped queries. <ref type="figure" target="#fig_1">Figure 3</ref> shows the region accessed by non-hypercube-shaped queries. If the query rectangle is in position a, the cost is still acceptable. But if the query rectangle is in position b, the area of the region accessed is many times the area of the query rectangle. This also makes the Pyramid technique inefficient.</p><p>Our proposed P + -tree attempts to address these deficiencies. Moreover, due to its highly optimized space division and data transformation strategies, the P + -tree is also efficient for kNN queries.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">The P + -tree</head><p>The basic idea of the P + -tree is to divide the space into subspaces and then apply the Pyramid technique in each subspace. To realize this, we first divide the space into clusters which are essentially hyperrectangles. We then transform each subspace into a hypercube so that we can apply the Pyramid technique on it. At the same time, the transformation makes the top of the pyramids located at the cluster center. Assuming that real queries follow the same distribution as data, most of the queries would be located around the top of the pyramids, that is, the "good position". Even if some queries may be located at the corner or edge of the cluster and therefore causes a large region to be accessed, the data points accessed are not prohibitively large because most of the data points are gathered at the cluster center. In addition, the region accessed by a query is significantly reduced by space division. Thus, the P + -tree can alleviate the inefficiencies of the Pyramid technique.</p><p>We note that although we cluster the space into subspaces, our scheme also works for uniform data since uniform data is a special case of clustered data. While uniform data does not benefit from the transformation, dividing the space into subspaces is still an effective mechanism for performance improvement.</p><p>To facilitate building the P + -tree and query processing, we need an auxiliary structure called the space-tree, which is built during the space division process. The leaf nodes of the space-tree store information about the transformation. We will first introduce the data transformation, so that readers know what information is stored. Then, we present the space division process. At last, we show how the P + -tree is constructed.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Data Transformation</head><p>Our transformation is motivated by the extended Pyramid technique <ref type="bibr" target="#b4">[7]</ref>, but ours is more general. As mentioned above, we have two goals: 1) transform a subspace into a unit hypercube, so that the Pyramid technique can be applied; 2) move the cluster center to the top of the pyramids, that is, the center of the unit hypercube.</p><p>A subspace is a hyperrectangle. Formally, a subspace S in a d-dimensional space is a d-dimensional interval:</p><formula xml:id="formula_2">[s 0min , s 0max ], [s 1min , s 1max ], ..., [s d−1min , s d−1max ].</formula><p>A window query Q is also a d-dimensional interval:</p><formula xml:id="formula_3">[q 0min , q 0max ], [q 1min , q 1max ], ..., [q d−1min , q d−1max ].</formula><p>Let (c 0 , c 1 , ..., c d−1 ) be the cluster center of the subspace. Let T be a transformation on a subspace S. T consists of d functions, t 0 , t 1 , ..., t d−1 . Each t i is a function on dimension i of S. To achieve the two goals mentioned in the last paragraph, T should satisfy the following conditions:</p><formula xml:id="formula_4">CD1. t i is a bijection from [s i min , s i max ] to [0,1], that is, domain of t i is [s i min , s i max ]; range of t i is [0,1]; and t i is a one-to-one mapping. CD2. ∀x 1 , x 2 ∈ [s i min , s i max ], if x 1 &lt; x 2 , then t i (x 1 ) &lt; t i (x 2 ). CD3. t i (c i ) = 0.5</formula><p>Theorem 1 Let Q be a window query on subspace S, and T be a transformation on S that satisfies CD1 and CD2. Let</p><formula xml:id="formula_5">v(v 0 , v 1 , ..., v d−1 ) be a point in S. If v ∈ Q, then T (v) ∈ T (Q) and vice versa.</formula><p>Proof See Appendix A.</p><p>Theorem 1 essentially says that the answer, say A, to a window query Q in the original space S can be obtained by operating in the transformed space T (S). In other words, let the answer of the transformed query T (Q) in T (S) be A . Then, A = T −1 (A ).</p><p>In fact, we do not need to find the data points in A . We only need to identify which points in the original space that points in A correspond to. So we store points in the original data space with the pyramid values of the transformed points as keys in the leaf nodes of a B + -tree. This is basically the P + -tree. Now we need to find a transformation T that satisfies CD1, CD2 and CD3. We construct the function set as follows:</p><formula xml:id="formula_6">t i (x) = (a i · x − b i ) e i 0 ≤ i &lt; d<label>(1)</label></formula><p>From CD1 and CD2, we can easily derive that</p><formula xml:id="formula_7">t i (s imin ) = 0 t i (s i max ) = 1 Plus CD3, t i (c i ) = 0.5</formula><p>By solving the above three equations we will obtain:</p><formula xml:id="formula_8">a i = 1 s i max − s i min (2) b i = s i min s i max − s i min (3) e i = − 1 log 2 (a i · c i − b i )<label>(4)</label></formula><p>As we shall see shortly, in our space division scheme, we will guarantee that s imax &gt; c i &gt; s imin , so none of the divisors is 0. In order to process the query on the transformed space T (S), we need to record the transformation functions, that is, a i , b i , e i . This information is stored in the leaf nodes of the space-tree.</p><p>Note that any functions that satify CD1, CD2 and CD3 can be used as T .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Space Division</head><p>As mentioned, we divide the space into clusters, but we want to keep the shape of the subspace as hyperrectangle. This is because it would be computationally expensive to determine whether a window query (which is also a hyperrectangle) intersects a subspace if the subspace is a sphere or other polygon. To achieve this, we first use a clustering method to divide all the data into two clusters. Second, we divide the space into two subspaces along the dimension in which the two cluster centers differ greatest. We apply the above two steps to subspaces recursively. Moreover, for simplicity, whenever we split a subspace further, we divide all the subspaces. So the number of subspaces is always an integral power of 2. The Order of division is defined as the times that we divide the space and we use Od to denote it. That is, the number of subspaces is 2 Od . Od is a userdefined parameter when dividing the space. We study the effects of Od in Section 6.</p><p>Since a subspace is divided into two in each division operation, we can use a binary tree, which we call the spacetree, to record the information of the division process. And later, we can employ it to determine whether a subspace and a query intersects.</p><p>The space-tree is similar to the k-d tree <ref type="bibr" target="#b2">[5]</ref>, but we store the transformation information instead of data points in the leaf nodes. In the space-tree, a nonleaf node contains 4 items: DD, DV, P L, P R. DD is an integer denoting the dimension in which the space is divided. DV is a real number denoting the value the space is divided. P L and P R are pointers pointing to the two subspaces. A leaf node of the space-tree also contains 4 items:  <ref type="figure">Figure 4</ref>.</p><formula xml:id="formula_9">SN o, a[d], b[d], e[d].</formula><p>The space-tree file is very small, typically ten to several hundred KiloBytes. Thus, it can be kept in memory to accelerate searching. The space division algorithm is outlined below.</p><p>Algorithm Space Division SD1 space 0 = the original data space. SD2 for (cdt = 0; cdt &lt; Od; cdt + +) SD3 for (n = 0; n &lt; 2 cdt ; n + +) SD4</p><p>Divide all data in space n into two clusters, the cluster centers are CL and CR SD5</p><p>The dividing dimension DD = m, where</p><formula xml:id="formula_10">|CL m − CR m | = M ax(|CL j − CR j |, 0 ≤ j &lt; d). SD6 Dividing value DV = CL DD +CR DD 2 .</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>SD7</head><p>Divide space n into two subspaces SL and SR according to DD and DV, that is, for each v ∈ space n, if v DD &lt; DV , then v ∈ SL; else v ∈ SR.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>SD8</head><p>Assign space numbers to the subspaces.</p><formula xml:id="formula_11">SN o of SL is 2n; SN o of SR is 2n + 1. SD9</formula><p>Record S i min and S i max of SL and SR.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>SD10</head><p>Insert a nonleaf node to space-tree. //Now we have divided the space Od times and have //2 Od subspaces with SN o from 0 to 2 Od − 1. SD11 for (n = 0; n &lt; 2 Od ; n + +) SD12 Calculate center of all points in space n, so we get <ref type="formula">(2)</ref> (3) and (4), 0 ≤ i &lt; d. SD14 Insert a leaf node to space-tree.</p><formula xml:id="formula_12">c i , 0 ≤ i &lt; d. SD13 Calculate a i ,b i ,e i according to Equation</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>End Space Division</head><p>In the algorithm, cdt means current dividing time. There are a plethora of clustering algorithms, any one can be used in SD4. In our study, we used the Bisecting K-means algorithm as described in <ref type="bibr" target="#b15">[18]</ref>. In SD8, we use a flag to make the SN os of the subspaces effective after cdt increases so that they would not affect other subspaces in the current round of space division.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Construction of the P + -tree</head><p>A P + -tree is basically a B + -tree where the data records with their keys are stored in the leaf nodes of the P + -tree. Algorithm Build P + -tree BP1 for (n = 0; n &lt; 2 Od ; n + +) BP2</p><p>Read the leaf node for space n from space-tree</p><formula xml:id="formula_13">BP3 for each point v in space n BP4 for (i = 0; i &lt; d; i + +) BP5 v i = (a i · v i − b i ) e i BP6 key=n · 2d+pv(v ) BP7</formula><p>BtreeInsert(v, key); End Build P + -tree</p><p>In the algorithm, pv( ) is the function to calculate pyramid value as defined in Section 3.</p><p>The above algorithm builds a P + -tree after the space has been split, so we know which subspace a point belongs to. If we insert a point or delete a point after the P + -tree is built, we need to traverse the space tree to decide which subspace a point belongs to by the following algorithm.</p><p>Algorithm DetermineSubspace(node) DS1 if node is nonleaf node DS2</p><p>Read DD,DV ,P L,P R from node.</p><formula xml:id="formula_14">DS3 if q DD &lt; DV DetermineSubspace(P L); DS4 if q DD ≥ DV DetermineSubspace(P R); DS5 if node is leaf node DS6</formula><p>return node End DetermineSubspace .</p><formula xml:id="formula_15">key = SN o · 2d+pv(v )</formula><p>where</p><formula xml:id="formula_16">v i = (a i · v i − b i ) ei , 0 ≤ i &lt; d</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Query Processing</head><p>In this section, we shall look at how the P + -tree can be used to support window and kNN queries.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Window Queries</head><p>In the P + -tree, window queries are processed in two logical phases. Let Q be a window query. In the first phase, we determine the clusters that are intersected by Q. In this way, other clusters can be pruned. This can be easily done by traversing the space-tree. As the space-tree is traversed from the root, we check which cluster is intersected by Q based on the split dimension and split value, and if one is intersected, we examine its child nodes recursively.</p><p>The second phase operates on an intersected subspace S. First, we need to transform the query to T (Q). Then we process query T (Q) on the transformed subspace T (S) using the Pyramid technique. Specifically, the portion of T (Q) within each subspace is mapped to intervals of the form [h low , h high ]; if pyramid i is intersected by the query, a B + -tree range query function is invoked to find those candidate points for T (Q). Because these candidate points are the transformed points, they correspond to the original points which are candidates for Q according to Theorem 1. So we only need to check whether the original candidate points are within Q to get our final answers.</p><p>We note that given a subspace S, some part of Q may be outside of S. In this case, T (Q) is outside of the unit hypercube accordingly. We can just cut off the range of T (Q) that is greater than 1 or less than 0 and then we get the part within the unit hypercube, which corresponds to the part of Q within S. The window search algorithm is presented below. </p><formula xml:id="formula_17">p i , Q ) TW11 determin range(p i , Q ,h low , h high ) TW12 candidates=BtreeRangeSearch( SN o · 2d + i + h low , SN o · 2d + i + h high ) TW13</formula><p>for each point v in candidates TW14</p><p>Check if v is within Q, if yes, add it to the answer set.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>End TraverseSpaceTreeWindow</head><p>In the algorithm, intersect() is the function to determine whether a pyramid is intersected by a query rectangle. As we mentioned in Section 3, a query rectangle corresponds to a height range in an intersected pyramid. determin range() is the function to determine the height range [h low , h high ] according to the pyramid and query. BtreeRangeSearch() is a standard B + -tree range search function to retrieve all the records with the keys in the given range.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">KNN Queries</head><p>To find the kNN of a point x, we initiate a hypercubeshaped window query centered at x with an initial side length, which is typically small. Then we increase the side length gradually until we are sure that the kNNs are found. Here we also traverse the space-tree, but the processing of each intersected subspace is different from that of an window query. When we enlarge the query rectangle, the center part of it has been searched the last time. In order to avoid searching it again, <ref type="bibr">we</ref>  </p><formula xml:id="formula_18">+ i + h low ) TK14 lp[SN o · 2d + i] = lnode TK15 rp[SN o · 2d + i] =SearchUp( lnode, SN o · 2d + i + h high ) TK16 f lag[SN o · 2d + i] =TRUE TK17 else TK18 if lp[SN o · 2d + i] not NULL TK19 lp[SN o · 2d + i] =SearchDown( lp[SN o · 2d + i] → lef tnode, SN o · 2d + i + h low ) TK20 if rp[SN o · 2d + i] not NULL TK21 rp[SN o · 2d + i] =SearchUp( rp[SN o · 2d + i] → rightnode, SN o · 2d + i + h high ) End TraverseSpaceTreeKNN Algorithm SearchUp(node, limit) SU1 for each point v in node SU2 if |A| == k SU3 v f arthest = farthest(A, x) SU4 if distance(v, x) &lt;distance(v f arthest , x) SU5 A = A − v f arthest SU6 A = A ∪ v SU7 else SU8 A = A ∪ v SU9</formula><p>if key of the last point in node &lt; limit SU10 node =SearchUp(node → rightnode, limit) SU11 if end of this pyramid is reached SU12 node=NULL SU13 else node=NULL SU14 return node End SearchUp Among all the points in A, farthest(A, x) returns the farthest one to x. distance() returns the distance between two points. LocateLeaf (key) returns the address of the leaf page which contains the key. SearchUp(lnode, limit) starts searching from lnode and search its right sibling leaf node recursively until the key in the node reaches the limit. At the same time, the last node accessed is returned and stored in rp[]. SearchDown() is similar to SearchUp(), so we only present the algorithm of SearchUp().</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Performance Study</head><p>In this section, we present results from an extensive performance study to evaluate the P + -tree for window queries and kNN queries under a wide range of workloads. We have generated synthetic clustered and uniform data sets of different sizes varying from 100,000 to 2,000,000 points and of different dimensionality. We also used two real data sets. Besides, we varied the selectivity and shape of queries. For each experiment setting, we run 200 queries and use the average number of page accesses or average total response time as the performance metric. The distribution of the queries are the same as the data. All experiments are run on a computer with Pentium(R) 1.6GHz CPU and 256MB RAM. The page size is 4096 Bytes.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.1">Window queries</head><p>For window queries, the Pyramid technique has been shown to outperform the X-tree and the Hilbert-R-tree <ref type="bibr" target="#b4">[7]</ref> and the iMinMax has been shown to be superior over the Pyramid technique for skewed data <ref type="bibr" target="#b12">[15]</ref>. Thus, as references, we compare the P + -tree with these two methods and sequential scan.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.1.1">Synthetic Clustered Data</head><p>In this set of experiments, we study the P + -tree for window queries on clustered data. We have done experiments on data sets with different dimensionality and sizes. As default, we use the data set with 24-dimensions and 1,000,000 data points. The data we use have 4 natural clusters. <ref type="figure">Figure 6</ref> shows a 2-dimensional image of the data distribution. For every series of experiments, the iMinMax is tuned and the optimal θ is used.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Figure 6. Data distribution of clustered data</head><p>Effects of Order of Division In the first experiment, we would like to tune the P + -tree to determine the optimal order to use for division. Intuitively, the larger the number of subspaces, the smaller will the subspaces be. On the one hand, this means that we can prune a larger portion of the data space that does not intersect the query. On the other hand, the overhead of accessing the subspaces increasesfor each accessed subspace, we need to access at least 1 leaf node, but each page may only contain a few points in the answer set. <ref type="figure">Figure 7</ref> shows the effects of different Od as we vary the selectivities of queries. We note that a large Od is superior over a small Od at low selectivities but a small Od outperforms a large Od at high selectivities. While there is an optimal Od for different selectivities, the relative difference between them is not big, so a moderate one is fine.</p><p>In view of these results, we used 6 as the default Od of the P + -tree.</p><p>Effects of <ref type="figure" target="#fig_8">Selectivity Figures 8 and 9</ref> show the performance comparison for queries of different selectivities. The number of page accesses of the P + -tree is 20% to 40% that of the Pyramid Technique. The iMinMax performs as well as the Pyramid technique when the selectivity is low, but better than the Pyramid technique for high selectivity. In terms of total response time, the Pyramid technique and the iMinMax are better than sequential scan at low selectivities but worse at high selectivities. The P + -tree is always the best and achieves a speedup factor of 2.4 to 2.8 over the Pyramid Technique and iMinMax, and 1.7 to 4.9 over sequential scan. It is reasonable that as selectivity increases, the number of page accesses becomes larger. When the number of page accesses of these indexing schemes increase to some point, the total response time exceeds that of the sequential scan, because sequential access of the disk is much faster than random accesses using the indexing structures. In the P + -tree, the space division effectively prune the subspace not intersected by the query rectangle and false positives in the intersected subspaces are greatly reduced by the data transformation. Therefore, the number of page accesses are kept at a very low level even in the case of a high selectivity.</p><p>Due to space limitations, for all subsequent experiments, we shall only present the total response time results since it reflects more accurately the relative performance of the various schemes. However, we note that the relative performance of the schemes in term of the number of page accesses are largely the same.</p><p>Effects of Data set size In these experiments, we vary the data set sizes from 100,000 to 2,000,000 points. As shown in <ref type="figure">Figure 10</ref>, the Pyramid Technique and the iMinMax outperform sequential scan for small data sets. However, as the data set size increases, their performance deteriorate quickly to the extent that they were outperformed by sequential scan. The P + -tree has a speedup factor of 3.8 to 5.1 over the Pyramid Technique and the iMinMax, and 3.7 to 6.1 over sequential scan. The results show that the P + -tree scales well with data set sizes.</p><p>Effects of Dimensionality To see the effects of dimensionality on the P + -tree, we also experimented with 8, 16, 24, 32, 64 and 128 dimensional data. In these experiments, we fixed the selectivities of the queries to 2%. The results in <ref type="figure">Figure 12</ref> clearly show that the P + -tree does not suffer from the curse of dimensionality. It has a speedup factor of 3.2 over the Pyramid Technique and iMinMax, and always outperforms sequential scan.</p><p>Effects of Number of clusters All the above experiments are tested on data that have 4 natural clusters. To see how the number of clusters affects the performance of the techniques, we also did experiments on data having 2 and 3 natural clusters, which follow the distribution as shown in <ref type="figure">Figure 11</ref>. <ref type="figure" target="#fig_1">Figures 13 and 14</ref> show the results.</p><p>The P + -tree still performs best, but we found that the performance improvement increases as the number of clusters increases. Comparing the speedup factor of the P + -tree over the Pyramid Technique for the queries of selectivity 2%, the speedup factor for 2-, 3-and 4-cluster data is 2.2, 2.7 and 2.8 respectively. On the other hand, the iMinMax performs better compared to the Pyramid Technique as the number of clusters decreases. This is because θ in the iMinMax is a global parameter, and the tuning of θ would be more effective for data with fewer clusters and are very skewed. As shown, even after tuning, the P + -tree outperforms the iMinMax by a wide margin. <ref type="figure">Figure 15</ref> shows the performance comparison for queries with the selectivity of about 0.05% on data of different dimensionality. As shown, the P + -tree is slightly better than the Pyramid technique and the iMinMax, with a smaller speedup factor over them than in the clustered data case.    This is because the Pyramid technique is already good for uniform data. <ref type="figure">Figure 16</ref> shows the performance comparison over varying query side length. The speedup factor of the P + -tree over the Pyramid technique and the iMinMax is large at very small or very large side lengths while they are very close at medium side length. This is because the Pyramid technique is primarily designed and optimized for queries of medium side length on uniform data, but it does not work well with very small or very big sized queries. The P + -tree overcomes the deficiencies and performs better than sequential scan even for very large query rectangles.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.1.2">Synthetic Uniform Data</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.1.3">Partial Window Queries</head><p>All the queries tested so far are hypercube shaped. Now we test non-hypercube-shaped queries. Partial window queries are the worst case of non-hypercube-shaped queries but frequently used in real applications. So we use them in our experiments as representatives of non-hypercubeshaped queries. In this experiment we use 24-dimensional data and only set range limits in 6 dimensions, that is, the other 18 dimensions of the queries are full domains. <ref type="figure" target="#fig_8">Fig- ures 17 and 18</ref> show the performance on clustered data and uniform data respectively.</p><p>For clustered data, the P + -tree has a speedup factor of 3 over the Pyramid technique and 2 to 4.6 over sequential scan. The iMinMax is better than the Pyramid technique when selectivity is low but deteriorate rapidly and outperformed by the other techniques at a higher selectivity. The Pyramid technique is always worse than sequential scan.</p><p>For uniform data, the total response time of the Pyramid technique and the iMinMax is far more than that of sequential scan. The P + -tree has a speedup factor of 2.4 to 4.5 over the Pyramid technique and the iMinMax. The P + -tree also outperforms the sequential scan. Its performance approaches sequential scan as selectivity increases.</p><p>The Pyramid technique and the iMinMax are inefficient for partial window queries because by their indexing schemes, they can hardly prune data if there are full domains in the winodw query. But the P + -tree can still prune subspaces because of the space division.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.1.4">Real Data</head><p>We have tested the techniques on the following two real data sets:</p><p>1) Forest CoverType (10 dimensions) The forest cover type data set for 30 x 30 meter cells is obtained from the US Forest Service (USFS) Region 2 Resource Information System (RIS) data. The original data set has 54 attributes, among which 10 are quantitative such as Elevation, Aspect and Slope. We extracted these 10 quantitative attributes and normalized the values to the range <ref type="bibr">[0,</ref><ref type="bibr">1]</ref>. The number of records is 581,012. The original data set is available online at <ref type="bibr">[1]</ref>.</p><p>2) Color Histogram (32 dimensions) This data set contains image features extracted from a Corel image collection. HSV color space is divided into 32 subspaces (32 colors: 8 ranges of H and 4 ranges of S). And the value in each dimension in a ColorHistogram of an image is the density of each color in the entire image. The number of records is 68,040. This data set is available online at <ref type="bibr">[2]</ref>.</p><p>These two data sets are of medium-and high-dimensionality respectively. We set Od as 3 for these two data sets because of their smaller sizes. <ref type="figure" target="#fig_9">Figures 19 and 20</ref> show the comparison on total response time. Horizontal axes of the figures represent the number of attributes specified in the partial window queries. The larger the number of attributes specified in the window queries, the fewer the data points in the answer set and therefore the shorter the time needed for processing the queries. In most cases, the P + -tree has a speedup factor of 2 to 5 over the other techniques. These figures further confirm the practical impact of the P + -tree.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.2">KNN Queries</head><p>Experiments in <ref type="bibr" target="#b14">[17]</ref> show that the A-tree outperforms the SR-tree and the VA-file, while <ref type="bibr" target="#b18">[21]</ref> shows that the iDistance outperforms the A-tree. So we compared the P + -tree with the iDistance. Moreover, for kNN queries, sequential scan is shown to be more efficient for uniform data <ref type="bibr" target="#b16">[19]</ref>. Thus, we shall only consider synthetic clustered data and real data. Two synthetic data sets are used: 16-dimensional and 32-dimensional, data set size 500,000, 4 natural clusters. The real data set is the 32-dimensional Color Histogram data set. <ref type="figure" target="#fig_14">Figure 21</ref> shows the result for 16-dimensional clustered data set. The P + -tree has a speedup factor of up to 1.6 over the iDistance and both of them are much better than sequential scan. Although kNN search of the P + -tree is based on window search, it benefits from the highly efficient space division and data transformation strategies. The iDistance uses hypersphere-like clusters. A problem is that in highdimensional space, the radius of each cluster becomes very      large. This results in almost every cluster being intersected by a kNN query sphere, so the effect of pruning may not be good. In this case, a simple division in the space may prune unnecessary access more effectively. <ref type="figure" target="#fig_0">Figures 22 and  23</ref> show the results for 32-dimensional clustered data set and the color histogram data set. The results show similar trend, but the speedup of the iDistance and the P + -tree over sequential scan is smaller. The reason is that for higher dimensionality, indexing schemes generally become less efficient compared to their performance in lower dimensionality. In the experiments shown in <ref type="figure" target="#fig_1">Figure 23</ref>, we used smaller values of k because the color histogram data set is relatively small.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.3">On Updates</head><p>The space division process is based on clustering the entire data set. If new data points are inserted or deleted from the data set, the cluster center of the subspace may shift from the top of the pyramids. While this does not affect the correctness of the P + -tree, it may affect its efficiency. To evaluate how updates affect the performance of the P + -tree, we have done the following experiments. We use a synthetic 24-dimensional clustered data set with 500,000 points. We first construct the P + -tree using 80% (400,000) of the data. We run some window queries and record the average total response time. Then we insert 5% of the data to the database and re-run the same queries. This process is repeated until the other 20% of the data are inserted. We keep the query constant. On the other hand, we run the queries on the P + -tree built when there are 85%, 90%, ... of data. That is, the optimal P + -tree with no updates. We compare the total response time of the two as shown in <ref type="figure" target="#fig_17">Figure 24</ref>. As expected, the difference between them becomes larger as more data are inserted, but the largest difference is within 20% even in the case of 20% newly inserted data. Considering that the P + -tree typically outperforms other techniques by the factor of 2 to 4, this deterioration is acceptable. Experiments on kNN queries have similar results. Of course, we expect the performance of the P + -tree to be affected greatly eventually if there are too many updates. In this case, we need to rebuild the P + -tree. Fortunately, rebuilding the P + -tree is not quite expensive since bulk loading of B + -tree still applies. Note that any clustering method can be used in SD4 of the Space Division Algorithm. This means that we can use approximate but fast methods to obtain suboptimal clusters to reduce the time for space division.</p><p>An interesting phenomenon is that building a P + -tree is much faster than building a Pyramid-tree or an "iDistancetree". The reason is that, space division is in effect a clustering process. Moreover, in the P + -tree, we add a number SN o·2d to the pyramid values of points in the subspace. So keys for points from different subspaces are scattered. Data points in the same subspace have close keys and are inserted into the tree continuously. A single page I/O is needed for many continuous insertions. Therefore, many disk accesses are avoided. In our experiments, the time saved in building the P + -tree offsets most of the time used in space division.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.">Conclusion</head><p>In this paper, we have proposed the P + -tree for processing multi-dimensional queries. First, we divide the space into subspaces that are subsequently transformed so that the Pyramid technique can be applied in each subspace. The transformation function also moves the center of the points in a subspace to the top of pyramids. A major strength of the P + -tree is that it works well for various workloads. Extensive experiments demonstrate that the P + -tree has considerable speedup over existing indexing methods for both window queries and kNN queries.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 2 . (a) Query rectangle near the center (b) Query rectangle near the cornerFigure 2 (</head><label>22</label><figDesc>Figure 2. (a) Query rectangle near the center (b) Query rectangle near the corner Figure 2(a) and (b) show the region accessed when the query rectangle is located near the center and corner of the data space, respectively (the dark region is the query rectangle; the lighter shaded region plus the dark region is the region accessed by the query rectangle). For uniform data, the area (or volume) of the region accessed is proportional to the number of data accessed. When the query rectangle is near the space center, most data accessed is in the answer set, so the index is efficient. However, when the query rectangle is near the space corner or edge, the data accessed is many times those in the answer set, which makes the index</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 3 .</head><label>3</label><figDesc>Figure 3. Non-hypercube-shaped query</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head></head><label></label><figDesc>SN o is an integer ranging from 0 to 2 Od − 1, which iden- tifies a subspace. SN o is assigned to each subspace when dividing the space. a[d], b[d] and e[d] are three arrays which store the transformation information of subspace SN o; they are calculated according to Equations (2), (3) and (4). Fig- ure 4 shows a 2-dimensional example. Here, Od = 2. Fig- ure 5 is the space-tree for the space division in</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 4 . Space division and data transforma-Figure 5 .</head><label>45</label><figDesc>Figure 4. Space division and data transformation</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head></head><label></label><figDesc>In the P + -tree, we apply the Pyramid technique in each sub- space. Under the Pyramid technique, pyramid values of points in pyramid i cover the interval [i, i + 0.5]. There are 2d pyramids from pyramid 0 to pyramid 2d − 1, so pyramid values of all points are within the interval [0, 2d). To dis- criminate points from different subspaces, we add SN o · 2d to the pyramid value of a point in subspace SN o and the result is the key for the point.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head></head><label></label><figDesc>The leaf node returned by the DetermineSubspace algo- rithm contains the SN o, a i , b i , e i of the subspace. Then we can calculate the key of the point v(v 0 , v 1 , ..., v d−1 )</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Algorithm Window Search WS1:</head><label></label><figDesc>TraverseSpaceTreeWindow(space-tree root); End Window Search Algorithm TraverseSpaceTreeWindow(node) TW1 if node is nonleaf node TW2 Read DD,DV ,P L,P R from node. TW3 if q DD &lt; DV TraverseSpaceTreeWindow(P L); TW4 if q DD ≥ DV TraverseSpaceTreeWindow(P R); TW5 if node is leaf node TW6 Read SN o and transformation information T TW7 Q = T (Q); TW8 Cut off the part of Q that is outside unit hypercube TW9 for each pyramid in space SN o TW10 if intersect(</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head></head><label></label><figDesc>Figure 7. Effects of Order of Division</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Figure 8 . Page accesses vs.</head><label>8</label><figDesc>Figure 8. Page accesses vs. Selectivity</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Figure 9 . Total response time vs.</head><label>9</label><figDesc>Figure 9. Total response time vs. Selectivity</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head>Figure 10 . Effects of Data set sizeFigure 11 . Data distribution of different num- ber of clusters</head><label>1011</label><figDesc>Figure 10. Effects of Data set size</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_11"><head>Figure 13 . Effects of Number of clusters,Figure 14 . Effects of Number of clusters,</head><label>1314</label><figDesc>Figure 12. Effects of Dimensionality</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_12"><head>Figure 15 . Effects of Dimensionality,Figure 16 . Total response time vs. Side length of query hypercube,Figure 17 . Partial window queries on clus-</head><label>151617</label><figDesc>Figure 15. Effects of Dimensionality, Uniform data</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_13"><head>Figure 19 . Forest CoverType data,</head><label>19</label><figDesc>Figure 19. Forest CoverType data, Window queries</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_14"><head>Figure 21 . Synthetic 16-dimensional clus- tered data,</head><label>21</label><figDesc>Figure 21. Synthetic 16-dimensional clustered data, kNN queries</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_15"><head>Figure 22 . Synthetic 32-dimensional clus- tered data,</head><label>22</label><figDesc>Figure 22. Synthetic 32-dimensional clustered data, kNN queries</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_16"><head>Figure 23 .</head><label>23</label><figDesc>Figure 23. Color Histogram data, kNN queries</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_17"><head>Figure 24 .</head><label>24</label><figDesc>Figure 24. P + -tree performance with updates</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0" validated="false"><head>use three arrays, f lag[], lp[], rp[], to record whether a pyramid has been searched; and if so, the leaf nodes we should start from.= sl 0 , A = ∅; /KS3 v f arthest = farthest(A, x); KS4 while distance(v f arthest , x) &gt; sl/2 or |A| &lt; k; KS5 sl = sl + dl; KS6 TraverseSpaceTreeKNN(space-tree root); End KNN Search Algorithm TraverseSpaceTreeKNN(node) TK1 if node is nonleaf node TK2 Read DD,DV ,P L,P R from node. TK3 if q DD &lt; DV TraverseSpaceTreeKNN(P L); TK4 if q DD ≥ DV TraverseSpaceTreeKNN(P R); TK5 if node is leaf node TK6 Read SN o and transformation information T from node TK7 Q = T (Q);, Q ) TK11 determin range(p i , Q ,h low , h high ) TK12 if not f lag[SN o · 2d + i] /*If this pyramid has not been searched before*/ TK13 lnode =LocateLeaf (SN o · 2d</head><label></label><figDesc></figDesc><table>Algorithm KNN Search 
KS1 sl *initialize side length of the query 
and answer set*/ 
KS2 initialize f lag[], lp[], rp[]; 
TK8 
Cut off the part of Q that is outside unit 
hypercube. 
TK9 
for each pyramid in space SN o 
TK10 
if intersect(p i </table></figure>

			<note place="foot" n="1"> In the literature, the term &quot;range query&quot; has been used to mean window query (hyperrectangle shaped) and similarity range query (hypersphere shaped). To avoid ambiguity, we use the term &quot;window query&quot; instead of &quot;range query&quot; throughout this paper. The &quot;range query&quot; in [7] and [15], in fact, means window query.</note>
		</body>
		<back>
			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>APPENDIX A. Theorem 1</head><p>Let Q be a window query on subspace S, and T be a transformation on S that satisfies CD1 and CD2. Let</p><p>According to CD1 and CD2, T is a strictly increasing bijection, therefore</p></div>			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Qbism: Extending a dbms to support 3d medical images</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Arya</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Cody</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Faloutsos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Richardson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Toga</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ICDE</title>
		<imprint>
			<date type="published" when="1994" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">The r*-tree: An efficient and robust access method for points and rectangles</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Beckmann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H.-P</forename><surname>Kriegel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Schneider</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Seeger</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGMOD</title>
		<imprint>
			<date type="published" when="1990" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Multidimensional binary search trees used for associative searching</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">L</forename><surname>Bentley</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">CACM</title>
		<imprint>
			<biblScope unit="volume">18</biblScope>
			<biblScope unit="issue">9</biblScope>
			<biblScope unit="page" from="509" to="517" />
			<date type="published" when="1975" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Independent quantization: An index compression technique for high-dimensional data spaces</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Berchtold</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Bohm</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><forename type="middle">V</forename><surname>Jagadish</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">S</forename><surname>Hanspeter Kriegel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ICDE</title>
		<imprint>
			<date type="published" when="2000" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">The pyramidtechnique: Towards breaking the curse of dimensionality</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Berchtold</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Bohm</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H.-P</forename><surname>Kriegel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGMOD</title>
		<imprint>
			<date type="published" when="1998" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">M-tree: An efficient access method for similarity search in metric spaces</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Ciaccia</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Patella</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Zezula</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">VLDB</title>
		<imprint>
			<date type="published" when="1997" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Efficient knn search on vertically decomposed data</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">P</forename><surname>De Vries</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Mamoulis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Nes</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Kersten</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIG-MOD</title>
		<imprint>
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Efficient and effective querying by image content</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Faloutsos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Equitz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Flickner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Niblack</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Petkovic</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Barber</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Intelligent Information Systems</title>
		<imprint>
			<date type="published" when="1994" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">R-trees: A dynamic index structure for spatial searching</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Guttman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGMOD</title>
		<imprint>
			<date type="published" when="1984" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">A retrieval technique for similar shapes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><forename type="middle">V</forename><surname>Jagadish</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGMOD</title>
		<imprint>
			<date type="published" when="1991" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Hilbert r-tree: An improved rtree using fractals</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Kamel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Faloutsos</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">VLDB</title>
		<imprint>
			<date type="published" when="1994" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">The sr-tree: an index structure for high-dimensional nearest neighbor queries</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Katayama</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Satoh</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGMOD</title>
		<imprint>
			<date type="published" when="1997" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Indexing the edges -a simple and yet efficient approach to high dimensional indexing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><forename type="middle">C</forename><surname>Ooi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><forename type="middle">L</forename><surname>Tan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Yu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Bressan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">PODS</title>
		<imprint>
			<date type="published" when="2000" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">The x-tree: An index structure for high-dimensional data</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H.-P</forename><forename type="middle">K S</forename><surname>Berchtold</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Keim</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">VLDB</title>
		<imprint>
			<date type="published" when="1996" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">The a-tree: an index structure for high-dimensional spaces using relative approximation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Sakurai</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Yoshikawa</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Uemura</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Kojima</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">VLDB</title>
		<imprint>
			<date type="published" when="2000" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Cluster selection in divisive clustering algorithms</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">M</forename><surname>Savaresi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">L</forename><surname>Boley</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Bittanti</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gazzaniga</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. SIAM Int. Conf. on Data Mining</title>
		<meeting>SIAM Int. Conf. on Data Mining</meeting>
		<imprint>
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">A quantitative analysis and performance study for similarity-search methods in high-dimensional spaces</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Weber</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H.-J</forename><surname>Schek</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Blott</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">VLDB</title>
		<imprint>
			<date type="published" when="1998" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Similarity indexing with the ss-tree</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">A</forename><surname>White</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Jain</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ICDE</title>
		<imprint>
			<date type="published" when="1996" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Indexing the distance: An efficient method to knn processing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Yu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><forename type="middle">C</forename><surname>Ooi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K.-L</forename><surname>Tan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><forename type="middle">V</forename><surname>Jagadish</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">VLDB</title>
		<imprint>
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
