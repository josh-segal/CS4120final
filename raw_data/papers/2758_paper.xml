<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2019-03-26T16:43+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">FLP Semantics Without Circular Justifications for General Logic Programs</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yi-Dong</forename><surname>Shen</surname></persName>
							<email>ydshen@ios.ac.cn</email>
							<affiliation key="aff0">
								<orgName type="department" key="dep1">State Key Laboratory of Computer Science Institute of Software</orgName>
								<orgName type="department" key="dep2">School of Computing and Information Technology Griffith University Brisbane</orgName>
								<orgName type="institution">Chinese Academy of Sciences</orgName>
								<address>
									<postCode>100190, 4111</postCode>
									<settlement>Beijing</settlement>
									<region>QLD</region>
									<country>China, Australia</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kewen</forename><surname>Wang</surname></persName>
							<email>k.wang@griffith.edu.au</email>
							<affiliation key="aff0">
								<orgName type="department" key="dep1">State Key Laboratory of Computer Science Institute of Software</orgName>
								<orgName type="department" key="dep2">School of Computing and Information Technology Griffith University Brisbane</orgName>
								<orgName type="institution">Chinese Academy of Sciences</orgName>
								<address>
									<postCode>100190, 4111</postCode>
									<settlement>Beijing</settlement>
									<region>QLD</region>
									<country>China, Australia</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">FLP Semantics Without Circular Justifications for General Logic Programs</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>The FLP semantics presented by (Faber, Leone, and Pfeifer 2004) has been widely used to define answer sets, called FLP answer sets, for different types of logic programs such as logic programs with aggregates, description logic programs (dl-programs), Hex programs, and logic programs with first-order formulas (general logic programs). However, it was recently observed that the FLP semantics may produce unintuitive answer sets with circular justifications caused by self-supporting loops. In this paper, we address the circular justification problem for general logic programs by enhancing the FLP semantics with a level mapping formalism. In particular , we extend the Gelfond-Lifschitz three step definition of the standard answer set semantics from normal logic programs to general logic programs and define for general logic programs the first FLP semantics that is free of circular justifications. We call this FLP semantics the well-justified FLP semantics. This method naturally extends to general logic programs with additional constraints like aggregates, thus providing a unifying framework for defining the well-justified FLP semantics for various types of logic programs. When this method is applied to normal logic programs with ag</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Introduction</head><p>Answer set programming (ASP) is a major logic programming paradigm for knowledge representation and reasoning. In ASP, the semantics of a logic program is defined by a set of intended models, called stable models or answer sets. Such a semantics is thus called an answer set semantics. We may use different ways to define answer sets of a logic program. As summarized by <ref type="bibr" target="#b10">(Lifschitz 2010</ref>), there have been thirteen different definitions of answer sets in the literature. These definitions agree with the standard answer set semantics for normal logic programs ( <ref type="bibr" target="#b9">Gelfond and Lifschitz 1988)</ref> in the sense that they define the same set of answer sets. In this paper, we are devoted to a currently widely used definition of answer sets, called the FLP semantics <ref type="bibr" target="#b5">(Faber, Leone, and Pfeifer 2004;</ref><ref type="bibr" target="#b6">Faber, Pfeifer, and Leone 2011)</ref>. Let Π be a normal logic program with rules of the form A 0 ← A 1 , · · · , A m , not A m+1 , · · · , not A n , where each A i is an atom. Informally, given an interpretation I the FLP reduct of Π w.r.t. I, denoted f Π I , consists of all ground rules of Π whose bodies are satisfied by I. Then, I is an FLP answer set of Π if I is a minimal model of f Π I . Observe that the FLP reduct can easily be extended to more general classes of logic programs, provided that the satisfaction relation for normal logic programs is extended to those classes of logic programs. Due to this reason, the FLP semantics has recently been extended, as a unifying formalism, to a variety of logic programs including logic programs with aggregates or abstract constraint atoms (c-atoms) <ref type="bibr" target="#b6">(Faber, Pfeifer, and Leone 2011)</ref>, description logic programs (dl-programs) ( <ref type="bibr" target="#b4">Eiter et al. 2008;</ref><ref type="bibr" target="#b3">2005)</ref>, Hex programs ( <ref type="bibr" target="#b3">Eiter et al. 2005</ref>), disjunctive dl-programs <ref type="bibr" target="#b11">(Lukasiewicz 2010)</ref>, and logic programs with first-order formulas <ref type="bibr" target="#b1">(Bartholomew, Lee, and Meng 2011)</ref>.</p><p>However, when applied to the above mentioned classes of logic programs, the FLP semantics may produce unintuitive answer sets with circular justifications caused by selfsupporting loops. This problem was observed in <ref type="bibr" target="#b17">(Shen and You 2009;</ref><ref type="bibr" target="#b11">Liu et al. 2010</ref>) for logic programs with aggregates, in (Shen 2011) for dl-programs, and in (Shen and Wang 2011) for disjunctive dl-programs.</p><p>Logic programs with first-order formulas, also called general logic programs, were recently introduced by <ref type="bibr" target="#b1">(Bartholomew, Lee, and Meng 2011)</ref> and have now received increasing attention. A general logic program consists of rules of the form H ← B, where H and B are arbitrary first-order formulas. Normal logic programs can be viewed as a special form of general logic programs, where the negation not is identified with ¬, each rule head H with an atom, and each rule body B with a conjunction of literals. Answer sets of a general logic program are defined by the FLP semantics. We observe that this FLP semantics for general logic programs also incurs circular justifications. To illustrate, consider the following general logic program:</p><formula xml:id="formula_0">Π 1 : p(2) ← p(2) ∧ (¬p(−1) ∨ p(1)). r 1 p(−1) ← ¬p(−1) ∨ p(1) ∨ p(2). r 2 p(1) ← p(−1). r 3</formula><p>Let I = {p(−1), p(1)} be an interpretation. Since the body of rule r 1 is not satisfied by I, the FLP reduct of Π 1 w.r.t. I is f Π I 1 = {r 2 , r 3 }. I is a minimal model of f Π I 1 and thus is an answer set of Π 1 under the FLP semantics. Observe that this FLP answer set has circular justifications caused by the following self-supporting loop:</p><formula xml:id="formula_1">p(1) ⇐ p(−1) ⇐ ¬p(−1) ∨ p(1) ∨ p(2) ⇐ p(1).</formula><p>That is, the evidence of the truth of p(1) ∈ I is supported by p(−1) ∈ I (via r 3 ), while the truth of p(−1) is supported by ¬p(−1) ∨ p(1) ∨ p(2) (via r 2 ). Since ¬p(−1) and p(2) are false in I, the truth of ¬p(−1) ∨ p(1) ∨ p(2) is supported by p(1). As a result, p(1) in I is circularly supported (justified) by itself.</p><p>Our study shows that the key reason behind the circular justification problem for general logic programs is that the FLP semantics is unable to build a level mapping on its answer sets. Such a level mapping is defined implicitly by rules of a logic program such that answers at upper levels i &gt; 0 are derived from answers at lower levels j &lt; i by applying rules in the way that if the rule bodies hold then infer the rule heads. We would like to stress that it is such a level mapping on answer sets that makes an if-then rule H ← B in a logic program essentially different from an implication B ⊃ H in classical logic. In fact, for normal logic programs, <ref type="bibr" target="#b7">(Fages 1994)</ref> shows that the standard answer set semantics has a level mapping on its answer sets. Since the FLP semantics agrees with the standard answer set semantics for normal logic programs, FLP answer sets are free of circular justifications for normal logic programs.</p><p>In this paper, we address the circular justification problem for general logic programs by enhancing the FLP semantics with a level mapping formalism. Observe that for a normal logic program Π under the standard answer set semantics, each answer set I together with its level mapping is defined by a fixpoint, which is derived from the Gelfond-Lifschitz reduct Π I by iteratively applying the van Emden-Kowalski one-step provability operator <ref type="bibr" target="#b19">(van Emden and Kowalski 1976)</ref>. Inspired by this, we define each FLP answer set I together with a level mapping by a fixpoint, which is derived in a similar way from the FLP reduct f Π I . To achieve this, we first extend the van Emden-Kowalski provability operator from a positive logic program to a general logic program. Next we extend the Gelfond-Lifschitz three step definition of the standard answer set semantics from a normal logic program to a general logic program by replacing the Gelfond-Lifschitz reduct Π I with the FLP reduct f Π I and applying the extended van Emden-Kowalski provability operator to derive a fixpoint from f Π I . An answer set I is then defined in terms of the fixpoint. We show that such answer sets are FLP answer sets with a level mapping and thus are free of circular justifications. Therefore, we call such answer sets well-justified FLP answer sets, and call the new semantics the well-justified FLP semantics. This method naturally extends to general logic programs with additional constraints like aggregates, thus providing a unifying framework for defining the well-justified FLP semantics for various types of logic programs. We show that when this method is applied to normal logic programs with aggregates, the well-justified FLP semantics agrees with the conditional satisfaction based semantics defined by <ref type="bibr" target="#b19">(Son, Pontelli, and Tu 2007)</ref>; and when applied to dl-programs, the semantics agrees with the strongly well-supported semantics defined by <ref type="bibr" target="#b18">(Shen 2011</ref>).</p><p>Due to the page limit, we omit the proof of all theorems in this paper.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A First-Order Logic Language</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>First-Order Logic</head><p>We consider a first-order logic language L Σ with equality over a signature Σ = (P, F), where P, F are a countable set of predicate and function symbols, respectively. Let C ⊆ F be the set of 0-ary function symbols called constants, and V be a countable set of variables. A term is a variable or a function f (t 1 , · · · , t m ), where f is an m-ary function symbol (m ≥ 0) and each t i is a term. An atom is of the form p(t 1 , · · · , t n ), where p is an n-ary predicate symbol and each t i is a term. Let N Σ denote the set of ground terms of Σ, and H Σ the set of ground atoms of Σ. Formulas are constructed as usual from atoms using connectives ¬, ∧, ∨, ⊃, ≡, ∃, ∀, (, and ). Literals are of the form A or ¬A, where A is an atom. Formulas are closed if they contain no free variables (i.e., all variables are quantified either by ∀ or ∃). A (first-order) theory is a set of closed formulas. Ground terms/atoms/formulas contain no variables.</p><p>An interpretation of L Σ is a pair I = 񮽙U, . I 񮽙, where U is a domain, and . I a mapping which assigns a relation p I ⊆ U n to each n-ary predicate symbol p ∈ P, and a function f I : U m → U to each m-ary function symbol f ∈ F. A variable assignment B for I is a mapping which assigns an element X B ∈ U to each variable X ∈ V. The interpretation of a term t, denoted t I,B , is defined as usual, where B is omitted when t is ground. Satisfaction of a formula F in I relative to B is defined as usual. I is a model of F if I satisfies F for every variable assignment. I is a model of (or I satisfies) a theory O if I is a model of all formulas in O. A theory is consistent or satisfiable if it has a model. A theory O entails a formula F , denoted O |= F , if all models of O are models of F .</p><p>An SNA interpretation I is an interpretation 񮽙U, . I 񮽙 of L Σ that employs the following standard name assumption: (1) The signature Σ includes a countably infinite set of constants and the 2-ary predicate symbol ≈ that expresses equality, (2) U = N Σ and t I = t for each t ∈ N Σ , and (3) ≈ I is a congruence relation over U , which is reflexive, symmetric and transitive, and allows the replacement of equals by equals.</p><p>For an SNA interpretation I, each variable assignment over the domain U is a substitution of variables over N Σ . Moreover, since p I ⊆ N n Σ for each n-ary predicate symbol p ∈ P, there is a one-to-one correspondence between SNA interpretations of L Σ and subsets of H Σ . Therefore, we may well define an SNA interpretation I as a subset of H Σ , i.e., I ⊆ H Σ . Then, an SNA interpretation I satisfies a ground atom A if A ∈ I; I satisfies ¬A if A 񮽙 ∈ I.</p><p>( <ref type="bibr" target="#b14">Motik and Rosati 2010)</ref> show that using SNA interpretations preserves satisfiability of first-order logic; i.e., a firstorder formula is satisfiable if and only if it is satisfiable in a model that employs the standard name assumption. Therefore, in the sequel we consider only SNA interpretations, which are expressed as a subset I of H Σ . We denote I − for H Σ \ I, and ¬I − for {¬A | A ∈ I − }.</p><p>For convenience, in the sequel by function symbols we refer to m-ary function symbols with m &gt; 0.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>General Logic Programs</head><p>We extend the above first-order language L Σ with rules of the form H ← B, where H and B are formulas. Such a rule r expresses an if-then statement, saying that if the logic property B holds then infer H. We use body(r) to refer to B, and head(r) to H. When body(r) is empty, we omit ←.</p><p>A general logic program Π consists of a finite set of rules. Π is a normal logic program if each rule r is of the form</p><formula xml:id="formula_2">A 0 ← A 1 ∧ ... ∧ A m ∧ ¬A m+1 ∧ ... ∧ ¬A n , where each A i</formula><p>is an atom without equality and function symbols. We use pos(r) and neg(r) to denote A 1 ∧ ... ∧ A m and ¬A m+1 ∧ ... ∧ ¬A n , respectively. A positive logic program is a normal logic program without negative literals.</p><p>Let C Π ⊆ C be a non-empty, finite set of constants including all constants occurring in Π. A closed instance of a rule is obtained by replacing every free variable in the rule with a constant in C Π . The grounding of Π w.r.t. C Π , denoted ground(Π), is the set of closed instances of all rules in Π.</p><p>Since both Π and C Π are finite, ground(Π) is finite.</p><p>An interpretation I satisfies a closed instance r of a rule if it satisfies head(r) or it does not satisfy body(r). I is a model of a logic program Π if it satisfies all rules in ground(Π). A minimal model is a subset-minimal model.</p><p>From the definition of models, a logic program Π is viewed as shorthand for ground(Π), where each rule in Π is viewed as shorthand for the set of its closed instances. The FLP semantics for general logic program is defined as follows.</p><p>Definition 1 Let Π be a general logic program and I an interpretation. The FLP-reduct of Π w.r.t. I is f Π I = {r ∈ ground(Π) | I satisfies body(r)}. I is an FLP answer set of Π if I is a minimal model of f Π I .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Well-Justified FLP Answer Sets for General Logic Programs</head><p>As mentioned in the introduction, rules H ← B in a logic program differ essentially from implications B ⊃ H in classical logic because rules define a level mapping on their answer sets such that answers at upper levels are derived from answers at lower levels by applying the rules in the way that if the rule bodies hold then infer the rule heads. However, the FLP semantics defined by Definition 1 is unable to capture such a level mapping. For I to be an answer set of Π, the FLP semantics only requires I to be a minimal model of f Π I . This amounts to treating all rules H ← B in f Π I as implications B ⊃ H in classical logic because I is a model of the rules H ← B in f Π I if and only if I is a model of the corresponding implications B ⊃ H in classical logic. Since classical implications define no level mapping on their models, some minimal models of f Π I may have no level mapping and thus some FLP answer sets may have circular justifications (see the example in the introduction). Therefore, the key to overcome the circular justification problem is to enhance the FLP semantics with a level mapping formalism whereby the FLP reduct is treated as rules instead of classical implications. To achieve this, let us first look at how the standard answer set semantics builds a level mapping for its answer sets from normal logic programs.</p><p>For a normal logic program Π and an interpretation I, the definition of answer sets under the standard answer set semantics consists of three steps (Gelfond and Lifschitz 1988):</p><p>1. Eliminate from ground(Π) all rules whose bodies contain a negative literal not satisfied by I.</p><p>2. Eliminate from the bodies of the remaining rules of ground(Π) all negative literals. Note: All negative literals removed in the second step are in ¬I − . The remaining part of ground(Π) after the two steps of transformation is called the Gelfond-Lifschitz reduct, denoted Π I .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">Compute a fixpoint</head><formula xml:id="formula_3">T α Π I (∅) from Π I via the sequence 񮽙T i Π I (∅)񮽙 ∞ i=0 , where T 0 Π I (∅) = ∅ and for i ≥ 0 T i+1 Π I (∅) = T Π I (T i Π I (∅)). Note: T P (S)</formula><p>, where P is a positive logic program and S is a set of ground atoms, is the van Emden-Kowalski onestep provability operator <ref type="bibr" target="#b19">(van Emden and Kowalski 1976)</ref> defined by T P (S) = {head(r)|r ∈ ground(P ) such that body(r) is satisfied by S}.</p><p>Then, I is an answer set of Π under the standard answer set semantics if I = T α Π I (∅). Note that the derivation sequence</p><formula xml:id="formula_4">񮽙T i Π I (∅)񮽙 ∞ i=0 defines a level mapping on I such that A ∈ I is at level i &gt; 0 if A ∈ T i Π I (∅) but A 񮽙 ∈ T i−1 Π I (∅)</formula><p>. As a result, for any A ∈ I at level i there is a rule r ∈ ground(Π) whose head is A such that all negative literals in neg(r) are in ¬I − and all positive literals in pos(r) are in T i−1 Π I (∅). The above Gelfond-Lifschitz three step definition of answer sets for normal logic programs are not applicable to general logic programs, since rule heads and bodies of a general logic program are arbitrary first-order formulas. For example, let Π = {A ← A ∨ ¬A}, where A is a ground atom. Since the rule body A ∨ ¬A is a tautology, I = {A} is supposed to be an answer set of Π. Apparently, this answer set cannot be obtained following the above three steps.</p><p>To deal with arbitrary first-order formulas in rule heads and bodies in a general logic program, we propose to extend the above Gelfond-Lifschitz three step definition of answer sets to general logic programs as follows:</p><p>1. We extend the first step to first-order formulas by eliminating from ground(Π) all rules whose bodies are not satisfied by I. This yields the FLP reduct f Π I .</p><p>2. Instead of directly eliminating from f Π I all negative literals in ¬I − , we adapt the second step to first-order formulas by adding the negative literals in ¬I − as constraints on f Π I .</p><p>3. We extend the third step to first-order formulas by computing a fixpoint O α from f Π I under the constrains ¬I − via the sequence 񮽙O i 񮽙 ∞ i=0 , where O 0 = ∅ and for i &gt; 0 and any rule r in f Π I , if body(r) is true in O i−1 under the constrains ¬I − , i.e. O i−1 ∪ ¬I − |= body(r), then head(r) is in O i , where |= is the entailment relation. To formally define the sequence 񮽙O i 񮽙 ∞ i=0 for the above extension 3, we extend the van Emden-Kowalski one-step provability operator T P (S), which is applicable only to a positive logic program P parameterized with a set S of ground atoms, to a new operator T Π <ref type="figure">(O, N )</ref>, which is applicable to a general logic program Π parameterized with two first-order theories O and N . Intuitively, by applying T Π (O, N ) we infer all rule heads from ground(Π) whose rule bodies are true in O under the constraints N . Formally we define</p><formula xml:id="formula_5">T Π (O, N ) = {head(r) | r ∈ ground(Π) such that O ∪ N |= body(r)}. Since the entailment relation |= is monotone, when the constraints N are fixed, T Π (O, N ) is monotone w.r.t. O. That is, for any O 1 ⊆ O 2 , T Π (O 1 , N ) ⊆ T Π (O 2 , N ). There- fore, the sequence 񮽙T i Π (∅, N )񮽙 ∞ i=0 , where T 0 Π (∅, N ) = ∅ and for i ≥ 0 T i+1 Π (∅, N ) = T Π (T i Π (∅, N ), N ), will converge to a fixpoint, denoted T α Π (∅, N ).</formula><p>Thus, when replacing the constraints N with ¬I − , we obtain a fixpoint T α Π (∅, ¬I − ); and when further replacing Π with the FLP reduct f Π I , we obtain a fixpoint T α f Π I (∅, ¬I − ). This achieves the above extension 3, where</p><formula xml:id="formula_6">for i ≥ 0, O i = T i f Π I (∅, ¬I − ) and O α = T α f Π I (∅, ¬I − ).</formula><p>The first important result about our extended van EmdenKowalski one-step provability operator is that when I is a model of a general logic program Π, applying the operator to Π and f Π I derives the same rule heads. This justifies the above extension 1, where the FLP reduct f Π I is used as a simplified form of Π. </p><formula xml:id="formula_7">Π I (∅, ¬I − ) (resp. T α Π (∅, ¬I − ))</formula><p>would be a first-order theory instead of a set of ground atoms. However, these conditions suggest that answer sets of a general logic program Π can be defined by requiring that each A ∈ I be true in the fixpoint T α f Π I (∅, ¬I − ) under the constraints ¬I − ; i.e., for each A ∈ I, T α f Π I (∅, ¬I − ) ∪ ¬I − |= A. Formally, we have Definition 2 Let I be a model of a general logic program Π.</p><p>I is an answer set of Π if for each A ∈ I, T α f Π I (∅, ¬I − ) ∪ ¬I − |= A.</p><p>Such answer sets are minimal models.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Theorem 3 If</head><p>I is an answer set of a general logic program Π, then I is a minimal model of Π and is also a minimal model of f Π I .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>It is immediate from Theorem 3 and Definition 1:</head><p>Corollary 2 If a model I is an answer set of a general logic program Π, then I is an FLP answer set of Π.</p><p>As a result, answer sets under Definition 2 are FLP answer sets enhanced with a level mapping, which is built from the FLP reduct f Π I via the sequence</p><formula xml:id="formula_8">񮽙T i f Π I (∅, ¬I − )񮽙 ∞ i=0 , where for each A ∈ I, A is at level i &gt; 0 if T i f Π I (∅, ¬I − ) ∪ ¬I − |= A but T i−1 f Π I (∅, ¬I − ) ∪ ¬I − 񮽙 |= A.</formula><p>The enhancement of the level mapping makes the resulting FLP answer sets free of circular justifications. Due to this, we call answer sets (resp. the semantics) under Definition 2 well-justified FLP answer sets (resp. the well-justified FLP semantics).</p><p>For normal logic programs, by Corollary 1 the welljustified FLP semantics agrees with the standard answer set semantics that agrees with the FLP semantics. Next, we briefly discuss computational properties of the well-justified FLP semantics. Since it is undecidable in general to determine if a first-order theory is satisfiable, it is undecidable to determine if a general logic program has either an FLP answer set or a well-justified FLP answer set. Therefore, we restrict to the propositional case under Herbrand interpretations. By a propositional program we refer to a general logic program that contains no variables, no function symbols, and no equalities. The Herbrand base HB Π of a propositional program Π is the set of atoms p(a 1 , ..., a n ), where p is a predicate symbol occurring in Π and each a i is a constant in C Π . Any I ⊆HB Π is a Herbrand interpretation of Π, where I − =HB Π \ I.</p><p>Since it is NP-complete to determine if a propositional theory is satisfiable, it is easy to show the following result.  Let I be an interpretation of L Σ and A be an aggregate atom OP񮽙(D, X) : F (X) b. Let S I = {a | a ∈ D such that I satisfies F (a)}. I satisfies the aggregate atom A if OP(S I ) 񮽙 b holds; I satisfies ¬A if I does not satisfy A.</p><p>Once the satisfaction relation is extended to aggregate atoms, the entailment relation |= is extended accordingly in terms of the extended satisfaction and thus the one-step provability operator T Π (O, N ) can be applied to general logic programs with aggregate atoms. Therefore, all results (definitions and theorems) obtained in the above section for general logic programs are applicable to general logic programs with aggregate atoms. By Definition 2, a model I of a general logic program Π with aggregate atoms is a well-justified FLP answer set of Π if for every A ∈ I, T α f Π I (∅, ¬I − ) ∪ ¬I − |= A. By Corollary 2, such answer sets are FLP answer sets enhanced with a level mapping and thus are free of circular justifications.</p><p>Example 2 Consider the following logic program with aggregate atoms, which is borrowed from (Bartholomew, Lee, and Meng 2011).</p><formula xml:id="formula_9">Π 2 : p(2) ← ¬SUM񮽙({−1, 1, 2}, X) : p(X)񮽙 &lt; 2. r 1 p(−1) ← SUM񮽙({−1, 1, 2}, X) : p(X) ≥ 0. r 2 p(1) ← p(−1). r 3</formula><p>For an interpretation I = {p(−1), p(1)}, SUM(S I ) = SUM({−1, 1}) = 0. So I satisfies the two aggregate atoms SUM񮽙({−1, 1, 2}, X) : p(X)񮽙 &lt; 2 and SUM񮽙({−1, 1, 2}, X) : p(X) ≥ 0. The FLP reduct is f Π I 2 = {r 2 , r 3 }. I is a minimal model of f Π I 2 and thus it is an FLP answer set of Π 2 . However, I is not a well-justified FLP answer set because T α f Π I 2 (∅, ¬I − ) = ∅. One can check that this FLP answer set has the same circular justification as that shown in Π 1 in the introduction.</p><p>Many aggregate atoms can be represented in an abstract form as abstract constraint atoms (or c-atoms) <ref type="bibr" target="#b12">(Marek and Truszczynski 2004)</ref>. A c-atom is a pair (V, C), where V , the domain of the c-atom, is a finite subset of H Σ , and C, the admissible solutions of the c-atom, is a collection of sets of atoms in V . For instance, the aggregate atom SUM񮽙{−1, 1, 2}, X) : p(X)񮽙 &lt; 2 in Π 2 can be represented as a c-atom (V, C), where V = {p(−1), p(1), p(2)} and C = {∅, {p(−1)}, {p(1)}, {p(−1), p(1)}, {p(−1), p(2)}}.</p><p>Let I be an interpretation of L Σ . I satisfies a c-atom (V, C) if I ∩ V ∈ C; I satisfies ¬(V, C) if I does not satisfy (V, C). With this extended satisfaction relation, the entailment relation |= and the provability operator T Π (O, N ) are directly extended to general logic programs with c-atoms. Therefore, all results, including the definition and properties of well-justified FLP answer sets, for general logic programs with aggregate atoms carry over to general logic programs with c-atoms.</p><p>A positive basic logic program is a finite set of function and equality free rules of the form A ← A 1 ∧...∧A m , where A is a ground atom and each A i is a c-atom. Note that any ground atom A can be represented as an elementary c-atom ({A}, {{A}}), and ¬A represented as a c-atom ({A}, {∅}). For any c-atom (V, C), ¬(V, C) can be represented as a catom (V, 2 V \C), where 2 V is the power set of V . Therefore, for any normal logic program Π with c-atoms, its grounding ground(Π) can be represented in this way by an equivalent positive basic logic program.</p><p>(Son, Pontelli, and Tu 2007) define an answer set semantics for positive basic logic programs based on a notion of conditional satisfaction. Let R and S be two sets of ground atoms with R ⊆ S. For a c-atom A = (V, C), R conditionally satisfies A w.r.t. S, denoted R |= S A, if for every F with R ∩ V ⊆ F ⊆ S ∩ V , F ∈ C; for a ground atom A, R |= S A if R |= S ({A}, {{A}}). For a positive basic logic program Π, define Γ Π (R, S) = {A | A ← body(r) ∈ Π and R |= S body(r)}. It is proved that when the second argument S is a model of Π, the sequence 񮽙Γ i Π (∅, S)񮽙 ∞ i=0 , where</p><formula xml:id="formula_10">Γ 0 Π (∅, S) = ∅ and for i &gt; 0 Γ i Π (∅, S) = Γ Π (Γ i−1 Π (∅, S), S)</formula><p>, is monotone and will converge to a fixpoint Γ α Π (∅, S). A model I of Π is a conditional satisfaction based answer set of Π if I = Γ α Π (∅, I). Since positive basic logic programs are a special form of general logic programs with c-atoms, the following result shows that the well-justified FLP semantics is a proper extension of the conditional satisfaction based semantics.</p><p>Theorem 5 A model I of a positive basic logic program Π is a well-justified FLP answer set if and only if I is a conditional satisfaction based answer set.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Well-Justified FLP Answer Sets for DL-Programs</head><p>In principle, the above method of defining well-justified FLP answer sets can be applied to different types of logic programs, provided that the satisfaction relation of L Σ is extended to those programs. As another illustration, in this section we briefly describe how to define well-justified FLP answer sets for dl-programs. Other well-known types of logic programs, such as Hex programs <ref type="bibr" target="#b3">(Eiter et al. 2005</ref>) and disjunctive dl-programs (Lukasiewicz 2010), can be handled in a similar way. Due to the page limit, we assume familiarity with dl-programs ( <ref type="bibr" target="#b4">Eiter et al. 2008</ref>) and with the basics of description logics (DLs) ( <ref type="bibr" target="#b0">Baader et al. 2003</ref>). DLs are fragments of first-order logic and thus a DL knowledge base can be viewed as a first-order theory. A dl-program Π relative to an external DL knowledge base L is a normal logic program extended in rule bodies with equalities and dl-atoms as an interface to access L. A dl-atom is of the form DL[S 1 op 1 p 1 , · · · , S m op m p m ; Q](t), where each S i op i p i semantically maps a predicate symbol p i in Π to a concept or role S i in L via a special interface operator op i ∈ { ∪ + , ∪ -, ∩ -}, and Q(t) is a DL expression which will be evaluated against L after the predicate mapping.</p><p>The semantics of a dl-program Π relative to L is defined in terms of Herbrand interpretations. ground(Π) is defined as before except that (1) all those ground instances of rules which contain invalid equalities or inequalities (under the unique name assumption) are removed, and (2) all valid equalities and inequalities are removed. Let I be a Herbrand interpretation of Π and</p><formula xml:id="formula_11">A = DL[S 1 op 1 p 1 , · · · , S m op m p m ; Q](c) be a dl-atom occurring in ground(Π). I satisfies A if L∪ 񮽙 m i=1 A i (I) |= Q(c), where for 1 ≤ i ≤ m, A i (I)</formula><p>is defined by the predicate mapping S i op i p i such that</p><formula xml:id="formula_12">A i (I) = 񮽙 {S i (e) | p i (e) ∈ I}, if op i = ∪ + ; {¬S i (e) | p i (e) ∈ I}, if op i = ∪ -; {¬S i (e) | p i (e) 񮽙 ∈ I}, if op i = ∩ -. I satisfies ¬A if I does not satisfy A.</formula><p>This extended satisfaction relation to dl-atoms is called satisfaction under L, denoted |= L , in <ref type="bibr" target="#b3">(Eiter et al. 2005;</ref><ref type="bibr" target="#b4">2008</ref>). An FLP semantics for dl-programs is defined in <ref type="bibr" target="#b3">(Eiter et al. 2005</ref>) using this satisfaction relation; i.e., a Herbrand model I of a dl-program Π is an FLP answer set of Π if I is a minimal model of f Π I .</p><p>Note that dl-programs are a special form of general logic programs extended with dl-atoms (in rule bodies and heads). When applying the above extended satisfaction relation to dl-atoms, the definition and properties of well-justified FLP answer sets for general logic programs carry over to general logic programs with dl-atoms. Therefore, a Herbrand model I of a dl-program Π is a well-justified FLP answer set if for every A ∈ I, T α f Π I (∅, ¬I − ) ∪ ¬I − |= A. By Corollary 2, such well-justified FLP answer sets for dl-programs are FLP answer sets enhanced with a level mapping and thus are free of circular justifications.</p><p>For a dl-program Π, since the head of each rule in ground(Π) is a ground atom, the fixpoint T α f Π I (∅, ¬I − ) is a set of ground atoms. Thus for each A in a Herbrand model I,</p><formula xml:id="formula_13">T α f Π I (∅, ¬I − )∪¬I − |= A if and only if A ∈ T α f Π I (∅, ¬I − )</formula><p>. This leads to the following. Corollary 3 A Herbrand model I of a dl-program Π relative to an external DL knowledge base L is a well-justified FLP answer set if and only if I = T α f Π I (∅, ¬I − ). (Shen 2011) observes that the FLP semantics defined in ( <ref type="bibr" target="#b3">Eiter et al. 2005</ref>) for dl-programs incurs circular justifications. Then an alternative semantics without circular justifications, called the strongly well-supported semantics, is proposed by extending the Fages' well-supportedness condition <ref type="bibr" target="#b7">(Fages 1994)</ref> from normal logic programs to dl-programs. Informally, a Herbrand model I of a dl-program Π is a strongly well-supported answer set if there exists a strict well-founded partial order 񮽙 on I such that for any A ∈ I, there is a rule A ← body(r) in ground(Π) and a subset E ⊂ I such that (1) for every B ∈ E, B 񮽙 A, and (2) for every F with E ⊆ F ⊆ I, F satisfies body(r).</p><p>The following result shows that the well-justified FLP semantics is a proper extension of the strongly well-supported semantics from dl-programs to general logic programs with dl-atoms.</p><p>Theorem 6 A Herbrand model I of a dl-program Π relative to an external DL knowledge base L is a well-justified FLP answer set if and only if I is a strongly well-supported answer set.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Related Work</head><p>The FLP semantics is first introduced in (Faber, Leone, and Pfeifer 2004) for normal (and disjunctive) logic programs with aggregates. It is then extended to dl-programs and Hex programs ( <ref type="bibr" target="#b3">Eiter et al. 2005;</ref><ref type="bibr" target="#b4">2008)</ref>, modular logic programs ( <ref type="bibr" target="#b2">Dao-Tran et al. 2009</ref>), disjunctive dl-programs (Lukasiewicz 2010), and general logic programs with aggregates (Bartholomew, Lee, and Meng 2011). In the last extension, the FLP semantics defined by Definition 1 is reformulated in terms of a modified circumscription.  and (Ferraris, Lee, and Lifschitz 2011) also extend the FLP semantics of <ref type="bibr" target="#b5">(Faber, Leone, and Pfeifer 2004</ref>) to propositional formulas and first-order formulas, respectively. As illustrated in (Bartholomew, Lee, and Meng 2011), the two extensions do not agree with the FLP semantics defined by Definition 1 for general logic programs. However, we observe that the problem of circular justifications with the FLP semantics persists in the extensions.</p><p>For normal logic programs with c-atoms, (Shen and You 2009) observe that answer sets under the FLP semantics of <ref type="bibr" target="#b5">(Faber, Leone, and Pfeifer 2004</ref>) have circular justifications. They propose a default semantics by translating a propositional logic program to a default logic theory and show that the default semantics agrees with the conditional satisfaction based semantics of <ref type="bibr" target="#b19">(Son, Pontelli, and Tu 2007)</ref>. ( <ref type="bibr" target="#b11">Liu et al. 2010</ref>) also indicate the circular justification (selfsupportedness) problem with the FLP semantics of <ref type="bibr" target="#b5">(Faber, Leone, and Pfeifer 2004</ref>). They propose a computation based semantics for normal logic programs with c-atoms, which proves to coincide with the conditional satisfaction based semantics. For dl-programs, (Shen 2011) observes the circular justification problem with the FLP semantics defined by <ref type="bibr" target="#b3">(Eiter et al. 2005</ref>). For disjunctive dl-programs, (Shen and Wang 2011) notice the circular justification problem with the FLP semantics defined by <ref type="bibr" target="#b11">(Lukasiewicz 2010</ref>).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Summary and Future Work</head><p>In this paper, we observe that the FLP semantics for general logic programs suffers from circular justifications. The key reason behind the circular justification problem is that the FLP semantics is unable to build a level mapping on its answer sets. Therefore, we address this problem by enhancing the FLP semantics with a level mapping formalism. Inspired by the fact that for a normal logic program Π under the standard answer set semantics, each answer set I together with its level mapping is defined by a fixpoint, which is derived from the Gelfond-Lifschitz reduct Π I by iteratively applying the van Emden-Kowalski onestep provability operator T P (S), we define each FLP answer set I together with a level mapping by a fixpoint, which is derived from the FLP reduct f Π I by iteratively applying our extended van Emden-Kowalski provability operator T Π <ref type="figure">(O, N )</ref>. We call the new FLP semantics without circular justifications the well-justified FLP semantics. This method naturally extends to general logic programs with additional constraints like aggregates and dl-atoms, thus providing a unifying framework for defining the well-justified FLP semantics for various types of logic programs. When this method is applied to normal logic programs with aggregates, the well-justified FLP semantics agrees with the conditional satisfaction based semantics defined by <ref type="bibr">(Son, Pon- telli, and Tu 2007)</ref>; and when applied to dl-programs, the semantics agrees with the strongly well-supported semantics defined by <ref type="bibr" target="#b18">(Shen 2011</ref>). To the best of our knowledge, no existing work in the literature can capture the well-justified FLP semantics for general logic programs.</p><p>As future work, it is interesting to extend the well-justified FLP semantics to disjunctive rules of the form H 1 |...|H k ← B, where B and each H i are a first-order formula and | is an epistemic disjunction operator that is different from the classical disjunction connective ∨. It is also interesting to study the relation of the well-justified FLP semantics with major nonmonotonic formalisms such as circumscription <ref type="bibr" target="#b13">(McCarthy 1980)</ref> and default logic <ref type="bibr" target="#b15">(Reiter 1980)</ref>. Finally, efficiently implementing the well-justified FLP semantics presents a challenging work.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head></head><label></label><figDesc>Copyright c 񮽙 2012, Association for the Advancement of Artificial Intelligence (www.aaai.org). All rights reserved.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Theorem 1</head><label>1</label><figDesc>Let I be a model of a general logic program Π. For any i ≥ 0, T i Π (∅, ¬I − ) = T i f Π I (∅, ¬I − ) and thus T α Π (∅, ¬I − ) = T α f Π I (∅, ¬I − ). The next result shows that the extended provability opera- tor T Π (O, N ) for general logic programs is a proper general- ization of the original van Emden-Kowalski operator T P (S) for positive logic programs. Theorem 2 Let I be a model of a normal logic program Π. For any i ≥ 0, T i Π I (∅) = T i Π (∅, ¬I − ) and thus T α Π I (∅) = T α Π (∅, ¬I − ). It follows immediately from Theorems 2 and 1: Corollary 1 A model I of a normal logic program Π is an answer set under the standard answer set semantics if and only if I = T α Π I (∅) if and only if I = T α Π (∅, ¬I − ) if and only if I = T α f Π I (∅, ¬I − ). The conditions listed in Corollary 1 of an answer set of a normal logic program do not apply to a general logic pro- gram because for a general logic program Π, T α f</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Example 1</head><label>1</label><figDesc>Consider the general logic program Π 1 in the introduction. I = {p(−1), p(1)} is a model of Π 1 and is also an FLP answer set. ¬I − contains ¬p(2). T 0 f Π I 1 (∅, ¬I − ) = ∅, T 1 f Π I 1 (∅, ¬I − ) = T f Π I 1 (T 0 f Π I 1 (∅, ¬I − ), ¬I − ) = ∅, and thus T α f Π I 1 (∅, ¬I − ) = ∅. Neither p(−1) ∈ I nor p(1) ∈ I can be proved true in T α f Π I 1 (∅, ¬I − ) under the constraints ¬I − , so I is not a well-justified FLP answer set of Π 1 .</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Theorem 4</head><label>4</label><figDesc>Let Π be a propositional program and I a Her- brand interpretation. It is NP-complete to determine if I is an FLP answer set of Π. It is also NP-complete to determine if I is a well-justified FLP answer set of Π.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0" validated="false"><head>Well -Justified FLP Answer Sets for General Logic Programs with Aggregates COUNT, SUM, TIMES, MIN and MAX are commonly used aggregate functions, which map a finite set of elements in a domain to a value in a range. For simplicity, we assume the range is a set of (positive and negative) integers. We adopt the formulation of aggregates as given in (Bartholomew,</head><label>Well</label><figDesc></figDesc><table>Lee, and Meng 2011) with slight modification. An aggregate 
atom over the signature Σ of our logic language L Σ is of the 
form OP񮽙(D, X) : F (X) b, where OP is an aggregate 
function symbol (not included in Σ); D ⊆ N Σ is the domain 
of OP; X is an aggregate variable (can easily be extended to 
a list of aggregate variables), which takes on values from D; 
F (X) is a first-order formula in L Σ without free variables 
(X is not treated as a free variable; it is bounded by D); 
񮽙 is a comparison operator, such as ≤, ≥, &lt;, &gt;, etc., which 
defines a binary relation over integers; and b is an integer. 
When the context is clear, the parameter D can be omitted. 
A general logic program Π with aggregate atoms is a fi-
nite set of rules of the form H ← B, where H and B are 
first-order formulas in L Σ extended with aggregate atoms. 
</table></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgments</head><p>We would like to thank all anonymous reviewers for their helpful comments. Yi-Dong Shen is supported in part by the National Natural Science Foundation of China (NSFC) grants 60970045 and 60833001. Kewen Wang is partially supported by the Australia Research Council (ARC) grants DP1093652 and P110101042.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">The Description Logic Handbook: Theory, Implementation and Applications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Baader</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Calvanese</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Mcguinness</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Nardi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Patel-Schneider</forename></persName>
		</author>
		<editor>P. F.</editor>
		<imprint>
			<date type="published" when="2003" />
			<publisher>Cambridge University Press</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">First-order extension of the FLP stable model semantics via modified circumscription</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Bartholomew</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Meng</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IJCAI</title>
		<imprint>
			<date type="published" when="2011" />
			<biblScope unit="page" from="724" to="730" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Modular nonmonotonic logic programming revisited</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Dao-Tran</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Eiter</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Fink</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Krennwallner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ICLP</title>
		<imprint>
			<date type="published" when="2009" />
			<biblScope unit="page" from="145" to="159" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">A uniform integration of higher-order reasoning and external evaluations in answer-set programming</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Eiter</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Ianni</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Schindlauer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Tompits</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IJCAI</title>
		<imprint>
			<date type="published" when="2005" />
			<biblScope unit="page" from="90" to="96" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Combining answer set programming with description logics for the semantic web</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Eiter</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Ianni</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Lukasiewicz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Schindlauer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Tompits</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Artificial Intelligence</title>
		<imprint>
			<biblScope unit="volume">172</biblScope>
			<biblScope unit="page" from="1495" to="1539" />
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Recursive aggregates in disjunctive logic programs: Semantics and complexity</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Faber</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Leone</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Pfeifer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Logics in Artificial Intelligence: European Workshop</title>
		<imprint>
			<date type="published" when="2004" />
			<biblScope unit="page" from="200" to="212" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Semantics and complexity of recursive aggregates in answer set programming</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Faber</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Pfeifer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Leone</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Artificial Intelligence</title>
		<imprint>
			<biblScope unit="volume">175</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="278" to="298" />
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Consistency of clark&apos;s completion and existence of stable models</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Fages</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Methods of Logic in Computer Science</title>
		<imprint>
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="page" from="51" to="60" />
			<date type="published" when="1994" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Stable models and circumscription</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Ferraris</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Lifschitz</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Artificial Intelligence</title>
		<imprint>
			<biblScope unit="volume">175</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="236" to="263" />
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">The stable model semantics for logic programming</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Gelfond</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Lifschitz</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ICLP</title>
		<imprint>
			<date type="published" when="1988" />
			<biblScope unit="page" from="1070" to="1080" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Thirteen definitions of a stable model</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Lifschitz</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Fields of Logic and Computation</title>
		<imprint>
			<date type="published" when="2010" />
			<biblScope unit="page" from="488" to="503" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">A novel combination of answer set programming with description logics for the semantic web</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Pontelli</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Son</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Truszczynski</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Lukasiewicz</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Knowledge and Data Engineering</title>
		<imprint>
			<biblScope unit="volume">174</biblScope>
			<biblScope unit="issue">3-4</biblScope>
			<biblScope unit="page" from="1577" to="1592" />
			<date type="published" when="2010" />
		</imprint>
	</monogr>
	<note>Artificial Intelligence</note>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Logic programs with abstract constraint atoms</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><forename type="middle">W</forename><surname>Marek</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Truszczynski</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">AAAI</title>
		<imprint>
			<date type="published" when="2004" />
			<biblScope unit="page" from="86" to="91" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Circumscription and other nonmonotonic formalisms</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Mccarthy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Artificial Intelligence</title>
		<imprint>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="issue">1-2</biblScope>
			<biblScope unit="page" from="171" to="172" />
			<date type="published" when="1980" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Reconciling description logics and rules</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Motik</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rosati</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. ACM</title>
		<imprint>
			<biblScope unit="volume">57</biblScope>
			<biblScope unit="issue">5</biblScope>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">A logic for default reasoning</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Reiter</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Artificial Intelligence</title>
		<imprint>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="page" from="81" to="132" />
			<date type="published" when="1980" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Extending logic programs with description logic expressions for the semantic web</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><forename type="middle">D</forename><surname>Shen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wang</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><forename type="middle">W</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Semantic Web Conference</title>
		<imprint>
			<date type="published" when="2011" />
			<biblScope unit="page" from="633" to="648" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">A default approach to semantics of logic programs with constraint atoms</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><forename type="middle">D</forename><surname>Shen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">H</forename><surname>You</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">LP-NMR</title>
		<imprint>
			<date type="published" when="2009" />
			<biblScope unit="page" from="277" to="289" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Well-supported semantics for description logic programs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><forename type="middle">D</forename><surname>Shen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IJCAI</title>
		<imprint>
			<date type="published" when="2011" />
			<biblScope unit="page" from="1081" to="1086" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Reducts of propositional theories, satisfiability relations, and generalizations of semantics of logic programs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">C</forename><surname>Son</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Pontelli</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">H</forename><surname>Tu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Truszczynski</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">H</forename><surname>Van Emden</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">A</forename><surname>Kowalski</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Artificial Intelligence Research</title>
		<imprint>
			<biblScope unit="volume">29</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="733" to="742" />
			<date type="published" when="1976" />
		</imprint>
	</monogr>
	<note>J. ACM</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
