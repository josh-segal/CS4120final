<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2019-03-26T16:46+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Toward a Lightweight Model of BGP Safety</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Matvey</forename><surname>Arye</surname></persName>
							<affiliation key="aff0">
								<orgName type="laboratory">AT&amp;T Labs</orgName>
								<orgName type="institution" key="instit1">Princeton University</orgName>
								<orgName type="institution" key="instit2">Princeton University</orgName>
								<orgName type="institution" key="instit3">Princeton University</orgName>
								<orgName type="institution" key="instit4">Princeton University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rob</forename><surname>Harrison</surname></persName>
							<affiliation key="aff0">
								<orgName type="laboratory">AT&amp;T Labs</orgName>
								<orgName type="institution" key="instit1">Princeton University</orgName>
								<orgName type="institution" key="instit2">Princeton University</orgName>
								<orgName type="institution" key="instit3">Princeton University</orgName>
								<orgName type="institution" key="instit4">Princeton University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Richard</forename><surname>Wang</surname></persName>
							<affiliation key="aff0">
								<orgName type="laboratory">AT&amp;T Labs</orgName>
								<orgName type="institution" key="instit1">Princeton University</orgName>
								<orgName type="institution" key="instit2">Princeton University</orgName>
								<orgName type="institution" key="instit3">Princeton University</orgName>
								<orgName type="institution" key="instit4">Princeton University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pamela</forename><surname>Zave</surname></persName>
							<affiliation key="aff0">
								<orgName type="laboratory">AT&amp;T Labs</orgName>
								<orgName type="institution" key="instit1">Princeton University</orgName>
								<orgName type="institution" key="instit2">Princeton University</orgName>
								<orgName type="institution" key="instit3">Princeton University</orgName>
								<orgName type="institution" key="instit4">Princeton University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jennifer</forename><surname>Rexford</surname></persName>
							<affiliation key="aff0">
								<orgName type="laboratory">AT&amp;T Labs</orgName>
								<orgName type="institution" key="instit1">Princeton University</orgName>
								<orgName type="institution" key="instit2">Princeton University</orgName>
								<orgName type="institution" key="instit3">Princeton University</orgName>
								<orgName type="institution" key="instit4">Princeton University</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Toward a Lightweight Model of BGP Safety</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>For the past ten years, researchers have used the Stable Paths Problem (SPP) to analyze the stability properties of the Border Gateway Protocol (BGP). Analysis of SPP has revealed several combinations of topologies and routing configurations (or gadgets) where BGP cannot converge to a unique stable solution. Researchers typically analyze SPP by hand, using a trial-and-error process to (i) generate small SPP instances that exhibit undesirable properties and (ii) prove sufficient conditions for SPP solvability. In this paper, we present a formal, machine-readable SPP model encoded in the Alloy lightweight modeling language. The model consists of nodes with ranked sets of permitted paths, and a set of predicates for analyzing SPP instances. We also present an automated way to generate the smallest set of unique gadgets with no stable solution, or multiple stable solutions, including some previously-unknown gadgets. We use our model to verify sufficient conditions on SPP instances (e.g., &quot;no dispute wheel implies a unique stable solution&quot;), illustrating how our Alloy model can aid researchers in analyzing BGP.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>I. INTRODUCTION</head><p>The Border Gateway Protocol (BGP)-the Internet's interdomain routing protocol-is notoriously vulnerable to oscillation. Conflicting local policies in different Autonomous Systems (ASes) can prevent the routing system from converging to a stable selection of routes to a destination. Over the past ten years, the research community has made tremendous progress in understanding BGP safety, including example unsafe configurations (or gadgets) and sufficient conditions on local policies to ensure a safe routing system <ref type="bibr" target="#b0">[1]</ref>- <ref type="bibr" target="#b9">[10]</ref>. In this paper, we explore how modern model checkers can aid research on BGP safety by freeing researchers from much of the manual effort of constructing counter-examples and proofs, while providing a convenient way to explore new ideas and precisely communicate their results to others.</p><p>Research on BGP safety often uses a more abstract model of BGP-like protocols known as the Stable Paths Problem (SPP) <ref type="bibr" target="#b2">[3]</ref>. Any BGP configuration can be translated to an SPP instance, where each node has a ranked list of permitted paths and selects the highest-ranked path consistent with its neighbors' choices. <ref type="figure">Figure 1</ref> shows three example SPP instances. Using this static representation of the routing system, researchers can identify SPP instances that have no stable states or multiple stable states, and prove whether certain constraints are sufficient to ensure safety. As such, our first step is to construct and evaluate a model of SPP, as discussed in the rest of this paper; that is, we focus on BGP solvabilitydetermining whether SPP instances are unsolvable, uniquely solvable, or multiply solvable. While unique solvability is a necessary condition for BGP safety <ref type="bibr" target="#b8">[9]</ref>, having a single stable state is not a sufficient condition. Ultimately, a complete treatment of BGP safety will require a dynamic model, such as the Simple Path Vector Protocol (SPVP) <ref type="bibr" target="#b1">[2]</ref>. We plan to consider protocol dynamics as part of future work.</p><p>To analyze BGP solvability, we use Alloy <ref type="bibr" target="#b10">[11]</ref> to create a machine-readable definition of SPP that is nearly as concise as the version presented in the original SPP paper <ref type="bibr" target="#b2">[3]</ref>. Then, we use the Alloy Analyzer to automatically analyze SPP instances up to a specified size, to either verify the assertions or generate counter-examples. Sometimes we specify assertions we know to be false (e.g., "all SPP instances are uniquely solvable") to generate "counter-examples" of unsafe gadgets. Other times we specify assertions we expect to be true (e.g., "no dispute wheel implies unique solvability") and verify that it holds for all instances smaller than the given size. Developing such a model is more lightweight than developing a formal proof but the analysis is limited to a given instance size. In the process, we automatically generate many of the misbehaving gadgets that have dominated the BGP literature, along with some interesting new gadgets. We also automatically verify known sufficient conditions for BGP solvability, and discover some promising directions for future research.</p><p>This paper makes the following contributions. First, we provide a machine-readable SPP model immediately available for automatic, "push-button" analysis. Informally-proven assertions about SPP instances can now be quickly and accurately validated on topologies of varying sizes. Section II presents the Alloy model in a series of steps, ranging from the model of nodes and paths, to the permitted paths, and ultimately to the solvability assertions. Section III presents our iterative process for reducing counter-examples by iteratively adding constraints to the model to prevent the Alloy Analyzer from generating isomorphisms of previously-generated examples. This section also shows an example of using Alloy Analyzer to verify a sufficient condition for unique solvability. We present related work in Section IV and conclude the paper in Section V.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>II. STABLE PATHS PROBLEM AS AN ALLOY MODEL</head><p>Before describing our Alloy model of SPP, we introduce some basic concepts of the Alloy Modeling Language and the Alloy Analyzer. The basic building blocks of an Alloy model are sets of atoms and relations between those atoms. A model consists of signatures that define these atoms and constraints, called facts, on these atoms. Each unique combination of atoms and relations that satisfies these constraints is called an instance. Finally, the programmer makes assertions about these instances using predicates that evaluate some property of the model. The Alloy Analyzer then reports if any instances <ref type="figure">Fig. 1</ref>. We classify instances, called gadgets, of the SPP according to their solvability properties: unsolvable, solvable, and multiply solvable. The above figure shows an example of each type of instance. Numbered nodes represent abstract models of autonomous systems. The 0 node, called the destination, is special in that all other nodes share information about paths for reaching the destination. Listed next to each node is a set of paths that the node is willing to take to the destination, ordered in a highest-lowest preference. For example, Node 1 in BAD GADGET prefers the path from 1-3-0 more than its own path 1-0.</p><p>violate these assertions. Such instances are called counterexamples. This particular feature of Alloy makes it a good fit for studying SPP; with the appropriate constraints on paths and the (clearly erroneous) assertion that all SPP instances are solvable (or uniquely solvable), the Alloy Analyzer will generate counter-examples like the gadgets in <ref type="figure">Figure 1</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Describing SPP Instances in Alloy</head><p>An SPP instance consists of a set of nodes, which abstractly represent Autonomous Systems, and a set of paths between those nodes. There is one destination node to which all other source nodes select a path. Each source has a set of permitted paths it is willing to select; these paths are uniquely ranked and can only be the empty path or a sequence of source nodes ending at the destination. These core components of SPP are easily expressed in Alloy, as shown in <ref type="figure" target="#fig_1">Figure 2</ref>. 1 Nodes and paths are defined as atoms, and permitted paths are defined as a relation between a source and a sequence of paths. The position of a path in the sequence represents its ranking, where the first path is the most preferred.  The SPP formalism imposes constraints on paths and the ranking of permitted paths, as captured in <ref type="figure">Figures 3 and 4</ref>, respectively. The first fact in <ref type="figure">Figure 3</ref> requires that each nonempty path terminates at the destination node and contains no cycles. We implicitly assume a fully-connected graph, since any misbehaving gadget remains a misbehaving gadget after adding additional links. As such, we do not model the links in the topology or check that a path is feasible on the graph which simplifies the model. The second fact states that paths are unique.</p><formula xml:id="formula_0">1 fact validNonEmptyPaths { 2</formula><p>all path : NonEmptyPaths | 3 let path_nodes = path.nodes | 4 some path_nodes and 5 !(path_nodes.hasDups) and 6</p><p>path_nodes.last = DstNode } 7 8 fact noRepeatedPaths { 9 all disj p1,p2 : NonEmptyPaths | 10 p1.nodes != p2.nodes } <ref type="figure">Fig. 3</ref>. validNonEmptyPaths constrains the set of non-empty paths to ensure that they consist of some nodes, have no repeated nodes, and terminate at the destination node. noRepeatedPaths ensures that each unique nonempty path traverses a different sequence of nodes. The | symbol is read "such that".</p><p>Finally, <ref type="figure">Figure 4</ref> shows the facts that constrain the permitted paths at each source node. The first fact ensures that each source's set of permitted paths contains at least one non-empty path, that all non-empty paths begin with that particular source, and that the set of permitted paths contains the empty path which is always ranked last. The second fact ensures that each path included in the model is a permitted path for some source node, to avoid generating numerous equivalent SPP instances. Together, the code from Figures 2-4 completely specifies valid SPP instances. This model is nearly as concise as the original description of SPP in the literature <ref type="bibr" target="#b2">[3]</ref>, and yet has a machinereadable form amenable to automated analysis.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Asserting Solvability of SPP Instances</head><p>Solvability of an SPP instance is based on a set of selected paths. This set, also called a selection, contains exactly one path from the PermittedPaths of every SrcNode and thus represents a unique mapping from SrcNodes to a single Path beginning at that node. Based on the paths selected at adjacent nodes, each SrcNode derives a set of choices. This set contains all the paths the SrcNode could possibly  <ref type="figure">Fig. 4</ref>. The fact validPermittedPaths constrains the set of permitted paths so that at there is at least one non-empty path per node, no path has two ranks, the lowest ranked path is the empty path, and the first node in each ranked path is the source node. allPathsBelongToSomePermittedPaths specifies that each path atom is part of a permitted path for some node.</p><p>take to get to the DstNode either directly or through one of the selected paths of its adjacent nodes. A particular selection is considered a solution to an instance of the SPP if, at each source node, the selected path is the highest ranked path from its set of choices. Intuitively, a solution is stable because in a dynamic setting no node would change its selected path since it is the most preferred choice given the paths available from its neighbors. An SPP instance with at least one solution is solvable; it is uniquely solvable if there is exactly one solution and multiply solvable if several solutions exist.</p><p>We now build a predicate that tests whether an SPP instance is uniquely solvable by quantifying over all possible selections and checking whether they are solutions. For simplicity, we consider a topology with three source nodes. We represent a single path by a SrcNode→Rank 2 path tuple where the Rank corresponds to the preference index of the path in the PermittedPaths relation of the SrcNode in the tuple. Recall that a selection contains a single path from each SrcNode's set of permitted paths. Thus a valid selection is a set of path tuples with a single tuple for every SrcNode in the instance, as seen in lines 6-8 of <ref type="figure">Figure 5</ref>. We explore all possible selections by quantifying over every possible path ranking. Each unique combination of rankings corresponds to a single unique valid selection and the one keyword on line 3 verifies that there is only a single such selection that is a solution, as required for unique solvability. By quantifying over the node rankings, rather than all sets of three paths, we substantially reduce the search space the Analyzer must explore. The predicate is specific to a topology with three source nodes because Alloy does not support second-order logic which is necessary to quantify over a variable number of items. Instead, we simply (and automatically) generate a separate predicate for each SPP instance size we analyze.</p><p>We now define what it means for a selection to be a solution.  <ref type="figure">Fig. 5</ref>. oneSolvable3 checks that an SPP instance is uniquely solvable by quantifying over all possible selections and ensuring that only one is a solution. We can include multiply-solvable instances simply by changing the keyword one to some.</p><formula xml:id="formula_1">selection = (node1→rank1) 7 + (node2→rank2) 8 + (node3→rank3) | 9 SelectionIsSolution[selection] }</formula><p>A selection is a solution if and only if it contains the paths that are the most highly ranked paths of the set of choices for each node. This constraint is illustrated in <ref type="figure">Figure 6</ref>.</p><formula xml:id="formula_2">1 pred SelectionIsSolution 2 [selected: SrcNodes→seq/Int] { 3 let choices = GetChoices[selected] | 4 selected = GetBest[choices] } Fig. 6.</formula><p>SelectionIsSolution takes a selection in the form of SrcNode→Rank and determines whether it is a solution. First, it generates the list of choices based on the selection. Next it tests that the selection is equivalent to the best paths for each node from of its list of choices.</p><p>Last, we define the functions GetChoices and GetBest in <ref type="figure">Figure 7</ref>. GetChoices returns all SrcNode→Rank pairs that satisfy isValidChoice-that is, all pairs where the path corresponds to the EmptyPath, goes directly to the DstNode, or is consistent with a neighbor's selected path. To find the rank of the neighbor's selected path, line 10 performs a join, denoted by the period, that takes the selected set of SrcNode→Rank tuples and returns the Rank in the tuple where the first element equals secondNode. The function GetBest filters the set of SrcNode→Rank tuples to return the tuple with the best Rank for each SrcNode. Line 20 performs a join to get the set of Ranks contained in the set of choices for a node.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>III. USING ALLOY TO ANALYZE SPP SOLVABILITY</head><p>Our Alloy model enables us to study solvability properties of different SPP instances. We first analyze unsolvable gadgets (with no stable state) and multiply solvable gadgets (with multiple stable states), after eliminating redundant gadgets that share the same basic structure. Then, we use Alloy to verify constraints on SPP solvability. Finally, we use Alloy to explore why the dispute wheel is not a necessary condition for solvability.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Elimination of Redundant SPP Gadgets</head><p>Our model finds many unsolvable and multiply-solvable SPP instances. However, many of these gadgets are, in fact, very similar. Some gadgets differ only in the numbering of the nodes and associated paths, and others simply have extra paths that have no influence on solvability. Manually inspecting all of these gadgets is immensely tedious and provides little insight. Instead, we need an effective way to automatically characterize and eliminate these redundant gadgets to produce a minimal set of distinct unsolvable gadgets.</p><p>The Alloy Analyzer generates counterexamples to the programmer's assertions in an arbitrary order. As a result, our model could return large gadgets with additional paths that do not impact solvability. To generate a minimal set of gadgets, we apply an iterative process where we (i) force the Analyzer to generate small gadgets (by constraining the model to a small number of source nodes and permitted paths) that violate our solvability predicate and (ii) encode each new gadget as a predicate that excludes all such gadgets on the next execution of the Analyzer. After exhausting all gadgets of a given size, we consider gadgets with one additional node or path to see if any new gadgets (besides embeddings of smaller gadgets) arise. This automated process produces a small set of generic unsovlable gadgets up to a particular target size. <ref type="figure" target="#fig_2">Figure 8</ref> shows an elimination predicate for the DIS-AGREE gadget, where each of two source nodes prefers the path through the other node over its own direct path to the destination. To generalize the gadget, the nodes are quantified with the some quantifier, so any renumbering of nodes would still match the predicate. In addition the predicate specifies the relative order of path rankings, instead of fixed ranking numbers. As a result, any gadget that has the specified paths in the correct relative order will still match the predicate including those instances with extra paths that do not effect solvability.</p><p>Using this automated process, we fully explored gadgets with up to four source nodes, which required several days of processing. The automated analysis produced the 13 1 pred Disagree { 2 some node1, node2: SrcNode | 3 some node1path2, node1path1 4 node2path2, node2path1: Path | 5 some disj i12, i11: (node1.PermittedPaths).inds | 6 some disj i22, i21: (node1.PermittedPaths  gadgets-five unsolvable instances and eight multiply-solvable instances-shown in <ref type="figure" target="#fig_3">Figure 9</ref>. The well-known DISAGREE and BAD GADGET have exactly two permitted paths per node. Many of the other gadgets are very similar to these two well-known instances, just with additional nodes. For example, the gadget to the right of DISAGREE is remarkably similar to DISAGREE except for the addition of node 3. These gadgets, which would have been difficult to generate by hand, provide useful insight when we explore new conditions for solvability.</p><formula xml:id="formula_3">[i12] = node1path2 &amp;&amp; 20 node1.PermittedPaths[i11] = node1path1 &amp;&amp; 21 node2.PermittedPaths[i22] = node2path2 &amp;&amp; 22 node2.PermittedPaths[i21] = node2path1 &amp;&amp; 23 i12 &lt; i11 &amp;&amp; i22 &lt; i21 }</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Verifying a Sufficient Condition for Solvability</head><p>In addition to identifying interesting gadgets, BGP researchers also look for conditions that classify SPP instances as solvable or potentially unsolvable. The dispute wheel is a well-known construct for determining SPP solvability; if no set of nodes in an SPP instance form a dispute wheel, then the instance is safe-guaranteed to converge to a unique, stable solution <ref type="bibr" target="#b2">[3]</ref>. However, some SPP instances that have a dispute wheel are still safe. Therefore, the property "no dispute wheel" is a sufficient, but not necessary, condition for safety (and unique solvability).</p><p>To verify these results, we created a predicate that checks for the existence of a dispute wheel. A dispute wheel consists of a circular chain of nodes, where each node has a rim path and a pass-through path, where the rim path of the current node always goes through the pass-through path of the next node in the chain. Any node in the chain is either a pivot node-where the rim path is more preferred than the passthrough path (which, in this case, is also called a leg path)-or a non-pivot node-where the rim path is the same as the passthrough path. A predicate that can check for the existence of a dispute wheel in systems of three source nodes is presented in <ref type="figure">Figure 10</ref>. The DWLink function checks that two consecutive nodes form a valid link in the chain and the DW3 predicate uses DWLink to check for chains of three nodes.</p><p>With these predicates, we can now verify well-known properties about dispute wheels. Our model verifies the assertion that no dispute wheel implies unique solvability (i.e., the test for sufficiency passes). We can also verify that the presence of a dispute wheel does not imply that an instance is not uniquely solvable (i.e., the test for necessity fails) as Alloy can provides us with many counterexamples.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C. Exploring New Conditions for Unique Solvability</head><p>We suspect that a stronger condition that is both necessary and sufficient could be built by starting with the dispute wheel predicate and progressively adding conditions that prevent the predicate from matching uniquely-solvable SPP instances. Using our model, we can validate (or invalidate) such new conditions for necessity and sufficiency of unique solvability in a "push-button" manner.</p><p>Many of the uniquely-solvable instances contain latent dispute wheels. In these instances, some nodes form a dispute wheel, but some node in the wheel also possesses a permitted path that is more preferred than the rim and pass-through paths, preventing the selection of the rim path and ultimately preventing the dispute wheel from affecting the instance's solvability. By ignoring the rankings of paths outside of the wheel, the dispute wheel construction does not ensure that the contention actually manifests itself.</p><p>First, we were curious if the dispute wheel condition is necessary in cases where a latent dispute wheel could not occur. To answer this question we decided to explore the  <ref type="figure">Fig. 10</ref>. DWLink checks that currNode and can be a link in dispute wheel given that nxtPassThruPath is the leg of the next node. On line 5 prevs is an Alloy function that returns the set of all ranks less than currPassThruRank. So the rim rank of the current node is either less than or equal to the pass-through rank of the node which corresponds to the current node being a pivot and non-pivot node, respectively. DW3 checks that there is a dispute wheel of three nodes.</p><p>set of instances with unembedded dispute wheels. A dispute wheel is unembedded if all of the paths in the SPP instance are either rim paths or pass-through paths and every node is either a pivot or non-pivot node. Such an instance cannot have a latent dispute wheel since all non-empty permitted paths are part of the dispute wheel. We ran a test for necessity on this set of unembedded instances. To our surprise, we found a counterexample-a solvable instance with an unembedded dispute wheel, as shown in <ref type="figure" target="#fig_4">Figure 11</ref>. This instance actually has a single stable solution: the empty path for nodes 1 and 2, and 30 and 430 for nodes 3 and 4, respectively. Yet all of the paths in the instance are part of the dispute wheel 3 .</p><p>We developed a revised dispute wheel predicate to exclude instances like the one in <ref type="figure" target="#fig_4">Figure 11</ref>. The revised dispute wheel ensures that each leg path is an independent leg. A path is an independent leg if only the first node of the path belongs to the set of pivot and non-pivot nodes. The original dispute wheel has no such constraint-a valid leg path could be any permitted path in the SPP instance. The revised dispute wheel is more tightly constrained than the original predicate. Thus, we run a test for sufficiency to ensure that we did not over-constrain the predicate. We verified that "no revised dispute wheel" did indeed imply solvability on topologies of up to four source nodes. We verified that all SPP instances with an unembedded revised dispute wheel are not uniquely solvable. Therefore, this predicate passes the test for necessity on unembedded instances, a test which failed for the original dispute wheel condition.</p><p>We are still working on the set of constraints that is both necessary and sufficient for BGP safety. Our Alloy model has been invaluable by providing us with counterexamples to our assertions. This allows us to test our constraints much more quickly than developing proofs for each assertion, leading to a faster development cycle for our research.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>IV. RELATED WORK</head><p>Lightweight modeling of network protocols: Zave's work on verification of Chord demonstrated the utility of applying lightweight modeling to network protocols <ref type="bibr" target="#b11">[12]</ref>. Our study analyzes configurations of BGP policy rather than the protocol itself. Also, Zave's work modeled protocol dynamics, whereas we consider a purely static model of BGP path selection.</p><p>BGP modeling: The static SPP model <ref type="bibr" target="#b2">[3]</ref> and the dynamic SPVP model <ref type="bibr" target="#b1">[2]</ref>, provide rigorous ways to reason about BGP safety. Subsequent work identified conditions, some necessary <ref type="bibr" target="#b2">3</ref> The dispute wheel includes nodes 3→2→1→4. Paths 2140, 3240, and 430 are the rim paths. Paths 240, 30, and 40 are the pass-through paths. Path 140 is both a rim and pass-through path since node 1 is a non-pivot node. and others sufficient, for ensuring BGP safety <ref type="bibr" target="#b0">[1]</ref>- <ref type="bibr" target="#b9">[10]</ref>. In our work, we represent SPP in the Alloy modeling language and automatically generate instances that are unsolvable (or multiply-solvable) and verify conditions for BGP solvability. Recent research shows that all multiply-solvable instances are subject to persistent routing oscillation <ref type="bibr" target="#b8">[9]</ref>. Still, to verify the full range of known conditions for BGP safety, we need to go beyond our static model (of SPP) to a dynamic model (of SPVP).</p><p>Formal methods applied to BGP: Recent work on Formally Safe Routing (FSR) <ref type="bibr" target="#b12">[13]</ref> supports automatic analysis of SPP instances (as well as more abstract routing policies) expressed using routing algebra. The FSR work shows how to translate SPP instances and routing policies into integer constraints, enabling the use of SMT solvers to analyze safety. Rather than analyzing existing SPP instances, our models generate SPP instances that (dis)obey solvability conditions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>V. CONCLUSIONS AND FUTURE WORK</head><p>The end goal of our research is to use lightweight verification to improve how researchers (and perhaps ultimately practitioners) analyze BGP safety. This paper takes an important first step by modeling BGP solvability using the Alloy modeling language and the Alloy Analyzer. In future work, we will expand our models to capture the protocol dynamics of SPVP, so we can use Alloy to reason about safety and verify the relationship between the static and dynamic models of BGP. Further, accounting for SPVP dynamics permits the verification and exploration of other well-known constraints on SPP instances such as the Gao-Rexford conditions and Safety Under Filtering. We also want to use our models to explore new necessary and sufficient conditions for BGP safety.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>1</head><label></label><figDesc>abstract sig Node {} 2 3 one sig DstNode extends Node {} 4 sig SrcNodes extends Node {PermittedPaths: seq Path} 5 6 abstract sig Path {} 7 one sig EmptyPath extends Path {} 8 sig NonEmptyPaths extends Path {nodes: seq Node}</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Fig. 2 .</head><label>2</label><figDesc>Fig. 2. An SPP instance consists of source nodes and a single destination node. Permitted paths are an ordered sequence of nodes or an empty path.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Fig. 8 .</head><label>8</label><figDesc>Fig. 8. Representing a generic version of DISAGREE.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Fig. 9 .</head><label>9</label><figDesc>Fig. 9. These are the 13 simplest unique representations of all gadgets for instances of SPP under four nodes.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Fig. 11 .</head><label>11</label><figDesc>Fig. 11. A gadget with an unembedded dispute wheel that is still solvable.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2" validated="false"><head>1 fun GetChoices [selected:</head><label>1</label><figDesc>selection, GetChoices returns all choices for all nodes. isValidChoice tests if a choice is valid. GetBest filters the SrcNode→Rank tuples, returning the best tuple for each node.</figDesc><table>SrcNodes →seq/Int]: 
2 SrcNodes →seq/Int {{ 
3 
node: SrcNodes, rank: seq/Int | 
4 
isValidChoice[node, rank, selected] }} 
5 
6 pred isValidChoice [node: SrcNodes, 
7 
rank: seq/Int, selected : SrcNodes →seq/Int]{ 
8 
let path = node.PermittedPaths[rank] | 
9 
let secondNode = path.nodes[1] | 
10 
let secondNodeSelRank = second_node.selected | 
11 
let secondNodeSelPath = 
12 
secondNode.PermittedPaths[secondNodeSelRank] | 
13 
(path = EmptyPath) or 
14 
(secondNode = DstNode) or 
15 
(path.nodes.rest = secondNodeSelPath.nodes) 
16 
17 fun GetBest[choices: SrcNodes →seq/Int]: 
18 SrcNodes →seq/Int {{ 
19 
node: SrcNodes, bestRank: seq/Int | 
20 
let choiceRanksForNode = node.choices | 
21 
bestRank = min[choiceRanksForNode] }} 

Fig. 7. 
Given a </table></figure>

			<note place="foot" n="1"> While we have not provided a formal treatment of Alloy language syntax, we believe that the code is fairly intuitive on its own and should be somewhat understandable even to the unfamiliar reader.</note>

			<note place="foot" n="2"> This is Alloy notation for a two-element tuple where the first element is a SrcNode and the second is a Rank, which is not a formal type in Alloy but used here for clarity.</note>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">An analysis of BGP convergence properties</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">G</forename><surname>Griffin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Wilfong</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM SIGCOMM</title>
		<imprint>
			<date type="published" when="1999" />
			<biblScope unit="page" from="277" to="288" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Policy disputes in path vector protocols</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">G</forename><surname>Griffin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><forename type="middle">B</forename><surname>Shepherd</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Wilfong</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE ICNP</title>
		<imprint>
			<date type="published" when="1999" />
			<biblScope unit="page" from="21" to="30" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">The stable paths problem and interdomain routing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">G</forename><surname>Griffin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><forename type="middle">B</forename><surname>Shepherd</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Wilfong</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE/ACM Trans. on Networking</title>
		<imprint>
			<biblScope unit="volume">10</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="232" to="243" />
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Stable Internet routing without global coordination</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Gao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Rexford</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE/ACM Trans. on Networking</title>
		<imprint>
			<biblScope unit="volume">9</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="681" to="692" />
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Inherently safe backup routing with BGP</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Gao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">G</forename><surname>Griffin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Rexford</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE INFOCOM</title>
		<imprint>
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Design principles of policy languages for path vector protocols</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">G</forename><surname>Griffin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Jaggard</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Ramachandran</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM SIGCOMM</title>
		<imprint>
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Metarouting</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">G</forename><surname>Griffin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">L</forename><surname>Sobrinho</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM SIGCOMM</title>
		<imprint>
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Implications of autonomy for the expressiveness of policy routing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Feamster</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Johari</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Balakrishnan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM SIGCOMM</title>
		<imprint>
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Searching for stability in interdomain routing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Sami</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Schapira</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Zohar</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE INFOCOM</title>
		<imprint>
			<date type="published" when="2009" />
			<biblScope unit="page" from="549" to="557" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Neighbor-specific BGP: More flexible routing policies while improving global stability</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Schapira</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Rexford</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM SIGMETRICS</title>
		<imprint>
			<date type="published" when="2009" />
			<biblScope unit="page" from="217" to="228" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title level="m" type="main">Alloy community</title>
		<ptr target="http://alloy.mit.edu/community/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title level="m" type="main">Why the Chord ring-maintenance protocol is not correct</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Zave</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2011-03" />
		</imprint>
	</monogr>
	<note>Extended Abstract),&quot; tech. rep., AT&amp;T Research</note>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
		<title level="m" type="main">FSR: Formal analysis and implementation toolkit for safe interdomain routing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Jia</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Zhou</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Ren</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><forename type="middle">T</forename><surname>Loo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Rexford</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Nigam</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Scedrov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Talcott</surname></persName>
		</author>
		<idno>MS-CIS-11-10</idno>
		<imprint>
			<date type="published" when="2011-05" />
		</imprint>
		<respStmt>
			<orgName>U. Pennsylvania</orgName>
		</respStmt>
	</monogr>
<note type="report_type">Tech. Rep.</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
