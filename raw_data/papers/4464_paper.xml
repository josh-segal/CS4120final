<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2019-03-26T16:50+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">To Search or to Crawl? Towards a Query Optimizer for Text-Centric Tasks</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Panagiotis</forename><forename type="middle">G</forename><surname>Ipeirotis</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">New York University</orgName>
								<orgName type="institution" key="instit2">Microsoft Research</orgName>
								<orgName type="institution" key="instit3">Columbia University</orgName>
								<orgName type="institution" key="instit4">Columbia University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Eugene</forename><surname>Agichtein</surname></persName>
							<email>eugeneag@microsoft.com</email>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">New York University</orgName>
								<orgName type="institution" key="instit2">Microsoft Research</orgName>
								<orgName type="institution" key="instit3">Columbia University</orgName>
								<orgName type="institution" key="instit4">Columbia University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pranay</forename><surname>Jain</surname></persName>
							<email>pranay.jain@columbia.edu</email>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">New York University</orgName>
								<orgName type="institution" key="instit2">Microsoft Research</orgName>
								<orgName type="institution" key="instit3">Columbia University</orgName>
								<orgName type="institution" key="instit4">Columbia University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Luis</forename><surname>Gravano</surname></persName>
							<email>gravano@cs.columbia.edu</email>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">New York University</orgName>
								<orgName type="institution" key="instit2">Microsoft Research</orgName>
								<orgName type="institution" key="instit3">Columbia University</orgName>
								<orgName type="institution" key="instit4">Columbia University</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">To Search or to Crawl? Towards a Query Optimizer for Text-Centric Tasks</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Text is ubiquitous and, not surprisingly, many important applications rely on textual data for a variety of tasks. As a notable example, information extraction applications derive structured relations from un-structured text; as another example, focused crawlers explore the web to locate pages about specific topics. Execution plans for text-centric tasks follow two general paradigms for processing a text database: either we can scan, or &quot;crawl,&quot; the text database or, alternatively, we can exploit search engine indexes and retrieve the documents of interest via carefully crafted queries constructed in task-specific ways. The choice between crawl-and query-based execution plans can have a substantial impact on both execution time and output &quot;completeness&quot; (e.g., in terms of recall). Nevertheless, this choice is typically ad-hoc and based on heuristics or plain intuition. In this paper, we present fundamental building blocks to make the choice of execution plans for text-centric tasks in an informed, cost-based way. Towards this goal, we show how to analyze query-and crawl-based plans in terms of both execution time and output completeness. We adapt results from random-graph theory and statistics to develop a rigorous cost model for the execution plans. Our cost model reflects the fact that the performance of the plans depends on fundamental task-specific properties of the underlying text databases. We identify these properties and present efficient techniques for estimating the associated parameters of the cost model. Overall, our approach helps predict the most appropriate execution plans for a task, resulting in significant efficiency and output completeness benefits. We complement our results with a large-scale experimental evaluation for three important text-centric tasks and over multiple real-life data sets.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">INTRODUCTION</head><p>Text is ubiquitous and, not surprisingly, many applications rely on textual data for a variety of tasks. For example, information extraction applications retrieve documents and extract structured relations from the unstructured text in the documents. Reputation management systems download web pages to track the "buzz" around companies and products. Comparative shopping agents locate e-commerce web sites and add the products offered in the pages to their own index.</p><p>To process a text-centric task over a text database (or the web), we can retrieve the relevant database documents in different ways. One approach is to scan or crawl the database to retrieve its documents and process them as required by the task. While this approach guarantees that we cover all documents that are potentially relevant for the task, it might be unnecessarily expensive in terms of execution time.</p><p>For example, consider the task of extracting information on disease outbreaks (e.g., the name of the disease, the location and date of the outbreak, and the number of affected people) as reported in news articles. This task does not require that we scan and process, say, the articles about sports in a newspaper archive. In fact, only a small fraction of the archive is of relevance to the task. For tasks such as this one, a natural alternative to crawling is to exploit a search engine index on the database to retrieve -via careful querying-the useful documents. In our example, we can use keywords that are strongly associated with disease outbreaks (e.g., "World Health Organization," "case fatality rate") and turn these keywords into queries to find news articles that are appropriate for the task.</p><p>The choice between a crawl-and a query-based execution strategy for a text-centric task is analogous to the choice between a scan-and an index-based execution plan for a selection query over a relation. Just as in the relational model, the choice of execution strategy can substantially affect the execution time of the task. In contrast to the relational world, however, this choice might also affect the quality of the output that is produced: while a crawl-based execution of a text-centric task guarantees that all documents are processed, a querybased execution might miss some relevant documents, hence producing potentially incomplete output, with less-than-perfect recall. The choice between crawl-and query-based execution plans can then have a substantial impact on both execution time and output recall. Nevertheless, this important choice is typically left to simplistic heuristics or plain intuition.</p><p>In this paper, we introduce fundamental building blocks for the optimization of text-centric tasks. Towards this goal, we show how to rigorously analyze query-and crawl-based plans for a task in terms of both execution time and output recall. To analyze crawl-based plans, we apply techniques from statistics to model crawling as a document sampling process; to analyze query-based plans, we first abstract the querying process as a random walk on a querying graph, and then apply results for the theory of random graphs to discover relevant properties of the querying process. Our cost model reflects the fact that the performance of the execution plans depends on fundamental taskspecific properties of the underlying text databases. We identify these properties and present efficient techniques for estimating the associated parameters of the cost model.</p><p>In brief, the contributions and content of the paper are as follows:</p><p>• A novel framework for analyzing crawl-and query-based execution plans for text-centric tasks in terms of execution time and output recall (Section 3).  • A description of four crawl-and query-based execution plans, which underlie the implementation of many existing text-centric tasks (Section 4).</p><p>• A rigorous analysis of each execution plan alternative in terms of execution time and recall; this analysis relies on fundamental task-specific properties of the underlying databases (Section 5).</p><p>• An optimization strategy that estimates the database properties that affect the execution time and recall of each plan and selects the best execution plan for the task description and target recall requirements (Section 6).</p><p>• An extensive experimental evaluation showing that our optimization strategy is accurate and results in significant performance gains. Our experiments include three important textcentric tasks and multiple real-life data sets (Sections 7 and 8). Finally, Section 9 discusses related work, while Section 10 provides further discussion and concludes the paper.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">EXAMPLES OF TEXT-CENTRIC TASKS</head><p>In this section, we briefly review three important text-centric tasks that we will use throughout the paper as running examples, to illustrate our framework and techniques.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Task 1: Information Extraction</head><p>Unstructured text (e.g., in newspaper articles) often embeds structured information that can be used for answering relational queries or for data mining. The first task that we consider is the extraction of structured information from text databases. An example of an information extraction task is the construction of a table DiseaseOutbreaks(DiseaseName, Date, Country) of reported disease outbreaks from a newspaper archive (see <ref type="figure" target="#fig_1">Figure 1)</ref>. A tuple yellow fever, 2005, Mali might then be extracted from the news articles in <ref type="figure" target="#fig_1">Figure 1</ref>.</p><p>Information extraction systems typically rely on patterns -either manually created or learned from training examples-to extract the structured information from the documents in a database. The extraction process is usually time consuming, since information extraction systems might rely on a range of expensive text analysis functions, such as parsing or named-entity tagging (e.g., to identify all person names in a document). See <ref type="bibr" target="#b27">[28]</ref> for an introductory survey on information extraction.</p><p>A straightforward execution strategy for an information extraction task is to retrieve and process every document in a database exhaustively. As a refinement, an alternative strategy might use filters and do the expensive processing of only "promising" documents; for example, the Proteus system <ref type="bibr" target="#b28">[29]</ref> ignores database documents that do not include words such as "virus" and "vaccine" when extracting the DiseaseOutbreaks relation. As an alternative, query-based approaches such as QXtract <ref type="bibr" target="#b1">[2]</ref> have been proposed to avoid retrieving all documents in a database; instead, these approaches retrieve appropriate documents via carefully crafted queries.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Task 2: Content Summary Construction</head><p>Many text databases have valuable contents "hidden" behind search interfaces and are hence ignored by search engines such as Google.   Metasearchers are helpful tools for searching over many databases at once through a unified query interface. A critical step for a metasearcher to process a query efficiently and effectively is the selection of the most promising databases for the query. This step typically relies on statistical summaries of the database contents <ref type="bibr" target="#b10">[11,</ref><ref type="bibr" target="#b24">25]</ref>. The second task that we consider is the construction of a content summary of a text database. The content summary of a database generally lists each word that appears in the database, together with its frequency. For example, <ref type="figure" target="#fig_2">Figure 2</ref> shows that the word "xbox" appears in 124 documents in the Forbes.com database. If we have access to the full contents of a database (e.g., via crawling), it is straightforward to derive these simple content summaries. If, in contrast, we only have access to the database contents via a limited search interface (e.g., as is the case for "hidden-web" databases <ref type="bibr" target="#b4">[5]</ref>), then we need to resort to query-based approaches for content summary construction <ref type="bibr" target="#b8">[9,</ref><ref type="bibr" target="#b30">31]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Task 3: Focused Resource Discovery</head><p>Text databases often contain documents on a variety of topics. Over the years, a number of specialized search engines (as well as directories) that focus on a specific topic of interest have been proposed (e.g., FindLaw). The third task that we consider is the identification of the database documents that are about the topic of a specialized search engine, or focused resource discovery.</p><p>As an example of focused resource discovery, consider building a search engine that specializes in documents on botany from the web at large (see <ref type="figure" target="#fig_3">Figure 3</ref>). For this, an expensive strategy would crawl all documents on the web and apply a document classifier <ref type="bibr" target="#b38">[39]</ref> to each crawled page to decide whether it is about botany (and hence should be indexed) or not (and hence should be ignored). As an alternative execution strategy, focused crawlers (e.g., <ref type="bibr" target="#b13">[14,</ref><ref type="bibr" target="#b12">13,</ref><ref type="bibr" target="#b32">33]</ref>) concentrate their effort on documents and hyperlinks that are on-topic, or likely to lead to on-topic documents, as determined by a number of heuristics. Focused crawlers can then address the focused resource discovery task efficiently at the expense of potentially missing relevant documents. As yet another alternative, Cohen and Singer <ref type="bibr" target="#b19">[20]</ref> propose a querybased approach for this task, where they exploit search engine indexes and use queries derived from a document classifier to quickly identify pages that are relevant to a given topic.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">DESCRIBING TEXT-CENTRIC TASKS</head><p>While the text-centric examples of Section 2 might appear substantially different on the surface, they all operate over a database of text documents and also share other important underlying similarities.</p><p>Each task in Section 2 can be regarded as deriving "tokens" from a database, where a token is a unit of information that we define in a task-specific way. For Task 1, the tokens are the relation tuples that are extracted from the documents. For Task 2, the tokens are the words in the database (accompanied by the associated word frequencies). For Task 3, the tokens are the documents (or web pages) in the database that are about the topic of focus.</p><p>The execution strategies for the tasks in Section 2 rely on taskspecific document processors to derive the tokens associated with the task. For Task 1, the document processor is the information extraction system of choice (e.g., Proteus <ref type="bibr" target="#b28">[29]</ref>, DIPRE <ref type="bibr" target="#b6">[7]</ref>, Snowball <ref type="bibr" target="#b0">[1]</ref>): given a document, the information extraction system extracts the tokens (i.e., the tuples) that are present in the document. For Task 2, the document processor extracts the tokens (i.e., the words) that are present in a given document, and the associated document frequencies are updated accordingly in the content summary. For Task 3, the document processor decides (e.g., via a document classifier such as Naive Bayes <ref type="bibr" target="#b22">[23]</ref> or Support Vector Machines <ref type="bibr" target="#b39">[40]</ref>) whether a given document is about the topic of focus; if the classifier deems the document relevant, the document is added as a token to the output and is discarded otherwise.</p><p>The alternate execution strategies for the Section 2 tasks differ in how they retrieve the input documents for the document processors, as we will discuss in Section 4. Some execution strategies fully process every available database document, thus guaranteeing the extraction of all the tokens that the underlying document processor can derive from the database. In contrast, other execution strategies focus, for efficiency, on a strict subset of the database documents, hence potentially missing tokens that would have been derived from unexplored documents. One subcategory applies a filter (e.g., derived in a training stage) to each document to decide whether to fully process it or not. Other strategies retrieve via querying the documents to be processed, where the queries can be derived in a number of ways that we will discuss. All these alternate execution strategies thus exhibit different tradeoffs between execution time and output recall. [Execution Time] Consider a text-centric task, a database of text documents D, and an execution strategy S for the task, with an underlying document processor P . Then, we define the execution time of S over D, T ime(S, D), as</p><formula xml:id="formula_0">T ime(S, D) = tT (S) + X q∈Q sent tQ(q) + X d∈D retr " tR(d) + tF (d) « + X d∈Dproc tP (d)</formula><p>where</p><p>• Qsent is the set of queries sent by S,</p><p>• Dretr is the set of documents retrieved by S (Dretr ⊆ D),</p><p>• Dproc is the set of documents that S processes with document processor P (Dproc ⊆ D), • tT (S) is the time for training the execution strategy S,</p><p>• tQ(q) is the time for evaluating a query q,</p><p>• tR(d) is the time for retrieving a document d,</p><p>• tF (d) is the time for filtering a retrieved document d, and</p><p>• tP (d) is the time for processing a document d with P .</p><p>Assuming that the time to evaluate a query is constant across queries (i.e., tQ = tQ(q), for every q ∈ Qsent ) and that the time to retrieve, filter, or process a single document is constant across documents (i.e.,</p><formula xml:id="formula_1">tR = tR(d), tF = tF (d), tP = tP (d), for every d ∈ D), we have:</formula><p>T ime(S, D) = tT (S)+tQ·|Qsent |+`tR |+` |+`tR +tF´·|Dretr +tF´ +tF´·|Dretr |+tP ·|Dproc| 2 DEFINITION 3.2.</p><p>[Recall] Consider a text-centric task, a database of text documents D, and an execution strategy S for the task, with an underlying document processor P . Let Dproc be the set of Input: database D, recall threshold τ , document processor P Output: tokens Tokensretr Tokensretr = ∅, Dretr = ∅, recall = 0 while recall &lt; τ do</p><p>Retrieve an unprocessed document d and add d to Dretr Process d using P and add extracted tokens to Tokensretr recall = |Tokensretr |/|Tokens| end return Tokensretr <ref type="figure">Figure 4</ref>: The Scan strategy documents from D that S processes with P . Then, we define the recall of S over D, Recall (S, D), as</p><formula xml:id="formula_2">Recall (S, D) = |Tokens(P, Dproc)| |Tokens(P, D)| (1)</formula><p>where Tokens(P, D) is the set of tokens that the document processor P extracts from the set of documents D. 2</p><p>Our problem formulation is close, conceptually, to the evaluation of a selection predicate in an RDBMS. In relational databases, the query optimizer selects an access path (i.e., a sequential scan or a set of indexes) that is expected to lead to an efficient execution. We follow a similar structure in our work. In the next section, we describe the alternate evaluation methods that are at the core of the execution strategies for text-centric tasks that have been discussed in the literature. <ref type="bibr" target="#b0">1</ref> Then, in subsequent sections, we analyze these strategies to see how their performance depends on the task and database characteristics.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">EXECUTION STRATEGIES</head><p>In this section, we review the alternate execution plans that can be used for the text-centric tasks described above, and discuss how we can "instantiate" each generic plan for each task of Section 2. Our discussion assumes that each task has a target recall value τ , 0 &lt; τ ≤ 1, that needs to be achieved (see Definition 3.2), and that the execution can stop as soon as the target recall is reached.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Scan</head><p>The Scan (SC) strategy is a crawl-based strategy that processes each document in a database D exhaustively until the number of tokens extracted satisfies the target recall τ (see <ref type="figure">Figure 4)</ref>.</p><p>The Scan execution strategy does not need training and does not send any queries to the database. Hence, tT (SC) = 0 and |Qsent | = 0. Furthermore, Scan does not apply any filtering, hence tF = 0 and |Dproc| = |Dretr |. Therefore, the execution time of Scan is:</p><formula xml:id="formula_3">T ime(SC, D) = |Dretr | · (tR + tP )<label>(2)</label></formula><p>The Scan strategy is the basic evaluation strategy that many textcentric algorithms use when there are no efficiency issues, or when recall, which is guaranteed to be perfect according to Definition 3.2, is important. We should stress, though, that |Dretr | for Scan is not necessarily equal to |D|: when the target recall τ is low, or when tokens appear redundantly in multiple documents, Scan may reach the target recall without processing all the documents in D. In Section 5, we show how to estimate the value of |Dretr | that is needed by Scan to reach a target recall τ .</p><p>A basic version of Scan accesses documents in random order. Variations of Scan might impose a specific processing order and prioritize, say, "promising" documents that are estimated to contribute many new tokens. Another natural improvement of Scan is to avoid processing altogether documents expected not to contribute any tokens; this is the basic idea behind Filtered Scan, which we discuss next.</p><p>Input: database D, recall threshold τ , classifier C, document processor P Output: tokens Tokensretr Tokensretr = ∅ , Dretr = ∅, recall = 0 while recall &lt; τ and |Dretr | &lt; |D| do</p><p>Retrieve an unprocessed document d and add d to Dretr Use C to classify d as useful for the task or not if d is useful then Process d using P and add extracted tokens to Tokensretr end recall = |Tokensretr |/|Tokens| end return Tokensretr <ref type="figure">Figure 5</ref>: The Filtered Scan strategy</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Filtered Scan</head><p>The Filtered Scan (F S) strategy is a variation of the basic Scan strategy. While Scan indistinguishably processes all documents retrieved, Filtered Scan first uses a classifier C to decide whether a document d is useful, i.e., whether d contributes at least one token (see <ref type="figure">Figure 5</ref>). Given the potentially high cost of processing a document with the document processor P , a quick rejection of useless documents can speed up the overall execution considerably.</p><p>The training time tT (F S) for Filtered Scan is equal to the time required to build the classifier C for a specific task. Training represents a one-time cost for a task, so in a repeated execution of the task (i.e., over a new database) the classifier will be available with tT (FS) = 0. This is the case that we assume in the rest of the analysis. Since Filtered Scan does not send any queries, |Qsent | = 0. While Filtered Scan retrieves and classifies |Dretr | documents, it actually processes only Cσ · |Dretr | documents, where Cσ is the "selectivity" of the classifier C, defined as the fraction of database documents that C judges as useful. Therefore, according to Definition 3.1, the execution time of Filtered Scan is:</p><formula xml:id="formula_4">T ime(F S, D) = |Dretr | · ` tR + tF + Cσ · tP´( tP´ tP´(3)</formula><p>In Section 5, we show how to estimate the value of |Dretr | that is needed for Filtered Scan to reach the target recall τ . Filtered Scan is used when tP is high and there are many database documents that do not contribute any tokens to the task at hand. For Task 1, Filtered Scan is used by Proteus <ref type="bibr" target="#b28">[29]</ref>, which uses a hand-built set of inexpensive rules to discard useless documents. For Task 2, the Filtered Scan strategy is typically not applicable, since all the documents are useful. For Task 3, the Filtered Scan strategy corresponds to a "hard" focused crawler <ref type="bibr" target="#b13">[14]</ref> that prunes the search space by only considering documents that are pointed to by useful documents.</p><p>Both Scan and Filtered Scan are crawl-based strategies. Next, we describe two query-based strategies, Iterative Set Expansion, which emulates query-based strategies that rely on "bootstrapping" techniques, and Automatic Query Generation, which generates queries automatically, without using the database results.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Iterative Set Expansion</head><p>Iterative Set Expansion (ISE) is a query-based strategy that queries a database with tokens as they are discovered, starting with a typically small number of user-provided seed tokens Tokens seed . The intuition behind this strategy is that known tokens might lead to unseen tokens via documents that have both seen and unseen tokens (see <ref type="figure" target="#fig_5">Figure 6</ref>). Queries are derived from the tokens in a task-specific way. For example, a Task 1 tuple Cholera, 1999, Nigeria for DiseaseOutbreaks might be turned into query <ref type="bibr">[Cholera AND Nigeria]</ref>; this query, in turn, might help retrieve documents that report other disease outbreaks, such as <ref type="bibr">Cholera, 2005, Senegal and</ref><ref type="bibr">Measles, 2004</ref>, Nigeria.</p><p>Iterative Set Expansion has no training phase, hence tT (ISE) = 0. We assume that Iterative Set Expansion has to send |Qsent | queries to reach the target recall. In Section 5, we show how to estimate this value of |Qsent |. Also, since Iterative Set Expansion processes all the Input: database D, recall threshold τ , tokens Tokens seed , document processor P Output: tokens Tokensretr Tokensretr = ∅, Dretr = ∅, recall = 0 while recall &lt; τ and Tokens seed = ∅ do Remove a token t from Tokens seed Transform t into a query q and issue q to D Retrieve up to maxD documents matching q foreach newly retrieved document d do Add d to Dretr Process d using P and add newly extracted tokens to Tokensretr and Tokens seed recall = |Tokensretr |/|Tokens| if recall ≥ τ then return Tokensretr end end end return Tokensretr  </p><formula xml:id="formula_5">Time(ISE, D) = |Qsent | · tQ + |Dretr | · ` tR + tP´( tP´ tP´(4)</formula><p>Informally, we expect Iterative Set Expansion to be efficient when tokens tend to co-occur in the database documents. In this case, we can start from a few tokens and "reach" the remaining ones. (We define reachability formally in Section 5.4.) In contrast, this strategy might "stall" and lead to poor recall for scenarios when tokens occur in isolation, as was analyzed in <ref type="bibr" target="#b2">[3]</ref>.</p><p>Iterative Set Expansion has been successfully applied in many tasks. For Task 1, Iterative Set Expansion corresponds to the Tuples algorithm for information extraction <ref type="bibr" target="#b1">[2]</ref>, which was shown to outperform crawl-based strategies when |D useful | |D|, where D useful is the set of documents in D that "contribute" at least one token for the task. For Task 2, Iterative Set Expansion corresponds to the query-based sampling algorithm by Callan et al. <ref type="bibr" target="#b9">[10]</ref>, which creates a content summary of a database from a document sample obtained via query words derived (randomly) from the already retrieved documents. For Task 3, Iterative Set Expansion is not directly applicable, since there is no notion of "co-occurrence." Instead, strategies that start with a set of topic-specific queries are preferable. Next, we describe such a querybased strategy.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4">Automatic Query Generation</head><p>Automatic Query Generation (AQG) is a query-based strategy for retrieving useful documents for a task. Automatic Query Generation works in two stages: query generation and execution. In the first stage, Automatic Query Generation trains a classifier to categorize documents as useful or not for the task; then, rule-extraction algorithms derive queries from the classifier. In the execution stage, Automatic Query Generation searches a database using queries that are expected to retrieve useful documents. For example, for Task 3 with botany as the topic, Automatic Query Generation generates queries such as <ref type="bibr">[plant AND phylogeny]</ref> and <ref type="bibr">[phycology]</ref>. (See <ref type="figure" target="#fig_6">Figure 7</ref>.)</p><p>The training time for Automatic Query Generation involves downloading a training set Dtrain of documents and processing them with P , incurring a cost of |Dtrain | · (tR + tP ). Training time also includes the time for the actual training of the classifier. This time depends on the learning algorithm and is, typically, at least linear in the size of Dtrain . Training represents a one-time cost for a task, so in a repeated execution of the task (i.e., over a new database) the classifier will be available with tT (AQG) = 0. This is the case that we assume in the rest of the analysis. During execution, the Automatic Query Generation strategy sends |Qsent | queries and retrieves |Dretr | documents, which are then all processed by P , without any filtering 2 (i.e., |Dproc| = |Dretr |). In Section 5, we show how to estimate the values of |Qsent | and |Dretr | that are needed for Automatic Query Generation to reach a target recall τ . Then, according to Definition 3.1:</p><formula xml:id="formula_6">T ime(AQG, D) = |Qsent | · tQ + |Dretr | · ` tR + tP´( tP´ tP´(5)</formula><p>The Automatic Query Generation strategy was proposed under the name QXtract for Task 1 <ref type="bibr" target="#b1">[2]</ref>; it was also used for Task 2 in <ref type="bibr" target="#b30">[31]</ref> and for Task 3 in <ref type="bibr" target="#b19">[20]</ref>.</p><p>The description of the execution time has so far relied on parameters (e.g., |Dretr |) that are not known before executing the strategies. In the next section, we focus on the central issue of estimating these parameters. In the process, we show that the performance of each strategy depends heavily on task-specific properties of the underlying database; then, in Section 6 we show how to characterize the required database properties and select the best execution strategy for a task.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">ESTIMATING EXECUTION PLAN COSTS</head><p>In the previous section, we presented four alternative execution plans and described the execution cost for each plan. Our description focused on describing the main factors of the actual execution time of each plan and did not provide any insight on how to estimate these costs: many of the parameters that appear in the cost equations are outcomes of the execution and cannot be used to estimate or predict the execution cost. In this section, we show that the cost equations described in Section 4 depend on a few fundamental task-specific properties of the underlying databases, such as the distribution of tokens across documents. Our analysis reveals the strengths and weaknesses of the execution plans and (most importantly) provides an easy way to estimate the cost of each technique for reaching a target recall τ . The rest of the section is structured as follows. First, Section 5.1 describes the notation and gives the necessary background. Then, Sections 5. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Preliminaries</head><p>In our analysis, we use some task-specific properties of the underlying databases, such as the distribution of tokens across documents. We use g(d) to represent the "degree" of a document d for a document processor P , which is defined as the number of distinct tokens extracted from d using P . Similarly, we use g(t) to represent the "degree" of a token t in a database D, which is defined as the number of distinct documents that contain t in D. Finally, we use g(q) to repre- In general, we do not know a-priori the exact distribution of the token, document, and query degrees for a given task and database. However, we typically know the distribution family for these degrees, and we just need to estimate a few parameters to identify the actual distribution for the task and database. For Task 1, the document and token degrees tend to follow a power-law distribution <ref type="bibr" target="#b2">[3]</ref>, as we will see in Section 7. For Task 2, token degrees follow a power-law distribution <ref type="bibr" target="#b42">[43]</ref> and document degrees follow roughly a lognormal distribution <ref type="bibr" target="#b33">[34]</ref>; we provide further evidence in Section 7. For Task 3, the document and token distributions are, by definition, uniform over D useful with g(t) = g(d) = 1. In Section 6, we describe how to estimate the parameters of each distribution.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Cost of Scan</head><p>According to Equation 2, the cost of Scan is determined by the size of the set Dretr , which is the number of documents retrieved to achieve a target recall τ . <ref type="bibr" target="#b2">3</ref> To compute |Dretr |, we base our analysis on the fact that Scan retrieves documents in no particular order and does not retrieve the same document twice. This process is equivalent to sampling from a finite population <ref type="bibr" target="#b37">[38]</ref>. Conceptually, Scan samples for multiple tokens during execution. Therefore, we treat Scan as performing multiple "sampling from a finite population" processes, running in parallel over D (see <ref type="figure" target="#fig_8">Figure 8</ref>). Each sampling process corresponds to a token t ∈ Tokens. According to probability theory <ref type="bibr">[38, page 56]</ref>, the probability of observing a token t k times in a sample of size S follows the hypergeometric distribution. For k = 0, we get the probability that t does not appear in the sample, which is`|D| is`is`|D|−g(t)</p><formula xml:id="formula_7">S ´ / ` |D| S ´ .</formula><p>The complement of this value is the probability that t appears in at least one document in the set of S retrieved documents. So, after processing S documents, the expected number of retrieved tokens for Scan is:</p><formula xml:id="formula_8">E[|Tokensretr |] = X t∈Tokens 1 − (|D| − g(t))! (|D| − S)! (|D| − g(t) − S)!|D|!<label>(6)</label></formula><p>Hence, we estimate the number of documents that Scan should retrieve to achieve a target recall τ as:</p><formula xml:id="formula_9">|Dretr | = min{S : E[|Tokensretr |] ≥ τ |Tokens|}<label>(7)</label></formula><p>The number of documents |Dretr | retrieved by Scan depends on the token degree distribution. For many databases, the distribution of g(t) is highly skewed and follows a power-law distribution: a few tokens appear in many documents, while the majority of tokens can only be extracted from only a few documents. For example, the Task 1 tuple SARS , 2003, China can be extracted from hundreds of documents in the New York Times archive, while the tuple Diphtheria, 2003, Afghanistan appears only in a handful of documents. By estimating the parameters of the power-law distribution, we can then compute the expected values of g(t) for the (unknown) tokens in D and use Equations 6 and 7 to derive the expected cost of Scan. In Section 6, we show how to perform such estimations on-the-fly. The analysis above assumes a random retrieval of documents. If the documents are retrieved in a special order, which is unlikely for the task scenarios that we consider, then we should model Scan as "stratified" sampling without replacement: instead of assuming a single sampling pass, we decompose the analysis into multiple "strata" (i.e., into multiple sampling phases), each one with its own g(·) distribution. A simple instance of such technique is Filtered Scan, which (conceptually) samples useful documents first, as discussed next.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3">Cost of Filtered Scan</head><p>Filtered Scan is a variation of the basic Scan strategy, therefore the analysis of both strategies is similar. The key difference between these strategies is that Filtered Scan uses a classifier to filter documents, which Scan does not. The Filtered Scan classifier thus limits the number of documents processed by the document processor P . Two properties of the classifier C are of interest for our analysis:</p><p>• The classifier's selectivity Cσ: if Dproc is the set of documents in D deemed useful by the classifier (and then processed by P ), then Cσ = |Dproc | |D| .</p><p>• The classifier's recall Cr: this is the fraction of useful documents in D that are also classified as useful by the classifier. The value of Cr affects the effective token degree for each tuple t: now each token appears, on average, Cr · g(t) times 4 in Dproc, the set of documents actually processed by P .</p><p>Using these observations and following the methodology that we used for Scan, we have:</p><formula xml:id="formula_10">E[|Tokensretr |] = X t∈Tokens 1 − (Cσ ·|D| − Cr ·g(t))! (Cσ ·|D| − S)! (Cσ ·|D| − Cr ·g(t) − S)! (Cσ ·|D|)!<label>(8)</label></formula><p>Again, similar to Scan, we have:</p><formula xml:id="formula_11">|Dretr | = |Dproc| Cσ = min{S : E[|Tokensretr |] ≥ τ |Tokens|} Cσ<label>(9)</label></formula><p>Equations 8 and 9 show the dependence of Filtered Scan on the performance of the classifier. When Cσ is high, almost all documents in D are processed by P , and the savings compared to Scan are minimal, if any. When a classifier has low recall Cr, then many useful documents are rejected and the effective token degree decreases, in turn increasing |Dretr |. We should also emphasize that if the recall of the classifier is low, then Filtered Scan is not guaranteed to reach the target recall τ . In this case, the maximum achievable recall might be less than one and |Dretr | = |D|.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.4">Cost of Iterative Set Expansion</head><p>So far, we have analyzed two crawling-based strategies. Before moving to the analysis of the Iterative Set Expansion query-based strategy, we define "queries" more formally as well as a graph-based representation of the querying process, originally introduced in <ref type="bibr" target="#b2">[3]</ref>. </p><note type="other">and reachability graphs of a database of D with respect to P as a bipartite graph containing the elements of Tokens and D as nodes, where Tokens is the set of tokens that P derives from D. A directed edge from a document node d to a token node t means that P extracts t from d. An edge from a token node t to document node d means that d is returned from D as a result to a query derived from the token t. 2</note><p>For example, suppose that token t1, after being suitably converted into a query, retrieves a document d1 and, in turn, that processor P extracts the token t2 from d1. Then, we insert an edge into QG from t1 to d1, and also an edge from d1 to t2. We consider an edge d → t, originating from a document node d and pointing to a token node t, as a "contains" edge, and an edge t → d, originating from a token node t and pointing to a document node d, as a "retrieves" edge.</p><p>Using the querying graph, we analyze the cost and recall of Iterative Set Expansion. As a simple example, consider the case where the initial Tokens seed set contains a single token, t seed . We start by querying the database using the query derived by t seed . The cost at this stage is a function of the number of documents retrieved by t seed : this is the number of neighbors at distance one from t seed in the querying graph QG. The recall of Iterative Set Expansion, at this stage, is determined by the number of tokens derived from the retrieved documents, which is equal to the number of neighbors at distance two from t seed . Following the same principle, the cost in the next stage (after querying with the tokens in distance two) depends on the number of neighbors at distance three and recall is determined by the number of neighbors at distance four, and so on.</p><p>The previous example illustrates that the recall of Iterative Set Expansion is bounded by the number of tokens "reachable" from the Tokens seed tokens; the execution time is also bounded by the number of documents and tokens that are "reachable" from the Tokens seed tokens. The structure of the querying graph thus defines the performance of Iterative Set Expansion. To compute the interesting properties of the querying graph, we resort to the theory of random graphs: our approach is based on the methodology suggested by Newman et al. <ref type="bibr" target="#b34">[35]</ref> and uses generating functions to describe the properties of the querying graph QG. We define the generating functions Gd0(x) and Gt0(x) to describe the degree distribution 5 of a randomly chosen document and token, respectively:</p><formula xml:id="formula_12">Gd0(x) = X k pd k · x k , Gt0(x) = X k pt k · x k<label>(10)</label></formula><p>where pd k is the probability that a randomly chosen document d contains k tokens (i.e., pd k = P r{g(d) = k}) and pt k is the probability that a randomly chosen token t retrieves k documents (i.e., pt k = P r{g(t) = k}) when used as a query.</p><p>In our setting, we are also interested in the degree distribution for a document (or token, respectively) chosen by following a random edge. Using the methodology of Newman et al. <ref type="bibr" target="#b34">[35]</ref>, we define the functions Gd1(x) and Gt1(x) that describe the degree distribution for a document and token, respectively, chosen by following a random edge:</p><formula xml:id="formula_13">Gd1(x) = x Gd 0 (x) Gd 0 (1) , Gt1(x) = x Gt 0 (x) Gt 0 (1)<label>(11)</label></formula><p>where Gd 0 (x) is the first derivative of Gd0(x) and Gt 0 (x) is the first derivative of Gt0(x), respectively. (See <ref type="bibr" target="#b34">[35]</ref> for the proof.)</p><p>For the rest of the analysis, we use the following useful properties of generating functions <ref type="bibr" target="#b40">[41]</ref>:</p><p>• Moments: The i-th moment of the probability distribution generated by a function G(x) is given by the i-th derivative of the generating function G(x), evaluated at x = 1. We mainly use this property to compute efficiently the mean of the distribution described by G(x).</p><p>• Power: If X1, . . . , Xm are independent, identically distributed random variables generated by the generating function G(x), then the sum of these variables,</p><formula xml:id="formula_14">Sm = P m i=1 Xi, has generat- ing function [G(x)] m .</formula><p>• Composition: If X1, . . . , Xm are independent, identically distributed random variables generated by the generating function G(x), and m is also an independent random variable generated by the function F (x), then the sum Sm = P m i=1 Xi has generating function F (G(x)). Using these properties and Equations 10 and 11, we can proceed to analyze the cost of Iterative Set Expansion. Assume that we are in the stage where Iterative Set Expansion has sent a set Q of tokens as queries. These tokens were discovered by following random edges on the graph; therefore, the degree distribution of these tokens is described by Gt1(x) (Equation 11). Then, by the Power property, the distribution of the total number of retrieved documents (which are pointed to by these tokens) is given by the generating function: 6</p><formula xml:id="formula_15">Gd2(x) = [Gt1(x)] |Q|<label>(12)</label></formula><p>Now, we know that Dretr in Equation 4 is a random variable and its distribution is given by Gd2(x). We also know that we retrieve documents by following random edges on the graph; therefore, the degree distribution of these documents is described by Gd1(x) (Equation 11). Then, by the Composition property 7 , the distribution of the total number of tokens |Tokensretr | retrieved by the Dretr documents is given by the generating function: 8</p><formula xml:id="formula_16">Gt2(x) = Gd2(Gd1(x)) = [Gt1(Gd1(x))] |Q|<label>(13)</label></formula><p>Finally, we use the Moments property to compute the expected values for |Dretr | and |Tokensretr |, after Iterative Set Expansion sends Q queries.</p><formula xml:id="formula_17">E[|Dretr |] = » d dx [Gt1(x)] |Q| - x=1 (14) E[|Tokensretr |] = » d dx [Gt1(Gd1(x))] |Q| - x=1<label>(15)</label></formula><p>Hence, the number of queries |Qsent | sent by Iterative Set Expansion to reach the target recall τ is:</p><formula xml:id="formula_18">|Qsent | = min{Q : E[|Tokensretr |] ≥ τ |Tokens|}<label>(16)</label></formula><p>Our analysis, so far, did not account for the fact that the tokens in a database are not always "reachable" in the querying graph from the tokens in Tokens seed . As we have briefly discussed, though, the ability to reach all the tokens is necessary for Iterative Set Expansion to achieve good recall. Before elaborating further on the subject, we describe the concept of the reachability graph, which we originally introduced in <ref type="bibr" target="#b2">[3]</ref> and is fundamental for our analysis.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>DEFINITION 5.2. [Reachability Graph] Consider a database</head><p>D, and an execution strategy S for a task with an underlying document processor P and querying strategy R. We define the reachability graph RG(D, S) of D with respect to S as a graph whose nodes are the tokens that P derives from D, and whose edge set E is such that a directed edge ti → tj means that P derives tj from a document that R retrieves using ti. 2 <ref type="figure">Figure 9</ref> shows the reachability graph derived from an underlying querying graph, illustrating how edges are added to the reachability graph. Since token t2 retrieves document d3 and d3 contains token t3, the reachability graph contains the edge t2 → t3. Intuitively, a path in the reachability graph from a token ti to a token tj means that there is a set of queries that start with ti and lead to the retrieval of a document that contains the token tj. In the example in <ref type="figure">Figure 9</ref>, there is a path from t2 to t4, through t3. This means that query t2 can help discover token t3, which in turn helps discover token t4. The absence of a path from a token ti to a token tj in the reachability graph means that we cannot discover tj starting from ti. This is the case for the tokens t2 and t5 in <ref type="figure">Figure 9</ref>.</p><p>The reachability graph is a directed graph and its connectivity defines the maximum achievable recall of Iterative Set Expansion: the upper limit for the recall of Iterative Set Expansion is equal to the total size of the connected components that include tokens in Tokens seed . In random graphs, typically we observe two scenarios: either the graph is disconnected and has a large number of disconnected components, or we observe a giant component and a set of small connected components. Chung and Lu <ref type="bibr" target="#b17">[18]</ref> proved this for graphs with a powerlaw degree distribution, and also provided the formulas for the composition of the size of the components. Newman et al. <ref type="bibr" target="#b34">[35]</ref> provide similar results for graphs with arbitrary degree distributions. Interestingly for our problem, the size of the connected components can be estimated for many degree distributions using only a small number of parameters (e.g., for power-law graphs we only need an estimate of the average node out-degree <ref type="bibr" target="#b17">[18]</ref> to compute the size of the connected component; in Section 6 we explain how we obtain such estimates). By estimating only a small number of parameters, we can thus characterize the performance limits of the Iterative Set Expansion strategy.</p><p>As discussed, Iterative Set Expansion relies on the discovery of new tokens to derive new queries. Therefore, in sparse and "disconnected" databases, Iterative Set Expansion can exhaust the available queries and still miss a significant part of the database, leading to low recall. In such cases, if high recall is a requirement, different strategies are preferable. The alternative query-based strategy that we examine next, Automatic Query Generation, showcases a different querying approach: instead of deriving new queries during execution, Automatic Query Generation generates a set of queries offline and then queries the database without using query results as feedback.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.5">Cost of Automatic Query Generation</head><p>Section 4.4 showed that the cost of Automatic Query Generation consists of two main components: the training cost and the querying cost. Training represents a one-time cost for a task, as discussed in Section 4.4, so we ignore it in our analysis. Therefore, the main component that remains to be analyzed is the querying cost.</p><p>To estimate the querying cost of Automatic Query Generation, we need to estimate recall after sending a set Q of queries and the number of retrieved documents |Dretr | at that point. Each query q retrieves g(q) documents, and a fraction p(q) of these documents is useful for the task at hand. Assuming that the queries are biased only towards retrieving useful documents and not towards any other particular set of documents, the queries are conditionally independent 9 within the set of documents D useful and within the rest of the documents, D useless . Therefore, the probability that a useful document is retrieved by a query q is p(q)·g(q)</p><formula xml:id="formula_19">|D useful |</formula><p>. Hence, the probability that a useful document d is retrieved by at least one query is:</p><formula xml:id="formula_20">1 − P r{d not retrieved by any query} = 1 − |Q| Y i=1 " 1 − p(qi) · g(qi) |D useful | « So,</formula><p>given the values of p(qi) and g(qi), the expected number of useful documents that are retrieved is:</p><formula xml:id="formula_21">E[|D useful retr |] = |D useful | · 0 @ 1 − |Q| Y i=1 " 1 − p(qi) · g(qi) |D useful | « 1</formula><p>A <ref type="formula" target="#formula_9">(17)</ref> and the number of useless documents retrieved is:</p><formula xml:id="formula_22">E[|D useless retr |] = |D useless |· 0 @ 1 − |Q| Y i=1 " 1 − (1 − p(qi)) · g(qi) |D useless | « 1 A (18)</formula><p>Assuming that the "precision" of a query q is independent of the number of documents that q retrieves, <ref type="bibr" target="#b9">10</ref> we get a simpler expression: </p><formula xml:id="formula_23">E[|D useful retr |] = |D useful | · 1 − " 1 − E[p(q)] · E[g(q)] |D useful | « |Q| ! (19)</formula><formula xml:id="formula_24">E[|Dretr |] = E[|D useful retr |] + E[|D useless retr |]<label>(20)</label></formula><p>To compute the recall of Automatic Query Generation after issuing Q queries, we use the same methodology that we used for Filtered Scan. Specifically, Equation 19 reveals the total number of useful documents retrieved, and these are the documents that contribute to recall. These documents belong to D useful . Hence, similarly to Scan and Filtered Scan, we model Automatic Query Generation as sampling without replacement; the essential difference now is that the sampling is over the D useful set. Therefore, we have an effective database size |D useful | and a sample size equal to |D useful retr |. 11 By modifying Equation 6 appropriately, we have:</p><formula xml:id="formula_25">E[|Tokensretr |] = X t∈Tokens 1 − (|D useful | − g(t))! (|D useful | − S)! (|D useful | − g(t) − S)!|D useful |!<label>(21)</label></formula><p>where S = |D useful retr |. A good approximation of the average value of |Tokensretr | can be derived by setting S to be the mean value of the |D useful retr | distribution <ref type="bibr">(Equation 19</ref>). Similarly to the analysis for Iterative Set Expansion, we have:</p><formula xml:id="formula_26">|Qsent | = min{Q : E[|Tokensretr |] ≥ τ |Tokens|}<label>(22)</label></formula><p>In this section, we analyzed four alternate execution plans and we showed how their execution time and recall depend on fundamental task-specific properties of the underlying text databases. Next, we show how to exploit the parameter estimation and our cost model to significantly speed-up the execution of text-centric tasks. <ref type="bibr" target="#b8">9</ref> The conditional independence assumption implies that the queries are only biased towards retrieving useful documents, and not towards any subset of useful documents. <ref type="bibr" target="#b9">10</ref> We observed this assumption to be true in practice. <ref type="bibr" target="#b10">11</ref> The documents D useless retr increase the execution time but do not contribute towards recall and we ignore them for recall computation.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.">PUTTING IT ALL TOGETHER</head><p>In Section 5, we examined how we can estimate the execution time and the recall of each execution plan by using the values of a few parameters, including the target recall τ and the token, document, and query degree distributions. In this section, we summarize our overall optimization approach, and show how we estimate -on-the-fly-the parameters needed. As we will show in our experimental evaluation in Section 8, our optimization approach leads to efficient executions of the text-centric tasks for the target recall value.</p><p>Our cost model of Section 5 relies on a number of parameters. For example, the value of |Tokens| (i.e., the number of tokens in the database) is generally unknown before executing a task, and we need it both (1) to decide when we reach the desired recall for the task, to stop execution; and (2) to provide an "educated" estimate to bootstrap our estimation techniques. A robust estimation method for a database and a task is to retrieve multiple document samples from the database and analyze the token overlap across the samples to determine a |Tokens| estimate. Similar estimation methods have been proposed for Task 2 <ref type="bibr" target="#b29">[30]</ref> and for Task 3 <ref type="bibr">[12, page 276]</ref>. In our experiments, we do not rely on estimates but rather use the actual value of |Tokens|.</p><p>Some parameters of our cost model, such as classifier selectivity and recall (Section 5.3), can be estimated accurately over a relatively small sample of database documents. In fact, the classifier characteristics for Filtered Scan and query degree and precision for Automatic Query Generation can be easily estimated during classifier training using cross-validation <ref type="bibr" target="#b15">[16]</ref>. To estimate the token and document distributions, we rely on the fact that, for many tasks, we know the general family of these distributions, as we discussed in Section 5.1. Hence, our estimation task reduces to estimating a few parameters of well-known distribution families, 12 which we discuss below.</p><p>To estimate the parameters of a distribution family for a concrete text-centric task and database, we could resort to a "preprocessing" estimation phase before we start executing the actual task. For this, we could follow Chaudhuri et al. <ref type="bibr" target="#b15">[16]</ref>, and continue to sample database documents until cross-validation indicates that the estimates are accurate enough. An interesting observation is that having a separate preprocessing estimation phase is not necessary in our scenario, since we can piggyback such estimation phase into the initial stages of an actual execution of the task. In other words, instead of having a preprocessing estimation phase, we can start processing the task and exploit the retrieved documents for "on-the-fly" parameter estimation. This estimation relies on an initial (manual) assignment of tasks to distribution families, which are often natural for the tasks or have been investigated in the literature, as we discussed in Section 5.1.</p><p>The basic challenge in this scenario is to guarantee that the parameter estimates that we obtain during execution are as accurate as the estimates that we would derive through random sampling. This is straightforward for Scan, since Scan effectively performs random sampling over the databases. Automatic Query Generation performs random sampling over the D useful documents and is thus equivalent to random sampling for the token degree distribution. For the document degree distribution, Automatic Query Generation then underestimates pd0, the probability that g(d) = 0, i.e., that a document d is useless (see Section 5.4), and overestimates pd k for k ≥ 1. Filtered Scan has a similar bias, introduced by the classifier: since the classifier is not perfect, the observed token and document degrees are typically underestimates of the real values. Fortunately, for both Filtered Scan and Automatic Query Generation, we can compensate for the introduced bias using a confusion matrix adjustment <ref type="bibr" target="#b26">[27]</ref>, which we use for our Input: database D, recall threshold τ , alternate strategies S 1 , . . . Sn Output: tokens Tokensretr statistics = ∅ while recall &lt; τ and |Dretr | &lt; |D| do /* Locate best possible strategy */ estTime = +∞ foreach available execution strategy S do Compute the T ime(S, D) for reaching target recall τ using the available statistics if estTime ≥ T ime(S, D) then strategy = S estTime = T ime(S, D) end end /* Execute strategy */ Continue execution using strategy, for a batch of documents Update statistics using Dretr and Tokensretr end return Tokensretr <ref type="figure" target="#fig_1">Figure 10</ref>: Choosing execution strategies adaptively experiments. (Due to space restrictions, we omit the details.) Finally, for Iterative Set Expansion, we should notice that the execution plan samples the distributions generated by the functions Gt1(x) and Gd1(x) (see Section 5.4), while unbiased random sampling samples from the distributions generated by the functions Gt0(x) and Gd0(x). Equations 10 and 11 show how to convert the observed estimates to the real ones. Again, due to space restrictions, we omit the details.</p><p>Using the observations above, we can now describe our overall optimization approach. The optimization starts by choosing one of the execution plans described in Section 4, based on some "prior knowledge" about the token and document distributions (e.g., that the token and document degrees follow a power-law distribution for Task 1). Then, during execution, the adaptive strategy keeps updating the estimates for the token and document distributions and checks for their robustness using cross-validation. At any point in time, if the estimated execution time for reaching the target recall, T ime(S, D), of a competing strategy S is smaller than that of the current strategy, then the optimizer switches to executing the less expensive strategy, continuing from the execution point reached by the current strategy. <ref type="figure" target="#fig_1">Figure 10</ref> summarizes this algorithm.</p><p>Next, our experimental evaluation shows that our optimization approach accurately predicts the cost of each execution strategy and -in many cases-manages to choose the strategy that reaches the target recall τ with the minimum execution time.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.">EXPERIMENTAL SETTING</head><p>We now describe the experimental setting for each text-centric task of Section 2, including the real-world data sets for the experiments. We also present interesting statistics about the task-specific distribution of tokens in the data sets.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.1">Information Extraction</head><p>Document Processor: For this task, we use the Snowball information extraction system <ref type="bibr" target="#b0">[1]</ref> as the document processor (see Section 3). We use two instantiations of Snowball: one for extracting a DiseaseOutbreaks relation (Task 1a) and one for extracting a Headquarters relation (Task 1b). For Task 1a, the goal is to extract all the tuples of the target relation DiseaseOutbreaks (DiseaseName, Country), which we discussed throughout the paper. For Task 1b, the goal is to extract all the tuples of the target relation Headquarters (Organization,Location), where a tuple o, l in Headquarters indicates that organization o has headquarters in location l. A token for these tasks is a single tuple of the target relation, and a document is a news article from the New York Times archive, which we describe next. Data Set: We use a collection of newspaper articles from The New York Times, published in 1995 (NYT95) and 1996 (NYT96). We   <ref type="figure" target="#fig_1">Figures 11 and 12</ref> show the document and token degree distribution (Section 5) for Task 1a: both distributions follow a power-law, a common distribution for information extraction tasks. The distributions are similar for Task 1b. Execution Plan Instantiation: For Filtered Scan we use a rule-based classifier, created using RIPPER <ref type="bibr" target="#b18">[19]</ref>. We train RIPPER using a set of 500 useful documents and 1,500 not useful documents from the NYT95 data set. We also use 2,000 documents from the NYT95 data set as a training set to create the queries required by Automatic Query Generation. Finally, for Iterative Set Expansion, we construct the queries using the conjunction of the attributes of each tuple (e.g., tuple typhus, Belize results in query [typhus AND Belize]).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.2">Content Summary Construction</head><p>Document Processor: For this task, the document processor is a simple tokenizer that extracts the words that appear in the eligible documents, defined as a sequence of one or more alphanumeric characters and ignoring capitalization. Data Set: We use the 20 Newsgroups data set from the UCI KDD Archive <ref type="bibr" target="#b5">[6]</ref>. This data set contains 20,000 messages from 20 Usenet newsgroups. We also randomly retrieve additional Usenet articles to create queries for Automatic Query Generation. <ref type="figure" target="#fig_1">Figures 13 and 14</ref> show the document and token degree distribution (Section 5) for this task. The document degree follows a lognormal distribution <ref type="bibr" target="#b33">[34]</ref> and the token degree follows, as expected <ref type="bibr" target="#b42">[43]</ref>, a power-law distribution. Execution Plan Instantiation: For this task, Filtered Scan is not directly applicable, since all documents are "useful." For Iterative Set Expansion, the queries are constructed using words that appear in previously retrieved documents; this technique corresponds to the Learned Resource Description strategy for vocabulary extraction presented by Callan et al. <ref type="bibr" target="#b9">[10]</ref>. Finally, for Automatic Query Gener-  ation, we constructed the queries as follows: first, we separate the documents into topics according to the high-level name of the newsgroup (e.g., "comp", "sci", and so on); then, we train a rule-based classifier using RIPPER, which creates rules to assign documents into categories (e.g., cpu AND ram → comp means that a document containing the words "cpu" and "ram" is assigned to the "comp" category). The final queries for Automatic Query Generation contain the antecedents of the rules, across all categories. This technique corresponds to the Focused Probing strategy for vocabulary extraction presented by Ipeirotis and Gravano <ref type="bibr" target="#b30">[31]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.3">Focused Resource Discovery</head><p>Document Processor: For this task, the document processor is a multinomial Naive Bayes classifier, which detects the topic of a given web page <ref type="bibr" target="#b13">[14]</ref>. The topic of choice for our experiments is "Botany." Data Set: We retrieved 8,000 web pages listed in Open Directory 13 under the category "Top → Science → Biology → Botany." We selected 1,000 out of the 8,000 documents as training documents, and created a multinomial Naive Bayes classifier that decides whether a web page is about Botany. Then, for each of the downloaded Botany pages, we used Google to retrieve all its "backlinks" (i.e., all the web pages that point to that page); again, we classified the retrieved pages and for each page classified as "Botany" we repeated the process of retrieving the backlinks, until none of the backlinks was classified under Botany. This process results in a data set with approximately 12,000 pages about Botany, pointed to by approximately 32,000 useless documents deemed irrelevant to the Botany topic. To augment the data set with additional useless documents, we picked 10 more random topics from the third level of the Open Directory hierarchy and we downloaded all the web pages listed under these topics, for a total of approximately 100,000 pages. After downloading the backlinks for these pages, our data set contained a total of approximately 800,000 <ref type="bibr" target="#b12">13</ref> http://www.dmoz.org pages, out of which 12,000 are relevant to Botany. Execution Plan Instantiation: For this task, the Scan plan corresponds to an unfocused crawl, with a classifier deciding whether each of the retrieved pages belongs to the category of choice. As an instantiation of Filtered Scan, we use the "hard" version of the focused crawler described in <ref type="bibr" target="#b13">[14]</ref>. The focused crawler starts from a few Botany web pages, and then visits a web page only when at least one of the documents that points to it is useful. Finally, to create queries for Automatic Query Generation, we train a RIPPER classifier using the training set, and create a set of rules that assign documents into the Botany category. We use these rules to query the data set and retrieve documents.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.">EXPERIMENTAL EVALUATION</head><p>In this section, we present our experimental results. Our experiments focus on the execution times of each alternate execution strategy (Section 4) for the tasks and settings described in Section 7. We compute the actual execution times and compare them against our estimates from Section 5. First, we compute our estimates with exact values for the various parameters on which they rely (e.g., token degree distribution). Then, we measure the execution time using our optimization strategy, which relies on approximations of these parameters, as described in Section 6.</p><p>Accuracy of Cost Model with Correct Information: The goal of the first set of experiments is to examine whether our cost model of Section 5 captures the real behavior of the alternate execution strategies of Section 4, when all the parameters of the cost model (e.g., token and document degree distributions, classifier characteristics) are known a-priori. For this, we first measure the actual execution time of the strategies, for varying values of the target recall τ . The lines SC time, FS time, ISE time, AQG time in <ref type="bibr">Figures 15, 16, 17, and 18</ref> show the actual execution time of the respective strategies for the tasks described in Section 7. Then, to predict the execution time of each  <ref type="bibr">SC pred, FS pred, ISE pred, AQG pred in Figures 15, 16, 17, and 18</ref> show our execution time estimates for varying values of the target recall τ . The results were exceptionally accurate, confirming the accuracy of our theoretical modeling. The prediction error is typically less than 10% for all values of target recall τ . Furthermore, our modeling captures well the limitations of each execution plan. For example, for Task 1a <ref type="figure" target="#fig_1">(Figure 15</ref>) Automatic Query Generation is the fastest execution plan when target recall τ &lt; 0.15. However, due to the limited number of queries generated during the training phase, Automatic Query Generation cannot reach high recall values. (We generated 72 queries for this task.) Our analysis correctly captures this limitation and shows that, for higher recall targets, other strategies are preferable. This limitation also appears for the Iterative Set Expansion strategy, confirming previously reported results <ref type="bibr" target="#b2">[3]</ref>. The results are similar for Task 3: our analysis correctly predicts the execution time and the recall limitations of each strategy.</p><p>Quality of Choice of Execution Strategies: After confirming that our cost models accurately capture the actual execution time of the alternate execution strategies, we examine whether the cost model leads to the choice of the fastest plan for each value of target recall τ . We start executing each task by using the strategy that is deemed best for the target recall and the available statistics. These statistics are the expected distribution family of the token and document degrees for the task, with some "default" parameters, such as β = −2 for power-law distributions (see Section 7). Our experiments also assume knowledge of the actual value of |Tokens|, as discussed. During the actual execution, the available statistics are refined; if the acquired statistics show that an alternative strategy is preferable at some point in the execution, then we switch to the strategy that is deemed best <ref type="figure" target="#fig_1">(Figure 10)</ref>.</p><p>The Optimized line in <ref type="figure" target="#fig_1">Figures 15, 16</ref>, 17, and 18 shows the actual execution time, for different recall thresholds, using our optimization approach. Typically, our optimizer finishes the task in the same time as the best possible strategy, resulting in execution times that can be up to 10 times faster than alternative plans that we might have picked based on plain intuition or heuristics. For example, consider Task 1b with recall target τ = 0.35 ( <ref type="figure" target="#fig_1">Figure 16</ref>): without our cost modeling, we might select Iterative Set Expansion or Automatic Query Generation, both reasonable choices given the relatively low target recall τ = 0.35. However, Automatic Query Generation cannot achieve a recall of 0.35 and Iterative Set Expansion is more expensive than Filtered Scan for that task. Our optimizer, on the other hand, correctly predicts that Filtered Scan should be the algorithm of choice. In this example, our optimizer initially picked Iterative Set Expansion, but quickly revised its decision and switched to Filtered Scan after gathering statistics from only 1-2% of the database. In some cases, our prediction algorithm overestimates the achievable recall of a strategy (e.g., Automatic Query Generation). In such cases, our (incorrectly picked) strategy runs to completion; then, naturally, our technique picks the "next best" strategy and continues the execution from the point reached by the (incorrectly picked) strategy. In such cases, we sometimes even observed a small performance gain derived from this initial mistake, since the "incorrect" strategy outperforms the "correct" strategy for the first part of the execution. This result outlines an interesting future research direction: instead of picking a single strategy for a target recall, we could instead build multi-strategy executions explicitly, by choosing different strategies for different parts of the execution.</p><p>Conclusions: We demonstrated how our modeling approach can be used to create an optimizer for text-centric tasks. The presented approach allows for a better understanding of the behavior of query-and crawl-based strategies, in terms of both execution time and recall. Furthermore, our modeling works well even with on-the-fly estimation of the bulk of the required statistics, and results in close-to-optimal execution times. Our work provides fundamental building blocks towards a full query optimizer for text-centric tasks: given a specific target recall (e.g., "find 40% of all disease outbreaks mentioned in the news"), the query optimizer can automatically select the best execution strategy to achieve this recall.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="9.">RELATED WORK</head><p>In this paper, we analyzed and estimated the computational costs of text-centric tasks. We concentrated on three important tasks: information extraction (Task 1), text database content summary construction (Task 2), and focused resource discovery ( <ref type="table">Task 3)</ref>.</p><p>Implementations of Task 1 (Section 2.1) traditionally use the Scan strategy of Section 4.1, where every document is processed by the information extraction system (e.g., <ref type="bibr" target="#b27">[28,</ref><ref type="bibr" target="#b41">42]</ref>). Some systems use the Filtered Scan strategy of Section 4.2, where only the documents that match specific URL patterns (e.g., <ref type="bibr" target="#b6">[7]</ref>) or regular expressions (e.g., <ref type="bibr" target="#b28">[29]</ref>) are processed further. Agichtein and Gravano <ref type="bibr" target="#b1">[2]</ref> presented query-based execution strategies for Task 1, corresponding to the Iterative Set Expansion strategy of Section 4.3 and Automatic Query Generation strategy of Section 4.4. More recently, Etzioni et al. <ref type="bibr" target="#b23">[24]</ref> used what could be viewed as an instance of Automatic Query Generation to query generic search engines for extracting information from the web. Cafarella and Etzioni <ref type="bibr" target="#b7">[8]</ref> presented a complementary approach of constructing a special-purpose index for efficiently retrieving promising text passages for information extraction. Such document (and passage) retrieval improvements can be naturally integrated into our framework. For Task 2, the execution strategy in <ref type="bibr" target="#b9">[10]</ref> can be cast as an instance of Iterative Set Expansion, as discussed in Section 4.3. Another strategy for the same task <ref type="bibr" target="#b30">[31]</ref> can be considered an instance of Automatic Query Generation (Section 4.4). Interestingly, over large crawlable databases, where both query-and crawlbased strategies are possible, query-based strategies have been shown to outperform crawl-based approaches for a related database classification task <ref type="bibr" target="#b25">[26]</ref>, since small document samples can result in good categorization decisions at a fraction of the processing time required by full database crawls. For Task 3, focused resource discovery systems typically use a variation of Filtered Scan <ref type="bibr" target="#b13">[14,</ref><ref type="bibr" target="#b12">13,</ref><ref type="bibr" target="#b20">21,</ref><ref type="bibr" target="#b32">33]</ref>, where a classifier determines which links to follow for subsequent (expensive) retrieval and processing. Other strategies such as Automatic Query Generation may be more effective for some scenarios <ref type="bibr" target="#b19">[20]</ref>.</p><p>Other important text-centric tasks can be modeled in our framework. One such task is text filtering (i.e., selecting documents in a text database on a particular topic) <ref type="bibr" target="#b36">[37]</ref>, which can be executed following either Filtered Scan, or, if appropriate, Automatic Query Generation. Another task is the construction of comparative web shopping agents <ref type="bibr" target="#b21">[22]</ref>. This task requires identifying appropriate web sites (e.g., by using an instance of Automatic Query Generation) and subsequently extracting product information from a subset of the retrieved pages (e.g., by using an implementation of Filtered Scan). As another example, web question answering systems <ref type="bibr" target="#b3">[4]</ref> usually translate a natural language question into a set of web search queries to retrieve documents for a subsequent answer extraction step from a subset of the retrieved documents. This process can be viewed as a combination of Automatic Query Generation and Filtered Scan. Recently, Ntoulas et al. <ref type="bibr" target="#b35">[36]</ref> presented query-based strategies for exhaustively "crawling" a hidden web database while issuing as few queries as possible.</p><p>Estimating the cost of a query execution plan requires estimating parameters of the cost model. We adapted common database sampling techniques (e.g., <ref type="bibr" target="#b15">[16,</ref><ref type="bibr" target="#b31">32]</ref>) for our problem, as we discussed in Section 6. Our work is similar in spirit to query optimization over structured relational databases, adapted to the intrinsic differences of executing text-centric tasks. Our work is complementary to previous research on optimizing query plans with user-defined predicates <ref type="bibr" target="#b16">[17]</ref>, in that we provide a robust way of estimating costs of complex textcentric "predicates". Our work can then be regarded as developing specialized, efficient techniques for important special-purpose "operators" (e.g., as was done for fuzzy matching <ref type="bibr" target="#b14">[15]</ref>).</p><p>Closest to this paper, in <ref type="bibr" target="#b2">[3]</ref> we presented results on modeling and estimating the achievable recall of Iterative Set Expansion, for Task 1 (information extraction) and Task 2 (database content summary construction). Our current work extends <ref type="bibr" target="#b2">[3]</ref> in several ways. First, we develop rigorous cost models for Iterative Set Expansion, as well as for three additional general execution strategies, namely Scan, Filtered Scan, and Automatic Query Generation. We also present a principled, cost-based method for selecting the most efficient execution strategy automatically, whereas <ref type="bibr" target="#b2">[3]</ref> only provided upper bounds on the possible recall that each strategy could achieve if run to completion. Finally, we thoroughly evaluated our cost estimation models and adaptive execution strategy over multiple tasks and multiple data sets.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="10.">CONCLUSION</head><p>In this paper, we introduced a rigorous cost model for several queryand crawl-based execution strategies that underlie the implementation of many text-centric tasks. We complement our model with a principled cost estimation approach. Our analysis helps predict the execution time and output completeness of important query-and crawlbased algorithms, which until now were only empirically evaluated, with limited theoretical justification. We demonstrated that our modeling can be successfully used to create an optimizer for text-centric tasks, and showed that the optimizer can adaptively select the best execution strategy to achieve a target recall, resulting in executions that can be orders of magnitude faster than alternate choices.</p><p>Our work can be extended in multiple directions. For example, the current framework assumes that the document processors have perfect "precision," in that they always produce accurate results. Relaxing this assumption and, correspondingly, predicting the precision of the output produced by different strategies is a natural next step. Another interesting direction is to apply our model to other text-centric tasks and also study how to minimize our reliance on task-specific prior knowledge of the token and document distributions for our analysis.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head></head><label></label><figDesc>Chol era outbreaks occurred in M ay 1999 in Ni geri a (176 cases , 56 deaths). The outbreak is now under control… DiseaseOutbreak s in The New York Ti mes Archi ve</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: Extracting DiseaseOutbreaks tuples</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: Content summary of Forbes.com</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: Focused resource discovery for Botany pages</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 6 :</head><label>6</label><figDesc>Figure 6: The Iterative Set Expansion strategy Input: database D, recall threshold τ , document processor P , queries Q Output: tokens Tokensretr Tokensretr = ∅, Dretr = ∅, recall = 0 foreach query q ∈ Q do Retrieve up to maxD documents matching q foreach newly retrieved document d do Add d to Dretr Process d using P and add extracted tokens to Tokensretr recall = |Tokensretr |/|Tokens| if recall ≥ τ then return Tokensretr end end end return Tokensretr</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 7 :</head><label>7</label><figDesc>Figure 7: The Automatic Query Generation strategy</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head></head><label></label><figDesc>2 and 5.3 analyze the two crawl-based techniques, Scan and Filtered Scan, respectively. Finally, Sections 5.4 and 5.5 analyze the two query-based techniques, Iterative Set Expansion and Automatic Query Generation, respectively.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Figure 8 :</head><label>8</label><figDesc>Figure 8: Modeling Scan as multiple sampling processes, one per token, running in parallel over D</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>DEFINITION 5. 1 .Figure 9 :</head><label>19</label><figDesc>Figure 9: Portion of the querying and reachability graphs of a database</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head>where</head><label></label><figDesc>E[p(q)] is the average precision of the queries and E[g(q)] is the average number of retrieved documents per query. An analo- gous expression follows for E[|D useless retr |]. The expected number of retrieved documents is then:</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_11"><head></head><label></label><figDesc>Figure 11: Token distribution for Task 1's DiseaseOutbreaks Document Degree Distribution</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_12"><head>Figure 12 :</head><label>12</label><figDesc>Figure 12: Document distribution for Task 1's DiseaseOutbreaks</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_13"><head></head><label></label><figDesc>Figure 13: Token distribution for Task 2 Document Degree Distribution</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_14"><head>Figure 14 :</head><label>14</label><figDesc>Figure 14: Document distribution for Task 2</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_15"><head>Figure 15 :Figure 16 :</head><label>1516</label><figDesc>Figure 15: Actual vs. estimated execution times for Task 1a, as a function of the target recall τ</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_16"><head>Figure 17 :Figure 18 :</head><label>1718</label><figDesc>Figure 17: Actual vs. estimated execution times for Task 2, as a function of the target recall τ</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0" validated="false"><head>… .</head><label>…</label><figDesc></figDesc><table>M icrosoft 
145 
Word 
Frequency 

…. 
…. 
…. 
…. 

…. 

Retai l ers prepare for 
launch day of 
M icrosoft's Xbox 360 

Best Buy takes to 
the desert to 
celebrate Xbox 
launch 
Sony BM G offers 
M P3 files and disks 
for unsafe CDs 

Sony 
96 
Xbox 
124 

... 
... 
... 
... 

Content Summary of 
Forbes .com 
Forbes .com 

</table></figure>

			<note place="foot" n="1"> While it is impossible to analyze all existing techniques within a single paper, we believe that we offer valuable insight on how to formally analyze many query-and crawl-based strategies, hence offering the ability to predict a-priori the expected performance of an algorithm.</note>

			<note place="foot" n="2"> Note that we could also consider &quot;filtered&quot; versions of Iterative Set Expansion and Automatic Query Generation, just as we do for Scan. For brevity, we do not study such variations: filtering is less critical for the query-based strategies than for Scan, because queries generally retrieve a reasonably small fraction of the database documents.</note>

			<note place="foot" n="3"> We assume that the values of t R and t P are known or that we can easily estimate them by repeatedly retrieving and processing a few sample documents.</note>

			<note place="foot" n="4"> We assume uniform recall across tokens, i.e., that the classifier&apos;s errors are not biased towards a specific set of tokens. This is a reasonable assumption for most classifiers. Nevertheless, we can easily extend the analysis and model any classifier bias by using a different classifier recall Cr(t) for each token t. T D t 1 t 3 t 2 t 4 d 1 d 3 d 2 d 4 t 2 t 1 t 5 t 3 t 4 t 5 d 5</note>

			<note place="foot" n="5"> We use undirected graph theory despite the fact that our querying graph is directed. Using directed graph results would of course be preferable, but it would require knowledge of the joint distribution of incoming and outgoing degrees for all nodes of the querying graph, which would be challenging to estimate. So we rely on undirected graph theory, which requires only knowledge of the two marginal degree distributions, namely the token and document degree distributions.</note>

			<note place="foot" n="6"> This is the number of non-distinct documents. To compute the number of distinct documents, we use the sieve method. For details, see [41, page 110]. 7 We use the Composition property and not the Power property because |Dretr | is a random variable. 8 Again, this is the number of non-distinct tokens. To compute the number of distinct tokens, we use the sieve method. For details, see [41, page 110].</note>

			<note place="foot" n="12"> Our current optimization framework follows a parametric approach, by assuming that we know the form of the document and token degree distributions but not their exact parameters. Our framework can also be used in a completely non-parametric setting, in which we make no assumptions on the degree distributions; however, the estimation phase would be more expensive in such a setting. The development of an efficient, completely non-parametric framework is a topic for interesting future research.</note>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Snowball: Extracting relations from large plain-text collections</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Agichtein</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Gravano</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">DL</title>
		<imprint>
			<date type="published" when="2000" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Querying text databases for efficient information extraction</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Agichtein</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Gravano</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ICDE</title>
		<imprint>
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m" type="main">Modeling query-based access to text databases</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Agichtein</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">G</forename><surname>Ipeirotis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Gravano</surname></persName>
		</author>
		<editor>WebDB</editor>
		<imprint>
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">AskMSR: Question answering using the World-Wide Web</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Banko</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Brill</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Dumais</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Lin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Symp. on Mining Answers from Texts and KBases</title>
		<imprint>
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">The Deep Web: Surfacing hidden value</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">K</forename><surname>Bergman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Electronic Publishing</title>
		<imprint>
			<biblScope unit="volume">7</biblScope>
			<biblScope unit="issue">1</biblScope>
			<date type="published" when="2001-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">UCI repository of machine learning databases</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">L</forename><surname>Blake</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">J</forename><surname>Merz</surname></persName>
		</author>
		<ptr target="http://www.ics.uci.edu/˜mlearn/MLRepository.html" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Extracting patterns and relations from the World Wide Web</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Brin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">WebDB</title>
		<imprint>
			<date type="published" when="1998" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">A search engine for natural language applications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">J</forename><surname>Cafarella</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Etzioni</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">WWW</title>
		<imprint>
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Query-based sampling of text databases</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">P</forename><surname>Callan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Connell</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM TOIS</title>
		<imprint>
			<biblScope unit="volume">19</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="97" to="130" />
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Automatic discovery of language models for text databases</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">P</forename><surname>Callan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Connell</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Du</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGMOD</title>
		<imprint>
			<date type="published" when="1999" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Searching distributed collections with inference networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">P</forename><surname>Callan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Lu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">B</forename><surname>Croft</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGIR</title>
		<imprint>
			<date type="published" when="1995" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title level="m" type="main">Mining the Web</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Chakrabarti</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2002" />
			<publisher>Morgan Kaufmann</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
		<title level="m" type="main">Accelerated focused crawling through online relevance feedback</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Chakrabarti</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Punera</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Subramanyam</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2002" />
			<publisher>WWW</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Focused crawling: A new approach to topic-specific web resource discovery</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Chakrabarti</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Van Den Berg</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Dom</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Networks</title>
		<imprint>
			<biblScope unit="page">31</biblScope>
			<date type="published" when="1999" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Robust and efficient fuzzy match for online data cleaning</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Chaudhuri</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Ganjam</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Ganti</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Motwani</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGMOD</title>
		<imprint>
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<title level="m" type="main">Random sampling for histogram construction: How much is enough? In SIGMOD</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Chaudhuri</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Motwani</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><forename type="middle">R</forename><surname>Narasayya</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1998" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Optimization of queries with user-defined predicates</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Chaudhuri</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Shim</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM TODS</title>
		<imprint>
			<biblScope unit="volume">24</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="177" to="228" />
			<date type="published" when="1999" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Connected components in random graphs with given degree sequences</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Chung</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Lu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Annals of Combinatorics</title>
		<imprint>
			<biblScope unit="volume">6</biblScope>
			<biblScope unit="page" from="125" to="145" />
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Learning trees and rules with set-valued features</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">W</forename><surname>Cohen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">AAAI</title>
		<imprint>
			<date type="published" when="1996" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Learning to query the web</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">W</forename><surname>Cohen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Singer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">AAAI Workshop on Internet-Based Information Systems</title>
		<imprint>
			<date type="published" when="1996" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Focused crawling using context graphs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Diligenti</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Coetzee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Lawrence</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">L</forename><surname>Giles</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Gori</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">VLDB</title>
		<imprint>
			<date type="published" when="2000" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">A scalable comparison-shopping agent for the World-Wide Web</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">B</forename><surname>Doorenbos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Etzioni</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">S</forename><surname>Weld</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">AGENTS&apos;97</title>
		<imprint>
			<date type="published" when="1997" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<monogr>
		<title level="m" type="main">Pattern Classification and Scene Analysis</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">O</forename><surname>Duda</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">E</forename><surname>Hart</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1973" />
			<publisher>Wiley</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Web-scale information extraction in KnowItAll</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Etzioni</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Cafarella</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Downey</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Kok</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A.-M</forename><surname>Popescu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Shaked</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Soderland</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">S</forename><surname>Weld</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Yates</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">WWW</title>
		<imprint>
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">GlOSS: Text-source discovery over the</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Gravano</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>García-Molina</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Tomasic</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Internet. ACM TODS</title>
		<imprint>
			<biblScope unit="volume">24</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="229" to="264" />
			<date type="published" when="1999-06" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Query-vs. crawling-based classification of searchable web databases</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Gravano</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">G</forename><surname>Ipeirotis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Sahami</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Data Eng. Bull</title>
		<imprint>
			<biblScope unit="volume">25</biblScope>
			<biblScope unit="issue">1</biblScope>
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">QProber: A system for automatic classification of hidden-web databases</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Gravano</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">G</forename><surname>Ipeirotis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Sahami</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM TOIS</title>
		<imprint>
			<biblScope unit="volume">21</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="1" to="41" />
			<date type="published" when="2003-01" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">Information extraction: Techniques and challenges</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Grishman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SCIE</title>
		<imprint>
			<date type="published" when="1997" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">Information extraction for enhanced access to disease outbreak reports</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Grishman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Huttunen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Yangarber</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Biomedical Informatics</title>
		<imprint>
			<biblScope unit="volume">35</biblScope>
			<biblScope unit="issue">4</biblScope>
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<monogr>
		<title level="m" type="main">Classifying and Searching Hidden-Web Text Databases</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">G</forename><surname>Ipeirotis</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2004" />
		</imprint>
		<respStmt>
			<orgName>Columbia University</orgName>
		</respStmt>
	</monogr>
<note type="report_type">Ph.D. thesis</note>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">Distributed search over the hidden web: Hierarchical database sampling and selection</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">G</forename><surname>Ipeirotis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Gravano</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">VLDB</title>
		<imprint>
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">An evaluation of sampling-based size estimation methods for selections in database systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Ling</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Sun</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ICDE</title>
		<imprint>
			<date type="published" when="1995" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">Topical web crawlers: Evaluating adaptive algorithms</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Menczer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Pant</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Srinivasan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Internet Technology</title>
		<imprint>
			<biblScope unit="volume">4</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="378" to="419" />
			<date type="published" when="2004-11" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title level="a" type="main">Dynamic models for file sizes and double Pareto distributions</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Mitzenmacher</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Internet Mathematics</title>
		<imprint>
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="305" to="334" />
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<analytic>
		<title level="a" type="main">Random graphs with arbitrary degree distributions and their applications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">E J</forename><surname>Newman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">H</forename><surname>Strogatz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">J</forename><surname>Watts</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Phys. Review E</title>
		<imprint>
			<biblScope unit="volume">64</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="1" to="17" />
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<analytic>
		<title level="a" type="main">Downloading textual hidden web content by keyword queries</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Ntoulas</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Zerfos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Cho</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">JCDL</title>
		<imprint>
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<analytic>
		<title level="a" type="main">The state of the art in text filtering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">W</forename><surname>Oard</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">UMUAI</title>
		<imprint>
			<biblScope unit="volume">7</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="141" to="178" />
			<date type="published" when="1997" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b37">
	<monogr>
		<title level="m" type="main">Introduction to Probability Models</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">M</forename><surname>Ross</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2002" />
			<publisher>Academic Press</publisher>
		</imprint>
	</monogr>
	<note>8th ed.</note>
</biblStruct>

<biblStruct xml:id="b38">
	<analytic>
		<title level="a" type="main">Machine learning in automated text categorization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Sebastiani</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Computing Surveys</title>
		<imprint>
			<biblScope unit="volume">34</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="1" to="47" />
			<date type="published" when="2002-03" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b39">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><forename type="middle">N</forename><surname>Vapnik</surname></persName>
		</author>
		<title level="m">Statistical Learning Theory</title>
		<imprint>
			<publisher>Wiley-Interscience</publisher>
			<date type="published" when="1998-09" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b40">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><forename type="middle">S</forename><surname>Wilf</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Generatingfunctionology</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1990" />
			<publisher>Academic Press Professional, Inc</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b41">
	<analytic>
		<title level="a" type="main">NYU: Description of the Proteus/PET system as used for MUC-7</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Yangarber</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Grishman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">MUC-7</title>
		<imprint>
			<date type="published" when="1998" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b42">
	<monogr>
		<title level="m" type="main">Human Behavior and the Principle of Least Effort</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">K</forename><surname>Zipf</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1949" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
