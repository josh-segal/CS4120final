<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2019-03-26T16:48+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Residual-Based Measurement of Peer and Link Lifetimes in Gnutella Networks</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Xiaoming</forename><surname>Wang</surname></persName>
							<email>xmwang@cs.tamu.edu</email>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">Texas A&amp;M University College Station</orgName>
								<address>
									<postCode>77843</postCode>
									<region>TX</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zhongmei</forename><surname>Yao</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">Texas A&amp;M University College Station</orgName>
								<address>
									<postCode>77843</postCode>
									<region>TX</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dmitri</forename><surname>Loguinov</surname></persName>
							<email>dmitri@cs.tamu.edu</email>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">Texas A&amp;M University College Station</orgName>
								<address>
									<postCode>77843</postCode>
									<region>TX</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Residual-Based Measurement of Peer and Link Lifetimes in Gnutella Networks</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<note>1</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Existing methods of measuring lifetimes in P2P systems usually rely on the so-called Create-Based Method (CBM) [16], which divides a given observation window into two halves and samples users &quot;created&quot; in the first half every ∆ time units until they die or the observation period ends. Despite its frequent use [2], [17], [19], this approach has no rigorous accuracy or overhead analysis in the literature. To shed more light on its performance, we first derive a model for CBM and show that small window size or large ∆ may lead to highly inaccurate lifetime distributions. We then show that create-based sampling exhibits an inherent tradeoff between overhead and accuracy, which does not allow any fundamental improvement to the method. Instead, we propose a completely different approach for sampling user dynamics that keeps track of only residual lifetimes of peers and uses a simple renewal-process model to recover the actual lifetimes from the observed residuals. Our analysis indicates that for reasonably large systems, the proposed method can reduce bandwidth consumption by several orders of magnitude compared to prior approaches while simultaneously achieving higher accuracy. We finish the paper by implementing a two-tier Gnutella network crawler equipped with the proposed sampling method and obtain the distribution of ultrapeer lifetimes in a network of 6.4 million users and 60 million links. Our experimental results show that ultrapeer lifetimes are Pareto with shape α ≈ 1.1; however, link lifetimes exhibit much lighter tails with α ≈ 1.9.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>I. INTRODUCTION</head><p>Peer-to-peer networks are popular platforms for many applications such as file-sharing, content distribution, and multimedia streaming. Besides modeling and simulating system dynamics of P2P networks under churn (e.g., <ref type="bibr" target="#b2">[3]</ref>, <ref type="bibr" target="#b5">[6]</ref>, <ref type="bibr" target="#b7">[8]</ref>, <ref type="bibr" target="#b10">[11]</ref>), validation of proposed techniques in real networks has recently become an important area for understanding P2P performance and design limitations in practice. In this regard, several efforts have been undertaken to characterize peer-topeer systems by measuring churn-related user behavior (e.g., distribution of lifetime, inter-arrival delays, and availability) <ref type="bibr" target="#b0">[1]</ref>, <ref type="bibr" target="#b1">[2]</ref>, <ref type="bibr" target="#b3">[4]</ref>, <ref type="bibr" target="#b4">[5]</ref>, <ref type="bibr" target="#b16">[17]</ref>, <ref type="bibr" target="#b18">[19]</ref>, topological information (e.g., degree distribution and clustering coefficients) <ref type="bibr" target="#b12">[13]</ref>, <ref type="bibr" target="#b20">[21]</ref>, and traffic flow rate <ref type="bibr" target="#b7">[8]</ref>, <ref type="bibr" target="#b17">[18]</ref>.</p><p>Sampling of large-scale networks usually faces two fundamental problems -1) obtaining an unbiased distribution of the target quantity and 2) keeping bandwidth overhead reasonable as system size increases. While sampling bias in topology measurement is understood fairly well <ref type="bibr" target="#b19">[20]</ref>, the same issue in lifetime sampling has not been addressed before. What makes the latter problem different is that sampled users * Supported by NSF grants CCR-0306246, ANI-0312461, CNS-0434940, and CNS-0519442.</p><p>cannot be queried for their lifetimes or even arrival instances. Measurement in such cases generally requires taking repeated snapshots of the system every ∆ time units, detecting new arrivals by user appearance in a given snapshot, and inferring departures based on user absence in another snapshot. Since ∆ cannot be lowered below the delay it takes to crawl the network, the issue of precisely reconstructing the lifetime distribution from measured samples remains open.</p><p>In this paper, we aim to formalize the notion of lifetime sampling bias, understand its source in existing methods, and design a robust and bandwidth-efficient sampling mechanism for estimating peer and link lifetime distributions in unstructured P2P networks (e.g., Gnutella <ref type="bibr" target="#b6">[7]</ref>, KaZaA <ref type="bibr" target="#b8">[9]</ref>). Note that peer lifetimes are important for understanding general user behavior, their habits, and application performance offered by the peers to the system. Link lifetimes, on the other hand, have a significant impact on resilience <ref type="bibr" target="#b10">[11]</ref>, <ref type="bibr" target="#b21">[22]</ref> and routing ability <ref type="bibr" target="#b9">[10]</ref> of the network since broken links, rather than dead peers, contribute to formation of stale neighbor pointers, network disconnection, and routing failure. <ref type="bibr" target="#b0">1</ref> We start by creating a novel analytical framework for understanding and characterizing bias in network sampling. We first explain what constitutes inaccuracy in measuring the target distribution of lifetimes F (x) and define sampling methods to be biased if, given an infinite population of sampled users, they cannot reproduce F (x) in all discrete points j∆ in the interval <ref type="bibr">[∆, T ]</ref>. Armed with this definition, we then offer a closed-form model for the measurements obtained by CreateBased Method (CBM) <ref type="bibr" target="#b15">[16]</ref>, which is a widely used heuristic for sampling lifetimes in computer systems. We show that both CBM and its modification in <ref type="bibr" target="#b1">[2]</ref>, <ref type="bibr" target="#b16">[17]</ref>, <ref type="bibr" target="#b18">[19]</ref> are biased as long as ∆ &gt; 0, where the bias is caused by two factorsinconsistent round-offs (i.e., some user lifetimes are rounded up and others down) and missed users (i.e., users arrive and depart within a ∆ interval). In fact, we generalize this result to show that any sampling technique that attempts to directly measure user lifetimes every ∆ time units is biased as long as ∆ &gt; 0 and that the bias is not removable regardless of the mathematical manipulation applied to the measured samples.</p><p>To overcome the discovered limitations of direct sampling, we next propose a technique called ResIDual-based Estimator (RIDE), in which a crawler takes a snapshot of the entire network and then tracks the residual (i.e., remaining) lifetimes of the users seen in the first crawl. We show that this approach produces an unbiased version of the residual distribution H(x), which allows us to develop a simple mechanism based on renewal churn models of <ref type="bibr" target="#b10">[11]</ref>, <ref type="bibr" target="#b21">[22]</ref> that accurately reconstructs the lifetime distribution F (x) from the sampled residuals with a negligible amount of error.</p><p>The next issue we address is bandwidth consumption. With small ∆ and large T , CBM requires significant overhead since it must track all users that appear in the system in the observation interval, i.e., old peers discovered early in the crawl and new ones constantly arriving into the system. In RIDE, however, initial users die quickly and the amount of bandwidth needed to sustain the crawl decays to zero proportionally to the tail of the residual lifetime distribution H(x). Additional bandwidth savings are possible if the initial set S 0 of users found in the system is uniformly subsampled and only -fraction of the users is monitored during the interval <ref type="bibr">[0, T ]</ref>. For example, given Pareto lifetimes with α = 1.1 observed in our experiments, window T = 24 hours, and sampling interval ∆ = 3 minutes, the proposed technique reduces the download overhead compared to that in CBM by a factor of 16 for = 0.1 and a factor of 125 for = 0.01.</p><p>We finish the paper by implementing a Gnutella crawler that is about 18 times faster than the fastest prior crawler <ref type="bibr" target="#b18">[19]</ref>, which allows it to cover the entire network of 6.4 million users (1.2 million contacted ultrapeers) in under 3 minutes. Our results using RIDE indicate that ultrapeer lifetimes are Pareto distributed with shape α ≈ 1.1, which is very close to the results of <ref type="bibr" target="#b1">[2]</ref>. At the same time, Gnutella links are much more volatile and can be described by a Pareto distribution with shape α ≈ 1.9. These results, fed into the latest resilience models for unstructured systems <ref type="bibr" target="#b10">[11]</ref>, <ref type="bibr" target="#b11">[12]</ref>, <ref type="bibr" target="#b21">[22]</ref>, suggest that node isolation among joining ultrapeers in Gnutella and thus partitioning of the network must indeed be extremely rare events.</p><p>The remainder of the paper is organized as follows. In Section II, we formalize sampling and bias. In Section III, we derive the sampling bias of CBM and examine it under different simulation settings. We propose the residual-based method and discuss its simulation results in Section IV. We examine the bandwidth overhead of the various methods in Section V and present our measurement study of Gnutella in Section VI. Section VII reviews prior work and Section VIII concludes the paper.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>II. FORMALIZING LIFETIME SAMPLING A. Target Distribution</head><p>We start by defining the objective of our measurement process. Assume that each user spends a random amount of time in the system, where the lifetime L of the next joining user is drawn from some distribution F (x). This is similar to the heterogeneous churn model proposed in <ref type="bibr" target="#b21">[22]</ref>. Then, the goal of the sampling process is to estimate with as much accuracy as possible function F (x), which we assume is continuous almost everywhere 2 in the interval (0, ∞). As shown in <ref type="bibr" target="#b21">[22]</ref>, distribution F (x) represents the lifetimes of arriving rather than existing peers in the system. The latter metric is known in renewal process theory as the spread of user lifetimes and can be obtained from F (x) using simple integration.</p><p>The measurement process is assumed to have periodic access to the information about which users are currently present in the system. This process allows the sampler to test whether a given user i is still alive as well as discover the entire population of the system at any time t. However, due to bandwidth and connection-delay constraints on obtaining this information, the sampling process cannot query the system for longer than T or more frequently than once per ∆ time units, where ∆ usually varies from several minutes to several hours depending on the speed of the crawler and network size.</p><p>Given the above requirements, notice that reconstructing the entire F (x) from discrete samples is simply impossible. There are three biases arising from discrete sampling: 1) the measuring process cannot observe any lifetimes larger than T ; 2) all samples are rounded to a multiple of ∆; 3) an empirical distribution based on a finite sample size will not necessarily match the theoretical one. We are not concerned with the last issue since all methods require an infinitely large sample size to converge to the desired distribution F (x). Instead, we are interested in the bias arising from finite T and non-zero ∆.</p><p>We start with the following definition that formalizes samples obtained during periodic measurements.</p><p>Definition 1: A non-negative random variable X ∆ for some ∆ &gt; 0 is called lattice if:</p><formula xml:id="formula_0">∞ j=1 P (X ∆ = j∆) = 1,<label>(1)</label></formula><p>where ∆ is called the periodicity of X ∆ and points x j = j∆ are called the support of X ∆ . For all lattice distributions, we assume that P (X ∆ ≤ 0) = F (0) = 0 and that the probability mass of X ∆ starts from the point x 1 = ∆.</p><p>We are now ready to define a sampling process. Definition 2: A (∆, T )-sampling process is a lattice random variable M ∆ with periodicity ∆ and P (∆ ≤ M ∆ ≤ T ) = 1.</p><p>Note that the above defines a sampling process using the limiting distribution of the values it measures (i.e., assuming an infinite population size). The reason for doing so is to understand whether a method can provide accurate results given a sufficiently large sampling size. As we show below, some methods always exhibit bias, no matter how long they measure the system.</p><p>Definition 3: For a random variable X, function E(x) is called an estimator of X in some interval <ref type="bibr">[a, b]</ref> if it is the CDF of some random variable Y that approximates X in <ref type="bibr">[a, b]</ref>.</p><p>Note that Y can be arbitrarily dissimilar to X, in which case the estimator will be biased. We next explain what makes an estimator unbiased.</p><p>Definition 4: A (∆, T )-sampling process with estimator E(x) is unbiased with respect to a target continuous random variable X if it can correctly reproduce the distribution of X in all discrete points x j in the interval <ref type="bibr">[∆, T ]</ref> for any ∆ &gt; 0:</p><formula xml:id="formula_1">E(x j ) = P (X ≤ x j )<label>(2)</label></formula><p>for x j = j∆ and j = 1, 2, . . . , T /∆. Since one may measure different aspects of the system, we finally classify sampling methods based on whether they measures the target random variable or some other related distribution.</p><p>Definition 5: A (∆, T )-sampling process of a random variable X is called direct, if it measures quantities whose distribution is the same as that of X. It is called indirect otherwise.</p><p>For example, direct lifetime sampling must measure session lengths of all arriving users, while indirect sampling may record the lifetimes of peers alive in the system at some time t. Given an established relationship between the two metrics, an estimator can then be used to reconstruct lifetimes L from indirect samples. In another example, direct sampling of network size must count the number of users present in the system at different times t, while indirect sampling may measure the arrival process of peers into the system. With proper selection of the indirect sampling method, estimation may be more accurate and/or may require lower overhead than direct sampling. We demonstrate one such example later in the paper.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>III. DIRECT SAMPLING</head><p>In this section, we first examine the source of bias in direct sampling and study the problem of constructing an unbiased estimator for measuring lifetimes. We then derive a model for the distribution obtained by Create-Based Method (CBM) and demonstrate examples of its bias.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. General Results</head><p>In direct sampling, the measured random variable M ∆ is the lifetime of individual users conditioned on them being smaller than T and being present in the crawl:</p><formula xml:id="formula_2">P (M ∆ ≤ x) = P (L ≤ x|L ≤ T, not missed),<label>(3)</label></formula><p>where missed samples arise when a user joins and departs between consequent crawls. Note, however, that not all users with lifetimes smaller than ∆ are missed and that some of them are actually taken into account in the distribution of M ∆ . Another issue that we discover in this work is that some lifetime samples are rounded up and others rounded down during the measurement, which together with missed users gives rise to the bias we derive below. We next formalize round-off errors and explain how they affect direct sampling. Definition 6: For a continuous random variable X, a (∆, T ) sampling process is consistent if measured samples are all rounded up to the nearest multiple of ∆.</p><p>Since a crawler in direct sampling never knows the exact arrival time of users it observes, there is an ambiguity in how to round-off the lifetimes of measured peers. Consider the example in <ref type="figure" target="#fig_0">Fig. 1</ref>, where sample L 1 = 0.5∆ is indistinguishable from sample L 2 = 1.8∆ from the perspective of the crawler. This causes both of these lifetimes to be rounded off to ∆, which using our terminology makes L 1 consistent and L 2 inconsistent. Also observe in the figure that samples L 3 = 0.4∆ and L 4 = 0.6∆ are completely missed by the crawler, even though sample L 1 is captured. This case can also be treated as inconsistent round-off as we define below.</p><p>Let</p><formula xml:id="formula_3">Q j = 1 inconsistently rounded down to x j 0 otherwise</formula><p>to be an indicator variable of the event that a user's lifetime x j ≤ L &lt; x j+1 is inconsistently rounded down to x j by the sampling process, where rounding down to x 0 = 0 represents missing the entire sample. For simplicity of notation, we define ρ j = P (Q j = 1) and obtain the probability of inconsistent round-off in the interval [x j , x j+1 ) in the next theorem. Theorem 1: In direct sampling, the probability that lifetime samples are inconsistently rounded down to</p><formula xml:id="formula_4">x j = j∆ (j = 0, 1, ..., T /∆) is: ρ j = 1 ∆ xj+1 x j F (x)dx − F (x j ),<label>(4)</label></formula><p>where F (x) is the CDF of the lifetime distribution of samples. Equipped with result in (4), we next derive an unbiased estimator for the continuous random variable L.</p><p>Theorem 2: For direct lifetime sampling, the following is an unbiased estimator of L:</p><formula xml:id="formula_5">E(x j ) = P (M ∆ ≤ x j )P (L ≤ T |Q 0 = 0)(1 − ρ 0 ) + ρ 0 − ρ j ,<label>(5)</label></formula><p>where ρ j is given in (4).</p><p>Note that both (4)-(5) are exact, but due to limited space we do not show simulations verifying their accuracy. From the result of Theorem 2, it becomes clear that unbiased measurement requires access to the distribution of samples (i.e., variable M ∆ ), the fraction of observed lifetimes that are no larger than T (i.e., P (L ≤ T |Q 0 = 0)), and all individual ρ j . While the first two metrics are easily measurable in practice, recovery from inconsistent round-offs requires the exact join time of each sampled user and the number of missed users. Unfortunately, within the constraints of our problem (i.e., crawling of alive users with a period no less than ∆), the effect of round-off errors is impossible to overcome no matter what manipulation is applied to M ∆ .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Create-Based Method (CBM)</head><p>We next study how inconsistent round-offs exhibit themselves in a widely used <ref type="bibr" target="#b1">[2]</ref>, <ref type="bibr" target="#b16">[17]</ref>, <ref type="bibr" target="#b18">[19]</ref>  [16] in the context of operating systems. Recall from <ref type="bibr" target="#b15">[16]</ref> that CBM uses an observation window of size 2T , which is split into small intervals of size ∆. Within the observation window <ref type="bibr">[0, 2T ]</ref>, the algorithm takes a snapshot of the system at the beginning of each interval. To avoid sampling bias, <ref type="bibr" target="#b15">[16]</ref> suggests dividing the window into two halves and only including samples that appear during the first half of the window, disappear somewhere within the window, and stay in the system no longer than T time units. <ref type="figure">Fig. 2</ref> shows an example of create-based sampling with three valid, four invalid, and two missed lifetime samples. The invalid cases include users who join the system before the observation window begins or in its second half, a peer that survives beyond time 2T , and a user whose lifetime is larger than T . Based on the collected snapshots, the algorithm obtains individual lifetimes M ∆ and calculates the corresponding distribution P (M ∆ ≤ x j ) for j = 1, 2, ..., T /∆. Assume that N is the number of users that arrive into the system in the first half of the window <ref type="bibr">[0, T ]</ref> and N (x) is the number of such users with lifetimes less than or equal to x. Observe that N (T ) is the number of valid samples collected by CBM and lim N →∞ N (T )/N is the simply metric P (L ≤ T |Q 0 = 0) defined earlier. One possible way to estimate F (x) is to take the ratio of N (x j ) to N (T ) as the estimator of the probability P (L ≤ x j ), which leads to our first CBM estimator <ref type="bibr" target="#b15">[16]</ref>:</p><formula xml:id="formula_6">E A (x j ) = lim N →∞ N (x j ) N (T ) = P (M ∆ ≤ x j ).<label>(6)</label></formula><p>Recent work in <ref type="bibr" target="#b1">[2]</ref>, <ref type="bibr" target="#b16">[17]</ref>, <ref type="bibr" target="#b18">[19]</ref> normalizes E A by the percentage of samples no larger than T (i.e., N (T )/N ) and defines the following modified estimator:</p><formula xml:id="formula_7">E B (x j ) = lim N →∞ N (x j ) N .<label>(7)</label></formula><p>With the result in (5), we can express both CBM estimators as functions of the actual distribution F (x j ) = P (L ≤ x j ).</p><p>Theorem 3: Both CBM estimators (6)- <ref type="formula" target="#formula_7">(7)</ref> are biased when any ρ j &gt; 0 and produce the following distributions:</p><formula xml:id="formula_8">E A (x j ) = F (x j ) − ρ 0 + ρ j F (T ) − ρ 0 , E B (x j ) = F (x j ) − ρ 0 + ρ j 1 − ρ 0 .<label>(8)</label></formula><p>The result in <ref type="bibr" target="#b7">(8)</ref> shows that E B is closer to F (x) than E A since its accuracy is not affected by the value of T . Next, we explore in more detail the effect of (∆, T ) on the fidelity of these estimators using model <ref type="formula" target="#formula_8">(8)</ref> and simulations. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C. Effect of Bias on CBM</head><p>We first explain how T and ∆ skew the shape of estimator E A . To simplify the discussion below, define ¯ E(x) = 1−E(x) to be the tail distribution of any CDF function E(x). It then follows from (8) that:</p><formula xml:id="formula_9">¯ E A (x) = ¯ F (x) − ¯ F (T ) − ρ j F (T ) − ρ 0 ,<label>(9)</label></formula><p>which shows that the measured tail distribution is a shifted and scaled version of the true tail. The influence of the shift/scale factors on the right side of (9) could be illustrated using the example of a Pareto distribution commonly used to model user lifetimes <ref type="bibr" target="#b10">[11]</ref>, <ref type="bibr" target="#b21">[22]</ref>:</p><formula xml:id="formula_10">F (x) = 1 − (1 + x/β) −α , α &gt; 1, x ≥ 0,<label>(10)</label></formula><p>with E[L] = β/(α − 1). We use CBM with T = 24 hours in a hypothetical network with n = 1 million users that join and depart using the churn model of <ref type="bibr" target="#b21">[22]</ref>. Even though F (T ) = 99.8% of users have lifetimes smaller than T , <ref type="figure" target="#fig_1">Fig. 3</ref> shows that E A suffers from significant bias that increases as ∆ becomes larger. Not only does the measured distribution E A produce incorrect estimates α ≈ 2.4, β ≈ 0.5 of Pareto parameters when fitted with the corresponding curve, but the shape of the tail in <ref type="figure" target="#fig_1">Fig. 3</ref> does not even resemble that of ¯ F (x), which may lead to erroneous conclusions about the family of distributions F (x) belongs to.</p><p>We now study how ρ j affects the shape of E B . It follows from (8) that for j = 0, 1, 2, ..., T /∆:</p><formula xml:id="formula_11">¯ E B (x j ) = ¯ F (x j ) − ρ j 1 − ρ 0 ,<label>(11)</label></formula><p>which is the true tail shifted by ρ j and then scaled by 1 − ρ 0 . For small ρ j ≈ 0, this transformation on log scale preserves the Pareto shape parameter α as seen in <ref type="figure" target="#fig_2">Fig. 4</ref>, but makes scale parameter β inaccurate (i.e., α ≈ 1.14, β ≈ 0.15 for ∆ = 15 minutes). For cases of non-negligible ρ j that arise when ∆ is very large or when distribution F (x) does not admit shape invariance during scaling (e.g., Gaussian, uniform), estimator E B may produce significantly misleading results.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>IV. INDIRECT SAMPLING</head><p>In this section, we seek a solution to the problem of achieving both high accuracy and low overhead using indirect sampling. It has been suggested <ref type="bibr" target="#b0">[1]</ref>, <ref type="bibr" target="#b10">[11]</ref>, <ref type="bibr" target="#b21">[22]</ref> that users in peer-to-peer systems can be modeled as alternating between available (ON) and unavailable (OFF) states. Inspired by these efforts, we now propose our measurement algorithm, called ResIDual-based Estimator (RIDE), that exploits renewal theory <ref type="bibr" target="#b13">[14]</ref> to reconstruct F (x) from sampled residual lifetimes.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Churn Model</head><p>Consider a P2P system with n participating users, where each user i is either alive (i.e., present in the system) at time t or dead (i.e., logged off). This behavior can be modeled by an ON/OFF process {Z i (t)} for each user i = 1, 2, ..., n:</p><formula xml:id="formula_12">Z i (t) = 1 user i is alive at time t 0 otherwise .<label>(12)</label></formula><p>This framework is illustrated in <ref type="figure">Fig. 5</ref>, where X i and Y i are the durations of user i's ON (life) and OFF (death) periods, respectively, and R(t) is the remaining lifetime of user i at time t. Assume that {X i } are drawn from distribution F i (x) and {Y i } from G i (x). It has been proven in <ref type="bibr" target="#b21">[22]</ref> that the lifetime of the next joining user into the system is drawn from a weighted distribution:</p><formula xml:id="formula_13">F (x) = ω n i=1 F i (x) E[X i ] + E[Y i ] ,<label>(13)</label></formula><p>where</p><formula xml:id="formula_14">ω = 1/ n l=1 (E[X l ] + E[Y l ]) −1 .</formula><p>As before, define L to be the lifetime of the next joining peer whose distribution is specified by F (x). Then, the goal of our and other measurement studies is not to sample each of F i (x), but rather to measure the users' aggregate behavior F (x) = P (L &lt; x).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. RIDE</head><p>We first define the sampling algorithm in RIDE and then discuss its estimator E R (x). At time 0, RIDE takes a snapshot of the whole system and records in set S 0 all users found to be alive. For all subsequent intervals j (j = 1, 2, ..., T /∆) of ∆ time units, the algorithm keeps probing peers in set S 0 either until they die or T expires. After the observation window is over, the algorithm obtains the distribution of residual lifetime M ∆ of the users in set S 0 .</p><p>Two important properties about residual sampling can be drawn from its definition: 1) no valid samples can be missed since only users who are alive at time t = 0 are valid measurements; 2) no samples can be inconsistently rounded off since all valid residual lifetimes start from the time of the first crawl. <ref type="figure">Fig. 6</ref> illustrates an example of five valid samples captured in the first crawl and five irrelevant lifetimes that are safely ignored by the algorithm. Given the above observations, it immediately follows that the measured distribution can be used to obtain an unbiased estimator of the actual residual distribution:</p><formula xml:id="formula_15">P (R(t) ≤ x j ) = lim |S0|→∞ N (x j ) |S 0 | ,<label>(14)</label></formula><p>where as before N (x) denotes the number of samples in S 0 smaller than or equal to x. At any time t 0, the distribution of the remaining lifetime R(t) of users present in the system is given by <ref type="bibr" target="#b21">[22]</ref>:</p><formula xml:id="formula_16">H(x) = P (R(t) ≤ x) = 1 µ x 0 (1 − F (u))du,<label>(15)</label></formula><p>where µ = E[L] is the expected lifetime of a joining peer and system size n is sufficiently large for all Z i (t) to be in equilibrium. This leads to the following result. Theorem 4: For residual lifetime sampling, the following is an unbiased estimator of L:</p><formula xml:id="formula_17">E R (x j ) = 1 − h(x j ) h(0) ,<label>(16)</label></formula><p>where x j = j∆ and h(x j ) is the PDF of R(t). Furthermore, the expected user lifetime is given by E[L] = 1/h(0). Since H(x) is obtained without bias, it is now possible to numerically compute its derivative h(x) using Taylor expansion with error bounded by O(∆ k /k!), where k = T /∆ is the number of samples in the curve. For ∆ = 3 minutes and T = 24 hours commonly used in our experiments, the resulting error is ∆ 480 /480! ≈ 10 −1960 , which for all practical purposes can be considered zero. In simulations, however, we find that using only 3 points is often sufficient for achieving good estimation accuracy (see below). </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C. Subsampling</head><p>It is worthwhile mentioning that residual sampling acquires all valid samples during the very first crawl. Therefore, given that |S 0 | is sufficiently large, it is possible to randomly subsample the initial set of users and track the residuals of only percent of the entire user population. This significantly reduces traffic requirements and allows RIDE to achieve orders of magnitude lower bandwidth overhead in practice compared to CBM. One example of applying subsampling is shown in <ref type="figure" target="#fig_4">Fig. 7</ref>, where a system of 1 million users in the same setup as in <ref type="figure" target="#fig_2">Fig. 4(b)</ref> is subsampled by a factor of 100. First notice in <ref type="figure" target="#fig_4">Fig. 7(a)</ref> that RIDE recovers F (x) with much higher accuracy than E B and obtains α = 1.099 and β = 0.049. Second, observe in <ref type="figure" target="#fig_4">Fig. 7(b)</ref> that RIDE achieves reasonable estimation accuracy (α = 1.13, β = 0.087) even with just 10, 000 users; however, the tail of the subsampled distribution is highly variable, which potentially makes it difficult to understand the distribution's qualitative behavior.</p><p>To overcome the tail noise arising when |S 0 | is heavily subsampled, we next present an algorithm for reducing the variance in the measured distribution E R (x). Notice that E R (x) is a mapping between two discrete sets, i.e., from set X = {j∆} to set Y = {j/|S 0 |} for j = 1, 2, . . . , T /∆. For each y ∈ Y, we find all x i ∈ X such that E R (x i ) = y and calculate the corresponding averagê x(y):</p><formula xml:id="formula_18">ˆ x(y) = i x i 1 E R (xi)=y k 1 E R (xi)=y ,<label>(17)</label></formula><p>where 1 A is the indicator function of event A. Denote byˆXbyˆ byˆX the set of all possiblê x(y) from <ref type="formula" target="#formula_0">(17)</ref>, i.e., ˆ X = {ˆx{ˆx(y)|y ∈ Y} and define inverse averaging to be a relation (ˆ x(y), y) for all y ∈ Y. By smoothing out the tail, inverse averaging improves the shape of the distribution and allows better accuracy in estimation.</p><p>Next, we examine two cases of inverse averaging using the example in <ref type="figure" target="#fig_4">Fig. 7(a)</ref> subsampled with = 0.1 and = 0.01. The resulting distributions are shown in <ref type="figure" target="#fig_5">Fig. 8</ref>, which demonstrates much better preservation of the Pareto shape in the tail and less oscillations than without the use of inverse averaging. For |S 0 | = 10 5 in <ref type="figure" target="#fig_5">Fig. 8(a)</ref>, curve fitting produces α = 1.12, β = 0.067, and for |S 0 | = 10 4 in <ref type="figure" target="#fig_5">Fig. 8(b)</ref>, we obtain α = 1.09, β = 0.079. This shows that even when ∆ is comparable to the average lifetime E <ref type="bibr">[L]</ref> and with very few samples, RIDE is capable of reasonably accurate estimation. Due to limited space, we omit additional simulations that show insensitivity of RIDE to selection of ∆ and T , significant improvement in accuracy for less heavytailed cases, and convergence of E(x) to F (x) as |S 0 | → ∞.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>V. OVERHEAD</head><p>This section formalizes the overhead of the various studied sampling methods and compares bandwidth requirement of RIDE to that of CBM.</p><p>In CBM, we are interested in the expected overhead of crawling all users in the graph every ∆ time units in the interval <ref type="bibr">[0, T ]</ref> and then probing peers that were present in the system at time t = T under they die or their lifetime exceeds T time units. After some technical manipulation, we obtain the following result.</p><p>Theorem 5: Total bandwidth overhead of (∆, T )-sampling using CBM is given by:</p><formula xml:id="formula_19">b CBM = Cn ∆ T + T 0 [H(T ) − H(x)]dx ,<label>(18)</label></formula><p>where n is the number of users in the system, C is the cost of probing or crawling a user, and H(x) is the CDF of residual lifetimes.</p><p>Note that RIDE only probes users that are captured in the first crawl until they die or T expires. Taking into account -subsampling, we have the following theorem.</p><p>Theorem 6: Total bandwidth overhead of (∆, T )-sampling using RIDE is given by:</p><formula xml:id="formula_20">b RIDE = C|S 0 | ∆ ∆ + T 0 [1 − H(x)]dx ,<label>(19)</label></formula><p>where is the fraction of peers retained in the initial set S 0 .</p><p>As long as |S 0 | is sufficiently large, RIDE has the same accuracy as E R (x), but at significantly smaller overhead. Define q() to be the ratio b CBM /b RIDE for |S 0 | = n and notice that for very small /∆, metric q() reduces to a simple formula T /∆, which for example is 480 for T = 24 hours and ∆ = 3 minutes. Assuming Pareto lifetimes with shape α, <ref type="table" target="#tab_1">Table I</ref> shows the exact savings gained by using residual subsampling. The table shows that RIDE can reduce traffic overhead by a factor of 16 − 800 compared to CBM depending on the tail weight of F (x), sampling duration T , and subsampling factor . In practice, one can choose based on the size of the initial set S 0 such that |S 0 | is fixed at some pre-determined value. Simulations show that |S 0 | between 10 4 and 10 5 users allow accurate reconstruction of F (x) even when lifetimes are very heavy-tailed and ∆ is large. Given this dynamic selection of , it becomes clear that RIDE can scale to arbitrarily large systems since it requires monitoring only a fixed number of users that does not depend on system size |S 0 |. Note that similar subsampling is not possible in CBM since the latter requires full system crawls to discover new users.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>VI. EXPERIMENTS</head><p>In what follows in this section, we apply the residual-based algorithm to crawl the Gnutella network and estimate the distributions of peer/link lifetimes.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A. Gnutella Crawler</head><p>Recent Gnutella networks are implemented in a two-tier structure that contains ultrapeers and leaves. Ultrapeers are responsible for forwarding search requests between each other, while leaves stay at the "edge" of the network and connect to several ultrapeers that provide them with search capabilities. A recent extension to the Gnutella protocol provides a crawlerfriendly mechanism: upon receiving a crawl request (i.e., a handshake message with the "Crawler" field), a Gnutella client replies with a complete list of the identities of its neighboring peers. According to our experiments, an ultrapeer on average connects to 28.5 ultrapeers and 25.7 leaves, while a leaf is usually attached to only one or two ultrapeers.</p><p>To sample lifetimes of real Internet users using RIDE, we designed and built a scalable Gnutella crawler called GnuSpider that can operate in networks with millions of hosts and maintain reasonably small values of sampling period ∆. As most other crawlers, GnuSpider starts the crawl using a default seed file of ultra-peers and then contact them to obtain their neighbor lists, which are then used in a BFS search to discover all currently alive ultra-peers in the system. Neighbor lists in Gnutella include other ultra-peers with whom a connection is currently active, suggested ultra-peers who may or may not be online, and leaf peers currently attached as children. The crawler records leaf peers for statistical purposes, but only contacts nodes found in the other two lists.</p><p>Our GnuSpider implementation is a single-threaded Windows process that uses asynchronous completion ports (IOCP) to manage up to 60, 000 simultaneous connections to other Experiments with GnuSpider show that we can cover the entire Gnutella network in 3 minutes and typically discover close to 6.4 million users in the process (1.2 million of which are the ultra-peers that we attempt to contact and 5.2 million are leaf nodes). During the first 120 seconds of the crawl, the discovery rate of new leaves shown in <ref type="figure" target="#fig_6">Figure 9</ref>(c) varies between 40, 000/second and 10, 000/second and that of new ultra-peers stays on average at 3, 000/second. It can also be seen from the figures that the last 60 seconds of the crawl usually produce a very small number of new peers since most of these connections experience a timeout. As illustrated in <ref type="figure" target="#fig_6">Figure 9</ref>(d), 90% of ultra-peers (i.e., 1.1 million) and leaf nodes (i.e., 4.5 million) can be discovered in just 100 seconds.</p><p>Comparison of GnuSpider to crawlers in prior experimental P2P work is shown in <ref type="table" target="#tab_1">Table II</ref>, which provides the sampling period ∆, window duration T , the number of peers periodically probed with SYN packets or discovered during an actual crawl, and the crawling speed in terms of contacted hosts per minute. Observe in the table that GnuSpider is not only 18 times faster than the fastest crawler in prior literature <ref type="bibr" target="#b18">[19]</ref>, but it also discovers almost 5 times more concurrent users than any other study.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B. Peer Lifetimes</head><p>Users arriving into Gnutella immediately attempt to establish several neighboring connections to other peers currently in the system to increase their own resilience and enable themselves to route requests into the network. However, since leaves and users behind firewalls do not generally accept connection requests, selection of neighbors is often limited to non-firewalled, or as we call them responsive, ultrapeers. 3 Therefore, measurement of responsive ultrapeers provides the most useful information about the lifetime of future neighbors acquired by arriving users and allows parameter selection for existing P2P models based on lifetime distributions <ref type="bibr" target="#b9">[10]</ref>, <ref type="bibr" target="#b10">[11]</ref>, <ref type="bibr" target="#b11">[12]</ref>, <ref type="bibr" target="#b21">[22]</ref>. Thus, our experiments below focus only on lifetimes of ultrapeers that respond to our connection requests and the links associated with them.</p><p>To measure peer lifetimes for the plots shown below, we first obtained using GnuSpider the initial set S 0 of about 468 thousand responsive ultrapeers and subsampled it using = 0.213. Then, GnuSpider probed |S 0 | = 100, 000 users for T = 72 hours checking if each peer was alive every 3 minutes. It should be noted that we found that in our experiments that a certain amount of peers exhibited erratic behavior, i.e., they would respond to one request, then become silent for several subsequent requests, and eventually become responsive again. This phenomenon appeared when a peer either was too busy to reply or implemented a certain rate-limiting strategy. To filter out the effect of this behavior, we set a threshold u for how many times a peer must appear unresponsive before we declare that user dead. In the crawls below, we use u = 3.</p><p>After the observation window in GnuSpider had expired, an off-line program read the GnuSpider logs and applied RIDE to reconstruct F (x). <ref type="figure" target="#fig_0">Fig. 10(a)</ref> shows the resulting inverseaveraged tail distribution 1 − E R (x) for the set of responsive ultrapeers. The figure matches well with a Pareto distribution with α = 1.09 and β = 0.85, where the shape parameter is very close to that observed in <ref type="bibr" target="#b1">[2]</ref>. Denote by r the expectation of residual lifetimes conditioned on the fact that R(t) is within the observation window T , i.e., r = E[R(t)|R(t) ≤ 72]. Crawl <ref type="bibr" target="#b2">3</ref> The Gnutella protocol suggest that peers behind firewalls should not become an ultrapeer. But in our measurement, about 5% of users behind firewalls act as an ultrapeer. results show that r = 10.5 hours, but 5% of the peers in S 0 leave the system in just 8 minutes.</p><p>We next proceed to compare the associated link lifetime distribution with that of peers in terms of α and r.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C. Link Lifetimes</head><p>It is straightforward to apply the residual-based algorithm to measure the link lifetime distribution in Gnutella networks. In the experiment of section VI-B, GnuCrawler kept track of the links of responsive ultrapeers found in S 0 and updated their status (i.e., connected or broken) in subsequent crawls. Using this information, we applied the same processing program to extract link residuals from GnuSpider logs and perform the proposed recovery technique to obtain E R (x). <ref type="figure" target="#fig_0">Fig. 10(b)</ref> shows that the resulting distribution of all link lifetimes is also power-law, but this time with α = 1.92, which is much larger than that in the peer lifetime distribution. This observation establishes that the lifetime of a link is probabilistically smaller than that of a peer and one may expect more frequent changes in neighboring relationships. We also find that r is 3.8 hours and 16.4% of links disappear within 8 minutes.</p><p>Next, we treat the links between ultrapeers and leaves separately from those among ultrapeers and plot the corresponding distributions in <ref type="figure" target="#fig_0">Fig. 11</ref>. Interestingly, the figure shows that the ultra-leaf links are slightly more stable (i.e., exhibit a heavier tail) than ultra-ultra links: the former has α = 1.88 and the latter has α = 1.99; the conditional expected lifetimes r of the two types of links are 3.9 and 3.5 hours, respectively. This can be plausibly explained by the fact that a leaf is usually inactive in collecting information about alternate ultrapeers and is thus less likely to switch its attachment point.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>D. Discussion</head><p>With the experimental results of this section, we are now able to study resilience properties of Gnutella networks by applying models from <ref type="bibr" target="#b10">[11]</ref>, which use the average residual link lifetime and average node degree d as input parameters. Given d = 28.5 neighbors observed in our experiments and a 1-minute failed-neighbor replacement delay, we obtain that the probability for the network to disconnect at the ultrapeer level is below 10 −64 . However, leaves may be isolated with a non-negligible probability, because they only have one or two attachment points, i.e., d ≤ 2, which we plan to explicitly verify in future work.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>VII. RELATED WORK</head><p>Some of the first P2P sampling studies date to 2001 <ref type="bibr" target="#b14">[15]</ref>, <ref type="bibr" target="#b16">[17]</ref> and the first use of CBM can be traced to <ref type="bibr">Saroiu et al. [17]</ref> who sampled 17, 000 Gnutella peers every 7 minutes using TCP SYN packets over a period of 60 hours. In a follow-up effort in <ref type="bibr" target="#b3">[4]</ref>, Chu et al. used a similar method, but probed 5, 000 peers every 7 minutes for 10 weeks. Bhagwan et al. <ref type="bibr" target="#b0">[1]</ref> improved over <ref type="bibr" target="#b3">[4]</ref>, <ref type="bibr" target="#b16">[17]</ref> by implementing the Overnet protocol and probing a randomly chosen subset of peers in the system to measure their availability (i.e., the portion of time they were present online). Their experiment selected 2, 400 out of around 90, 000 peers and kept probing them every 20 minutes for 7 days. <ref type="bibr">Liang et al. [13]</ref> measured lifetime distributions of links in the KaZaa network, but these experiments were limited to the connections passing through the authors' monitoring hosts.</p><p>More related work can be found in <ref type="bibr" target="#b1">[2]</ref> and <ref type="bibr" target="#b18">[19]</ref>. Bustamante et al. <ref type="bibr" target="#b1">[2]</ref> implemented a Gnutella sampler using 17 monitoring clients that periodically probed 500, 000 peers in the network every 21 minutes for 7 days. In more recent work, Stutzbach et al. <ref type="bibr" target="#b18">[19]</ref> developed a much faster crawler that in 2004 was able to cover the entire Gnutella network of 158, 000 ultrapeers within 7 minutes. The closest approach to understanding sampling bias is another recent paper by <ref type="bibr">Stutzbach et al. [20]</ref>, which focused on capturing unbiased snapshots of joint properties of users currently alive in P2P systems using random walks.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>VIII. CONCLUSION</head><p>In this paper, we showed that direct lifetime sampling suffered from estimation bias and did not admit any fundamental improvement besides reducing probing interval ∆. To overcome this limitation, we proposed and analyzed a novel residual-based lifetime sampling algorithm, which measured lifetime distributions with high accuracy and required several orders of magnitude less bandwidth than the prior approaches. Using this method, we sampled Gnutella users and discovered that lifetimes of peers and links exhibited power-law distributions, but with different shape parameters, where links are indeed much more volatile than actual peers.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig. 1 .</head><label>1</label><figDesc>Fig. 1. Round-off inconsistencies in direct sampling.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Fig. 3 .</head><label>3</label><figDesc>Fig. 3. Estimator E A with Pareto lifetimes (n = 10 6 users, T = 24 hours, α = 1.1, β = 0.05, and E[L] = 0.5 hours).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Fig. 4 .</head><label>4</label><figDesc>Fig. 4. Estimator E B with Pareto lifetimes (n = 10 6 users, T = 24 hours, α = 1.1, β = 0.05, and E[L] = 0.5 hours).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Fig. 5 .Fig. 6 .</head><label>56</label><figDesc>Fig. 5. Process Z i (t) depicting user i's ON/OFF behavior. 񮽙</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Fig. 7 .</head><label>7</label><figDesc>Fig. 7. Original and subsampled estimator E R with Pareto lifetimes (|S 0 | = 10 6 users, T = 24 hours, ∆ = 15 minutes, α = 1.1, β = 0.05, and E[L] = 0.5 hours). Both examples use 3-point derivatives.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Fig. 8 .</head><label>8</label><figDesc>Fig. 8. Inverse averaging applied to E R for Pareto lifetimes (|S 0 | = 10 6 users, T = 24 hours, ∆ = 15 minutes, α = 1.1, β = 0.05, and E[L] = 0.5 hours). Both examples use 3-point derivatives.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Fig. 9 .</head><label>9</label><figDesc>Fig. 9. Statistics of a 3-minute crawl on July 22, 2006 (single-core, dual-CPU Xeon computer @ 3GHz).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Fig. 10 .Fig. 11 .</head><label>1011</label><figDesc>Fig. 10. Inverse-averaged estimator E R (x) for responsive peers and links in Gnutella. Both cases use 3-point derivatives.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0" validated="false"><head>direct sampling algo- rithm called Create-Based Method (CBM), first introduced by</head><label></label><figDesc></figDesc><table>񮽙 
T 

observation window 2T 

sample death 

invalid sample 
valid sample 
missed sample 

Fig. 2. Illustration of sampling in CBM. 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1" validated="false"><head>TABLE I COMPARISON OF OVERHEAD USING E[L] = 1 HOUR, ∆ = 3 MINUTES</head><label>I</label><figDesc></figDesc><table>α 
T 
q(0.1) q(0.01) α 
T 
q(0.1) q(0.01) 
1.1 24 hrs 
16 
125 
2 
24 hrs 
71 
319 
48 hrs 
17 
151 
48 hrs 
116 
573 
72 hrs 
18 
164 
72 hrs 
157 
811 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2" validated="false"><head>TABLE II COMPARISON OF P2P MEASUREMENT STUDIES</head><label>II</label><figDesc></figDesc><table>Approach 
Measured 
Interval 
Duration 
Peers seen 
Crawling 
Year 
Connections 
network 
∆ 
T 
Probed 
Crawled 
machines 
crawled 
per minute 
GnuSpider 
Gnutella 
3 min 
24 − 72 hrs 
-
6.4 million 
1 
2006 
400, 000 
Stutzbach et al. [19] 
Gnutella 
7 min 
48 hrs 
-
1.3 million 
7 
2004 
22, 500 
Liang et al. [13] 
FastTrack 
5 min 
65 hrs 
965 
-
N/A 
2004 − 2005 
N/A 
Bustamante et al. [2] 
Gnutella 
21 min 
7 days 
-
500, 000 
17 
2003 
&lt; 5000 
Bhagwan et al. [1] 
Overnet 
20 min 
7 days 
2, 400 
-
1 
2003 
N/A 
Chu et al. [4] 
Gnutella 
10 min 
9 wks 
5, 000 
-
1 
2002 
N/A 
Ripeanu et al. [15] 
Gnutella 
hours 
-
-
48, 195 
N/A 
2001 
&lt; 1000 
Saroiu et al. [17] 
Gnutella 
7 min 
60 hrs 
17, 125 
-
N/A 
2001 
N/A 

</table></figure>

			<note place="foot" n="1"> There are many reasons why peer lifetime may be different from link lifetime, which include peers reaching their maximum neighbor capacity and dropping excess links, leaves migrating from one ultrapeer to another to achieve better performance, path outages between certain nodes, and demotion of ultrapeers to leaf status.</note>

			<note place="foot" n="2"> The set of points in which F (x) is discontinuous must have measure 0.</note>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Understanding Availability</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Bhagwan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Savage</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">M</forename><surname>Voelker</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IPTPS</title>
		<meeting>IPTPS</meeting>
		<imprint>
			<date type="published" when="2003-02" />
			<biblScope unit="page" from="256" to="267" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Friendships that Last: Peer Lifespan and its Role in P2P Protocols</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><forename type="middle">E</forename><surname>Bustamante</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Qiao</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Intl. Workshop on Web Content Caching and Distribution</title>
		<meeting>Intl. Workshop on Web Content Caching and Distribution</meeting>
		<imprint>
			<date type="published" when="2003-09" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Making Gnutella-like P2P Systems Scalable</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Chawathe</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Ratnasamy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Breslau</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Lanham</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Shenker</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. ACM SIG-COMM</title>
		<meeting>ACM SIG-COMM</meeting>
		<imprint>
			<date type="published" when="2003-08" />
			<biblScope unit="page" from="407" to="418" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Availability and Locality Measurements of Peer-to-Peer File Systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Chu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Labonte</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><forename type="middle">N</forename><surname>Levine</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. ITCom Conference</title>
		<meeting>ITCom Conference</meeting>
		<imprint>
			<date type="published" when="2002-07" />
			<biblScope unit="volume">4868</biblScope>
			<biblScope unit="page" from="310" to="321" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Presence-Based Availability and P2P Systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">J</forename><surname>Dunn</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Zahorjan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">D</forename><surname>Gribble</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><forename type="middle">M</forename><surname>Levy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE International Conference on Peer-to-Peer Computing</title>
		<meeting>IEEE International Conference on Peer-to-Peer Computing</meeting>
		<imprint>
			<date type="published" when="2005-08" />
			<biblScope unit="page" from="209" to="216" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Modeling Peer-Peer File Sharing Systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Ge</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">R</forename><surname>Figueiredo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Jaiswal</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Kurose</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Towsley</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE INFOCOM</title>
		<meeting>IEEE INFOCOM</meeting>
		<imprint>
			<date type="published" when="2003-03" />
			<biblScope unit="volume">3</biblScope>
			<biblScope unit="page" from="2188" to="2198" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Gnutella</surname></persName>
		</author>
		<ptr target="http://www.gnutella.com/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">The Impact of DHT Routing Geometry on Resilience and Proximity</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Gummadi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Gummadi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Gribble</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Ratnasamy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Shenker</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Stoica</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. ACM SIGCOMM</title>
		<meeting>ACM SIGCOMM</meeting>
		<imprint>
			<date type="published" when="2003-08" />
			<biblScope unit="page" from="381" to="394" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Kazaa</surname></persName>
		</author>
		<ptr target="http://www.kazaa.com/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">A Statistical Theory of Chord under Churn</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Krishnamurthy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>El-Ansarh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Aurell</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Haridi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IPTPS</title>
		<meeting>IPTPS</meeting>
		<imprint>
			<date type="published" when="2005-02" />
			<biblScope unit="page" from="93" to="103" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">On Lifetime-Based Node Failure and Stochastic Resilience of Decentralized Peer-to-Peer Networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Leonard</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Rai</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Loguinov</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. ACM SIGMETRICS</title>
		<meeting>ACM SIGMETRICS</meeting>
		<imprint>
			<date type="published" when="2005-06" />
			<biblScope unit="page" from="26" to="37" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">On Static and Dynamic Partitioning Behavior of Large-Scale Networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Leonard</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Yao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Loguinov</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE ICNP</title>
		<meeting>IEEE ICNP</meeting>
		<imprint>
			<date type="published" when="2005-11" />
			<biblScope unit="page" from="345" to="357" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">The FastTrack Overlay: A Measurement Study</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Liang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Kumar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><forename type="middle">W</forename><surname>Ross</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Networks</title>
		<imprint>
			<biblScope unit="volume">50</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="842" to="858" />
			<date type="published" when="2006-04" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Resnick</surname></persName>
		</author>
		<title level="m">Adventures in Stochastic Processes. Birkhäuser</title>
		<imprint>
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Mapping the Gnutella Network: Properties of Large-Scale Peer-to-Peer Systems and Implications for System Design</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Ripeanu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Foster</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Iamnitchi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Internet Comput. J</title>
		<imprint>
			<biblScope unit="volume">6</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="50" to="57" />
			<date type="published" when="2002-02" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">A Comparison of File System Workloads</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Roselli</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">R</forename><surname>Lorch</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">E</forename><surname>Anderson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. USENIX Annual Technical Conference</title>
		<meeting>USENIX Annual Technical Conference</meeting>
		<imprint>
			<date type="published" when="2000-06" />
			<biblScope unit="page" from="41" to="54" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">A Measurement Study of Peer-to-Peer File Sharing Systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Saroiu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">K</forename><surname>Gummadi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">D</forename><surname>Gribble</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. SPIE/ACM Multimedia Computing and Networking</title>
		<meeting>SPIE/ACM Multimedia Computing and Networking</meeting>
		<imprint>
			<date type="published" when="2002-01" />
			<biblScope unit="volume">4673</biblScope>
			<biblScope unit="page" from="156" to="170" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Analyzing Peer-to-Peer Traffic Across Large Networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Sen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Wang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE/ACM Trans. Netw</title>
		<imprint>
			<biblScope unit="volume">12</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="219" to="232" />
			<date type="published" when="2004-04" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Understanding Churn in Peer-to-Peer Networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Stutzbach</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Rejaie</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. ACM IMC</title>
		<meeting>ACM IMC</meeting>
		<imprint>
			<date type="published" when="2006-10" />
			<biblScope unit="page" from="189" to="202" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">On Unbiased Sampling for Unstructured Peer-to-Peer Networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Stutzbach</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Rejaie</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Duffield</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Sen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Willinger</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. ACM IMC</title>
		<meeting>ACM IMC</meeting>
		<imprint>
			<date type="published" when="2006-04" />
			<biblScope unit="page" from="27" to="40" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Characterizing Unstructured Overlay Topologies in Modern P2P File-Sharing Systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Stutzbach</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Rejaie</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Sen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. ACM IMC</title>
		<meeting>ACM IMC</meeting>
		<imprint>
			<date type="published" when="2005-10" />
			<biblScope unit="page" from="49" to="62" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Modeling Heterogeneous User Churn and Local Resilience of Unstructured P2P Networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Yao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Leonard</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Loguinov</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE ICNP</title>
		<meeting>IEEE ICNP</meeting>
		<imprint>
			<date type="published" when="2006-11" />
			<biblScope unit="page" from="32" to="41" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
