<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2019-03-26T16:38+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">ODISSEA: A Peer-to-Peer Architecture for Scalable Web Search and Information Retrieval</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Torsten</forename><surname>Suel</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer and Information</orgName>
								<orgName type="institution">Science Polytechnic University Brooklyn</orgName>
								<address>
									<postCode>11201</postCode>
									<region>NY</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chandan</forename><surname>Mathur</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer and Information</orgName>
								<orgName type="institution">Science Polytechnic University Brooklyn</orgName>
								<address>
									<postCode>11201</postCode>
									<region>NY</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jo-Wen</forename><surname>Wu</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer and Information</orgName>
								<orgName type="institution">Science Polytechnic University Brooklyn</orgName>
								<address>
									<postCode>11201</postCode>
									<region>NY</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jiangong</forename><surname>Zhang</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer and Information</orgName>
								<orgName type="institution">Science Polytechnic University Brooklyn</orgName>
								<address>
									<postCode>11201</postCode>
									<region>NY</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alex</forename><surname>Delis</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer and Information</orgName>
								<orgName type="institution">Science Polytechnic University Brooklyn</orgName>
								<address>
									<postCode>11201</postCode>
									<region>NY</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mehdi</forename><surname>Kharrazi</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer and Information</orgName>
								<orgName type="institution">Science Polytechnic University Brooklyn</orgName>
								<address>
									<postCode>11201</postCode>
									<region>NY</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Xiaohui</forename><surname>Long</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer and Information</orgName>
								<orgName type="institution">Science Polytechnic University Brooklyn</orgName>
								<address>
									<postCode>11201</postCode>
									<region>NY</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kulesh</forename><surname>Shanmugasundaram</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer and Information</orgName>
								<orgName type="institution">Science Polytechnic University Brooklyn</orgName>
								<address>
									<postCode>11201</postCode>
									<region>NY</region>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">ODISSEA: A Peer-to-Peer Architecture for Scalable Web Search and Information Retrieval</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>We consider the problem of building a P2P-based search engine for massive document collections. We describe a prototype system called ODISSEA (Open DIStributed Search Engine Architecture) that is currently under development in our group. ODISSEA provides a highly distributed global indexing and query execution service that can be used for content residing inside or outside of a P2P network. ODIS-SEA is different from many other approaches to P2P search in that it assumes a two-tier search engine architecture and a global index structure distributed over the network. We give an overview of the proposed system and discuss the basic design choices. Our main focus is on efficient query execution, and we discuss how recent work on top-ยก queries in the database community can be applied in a highly distributed environment. We also give preliminary simulation results on a real search engine log and a ter-abyte web collection that indicate good scalability for our approach.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">INTRODUCTION</head><p>Due to the large size of the Web, users increasingly rely on specialized tools to navigate through the vast volumes of data, and a number of search engines, directories, and other IR tools have been built to fill this need. While there is a plethora of smaller specialized engines and directories, the main part of the search infrastructure of the web is supplied by a handful of large crawl-based search engines, such as Google, AllTheWeb, AltaVista, and a few others. Such search engines are typically based on scalable clusters, consisting of a large number of low-cost servers located at one or a few locations and connected by high-speed LANs or SANs <ref type="bibr" target="#b3">[4]</ref>. A lot of work has focused on optimizing performance on such architectures, which support up to tens of thousands of user queries per second on thousands of machines.</p><p>The last few years have also seen an explosion of activity in the area of peer-to-peer (P2P) systems, i.e., highly distributed computing or service substrates built from thousands or even millions of typically non-dedicated nodes across the internet that may join or leave the system at any time. Examples range from widely used unstructured ad-hoc communities such as Napster, Gnutella, and FreeNet to recent academic work on scalable and highly structured peer-to-peer substrates such as Chord <ref type="bibr" target="#b30">[31]</ref>, Tapestry <ref type="bibr" target="#b38">[39]</ref>, Pastry <ref type="bibr" target="#b27">[28]</ref>, or CAN <ref type="bibr" target="#b24">[25]</ref> that can support a variety of applications.</p><p>From the perspective of search engines and large-scale IR this development raises two interesting issues. First, since an increasing amount of content now resides in P2P networks, it becomes necessary to provide search facilities within P2P networks. Second, the significant computing resources provided by a P2P system could also be used to implement search and data mining functions for content located outside the system, e.g., for search and mining tasks across large intranets or global enterprises, or even to build a P2P-based alternative to the current major search engines. This second issue can be seen in the context of the following more general question: Which of the Giant Scale Services <ref type="bibr" target="#b3">[4]</ref> currently provided by cluster-based architectures can and should be provided by more highly distributed or P2P systems? It has been established that applications such as the sharing of large static files can be very efficiently implemented in a P2P environment. However, other applications that, e.g., involve frequent updates to massive data, are more challenging, and may turn out to be more appropriately implemented on clusters or on highlyrobust distributed systems of dedicated nodes with limited changes in topology (due to faults, or nodes joining or leaving).</p><p>In this paper, we describe a prototype system called ODISSEA (Open DIStributed Search Engine Architecture) that is currently under development in our group. ODISSEA attempts to address both of the above issues, by providing a "distributed global indexing and query execution service" that can be used for content residing inside or outside of a P2P network. ODISSEA is different in several ways from many other approaches to P2P search, as explained below. It encounters some basic challenges typical of those that arise when implementing more dynamic applications involving frequent updates on P2P systems, leading to interesting algorithmic problems and solutions. We describe and discuss the basic design choices and motivation and give some initial results, with focus on the issue of efficient distributed query processing.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.1">ODISSEA Design Overview</head><p>ODISSEA is a distributed global indexing and query execution service, i.e., a system that maintains a global index structure under document insertions and updates and node joins and failures, and that executes simple but general classes of search queries in an efficient manner. This system provides the lower tier of a proposed two-tier search infrastructure. In the upper tier, there are two classes of clients that interact with this P2P-based lower tier:</p><p>1. Update clients insert new or updated documents into the system, which stores and indexes them. An update client could be a crawler inserting crawled pages, a web server pushing documents into the index, or a node in a file sharing system.</p><p>2. Query clients design optimized query execution plans, based on statistics about term frequencies and correlations, and issue them to the lower tier. Ideally, the lower tier should enable query clients to use or implement various ranking methods.</p><p>There are two main differences that distinguish ODISSEA from other P2P search systems. First, the assumption of a two-tier architecture that aims to give as much freedom as possible to clients to implement their own user interfaces and search and ranking policies. This is motivated by the goal of providing an "open" search infrastructure that allows the creation of a rich variety of client-based search and navigation tools running on user desktops. There are trade-offs between efficiency and flexibility that may limit the full realization of this goal, and one of our main research goals is to investigate these trade-offs. The second difference is our assumption of a global inverted index structure. Many current approaches (see <ref type="bibr" target="#b14">[15,</ref><ref type="bibr" target="#b18">19,</ref><ref type="bibr" target="#b25">26]</ref> for exceptions) to full-text search in P2P systems assume a local inverted index, where each node maintains an index for all local documents (or the documents of a few surrounding nodes), and queries are broadcast to all, or on average at least a significant fraction, of the nodes, in order to get the best results. In a global index, the inverted index for a particular term (word) is located at a single node, or partitioned over a small number of nodes in some hybrid organizations. Thus, queries with multiple keywords require "combining" the data for the different keywords over the network, at possibly significant cost. We discuss this decision later as it has consequences for the overall design. as update client, and two query clients (one client-based and one as a webbased search service). Also shown are indexes for the words "chair" and "table", and a node holding the document http://poly.edu. <ref type="figure" target="#fig_0">Figure 1</ref> shows the basic design. We decided to implement the system on top of an underlying global address space provided by a DHT structure, in particular Pastry <ref type="bibr" target="#b27">[28]</ref>. Each object is identified by a hash of its name (i.e., a URL or a string such as index://chair for the index structure for the term chair) and is assigned a location determined by the DHT mapping. Thus, the only way to move an object is to rename it, resulting in a mapping to a random other node. (We note that the real mapping scheme is actually more complicated, to enable replication and load balancing.)</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.2">Target Applications</head><p>We have four main application scenarios that motivate our research:</p><p>(1) Search in P2P networks: To provide full-text search for large document collections located within P2P communities.</p><p>(2) Search in large intranet environments: Large organizations may use distributed search to share machine resources within more controlled and maybe less bandwidth-limited environments.</p><p>(3) Web search: Our most ambitious application is a P2P-based search infrastructure for the web that provides an alternative to the major search engines, with a powerful API (more low-level than, e.g., the Google API) that supports the anticipated shift towards client-based search tools that exploit the resources of todays desktop machines. This scenario may not be feasible in the near term but we believe still deserves study.</p><p>(4) Search middleware: Instead of inserting documents, clients could directly insert "postings", i.e., index entries. The system would then act as "global middleware" on top of a system of local index structures, where nodes might periodically insert some of their postings into the system. The middleware could then use a combination of local and global indexes for query processing, resulting in increased efficiency for certain queries.</p><p>Paper outline: In the next section we justify our main design decisions and assumptions. Technical details and preliminary experimental results on query processing are provided in Section 3. Section 4 discusses related work, and Section 5 mentions some open problems. A more detailed version of this paper appears in <ref type="bibr" target="#b31">[32]</ref>, and up to date information on the ODISSEA project is available at http://cis.poly.edu/westlab/odissea/.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">DISCUSSION AND JUSTIFICATION</head><p>Two-tier approach: This choice was originally motivated by the web search application scenario. Given the expected increases in speed and bandwidth of desktop systems, we see the potential for a rich variety of novel search and navigational tools and interfaces that more fully exploit client computing resources, and that rely on access to a powerful lower-level web search infrastructure. These tools may perform a large number of web server or search engine accesses during a single user interaction, in order to prefetch, analyze, aggregate, and render content from various sources into a highly optimized form. Early examples of these types of client-based tools are browsing assistants such as the Alexa and Google Toolbars, Zapper, Leticia and PowerScout <ref type="bibr" target="#b19">[20]</ref>, the Stanford Power Browser <ref type="bibr" target="#b7">[8]</ref>, or tools built with the Google API. Specialized search engines (Google News, citeSeer) or meta engines could also be supported by such an infrastructure.</p><p>Thus, the proposed system could be used to provide such a lowerlevel search infrastructure, with an powerful open and agnostic API that is accessed by client-and proxy-based tools. By agnostic, we mean an API that is not limited to a single method for ranking pages (e.g., the Google API, which returns pages according to Google's ranking strategy), but that ideally allows clients to implement their own ranking strategies. There clearly are limits and trade-offs to this goal. The most general solution of performing most of the ranking at the client requires large amounts of data to be transferred. On the other hand, we conjecture that limited but powerful classes of ranking functions could be efficiently supported by providing appropriate "hooks" and algorithmic techniques inside the system. Global vs. local index: The other important decision is the use of a global index instead of the more commonly used local index organization. We now define some terms. First, an inverted index for a document collection is a data structure that contains for each word in the collection a list of all its occurrences, or a list of postings. Each posting contains the document ID of the occurrence of the word, its position inside the document, and other information such as whether the word is in the title or in bold face. Each postings list is best visualized as an array sorted by document ID.</p><p>In a local index organization, each node creates its own index for all documents that are locally stored. Thus, every node will have its own small postings list for common words such as chair or table, and a query chair, table is first broadcast to all nodes and then the results are combined. In a global index organization, each node holds a complete global postings list for a subset of the words, as determined, e.g., by a hash function. Thus, every node has a smaller number of longer lists, and under the standard query evaluation strategy a query chair, table is first routed to the node holding the list for chair (the shorter list), which then sends its complete list to the node holding the list for table. We emphasize here that our approach does in fact not send the entire list, as explained later. There have been a number of performance comparisons between local and global index organizations and several hybrid organizations on parallel architectures <ref type="bibr" target="#b2">[3,</ref><ref type="bibr" target="#b8">9,</ref><ref type="bibr" target="#b33">34]</ref>, but these do not directly apply to widely distributed environments.</p><p>The main issue with local index organizations is that all or most nodes need to be contacted for most queries, and thus such schemes are unlikely to scale beyond a few hundred nodes. There have been attempts to overcome this issue by routing queries only to those nodes that are likely to have good results 1 or are in the vicinity <ref type="bibr" target="#b10">[11,</ref><ref type="bibr" target="#b17">18,</ref><ref type="bibr" target="#b28">29]</ref>. However, we do not believe that this approach will scale if result quality is a major concern, since document collections are simply not naturally clustered in a way that allows queries to be routed to only a small fraction of the nodes. This is certainly the case for the current web, where a search infrastructure based on local indexes at each site would be extremely inefficient. This could be somewhat improved by clustering the entire document collection, though this seems quite challenging to do <ref type="bibr" target="#b18">[19]</ref>. Moreover, the statistics needed to intelligently route queries are quite large for large collections and many nodes as the number of distinct words grows with collection size; the existing literature has only evaluated collections up to a few gigabytes.</p><p>In a global index organization, however, large amounts of data need to be transmitted between nodes, since large collections result in lists of megabytes or more for all except fairly rare words. This has led some people to reject global indexes as unrealistic for environments with limited bandwidth, and for moderate numbers of nodes a local index is probably a better choice. However, we believe that this problem can be overcome through smart algorithmic techniques. One technique was recently applied in this context in <ref type="bibr" target="#b18">[19,</ref><ref type="bibr" target="#b25">26]</ref>, where Bloom filters are used to decrease the cost of intersecting lists of postings over the network, though this only improves results by a constant factor. We study in Subsection 3.1 how recent results on top-ยก queries in the database literature <ref type="bibr" target="#b12">[13]</ref> can be applied to asymptotically reduce communication requirements. We believe that these techniques, combined with other query optimization techniques, allow interactive response times even on massive data sets.</p><p>Crawling punt: We assume in the web search application that crawling is performed by crawling clients that fetch and insert documents. The main reason is that from our own experiences with large-scale crawling <ref type="bibr" target="#b29">[30]</ref> we are not sure a P2P solution is appropriate. Large crawls generate many management issues due to queries or complaints from web site operators and network administrators. It is important to be able to reconfigure a crawler quickly to avoid web sites or subnetworks or to modify its behavior, and failure to do so can result in problems with local administrators or upstream providers. <ref type="bibr" target="#b1">2</ref> Moreover, smart crawling strategies beyond BFS are hard to implement in a P2P environment without a centralized scheduler.</p><p>Thus, we would expect that a handful of powerful crawling clients would provide most documents, and we plan to use our Polybot crawler <ref type="bibr" target="#b29">[30]</ref> to initially populate the system with data. It might be more feasible to incorporate recrawling into the system, though. Thus, an inserted page could be labeled with an expiration date, after which it is automatically refreshed by the node holding the page. Alternatively, web sites could also push their pages into the system. P2P systems and fault tolerance: Utilizing idle remote resources is one of the main motivations for building P2P systems. However, there is a fundamental challenge facing applications that use large amounts of disk space on remote nodes, such as a search engine. Given current network speeds, it would take days or weeks to transfer enough data to a newly joined node to utilize any significant fraction of a ยข ยก ยฃ ยก GB disk, and during this time the node would probably consume more resources than it adds to the system. Thus, such applications are maybe best restricted to the more stable end of the P2P spectrum, where most nodes remain in the system for longer times.</p><p>Our system design relies on this assumption of a more stable system. However, we distinguish between nodes that are temporarily unavailable and nodes that have permanently left the system. When a node rejoins after an extended period of unavailability, an interesting problem arises: how do we efficiently synchronize its data structures, in this case the index structures, with an up-to-date copy held by another node, to incorporate any updates missed while unavailable? Other problems involve distinguishing between failed and unavailable nodes, when to rebuild data on failed or unavailable nodes, and how quickly data should be pushed to newly joined nodes.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">QUERY PROCESSING IN ODISSEA</head><p>In this section we describe query processing in the proposed system. A naive implementation of ranked queries with a global index structure would result in transfers of many megabytes of data for many queries from a typical query load. Since realistic bandwidths in WAN environments are on the order of a few hundred Kb/s, this would result in response times of many seconds or even minutes. We now describe how to adapt recent techniques by Fagin and others <ref type="bibr" target="#b11">[12,</ref><ref type="bibr" target="#b12">13,</ref><ref type="bibr" target="#b13">14]</ref> to our scenario, and give measurements of the expected savings based on a real search engine query log and a set of ยค ยฅ ยก million web pages from a recent crawl that we have carried out.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Background and Algorithmic Techniques</head><p>Ranking in search engines: We first give some background on ranking in search engines. Search engines rank pages based on many criteria, including classical term-based techniques from IR, global page ranks as provided by Pagerank <ref type="bibr" target="#b4">[5]</ref>  The first family includes the common families of term-based ranking functions used in IR, where we add up the scores of each document with respect to all words in the queries. In particular, this includes the well-known class of cosine measures; see, e.g., <ref type="bibr" target="#b36">[37]</ref>. The second formula adds a query-independent value 5 ! # &amp; to the score of each page; this could for example be a suitably normalized Pagerank value. Thus, these two families include many important ranking functions, and we could in fact use any other monotone function instead of addition to combine the various functions in the above formula. Note however that techniques using the distances between the terms in a document would lead to an additional function</p><formula xml:id="formula_0">@ ! # $ A ยง ยจ ยฉ ยง &amp;</formula><p>that depends on all terms; this would impact the efficiency of our methods.</p><p>Queries to search engines have on average less than three terms, and engines typically evaluate a query by considering all documents in the intersection of the inverted lists, i.e., all documents that contain all search terms. <ref type="bibr" target="#b2">3</ref> An information-theoretic argument shows that determining the intersection of two lists located at different nodes requires transmitting an amount of data linear in the size of the shorter list. However, recent work in the database community <ref type="bibr" target="#b12">[13]</ref> shows how to evaluate top-ยก queries without scanning the entire intersection. Fagin's Algorithm (FA): We now describe the first algorithm, which was originally proposed in <ref type="bibr" target="#b11">[12]</ref> for the case of multimedia queries, e.g., to retrieve images from an image database. We <ref type="bibr">will</ref>  ; note that and w ill usually be different documents. Also, whenever we encounter a document in one list, we immediately perform a lookup into the other list to compute its complete score. As soon as we have found ยก items with score larger than the current , we return these as results. It can be shown that TA is correct and always terminates at least as early as FA, though the asymptotic bounds are the same.</p><p>Integrating query-independent scores: We can naively adapt both algorithms to the second family of ranking functions as follows. , so that the total score is the sum of the sort attributes from both lists. Note that this should increase efficiency, as it introduces significant correlation between the orderings of the two lists.</p><p>However, in reality we cannot combine term-based and link-based scores simply by adding them up. Instead, it is preferable to normalize the scores in a query-dependent way that minimizes the effect of outliers. Following <ref type="bibr" target="#b26">[27]</ref> we do this by normalizing using the mean of the top-ยค ยก ยฃ ยก term-based and link-based scores that appear in the two (or more) lists; see <ref type="bibr" target="#b26">[27]</ref> for details. This means that the inverted lists cannot be completely organized in sorted order before the arrival of the query, though they can usually be kept approximately sorted. In our distributed setting this is not a problem since we are interested in minimizing bandwidth consumption rather than CPU cost.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Experimental Results on Real Data</head><p>We run some initial experiments to determine the potential savings of these schemes. Note that these experiments are in a centralized setting; we consider distributed implementations in the next subsection. There have been previous evaluations of the FA and TA algorithms on data sets from other application domains, but not on large-scale web data or in conjunction with global measures such as Pagerank.</p><p>For the experiments, we use queries selected from a log of over ยค million queries posted to the Excite search engine on December as an appropriately normalized Pagerank score computed from a web graph extracted from our crawl. <ref type="table">Table 1</ref> shows the average number of postings that have to be scanned from each list under the various algorithms. In the first row we have the number of postings in the shorter of the two inverted lists; this represents the cost incurred by the unoptimized algorithm where we transmit the entire list. In the next line, we have the number of postings that are scanned if we are only interested in getting an arbitrary ยก elements that contain both query terms. This is a reasonable lower bound 4 on what we could hope to achieve with the optimized methods, and was measured by ordering indexes by document ID and scanning from the beginning until ยก elements in the intersection are found. We note that this cost can in some cases be quite significant, say for two inverted lists of length</p><formula xml:id="formula_1">% " ! ยจ &amp;</formula><p>where we might have to scan most of the lists. In the experiments, we also include an idealized algorithm called CA (Clairvoyant Algorithm) that stops as soon as it has encountered the top-ยก elements; this shows the cost between finding the top-ยก results and being certain that we have found them. We show results for FA, TA, and CA, with and without Pagerank. All three algorithms perform significantly better than the basic algorithm. The results for TA and CA show that we can usually terminate the scan much earlier without impact on the result. Including the Pagerank score usually results in improved performance. The results indicate that an appropriate distributed protocol based on these algorithms might have the potential to achieve interactive response times in WAN environments even for massive data sets.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">A Simple Distributed Protocol</head><p>We now adapt these techniques to a highly distributed environment with limited bandwidth as well as high latency. Thus, we have to limit ourselves to one or a few roundtrips between the nodes holding different inverted lists. There is also a potential bottleneck in the random lookups performed by the FA and TA algorithms. In a high-bandwidth environment, this is a serious drawback of the algorithms since large index structures have to reside on disk. As a result, other pruning methods have been proposed for this case <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b23">24]</ref> that avoid such accesses but instead need to scan a significant part of the inverted lists. In a P2P environment this is less of a concern, and a large set of random lookups could be resolved by performing a local scan over the inverted list. Following is our proposed distributed implementation, called DPP (Distributed Pruning Protocol), for the case of two search terms and a ranking function from the first family (i.e., without 5 ! # &amp; ).</p><p>(   One remaining question is how to choose the value of <ref type="bibr">'</ref> . This could be done by deriving appropriate formulae based on extensive testing. Alternatively, we could use sampling-based methods <ref type="bibr" target="#b5">[6]</ref> to estimate the number of documents appearing in both prefixes. In either case, a wrong estimate could be corrected at the cost of an extra roundtrip.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4">Evaluation of DPP</head><p>In our system, we open a new TCP connection between the participating nodes for each query. To model the effect of the TCP congestion window on performance, which is significant in our scenario, we use a model for file transfer cost under TCP recently proposed in <ref type="bibr" target="#b35">[36]</ref> with typical parameters for a broadband connection between the East and West coast of the US. 5 In particular, we assume a roundtrip signaling delay of ยฉ ยก , and a bandwidth limit between ยก ยฃ ยก kbits and mbits per second on the first and last leg. For both directions, we incur the cost due to the congestion window, and for the first message we have the additional cost of establishing the connection.</p><p>We assume each posting is transmitted in $ bytes, as follows: We hash the $ ยก -bit document IDs down to bits, where is chosen such that the likelyhood of a collision between the transmitted prefix and the other list is less than, say, ยก ยค . We then encode the hashes using standard gap compression techniques <ref type="bibr" target="#b36">[37]</ref>. This results in at most ยก to $ bits per hash; the remaining bits are used for an approximation of the term value</p><formula xml:id="formula_2">4 ! # $ ยง ยฉ ยจ &amp; .</formula><p>The protocol could be adapted to recognize when a collision occurs, in which case an additional roundtrip is used to fix the problem. (Observe that the scheme is a bit like using a very precise compressed Bloom filter with one hash function.) <ref type="table" target="#tab_5">Table 2</ref> shows the estimated cost of the algorithm, using the same data set as before. There are two assumptions in the measurements. by using the results of the experiments on the TA algorithm. This is optimistic since the parties do not have these results available; on the other hand, the results from the CA algorithm indicate that even a low estimate would often return the correct result (or we could choose an additional roundtrip to be sure). Second, we do not measure internal computation within nodes. Of course, this internal computation is also incurred by standard (non-P2P) search engines, and most of it is overlapped with communication anyway. We believe that neither of these assumptions changes the measurements fundamentally.</p><p>Large engines such as Google in fact use data sets that are ยฅ ยก to ยก times larger than ours. According to the theoretical bound ofยจยก ofยจ ofยจยก <ref type="bibr" target="#b4">5</ref> The model in <ref type="bibr" target="#b35">[36]</ref> is similar to others that have been proposed. this would result in an additional factor of about ยฉ on the amount of data transmitted. Use of more than two keywords would also increase communication. On the other hand, the above algorithm is really only a baseline as discussed in the following.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.5">Optimizing Query Execution Plans</head><p>The above protocol is a first step towards efficient query execution. There are two ways to get further improvements: (1) use of Bloom filters as studied in <ref type="bibr" target="#b25">[26]</ref>, and (2) use of a hybrid partitioning where large inverted lists are split among several nodes <ref type="bibr" target="#b31">[32]</ref>. We note that the second approach does not actually decrease the total cost of a query, but it can improve latency by splitting communication and computation among several nodes. As it turns out, Bloom filters can be combined in several interesting ways with our protocol. The end result is that there are a large number of possible ways to execute a query on three or more search terms. We are currently studying in detail how to derive the best possible plans.</p><p>The design of a good query plan is up to the query client in our system, and is done in two phases. The client first inquires basic statistics such as term frequencies, mean values for the normalization, and possibly samples <ref type="bibr" target="#b5">[6]</ref> to estimate term correlations from the system. The system returns the statistics and the IP addresses of the nodes holding the lists. This type of information can be very efficiently cached in the system as it is small compared to the rest of the data. In fact we really only need to keep statistics for inverted lists of significant length (e.g., more than a few thousand postings).</p><p>Given the statistics, the client knows which term has the shortest inverted list, and which of the lists are partitioned between several nodes. Next, a query plan is designed as a directed labeled graph, where the nodes are nodes in the network identified by address, and the edges are labeled with the operation to be performed, e.g., send complete list if small, send a Bloom filter of the list, send a prefix as done in the baseline DPP protocol, or send a Bloom filter of a prefix.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">RELATED WORK</head><p>There has been a lot of recent interest in the pruning techniques of Fagin et. al <ref type="bibr" target="#b11">[12,</ref><ref type="bibr" target="#b13">14]</ref>; see also <ref type="bibr" target="#b12">[13]</ref> for a survey and <ref type="bibr" target="#b9">[10]</ref> for early related ideas. Most of the interest has been focused on multimedia and meta search scenarios, and we are not aware of previous applications in a peer-to-peer environment. On the other hand, there has also been significant work in the IR community, much of it preceding the above, on pruning techniques for vector space queries. Some early work is described in <ref type="bibr" target="#b6">[7,</ref><ref type="bibr" target="#b16">17,</ref><ref type="bibr" target="#b23">24,</ref><ref type="bibr" target="#b34">35,</ref><ref type="bibr" target="#b37">38]</ref>, and more closely related recent work is in <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b1">2]</ref>. One difference between these two strains of work is that in the IR case, a random lookup of a posting is much more expensive than scanning. Thus, recent pruning techniques from IR typically restrict access to scans, resulting in more limited savings. We are mainly concerned with bandwidth, making this less of an issue.</p><p>There has been significant interest in search in distributed and P2P systems over the last few years. We note, however, that the problem of full-text search on terabyte-size collections is different from that on smaller collections or on systems that only index titles and keywords for multimedia objects (e.g., mp3 files). Some recent work on text search in P2P systems with local index organization appears in <ref type="bibr" target="#b10">[11,</ref><ref type="bibr" target="#b17">18,</ref><ref type="bibr" target="#b28">29,</ref><ref type="bibr" target="#b32">33]</ref>. As explained, the global index organization is one of the aspects that distinguish our system from others. Another very different approach to distributed search is taken by systems such as JXTA <ref type="bibr" target="#b21">[22]</ref>, STARTS <ref type="bibr" target="#b15">[16]</ref>, and the Z39.50 standard <ref type="bibr" target="#b22">[23]</ref>, which are mainly concerned with issues of combining outputs from diverse search tools.</p><p>Global index organizations in a peer-to-peer environment have recently been discussed in <ref type="bibr" target="#b14">[15,</ref><ref type="bibr" target="#b18">19,</ref><ref type="bibr" target="#b25">26]</ref>. The work by Reynolds and Vahdat <ref type="bibr" target="#b25">[26]</ref> considers the benefits of using Bloom filters instead of sending an entire inverted list during query execution. Subsequent work in <ref type="bibr" target="#b18">[19]</ref> estimates the potential benefit of using a combination of techniques, including Bloom filters, clustering, compression, caching, and adaptive set intersection, compared to the naive algorithm that transfers the entire list. The paper concludes that these techniques together save a significant constant factor and bring the approach close to feasibility for terabyte data sets. The authors also mention the possibility of using Fagin's pruning technique <ref type="bibr" target="#b12">[13]</ref> for additional improvements, but no details are provided. Combining Fagin's technique with those in <ref type="bibr" target="#b18">[19]</ref> is possible, as indicated in Subsection 3.5, but the details are tricky and the returns diminish as more techniques are applied.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">OPEN QUESTIONS AND FUTURE WORK</head><p>In this paper, we have given an overview of the ODISSEA system, and presented some early results on query processing in the system. There are numerous open questions for future work. We are currently working on a framework for generating optimized query execution plans for multi-keyword queries based on a combination of pruning techniques, Bloom filters, and compression. Once this is complete, we plan to perform a more thorough experimental evaluation for queries with multiple keywords and phrase searches, and for ranking functions that use term distance within documents.</p><p>We are also studying techniques for synchronizing outdated indexes and for load balancing and rebuilding of lost replicas in an environment where nodes hold large amounts of data but may be temporarily unavailable. Beyond these specific items, the general question remains whether the near future will see massive P2P-based systems for challenging applications such as web search and large-scale IR, beyond simple applications such as file sharing.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 : ODISSEA as a web search infrastructure, with a web crawler</head><label>1</label><figDesc>Figure 1: ODISSEA as a web search infrastructure, with a web crawler</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>(</head><label></label><figDesc>4) Node &amp; performs lookups into its own list for the postings re- ceived from ' , and determines the overall top ยก .</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head></head><label></label><figDesc>First, we choose the length ' of the prefix that should be sent from &amp; to '</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0" validated="false"><head></head><label></label><figDesc>and similar methods, whether text is in bold face or within a hyperlink, and distances between the search terms in the documents, among others.</figDesc><table>Formally, a ranking 
function is a function 
ยฆ 
that, given a query consisting of a set of 
search terms 
 ยง 
ยฉ ยจ 
ยฃ 
 ยง 
ยฃ 
ยฉ 



 ยง 
ยฉ 


, assigns to each document a score 

ยฆ 
" ! 
# 
$ 
 ยง 
ยจ 





 ยง 


% 
&amp; 
. The top-

ยก 

ranking problem is then the prob-
lem of identifying the 

ยก 

documents in the collection with the highest 
scores. We focus on two families of ranking functions, 

ยฆ 
" ! 
# ' 
&amp; 
) ( 


0 
% 1 
2 

3 
ยจ 

4 
! 
# 
$ 
 ยง 

2 

&amp; 
and 
ยฆ 
" ! 
# ' 
&amp; 
) ( 
6 5 
! 
# 
&amp; 
8 7 


0 
% 1 
2 

3 
ยจ 

4 
! 
# 
$ 
9  ยง 

2 

&amp; 


</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1" validated="false"><head></head><label></label><figDesc>state them directly for our scenario, first for the case of the first family of rankingdocuments. Also, for each doc- ument that was encountered in only one of the lists, perform a lookup into the other list to determine the score of the docu- ment. Return the ยก documents with the highest score. It is not difficult to see that this indeed returns the top- ยก results overall. It is shown in [12] that if the orderings of documents in the two lists are independent, then the algorithm terminates after looking at only ยง ! ยฉ ยจ ยก &amp; entries in each list, where is the number of documents in the collection (not the length of the list). In the case of queries with terms, the bound becomes ยง ! ยก &amp; . Thus, for long lists this significantly improves over scanning the entire list. If terms are positively correlated, then the result improves, while it gets worse for negatively correlated terms. Note that the result is independent of the actual "shapes" of the distributions</figDesc><table>functions without 
5 
! 
# 
&amp; 
. Intuitively, the algorithm exploits the fact that an item that is ranked in the top is likely to be ranked very high in at 
least one contributing subcategory. 
Consider the inverted lists for a search query with two terms 
 ยง 
ยจ 
and 

 ยง 
ยฃ 
. For the moment, assume they are located on the same machine, 
and that the postings in the list are pairs 
! 
# 
$ 
4 
! 
# 
$ 
 ยง 

2 

&amp; 
&amp; 
, 


ยข ยก 
ยค ยฃยก 


ยฉ ยค 

ยฆ ยฅ 

, 
where is an integer identifying the document and 
4 
! 
# 
$ 
 ยง 

2 

&amp; 
is real-
valued. Assume each inverted list is sorted by the second attribute, so 
that documents with largest 
4 
! 
# 
$ 
 ยง 

2 

&amp; 
are at the start of the list. Then 
the following algorithm, called FA, computes the top-

ยก 

results: 

(1) Scan both lists from the beginning, by reading one element 
from each list in every step, until there are 

ยก 

documents that 
have each been encountered in both of the lists. 
(2) Compute the scores of these 

ยก 

of the 
4 
! 
# 
$ 
 ยง 

2 

&amp; 
, though refinements 
could potentially exploit special distributions such as Zipfians. 
Threshold Algorithm (TA): The following refinement was pro-
posed by several authors; see [13] for a discussion. We again si-
multaneously scan both lists, so that in each step we read an item 
! 
# 
$ 
4 
! 
# 
$ 
 ยง 
ยจ 
ยข &amp; 
&amp; 
from the first and an item 
! 
# 

4 
! 
# 

 ยง 

&amp; 
&amp; 
from the sec-
ond list. In each step we compute 
( 
4 
! 
# 
$ 
 ยง 
ยจ 
&amp; 
7 
4 
! 
# 

 ยง 
ยฃ 
&amp; 
</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_5" validated="false"><head>Table 2 :</head><label>2</label><figDesc></figDesc><table>Communication costs and times for top-ยค 
ยก 
queries. 

ment that 

&amp; 

somehow knows the best value of 
' 
.) Also, let 



2 

ยก 
be the smallest (last) value 
4 
! 
# 
$ 
9  ยง 
ยจ 
ยข &amp; 
transmitted. 

(2) Node 

' 

receives the postings from 

&amp; 

, and performs lookups 
into its own list to compute the total scores of the corresponding 
documents. Retain the 

ยก 

documents with the highest score. Let 

ยฃ ยข 
be the smallest score among these. 

(3) Node 

' 

now transmits to 

&amp; 

all postings among its first 
' 
post-
ings with 
4 
! 
# 
$ 
9  ยง 

&amp; 
ยฅ ยค 

ยฃ ยข 
 ยง ยฆ 
ยจ 


2 

ยก 
, together with the total scores 
of the 

ยก 

documents from Step (2). 

</table></figure>

			<note place="foot" n="1"> This is also known as the database selection problem [21]. 2 Of course, for certain types of crawling activities, e.g., to surreptitiously monitor certain web sites, a P2P solution may be preferable for the very same reasons.</note>

			<note place="foot" n="3"> This is in contrast to &quot;traditional&quot; IR systems that tend to consider the union of the lists, and where typical queries consist of a dozen terms or more. Our results do not really depend on this choice.</note>

			<note place="foot" n="4"> If we discount correlations between query terms.</note>
		</body>
		<back>

			<div type="acknowledgement">
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Vector-space ranking with effective early termination</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Anh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Kretser</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Moffat</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 24th Annual SIGIR Conf</title>
		<meeting>of the 24th Annual SIGIR Conf</meeting>
		<imprint>
			<date type="published" when="2001-09" />
			<biblScope unit="page" from="35" to="42" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Compressed inverted files with reduced decoding overheads</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Anh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Moffat</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 21st Annual SIGIR Conf</title>
		<meeting>21st Annual SIGIR Conf</meeting>
		<imprint>
			<date type="published" when="1998" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Distributed query processing using partitioned inverted files</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Badue</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Baeza-Yates</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Ribeiro-Neto</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Ziviani</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 9th String Processing and Information Retrieval Symposium (SPIRE)</title>
		<meeting>of the 9th String essing and Information Retrieval Symposium (SPIRE)</meeting>
		<imprint>
			<date type="published" when="2002-09" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Lessons from giant scale services</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Brewer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Internet Computing</title>
		<imprint>
			<biblScope unit="page" from="46" to="55" />
			<date type="published" when="2001-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">The anatomy of a large-scale hypertextual web search engine</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Brin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Page</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 7th WWW Conference</title>
		<meeting>of the 7th WWW Conference</meeting>
		<imprint>
			<date type="published" when="1998" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">On the resemblance and containment of documents</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Broder</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Compression and Complexity of Sequences</title>
		<imprint>
			<date type="published" when="1997" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Optimization of inverted vector searches</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Buckley</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Lewit</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 8th SIGIR Conf. on Research and Development in Information Retrieval</title>
		<meeting>8th SIGIR Conf. on Research and Development in Information Retrieval</meeting>
		<imprint>
			<date type="published" when="1985-06" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Power browser: Efficient web browsing for PDAs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Buyukkokten</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Garcia-Molina</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Paepcke</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Winograd</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the Human-Computer Interaction Conference</title>
		<meeting>of the Human-Computer Interaction Conference</meeting>
		<imprint>
			<date type="published" when="2000" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Evaluating the performance of distributed architectures for information retrieval using a variety of workloads</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Cahoon</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Mckinley</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Lu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Information Systems</title>
		<imprint>
			<biblScope unit="volume">18</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="1" to="43" />
			<date type="published" when="2000-01" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Optimizing queries over multimedia repositories</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Chaudhuri</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Gravano</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Data Engineering Bulletin</title>
		<imprint>
			<biblScope unit="volume">19</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="45" to="52" />
			<date type="published" when="1996" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Text-based content search and retrieval in ad hoc p2p communities</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Cuenca-Acuna</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Nguyen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of The Int. Workshop on Peer-to-Peer Computing</title>
		<meeting>of The Int. Workshop on Peer-to-Peer Computing</meeting>
		<imprint>
			<date type="published" when="2002-05" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Combining fuzzy information from multiple systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Fagin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM Symp. on Principles of Database Systems</title>
		<imprint>
			<date type="published" when="1996" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Combining fuzzy information: an overview</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Fagin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGMOD Record</title>
		<imprint>
			<date type="published" when="2002-06" />
			<biblScope unit="volume">31</biblScope>
			<biblScope unit="page" from="109" to="118" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Optimal aggregation algorithms for middleware</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Fagin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Lotem</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Naor</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of ACM Symp. on Principles of Database Systems</title>
		<meeting>of ACM Symp. on Principles of Database Systems</meeting>
		<imprint>
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title level="m" type="main">A keyword-set search system for peer-to-peer networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Gnawali</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2002" />
		</imprint>
	</monogr>
	<note>Master&apos;s thesis, MIT</note>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">STARTS: Stanford Proposal for Internet Meta-Searching</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Gravano</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Chang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Garcia-Molina</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Paepcke</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM SIGMOD Int. Conf. on Management of Data</title>
		<imprint>
			<date type="published" when="1997" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Retrieving records from a gigabyte of text on a minicomputer using statistical ranking</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Harman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Candela</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. of the American Society for Information Science</title>
		<imprint>
			<biblScope unit="volume">41</biblScope>
			<biblScope unit="issue">8</biblScope>
			<date type="published" when="1990-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<title level="m" type="main">FASD: a fault-tolerant, adaptive, scalable, distributed search engine</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename></persName>
		</author>
		<imprint>
			<date type="published" when="2002-06" />
		</imprint>
	</monogr>
	<note>Unpublished manuscript</note>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">On the feasibility of peer-to-peer web indexing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Loo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Hellerstein</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Kaashoek</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Karger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Morris</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 2nd Int. Workshop on Peer-to-Peer Systems</title>
		<meeting>of the 2nd Int. Workshop on Peer-to-Peer Systems</meeting>
		<imprint>
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Exploring the web with reconnaissance agents</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Lieberman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Fry</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Weitzman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Communications of the ACM</title>
		<imprint>
			<biblScope unit="volume">44</biblScope>
			<biblScope unit="issue">8</biblScope>
			<biblScope unit="page" from="69" to="75" />
			<date type="published" when="2001-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Building efficient and effective metasearch engines</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Meng</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Yu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Liu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Computer Surveys</title>
		<imprint>
			<date type="published" when="2002-03" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title/>
		<ptr target="http://www.jxta.org" />
	</analytic>
	<monogr>
		<title level="j">Sun Microsystems. JXTA</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<monogr>
		<title level="m" type="main">Information Retrieval (Z39.50): Application Service Definition and Protocol Specification</title>
		<imprint>
			<date type="published" when="1995" />
			<publisher>National Information Standards Organization</publisher>
			<pubPlace>NISO, Bethesda, MD</pubPlace>
		</imprint>
	</monogr>
<note type="report_type">Technical report</note>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Filtered document retrieval with frequency-sorted indexes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Persin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Zobel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Sacks-Davis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. of the American Society for Information Science</title>
		<imprint>
			<biblScope unit="volume">47</biblScope>
			<biblScope unit="issue">10</biblScope>
			<date type="published" when="1996-05" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">A scalable content-addressable network</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Ratnasamy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Francis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Handley</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Karp</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Shenker</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the ACM SIGCOMM Conference</title>
		<meeting>of the ACM SIGCOMM Conference</meeting>
		<imprint>
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<monogr>
		<title level="m" type="main">Efficient peer-to-peer keyword searching</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Reynolds</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Vahdat</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2002-02" />
		</imprint>
	</monogr>
	<note>Unpublished manuscript</note>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">The intelligent surfer: Probabilistic combination of link and content information in pagerank</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Richardson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Domingos</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Advances in Neural Information Processing Systems</title>
		<imprint>
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">Pastry: Scalable, distributed object location and routing for large-scale peer-to-peer systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Rowstron</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Druschel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IFIP/ACM Int. Conf. on Distributed Systems Platforms</title>
		<imprint>
			<date type="published" when="2001-11" />
			<biblScope unit="page" from="329" to="350" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">An mdp-based peer-to-peer search server network</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Shen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">L</forename><surname>Lee</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 3th International Conf. on Web Information Systems Engineering</title>
		<meeting>of the 3th International Conf. on Web Information Systems Engineering</meeting>
		<imprint>
			<date type="published" when="2002" />
			<biblScope unit="page" from="269" to="278" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">Design and implementation of a high-performance distributed web crawler</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Shkapenyuk</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Suel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the Int. Conf. on Data Engineering</title>
		<meeting>of the Int. Conf. on Data Engineering</meeting>
		<imprint>
			<date type="published" when="2002-02" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">Chord: A scalable peer-to-peer lookup service for internet applications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Stoica</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Morris</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Karger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">F</forename><surname>Kaashoek</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Balakrishnan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of ACM SIGCOMM Conference</title>
		<meeting>of ACM SIGCOMM Conference</meeting>
		<imprint>
			<date type="published" when="2001-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<monogr>
		<title level="m" type="main">Odissea: A peer-to-peer architecture for scalable web search and information retrieval</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Suel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Mathur</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Delis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Kharrazi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Long</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Shanmugasunderam</surname></persName>
		</author>
		<idno>TR-CIS-2003-01</idno>
		<imprint>
			<date type="published" when="2003" />
		</imprint>
		<respStmt>
			<orgName>Polytechnic University</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">pSearch: Information retrieval in structured overlays</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Tang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Xu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Mahalingam</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of ACM HotNets-I</title>
		<meeting>of ACM HotNets-I</meeting>
		<imprint>
			<date type="published" when="2002-10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title level="a" type="main">Performance of inverted indices in distributed text document retrieval systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Tomasic</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Garcia-Molina</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 2nd Int. Conf. on Parallel and Distributed Information Systems (PDIS)</title>
		<meeting>of the 2nd Int. Conf. on Parallel and Distributed Information Systems (PDIS)</meeting>
		<imprint>
			<date type="published" when="1993" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<monogr>
		<title level="m" type="main">Query evaluation: strategies and optimizations. Information Processing and Management</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Turtle</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Flood</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1995-11" />
			<biblScope unit="volume">31</biblScope>
			<biblScope unit="page" from="831" to="850" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<analytic>
		<title level="a" type="main">A low-load comparison of TCP/IP and end-to-end circuits for file transfers</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Veeraraghavan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Grobler</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of INET</title>
		<meeting>of INET</meeting>
		<imprint>
			<date type="published" when="2002-06" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<monogr>
		<title level="m" type="main">Managing Gigabytes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><forename type="middle">H</forename><surname>Witten</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Moffat</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">C</forename><surname>Bell</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1999" />
			<publisher>Morgan Kaufmann</publisher>
		</imprint>
	</monogr>
	<note>second edition</note>
</biblStruct>

<biblStruct xml:id="b37">
	<monogr>
		<title level="m" type="main">Implementations of partial document ranking using inverted files. Information Processing and Management</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Wong</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Lee</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1993-09" />
			<biblScope unit="volume">29</biblScope>
			<biblScope unit="page" from="647" to="669" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b38">
	<monogr>
		<title level="m" type="main">Tapestry: An infrastructure for fault-tolerant wide-area location and routing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Zhao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Kubiatowicz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Joseph</surname></persName>
		</author>
		<idno>UCB//CSD-01-1141</idno>
		<imprint>
			<date type="published" when="2000-04" />
		</imprint>
		<respStmt>
			<orgName>UC Berkeley</orgName>
		</respStmt>
	</monogr>
<note type="report_type">Tech. Report</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
